
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aa18  08013d20  08013d20  00023d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e738  0801e738  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801e738  0801e738  0002e738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e740  0801e740  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e740  0801e740  0002e740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e744  0801e744  0002e744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  24000000  0801e748  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de68  24000680  0801edb0  00030680  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400e4e8  0801edb0  0003e4e8  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049edd  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008639  00000000  00000000  00098f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002fd42  00000000  00000000  000a1544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b88  00000000  00000000  000d1288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004f78  00000000  00000000  000d2e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000091ed  00000000  00000000  000d7d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004330a  00000000  00000000  000e0f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001876a3  00000000  00000000  0012427f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c5  00000000  00000000  002ab922  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000070fc  00000000  00000000  002ab9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000680 	.word	0x24000680
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013d04 	.word	0x08013d04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000684 	.word	0x24000684
 80002dc:	08013d04 	.word	0x08013d04

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000694:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000696:	4c05      	ldr	r4, [pc, #20]	; (80006ac <loadWPM+0x18>)
{
 8000698:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800069a:	17c3      	asrs	r3, r0, #31
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80006a2:	f7ff fe75 	bl	8000390 <__aeabi_uldivmod>
 80006a6:	6020      	str	r0, [r4, #0]

}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	24008c38 	.word	0x24008c38

080006b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80006b4:	4c9a      	ldr	r4, [pc, #616]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d12f      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 80006bc:	4a99      	ldr	r2, [pc, #612]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a02      	cmp	r2, #2
 80006c2:	d029      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 80006c4:	4d98      	ldr	r5, [pc, #608]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80006c6:	782a      	ldrb	r2, [r5, #0]
 80006c8:	2a05      	cmp	r2, #5
 80006ca:	d825      	bhi.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 80006cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006d0:	009f0070 	.word	0x009f0070
 80006d4:	000600d9 	.word	0x000600d9
 80006d8:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80006dc:	4a93      	ldr	r2, [pc, #588]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80006de:	2001      	movs	r0, #1
 80006e0:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 80e2 	beq.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80006e8:	4f91      	ldr	r7, [pc, #580]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 80006ea:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80006ec:	2300      	movs	r3, #0
			CarrierEnable(1);
 80006ee:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80006f0:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80006f2:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80006f4:	f003 fdf0 	bl	80042d8 <CarrierEnable>
		TXSwitch(1);
 80006f8:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80006fa:	2404      	movs	r4, #4
		TXSwitch(1);
 80006fc:	f003 fd88 	bl	8004210 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000700:	f005 f876 	bl	80057f0 <HAL_GetTick>
 8000704:	498b      	ldr	r1, [pc, #556]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000706:	4a8c      	ldr	r2, [pc, #560]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000708:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 800070a:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800070c:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000714:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000716:	7013      	strb	r3, [r2, #0]
}
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800071c:	f005 f868 	bl	80057f0 <HAL_GetTick>
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000726:	4290      	cmp	r0, r2
 8000728:	f200 80b9 	bhi.w	800089e <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0c5      	beq.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
 8000730:	f005 f85e 	bl	80057f0 <HAL_GetTick>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	4298      	cmp	r0, r3
 8000738:	d9c0      	bls.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 800073a:	4f80      	ldr	r7, [pc, #512]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 800073c:	2000      	movs	r0, #0
 800073e:	f003 fd67 	bl	8004210 <TXSwitch>
						pk = Saved_pk;
 8000742:	4e7f      	ldr	r6, [pc, #508]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 8000744:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 800074a:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 800074c:	6031      	str	r1, [r6, #0]
 800074e:	e7b5      	b.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	487c      	ldr	r0, [pc, #496]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000754:	f007 ffd6 	bl	8008704 <HAL_GPIO_ReadPin>
 8000758:	b948      	cbnz	r0, 800076e <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800075c:	4a76      	ldr	r2, [pc, #472]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	7811      	ldrb	r1, [r2, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2302      	movne	r3, #2
 8000768:	2301      	moveq	r3, #1
 800076a:	430b      	orrs	r3, r1
 800076c:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4874      	ldr	r0, [pc, #464]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000772:	f007 ffc7 	bl	8008704 <HAL_GPIO_ReadPin>
 8000776:	b948      	cbnz	r0, 800078c <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000778:	4b73      	ldr	r3, [pc, #460]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800077a:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2302      	moveq	r3, #2
 8000788:	430b      	orrs	r3, r1
 800078a:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 800078c:	f005 f830 	bl	80057f0 <HAL_GetTick>
 8000790:	4b68      	ldr	r3, [pc, #416]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4298      	cmp	r0, r3
 8000796:	d9bf      	bls.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800079a:	7813      	ldrb	r3, [r2, #0]
 800079c:	f013 0104 	ands.w	r1, r3, #4
 80007a0:	f000 80b9 	beq.w	8000916 <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a4:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a8:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007aa:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007ac:	7029      	strb	r1, [r5, #0]
 80007ae:	e7b3      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007b4:	f007 ffa6 	bl	8008704 <HAL_GPIO_ReadPin>
 80007b8:	b140      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4861      	ldr	r0, [pc, #388]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007be:	f007 ffa1 	bl	8008704 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 80007c2:	b118      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0798      	lsls	r0, r3, #30
 80007ca:	d0a5      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	485d      	ldr	r0, [pc, #372]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007d0:	f007 ff98 	bl	8008704 <HAL_GPIO_ReadPin>
 80007d4:	b948      	cbnz	r0, 80007ea <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	7811      	ldrb	r1, [r2, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2302      	movne	r3, #2
 80007e4:	2301      	moveq	r3, #1
 80007e6:	430b      	orrs	r3, r1
 80007e8:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4855      	ldr	r0, [pc, #340]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007ee:	f007 ff89 	bl	8008704 <HAL_GPIO_ReadPin>
 80007f2:	b948      	cbnz	r0, 8000808 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	7811      	ldrb	r1, [r2, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2302      	moveq	r3, #2
 8000804:	430b      	orrs	r3, r1
 8000806:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8000808:	2301      	movs	r3, #1
 800080a:	702b      	strb	r3, [r5, #0]
 800080c:	e784      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 800080e:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	07d9      	lsls	r1, r3, #31
 8000814:	d55e      	bpl.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 8000816:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800081c:	4945      	ldr	r1, [pc, #276]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800081e:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8000820:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 8000822:	2303      	movs	r3, #3
				ktimer = ditTime;
 8000824:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 8000826:	702b      	strb	r3, [r5, #0]
 8000828:	e776      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 800082a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000934 <HAL_TIM_PeriodElapsedCallback+0x284>
 800082e:	f004 ffdf 	bl	80057f0 <HAL_GetTick>
 8000832:	f8d8 3000 	ldr.w	r3, [r8]
 8000836:	4298      	cmp	r0, r3
 8000838:	d84f      	bhi.n	80008da <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 800083a:	4c3f      	ldr	r4, [pc, #252]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	06db      	lsls	r3, r3, #27
 8000840:	f57f af6a 	bpl.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	483f      	ldr	r0, [pc, #252]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000848:	f007 ff5c 	bl	8008704 <HAL_GPIO_ReadPin>
 800084c:	b940      	cbnz	r0, 8000860 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000850:	7822      	ldrb	r2, [r4, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2302      	movne	r3, #2
 800085a:	2301      	moveq	r3, #1
 800085c:	4313      	orrs	r3, r2
 800085e:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000864:	f007 ff4e 	bl	8008704 <HAL_GPIO_ReadPin>
 8000868:	2800      	cmp	r0, #0
 800086a:	f47f af55 	bne.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000870:	7822      	ldrb	r2, [r4, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2302      	moveq	r3, #2
 800087c:	4313      	orrs	r3, r2
 800087e:	7023      	strb	r3, [r4, #0]
}
 8000880:	e74a      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f013 0302 	ands.w	r3, r3, #2
 800088a:	d00d      	beq.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 800088e:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000892:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 8000894:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 8000896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800089a:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800089c:	e73c      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f003 fcb6 	bl	8004210 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	e741      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 80008a8:	702b      	strb	r3, [r5, #0]
 80008aa:	e735      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80008ac:	4e28      	ldr	r6, [pc, #160]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80008ae:	4f20      	ldr	r7, [pc, #128]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008b0:	7833      	ldrb	r3, [r6, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f43f af19 	beq.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
 80008b8:	783b      	ldrb	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f47f af15 	bne.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008c6:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 80008c8:	f003 fca2 	bl	8004210 <TXSwitch>
			HAL_Delay(txdelay);
 80008cc:	7830      	ldrb	r0, [r6, #0]
 80008ce:	f004 ff95 	bl	80057fc <HAL_Delay>
 80008d2:	e70a      	b.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 80008d4:	2302      	movs	r3, #2
 80008d6:	702b      	strb	r3, [r5, #0]
 80008d8:	e71e      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008dc:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 80008de:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 80008e0:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 80008e2:	bbb8      	cbnz	r0, 8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008e6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800094c <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 80008ea:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 80008ec:	f003 fcf4 	bl	80042d8 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008f0:	f004 ff7e 	bl	80057f0 <HAL_GetTick>
 80008f4:	f8d9 3000 	ldr.w	r3, [r9]
 80008f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80008fc:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80008fe:	2800      	cmp	r0, #0
 8000900:	d039      	beq.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000902:	f004 ff75 	bl	80057f0 <HAL_GetTick>
 8000906:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 800090a:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800090c:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 800090e:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000910:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 8000914:	e700      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8000916:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 800091a:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 800091c:	7013      	strb	r3, [r2, #0]
}
 800091e:	e6fb      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000920:	2400b994 	.word	0x2400b994
 8000924:	2400b80a 	.word	0x2400b80a
 8000928:	2400b809 	.word	0x2400b809
 800092c:	24006260 	.word	0x24006260
 8000930:	2400c9c8 	.word	0x2400c9c8
 8000934:	2400b814 	.word	0x2400b814
 8000938:	2400b808 	.word	0x2400b808
 800093c:	24007288 	.word	0x24007288
 8000940:	2400b840 	.word	0x2400b840
 8000944:	58020000 	.word	0x58020000
 8000948:	2400b810 	.word	0x2400b810
 800094c:	24008c38 	.word	0x24008c38
 8000950:	2400c9c9 	.word	0x2400c9c9
	tx = tx_enable;
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 8000956:	4f0a      	ldr	r7, [pc, #40]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000958:	4e0a      	ldr	r6, [pc, #40]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 800095a:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800095c:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 800095e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8000988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 8000966:	2000      	movs	r0, #0
 8000968:	f003 fc52 	bl	8004210 <TXSwitch>
						pk = Saved_pk;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 8000974:	e7c5      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x252>
 8000976:	4e03      	ldr	r6, [pc, #12]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000978:	4f01      	ldr	r7, [pc, #4]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800097a:	e7f4      	b.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800097c:	2400c9c8 	.word	0x2400c9c8
 8000980:	24007288 	.word	0x24007288
 8000984:	2400b840 	.word	0x2400b840
 8000988:	24008c38 	.word	0x24008c38

0800098c <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 800098c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8000990:	497d      	ldr	r1, [pc, #500]	; (8000b88 <cw_tx_char+0x1fc>)
 8000992:	237e      	movs	r3, #126	; 0x7e
 8000994:	2500      	movs	r5, #0
 8000996:	e004      	b.n	80009a2 <cw_tx_char+0x16>
 8000998:	b2d5      	uxtb	r5, r2
 800099a:	5d4b      	ldrb	r3, [r1, r5]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 808b 	beq.w	8000ab8 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80009a2:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80009a4:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80009a8:	d1f6      	bne.n	8000998 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80009aa:	062b      	lsls	r3, r5, #24
 80009ac:	f100 80e6 	bmi.w	8000b7c <cw_tx_char+0x1f0>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	461e      	mov	r6, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	422b      	tst	r3, r5
 80009b8:	d0fb      	beq.n	80009b2 <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 80009ba:	08b6      	lsrs	r6, r6, #2
 80009bc:	f000 80b2 	beq.w	8000b24 <cw_tx_char+0x198>
 80009c0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8000b9c <cw_tx_char+0x210>
 80009c4:	4f71      	ldr	r7, [pc, #452]	; (8000b8c <cw_tx_char+0x200>)
 80009c6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000ba4 <cw_tx_char+0x218>
					Saved_pk = pk;
 80009ca:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8000ba0 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b93b      	cbnz	r3, 80009e2 <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <cw_tx_char+0x204>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b123      	cbz	r3, 80009e2 <cw_tx_char+0x56>
 80009d8:	f898 3000 	ldrb.w	r3, [r8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8095 	beq.w	8000b0c <cw_tx_char+0x180>
	tx = tx_enable;
 80009e2:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 80009e4:	2300      	movs	r3, #0
			CarrierEnable(1);
 80009e6:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 80009e8:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 80009ea:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 80009ee:	f003 fc73 	bl	80042d8 <CarrierEnable>
		TXSwitch(1);
 80009f2:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 80009f4:	4c67      	ldr	r4, [pc, #412]	; (8000b94 <cw_tx_char+0x208>)
		TXSwitch(1);
 80009f6:	f003 fc0b 	bl	8004210 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80009fa:	422e      	tst	r6, r5
 80009fc:	f8d9 0000 	ldr.w	r0, [r9]
 8000a00:	bf14      	ite	ne
 8000a02:	f04f 0b03 	movne.w	fp, #3
 8000a06:	f04f 0b01 	moveq.w	fp, #1
 8000a0a:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8000a0e:	f004 feef 	bl	80057f0 <HAL_GetTick>
 8000a12:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a14:	e00a      	b.n	8000a2c <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 8000a16:	f007 fe75 	bl	8008704 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4620      	mov	r0, r4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04c      	beq.n	8000abe <cw_tx_char+0x132>
 8000a24:	f007 fe6e 	bl	8008704 <HAL_GPIO_ReadPin>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d048      	beq.n	8000abe <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8000a2c:	f004 fee0 	bl	80057f0 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a36:	459b      	cmp	fp, r3
 8000a38:	d8ed      	bhi.n	8000a16 <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d151      	bne.n	8000ae4 <cw_tx_char+0x158>
	tx = tx_enable;
 8000a40:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000a44:	f003 fc48 	bl	80042d8 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000a48:	f004 fed2 	bl	80057f0 <HAL_GetTick>
 8000a4c:	f8d9 b000 	ldr.w	fp, [r9]
 8000a50:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8000a54:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d04c      	beq.n	8000af4 <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 8000a5a:	f004 fec9 	bl	80057f0 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a5e:	4c4d      	ldr	r4, [pc, #308]	; (8000b94 <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 8000a60:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a62:	e008      	b.n	8000a76 <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 8000a64:	f007 fe4e 	bl	8008704 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	b3b3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000a70:	f007 fe48 	bl	8008704 <HAL_GPIO_ReadPin>
 8000a74:	b398      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000a76:	f004 febb 	bl	80057f0 <HAL_GetTick>
 8000a7a:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a80:	459b      	cmp	fp, r3
 8000a82:	d8ef      	bhi.n	8000a64 <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 8000a84:	0876      	lsrs	r6, r6, #1
 8000a86:	d1a2      	bne.n	80009ce <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a88:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 8000a8c:	f004 feb0 	bl	80057f0 <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a90:	4c40      	ldr	r4, [pc, #256]	; (8000b94 <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a92:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 8000a94:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000a96:	e008      	b.n	8000aaa <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 8000a98:	f007 fe34 	bl	8008704 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	b1e3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000aa4:	f007 fe2e 	bl	8008704 <HAL_GPIO_ReadPin>
 8000aa8:	b1c8      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000aaa:	f004 fea1 	bl	80057f0 <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000ab4:	429e      	cmp	r6, r3
 8000ab6:	d8ef      	bhi.n	8000a98 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8000ab8:	2000      	movs	r0, #0
}
 8000aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d14a      	bne.n	8000b5a <cw_tx_char+0x1ce>
	tx = tx_enable;
 8000ac4:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000ac8:	f003 fc06 	bl	80042d8 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000acc:	f004 fe90 	bl	80057f0 <HAL_GetTick>
 8000ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ad4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000ad8:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d050      	beq.n	8000b80 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 8000ae4:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000ae8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000aec:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000aee:	f8da 3000 	ldr.w	r3, [sl]
 8000af2:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f003 fb8b 	bl	8004210 <TXSwitch>
			semi_qsk_timeout = 0;
 8000afa:	2300      	movs	r3, #0
						pk = Saved_pk;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8000afe:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8000b00:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 8000b04:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e7a6      	b.n	8000a5a <cw_tx_char+0xce>
					Saved_pk = pk;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8000b0e:	2001      	movs	r0, #1
					Saved_pk = pk;
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 8000b16:	f003 fb7b 	bl	8004210 <TXSwitch>
			HAL_Delay(txdelay);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <cw_tx_char+0x204>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	f004 fe6d 	bl	80057fc <HAL_Delay>
 8000b22:	e75e      	b.n	80009e2 <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 8000b26:	4c1b      	ldr	r4, [pc, #108]	; (8000b94 <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b28:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8000b2a:	f004 fe61 	bl	80057f0 <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b2e:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8000b30:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000b32:	e00a      	b.n	8000b4a <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 8000b34:	f007 fde6 	bl	8008704 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0ba      	beq.n	8000ab8 <cw_tx_char+0x12c>
 8000b42:	f007 fddf 	bl	8008704 <HAL_GPIO_ReadPin>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d0b6      	beq.n	8000ab8 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8000b4a:	f004 fe51 	bl	80057f0 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d8ed      	bhi.n	8000b34 <cw_tx_char+0x1a8>
 8000b58:	e7ae      	b.n	8000ab8 <cw_tx_char+0x12c>
	tx = tx_enable;
 8000b5a:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000b5c:	4d10      	ldr	r5, [pc, #64]	; (8000ba0 <cw_tx_char+0x214>)
 8000b5e:	4c0e      	ldr	r4, [pc, #56]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000b60:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000b64:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f003 fb50 	bl	8004210 <TXSwitch>
			semi_qsk_timeout = 0;
 8000b70:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000b72:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000b74:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 8000b76:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	e79e      	b.n	8000aba <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8000b7c:	2640      	movs	r6, #64	; 0x40
 8000b7e:	e71f      	b.n	80009c0 <cw_tx_char+0x34>
 8000b80:	4d07      	ldr	r5, [pc, #28]	; (8000ba0 <cw_tx_char+0x214>)
 8000b82:	4c05      	ldr	r4, [pc, #20]	; (8000b98 <cw_tx_char+0x20c>)
 8000b84:	e7f1      	b.n	8000b6a <cw_tx_char+0x1de>
 8000b86:	bf00      	nop
 8000b88:	08013d48 	.word	0x08013d48
 8000b8c:	2400b994 	.word	0x2400b994
 8000b90:	2400c9c9 	.word	0x2400c9c9
 8000b94:	58020000 	.word	0x58020000
 8000b98:	2400b840 	.word	0x2400b840
 8000b9c:	24008c38 	.word	0x24008c38
 8000ba0:	24007288 	.word	0x24007288
 8000ba4:	2400c9c8 	.word	0x2400c9c8

08000ba8 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8000baa:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SendCWMessage+0x28>)
 8000bb0:	012a      	lsls	r2, r5, #4
 8000bb2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8000bb6:	5c98      	ldrb	r0, [r3, r2]
 8000bb8:	b148      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	e002      	b.n	8000bc4 <SendCWMessage+0x1c>
 8000bbe:	b2e4      	uxtb	r4, r4
 8000bc0:	5d28      	ldrb	r0, [r5, r4]
 8000bc2:	b120      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bc4:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8000bc6:	f7ff fee1 	bl	800098c <cw_tx_char>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d0f7      	beq.n	8000bbe <SendCWMessage+0x16>
}
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <Load_Presets+0x40>)
{
 8000bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bda:	4c0f      	ldr	r4, [pc, #60]	; (8000c18 <Load_Presets+0x44>)
 8000bdc:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000be0:	4f0e      	ldr	r7, [pc, #56]	; (8000c1c <Load_Presets+0x48>)
 8000be2:	4e0f      	ldr	r6, [pc, #60]	; (8000c20 <Load_Presets+0x4c>)
 8000be4:	4d0f      	ldr	r5, [pc, #60]	; (8000c24 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000be6:	4621      	mov	r1, r4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00f fc95 	bl	8010518 <strcpy>
 8000bee:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8000bf0:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8000bf4:	3410      	adds	r4, #16
 8000bf6:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8000bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8000bfc:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000c00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8000c04:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8000c06:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8000c0a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000c0e:	d1ea      	bne.n	8000be6 <Load_Presets+0x12>
	}
}
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c14:	2400b844 	.word	0x2400b844
 8000c18:	24000120 	.word	0x24000120
 8000c1c:	08019dd8 	.word	0x08019dd8
 8000c20:	08019e0f 	.word	0x08019e0f
 8000c24:	08019dc7 	.word	0x08019dc7

08000c28 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <SetBW+0x90>)
{
 8000c2c:	b410      	push	{r4}
	switch(CurrentMode)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000c30:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d83a      	bhi.n	8000cac <SetBW+0x84>
 8000c36:	e8df f003 	tbb	[pc, r3]
 8000c3a:	232b      	.short	0x232b
 8000c3c:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 8000c3e:	4c1f      	ldr	r4, [pc, #124]	; (8000cbc <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000c40:	2100      	movs	r1, #0
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000c48:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8000c4a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <SetBW+0x9c>)
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <SetBW+0xa0>)
 8000c50:	491e      	ldr	r1, [pc, #120]	; (8000ccc <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000c52:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c56:	f001 b83b 	b.w	8001cd0 <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c5a:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 8000c5c:	4917      	ldr	r1, [pc, #92]	; (8000cbc <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	bf18      	it	ne
 8000c62:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8000c64:	4c1b      	ldr	r4, [pc, #108]	; (8000cd4 <SetBW+0xac>)
		bw[USB] = newbw;
 8000c66:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 8000c68:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c6a:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c6c:	491a      	ldr	r1, [pc, #104]	; (8000cd8 <SetBW+0xb0>)
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000c72:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <SetBW+0xa0>)
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <SetBW+0xb4>)
}	
 8000c78:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c7c:	f001 b828 	b.w	8001cd0 <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8000c80:	490e      	ldr	r1, [pc, #56]	; (8000cbc <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c82:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c86:	bf18      	it	ne
 8000c88:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000c8a:	4c15      	ldr	r4, [pc, #84]	; (8000ce0 <SetBW+0xb8>)
		bw[LSB] = newbw;
 8000c8c:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c8e:	e7eb      	b.n	8000c68 <SetBW+0x40>
		bw[AM] = newbw;
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000c92:	2100      	movs	r1, #0
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000c9a:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8000c9c:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <SetBW+0xbc>)
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <SetBW+0xa0>)
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <SetBW+0xc0>)
}	
 8000ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ca8:	f001 b812 	b.w	8001cd0 <SDR_2R_toC_f32>
}	
 8000cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2400202c 	.word	0x2400202c
 8000cb8:	2400202b 	.word	0x2400202b
 8000cbc:	24008c30 	.word	0x24008c30
 8000cc0:	24002028 	.word	0x24002028
 8000cc4:	08016dc8 	.word	0x08016dc8
 8000cc8:	20004000 	.word	0x20004000
 8000ccc:	08015dc8 	.word	0x08015dc8
 8000cd0:	24001810 	.word	0x24001810
 8000cd4:	240072f0 	.word	0x240072f0
 8000cd8:	08017dc8 	.word	0x08017dc8
 8000cdc:	08018dc8 	.word	0x08018dc8
 8000ce0:	24007268 	.word	0x24007268
 8000ce4:	08014dc8 	.word	0x08014dc8
 8000ce8:	08013dc8 	.word	0x08013dc8

08000cec <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8000cee:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <SetAGC+0x9c>)
{
 8000cf0:	b410      	push	{r4}
	switch(CurrentMode)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000cf4:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d811      	bhi.n	8000d1e <SetAGC+0x32>
 8000cfa:	e8df f003 	tbb	[pc, r3]
 8000cfe:	2333      	.short	0x2333
 8000d00:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8000d04:	4922      	ldr	r1, [pc, #136]	; (8000d90 <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d06:	4c23      	ldr	r4, [pc, #140]	; (8000d94 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000d0c:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d0e:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000d12:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8000d14:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d18:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d1a:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d22:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8000d26:	491a      	ldr	r1, [pc, #104]	; (8000d90 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d28:	4c1a      	ldr	r4, [pc, #104]	; (8000d94 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8000d2e:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d30:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d36:	4919      	ldr	r1, [pc, #100]	; (8000d9c <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d38:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d3a:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000d3c:	6093      	str	r3, [r2, #8]
}	
 8000d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d42:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8000d46:	4912      	ldr	r1, [pc, #72]	; (8000d90 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d48:	4c12      	ldr	r4, [pc, #72]	; (8000d94 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000d4e:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d50:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d56:	4911      	ldr	r1, [pc, #68]	; (8000d9c <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d58:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d5a:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d5c:	6053      	str	r3, [r2, #4]
}	
 8000d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d62:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8000d66:	490a      	ldr	r1, [pc, #40]	; (8000d90 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8000d6e:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d70:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d76:	4909      	ldr	r1, [pc, #36]	; (8000d9c <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d78:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d7a:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000d7c:	6013      	str	r3, [r2, #0]
}	
 8000d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	2400202c 	.word	0x2400202c
 8000d88:	2400202a 	.word	0x2400202a
 8000d8c:	24001808 	.word	0x24001808
 8000d90:	24008c20 	.word	0x24008c20
 8000d94:	24006254 	.word	0x24006254
 8000d98:	24002030 	.word	0x24002030
 8000d9c:	24006258 	.word	0x24006258

08000da0 <Tune_Preset>:
{
 8000da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000da4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000da8:	4e47      	ldr	r6, [pc, #284]	; (8000ec8 <Tune_Preset+0x128>)
 8000daa:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <Tune_Preset+0x12c>)
{
 8000dac:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000dae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000db2:	4f47      	ldr	r7, [pc, #284]	; (8000ed0 <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 8000db4:	0045      	lsls	r5, r0, #1
 8000db6:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000db8:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000dba:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000dbc:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d87b      	bhi.n	8000eba <Tune_Preset+0x11a>
 8000dc2:	e8df f003 	tbb	[pc, r3]
 8000dc6:	626e      	.short	0x626e
 8000dc8:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000dca:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000f0c <Tune_Preset+0x16c>
 8000dce:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000dd2:	f7ff ff29 	bl	8000c28 <SetBW>
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <Tune_Preset+0x134>)
 8000dd8:	78d8      	ldrb	r0, [r3, #3]
 8000dda:	f7ff ff87 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000dde:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 8000de0:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000de2:	493d      	ldr	r1, [pc, #244]	; (8000ed8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000de4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000de8:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 8000dea:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 8000dec:	2a03      	cmp	r2, #3
 8000dee:	d80f      	bhi.n	8000e10 <Tune_Preset+0x70>
 8000df0:	e8df f002 	tbb	[pc, r2]
 8000df4:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 8000df8:	4a38      	ldr	r2, [pc, #224]	; (8000edc <Tune_Preset+0x13c>)
 8000dfa:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8000dfc:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000e04:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <Tune_Preset+0x140>)
 8000e08:	4a36      	ldr	r2, [pc, #216]	; (8000ee4 <Tune_Preset+0x144>)
 8000e0a:	4937      	ldr	r1, [pc, #220]	; (8000ee8 <Tune_Preset+0x148>)
 8000e0c:	f000 ff60 	bl	8001cd0 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000e10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <Tune_Preset+0x14c>)
 8000e16:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000e1e:	f00f bb7b 	b.w	8010518 <strcpy>
		bw[USB] = newbw;
 8000e22:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000e26:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e28:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000e2a:	bf18      	it	ne
 8000e2c:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e2e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <Tune_Preset+0x154>)
 8000e32:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 8000e3a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <Tune_Preset+0x144>)
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <Tune_Preset+0x15c>)
 8000e40:	f000 ff46 	bl	8001cd0 <SDR_2R_toC_f32>
		break;
 8000e44:	e7e4      	b.n	8000e10 <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000e46:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <Tune_Preset+0x150>)
 8000e48:	2100      	movs	r1, #0
		bw[AM] = newbw;
 8000e4a:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000e52:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <Tune_Preset+0x160>)
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <Tune_Preset+0x144>)
 8000e58:	492a      	ldr	r1, [pc, #168]	; (8000f04 <Tune_Preset+0x164>)
 8000e5a:	f000 ff39 	bl	8001cd0 <SDR_2R_toC_f32>
		break;
 8000e5e:	e7d7      	b.n	8000e10 <Tune_Preset+0x70>
		bw[LSB] = newbw;
 8000e60:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000e64:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e66:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000e68:	bf18      	it	ne
 8000e6a:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e6c:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <Tune_Preset+0x168>)
 8000e70:	e7df      	b.n	8000e32 <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e72:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000f0c <Tune_Preset+0x16c>
 8000e76:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000e7a:	f7ff fed5 	bl	8000c28 <SetBW>
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <Tune_Preset+0x134>)
 8000e80:	7898      	ldrb	r0, [r3, #2]
 8000e82:	f7ff ff33 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000e86:	783a      	ldrb	r2, [r7, #0]
		break;
 8000e88:	e7aa      	b.n	8000de0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e8a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000f0c <Tune_Preset+0x16c>
 8000e8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000e92:	f7ff fec9 	bl	8000c28 <SetBW>
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <Tune_Preset+0x134>)
 8000e98:	7858      	ldrb	r0, [r3, #1]
 8000e9a:	f7ff ff27 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000e9e:	783a      	ldrb	r2, [r7, #0]
		break;
 8000ea0:	e79e      	b.n	8000de0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ea2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000f0c <Tune_Preset+0x16c>
 8000ea6:	f898 0000 	ldrb.w	r0, [r8]
 8000eaa:	f7ff febd 	bl	8000c28 <SetBW>
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Tune_Preset+0x134>)
 8000eb0:	7818      	ldrb	r0, [r3, #0]
 8000eb2:	f7ff ff1b 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000eb6:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 8000eb8:	e792      	b.n	8000de0 <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000eba:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000ebe:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000ec2:	7d5b      	ldrb	r3, [r3, #21]
 8000ec4:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000ec6:	e7a3      	b.n	8000e10 <Tune_Preset+0x70>
 8000ec8:	2400b844 	.word	0x2400b844
 8000ecc:	24007264 	.word	0x24007264
 8000ed0:	2400202c 	.word	0x2400202c
 8000ed4:	24008c20 	.word	0x24008c20
 8000ed8:	2400202b 	.word	0x2400202b
 8000edc:	24002028 	.word	0x24002028
 8000ee0:	08016dc8 	.word	0x08016dc8
 8000ee4:	20004000 	.word	0x20004000
 8000ee8:	08015dc8 	.word	0x08015dc8
 8000eec:	2400b81c 	.word	0x2400b81c
 8000ef0:	24001810 	.word	0x24001810
 8000ef4:	240072f0 	.word	0x240072f0
 8000ef8:	08018dc8 	.word	0x08018dc8
 8000efc:	08017dc8 	.word	0x08017dc8
 8000f00:	08014dc8 	.word	0x08014dc8
 8000f04:	08013dc8 	.word	0x08013dc8
 8000f08:	24007268 	.word	0x24007268
 8000f0c:	24008c30 	.word	0x24008c30

08000f10 <SetMode>:
{
 8000f10:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <SetMode+0x64>)
 8000f14:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000f16:	2803      	cmp	r0, #3
 8000f18:	d82b      	bhi.n	8000f72 <SetMode+0x62>
 8000f1a:	e8df f000 	tbb	[pc, r0]
 8000f1e:	1620      	.short	0x1620
 8000f20:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <SetMode+0x68>)
 8000f24:	78d8      	ldrb	r0, [r3, #3]
 8000f26:	f7ff fe7f 	bl	8000c28 <SetBW>
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <SetMode+0x6c>)
 8000f2c:	78d8      	ldrb	r0, [r3, #3]
}	
 8000f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f32:	f7ff bedb 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <SetMode+0x68>)
 8000f38:	7898      	ldrb	r0, [r3, #2]
 8000f3a:	f7ff fe75 	bl	8000c28 <SetBW>
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <SetMode+0x6c>)
 8000f40:	7898      	ldrb	r0, [r3, #2]
}	
 8000f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f46:	f7ff bed1 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <SetMode+0x68>)
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	f7ff fe6b 	bl	8000c28 <SetBW>
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <SetMode+0x6c>)
 8000f54:	7858      	ldrb	r0, [r3, #1]
}	
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f5a:	f7ff bec7 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SetMode+0x68>)
 8000f60:	7818      	ldrb	r0, [r3, #0]
 8000f62:	f7ff fe61 	bl	8000c28 <SetBW>
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SetMode+0x6c>)
 8000f68:	7818      	ldrb	r0, [r3, #0]
}	
 8000f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f6e:	f7ff bebd 	b.w	8000cec <SetAGC>
}	
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	2400202c 	.word	0x2400202c
 8000f78:	24008c30 	.word	0x24008c30
 8000f7c:	24008c20 	.word	0x24008c20

08000f80 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000f80:	2809      	cmp	r0, #9
{
 8000f82:	b508      	push	{r3, lr}
	if (idx == 9)
 8000f84:	d012      	beq.n	8000fac <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000f86:	f1c0 0005 	rsb	r0, r0, #5
 8000f8a:	ee07 0a90 	vmov	s15, r0
 8000f8e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000fb8 <SetFstep+0x38>
 8000f92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f96:	ee27 0b00 	vmul.f64	d0, d7, d0
 8000f9a:	f011 fd89 	bl	8012ab0 <exp>
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <SetFstep+0x40>)
 8000fa0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	6013      	str	r3, [r2, #0]
}	
 8000faa:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000fac:	f242 3328 	movw	r3, #9000	; 0x2328
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <SetFstep+0x40>)
 8000fb2:	6013      	str	r3, [r2, #0]
}	
 8000fb4:	bd08      	pop	{r3, pc}
 8000fb6:	bf00      	nop
 8000fb8:	bbb55516 	.word	0xbbb55516
 8000fbc:	40026bb1 	.word	0x40026bb1
 8000fc0:	24006250 	.word	0x24006250

08000fc4 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <FplusClicked+0xb4>)
 8000fc6:	ee07 0a90 	vmov	s15, r0
 8000fca:	4a2c      	ldr	r2, [pc, #176]	; (800107c <FplusClicked+0xb8>)
 8000fcc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000fd0:	ed93 6a00 	vldr	s12, [r3]
 8000fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fd8:	ed92 7a00 	vldr	s14, [r2]
 8000fdc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fe2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000fe6:	4927      	ldr	r1, [pc, #156]	; (8001084 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000fe8:	eddf 5a27 	vldr	s11, [pc, #156]	; 8001088 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fec:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000ff0:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000ff2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4c24      	ldr	r4, [pc, #144]	; (800108c <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000ffa:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000ffc:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001000:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8001002:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001004:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001008:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800100c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001010:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8001014:	2b03      	cmp	r3, #3
 8001016:	d80b      	bhi.n	8001030 <FplusClicked+0x6c>
 8001018:	e8df f003 	tbb	[pc, r3]
 800101c:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001020:	78c8      	ldrb	r0, [r1, #3]
 8001022:	f7ff fe01 	bl	8000c28 <SetBW>
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <FplusClicked+0xcc>)
 8001028:	78d8      	ldrb	r0, [r3, #3]
 800102a:	f7ff fe5f 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 800102e:	7d60      	ldrb	r0, [r4, #21]
 8001030:	f7ff fdfa 	bl	8000c28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001034:	4915      	ldr	r1, [pc, #84]	; (800108c <FplusClicked+0xc8>)
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800103c:	f00f ba6c 	b.w	8010518 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001040:	7888      	ldrb	r0, [r1, #2]
 8001042:	f7ff fdf1 	bl	8000c28 <SetBW>
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <FplusClicked+0xcc>)
 8001048:	7898      	ldrb	r0, [r3, #2]
 800104a:	f7ff fe4f 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 800104e:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001050:	e7ee      	b.n	8001030 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001052:	7848      	ldrb	r0, [r1, #1]
 8001054:	f7ff fde8 	bl	8000c28 <SetBW>
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <FplusClicked+0xcc>)
 800105a:	7858      	ldrb	r0, [r3, #1]
 800105c:	f7ff fe46 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001060:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001062:	e7e5      	b.n	8001030 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001064:	7808      	ldrb	r0, [r1, #0]
 8001066:	f7ff fddf 	bl	8000c28 <SetBW>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <FplusClicked+0xcc>)
 800106c:	7818      	ldrb	r0, [r3, #0]
 800106e:	f7ff fe3d 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001072:	7d60      	ldrb	r0, [r4, #21]
}	
 8001074:	e7dc      	b.n	8001030 <FplusClicked+0x6c>
 8001076:	bf00      	nop
 8001078:	24006250 	.word	0x24006250
 800107c:	24007264 	.word	0x24007264
 8001080:	2400202c 	.word	0x2400202c
 8001084:	24008c30 	.word	0x24008c30
 8001088:	4c3ebc20 	.word	0x4c3ebc20
 800108c:	2400b844 	.word	0x2400b844
 8001090:	24008c20 	.word	0x24008c20
 8001094:	2400b81c 	.word	0x2400b81c

08001098 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <FminusClicked+0xb4>)
 800109a:	ee07 0a90 	vmov	s15, r0
 800109e:	4a2c      	ldr	r2, [pc, #176]	; (8001150 <FminusClicked+0xb8>)
 80010a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80010a4:	ed93 6a00 	vldr	s12, [r3]
 80010a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ac:	ed92 7a00 	vldr	s14, [r2]
 80010b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 80010bc:	eddf 5a27 	vldr	s11, [pc, #156]	; 800115c <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010c0:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 80010c4:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010c6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4c24      	ldr	r4, [pc, #144]	; (8001160 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 80010ce:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010d0:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010d4:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 80010d6:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010d8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 80010dc:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 80010e0:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010e4:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d80b      	bhi.n	8001104 <FminusClicked+0x6c>
 80010ec:	e8df f003 	tbb	[pc, r3]
 80010f0:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80010f4:	78c8      	ldrb	r0, [r1, #3]
 80010f6:	f7ff fd97 	bl	8000c28 <SetBW>
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <FminusClicked+0xcc>)
 80010fc:	78d8      	ldrb	r0, [r3, #3]
 80010fe:	f7ff fdf5 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001102:	7d60      	ldrb	r0, [r4, #21]
 8001104:	f7ff fd90 	bl	8000c28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <FminusClicked+0xc8>)
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 800110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001110:	f00f ba02 	b.w	8010518 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001114:	7888      	ldrb	r0, [r1, #2]
 8001116:	f7ff fd87 	bl	8000c28 <SetBW>
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <FminusClicked+0xcc>)
 800111c:	7898      	ldrb	r0, [r3, #2]
 800111e:	f7ff fde5 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001122:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001124:	e7ee      	b.n	8001104 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001126:	7848      	ldrb	r0, [r1, #1]
 8001128:	f7ff fd7e 	bl	8000c28 <SetBW>
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <FminusClicked+0xcc>)
 800112e:	7858      	ldrb	r0, [r3, #1]
 8001130:	f7ff fddc 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001134:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001136:	e7e5      	b.n	8001104 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001138:	7808      	ldrb	r0, [r1, #0]
 800113a:	f7ff fd75 	bl	8000c28 <SetBW>
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <FminusClicked+0xcc>)
 8001140:	7818      	ldrb	r0, [r3, #0]
 8001142:	f7ff fdd3 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001146:	7d60      	ldrb	r0, [r4, #21]
}	
 8001148:	e7dc      	b.n	8001104 <FminusClicked+0x6c>
 800114a:	bf00      	nop
 800114c:	24006250 	.word	0x24006250
 8001150:	24007264 	.word	0x24007264
 8001154:	2400202c 	.word	0x2400202c
 8001158:	24008c30 	.word	0x24008c30
 800115c:	45fa0000 	.word	0x45fa0000
 8001160:	2400b844 	.word	0x2400b844
 8001164:	24008c20 	.word	0x24008c20
 8001168:	2400b81c 	.word	0x2400b81c

0800116c <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001170:	b510      	push	{r4, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001176:	493a      	ldr	r1, [pc, #232]	; (8001260 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001178:	483a      	ldr	r0, [pc, #232]	; (8001264 <HAL_GPIO_EXTI_Callback+0xf4>)
 800117a:	f000 febd 	bl	8001ef8 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 800117e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001182:	4939      	ldr	r1, [pc, #228]	; (8001268 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001184:	4839      	ldr	r0, [pc, #228]	; (800126c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001186:	f000 feb7 	bl	8001ef8 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 800118a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800118e:	4a38      	ldr	r2, [pc, #224]	; (8001270 <HAL_GPIO_EXTI_Callback+0x100>)
 8001190:	4934      	ldr	r1, [pc, #208]	; (8001264 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001192:	4838      	ldr	r0, [pc, #224]	; (8001274 <HAL_GPIO_EXTI_Callback+0x104>)
 8001194:	f00d ff98 	bl	800f0c8 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8001198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119c:	4a36      	ldr	r2, [pc, #216]	; (8001278 <HAL_GPIO_EXTI_Callback+0x108>)
 800119e:	4933      	ldr	r1, [pc, #204]	; (800126c <HAL_GPIO_EXTI_Callback+0xfc>)
 80011a0:	4836      	ldr	r0, [pc, #216]	; (800127c <HAL_GPIO_EXTI_Callback+0x10c>)
 80011a2:	f00d ff91 	bl	800f0c8 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011a6:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_GPIO_EXTI_Callback+0x110>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80011ac:	4c35      	ldr	r4, [pc, #212]	; (8001284 <HAL_GPIO_EXTI_Callback+0x114>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011ae:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 80011b2:	f000 fea1 	bl	8001ef8 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80011b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ba:	4a31      	ldr	r2, [pc, #196]	; (8001280 <HAL_GPIO_EXTI_Callback+0x110>)
 80011bc:	492e      	ldr	r1, [pc, #184]	; (8001278 <HAL_GPIO_EXTI_Callback+0x108>)
 80011be:	482c      	ldr	r0, [pc, #176]	; (8001270 <HAL_GPIO_EXTI_Callback+0x100>)
 80011c0:	f000 fd86 	bl	8001cd0 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	492f      	ldr	r1, [pc, #188]	; (8001288 <HAL_GPIO_EXTI_Callback+0x118>)
 80011ca:	4830      	ldr	r0, [pc, #192]	; (800128c <HAL_GPIO_EXTI_Callback+0x11c>)
 80011cc:	f000 fe94 	bl	8001ef8 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2200      	movs	r2, #0
 80011d4:	492d      	ldr	r1, [pc, #180]	; (800128c <HAL_GPIO_EXTI_Callback+0x11c>)
 80011d6:	482e      	ldr	r0, [pc, #184]	; (8001290 <HAL_GPIO_EXTI_Callback+0x120>)
 80011d8:	f00d feb8 	bl	800ef4c <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80011dc:	7823      	ldrb	r3, [r4, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d038      	beq.n	8001254 <HAL_GPIO_EXTI_Callback+0xe4>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	4a2b      	ldr	r2, [pc, #172]	; (8001294 <HAL_GPIO_EXTI_Callback+0x124>)
 80011e8:	492b      	ldr	r1, [pc, #172]	; (8001298 <HAL_GPIO_EXTI_Callback+0x128>)
 80011ea:	4828      	ldr	r0, [pc, #160]	; (800128c <HAL_GPIO_EXTI_Callback+0x11c>)
 80011ec:	f00e f924 	bl	800f438 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80011f0:	2301      	movs	r3, #1
 80011f2:	4928      	ldr	r1, [pc, #160]	; (8001294 <HAL_GPIO_EXTI_Callback+0x124>)
 80011f4:	461a      	mov	r2, r3
 80011f6:	4826      	ldr	r0, [pc, #152]	; (8001290 <HAL_GPIO_EXTI_Callback+0x120>)
 80011f8:	f00d fea8 	bl	800ef4c <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80011fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001200:	4926      	ldr	r1, [pc, #152]	; (800129c <HAL_GPIO_EXTI_Callback+0x12c>)
 8001202:	4827      	ldr	r0, [pc, #156]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001204:	f000 fe78 	bl	8001ef8 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001208:	7823      	ldrb	r3, [r4, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d80d      	bhi.n	800122a <HAL_GPIO_EXTI_Callback+0xba>
 800120e:	b9e3      	cbnz	r3, 800124a <HAL_GPIO_EXTI_Callback+0xda>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8001210:	4924      	ldr	r1, [pc, #144]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001212:	4823      	ldr	r0, [pc, #140]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001214:	f000 ffc0 	bl	8002198 <SDR_demodAM_AGC>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <HAL_GPIO_EXTI_Callback+0x138>)
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	4821      	ldr	r0, [pc, #132]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001220:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001226:	f000 bdf1 	b.w	8001e0c <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 800122a:	2b03      	cmp	r3, #3
 800122c:	d1f4      	bne.n	8001218 <HAL_GPIO_EXTI_Callback+0xa8>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 800122e:	491d      	ldr	r1, [pc, #116]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001230:	481b      	ldr	r0, [pc, #108]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001232:	f001 f841 	bl	80022b8 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_GPIO_EXTI_Callback+0x13c>)
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ec      	bne.n	8001218 <HAL_GPIO_EXTI_Callback+0xa8>
			SDR_CWPeak(fAudio, BSIZE);
 800123e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001242:	4818      	ldr	r0, [pc, #96]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001244:	f000 ff1e 	bl	8002084 <SDR_CWPeak>
 8001248:	e7e6      	b.n	8001218 <HAL_GPIO_EXTI_Callback+0xa8>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800124a:	4916      	ldr	r1, [pc, #88]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x134>)
 800124c:	4814      	ldr	r0, [pc, #80]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x130>)
 800124e:	f001 f833 	bl	80022b8 <SDR_demodSSB_CW_AGC>
 8001252:	e7e1      	b.n	8001218 <HAL_GPIO_EXTI_Callback+0xa8>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <HAL_GPIO_EXTI_Callback+0x11c>)
 800125a:	f000 fe67 	bl	8001f2c <SDR_mirror_LSB>
 800125e:	e7c0      	b.n	80011e2 <HAL_GPIO_EXTI_Callback+0x72>
 8001260:	2000d000 	.word	0x2000d000
 8001264:	20009000 	.word	0x20009000
 8001268:	2000b000 	.word	0x2000b000
 800126c:	20007000 	.word	0x20007000
 8001270:	20006800 	.word	0x20006800
 8001274:	24007298 	.word	0x24007298
 8001278:	20006000 	.word	0x20006000
 800127c:	2400728c 	.word	0x2400728c
 8001280:	2400a43c 	.word	0x2400a43c
 8001284:	2400202c 	.word	0x2400202c
 8001288:	2400943c 	.word	0x2400943c
 800128c:	20002000 	.word	0x20002000
 8001290:	0801a1a4 	.word	0x0801a1a4
 8001294:	20000000 	.word	0x20000000
 8001298:	20004000 	.word	0x20004000
 800129c:	20001000 	.word	0x20001000
 80012a0:	2400b998 	.word	0x2400b998
 80012a4:	24008c3c 	.word	0x24008c3c
 80012a8:	240083f4 	.word	0x240083f4
 80012ac:	24008c30 	.word	0x24008c30

080012b0 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 80012b4:	4d8e      	ldr	r5, [pc, #568]	; (80014f0 <ADC_Stream0_Handler+0x240>)
{
 80012b6:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 80012ba:	782b      	ldrb	r3, [r5, #0]
{
 80012bc:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 80012be:	b123      	cbz	r3, 80012ca <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 80012c0:	4a8c      	ldr	r2, [pc, #560]	; (80014f4 <ADC_Stream0_Handler+0x244>)
 80012c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012c4:	f023 0310 	bic.w	r3, r3, #16
 80012c8:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 80012ca:	4f8b      	ldr	r7, [pc, #556]	; (80014f8 <ADC_Stream0_Handler+0x248>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 80012cc:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <ADC_Stream0_Handler+0x24c>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 80012ce:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 80012d2:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 80012d4:	2800      	cmp	r0, #0
 80012d6:	bf08      	it	eq
 80012d8:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 80012da:	2b03      	cmp	r3, #3
 80012dc:	f000 8429 	beq.w	8001b32 <ADC_Stream0_Handler+0x882>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 80012e0:	4b87      	ldr	r3, [pc, #540]	; (8001500 <ADC_Stream0_Handler+0x250>)
 80012e2:	ed93 0a00 	vldr	s0, [r3]
 80012e6:	f000 fc35 	bl	8001b54 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 80012ea:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 80012ee:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 80012f0:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8001504 <ADC_Stream0_Handler+0x254>
	{
		sum += pR[k-1];
 80012f4:	8814      	ldrh	r4, [r2, #0]
	while(k)
 80012f6:	3a08      	subs	r2, #8
		sum += pR[k-2];
 80012f8:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 80012fa:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 80012fc:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 80012fe:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 8001300:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 8001302:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 8001306:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 8001308:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 800130c:	b289      	uxth	r1, r1
		sum += pR[k-1];
 800130e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 8001312:	ee07 6a90 	vmov	s15, r6
		sum += pR[k-2];
 8001316:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 800131a:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 8001322:	4290      	cmp	r0, r2
		sum += pR[k-4];
 8001324:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001334:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 8001338:	d1dc      	bne.n	80012f4 <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 800133a:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 800133e:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001340:	eddf 7a71 	vldr	s15, [pc, #452]	; 8001508 <ADC_Stream0_Handler+0x258>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001344:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 8001346:	b29b      	uxth	r3, r3
 8001348:	4c70      	ldr	r4, [pc, #448]	; (800150c <ADC_Stream0_Handler+0x25c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800134a:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800134e:	4970      	ldr	r1, [pc, #448]	; (8001510 <ADC_Stream0_Handler+0x260>)
	TestSampledValue=pR[BSIZE/2];
 8001350:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001354:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <ADC_Stream0_Handler+0x264>)
 8001356:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 8001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800135c:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <ADC_Stream0_Handler+0x268>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001362:	4a6e      	ldr	r2, [pc, #440]	; (800151c <ADC_Stream0_Handler+0x26c>)
	TestSampledValue=pR[BSIZE/2];
 8001364:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001368:	f000 fcde 	bl	8001d28 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 800136c:	782b      	ldrb	r3, [r5, #0]
 800136e:	b30b      	cbz	r3, 80013b4 <ADC_Stream0_Handler+0x104>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8001370:	4d6b      	ldr	r5, [pc, #428]	; (8001520 <ADC_Stream0_Handler+0x270>)
 8001372:	496c      	ldr	r1, [pc, #432]	; (8001524 <ADC_Stream0_Handler+0x274>)
 8001374:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001378:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <ADC_Stream0_Handler+0x278>)
 800137a:	7809      	ldrb	r1, [r1, #0]
 800137c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8001380:	1c53      	adds	r3, r2, #1
 8001382:	4282      	cmp	r2, r0
 8001384:	b21b      	sxth	r3, r3
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8001386:	485b      	ldr	r0, [pc, #364]	; (80014f4 <ADC_Stream0_Handler+0x244>)
 8001388:	4a68      	ldr	r2, [pc, #416]	; (800152c <ADC_Stream0_Handler+0x27c>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 800138a:	802b      	strh	r3, [r5, #0]
 800138c:	f2c0 8352 	blt.w	8001a34 <ADC_Stream0_Handler+0x784>
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8001390:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001394:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
		}
		if (IntCounter == 8)
 8001396:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8001398:	4a65      	ldr	r2, [pc, #404]	; (8001530 <ADC_Stream0_Handler+0x280>)
 800139a:	ea02 0206 	and.w	r2, r2, r6
 800139e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013a2:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 80013a4:	d101      	bne.n	80013aa <ADC_Stream0_Handler+0xfa>
		{
			IntCounter = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	802b      	strh	r3, [r5, #0]
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 80013aa:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <ADC_Stream0_Handler+0x244>)
 80013ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 80013b4:	4a5f      	ldr	r2, [pc, #380]	; (8001534 <ADC_Stream0_Handler+0x284>)
 80013b6:	23ff      	movs	r3, #255	; 0xff
 80013b8:	495f      	ldr	r1, [pc, #380]	; (8001538 <ADC_Stream0_Handler+0x288>)
 80013ba:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80013be:	ed92 2a00 	vldr	s4, [r2]
 80013c2:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 80013c6:	4a5d      	ldr	r2, [pc, #372]	; (800153c <ADC_Stream0_Handler+0x28c>)
 80013c8:	edd1 3a00 	vldr	s7, [r1]
 80013cc:	edd2 1a00 	vldr	s3, [r2]
 80013d0:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <ADC_Stream0_Handler+0x290>)
 80013d2:	495c      	ldr	r1, [pc, #368]	; (8001544 <ADC_Stream0_Handler+0x294>)
 80013d4:	ed92 7a00 	vldr	s14, [r2]
 80013d8:	4a5b      	ldr	r2, [pc, #364]	; (8001548 <ADC_Stream0_Handler+0x298>)
 80013da:	ed91 9a00 	vldr	s18, [r1]
 80013de:	eeb0 6a47 	vmov.f32	s12, s14
 80013e2:	edd2 2a00 	vldr	s5, [r2]
 80013e6:	4959      	ldr	r1, [pc, #356]	; (800154c <ADC_Stream0_Handler+0x29c>)
 80013e8:	4a59      	ldr	r2, [pc, #356]	; (8001550 <ADC_Stream0_Handler+0x2a0>)
 80013ea:	edd1 ea00 	vldr	s29, [r1]
 80013ee:	edd2 8a00 	vldr	s17, [r2]
 80013f2:	4958      	ldr	r1, [pc, #352]	; (8001554 <ADC_Stream0_Handler+0x2a4>)
 80013f4:	4a58      	ldr	r2, [pc, #352]	; (8001558 <ADC_Stream0_Handler+0x2a8>)
 80013f6:	edd1 6a00 	vldr	s13, [r1]
 80013fa:	ed92 5a00 	vldr	s10, [r2]
 80013fe:	4957      	ldr	r1, [pc, #348]	; (800155c <ADC_Stream0_Handler+0x2ac>)
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <ADC_Stream0_Handler+0x2b0>)
 8001402:	edd1 ca00 	vldr	s25, [r1]
 8001406:	edd2 fa00 	vldr	s31, [r2]
 800140a:	4956      	ldr	r1, [pc, #344]	; (8001564 <ADC_Stream0_Handler+0x2b4>)
 800140c:	4a56      	ldr	r2, [pc, #344]	; (8001568 <ADC_Stream0_Handler+0x2b8>)
 800140e:	ed91 da00 	vldr	s26, [r1]
 8001412:	ed92 8a00 	vldr	s16, [r2]
 8001416:	4955      	ldr	r1, [pc, #340]	; (800156c <ADC_Stream0_Handler+0x2bc>)
 8001418:	4a55      	ldr	r2, [pc, #340]	; (8001570 <ADC_Stream0_Handler+0x2c0>)
 800141a:	edcd 6a02 	vstr	s13, [sp, #8]
 800141e:	edd2 5a00 	vldr	s11, [r2]
 8001422:	edd1 6a00 	vldr	s13, [r1]
 8001426:	4a53      	ldr	r2, [pc, #332]	; (8001574 <ADC_Stream0_Handler+0x2c4>)
 8001428:	4953      	ldr	r1, [pc, #332]	; (8001578 <ADC_Stream0_Handler+0x2c8>)
 800142a:	ed92 fa00 	vldr	s30, [r2]
 800142e:	ed91 ca00 	vldr	s24, [r1]
 8001432:	4a52      	ldr	r2, [pc, #328]	; (800157c <ADC_Stream0_Handler+0x2cc>)
 8001434:	4952      	ldr	r1, [pc, #328]	; (8001580 <ADC_Stream0_Handler+0x2d0>)
 8001436:	edd2 ba00 	vldr	s23, [r2]
 800143a:	edcd 6a01 	vstr	s13, [sp, #4]
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <ADC_Stream0_Handler+0x2d4>)
 8001440:	edd1 6a00 	vldr	s13, [r1]
 8001444:	4950      	ldr	r1, [pc, #320]	; (8001588 <ADC_Stream0_Handler+0x2d8>)
 8001446:	ed92 3a00 	vldr	s6, [r2]
 800144a:	edcd 6a03 	vstr	s13, [sp, #12]
 800144e:	4a4f      	ldr	r2, [pc, #316]	; (800158c <ADC_Stream0_Handler+0x2dc>)
 8001450:	edd1 6a00 	vldr	s13, [r1]
 8001454:	494e      	ldr	r1, [pc, #312]	; (8001590 <ADC_Stream0_Handler+0x2e0>)
 8001456:	edd2 9a00 	vldr	s19, [r2]
 800145a:	edcd 6a08 	vstr	s13, [sp, #32]
 800145e:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <ADC_Stream0_Handler+0x2e4>)
 8001460:	edd1 6a00 	vldr	s13, [r1]
 8001464:	f8df a158 	ldr.w	sl, [pc, #344]	; 80015c0 <ADC_Stream0_Handler+0x310>
 8001468:	494b      	ldr	r1, [pc, #300]	; (8001598 <ADC_Stream0_Handler+0x2e8>)
 800146a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80015c4 <ADC_Stream0_Handler+0x314>
 800146e:	ed92 ba00 	vldr	s22, [r2]
 8001472:	ed9a 1a00 	vldr	s2, [sl]
 8001476:	edd9 7a00 	vldr	s15, [r9]
 800147a:	8023      	strh	r3, [r4, #0]
 800147c:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8001480:	edd1 6a00 	vldr	s13, [r1]
 8001484:	4945      	ldr	r1, [pc, #276]	; (800159c <ADC_Stream0_Handler+0x2ec>)
 8001486:	edcd 6a00 	vstr	s13, [sp]
 800148a:	edd1 6a00 	vldr	s13, [r1]
 800148e:	4944      	ldr	r1, [pc, #272]	; (80015a0 <ADC_Stream0_Handler+0x2f0>)
 8001490:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8001494:	edd1 6a00 	vldr	s13, [r1]
 8001498:	4942      	ldr	r1, [pc, #264]	; (80015a4 <ADC_Stream0_Handler+0x2f4>)
 800149a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80015c8 <ADC_Stream0_Handler+0x318>
 800149e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80014a2:	edd1 6a00 	vldr	s13, [r1]
 80014a6:	4f40      	ldr	r7, [pc, #256]	; (80015a8 <ADC_Stream0_Handler+0x2f8>)
 80014a8:	edcd 6a06 	vstr	s13, [sp, #24]
 80014ac:	edd8 6a00 	vldr	s13, [r8]
 80014b0:	4e3e      	ldr	r6, [pc, #248]	; (80015ac <ADC_Stream0_Handler+0x2fc>)
 80014b2:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 80014b6:	edd7 6a00 	vldr	s13, [r7]
 80014ba:	493d      	ldr	r1, [pc, #244]	; (80015b0 <ADC_Stream0_Handler+0x300>)
 80014bc:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80014c0:	edd6 6a00 	vldr	s13, [r6]
 80014c4:	f8df b104 	ldr.w	fp, [pc, #260]	; 80015cc <ADC_Stream0_Handler+0x31c>
 80014c8:	edcd 6a07 	vstr	s13, [sp, #28]
 80014cc:	edd1 6a00 	vldr	s13, [r1]
 80014d0:	4938      	ldr	r1, [pc, #224]	; (80015b4 <ADC_Stream0_Handler+0x304>)
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <ADC_Stream0_Handler+0x308>)
 80014d4:	f9bb 0000 	ldrsh.w	r0, [fp]
 80014d8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80014dc:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 80014e0:	edd1 6a00 	vldr	s13, [r1]
 80014e4:	4686      	mov	lr, r0
 80014e6:	4935      	ldr	r1, [pc, #212]	; (80015bc <ADC_Stream0_Handler+0x30c>)
 80014e8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80014ec:	e173      	b.n	80017d6 <ADC_Stream0_Handler+0x526>
 80014ee:	bf00      	nop
 80014f0:	240072e5 	.word	0x240072e5
 80014f4:	58024400 	.word	0x58024400
 80014f8:	24008820 	.word	0x24008820
 80014fc:	2400202c 	.word	0x2400202c
 8001500:	24007264 	.word	0x24007264
 8001504:	00000000 	.word	0x00000000
 8001508:	3b000000 	.word	0x3b000000
 800150c:	24000730 	.word	0x24000730
 8001510:	24001008 	.word	0x24001008
 8001514:	2400b818 	.word	0x2400b818
 8001518:	240072e0 	.word	0x240072e0
 800151c:	24000808 	.word	0x24000808
 8001520:	2400069c 	.word	0x2400069c
 8001524:	240083fa 	.word	0x240083fa
 8001528:	24006248 	.word	0x24006248
 800152c:	2400623c 	.word	0x2400623c
 8001530:	ffff0007 	.word	0xffff0007
 8001534:	240006a4 	.word	0x240006a4
 8001538:	240006f4 	.word	0x240006f4
 800153c:	240006d0 	.word	0x240006d0
 8001540:	240006d4 	.word	0x240006d4
 8001544:	240006b0 	.word	0x240006b0
 8001548:	240006a0 	.word	0x240006a0
 800154c:	24000708 	.word	0x24000708
 8001550:	240006e8 	.word	0x240006e8
 8001554:	2400070c 	.word	0x2400070c
 8001558:	240006ec 	.word	0x240006ec
 800155c:	240006bc 	.word	0x240006bc
 8001560:	240006ac 	.word	0x240006ac
 8001564:	24000700 	.word	0x24000700
 8001568:	240006e0 	.word	0x240006e0
 800156c:	24000704 	.word	0x24000704
 8001570:	240006e4 	.word	0x240006e4
 8001574:	240006a8 	.word	0x240006a8
 8001578:	240006b8 	.word	0x240006b8
 800157c:	240006f8 	.word	0x240006f8
 8001580:	24000718 	.word	0x24000718
 8001584:	240006fc 	.word	0x240006fc
 8001588:	2400071c 	.word	0x2400071c
 800158c:	240006b4 	.word	0x240006b4
 8001590:	240006c4 	.word	0x240006c4
 8001594:	240006f0 	.word	0x240006f0
 8001598:	24000710 	.word	0x24000710
 800159c:	24000714 	.word	0x24000714
 80015a0:	240006c0 	.word	0x240006c0
 80015a4:	24000728 	.word	0x24000728
 80015a8:	240006cc 	.word	0x240006cc
 80015ac:	24000720 	.word	0x24000720
 80015b0:	24000724 	.word	0x24000724
 80015b4:	240006c8 	.word	0x240006c8
 80015b8:	24001010 	.word	0x24001010
 80015bc:	24000810 	.word	0x24000810
 80015c0:	240006d8 	.word	0x240006d8
 80015c4:	240006dc 	.word	0x240006dc
 80015c8:	2400072c 	.word	0x2400072c
 80015cc:	2400069e 	.word	0x2400069e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015d0:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015d4:	0798      	lsls	r0, r3, #30
 80015d6:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80015da:	ee7f faaa 	vadd.f32	s31, s31, s21
 80015de:	ee3f fa0a 	vadd.f32	s30, s30, s20
 80015e2:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 80015e6:	eeef 5a24 	vfma.f32	s11, s30, s9
 80015ea:	ee75 6a27 	vadd.f32	s13, s10, s15
 80015ee:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80015f2:	f100 8118 	bmi.w	8001826 <ADC_Stream0_Handler+0x576>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80015f6:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80015fa:	075d      	lsls	r5, r3, #29
 80015fc:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001600:	ee79 9a8e 	vadd.f32	s19, s19, s28
 8001604:	ee39 9a2d 	vadd.f32	s18, s18, s27
 8001608:	eea9 3aa4 	vfma.f32	s6, s19, s9
 800160c:	eee9 3a24 	vfma.f32	s7, s18, s9
 8001610:	ee33 9a26 	vadd.f32	s18, s6, s13
 8001614:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001618:	f100 8116 	bmi.w	8001848 <ADC_Stream0_Handler+0x598>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800161c:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001620:	0718      	lsls	r0, r3, #28
 8001622:	ed9d 5a01 	vldr	s10, [sp, #4]
 8001626:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800162a:	eddd 3a05 	vldr	s7, [sp, #20]
 800162e:	eead 5a04 	vfma.f32	s10, s26, s8
 8001632:	ed9d 3a04 	vldr	s6, [sp, #16]
 8001636:	ee7c caa3 	vadd.f32	s25, s25, s7
 800163a:	ee3c ca03 	vadd.f32	s24, s24, s6
 800163e:	eeec 5aa4 	vfma.f32	s11, s25, s9
 8001642:	eeac 5a24 	vfma.f32	s10, s24, s9
 8001646:	ee39 ca25 	vadd.f32	s24, s18, s11
 800164a:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 800164e:	f100 81a5 	bmi.w	800199c <ADC_Stream0_Handler+0x6ec>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001652:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001656:	f013 0010 	ands.w	r0, r3, #16
 800165a:	ed9d 3a03 	vldr	s6, [sp, #12]
 800165e:	eddd 5a00 	vldr	s11, [sp]
 8001662:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 8001666:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800166a:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 800166e:	eee5 fa84 	vfma.f32	s31, s11, s8
 8001672:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001676:	ee75 5a25 	vadd.f32	s11, s10, s11
 800167a:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 800167e:	eea5 faa4 	vfma.f32	s30, s11, s9
 8001682:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001686:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001688:	ee75 5a25 	vadd.f32	s11, s10, s11
 800168c:	eee5 faa4 	vfma.f32	s31, s11, s9
 8001690:	ee3c fa0f 	vadd.f32	s30, s24, s30
 8001694:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8001698:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800169c:	f040 819b 	bne.w	80019d6 <ADC_Stream0_Handler+0x726>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016a0:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016a4:	ea4f 008e 	mov.w	r0, lr, lsl #2
 80016a8:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 80016ac:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 80016b0:	eee3 5a84 	vfma.f32	s11, s7, s8
 80016b4:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016b8:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 80016bc:	eea3 5a84 	vfma.f32	s10, s7, s8
 80016c0:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016c4:	4ddd      	ldr	r5, [pc, #884]	; (8001a3c <ADC_Stream0_Handler+0x78c>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016c6:	ee73 3a8f 	vadd.f32	s7, s7, s30
 80016ca:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016ce:	4428      	add	r0, r5
 80016d0:	4ddb      	ldr	r5, [pc, #876]	; (8001a40 <ADC_Stream0_Handler+0x790>)
 80016d2:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016d6:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 80016da:	ee73 3a8f 	vadd.f32	s7, s7, s30
 80016de:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 80016e2:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016e6:	eddf 3ad7 	vldr	s7, [pc, #860]	; 8001a44 <ADC_Stream0_Handler+0x794>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016ea:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016ee:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016f2:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80016f6:	ee25 5a23 	vmul.f32	s10, s10, s7
 80016fa:	ed80 5a00 	vstr	s10, [r0]
 80016fe:	f10e 0001 	add.w	r0, lr, #1
 8001702:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8001706:	edce 5a00 	vstr	s11, [lr]
 800170a:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800170e:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8001712:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001716:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 800171a:	f2c0 81d3 	blt.w	8001ac4 <ADC_Stream0_Handler+0x814>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 800171e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001722:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001726:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800172a:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 800172e:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001730:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001734:	ed8d da01 	vstr	s26, [sp, #4]
 8001738:	eeb0 da69 	vmov.f32	s26, s19
 800173c:	edcd ea02 	vstr	s29, [sp, #8]
 8001740:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001744:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001748:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800174c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001750:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001754:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001758:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800175c:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 8001760:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001764:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 8001768:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800176c:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8001770:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001774:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001778:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800177c:	edcd fa07 	vstr	s31, [sp, #28]
 8001780:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001784:	edcd ca00 	vstr	s25, [sp]
 8001788:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 800178c:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 800178e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8001792:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001796:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 800179a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800179e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80017a2:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 80017a6:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80017aa:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 80017ae:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 80017b2:	eeb0 fa4a 	vmov.f32	s30, s20
 80017b6:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 80017ba:	3208      	adds	r2, #8
 80017bc:	3b01      	subs	r3, #1
 80017be:	eef0 7a41 	vmov.f32	s15, s2
 80017c2:	3108      	adds	r1, #8
 80017c4:	4594      	cmp	ip, r2
 80017c6:	eeb0 6a61 	vmov.f32	s12, s3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	d059      	beq.n	8001882 <ADC_Stream0_Handler+0x5d2>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80017ce:	eef0 1a60 	vmov.f32	s3, s1
 80017d2:	eeb0 1a40 	vmov.f32	s2, s0
 80017d6:	eeb0 7a42 	vmov.f32	s14, s4
 80017da:	ed12 0a01 	vldr	s0, [r2, #-4]
 80017de:	ed12 2a02 	vldr	s4, [r2, #-8]
 80017e2:	eef0 6a62 	vmov.f32	s13, s5
 80017e6:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 80017ea:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80017ec:	ee72 2a07 	vadd.f32	s5, s4, s14
 80017f0:	eeb0 7a40 	vmov.f32	s14, s0
 80017f4:	eea1 7a04 	vfma.f32	s14, s2, s8
 80017f8:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 80017fc:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001800:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8001804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001808:	eeb0 7a60 	vmov.f32	s14, s1
 800180c:	eea1 7a84 	vfma.f32	s14, s3, s8
 8001810:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8001814:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001818:	f57f aeda 	bpl.w	80015d0 <ADC_Stream0_Handler+0x320>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 800181c:	eeb0 aa47 	vmov.f32	s20, s14
 8001820:	eef0 aa67 	vmov.f32	s21, s15
 8001824:	e7c9      	b.n	80017ba <ADC_Stream0_Handler+0x50a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001826:	eef0 5a48 	vmov.f32	s11, s16
 800182a:	eeb0 5a68 	vmov.f32	s10, s17
 800182e:	eeb0 8a47 	vmov.f32	s16, s14
 8001832:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001836:	eef0 da46 	vmov.f32	s27, s12
 800183a:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 800183e:	eeb0 fa4a 	vmov.f32	s30, s20
 8001842:	eef0 fa6a 	vmov.f32	s31, s21
 8001846:	e7b8      	b.n	80017ba <ADC_Stream0_Handler+0x50a>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001848:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 800184c:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001850:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001854:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001858:	eef0 5a48 	vmov.f32	s11, s16
 800185c:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001860:	eeb0 ba46 	vmov.f32	s22, s12
 8001864:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001868:	eeb0 8a47 	vmov.f32	s16, s14
 800186c:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001870:	eeb0 9a6d 	vmov.f32	s18, s27
 8001874:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8001878:	eeb0 fa4a 	vmov.f32	s30, s20
 800187c:	eef0 fa6a 	vmov.f32	s31, s21
 8001880:	e79b      	b.n	80017ba <ADC_Stream0_Handler+0x50a>
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <ADC_Stream0_Handler+0x798>)
 8001884:	eddd 7a02 	vldr	s15, [sp, #8]
 8001888:	ed83 2a00 	vstr	s4, [r3]
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <ADC_Stream0_Handler+0x79c>)
 800188e:	ed8a 0a00 	vstr	s0, [sl]
 8001892:	edc3 0a00 	vstr	s1, [r3]
 8001896:	4b6e      	ldr	r3, [pc, #440]	; (8001a50 <ADC_Stream0_Handler+0x7a0>)
 8001898:	ed89 1a00 	vstr	s2, [r9]
 800189c:	edc3 1a00 	vstr	s3, [r3]
 80018a0:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <ADC_Stream0_Handler+0x7a4>)
 80018a2:	4a6d      	ldr	r2, [pc, #436]	; (8001a58 <ADC_Stream0_Handler+0x7a8>)
 80018a4:	edc3 2a00 	vstr	s5, [r3]
 80018a8:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <ADC_Stream0_Handler+0x7ac>)
 80018aa:	edc3 8a00 	vstr	s17, [r3]
 80018ae:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <ADC_Stream0_Handler+0x7b0>)
 80018b0:	ed83 5a00 	vstr	s10, [r3]
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <ADC_Stream0_Handler+0x7b4>)
 80018b6:	edc3 fa00 	vstr	s31, [r3]
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <ADC_Stream0_Handler+0x7b8>)
 80018bc:	ed83 8a00 	vstr	s16, [r3]
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <ADC_Stream0_Handler+0x7bc>)
 80018c2:	edc3 5a00 	vstr	s11, [r3]
 80018c6:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <ADC_Stream0_Handler+0x7c0>)
 80018c8:	ed83 fa00 	vstr	s30, [r3]
 80018cc:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <ADC_Stream0_Handler+0x7c4>)
 80018ce:	edc3 ba00 	vstr	s23, [r3]
 80018d2:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <ADC_Stream0_Handler+0x7c8>)
 80018d4:	ed83 3a00 	vstr	s6, [r3]
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <ADC_Stream0_Handler+0x7cc>)
 80018da:	edc3 9a00 	vstr	s19, [r3]
 80018de:	4b68      	ldr	r3, [pc, #416]	; (8001a80 <ADC_Stream0_Handler+0x7d0>)
 80018e0:	ed83 ba00 	vstr	s22, [r3]
 80018e4:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <ADC_Stream0_Handler+0x7d4>)
 80018e6:	edc3 3a00 	vstr	s7, [r3]
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <ADC_Stream0_Handler+0x7d8>)
 80018ec:	ed83 9a00 	vstr	s18, [r3]
 80018f0:	4b66      	ldr	r3, [pc, #408]	; (8001a8c <ADC_Stream0_Handler+0x7dc>)
 80018f2:	edc3 ea00 	vstr	s29, [r3]
 80018f6:	4b66      	ldr	r3, [pc, #408]	; (8001a90 <ADC_Stream0_Handler+0x7e0>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
 80018fc:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <ADC_Stream0_Handler+0x7e4>)
 80018fe:	eddd 7a01 	vldr	s15, [sp, #4]
 8001902:	edc3 ca00 	vstr	s25, [r3]
 8001906:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <ADC_Stream0_Handler+0x7e8>)
 8001908:	ed83 da00 	vstr	s26, [r3]
 800190c:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <ADC_Stream0_Handler+0x7ec>)
 800190e:	edc3 7a00 	vstr	s15, [r3]
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <ADC_Stream0_Handler+0x7f0>)
 8001914:	eddd 7a03 	vldr	s15, [sp, #12]
 8001918:	ed83 ca00 	vstr	s24, [r3]
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <ADC_Stream0_Handler+0x7f4>)
 800191e:	edc3 7a00 	vstr	s15, [r3]
 8001922:	eddd 7a08 	vldr	s15, [sp, #32]
 8001926:	4b60      	ldr	r3, [pc, #384]	; (8001aa8 <ADC_Stream0_Handler+0x7f8>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
 800192c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001930:	4b5e      	ldr	r3, [pc, #376]	; (8001aac <ADC_Stream0_Handler+0x7fc>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
 8001936:	eddd 7a00 	vldr	s15, [sp]
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <ADC_Stream0_Handler+0x800>)
 800193c:	f8ab e000 	strh.w	lr, [fp]
 8001940:	edc3 7a00 	vstr	s15, [r3]
 8001944:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8001948:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <ADC_Stream0_Handler+0x804>)
 800194a:	edc3 7a00 	vstr	s15, [r3]
 800194e:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8001952:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <ADC_Stream0_Handler+0x808>)
 8001954:	edc3 7a00 	vstr	s15, [r3]
 8001958:	eddd 7a06 	vldr	s15, [sp, #24]
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <ADC_Stream0_Handler+0x80c>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
 8001962:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <ADC_Stream0_Handler+0x810>)
 8001968:	edc8 7a00 	vstr	s15, [r8]
 800196c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001970:	edc7 7a00 	vstr	s15, [r7]
 8001974:	eddd 7a07 	vldr	s15, [sp, #28]
 8001978:	edc6 7a00 	vstr	s15, [r6]
 800197c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001980:	edc3 7a00 	vstr	s15, [r3]
 8001984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001988:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800198c:	8023      	strh	r3, [r4, #0]
 800198e:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 8001992:	b015      	add	sp, #84	; 0x54
 8001994:	ecbd 8b10 	vpop	{d8-d15}
 8001998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800199c:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019a0:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019a4:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019a8:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019ac:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019b0:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019b4:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019b8:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019bc:	eeb0 da69 	vmov.f32	s26, s19
 80019c0:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019c4:	eeb0 ba46 	vmov.f32	s22, s12
 80019c8:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80019cc:	eeb0 8a47 	vmov.f32	s16, s14
 80019d0:	eef0 8a67 	vmov.f32	s17, s15
 80019d4:	e6e5      	b.n	80017a2 <ADC_Stream0_Handler+0x4f2>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80019d6:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019da:	eef0 3a4b 	vmov.f32	s7, s22
 80019de:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019e2:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80019e6:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019ea:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80019ee:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019f2:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019f6:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019fa:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80019fe:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a02:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a06:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a0a:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a0e:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a12:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a16:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a1a:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a1e:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a22:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001a26:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a2a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001a2e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001a32:	e6b2      	b.n	800179a <ADC_Stream0_Handler+0x4ea>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8001a34:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001a38:	1c51      	adds	r1, r2, #1
 8001a3a:	e4ab      	b.n	8001394 <ADC_Stream0_Handler+0xe4>
 8001a3c:	2000b000 	.word	0x2000b000
 8001a40:	2000d000 	.word	0x2000d000
 8001a44:	34000000 	.word	0x34000000
 8001a48:	240006a4 	.word	0x240006a4
 8001a4c:	240006d0 	.word	0x240006d0
 8001a50:	240006d4 	.word	0x240006d4
 8001a54:	240006a0 	.word	0x240006a0
 8001a58:	240006c8 	.word	0x240006c8
 8001a5c:	240006e8 	.word	0x240006e8
 8001a60:	240006ec 	.word	0x240006ec
 8001a64:	240006ac 	.word	0x240006ac
 8001a68:	240006e0 	.word	0x240006e0
 8001a6c:	240006e4 	.word	0x240006e4
 8001a70:	240006a8 	.word	0x240006a8
 8001a74:	240006f8 	.word	0x240006f8
 8001a78:	240006fc 	.word	0x240006fc
 8001a7c:	240006b4 	.word	0x240006b4
 8001a80:	240006f0 	.word	0x240006f0
 8001a84:	240006f4 	.word	0x240006f4
 8001a88:	240006b0 	.word	0x240006b0
 8001a8c:	24000708 	.word	0x24000708
 8001a90:	2400070c 	.word	0x2400070c
 8001a94:	240006bc 	.word	0x240006bc
 8001a98:	24000700 	.word	0x24000700
 8001a9c:	24000704 	.word	0x24000704
 8001aa0:	240006b8 	.word	0x240006b8
 8001aa4:	24000718 	.word	0x24000718
 8001aa8:	2400071c 	.word	0x2400071c
 8001aac:	240006c4 	.word	0x240006c4
 8001ab0:	24000710 	.word	0x24000710
 8001ab4:	24000714 	.word	0x24000714
 8001ab8:	240006c0 	.word	0x240006c0
 8001abc:	24000728 	.word	0x24000728
 8001ac0:	24000724 	.word	0x24000724
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ac4:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001ac8:	eeb0 5a68 	vmov.f32	s10, s17
 8001acc:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001ad0:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001ad4:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ad8:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001adc:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ae0:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8001ae4:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001ae8:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001aec:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001af0:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001af4:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001af8:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001afc:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b00:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b04:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b08:	ed8d da01 	vstr	s26, [sp, #4]
 8001b0c:	eeb0 da69 	vmov.f32	s26, s19
 8001b10:	edcd ea02 	vstr	s29, [sp, #8]
 8001b14:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b18:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b1c:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b20:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b24:	edcd ca00 	vstr	s25, [sp]
 8001b28:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b2c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001b30:	e77b      	b.n	8001a2a <ADC_Stream0_Handler+0x77a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001b32:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <ADC_Stream0_Handler+0x89c>)
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <ADC_Stream0_Handler+0x8a0>)
 8001b36:	ed92 0a00 	vldr	s0, [r2]
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b42:	f000 f807 	bl	8001b54 <SDR_ComputeLO>
 8001b46:	f7ff bbd0 	b.w	80012ea <ADC_Stream0_Handler+0x3a>
 8001b4a:	bf00      	nop
 8001b4c:	24007264 	.word	0x24007264
 8001b50:	24008c34 	.word	0x24008c34

08001b54 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001b54:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <SDR_ComputeLO+0x144>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001b60:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d173      	bne.n	8001c52 <SDR_ComputeLO+0xfe>
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001b6a:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <SDR_ComputeLO+0x148>)
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <SDR_ComputeLO+0x14c>)
 8001b6e:	ed92 8a00 	vldr	s16, [r2]
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4d4b      	ldr	r5, [pc, #300]	; (8001ca4 <SDR_ComputeLO+0x150>)
 8001b78:	4c4b      	ldr	r4, [pc, #300]	; (8001ca8 <SDR_ComputeLO+0x154>)
 8001b7a:	484c      	ldr	r0, [pc, #304]	; (8001cac <SDR_ComputeLO+0x158>)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <SDR_ComputeLO+0x15c>)
 8001b7e:	edd5 5a00 	vldr	s11, [r5]
 8001b82:	edd4 7a00 	vldr	s15, [r4]
 8001b86:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001b8a:	edd0 6a00 	vldr	s13, [r0]
 8001b8e:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001b90:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8001b94:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001b96:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8001b9a:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001b9c:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8001ba0:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ba2:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ba6:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001baa:	ee67 7aa6 	vmul.f32	s15, s15, s13
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bae:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bb2:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bb6:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bba:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bbe:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bc2:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bc6:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bca:	ee66 5aa5 	vmul.f32	s11, s13, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bce:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bd2:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bd6:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bda:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bde:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001be2:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be6:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bee:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bf2:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bf6:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bfa:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bfe:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c02:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c06:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c0a:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c0e:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c12:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c16:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001c1a:	d1b9      	bne.n	8001b90 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c1c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8001c20:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001cb8 <SDR_ComputeLO+0x164>
 8001c24:	edc4 7a00 	vstr	s15, [r4]
 8001c28:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001cbc <SDR_ComputeLO+0x168>
 8001c2c:	eee5 6a05 	vfma.f32	s13, s10, s10
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <SDR_ComputeLO+0x16c>)
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <SDR_ComputeLO+0x170>)
 8001c34:	edc5 5a00 	vstr	s11, [r5]
 8001c38:	ed82 5a00 	vstr	s10, [r2]
 8001c3c:	ed83 6a00 	vstr	s12, [r3]
 8001c40:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8001c44:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c48:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001c4c:	edc0 7a00 	vstr	s15, [r0]
}	
 8001c50:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c52:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001cc8 <SDR_ComputeLO+0x174>
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <SDR_ComputeLO+0x178>)
 8001c58:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001c5c:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c60:	ed92 7a00 	vldr	s14, [r2]
 8001c64:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001c68:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001c6c:	eeb0 0b49 	vmov.f64	d0, d9
 8001c70:	f011 f862 	bl	8012d38 <cos>
 8001c74:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <SDR_ComputeLO+0x148>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001c7a:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001c7e:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001c82:	f011 f8a5 	bl	8012dd0 <sin>
 8001c86:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SDR_ComputeLO+0x14c>)
 8001c8c:	eeb1 7a47 	vneg.f32	s14, s14
 8001c90:	ed83 7a00 	vstr	s14, [r3]
 8001c94:	e76f      	b.n	8001b76 <SDR_ComputeLO+0x22>
 8001c96:	bf00      	nop
 8001c98:	24000204 	.word	0x24000204
 8001c9c:	24000734 	.word	0x24000734
 8001ca0:	2400073c 	.word	0x2400073c
 8001ca4:	24000208 	.word	0x24000208
 8001ca8:	24000754 	.word	0x24000754
 8001cac:	24000200 	.word	0x24000200
 8001cb0:	24006a74 	.word	0x24006a74
 8001cb4:	24006274 	.word	0x24006274
 8001cb8:	46000200 	.word	0x46000200
 8001cbc:	39000000 	.word	0x39000000
 8001cc0:	24000758 	.word	0x24000758
 8001cc4:	2400075c 	.word	0x2400075c
 8001cc8:	40c90fdb 	.word	0x40c90fdb
 8001ccc:	24007284 	.word	0x24007284

08001cd0 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	d028      	beq.n	8001d26 <SDR_2R_toC_f32+0x56>
 8001cd4:	3010      	adds	r0, #16
 8001cd6:	3110      	adds	r1, #16
 8001cd8:	3220      	adds	r2, #32
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cda:	f850 cc10 	ldr.w	ip, [r0, #-16]
  while(blkCnt)
 8001cde:	3110      	adds	r1, #16
 8001ce0:	3010      	adds	r0, #16
 8001ce2:	3b01      	subs	r3, #1
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001ce4:	f842 cc20 	str.w	ip, [r2, #-32]
  while(blkCnt)
 8001ce8:	f102 0220 	add.w	r2, r2, #32
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cec:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8001cf0:	f842 cc3c 	str.w	ip, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001cf4:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8001cf8:	f842 cc38 	str.w	ip, [r2, #-56]
 8001cfc:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8001d00:	f842 cc34 	str.w	ip, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d04:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8001d08:	f842 cc30 	str.w	ip, [r2, #-48]
 8001d0c:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8001d10:	f842 cc2c 	str.w	ip, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d14:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8001d18:	f842 cc28 	str.w	ip, [r2, #-40]
 8001d1c:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8001d20:	f842 cc24 	str.w	ip, [r2, #-36]
  while(blkCnt)
 8001d24:	d1d9      	bne.n	8001cda <SDR_2R_toC_f32+0xa>
    
    blkCnt--;
  }
}
 8001d26:	4770      	bx	lr

08001d28 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <SDR_downconvert_f32+0xd8>)
  float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;
	
// loop Unrolling
  blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
  while(blkCnt)
 8001d2a:	3110      	adds	r1, #16
 8001d2c:	3210      	adds	r2, #16
 8001d2e:	3008      	adds	r0, #8
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d30:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001e04 <SDR_downconvert_f32+0xdc>
 8001d34:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	4c33      	ldr	r4, [pc, #204]	; (8001e08 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d3c:	f830 ec08 	ldrh.w	lr, [r0, #-8]
  while(blkCnt)
 8001d40:	3110      	adds	r1, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001d42:	ed13 5a04 	vldr	s10, [r3, #-16]
  while(blkCnt)
 8001d46:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d48:	ee06 ea10 	vmov	s12, lr
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d4c:	f830 ec06 	ldrh.w	lr, [r0, #-6]
  while(blkCnt)
 8001d50:	3310      	adds	r3, #16
 8001d52:	3210      	adds	r2, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d54:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d58:	ee06 ea90 	vmov	s13, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d5c:	f830 ec02 	ldrh.w	lr, [r0, #-2]
  while(blkCnt)
 8001d60:	4563      	cmp	r3, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  while(blkCnt)
 8001d66:	f100 0008 	add.w	r0, r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d6a:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d6e:	ee07 ea90 	vmov	s15, lr
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d72:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d76:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d7a:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d7e:	ee07 ea10 	vmov	s14, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d86:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001d8a:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001d92:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001d96:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001d9a:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001d9e:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001da2:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001da6:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001daa:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dae:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001db2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001db6:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001dba:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001dbe:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001dc2:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001dc6:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001dca:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001dce:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001dd2:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001dd6:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001dda:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001dde:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001de2:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8001de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dea:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001dee:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001dfa:	d19f      	bne.n	8001d3c <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001dfc:	bd10      	pop	{r4, pc}
 8001dfe:	bf00      	nop
 8001e00:	24006274 	.word	0x24006274
 8001e04:	3a000000 	.word	0x3a000000
 8001e08:	24006a74 	.word	0x24006a74

08001e0c <SDR_float_to_DAC_audio>:
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001e0c:	0893      	lsrs	r3, r2, #2
  while(blkCnt--)
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d058      	beq.n	8001ec4 <SDR_float_to_DAC_audio+0xb8>
 8001e12:	f103 3cff 	add.w	ip, r3, #4294967295
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <SDR_float_to_DAC_audio+0xe4>)
 8001e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e1c:	fa1f fc8c 	uxth.w	ip, ip
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	f100 0310 	add.w	r3, r0, #16
 8001e28:	3020      	adds	r0, #32
 8001e2a:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8001e2e:	f101 0008 	add.w	r0, r1, #8
{
 8001e32:	b500      	push	{lr}
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e34:	eeb0 5a47 	vmov.f32	s10, s14
 8001e38:	ed53 5a04 	vldr	s11, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e3c:	ed13 6a03 	vldr	s12, [r3, #-12]
  while(blkCnt--)
 8001e40:	3008      	adds	r0, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e42:	ed53 6a02 	vldr	s13, [r3, #-8]
  while(blkCnt--)
 8001e46:	3310      	adds	r3, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e48:	eea5 5aa7 	vfma.f32	s10, s11, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e4c:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e50:	eef0 5a47 	vmov.f32	s11, s14
  while(blkCnt--)
 8001e54:	459c      	cmp	ip, r3
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e56:	eee7 5a86 	vfma.f32	s11, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e5a:	eeb0 6a47 	vmov.f32	s12, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e5e:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e62:	eea7 6aa6 	vfma.f32	s12, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e66:	eef0 6a47 	vmov.f32	s13, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e6a:	ee15 ea10 	vmov	lr, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e6e:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e72:	f820 ec10 	strh.w	lr, [r0, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e76:	eee7 6aa4 	vfma.f32	s13, s15, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e7a:	ee15 ea90 	vmov	lr, s11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e7e:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e82:	f820 ec0e 	strh.w	lr, [r0, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e86:	ee16 ea10 	vmov	lr, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e8a:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e8e:	f820 ec0c 	strh.w	lr, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e92:	ee16 ea90 	vmov	lr, s13
 8001e96:	f820 ec0a 	strh.w	lr, [r0, #-10]
  while(blkCnt--)
 8001e9a:	d1cb      	bne.n	8001e34 <SDR_float_to_DAC_audio+0x28>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001e9c:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001e9e:	f001 021f 	and.w	r2, r1, #31
 8001ea2:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea4:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ea8:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <SDR_float_to_DAC_audio+0xe8>)
 8001eaa:	440a      	add	r2, r1
 8001eac:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001eb0:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001eb2:	1a53      	subs	r3, r2, r1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dcf9      	bgt.n	8001eac <SDR_float_to_DAC_audio+0xa0>
 8001eb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ebc:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001ec0:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8001ec4:	0093      	lsls	r3, r2, #2
 8001ec6:	b902      	cbnz	r2, 8001eca <SDR_float_to_DAC_audio+0xbe>
 8001ec8:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001eca:	f001 021f 	and.w	r2, r1, #31
 8001ece:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed0:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <SDR_float_to_DAC_audio+0xe8>)
 8001ed6:	440a      	add	r2, r1
 8001ed8:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001edc:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8001ede:	1a53      	subs	r3, r2, r1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	dcf9      	bgt.n	8001ed8 <SDR_float_to_DAC_audio+0xcc>
 8001ee4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee8:	f3bf 8f6f 	isb	sy
return;
 8001eec:	e7ec      	b.n	8001ec8 <SDR_float_to_DAC_audio+0xbc>
 8001eee:	bf00      	nop
 8001ef0:	2400c9cc 	.word	0x2400c9cc
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001ef8:	0892      	lsrs	r2, r2, #2
 8001efa:	d016      	beq.n	8001f2a <SDR_memcpy_f32+0x32>
 8001efc:	3110      	adds	r1, #16
 8001efe:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001f00:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001f04:	3110      	adds	r1, #16
 8001f06:	3a01      	subs	r2, #1
 8001f08:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001f0c:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001f10:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001f14:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001f18:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001f1c:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001f20:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001f24:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001f28:	d1ea      	bne.n	8001f00 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001f2a:	4770      	bx	lr

08001f2c <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001f2c:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f2e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001f32:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f34:	440b      	add	r3, r1
	while(blkCnt--)
 8001f36:	f1a2 0102 	sub.w	r1, r2, #2
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 8001f3e:	d036      	beq.n	8001fae <SDR_mirror_LSB+0x82>
 8001f40:	f1a3 0220 	sub.w	r2, r3, #32
 8001f44:	f1a3 0c1c 	sub.w	ip, r3, #28
 8001f48:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001f4c:	4402      	add	r2, r0
 8001f4e:	4460      	add	r0, ip
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f50:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 8001f54:	3a20      	subs	r2, #32
 8001f56:	3820      	subs	r0, #32
 8001f58:	3901      	subs	r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f5a:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8001f5e:	3320      	adds	r3, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f60:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8001f64:	f1b1 3fff 	cmp.w	r1, #4294967295
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f68:	eef1 7a67 	vneg.f32	s15, s15
 8001f6c:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f70:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8001f74:	f843 cc38 	str.w	ip, [r3, #-56]
 8001f78:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001f7c:	eef1 7a67 	vneg.f32	s15, s15
 8001f80:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f84:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8001f88:	f843 cc30 	str.w	ip, [r3, #-48]
 8001f8c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001f90:	eef1 7a67 	vneg.f32	s15, s15
 8001f94:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f98:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8001f9c:	f843 cc28 	str.w	ip, [r3, #-40]
 8001fa0:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001fa4:	eef1 7a67 	vneg.f32	s15, s15
 8001fa8:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001fac:	d1d0      	bne.n	8001f50 <SDR_mirror_LSB+0x24>
	}
}
 8001fae:	4770      	bx	lr

08001fb0 <SDR_compute_IIR_parms>:
#endif
   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001fb0:	492b      	ldr	r1, [pc, #172]	; (8002060 <SDR_compute_IIR_parms+0xb0>)
 8001fb2:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002064 <SDR_compute_IIR_parms+0xb4>
 8001fb6:	edd1 7a00 	vldr	s15, [r1]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001fba:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8001fbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fc0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800206c <SDR_compute_IIR_parms+0xbc>
 8001fc4:	ed92 7a00 	vldr	s14, [r2]
{
 8001fc8:	b508      	push	{r3, lr}
 8001fca:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001fce:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <SDR_compute_IIR_parms+0xc0>)
 8001fd4:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001fd8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001fdc:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001fe0:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001fe4:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001fe8:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001fec:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001ff0:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001ff4:	f010 fea0 	bl	8012d38 <cos>
 8001ff8:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <SDR_compute_IIR_parms+0xc8>)
 8002000:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002004:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 8002008:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800200c:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002010:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8002014:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002018:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800201c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8002020:	ee25 6b06 	vmul.f64	d6, d5, d6
 8002024:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002028:	ee26 6a27 	vmul.f32	s12, s12, s15
 800202c:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002030:	f010 fe82 	bl	8012d38 <cos>
 8002034:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002038:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800207c <SDR_compute_IIR_parms+0xcc>
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <SDR_compute_IIR_parms+0xd0>)
 800203e:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002042:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8002046:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 800204a:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800204e:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8002052:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002056:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800205a:	ed83 7a00 	vstr	s14, [r3]
}
 800205e:	bd08      	pop	{r3, pc}
 8002060:	24008c34 	.word	0x24008c34
 8002064:	44000000 	.word	0x44000000
 8002068:	24007284 	.word	0x24007284
 800206c:	40490fdb 	.word	0x40490fdb
 8002070:	2400727c 	.word	0x2400727c
 8002074:	24008400 	.word	0x24008400
 8002078:	24008404 	.word	0x24008404
 800207c:	3f99999a 	.word	0x3f99999a
 8002080:	24008c2c 	.word	0x24008c2c

08002084 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8002084:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8002086:	2900      	cmp	r1, #0
 8002088:	d077      	beq.n	800217a <SDR_CWPeak+0xf6>
 800208a:	1e4b      	subs	r3, r1, #1
 800208c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8002194 <SDR_CWPeak+0x110>
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002090:	493a      	ldr	r1, [pc, #232]	; (800217c <SDR_CWPeak+0xf8>)
 8002092:	3010      	adds	r0, #16
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <SDR_CWPeak+0xfc>)
 8002096:	eddc 2a00 	vldr	s5, [ip]
 800209a:	ed91 6a00 	vldr	s12, [r1]
 800209e:	ed92 5a00 	vldr	s10, [r2]
{
 80020a2:	b4f0      	push	{r4, r5, r6, r7}
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020a4:	4c37      	ldr	r4, [pc, #220]	; (8002184 <SDR_CWPeak+0x100>)
 80020a6:	4f38      	ldr	r7, [pc, #224]	; (8002188 <SDR_CWPeak+0x104>)
 80020a8:	edd4 4a00 	vldr	s9, [r4]
 80020ac:	4e37      	ldr	r6, [pc, #220]	; (800218c <SDR_CWPeak+0x108>)
 80020ae:	4d38      	ldr	r5, [pc, #224]	; (8002190 <SDR_CWPeak+0x10c>)
 80020b0:	eeb1 2a64 	vneg.f32	s4, s9
 80020b4:	ed97 7a00 	vldr	s14, [r7]
 80020b8:	edd6 5a00 	vldr	s11, [r6]
 80020bc:	edd5 6a00 	vldr	s13, [r5]
 80020c0:	ee66 3a47 	vnmul.f32	s7, s12, s14
 80020c4:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020c8:	ee26 4a66 	vnmul.f32	s8, s12, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020cc:	ed50 7a03 	vldr	s15, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020d0:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 80020d4:	3010      	adds	r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020d6:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020da:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020de:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020e8:	eee7 3a05 	vfma.f32	s7, s14, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80020ec:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 80020f0:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020f4:	ed92 5a00 	vldr	s10, [r2]
 80020f8:	ed91 6a00 	vldr	s12, [r1]
 80020fc:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002100:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002104:	ee25 7a26 	vmul.f32	s14, s10, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002108:	ee65 6a03 	vmul.f32	s13, s10, s6
 800210c:	eee6 7a62 	vfms.f32	s15, s12, s5
 8002110:	eea6 7a63 	vfms.f32	s14, s12, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002114:	eeb1 2a64 	vneg.f32	s4, s9
 8002118:	eee4 7ae3 	vfms.f32	s15, s9, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800211c:	eea4 7ae7 	vfms.f32	s14, s9, s15
 8002120:	eee6 6a67 	vfms.f32	s13, s12, s15
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002124:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002128:	eee4 7ac4 	vfms.f32	s15, s9, s8
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800212c:	eee4 6ac7 	vfms.f32	s13, s9, s14
 8002130:	eef0 2a66 	vmov.f32	s5, s13
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002134:	ee65 6a07 	vmul.f32	s13, s10, s14
 8002138:	eee6 6a44 	vfms.f32	s13, s12, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800213c:	eeb0 4a67 	vmov.f32	s8, s15
 8002140:	eed6 7a25 	vfnms.f32	s15, s12, s11
 8002144:	eea6 4a65 	vfms.f32	s8, s12, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002148:	ee65 5a22 	vmul.f32	s11, s10, s5
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800214c:	eee4 6aa7 	vfma.f32	s13, s9, s15
 8002150:	eee6 5a44 	vfms.f32	s11, s12, s8
	   *buf++ = y0;
 8002154:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
	   *buf++ = y0;
 8002158:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800215c:	eee4 5ae6 	vfms.f32	s11, s9, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8002160:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8002164:	d1ac      	bne.n	80020c0 <SDR_CWPeak+0x3c>
 8002166:	ed87 7a00 	vstr	s14, [r7]
 800216a:	edc6 5a00 	vstr	s11, [r6]
 800216e:	edc5 6a00 	vstr	s13, [r5]
 8002172:	edcc 2a00 	vstr	s5, [ip]
   }
}
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	4770      	bx	lr
 800217a:	4770      	bx	lr
 800217c:	24008404 	.word	0x24008404
 8002180:	24008c2c 	.word	0x24008c2c
 8002184:	24008400 	.word	0x24008400
 8002188:	2400074c 	.word	0x2400074c
 800218c:	24000748 	.word	0x24000748
 8002190:	24000750 	.word	0x24000750
 8002194:	24000744 	.word	0x24000744

08002198 <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 800219c:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <SDR_demodAM_AGC+0xf8>)
{
 800219e:	b082      	sub	sp, #8
 80021a0:	4f3c      	ldr	r7, [pc, #240]	; (8002294 <SDR_demodAM_AGC+0xfc>)
 80021a2:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 80021a6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80022b4 <SDR_demodAM_AGC+0x11c>
		  hangcnt = Hcount[AM]; 
 80021aa:	f8b3 e000 	ldrh.w	lr, [r3]
 80021ae:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80021b0:	eddf 4a39 	vldr	s9, [pc, #228]	; 8002298 <SDR_demodAM_AGC+0x100>
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80021b4:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800229c <SDR_demodAM_AGC+0x104>
 80021b8:	ed98 7a00 	vldr	s14, [r8]
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <SDR_demodAM_AGC+0x108>)
 80021be:	4d39      	ldr	r5, [pc, #228]	; (80022a4 <SDR_demodAM_AGC+0x10c>)
 80021c0:	4c39      	ldr	r4, [pc, #228]	; (80022a8 <SDR_demodAM_AGC+0x110>)
		  pk  *= Decay[AM];
 80021c2:	4e3a      	ldr	r6, [pc, #232]	; (80022ac <SDR_demodAM_AGC+0x114>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80021c4:	edd0 7a01 	vldr	s15, [r0, #4]
 80021c8:	edd0 6a00 	vldr	s13, [r0]
 80021cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    audiotmp /= max(pk, AgcThreshold);  
 80021d0:	ed95 6a00 	vldr	s12, [r5]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80021d4:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80021d8:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80021dc:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80021e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 80021e8:	bfa8      	it	ge
 80021ea:	eef1 5ae7 	vsqrtge.f32	s11, s15
	  if(pk < audiotmp)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 80021f2:	bfb8      	it	lt
 80021f4:	eef0 5a64 	vmovlt.f32	s11, s9
 80021f8:	eef4 7ae5 	vcmpe.f32	s15, s11
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	d504      	bpl.n	800220c <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 8002202:	eef0 7a65 	vmov.f32	s15, s11
		  hangcnt = Hcount[AM]; 
 8002206:	4672      	mov	r2, lr
			pk = audiotmp;
 8002208:	edc3 5a00 	vstr	s11, [r3]
    audiotmp /= max(pk, AgcThreshold);  
 800220c:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 8002210:	eec5 6a86 	vdiv.f32	s13, s11, s12
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002214:	eef0 5a66 	vmov.f32	s11, s13
    audiotmp /= max(pk, AgcThreshold);  
 8002218:	edc4 6a00 	vstr	s13, [r4]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800221c:	eee7 5a05 	vfma.f32	s11, s14, s10
	  if(hangcnt == 0)
 8002220:	b9da      	cbnz	r2, 800225a <SDR_demodAM_AGC+0xc2>
		  pk  *= Decay[AM];
 8002222:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002226:	3008      	adds	r0, #8
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002228:	edcd 5a00 	vstr	s11, [sp]
		  pk  *= Decay[AM];
 800222c:	ee66 6aa7 	vmul.f32	s13, s13, s15
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002230:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002234:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002236:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800223a:	ed9d 7a00 	vldr	s14, [sp]
		  pk  *= Decay[AM];
 800223e:	edc3 6a00 	vstr	s13, [r3]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002242:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002246:	d1bd      	bne.n	80021c4 <SDR_demodAM_AGC+0x2c>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8002248:	4919      	ldr	r1, [pc, #100]	; (80022b0 <SDR_demodAM_AGC+0x118>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	603a      	str	r2, [r7, #0]
 800224e:	ed88 7a00 	vstr	s14, [r8]
 8002252:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 8002254:	b002      	add	sp, #8
 8002256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800225a:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 800225e:	3008      	adds	r0, #8
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002260:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002264:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002266:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800226a:	ed9d 7a00 	vldr	s14, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800226e:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002272:	d1a7      	bne.n	80021c4 <SDR_demodAM_AGC+0x2c>
    PeakAudioValue=pk;
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 8002276:	2a00      	cmp	r2, #0
    PeakAudioValue=pk;
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	603a      	str	r2, [r7, #0]
 800227c:	ed88 7a00 	vstr	s14, [r8]
 8002280:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 8002282:	dd01      	ble.n	8002288 <SDR_demodAM_AGC+0xf0>
 8002284:	3a01      	subs	r2, #1
 8002286:	603a      	str	r2, [r7, #0]
}
 8002288:	b002      	add	sp, #8
 800228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228e:	bf00      	nop
 8002290:	24006258 	.word	0x24006258
 8002294:	2400b504 	.word	0x2400b504
 8002298:	00000000 	.word	0x00000000
 800229c:	3f75c28f 	.word	0x3f75c28f
 80022a0:	2400b840 	.word	0x2400b840
 80022a4:	24001814 	.word	0x24001814
 80022a8:	24008c28 	.word	0x24008c28
 80022ac:	24002030 	.word	0x24002030
 80022b0:	24007278 	.word	0x24007278
 80022b4:	24000740 	.word	0x24000740

080022b8 <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80022b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <SDR_demodSSB_CW_AGC+0xf0>)
 80022be:	f241 0e04 	movw	lr, #4100	; 0x1004
 80022c2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80023c0 <SDR_demodSSB_CW_AGC+0x108>
	  if(pk < sav)
 80022c6:	4a39      	ldr	r2, [pc, #228]	; (80023ac <SDR_demodSSB_CW_AGC+0xf4>)
 80022c8:	4486      	add	lr, r0
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022ca:	889f      	ldrh	r7, [r3, #4]
 80022cc:	885e      	ldrh	r6, [r3, #2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022ce:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80022d2:	1d03      	adds	r3, r0, #4
	  if(pk < sav)
 80022d4:	edd2 7a00 	vldr	s15, [r2]
 80022d8:	f8d8 0000 	ldr.w	r0, [r8]
 80022dc:	4d34      	ldr	r5, [pc, #208]	; (80023b0 <SDR_demodSSB_CW_AGC+0xf8>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022de:	4c35      	ldr	r4, [pc, #212]	; (80023b4 <SDR_demodSSB_CW_AGC+0xfc>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80022e0:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80023c4 <SDR_demodSSB_CW_AGC+0x10c>
 80022e4:	e014      	b.n	8002310 <SDR_demodSSB_CW_AGC+0x58>
      if(CurrentMode == CW) pk  *= Decay[CW];
 80022e6:	f894 c000 	ldrb.w	ip, [r4]
 80022ea:	f1bc 0f03 	cmp.w	ip, #3
 80022ee:	d052      	beq.n	8002396 <SDR_demodSSB_CW_AGC+0xde>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80022f0:	f1bc 0f01 	cmp.w	ip, #1
 80022f4:	ed92 7a00 	vldr	s14, [r2]
 80022f8:	bf0c      	ite	eq
 80022fa:	edda 7a01 	vldreq	s15, [sl, #4]
 80022fe:	edda 7a02 	vldrne	s15, [sl, #8]
 8002302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002306:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 800230a:	3308      	adds	r3, #8
 800230c:	459e      	cmp	lr, r3
 800230e:	d02d      	beq.n	800236c <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	ed53 6a01 	vldr	s13, [r3, #-4]
 8002318:	ee27 7a07 	vmul.f32	s14, s14, s14
 800231c:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 8002320:	eeb1 6ac7 	vsqrt.f32	s12, s14
	  if(pk < sav)
 8002324:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dd0f      	ble.n	800234e <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800232e:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 8002332:	ed82 6a00 	vstr	s12, [r2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002336:	f1bc 0f03 	cmp.w	ip, #3
 800233a:	d026      	beq.n	800238a <SDR_demodSSB_CW_AGC+0xd2>
 800233c:	eef0 7a46 	vmov.f32	s15, s12
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002340:	f1bc 0f01 	cmp.w	ip, #1
 8002344:	bf0c      	ite	eq
 8002346:	4630      	moveq	r0, r6
 8002348:	4638      	movne	r0, r7
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800234a:	ed53 6a01 	vldr	s13, [r3, #-4]
 800234e:	ed95 7a00 	vldr	s14, [r5]
 8002352:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235a:	eca1 7a01 	vstmia	r1!, {s14}
	  if(hangcnt == 0)
 800235e:	2800      	cmp	r0, #0
 8002360:	d0c1      	beq.n	80022e6 <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 8002362:	3308      	adds	r3, #8
    }  
	}
	PeakAudioValue=pk;
 8002364:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002368:	459e      	cmp	lr, r3
 800236a:	d1d1      	bne.n	8002310 <SDR_demodSSB_CW_AGC+0x58>
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 800236e:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <SDR_demodSSB_CW_AGC+0x104>)
 8002372:	f8c8 0000 	str.w	r0, [r8]
 8002376:	ed82 6a00 	vstr	s12, [r2]
 800237a:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 800237e:	dd02      	ble.n	8002386 <SDR_demodSSB_CW_AGC+0xce>
 8002380:	3801      	subs	r0, #1
 8002382:	f8c8 0000 	str.w	r0, [r8]
}
 8002386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800238a:	eef0 7a46 	vmov.f32	s15, s12
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800238e:	ed53 6a01 	vldr	s13, [r3, #-4]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002392:	4648      	mov	r0, r9
 8002394:	e7db      	b.n	800234e <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002396:	ed92 7a00 	vldr	s14, [r2]
 800239a:	edda 7a03 	vldr	s15, [sl, #12]
 800239e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a2:	edc2 7a00 	vstr	s15, [r2]
 80023a6:	e7b0      	b.n	800230a <SDR_demodSSB_CW_AGC+0x52>
 80023a8:	24006258 	.word	0x24006258
 80023ac:	2400b840 	.word	0x2400b840
 80023b0:	24001814 	.word	0x24001814
 80023b4:	2400202c 	.word	0x2400202c
 80023b8:	24000738 	.word	0x24000738
 80023bc:	24007278 	.word	0x24007278
 80023c0:	2400b504 	.word	0x2400b504
 80023c4:	24002030 	.word	0x24002030

080023c8 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 80023c8:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 80023ca:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 80023ce:	b082      	sub	sp, #8
 80023d0:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 80023d8:	f7fd ff82 	bl	80002e0 <strlen>
	if( call_len > 6 ) {
 80023dc:	2806      	cmp	r0, #6
 80023de:	f200 808f 	bhi.w	8002500 <pack_call+0x138>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 80023e2:	78a2      	ldrb	r2, [r4, #2]
 80023e4:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <pack_call+0x18c>)
 80023e6:	5cd2      	ldrb	r2, [r2, r3]
 80023e8:	0752      	lsls	r2, r2, #29
 80023ea:	d57c      	bpl.n	80024e6 <pack_call+0x11e>
		for (i=0; i<call_len; i++) {
 80023ec:	b120      	cbz	r0, 80023f8 <pack_call+0x30>
			call6[i]=callsign[i];
 80023ee:	4602      	mov	r2, r0
 80023f0:	4621      	mov	r1, r4
 80023f2:	4668      	mov	r0, sp
 80023f4:	f00d fbda 	bl	800fbac <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 80023f8:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 80023fc:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8002400:	fa5f fe8c 	uxtb.w	lr, ip
 8002404:	f1be 0f09 	cmp.w	lr, #9
 8002408:	d908      	bls.n	800241c <pack_call+0x54>
	if( ch == 32 ) {  //space
 800240a:	2b20      	cmp	r3, #32
 800240c:	f000 809a 	beq.w	8002544 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002410:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002414:	2a19      	cmp	r2, #25
 8002416:	d976      	bls.n	8002506 <pack_call+0x13e>
	return -1;
 8002418:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 800241c:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8002420:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8002424:	fa5f f48c 	uxtb.w	r4, ip
 8002428:	2c09      	cmp	r4, #9
 800242a:	d907      	bls.n	800243c <pack_call+0x74>
	if( ch == 32 ) {  //space
 800242c:	2b20      	cmp	r3, #32
 800242e:	f000 8087 	beq.w	8002540 <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002432:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002436:	2a19      	cmp	r2, #25
 8002438:	d979      	bls.n	800252e <pack_call+0x166>
	return -1;
 800243a:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 800243c:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8002440:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	2a09      	cmp	r2, #9
 8002448:	d906      	bls.n	8002458 <pack_call+0x90>
	if( ch == 32 ) {  //space
 800244a:	2b20      	cmp	r3, #32
 800244c:	d076      	beq.n	800253c <pack_call+0x174>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800244e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002452:	2a19      	cmp	r2, #25
 8002454:	d968      	bls.n	8002528 <pack_call+0x160>
	return -1;
 8002456:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8002458:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 800245c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b09      	cmp	r3, #9
 8002464:	d906      	bls.n	8002474 <pack_call+0xac>
	if( ch == 32 ) {  //space
 8002466:	2920      	cmp	r1, #32
 8002468:	d066      	beq.n	8002538 <pack_call+0x170>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 800246a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 800246e:	2b19      	cmp	r3, #25
 8002470:	d956      	bls.n	8002520 <pack_call+0x158>
	return -1;
 8002472:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8002474:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 8002478:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800247c:	b2c9      	uxtb	r1, r1
 800247e:	2909      	cmp	r1, #9
 8002480:	d906      	bls.n	8002490 <pack_call+0xc8>
	if( ch == 32 ) {  //space
 8002482:	2820      	cmp	r0, #32
 8002484:	d061      	beq.n	800254a <pack_call+0x182>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8002486:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800248a:	2919      	cmp	r1, #25
 800248c:	d940      	bls.n	8002510 <pack_call+0x148>
	return -1;
 800248e:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8002490:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 8002494:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 8002498:	b2c0      	uxtb	r0, r0
 800249a:	2809      	cmp	r0, #9
 800249c:	d907      	bls.n	80024ae <pack_call+0xe6>
	if( ch == 32 ) {  //space
 800249e:	f1bc 0f20 	cmp.w	ip, #32
 80024a2:	d054      	beq.n	800254e <pack_call+0x186>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80024a4:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 80024a8:	2819      	cmp	r0, #25
 80024aa:	d935      	bls.n	8002518 <pack_call+0x150>
	return -1;
 80024ac:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 80024ae:	f04f 0c24 	mov.w	ip, #36	; 0x24
	n = n*10+call6[2];
	n = n*27+call6[3]-10;
 80024b2:	3b0a      	subs	r3, #10
	n = n*27+call6[4]-10;
 80024b4:	390a      	subs	r1, #10
	n = n*27+call6[5]-10;
 80024b6:	380a      	subs	r0, #10
	n = n*36+call6[1];
 80024b8:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 80024bc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80024c0:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	n = n*27+call6[3]-10;
 80024c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024c8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80024cc:	4413      	add	r3, r2
	n = n*27+call6[4]-10;
 80024ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80024d2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80024d6:	440b      	add	r3, r1
	n = n*27+call6[5]-10;
 80024d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80024dc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80024e0:	4418      	add	r0, r3
	return n;
}
 80024e2:	b002      	add	sp, #8
 80024e4:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 80024e6:	7862      	ldrb	r2, [r4, #1]
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	075b      	lsls	r3, r3, #29
 80024ec:	d584      	bpl.n	80023f8 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d082      	beq.n	80023f8 <pack_call+0x30>
			call6[i]=callsign[i-1];
 80024f2:	4602      	mov	r2, r0
 80024f4:	4621      	mov	r1, r4
 80024f6:	f10d 0001 	add.w	r0, sp, #1
 80024fa:	f00d fb57 	bl	800fbac <memcpy>
 80024fe:	e77b      	b.n	80023f8 <pack_call+0x30>
		return 0;
 8002500:	2000      	movs	r0, #0
}
 8002502:	b002      	add	sp, #8
 8002504:	bd10      	pop	{r4, pc}
		return ch-55;
 8002506:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 800250a:	fa5f fe8c 	uxtb.w	lr, ip
 800250e:	e785      	b.n	800241c <pack_call+0x54>
 8002510:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 8002514:	b2c9      	uxtb	r1, r1
 8002516:	e7bb      	b.n	8002490 <pack_call+0xc8>
 8002518:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 800251c:	b2c0      	uxtb	r0, r0
 800251e:	e7c6      	b.n	80024ae <pack_call+0xe6>
 8002520:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e7a5      	b.n	8002474 <pack_call+0xac>
 8002528:	3b37      	subs	r3, #55	; 0x37
 800252a:	b2da      	uxtb	r2, r3
 800252c:	e794      	b.n	8002458 <pack_call+0x90>
 800252e:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 8002532:	fa5f f48c 	uxtb.w	r4, ip
 8002536:	e781      	b.n	800243c <pack_call+0x74>
		return 36;
 8002538:	2324      	movs	r3, #36	; 0x24
 800253a:	e79b      	b.n	8002474 <pack_call+0xac>
 800253c:	2224      	movs	r2, #36	; 0x24
 800253e:	e78b      	b.n	8002458 <pack_call+0x90>
 8002540:	2424      	movs	r4, #36	; 0x24
 8002542:	e77b      	b.n	800243c <pack_call+0x74>
 8002544:	f04f 0e24 	mov.w	lr, #36	; 0x24
 8002548:	e768      	b.n	800241c <pack_call+0x54>
 800254a:	2124      	movs	r1, #36	; 0x24
 800254c:	e7a0      	b.n	8002490 <pack_call+0xc8>
 800254e:	2024      	movs	r0, #36	; 0x24
 8002550:	e7ad      	b.n	80024ae <pack_call+0xe6>
 8002552:	bf00      	nop
 8002554:	0801cfc5 	.word	0x0801cfc5

08002558 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 8002558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
			0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
			0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
			0,0
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 800255c:	4abd      	ldr	r2, [pc, #756]	; (8002854 <get_wspr_channel_symbols+0x2fc>)
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 800255e:	2300      	movs	r3, #0
{
 8002560:	4605      	mov	r5, r0
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8002562:	4614      	mov	r4, r2
{
 8002564:	ed2d 8b02 	vpush	{d8}
 8002568:	b0ed      	sub	sp, #436	; 0x1b4
 800256a:	af00      	add	r7, sp, #0
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 800256c:	f890 c000 	ldrb.w	ip, [r0]
	memset(message,0,sizeof(char)*23);
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8002572:	f107 0634 	add.w	r6, r7, #52	; 0x34
{
 8002576:	6039      	str	r1, [r7, #0]
	memset(message,0,sizeof(char)*23);
 8002578:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 800257c:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8002580:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8002584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002586:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800258a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800258c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002590:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 8002594:	f1bc 0f00 	cmp.w	ip, #0
 8002598:	d00d      	beq.n	80025b6 <get_wspr_channel_symbols+0x5e>
 800259a:	f107 021c 	add.w	r2, r7, #28
 800259e:	1c6b      	adds	r3, r5, #1
 80025a0:	43e8      	mvns	r0, r5
 80025a2:	4664      	mov	r4, ip
 80025a4:	e000      	b.n	80025a8 <get_wspr_channel_symbols+0x50>
 80025a6:	b134      	cbz	r4, 80025b6 <get_wspr_channel_symbols+0x5e>
		message[i]=rawmessage[i];
 80025a8:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 80025ac:	f813 4b01 	ldrb.w	r4, [r3], #1
 80025b0:	18c1      	adds	r1, r0, r3
 80025b2:	2917      	cmp	r1, #23
 80025b4:	d1f7      	bne.n	80025a6 <get_wspr_channel_symbols+0x4e>
		i++;
	}

	size_t i1=strcspn(message," ");
 80025b6:	49a8      	ldr	r1, [pc, #672]	; (8002858 <get_wspr_channel_symbols+0x300>)
 80025b8:	f107 001c 	add.w	r0, r7, #28
 80025bc:	f00d ffb4 	bl	8010528 <strcspn>
	size_t i2=strcspn(message,"/");
 80025c0:	49a6      	ldr	r1, [pc, #664]	; (800285c <get_wspr_channel_symbols+0x304>)
	size_t i1=strcspn(message," ");
 80025c2:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 80025c4:	f107 001c 	add.w	r0, r7, #28
 80025c8:	f00d ffae 	bl	8010528 <strcspn>
	size_t i3=strcspn(message,"<");
 80025cc:	49a4      	ldr	r1, [pc, #656]	; (8002860 <get_wspr_channel_symbols+0x308>)
	size_t i2=strcspn(message,"/");
 80025ce:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 80025d0:	f107 001c 	add.w	r0, r7, #28
 80025d4:	f00d ffa8 	bl	8010528 <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80025d8:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 80025da:	49a2      	ldr	r1, [pc, #648]	; (8002864 <get_wspr_channel_symbols+0x30c>)
	size_t i3=strcspn(message,"<");
 80025dc:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 80025de:	f107 001c 	add.w	r0, r7, #28
 80025e2:	f00d ffa1 	bl	8010528 <strcspn>
 80025e6:	4680      	mov	r8, r0
	size_t mlen=strlen(message);
 80025e8:	f107 001c 	add.w	r0, r7, #28
 80025ec:	f7fd fe78 	bl	80002e0 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80025f0:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 80025f2:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 80025f4:	d804      	bhi.n	8002600 <get_wspr_channel_symbols+0xa8>
 80025f6:	4286      	cmp	r6, r0
 80025f8:	d102      	bne.n	8002600 <get_wspr_channel_symbols+0xa8>
 80025fa:	4285      	cmp	r5, r0
 80025fc:	f000 813a 	beq.w	8002874 <get_wspr_channel_symbols+0x31c>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 8002600:	b915      	cbnz	r5, 8002608 <get_wspr_channel_symbols+0xb0>
 8002602:	4598      	cmp	r8, r3
 8002604:	f0c0 8082 	bcc.w	800270c <get_wspr_channel_symbols+0x1b4>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 8002608:	429e      	cmp	r6, r3
 800260a:	d307      	bcc.n	800261c <get_wspr_channel_symbols+0xc4>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 800260c:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 800260e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002612:	46bd      	mov	sp, r7
 8002614:	ecbd 8b02 	vpop	{d8}
 8002618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 800261c:	498e      	ldr	r1, [pc, #568]	; (8002858 <get_wspr_channel_symbols+0x300>)
 800261e:	f107 001c 	add.w	r0, r7, #28
 8002622:	f00d ff93 	bl	801054c <strtok>
 8002626:	4604      	mov	r4, r0
 8002628:	4682      	mov	sl, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 800262a:	2e00      	cmp	r6, #0
 800262c:	d0ee      	beq.n	800260c <get_wspr_channel_symbols+0xb4>
 800262e:	f7fd fe57 	bl	80002e0 <strlen>
 8002632:	42b0      	cmp	r0, r6
 8002634:	d3ea      	bcc.n	800260c <get_wspr_channel_symbols+0xb4>
		powstr = strtok (NULL," ");
 8002636:	4988      	ldr	r1, [pc, #544]	; (8002858 <get_wspr_channel_symbols+0x300>)
 8002638:	2000      	movs	r0, #0
 800263a:	f00d ff87 	bl	801054c <strtok>
		int power = atoi (powstr);
 800263e:	f00d fa87 	bl	800fb50 <atoi>
		if( power < 0 ) power=0;
 8002642:	283c      	cmp	r0, #60	; 0x3c
 8002644:	4605      	mov	r5, r0
		power=power+nu[power%10];
 8002646:	4b88      	ldr	r3, [pc, #544]	; (8002868 <get_wspr_channel_symbols+0x310>)
 8002648:	bfa8      	it	ge
 800264a:	253c      	movge	r5, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 800264c:	4983      	ldr	r1, [pc, #524]	; (800285c <get_wspr_channel_symbols+0x304>)
 800264e:	4620      	mov	r0, r4
 8002650:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
		power=power+nu[power%10];
 8002654:	fba3 2305 	umull	r2, r3, r3, r5
 8002658:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002662:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8002666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266a:	441d      	add	r5, r3
	size_t i1 = strcspn(callsign,"/");
 800266c:	f00d ff5c 	bl	8010528 <strcspn>
	if( callsign[i1+2] == 0 ) {
 8002670:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 8002674:	4606      	mov	r6, r0
	if( callsign[i1+2] == 0 ) {
 8002676:	f814 3008 	ldrb.w	r3, [r4, r8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8442 	beq.w	8002f04 <get_wspr_channel_symbols+0x9ac>
	} else if( callsign[i1+3]==0 ) {
 8002680:	eb04 0900 	add.w	r9, r4, r0
 8002684:	f899 3003 	ldrb.w	r3, [r9, #3]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 8525 	bne.w	80030d8 <get_wspr_channel_symbols+0xb80>
		for (i=0; i<i1; i++) {
 800268e:	b300      	cbz	r0, 80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 8002690:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8002692:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 8002694:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8002698:	d01b      	beq.n	80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 800269a:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 800269c:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 800269e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 80026a2:	d016      	beq.n	80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 80026a4:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 80026a6:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 80026a8:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80026ac:	d011      	beq.n	80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 80026ae:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 80026b0:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 80026b2:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80026b6:	d00c      	beq.n	80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 80026b8:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 80026ba:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 80026bc:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80026c0:	d007      	beq.n	80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 80026c2:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 80026c4:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 80026c6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 80026ca:	d002      	beq.n	80026d2 <get_wspr_channel_symbols+0x17a>
			call6[i]=callsign[i];
 80026cc:	79a3      	ldrb	r3, [r4, #6]
 80026ce:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		*n=pack_call(call6);
 80026d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026d6:	4618      	mov	r0, r3
 80026d8:	ee08 3a10 	vmov	s16, r3
 80026dc:	f7ff fe74 	bl	80023c8 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80026e0:	f899 2001 	ldrb.w	r2, [r9, #1]
 80026e4:	f81a 1008 	ldrb.w	r1, [sl, r8]
		*n=pack_call(call6);
 80026e8:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 80026ea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80026ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026f2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
		*m=60000 + 26 + *m;
 80026f6:	f64e 234a 	movw	r3, #59978	; 0xea4a
 80026fa:	440b      	add	r3, r1
		m=128*ng+ntype+64;
 80026fc:	01db      	lsls	r3, r3, #7
		*nadd=1;
 80026fe:	2201      	movs	r2, #1
		ntype=power + 1 + nadd;
 8002700:	3501      	adds	r5, #1
 8002702:	4415      	add	r5, r2
		m=128*ng+ntype+64;
 8002704:	442b      	add	r3, r5
 8002706:	f103 0540 	add.w	r5, r3, #64	; 0x40
		n=n1;
 800270a:	e119      	b.n	8002940 <get_wspr_channel_symbols+0x3e8>
		callsign=strtok(message,"<> ");
 800270c:	4957      	ldr	r1, [pc, #348]	; (800286c <get_wspr_channel_symbols+0x314>)
 800270e:	f107 001c 	add.w	r0, r7, #28
 8002712:	f00d ff1b 	bl	801054c <strtok>
		grid=strtok(NULL," ");
 8002716:	4950      	ldr	r1, [pc, #320]	; (8002858 <get_wspr_channel_symbols+0x300>)
		callsign=strtok(message,"<> ");
 8002718:	4606      	mov	r6, r0
		grid=strtok(NULL," ");
 800271a:	2000      	movs	r0, #0
 800271c:	f00d ff16 	bl	801054c <strtok>
		powstr=strtok(NULL," ");
 8002720:	494d      	ldr	r1, [pc, #308]	; (8002858 <get_wspr_channel_symbols+0x300>)
		grid=strtok(NULL," ");
 8002722:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 8002724:	2000      	movs	r0, #0
 8002726:	f00d ff11 	bl	801054c <strtok>
		callsign=strtok(message,"<> ");
 800272a:	46b0      	mov	r8, r6
		int power = atoi(powstr);
 800272c:	f00d fa10 	bl	800fb50 <atoi>
		if( power < 0 ) power=0;
 8002730:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8002732:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <get_wspr_channel_symbols+0x310>)
 8002734:	bfa8      	it	ge
 8002736:	203c      	movge	r0, #60	; 0x3c
 8002738:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 800273c:	4630      	mov	r0, r6
		power=power+nu[power%10];
 800273e:	fba3 1302 	umull	r1, r3, r3, r2
 8002742:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002746:	08db      	lsrs	r3, r3, #3
 8002748:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800274c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002750:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8002754:	442a      	add	r2, r5
		ntype=-(power+1);
 8002756:	43d5      	mvns	r5, r2
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8002758:	f7fd fdc2 	bl	80002e0 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800275c:	4b44      	ldr	r3, [pc, #272]	; (8002870 <get_wspr_channel_symbols+0x318>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 800275e:	07b1      	lsls	r1, r6, #30
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002760:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8002762:	f000 8296 	beq.w	8002c92 <get_wspr_channel_symbols+0x73a>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 8002766:	4632      	mov	r2, r6
 8002768:	07d2      	lsls	r2, r2, #31
 800276a:	f140 8365 	bpl.w	8002e38 <get_wspr_channel_symbols+0x8e0>
		while (length > 12)
 800276e:	280c      	cmp	r0, #12
 8002770:	f240 8514 	bls.w	800319c <get_wspr_channel_symbols+0xc44>
 8002774:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002776:	461a      	mov	r2, r3
 8002778:	4619      	mov	r1, r3
 800277a:	46a1      	mov	r9, r4
 800277c:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 800277e:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 8002782:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 8002784:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 8002788:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			c += ((uint32_t)k[11])<<24;
 800278c:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 8002790:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 8002792:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			a += ((uint32_t)k[2])<<16;
 8002796:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 800279a:	ea4f 4403 	mov.w	r4, r3, lsl #16
			c += k[8];
 800279e:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			c += ((uint32_t)k[11])<<24;
 80027a2:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 80027a4:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 80027a8:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 80027ac:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 80027b0:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 80027b4:	4472      	add	r2, lr
			a += k[0];
 80027b6:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 80027ba:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 80027be:	4474      	add	r4, lr
			b += ((uint32_t)k[5])<<8;
 80027c0:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 80027c4:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 80027c8:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 80027cc:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 80027d0:	46b6      	mov	lr, r6
		while (length > 12)
 80027d2:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 80027d6:	eba4 0402 	sub.w	r4, r4, r2
 80027da:	4464      	add	r4, ip
			b += k[4];
 80027dc:	f816 cc14 	ldrb.w	ip, [r6, #-20]
			b += ((uint32_t)k[7])<<24;
 80027e0:	4463      	add	r3, ip
 80027e2:	f816 cc11 	ldrb.w	ip, [r6, #-17]
			mix(a,b,c);
 80027e6:	ea84 7432 	eor.w	r4, r4, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 80027ea:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 80027ee:	440b      	add	r3, r1
			mix(a,b,c);
 80027f0:	4621      	mov	r1, r4
 80027f2:	441a      	add	r2, r3
 80027f4:	eba3 0304 	sub.w	r3, r3, r4
 80027f8:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 80027fc:	4411      	add	r1, r2
 80027fe:	eba2 0203 	sub.w	r2, r2, r3
 8002802:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8002806:	440b      	add	r3, r1
 8002808:	eba1 0102 	sub.w	r1, r1, r2
 800280c:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 8002810:	441a      	add	r2, r3
 8002812:	eba3 0304 	sub.w	r3, r3, r4
 8002816:	eb04 0c02 	add.w	ip, r4, r2
 800281a:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 800281e:	eba2 0201 	sub.w	r2, r2, r1
 8002822:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002826:	4461      	add	r1, ip
		while (length > 12)
 8002828:	d8a9      	bhi.n	800277e <get_wspr_channel_symbols+0x226>
 800282a:	464c      	mov	r4, r9
 800282c:	4663      	mov	r3, ip
 800282e:	46f0      	mov	r8, lr
		switch(length)                   /* all the case statements fall through */
 8002830:	3801      	subs	r0, #1
 8002832:	280b      	cmp	r0, #11
 8002834:	f200 82bd 	bhi.w	8002db2 <get_wspr_channel_symbols+0x85a>
 8002838:	e8df f010 	tbh	[pc, r0, lsl #1]
 800283c:	029b029f 	.word	0x029b029f
 8002840:	02930297 	.word	0x02930297
 8002844:	028c0290 	.word	0x028c0290
 8002848:	02840288 	.word	0x02840288
 800284c:	027d0281 	.word	0x027d0281
 8002850:	02750279 	.word	0x02750279
 8002854:	08013d20 	.word	0x08013d20
 8002858:	08019ff8 	.word	0x08019ff8
 800285c:	08019e20 	.word	0x08019e20
 8002860:	08019e24 	.word	0x08019e24
 8002864:	08019e28 	.word	0x08019e28
 8002868:	cccccccd 	.word	0xcccccccd
 800286c:	08019e2c 	.word	0x08019e2c
 8002870:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8002874:	49ce      	ldr	r1, [pc, #824]	; (8002bb0 <get_wspr_channel_symbols+0x658>)
 8002876:	f107 001c 	add.w	r0, r7, #28
 800287a:	f00d fe67 	bl	801054c <strtok>
		grid = strtok(NULL," ");
 800287e:	49cc      	ldr	r1, [pc, #816]	; (8002bb0 <get_wspr_channel_symbols+0x658>)
		callsign = strtok(message," ");
 8002880:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8002882:	2000      	movs	r0, #0
 8002884:	f00d fe62 	bl	801054c <strtok>
		powstr = strtok(NULL," ");
 8002888:	49c9      	ldr	r1, [pc, #804]	; (8002bb0 <get_wspr_channel_symbols+0x658>)
		grid = strtok(NULL," ");
 800288a:	4606      	mov	r6, r0
		powstr = strtok(NULL," ");
 800288c:	2000      	movs	r0, #0
 800288e:	f00d fe5d 	bl	801054c <strtok>
		int power = atoi(powstr);
 8002892:	f00d f95d 	bl	800fb50 <atoi>
 8002896:	4605      	mov	r5, r0
		n = pack_call(callsign);
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff fd95 	bl	80023c8 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 800289e:	7832      	ldrb	r2, [r6, #0]
		n = pack_call(callsign);
 80028a0:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 80028a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b09      	cmp	r3, #9
 80028aa:	d908      	bls.n	80028be <get_wspr_channel_symbols+0x366>
	if( ch == 32 ) {  //space
 80028ac:	2a20      	cmp	r2, #32
 80028ae:	f000 845c 	beq.w	800316a <get_wspr_channel_symbols+0xc12>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 80028b2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80028b6:	b2db      	uxtb	r3, r3
	return -1;
 80028b8:	2b12      	cmp	r3, #18
 80028ba:	bf28      	it	cs
 80028bc:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 80028be:	7871      	ldrb	r1, [r6, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 80028c0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	2a09      	cmp	r2, #9
 80028c8:	d908      	bls.n	80028dc <get_wspr_channel_symbols+0x384>
	if( ch == 32 ) {  //space
 80028ca:	2920      	cmp	r1, #32
 80028cc:	f000 844a 	beq.w	8003164 <get_wspr_channel_symbols+0xc0c>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 80028d0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 80028d4:	b2d2      	uxtb	r2, r2
	return -1;
 80028d6:	2a12      	cmp	r2, #18
 80028d8:	bf28      	it	cs
 80028da:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 80028dc:	78b1      	ldrb	r1, [r6, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 80028de:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80028e2:	b2c0      	uxtb	r0, r0
 80028e4:	2809      	cmp	r0, #9
 80028e6:	d907      	bls.n	80028f8 <get_wspr_channel_symbols+0x3a0>
	if( ch == 32 ) {  //space
 80028e8:	2920      	cmp	r1, #32
 80028ea:	f000 8441 	beq.w	8003170 <get_wspr_channel_symbols+0xc18>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 80028ee:	3941      	subs	r1, #65	; 0x41
 80028f0:	b2c8      	uxtb	r0, r1
	return -1;
 80028f2:	2812      	cmp	r0, #18
 80028f4:	bf28      	it	cs
 80028f6:	20ff      	movcs	r0, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 80028f8:	78f6      	ldrb	r6, [r6, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 80028fa:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80028fe:	b2c9      	uxtb	r1, r1
 8002900:	2909      	cmp	r1, #9
 8002902:	d908      	bls.n	8002916 <get_wspr_channel_symbols+0x3be>
	if( ch == 32 ) {  //space
 8002904:	2e20      	cmp	r6, #32
 8002906:	f000 8427 	beq.w	8003158 <get_wspr_channel_symbols+0xc00>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 800290a:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 800290e:	b2c9      	uxtb	r1, r1
	return -1;
 8002910:	2912      	cmp	r1, #18
 8002912:	bf28      	it	cs
 8002914:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8002916:	f06f 0609 	mvn.w	r6, #9
 800291a:	b212      	sxth	r2, r2
 800291c:	fb06 f303 	mul.w	r3, r6, r3
 8002920:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002924:	33b3      	adds	r3, #179	; 0xb3
 8002926:	0052      	lsls	r2, r2, #1
 8002928:	1a1b      	subs	r3, r3, r0
 800292a:	20b4      	movs	r0, #180	; 0xb4
 800292c:	fb00 2203 	mla	r2, r0, r3, r2
 8002930:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002934:	440a      	add	r2, r1
 8002936:	ee08 3a10 	vmov	s16, r3
 800293a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
	m=m*128+power+64;
 800293e:	3540      	adds	r5, #64	; 0x40
	it=0xFF & (n>>20);
 8002940:	0d23      	lsrs	r3, r4, #20
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002942:	f3c5 4283 	ubfx	r2, r5, #18, #4
	memset(data,0,sizeof(data));
 8002946:	2600      	movs	r6, #0
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002948:	ee18 0a10 	vmov	r0, s16
	it=0xFF & (n>>20);
 800294c:	743b      	strb	r3, [r7, #16]
	it=0xFF & (n>>12);
 800294e:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8002950:	eb02 1204 	add.w	r2, r2, r4, lsl #4
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8002954:	4631      	mov	r1, r6
	it=0xFF & (n>>12);
 8002956:	747b      	strb	r3, [r7, #17]
	it=0xFF & (n>>4);
 8002958:	0923      	lsrs	r3, r4, #4
	data[3]=it;
 800295a:	74fa      	strb	r2, [r7, #19]
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 800295c:	22b0      	movs	r2, #176	; 0xb0
	it=0xFF & (n>>4);
 800295e:	74bb      	strb	r3, [r7, #18]
	it=0xFF & (m>>10);
 8002960:	12ab      	asrs	r3, r5, #10
	memset(data,0,sizeof(data));
 8002962:	f8c7 6017 	str.w	r6, [r7, #23]
	it=0xFF & (m>>10);
 8002966:	753b      	strb	r3, [r7, #20]
	it=0xFF & (m>>2);
 8002968:	10ab      	asrs	r3, r5, #2
			ENCODE(sym,encstate);
 800296a:	4c92      	ldr	r4, [pc, #584]	; (8002bb4 <get_wspr_channel_symbols+0x65c>)
	it=0xFF & (m>>2);
 800296c:	757b      	strb	r3, [r7, #21]
	it=(m & 0x03)<<6 ;
 800296e:	01ab      	lsls	r3, r5, #6
			ENCODE(sym,encstate);
 8002970:	4d91      	ldr	r5, [pc, #580]	; (8002bb8 <get_wspr_channel_symbols+0x660>)
	it=(m & 0x03)<<6 ;
 8002972:	75bb      	strb	r3, [r7, #22]
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8002974:	466b      	mov	r3, sp
 8002976:	ee08 3a90 	vmov	s17, r3
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 800297a:	f00d f925 	bl	800fbc8 <memset>
	while(nbytes-- != 0) {
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4a8e      	ldr	r2, [pc, #568]	; (8002bbc <get_wspr_channel_symbols+0x664>)
			ENCODE(sym,encstate);
 8002984:	60fe      	str	r6, [r7, #12]
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	f507 7388 	add.w	r3, r7, #272	; 0x110
			encstate = (encstate << 1) | ((*data >> i) & 1);
 800298c:	68b8      	ldr	r0, [r7, #8]
	while(nbytes-- != 0) {
 800298e:	3310      	adds	r3, #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	f810 9b01 	ldrb.w	r9, [r0], #1
 8002996:	60b8      	str	r0, [r7, #8]
 8002998:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 800299c:	f3c9 1880 	ubfx	r8, r9, #6, #1
 80029a0:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 80029a4:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 80029a8:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 80029ac:	f3c9 0680 	ubfx	r6, r9, #2, #1
 80029b0:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
			ENCODE(sym,encstate);
 80029b4:	ea01 0005 	and.w	r0, r1, r5
 80029b8:	4021      	ands	r1, r4
 80029ba:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 80029be:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80029c2:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
			ENCODE(sym,encstate);
 80029c6:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 80029ca:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 80029ce:	b2c9      	uxtb	r1, r1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80029d0:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
			ENCODE(sym,encstate);
 80029d4:	f812 a001 	ldrb.w	sl, [r2, r1]
 80029d8:	b2c0      	uxtb	r0, r0
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80029da:	f3c9 01c0 	ubfx	r1, r9, #3, #1
			ENCODE(sym,encstate);
 80029de:	5c10      	ldrb	r0, [r2, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80029e0:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
			ENCODE(sym,encstate);
 80029e4:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80029e8:	f3c9 0040 	ubfx	r0, r9, #1, #1
 80029ec:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 80029f0:	6079      	str	r1, [r7, #4]
 80029f2:	f009 0101 	and.w	r1, r9, #1
			ENCODE(sym,encstate);
 80029f6:	ea08 0905 	and.w	r9, r8, r5
 80029fa:	ea08 0804 	and.w	r8, r8, r4
			encstate = (encstate << 1) | ((*data >> i) & 1);
 80029fe:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
			ENCODE(sym,encstate);
 8002a02:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 8002a06:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002a0a:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 8002a0e:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002a12:	fa5f f989 	uxtb.w	r9, r9
 8002a16:	fa5f f888 	uxtb.w	r8, r8
 8002a1a:	f812 9009 	ldrb.w	r9, [r2, r9]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002a1e:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			ENCODE(sym,encstate);
 8002a22:	f812 8008 	ldrb.w	r8, [r2, r8]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8002a26:	60f9      	str	r1, [r7, #12]
			ENCODE(sym,encstate);
 8002a28:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 8002a2c:	ea0e 0805 	and.w	r8, lr, r5
 8002a30:	ea0e 0e04 	and.w	lr, lr, r4
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8002a3a:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002a3e:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8002a42:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002a46:	fa5f f888 	uxtb.w	r8, r8
 8002a4a:	fa5f fe8e 	uxtb.w	lr, lr
 8002a4e:	f812 8008 	ldrb.w	r8, [r2, r8]
 8002a52:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002a56:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8002a5a:	ea0c 0e05 	and.w	lr, ip, r5
 8002a5e:	ea0c 0c04 	and.w	ip, ip, r4
 8002a62:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8002a66:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002a6a:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8002a6e:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002a72:	fa5f fe8e 	uxtb.w	lr, lr
 8002a76:	fa5f fc8c 	uxtb.w	ip, ip
 8002a7a:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8002a7e:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002a82:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 8002a86:	ea01 0c05 	and.w	ip, r1, r5
 8002a8a:	4021      	ands	r1, r4
 8002a8c:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8002a90:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002a94:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8002a98:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002a9c:	fa5f fc8c 	uxtb.w	ip, ip
 8002aa0:	b2c9      	uxtb	r1, r1
 8002aa2:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8002aa6:	5c51      	ldrb	r1, [r2, r1]
 8002aa8:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8002aac:	ea06 0105 	and.w	r1, r6, r5
 8002ab0:	4026      	ands	r6, r4
 8002ab2:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8002ab6:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002aba:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8002abe:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002ac2:	b2c9      	uxtb	r1, r1
 8002ac4:	b2f6      	uxtb	r6, r6
 8002ac6:	5c51      	ldrb	r1, [r2, r1]
 8002ac8:	5d96      	ldrb	r6, [r2, r6]
 8002aca:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8002ace:	ea00 0605 	and.w	r6, r0, r5
 8002ad2:	4020      	ands	r0, r4
 8002ad4:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8002ad8:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002adc:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8002ae0:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002ae4:	b2f6      	uxtb	r6, r6
 8002ae6:	b2c0      	uxtb	r0, r0
 8002ae8:	5d96      	ldrb	r6, [r2, r6]
 8002aea:	5c10      	ldrb	r0, [r2, r0]
 8002aec:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	4028      	ands	r0, r5
 8002af4:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002af8:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002afc:	b2c0      	uxtb	r0, r0
 8002afe:	f812 b000 	ldrb.w	fp, [r2, r0]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	4020      	ands	r0, r4
 8002b06:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8002b0a:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8002b0e:	b2c0      	uxtb	r0, r0
 8002b10:	5c10      	ldrb	r0, [r2, r0]
 8002b12:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
			*symbols++ = sym >> 1;
 8002b16:	ea4f 006a 	mov.w	r0, sl, asr #1
			*symbols++ = sym & 1;
 8002b1a:	f00a 0a01 	and.w	sl, sl, #1
			*symbols++ = sym >> 1;
 8002b1e:	f803 0c20 	strb.w	r0, [r3, #-32]
 8002b22:	ea4f 0069 	mov.w	r0, r9, asr #1
			*symbols++ = sym & 1;
 8002b26:	f009 0901 	and.w	r9, r9, #1
 8002b2a:	f803 ac1f 	strb.w	sl, [r3, #-31]
			*symbols++ = sym >> 1;
 8002b2e:	f803 0c1e 	strb.w	r0, [r3, #-30]
 8002b32:	ea4f 0068 	mov.w	r0, r8, asr #1
			*symbols++ = sym & 1;
 8002b36:	f008 0801 	and.w	r8, r8, #1
 8002b3a:	f803 9c1d 	strb.w	r9, [r3, #-29]
			*symbols++ = sym >> 1;
 8002b3e:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8002b42:	ea4f 006e 	mov.w	r0, lr, asr #1
			*symbols++ = sym & 1;
 8002b46:	f00e 0e01 	and.w	lr, lr, #1
 8002b4a:	f803 8c1b 	strb.w	r8, [r3, #-27]
			*symbols++ = sym >> 1;
 8002b4e:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8002b52:	ea4f 006c 	mov.w	r0, ip, asr #1
			*symbols++ = sym & 1;
 8002b56:	f803 ec19 	strb.w	lr, [r3, #-25]
 8002b5a:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8002b5e:	f803 0c18 	strb.w	r0, [r3, #-24]
 8002b62:	1048      	asrs	r0, r1, #1
			*symbols++ = sym & 1;
 8002b64:	f001 0101 	and.w	r1, r1, #1
 8002b68:	f803 cc17 	strb.w	ip, [r3, #-23]
			*symbols++ = sym >> 1;
 8002b6c:	f803 0c16 	strb.w	r0, [r3, #-22]
 8002b70:	1070      	asrs	r0, r6, #1
			*symbols++ = sym & 1;
 8002b72:	f803 1c15 	strb.w	r1, [r3, #-21]
 8002b76:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8002b7a:	f803 0c14 	strb.w	r0, [r3, #-20]
 8002b7e:	ea4f 006b 	mov.w	r0, fp, asr #1
	while(nbytes-- != 0) {
 8002b82:	f107 011b 	add.w	r1, r7, #27
			*symbols++ = sym & 1;
 8002b86:	f00b 0b01 	and.w	fp, fp, #1
			*symbols++ = sym >> 1;
 8002b8a:	f803 0c12 	strb.w	r0, [r3, #-18]
	while(nbytes-- != 0) {
 8002b8e:	68b8      	ldr	r0, [r7, #8]
			*symbols++ = sym & 1;
 8002b90:	f803 6c13 	strb.w	r6, [r3, #-19]
	while(nbytes-- != 0) {
 8002b94:	4288      	cmp	r0, r1
			*symbols++ = sym & 1;
 8002b96:	f803 bc11 	strb.w	fp, [r3, #-17]
	while(nbytes-- != 0) {
 8002b9a:	f47f aef7 	bne.w	800298c <get_wspr_channel_symbols+0x434>
 8002b9e:	f04f 0e00 	mov.w	lr, #0
 8002ba2:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002ba6:	f8df a018 	ldr.w	sl, [pc, #24]	; 8002bc0 <get_wspr_channel_symbols+0x668>
	i = p = 0;
 8002baa:	46f4      	mov	ip, lr
 8002bac:	e00a      	b.n	8002bc4 <get_wspr_channel_symbols+0x66c>
 8002bae:	bf00      	nop
 8002bb0:	08019ff8 	.word	0x08019ff8
 8002bb4:	e4613c47 	.word	0xe4613c47
 8002bb8:	f2d05351 	.word	0xf2d05351
 8002bbc:	08019e40 	.word	0x08019e40
 8002bc0:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002bc4:	fa5f f58e 	uxtb.w	r5, lr
			tmp[j] = sym[p];
 8002bc8:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 8002bcc:	f107 0110 	add.w	r1, r7, #16
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002bd0:	2300      	movs	r3, #0
			p++;
 8002bd2:	f10c 0001 	add.w	r0, ip, #1
			tmp[j] = sym[p];
 8002bd6:	1854      	adds	r4, r2, r1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8002bd8:	462a      	mov	r2, r5
 8002bda:	02ad      	lsls	r5, r5, #10
 8002bdc:	18ad      	adds	r5, r5, r2
 8002bde:	f143 0300 	adc.w	r3, r3, #0
 8002be2:	052a      	lsls	r2, r5, #20
 8002be4:	051e      	lsls	r6, r3, #20
 8002be6:	18aa      	adds	r2, r5, r2
 8002be8:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8002bec:	eb43 0306 	adc.w	r3, r3, r6
 8002bf0:	1892      	adds	r2, r2, r2
 8002bf2:	415b      	adcs	r3, r3
 8002bf4:	ea02 060a 	and.w	r6, r2, sl
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	0235      	lsls	r5, r6, #8
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	19ad      	adds	r5, r5, r6
 8002c02:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8002c06:	ea4f 4105 	mov.w	r1, r5, lsl #16
 8002c0a:	eb43 0202 	adc.w	r2, r3, r2
 8002c0e:	1869      	adds	r1, r5, r1
 8002c10:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8002c14:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8002c18:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8002c1c:	eb42 0209 	adc.w	r2, r2, r9
 8002c20:	eb18 0606 	adds.w	r6, r8, r6
 8002c24:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002c28:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8002c2c:	eb43 0302 	adc.w	r3, r3, r2
 8002c30:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 8002c32:	2ba1      	cmp	r3, #161	; 0xa1
 8002c34:	f200 80f9 	bhi.w	8002e2a <get_wspr_channel_symbols+0x8d2>
			p++;
 8002c38:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8002c3c:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8002c40:	f10e 0e01 	add.w	lr, lr, #1
 8002c44:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 8002c48:	f80b 2003 	strb.w	r2, [fp, r3]
	while (p < 162) {
 8002c4c:	d1ba      	bne.n	8002bc4 <get_wspr_channel_symbols+0x66c>
	memcpy(sym, tmp, sizeof(tmp));
 8002c4e:	22a2      	movs	r2, #162	; 0xa2
 8002c50:	4659      	mov	r1, fp
 8002c52:	ee18 0a10 	vmov	r0, s16
 8002c56:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 8002c5a:	f00c ffa7 	bl	800fbac <memcpy>
	for (i=0; i < 162; i++) {
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 8002c64:	48d3      	ldr	r0, [pc, #844]	; (8002fb4 <get_wspr_channel_symbols+0xa5c>)
 8002c66:	1e59      	subs	r1, r3, #1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8002c68:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002c6c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8002c70:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8002c74:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8002c76:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 8002c7a:	d1f5      	bne.n	8002c68 <get_wspr_channel_symbols+0x710>
	return 1;
 8002c7c:	ee18 3a90 	vmov	r3, s17
 8002c80:	2001      	movs	r0, #1
}
 8002c82:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002c86:	469d      	mov	sp, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	ecbd 8b02 	vpop	{d8}
 8002c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 8002c92:	280c      	cmp	r0, #12
 8002c94:	f240 8263 	bls.w	800315e <get_wspr_channel_symbols+0xc06>
 8002c98:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	46a6      	mov	lr, r4
			c += k[2];
 8002ca0:	f856 4c04 	ldr.w	r4, [r6, #-4]
			length -= 12;
 8002ca4:	380c      	subs	r0, #12
 8002ca6:	46b4      	mov	ip, r6
		while (length > 12)
 8002ca8:	360c      	adds	r6, #12
			c += k[2];
 8002caa:	4422      	add	r2, r4
			mix(a,b,c);
 8002cac:	f856 4c18 	ldr.w	r4, [r6, #-24]
		while (length > 12)
 8002cb0:	280c      	cmp	r0, #12
			mix(a,b,c);
 8002cb2:	eba4 0402 	sub.w	r4, r4, r2
 8002cb6:	4423      	add	r3, r4
 8002cb8:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 8002cbc:	461c      	mov	r4, r3
			b += k[1];
 8002cbe:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8002cc2:	440b      	add	r3, r1
			mix(a,b,c);
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	441a      	add	r2, r3
 8002cc8:	eba3 0304 	sub.w	r3, r3, r4
 8002ccc:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8002cd0:	4411      	add	r1, r2
 8002cd2:	eba2 0203 	sub.w	r2, r2, r3
 8002cd6:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8002cda:	440b      	add	r3, r1
 8002cdc:	eba1 0102 	sub.w	r1, r1, r2
 8002ce0:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 8002ce4:	441a      	add	r2, r3
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	eba3 0301 	sub.w	r3, r3, r1
 8002cec:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 8002cf0:	4623      	mov	r3, r4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	eba2 0201 	sub.w	r2, r2, r1
 8002cf8:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002cfc:	4419      	add	r1, r3
		while (length > 12)
 8002cfe:	d8cf      	bhi.n	8002ca0 <get_wspr_channel_symbols+0x748>
 8002d00:	4674      	mov	r4, lr
 8002d02:	46e0      	mov	r8, ip
		switch(length)
 8002d04:	3801      	subs	r0, #1
 8002d06:	280b      	cmp	r0, #11
 8002d08:	d853      	bhi.n	8002db2 <get_wspr_channel_symbols+0x85a>
 8002d0a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002d0e:	0036      	.short	0x0036
 8002d10:	017d013f 	.word	0x017d013f
 8002d14:	01720179 	.word	0x01720179
 8002d18:	0164016b 	.word	0x0164016b
 8002d1c:	0159015d 	.word	0x0159015d
 8002d20:	014c0155 	.word	0x014c0155
 8002d24:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 8002d26:	f898 000b 	ldrb.w	r0, [r8, #11]
 8002d2a:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 8002d2e:	f898 000a 	ldrb.w	r0, [r8, #10]
 8002d32:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 8002d36:	f898 0009 	ldrb.w	r0, [r8, #9]
 8002d3a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 8002d3e:	f898 0008 	ldrb.w	r0, [r8, #8]
 8002d42:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 8002d44:	f898 0007 	ldrb.w	r0, [r8, #7]
 8002d48:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 8002d4c:	f898 0006 	ldrb.w	r0, [r8, #6]
 8002d50:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 8002d54:	f898 0005 	ldrb.w	r0, [r8, #5]
 8002d58:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 8002d5c:	f898 0004 	ldrb.w	r0, [r8, #4]
 8002d60:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 8002d62:	f898 0003 	ldrb.w	r0, [r8, #3]
 8002d66:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 8002d6a:	f898 0002 	ldrb.w	r0, [r8, #2]
 8002d6e:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 8002d72:	f898 0001 	ldrb.w	r0, [r8, #1]
 8002d76:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 8002d7a:	f898 0000 	ldrb.w	r0, [r8]
 8002d7e:	4403      	add	r3, r0
	final(a,b,c);
 8002d80:	404a      	eors	r2, r1
 8002d82:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 8002d86:	4043      	eors	r3, r0
 8002d88:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8002d8c:	4059      	eors	r1, r3
 8002d8e:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 8002d92:	ea80 0102 	eor.w	r1, r0, r2
 8002d96:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8002d9a:	404b      	eors	r3, r1
 8002d9c:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8002da0:	405a      	eors	r2, r3
 8002da2:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 8002da6:	ea81 0203 	eor.w	r2, r1, r3
 8002daa:	eba2 2333 	sub.w	r3, r2, r3, ror #8
	c=(32767&c);
 8002dae:	f3c3 020e 	ubfx	r2, r3, #0, #15
		memset(grid6,0,sizeof(char)*7);
 8002db2:	2300      	movs	r3, #0
		m=128*ihash + ntype + 64;
 8002db4:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 8002db8:	f507 7280 	add.w	r2, r7, #256	; 0x100
		j=strlen(grid);
 8002dbc:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 8002dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		m=128*ihash + ntype + 64;
 8002dc2:	3540      	adds	r5, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 8002dc4:	ee08 2a10 	vmov	s16, r2
 8002dc8:	f8c7 3103 	str.w	r3, [r7, #259]	; 0x103
		j=strlen(grid);
 8002dcc:	f7fd fa88 	bl	80002e0 <strlen>
		for(i=0; i<j-1; i++) {
 8002dd0:	3801      	subs	r0, #1
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	dd20      	ble.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002dd6:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 8002dd8:	2801      	cmp	r0, #1
			grid6[i]=grid[i+1];
 8002dda:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8002dde:	d01b      	beq.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002de0:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 8002de2:	2802      	cmp	r0, #2
			grid6[i]=grid[i+1];
 8002de4:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 8002de8:	d016      	beq.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002dea:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 8002dec:	2803      	cmp	r0, #3
			grid6[i]=grid[i+1];
 8002dee:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 8002df2:	d011      	beq.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002df4:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 8002df6:	2804      	cmp	r0, #4
			grid6[i]=grid[i+1];
 8002df8:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 8002dfc:	d00c      	beq.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002dfe:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 8002e00:	2805      	cmp	r0, #5
			grid6[i]=grid[i+1];
 8002e02:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 8002e06:	d007      	beq.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002e08:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 8002e0a:	2806      	cmp	r0, #6
			grid6[i]=grid[i+1];
 8002e0c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 8002e10:	d002      	beq.n	8002e18 <get_wspr_channel_symbols+0x8c0>
			grid6[i]=grid[i+1];
 8002e12:	79e3      	ldrb	r3, [r4, #7]
 8002e14:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		grid6[5]=grid[0];
 8002e18:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 8002e1a:	ee18 0a10 	vmov	r0, s16
		grid6[5]=grid[0];
 8002e1e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		n = pack_call(grid6);
 8002e22:	f7ff fad1 	bl	80023c8 <pack_call>
 8002e26:	4604      	mov	r4, r0
 8002e28:	e58a      	b.n	8002940 <get_wspr_channel_symbols+0x3e8>
	while (p < 162) {
 8002e2a:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 8002e2e:	f10e 0e01 	add.w	lr, lr, #1
 8002e32:	f67f aec7 	bls.w	8002bc4 <get_wspr_channel_symbols+0x66c>
 8002e36:	e70a      	b.n	8002c4e <get_wspr_channel_symbols+0x6f6>
		while (length > 12)
 8002e38:	280c      	cmp	r0, #12
 8002e3a:	f240 81ac 	bls.w	8003196 <get_wspr_channel_symbols+0xc3e>
 8002e3e:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8002e40:	461a      	mov	r2, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	46a6      	mov	lr, r4
			c += k[4] + (((uint32_t)k[5])<<16);
 8002e46:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 8002e4a:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8002e4c:	f836 4c04 	ldrh.w	r4, [r6, #-4]
		while (length > 12)
 8002e50:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 8002e52:	eb04 440c 	add.w	r4, r4, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 8002e56:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 8002e5a:	4422      	add	r2, r4
 8002e5c:	4614      	mov	r4, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 8002e5e:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 8002e62:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 8002e66:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 8002e6a:	eba2 0204 	sub.w	r2, r2, r4
 8002e6e:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 8002e70:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 8002e74:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8002e78:	46b4      	mov	ip, r6
			mix(a,b,c);
 8002e7a:	ea82 7234 	eor.w	r2, r2, r4, ror #28
		while (length > 12)
 8002e7e:	f106 060c 	add.w	r6, r6, #12
			b += k[2] + (((uint32_t)k[3])<<16);
 8002e82:	440b      	add	r3, r1
			mix(a,b,c);
 8002e84:	eb03 0104 	add.w	r1, r3, r4
 8002e88:	eba3 0302 	sub.w	r3, r3, r2
 8002e8c:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 8002e90:	440a      	add	r2, r1
 8002e92:	eba1 0103 	sub.w	r1, r1, r3
 8002e96:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8002e9a:	4413      	add	r3, r2
 8002e9c:	eba2 0201 	sub.w	r2, r2, r1
 8002ea0:	eb01 0403 	add.w	r4, r1, r3
 8002ea4:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 8002ea8:	eba3 0302 	sub.w	r3, r3, r2
 8002eac:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 8002eb0:	eb02 0304 	add.w	r3, r2, r4
 8002eb4:	eba4 0201 	sub.w	r2, r4, r1
 8002eb8:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8002ebc:	4419      	add	r1, r3
		while (length > 12)
 8002ebe:	d8c2      	bhi.n	8002e46 <get_wspr_channel_symbols+0x8ee>
 8002ec0:	4674      	mov	r4, lr
 8002ec2:	46e0      	mov	r8, ip
		switch(length)
 8002ec4:	3801      	subs	r0, #1
 8002ec6:	280b      	cmp	r0, #11
 8002ec8:	f63f af73 	bhi.w	8002db2 <get_wspr_channel_symbols+0x85a>
 8002ecc:	a601      	add	r6, pc, #4	; (adr r6, 8002ed4 <get_wspr_channel_symbols+0x97c>)
 8002ece:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002d7b 	.word	0x08002d7b
 8002ed8:	08002f8d 	.word	0x08002f8d
 8002edc:	08002f85 	.word	0x08002f85
 8002ee0:	08003089 	.word	0x08003089
 8002ee4:	08003083 	.word	0x08003083
 8002ee8:	0800306d 	.word	0x0800306d
 8002eec:	08003065 	.word	0x08003065
 8002ef0:	08003047 	.word	0x08003047
 8002ef4:	08003041 	.word	0x08003041
 8002ef8:	0800301d 	.word	0x0800301d
 8002efc:	08003015 	.word	0x08003015
 8002f00:	08003099 	.word	0x08003099
		for (i=0; i<i1; i++) {
 8002f04:	b300      	cbz	r0, 8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f06:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8002f08:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 8002f0a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8002f0e:	d01b      	beq.n	8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f10:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8002f12:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8002f14:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8002f18:	d016      	beq.n	8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f1a:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 8002f1c:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 8002f1e:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 8002f22:	d011      	beq.n	8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f24:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 8002f26:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 8002f28:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8002f2c:	d00c      	beq.n	8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f2e:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 8002f30:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 8002f32:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 8002f36:	d007      	beq.n	8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f38:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 8002f3a:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8002f3c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8002f40:	d002      	beq.n	8002f48 <get_wspr_channel_symbols+0x9f0>
			call6[i]=callsign[i];
 8002f42:	79a3      	ldrb	r3, [r4, #6]
 8002f44:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		call6[i] = '\0';
 8002f48:	f107 0210 	add.w	r2, r7, #16
 8002f4c:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 8002f50:	4413      	add	r3, r2
		*n=pack_call(call6);
 8002f52:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8002f56:	4610      	mov	r0, r2
 8002f58:	ee08 2a10 	vmov	s16, r2
		call6[i] = '\0';
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 8002f62:	f7ff fa31 	bl	80023c8 <pack_call>
		int nc = callsign[i1+1];
 8002f66:	4653      	mov	r3, sl
		*n=pack_call(call6);
 8002f68:	4604      	mov	r4, r0
		int nc = callsign[i1+1];
 8002f6a:	4433      	add	r3, r6
 8002f6c:	785a      	ldrb	r2, [r3, #1]
		if( nc >= 48 && nc <= 57 ) {
 8002f6e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	f200 80a6 	bhi.w	80030c4 <get_wspr_channel_symbols+0xb6c>
		*m=60000-32768+*m;
 8002f78:	f646 2330 	movw	r3, #27184	; 0x6a30
 8002f7c:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8002f7e:	01db      	lsls	r3, r3, #7
 8002f80:	f7ff bbbd 	b.w	80026fe <get_wspr_channel_symbols+0x1a6>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 8002f84:	f898 0002 	ldrb.w	r0, [r8, #2]
 8002f88:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 8002f8c:	f8b8 0000 	ldrh.w	r0, [r8]
 8002f90:	4403      	add	r3, r0
		break;
 8002f92:	e6f5      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 8002f94:	4646      	mov	r6, r8
 8002f96:	f8d8 0008 	ldr.w	r0, [r8, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 8002f9a:	4402      	add	r2, r0
 8002f9c:	6870      	ldr	r0, [r6, #4]
 8002f9e:	4401      	add	r1, r0
 8002fa0:	6830      	ldr	r0, [r6, #0]
 8002fa2:	4403      	add	r3, r0
 8002fa4:	e6ec      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
 8002fa6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002faa:	4646      	mov	r6, r8
 8002fac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002fb0:	e7f3      	b.n	8002f9a <get_wspr_channel_symbols+0xa42>
 8002fb2:	bf00      	nop
 8002fb4:	08019f3f 	.word	0x08019f3f
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 8002fb8:	4646      	mov	r6, r8
 8002fba:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8002fbe:	e7ec      	b.n	8002f9a <get_wspr_channel_symbols+0xa42>
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 8002fc0:	4646      	mov	r6, r8
 8002fc2:	f898 0008 	ldrb.w	r0, [r8, #8]
 8002fc6:	e7e8      	b.n	8002f9a <get_wspr_channel_symbols+0xa42>
		case 8 : b+=k[1]; a+=k[0]; break;
 8002fc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002fcc:	4401      	add	r1, r0
 8002fce:	f8d8 0000 	ldr.w	r0, [r8]
 8002fd2:	4403      	add	r3, r0
 8002fd4:	e6d4      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 8002fd6:	e9d8 6000 	ldrd	r6, r0, [r8]
 8002fda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002fde:	4433      	add	r3, r6
 8002fe0:	4401      	add	r1, r0
 8002fe2:	e6cd      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 8002fe4:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8002fe8:	4401      	add	r1, r0
 8002fea:	f8d8 0000 	ldr.w	r0, [r8]
 8002fee:	4403      	add	r3, r0
 8002ff0:	e6c6      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 8002ff2:	f898 0004 	ldrb.w	r0, [r8, #4]
 8002ff6:	4401      	add	r1, r0
 8002ff8:	f8d8 0000 	ldr.w	r0, [r8]
 8002ffc:	4403      	add	r3, r0
 8002ffe:	e6bf      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 4 : a+=k[0]; break;
 8003000:	f8d8 0000 	ldr.w	r0, [r8]
 8003004:	4403      	add	r3, r0
 8003006:	e6bb      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 3 : a+=k[0]&0xffffff; break;
 8003008:	f8d8 0000 	ldr.w	r0, [r8]
 800300c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003010:	4403      	add	r3, r0
 8003012:	e6b5      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 8003014:	f898 000a 	ldrb.w	r0, [r8, #10]
 8003018:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 800301c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003020:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003022:	f8b8 0000 	ldrh.w	r0, [r8]
 8003026:	4418      	add	r0, r3
		case 10: c+=k[4];
 8003028:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800302c:	441a      	add	r2, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 800302e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8003032:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003036:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800303a:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800303e:	e69f      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 9 : c+=k8[8];                      /* fall through */
 8003040:	f898 0008 	ldrb.w	r0, [r8, #8]
 8003044:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8003046:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800304a:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 800304c:	f8b8 0000 	ldrh.w	r0, [r8]
 8003050:	4418      	add	r0, r3
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 8003052:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8003056:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800305a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800305e:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003062:	e68d      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 8003064:	f898 0006 	ldrb.w	r0, [r8, #6]
 8003068:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 800306c:	f8b8 0000 	ldrh.w	r0, [r8]
 8003070:	4418      	add	r0, r3
		case 6 : b+=k[2];
 8003072:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8003076:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 8003078:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800307c:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003080:	e67e      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 5 : b+=k8[4];                      /* fall through */
 8003082:	f898 0004 	ldrb.w	r0, [r8, #4]
 8003086:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 8003088:	f8b8 0000 	ldrh.w	r0, [r8]
 800308c:	4418      	add	r0, r3
 800308e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8003092:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8003096:	e673      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8003098:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 800309c:	4402      	add	r2, r0
		b+=k[2]+(((uint32_t)k[3])<<16);
 800309e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80030a2:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80030a4:	f8b8 0000 	ldrh.w	r0, [r8]
 80030a8:	4418      	add	r0, r3
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 80030aa:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80030ae:	eb02 4203 	add.w	r2, r2, r3, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 80030b2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80030b6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80030ba:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80030be:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80030c2:	e65d      	b.n	8002d80 <get_wspr_channel_symbols+0x828>
		} else if ( nc >= 65 && nc <= 90 ) {
 80030c4:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80030c8:	2b19      	cmp	r3, #25
 80030ca:	d854      	bhi.n	8003176 <get_wspr_channel_symbols+0xc1e>
		*m=60000-32768+*m;
 80030cc:	f646 2329 	movw	r3, #27177	; 0x6a29
 80030d0:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 80030d2:	01db      	lsls	r3, r3, #7
 80030d4:	f7ff bb13 	b.w	80026fe <get_wspr_channel_symbols+0x1a6>
		char const * pfx = strtok (callsign,"/");
 80030d8:	4936      	ldr	r1, [pc, #216]	; (80031b4 <get_wspr_channel_symbols+0xc5c>)
 80030da:	4620      	mov	r0, r4
 80030dc:	f00d fa36 	bl	801054c <strtok>
		char const * call = strtok(NULL," ");
 80030e0:	4935      	ldr	r1, [pc, #212]	; (80031b8 <get_wspr_channel_symbols+0xc60>)
		char const * pfx = strtok (callsign,"/");
 80030e2:	4606      	mov	r6, r0
		char const * call = strtok(NULL," ");
 80030e4:	2000      	movs	r0, #0
 80030e6:	f00d fa31 	bl	801054c <strtok>
		*n = pack_call (call);
 80030ea:	f7ff f96d 	bl	80023c8 <pack_call>
 80030ee:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 80030f0:	4630      	mov	r0, r6
 80030f2:	f7fd f8f5 	bl	80002e0 <strlen>
		if( plen ==1 ) {
 80030f6:	2801      	cmp	r0, #1
 80030f8:	d042      	beq.n	8003180 <get_wspr_channel_symbols+0xc28>
		} else if( plen == 2 ) {
 80030fa:	2802      	cmp	r0, #2
 80030fc:	d03e      	beq.n	800317c <get_wspr_channel_symbols+0xc24>
		for (i=0; i<plen; i++) {
 80030fe:	2800      	cmp	r0, #0
 8003100:	d050      	beq.n	80031a4 <get_wspr_channel_symbols+0xc4c>
			*m=0;
 8003102:	2300      	movs	r3, #0
 8003104:	f10a 3cff 	add.w	ip, sl, #4294967295
 8003108:	46d0      	mov	r8, sl
			} else if ( nc >= 65 && nc <= 90 ) {
 800310a:	4662      	mov	r2, ip
			int nc = callsign[i];
 800310c:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 8003110:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 8003114:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 8003118:	2909      	cmp	r1, #9
 800311a:	d906      	bls.n	800312a <get_wspr_channel_symbols+0xbd2>
			} else if ( nc >= 65 && nc <= 90 ) {
 800311c:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 8003120:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 8003124:	bf98      	it	ls
 8003126:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
		for (i=0; i<plen; i++) {
 800312a:	4646      	mov	r6, r8
 800312c:	3202      	adds	r2, #2
 800312e:	1b92      	subs	r2, r2, r6
			*m=37*(*m)+nc;
 8003130:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 8003134:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 8003136:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800313a:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 800313c:	d8e5      	bhi.n	800310a <get_wspr_channel_symbols+0xbb2>
		if( *m > 32768 ) {
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003142:	dd20      	ble.n	8003186 <get_wspr_channel_symbols+0xc2e>
			*m=*m-32768;
 8003144:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003148:	f507 7180 	add.w	r1, r7, #256	; 0x100
			*nadd=1;
 800314c:	2201      	movs	r2, #1
		m=128*ng+ntype+64;
 800314e:	01db      	lsls	r3, r3, #7
 8003150:	ee08 1a10 	vmov	s16, r1
 8003154:	f7ff bad4 	b.w	8002700 <get_wspr_channel_symbols+0x1a8>
		return 36;
 8003158:	2124      	movs	r1, #36	; 0x24
 800315a:	f7ff bbdc 	b.w	8002916 <get_wspr_channel_symbols+0x3be>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800315e:	461a      	mov	r2, r3
 8003160:	4619      	mov	r1, r3
 8003162:	e5cf      	b.n	8002d04 <get_wspr_channel_symbols+0x7ac>
		return 36;
 8003164:	2224      	movs	r2, #36	; 0x24
 8003166:	f7ff bbb9 	b.w	80028dc <get_wspr_channel_symbols+0x384>
 800316a:	2324      	movs	r3, #36	; 0x24
 800316c:	f7ff bba7 	b.w	80028be <get_wspr_channel_symbols+0x366>
 8003170:	2024      	movs	r0, #36	; 0x24
 8003172:	f7ff bbc1 	b.w	80028f8 <get_wspr_channel_symbols+0x3a0>
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <get_wspr_channel_symbols+0xc64>)
		*m=60000-32768+*m;
 8003178:	f7ff bac1 	b.w	80026fe <get_wspr_channel_symbols+0x1a6>
			*m=36;
 800317c:	2324      	movs	r3, #36	; 0x24
 800317e:	e7c1      	b.n	8003104 <get_wspr_channel_symbols+0xbac>
			*m=37*(*m)+36;
 8003180:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 8003184:	e7be      	b.n	8003104 <get_wspr_channel_symbols+0xbac>
 8003186:	f507 7180 	add.w	r1, r7, #256	; 0x100
		m=128*ng+ntype+64;
 800318a:	01db      	lsls	r3, r3, #7
		*nadd=0;
 800318c:	2200      	movs	r2, #0
 800318e:	ee08 1a10 	vmov	s16, r1
 8003192:	f7ff bab5 	b.w	8002700 <get_wspr_channel_symbols+0x1a8>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003196:	461a      	mov	r2, r3
 8003198:	4619      	mov	r1, r3
 800319a:	e693      	b.n	8002ec4 <get_wspr_channel_symbols+0x96c>
 800319c:	461a      	mov	r2, r3
 800319e:	4619      	mov	r1, r3
 80031a0:	f7ff bb46 	b.w	8002830 <get_wspr_channel_symbols+0x2d8>
 80031a4:	f507 7180 	add.w	r1, r7, #256	; 0x100
		for (i=0; i<plen; i++) {
 80031a8:	4603      	mov	r3, r0
		*nadd=0;
 80031aa:	4602      	mov	r2, r0
 80031ac:	ee08 1a10 	vmov	s16, r1
 80031b0:	f7ff baa6 	b.w	8002700 <get_wspr_channel_symbols+0x1a8>
 80031b4:	08019e20 	.word	0x08019e20
 80031b8:	08019ff8 	.word	0x08019ff8
 80031bc:	00354300 	.word	0x00354300

080031c0 <SendWSPR>:
{
 80031c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 80031c4:	4948      	ldr	r1, [pc, #288]	; (80032e8 <SendWSPR+0x128>)
 80031c6:	4849      	ldr	r0, [pc, #292]	; (80032ec <SendWSPR+0x12c>)
 80031c8:	f7ff f9c6 	bl	8002558 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 80031cc:	4c48      	ldr	r4, [pc, #288]	; (80032f0 <SendWSPR+0x130>)
 80031ce:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <SendWSPR+0x134>)
	LastTXFreq = LOfreq;
 80031d0:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <SendWSPR+0x138>)
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 80031d2:	494a      	ldr	r1, [pc, #296]	; (80032fc <SendWSPR+0x13c>)
 80031d4:	484a      	ldr	r0, [pc, #296]	; (8003300 <SendWSPR+0x140>)
	LastTXFreq = LOfreq;
 80031d6:	6013      	str	r3, [r2, #0]
	LOfreq = (double)WSPR_FREQ;
 80031d8:	6023      	str	r3, [r4, #0]
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80031da:	4e4a      	ldr	r6, [pc, #296]	; (8003304 <SendWSPR+0x144>)
 80031dc:	4f4a      	ldr	r7, [pc, #296]	; (8003308 <SendWSPR+0x148>)
			if(KEYER_DASH || KEYER_DOT)
 80031de:	4d4b      	ldr	r5, [pc, #300]	; (800330c <SendWSPR+0x14c>)
			WSPRTone = syms[txIndex++];
 80031e0:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8003320 <SendWSPR+0x160>
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 80031e4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80032e0 <SendWSPR+0x120>
 80031e8:	f000 fa46 	bl	8003678 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 80031ec:	2314      	movs	r3, #20
 80031ee:	4948      	ldr	r1, [pc, #288]	; (8003310 <SendWSPR+0x150>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80031f0:	6832      	ldr	r2, [r6, #0]
	WSPRTXFraction = 20; //percentage
 80031f2:	700b      	strb	r3, [r1, #0]
 80031f4:	e00c      	b.n	8003210 <SendWSPR+0x50>
			if(KEYER_DASH || KEYER_DOT)
 80031f6:	2140      	movs	r1, #64	; 0x40
 80031f8:	4628      	mov	r0, r5
 80031fa:	f005 fa83 	bl	8008704 <HAL_GPIO_ReadPin>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d069      	beq.n	80032d6 <SendWSPR+0x116>
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	4628      	mov	r0, r5
 8003206:	f005 fa7d 	bl	8008704 <HAL_GPIO_ReadPin>
 800320a:	2800      	cmp	r0, #0
 800320c:	d063      	beq.n	80032d6 <SendWSPR+0x116>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800320e:	6832      	ldr	r2, [r6, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	4313      	orrs	r3, r2
 8003218:	d1ed      	bne.n	80031f6 <SendWSPR+0x36>
		if ((rand() % 101) > WSPRTXFraction)
 800321a:	f00d f91f 	bl	801045c <rand>
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <SendWSPR+0x150>)
 8003220:	2165      	movs	r1, #101	; 0x65
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <SendWSPR+0x154>)
 8003226:	fb83 3400 	smull	r3, r4, r3, r0
 800322a:	17c3      	asrs	r3, r0, #31
 800322c:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 8003230:	fb01 0013 	mls	r0, r1, r3, r0
 8003234:	4290      	cmp	r0, r2
 8003236:	dc42      	bgt.n	80032be <SendWSPR+0xfe>
			TXSwitch(1);
 8003238:	2001      	movs	r0, #1
 800323a:	f000 ffe9 	bl	8004210 <TXSwitch>
			CarrierEnable(1);
 800323e:	2001      	movs	r0, #1
 8003240:	f001 f84a 	bl	80042d8 <CarrierEnable>
			while (SystemSeconds != 1)
 8003244:	e00a      	b.n	800325c <SendWSPR+0x9c>
				if(KEYER_DASH || KEYER_DOT)
 8003246:	f005 fa5d 	bl	8008704 <HAL_GPIO_ReadPin>
 800324a:	4603      	mov	r3, r0
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	4628      	mov	r0, r5
 8003250:	2b00      	cmp	r3, #0
 8003252:	d040      	beq.n	80032d6 <SendWSPR+0x116>
 8003254:	f005 fa56 	bl	8008704 <HAL_GPIO_ReadPin>
 8003258:	2800      	cmp	r0, #0
 800325a:	d03c      	beq.n	80032d6 <SendWSPR+0x116>
			while (SystemSeconds != 1)
 800325c:	6833      	ldr	r3, [r6, #0]
				if(KEYER_DASH || KEYER_DOT)
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	4628      	mov	r0, r5
			while (SystemSeconds != 1)
 8003262:	2b01      	cmp	r3, #1
 8003264:	d1ef      	bne.n	8003246 <SendWSPR+0x86>
			WSPRTone = syms[txIndex++];
 8003266:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <SendWSPR+0x128>)
			WSPRStartTick = HAL_GetTick();
 8003268:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 800326c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8003324 <SendWSPR+0x164>
			WSPRTone = syms[txIndex++];
 8003270:	7811      	ldrb	r1, [r2, #0]
 8003272:	4690      	mov	r8, r2
 8003274:	f88b 1000 	strb.w	r1, [fp]
			WSPRStartTick = HAL_GetTick();
 8003278:	f002 faba 	bl	80057f0 <HAL_GetTick>
 800327c:	f8ca 0000 	str.w	r0, [sl]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <SendWSPR+0x158>)
 8003282:	fba3 3409 	umull	r3, r4, r3, r9
 8003286:	08e4      	lsrs	r4, r4, #3
 8003288:	f002 fab2 	bl	80057f0 <HAL_GetTick>
 800328c:	f8da 3000 	ldr.w	r3, [sl]
 8003290:	1ac0      	subs	r0, r0, r3
 8003292:	42a0      	cmp	r0, r4
 8003294:	d3f8      	bcc.n	8003288 <SendWSPR+0xc8>
				WSPRTone = syms[txIndex++];
 8003296:	f818 3f01 	ldrb.w	r3, [r8, #1]!
			while (txIndex < 162) {
 800329a:	f509 5900 	add.w	r9, r9, #8192	; 0x2000
				WSPRTone = syms[txIndex++];
 800329e:	f88b 3000 	strb.w	r3, [fp]
			while (txIndex < 162) {
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <SendWSPR+0x15c>)
 80032a4:	4543      	cmp	r3, r8
 80032a6:	d1eb      	bne.n	8003280 <SendWSPR+0xc0>
			TXSwitch(0);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f000 ffb1 	bl	8004210 <TXSwitch>
			CarrierEnable(0);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f001 f812 	bl	80042d8 <CarrierEnable>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80032b4:	6832      	ldr	r2, [r6, #0]
 80032b6:	e7ab      	b.n	8003210 <SendWSPR+0x50>
				if(KEYER_DASH || KEYER_DOT)
 80032b8:	f005 fa24 	bl	8008704 <HAL_GPIO_ReadPin>
 80032bc:	b158      	cbz	r0, 80032d6 <SendWSPR+0x116>
			while (SystemSeconds != 1)
 80032be:	6832      	ldr	r2, [r6, #0]
				if(KEYER_DASH || KEYER_DOT)
 80032c0:	2140      	movs	r1, #64	; 0x40
 80032c2:	4628      	mov	r0, r5
			while (SystemSeconds != 1)
 80032c4:	2a01      	cmp	r2, #1
 80032c6:	d0a3      	beq.n	8003210 <SendWSPR+0x50>
				if(KEYER_DASH || KEYER_DOT)
 80032c8:	f005 fa1c 	bl	8008704 <HAL_GPIO_ReadPin>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2180      	movs	r1, #128	; 0x80
 80032d0:	4628      	mov	r0, r5
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <SendWSPR+0xf8>
}
 80032d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w
 80032e0:	c0000000 	.word	0xc0000000
 80032e4:	415adb21 	.word	0x415adb21
 80032e8:	24000764 	.word	0x24000764
 80032ec:	08019e30 	.word	0x08019e30
 80032f0:	24007264 	.word	0x24007264
 80032f4:	4ad6d90e 	.word	0x4ad6d90e
 80032f8:	2400726c 	.word	0x2400726c
 80032fc:	24006248 	.word	0x24006248
 8003300:	2400623c 	.word	0x2400623c
 8003304:	240072d4 	.word	0x240072d4
 8003308:	240072d0 	.word	0x240072d0
 800330c:	58020000 	.word	0x58020000
 8003310:	240083f9 	.word	0x240083f9
 8003314:	288df0cb 	.word	0x288df0cb
 8003318:	aaaaaaab 	.word	0xaaaaaaab
 800331c:	24000805 	.word	0x24000805
 8003320:	240083fa 	.word	0x240083fa
 8003324:	24000760 	.word	0x24000760

08003328 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8003328:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800332c:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003330:	490a      	ldr	r1, [pc, #40]	; (800335c <HAL_ADC_ConvCpltCallback+0x34>)
 8003332:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8003336:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800333a:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800333c:	4293      	cmp	r3, r2
 800333e:	d1fa      	bne.n	8003336 <HAL_ADC_ConvCpltCallback+0xe>
 8003340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003344:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 8003348:	2001      	movs	r0, #1
 800334a:	f7fd ffb1 	bl	80012b0 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_ADC_ConvCpltCallback+0x38>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
}
 8003354:	bd08      	pop	{r3, pc}
 8003356:	bf00      	nop
 8003358:	24008820 	.word	0x24008820
 800335c:	e000ed00 	.word	0xe000ed00
 8003360:	2400c9ca 	.word	0x2400c9ca

08003364 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003364:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8003368:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800336c:	490a      	ldr	r1, [pc, #40]	; (8003398 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800336e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8003372:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003376:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8003378:	4293      	cmp	r3, r2
 800337a:	d1fa      	bne.n	8003372 <HAL_ADC_ConvHalfCpltCallback+0xe>
 800337c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003380:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd ff93 	bl	80012b0 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
}
 8003390:	bd08      	pop	{r3, pc}
 8003392:	bf00      	nop
 8003394:	24008420 	.word	0x24008420
 8003398:	e000ed00 	.word	0xe000ed00
 800339c:	2400c9ca 	.word	0x2400c9ca

080033a0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033a0:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 80033a4:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 80033a6:	4c05      	ldr	r4, [pc, #20]	; (80033bc <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 80033a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ac:	4804      	ldr	r0, [pc, #16]	; (80033c0 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80033ae:	601c      	str	r4, [r3, #0]
}
 80033b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80033b4:	f005 b9ac 	b.w	8008710 <HAL_GPIO_WritePin>
 80033b8:	240083f4 	.word	0x240083f4
 80033bc:	24001c20 	.word	0x24001c20
 80033c0:	58020400 	.word	0x58020400

080033c4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033c4:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80033c8:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80033ca:	4c05      	ldr	r4, [pc, #20]	; (80033e0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80033cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80033d2:	601c      	str	r4, [r3, #0]
}
 80033d4:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80033d8:	f005 b99a 	b.w	8008710 <HAL_GPIO_WritePin>
 80033dc:	240083f4 	.word	0x240083f4
 80033e0:	24001820 	.word	0x24001820
 80033e4:	58020400 	.word	0x58020400

080033e8 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 80033ea:	2002      	movs	r0, #2
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80033ee:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80033f0:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 80033f2:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80033f4:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80033f6:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80033f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fc:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80033fe:	6853      	ldr	r3, [r2, #4]
 8003400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003404:	6053      	str	r3, [r2, #4]
}
 8003406:	4770      	bx	lr
 8003408:	2400b43c 	.word	0x2400b43c
 800340c:	24007274 	.word	0x24007274
 8003410:	2400b4a0 	.word	0x2400b4a0

08003414 <DisplayStatus>:
	static char StringAGC[8];
	static char StringStep[8];
	static char StringTxPower[8];


	switch(Fstep)
 8003414:	4b74      	ldr	r3, [pc, #464]	; (80035e8 <DisplayStatus+0x1d4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
	switch(Fstep)
 8003420:	f000 80d8 	beq.w	80035d4 <DisplayStatus+0x1c0>
 8003424:	d81f      	bhi.n	8003466 <DisplayStatus+0x52>
 8003426:	2b0a      	cmp	r3, #10
 8003428:	f000 80c6 	beq.w	80035b8 <DisplayStatus+0x1a4>
 800342c:	2b64      	cmp	r3, #100	; 0x64
 800342e:	d110      	bne.n	8003452 <DisplayStatus+0x3e>
	{
	case 1:			strcpy(StringStep,"   1 "); break;
	case 10: 		strcpy(StringStep,"  10 "); break;
	case 100: 		strcpy(StringStep," 100 "); break;
 8003430:	4b6e      	ldr	r3, [pc, #440]	; (80035ec <DisplayStatus+0x1d8>)
 8003432:	4a6f      	ldr	r2, [pc, #444]	; (80035f0 <DisplayStatus+0x1dc>)
 8003434:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003438:	6010      	str	r0, [r2, #0]
 800343a:	8091      	strh	r1, [r2, #4]
	case 9000: 		strcpy(StringStep,"   9K"); break;
	case 10000:		strcpy(StringStep,"  10K"); break;
	case 100000: 	strcpy(StringStep," 100K"); break;
	}

	switch(CurrentMode)
 800343c:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <DisplayStatus+0x1e0>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b03      	cmp	r3, #3
 8003442:	f200 80ce 	bhi.w	80035e2 <DisplayStatus+0x1ce>
 8003446:	e8df f013 	tbh	[pc, r3, lsl #1]
 800344a:	00ab      	.short	0x00ab
 800344c:	008500a7 	.word	0x008500a7
 8003450:	0029      	.short	0x0029
	switch(Fstep)
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 80aa 	bne.w	80035ac <DisplayStatus+0x198>
	case 1:			strcpy(StringStep,"   1 "); break;
 8003458:	4b67      	ldr	r3, [pc, #412]	; (80035f8 <DisplayStatus+0x1e4>)
 800345a:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <DisplayStatus+0x1dc>)
 800345c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003460:	6010      	str	r0, [r2, #0]
 8003462:	8091      	strh	r1, [r2, #4]
 8003464:	e7ea      	b.n	800343c <DisplayStatus+0x28>
	switch(Fstep)
 8003466:	f242 7210 	movw	r2, #10000	; 0x2710
 800346a:	4293      	cmp	r3, r2
 800346c:	f000 80ab 	beq.w	80035c6 <DisplayStatus+0x1b2>
 8003470:	4a62      	ldr	r2, [pc, #392]	; (80035fc <DisplayStatus+0x1e8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d106      	bne.n	8003484 <DisplayStatus+0x70>
	case 100000: 	strcpy(StringStep," 100K"); break;
 8003476:	4b62      	ldr	r3, [pc, #392]	; (8003600 <DisplayStatus+0x1ec>)
 8003478:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <DisplayStatus+0x1dc>)
 800347a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800347e:	6010      	str	r0, [r2, #0]
 8003480:	8091      	strh	r1, [r2, #4]
 8003482:	e7db      	b.n	800343c <DisplayStatus+0x28>
	switch(Fstep)
 8003484:	f242 3228 	movw	r2, #9000	; 0x2328
 8003488:	4293      	cmp	r3, r2
 800348a:	f040 808f 	bne.w	80035ac <DisplayStatus+0x198>
	case 9000: 		strcpy(StringStep,"   9K"); break;
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <DisplayStatus+0x1f0>)
 8003490:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <DisplayStatus+0x1dc>)
 8003492:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003496:	6010      	str	r0, [r2, #0]
 8003498:	8091      	strh	r1, [r2, #4]
 800349a:	e7cf      	b.n	800343c <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 800349c:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <DisplayStatus+0x1f4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4e5a      	ldr	r6, [pc, #360]	; (800360c <DisplayStatus+0x1f8>)
 80034a2:	0c19      	lsrs	r1, r3, #16
 80034a4:	8033      	strh	r3, [r6, #0]
 80034a6:	70b1      	strb	r1, [r6, #2]
	}
	switch (CurrentAGC)
 80034a8:	4b59      	ldr	r3, [pc, #356]	; (8003610 <DisplayStatus+0x1fc>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d058      	beq.n	8003562 <DisplayStatus+0x14e>
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d179      	bne.n	80035a8 <DisplayStatus+0x194>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 80034b4:	4b57      	ldr	r3, [pc, #348]	; (8003614 <DisplayStatus+0x200>)
 80034b6:	4d58      	ldr	r5, [pc, #352]	; (8003618 <DisplayStatus+0x204>)
 80034b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034bc:	6028      	str	r0, [r5, #0]
 80034be:	7129      	strb	r1, [r5, #4]
	}
	switch (CurrentBW)
 80034c0:	4b56      	ldr	r3, [pc, #344]	; (800361c <DisplayStatus+0x208>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d056      	beq.n	8003576 <DisplayStatus+0x162>
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d16b      	bne.n	80035a4 <DisplayStatus+0x190>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 80034cc:	4b54      	ldr	r3, [pc, #336]	; (8003620 <DisplayStatus+0x20c>)
 80034ce:	4c55      	ldr	r4, [pc, #340]	; (8003624 <DisplayStatus+0x210>)
 80034d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034d4:	6020      	str	r0, [r4, #0]
 80034d6:	7121      	strb	r1, [r4, #4]
	}
	switch (TxPowerOut)
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <DisplayStatus+0x214>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e0:	d056      	beq.n	8003590 <DisplayStatus+0x17c>
 80034e2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80034e6:	428b      	cmp	r3, r1
 80034e8:	d062      	beq.n	80035b0 <DisplayStatus+0x19c>
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <DisplayStatus+0x218>)
	{
	case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 80034f0:	bf04      	itt	eq
 80034f2:	494f      	ldreq	r1, [pc, #316]	; (8003630 <DisplayStatus+0x21c>)
 80034f4:	6019      	streq	r1, [r3, #0]
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 80034f6:	9306      	str	r3, [sp, #24]
 80034f8:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <DisplayStatus+0x220>)
 80034fa:	9503      	str	r5, [sp, #12]
 80034fc:	9402      	str	r4, [sp, #8]
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <DisplayStatus+0x224>)
 8003504:	9601      	str	r6, [sp, #4]
 8003506:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	484b      	ldr	r0, [pc, #300]	; (800363c <DisplayStatus+0x228>)
 800350e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8003640 <DisplayStatus+0x22c>
 8003512:	6804      	ldr	r4, [r0, #0]
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <DisplayStatus+0x230>)
 8003518:	9200      	str	r2, [sp, #0]
 800351a:	9405      	str	r4, [sp, #20]
 800351c:	494a      	ldr	r1, [pc, #296]	; (8003648 <DisplayStatus+0x234>)
 800351e:	484b      	ldr	r0, [pc, #300]	; (800364c <DisplayStatus+0x238>)
 8003520:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800352c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003530:	ec53 2b17 	vmov	r2, r3, d7
 8003534:	f00c ffd0 	bl	80104d8 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003538:	4844      	ldr	r0, [pc, #272]	; (800364c <DisplayStatus+0x238>)
 800353a:	f7fc fed1 	bl	80002e0 <strlen>
 800353e:	4601      	mov	r1, r0
 8003540:	4842      	ldr	r0, [pc, #264]	; (800364c <DisplayStatus+0x238>)
 8003542:	b289      	uxth	r1, r1
 8003544:	f00a ff5a 	bl	800e3fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003548:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 800354a:	b00a      	add	sp, #40	; 0x28
 800354c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8003550:	f002 b954 	b.w	80057fc <HAL_Delay>
	case USB: strcpy(StringMode,"USB"); break;
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <DisplayStatus+0x23c>)
 8003556:	4e2d      	ldr	r6, [pc, #180]	; (800360c <DisplayStatus+0x1f8>)
 8003558:	6033      	str	r3, [r6, #0]
	switch (CurrentAGC)
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <DisplayStatus+0x1fc>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1a6      	bne.n	80034b0 <DisplayStatus+0x9c>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <DisplayStatus+0x240>)
 8003564:	4d2c      	ldr	r5, [pc, #176]	; (8003618 <DisplayStatus+0x204>)
 8003566:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <DisplayStatus+0x208>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 800356c:	6028      	str	r0, [r5, #0]
	switch (CurrentBW)
 800356e:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8003570:	7129      	strb	r1, [r5, #4]
	switch (CurrentBW)
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1a8      	bne.n	80034c8 <DisplayStatus+0xb4>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <DisplayStatus+0x244>)
 8003578:	4c2a      	ldr	r4, [pc, #168]	; (8003624 <DisplayStatus+0x210>)
 800357a:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (TxPowerOut)
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <DisplayStatus+0x214>)
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8003580:	80a1      	strh	r1, [r4, #4]
 8003582:	0c09      	lsrs	r1, r1, #16
	switch (TxPowerOut)
 8003584:	681b      	ldr	r3, [r3, #0]
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8003586:	6020      	str	r0, [r4, #0]
	switch (TxPowerOut)
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800358c:	71a1      	strb	r1, [r4, #6]
	switch (TxPowerOut)
 800358e:	d1a8      	bne.n	80034e2 <DisplayStatus+0xce>
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 8003590:	4b26      	ldr	r3, [pc, #152]	; (800362c <DisplayStatus+0x218>)
 8003592:	4932      	ldr	r1, [pc, #200]	; (800365c <DisplayStatus+0x248>)
 8003594:	6019      	str	r1, [r3, #0]
 8003596:	e7ae      	b.n	80034f6 <DisplayStatus+0xe2>
	case LSB: strcpy(StringMode,"LSB"); break;
 8003598:	4e1c      	ldr	r6, [pc, #112]	; (800360c <DisplayStatus+0x1f8>)
 800359a:	4b31      	ldr	r3, [pc, #196]	; (8003660 <DisplayStatus+0x24c>)
 800359c:	6033      	str	r3, [r6, #0]
 800359e:	e783      	b.n	80034a8 <DisplayStatus+0x94>
	case AM: strcpy(StringMode,"AM"); break;
 80035a0:	4b30      	ldr	r3, [pc, #192]	; (8003664 <DisplayStatus+0x250>)
 80035a2:	e77c      	b.n	800349e <DisplayStatus+0x8a>
 80035a4:	4c1f      	ldr	r4, [pc, #124]	; (8003624 <DisplayStatus+0x210>)
 80035a6:	e797      	b.n	80034d8 <DisplayStatus+0xc4>
 80035a8:	4d1b      	ldr	r5, [pc, #108]	; (8003618 <DisplayStatus+0x204>)
 80035aa:	e789      	b.n	80034c0 <DisplayStatus+0xac>
 80035ac:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <DisplayStatus+0x1dc>)
 80035ae:	e745      	b.n	800343c <DisplayStatus+0x28>
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <DisplayStatus+0x218>)
 80035b2:	492d      	ldr	r1, [pc, #180]	; (8003668 <DisplayStatus+0x254>)
 80035b4:	6019      	str	r1, [r3, #0]
 80035b6:	e79e      	b.n	80034f6 <DisplayStatus+0xe2>
	case 10: 		strcpy(StringStep,"  10 "); break;
 80035b8:	4b2c      	ldr	r3, [pc, #176]	; (800366c <DisplayStatus+0x258>)
 80035ba:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <DisplayStatus+0x1dc>)
 80035bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035c0:	6010      	str	r0, [r2, #0]
 80035c2:	8091      	strh	r1, [r2, #4]
 80035c4:	e73a      	b.n	800343c <DisplayStatus+0x28>
	case 10000:		strcpy(StringStep,"  10K"); break;
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <DisplayStatus+0x25c>)
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <DisplayStatus+0x1dc>)
 80035ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035ce:	6010      	str	r0, [r2, #0]
 80035d0:	8091      	strh	r1, [r2, #4]
 80035d2:	e733      	b.n	800343c <DisplayStatus+0x28>
	case 1000: 		strcpy(StringStep,"   1K"); break;
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <DisplayStatus+0x260>)
 80035d6:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <DisplayStatus+0x1dc>)
 80035d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035dc:	6010      	str	r0, [r2, #0]
 80035de:	8091      	strh	r1, [r2, #4]
 80035e0:	e72c      	b.n	800343c <DisplayStatus+0x28>
 80035e2:	4e0a      	ldr	r6, [pc, #40]	; (800360c <DisplayStatus+0x1f8>)
 80035e4:	e760      	b.n	80034a8 <DisplayStatus+0x94>
 80035e6:	bf00      	nop
 80035e8:	24006250 	.word	0x24006250
 80035ec:	08019ff4 	.word	0x08019ff4
 80035f0:	240072b8 	.word	0x240072b8
 80035f4:	2400202c 	.word	0x2400202c
 80035f8:	08019fe4 	.word	0x08019fe4
 80035fc:	000186a0 	.word	0x000186a0
 8003600:	0801a014 	.word	0x0801a014
 8003604:	0801a004 	.word	0x0801a004
 8003608:	0801a020 	.word	0x0801a020
 800360c:	240072b0 	.word	0x240072b0
 8003610:	2400202a 	.word	0x2400202a
 8003614:	0801a02c 	.word	0x0801a02c
 8003618:	240072a8 	.word	0x240072a8
 800361c:	2400202b 	.word	0x2400202b
 8003620:	0801a03c 	.word	0x0801a03c
 8003624:	240072c8 	.word	0x240072c8
 8003628:	240072e8 	.word	0x240072e8
 800362c:	240072c0 	.word	0x240072c0
 8003630:	00776f4c 	.word	0x00776f4c
 8003634:	2400c9cc 	.word	0x2400c9cc
 8003638:	240072dc 	.word	0x240072dc
 800363c:	2400b80c 	.word	0x2400b80c
 8003640:	3a83126f 	.word	0x3a83126f
 8003644:	24007264 	.word	0x24007264
 8003648:	0801a044 	.word	0x0801a044
 800364c:	240073f4 	.word	0x240073f4
 8003650:	00425355 	.word	0x00425355
 8003654:	0801a024 	.word	0x0801a024
 8003658:	0801a034 	.word	0x0801a034
 800365c:	0064694d 	.word	0x0064694d
 8003660:	0042534c 	.word	0x0042534c
 8003664:	0801a01c 	.word	0x0801a01c
 8003668:	0078614d 	.word	0x0078614d
 800366c:	08019fec 	.word	0x08019fec
 8003670:	0801a00c 	.word	0x0801a00c
 8003674:	08019ffc 	.word	0x08019ffc

08003678 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8003678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fdiff, fod, FMaxErr, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 800367c:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 800367e:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8003682:	4aa9      	ldr	r2, [pc, #676]	; (8003928 <SetWSPRPLLCoeff+0x2b0>)
{
 8003684:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8003688:	f20f 298c 	addw	r9, pc, #652	; 0x28c
 800368c:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8003690:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 8003692:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8003696:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 800369a:	9305      	str	r3, [sp, #20]
 800369c:	9b05      	ldr	r3, [sp, #20]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	f200 80d0 	bhi.w	8003844 <SetWSPRPLLCoeff+0x1cc>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 80036a4:	4ba1      	ldr	r3, [pc, #644]	; (800392c <SetWSPRPLLCoeff+0x2b4>)
 80036a6:	4604      	mov	r4, r0
 80036a8:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80036aa:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 8003930 <SetWSPRPLLCoeff+0x2b8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 80036ae:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8003934 <SetWSPRPLLCoeff+0x2bc>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 80036b2:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 80036b4:	edd3 2a00 	vldr	s5, [r3]
 80036b8:	f8df c288 	ldr.w	ip, [pc, #648]	; 8003944 <SetWSPRPLLCoeff+0x2cc>
							&& ((XTalFreq * n / m) < 960000000.0)) {
 80036bc:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8003938 <SetWSPRPLLCoeff+0x2c0>
 80036c0:	4e9e      	ldr	r6, [pc, #632]	; (800393c <SetWSPRPLLCoeff+0x2c4>)
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 80036c2:	ed9f 3b97 	vldr	d3, [pc, #604]	; 8003920 <SetWSPRPLLCoeff+0x2a8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80036c6:	ed9d 7a05 	vldr	s14, [sp, #20]
 80036ca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 80036ce:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 80036d0:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 80036d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80036d8:	ee27 7a08 	vmul.f32	s14, s14, s16
 80036dc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80036e0:	ee37 7b00 	vadd.f64	d7, d7, d0
 80036e4:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 80036e8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 80036ec:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 80036f0:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 80036f2:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 80036f6:	eec8 1a84 	vdiv.f32	s3, s17, s8
 80036fa:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 80036fe:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8003700:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8003704:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 8003708:	ee64 7aa1 	vmul.f32	s15, s9, s3
 800370c:	eef4 7a42 	vcmp.f32	s15, s4
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	dd05      	ble.n	8003722 <SetWSPRPLLCoeff+0xaa>
 8003716:	eef4 7ac1 	vcmpe.f32	s15, s2
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	f100 80b2 	bmi.w	8003886 <SetWSPRPLLCoeff+0x20e>
					OutF = XTalFreq * n / m / p / od;
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	3302      	adds	r3, #2
 8003728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003730:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8003734:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003738:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 800373c:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003740:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8003744:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8003748:	ee37 7b45 	vsub.f64	d7, d7, d5
 800374c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003754:	dd03      	ble.n	800375e <SetWSPRPLLCoeff+0xe6>
 8003756:	ed9d 7b06 	vldr	d7, [sp, #24]
 800375a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 800375e:	2b82      	cmp	r3, #130	; 0x82
 8003760:	d1df      	bne.n	8003722 <SetWSPRPLLCoeff+0xaa>
			for (n = 2; n <= 512; n++) //was 1
 8003762:	3201      	adds	r2, #1
 8003764:	4572      	cmp	r2, lr
 8003766:	d1c8      	bne.n	80036fa <SetWSPRPLLCoeff+0x82>
		for (m = 2; m <= 25; m++) //was 64
 8003768:	3101      	adds	r1, #1
 800376a:	291a      	cmp	r1, #26
 800376c:	d1be      	bne.n	80036ec <SetWSPRPLLCoeff+0x74>
		if (fn < 511) {
 800376e:	9b01      	ldr	r3, [sp, #4]
 8003770:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8003774:	f200 80ca 	bhi.w	800390c <SetWSPRPLLCoeff+0x294>
			OutF = XTalFreq * fn / fm / fp / fod;
 8003778:	ed9d 6a01 	vldr	s12, [sp, #4]
 800377c:	eddd 6a00 	vldr	s13, [sp]
 8003780:	eddd 7a02 	vldr	s15, [sp, #8]
 8003784:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003788:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800378c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003790:	ee26 6a22 	vmul.f32	s12, s12, s5
 8003794:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8003798:	eddd 7a03 	vldr	s15, [sp, #12]
 800379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80037a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80037ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 80037b0:	9b01      	ldr	r3, [sp, #4]
 80037b2:	eddd 6a00 	vldr	s13, [sp]
 80037b6:	eddd 7a02 	vldr	s15, [sp, #8]
 80037ba:	3301      	adds	r3, #1
 80037bc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80037c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c4:	ee06 3a10 	vmov	s12, r3
 80037c8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80037cc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80037d0:	eddd 7a03 	vldr	s15, [sp, #12]
 80037d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d8:	ee26 6a22 	vmul.f32	s12, s12, s5
 80037dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80037e4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80037e8:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 80037ec:	ed9d 5b06 	vldr	d5, [sp, #24]
 80037f0:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 80037f4:	ed9d 6b08 	vldr	d6, [sp, #32]
 80037f8:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80037fc:	ee35 5b44 	vsub.f64	d5, d5, d4
 8003800:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003804:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8003808:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 800380c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8003810:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8003814:	9b04      	ldr	r3, [sp, #16]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	8033      	strh	r3, [r6, #0]
 800381c:	f8ac 3000 	strh.w	r3, [ip]
		FracDiv >>= 0x03;
 8003820:	9b04      	ldr	r3, [sp, #16]
 8003822:	08db      	lsrs	r3, r3, #3
 8003824:	9304      	str	r3, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 8003826:	9a04      	ldr	r2, [sp, #16]
 8003828:	9b05      	ldr	r3, [sp, #20]
 800382a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 800382e:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 8003830:	9b05      	ldr	r3, [sp, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	9305      	str	r3, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 8003836:	8833      	ldrh	r3, [r6, #0]
 8003838:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 800383c:	9b05      	ldr	r3, [sp, #20]
 800383e:	2b03      	cmp	r3, #3
 8003840:	f67f af41 	bls.w	80036c6 <SetWSPRPLLCoeff+0x4e>
	}
	__HAL_RCC_PLL2_DISABLE();
 8003844:	4a3e      	ldr	r2, [pc, #248]	; (8003940 <SetWSPRPLLCoeff+0x2c8>)
 8003846:	6813      	ldr	r3, [r2, #0]
 8003848:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800384c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 800384e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003850:	9900      	ldr	r1, [sp, #0]
 8003852:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003856:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800385a:	6293      	str	r3, [r2, #40]	; 0x28
 800385c:	9901      	ldr	r1, [sp, #4]
 800385e:	9b02      	ldr	r3, [sp, #8]
 8003860:	3901      	subs	r1, #1
 8003862:	3b01      	subs	r3, #1
 8003864:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003868:	025b      	lsls	r3, r3, #9
 800386a:	b29b      	uxth	r3, r3
 800386c:	430b      	orrs	r3, r1
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003874:	6813      	ldr	r3, [r2, #0]
 8003876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	b00f      	add	sp, #60	; 0x3c
 800387e:	ecbd 8b02 	vpop	{d8}
 8003882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					OutF = XTalFreq * n / m / p / od;
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003892:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8003896:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800389a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 800389e:	ed9d 7b06 	vldr	d7, [sp, #24]
 80038a2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80038a6:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80038aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80038ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b6:	d521      	bpl.n	80038fc <SetWSPRPLLCoeff+0x284>
 80038b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80038bc:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80038c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	dd16      	ble.n	80038fc <SetWSPRPLLCoeff+0x284>
						MinDiff = abs(OutF - TF);
 80038ce:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80038d2:	ed9d 6b06 	vldr	d6, [sp, #24]
 80038d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038da:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80038de:	ee17 7a10 	vmov	r7, s14
 80038e2:	2f00      	cmp	r7, #0
 80038e4:	bfb8      	it	lt
 80038e6:	427f      	neglt	r7, r7
 80038e8:	ee07 7a10 	vmov	s14, r7
 80038ec:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80038f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 80038f4:	9302      	str	r3, [sp, #8]
						fn = n;
 80038f6:	9201      	str	r2, [sp, #4]
						fm = m;
 80038f8:	9100      	str	r1, [sp, #0]
						fod = od;
 80038fa:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 80038fc:	3302      	adds	r3, #2
 80038fe:	2b82      	cmp	r3, #130	; 0x82
 8003900:	d1c1      	bne.n	8003886 <SetWSPRPLLCoeff+0x20e>
			for (n = 2; n <= 512; n++) //was 1
 8003902:	3201      	adds	r2, #1
 8003904:	4572      	cmp	r2, lr
 8003906:	f47f aef8 	bne.w	80036fa <SetWSPRPLLCoeff+0x82>
 800390a:	e72d      	b.n	8003768 <SetWSPRPLLCoeff+0xf0>
			FracDiv = 8191 * 8;
 800390c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003910:	9304      	str	r3, [sp, #16]
 8003912:	e77f      	b.n	8003814 <SetWSPRPLLCoeff+0x19c>
 8003914:	f3af 8000 	nop.w
 8003918:	ff800000 	.word	0xff800000
 800391c:	41cdcd64 	.word	0x41cdcd64
 8003920:	00000000 	.word	0x00000000
 8003924:	40f00000 	.word	0x40f00000
 8003928:	2400726c 	.word	0x2400726c
 800392c:	240083fc 	.word	0x240083fc
 8003930:	3fbb7e91 	.word	0x3fbb7e91
 8003934:	4d0f0d18 	.word	0x4d0f0d18
 8003938:	4e64e1c0 	.word	0x4e64e1c0
 800393c:	24006244 	.word	0x24006244
 8003940:	58024400 	.word	0x58024400
 8003944:	24007270 	.word	0x24007270

08003948 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8003948:	4a90      	ldr	r2, [pc, #576]	; (8003b8c <SetTXPLL+0x244>)
 800394a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 800394e:	4b90      	ldr	r3, [pc, #576]	; (8003b90 <SetTXPLL+0x248>)
	for (m = 2; m <= 25; m++) //was 64
 8003950:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 8003952:	edd2 5a00 	vldr	s11, [r2]
		for (n = 2; n <= 512; n++) //was 1
 8003956:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800395a:	ed9f 5a8e 	vldr	s10, [pc, #568]	; 8003b94 <SetTXPLL+0x24c>
 800395e:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8003b98 <SetTXPLL+0x250>
{
 8003962:	b410      	push	{r4}
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8003964:	2401      	movs	r4, #1
{
 8003966:	b08b      	sub	sp, #44	; 0x2c
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8003968:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 800396a:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 800396c:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 8003970:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 8003972:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003976:	eec3 4a86 	vdiv.f32	s9, s7, s12
 800397a:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 800397e:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8003980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003984:	ee66 6aa5 	vmul.f32	s13, s13, s11
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003988:	ee66 7aa4 	vmul.f32	s15, s13, s9
 800398c:	eef4 7a45 	vcmp.f32	s15, s10
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	dd05      	ble.n	80039a2 <SetTXPLL+0x5a>
 8003996:	eef4 7ac4 	vcmpe.f32	s15, s8
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	f100 80b6 	bmi.w	8003b0e <SetTXPLL+0x1c6>
				OutF = XTalFreq * n / m / p / od;
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	3302      	adds	r3, #2
 80039a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b4:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80039b8:	eddd 7a02 	vldr	s15, [sp, #8]
 80039bc:	ed9d 7a03 	vldr	s14, [sp, #12]
 80039c0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80039c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039cc:	dd00      	ble.n	80039d0 <SetTXPLL+0x88>
 80039ce:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 80039d0:	2b82      	cmp	r3, #130	; 0x82
 80039d2:	d1e6      	bne.n	80039a2 <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 80039d4:	3101      	adds	r1, #1
 80039d6:	4561      	cmp	r1, ip
 80039d8:	d1cf      	bne.n	800397a <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 80039da:	3001      	adds	r0, #1
 80039dc:	281a      	cmp	r0, #26
 80039de:	d1c5      	bne.n	800396c <SetTXPLL+0x24>
				}
			}
		}
	}
	if (fn < 511)
 80039e0:	9b05      	ldr	r3, [sp, #20]
 80039e2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80039e6:	f200 80cd 	bhi.w	8003b84 <SetTXPLL+0x23c>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 80039ea:	eddd 6a05 	vldr	s13, [sp, #20]
 80039ee:	ed9d 7a04 	vldr	s14, [sp, #16]
 80039f2:	eddd 7a06 	vldr	s15, [sp, #24]
 80039f6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80039fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80039fe:	ed9d 6a07 	vldr	s12, [sp, #28]
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8003a06:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8003b9c <SetTXPLL+0x254>
		OutF = XTalFreq * fn / fm / fp / fod;
 8003a0a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003a0e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1e:	ed8d 7a02 	vstr	s14, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8003a22:	9b05      	ldr	r3, [sp, #20]
 8003a24:	ed9d 7a04 	vldr	s14, [sp, #16]
 8003a28:	eddd 7a06 	vldr	s15, [sp, #24]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003a32:	ed9d 6a07 	vldr	s12, [sp, #28]
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	ee06 3a90 	vmov	s13, r3
 8003a3e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8003a42:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4a:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8003a4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003a52:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8003a56:	ed8d 7a01 	vstr	s14, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8003a5a:	eddd 6a02 	vldr	s13, [sp, #8]
 8003a5e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003a62:	eddd 7a02 	vldr	s15, [sp, #8]
 8003a66:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a6e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8003a72:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8003a7e:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 8003a82:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 8003a84:	4a46      	ldr	r2, [pc, #280]	; (8003ba0 <SetTXPLL+0x258>)
	TXFreqError = MinDiff;
 8003a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a8a:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <SetTXPLL+0x25c>)
 8003a8c:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a96:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8003a98:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003a9a:	9904      	ldr	r1, [sp, #16]
 8003a9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003aa0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003aa4:	6293      	str	r3, [r2, #40]	; 0x28
 8003aa6:	9905      	ldr	r1, [sp, #20]
 8003aa8:	9b06      	ldr	r3, [sp, #24]
 8003aaa:	3901      	subs	r1, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003ab2:	025b      	lsls	r3, r3, #9
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 8003ac6:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 8003ac8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8003ad0:	9009      	str	r0, [sp, #36]	; 0x24
 8003ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad4:	2b31      	cmp	r3, #49	; 0x31
 8003ad6:	d80b      	bhi.n	8003af0 <SetTXPLL+0x1a8>
		i++;
 8003ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ada:	3301      	adds	r3, #1
 8003adc:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 8003ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 8003ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aec:	2b31      	cmp	r3, #49	; 0x31
 8003aee:	d9f3      	bls.n	8003ad8 <SetTXPLL+0x190>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <SetTXPLL+0x258>)
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <SetTXPLL+0x260>)
 8003af4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8003af6:	4003      	ands	r3, r0
 8003af8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003afc:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8003afe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 8003b06:	b00b      	add	sp, #44	; 0x2c
 8003b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b0c:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b1e:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8003b22:	eddd 7a02 	vldr	s15, [sp, #8]
 8003b26:	ed9d 7a03 	vldr	s14, [sp, #12]
 8003b2a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	d51d      	bpl.n	8003b74 <SetTXPLL+0x22c>
 8003b38:	eddd 7a02 	vldr	s15, [sp, #8]
 8003b3c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	dd14      	ble.n	8003b74 <SetTXPLL+0x22c>
					MinDiff = abs(OutF - TF);
 8003b4a:	eddd 7a02 	vldr	s15, [sp, #8]
 8003b4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b56:	ee17 2a90 	vmov	r2, s15
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	bfb8      	it	lt
 8003b5e:	4252      	neglt	r2, r2
 8003b60:	ee07 2a90 	vmov	s15, r2
 8003b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b68:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 8003b6c:	9306      	str	r3, [sp, #24]
					fn = n;
 8003b6e:	9105      	str	r1, [sp, #20]
					fm = m;
 8003b70:	9004      	str	r0, [sp, #16]
					fod = od;
 8003b72:	9407      	str	r4, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 8003b74:	3302      	adds	r3, #2
 8003b76:	2b82      	cmp	r3, #130	; 0x82
 8003b78:	d1c9      	bne.n	8003b0e <SetTXPLL+0x1c6>
		for (n = 2; n <= 512; n++) //was 1
 8003b7a:	3101      	adds	r1, #1
 8003b7c:	4561      	cmp	r1, ip
 8003b7e:	f47f aefc 	bne.w	800397a <SetTXPLL+0x32>
 8003b82:	e72a      	b.n	80039da <SetTXPLL+0x92>
		FracDiv = 8191;
 8003b84:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003b88:	9308      	str	r3, [sp, #32]
 8003b8a:	e778      	b.n	8003a7e <SetTXPLL+0x136>
 8003b8c:	240083fc 	.word	0x240083fc
 8003b90:	4e6e6b28 	.word	0x4e6e6b28
 8003b94:	4d0f0d18 	.word	0x4d0f0d18
 8003b98:	4e64e1c0 	.word	0x4e64e1c0
 8003b9c:	46000000 	.word	0x46000000
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	240072dc 	.word	0x240072dc
 8003ba8:	ffff0007 	.word	0xffff0007
 8003bac:	00000000 	.word	0x00000000

08003bb0 <UserInput>:
{
 8003bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (WSPRBeaconState == SEND_WSPR)
 8003bb4:	4d82      	ldr	r5, [pc, #520]	; (8003dc0 <UserInput+0x210>)
{
 8003bb6:	b08d      	sub	sp, #52	; 0x34
	if (WSPRBeaconState == SEND_WSPR)
 8003bb8:	782e      	ldrb	r6, [r5, #0]
 8003bba:	2e02      	cmp	r6, #2
 8003bbc:	f000 8128 	beq.w	8003e10 <UserInput+0x260>
	if (USBRXLength)
 8003bc0:	4b80      	ldr	r3, [pc, #512]	; (8003dc4 <UserInput+0x214>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	f000 80e5 	beq.w	8003d94 <UserInput+0x1e4>
		result = HAL_OK;
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f88d 2013 	strb.w	r2, [sp, #19]
		USBRXLength = 0;
 8003bd0:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8003bd2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003bd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d162      	bne.n	8003ca4 <UserInput+0xf4>
		switch (UartRXString[0])
 8003bde:	4b7a      	ldr	r3, [pc, #488]	; (8003dc8 <UserInput+0x218>)
		UartRXDataReady = RESET;
 8003be0:	497a      	ldr	r1, [pc, #488]	; (8003dcc <UserInput+0x21c>)
		switch (UartRXString[0])
 8003be2:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8003be4:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8003be6:	3b2b      	subs	r3, #43	; 0x2b
 8003be8:	2b4c      	cmp	r3, #76	; 0x4c
 8003bea:	d859      	bhi.n	8003ca0 <UserInput+0xf0>
 8003bec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003bf0:	00580153 	.word	0x00580153
 8003bf4:	0058019b 	.word	0x0058019b
 8003bf8:	00580058 	.word	0x00580058
 8003bfc:	01930197 	.word	0x01930197
 8003c00:	01cd018f 	.word	0x01cd018f
 8003c04:	01c501c9 	.word	0x01c501c9
 8003c08:	01bd01c1 	.word	0x01bd01c1
 8003c0c:	005801b9 	.word	0x005801b9
 8003c10:	00580058 	.word	0x00580058
 8003c14:	00580058 	.word	0x00580058
 8003c18:	00580058 	.word	0x00580058
 8003c1c:	00580058 	.word	0x00580058
 8003c20:	005801b5 	.word	0x005801b5
 8003c24:	00580058 	.word	0x00580058
 8003c28:	00580058 	.word	0x00580058
 8003c2c:	01b00058 	.word	0x01b00058
 8003c30:	02e502ea 	.word	0x02e502ea
 8003c34:	00580058 	.word	0x00580058
 8003c38:	00580058 	.word	0x00580058
 8003c3c:	00580058 	.word	0x00580058
 8003c40:	00580058 	.word	0x00580058
 8003c44:	00580058 	.word	0x00580058
 8003c48:	005802df 	.word	0x005802df
 8003c4c:	02c802d0 	.word	0x02c802d0
 8003c50:	00580058 	.word	0x00580058
 8003c54:	00580058 	.word	0x00580058
 8003c58:	00580058 	.word	0x00580058
 8003c5c:	02a202c4 	.word	0x02a202c4
 8003c60:	00580280 	.word	0x00580280
 8003c64:	027c0058 	.word	0x027c0058
 8003c68:	004d0273 	.word	0x004d0273
 8003c6c:	00580058 	.word	0x00580058
 8003c70:	026f0058 	.word	0x026f0058
 8003c74:	026b0058 	.word	0x026b0058
 8003c78:	00580058 	.word	0x00580058
 8003c7c:	022b0058 	.word	0x022b0058
 8003c80:	01d10227 	.word	0x01d10227
 8003c84:	0169018b 	.word	0x0169018b
 8003c88:	0165      	.short	0x0165
			keyer_speed += 1;
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <UserInput+0x220>)
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8003c90:	2832      	cmp	r0, #50	; 0x32
 8003c92:	f340 829c 	ble.w	80041ce <UserInput+0x61e>
				keyer_speed = 50;
 8003c96:	2232      	movs	r2, #50	; 0x32
 8003c98:	4610      	mov	r0, r2
 8003c9a:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8003c9c:	f7fc fcfa 	bl	8000694 <loadWPM>
		DisplayStatus();
 8003ca0:	f7ff fbb8 	bl	8003414 <DisplayStatus>
	EncVal = TIM4->CNT;
 8003ca4:	4b4b      	ldr	r3, [pc, #300]	; (8003dd4 <UserInput+0x224>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003ca6:	4c4c      	ldr	r4, [pc, #304]	; (8003dd8 <UserInput+0x228>)
	EncVal = TIM4->CNT;
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003caa:	8822      	ldrh	r2, [r4, #0]
	EncVal = TIM4->CNT;
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4d4b      	ldr	r5, [pc, #300]	; (8003ddc <UserInput+0x22c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003cb0:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 8003cb2:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8003cb4:	b201      	sxth	r1, r0
 8003cb6:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	db6f      	blt.n	8003d9c <UserInput+0x1ec>
	if (DiffEncVal > 0)
 8003cbc:	d005      	beq.n	8003cca <UserInput+0x11a>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8003cbe:	f7fd f9eb 	bl	8001098 <FminusClicked>
		DisplayStatus();
 8003cc2:	f7ff fba7 	bl	8003414 <DisplayStatus>
		LastEncVal = EncVal;
 8003cc6:	882b      	ldrh	r3, [r5, #0]
 8003cc8:	8023      	strh	r3, [r4, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003cca:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <UserInput+0x230>)
 8003ccc:	4c45      	ldr	r4, [pc, #276]	; (8003de4 <UserInput+0x234>)
 8003cce:	ed93 7a00 	vldr	s14, [r3]
 8003cd2:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8003db0 <UserInput+0x200>
 8003cd6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003cda:	ee27 0b00 	vmul.f64	d0, d7, d0
 8003cde:	f00f f8c3 	bl	8012e68 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8003ce2:	4941      	ldr	r1, [pc, #260]	; (8003de8 <UserInput+0x238>)
 8003ce4:	4a41      	ldr	r2, [pc, #260]	; (8003dec <UserInput+0x23c>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003ce6:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8003cea:	4b41      	ldr	r3, [pc, #260]	; (8003df0 <UserInput+0x240>)
 8003cec:	6808      	ldr	r0, [r1, #0]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4940      	ldr	r1, [pc, #256]	; (8003df4 <UserInput+0x244>)
 8003cf4:	9300      	str	r3, [sp, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003cf6:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8003db8 <UserInput+0x208>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8003cfa:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8003cfe:	483e      	ldr	r0, [pc, #248]	; (8003df8 <UserInput+0x248>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003d00:	eea0 7b06 	vfma.f64	d7, d0, d6
 8003d04:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8003d08:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8003d0c:	ed84 7a00 	vstr	s14, [r4]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8003d10:	ec53 2b16 	vmov	r2, r3, d6
 8003d14:	f00c fbe0 	bl	80104d8 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003d18:	4837      	ldr	r0, [pc, #220]	; (8003df8 <UserInput+0x248>)
 8003d1a:	f7fc fae1 	bl	80002e0 <strlen>
 8003d1e:	4601      	mov	r1, r0
 8003d20:	4835      	ldr	r0, [pc, #212]	; (8003df8 <UserInput+0x248>)
 8003d22:	b289      	uxth	r1, r1
 8003d24:	f00a fb6a 	bl	800e3fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f001 fd67 	bl	80057fc <HAL_Delay>
	if (OVFDetected)
 8003d2e:	4a33      	ldr	r2, [pc, #204]	; (8003dfc <UserInput+0x24c>)
 8003d30:	8813      	ldrh	r3, [r2, #0]
 8003d32:	b333      	cbz	r3, 8003d82 <UserInput+0x1d2>
		OVFDetected--;
 8003d34:	3b01      	subs	r3, #1
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8003d36:	4932      	ldr	r1, [pc, #200]	; (8003e00 <UserInput+0x250>)
 8003d38:	4c2f      	ldr	r4, [pc, #188]	; (8003df8 <UserInput+0x248>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8003d3a:	2680      	movs	r6, #128	; 0x80
		OVFDetected--;
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8013      	strh	r3, [r2, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8003d40:	4a30      	ldr	r2, [pc, #192]	; (8003e04 <UserInput+0x254>)
 8003d42:	6815      	ldr	r5, [r2, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8003d44:	c907      	ldmia	r1, {r0, r1, r2}
 8003d46:	c403      	stmia	r4!, {r0, r1}
 8003d48:	f824 2b02 	strh.w	r2, [r4], #2
 8003d4c:	0c12      	lsrs	r2, r2, #16
 8003d4e:	7022      	strb	r2, [r4, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8003d50:	4a2d      	ldr	r2, [pc, #180]	; (8003e08 <UserInput+0x258>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8003d52:	602e      	str	r6, [r5, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6016      	str	r6, [r2, #0]
		if (!OVFDetected)
 8003d58:	b92b      	cbnz	r3, 8003d66 <UserInput+0x1b6>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8003d5a:	686b      	ldr	r3, [r5, #4]
 8003d5c:	4333      	orrs	r3, r6
 8003d5e:	606b      	str	r3, [r5, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8003d60:	6853      	ldr	r3, [r2, #4]
 8003d62:	4333      	orrs	r3, r6
 8003d64:	6053      	str	r3, [r2, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8003d66:	4824      	ldr	r0, [pc, #144]	; (8003df8 <UserInput+0x248>)
 8003d68:	f7fc faba 	bl	80002e0 <strlen>
 8003d6c:	4601      	mov	r1, r0
 8003d6e:	4822      	ldr	r0, [pc, #136]	; (8003df8 <UserInput+0x248>)
 8003d70:	b289      	uxth	r1, r1
 8003d72:	f00a fb43 	bl	800e3fc <CDC_Transmit_FS>
	HAL_Delay(1);
 8003d76:	2001      	movs	r0, #1
}
 8003d78:	b00d      	add	sp, #52	; 0x34
 8003d7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8003d7e:	f001 bd3d 	b.w	80057fc <HAL_Delay>
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8003d82:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <UserInput+0x25c>)
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <UserInput+0x248>)
 8003d86:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d88:	0c14      	lsrs	r4, r2, #16
 8003d8a:	c303      	stmia	r3!, {r0, r1}
 8003d8c:	f823 2b02 	strh.w	r2, [r3], #2
 8003d90:	701c      	strb	r4, [r3, #0]
 8003d92:	e7e8      	b.n	8003d66 <UserInput+0x1b6>
		result = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f88d 3013 	strb.w	r3, [sp, #19]
 8003d9a:	e71a      	b.n	8003bd2 <UserInput+0x22>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8003d9c:	1ad0      	subs	r0, r2, r3
 8003d9e:	b280      	uxth	r0, r0
 8003da0:	f7fd f910 	bl	8000fc4 <FplusClicked>
		DisplayStatus();
 8003da4:	f7ff fb36 	bl	8003414 <DisplayStatus>
		LastEncVal = EncVal;
 8003da8:	882b      	ldrh	r3, [r5, #0]
 8003daa:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal > 0)
 8003dac:	e78d      	b.n	8003cca <UserInput+0x11a>
 8003dae:	bf00      	nop
 8003db0:	00000000 	.word	0x00000000
 8003db4:	409f4000 	.word	0x409f4000
 8003db8:	9916f6a6 	.word	0x9916f6a6
 8003dbc:	400a93fc 	.word	0x400a93fc
 8003dc0:	240083f8 	.word	0x240083f8
 8003dc4:	240072ec 	.word	0x240072ec
 8003dc8:	240072f4 	.word	0x240072f4
 8003dcc:	240072f2 	.word	0x240072f2
 8003dd0:	2400b80c 	.word	0x2400b80c
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	2400726a 	.word	0x2400726a
 8003ddc:	24002040 	.word	0x24002040
 8003de0:	24007278 	.word	0x24007278
 8003de4:	24007280 	.word	0x24007280
 8003de8:	240072d4 	.word	0x240072d4
 8003dec:	240072d0 	.word	0x240072d0
 8003df0:	2400202d 	.word	0x2400202d
 8003df4:	0801a0a0 	.word	0x0801a0a0
 8003df8:	240073f4 	.word	0x240073f4
 8003dfc:	24007274 	.word	0x24007274
 8003e00:	0801a0c4 	.word	0x0801a0c4
 8003e04:	2400b43c 	.word	0x2400b43c
 8003e08:	2400b4a0 	.word	0x2400b4a0
 8003e0c:	0801a0d0 	.word	0x0801a0d0


void TXSwitch(uint8_t Status)
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	2400      	movs	r4, #0
		LED_YELLOW_ON;
	}
	else
	{
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e12:	f44f 7800 	mov.w	r8, #512	; 0x200
 8003e16:	f04f 0901 	mov.w	r9, #1
		SendWSPR(); //endless loop, can exit and continue only keying.
 8003e1a:	f7ff f9d1 	bl	80031c0 <SendWSPR>
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1e:	a906      	add	r1, sp, #24
 8003e20:	48b7      	ldr	r0, [pc, #732]	; (8004100 <UserInput+0x550>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e22:	940a      	str	r4, [sp, #40]	; 0x28
 8003e24:	e9cd 6408 	strd	r6, r4, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e28:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e2c:	f004 fb30 	bl	8008490 <HAL_GPIO_Init>

		RELAY_TX_OFF;
 8003e30:	4622      	mov	r2, r4
 8003e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e36:	48b3      	ldr	r0, [pc, #716]	; (8004104 <UserInput+0x554>)
 8003e38:	f004 fc6a 	bl	8008710 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8003e3c:	4622      	mov	r2, r4
 8003e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e42:	48b1      	ldr	r0, [pc, #708]	; (8004108 <UserInput+0x558>)
 8003e44:	f004 fc64 	bl	8008710 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8003e48:	4bb0      	ldr	r3, [pc, #704]	; (800410c <UserInput+0x55c>)
		TXCarrierEnabled = 1;
		LED_GREEN_ON;
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e4e:	48ad      	ldr	r0, [pc, #692]	; (8004104 <UserInput+0x554>)
 8003e50:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8003e52:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e54:	940a      	str	r4, [sp, #40]	; 0x28
 8003e56:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003e5a:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003e5e:	f004 fc57 	bl	8008710 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8003e62:	4623      	mov	r3, r4
 8003e64:	4622      	mov	r2, r4
 8003e66:	2110      	movs	r1, #16
 8003e68:	48a9      	ldr	r0, [pc, #676]	; (8004110 <UserInput+0x560>)
 8003e6a:	f002 ff65 	bl	8006d38 <HAL_DAC_SetValue>
		TXCarrierEnabled = 0;
 8003e6e:	4ba9      	ldr	r3, [pc, #676]	; (8004114 <UserInput+0x564>)
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e70:	2202      	movs	r2, #2
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e72:	a906      	add	r1, sp, #24
		TXCarrierEnabled = 0;
 8003e74:	701c      	strb	r4, [r3, #0]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e76:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e78:	48a1      	ldr	r0, [pc, #644]	; (8004100 <UserInput+0x550>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e82:	f004 fb05 	bl	8008490 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8003e86:	4622      	mov	r2, r4
 8003e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e8c:	489e      	ldr	r0, [pc, #632]	; (8004108 <UserInput+0x558>)
 8003e8e:	f004 fc3f 	bl	8008710 <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 8003e92:	702c      	strb	r4, [r5, #0]
 8003e94:	e694      	b.n	8003bc0 <UserInput+0x10>
			volume += 0.1;
 8003e96:	4ba0      	ldr	r3, [pc, #640]	; (8004118 <UserInput+0x568>)
			if (volume > 1.0)
 8003e98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8003e9c:	ed93 7a00 	vldr	s14, [r3]
 8003ea0:	ed9f 5b95 	vldr	d5, [pc, #596]	; 80040f8 <UserInput+0x548>
 8003ea4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003ea8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8003eac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003eb0:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8003eb4:	edc3 7a00 	vstr	s15, [r3]
 8003eb8:	e6f2      	b.n	8003ca0 <UserInput+0xf0>
			SetBW((Bwidth)Wide);  break;
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fc feb4 	bl	8000c28 <SetBW>
 8003ec0:	e6ee      	b.n	8003ca0 <UserInput+0xf0>
	__HAL_RCC_PLL2FRACN_DISABLE();
 8003ec2:	4a96      	ldr	r2, [pc, #600]	; (800411c <UserInput+0x56c>)
	for (i=0; i< 50; i++)
 8003ec4:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8003ec6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8003ece:	9106      	str	r1, [sp, #24]
 8003ed0:	9b06      	ldr	r3, [sp, #24]
 8003ed2:	2b31      	cmp	r3, #49	; 0x31
 8003ed4:	d80b      	bhi.n	8003eee <UserInput+0x33e>
		i++;
 8003ed6:	9b06      	ldr	r3, [sp, #24]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	9306      	str	r3, [sp, #24]
		i--;
 8003edc:	9b06      	ldr	r3, [sp, #24]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 8003ee2:	9b06      	ldr	r3, [sp, #24]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	9306      	str	r3, [sp, #24]
 8003ee8:	9b06      	ldr	r3, [sp, #24]
 8003eea:	2b31      	cmp	r3, #49	; 0x31
 8003eec:	d9f3      	bls.n	8003ed6 <UserInput+0x326>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8003eee:	4a8b      	ldr	r2, [pc, #556]	; (800411c <UserInput+0x56c>)
 8003ef0:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <UserInput+0x570>)
 8003ef2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003efa:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8003efc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003efe:	f043 0310 	orr.w	r3, r3, #16
 8003f02:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003f04:	e6cc      	b.n	8003ca0 <UserInput+0xf0>
			SetMode((Mode)USB); break;
 8003f06:	2002      	movs	r0, #2
 8003f08:	f7fd f802 	bl	8000f10 <SetMode>
 8003f0c:	e6c8      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(5);  break;
 8003f0e:	2005      	movs	r0, #5
 8003f10:	f7fd f836 	bl	8000f80 <SetFstep>
 8003f14:	e6c4      	b.n	8003ca0 <UserInput+0xf0>
			FplusClicked(2); break;
 8003f16:	2002      	movs	r0, #2
 8003f18:	f7fd f854 	bl	8000fc4 <FplusClicked>
 8003f1c:	e6c0      	b.n	8003ca0 <UserInput+0xf0>
			FminusClicked(2); break;
 8003f1e:	2002      	movs	r0, #2
 8003f20:	f7fd f8ba 	bl	8001098 <FminusClicked>
 8003f24:	e6bc      	b.n	8003ca0 <UserInput+0xf0>
			volume -= 0.1;
 8003f26:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <UserInput+0x568>)
			if (volume < 0)
 8003f28:	2200      	movs	r2, #0
			volume -= 0.1;
 8003f2a:	ed93 7a00 	vldr	s14, [r3]
 8003f2e:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80040f8 <UserInput+0x548>
 8003f32:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003f36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f3a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8003f3e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8003f46:	bf54      	ite	pl
 8003f48:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8003f4c:	601a      	strmi	r2, [r3, #0]
 8003f4e:	e6a7      	b.n	8003ca0 <UserInput+0xf0>
			TxPowerOut = LOW_POWER_OUT;
 8003f50:	4b74      	ldr	r3, [pc, #464]	; (8004124 <UserInput+0x574>)
 8003f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f56:	601a      	str	r2, [r3, #0]
			break;
 8003f58:	e6a2      	b.n	8003ca0 <UserInput+0xf0>
			SendCWMessage(0); break;
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f7fc fe24 	bl	8000ba8 <SendCWMessage>
 8003f60:	e69e      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(9); break;
 8003f62:	2009      	movs	r0, #9
 8003f64:	f7fd f80c 	bl	8000f80 <SetFstep>
 8003f68:	e69a      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(0); break;
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f7fd f808 	bl	8000f80 <SetFstep>
 8003f70:	e696      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(1); break;
 8003f72:	2001      	movs	r0, #1
 8003f74:	f7fd f804 	bl	8000f80 <SetFstep>
 8003f78:	e692      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(2);  break;
 8003f7a:	2002      	movs	r0, #2
 8003f7c:	f7fd f800 	bl	8000f80 <SetFstep>
 8003f80:	e68e      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(3);  break;
 8003f82:	2003      	movs	r0, #3
 8003f84:	f7fc fffc 	bl	8000f80 <SetFstep>
 8003f88:	e68a      	b.n	8003ca0 <UserInput+0xf0>
			SetFstep(4);  break;
 8003f8a:	2004      	movs	r0, #4
 8003f8c:	f7fc fff8 	bl	8000f80 <SetFstep>
 8003f90:	e686      	b.n	8003ca0 <UserInput+0xf0>
		if (LastTXFreq != LOfreq)
 8003f92:	4d65      	ldr	r5, [pc, #404]	; (8004128 <UserInput+0x578>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8003f96:	4c65      	ldr	r4, [pc, #404]	; (800412c <UserInput+0x57c>)
		TransmissionEnabled = 1;
 8003f98:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 8003f9a:	ed95 0a00 	vldr	s0, [r5]
 8003f9e:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8003fa2:	4a5a      	ldr	r2, [pc, #360]	; (800410c <UserInput+0x55c>)
		if (LastTXFreq != LOfreq)
 8003fa4:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	930a      	str	r3, [sp, #40]	; 0x28
		TransmissionEnabled = 1;
 8003faa:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 8003fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003fb4:	e9cd 3308 	strd	r3, r3, [sp, #32]
		if (LastTXFreq != LOfreq)
 8003fb8:	f040 810e 	bne.w	80041d8 <UserInput+0x628>
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fbc:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fbe:	f44f 7600 	mov.w	r6, #512	; 0x200
 8003fc2:	2702      	movs	r7, #2
 8003fc4:	f04f 0800 	mov.w	r8, #0
 8003fc8:	f04f 0903 	mov.w	r9, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fcc:	a906      	add	r1, sp, #24
 8003fce:	484c      	ldr	r0, [pc, #304]	; (8004100 <UserInput+0x550>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003fd0:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003fd6:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fda:	f004 fa59 	bl	8008490 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fe4:	4847      	ldr	r0, [pc, #284]	; (8004104 <UserInput+0x554>)
 8003fe6:	f004 fb93 	bl	8008710 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8003fea:	2201      	movs	r2, #1
 8003fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff0:	4845      	ldr	r0, [pc, #276]	; (8004108 <UserInput+0x558>)
 8003ff2:	f004 fb8d 	bl	8008710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ffc:	4841      	ldr	r0, [pc, #260]	; (8004104 <UserInput+0x554>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ffe:	940a      	str	r4, [sp, #40]	; 0x28
 8004000:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004004:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004008:	f004 fb82 	bl	8008710 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <UserInput+0x574>)
 800400e:	4622      	mov	r2, r4
 8004010:	2110      	movs	r1, #16
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	483e      	ldr	r0, [pc, #248]	; (8004110 <UserInput+0x560>)
 8004016:	f002 fe8f 	bl	8006d38 <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401a:	a906      	add	r1, sp, #24
 800401c:	4838      	ldr	r0, [pc, #224]	; (8004100 <UserInput+0x550>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800401e:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004020:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004024:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004028:	f004 fa32 	bl	8008490 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 800402c:	2201      	movs	r2, #1
 800402e:	4b39      	ldr	r3, [pc, #228]	; (8004114 <UserInput+0x564>)
		LED_GREEN_ON;
 8004030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004034:	4834      	ldr	r0, [pc, #208]	; (8004108 <UserInput+0x558>)
		TXCarrierEnabled = 1;
 8004036:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8004038:	f004 fb6a 	bl	8008710 <HAL_GPIO_WritePin>
	}
}
 800403c:	e630      	b.n	8003ca0 <UserInput+0xf0>
			SetAGC((Agctype)Slow);  break;
 800403e:	2001      	movs	r0, #1
 8004040:	f7fc fe54 	bl	8000cec <SetAGC>
 8004044:	e62c      	b.n	8003ca0 <UserInput+0xf0>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004046:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004048:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800404a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800404e:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004050:	a906      	add	r1, sp, #24
 8004052:	482b      	ldr	r0, [pc, #172]	; (8004100 <UserInput+0x550>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004054:	9308      	str	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004056:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800405a:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405e:	f004 fa17 	bl	8008490 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004062:	4622      	mov	r2, r4
 8004064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004068:	4826      	ldr	r0, [pc, #152]	; (8004104 <UserInput+0x554>)
 800406a:	f004 fb51 	bl	8008710 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800406e:	4622      	mov	r2, r4
 8004070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004074:	4824      	ldr	r0, [pc, #144]	; (8004108 <UserInput+0x558>)
 8004076:	f004 fb4b 	bl	8008710 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <UserInput+0x55c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800407c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004080:	4820      	ldr	r0, [pc, #128]	; (8004104 <UserInput+0x554>)
 8004082:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8004084:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004086:	940a      	str	r4, [sp, #40]	; 0x28
 8004088:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800408c:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004090:	f004 fb3e 	bl	8008710 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8004094:	4623      	mov	r3, r4
 8004096:	4622      	mov	r2, r4
 8004098:	2110      	movs	r1, #16
 800409a:	481d      	ldr	r0, [pc, #116]	; (8004110 <UserInput+0x560>)
 800409c:	f002 fe4c 	bl	8006d38 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040a0:	2202      	movs	r2, #2
 80040a2:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a4:	a906      	add	r1, sp, #24
 80040a6:	4816      	ldr	r0, [pc, #88]	; (8004100 <UserInput+0x550>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <UserInput+0x564>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
		TXCarrierEnabled = 0;
 80040b2:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b4:	f004 f9ec 	bl	8008490 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80040b8:	4622      	mov	r2, r4
 80040ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040be:	4812      	ldr	r0, [pc, #72]	; (8004108 <UserInput+0x558>)
 80040c0:	f004 fb26 	bl	8008710 <HAL_GPIO_WritePin>
}
 80040c4:	e5ec      	b.n	8003ca0 <UserInput+0xf0>
			SetBW((Bwidth)Narrow);  break;
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7fc fdae 	bl	8000c28 <SetBW>
 80040cc:	e5e8      	b.n	8003ca0 <UserInput+0xf0>
			SetMode((Mode)LSB); break;
 80040ce:	2001      	movs	r0, #1
 80040d0:	f7fc ff1e 	bl	8000f10 <SetMode>
 80040d4:	e5e4      	b.n	8003ca0 <UserInput+0xf0>
			keyer_speed -= 1;
 80040d6:	4b16      	ldr	r3, [pc, #88]	; (8004130 <UserInput+0x580>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 80040dc:	2802      	cmp	r0, #2
 80040de:	dc76      	bgt.n	80041ce <UserInput+0x61e>
				keyer_speed = 3;
 80040e0:	2203      	movs	r2, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 80040e6:	e5d9      	b.n	8003c9c <UserInput+0xec>
			SetAGC((Agctype)Fast);  break;
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7fc fdff 	bl	8000cec <SetAGC>
 80040ee:	e5d7      	b.n	8003ca0 <UserInput+0xf0>
			SetMode((Mode)CW); break;
 80040f0:	2003      	movs	r0, #3
 80040f2:	f7fc ff0d 	bl	8000f10 <SetMode>
 80040f6:	e5d3      	b.n	8003ca0 <UserInput+0xf0>
 80040f8:	9999999a 	.word	0x9999999a
 80040fc:	3fb99999 	.word	0x3fb99999
 8004100:	58020800 	.word	0x58020800
 8004104:	58020c00 	.word	0x58020c00
 8004108:	58020400 	.word	0x58020400
 800410c:	240072e4 	.word	0x240072e4
 8004110:	2400b508 	.word	0x2400b508
 8004114:	240072d8 	.word	0x240072d8
 8004118:	2400c9cc 	.word	0x2400c9cc
 800411c:	58024400 	.word	0x58024400
 8004120:	ffff0007 	.word	0xffff0007
 8004124:	240072e8 	.word	0x240072e8
 8004128:	24007264 	.word	0x24007264
 800412c:	2400726c 	.word	0x2400726c
 8004130:	2400b80c 	.word	0x2400b80c
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <UserInput+0x634>)
	for (i=0; i< 50; i++)
 8004136:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004138:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800413a:	f023 0310 	bic.w	r3, r3, #16
 800413e:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8004140:	9105      	str	r1, [sp, #20]
 8004142:	9b05      	ldr	r3, [sp, #20]
 8004144:	2b31      	cmp	r3, #49	; 0x31
 8004146:	d80b      	bhi.n	8004160 <UserInput+0x5b0>
		i++;
 8004148:	9b05      	ldr	r3, [sp, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	9305      	str	r3, [sp, #20]
		i--;
 800414e:	9b05      	ldr	r3, [sp, #20]
 8004150:	3b01      	subs	r3, #1
 8004152:	9305      	str	r3, [sp, #20]
	for (i=0; i< 50; i++)
 8004154:	9b05      	ldr	r3, [sp, #20]
 8004156:	3301      	adds	r3, #1
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	9b05      	ldr	r3, [sp, #20]
 800415c:	2b31      	cmp	r3, #49	; 0x31
 800415e:	d9f3      	bls.n	8004148 <UserInput+0x598>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <UserInput+0x634>)
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <UserInput+0x638>)
 8004164:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004166:	400b      	ands	r3, r1
 8004168:	f443 63dc 	orr.w	r3, r3, #1760	; 0x6e0
 800416c:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 800416e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004170:	f043 0310 	orr.w	r3, r3, #16
 8004174:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004176:	e593      	b.n	8003ca0 <UserInput+0xf0>
			SetMode((Mode)AM); break;
 8004178:	2000      	movs	r0, #0
 800417a:	f7fc fec9 	bl	8000f10 <SetMode>
 800417e:	e58f      	b.n	8003ca0 <UserInput+0xf0>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	481a      	ldr	r0, [pc, #104]	; (80041ec <UserInput+0x63c>)
 8004184:	491a      	ldr	r1, [pc, #104]	; (80041f0 <UserInput+0x640>)
 8004186:	4a1b      	ldr	r2, [pc, #108]	; (80041f4 <UserInput+0x644>)
 8004188:	6003      	str	r3, [r0, #0]
 800418a:	600b      	str	r3, [r1, #0]
 800418c:	6013      	str	r3, [r2, #0]
					break;
 800418e:	e587      	b.n	8003ca0 <UserInput+0xf0>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <UserInput+0x648>)
 8004192:	491a      	ldr	r1, [pc, #104]	; (80041fc <UserInput+0x64c>)
 8004194:	ed93 0a00 	vldr	s0, [r3]
 8004198:	4819      	ldr	r0, [pc, #100]	; (8004200 <UserInput+0x650>)
 800419a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800419e:	f7ff fa6b 	bl	8003678 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <UserInput+0x654>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 80041a8:	f7ff f80a 	bl	80031c0 <SendWSPR>
			break;
 80041ac:	e578      	b.n	8003ca0 <UserInput+0xf0>
			if (ShowWF)
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <UserInput+0x658>)
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	b172      	cbz	r2, 80041d2 <UserInput+0x622>
				ShowWF=0;
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e572      	b.n	8003ca0 <UserInput+0xf0>
			TxPowerOut = MAX_POWER_OUT;
 80041ba:	4b14      	ldr	r3, [pc, #80]	; (800420c <UserInput+0x65c>)
 80041bc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80041c0:	601a      	str	r2, [r3, #0]
			break;
 80041c2:	e56d      	b.n	8003ca0 <UserInput+0xf0>
			TxPowerOut = MID_POWER_OUT;
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <UserInput+0x65c>)
 80041c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ca:	601a      	str	r2, [r3, #0]
			break;
 80041cc:	e568      	b.n	8003ca0 <UserInput+0xf0>
			keyer_speed += 1;
 80041ce:	6018      	str	r0, [r3, #0]
 80041d0:	e564      	b.n	8003c9c <UserInput+0xec>
				ShowWF=1;
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e563      	b.n	8003ca0 <UserInput+0xf0>
			SetTXPLL(LOfreq);
 80041d8:	f7ff fbb6 	bl	8003948 <SetTXPLL>
			LastTXFreq = LOfreq;
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	e6ec      	b.n	8003fbc <UserInput+0x40c>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
 80041e8:	ffff0007 	.word	0xffff0007
 80041ec:	240072d0 	.word	0x240072d0
 80041f0:	240072d4 	.word	0x240072d4
 80041f4:	2400c9d8 	.word	0x2400c9d8
 80041f8:	24007264 	.word	0x24007264
 80041fc:	24006248 	.word	0x24006248
 8004200:	2400623c 	.word	0x2400623c
 8004204:	240072e5 	.word	0x240072e5
 8004208:	240072a4 	.word	0x240072a4
 800420c:	240072e8 	.word	0x240072e8

08004210 <TXSwitch>:
{
 8004210:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004212:	2300      	movs	r3, #0
{
 8004214:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004216:	e9cd 3300 	strd	r3, r3, [sp]
 800421a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800421e:	9304      	str	r3, [sp, #16]
	if (Status)
 8004220:	b378      	cbz	r0, 8004282 <TXSwitch+0x72>
		if (LastTXFreq != LOfreq)
 8004222:	4d27      	ldr	r5, [pc, #156]	; (80042c0 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 8004224:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8004226:	4c27      	ldr	r4, [pc, #156]	; (80042c4 <TXSwitch+0xb4>)
 8004228:	ed95 0a00 	vldr	s0, [r5]
 800422c:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8004230:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 8004232:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8004236:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	d11c      	bne.n	8004278 <TXSwitch+0x68>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800423e:	2200      	movs	r2, #0
 8004240:	2303      	movs	r3, #3
 8004242:	f44f 7400 	mov.w	r4, #512	; 0x200
 8004246:	2502      	movs	r5, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004248:	4669      	mov	r1, sp
 800424a:	4820      	ldr	r0, [pc, #128]	; (80042cc <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800424c:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004250:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004252:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004256:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004258:	f004 f91a 	bl	8008490 <HAL_GPIO_Init>
		RELAY_TX_ON;
 800425c:	2201      	movs	r2, #1
 800425e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004262:	481b      	ldr	r0, [pc, #108]	; (80042d0 <TXSwitch+0xc0>)
 8004264:	f004 fa54 	bl	8008710 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8004268:	2201      	movs	r2, #1
 800426a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800426e:	4819      	ldr	r0, [pc, #100]	; (80042d4 <TXSwitch+0xc4>)
 8004270:	f004 fa4e 	bl	8008710 <HAL_GPIO_WritePin>
}
 8004274:	b007      	add	sp, #28
 8004276:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8004278:	f7ff fb66 	bl	8003948 <SetTXPLL>
			LastTXFreq = LOfreq;
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	e7dd      	b.n	800423e <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004282:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80042b8 <TXSwitch+0xa8>
 8004286:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004288:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800428a:	4669      	mov	r1, sp
 800428c:	480f      	ldr	r0, [pc, #60]	; (80042cc <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800428e:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004290:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004294:	f004 f8fc 	bl	8008490 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8004298:	4622      	mov	r2, r4
 800429a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800429e:	480c      	ldr	r0, [pc, #48]	; (80042d0 <TXSwitch+0xc0>)
 80042a0:	f004 fa36 	bl	8008710 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 80042a4:	4622      	mov	r2, r4
 80042a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042aa:	480a      	ldr	r0, [pc, #40]	; (80042d4 <TXSwitch+0xc4>)
 80042ac:	f004 fa30 	bl	8008710 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <TXSwitch+0xb8>)
 80042b2:	701c      	strb	r4, [r3, #0]
}
 80042b4:	b007      	add	sp, #28
 80042b6:	bd30      	pop	{r4, r5, pc}
 80042b8:	00000200 	.word	0x00000200
 80042bc:	00000001 	.word	0x00000001
 80042c0:	24007264 	.word	0x24007264
 80042c4:	2400726c 	.word	0x2400726c
 80042c8:	240072e4 	.word	0x240072e4
 80042cc:	58020800 	.word	0x58020800
 80042d0:	58020c00 	.word	0x58020c00
 80042d4:	58020400 	.word	0x58020400

080042d8 <CarrierEnable>:
{
 80042d8:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042da:	2400      	movs	r4, #0
{
 80042dc:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042de:	e9cd 4400 	strd	r4, r4, [sp]
 80042e2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80042e6:	9404      	str	r4, [sp, #16]
	if (Status)
 80042e8:	b320      	cbz	r0, 8004334 <CarrierEnable+0x5c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80042ea:	4622      	mov	r2, r4
 80042ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042f0:	4822      	ldr	r0, [pc, #136]	; (800437c <CarrierEnable+0xa4>)
 80042f2:	f004 fa0d 	bl	8008710 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <CarrierEnable+0xa8>)
 80042f8:	4622      	mov	r2, r4
 80042fa:	2110      	movs	r1, #16
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4821      	ldr	r0, [pc, #132]	; (8004384 <CarrierEnable+0xac>)
 8004300:	f002 fd1a 	bl	8006d38 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004308:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800430a:	4669      	mov	r1, sp
 800430c:	481e      	ldr	r0, [pc, #120]	; (8004388 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800430e:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004310:	e9cd 2300 	strd	r2, r3, [sp]
 8004314:	2200      	movs	r2, #0
 8004316:	2303      	movs	r3, #3
 8004318:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	f004 f8b8 	bl	8008490 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8004320:	2201      	movs	r2, #1
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 8004324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004328:	4819      	ldr	r0, [pc, #100]	; (8004390 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 800432a:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 800432c:	f004 f9f0 	bl	8008710 <HAL_GPIO_WritePin>
}
 8004330:	b007      	add	sp, #28
 8004332:	bd30      	pop	{r4, r5, pc}
 8004334:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8004336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800433a:	4810      	ldr	r0, [pc, #64]	; (800437c <CarrierEnable+0xa4>)
 800433c:	2201      	movs	r2, #1
 800433e:	f004 f9e7 	bl	8008710 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8004342:	462b      	mov	r3, r5
 8004344:	462a      	mov	r2, r5
 8004346:	2110      	movs	r1, #16
 8004348:	480e      	ldr	r0, [pc, #56]	; (8004384 <CarrierEnable+0xac>)
 800434a:	f002 fcf5 	bl	8006d38 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800434e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004352:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 8004354:	480d      	ldr	r0, [pc, #52]	; (800438c <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004356:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 8004358:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800435a:	480b      	ldr	r0, [pc, #44]	; (8004388 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800435c:	e9cd 2300 	strd	r2, r3, [sp]
 8004360:	2300      	movs	r3, #0
 8004362:	2202      	movs	r2, #2
 8004364:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004368:	f004 f892 	bl	8008490 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 800436c:	462a      	mov	r2, r5
 800436e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004372:	4807      	ldr	r0, [pc, #28]	; (8004390 <CarrierEnable+0xb8>)
 8004374:	f004 f9cc 	bl	8008710 <HAL_GPIO_WritePin>
}
 8004378:	b007      	add	sp, #28
 800437a:	bd30      	pop	{r4, r5, pc}
 800437c:	58020c00 	.word	0x58020c00
 8004380:	240072e8 	.word	0x240072e8
 8004384:	2400b508 	.word	0x2400b508
 8004388:	58020800 	.word	0x58020800
 800438c:	240072d8 	.word	0x240072d8
 8004390:	58020400 	.word	0x58020400

08004394 <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8004394:	4e09      	ldr	r6, [pc, #36]	; (80043bc <Error_Handler+0x28>)
{
 8004396:	4d0a      	ldr	r5, [pc, #40]	; (80043c0 <Error_Handler+0x2c>)
 8004398:	4c0a      	ldr	r4, [pc, #40]	; (80043c4 <Error_Handler+0x30>)
 800439a:	b508      	push	{r3, lr}
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	fb05 f303 	mul.w	r3, r5, r3
 80043a2:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80043a6:	d200      	bcs.n	80043aa <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80043a8:	e7fe      	b.n	80043a8 <Error_Handler+0x14>
			LED_switch();
 80043aa:	f7fc fedf 	bl	800116c <LED_switch>
 80043ae:	6833      	ldr	r3, [r6, #0]
 80043b0:	fb05 f303 	mul.w	r3, r5, r3
 80043b4:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80043b8:	d2f7      	bcs.n	80043aa <Error_Handler+0x16>
 80043ba:	e7f5      	b.n	80043a8 <Error_Handler+0x14>
 80043bc:	2400b83c 	.word	0x2400b83c
 80043c0:	c28f5c29 	.word	0xc28f5c29
 80043c4:	051eb851 	.word	0x051eb851

080043c8 <SystemClock_Config_For_OC>:
{
 80043c8:	b530      	push	{r4, r5, lr}
 80043ca:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043cc:	224c      	movs	r2, #76	; 0x4c
 80043ce:	2100      	movs	r1, #0
 80043d0:	a80a      	add	r0, sp, #40	; 0x28
 80043d2:	f00b fbf9 	bl	800fbc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043d6:	2220      	movs	r2, #32
 80043d8:	2100      	movs	r1, #0
 80043da:	a802      	add	r0, sp, #8
 80043dc:	f00b fbf4 	bl	800fbc8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043e0:	22bc      	movs	r2, #188	; 0xbc
 80043e2:	2100      	movs	r1, #0
 80043e4:	a81e      	add	r0, sp, #120	; 0x78
 80043e6:	f00b fbef 	bl	800fbc8 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80043ea:	2002      	movs	r0, #2
 80043ec:	f004 ffa2 	bl	8009334 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80043f0:	4a49      	ldr	r2, [pc, #292]	; (8004518 <SystemClock_Config_For_OC+0x150>)
 80043f2:	2300      	movs	r3, #0
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	6991      	ldr	r1, [r2, #24]
 80043f8:	4b48      	ldr	r3, [pc, #288]	; (800451c <SystemClock_Config_For_OC+0x154>)
 80043fa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80043fe:	6191      	str	r1, [r2, #24]
 8004400:	6991      	ldr	r1, [r2, #24]
 8004402:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8004406:	9101      	str	r1, [sp, #4]
 8004408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800440a:	f041 0101 	orr.w	r1, r1, #1
 800440e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800441a:	6993      	ldr	r3, [r2, #24]
 800441c:	0499      	lsls	r1, r3, #18
 800441e:	d5fc      	bpl.n	800441a <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004420:	4a3f      	ldr	r2, [pc, #252]	; (8004520 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8004422:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004424:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004426:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8004428:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004434:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 8004436:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800443a:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 800443c:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800443e:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8004440:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004442:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004444:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004448:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800444a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 800444e:	230a      	movs	r3, #10
 8004450:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 8004454:	4b33      	ldr	r3, [pc, #204]	; (8004524 <SystemClock_Config_For_OC+0x15c>)
 8004456:	4a34      	ldr	r2, [pc, #208]	; (8004528 <SystemClock_Config_For_OC+0x160>)
 8004458:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800445a:	2221      	movs	r2, #33	; 0x21
 800445c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004460:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004464:	f005 f816 	bl	8009494 <HAL_RCC_OscConfig>
 8004468:	2800      	cmp	r0, #0
 800446a:	d152      	bne.n	8004512 <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800446c:	223f      	movs	r2, #63	; 0x3f
 800446e:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004470:	4621      	mov	r1, r4
 8004472:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	2308      	movs	r3, #8
 800447c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004480:	2240      	movs	r2, #64	; 0x40
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800448e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004492:	f005 fbc5 	bl	8009c20 <HAL_RCC_ClockConfig>
 8004496:	4603      	mov	r3, r0
 8004498:	2800      	cmp	r0, #0
 800449a:	d13a      	bne.n	8004512 <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 800449c:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80044a0:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80044a2:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80044a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80044a8:	9244      	str	r2, [sp, #272]	; 0x110
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80044aa:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <SystemClock_Config_For_OC+0x164>)
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b0:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80044b2:	9346      	str	r3, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80044b4:	2304      	movs	r3, #4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80044b6:	913f      	str	r1, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80044b8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80044bc:	2226      	movs	r2, #38	; 0x26
 80044be:	2318      	movs	r3, #24
 80044c0:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80044c4:	2202      	movs	r2, #2
 80044c6:	2302      	movs	r3, #2
 80044c8:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	2300      	movs	r3, #0
 80044d0:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 80044d4:	2200      	movs	r2, #0
 80044d6:	2305      	movs	r3, #5
 80044d8:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	2302      	movs	r3, #2
 80044e0:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 80044e4:	2208      	movs	r2, #8
 80044e6:	2305      	movs	r3, #5
 80044e8:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 80044ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f0:	2300      	movs	r3, #0
 80044f2:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044f6:	f005 fe7f 	bl	800a1f8 <HAL_RCCEx_PeriphCLKConfig>
 80044fa:	b950      	cbnz	r0, 8004512 <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 80044fc:	f004 ff3e 	bl	800937c <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8004500:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004504:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8004508:	4628      	mov	r0, r5
 800450a:	f005 fa97 	bl	8009a3c <HAL_RCC_MCOConfig>
}
 800450e:	b04f      	add	sp, #316	; 0x13c
 8004510:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8004512:	f7ff ff3f 	bl	8004394 <Error_Handler>
 8004516:	bf00      	nop
 8004518:	58024800 	.word	0x58024800
 800451c:	58000400 	.word	0x58000400
 8004520:	58024400 	.word	0x58024400
 8004524:	240083fc 	.word	0x240083fc
 8004528:	4bbebbd3 	.word	0x4bbebbd3
 800452c:	000c0042 	.word	0x000c0042

08004530 <MX_TIM6_Init_Custom_Rate>:
{
 8004530:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004532:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8004534:	4c0f      	ldr	r4, [pc, #60]	; (8004574 <MX_TIM6_Init_Custom_Rate+0x44>)
 8004536:	4810      	ldr	r0, [pc, #64]	; (8004578 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8004538:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 800453a:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800453e:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004540:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004542:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8004544:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004548:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 800454a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800454e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004552:	f006 ff2d 	bl	800b3b0 <HAL_TIM_Base_Init>
 8004556:	b950      	cbnz	r0, 800456e <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004558:	4603      	mov	r3, r0
 800455a:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800455c:	a901      	add	r1, sp, #4
 800455e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004560:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004562:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004564:	f007 fb5e 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004568:	b908      	cbnz	r0, 800456e <MX_TIM6_Init_Custom_Rate+0x3e>
}
 800456a:	b004      	add	sp, #16
 800456c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800456e:	f7ff ff11 	bl	8004394 <Error_Handler>
 8004572:	bf00      	nop
 8004574:	2400b6e0 	.word	0x2400b6e0
 8004578:	40001000 	.word	0x40001000
 800457c:	00000000 	.word	0x00000000

08004580 <main>:
{
 8004580:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004584:	b0cf      	sub	sp, #316	; 0x13c
	HAL_Init();
 8004586:	f001 f8f7 	bl	8005778 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800458a:	4add      	ldr	r2, [pc, #884]	; (8004900 <main+0x380>)
 800458c:	6953      	ldr	r3, [r2, #20]
 800458e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8004592:	d111      	bne.n	80045b8 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8004594:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004598:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800459c:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80045a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045a4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80045a8:	6953      	ldr	r3, [r2, #20]
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80045b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045b4:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80045ba:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8004920 <main+0x3a0>
	SystemClock_Config_For_OC();
 80045be:	f7ff ff03 	bl	80043c8 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 80045c2:	2014      	movs	r0, #20
 80045c4:	f001 f91a 	bl	80057fc <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c8:	9448      	str	r4, [sp, #288]	; 0x120
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80045ca:	48ce      	ldr	r0, [pc, #824]	; (8004904 <main+0x384>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045cc:	2501      	movs	r5, #1
	hadc1.Instance = ADC1;
 80045ce:	f8df b354 	ldr.w	fp, [pc, #852]	; 8004924 <main+0x3a4>
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80045d2:	f44f 7680 	mov.w	r6, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80045d6:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80045da:	f04f 0908 	mov.w	r9, #8
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80045de:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e2:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 80045e6:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80045ea:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80045ee:	f042 0204 	orr.w	r2, r2, #4
 80045f2:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 80045f6:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80045fa:	f002 0204 	and.w	r2, r2, #4
 80045fe:	9205      	str	r2, [sp, #20]
 8004600:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004602:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800460a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800460e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004612:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004616:	9206      	str	r2, [sp, #24]
 8004618:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8004626:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800462a:	f002 0201 	and.w	r2, r2, #1
 800462e:	9207      	str	r2, [sp, #28]
 8004630:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004632:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004636:	f042 0202 	orr.w	r2, r2, #2
 800463a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800463e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8004642:	f002 0202 	and.w	r2, r2, #2
 8004646:	9208      	str	r2, [sp, #32]
 8004648:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800464a:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800464e:	f042 0208 	orr.w	r2, r2, #8
 8004652:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8004656:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800465a:	f002 0208 	and.w	r2, r2, #8
 800465e:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8004660:	4622      	mov	r2, r4
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004662:	9909      	ldr	r1, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8004664:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8004668:	f004 f852 	bl	8008710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 800466c:	4622      	mov	r2, r4
 800466e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004672:	48a5      	ldr	r0, [pc, #660]	; (8004908 <main+0x388>)
 8004674:	f004 f84c 	bl	8008710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8004678:	4622      	mov	r2, r4
 800467a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800467e:	48a3      	ldr	r0, [pc, #652]	; (800490c <main+0x38c>)
 8004680:	f004 f846 	bl	8008710 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 8004684:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004688:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800468a:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 800468c:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8004690:	a944      	add	r1, sp, #272	; 0x110
 8004692:	489f      	ldr	r0, [pc, #636]	; (8004910 <main+0x390>)
 8004694:	f003 fefc 	bl	8008490 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SwInt1_Pin;
 8004698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800469c:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046a0:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80046a2:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80046a6:	a944      	add	r1, sp, #272	; 0x110
 80046a8:	4899      	ldr	r0, [pc, #612]	; (8004910 <main+0x390>)
 80046aa:	f003 fef1 	bl	8008490 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80046ae:	20c0      	movs	r0, #192	; 0xc0
 80046b0:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046b2:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80046b4:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b8:	a944      	add	r1, sp, #272	; 0x110
 80046ba:	4894      	ldr	r0, [pc, #592]	; (800490c <main+0x38c>)
 80046bc:	f003 fee8 	bl	8008490 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80046c0:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80046c4:	2101      	movs	r1, #1
 80046c6:	ed9f 8b78 	vldr	d8, [pc, #480]	; 80048a8 <main+0x328>
 80046ca:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ce:	a944      	add	r1, sp, #272	; 0x110
 80046d0:	488c      	ldr	r0, [pc, #560]	; (8004904 <main+0x384>)
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 80046d2:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d6:	f003 fedb 	bl	8008490 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046da:	a944      	add	r1, sp, #272	; 0x110
 80046dc:	488a      	ldr	r0, [pc, #552]	; (8004908 <main+0x388>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 80046de:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80048b0 <main+0x330>
 80046e2:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 80046e6:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80048b8 <main+0x338>
 80046ea:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046ee:	f003 fecf 	bl	8008490 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f2:	a944      	add	r1, sp, #272	; 0x110
 80046f4:	4886      	ldr	r0, [pc, #536]	; (8004910 <main+0x390>)
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80046f6:	9448      	str	r4, [sp, #288]	; 0x120
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046f8:	ed9f 7b71 	vldr	d7, [pc, #452]	; 80048c0 <main+0x340>
 80046fc:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 8004700:	ed9f 7b71 	vldr	d7, [pc, #452]	; 80048c8 <main+0x348>
 8004704:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004708:	f003 fec2 	bl	8008490 <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800470c:	a944      	add	r1, sp, #272	; 0x110
 800470e:	487f      	ldr	r0, [pc, #508]	; (800490c <main+0x38c>)
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8004710:	ed9f 7b6f 	vldr	d7, [pc, #444]	; 80048d0 <main+0x350>
 8004714:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
 8004718:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800471c:	f003 feb8 	bl	8008490 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8004720:	4622      	mov	r2, r4
 8004722:	2104      	movs	r1, #4
 8004724:	2028      	movs	r0, #40	; 0x28
 8004726:	f002 f9cf 	bl	8006ac8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800472a:	2028      	movs	r0, #40	; 0x28
 800472c:	f002 fa0a 	bl	8006b44 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004730:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004734:	4621      	mov	r1, r4
 8004736:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004738:	432a      	orrs	r2, r5
 800473a:	f8c8 20d8 	str.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800473e:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004740:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 8004744:	402b      	ands	r3, r5
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800474a:	f002 f9bd 	bl	8006ac8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800474e:	200b      	movs	r0, #11
 8004750:	f002 f9f8 	bl	8006b44 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8004754:	4622      	mov	r2, r4
 8004756:	2102      	movs	r1, #2
 8004758:	200c      	movs	r0, #12
 800475a:	f002 f9b5 	bl	8006ac8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800475e:	200c      	movs	r0, #12
 8004760:	f002 f9f0 	bl	8006b44 <HAL_NVIC_EnableIRQ>
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004764:	2304      	movs	r3, #4
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004766:	4658      	mov	r0, fp
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004768:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800476c:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc1.Instance = ADC1;
 8004770:	4b68      	ldr	r3, [pc, #416]	; (8004914 <main+0x394>)
	ADC_MultiModeTypeDef multimode = {0};
 8004772:	940c      	str	r4, [sp, #48]	; 0x30
	hadc1.Instance = ADC1;
 8004774:	f8cb 3000 	str.w	r3, [fp]
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8004778:	2303      	movs	r3, #3
	ADC_ChannelConfTypeDef sConfig = {0};
 800477a:	9438      	str	r4, [sp, #224]	; 0xe0
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800477c:	f8cb 400c 	str.w	r4, [fp, #12]
	hadc1.Init.NbrOfConversion = 1;
 8004780:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004784:	f88b 401c 	strb.w	r4, [fp, #28]
	hadc1.Init.OversamplingMode = DISABLE;
 8004788:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800478c:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
	ADC_MultiModeTypeDef multimode = {0};
 8004790:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004794:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 8004798:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 800479c:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	ADC_ChannelConfTypeDef sConfig = {0};
 80047a0:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 80047a4:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
 80047a8:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80047ac:	e9cb a901 	strd	sl, r9, [fp, #4]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80047b0:	e9cb 4409 	strd	r4, r4, [fp, #36]	; 0x24
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80047b4:	e9cb 740c 	strd	r7, r4, [fp, #48]	; 0x30
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047b8:	f001 ff26 	bl	8006608 <HAL_ADC_Init>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f040 8321 	bne.w	8004e04 <main+0x884>
	multimode.Mode = ADC_DUALMODE_INTERL;
 80047c2:	2207      	movs	r2, #7
 80047c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047c8:	a90a      	add	r1, sp, #40	; 0x28
 80047ca:	4658      	mov	r0, fp
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 80047cc:	960c      	str	r6, [sp, #48]	; 0x30
	multimode.Mode = ADC_DUALMODE_INTERL;
 80047ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047d2:	f002 f8ff 	bl	80069d4 <HAL_ADCEx_MultiModeConfigChannel>
 80047d6:	2800      	cmp	r0, #0
 80047d8:	f040 8314 	bne.w	8004e04 <main+0x884>
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80047dc:	4c4e      	ldr	r4, [pc, #312]	; (8004918 <main+0x398>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80047de:	a924      	add	r1, sp, #144	; 0x90
 80047e0:	4658      	mov	r0, fp
	AnalogWDGConfig.ITMode = ENABLE;
 80047e2:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80047e6:	9426      	str	r4, [sp, #152]	; 0x98
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80047e8:	ed9f cb3b 	vldr	d12, [pc, #236]	; 80048d8 <main+0x358>
	AnalogWDGConfig.HighThreshold = 4094;
 80047ec:	ed9f bb3c 	vldr	d11, [pc, #240]	; 80048e0 <main+0x360>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80047f0:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
	AnalogWDGConfig.HighThreshold = 4094;
 80047f4:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80047f8:	f001 fc00 	bl	8005ffc <HAL_ADC_AnalogWDGConfig>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	f040 8301 	bne.w	8004e04 <main+0x884>
	sConfig.OffsetSignedSaturation = DISABLE;
 8004802:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004806:	a932      	add	r1, sp, #200	; 0xc8
 8004808:	4658      	mov	r0, fp
	sConfig.Channel = ADC_CHANNEL_5;
 800480a:	ed9f ab37 	vldr	d10, [pc, #220]	; 80048e8 <main+0x368>
 800480e:	ed9f 9b38 	vldr	d9, [pc, #224]	; 80048f0 <main+0x370>
 8004812:	ed9f 8b39 	vldr	d8, [pc, #228]	; 80048f8 <main+0x378>
 8004816:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 800481a:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 800481e:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004822:	f001 f9bb 	bl	8005b9c <HAL_ADC_ConfigChannel>
 8004826:	2800      	cmp	r0, #0
 8004828:	f040 82ec 	bne.w	8004e04 <main+0x884>
	hadc2.Instance = ADC2;
 800482c:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8004928 <main+0x3a8>
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004830:	2304      	movs	r3, #4
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004832:	901e      	str	r0, [sp, #120]	; 0x78
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004834:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc2.Instance = ADC2;
 8004838:	4b38      	ldr	r3, [pc, #224]	; (800491c <main+0x39c>)
	ADC_ChannelConfTypeDef sConfig = {0};
 800483a:	902a      	str	r0, [sp, #168]	; 0xa8
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800483c:	9023      	str	r0, [sp, #140]	; 0x8c
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800483e:	f8cb 000c 	str.w	r0, [fp, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004842:	f88b 001c 	strb.w	r0, [fp, #28]
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8004846:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800484a:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 800484e:	f88b 0038 	strb.w	r0, [fp, #56]	; 0x38
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8004852:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004856:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
	hadc2.Init.NbrOfConversion = 1;
 800485a:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc2.Instance = ADC2;
 800485e:	f8cb 3000 	str.w	r3, [fp]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8004862:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 8004866:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
	ADC_ChannelConfTypeDef sConfig = {0};
 800486a:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 800486e:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 8004872:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004876:	4658      	mov	r0, fp
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004878:	e9cb a901 	strd	sl, r9, [fp, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800487c:	f001 fec4 	bl	8006608 <HAL_ADC_Init>
 8004880:	2800      	cmp	r0, #0
 8004882:	f040 82bf 	bne.w	8004e04 <main+0x884>
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004886:	a91e      	add	r1, sp, #120	; 0x78
 8004888:	4658      	mov	r0, fp
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 800488a:	9420      	str	r4, [sp, #128]	; 0x80
	AnalogWDGConfig.ITMode = ENABLE;
 800488c:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8004890:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
	AnalogWDGConfig.HighThreshold = 4094;
 8004894:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004898:	f001 fbb0 	bl	8005ffc <HAL_ADC_AnalogWDGConfig>
 800489c:	4603      	mov	r3, r0
 800489e:	2800      	cmp	r0, #0
 80048a0:	f040 82b0 	bne.w	8004e04 <main+0x884>
 80048a4:	e042      	b.n	800492c <main+0x3ac>
 80048a6:	bf00      	nop
	...
 80048b0:	00000c00 	.word	0x00000c00
 80048b4:	00000001 	.word	0x00000001
 80048b8:	00000002 	.word	0x00000002
 80048bc:	00000000 	.word	0x00000000
 80048c0:	00000200 	.word	0x00000200
 80048c4:	00000002 	.word	0x00000002
 80048c8:	00000000 	.word	0x00000000
 80048cc:	00000003 	.word	0x00000003
 80048d0:	00000100 	.word	0x00000100
 80048d4:	00000001 	.word	0x00000001
 80048d8:	7dc00000 	.word	0x7dc00000
 80048dc:	00c00000 	.word	0x00c00000
 80048e0:	00000ffe 	.word	0x00000ffe
 80048e4:	00000001 	.word	0x00000001
 80048e8:	14f00020 	.word	0x14f00020
 80048ec:	00000006 	.word	0x00000006
 80048f0:	00000000 	.word	0x00000000
 80048f4:	000007ff 	.word	0x000007ff
 80048f8:	00000004 	.word	0x00000004
 80048fc:	00000000 	.word	0x00000000
 8004900:	e000ed00 	.word	0xe000ed00
 8004904:	58020400 	.word	0x58020400
 8004908:	58020c00 	.word	0x58020c00
 800490c:	58020000 	.word	0x58020000
 8004910:	58020800 	.word	0x58020800
 8004914:	40022000 	.word	0x40022000
 8004918:	14f00020 	.word	0x14f00020
 800491c:	40022100 	.word	0x40022100
 8004920:	58024400 	.word	0x58024400
 8004924:	2400b43c 	.word	0x2400b43c
 8004928:	2400b4a0 	.word	0x2400b4a0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800492c:	a92a      	add	r1, sp, #168	; 0xa8
 800492e:	4658      	mov	r0, fp
	sConfig.OffsetSignedSaturation = DISABLE;
 8004930:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
	sConfig.Channel = ADC_CHANNEL_5;
 8004934:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8004938:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 800493c:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004940:	f001 f92c 	bl	8005b9c <HAL_ADC_ConfigChannel>
 8004944:	4601      	mov	r1, r0
 8004946:	2800      	cmp	r0, #0
 8004948:	f040 825c 	bne.w	8004e04 <main+0x884>
	DAC_ChannelConfTypeDef sConfig = {0};
 800494c:	2224      	movs	r2, #36	; 0x24
	hdac1.Instance = DAC1;
 800494e:	4cc4      	ldr	r4, [pc, #784]	; (8004c60 <main+0x6e0>)
	DAC_ChannelConfTypeDef sConfig = {0};
 8004950:	a844      	add	r0, sp, #272	; 0x110
 8004952:	f00b f939 	bl	800fbc8 <memset>
	hdac1.Instance = DAC1;
 8004956:	4bc3      	ldr	r3, [pc, #780]	; (8004c64 <main+0x6e4>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004958:	4620      	mov	r0, r4
	hdac1.Instance = DAC1;
 800495a:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800495c:	f002 f916 	bl	8006b8c <HAL_DAC_Init>
 8004960:	4602      	mov	r2, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	f040 824e 	bne.w	8004e04 <main+0x884>
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004968:	2101      	movs	r1, #1
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800496a:	9048      	str	r0, [sp, #288]	; 0x120
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800496c:	2000      	movs	r0, #0
 800496e:	2600      	movs	r6, #0
 8004970:	2716      	movs	r7, #22
 8004972:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004976:	a944      	add	r1, sp, #272	; 0x110
 8004978:	4620      	mov	r0, r4
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800497a:	e9cd 6744 	strd	r6, r7, [sp, #272]	; 0x110
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800497e:	f002 fa45 	bl	8006e0c <HAL_DAC_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2800      	cmp	r0, #0
 8004986:	f040 823d 	bne.w	8004e04 <main+0x884>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800498a:	2210      	movs	r2, #16
 800498c:	a944      	add	r1, sp, #272	; 0x110
 800498e:	4620      	mov	r0, r4
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004990:	9345      	str	r3, [sp, #276]	; 0x114
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004992:	f002 fa3b 	bl	8006e0c <HAL_DAC_ConfigChannel>
 8004996:	2800      	cmp	r0, #0
 8004998:	f040 8234 	bne.w	8004e04 <main+0x884>
	hlptim2.Instance = LPTIM2;
 800499c:	48b2      	ldr	r0, [pc, #712]	; (8004c68 <main+0x6e8>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800499e:	2300      	movs	r3, #0
	hlptim2.Instance = LPTIM2;
 80049a0:	4ab2      	ldr	r2, [pc, #712]	; (8004c6c <main+0x6ec>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80049a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80049a6:	6303      	str	r3, [r0, #48]	; 0x30
	hlptim2.Instance = LPTIM2;
 80049a8:	6002      	str	r2, [r0, #0]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80049aa:	2200      	movs	r2, #0
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80049ac:	6146      	str	r6, [r0, #20]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80049ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80049b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e9c0 2308 	strd	r2, r3, [r0, #32]
 80049bc:	2300      	movs	r3, #0
 80049be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049c2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80049c6:	f003 feb5 	bl	8008734 <HAL_LPTIM_Init>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f040 8219 	bne.w	8004e04 <main+0x884>
	htim6.Instance = TIM6;
 80049d2:	4ca7      	ldr	r4, [pc, #668]	; (8004c70 <main+0x6f0>)
	htim6.Init.Period = 8191;
 80049d4:	f641 72ff 	movw	r2, #8191	; 0x1fff
	htim6.Instance = TIM6;
 80049d8:	49a6      	ldr	r1, [pc, #664]	; (8004c74 <main+0x6f4>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049da:	9017      	str	r0, [sp, #92]	; 0x5c
	htim6.Init.Period = 8191;
 80049dc:	e9c4 0202 	strd	r0, r2, [r4, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049e0:	2280      	movs	r2, #128	; 0x80
	htim6.Init.Prescaler = 0;
 80049e2:	e9c4 1000 	strd	r1, r0, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80049e6:	4620      	mov	r0, r4
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049e8:	61a2      	str	r2, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ea:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80049ee:	f006 fcdf 	bl	800b3b0 <HAL_TIM_Base_Init>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2800      	cmp	r0, #0
 80049f6:	f040 8205 	bne.w	8004e04 <main+0x884>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80049fa:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80049fc:	a917      	add	r1, sp, #92	; 0x5c
 80049fe:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a00:	9319      	str	r3, [sp, #100]	; 0x64
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a02:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004a04:	f007 f90e 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	f040 81fa 	bne.w	8004e04 <main+0x884>
	huart3.Instance = USART3;
 8004a10:	4c99      	ldr	r4, [pc, #612]	; (8004c78 <main+0x6f8>)
	huart3.Init.BaudRate = 115200;
 8004a12:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 8004a16:	4999      	ldr	r1, [pc, #612]	; (8004c7c <main+0x6fc>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a18:	4620      	mov	r0, r4
	huart3.Init.BaudRate = 115200;
 8004a1a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004a1e:	220c      	movs	r2, #12
	huart3.Init.Parity = UART_PARITY_NONE;
 8004a20:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a24:	e9c4 2305 	strd	r2, r3, [r4, #20]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a28:	e9c4 3307 	strd	r3, r3, [r4, #28]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a2c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a30:	f007 fe8a 	bl	800c748 <HAL_UART_Init>
 8004a34:	4601      	mov	r1, r0
 8004a36:	2800      	cmp	r0, #0
 8004a38:	f040 81e4 	bne.w	8004e04 <main+0x884>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f007 ff13 	bl	800c868 <HAL_UARTEx_SetTxFifoThreshold>
 8004a42:	4601      	mov	r1, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	f040 81dd 	bne.w	8004e04 <main+0x884>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f007 ff4e 	bl	800c8ec <HAL_UARTEx_SetRxFifoThreshold>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	f040 81d7 	bne.w	8004e04 <main+0x884>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004a56:	4620      	mov	r0, r4
 8004a58:	f007 fee8 	bl	800c82c <HAL_UARTEx_DisableFifoMode>
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f040 81d0 	bne.w	8004e04 <main+0x884>
	MX_USB_DEVICE_Init();
 8004a64:	f009 fc40 	bl	800e2e8 <MX_USB_DEVICE_Init>
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004a68:	2001      	movs	r0, #1
 8004a6a:	2102      	movs	r1, #2
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a6c:	2301      	movs	r3, #1
	htim4.Instance = TIM4;
 8004a6e:	4d84      	ldr	r5, [pc, #528]	; (8004c80 <main+0x700>)
 8004a70:	4a84      	ldr	r2, [pc, #528]	; (8004c84 <main+0x704>)
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a72:	933c      	str	r3, [sp, #240]	; 0xf0
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a74:	9340      	str	r3, [sp, #256]	; 0x100
	sConfig.IC2Filter = 8;
 8004a76:	2308      	movs	r3, #8
	TIM_Encoder_InitTypeDef sConfig = {0};
 8004a78:	943d      	str	r4, [sp, #244]	; 0xf4
	sConfig.IC2Filter = 8;
 8004a7a:	9342      	str	r3, [sp, #264]	; 0x108
	TIM_Encoder_InitTypeDef sConfig = {0};
 8004a7c:	9441      	str	r4, [sp, #260]	; 0x104
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a7e:	9414      	str	r4, [sp, #80]	; 0x50
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a80:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a82:	61ac      	str	r4, [r5, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004a84:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
	sConfig.IC1Filter = 8;
 8004a88:	2008      	movs	r0, #8
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004a90:	a93a      	add	r1, sp, #232	; 0xe8
 8004a92:	4628      	mov	r0, r5
	htim4.Init.Prescaler = 0;
 8004a94:	e9c5 2400 	strd	r2, r4, [r5]
	htim4.Init.Period = 65535;
 8004a98:	e9c5 4602 	strd	r4, r6, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a9c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004aa0:	f006 fdf0 	bl	800b684 <HAL_TIM_Encoder_Init>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f040 81ac 	bne.w	8004e04 <main+0x884>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004aac:	a914      	add	r1, sp, #80	; 0x50
 8004aae:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ab0:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ab2:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ab4:	f007 f8b6 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2800      	cmp	r0, #0
 8004abc:	f040 81a2 	bne.w	8004e04 <main+0x884>
	htim7.Instance = TIM7;
 8004ac0:	4c71      	ldr	r4, [pc, #452]	; (8004c88 <main+0x708>)
	htim7.Init.Period = 8192;
 8004ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	htim7.Instance = TIM7;
 8004ac6:	4971      	ldr	r1, [pc, #452]	; (8004c8c <main+0x70c>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ac8:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004aca:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004acc:	61a3      	str	r3, [r4, #24]
	htim7.Init.Prescaler = 0;
 8004ace:	e9c4 1300 	strd	r1, r3, [r4]
	htim7.Init.Period = 8192;
 8004ad2:	e9c4 3202 	strd	r3, r2, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ad6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004ada:	f006 fc69 	bl	800b3b0 <HAL_TIM_Base_Init>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f040 8190 	bne.w	8004e04 <main+0x884>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ae4:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ae6:	a911      	add	r1, sp, #68	; 0x44
 8004ae8:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aea:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aec:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004aee:	f007 f899 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f040 8185 	bne.w	8004e04 <main+0x884>
	htim7.Instance = TIM7;
 8004afa:	4964      	ldr	r1, [pc, #400]	; (8004c8c <main+0x70c>)
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8004afc:	f247 5230 	movw	r2, #30000	; 0x7530
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b00:	61a3      	str	r3, [r4, #24]
	htim7.Instance = TIM7;
 8004b02:	6021      	str	r1, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8004b04:	60e2      	str	r2, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b06:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f006 fc50 	bl	800b3b0 <HAL_TIM_Base_Init>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f040 8176 	bne.w	8004e04 <main+0x884>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004b18:	a911      	add	r1, sp, #68	; 0x44
 8004b1a:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b1c:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b1e:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004b20:	f007 f880 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f040 816c 	bne.w	8004e04 <main+0x884>
	htim2.Instance = TIM2;
 8004b2c:	4c58      	ldr	r4, [pc, #352]	; (8004c90 <main+0x710>)
 8004b2e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	htim2.Init.Period = 10000;
 8004b32:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b36:	901a      	str	r0, [sp, #104]	; 0x68
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b38:	900e      	str	r0, [sp, #56]	; 0x38
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3a:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b3c:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b3e:	931d      	str	r3, [sp, #116]	; 0x74
	htim2.Init.Prescaler = 0;
 8004b40:	e9c4 6000 	strd	r6, r0, [r4]
	htim2.Init.Period = 10000;
 8004b44:	e9c4 0202 	strd	r0, r2, [r4, #8]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b48:	4620      	mov	r0, r4
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b4a:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b4e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b52:	f006 fc2d 	bl	800b3b0 <HAL_TIM_Base_Init>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f040 8154 	bne.w	8004e04 <main+0x884>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b5c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b60:	a91a      	add	r1, sp, #104	; 0x68
 8004b62:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b64:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b66:	f006 fed1 	bl	800b90c <HAL_TIM_ConfigClockSource>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	f040 814a 	bne.w	8004e04 <main+0x884>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b70:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b72:	a90e      	add	r1, sp, #56	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b74:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b76:	4620      	mov	r0, r4
 8004b78:	f007 f854 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f040 8141 	bne.w	8004e04 <main+0x884>
	htim2.Init.Period = 15000;
 8004b82:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b86:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b88:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8a:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 8004b8c:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8004b8e:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b92:	4620      	mov	r0, r4
 8004b94:	f006 fc0c 	bl	800b3b0 <HAL_TIM_Base_Init>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	f040 8133 	bne.w	8004e04 <main+0x884>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b9e:	a91a      	add	r1, sp, #104	; 0x68
 8004ba0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ba2:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ba4:	f006 feb2 	bl	800b90c <HAL_TIM_ConfigClockSource>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	f040 812a 	bne.w	8004e04 <main+0x884>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bb0:	a90e      	add	r1, sp, #56	; 0x38
 8004bb2:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bb4:	930e      	str	r3, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bb6:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bb8:	f007 f834 	bl	800bc24 <HAL_TIMEx_MasterConfigSynchronization>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f040 8121 	bne.w	8004e04 <main+0x884>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004bc2:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <main+0x714>)
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	03d9      	lsls	r1, r3, #15
 8004bc8:	d426      	bmi.n	8004c18 <main+0x698>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004bca:	4832      	ldr	r0, [pc, #200]	; (8004c94 <main+0x714>)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004bd2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004bd6:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004bda:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004bde:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004be2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8004be6:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004be8:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004bec:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004bee:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8004bf2:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004bf4:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	d1f8      	bne.n	8004bee <main+0x66e>
    } while(sets-- != 0U);
 8004bfc:	3c20      	subs	r4, #32
 8004bfe:	f114 0f20 	cmn.w	r4, #32
 8004c02:	d1f1      	bne.n	8004be8 <main+0x668>
 8004c04:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004c08:	6943      	ldr	r3, [r0, #20]
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0e:	6143      	str	r3, [r0, #20]
 8004c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c14:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8004c18:	f7ff fc8a 	bl	8004530 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004c1c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c24:	481c      	ldr	r0, [pc, #112]	; (8004c98 <main+0x718>)
 8004c26:	f001 fdfd 	bl	8006824 <HAL_ADCEx_Calibration_Start>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f040 80ea 	bne.w	8004e04 <main+0x884>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004c30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c38:	4818      	ldr	r0, [pc, #96]	; (8004c9c <main+0x71c>)
 8004c3a:	f001 fdf3 	bl	8006824 <HAL_ADCEx_Calibration_Start>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f040 80df 	bne.w	8004e04 <main+0x884>
	HAL_Delay(1);
 8004c46:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8004c48:	4f15      	ldr	r7, [pc, #84]	; (8004ca0 <main+0x720>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8004c4a:	f44f 6600 	mov.w	r6, #2048	; 0x800
	AMindex  = LSBindex = 1;
 8004c4e:	4605      	mov	r5, r0
	HAL_Delay(1);
 8004c50:	f000 fdd4 	bl	80057fc <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8004c54:	4621      	mov	r1, r4
 8004c56:	480a      	ldr	r0, [pc, #40]	; (8004c80 <main+0x700>)
 8004c58:	f006 fdf8 	bl	800b84c <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <main+0x724>)
 8004c5e:	e023      	b.n	8004ca8 <main+0x728>
 8004c60:	2400b508 	.word	0x2400b508
 8004c64:	40007400 	.word	0x40007400
 8004c68:	2400b610 	.word	0x2400b610
 8004c6c:	58002400 	.word	0x58002400
 8004c70:	2400b6e0 	.word	0x2400b6e0
 8004c74:	40001000 	.word	0x40001000
 8004c78:	2400b778 	.word	0x2400b778
 8004c7c:	40004800 	.word	0x40004800
 8004c80:	2400b694 	.word	0x2400b694
 8004c84:	40000800 	.word	0x40000800
 8004c88:	2400b72c 	.word	0x2400b72c
 8004c8c:	40001400 	.word	0x40001400
 8004c90:	2400b648 	.word	0x2400b648
 8004c94:	e000ed00 	.word	0xe000ed00
 8004c98:	2400b43c 	.word	0x2400b43c
 8004c9c:	2400b4a0 	.word	0x2400b4a0
 8004ca0:	24007284 	.word	0x24007284
 8004ca4:	2400c9cc 	.word	0x2400c9cc
 8004ca8:	486f      	ldr	r0, [pc, #444]	; (8004e68 <main+0x8e8>)
	LED_GREEN_ON;
 8004caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cae:	462a      	mov	r2, r5
	volume= 0.1;
 8004cb0:	6018      	str	r0, [r3, #0]
	LED_GREEN_ON;
 8004cb2:	486e      	ldr	r0, [pc, #440]	; (8004e6c <main+0x8ec>)
 8004cb4:	f003 fd2c 	bl	8008710 <HAL_GPIO_WritePin>
	LED_GREEN_OFF;
 8004cb8:	4622      	mov	r2, r4
 8004cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cbe:	486b      	ldr	r0, [pc, #428]	; (8004e6c <main+0x8ec>)
 8004cc0:	f003 fd26 	bl	8008710 <HAL_GPIO_WritePin>
	SetFstep(2);
 8004cc4:	2002      	movs	r0, #2
 8004cc6:	f7fc f95b 	bl	8000f80 <SetFstep>
	cwpitch = CWPITCH;
 8004cca:	4a69      	ldr	r2, [pc, #420]	; (8004e70 <main+0x8f0>)
 8004ccc:	4969      	ldr	r1, [pc, #420]	; (8004e74 <main+0x8f4>)
	CarrierEnable(0);
 8004cce:	4620      	mov	r0, r4
	AGC_decay[Fast] = 0.9995f;
 8004cd0:	4b69      	ldr	r3, [pc, #420]	; (8004e78 <main+0x8f8>)
	cwpitch = CWPITCH;
 8004cd2:	6011      	str	r1, [r2, #0]
	os_time = 0;
 8004cd4:	4969      	ldr	r1, [pc, #420]	; (8004e7c <main+0x8fc>)
	meanavg = 0.f;
 8004cd6:	4a6a      	ldr	r2, [pc, #424]	; (8004e80 <main+0x900>)
	os_time = 0;
 8004cd8:	600c      	str	r4, [r1, #0]
	meanavg = 0.f;
 8004cda:	2100      	movs	r1, #0
 8004cdc:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8004cde:	4a69      	ldr	r2, [pc, #420]	; (8004e84 <main+0x904>)
 8004ce0:	4969      	ldr	r1, [pc, #420]	; (8004e88 <main+0x908>)
 8004ce2:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8004ce4:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8004ce8:	4a68      	ldr	r2, [pc, #416]	; (8004e8c <main+0x90c>)
 8004cea:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8004cec:	4a68      	ldr	r2, [pc, #416]	; (8004e90 <main+0x910>)
 8004cee:	8015      	strh	r5, [r2, #0]
 8004cf0:	4a68      	ldr	r2, [pc, #416]	; (8004e94 <main+0x914>)
 8004cf2:	8015      	strh	r5, [r2, #0]
	USBindex = CWindex  = 1;
 8004cf4:	4a68      	ldr	r2, [pc, #416]	; (8004e98 <main+0x918>)
 8004cf6:	8015      	strh	r5, [r2, #0]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <main+0x91c>)
 8004cfa:	8015      	strh	r5, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8004cfc:	4a68      	ldr	r2, [pc, #416]	; (8004ea0 <main+0x920>)
 8004cfe:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8004d00:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8004d04:	4a67      	ldr	r2, [pc, #412]	; (8004ea4 <main+0x924>)
 8004d06:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8004d08:	4a67      	ldr	r2, [pc, #412]	; (8004ea8 <main+0x928>)
 8004d0a:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8004d0c:	4a67      	ldr	r2, [pc, #412]	; (8004eac <main+0x92c>)
 8004d0e:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8004d10:	4b67      	ldr	r3, [pc, #412]	; (8004eb0 <main+0x930>)
 8004d12:	4a68      	ldr	r2, [pc, #416]	; (8004eb4 <main+0x934>)
 8004d14:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8004d16:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <main+0x938>)
 8004d18:	4a68      	ldr	r2, [pc, #416]	; (8004ebc <main+0x93c>)
 8004d1a:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8004d1c:	4a68      	ldr	r2, [pc, #416]	; (8004ec0 <main+0x940>)
 8004d1e:	4b69      	ldr	r3, [pc, #420]	; (8004ec4 <main+0x944>)
 8004d20:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8004d22:	4b69      	ldr	r3, [pc, #420]	; (8004ec8 <main+0x948>)
 8004d24:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8004d26:	f7ff fad7 	bl	80042d8 <CarrierEnable>
	TXSwitch(0);
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff fa70 	bl	8004210 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8004d30:	4a66      	ldr	r2, [pc, #408]	; (8004ecc <main+0x94c>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8004d32:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004d34:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004d38:	4965      	ldr	r1, [pc, #404]	; (8004ed0 <main+0x950>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8004d3a:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004d3c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8004d40:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004d42:	eddf 6a64 	vldr	s13, [pc, #400]	; 8004ed4 <main+0x954>
	__HAL_RCC_PLL2_DISABLE();
 8004d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 8004d4a:	4863      	ldr	r0, [pc, #396]	; (8004ed8 <main+0x958>)
	__HAL_RCC_PLL2_DISABLE();
 8004d4c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004d4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004d50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004d58:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8004e60 <main+0x8e0>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004d5c:	6293      	str	r3, [r2, #40]	; 0x28
 8004d5e:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004d60:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004d64:	3b01      	subs	r3, #1
 8004d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6a:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004d6c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8004d70:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004d72:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004d74:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8004d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d7c:	6013      	str	r3, [r2, #0]
	CWThreshold = 0.01;
 8004d7e:	4a57      	ldr	r2, [pc, #348]	; (8004edc <main+0x95c>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004d80:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <main+0x960>)
	CWThreshold = 0.01;
 8004d82:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8004d84:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8004d88:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8004d8c:	f7fd f910 	bl	8001fb0 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8004d90:	4954      	ldr	r1, [pc, #336]	; (8004ee4 <main+0x964>)
 8004d92:	2204      	movs	r2, #4
 8004d94:	4f54      	ldr	r7, [pc, #336]	; (8004ee8 <main+0x968>)
 8004d96:	4b55      	ldr	r3, [pc, #340]	; (8004eec <main+0x96c>)
 8004d98:	4855      	ldr	r0, [pc, #340]	; (8004ef0 <main+0x970>)
 8004d9a:	e9cd 1600 	strd	r1, r6, [sp]
 8004d9e:	2140      	movs	r1, #64	; 0x40
 8004da0:	f00a f972 	bl	800f088 <arm_fir_decimate_init_f32>
 8004da4:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8004da6:	b100      	cbz	r0, 8004daa <main+0x82a>
 8004da8:	e7fe      	b.n	8004da8 <main+0x828>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8004daa:	4a52      	ldr	r2, [pc, #328]	; (8004ef4 <main+0x974>)
 8004dac:	2140      	movs	r1, #64	; 0x40
 8004dae:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <main+0x96c>)
 8004db0:	4851      	ldr	r0, [pc, #324]	; (8004ef8 <main+0x978>)
 8004db2:	e9cd 2600 	strd	r2, r6, [sp]
 8004db6:	2204      	movs	r2, #4
 8004db8:	f00a f966 	bl	800f088 <arm_fir_decimate_init_f32>
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8004dc0:	bb10      	cbnz	r0, 8004e08 <main+0x888>
	Load_Presets();
 8004dc2:	f7fb ff07 	bl	8000bd4 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f7fb ffea 	bl	8000da0 <Tune_Preset>
	keyerState = IDLE;
 8004dcc:	4b4b      	ldr	r3, [pc, #300]	; (8004efc <main+0x97c>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8004dce:	2710      	movs	r7, #16
	keyer_speed = 15;
 8004dd0:	200f      	movs	r0, #15
	keyerState = IDLE;
 8004dd2:	701c      	strb	r4, [r3, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8004dd4:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <main+0x980>)
 8004dd6:	701f      	strb	r7, [r3, #0]
	keyer_speed = 15;
 8004dd8:	4b4a      	ldr	r3, [pc, #296]	; (8004f04 <main+0x984>)
 8004dda:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8004ddc:	f7fb fc5a 	bl	8000694 <loadWPM>
	keyer_mode = 1; //->  iambic
 8004de0:	4b49      	ldr	r3, [pc, #292]	; (8004f08 <main+0x988>)
	txdelay = 10;
 8004de2:	210a      	movs	r1, #10
 8004de4:	4a49      	ldr	r2, [pc, #292]	; (8004f0c <main+0x98c>)
	keyer_mode = 1; //->  iambic
 8004de6:	701d      	strb	r5, [r3, #0]
	keyer_swap = 0; //->  DI/DAH
 8004de8:	4b49      	ldr	r3, [pc, #292]	; (8004f10 <main+0x990>)
	txdelay = 10;
 8004dea:	7011      	strb	r1, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 8004dec:	701c      	strb	r4, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 8004dee:	4b49      	ldr	r3, [pc, #292]	; (8004f14 <main+0x994>)
 8004df0:	601e      	str	r6, [r3, #0]
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8004df2:	f7fe fb0f 	bl	8003414 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8004df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfa:	4947      	ldr	r1, [pc, #284]	; (8004f18 <main+0x998>)
 8004dfc:	4847      	ldr	r0, [pc, #284]	; (8004f1c <main+0x99c>)
 8004dfe:	f001 fd63 	bl	80068c8 <HAL_ADCEx_MultiModeStart_DMA>
 8004e02:	b110      	cbz	r0, 8004e0a <main+0x88a>
		Error_Handler();
 8004e04:	f7ff fac6 	bl	8004394 <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8004e08:	e7fe      	b.n	8004e08 <main+0x888>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8004e0a:	4845      	ldr	r0, [pc, #276]	; (8004f20 <main+0x9a0>)
 8004e0c:	f006 fbde 	bl	800b5cc <HAL_TIM_Base_Start_IT>
 8004e10:	4604      	mov	r4, r0
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d1f6      	bne.n	8004e04 <main+0x884>
	HAL_TIM_Base_Start(&htim6);
 8004e16:	4843      	ldr	r0, [pc, #268]	; (8004f24 <main+0x9a4>)
 8004e18:	f006 fb80 	bl	800b51c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8004e1c:	4842      	ldr	r0, [pc, #264]	; (8004f28 <main+0x9a8>)
 8004e1e:	f006 fb7d 	bl	800b51c <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004e22:	4621      	mov	r1, r4
 8004e24:	4841      	ldr	r0, [pc, #260]	; (8004f2c <main+0x9ac>)
 8004e26:	f001 fec7 	bl	8006bb8 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8004e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2e:	4a40      	ldr	r2, [pc, #256]	; (8004f30 <main+0x9b0>)
 8004e30:	4621      	mov	r1, r4
 8004e32:	483e      	ldr	r0, [pc, #248]	; (8004f2c <main+0x9ac>)
 8004e34:	9400      	str	r4, [sp, #0]
 8004e36:	f001 fef3 	bl	8006c20 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fcf6 	bl	800582c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8004e40:	4639      	mov	r1, r7
 8004e42:	483a      	ldr	r0, [pc, #232]	; (8004f2c <main+0x9ac>)
 8004e44:	f001 feb8 	bl	8006bb8 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8004e48:	4623      	mov	r3, r4
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	4837      	ldr	r0, [pc, #220]	; (8004f2c <main+0x9ac>)
 8004e50:	f001 ff72 	bl	8006d38 <HAL_DAC_SetValue>
		UserInput();
 8004e54:	f7fe feac 	bl	8003bb0 <UserInput>
		HAL_Delay(100);
 8004e58:	2064      	movs	r0, #100	; 0x64
 8004e5a:	f000 fccf 	bl	80057fc <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8004e5e:	e7f9      	b.n	8004e54 <main+0x8d4>
 8004e60:	8f04fefd 	.word	0x8f04fefd
 8004e64:	3feffff9 	.word	0x3feffff9
 8004e68:	3dcccccd 	.word	0x3dcccccd
 8004e6c:	58020400 	.word	0x58020400
 8004e70:	24008c34 	.word	0x24008c34
 8004e74:	44228000 	.word	0x44228000
 8004e78:	24001808 	.word	0x24001808
 8004e7c:	2400b83c 	.word	0x2400b83c
 8004e80:	2400b818 	.word	0x2400b818
 8004e84:	2400727c 	.word	0x2400727c
 8004e88:	3f7cac08 	.word	0x3f7cac08
 8004e8c:	24007272 	.word	0x24007272
 8004e90:	24007268 	.word	0x24007268
 8004e94:	24001810 	.word	0x24001810
 8004e98:	24002028 	.word	0x24002028
 8004e9c:	240072f0 	.word	0x240072f0
 8004ea0:	24008c30 	.word	0x24008c30
 8004ea4:	24008c20 	.word	0x24008c20
 8004ea8:	3f7fdf3b 	.word	0x3f7fdf3b
 8004eac:	3f7ffcb9 	.word	0x3f7ffcb9
 8004eb0:	24006254 	.word	0x24006254
 8004eb4:	001e0002 	.word	0x001e0002
 8004eb8:	24001814 	.word	0x24001814
 8004ebc:	3949539c 	.word	0x3949539c
 8004ec0:	3ca3d70a 	.word	0x3ca3d70a
 8004ec4:	2400b840 	.word	0x2400b840
 8004ec8:	4af42400 	.word	0x4af42400
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	01012e00 	.word	0x01012e00
 8004ed4:	3b800000 	.word	0x3b800000
 8004ed8:	24002024 	.word	0x24002024
 8004edc:	3c23d70a 	.word	0x3c23d70a
 8004ee0:	24002020 	.word	0x24002020
 8004ee4:	24004140 	.word	0x24004140
 8004ee8:	24008c24 	.word	0x24008c24
 8004eec:	2400020c 	.word	0x2400020c
 8004ef0:	24007298 	.word	0x24007298
 8004ef4:	24002044 	.word	0x24002044
 8004ef8:	2400728c 	.word	0x2400728c
 8004efc:	2400b809 	.word	0x2400b809
 8004f00:	2400b808 	.word	0x2400b808
 8004f04:	2400b80c 	.word	0x2400b80c
 8004f08:	2400b80a 	.word	0x2400b80a
 8004f0c:	2400c9c9 	.word	0x2400c9c9
 8004f10:	2400b810 	.word	0x2400b810
 8004f14:	240072e8 	.word	0x240072e8
 8004f18:	24008420 	.word	0x24008420
 8004f1c:	2400b43c 	.word	0x2400b43c
 8004f20:	2400b72c 	.word	0x2400b72c
 8004f24:	2400b6e0 	.word	0x2400b6e0
 8004f28:	2400b648 	.word	0x2400b648
 8004f2c:	2400b508 	.word	0x2400b508
 8004f30:	24001820 	.word	0x24001820

08004f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f36:	4c14      	ldr	r4, [pc, #80]	; (8004f88 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8004f38:	2102      	movs	r1, #2
{
 8004f3a:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8004f3c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8004f42:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f46:	430b      	orrs	r3, r1
 8004f48:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8004f4c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004f50:	400b      	ands	r3, r1
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8004f56:	f001 fdb7 	bl	8006ac8 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8004f5a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8004f5e:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8004f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f64:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8004f68:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8004f74:	f000 fc5a 	bl	800582c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8004f78:	f000 fc6c 	bl	8005854 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8004f7c:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f7e:	b002      	add	sp, #8
 8004f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8004f84:	f000 bc5c 	b.w	8005840 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8004f88:	58024400 	.word	0x58024400

08004f8c <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004f8c:	494c      	ldr	r1, [pc, #304]	; (80050c0 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8004f90:	6802      	ldr	r2, [r0, #0]
{
 8004f92:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8004f94:	428a      	cmp	r2, r1
{
 8004f96:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f98:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004f9c:	9306      	str	r3, [sp, #24]
 8004f9e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8004fa2:	d029      	beq.n	8004ff8 <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004fa4:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_ADC_MspInit+0x138>)
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d001      	beq.n	8004fae <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004faa:	b00a      	add	sp, #40	; 0x28
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004fae:	4a46      	ldr	r2, [pc, #280]	; (80050c8 <HAL_ADC_MspInit+0x13c>)
 8004fb0:	6813      	ldr	r3, [r2, #0]
 8004fb2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004fb4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004fb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004fb8:	d070      	beq.n	800509c <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fba:	4b44      	ldr	r3, [pc, #272]	; (80050cc <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004fbc:	2402      	movs	r4, #2
 8004fbe:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc6:	4842      	ldr	r0, [pc, #264]	; (80050d0 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc8:	f042 0202 	orr.w	r2, r2, #2
 8004fcc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	9303      	str	r3, [sp, #12]
 8004fda:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004fdc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe0:	f003 fa56 	bl	8008490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2012      	movs	r0, #18
 8004fe8:	4611      	mov	r1, r2
 8004fea:	f001 fd6d 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004fee:	2012      	movs	r0, #18
 8004ff0:	f001 fda8 	bl	8006b44 <HAL_NVIC_EnableIRQ>
}
 8004ff4:	b00a      	add	sp, #40	; 0x28
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004ff8:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <HAL_ADC_MspInit+0x13c>)
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005000:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005002:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005004:	d03c      	beq.n	8005080 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005008:	a904      	add	r1, sp, #16
 800500a:	4831      	ldr	r0, [pc, #196]	; (80050d0 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8005010:	4d30      	ldr	r5, [pc, #192]	; (80050d4 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005012:	f042 0202 	orr.w	r2, r2, #2
 8005016:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800501a:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005026:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005028:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800502a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800502e:	f003 fa2f 	bl	8008490 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8005032:	4929      	ldr	r1, [pc, #164]	; (80050d8 <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005034:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005036:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005038:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800503a:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800503c:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005044:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005048:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800504c:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005054:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005058:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800505c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005060:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005062:	f002 f87d 	bl	8007160 <HAL_DMA_Init>
 8005066:	bb38      	cbnz	r0, 80050b8 <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005068:	2200      	movs	r2, #0
 800506a:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800506c:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800506e:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005070:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005072:	f001 fd29 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005076:	2012      	movs	r0, #18
 8005078:	f001 fd64 	bl	8006b44 <HAL_NVIC_EnableIRQ>
}
 800507c:	b00a      	add	sp, #40	; 0x28
 800507e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_ADC_MspInit+0x140>)
 8005082:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005086:	f042 0220 	orr.w	r2, r2, #32
 800508a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800508e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	9b00      	ldr	r3, [sp, #0]
 800509a:	e7b4      	b.n	8005006 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_ADC_MspInit+0x140>)
 800509e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80050a2:	f042 0220 	orr.w	r2, r2, #32
 80050a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80050aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	9302      	str	r3, [sp, #8]
 80050b4:	9b02      	ldr	r3, [sp, #8]
 80050b6:	e780      	b.n	8004fba <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 80050b8:	f7ff f96c 	bl	8004394 <Error_Handler>
 80050bc:	e7d4      	b.n	8005068 <HAL_ADC_MspInit+0xdc>
 80050be:	bf00      	nop
 80050c0:	40022000 	.word	0x40022000
 80050c4:	40022100 	.word	0x40022100
 80050c8:	2400c9d0 	.word	0x2400c9d0
 80050cc:	58024400 	.word	0x58024400
 80050d0:	58020400 	.word	0x58020400
 80050d4:	2400b51c 	.word	0x2400b51c
 80050d8:	40020010 	.word	0x40020010

080050dc <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <HAL_DAC_MspInit+0xb4>)
 80050de:	6802      	ldr	r2, [r0, #0]
{
 80050e0:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 80050e2:	429a      	cmp	r2, r3
{
 80050e4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e6:	f04f 0400 	mov.w	r4, #0
 80050ea:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80050ee:	9404      	str	r4, [sp, #16]
 80050f0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 80050f4:	d001      	beq.n	80050fa <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80050f6:	b008      	add	sp, #32
 80050f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <HAL_DAC_MspInit+0xb8>)
 80050fc:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fe:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005100:	4e25      	ldr	r6, [pc, #148]	; (8005198 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8005102:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005106:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800510a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800510e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005112:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005116:	9200      	str	r2, [sp, #0]
 8005118:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005126:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005132:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005134:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005136:	4819      	ldr	r0, [pc, #100]	; (800519c <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005138:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800513c:	f003 f9a8 	bl	8008490 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005140:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8005142:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005144:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8005146:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005148:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800514a:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800514c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005150:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005152:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005156:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800515c:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800515e:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005160:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005162:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800516a:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800516c:	f001 fff8 	bl	8007160 <HAL_DMA_Init>
 8005170:	b958      	cbnz	r0, 800518a <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005176:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005178:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800517a:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800517c:	f001 fca4 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005180:	2036      	movs	r0, #54	; 0x36
 8005182:	f001 fcdf 	bl	8006b44 <HAL_NVIC_EnableIRQ>
}
 8005186:	b008      	add	sp, #32
 8005188:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800518a:	f7ff f903 	bl	8004394 <Error_Handler>
 800518e:	e7f0      	b.n	8005172 <HAL_DAC_MspInit+0x96>
 8005190:	40007400 	.word	0x40007400
 8005194:	58024400 	.word	0x58024400
 8005198:	2400b594 	.word	0x2400b594
 800519c:	58020000 	.word	0x58020000
 80051a0:	40020028 	.word	0x40020028
 80051a4:	00000000 	.word	0x00000000

080051a8 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051aa:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 80051ac:	6801      	ldr	r1, [r0, #0]
{
 80051ae:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 80051b0:	4291      	cmp	r1, r2
{
 80051b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80051bc:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 80051be:	d001      	beq.n	80051c4 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80051c0:	b008      	add	sp, #32
 80051c2:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80051c6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	a902      	add	r1, sp, #8
 80051ca:	4815      	ldr	r0, [pc, #84]	; (8005220 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80051cc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80051d8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80051dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80051e8:	f042 0202 	orr.w	r2, r2, #2
 80051ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80051f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80051f4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051f6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051fa:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8005210 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005202:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005206:	f003 f943 	bl	8008490 <HAL_GPIO_Init>
}
 800520a:	b008      	add	sp, #32
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	00000400 	.word	0x00000400
 8005214:	00000002 	.word	0x00000002
 8005218:	58002400 	.word	0x58002400
 800521c:	58024400 	.word	0x58024400
 8005220:	58020400 	.word	0x58020400

08005224 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8005224:	6803      	ldr	r3, [r0, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800522a:	b510      	push	{r4, lr}
 800522c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800522e:	d007      	beq.n	8005240 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_TIM_Base_MspInit+0xac>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01c      	beq.n	8005270 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8005236:	4a27      	ldr	r2, [pc, #156]	; (80052d4 <HAL_TIM_Base_MspInit+0xb0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d031      	beq.n	80052a0 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800523c:	b004      	add	sp, #16
 800523e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8005242:	201c      	movs	r0, #28
 8005244:	2200      	movs	r2, #0
 8005246:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005248:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800524c:	f044 0401 	orr.w	r4, r4, #1
 8005250:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8005260:	f001 fc32 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005264:	201c      	movs	r0, #28
}
 8005266:	b004      	add	sp, #16
 8005268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800526c:	f001 bc6a 	b.w	8006b44 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005272:	2036      	movs	r0, #54	; 0x36
 8005274:	2200      	movs	r2, #0
 8005276:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005278:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800527c:	f044 0410 	orr.w	r4, r4, #16
 8005280:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8005284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	9302      	str	r3, [sp, #8]
 800528e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005290:	f001 fc1a 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005294:	2036      	movs	r0, #54	; 0x36
}
 8005296:	b004      	add	sp, #16
 8005298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800529c:	f001 bc52 	b.w	8006b44 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052a0:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80052a2:	2037      	movs	r0, #55	; 0x37
 80052a4:	2200      	movs	r2, #0
 80052a6:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052a8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80052ac:	f044 0420 	orr.w	r4, r4, #32
 80052b0:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80052b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	9303      	str	r3, [sp, #12]
 80052be:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80052c0:	f001 fc02 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052c4:	2037      	movs	r0, #55	; 0x37
}
 80052c6:	b004      	add	sp, #16
 80052c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052cc:	f001 bc3a 	b.w	8006b44 <HAL_NVIC_EnableIRQ>
 80052d0:	40001000 	.word	0x40001000
 80052d4:	40001400 	.word	0x40001400
 80052d8:	58024400 	.word	0x58024400
 80052dc:	00000000 	.word	0x00000000

080052e0 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e2:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80052e4:	6801      	ldr	r1, [r0, #0]
{
 80052e6:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 80052e8:	4291      	cmp	r1, r2
{
 80052ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80052f4:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 80052f6:	d002      	beq.n	80052fe <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80052f8:	b009      	add	sp, #36	; 0x24
 80052fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052fe:	4b17      	ldr	r3, [pc, #92]	; (800535c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005300:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005302:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005304:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005308:	f042 0204 	orr.w	r2, r2, #4
 800530c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8005310:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8005314:	f002 0204 	and.w	r2, r2, #4
 8005318:	9200      	str	r2, [sp, #0]
 800531a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800531c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005320:	f042 0208 	orr.w	r2, r2, #8
 8005324:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005328:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800532a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800532e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005330:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005334:	480a      	ldr	r0, [pc, #40]	; (8005360 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005336:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800533c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8005350 <HAL_TIM_Encoder_MspInit+0x70>
 8005340:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005344:	f003 f8a4 	bl	8008490 <HAL_GPIO_Init>
}
 8005348:	b009      	add	sp, #36	; 0x24
 800534a:	f85d fb04 	ldr.w	pc, [sp], #4
 800534e:	bf00      	nop
 8005350:	00003000 	.word	0x00003000
 8005354:	00000002 	.word	0x00000002
 8005358:	40000800 	.word	0x40000800
 800535c:	58024400 	.word	0x58024400
 8005360:	58020c00 	.word	0x58020c00

08005364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005364:	b5d0      	push	{r4, r6, r7, lr}
 8005366:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	2100      	movs	r1, #0
{
 800536a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800536c:	22bc      	movs	r2, #188	; 0xbc
 800536e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	9108      	str	r1, [sp, #32]
 8005372:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005376:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800537a:	f00a fc25 	bl	800fbc8 <memset>
  if(huart->Instance==USART3)
 800537e:	4b2d      	ldr	r3, [pc, #180]	; (8005434 <HAL_UART_MspInit+0xd0>)
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d001      	beq.n	800538a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005386:	b038      	add	sp, #224	; 0xe0
 8005388:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800538a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800538c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800538e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005390:	f004 ff32 	bl	800a1f8 <HAL_RCCEx_PeriphCLKConfig>
 8005394:	2800      	cmp	r0, #0
 8005396:	d149      	bne.n	800542c <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005398:	4b27      	ldr	r3, [pc, #156]	; (8005438 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800539a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800539e:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053a0:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80053a2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80053a6:	2600      	movs	r6, #0
 80053a8:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80053aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053ae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80053b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80053b6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80053ba:	9201      	str	r2, [sp, #4]
 80053bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053c2:	f042 0202 	orr.w	r2, r2, #2
 80053c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053ce:	f002 0202 	and.w	r2, r2, #2
 80053d2:	9202      	str	r2, [sp, #8]
 80053d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053da:	f042 0208 	orr.w	r2, r2, #8
 80053de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053e6:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053e8:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80053ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053f2:	a904      	add	r1, sp, #16
 80053f4:	4811      	ldr	r0, [pc, #68]	; (800543c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80053f8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fc:	f003 f848 	bl	8008490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005400:	2302      	movs	r3, #2
 8005402:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005406:	a904      	add	r1, sp, #16
 8005408:	480d      	ldr	r0, [pc, #52]	; (8005440 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800540a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800540c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005410:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005414:	f003 f83c 	bl	8008490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005418:	2200      	movs	r2, #0
 800541a:	2101      	movs	r1, #1
 800541c:	2027      	movs	r0, #39	; 0x27
 800541e:	f001 fb53 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005422:	2027      	movs	r0, #39	; 0x27
 8005424:	f001 fb8e 	bl	8006b44 <HAL_NVIC_EnableIRQ>
}
 8005428:	b038      	add	sp, #224	; 0xe0
 800542a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800542c:	f7fe ffb2 	bl	8004394 <Error_Handler>
 8005430:	e7b2      	b.n	8005398 <HAL_UART_MspInit+0x34>
 8005432:	bf00      	nop
 8005434:	40004800 	.word	0x40004800
 8005438:	58024400 	.word	0x58024400
 800543c:	58020400 	.word	0x58020400
 8005440:	58020c00 	.word	0x58020c00

08005444 <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop

08005448 <HardFault_Handler>:
void HardFault_Handler(void)
{
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8005448:	e7fe      	b.n	8005448 <HardFault_Handler>
 800544a:	bf00      	nop

0800544c <MemManage_Handler>:
void MemManage_Handler(void)
{
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 800544c:	e7fe      	b.n	800544c <MemManage_Handler>
 800544e:	bf00      	nop

08005450 <BusFault_Handler>:
void BusFault_Handler(void)
{
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8005450:	e7fe      	b.n	8005450 <BusFault_Handler>
 8005452:	bf00      	nop

08005454 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8005454:	e7fe      	b.n	8005454 <UsageFault_Handler>
 8005456:	bf00      	nop

08005458 <SVC_Handler>:
{
	/* USER CODE BEGIN SVCall_IRQn 0 */

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8005458:	f000 b966 	b.w	8005728 <ADC3_IRQHandler>

0800545c <DebugMon_Handler>:
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop

08005460 <PendSV_Handler>:
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop

08005464 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8005464:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005466:	f000 f9b7 	bl	80057d8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <SysTick_Handler+0x3c>)
 800546c:	490d      	ldr	r1, [pc, #52]	; (80054a4 <SysTick_Handler+0x40>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <SysTick_Handler+0x44>)
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800547a:	d310      	bcc.n	800549e <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 800547c:	490b      	ldr	r1, [pc, #44]	; (80054ac <SysTick_Handler+0x48>)
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <SysTick_Handler+0x4c>)
 8005480:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 8005482:	480c      	ldr	r0, [pc, #48]	; (80054b4 <SysTick_Handler+0x50>)
		SystemSeconds++;
 8005484:	3301      	adds	r3, #1
 8005486:	fb03 f202 	mul.w	r2, r3, r2
 800548a:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 800548c:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 8005490:	d305      	bcc.n	800549e <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 8005492:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 8005494:	2000      	movs	r0, #0
			SystemMinutes++;
 8005496:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 8005498:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 800549a:	3301      	adds	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
		}
	}

	/* USER CODE END SysTick_IRQn 1 */
}
 800549e:	bd08      	pop	{r3, pc}
 80054a0:	2400c9d8 	.word	0x2400c9d8
 80054a4:	26e978d5 	.word	0x26e978d5
 80054a8:	00418937 	.word	0x00418937
 80054ac:	240072d4 	.word	0x240072d4
 80054b0:	eeeeeeef 	.word	0xeeeeeeef
 80054b4:	04444444 	.word	0x04444444
 80054b8:	240072d0 	.word	0x240072d0

080054bc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <DMA1_Stream0_IRQHandler+0x8>)
 80054be:	f002 bc97 	b.w	8007df0 <HAL_DMA_IRQHandler>
 80054c2:	bf00      	nop
 80054c4:	2400b51c 	.word	0x2400b51c

080054c8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <DMA1_Stream1_IRQHandler+0x8>)
 80054ca:	f002 bc91 	b.w	8007df0 <HAL_DMA_IRQHandler>
 80054ce:	bf00      	nop
 80054d0:	2400b594 	.word	0x2400b594

080054d4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80054d4:	4804      	ldr	r0, [pc, #16]	; (80054e8 <ADC_IRQHandler+0x14>)
{
 80054d6:	b508      	push	{r3, lr}
	HAL_ADC_IRQHandler(&hadc1);
 80054d8:	f000 f9dc 	bl	8005894 <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc2);
 80054dc:	4803      	ldr	r0, [pc, #12]	; (80054ec <ADC_IRQHandler+0x18>)
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 80054de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_IRQHandler(&hadc2);
 80054e2:	f000 b9d7 	b.w	8005894 <HAL_ADC_IRQHandler>
 80054e6:	bf00      	nop
 80054e8:	2400b43c 	.word	0x2400b43c
 80054ec:	2400b4a0 	.word	0x2400b4a0

080054f0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <TIM2_IRQHandler+0x8>)
 80054f2:	f006 badf 	b.w	800bab4 <HAL_TIM_IRQHandler>
 80054f6:	bf00      	nop
 80054f8:	2400b648 	.word	0x2400b648

080054fc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <USART3_IRQHandler+0x8>)
 80054fe:	f006 bc01 	b.w	800bd04 <HAL_UART_IRQHandler>
 8005502:	bf00      	nop
 8005504:	2400b778 	.word	0x2400b778

08005508 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8005508:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800550c:	f003 b904 	b.w	8008718 <HAL_GPIO_EXTI_IRQHandler>

08005510 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_DAC_IRQHandler(&hdac1);
 8005510:	4804      	ldr	r0, [pc, #16]	; (8005524 <TIM6_DAC_IRQHandler+0x14>)
{
 8005512:	b508      	push	{r3, lr}
	HAL_DAC_IRQHandler(&hdac1);
 8005514:	f001 fc46 	bl	8006da4 <HAL_DAC_IRQHandler>
	HAL_TIM_IRQHandler(&htim6);
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <TIM6_DAC_IRQHandler+0x18>)
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800551a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_IRQHandler(&htim6);
 800551e:	f006 bac9 	b.w	800bab4 <HAL_TIM_IRQHandler>
 8005522:	bf00      	nop
 8005524:	2400b508 	.word	0x2400b508
 8005528:	2400b6e0 	.word	0x2400b6e0

0800552c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <TIM7_IRQHandler+0x8>)
 800552e:	f006 bac1 	b.w	800bab4 <HAL_TIM_IRQHandler>
 8005532:	bf00      	nop
 8005534:	2400b72c 	.word	0x2400b72c

08005538 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <OTG_FS_IRQHandler+0x8>)
 800553a:	f003 ba25 	b.w	8008988 <HAL_PCD_IRQHandler>
 800553e:	bf00      	nop
 8005540:	2400deb0 	.word	0x2400deb0

08005544 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005544:	2001      	movs	r0, #1
 8005546:	4770      	bx	lr

08005548 <_kill>:

int _kill(int pid, int sig)
{
 8005548:	b508      	push	{r3, lr}
	errno = EINVAL;
 800554a:	f00a fb05 	bl	800fb58 <__errno>
 800554e:	2216      	movs	r2, #22
 8005550:	4603      	mov	r3, r0
	return -1;
}
 8005552:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	bd08      	pop	{r3, pc}
 800555a:	bf00      	nop

0800555c <_exit>:

void _exit (int status)
{
 800555c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800555e:	f00a fafb 	bl	800fb58 <__errno>
 8005562:	2316      	movs	r3, #22
 8005564:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005566:	e7fe      	b.n	8005566 <_exit+0xa>

08005568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005568:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800556a:	1e16      	subs	r6, r2, #0
 800556c:	dd07      	ble.n	800557e <_read+0x16>
 800556e:	460c      	mov	r4, r1
 8005570:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005572:	f3af 8000 	nop.w
 8005576:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800557a:	42a5      	cmp	r5, r4
 800557c:	d1f9      	bne.n	8005572 <_read+0xa>
	}

return len;
}
 800557e:	4630      	mov	r0, r6
 8005580:	bd70      	pop	{r4, r5, r6, pc}
 8005582:	bf00      	nop

08005584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005584:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005586:	1e16      	subs	r6, r2, #0
 8005588:	dd07      	ble.n	800559a <_write+0x16>
 800558a:	460c      	mov	r4, r1
 800558c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800558e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005592:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005596:	42ac      	cmp	r4, r5
 8005598:	d1f9      	bne.n	800558e <_write+0xa>
	}
	return len;
}
 800559a:	4630      	mov	r0, r6
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	bf00      	nop

080055a0 <_close>:

int _close(int file)
{
	return -1;
}
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop

080055a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80055a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80055ac:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80055ae:	604b      	str	r3, [r1, #4]
}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80055b4:	2001      	movs	r0, #1
 80055b6:	4770      	bx	lr

080055b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80055b8:	2000      	movs	r0, #0
 80055ba:	4770      	bx	lr

080055bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055bc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055be:	4c0d      	ldr	r4, [pc, #52]	; (80055f4 <_sbrk+0x38>)
{
 80055c0:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055c2:	490d      	ldr	r1, [pc, #52]	; (80055f8 <_sbrk+0x3c>)
 80055c4:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80055c6:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055c8:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80055ca:	b12a      	cbz	r2, 80055d8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055cc:	4413      	add	r3, r2
 80055ce:	428b      	cmp	r3, r1
 80055d0:	d808      	bhi.n	80055e4 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80055d2:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80055d4:	6023      	str	r3, [r4, #0]
}
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80055d8:	4809      	ldr	r0, [pc, #36]	; (8005600 <_sbrk+0x44>)
 80055da:	4602      	mov	r2, r0
 80055dc:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80055de:	4413      	add	r3, r2
 80055e0:	428b      	cmp	r3, r1
 80055e2:	d9f6      	bls.n	80055d2 <_sbrk+0x16>
    errno = ENOMEM;
 80055e4:	f00a fab8 	bl	800fb58 <__errno>
 80055e8:	230c      	movs	r3, #12
    return (void *)-1;
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80055ee:	6003      	str	r3, [r0, #0]
}
 80055f0:	4610      	mov	r0, r2
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	2400c9d4 	.word	0x2400c9d4
 80055f8:	24080000 	.word	0x24080000
 80055fc:	00000400 	.word	0x00000400
 8005600:	2400e4e8 	.word	0x2400e4e8

08005604 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005604:	4929      	ldr	r1, [pc, #164]	; (80056ac <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005606:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005608:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800560c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8005610:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	2b06      	cmp	r3, #6
 800561e:	d805      	bhi.n	800562c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	f023 030f 	bic.w	r3, r3, #15
 8005626:	f043 0307 	orr.w	r3, r3, #7
 800562a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800562c:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800562e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005630:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8005632:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005634:	481e      	ldr	r0, [pc, #120]	; (80056b0 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8005636:	f041 0101 	orr.w	r1, r1, #1
 800563a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800563c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	400a      	ands	r2, r1
 8005642:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005644:	6803      	ldr	r3, [r0, #0]
 8005646:	071b      	lsls	r3, r3, #28
 8005648:	d505      	bpl.n	8005656 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800564a:	6803      	ldr	r3, [r0, #0]
 800564c:	f023 030f 	bic.w	r3, r3, #15
 8005650:	f043 0307 	orr.w	r3, r3, #7
 8005654:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <SystemInit+0xb0>)
 8005658:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800565a:	4918      	ldr	r1, [pc, #96]	; (80056bc <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 800565c:	4c18      	ldr	r4, [pc, #96]	; (80056c0 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 800565e:	4819      	ldr	r0, [pc, #100]	; (80056c4 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8005660:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005662:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005664:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005666:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8005668:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800566a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800566c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800566e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005672:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005674:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005676:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005678:	4c13      	ldr	r4, [pc, #76]	; (80056c8 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 800567a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800567e:	4913      	ldr	r1, [pc, #76]	; (80056cc <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8005680:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8005682:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	4019      	ands	r1, r3
 8005688:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800568c:	d203      	bcs.n	8005696 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <SystemInit+0xcc>)
 8005690:	2201      	movs	r2, #1
 8005692:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005696:	490f      	ldr	r1, [pc, #60]	; (80056d4 <SystemInit+0xd0>)
 8005698:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <SystemInit+0xa8>)
 800569e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80056a2:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80056a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	4770      	bx	lr
 80056ac:	e000ed00 	.word	0xe000ed00
 80056b0:	52002000 	.word	0x52002000
 80056b4:	58024400 	.word	0x58024400
 80056b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80056bc:	01010280 	.word	0x01010280
 80056c0:	02020200 	.word	0x02020200
 80056c4:	01ff0000 	.word	0x01ff0000
 80056c8:	5c001000 	.word	0x5c001000
 80056cc:	ffff0000 	.word	0xffff0000
 80056d0:	51008000 	.word	0x51008000
 80056d4:	52004000 	.word	0x52004000

080056d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80056d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005710 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80056dc:	f7ff ff92 	bl	8005604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056e2:	e003      	b.n	80056ec <LoopCopyDataInit>

080056e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80056e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056ea:	3104      	adds	r1, #4

080056ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056ec:	480a      	ldr	r0, [pc, #40]	; (8005718 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80056f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056f4:	d3f6      	bcc.n	80056e4 <CopyDataInit>
  ldr  r2, =_sbss
 80056f6:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80056f8:	e002      	b.n	8005700 <LoopFillZerobss>

080056fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056fc:	f842 3b04 	str.w	r3, [r2], #4

08005700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8005702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005704:	d3f9      	bcc.n	80056fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005706:	f00a fa2d 	bl	800fb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800570a:	f7fe ff39 	bl	8004580 <main>
  bx  lr    
 800570e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005710:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8005714:	0801e748 	.word	0x0801e748
  ldr  r0, =_sdata
 8005718:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800571c:	24000668 	.word	0x24000668
  ldr  r2, =_sbss
 8005720:	24000680 	.word	0x24000680
  ldr  r3, = _ebss
 8005724:	2400e4e8 	.word	0x2400e4e8

08005728 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005728:	e7fe      	b.n	8005728 <ADC3_IRQHandler>
	...

0800572c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <HAL_InitTick+0x40>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b90b      	cbnz	r3, 8005736 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8005732:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005734:	4770      	bx	lr
{
 8005736:	b510      	push	{r4, lr}
 8005738:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800573a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800573e:	4a0c      	ldr	r2, [pc, #48]	; (8005770 <HAL_InitTick+0x44>)
 8005740:	fbb0 f3f3 	udiv	r3, r0, r3
 8005744:	6810      	ldr	r0, [r2, #0]
 8005746:	fbb0 f0f3 	udiv	r0, r0, r3
 800574a:	f001 fa09 	bl	8006b60 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800574e:	2c0f      	cmp	r4, #15
 8005750:	d800      	bhi.n	8005754 <HAL_InitTick+0x28>
 8005752:	b108      	cbz	r0, 8005758 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8005754:	2001      	movs	r0, #1
}
 8005756:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005758:	2200      	movs	r2, #0
 800575a:	4621      	mov	r1, r4
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	f001 f9b2 	bl	8006ac8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005764:	4b03      	ldr	r3, [pc, #12]	; (8005774 <HAL_InitTick+0x48>)
 8005766:	2000      	movs	r0, #0
 8005768:	601c      	str	r4, [r3, #0]
}
 800576a:	bd10      	pop	{r4, pc}
 800576c:	24000314 	.word	0x24000314
 8005770:	2400030c 	.word	0x2400030c
 8005774:	24000318 	.word	0x24000318

08005778 <HAL_Init>:
{
 8005778:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800577a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800577c:	4c12      	ldr	r4, [pc, #72]	; (80057c8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800577e:	f001 f991 	bl	8006aa4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005782:	f004 f9ad 	bl	8009ae0 <HAL_RCC_GetSysClockFreq>
 8005786:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_Init+0x54>)
 8005788:	4911      	ldr	r1, [pc, #68]	; (80057d0 <HAL_Init+0x58>)
 800578a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800578c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800578e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005792:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005796:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005798:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800579a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800579e:	490d      	ldr	r1, [pc, #52]	; (80057d4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057a0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057a4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057a6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80057aa:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057ac:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057ae:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057b0:	f7ff ffbc 	bl	800572c <HAL_InitTick>
 80057b4:	b110      	cbz	r0, 80057bc <HAL_Init+0x44>
    return HAL_ERROR;
 80057b6:	2401      	movs	r4, #1
}
 80057b8:	4620      	mov	r0, r4
 80057ba:	bd10      	pop	{r4, pc}
 80057bc:	4604      	mov	r4, r0
  HAL_MspInit();
 80057be:	f7ff fbb9 	bl	8004f34 <HAL_MspInit>
}
 80057c2:	4620      	mov	r0, r4
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	bf00      	nop
 80057c8:	24000310 	.word	0x24000310
 80057cc:	58024400 	.word	0x58024400
 80057d0:	0801a0dc 	.word	0x0801a0dc
 80057d4:	2400030c 	.word	0x2400030c

080057d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80057d8:	4a03      	ldr	r2, [pc, #12]	; (80057e8 <HAL_IncTick+0x10>)
 80057da:	4b04      	ldr	r3, [pc, #16]	; (80057ec <HAL_IncTick+0x14>)
 80057dc:	6811      	ldr	r1, [r2, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	440b      	add	r3, r1
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	2400c9d8 	.word	0x2400c9d8
 80057ec:	24000314 	.word	0x24000314

080057f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80057f0:	4b01      	ldr	r3, [pc, #4]	; (80057f8 <HAL_GetTick+0x8>)
 80057f2:	6818      	ldr	r0, [r3, #0]
}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2400c9d8 	.word	0x2400c9d8

080057fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005800:	f7ff fff6 	bl	80057f0 <HAL_GetTick>
 8005804:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005806:	1c63      	adds	r3, r4, #1
 8005808:	d002      	beq.n	8005810 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800580a:	4b04      	ldr	r3, [pc, #16]	; (800581c <HAL_Delay+0x20>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005810:	f7ff ffee 	bl	80057f0 <HAL_GetTick>
 8005814:	1b43      	subs	r3, r0, r5
 8005816:	42a3      	cmp	r3, r4
 8005818:	d3fa      	bcc.n	8005810 <HAL_Delay+0x14>
  {
  }
}
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	24000314 	.word	0x24000314

08005820 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <HAL_GetREVID+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
}
 8005824:	0c00      	lsrs	r0, r0, #16
 8005826:	4770      	bx	lr
 8005828:	5c001000 	.word	0x5c001000

0800582c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800582c:	4a03      	ldr	r2, [pc, #12]	; (800583c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800582e:	6813      	ldr	r3, [r2, #0]
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	4318      	orrs	r0, r3
 8005836:	6010      	str	r0, [r2, #0]
}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	58003c00 	.word	0x58003c00

08005840 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8005840:	4a03      	ldr	r2, [pc, #12]	; (8005850 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	4318      	orrs	r0, r3
 800584a:	6010      	str	r0, [r2, #0]
}
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	58003c00 	.word	0x58003c00

08005854 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8005854:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8005856:	4c0a      	ldr	r4, [pc, #40]	; (8005880 <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005860:	f7ff ffc6 	bl	80057f0 <HAL_GetTick>
 8005864:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8005866:	e004      	b.n	8005872 <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8005868:	f7ff ffc2 	bl	80057f0 <HAL_GetTick>
 800586c:	1b40      	subs	r0, r0, r5
 800586e:	280a      	cmp	r0, #10
 8005870:	d804      	bhi.n	800587c <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	d5f7      	bpl.n	8005868 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005878:	2000      	movs	r0, #0
}
 800587a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800587c:	2003      	movs	r0, #3
}
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	58003c00 	.word	0x58003c00

08005884 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005884:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005886:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005888:	f7fd fd6c 	bl	8003364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800588c:	bd08      	pop	{r3, pc}
 800588e:	bf00      	nop

08005890 <HAL_ADC_ErrorCallback>:
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <HAL_ADC_IRQHandler>:
{
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005896:	4a90      	ldr	r2, [pc, #576]	; (8005ad8 <HAL_ADC_IRQHandler+0x244>)
{
 8005898:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800589a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800589c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800589e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80058a0:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a2:	f000 8095 	beq.w	80059d0 <HAL_ADC_IRQHandler+0x13c>
 80058a6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80058aa:	4293      	cmp	r3, r2
 80058ac:	f000 8090 	beq.w	80059d0 <HAL_ADC_IRQHandler+0x13c>
 80058b0:	4a8a      	ldr	r2, [pc, #552]	; (8005adc <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80058b2:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80058b4:	07a9      	lsls	r1, r5, #30
 80058b6:	f007 071f 	and.w	r7, r7, #31
 80058ba:	d502      	bpl.n	80058c2 <HAL_ADC_IRQHandler+0x2e>
 80058bc:	07b2      	lsls	r2, r6, #30
 80058be:	f100 80aa 	bmi.w	8005a16 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80058c2:	0769      	lsls	r1, r5, #29
 80058c4:	d579      	bpl.n	80059ba <HAL_ADC_IRQHandler+0x126>
 80058c6:	0772      	lsls	r2, r6, #29
 80058c8:	d577      	bpl.n	80059ba <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80058cc:	06d2      	lsls	r2, r2, #27
 80058ce:	d403      	bmi.n	80058d8 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80058d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d6:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80058de:	d11c      	bne.n	800591a <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058e0:	4a7f      	ldr	r2, [pc, #508]	; (8005ae0 <HAL_ADC_IRQHandler+0x24c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f000 80e8 	beq.w	8005ab8 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80058e8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80058ea:	0490      	lsls	r0, r2, #18
 80058ec:	d415      	bmi.n	800591a <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	0711      	lsls	r1, r2, #28
 80058f2:	d512      	bpl.n	800591a <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	0752      	lsls	r2, r2, #29
 80058f8:	f100 80f6 	bmi.w	8005ae8 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	f022 020c 	bic.w	r2, r2, #12
 8005902:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005904:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590a:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800590c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800590e:	04db      	lsls	r3, r3, #19
 8005910:	d403      	bmi.n	800591a <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005912:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800591a:	4620      	mov	r0, r4
 800591c:	f7fd fd04 	bl	8003328 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	220c      	movs	r2, #12
 8005924:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005926:	06a8      	lsls	r0, r5, #26
 8005928:	d54d      	bpl.n	80059c6 <HAL_ADC_IRQHandler+0x132>
 800592a:	06b1      	lsls	r1, r6, #26
 800592c:	d54b      	bpl.n	80059c6 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800592e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005930:	06d1      	lsls	r1, r2, #27
 8005932:	d403      	bmi.n	800593c <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005934:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800593a:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800593c:	4968      	ldr	r1, [pc, #416]	; (8005ae0 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800593e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005940:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005942:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005944:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8005948:	d073      	beq.n	8005a32 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800594a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800594c:	b9d2      	cbnz	r2, 8005984 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800594e:	018a      	lsls	r2, r1, #6
 8005950:	f100 80aa 	bmi.w	8005aa8 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	0650      	lsls	r0, r2, #25
 8005958:	d514      	bpl.n	8005984 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800595a:	0289      	lsls	r1, r1, #10
 800595c:	d412      	bmi.n	8005984 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	0712      	lsls	r2, r2, #28
 8005962:	f100 80cc 	bmi.w	8005afe <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800596c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800596e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005974:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005976:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005978:	05d8      	lsls	r0, r3, #23
 800597a:	d403      	bmi.n	8005984 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800597c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005984:	4620      	mov	r0, r4
 8005986:	f001 f81b 	bl	80069c0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	2260      	movs	r2, #96	; 0x60
 800598e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005990:	0629      	lsls	r1, r5, #24
 8005992:	d501      	bpl.n	8005998 <HAL_ADC_IRQHandler+0x104>
 8005994:	0632      	lsls	r2, r6, #24
 8005996:	d460      	bmi.n	8005a5a <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005998:	05e8      	lsls	r0, r5, #23
 800599a:	d501      	bpl.n	80059a0 <HAL_ADC_IRQHandler+0x10c>
 800599c:	05f1      	lsls	r1, r6, #23
 800599e:	d467      	bmi.n	8005a70 <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80059a0:	05aa      	lsls	r2, r5, #22
 80059a2:	d501      	bpl.n	80059a8 <HAL_ADC_IRQHandler+0x114>
 80059a4:	05b0      	lsls	r0, r6, #22
 80059a6:	d44c      	bmi.n	8005a42 <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80059a8:	06e9      	lsls	r1, r5, #27
 80059aa:	d501      	bpl.n	80059b0 <HAL_ADC_IRQHandler+0x11c>
 80059ac:	06f2      	lsls	r2, r6, #27
 80059ae:	d411      	bmi.n	80059d4 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80059b0:	0568      	lsls	r0, r5, #21
 80059b2:	d501      	bpl.n	80059b8 <HAL_ADC_IRQHandler+0x124>
 80059b4:	0571      	lsls	r1, r6, #21
 80059b6:	d467      	bmi.n	8005a88 <HAL_ADC_IRQHandler+0x1f4>
}
 80059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80059ba:	0728      	lsls	r0, r5, #28
 80059bc:	d5b3      	bpl.n	8005926 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80059be:	0731      	lsls	r1, r6, #28
 80059c0:	d483      	bmi.n	80058ca <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059c2:	06a8      	lsls	r0, r5, #26
 80059c4:	d4b1      	bmi.n	800592a <HAL_ADC_IRQHandler+0x96>
 80059c6:	066a      	lsls	r2, r5, #25
 80059c8:	d5e2      	bpl.n	8005990 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059ca:	0670      	lsls	r0, r6, #25
 80059cc:	d5e0      	bpl.n	8005990 <HAL_ADC_IRQHandler+0xfc>
 80059ce:	e7ae      	b.n	800592e <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059d0:	4a44      	ldr	r2, [pc, #272]	; (8005ae4 <HAL_ADC_IRQHandler+0x250>)
 80059d2:	e76e      	b.n	80058b2 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80059d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80059d6:	b17a      	cbz	r2, 80059f8 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80059d8:	2f00      	cmp	r7, #0
 80059da:	d072      	beq.n	8005ac2 <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80059dc:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <HAL_ADC_IRQHandler+0x244>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f000 808b 	beq.w	8005afa <HAL_ADC_IRQHandler+0x266>
 80059e4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f000 8086 	beq.w	8005afa <HAL_ADC_IRQHandler+0x266>
 80059ee:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80059f0:	6892      	ldr	r2, [r2, #8]
 80059f2:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80059f6:	d00b      	beq.n	8005a10 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80059f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 80059fa:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80059fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a00:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a04:	f043 0302 	orr.w	r3, r3, #2
 8005a08:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8005a0a:	f7ff ff41 	bl	8005890 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	2210      	movs	r2, #16
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e7cc      	b.n	80059b0 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a18:	06d8      	lsls	r0, r3, #27
 8005a1a:	d403      	bmi.n	8005a24 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a22:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 ffd3 	bl	80069d0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e747      	b.n	80058c2 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005a32:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005a34:	2901      	cmp	r1, #1
 8005a36:	d988      	bls.n	800594a <HAL_ADC_IRQHandler+0xb6>
 8005a38:	2f00      	cmp	r7, #0
 8005a3a:	d086      	beq.n	800594a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a3c:	4926      	ldr	r1, [pc, #152]	; (8005ad8 <HAL_ADC_IRQHandler+0x244>)
 8005a3e:	68c9      	ldr	r1, [r1, #12]
 8005a40:	e784      	b.n	800594c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005a42:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005a44:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a4a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005a4c:	f000 ffbe 	bl	80069cc <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e7a6      	b.n	80059a8 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005a5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005a5c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a62:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005a64:	f7fd fcc0 	bl	80033e8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	2280      	movs	r2, #128	; 0x80
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e793      	b.n	8005998 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005a70:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005a72:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a78:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005a7a:	f000 ffa5 	bl	80069c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e78b      	b.n	80059a0 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005a88:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005a8e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a94:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005a96:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005a98:	f042 0208 	orr.w	r2, r2, #8
 8005a9c:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005a9e:	6019      	str	r1, [r3, #0]
}
 8005aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005aa4:	f000 bf8e 	b.w	80069c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005aa8:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005aac:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ab0:	4302      	orrs	r2, r0
 8005ab2:	f47f af67 	bne.w	8005984 <HAL_ADC_IRQHandler+0xf0>
 8005ab6:	e74d      	b.n	8005954 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ab8:	2f09      	cmp	r7, #9
 8005aba:	d906      	bls.n	8005aca <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005abc:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <HAL_ADC_IRQHandler+0x244>)
 8005abe:	68d2      	ldr	r2, [r2, #12]
 8005ac0:	e713      	b.n	80058ea <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	0797      	lsls	r7, r2, #30
 8005ac6:	d0a3      	beq.n	8005a10 <HAL_ADC_IRQHandler+0x17c>
 8005ac8:	e796      	b.n	80059f8 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005aca:	f240 2221 	movw	r2, #545	; 0x221
 8005ace:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ad0:	07d2      	lsls	r2, r2, #31
 8005ad2:	f53f af09 	bmi.w	80058e8 <HAL_ADC_IRQHandler+0x54>
 8005ad6:	e7f1      	b.n	8005abc <HAL_ADC_IRQHandler+0x228>
 8005ad8:	40022000 	.word	0x40022000
 8005adc:	58026300 	.word	0x58026300
 8005ae0:	40022100 	.word	0x40022100
 8005ae4:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005aea:	f043 0310 	orr.w	r3, r3, #16
 8005aee:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005af0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005af8:	e70f      	b.n	800591a <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005afa:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <HAL_ADC_IRQHandler+0x27c>)
 8005afc:	e778      	b.n	80059f0 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005afe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b00:	f043 0310 	orr.w	r3, r3, #16
 8005b04:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b0e:	e739      	b.n	8005984 <HAL_ADC_IRQHandler+0xf0>
 8005b10:	40022300 	.word	0x40022300

08005b14 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b14:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b18:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8005b1e:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b20:	d11d      	bne.n	8005b5e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b22:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b2a:	680a      	ldr	r2, [r1, #0]
 8005b2c:	f012 0f08 	tst.w	r2, #8
 8005b30:	68ca      	ldr	r2, [r1, #12]
 8005b32:	d01b      	beq.n	8005b6c <ADC_DMAConvCplt+0x58>
 8005b34:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005b38:	d10d      	bne.n	8005b56 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b3a:	68ca      	ldr	r2, [r1, #12]
 8005b3c:	0494      	lsls	r4, r2, #18
 8005b3e:	d40a      	bmi.n	8005b56 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b4a:	04d1      	lsls	r1, r2, #19
 8005b4c:	d403      	bmi.n	8005b56 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b50:	f042 0201 	orr.w	r2, r2, #1
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd fbe6 	bl	8003328 <HAL_ADC_ConvCpltCallback>
}
 8005b5c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b5e:	06d2      	lsls	r2, r2, #27
 8005b60:	d40a      	bmi.n	8005b78 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005b6c:	0790      	lsls	r0, r2, #30
 8005b6e:	d0e7      	beq.n	8005b40 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fd fbd9 	bl	8003328 <HAL_ADC_ConvCpltCallback>
 8005b76:	e7f1      	b.n	8005b5c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fe89 	bl	8005890 <HAL_ADC_ErrorCallback>
}
 8005b7e:	bd10      	pop	{r4, pc}

08005b80 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b80:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005b82:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b84:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b8c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005b8e:	f043 0304 	orr.w	r3, r3, #4
 8005b92:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b94:	f7ff fe7c 	bl	8005890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b98:	bd08      	pop	{r3, pc}
 8005b9a:	bf00      	nop

08005b9c <HAL_ADC_ConfigChannel>:
{
 8005b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8005b9e:	2200      	movs	r2, #0
{
 8005ba0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005ba2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005ba4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8005ba8:	2a01      	cmp	r2, #1
 8005baa:	f000 813b 	beq.w	8005e24 <HAL_ADC_ConfigChannel+0x288>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bb2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005bb4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bb8:	6894      	ldr	r4, [r2, #8]
 8005bba:	0764      	lsls	r4, r4, #29
 8005bbc:	f100 8099 	bmi.w	8005cf2 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005bc0:	680c      	ldr	r4, [r1, #0]
 8005bc2:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	f040 809e 	bne.w	8005d08 <HAL_ADC_ConfigChannel+0x16c>
 8005bcc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005bd0:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005bd2:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 8005bd4:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005bd8:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005bda:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8005bde:	4330      	orrs	r0, r6
 8005be0:	f00c 0c0c 	and.w	ip, ip, #12
 8005be4:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8005be6:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005bea:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005bee:	4084      	lsls	r4, r0
 8005bf0:	fa0e fe00 	lsl.w	lr, lr, r0
 8005bf4:	f85c 0005 	ldr.w	r0, [ip, r5]
 8005bf8:	ea20 000e 	bic.w	r0, r0, lr
 8005bfc:	4304      	orrs	r4, r0
 8005bfe:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c02:	6890      	ldr	r0, [r2, #8]
 8005c04:	0740      	lsls	r0, r0, #29
 8005c06:	d47d      	bmi.n	8005d04 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c08:	6895      	ldr	r5, [r2, #8]
 8005c0a:	f015 0508 	ands.w	r5, r5, #8
 8005c0e:	d156      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005c10:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8005c12:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c14:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c18:	4fb7      	ldr	r7, [pc, #732]	; (8005ef8 <HAL_ADC_ConfigChannel+0x35c>)
 8005c1a:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8005c1e:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c22:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005c26:	fa00 fe04 	lsl.w	lr, r0, r4
 8005c2a:	6888      	ldr	r0, [r1, #8]
 8005c2c:	fa00 f404 	lsl.w	r4, r0, r4
 8005c30:	f85c 0006 	ldr.w	r0, [ip, r6]
 8005c34:	ea20 000e 	bic.w	r0, r0, lr
 8005c38:	4320      	orrs	r0, r4
 8005c3a:	f84c 0006 	str.w	r0, [ip, r6]
 8005c3e:	6838      	ldr	r0, [r7, #0]
 8005c40:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005c44:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8005c48:	f000 8095 	beq.w	8005d76 <HAL_ADC_ConfigChannel+0x1da>
 8005c4c:	68d0      	ldr	r0, [r2, #12]
 8005c4e:	68d6      	ldr	r6, [r2, #12]
 8005c50:	06c7      	lsls	r7, r0, #27
 8005c52:	f100 8107 	bmi.w	8005e64 <HAL_ADC_ConfigChannel+0x2c8>
 8005c56:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005c5a:	6948      	ldr	r0, [r1, #20]
 8005c5c:	0076      	lsls	r6, r6, #1
 8005c5e:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c62:	690f      	ldr	r7, [r1, #16]
 8005c64:	2f04      	cmp	r7, #4
 8005c66:	f000 80e0 	beq.w	8005e2a <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c6a:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8005c6e:	6808      	ldr	r0, [r1, #0]
 8005c70:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8005c74:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005c7c:	ea40 000c 	orr.w	r0, r0, ip
 8005c80:	4330      	orrs	r0, r6
 8005c82:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005c86:	7e48      	ldrb	r0, [r1, #25]
 8005c88:	690e      	ldr	r6, [r1, #16]
 8005c8a:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005c8c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005c90:	bf0c      	ite	eq
 8005c92:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8005c96:	2700      	movne	r7, #0
 8005c98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c9c:	4338      	orrs	r0, r7
 8005c9e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ca2:	7e0c      	ldrb	r4, [r1, #24]
 8005ca4:	6908      	ldr	r0, [r1, #16]
 8005ca6:	2c01      	cmp	r4, #1
 8005ca8:	d104      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005caa:	f000 001f 	and.w	r0, r0, #31
 8005cae:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8005cb2:	4085      	lsls	r5, r0
 8005cb4:	6910      	ldr	r0, [r2, #16]
 8005cb6:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8005cba:	4305      	orrs	r5, r0
 8005cbc:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cbe:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cc0:	07c4      	lsls	r4, r0, #31
 8005cc2:	d414      	bmi.n	8005cee <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005cc4:	68ce      	ldr	r6, [r1, #12]
 8005cc6:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8005cc8:	f006 0718 	and.w	r7, r6, #24
 8005ccc:	488b      	ldr	r0, [pc, #556]	; (8005efc <HAL_ADC_ConfigChannel+0x360>)
 8005cce:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8005cd2:	40f8      	lsrs	r0, r7
 8005cd4:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8005cd8:	4020      	ands	r0, r4
 8005cda:	ea25 0507 	bic.w	r5, r5, r7
 8005cde:	4328      	orrs	r0, r5
 8005ce0:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005ce4:	4886      	ldr	r0, [pc, #536]	; (8005f00 <HAL_ADC_ConfigChannel+0x364>)
 8005ce6:	4286      	cmp	r6, r0
 8005ce8:	d04d      	beq.n	8005d86 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	db15      	blt.n	8005d1a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e003      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cf4:	f042 0220 	orr.w	r2, r2, #32
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8005d00:	b003      	add	sp, #12
 8005d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d04:	6890      	ldr	r0, [r2, #8]
 8005d06:	e7da      	b.n	8005cbe <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d08:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d0c:	b115      	cbz	r5, 8005d14 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005d0e:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d12:	40a8      	lsls	r0, r5
 8005d14:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005d18:	e75b      	b.n	8005bd2 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d1a:	497a      	ldr	r1, [pc, #488]	; (8005f04 <HAL_ADC_ConfigChannel+0x368>)
 8005d1c:	428a      	cmp	r2, r1
 8005d1e:	f000 80c7 	beq.w	8005eb0 <HAL_ADC_ConfigChannel+0x314>
 8005d22:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8005d26:	428a      	cmp	r2, r1
 8005d28:	f000 80c2 	beq.w	8005eb0 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d2c:	4d76      	ldr	r5, [pc, #472]	; (8005f08 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d2e:	4877      	ldr	r0, [pc, #476]	; (8005f0c <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d30:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d32:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005d34:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d38:	43c0      	mvns	r0, r0
 8005d3a:	f000 0001 	and.w	r0, r0, #1
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f000 80c5 	beq.w	8005ece <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d44:	4872      	ldr	r0, [pc, #456]	; (8005f10 <HAL_ADC_ConfigChannel+0x374>)
 8005d46:	4284      	cmp	r4, r0
 8005d48:	f000 810e 	beq.w	8005f68 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d4c:	4871      	ldr	r0, [pc, #452]	; (8005f14 <HAL_ADC_ConfigChannel+0x378>)
 8005d4e:	4284      	cmp	r4, r0
 8005d50:	f000 812d 	beq.w	8005fae <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d54:	4870      	ldr	r0, [pc, #448]	; (8005f18 <HAL_ADC_ConfigChannel+0x37c>)
 8005d56:	4284      	cmp	r4, r0
 8005d58:	d1c9      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8005d5a:	0249      	lsls	r1, r1, #9
 8005d5c:	d4c7      	bmi.n	8005cee <HAL_ADC_ConfigChannel+0x152>
 8005d5e:	496b      	ldr	r1, [pc, #428]	; (8005f0c <HAL_ADC_ConfigChannel+0x370>)
 8005d60:	428a      	cmp	r2, r1
 8005d62:	d1c4      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005d64:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d66:	2000      	movs	r0, #0
 8005d68:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005d6c:	4332      	orrs	r2, r6
 8005d6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005d72:	60aa      	str	r2, [r5, #8]
}
 8005d74:	e7c1      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005d76:	68d6      	ldr	r6, [r2, #12]
 8005d78:	6948      	ldr	r0, [r1, #20]
 8005d7a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8005d7e:	0076      	lsls	r6, r6, #1
 8005d80:	fa00 f606 	lsl.w	r6, r0, r6
 8005d84:	e76d      	b.n	8005c62 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d86:	2f00      	cmp	r7, #0
 8005d88:	d073      	beq.n	8005e72 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f000 80c6 	beq.w	8005f20 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 8005d94:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f000 001f 	and.w	r0, r0, #31
 8005d9e:	2809      	cmp	r0, #9
 8005da0:	f240 80be 	bls.w	8005f20 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da4:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f000 8114 	beq.w	8005fd6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8005dae:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005db2:	3001      	adds	r0, #1
 8005db4:	0680      	lsls	r0, r0, #26
 8005db6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dba:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	f000 8107 	beq.w	8005fd2 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8005dc4:	fab5 f585 	clz	r5, r5
 8005dc8:	2601      	movs	r6, #1
 8005dca:	3501      	adds	r5, #1
 8005dcc:	f005 051f 	and.w	r5, r5, #31
 8005dd0:	fa06 f505 	lsl.w	r5, r6, r5
 8005dd4:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	f000 80f7 	beq.w	8005fce <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8005de0:	fab4 f484 	clz	r4, r4
 8005de4:	f06f 061d 	mvn.w	r6, #29
 8005de8:	1c60      	adds	r0, r4, #1
 8005dea:	f000 041f 	and.w	r4, r0, #31
 8005dee:	2003      	movs	r0, #3
 8005df0:	fb10 6004 	smlabb	r0, r0, r4, r6
 8005df4:	0500      	lsls	r0, r0, #20
 8005df6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dfa:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8005dfc:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005dfe:	f102 0514 	add.w	r5, r2, #20
 8005e02:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8005e04:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e08:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005e0c:	fa04 f700 	lsl.w	r7, r4, r0
 8005e10:	5974      	ldr	r4, [r6, r5]
 8005e12:	ea24 0407 	bic.w	r4, r4, r7
 8005e16:	688f      	ldr	r7, [r1, #8]
 8005e18:	fa07 f000 	lsl.w	r0, r7, r0
 8005e1c:	4320      	orrs	r0, r4
 8005e1e:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005e20:	680c      	ldr	r4, [r1, #0]
}
 8005e22:	e762      	b.n	8005cea <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8005e24:	2002      	movs	r0, #2
}
 8005e26:	b003      	add	sp, #12
 8005e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e2a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005e2c:	680c      	ldr	r4, [r1, #0]
 8005e2e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005e32:	06a5      	lsls	r5, r4, #26
 8005e34:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8005e38:	d030      	beq.n	8005e9c <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e3a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005e3c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005e40:	4285      	cmp	r5, r0
 8005e42:	d026      	beq.n	8005e92 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e44:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005e46:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005e4a:	4285      	cmp	r5, r0
 8005e4c:	d02b      	beq.n	8005ea6 <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e4e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005e50:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005e54:	4285      	cmp	r5, r0
 8005e56:	f47f af32 	bne.w	8005cbe <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005e5a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005e5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005e60:	66d0      	str	r0, [r2, #108]	; 0x6c
 8005e62:	e72c      	b.n	8005cbe <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e64:	0876      	lsrs	r6, r6, #1
 8005e66:	6948      	ldr	r0, [r1, #20]
 8005e68:	f006 0608 	and.w	r6, r6, #8
 8005e6c:	fa00 f606 	lsl.w	r6, r0, r6
 8005e70:	e6f7      	b.n	8005c62 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e72:	0ea4      	lsrs	r4, r4, #26
 8005e74:	3401      	adds	r4, #1
 8005e76:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e7a:	2e09      	cmp	r6, #9
 8005e7c:	d82d      	bhi.n	8005eda <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e7e:	06a5      	lsls	r5, r4, #26
 8005e80:	2001      	movs	r0, #1
 8005e82:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005e86:	40b0      	lsls	r0, r6
 8005e88:	4305      	orrs	r5, r0
 8005e8a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005e8e:	0500      	lsls	r0, r0, #20
 8005e90:	e7b3      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005e92:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005e94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005e98:	6650      	str	r0, [r2, #100]	; 0x64
 8005e9a:	e7d3      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005e9c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005e9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005ea2:	6610      	str	r0, [r2, #96]	; 0x60
 8005ea4:	e7c9      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005ea6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005ea8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005eac:	6690      	str	r0, [r2, #104]	; 0x68
 8005eae:	e7ce      	b.n	8005e4e <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eb0:	4814      	ldr	r0, [pc, #80]	; (8005f04 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005eb2:	4d1a      	ldr	r5, [pc, #104]	; (8005f1c <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eb4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005eb8:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eba:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8005ebe:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ec0:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ec2:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8005ec6:	43c0      	mvns	r0, r0
 8005ec8:	f000 0001 	and.w	r0, r0, #1
 8005ecc:	e737      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005ed0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed2:	f042 0220 	orr.w	r2, r2, #32
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8005ed8:	e70f      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005eda:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005ede:	06a5      	lsls	r5, r4, #26
 8005ee0:	2401      	movs	r4, #1
 8005ee2:	381e      	subs	r0, #30
 8005ee4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005ee8:	fa04 f606 	lsl.w	r6, r4, r6
 8005eec:	0500      	lsls	r0, r0, #20
 8005eee:	4335      	orrs	r5, r6
 8005ef0:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005ef4:	e781      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x25e>
 8005ef6:	bf00      	nop
 8005ef8:	5c001000 	.word	0x5c001000
 8005efc:	000fffff 	.word	0x000fffff
 8005f00:	47ff0000 	.word	0x47ff0000
 8005f04:	40022000 	.word	0x40022000
 8005f08:	58026300 	.word	0x58026300
 8005f0c:	58026000 	.word	0x58026000
 8005f10:	cb840000 	.word	0xcb840000
 8005f14:	c7520000 	.word	0xc7520000
 8005f18:	cfb80000 	.word	0xcfb80000
 8005f1c:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d05e      	beq.n	8005fe6 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8005f28:	fab0 f080 	clz	r0, r0
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	0680      	lsls	r0, r0, #26
 8005f30:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f34:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	d052      	beq.n	8005fe2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005f3c:	fab5 f585 	clz	r5, r5
 8005f40:	2601      	movs	r6, #1
 8005f42:	3501      	adds	r5, #1
 8005f44:	f005 051f 	and.w	r5, r5, #31
 8005f48:	fa06 f505 	lsl.w	r5, r6, r5
 8005f4c:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	d042      	beq.n	8005fdc <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8005f56:	fab4 f484 	clz	r4, r4
 8005f5a:	3401      	adds	r4, #1
 8005f5c:	f004 041f 	and.w	r4, r4, #31
 8005f60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005f64:	0520      	lsls	r0, r4, #20
 8005f66:	e748      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f68:	0208      	lsls	r0, r1, #8
 8005f6a:	f53f aec0 	bmi.w	8005cee <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f6e:	491f      	ldr	r1, [pc, #124]	; (8005fec <HAL_ADC_ConfigChannel+0x450>)
 8005f70:	428a      	cmp	r2, r1
 8005f72:	f47f aebc 	bne.w	8005cee <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_ADC_ConfigChannel+0x454>)
 8005f78:	481e      	ldr	r0, [pc, #120]	; (8005ff4 <HAL_ADC_ConfigChannel+0x458>)
 8005f7a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005f7c:	68a9      	ldr	r1, [r5, #8]
 8005f7e:	0992      	lsrs	r2, r2, #6
 8005f80:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005f84:	fba0 0202 	umull	r0, r2, r0, r2
 8005f88:	4331      	orrs	r1, r6
 8005f8a:	0992      	lsrs	r2, r2, #6
 8005f8c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005f90:	3201      	adds	r2, #1
 8005f92:	60a9      	str	r1, [r5, #8]
 8005f94:	0052      	lsls	r2, r2, #1
 8005f96:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005f98:	9a01      	ldr	r2, [sp, #4]
 8005f9a:	2a00      	cmp	r2, #0
 8005f9c:	f43f aea7 	beq.w	8005cee <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8005fa0:	9a01      	ldr	r2, [sp, #4]
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8005fa6:	9a01      	ldr	r2, [sp, #4]
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d1f9      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x404>
 8005fac:	e69f      	b.n	8005cee <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005fae:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8005fb2:	f47f ae9c 	bne.w	8005cee <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005fb6:	490d      	ldr	r1, [pc, #52]	; (8005fec <HAL_ADC_ConfigChannel+0x450>)
 8005fb8:	428a      	cmp	r2, r1
 8005fba:	f47f ae98 	bne.w	8005cee <HAL_ADC_ConfigChannel+0x152>
 8005fbe:	68aa      	ldr	r2, [r5, #8]
 8005fc0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005fc4:	4332      	orrs	r2, r6
 8005fc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005fca:	60aa      	str	r2, [r5, #8]
}
 8005fcc:	e695      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x15e>
 8005fce:	480a      	ldr	r0, [pc, #40]	; (8005ff8 <HAL_ADC_ConfigChannel+0x45c>)
 8005fd0:	e713      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x25e>
 8005fd2:	2502      	movs	r5, #2
 8005fd4:	e6fe      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x238>
 8005fd6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005fda:	e6ee      	b.n	8005dba <HAL_ADC_ConfigChannel+0x21e>
 8005fdc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005fe0:	e70b      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x25e>
 8005fe2:	2502      	movs	r5, #2
 8005fe4:	e7b2      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x3b0>
 8005fe6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005fea:	e7a3      	b.n	8005f34 <HAL_ADC_ConfigChannel+0x398>
 8005fec:	58026000 	.word	0x58026000
 8005ff0:	2400030c 	.word	0x2400030c
 8005ff4:	053e2d63 	.word	0x053e2d63
 8005ff8:	fe500000 	.word	0xfe500000

08005ffc <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8005ffc:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8006000:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006002:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8006004:	2a01      	cmp	r2, #1
 8006006:	f000 80f3 	beq.w	80061f0 <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800600a:	681a      	ldr	r2, [r3, #0]
{
 800600c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 800600e:	2401      	movs	r4, #1
 8006010:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006014:	6894      	ldr	r4, [r2, #8]
 8006016:	0765      	lsls	r5, r4, #29
 8006018:	d428      	bmi.n	800606c <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800601a:	6894      	ldr	r4, [r2, #8]
 800601c:	0724      	lsls	r4, r4, #28
 800601e:	d426      	bmi.n	800606e <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006020:	680c      	ldr	r4, [r1, #0]
 8006022:	4db8      	ldr	r5, [pc, #736]	; (8006304 <HAL_ADC_AnalogWDGConfig+0x308>)
 8006024:	42ac      	cmp	r4, r5
 8006026:	f000 80a0 	beq.w	800616a <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 800602a:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 800602e:	d02e      	beq.n	800608e <HAL_ADC_AnalogWDGConfig+0x92>
 8006030:	d827      	bhi.n	8006082 <HAL_ADC_AnalogWDGConfig+0x86>
 8006032:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8006036:	d02a      	beq.n	800608e <HAL_ADC_AnalogWDGConfig+0x92>
 8006038:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800603c:	d027      	beq.n	800608e <HAL_ADC_AnalogWDGConfig+0x92>
 800603e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006042:	d024      	beq.n	800608e <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006044:	f004 0001 	and.w	r0, r4, #1
 8006048:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 800604c:	4eae      	ldr	r6, [pc, #696]	; (8006308 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800604e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8006052:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8006054:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8006058:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 800605c:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8006060:	ea24 0406 	bic.w	r4, r4, r6
 8006064:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006068:	680c      	ldr	r4, [r1, #0]
}
 800606a:	e023      	b.n	80060b4 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800606c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800606e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006070:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006072:	f042 0220 	orr.w	r2, r2, #32
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800607e:	bc70      	pop	{r4, r5, r6}
 8006080:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8006082:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8006086:	d002      	beq.n	800608e <HAL_ADC_AnalogWDGConfig+0x92>
 8006088:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 800608c:	d1da      	bne.n	8006044 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800608e:	489f      	ldr	r0, [pc, #636]	; (800630c <HAL_ADC_AnalogWDGConfig+0x310>)
 8006090:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006092:	6888      	ldr	r0, [r1, #8]
 8006094:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006098:	f000 80cb 	beq.w	8006232 <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800609c:	2d00      	cmp	r5, #0
 800609e:	f040 80df 	bne.w	8006260 <HAL_ADC_AnalogWDGConfig+0x264>
 80060a2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80060a6:	2501      	movs	r5, #1
 80060a8:	4085      	lsls	r5, r0
 80060aa:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 80060ae:	4328      	orrs	r0, r5
 80060b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80060b4:	4896      	ldr	r0, [pc, #600]	; (8006310 <HAL_ADC_AnalogWDGConfig+0x314>)
 80060b6:	6800      	ldr	r0, [r0, #0]
 80060b8:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80060bc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80060c0:	68d0      	ldr	r0, [r2, #12]
 80060c2:	d04b      	beq.n	800615c <HAL_ADC_AnalogWDGConfig+0x160>
 80060c4:	f010 0f10 	tst.w	r0, #16
 80060c8:	68d0      	ldr	r0, [r2, #12]
 80060ca:	d047      	beq.n	800615c <HAL_ADC_AnalogWDGConfig+0x160>
 80060cc:	0840      	lsrs	r0, r0, #1
 80060ce:	690d      	ldr	r5, [r1, #16]
 80060d0:	f000 0008 	and.w	r0, r0, #8
 80060d4:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80060d8:	4d8d      	ldr	r5, [pc, #564]	; (8006310 <HAL_ADC_AnalogWDGConfig+0x314>)
 80060da:	682d      	ldr	r5, [r5, #0]
 80060dc:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 80060e0:	68d5      	ldr	r5, [r2, #12]
 80060e2:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 80060e6:	d031      	beq.n	800614c <HAL_ADC_AnalogWDGConfig+0x150>
 80060e8:	f015 0f10 	tst.w	r5, #16
 80060ec:	68d5      	ldr	r5, [r2, #12]
 80060ee:	d02d      	beq.n	800614c <HAL_ADC_AnalogWDGConfig+0x150>
 80060f0:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 80060f4:	694d      	ldr	r5, [r1, #20]
 80060f6:	f00c 0c08 	and.w	ip, ip, #8
 80060fa:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80060fe:	4d83      	ldr	r5, [pc, #524]	; (800630c <HAL_ADC_AnalogWDGConfig+0x310>)
 8006100:	42ac      	cmp	r4, r5
 8006102:	d077      	beq.n	80061f4 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006104:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8006108:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800610c:	ea44 040c 	orr.w	r4, r4, ip
 8006110:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006114:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8006118:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800611c:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800611e:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006122:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006126:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006128:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800612c:	6558      	str	r0, [r3, #84]	; 0x54
 800612e:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006130:	7b09      	ldrb	r1, [r1, #12]
 8006132:	2901      	cmp	r1, #1
 8006134:	f000 808e 	beq.w	8006254 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006138:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800613a:	2000      	movs	r0, #0
 800613c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006140:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006148:	bc70      	pop	{r4, r5, r6}
 800614a:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800614c:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8006150:	694d      	ldr	r5, [r1, #20]
 8006152:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006156:	fa05 fc0c 	lsl.w	ip, r5, ip
 800615a:	e7d0      	b.n	80060fe <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800615c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006160:	690d      	ldr	r5, [r1, #16]
 8006162:	0040      	lsls	r0, r0, #1
 8006164:	fa05 f000 	lsl.w	r0, r5, r0
 8006168:	e7b6      	b.n	80060d8 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 800616a:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 800616e:	f000 80f0 	beq.w	8006352 <HAL_ADC_AnalogWDGConfig+0x356>
 8006172:	d82a      	bhi.n	80061ca <HAL_ADC_AnalogWDGConfig+0x1ce>
 8006174:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8006178:	f000 80e0 	beq.w	800633c <HAL_ADC_AnalogWDGConfig+0x340>
 800617c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006180:	d118      	bne.n	80061b4 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8006182:	68d4      	ldr	r4, [r2, #12]
 8006184:	4863      	ldr	r0, [pc, #396]	; (8006314 <HAL_ADC_AnalogWDGConfig+0x318>)
 8006186:	4020      	ands	r0, r4
 8006188:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800618c:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800618e:	4860      	ldr	r0, [pc, #384]	; (8006310 <HAL_ADC_AnalogWDGConfig+0x314>)
 8006190:	6800      	ldr	r0, [r0, #0]
 8006192:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006196:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800619a:	68d0      	ldr	r0, [r2, #12]
 800619c:	d069      	beq.n	8006272 <HAL_ADC_AnalogWDGConfig+0x276>
 800619e:	f010 0f10 	tst.w	r0, #16
 80061a2:	690d      	ldr	r5, [r1, #16]
 80061a4:	68d0      	ldr	r0, [r2, #12]
 80061a6:	f040 8099 	bne.w	80062dc <HAL_ADC_AnalogWDGConfig+0x2e0>
 80061aa:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80061ae:	0040      	lsls	r0, r0, #1
 80061b0:	4085      	lsls	r5, r0
 80061b2:	e063      	b.n	800627c <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 80061b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80061b8:	f040 80b4 	bne.w	8006324 <HAL_ADC_AnalogWDGConfig+0x328>
 80061bc:	68d4      	ldr	r4, [r2, #12]
 80061be:	4855      	ldr	r0, [pc, #340]	; (8006314 <HAL_ADC_AnalogWDGConfig+0x318>)
 80061c0:	4020      	ands	r0, r4
 80061c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80061c6:	60d0      	str	r0, [r2, #12]
}
 80061c8:	e7e1      	b.n	800618e <HAL_ADC_AnalogWDGConfig+0x192>
 80061ca:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80061ce:	f000 80ae 	beq.w	800632e <HAL_ADC_AnalogWDGConfig+0x332>
 80061d2:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80061d6:	f040 80a5 	bne.w	8006324 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 80061da:	68d5      	ldr	r5, [r2, #12]
 80061dc:	6888      	ldr	r0, [r1, #8]
 80061de:	4c4d      	ldr	r4, [pc, #308]	; (8006314 <HAL_ADC_AnalogWDGConfig+0x318>)
 80061e0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80061e4:	402c      	ands	r4, r5
 80061e6:	4320      	orrs	r0, r4
 80061e8:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 80061ec:	60d0      	str	r0, [r2, #12]
}
 80061ee:	e7ce      	b.n	800618e <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 80061f0:	2002      	movs	r0, #2
}
 80061f2:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80061f4:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80061f8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80061fc:	ea44 040c 	orr.w	r4, r4, ip
 8006200:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006204:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8006208:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 800620c:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800620e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8006212:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006216:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006218:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 800621c:	6558      	str	r0, [r3, #84]	; 0x54
 800621e:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006220:	7b09      	ldrb	r1, [r1, #12]
 8006222:	2901      	cmp	r1, #1
 8006224:	d078      	beq.n	8006318 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006226:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006228:	2000      	movs	r0, #0
 800622a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800622e:	6051      	str	r1, [r2, #4]
}
 8006230:	e722      	b.n	8006078 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006232:	2d00      	cmp	r5, #0
 8006234:	d05e      	beq.n	80062f4 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006236:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800623a:	2800      	cmp	r0, #0
 800623c:	f000 8094 	beq.w	8006368 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006240:	fab0 f080 	clz	r0, r0
 8006244:	2501      	movs	r5, #1
 8006246:	4085      	lsls	r5, r0
 8006248:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 800624c:	4328      	orrs	r0, r5
 800624e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8006252:	e72f      	b.n	80060b4 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006254:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006256:	2000      	movs	r0, #0
 8006258:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800625c:	6051      	str	r1, [r2, #4]
}
 800625e:	e70b      	b.n	8006078 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006260:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006264:	2800      	cmp	r0, #0
 8006266:	d04a      	beq.n	80062fe <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8006268:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800626c:	2501      	movs	r5, #1
 800626e:	4085      	lsls	r5, r0
 8006270:	e71b      	b.n	80060aa <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006272:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006276:	690d      	ldr	r5, [r1, #16]
 8006278:	0040      	lsls	r0, r0, #1
 800627a:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800627c:	4824      	ldr	r0, [pc, #144]	; (8006310 <HAL_ADC_AnalogWDGConfig+0x314>)
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8006284:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8006288:	68d0      	ldr	r0, [r2, #12]
 800628a:	d003      	beq.n	8006294 <HAL_ADC_AnalogWDGConfig+0x298>
 800628c:	f010 0f10 	tst.w	r0, #16
 8006290:	68d0      	ldr	r0, [r2, #12]
 8006292:	d128      	bne.n	80062e6 <HAL_ADC_AnalogWDGConfig+0x2ea>
 8006294:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8006298:	694c      	ldr	r4, [r1, #20]
 800629a:	0040      	lsls	r0, r0, #1
 800629c:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80062a0:	6a14      	ldr	r4, [r2, #32]
 80062a2:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80062a6:	4304      	orrs	r4, r0
 80062a8:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80062aa:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80062ac:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80062ae:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80062b2:	4328      	orrs	r0, r5
 80062b4:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80062b6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062b8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80062bc:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062be:	2000      	movs	r0, #0
 80062c0:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80062c2:	7b09      	ldrb	r1, [r1, #12]
 80062c4:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80062c6:	6851      	ldr	r1, [r2, #4]
 80062c8:	bf0c      	ite	eq
 80062ca:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80062cc:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80062d0:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80062d8:	bc70      	pop	{r4, r5, r6}
 80062da:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80062dc:	0840      	lsrs	r0, r0, #1
 80062de:	f000 0008 	and.w	r0, r0, #8
 80062e2:	4085      	lsls	r5, r0
 80062e4:	e7ca      	b.n	800627c <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80062e6:	0840      	lsrs	r0, r0, #1
 80062e8:	694c      	ldr	r4, [r1, #20]
 80062ea:	f000 0008 	and.w	r0, r0, #8
 80062ee:	fa04 f000 	lsl.w	r0, r4, r0
 80062f2:	e7d5      	b.n	80062a0 <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062f4:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80062f8:	2501      	movs	r5, #1
 80062fa:	4085      	lsls	r5, r0
 80062fc:	e7a4      	b.n	8006248 <HAL_ADC_AnalogWDGConfig+0x24c>
 80062fe:	2501      	movs	r5, #1
 8006300:	e6d3      	b.n	80060aa <HAL_ADC_AnalogWDGConfig+0xae>
 8006302:	bf00      	nop
 8006304:	7dc00000 	.word	0x7dc00000
 8006308:	7dcfffff 	.word	0x7dcfffff
 800630c:	001fffff 	.word	0x001fffff
 8006310:	5c001000 	.word	0x5c001000
 8006314:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006318:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800631a:	2000      	movs	r0, #0
 800631c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006320:	6051      	str	r1, [r2, #4]
}
 8006322:	e6a9      	b.n	8006078 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8006324:	68d4      	ldr	r4, [r2, #12]
 8006326:	4811      	ldr	r0, [pc, #68]	; (800636c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006328:	4020      	ands	r0, r4
 800632a:	60d0      	str	r0, [r2, #12]
}
 800632c:	e72f      	b.n	800618e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800632e:	68d4      	ldr	r4, [r2, #12]
 8006330:	480e      	ldr	r0, [pc, #56]	; (800636c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006332:	4020      	ands	r0, r4
 8006334:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8006338:	60d0      	str	r0, [r2, #12]
}
 800633a:	e728      	b.n	800618e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800633c:	68d5      	ldr	r5, [r2, #12]
 800633e:	6888      	ldr	r0, [r1, #8]
 8006340:	4c0a      	ldr	r4, [pc, #40]	; (800636c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006342:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006346:	402c      	ands	r4, r5
 8006348:	4320      	orrs	r0, r4
 800634a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800634e:	60d0      	str	r0, [r2, #12]
}
 8006350:	e71d      	b.n	800618e <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8006352:	68d5      	ldr	r5, [r2, #12]
 8006354:	6888      	ldr	r0, [r1, #8]
 8006356:	4c05      	ldr	r4, [pc, #20]	; (800636c <HAL_ADC_AnalogWDGConfig+0x370>)
 8006358:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800635c:	402c      	ands	r4, r5
 800635e:	4320      	orrs	r0, r4
 8006360:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8006364:	60d0      	str	r0, [r2, #12]
}
 8006366:	e712      	b.n	800618e <HAL_ADC_AnalogWDGConfig+0x192>
 8006368:	2501      	movs	r5, #1
 800636a:	e76d      	b.n	8006248 <HAL_ADC_AnalogWDGConfig+0x24c>
 800636c:	823fffff 	.word	0x823fffff

08006370 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006370:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	07d1      	lsls	r1, r2, #31
 8006376:	d501      	bpl.n	800637c <ADC_Enable+0xc>
  return HAL_OK;
 8006378:	2000      	movs	r0, #0
}
 800637a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800637c:	6899      	ldr	r1, [r3, #8]
 800637e:	4a21      	ldr	r2, [pc, #132]	; (8006404 <ADC_Enable+0x94>)
 8006380:	4211      	tst	r1, r2
{
 8006382:	b570      	push	{r4, r5, r6, lr}
 8006384:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006386:	d12c      	bne.n	80063e2 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8006388:	6899      	ldr	r1, [r3, #8]
 800638a:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <ADC_Enable+0x98>)
 800638c:	400a      	ands	r2, r1
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006394:	f7ff fa2c 	bl	80057f0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	4a1c      	ldr	r2, [pc, #112]	; (800640c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 800639c:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800639e:	4293      	cmp	r3, r2
 80063a0:	d028      	beq.n	80063f4 <ADC_Enable+0x84>
 80063a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d024      	beq.n	80063f4 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063aa:	4a19      	ldr	r2, [pc, #100]	; (8006410 <ADC_Enable+0xa0>)
 80063ac:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	07d6      	lsls	r6, r2, #31
 80063b2:	d414      	bmi.n	80063de <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 80063b4:	4e14      	ldr	r6, [pc, #80]	; (8006408 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063b6:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063b8:	07d0      	lsls	r0, r2, #31
 80063ba:	d404      	bmi.n	80063c6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	4032      	ands	r2, r6
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063c6:	f7ff fa13 	bl	80057f0 <HAL_GetTick>
 80063ca:	1b43      	subs	r3, r0, r5
 80063cc:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063ce:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063d0:	d902      	bls.n	80063d8 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	07d1      	lsls	r1, r2, #31
 80063d6:	d504      	bpl.n	80063e2 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	07d2      	lsls	r2, r2, #31
 80063dc:	d5eb      	bpl.n	80063b6 <ADC_Enable+0x46>
  return HAL_OK;
 80063de:	2000      	movs	r0, #0
}
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80063e4:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e6:	f043 0310 	orr.w	r3, r3, #16
 80063ea:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ee:	4303      	orrs	r3, r0
 80063f0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80063f4:	4a07      	ldr	r2, [pc, #28]	; (8006414 <ADC_Enable+0xa4>)
 80063f6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063f8:	06d2      	lsls	r2, r2, #27
 80063fa:	d0d8      	beq.n	80063ae <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80063fc:	4a06      	ldr	r2, [pc, #24]	; (8006418 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d1d5      	bne.n	80063ae <ADC_Enable+0x3e>
 8006402:	e7ec      	b.n	80063de <ADC_Enable+0x6e>
 8006404:	8000003f 	.word	0x8000003f
 8006408:	7fffffc0 	.word	0x7fffffc0
 800640c:	40022000 	.word	0x40022000
 8006410:	58026300 	.word	0x58026300
 8006414:	40022300 	.word	0x40022300
 8006418:	40022100 	.word	0x40022100

0800641c <ADC_Disable>:
{
 800641c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800641e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	0795      	lsls	r5, r2, #30
 8006424:	d502      	bpl.n	800642c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006426:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8006428:	2000      	movs	r0, #0
}
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800642e:	07d4      	lsls	r4, r2, #31
 8006430:	d529      	bpl.n	8006486 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	4604      	mov	r4, r0
 8006436:	f002 020d 	and.w	r2, r2, #13
 800643a:	2a01      	cmp	r2, #1
 800643c:	d008      	beq.n	8006450 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800643e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8006440:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006442:	f043 0310 	orr.w	r3, r3, #16
 8006446:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800644a:	4303      	orrs	r3, r0
 800644c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800644e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8006450:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006452:	2103      	movs	r1, #3
 8006454:	4a0d      	ldr	r2, [pc, #52]	; (800648c <ADC_Disable+0x70>)
 8006456:	4002      	ands	r2, r0
 8006458:	f042 0202 	orr.w	r2, r2, #2
 800645c:	609a      	str	r2, [r3, #8]
 800645e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8006460:	f7ff f9c6 	bl	80057f0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006464:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8006466:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	07d9      	lsls	r1, r3, #31
 800646c:	d50b      	bpl.n	8006486 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800646e:	f7ff f9bf 	bl	80057f0 <HAL_GetTick>
 8006472:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006474:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006476:	2802      	cmp	r0, #2
 8006478:	d902      	bls.n	8006480 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	07d2      	lsls	r2, r2, #31
 800647e:	d4de      	bmi.n	800643e <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	07db      	lsls	r3, r3, #31
 8006484:	d4f3      	bmi.n	800646e <ADC_Disable+0x52>
  return HAL_OK;
 8006486:	2000      	movs	r0, #0
}
 8006488:	bd38      	pop	{r3, r4, r5, pc}
 800648a:	bf00      	nop
 800648c:	7fffffc0 	.word	0x7fffffc0

08006490 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006490:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006492:	4a56      	ldr	r2, [pc, #344]	; (80065ec <ADC_ConfigureBoostMode+0x15c>)
{
 8006494:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006496:	6803      	ldr	r3, [r0, #0]
 8006498:	4293      	cmp	r3, r2
 800649a:	d025      	beq.n	80064e8 <ADC_ConfigureBoostMode+0x58>
 800649c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d021      	beq.n	80064e8 <ADC_ConfigureBoostMode+0x58>
 80064a4:	4b52      	ldr	r3, [pc, #328]	; (80065f0 <ADC_ConfigureBoostMode+0x160>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80064ac:	d021      	beq.n	80064f2 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80064ae:	f003 fcdf 	bl	8009e70 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80064b2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80064b4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80064b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ba:	f000 8086 	beq.w	80065ca <ADC_ConfigureBoostMode+0x13a>
 80064be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064c2:	d06a      	beq.n	800659a <ADC_ConfigureBoostMode+0x10a>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c8:	d07f      	beq.n	80065ca <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80064ca:	f7ff f9a9 	bl	8005820 <HAL_GetREVID>
 80064ce:	f241 0303 	movw	r3, #4099	; 0x1003
 80064d2:	4298      	cmp	r0, r3
 80064d4:	d84a      	bhi.n	800656c <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 80064d6:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <ADC_ConfigureBoostMode+0x164>)
 80064d8:	429d      	cmp	r5, r3
 80064da:	d929      	bls.n	8006530 <ADC_ConfigureBoostMode+0xa0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	6893      	ldr	r3, [r2, #8]
 80064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e4:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80064e8:	4b43      	ldr	r3, [pc, #268]	; (80065f8 <ADC_ConfigureBoostMode+0x168>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80064f0:	d1dd      	bne.n	80064ae <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80064f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80064f6:	f004 fddd 	bl	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80064fa:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80064fc:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80064fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006502:	d06c      	beq.n	80065de <ADC_ConfigureBoostMode+0x14e>
 8006504:	d808      	bhi.n	8006518 <ADC_ConfigureBoostMode+0x88>
 8006506:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800650a:	d050      	beq.n	80065ae <ADC_ConfigureBoostMode+0x11e>
 800650c:	d916      	bls.n	800653c <ADC_ConfigureBoostMode+0xac>
 800650e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006512:	d1da      	bne.n	80064ca <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8006514:	0945      	lsrs	r5, r0, #5
        break;
 8006516:	e7d8      	b.n	80064ca <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8006518:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800651c:	d045      	beq.n	80065aa <ADC_ConfigureBoostMode+0x11a>
 800651e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006522:	d1d2      	bne.n	80064ca <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006524:	f7ff f97c 	bl	8005820 <HAL_GetREVID>
 8006528:	f241 0303 	movw	r3, #4099	; 0x1003
 800652c:	4298      	cmp	r0, r3
 800652e:	d840      	bhi.n	80065b2 <ADC_ConfigureBoostMode+0x122>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006530:	6822      	ldr	r2, [r4, #0]
 8006532:	6893      	ldr	r3, [r2, #8]
 8006534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006538:	6093      	str	r3, [r2, #8]
}
 800653a:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 800653c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006540:	d006      	beq.n	8006550 <ADC_ConfigureBoostMode+0xc0>
 8006542:	d90a      	bls.n	800655a <ADC_ConfigureBoostMode+0xca>
 8006544:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006548:	d002      	beq.n	8006550 <ADC_ConfigureBoostMode+0xc0>
 800654a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800654e:	d1bc      	bne.n	80064ca <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006550:	0c9b      	lsrs	r3, r3, #18
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8006558:	e7b7      	b.n	80064ca <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 800655a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800655e:	d0f7      	beq.n	8006550 <ADC_ConfigureBoostMode+0xc0>
 8006560:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006564:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8006568:	d0f2      	beq.n	8006550 <ADC_ConfigureBoostMode+0xc0>
 800656a:	e7ae      	b.n	80064ca <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 800656c:	4b23      	ldr	r3, [pc, #140]	; (80065fc <ADC_ConfigureBoostMode+0x16c>)
 800656e:	429d      	cmp	r5, r3
 8006570:	d805      	bhi.n	800657e <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	6893      	ldr	r3, [r2, #8]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	6093      	str	r3, [r2, #8]
}
 800657c:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <ADC_ConfigureBoostMode+0x170>)
 8006580:	429d      	cmp	r5, r3
 8006582:	d91a      	bls.n	80065ba <ADC_ConfigureBoostMode+0x12a>
    else if (freq <= 25000000UL)
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006586:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8006588:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800658a:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 800658c:	d829      	bhi.n	80065e2 <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800658e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006596:	6093      	str	r3, [r2, #8]
}
 8006598:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 800659a:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800659c:	f7ff f940 	bl	8005820 <HAL_GetREVID>
 80065a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80065a4:	4298      	cmp	r0, r3
 80065a6:	d8e1      	bhi.n	800656c <ADC_ConfigureBoostMode+0xdc>
 80065a8:	e795      	b.n	80064d6 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 80065aa:	09c5      	lsrs	r5, r0, #7
        break;
 80065ac:	e78d      	b.n	80064ca <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 80065ae:	0905      	lsrs	r5, r0, #4
        break;
 80065b0:	e78b      	b.n	80064ca <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 80065b2:	4b12      	ldr	r3, [pc, #72]	; (80065fc <ADC_ConfigureBoostMode+0x16c>)
 80065b4:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80065b8:	d2db      	bcs.n	8006572 <ADC_ConfigureBoostMode+0xe2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80065ba:	6822      	ldr	r2, [r4, #0]
 80065bc:	6893      	ldr	r3, [r2, #8]
 80065be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c6:	6093      	str	r3, [r2, #8]
}
 80065c8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80065d0:	f7ff f926 	bl	8005820 <HAL_GetREVID>
 80065d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80065d8:	4298      	cmp	r0, r3
 80065da:	d8c7      	bhi.n	800656c <ADC_ConfigureBoostMode+0xdc>
 80065dc:	e77b      	b.n	80064d6 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 80065de:	0985      	lsrs	r5, r0, #6
        break;
 80065e0:	e773      	b.n	80064ca <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80065e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065e6:	6093      	str	r3, [r2, #8]
}
 80065e8:	bd38      	pop	{r3, r4, r5, pc}
 80065ea:	bf00      	nop
 80065ec:	40022000 	.word	0x40022000
 80065f0:	58026300 	.word	0x58026300
 80065f4:	01312d00 	.word	0x01312d00
 80065f8:	40022300 	.word	0x40022300
 80065fc:	00bebc21 	.word	0x00bebc21
 8006600:	017d7841 	.word	0x017d7841
 8006604:	02faf081 	.word	0x02faf081

08006608 <HAL_ADC_Init>:
{
 8006608:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800660a:	2300      	movs	r3, #0
{
 800660c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800660e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8006610:	2800      	cmp	r0, #0
 8006612:	f000 80d1 	beq.w	80067b8 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006616:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8006618:	4604      	mov	r4, r0
 800661a:	2d00      	cmp	r5, #0
 800661c:	f000 80bb 	beq.w	8006796 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006620:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006622:	6893      	ldr	r3, [r2, #8]
 8006624:	009d      	lsls	r5, r3, #2
 8006626:	d503      	bpl.n	8006630 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006628:	6891      	ldr	r1, [r2, #8]
 800662a:	4b72      	ldr	r3, [pc, #456]	; (80067f4 <HAL_ADC_Init+0x1ec>)
 800662c:	400b      	ands	r3, r1
 800662e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006630:	6893      	ldr	r3, [r2, #8]
 8006632:	00d8      	lsls	r0, r3, #3
 8006634:	d416      	bmi.n	8006664 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006636:	4b70      	ldr	r3, [pc, #448]	; (80067f8 <HAL_ADC_Init+0x1f0>)
 8006638:	4970      	ldr	r1, [pc, #448]	; (80067fc <HAL_ADC_Init+0x1f4>)
 800663a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800663c:	6890      	ldr	r0, [r2, #8]
 800663e:	099b      	lsrs	r3, r3, #6
 8006640:	fba1 1303 	umull	r1, r3, r1, r3
 8006644:	496e      	ldr	r1, [pc, #440]	; (8006800 <HAL_ADC_Init+0x1f8>)
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4001      	ands	r1, r0
 800664a:	3301      	adds	r3, #1
 800664c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006650:	6091      	str	r1, [r2, #8]
 8006652:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006654:	9b01      	ldr	r3, [sp, #4]
 8006656:	b12b      	cbz	r3, 8006664 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8006658:	9b01      	ldr	r3, [sp, #4]
 800665a:	3b01      	subs	r3, #1
 800665c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f9      	bne.n	8006658 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006664:	6893      	ldr	r3, [r2, #8]
 8006666:	00d9      	lsls	r1, r3, #3
 8006668:	d424      	bmi.n	80066b4 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800666a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800666c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800666e:	f043 0310 	orr.w	r3, r3, #16
 8006672:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006674:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006676:	432b      	orrs	r3, r5
 8006678:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800667a:	6893      	ldr	r3, [r2, #8]
 800667c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006680:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006682:	d11d      	bne.n	80066c0 <HAL_ADC_Init+0xb8>
 8006684:	06db      	lsls	r3, r3, #27
 8006686:	d41b      	bmi.n	80066c0 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8006688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800668a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800668e:	f043 0302 	orr.w	r3, r3, #2
 8006692:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006694:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006696:	07de      	lsls	r6, r3, #31
 8006698:	d428      	bmi.n	80066ec <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800669a:	4b5a      	ldr	r3, [pc, #360]	; (8006804 <HAL_ADC_Init+0x1fc>)
 800669c:	429a      	cmp	r2, r3
 800669e:	d017      	beq.n	80066d0 <HAL_ADC_Init+0xc8>
 80066a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d013      	beq.n	80066d0 <HAL_ADC_Init+0xc8>
 80066a8:	4b57      	ldr	r3, [pc, #348]	; (8006808 <HAL_ADC_Init+0x200>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	07d9      	lsls	r1, r3, #31
 80066ae:	d41d      	bmi.n	80066ec <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80066b0:	4a56      	ldr	r2, [pc, #344]	; (800680c <HAL_ADC_Init+0x204>)
 80066b2:	e015      	b.n	80066e0 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066b4:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066b6:	2500      	movs	r5, #0
 80066b8:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80066bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066be:	d0e1      	beq.n	8006684 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80066c2:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c4:	f043 0310 	orr.w	r3, r3, #16
}
 80066c8:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ca:	6563      	str	r3, [r4, #84]	; 0x54
}
 80066cc:	b002      	add	sp, #8
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066d0:	4a4c      	ldr	r2, [pc, #304]	; (8006804 <HAL_ADC_Init+0x1fc>)
 80066d2:	4b4f      	ldr	r3, [pc, #316]	; (8006810 <HAL_ADC_Init+0x208>)
 80066d4:	6892      	ldr	r2, [r2, #8]
 80066d6:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066d8:	4313      	orrs	r3, r2
 80066da:	07d8      	lsls	r0, r3, #31
 80066dc:	d406      	bmi.n	80066ec <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80066de:	4a4d      	ldr	r2, [pc, #308]	; (8006814 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80066e0:	6893      	ldr	r3, [r2, #8]
 80066e2:	6861      	ldr	r1, [r4, #4]
 80066e4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80066ec:	f7ff f898 	bl	8005820 <HAL_GetREVID>
 80066f0:	f241 0303 	movw	r3, #4099	; 0x1003
 80066f4:	68a1      	ldr	r1, [r4, #8]
 80066f6:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80066f8:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80066fa:	d852      	bhi.n	80067a2 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80066fc:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006700:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006702:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006704:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8006708:	4302      	orrs	r2, r0
 800670a:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800670c:	2b01      	cmp	r3, #1
 800670e:	d103      	bne.n	8006718 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006710:	6a23      	ldr	r3, [r4, #32]
 8006712:	3b01      	subs	r3, #1
 8006714:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800671a:	b123      	cbz	r3, 8006726 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800671c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006720:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006722:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006724:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	493b      	ldr	r1, [pc, #236]	; (8006818 <HAL_ADC_Init+0x210>)
 800672a:	68d8      	ldr	r0, [r3, #12]
 800672c:	4001      	ands	r1, r0
 800672e:	430a      	orrs	r2, r1
 8006730:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006738:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800673a:	d11c      	bne.n	8006776 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800673c:	0712      	lsls	r2, r2, #28
 800673e:	d41a      	bmi.n	8006776 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006740:	68d8      	ldr	r0, [r3, #12]
 8006742:	4a36      	ldr	r2, [pc, #216]	; (800681c <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006744:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006746:	4002      	ands	r2, r0
 8006748:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800674c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800674e:	430a      	orrs	r2, r1
 8006750:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006752:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8006756:	2a01      	cmp	r2, #1
 8006758:	d03a      	beq.n	80067d0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006762:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006764:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006768:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800676c:	430a      	orrs	r2, r1
 800676e:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8006770:	f7ff fe8e 	bl	8006490 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006774:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006776:	68e2      	ldr	r2, [r4, #12]
 8006778:	2a01      	cmp	r2, #1
 800677a:	d021      	beq.n	80067c0 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800677c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800677e:	f022 020f 	bic.w	r2, r2, #15
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006784:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8006786:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006788:	f023 0303 	bic.w	r3, r3, #3
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006792:	b002      	add	sp, #8
 8006794:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8006796:	f7fe fbf9 	bl	8004f8c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800679a:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 800679c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80067a0:	e73e      	b.n	8006620 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80067a2:	2910      	cmp	r1, #16
 80067a4:	d1aa      	bne.n	80066fc <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80067a6:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80067a8:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80067aa:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80067ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067b0:	430a      	orrs	r2, r1
 80067b2:	f042 021c 	orr.w	r2, r2, #28
 80067b6:	e7a9      	b.n	800670c <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 80067b8:	2501      	movs	r5, #1
}
 80067ba:	4628      	mov	r0, r5
 80067bc:	b002      	add	sp, #8
 80067be:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067c2:	69a2      	ldr	r2, [r4, #24]
 80067c4:	f021 010f 	bic.w	r1, r1, #15
 80067c8:	3a01      	subs	r2, #1
 80067ca:	430a      	orrs	r2, r1
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
 80067ce:	e7d9      	b.n	8006784 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80067d0:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80067d4:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80067d6:	3901      	subs	r1, #1
 80067d8:	6918      	ldr	r0, [r3, #16]
 80067da:	4332      	orrs	r2, r6
 80067dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80067e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067e2:	430a      	orrs	r2, r1
 80067e4:	490e      	ldr	r1, [pc, #56]	; (8006820 <HAL_ADC_Init+0x218>)
 80067e6:	4001      	ands	r1, r0
 80067e8:	430a      	orrs	r2, r1
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	611a      	str	r2, [r3, #16]
 80067f0:	e7b7      	b.n	8006762 <HAL_ADC_Init+0x15a>
 80067f2:	bf00      	nop
 80067f4:	5fffffc0 	.word	0x5fffffc0
 80067f8:	2400030c 	.word	0x2400030c
 80067fc:	053e2d63 	.word	0x053e2d63
 8006800:	6fffffc0 	.word	0x6fffffc0
 8006804:	40022000 	.word	0x40022000
 8006808:	58026000 	.word	0x58026000
 800680c:	58026300 	.word	0x58026300
 8006810:	40022100 	.word	0x40022100
 8006814:	40022300 	.word	0x40022300
 8006818:	fff0c003 	.word	0xfff0c003
 800681c:	ffffbffc 	.word	0xffffbffc
 8006820:	fc00f81e 	.word	0xfc00f81e

08006824 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006826:	2300      	movs	r3, #0
{
 8006828:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800682a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800682c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006830:	2b01      	cmp	r3, #1
 8006832:	d040      	beq.n	80068b6 <HAL_ADCEx_Calibration_Start+0x92>
 8006834:	2301      	movs	r3, #1
 8006836:	4604      	mov	r4, r0
 8006838:	460e      	mov	r6, r1
 800683a:	4615      	mov	r5, r2
 800683c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006840:	f7ff fdec 	bl	800641c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006844:	b9e8      	cbnz	r0, 8006882 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006846:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8006848:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HAL_ADCEx_Calibration_Start+0x98>)
 800684e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 8006852:	4d1b      	ldr	r5, [pc, #108]	; (80068c0 <HAL_ADCEx_Calibration_Start+0x9c>)
 8006854:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006856:	4f1b      	ldr	r7, [pc, #108]	; (80068c4 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	689e      	ldr	r6, [r3, #8]
 8006862:	4035      	ands	r5, r6
 8006864:	4315      	orrs	r5, r2
 8006866:	430d      	orrs	r5, r1
 8006868:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800686c:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	2a00      	cmp	r2, #0
 8006872:	db0f      	blt.n	8006894 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006874:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6563      	str	r3, [r4, #84]	; 0x54
 8006880:	e003      	b.n	800688a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006882:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006884:	f043 0310 	orr.w	r3, r3, #16
 8006888:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800688a:	2300      	movs	r3, #0
 800688c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8006890:	b003      	add	sp, #12
 8006892:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8006894:	9a01      	ldr	r2, [sp, #4]
 8006896:	3201      	adds	r2, #1
 8006898:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	42ba      	cmp	r2, r7
 800689e:	d3e6      	bcc.n	800686e <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 80068a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80068a2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80068a4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80068a6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80068aa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80068ae:	f043 0310 	orr.w	r3, r3, #16
 80068b2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80068b4:	e7ec      	b.n	8006890 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80068b6:	2002      	movs	r0, #2
}
 80068b8:	b003      	add	sp, #12
 80068ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068bc:	ffffeefd 	.word	0xffffeefd
 80068c0:	3ffeffc0 	.word	0x3ffeffc0
 80068c4:	25c3f800 	.word	0x25c3f800

080068c8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80068cc:	f8d0 8000 	ldr.w	r8, [r0]
{
 80068d0:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80068d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80068d6:	f015 0504 	ands.w	r5, r5, #4
 80068da:	d117      	bne.n	800690c <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80068dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80068e0:	4604      	mov	r4, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d012      	beq.n	800690c <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80068e6:	4b2d      	ldr	r3, [pc, #180]	; (800699c <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 80068e8:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80068ec:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80068ee:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80068f0:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 80068f2:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80068f6:	d00d      	beq.n	8006914 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f8:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80068fa:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 80068fc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006900:	f043 0320 	orr.w	r3, r3, #32
 8006904:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8006906:	b01a      	add	sp, #104	; 0x68
 8006908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800690c:	2002      	movs	r0, #2
}
 800690e:	b01a      	add	sp, #104	; 0x68
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006914:	4d22      	ldr	r5, [pc, #136]	; (80069a0 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8006916:	460e      	mov	r6, r1
 8006918:	4617      	mov	r7, r2
 800691a:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 800691c:	f7ff fd28 	bl	8006370 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006920:	b128      	cbz	r0, 800692e <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8006922:	2300      	movs	r3, #0
 8006924:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006928:	b01a      	add	sp, #104	; 0x68
 800692a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800692e:	a801      	add	r0, sp, #4
 8006930:	f7ff fd1e 	bl	8006370 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8006934:	2800      	cmp	r0, #0
 8006936:	d1f4      	bne.n	8006922 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8006938:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800693a:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800693c:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 800693e:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006940:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8006944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006948:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 800694a:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800694c:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800694e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006950:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006952:	4b16      	ldr	r3, [pc, #88]	; (80069ac <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8006954:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006956:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8006958:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800695a:	d01d      	beq.n	8006998 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 800695c:	45ac      	cmp	ip, r5
 800695e:	d01b      	beq.n	8006998 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8006960:	4914      	ldr	r1, [pc, #80]	; (80069b4 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006962:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006964:	463b      	mov	r3, r7
 8006966:	4632      	mov	r2, r6
 8006968:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800696a:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 800696e:	2500      	movs	r5, #0
 8006970:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006974:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006978:	f045 0510 	orr.w	r5, r5, #16
 800697c:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006980:	f000 fe5c 	bl	800763c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006984:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8006988:	6891      	ldr	r1, [r2, #8]
 800698a:	400b      	ands	r3, r1
 800698c:	f043 0304 	orr.w	r3, r3, #4
 8006990:	6093      	str	r3, [r2, #8]
}
 8006992:	b01a      	add	sp, #104	; 0x68
 8006994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006998:	4908      	ldr	r1, [pc, #32]	; (80069bc <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 800699a:	e7e2      	b.n	8006962 <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 800699c:	40022000 	.word	0x40022000
 80069a0:	40022100 	.word	0x40022100
 80069a4:	fffff0fe 	.word	0xfffff0fe
 80069a8:	08005b15 	.word	0x08005b15
 80069ac:	08005885 	.word	0x08005885
 80069b0:	08005b81 	.word	0x08005b81
 80069b4:	58026300 	.word	0x58026300
 80069b8:	7fffffc0 	.word	0x7fffffc0
 80069bc:	40022300 	.word	0x40022300

080069c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop

080069c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <HAL_ADCEx_EndOfSamplingCallback>:
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop

080069d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80069d4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069d6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80069da:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80069dc:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80069de:	2a01      	cmp	r2, #1
 80069e0:	d04d      	beq.n	8006a7e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80069e2:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069e4:	4c2b      	ldr	r4, [pc, #172]	; (8006a94 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80069e6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80069e8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069ea:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80069ec:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069ee:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80069f0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80069f4:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069f6:	d008      	beq.n	8006a0a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069f8:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80069fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069fe:	f041 0120 	orr.w	r1, r1, #32
 8006a02:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006a04:	b01a      	add	sp, #104	; 0x68
 8006a06:	bcf0      	pop	{r4, r5, r6, r7}
 8006a08:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a0a:	4c23      	ldr	r4, [pc, #140]	; (8006a98 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006a0c:	68a2      	ldr	r2, [r4, #8]
 8006a0e:	0752      	lsls	r2, r2, #29
 8006a10:	d50b      	bpl.n	8006a2a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006a12:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8006a16:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a18:	f042 0220 	orr.w	r2, r2, #32
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8006a24:	b01a      	add	sp, #104	; 0x68
 8006a26:	bcf0      	pop	{r4, r5, r6, r7}
 8006a28:	4770      	bx	lr
 8006a2a:	68a8      	ldr	r0, [r5, #8]
 8006a2c:	f010 0004 	ands.w	r0, r0, #4
 8006a30:	d1f0      	bne.n	8006a14 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a32:	b1c6      	cbz	r6, 8006a66 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006a34:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006aa0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8006a38:	684f      	ldr	r7, [r1, #4]
 8006a3a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006a3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a42:	433a      	orrs	r2, r7
 8006a44:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a48:	68ad      	ldr	r5, [r5, #8]
 8006a4a:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a4c:	432a      	orrs	r2, r5
 8006a4e:	07d4      	lsls	r4, r2, #31
 8006a50:	d413      	bmi.n	8006a7a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 8006a52:	688a      	ldr	r2, [r1, #8]
 8006a54:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006a58:	4316      	orrs	r6, r2
 8006a5a:	4a10      	ldr	r2, [pc, #64]	; (8006a9c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	4316      	orrs	r6, r2
 8006a60:	f8cc 6008 	str.w	r6, [ip, #8]
 8006a64:	e7db      	b.n	8006a1e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006a66:	490e      	ldr	r1, [pc, #56]	; (8006aa0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8006a68:	688a      	ldr	r2, [r1, #8]
 8006a6a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a6e:	608a      	str	r2, [r1, #8]
 8006a70:	68a8      	ldr	r0, [r5, #8]
 8006a72:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a74:	4302      	orrs	r2, r0
 8006a76:	07d0      	lsls	r0, r2, #31
 8006a78:	d505      	bpl.n	8006a86 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e7cf      	b.n	8006a1e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8006a7e:	2002      	movs	r0, #2
}
 8006a80:	b01a      	add	sp, #104	; 0x68
 8006a82:	bcf0      	pop	{r4, r5, r6, r7}
 8006a84:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a86:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a88:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8006a8c:	4022      	ands	r2, r4
 8006a8e:	608a      	str	r2, [r1, #8]
 8006a90:	e7c5      	b.n	8006a1e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006a92:	bf00      	nop
 8006a94:	40022000 	.word	0x40022000
 8006a98:	40022100 	.word	0x40022100
 8006a9c:	fffff0e0 	.word	0xfffff0e0
 8006aa0:	40022300 	.word	0x40022300

08006aa4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aa4:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aa6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006aaa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aae:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ab0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ab4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006aba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006abc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006abe:	4770      	bx	lr
 8006ac0:	e000ed00 	.word	0xe000ed00
 8006ac4:	05fa0000 	.word	0x05fa0000

08006ac8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ac8:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <HAL_NVIC_SetPriority+0x70>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ad0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ad6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ada:	f1be 0f04 	cmp.w	lr, #4
 8006ade:	bf28      	it	cs
 8006ae0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae4:	f1bc 0f06 	cmp.w	ip, #6
 8006ae8:	d91a      	bls.n	8006b20 <HAL_NVIC_SetPriority+0x58>
 8006aea:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aec:	f04f 3cff 	mov.w	ip, #4294967295
 8006af0:	fa0c fc03 	lsl.w	ip, ip, r3
 8006af4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006afc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006afe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006b02:	ea21 010c 	bic.w	r1, r1, ip
 8006b06:	fa01 f103 	lsl.w	r1, r1, r3
 8006b0a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006b0e:	db0a      	blt.n	8006b26 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b10:	0109      	lsls	r1, r1, #4
 8006b12:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <HAL_NVIC_SetPriority+0x74>)
 8006b14:	b2c9      	uxtb	r1, r1
 8006b16:	4403      	add	r3, r0
 8006b18:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b20:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b22:	4613      	mov	r3, r2
 8006b24:	e7e8      	b.n	8006af8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b26:	f000 000f 	and.w	r0, r0, #15
 8006b2a:	0109      	lsls	r1, r1, #4
 8006b2c:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <HAL_NVIC_SetPriority+0x78>)
 8006b2e:	b2c9      	uxtb	r1, r1
 8006b30:	4403      	add	r3, r0
 8006b32:	7619      	strb	r1, [r3, #24]
 8006b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b38:	e000ed00 	.word	0xe000ed00
 8006b3c:	e000e100 	.word	0xe000e100
 8006b40:	e000ecfc 	.word	0xe000ecfc

08006b44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006b44:	2800      	cmp	r0, #0
 8006b46:	db07      	blt.n	8006b58 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f000 011f 	and.w	r1, r0, #31
 8006b4e:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <HAL_NVIC_EnableIRQ+0x18>)
 8006b50:	0940      	lsrs	r0, r0, #5
 8006b52:	408b      	lsls	r3, r1
 8006b54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	e000e100 	.word	0xe000e100

08006b60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b60:	1e43      	subs	r3, r0, #1
 8006b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b66:	d20c      	bcs.n	8006b82 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b68:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b6c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b6e:	4906      	ldr	r1, [pc, #24]	; (8006b88 <HAL_SYSTICK_Config+0x28>)
 8006b70:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b74:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b76:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b78:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b7c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b7e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006b82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	e000ed00 	.word	0xe000ed00

08006b8c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8006b8c:	b188      	cbz	r0, 8006bb2 <HAL_DAC_Init+0x26>
{
 8006b8e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006b90:	7903      	ldrb	r3, [r0, #4]
 8006b92:	4604      	mov	r4, r0
 8006b94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b98:	b13b      	cbz	r3, 8006baa <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006b9a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b9c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006b9e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006ba0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8006ba2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006ba4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006ba6:	7122      	strb	r2, [r4, #4]
}
 8006ba8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006baa:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006bac:	f7fe fa96 	bl	80050dc <HAL_DAC_MspInit>
 8006bb0:	e7f3      	b.n	8006b9a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8006bb2:	2001      	movs	r0, #1
}
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop

08006bb8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006bb8:	7942      	ldrb	r2, [r0, #5]
 8006bba:	2a01      	cmp	r2, #1
 8006bbc:	d02e      	beq.n	8006c1c <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006bc4:	6800      	ldr	r0, [r0, #0]
 8006bc6:	2201      	movs	r2, #1
{
 8006bc8:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8006bca:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8006bce:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8006bd2:	6804      	ldr	r4, [r0, #0]
 8006bd4:	fa02 f20e 	lsl.w	r2, r2, lr
 8006bd8:	4322      	orrs	r2, r4
 8006bda:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006bdc:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8006bde:	b969      	cbnz	r1, 8006bfc <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006be0:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 8006be4:	4562      	cmp	r2, ip
 8006be6:	d103      	bne.n	8006bf0 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006be8:	6842      	ldr	r2, [r0, #4]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006bf0:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006bf2:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 8006bf4:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8006bf6:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8006bf8:	715a      	strb	r2, [r3, #5]
}
 8006bfa:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006bfc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006c00:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 8006c04:	4562      	cmp	r2, ip
 8006c06:	d1f3      	bne.n	8006bf0 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006c08:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8006c0a:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006c0c:	f042 0202 	orr.w	r2, r2, #2
 8006c10:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8006c12:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006c14:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8006c16:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8006c18:	715a      	strb	r2, [r3, #5]
}
 8006c1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8006c1c:	2002      	movs	r0, #2
}
 8006c1e:	4770      	bx	lr

08006c20 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c24:	7940      	ldrb	r0, [r0, #5]
{
 8006c26:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8006c28:	2801      	cmp	r0, #1
 8006c2a:	d053      	beq.n	8006cd4 <HAL_DAC_Start_DMA+0xb4>
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006c32:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8006c34:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c36:	2202      	movs	r2, #2
 8006c38:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8006c3a:	bb3d      	cbnz	r5, 8006c8c <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006c3c:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006c3e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006c40:	4a37      	ldr	r2, [pc, #220]	; (8006d20 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006c42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d28 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006c46:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006c48:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006c4a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006c4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006c52:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8006d2c <HAL_DAC_Start_DMA+0x10c>
 8006c56:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006c5a:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8006c5c:	d042      	beq.n	8006ce4 <HAL_DAC_Start_DMA+0xc4>
 8006c5e:	2f08      	cmp	r7, #8
 8006c60:	d03d      	beq.n	8006cde <HAL_DAC_Start_DMA+0xbe>
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	d038      	beq.n	8006cd8 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006c66:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006c68:	6837      	ldr	r7, [r6, #0]
 8006c6a:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8006c6e:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006c70:	f000 fce4 	bl	800763c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006c74:	2300      	movs	r3, #0
 8006c76:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8006c78:	bb38      	cbnz	r0, 8006cca <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	f005 0110 	and.w	r1, r5, #16
 8006c80:	2501      	movs	r5, #1
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	408d      	lsls	r5, r1
 8006c86:	4315      	orrs	r5, r2
 8006c88:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006c8c:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8006c8e:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006c90:	4a24      	ldr	r2, [pc, #144]	; (8006d24 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006c92:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8006d30 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006c96:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006c98:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006c9a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006c9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006ca2:	f8df c090 	ldr.w	ip, [pc, #144]	; 8006d34 <HAL_DAC_Start_DMA+0x114>
 8006ca6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006caa:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8006cac:	d02f      	beq.n	8006d0e <HAL_DAC_Start_DMA+0xee>
 8006cae:	2f08      	cmp	r7, #8
 8006cb0:	d024      	beq.n	8006cfc <HAL_DAC_Start_DMA+0xdc>
 8006cb2:	b1d7      	cbz	r7, 8006cea <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006cb4:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006cb6:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006cb8:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006cbc:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006cbe:	f000 fcbd 	bl	800763c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d0d7      	beq.n	8006c7a <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	6123      	str	r3, [r4, #16]
}
 8006cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8006cd4:	2002      	movs	r0, #2
}
 8006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006cd8:	f106 0208 	add.w	r2, r6, #8
        break;
 8006cdc:	e7c4      	b.n	8006c68 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006cde:	f106 0210 	add.w	r2, r6, #16
        break;
 8006ce2:	e7c1      	b.n	8006c68 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006ce4:	f106 020c 	add.w	r2, r6, #12
        break;
 8006ce8:	e7be      	b.n	8006c68 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006cea:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006cec:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006cf0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006cf4:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006cf6:	f000 fca1 	bl	800763c <HAL_DMA_Start_IT>
 8006cfa:	e7e2      	b.n	8006cc2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006cfc:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006cfe:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d02:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006d06:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006d08:	f000 fc98 	bl	800763c <HAL_DMA_Start_IT>
 8006d0c:	e7d9      	b.n	8006cc2 <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d0e:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006d10:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d14:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8006d18:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006d1a:	f000 fc8f 	bl	800763c <HAL_DMA_Start_IT>
 8006d1e:	e7d0      	b.n	8006cc2 <HAL_DAC_Start_DMA+0xa2>
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006f55 	.word	0x08006f55
 8006d28:	08006d79 	.word	0x08006d79
 8006d2c:	08006d89 	.word	0x08006d89
 8006d30:	08006f69 	.word	0x08006f69
 8006d34:	08006f79 	.word	0x08006f79

08006d38 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006d38:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006d3a:	6800      	ldr	r0, [r0, #0]
{
 8006d3c:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8006d3e:	2400      	movs	r4, #0
 8006d40:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8006d42:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8006d44:	b951      	cbnz	r1, 8006d5c <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006d46:	9901      	ldr	r1, [sp, #4]
 8006d48:	3108      	adds	r1, #8
 8006d4a:	440a      	add	r2, r1
 8006d4c:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006d4e:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8006d50:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8006d52:	6013      	str	r3, [r2, #0]
}
 8006d54:	b003      	add	sp, #12
 8006d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006d5c:	9901      	ldr	r1, [sp, #4]
 8006d5e:	3114      	adds	r1, #20
 8006d60:	440a      	add	r2, r1
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	e7f3      	b.n	8006d4e <HAL_DAC_SetValue+0x16>
 8006d66:	bf00      	nop

08006d68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006d68:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d6a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7fc fb17 	bl	80033a0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006d72:	2301      	movs	r3, #1
 8006d74:	7123      	strb	r3, [r4, #4]
}
 8006d76:	bd10      	pop	{r4, pc}

08006d78 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006d78:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006d7a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006d7c:	f7fc fb22 	bl	80033c4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006d80:	bd08      	pop	{r3, pc}
 8006d82:	bf00      	nop

08006d84 <HAL_DAC_ErrorCallbackCh1>:
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop

08006d88 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006d88:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006d8c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006d8e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006d90:	f043 0304 	orr.w	r3, r3, #4
 8006d94:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006d96:	f7ff fff5 	bl	8006d84 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	7123      	strb	r3, [r4, #4]
}
 8006d9e:	bd10      	pop	{r4, pc}

08006da0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006da4:	6803      	ldr	r3, [r0, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	0491      	lsls	r1, r2, #18
{
 8006daa:	b510      	push	{r4, lr}
 8006dac:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006dae:	d502      	bpl.n	8006db6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db2:	0492      	lsls	r2, r2, #18
 8006db4:	d418      	bmi.n	8006de8 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	0091      	lsls	r1, r2, #2
 8006dba:	d502      	bpl.n	8006dc2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dbe:	0092      	lsls	r2, r2, #2
 8006dc0:	d400      	bmi.n	8006dc4 <HAL_DAC_IRQHandler+0x20>
}
 8006dc2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8006dc4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006dc6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006dca:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8006dcc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006dce:	6922      	ldr	r2, [r4, #16]
 8006dd0:	f042 0202 	orr.w	r2, r2, #2
 8006dd4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006dd6:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8006dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006de2:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006de4:	f000 b8d4 	b.w	8006f90 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8006de8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8006dee:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006df0:	6902      	ldr	r2, [r0, #16]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006df8:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e00:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006e02:	f7ff ffcd 	bl	8006da0 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	e7d5      	b.n	8006db6 <HAL_DAC_IRQHandler+0x12>
 8006e0a:	bf00      	nop

08006e0c <HAL_DAC_ConfigChannel>:
{
 8006e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8006e10:	7943      	ldrb	r3, [r0, #5]
{
 8006e12:	460d      	mov	r5, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006e14:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	f000 808d 	beq.w	8006f36 <HAL_DAC_ConfigChannel+0x12a>
 8006e1c:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e1e:	2904      	cmp	r1, #4
 8006e20:	4604      	mov	r4, r0
 8006e22:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8006e24:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e26:	f04f 0302 	mov.w	r3, #2
 8006e2a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e2c:	d045      	beq.n	8006eba <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006e2e:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8006e32:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e34:	692b      	ldr	r3, [r5, #16]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d108      	bne.n	8006e4c <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e3a:	261f      	movs	r6, #31
    tmpreg1 = hdac->Instance->CCR;
 8006e3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e3e:	4096      	lsls	r6, r2
 8006e40:	ea23 0606 	bic.w	r6, r3, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e44:	696b      	ldr	r3, [r5, #20]
 8006e46:	4093      	lsls	r3, r2
 8006e48:	4333      	orrs	r3, r6
    hdac->Instance->CCR = tmpreg1;
 8006e4a:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006e4c:	2607      	movs	r6, #7
 8006e4e:	fa06 f302 	lsl.w	r3, r6, r2
  tmpreg1 = hdac->Instance->MCR;
 8006e52:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006e54:	ea26 0603 	bic.w	r6, r6, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006e58:	e9d5 7302 	ldrd	r7, r3, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d028      	beq.n	8006eb2 <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d028      	beq.n	8006eb6 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006e64:	fab7 f387 	clz	r3, r7
 8006e68:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006e6a:	433b      	orrs	r3, r7
 8006e6c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e6e:	6869      	ldr	r1, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e70:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e74:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e76:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e78:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e7a:	4333      	orrs	r3, r6
  hdac->Instance->MCR = tmpreg1;
 8006e7c:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e7e:	6803      	ldr	r3, [r0, #0]
 8006e80:	ea23 0305 	bic.w	r3, r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006e84:	f640 75fe 	movw	r5, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e88:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006e8a:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8006e8c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006e8e:	ea23 0305 	bic.w	r3, r3, r5
  hdac->State = HAL_DAC_STATE_READY;
 8006e92:	2501      	movs	r5, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e94:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006e96:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8006e98:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006e9a:	fa01 f302 	lsl.w	r3, r1, r2
 8006e9e:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 8006ea0:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006ea2:	ea22 0203 	bic.w	r2, r2, r3
 8006ea6:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8006ea8:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8006eaa:	7125      	strb	r5, [r4, #4]
  __HAL_UNLOCK(hdac);
 8006eac:	7161      	strb	r1, [r4, #5]
}
 8006eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e7d9      	b.n	8006e6a <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e7d7      	b.n	8006e6a <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8006eba:	f7fe fc99 	bl	80057f0 <HAL_GetTick>
 8006ebe:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8006ec0:	b9c6      	cbnz	r6, 8006ef4 <HAL_DAC_ConfigChannel+0xe8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006ec2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8006f4c <HAL_DAC_ConfigChannel+0x140>
 8006ec6:	e004      	b.n	8006ed2 <HAL_DAC_ConfigChannel+0xc6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006ec8:	f7fe fc92 	bl	80057f0 <HAL_GetTick>
 8006ecc:	1bc3      	subs	r3, r0, r7
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d834      	bhi.n	8006f3c <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed6:	ea13 0f08 	tst.w	r3, r8
 8006eda:	d1f5      	bne.n	8006ec8 <HAL_DAC_ConfigChannel+0xbc>
      HAL_Delay(1);
 8006edc:	2001      	movs	r0, #1
 8006ede:	f7fe fc8d 	bl	80057fc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	69ab      	ldr	r3, [r5, #24]
 8006ee6:	6403      	str	r3, [r0, #64]	; 0x40
 8006ee8:	e00e      	b.n	8006f08 <HAL_DAC_ConfigChannel+0xfc>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006eea:	f7fe fc81 	bl	80057f0 <HAL_GetTick>
 8006eee:	1bc3      	subs	r3, r0, r7
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d823      	bhi.n	8006f3c <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dbf6      	blt.n	8006eea <HAL_DAC_ConfigChannel+0xde>
      HAL_Delay(1U);
 8006efc:	2001      	movs	r0, #1
 8006efe:	f7fe fc7d 	bl	80057fc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006f02:	6820      	ldr	r0, [r4, #0]
 8006f04:	69ab      	ldr	r3, [r5, #24]
 8006f06:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006f08:	f006 0210 	and.w	r2, r6, #16
 8006f0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006f10:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006f12:	4091      	lsls	r1, r2
 8006f14:	ea23 0301 	bic.w	r3, r3, r1
 8006f18:	69e9      	ldr	r1, [r5, #28]
 8006f1a:	4091      	lsls	r1, r2
 8006f1c:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006f1e:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006f20:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006f22:	4091      	lsls	r1, r2
 8006f24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006f26:	ea23 0301 	bic.w	r3, r3, r1
 8006f2a:	6a29      	ldr	r1, [r5, #32]
 8006f2c:	4091      	lsls	r1, r2
 8006f2e:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006f30:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006f32:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006f34:	e77e      	b.n	8006e34 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8006f36:	2002      	movs	r0, #2
}
 8006f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f3c:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006f3e:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f40:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8006f44:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f46:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006f48:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8006f4a:	e7b0      	b.n	8006eae <HAL_DAC_ConfigChannel+0xa2>
 8006f4c:	20008000 	.word	0x20008000

08006f50 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006f54:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f56:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fff9 	bl	8006f50 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	7123      	strb	r3, [r4, #4]
}
 8006f62:	bd10      	pop	{r4, pc}

08006f64 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop

08006f68 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006f68:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006f6a:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006f6c:	f7ff fffa 	bl	8006f64 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006f70:	bd08      	pop	{r3, pc}
 8006f72:	bf00      	nop

08006f74 <HAL_DACEx_ErrorCallbackCh2>:
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop

08006f78 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006f78:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006f7c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006f7e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006f80:	f043 0304 	orr.w	r3, r3, #4
 8006f84:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006f86:	f7ff fff5 	bl	8006f74 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	7123      	strb	r3, [r4, #4]
}
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop

08006f94 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f94:	6802      	ldr	r2, [r0, #0]
 8006f96:	4b34      	ldr	r3, [pc, #208]	; (8007068 <DMA_CalcBaseAndBitshift+0xd4>)
 8006f98:	4934      	ldr	r1, [pc, #208]	; (800706c <DMA_CalcBaseAndBitshift+0xd8>)
{
 8006f9a:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f9c:	4d34      	ldr	r5, [pc, #208]	; (8007070 <DMA_CalcBaseAndBitshift+0xdc>)
 8006f9e:	4c35      	ldr	r4, [pc, #212]	; (8007074 <DMA_CalcBaseAndBitshift+0xe0>)
 8006fa0:	42aa      	cmp	r2, r5
 8006fa2:	bf18      	it	ne
 8006fa4:	429a      	cmpne	r2, r3
 8006fa6:	bf0c      	ite	eq
 8006fa8:	2301      	moveq	r3, #1
 8006faa:	2300      	movne	r3, #0
 8006fac:	428a      	cmp	r2, r1
 8006fae:	bf08      	it	eq
 8006fb0:	f043 0301 	orreq.w	r3, r3, #1
 8006fb4:	3130      	adds	r1, #48	; 0x30
 8006fb6:	42a2      	cmp	r2, r4
 8006fb8:	bf08      	it	eq
 8006fba:	f043 0301 	orreq.w	r3, r3, #1
 8006fbe:	3430      	adds	r4, #48	; 0x30
 8006fc0:	428a      	cmp	r2, r1
 8006fc2:	bf08      	it	eq
 8006fc4:	f043 0301 	orreq.w	r3, r3, #1
 8006fc8:	3130      	adds	r1, #48	; 0x30
 8006fca:	42a2      	cmp	r2, r4
 8006fcc:	bf08      	it	eq
 8006fce:	f043 0301 	orreq.w	r3, r3, #1
 8006fd2:	3430      	adds	r4, #48	; 0x30
 8006fd4:	428a      	cmp	r2, r1
 8006fd6:	bf08      	it	eq
 8006fd8:	f043 0301 	orreq.w	r3, r3, #1
 8006fdc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8006fe0:	42a2      	cmp	r2, r4
 8006fe2:	bf08      	it	eq
 8006fe4:	f043 0301 	orreq.w	r3, r3, #1
 8006fe8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8006fec:	428a      	cmp	r2, r1
 8006fee:	bf08      	it	eq
 8006ff0:	f043 0301 	orreq.w	r3, r3, #1
 8006ff4:	3130      	adds	r1, #48	; 0x30
 8006ff6:	42a2      	cmp	r2, r4
 8006ff8:	bf08      	it	eq
 8006ffa:	f043 0301 	orreq.w	r3, r3, #1
 8006ffe:	3430      	adds	r4, #48	; 0x30
 8007000:	428a      	cmp	r2, r1
 8007002:	bf08      	it	eq
 8007004:	f043 0301 	orreq.w	r3, r3, #1
 8007008:	3130      	adds	r1, #48	; 0x30
 800700a:	42a2      	cmp	r2, r4
 800700c:	bf08      	it	eq
 800700e:	f043 0301 	orreq.w	r3, r3, #1
 8007012:	3430      	adds	r4, #48	; 0x30
 8007014:	428a      	cmp	r2, r1
 8007016:	bf08      	it	eq
 8007018:	f043 0301 	orreq.w	r3, r3, #1
 800701c:	3130      	adds	r1, #48	; 0x30
 800701e:	42a2      	cmp	r2, r4
 8007020:	bf08      	it	eq
 8007022:	f043 0301 	orreq.w	r3, r3, #1
 8007026:	428a      	cmp	r2, r1
 8007028:	bf08      	it	eq
 800702a:	f043 0301 	orreq.w	r3, r3, #1
 800702e:	b913      	cbnz	r3, 8007036 <DMA_CalcBaseAndBitshift+0xa2>
 8007030:	4b11      	ldr	r3, [pc, #68]	; (8007078 <DMA_CalcBaseAndBitshift+0xe4>)
 8007032:	429a      	cmp	r2, r3
 8007034:	d113      	bne.n	800705e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007036:	b2d3      	uxtb	r3, r2
 8007038:	4910      	ldr	r1, [pc, #64]	; (800707c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800703a:	4c11      	ldr	r4, [pc, #68]	; (8007080 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800703c:	3b10      	subs	r3, #16
 800703e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8007042:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007046:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800704a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800704e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007050:	bf88      	it	hi
 8007052:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007054:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007056:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8007058:	4618      	mov	r0, r3
 800705a:	bc30      	pop	{r4, r5}
 800705c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800705e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8007062:	6583      	str	r3, [r0, #88]	; 0x58
 8007064:	e7f8      	b.n	8007058 <DMA_CalcBaseAndBitshift+0xc4>
 8007066:	bf00      	nop
 8007068:	40020010 	.word	0x40020010
 800706c:	40020040 	.word	0x40020040
 8007070:	40020028 	.word	0x40020028
 8007074:	40020058 	.word	0x40020058
 8007078:	400204b8 	.word	0x400204b8
 800707c:	aaaaaaab 	.word	0xaaaaaaab
 8007080:	0801a0ec 	.word	0x0801a0ec
 8007084:	fffffc00 	.word	0xfffffc00

08007088 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007088:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800708a:	4a29      	ldr	r2, [pc, #164]	; (8007130 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800708c:	4929      	ldr	r1, [pc, #164]	; (8007134 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800708e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007090:	4d29      	ldr	r5, [pc, #164]	; (8007138 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8007092:	4c2a      	ldr	r4, [pc, #168]	; (800713c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8007094:	42ab      	cmp	r3, r5
 8007096:	bf18      	it	ne
 8007098:	4293      	cmpne	r3, r2
 800709a:	bf0c      	ite	eq
 800709c:	2201      	moveq	r2, #1
 800709e:	2200      	movne	r2, #0
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf08      	it	eq
 80070a4:	f042 0201 	orreq.w	r2, r2, #1
 80070a8:	3128      	adds	r1, #40	; 0x28
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	bf08      	it	eq
 80070ae:	f042 0201 	orreq.w	r2, r2, #1
 80070b2:	3428      	adds	r4, #40	; 0x28
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf08      	it	eq
 80070b8:	f042 0201 	orreq.w	r2, r2, #1
 80070bc:	3128      	adds	r1, #40	; 0x28
 80070be:	42a3      	cmp	r3, r4
 80070c0:	bf08      	it	eq
 80070c2:	f042 0201 	orreq.w	r2, r2, #1
 80070c6:	428b      	cmp	r3, r1
 80070c8:	bf08      	it	eq
 80070ca:	f042 0201 	orreq.w	r2, r2, #1
 80070ce:	b912      	cbnz	r2, 80070d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d113      	bne.n	80070fe <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	4c1a      	ldr	r4, [pc, #104]	; (8007144 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070da:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070dc:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070de:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070e0:	4d1a      	ldr	r5, [pc, #104]	; (800714c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070e2:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070e6:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070e8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070ec:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070f0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070f2:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070f6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070f8:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80070fa:	bc30      	pop	{r4, r5}
 80070fc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070fe:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007100:	4913      	ldr	r1, [pc, #76]	; (8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007102:	4c14      	ldr	r4, [pc, #80]	; (8007154 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007104:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007106:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007108:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800710a:	fba4 2302 	umull	r2, r3, r4, r2
 800710e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007112:	d800      	bhi.n	8007116 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8007114:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007116:	4a10      	ldr	r2, [pc, #64]	; (8007158 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007118:	f003 051f 	and.w	r5, r3, #31
 800711c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800711e:	4c0f      	ldr	r4, [pc, #60]	; (800715c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007120:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007122:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007124:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007126:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007128:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800712a:	6602      	str	r2, [r0, #96]	; 0x60
}
 800712c:	e7e5      	b.n	80070fa <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800712e:	bf00      	nop
 8007130:	58025408 	.word	0x58025408
 8007134:	58025430 	.word	0x58025430
 8007138:	5802541c 	.word	0x5802541c
 800713c:	58025444 	.word	0x58025444
 8007140:	58025494 	.word	0x58025494
 8007144:	cccccccd 	.word	0xcccccccd
 8007148:	16009600 	.word	0x16009600
 800714c:	58025880 	.word	0x58025880
 8007150:	bffdfbf0 	.word	0xbffdfbf0
 8007154:	aaaaaaab 	.word	0xaaaaaaab
 8007158:	10008200 	.word	0x10008200
 800715c:	40020880 	.word	0x40020880

08007160 <HAL_DMA_Init>:
{
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007164:	f7fe fb44 	bl	80057f0 <HAL_GetTick>
  if(hdma == NULL)
 8007168:	2c00      	cmp	r4, #0
 800716a:	f000 8177 	beq.w	800745c <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	4605      	mov	r5, r0
 8007172:	4a92      	ldr	r2, [pc, #584]	; (80073bc <HAL_DMA_Init+0x25c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d048      	beq.n	800720a <HAL_DMA_Init+0xaa>
 8007178:	3218      	adds	r2, #24
 800717a:	4293      	cmp	r3, r2
 800717c:	d045      	beq.n	800720a <HAL_DMA_Init+0xaa>
 800717e:	3230      	adds	r2, #48	; 0x30
 8007180:	498f      	ldr	r1, [pc, #572]	; (80073c0 <HAL_DMA_Init+0x260>)
 8007182:	428b      	cmp	r3, r1
 8007184:	bf18      	it	ne
 8007186:	4293      	cmpne	r3, r2
 8007188:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800718c:	bf0c      	ite	eq
 800718e:	2201      	moveq	r2, #1
 8007190:	2200      	movne	r2, #0
 8007192:	428b      	cmp	r3, r1
 8007194:	bf08      	it	eq
 8007196:	f042 0201 	orreq.w	r2, r2, #1
 800719a:	3118      	adds	r1, #24
 800719c:	428b      	cmp	r3, r1
 800719e:	bf08      	it	eq
 80071a0:	f042 0201 	orreq.w	r2, r2, #1
 80071a4:	3118      	adds	r1, #24
 80071a6:	428b      	cmp	r3, r1
 80071a8:	bf08      	it	eq
 80071aa:	f042 0201 	orreq.w	r2, r2, #1
 80071ae:	3118      	adds	r1, #24
 80071b0:	428b      	cmp	r3, r1
 80071b2:	bf08      	it	eq
 80071b4:	f042 0201 	orreq.w	r2, r2, #1
 80071b8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80071bc:	428b      	cmp	r3, r1
 80071be:	bf08      	it	eq
 80071c0:	f042 0201 	orreq.w	r2, r2, #1
 80071c4:	3118      	adds	r1, #24
 80071c6:	428b      	cmp	r3, r1
 80071c8:	bf08      	it	eq
 80071ca:	f042 0201 	orreq.w	r2, r2, #1
 80071ce:	3118      	adds	r1, #24
 80071d0:	428b      	cmp	r3, r1
 80071d2:	bf08      	it	eq
 80071d4:	f042 0201 	orreq.w	r2, r2, #1
 80071d8:	3118      	adds	r1, #24
 80071da:	428b      	cmp	r3, r1
 80071dc:	bf08      	it	eq
 80071de:	f042 0201 	orreq.w	r2, r2, #1
 80071e2:	3118      	adds	r1, #24
 80071e4:	428b      	cmp	r3, r1
 80071e6:	bf08      	it	eq
 80071e8:	f042 0201 	orreq.w	r2, r2, #1
 80071ec:	3118      	adds	r1, #24
 80071ee:	428b      	cmp	r3, r1
 80071f0:	bf08      	it	eq
 80071f2:	f042 0201 	orreq.w	r2, r2, #1
 80071f6:	3118      	adds	r1, #24
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf08      	it	eq
 80071fc:	f042 0201 	orreq.w	r2, r2, #1
 8007200:	b91a      	cbnz	r2, 800720a <HAL_DMA_Init+0xaa>
 8007202:	4a70      	ldr	r2, [pc, #448]	; (80073c4 <HAL_DMA_Init+0x264>)
 8007204:	4293      	cmp	r3, r2
 8007206:	f040 8198 	bne.w	800753a <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 800720a:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800720c:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 800720e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8007212:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e006      	b.n	800722e <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007220:	f7fe fae6 	bl	80057f0 <HAL_GetTick>
 8007224:	1b43      	subs	r3, r0, r5
 8007226:	2b05      	cmp	r3, #5
 8007228:	f200 80ff 	bhi.w	800742a <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	07d6      	lsls	r6, r2, #31
 8007232:	d4f5      	bmi.n	8007220 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8007234:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007238:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800723a:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800723c:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800723e:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007240:	4302      	orrs	r2, r0
 8007242:	6960      	ldr	r0, [r4, #20]
 8007244:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007246:	69e0      	ldr	r0, [r4, #28]
 8007248:	430a      	orrs	r2, r1
 800724a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800724c:	485e      	ldr	r0, [pc, #376]	; (80073c8 <HAL_DMA_Init+0x268>)
 800724e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8007250:	6a25      	ldr	r5, [r4, #32]
 8007252:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007254:	4d5d      	ldr	r5, [pc, #372]	; (80073cc <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8007256:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007258:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800725a:	2804      	cmp	r0, #4
 800725c:	f000 8100 	beq.w	8007460 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007260:	682e      	ldr	r6, [r5, #0]
 8007262:	4d5b      	ldr	r5, [pc, #364]	; (80073d0 <HAL_DMA_Init+0x270>)
 8007264:	4035      	ands	r5, r6
 8007266:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800726a:	f080 80bb 	bcs.w	80073e4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800726e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007270:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007272:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8007276:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007278:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800727a:	4620      	mov	r0, r4
 800727c:	f7ff fe8a 	bl	8006f94 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007280:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007282:	233f      	movs	r3, #63	; 0x3f
 8007284:	f002 021f 	and.w	r2, r2, #31
 8007288:	4093      	lsls	r3, r2
 800728a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	4b4b      	ldr	r3, [pc, #300]	; (80073bc <HAL_DMA_Init+0x25c>)
 8007290:	4850      	ldr	r0, [pc, #320]	; (80073d4 <HAL_DMA_Init+0x274>)
 8007292:	494b      	ldr	r1, [pc, #300]	; (80073c0 <HAL_DMA_Init+0x260>)
 8007294:	4282      	cmp	r2, r0
 8007296:	bf18      	it	ne
 8007298:	429a      	cmpne	r2, r3
 800729a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	428a      	cmp	r2, r1
 80072a6:	bf08      	it	eq
 80072a8:	f043 0301 	orreq.w	r3, r3, #1
 80072ac:	3130      	adds	r1, #48	; 0x30
 80072ae:	4282      	cmp	r2, r0
 80072b0:	bf08      	it	eq
 80072b2:	f043 0301 	orreq.w	r3, r3, #1
 80072b6:	3030      	adds	r0, #48	; 0x30
 80072b8:	428a      	cmp	r2, r1
 80072ba:	bf08      	it	eq
 80072bc:	f043 0301 	orreq.w	r3, r3, #1
 80072c0:	3130      	adds	r1, #48	; 0x30
 80072c2:	4282      	cmp	r2, r0
 80072c4:	bf08      	it	eq
 80072c6:	f043 0301 	orreq.w	r3, r3, #1
 80072ca:	3030      	adds	r0, #48	; 0x30
 80072cc:	428a      	cmp	r2, r1
 80072ce:	bf08      	it	eq
 80072d0:	f043 0301 	orreq.w	r3, r3, #1
 80072d4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80072d8:	4282      	cmp	r2, r0
 80072da:	bf08      	it	eq
 80072dc:	f043 0301 	orreq.w	r3, r3, #1
 80072e0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80072e4:	428a      	cmp	r2, r1
 80072e6:	bf08      	it	eq
 80072e8:	f043 0301 	orreq.w	r3, r3, #1
 80072ec:	3130      	adds	r1, #48	; 0x30
 80072ee:	4282      	cmp	r2, r0
 80072f0:	bf08      	it	eq
 80072f2:	f043 0301 	orreq.w	r3, r3, #1
 80072f6:	3030      	adds	r0, #48	; 0x30
 80072f8:	428a      	cmp	r2, r1
 80072fa:	bf08      	it	eq
 80072fc:	f043 0301 	orreq.w	r3, r3, #1
 8007300:	3130      	adds	r1, #48	; 0x30
 8007302:	4282      	cmp	r2, r0
 8007304:	bf08      	it	eq
 8007306:	f043 0301 	orreq.w	r3, r3, #1
 800730a:	3030      	adds	r0, #48	; 0x30
 800730c:	428a      	cmp	r2, r1
 800730e:	bf08      	it	eq
 8007310:	f043 0301 	orreq.w	r3, r3, #1
 8007314:	3130      	adds	r1, #48	; 0x30
 8007316:	4282      	cmp	r2, r0
 8007318:	bf08      	it	eq
 800731a:	f043 0301 	orreq.w	r3, r3, #1
 800731e:	3030      	adds	r0, #48	; 0x30
 8007320:	428a      	cmp	r2, r1
 8007322:	bf08      	it	eq
 8007324:	f043 0301 	orreq.w	r3, r3, #1
 8007328:	492b      	ldr	r1, [pc, #172]	; (80073d8 <HAL_DMA_Init+0x278>)
 800732a:	4282      	cmp	r2, r0
 800732c:	bf08      	it	eq
 800732e:	f043 0301 	orreq.w	r3, r3, #1
 8007332:	482a      	ldr	r0, [pc, #168]	; (80073dc <HAL_DMA_Init+0x27c>)
 8007334:	428a      	cmp	r2, r1
 8007336:	bf08      	it	eq
 8007338:	f043 0301 	orreq.w	r3, r3, #1
 800733c:	3128      	adds	r1, #40	; 0x28
 800733e:	4282      	cmp	r2, r0
 8007340:	bf08      	it	eq
 8007342:	f043 0301 	orreq.w	r3, r3, #1
 8007346:	3028      	adds	r0, #40	; 0x28
 8007348:	428a      	cmp	r2, r1
 800734a:	bf08      	it	eq
 800734c:	f043 0301 	orreq.w	r3, r3, #1
 8007350:	3128      	adds	r1, #40	; 0x28
 8007352:	4282      	cmp	r2, r0
 8007354:	bf08      	it	eq
 8007356:	f043 0301 	orreq.w	r3, r3, #1
 800735a:	3028      	adds	r0, #40	; 0x28
 800735c:	428a      	cmp	r2, r1
 800735e:	bf08      	it	eq
 8007360:	f043 0301 	orreq.w	r3, r3, #1
 8007364:	3128      	adds	r1, #40	; 0x28
 8007366:	4282      	cmp	r2, r0
 8007368:	bf08      	it	eq
 800736a:	f043 0301 	orreq.w	r3, r3, #1
 800736e:	428a      	cmp	r2, r1
 8007370:	bf08      	it	eq
 8007372:	f043 0301 	orreq.w	r3, r3, #1
 8007376:	b913      	cbnz	r3, 800737e <HAL_DMA_Init+0x21e>
 8007378:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <HAL_DMA_Init+0x280>)
 800737a:	429a      	cmp	r2, r3
 800737c:	d118      	bne.n	80073b0 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff fe82 	bl	8007088 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007384:	68a3      	ldr	r3, [r4, #8]
 8007386:	2b80      	cmp	r3, #128	; 0x80
 8007388:	d05c      	beq.n	8007444 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800738a:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800738c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800738e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007390:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007392:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007396:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007398:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800739a:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800739c:	d859      	bhi.n	8007452 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800739e:	1e50      	subs	r0, r2, #1
 80073a0:	2807      	cmp	r0, #7
 80073a2:	d96e      	bls.n	8007482 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073a4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80073a6:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80073aa:	2000      	movs	r0, #0
 80073ac:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073ae:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073b0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80073b2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073b4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80073b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073bc:	40020010 	.word	0x40020010
 80073c0:	40020040 	.word	0x40020040
 80073c4:	400204b8 	.word	0x400204b8
 80073c8:	fe10803f 	.word	0xfe10803f
 80073cc:	5c001000 	.word	0x5c001000
 80073d0:	ffff0000 	.word	0xffff0000
 80073d4:	40020028 	.word	0x40020028
 80073d8:	58025408 	.word	0x58025408
 80073dc:	5802541c 	.word	0x5802541c
 80073e0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80073e4:	6865      	ldr	r5, [r4, #4]
 80073e6:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80073ea:	2e1f      	cmp	r6, #31
 80073ec:	d924      	bls.n	8007438 <HAL_DMA_Init+0x2d8>
 80073ee:	3d4f      	subs	r5, #79	; 0x4f
 80073f0:	2d03      	cmp	r5, #3
 80073f2:	d801      	bhi.n	80073f8 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80073f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80073f8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073fa:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80073fc:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073fe:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8007402:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007406:	f47f af37 	bne.w	8007278 <HAL_DMA_Init+0x118>
 800740a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800740c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800740e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007410:	2d00      	cmp	r5, #0
 8007412:	f43f af31 	beq.w	8007278 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007416:	2900      	cmp	r1, #0
 8007418:	d169      	bne.n	80074ee <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800741a:	2801      	cmp	r0, #1
 800741c:	f000 8088 	beq.w	8007530 <HAL_DMA_Init+0x3d0>
 8007420:	f030 0102 	bics.w	r1, r0, #2
 8007424:	f47f af28 	bne.w	8007278 <HAL_DMA_Init+0x118>
 8007428:	e069      	b.n	80074fe <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800742a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800742c:	2303      	movs	r3, #3
        return HAL_ERROR;
 800742e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007430:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007432:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007438:	4d73      	ldr	r5, [pc, #460]	; (8007608 <HAL_DMA_Init+0x4a8>)
 800743a:	fa25 f606 	lsr.w	r6, r5, r6
 800743e:	07f5      	lsls	r5, r6, #31
 8007440:	d5da      	bpl.n	80073f8 <HAL_DMA_Init+0x298>
 8007442:	e7d7      	b.n	80073f4 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007444:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007446:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007448:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800744c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800744e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007450:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8007452:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8007454:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007458:	6763      	str	r3, [r4, #116]	; 0x74
 800745a:	e7a9      	b.n	80073b0 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800745c:	2001      	movs	r0, #1
}
 800745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007460:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007462:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8007466:	432e      	orrs	r6, r5
 8007468:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800746a:	4e68      	ldr	r6, [pc, #416]	; (800760c <HAL_DMA_Init+0x4ac>)
 800746c:	403e      	ands	r6, r7
 800746e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8007472:	d2b7      	bcs.n	80073e4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007474:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007476:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007478:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800747c:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007480:	e7c4      	b.n	800740c <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007482:	6821      	ldr	r1, [r4, #0]
 8007484:	4b62      	ldr	r3, [pc, #392]	; (8007610 <HAL_DMA_Init+0x4b0>)
 8007486:	4d63      	ldr	r5, [pc, #396]	; (8007614 <HAL_DMA_Init+0x4b4>)
 8007488:	42a9      	cmp	r1, r5
 800748a:	bf18      	it	ne
 800748c:	4299      	cmpne	r1, r3
 800748e:	f105 0514 	add.w	r5, r5, #20
 8007492:	bf0c      	ite	eq
 8007494:	2301      	moveq	r3, #1
 8007496:	2300      	movne	r3, #0
 8007498:	42a9      	cmp	r1, r5
 800749a:	bf08      	it	eq
 800749c:	f043 0301 	orreq.w	r3, r3, #1
 80074a0:	3514      	adds	r5, #20
 80074a2:	42a9      	cmp	r1, r5
 80074a4:	bf08      	it	eq
 80074a6:	f043 0301 	orreq.w	r3, r3, #1
 80074aa:	3514      	adds	r5, #20
 80074ac:	42a9      	cmp	r1, r5
 80074ae:	bf08      	it	eq
 80074b0:	f043 0301 	orreq.w	r3, r3, #1
 80074b4:	3514      	adds	r5, #20
 80074b6:	42a9      	cmp	r1, r5
 80074b8:	bf08      	it	eq
 80074ba:	f043 0301 	orreq.w	r3, r3, #1
 80074be:	3514      	adds	r5, #20
 80074c0:	42a9      	cmp	r1, r5
 80074c2:	bf08      	it	eq
 80074c4:	f043 0301 	orreq.w	r3, r3, #1
 80074c8:	b93b      	cbnz	r3, 80074da <HAL_DMA_Init+0x37a>
 80074ca:	4b53      	ldr	r3, [pc, #332]	; (8007618 <HAL_DMA_Init+0x4b8>)
 80074cc:	4299      	cmp	r1, r3
 80074ce:	d004      	beq.n	80074da <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074d0:	4b52      	ldr	r3, [pc, #328]	; (800761c <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074d2:	4953      	ldr	r1, [pc, #332]	; (8007620 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074d8:	e003      	b.n	80074e2 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074da:	4b52      	ldr	r3, [pc, #328]	; (8007624 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074dc:	4952      	ldr	r1, [pc, #328]	; (8007628 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074e2:	2201      	movs	r2, #1
 80074e4:	4082      	lsls	r2, r0
 80074e6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80074ea:	6762      	str	r2, [r4, #116]	; 0x74
 80074ec:	e75d      	b.n	80073aa <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074ee:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80074f2:	d00e      	beq.n	8007512 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80074f4:	2802      	cmp	r0, #2
 80074f6:	d905      	bls.n	8007504 <HAL_DMA_Init+0x3a4>
 80074f8:	2803      	cmp	r0, #3
 80074fa:	f47f aebd 	bne.w	8007278 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074fe:	01e9      	lsls	r1, r5, #7
 8007500:	f57f aeba 	bpl.w	8007278 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8007504:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007506:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8007508:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800750a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800750c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8007512:	2803      	cmp	r0, #3
 8007514:	f63f aeb0 	bhi.w	8007278 <HAL_DMA_Init+0x118>
 8007518:	a101      	add	r1, pc, #4	; (adr r1, 8007520 <HAL_DMA_Init+0x3c0>)
 800751a:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007505 	.word	0x08007505
 8007524:	080074ff 	.word	0x080074ff
 8007528:	08007505 	.word	0x08007505
 800752c:	08007531 	.word	0x08007531
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007530:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007534:	f47f aea0 	bne.w	8007278 <HAL_DMA_Init+0x118>
 8007538:	e7e4      	b.n	8007504 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800753a:	4a35      	ldr	r2, [pc, #212]	; (8007610 <HAL_DMA_Init+0x4b0>)
 800753c:	4835      	ldr	r0, [pc, #212]	; (8007614 <HAL_DMA_Init+0x4b4>)
 800753e:	493b      	ldr	r1, [pc, #236]	; (800762c <HAL_DMA_Init+0x4cc>)
 8007540:	4283      	cmp	r3, r0
 8007542:	bf18      	it	ne
 8007544:	4293      	cmpne	r3, r2
 8007546:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800754a:	bf0c      	ite	eq
 800754c:	2201      	moveq	r2, #1
 800754e:	2200      	movne	r2, #0
 8007550:	428b      	cmp	r3, r1
 8007552:	bf08      	it	eq
 8007554:	f042 0201 	orreq.w	r2, r2, #1
 8007558:	3128      	adds	r1, #40	; 0x28
 800755a:	4283      	cmp	r3, r0
 800755c:	bf08      	it	eq
 800755e:	f042 0201 	orreq.w	r2, r2, #1
 8007562:	3028      	adds	r0, #40	; 0x28
 8007564:	428b      	cmp	r3, r1
 8007566:	bf08      	it	eq
 8007568:	f042 0201 	orreq.w	r2, r2, #1
 800756c:	3128      	adds	r1, #40	; 0x28
 800756e:	4283      	cmp	r3, r0
 8007570:	bf08      	it	eq
 8007572:	f042 0201 	orreq.w	r2, r2, #1
 8007576:	428b      	cmp	r3, r1
 8007578:	bf08      	it	eq
 800757a:	f042 0201 	orreq.w	r2, r2, #1
 800757e:	b912      	cbnz	r2, 8007586 <HAL_DMA_Init+0x426>
 8007580:	4a25      	ldr	r2, [pc, #148]	; (8007618 <HAL_DMA_Init+0x4b8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d138      	bne.n	80075f8 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8007586:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007588:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800758a:	4d29      	ldr	r5, [pc, #164]	; (8007630 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800758c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007590:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007594:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007596:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007598:	68a2      	ldr	r2, [r4, #8]
 800759a:	2a40      	cmp	r2, #64	; 0x40
 800759c:	d02a      	beq.n	80075f4 <HAL_DMA_Init+0x494>
 800759e:	2a80      	cmp	r2, #128	; 0x80
 80075a0:	bf0c      	ite	eq
 80075a2:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 80075a6:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80075a8:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80075aa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80075ae:	08d2      	lsrs	r2, r2, #3
 80075b0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80075b4:	6961      	ldr	r1, [r4, #20]
 80075b6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80075ba:	69a1      	ldr	r1, [r4, #24]
 80075bc:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80075c0:	69e1      	ldr	r1, [r4, #28]
 80075c2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80075c6:	491b      	ldr	r1, [pc, #108]	; (8007634 <HAL_DMA_Init+0x4d4>)
 80075c8:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80075cc:	4419      	add	r1, r3
 80075ce:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80075d0:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80075d2:	4819      	ldr	r0, [pc, #100]	; (8007638 <HAL_DMA_Init+0x4d8>)
 80075d4:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075d8:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80075da:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80075dc:	090b      	lsrs	r3, r1, #4
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075e2:	f7ff fcd7 	bl	8006f94 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80075e8:	2301      	movs	r3, #1
 80075ea:	f002 021f 	and.w	r2, r2, #31
 80075ee:	4093      	lsls	r3, r2
 80075f0:	6043      	str	r3, [r0, #4]
 80075f2:	e64b      	b.n	800728c <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80075f4:	2010      	movs	r0, #16
 80075f6:	e7d7      	b.n	80075a8 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075f8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80075fa:	2303      	movs	r3, #3
    return HAL_ERROR;
 80075fc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075fe:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007600:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007606:	bf00      	nop
 8007608:	c3c0003f 	.word	0xc3c0003f
 800760c:	ffff0000 	.word	0xffff0000
 8007610:	58025408 	.word	0x58025408
 8007614:	5802541c 	.word	0x5802541c
 8007618:	58025494 	.word	0x58025494
 800761c:	1000823f 	.word	0x1000823f
 8007620:	40020940 	.word	0x40020940
 8007624:	1600963f 	.word	0x1600963f
 8007628:	58025940 	.word	0x58025940
 800762c:	58025430 	.word	0x58025430
 8007630:	fffe000f 	.word	0xfffe000f
 8007634:	a7fdabf8 	.word	0xa7fdabf8
 8007638:	cccccccd 	.word	0xcccccccd

0800763c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800763c:	2800      	cmp	r0, #0
 800763e:	f000 8177 	beq.w	8007930 <HAL_DMA_Start_IT+0x2f4>
 8007642:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8007644:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007648:	2801      	cmp	r0, #1
 800764a:	f000 8173 	beq.w	8007934 <HAL_DMA_Start_IT+0x2f8>
 800764e:	2001      	movs	r0, #1
{
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007654:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8007658:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800765c:	4284      	cmp	r4, r0
 800765e:	d008      	beq.n	8007672 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007660:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007664:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007666:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800766a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007672:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8007674:	f8dc 4000 	ldr.w	r4, [ip]
 8007678:	4d53      	ldr	r5, [pc, #332]	; (80077c8 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800767a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800767e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007680:	4e52      	ldr	r6, [pc, #328]	; (80077cc <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007682:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8007686:	4852      	ldr	r0, [pc, #328]	; (80077d0 <HAL_DMA_Start_IT+0x194>)
 8007688:	42ac      	cmp	r4, r5
 800768a:	bf18      	it	ne
 800768c:	4284      	cmpne	r4, r0
 800768e:	f105 0518 	add.w	r5, r5, #24
 8007692:	bf0c      	ite	eq
 8007694:	2001      	moveq	r0, #1
 8007696:	2000      	movne	r0, #0
 8007698:	42ac      	cmp	r4, r5
 800769a:	bf08      	it	eq
 800769c:	f040 0001 	orreq.w	r0, r0, #1
 80076a0:	3518      	adds	r5, #24
 80076a2:	42ac      	cmp	r4, r5
 80076a4:	bf08      	it	eq
 80076a6:	f040 0001 	orreq.w	r0, r0, #1
 80076aa:	3518      	adds	r5, #24
 80076ac:	42ac      	cmp	r4, r5
 80076ae:	bf08      	it	eq
 80076b0:	f040 0001 	orreq.w	r0, r0, #1
 80076b4:	3518      	adds	r5, #24
 80076b6:	42ac      	cmp	r4, r5
 80076b8:	bf08      	it	eq
 80076ba:	f040 0001 	orreq.w	r0, r0, #1
 80076be:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80076c2:	42ac      	cmp	r4, r5
 80076c4:	bf08      	it	eq
 80076c6:	f040 0001 	orreq.w	r0, r0, #1
 80076ca:	3518      	adds	r5, #24
 80076cc:	42ac      	cmp	r4, r5
 80076ce:	bf08      	it	eq
 80076d0:	f040 0001 	orreq.w	r0, r0, #1
 80076d4:	3518      	adds	r5, #24
 80076d6:	42ac      	cmp	r4, r5
 80076d8:	bf08      	it	eq
 80076da:	f040 0001 	orreq.w	r0, r0, #1
 80076de:	3518      	adds	r5, #24
 80076e0:	42ac      	cmp	r4, r5
 80076e2:	bf08      	it	eq
 80076e4:	f040 0001 	orreq.w	r0, r0, #1
 80076e8:	3518      	adds	r5, #24
 80076ea:	42ac      	cmp	r4, r5
 80076ec:	bf08      	it	eq
 80076ee:	f040 0001 	orreq.w	r0, r0, #1
 80076f2:	3518      	adds	r5, #24
 80076f4:	42ac      	cmp	r4, r5
 80076f6:	bf08      	it	eq
 80076f8:	f040 0001 	orreq.w	r0, r0, #1
 80076fc:	3518      	adds	r5, #24
 80076fe:	42ac      	cmp	r4, r5
 8007700:	bf08      	it	eq
 8007702:	f040 0001 	orreq.w	r0, r0, #1
 8007706:	3518      	adds	r5, #24
 8007708:	42ac      	cmp	r4, r5
 800770a:	bf14      	ite	ne
 800770c:	4681      	movne	r9, r0
 800770e:	f040 0901 	orreq.w	r9, r0, #1
 8007712:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8007716:	42ac      	cmp	r4, r5
 8007718:	bf18      	it	ne
 800771a:	42b4      	cmpne	r4, r6
 800771c:	bf0c      	ite	eq
 800771e:	2501      	moveq	r5, #1
 8007720:	2500      	movne	r5, #0
 8007722:	d002      	beq.n	800772a <HAL_DMA_Start_IT+0xee>
 8007724:	f1b9 0f00 	cmp.w	r9, #0
 8007728:	d054      	beq.n	80077d4 <HAL_DMA_Start_IT+0x198>
 800772a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800772c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8007730:	f026 0601 	bic.w	r6, r6, #1
 8007734:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007736:	2d00      	cmp	r5, #0
 8007738:	d078      	beq.n	800782c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800773a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800773e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007740:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007744:	b117      	cbz	r7, 800774c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007746:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800774a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800774c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8007750:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8007754:	f006 081f 	and.w	r8, r6, #31
 8007758:	fa0e fe08 	lsl.w	lr, lr, r8
 800775c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007760:	6826      	ldr	r6, [r4, #0]
 8007762:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8007766:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007768:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800776a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	f000 80e2 	beq.w	8007938 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007774:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007776:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007778:	b91d      	cbnz	r5, 8007782 <HAL_DMA_Start_IT+0x146>
 800777a:	f1b9 0f00 	cmp.w	r9, #0
 800777e:	f000 80e1 	beq.w	8007944 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	f023 031e 	bic.w	r3, r3, #30
 8007788:	f043 0316 	orr.w	r3, r3, #22
 800778c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800778e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007792:	b11b      	cbz	r3, 800779c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	f043 0308 	orr.w	r3, r3, #8
 800779a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800779c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	03d2      	lsls	r2, r2, #15
 80077a4:	d503      	bpl.n	80077ae <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ac:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80077ae:	b11f      	cbz	r7, 80077b8 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b6:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80077b8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80077bc:	f043 0301 	orr.w	r3, r3, #1
 80077c0:	6023      	str	r3, [r4, #0]
}
 80077c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c6:	bf00      	nop
 80077c8:	40020058 	.word	0x40020058
 80077cc:	40020010 	.word	0x40020010
 80077d0:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077d4:	4f61      	ldr	r7, [pc, #388]	; (800795c <HAL_DMA_Start_IT+0x320>)
 80077d6:	4e62      	ldr	r6, [pc, #392]	; (8007960 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077d8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077dc:	42b4      	cmp	r4, r6
 80077de:	bf18      	it	ne
 80077e0:	42bc      	cmpne	r4, r7
 80077e2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80077e6:	bf0c      	ite	eq
 80077e8:	2701      	moveq	r7, #1
 80077ea:	2700      	movne	r7, #0
 80077ec:	42b4      	cmp	r4, r6
 80077ee:	bf08      	it	eq
 80077f0:	f047 0701 	orreq.w	r7, r7, #1
 80077f4:	3614      	adds	r6, #20
 80077f6:	42b4      	cmp	r4, r6
 80077f8:	bf08      	it	eq
 80077fa:	f047 0701 	orreq.w	r7, r7, #1
 80077fe:	3614      	adds	r6, #20
 8007800:	42b4      	cmp	r4, r6
 8007802:	bf08      	it	eq
 8007804:	f047 0701 	orreq.w	r7, r7, #1
 8007808:	3614      	adds	r6, #20
 800780a:	42b4      	cmp	r4, r6
 800780c:	bf08      	it	eq
 800780e:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8007812:	6826      	ldr	r6, [r4, #0]
 8007814:	f026 0601 	bic.w	r6, r6, #1
 8007818:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800781a:	4e52      	ldr	r6, [pc, #328]	; (8007964 <HAL_DMA_Start_IT+0x328>)
 800781c:	42b4      	cmp	r4, r6
 800781e:	bf08      	it	eq
 8007820:	f047 0701 	orreq.w	r7, r7, #1
 8007824:	b917      	cbnz	r7, 800782c <HAL_DMA_Start_IT+0x1f0>
 8007826:	4f50      	ldr	r7, [pc, #320]	; (8007968 <HAL_DMA_Start_IT+0x32c>)
 8007828:	42bc      	cmp	r4, r7
 800782a:	d10b      	bne.n	8007844 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800782c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8007830:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007832:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8007836:	b117      	cbz	r7, 800783e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007838:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800783c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800783e:	f1b9 0f00 	cmp.w	r9, #0
 8007842:	d183      	bne.n	800774c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007844:	4f46      	ldr	r7, [pc, #280]	; (8007960 <HAL_DMA_Start_IT+0x324>)
 8007846:	f8df e114 	ldr.w	lr, [pc, #276]	; 800795c <HAL_DMA_Start_IT+0x320>
 800784a:	4574      	cmp	r4, lr
 800784c:	bf18      	it	ne
 800784e:	42bc      	cmpne	r4, r7
 8007850:	f10e 0e14 	add.w	lr, lr, #20
 8007854:	bf0c      	ite	eq
 8007856:	2701      	moveq	r7, #1
 8007858:	2700      	movne	r7, #0
 800785a:	4574      	cmp	r4, lr
 800785c:	bf08      	it	eq
 800785e:	f047 0701 	orreq.w	r7, r7, #1
 8007862:	f10e 0e14 	add.w	lr, lr, #20
 8007866:	4574      	cmp	r4, lr
 8007868:	bf08      	it	eq
 800786a:	f047 0701 	orreq.w	r7, r7, #1
 800786e:	f10e 0e14 	add.w	lr, lr, #20
 8007872:	4574      	cmp	r4, lr
 8007874:	bf08      	it	eq
 8007876:	f047 0701 	orreq.w	r7, r7, #1
 800787a:	f10e 0e14 	add.w	lr, lr, #20
 800787e:	4574      	cmp	r4, lr
 8007880:	bf08      	it	eq
 8007882:	f047 0701 	orreq.w	r7, r7, #1
 8007886:	f10e 0e14 	add.w	lr, lr, #20
 800788a:	4574      	cmp	r4, lr
 800788c:	bf08      	it	eq
 800788e:	f047 0701 	orreq.w	r7, r7, #1
 8007892:	b917      	cbnz	r7, 800789a <HAL_DMA_Start_IT+0x25e>
 8007894:	4f34      	ldr	r7, [pc, #208]	; (8007968 <HAL_DMA_Start_IT+0x32c>)
 8007896:	42bc      	cmp	r4, r7
 8007898:	d154      	bne.n	8007944 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800789a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800789e:	2701      	movs	r7, #1
 80078a0:	f000 0e1f 	and.w	lr, r0, #31
 80078a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80078a8:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80078ac:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d043      	beq.n	800793e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80078b6:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80078b8:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	f023 030e 	bic.w	r3, r3, #14
 80078c0:	f043 030a 	orr.w	r3, r3, #10
 80078c4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80078c6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d02d      	beq.n	800792a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	f043 0304 	orr.w	r3, r3, #4
 80078d4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078d6:	4b21      	ldr	r3, [pc, #132]	; (800795c <HAL_DMA_Start_IT+0x320>)
 80078d8:	4a21      	ldr	r2, [pc, #132]	; (8007960 <HAL_DMA_Start_IT+0x324>)
 80078da:	4294      	cmp	r4, r2
 80078dc:	bf18      	it	ne
 80078de:	429c      	cmpne	r4, r3
 80078e0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80078e4:	bf0c      	ite	eq
 80078e6:	2301      	moveq	r3, #1
 80078e8:	2300      	movne	r3, #0
 80078ea:	4294      	cmp	r4, r2
 80078ec:	bf08      	it	eq
 80078ee:	f043 0301 	orreq.w	r3, r3, #1
 80078f2:	3214      	adds	r2, #20
 80078f4:	4294      	cmp	r4, r2
 80078f6:	bf08      	it	eq
 80078f8:	f043 0301 	orreq.w	r3, r3, #1
 80078fc:	3214      	adds	r2, #20
 80078fe:	4294      	cmp	r4, r2
 8007900:	bf08      	it	eq
 8007902:	f043 0301 	orreq.w	r3, r3, #1
 8007906:	3214      	adds	r2, #20
 8007908:	4294      	cmp	r4, r2
 800790a:	bf08      	it	eq
 800790c:	f043 0301 	orreq.w	r3, r3, #1
 8007910:	3214      	adds	r2, #20
 8007912:	4294      	cmp	r4, r2
 8007914:	bf08      	it	eq
 8007916:	f043 0301 	orreq.w	r3, r3, #1
 800791a:	3214      	adds	r2, #20
 800791c:	4294      	cmp	r4, r2
 800791e:	bf08      	it	eq
 8007920:	f043 0301 	orreq.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	f43f af47 	beq.w	80077b8 <HAL_DMA_Start_IT+0x17c>
 800792a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800792e:	e735      	b.n	800779c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8007930:	2001      	movs	r0, #1
 8007932:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8007934:	2002      	movs	r0, #2
}
 8007936:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007938:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800793a:	60e1      	str	r1, [r4, #12]
 800793c:	e71c      	b.n	8007778 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800793e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007940:	60e1      	str	r1, [r4, #12]
 8007942:	e7ba      	b.n	80078ba <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	f023 030e 	bic.w	r3, r3, #14
 800794a:	f043 030a 	orr.w	r3, r3, #10
 800794e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007950:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1ba      	bne.n	80078ce <HAL_DMA_Start_IT+0x292>
 8007958:	e7bd      	b.n	80078d6 <HAL_DMA_Start_IT+0x29a>
 800795a:	bf00      	nop
 800795c:	5802541c 	.word	0x5802541c
 8007960:	58025408 	.word	0x58025408
 8007964:	58025480 	.word	0x58025480
 8007968:	58025494 	.word	0x58025494

0800796c <HAL_DMA_Abort>:
{
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8007970:	f7fd ff3e 	bl	80057f0 <HAL_GetTick>
  if(hdma == NULL)
 8007974:	2d00      	cmp	r5, #0
 8007976:	f000 8124 	beq.w	8007bc2 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800797a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800797e:	2b02      	cmp	r3, #2
 8007980:	f040 80dd 	bne.w	8007b3e <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007984:	682c      	ldr	r4, [r5, #0]
 8007986:	4606      	mov	r6, r0
 8007988:	4b8f      	ldr	r3, [pc, #572]	; (8007bc8 <HAL_DMA_Abort+0x25c>)
 800798a:	4890      	ldr	r0, [pc, #576]	; (8007bcc <HAL_DMA_Abort+0x260>)
 800798c:	4a90      	ldr	r2, [pc, #576]	; (8007bd0 <HAL_DMA_Abort+0x264>)
 800798e:	4284      	cmp	r4, r0
 8007990:	bf18      	it	ne
 8007992:	429c      	cmpne	r4, r3
 8007994:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007998:	498e      	ldr	r1, [pc, #568]	; (8007bd4 <HAL_DMA_Abort+0x268>)
 800799a:	bf0c      	ite	eq
 800799c:	2301      	moveq	r3, #1
 800799e:	2300      	movne	r3, #0
 80079a0:	4284      	cmp	r4, r0
 80079a2:	bf08      	it	eq
 80079a4:	f043 0301 	orreq.w	r3, r3, #1
 80079a8:	3018      	adds	r0, #24
 80079aa:	4284      	cmp	r4, r0
 80079ac:	bf08      	it	eq
 80079ae:	f043 0301 	orreq.w	r3, r3, #1
 80079b2:	3018      	adds	r0, #24
 80079b4:	4284      	cmp	r4, r0
 80079b6:	bf08      	it	eq
 80079b8:	f043 0301 	orreq.w	r3, r3, #1
 80079bc:	3018      	adds	r0, #24
 80079be:	4284      	cmp	r4, r0
 80079c0:	bf08      	it	eq
 80079c2:	f043 0301 	orreq.w	r3, r3, #1
 80079c6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80079ca:	4284      	cmp	r4, r0
 80079cc:	bf08      	it	eq
 80079ce:	f043 0301 	orreq.w	r3, r3, #1
 80079d2:	3018      	adds	r0, #24
 80079d4:	4284      	cmp	r4, r0
 80079d6:	bf08      	it	eq
 80079d8:	f043 0301 	orreq.w	r3, r3, #1
 80079dc:	3018      	adds	r0, #24
 80079de:	4284      	cmp	r4, r0
 80079e0:	bf08      	it	eq
 80079e2:	f043 0301 	orreq.w	r3, r3, #1
 80079e6:	3018      	adds	r0, #24
 80079e8:	4284      	cmp	r4, r0
 80079ea:	bf08      	it	eq
 80079ec:	f043 0301 	orreq.w	r3, r3, #1
 80079f0:	3018      	adds	r0, #24
 80079f2:	4284      	cmp	r4, r0
 80079f4:	bf08      	it	eq
 80079f6:	f043 0301 	orreq.w	r3, r3, #1
 80079fa:	3018      	adds	r0, #24
 80079fc:	4284      	cmp	r4, r0
 80079fe:	bf08      	it	eq
 8007a00:	f043 0301 	orreq.w	r3, r3, #1
 8007a04:	3018      	adds	r0, #24
 8007a06:	4284      	cmp	r4, r0
 8007a08:	bf08      	it	eq
 8007a0a:	f043 0301 	orreq.w	r3, r3, #1
 8007a0e:	3018      	adds	r0, #24
 8007a10:	4284      	cmp	r4, r0
 8007a12:	bf08      	it	eq
 8007a14:	f043 0301 	orreq.w	r3, r3, #1
 8007a18:	428c      	cmp	r4, r1
 8007a1a:	bf18      	it	ne
 8007a1c:	4294      	cmpne	r4, r2
 8007a1e:	bf0c      	ite	eq
 8007a20:	2201      	moveq	r2, #1
 8007a22:	2200      	movne	r2, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_DMA_Abort+0xc0>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8090 	beq.w	8007b4c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a2c:	6821      	ldr	r1, [r4, #0]
 8007a2e:	f021 011e 	bic.w	r1, r1, #30
 8007a32:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a34:	6961      	ldr	r1, [r4, #20]
 8007a36:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007a3a:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	f000 80b0 	beq.w	8007ba2 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a42:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007a44:	6813      	ldr	r3, [r2, #0]
 8007a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	e005      	b.n	8007a62 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a56:	f7fd fecb 	bl	80057f0 <HAL_GetTick>
 8007a5a:	1b83      	subs	r3, r0, r6
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	f200 80a6 	bhi.w	8007bae <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	07db      	lsls	r3, r3, #31
 8007a66:	d4f6      	bmi.n	8007a56 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a68:	682a      	ldr	r2, [r5, #0]
 8007a6a:	4b57      	ldr	r3, [pc, #348]	; (8007bc8 <HAL_DMA_Abort+0x25c>)
 8007a6c:	4857      	ldr	r0, [pc, #348]	; (8007bcc <HAL_DMA_Abort+0x260>)
 8007a6e:	495a      	ldr	r1, [pc, #360]	; (8007bd8 <HAL_DMA_Abort+0x26c>)
 8007a70:	4282      	cmp	r2, r0
 8007a72:	bf18      	it	ne
 8007a74:	429a      	cmpne	r2, r3
 8007a76:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	428a      	cmp	r2, r1
 8007a82:	bf08      	it	eq
 8007a84:	f043 0301 	orreq.w	r3, r3, #1
 8007a88:	3130      	adds	r1, #48	; 0x30
 8007a8a:	4282      	cmp	r2, r0
 8007a8c:	bf08      	it	eq
 8007a8e:	f043 0301 	orreq.w	r3, r3, #1
 8007a92:	3030      	adds	r0, #48	; 0x30
 8007a94:	428a      	cmp	r2, r1
 8007a96:	bf08      	it	eq
 8007a98:	f043 0301 	orreq.w	r3, r3, #1
 8007a9c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007aa0:	4282      	cmp	r2, r0
 8007aa2:	bf08      	it	eq
 8007aa4:	f043 0301 	orreq.w	r3, r3, #1
 8007aa8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007aac:	428a      	cmp	r2, r1
 8007aae:	bf08      	it	eq
 8007ab0:	f043 0301 	orreq.w	r3, r3, #1
 8007ab4:	3130      	adds	r1, #48	; 0x30
 8007ab6:	4282      	cmp	r2, r0
 8007ab8:	bf08      	it	eq
 8007aba:	f043 0301 	orreq.w	r3, r3, #1
 8007abe:	3030      	adds	r0, #48	; 0x30
 8007ac0:	428a      	cmp	r2, r1
 8007ac2:	bf08      	it	eq
 8007ac4:	f043 0301 	orreq.w	r3, r3, #1
 8007ac8:	3130      	adds	r1, #48	; 0x30
 8007aca:	4282      	cmp	r2, r0
 8007acc:	bf08      	it	eq
 8007ace:	f043 0301 	orreq.w	r3, r3, #1
 8007ad2:	3030      	adds	r0, #48	; 0x30
 8007ad4:	428a      	cmp	r2, r1
 8007ad6:	bf08      	it	eq
 8007ad8:	f043 0301 	orreq.w	r3, r3, #1
 8007adc:	3130      	adds	r1, #48	; 0x30
 8007ade:	4282      	cmp	r2, r0
 8007ae0:	bf08      	it	eq
 8007ae2:	f043 0301 	orreq.w	r3, r3, #1
 8007ae6:	428a      	cmp	r2, r1
 8007ae8:	bf08      	it	eq
 8007aea:	f043 0301 	orreq.w	r3, r3, #1
 8007aee:	3118      	adds	r1, #24
 8007af0:	428a      	cmp	r2, r1
 8007af2:	bf08      	it	eq
 8007af4:	f043 0301 	orreq.w	r3, r3, #1
 8007af8:	b933      	cbnz	r3, 8007b08 <HAL_DMA_Abort+0x19c>
 8007afa:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8007afe:	4b35      	ldr	r3, [pc, #212]	; (8007bd4 <HAL_DMA_Abort+0x268>)
 8007b00:	429a      	cmp	r2, r3
 8007b02:	bf18      	it	ne
 8007b04:	428a      	cmpne	r2, r1
 8007b06:	d16f      	bne.n	8007be8 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b08:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8007b0a:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b0c:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b0e:	f002 021f 	and.w	r2, r2, #31
 8007b12:	4093      	lsls	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8007b16:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b18:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8007b1c:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8007b1e:	b133      	cbz	r3, 8007b2e <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b20:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b22:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b2a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b2c:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8007b2e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007b30:	2201      	movs	r2, #1
  return HAL_OK;
 8007b32:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8007b34:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007b38:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b3e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8007b40:	2300      	movs	r3, #0
    return HAL_ERROR;
 8007b42:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b44:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007b46:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b4c:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b4e:	4923      	ldr	r1, [pc, #140]	; (8007bdc <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007b50:	f022 020e 	bic.w	r2, r2, #14
 8007b54:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b56:	4a22      	ldr	r2, [pc, #136]	; (8007be0 <HAL_DMA_Abort+0x274>)
 8007b58:	428c      	cmp	r4, r1
 8007b5a:	bf18      	it	ne
 8007b5c:	4294      	cmpne	r4, r2
 8007b5e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8007b62:	bf0c      	ite	eq
 8007b64:	2201      	moveq	r2, #1
 8007b66:	2200      	movne	r2, #0
 8007b68:	428c      	cmp	r4, r1
 8007b6a:	bf08      	it	eq
 8007b6c:	f042 0201 	orreq.w	r2, r2, #1
 8007b70:	3114      	adds	r1, #20
 8007b72:	428c      	cmp	r4, r1
 8007b74:	bf08      	it	eq
 8007b76:	f042 0201 	orreq.w	r2, r2, #1
 8007b7a:	3114      	adds	r1, #20
 8007b7c:	428c      	cmp	r4, r1
 8007b7e:	bf08      	it	eq
 8007b80:	f042 0201 	orreq.w	r2, r2, #1
 8007b84:	3114      	adds	r1, #20
 8007b86:	428c      	cmp	r4, r1
 8007b88:	bf08      	it	eq
 8007b8a:	f042 0201 	orreq.w	r2, r2, #1
 8007b8e:	3114      	adds	r1, #20
 8007b90:	428c      	cmp	r4, r1
 8007b92:	bf08      	it	eq
 8007b94:	f042 0201 	orreq.w	r2, r2, #1
 8007b98:	b91a      	cbnz	r2, 8007ba2 <HAL_DMA_Abort+0x236>
 8007b9a:	4a12      	ldr	r2, [pc, #72]	; (8007be4 <HAL_DMA_Abort+0x278>)
 8007b9c:	4294      	cmp	r4, r2
 8007b9e:	f47f af55 	bne.w	8007a4c <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ba2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007ba4:	680a      	ldr	r2, [r1, #0]
 8007ba6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007baa:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8007bac:	e74e      	b.n	8007a4c <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bae:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bb0:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8007bb2:	2300      	movs	r3, #0
        return HAL_ERROR;
 8007bb4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bb6:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8007bb8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bbc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007bc2:	2001      	movs	r0, #1
}
 8007bc4:	bd70      	pop	{r4, r5, r6, pc}
 8007bc6:	bf00      	nop
 8007bc8:	40020058 	.word	0x40020058
 8007bcc:	40020040 	.word	0x40020040
 8007bd0:	40020010 	.word	0x40020010
 8007bd4:	40020028 	.word	0x40020028
 8007bd8:	40020070 	.word	0x40020070
 8007bdc:	58025408 	.word	0x58025408
 8007be0:	5802541c 	.word	0x5802541c
 8007be4:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007be8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8007bea:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bec:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bee:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bf2:	4c16      	ldr	r4, [pc, #88]	; (8007c4c <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bf4:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bf6:	42a2      	cmp	r2, r4
 8007bf8:	bf18      	it	ne
 8007bfa:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bfe:	bf0c      	ite	eq
 8007c00:	2301      	moveq	r3, #1
 8007c02:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c04:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c06:	4812      	ldr	r0, [pc, #72]	; (8007c50 <HAL_DMA_Abort+0x2e4>)
 8007c08:	4912      	ldr	r1, [pc, #72]	; (8007c54 <HAL_DMA_Abort+0x2e8>)
 8007c0a:	4282      	cmp	r2, r0
 8007c0c:	bf08      	it	eq
 8007c0e:	f043 0301 	orreq.w	r3, r3, #1
 8007c12:	3028      	adds	r0, #40	; 0x28
 8007c14:	428a      	cmp	r2, r1
 8007c16:	bf08      	it	eq
 8007c18:	f043 0301 	orreq.w	r3, r3, #1
 8007c1c:	3128      	adds	r1, #40	; 0x28
 8007c1e:	4282      	cmp	r2, r0
 8007c20:	bf08      	it	eq
 8007c22:	f043 0301 	orreq.w	r3, r3, #1
 8007c26:	428a      	cmp	r2, r1
 8007c28:	bf08      	it	eq
 8007c2a:	f043 0301 	orreq.w	r3, r3, #1
 8007c2e:	3114      	adds	r1, #20
 8007c30:	428a      	cmp	r2, r1
 8007c32:	bf08      	it	eq
 8007c34:	f043 0301 	orreq.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f47f af6c 	bne.w	8007b16 <HAL_DMA_Abort+0x1aa>
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <HAL_DMA_Abort+0x2ec>)
 8007c40:	429a      	cmp	r2, r3
 8007c42:	f43f af68 	beq.w	8007b16 <HAL_DMA_Abort+0x1aa>
 8007c46:	e772      	b.n	8007b2e <HAL_DMA_Abort+0x1c2>
 8007c48:	5802541c 	.word	0x5802541c
 8007c4c:	58025408 	.word	0x58025408
 8007c50:	58025430 	.word	0x58025430
 8007c54:	58025444 	.word	0x58025444
 8007c58:	58025494 	.word	0x58025494

08007c5c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d05f      	beq.n	8007d20 <HAL_DMA_Abort_IT+0xc4>
{
 8007c60:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c62:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8007c66:	4603      	mov	r3, r0
 8007c68:	2a02      	cmp	r2, #2
 8007c6a:	d155      	bne.n	8007d18 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c6c:	6801      	ldr	r1, [r0, #0]
 8007c6e:	4a57      	ldr	r2, [pc, #348]	; (8007dcc <HAL_DMA_Abort_IT+0x170>)
 8007c70:	4291      	cmp	r1, r2
 8007c72:	d048      	beq.n	8007d06 <HAL_DMA_Abort_IT+0xaa>
 8007c74:	3218      	adds	r2, #24
 8007c76:	4291      	cmp	r1, r2
 8007c78:	d045      	beq.n	8007d06 <HAL_DMA_Abort_IT+0xaa>
 8007c7a:	3230      	adds	r2, #48	; 0x30
 8007c7c:	4c54      	ldr	r4, [pc, #336]	; (8007dd0 <HAL_DMA_Abort_IT+0x174>)
 8007c7e:	4855      	ldr	r0, [pc, #340]	; (8007dd4 <HAL_DMA_Abort_IT+0x178>)
 8007c80:	42a1      	cmp	r1, r4
 8007c82:	bf18      	it	ne
 8007c84:	4291      	cmpne	r1, r2
 8007c86:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2201      	moveq	r2, #1
 8007c8e:	2200      	movne	r2, #0
 8007c90:	4281      	cmp	r1, r0
 8007c92:	bf08      	it	eq
 8007c94:	f042 0201 	orreq.w	r2, r2, #1
 8007c98:	3030      	adds	r0, #48	; 0x30
 8007c9a:	42a1      	cmp	r1, r4
 8007c9c:	bf08      	it	eq
 8007c9e:	f042 0201 	orreq.w	r2, r2, #1
 8007ca2:	3430      	adds	r4, #48	; 0x30
 8007ca4:	4281      	cmp	r1, r0
 8007ca6:	bf08      	it	eq
 8007ca8:	f042 0201 	orreq.w	r2, r2, #1
 8007cac:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007cb0:	42a1      	cmp	r1, r4
 8007cb2:	bf08      	it	eq
 8007cb4:	f042 0201 	orreq.w	r2, r2, #1
 8007cb8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007cbc:	4281      	cmp	r1, r0
 8007cbe:	bf08      	it	eq
 8007cc0:	f042 0201 	orreq.w	r2, r2, #1
 8007cc4:	3030      	adds	r0, #48	; 0x30
 8007cc6:	42a1      	cmp	r1, r4
 8007cc8:	bf08      	it	eq
 8007cca:	f042 0201 	orreq.w	r2, r2, #1
 8007cce:	3430      	adds	r4, #48	; 0x30
 8007cd0:	4281      	cmp	r1, r0
 8007cd2:	bf08      	it	eq
 8007cd4:	f042 0201 	orreq.w	r2, r2, #1
 8007cd8:	3030      	adds	r0, #48	; 0x30
 8007cda:	42a1      	cmp	r1, r4
 8007cdc:	bf08      	it	eq
 8007cde:	f042 0201 	orreq.w	r2, r2, #1
 8007ce2:	3430      	adds	r4, #48	; 0x30
 8007ce4:	4281      	cmp	r1, r0
 8007ce6:	bf08      	it	eq
 8007ce8:	f042 0201 	orreq.w	r2, r2, #1
 8007cec:	3030      	adds	r0, #48	; 0x30
 8007cee:	42a1      	cmp	r1, r4
 8007cf0:	bf08      	it	eq
 8007cf2:	f042 0201 	orreq.w	r2, r2, #1
 8007cf6:	4281      	cmp	r1, r0
 8007cf8:	bf08      	it	eq
 8007cfa:	f042 0201 	orreq.w	r2, r2, #1
 8007cfe:	b912      	cbnz	r2, 8007d06 <HAL_DMA_Abort_IT+0xaa>
 8007d00:	4a35      	ldr	r2, [pc, #212]	; (8007dd8 <HAL_DMA_Abort_IT+0x17c>)
 8007d02:	4291      	cmp	r1, r2
 8007d04:	d10e      	bne.n	8007d24 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d06:	2204      	movs	r2, #4
  return HAL_OK;
 8007d08:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007d0e:	680b      	ldr	r3, [r1, #0]
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	600b      	str	r3, [r1, #0]
}
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d18:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8007d1a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d1c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007d20:	2001      	movs	r0, #1
}
 8007d22:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d24:	4a2d      	ldr	r2, [pc, #180]	; (8007ddc <HAL_DMA_Abort_IT+0x180>)
 8007d26:	4d2e      	ldr	r5, [pc, #184]	; (8007de0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d28:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d2a:	42a9      	cmp	r1, r5
 8007d2c:	bf18      	it	ne
 8007d2e:	4291      	cmpne	r1, r2
 8007d30:	4c2c      	ldr	r4, [pc, #176]	; (8007de4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d32:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d36:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2201      	moveq	r2, #1
 8007d3e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d40:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d42:	42a1      	cmp	r1, r4
 8007d44:	bf08      	it	eq
 8007d46:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8007d4a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d4c:	3428      	adds	r4, #40	; 0x28
 8007d4e:	42a9      	cmp	r1, r5
 8007d50:	bf08      	it	eq
 8007d52:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8007d56:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d5a:	42a1      	cmp	r1, r4
 8007d5c:	bf08      	it	eq
 8007d5e:	f042 0201 	orreq.w	r2, r2, #1
 8007d62:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8007d64:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d66:	42a1      	cmp	r1, r4
 8007d68:	bf08      	it	eq
 8007d6a:	f042 0201 	orreq.w	r2, r2, #1
 8007d6e:	481e      	ldr	r0, [pc, #120]	; (8007de8 <HAL_DMA_Abort_IT+0x18c>)
 8007d70:	4281      	cmp	r1, r0
 8007d72:	bf08      	it	eq
 8007d74:	f042 0201 	orreq.w	r2, r2, #1
 8007d78:	b912      	cbnz	r2, 8007d80 <HAL_DMA_Abort_IT+0x124>
 8007d7a:	4a1c      	ldr	r2, [pc, #112]	; (8007dec <HAL_DMA_Abort_IT+0x190>)
 8007d7c:	4291      	cmp	r1, r2
 8007d7e:	d117      	bne.n	8007db0 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d80:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d82:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d84:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d88:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d8a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d8e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d92:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d94:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d96:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007d98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d9a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8007d9e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007da0:	b132      	cbz	r2, 8007db0 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007da2:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007da4:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007da8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007dac:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dae:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8007db0:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8007db2:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8007db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8007db6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8007dba:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8007dbe:	b11a      	cbz	r2, 8007dc8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	4790      	blx	r2
  return HAL_OK;
 8007dc4:	4620      	mov	r0, r4
}
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8007dc8:	4610      	mov	r0, r2
}
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	40020010 	.word	0x40020010
 8007dd0:	40020040 	.word	0x40020040
 8007dd4:	40020070 	.word	0x40020070
 8007dd8:	400204b8 	.word	0x400204b8
 8007ddc:	5802541c 	.word	0x5802541c
 8007de0:	58025408 	.word	0x58025408
 8007de4:	58025430 	.word	0x58025430
 8007de8:	58025480 	.word	0x58025480
 8007dec:	58025494 	.word	0x58025494

08007df0 <HAL_DMA_IRQHandler>:
{
 8007df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8007df4:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8007df6:	4b9c      	ldr	r3, [pc, #624]	; (8008068 <HAL_DMA_IRQHandler+0x278>)
{
 8007df8:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007dfa:	4e9c      	ldr	r6, [pc, #624]	; (800806c <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8007dfc:	681d      	ldr	r5, [r3, #0]
{
 8007dfe:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8007e00:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e02:	6803      	ldr	r3, [r0, #0]
 8007e04:	4a9a      	ldr	r2, [pc, #616]	; (8008070 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e06:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	bf18      	it	ne
 8007e0c:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8007e0e:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e10:	bf08      	it	eq
 8007e12:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8007e14:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007e16:	bf18      	it	ne
 8007e18:	2600      	movne	r6, #0
 8007e1a:	d045      	beq.n	8007ea8 <HAL_DMA_IRQHandler+0xb8>
 8007e1c:	3218      	adds	r2, #24
 8007e1e:	4895      	ldr	r0, [pc, #596]	; (8008074 <HAL_DMA_IRQHandler+0x284>)
 8007e20:	4283      	cmp	r3, r0
 8007e22:	bf18      	it	ne
 8007e24:	4293      	cmpne	r3, r2
 8007e26:	f100 0018 	add.w	r0, r0, #24
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2201      	moveq	r2, #1
 8007e2e:	2200      	movne	r2, #0
 8007e30:	4283      	cmp	r3, r0
 8007e32:	bf08      	it	eq
 8007e34:	f042 0201 	orreq.w	r2, r2, #1
 8007e38:	3018      	adds	r0, #24
 8007e3a:	4283      	cmp	r3, r0
 8007e3c:	bf08      	it	eq
 8007e3e:	f042 0201 	orreq.w	r2, r2, #1
 8007e42:	3018      	adds	r0, #24
 8007e44:	4283      	cmp	r3, r0
 8007e46:	bf08      	it	eq
 8007e48:	f042 0201 	orreq.w	r2, r2, #1
 8007e4c:	3018      	adds	r0, #24
 8007e4e:	4283      	cmp	r3, r0
 8007e50:	bf08      	it	eq
 8007e52:	f042 0201 	orreq.w	r2, r2, #1
 8007e56:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	bf08      	it	eq
 8007e5e:	f042 0201 	orreq.w	r2, r2, #1
 8007e62:	3018      	adds	r0, #24
 8007e64:	4283      	cmp	r3, r0
 8007e66:	bf08      	it	eq
 8007e68:	f042 0201 	orreq.w	r2, r2, #1
 8007e6c:	3018      	adds	r0, #24
 8007e6e:	4283      	cmp	r3, r0
 8007e70:	bf08      	it	eq
 8007e72:	f042 0201 	orreq.w	r2, r2, #1
 8007e76:	3018      	adds	r0, #24
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	bf08      	it	eq
 8007e7c:	f042 0201 	orreq.w	r2, r2, #1
 8007e80:	3018      	adds	r0, #24
 8007e82:	4283      	cmp	r3, r0
 8007e84:	bf08      	it	eq
 8007e86:	f042 0201 	orreq.w	r2, r2, #1
 8007e8a:	3018      	adds	r0, #24
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	bf08      	it	eq
 8007e90:	f042 0201 	orreq.w	r2, r2, #1
 8007e94:	3018      	adds	r0, #24
 8007e96:	4283      	cmp	r3, r0
 8007e98:	bf08      	it	eq
 8007e9a:	f042 0201 	orreq.w	r2, r2, #1
 8007e9e:	b91a      	cbnz	r2, 8007ea8 <HAL_DMA_IRQHandler+0xb8>
 8007ea0:	4a75      	ldr	r2, [pc, #468]	; (8008078 <HAL_DMA_IRQHandler+0x288>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	f040 8250 	bne.w	8008348 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ea8:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8007eac:	2208      	movs	r2, #8
 8007eae:	f001 0c1f 	and.w	ip, r1, #31
 8007eb2:	fa02 f20c 	lsl.w	r2, r2, ip
 8007eb6:	4217      	tst	r7, r2
 8007eb8:	f040 8188 	bne.w	80081cc <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ebc:	fa27 f20c 	lsr.w	r2, r7, ip
 8007ec0:	07d2      	lsls	r2, r2, #31
 8007ec2:	d50c      	bpl.n	8007ede <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007ec4:	695a      	ldr	r2, [r3, #20]
 8007ec6:	0610      	lsls	r0, r2, #24
 8007ec8:	d509      	bpl.n	8007ede <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007eca:	2201      	movs	r2, #1
 8007ecc:	fa02 f20c 	lsl.w	r2, r2, ip
 8007ed0:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ed2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8007ed6:	f042 0202 	orr.w	r2, r2, #2
 8007eda:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ede:	f04f 0e04 	mov.w	lr, #4
 8007ee2:	fa0e f00c 	lsl.w	r0, lr, ip
 8007ee6:	4238      	tst	r0, r7
 8007ee8:	d05b      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	d14f      	bne.n	8007f8e <HAL_DMA_IRQHandler+0x19e>
 8007eee:	4a61      	ldr	r2, [pc, #388]	; (8008074 <HAL_DMA_IRQHandler+0x284>)
 8007ef0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800807c <HAL_DMA_IRQHandler+0x28c>
 8007ef4:	4543      	cmp	r3, r8
 8007ef6:	bf18      	it	ne
 8007ef8:	4293      	cmpne	r3, r2
 8007efa:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8007efe:	bf0c      	ite	eq
 8007f00:	2201      	moveq	r2, #1
 8007f02:	2200      	movne	r2, #0
 8007f04:	4543      	cmp	r3, r8
 8007f06:	bf08      	it	eq
 8007f08:	f042 0201 	orreq.w	r2, r2, #1
 8007f0c:	f108 0818 	add.w	r8, r8, #24
 8007f10:	4543      	cmp	r3, r8
 8007f12:	bf08      	it	eq
 8007f14:	f042 0201 	orreq.w	r2, r2, #1
 8007f18:	f108 0818 	add.w	r8, r8, #24
 8007f1c:	4543      	cmp	r3, r8
 8007f1e:	bf08      	it	eq
 8007f20:	f042 0201 	orreq.w	r2, r2, #1
 8007f24:	f108 0818 	add.w	r8, r8, #24
 8007f28:	4543      	cmp	r3, r8
 8007f2a:	bf08      	it	eq
 8007f2c:	f042 0201 	orreq.w	r2, r2, #1
 8007f30:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8007f34:	4543      	cmp	r3, r8
 8007f36:	bf08      	it	eq
 8007f38:	f042 0201 	orreq.w	r2, r2, #1
 8007f3c:	f108 0818 	add.w	r8, r8, #24
 8007f40:	4543      	cmp	r3, r8
 8007f42:	bf08      	it	eq
 8007f44:	f042 0201 	orreq.w	r2, r2, #1
 8007f48:	f108 0818 	add.w	r8, r8, #24
 8007f4c:	4543      	cmp	r3, r8
 8007f4e:	bf08      	it	eq
 8007f50:	f042 0201 	orreq.w	r2, r2, #1
 8007f54:	f108 0818 	add.w	r8, r8, #24
 8007f58:	4543      	cmp	r3, r8
 8007f5a:	bf08      	it	eq
 8007f5c:	f042 0201 	orreq.w	r2, r2, #1
 8007f60:	f108 0818 	add.w	r8, r8, #24
 8007f64:	4543      	cmp	r3, r8
 8007f66:	bf08      	it	eq
 8007f68:	f042 0201 	orreq.w	r2, r2, #1
 8007f6c:	f108 0818 	add.w	r8, r8, #24
 8007f70:	4543      	cmp	r3, r8
 8007f72:	bf08      	it	eq
 8007f74:	f042 0201 	orreq.w	r2, r2, #1
 8007f78:	f108 0818 	add.w	r8, r8, #24
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	bf08      	it	eq
 8007f80:	f042 0201 	orreq.w	r2, r2, #1
 8007f84:	b91a      	cbnz	r2, 8007f8e <HAL_DMA_IRQHandler+0x19e>
 8007f86:	4a3c      	ldr	r2, [pc, #240]	; (8008078 <HAL_DMA_IRQHandler+0x288>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	f040 8219 	bne.w	80083c0 <HAL_DMA_IRQHandler+0x5d0>
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	0792      	lsls	r2, r2, #30
 8007f92:	d506      	bpl.n	8007fa2 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f94:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f96:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8007f9a:	f042 0204 	orr.w	r2, r2, #4
 8007f9e:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	fa02 fc0c 	lsl.w	ip, r2, ip
 8007fa8:	ea1c 0f07 	tst.w	ip, r7
 8007fac:	d06c      	beq.n	8008088 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	d145      	bne.n	800803e <HAL_DMA_IRQHandler+0x24e>
 8007fb2:	4a30      	ldr	r2, [pc, #192]	; (8008074 <HAL_DMA_IRQHandler+0x284>)
 8007fb4:	4e31      	ldr	r6, [pc, #196]	; (800807c <HAL_DMA_IRQHandler+0x28c>)
 8007fb6:	42b3      	cmp	r3, r6
 8007fb8:	bf18      	it	ne
 8007fba:	4293      	cmpne	r3, r2
 8007fbc:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2201      	moveq	r2, #1
 8007fc4:	2200      	movne	r2, #0
 8007fc6:	42b3      	cmp	r3, r6
 8007fc8:	bf08      	it	eq
 8007fca:	f042 0201 	orreq.w	r2, r2, #1
 8007fce:	3618      	adds	r6, #24
 8007fd0:	42b3      	cmp	r3, r6
 8007fd2:	bf08      	it	eq
 8007fd4:	f042 0201 	orreq.w	r2, r2, #1
 8007fd8:	3618      	adds	r6, #24
 8007fda:	42b3      	cmp	r3, r6
 8007fdc:	bf08      	it	eq
 8007fde:	f042 0201 	orreq.w	r2, r2, #1
 8007fe2:	3618      	adds	r6, #24
 8007fe4:	42b3      	cmp	r3, r6
 8007fe6:	bf08      	it	eq
 8007fe8:	f042 0201 	orreq.w	r2, r2, #1
 8007fec:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8007ff0:	42b3      	cmp	r3, r6
 8007ff2:	bf08      	it	eq
 8007ff4:	f042 0201 	orreq.w	r2, r2, #1
 8007ff8:	3618      	adds	r6, #24
 8007ffa:	42b3      	cmp	r3, r6
 8007ffc:	bf08      	it	eq
 8007ffe:	f042 0201 	orreq.w	r2, r2, #1
 8008002:	3618      	adds	r6, #24
 8008004:	42b3      	cmp	r3, r6
 8008006:	bf08      	it	eq
 8008008:	f042 0201 	orreq.w	r2, r2, #1
 800800c:	3618      	adds	r6, #24
 800800e:	42b3      	cmp	r3, r6
 8008010:	bf08      	it	eq
 8008012:	f042 0201 	orreq.w	r2, r2, #1
 8008016:	3618      	adds	r6, #24
 8008018:	42b3      	cmp	r3, r6
 800801a:	bf08      	it	eq
 800801c:	f042 0201 	orreq.w	r2, r2, #1
 8008020:	3618      	adds	r6, #24
 8008022:	42b3      	cmp	r3, r6
 8008024:	bf08      	it	eq
 8008026:	f042 0201 	orreq.w	r2, r2, #1
 800802a:	3618      	adds	r6, #24
 800802c:	42b3      	cmp	r3, r6
 800802e:	bf08      	it	eq
 8008030:	f042 0201 	orreq.w	r2, r2, #1
 8008034:	b91a      	cbnz	r2, 800803e <HAL_DMA_IRQHandler+0x24e>
 8008036:	4a10      	ldr	r2, [pc, #64]	; (8008078 <HAL_DMA_IRQHandler+0x288>)
 8008038:	4293      	cmp	r3, r2
 800803a:	f040 81c9 	bne.w	80083d0 <HAL_DMA_IRQHandler+0x5e0>
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	0710      	lsls	r0, r2, #28
 8008042:	d521      	bpl.n	8008088 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008044:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	0356      	lsls	r6, r2, #13
 800804c:	f100 814c 	bmi.w	80082e8 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	05d2      	lsls	r2, r2, #23
 8008054:	d403      	bmi.n	800805e <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	f022 0208 	bic.w	r2, r2, #8
 800805c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800805e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008062:	b18b      	cbz	r3, 8008088 <HAL_DMA_IRQHandler+0x298>
 8008064:	e00c      	b.n	8008080 <HAL_DMA_IRQHandler+0x290>
 8008066:	bf00      	nop
 8008068:	2400030c 	.word	0x2400030c
 800806c:	40020010 	.word	0x40020010
 8008070:	40020028 	.word	0x40020028
 8008074:	40020058 	.word	0x40020058
 8008078:	400204b8 	.word	0x400204b8
 800807c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8008080:	4648      	mov	r0, r9
 8008082:	4798      	blx	r3
 8008084:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008088:	f001 011f 	and.w	r1, r1, #31
 800808c:	2620      	movs	r6, #32
 800808e:	408e      	lsls	r6, r1
 8008090:	423e      	tst	r6, r7
 8008092:	d068      	beq.n	8008166 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008094:	f8d9 2000 	ldr.w	r2, [r9]
 8008098:	4ba5      	ldr	r3, [pc, #660]	; (8008330 <HAL_DMA_IRQHandler+0x540>)
 800809a:	4fa6      	ldr	r7, [pc, #664]	; (8008334 <HAL_DMA_IRQHandler+0x544>)
 800809c:	42ba      	cmp	r2, r7
 800809e:	bf18      	it	ne
 80080a0:	429a      	cmpne	r2, r3
 80080a2:	f107 0718 	add.w	r7, r7, #24
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	42ba      	cmp	r2, r7
 80080ae:	bf08      	it	eq
 80080b0:	f043 0301 	orreq.w	r3, r3, #1
 80080b4:	3718      	adds	r7, #24
 80080b6:	42ba      	cmp	r2, r7
 80080b8:	bf08      	it	eq
 80080ba:	f043 0301 	orreq.w	r3, r3, #1
 80080be:	3718      	adds	r7, #24
 80080c0:	42ba      	cmp	r2, r7
 80080c2:	bf08      	it	eq
 80080c4:	f043 0301 	orreq.w	r3, r3, #1
 80080c8:	3718      	adds	r7, #24
 80080ca:	42ba      	cmp	r2, r7
 80080cc:	bf08      	it	eq
 80080ce:	f043 0301 	orreq.w	r3, r3, #1
 80080d2:	3718      	adds	r7, #24
 80080d4:	42ba      	cmp	r2, r7
 80080d6:	bf08      	it	eq
 80080d8:	f043 0301 	orreq.w	r3, r3, #1
 80080dc:	3718      	adds	r7, #24
 80080de:	42ba      	cmp	r2, r7
 80080e0:	bf08      	it	eq
 80080e2:	f043 0301 	orreq.w	r3, r3, #1
 80080e6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80080ea:	42ba      	cmp	r2, r7
 80080ec:	bf08      	it	eq
 80080ee:	f043 0301 	orreq.w	r3, r3, #1
 80080f2:	3718      	adds	r7, #24
 80080f4:	42ba      	cmp	r2, r7
 80080f6:	bf08      	it	eq
 80080f8:	f043 0301 	orreq.w	r3, r3, #1
 80080fc:	3718      	adds	r7, #24
 80080fe:	42ba      	cmp	r2, r7
 8008100:	bf08      	it	eq
 8008102:	f043 0301 	orreq.w	r3, r3, #1
 8008106:	3718      	adds	r7, #24
 8008108:	42ba      	cmp	r2, r7
 800810a:	bf08      	it	eq
 800810c:	f043 0301 	orreq.w	r3, r3, #1
 8008110:	3718      	adds	r7, #24
 8008112:	42ba      	cmp	r2, r7
 8008114:	bf08      	it	eq
 8008116:	f043 0301 	orreq.w	r3, r3, #1
 800811a:	3718      	adds	r7, #24
 800811c:	42ba      	cmp	r2, r7
 800811e:	bf08      	it	eq
 8008120:	f043 0301 	orreq.w	r3, r3, #1
 8008124:	3718      	adds	r7, #24
 8008126:	42ba      	cmp	r2, r7
 8008128:	bf08      	it	eq
 800812a:	f043 0301 	orreq.w	r3, r3, #1
 800812e:	b91b      	cbnz	r3, 8008138 <HAL_DMA_IRQHandler+0x348>
 8008130:	4b81      	ldr	r3, [pc, #516]	; (8008338 <HAL_DMA_IRQHandler+0x548>)
 8008132:	429a      	cmp	r2, r3
 8008134:	f040 8162 	bne.w	80083fc <HAL_DMA_IRQHandler+0x60c>
 8008138:	6813      	ldr	r3, [r2, #0]
 800813a:	06db      	lsls	r3, r3, #27
 800813c:	d513      	bpl.n	8008166 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800813e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008140:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8008144:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008146:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008148:	f000 80ae 	beq.w	80082a8 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800814c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008150:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008152:	f000 80d3 	beq.w	80082fc <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008156:	031c      	lsls	r4, r3, #12
 8008158:	f140 80de 	bpl.w	8008318 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800815c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8008160:	b10b      	cbz	r3, 8008166 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8008162:	4648      	mov	r0, r9
 8008164:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008166:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 80b9 	beq.w	80082e2 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008170:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8008174:	07d8      	lsls	r0, r3, #31
 8008176:	d51f      	bpl.n	80081b8 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8008178:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800817c:	2104      	movs	r1, #4
 800817e:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800818a:	4b6c      	ldr	r3, [pc, #432]	; (800833c <HAL_DMA_IRQHandler+0x54c>)
 800818c:	fba3 3505 	umull	r3, r5, r3, r5
 8008190:	0aad      	lsrs	r5, r5, #10
 8008192:	e002      	b.n	800819a <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008194:	6813      	ldr	r3, [r2, #0]
 8008196:	07d9      	lsls	r1, r3, #31
 8008198:	d504      	bpl.n	80081a4 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800819a:	9b01      	ldr	r3, [sp, #4]
 800819c:	3301      	adds	r3, #1
 800819e:	42ab      	cmp	r3, r5
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	d9f7      	bls.n	8008194 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80081a8:	bf4c      	ite	mi
 80081aa:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80081ac:	2301      	movpl	r3, #1
 80081ae:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80081b2:	2300      	movs	r3, #0
 80081b4:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80081b8:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8090 	beq.w	80082e2 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 80081c2:	4648      	mov	r0, r9
}
 80081c4:	b003      	add	sp, #12
 80081c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 80081ca:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	0740      	lsls	r0, r0, #29
 80081d0:	d50a      	bpl.n	80081e8 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	f020 0004 	bic.w	r0, r0, #4
 80081d8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081da:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80081dc:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081e8:	fa27 f20c 	lsr.w	r2, r7, ip
 80081ec:	07d2      	lsls	r2, r2, #31
 80081ee:	f57f ae76 	bpl.w	8007ede <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80081f2:	4a53      	ldr	r2, [pc, #332]	; (8008340 <HAL_DMA_IRQHandler+0x550>)
 80081f4:	4853      	ldr	r0, [pc, #332]	; (8008344 <HAL_DMA_IRQHandler+0x554>)
 80081f6:	4283      	cmp	r3, r0
 80081f8:	bf18      	it	ne
 80081fa:	4293      	cmpne	r3, r2
 80081fc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008200:	bf0c      	ite	eq
 8008202:	2201      	moveq	r2, #1
 8008204:	2200      	movne	r2, #0
 8008206:	4283      	cmp	r3, r0
 8008208:	bf08      	it	eq
 800820a:	f042 0201 	orreq.w	r2, r2, #1
 800820e:	3018      	adds	r0, #24
 8008210:	4283      	cmp	r3, r0
 8008212:	bf08      	it	eq
 8008214:	f042 0201 	orreq.w	r2, r2, #1
 8008218:	3018      	adds	r0, #24
 800821a:	4283      	cmp	r3, r0
 800821c:	bf08      	it	eq
 800821e:	f042 0201 	orreq.w	r2, r2, #1
 8008222:	3018      	adds	r0, #24
 8008224:	4283      	cmp	r3, r0
 8008226:	bf08      	it	eq
 8008228:	f042 0201 	orreq.w	r2, r2, #1
 800822c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8008230:	4283      	cmp	r3, r0
 8008232:	bf08      	it	eq
 8008234:	f042 0201 	orreq.w	r2, r2, #1
 8008238:	3018      	adds	r0, #24
 800823a:	4283      	cmp	r3, r0
 800823c:	bf08      	it	eq
 800823e:	f042 0201 	orreq.w	r2, r2, #1
 8008242:	3018      	adds	r0, #24
 8008244:	4283      	cmp	r3, r0
 8008246:	bf08      	it	eq
 8008248:	f042 0201 	orreq.w	r2, r2, #1
 800824c:	3018      	adds	r0, #24
 800824e:	4283      	cmp	r3, r0
 8008250:	bf08      	it	eq
 8008252:	f042 0201 	orreq.w	r2, r2, #1
 8008256:	3018      	adds	r0, #24
 8008258:	4283      	cmp	r3, r0
 800825a:	bf08      	it	eq
 800825c:	f042 0201 	orreq.w	r2, r2, #1
 8008260:	3018      	adds	r0, #24
 8008262:	4283      	cmp	r3, r0
 8008264:	bf08      	it	eq
 8008266:	f042 0201 	orreq.w	r2, r2, #1
 800826a:	3018      	adds	r0, #24
 800826c:	4283      	cmp	r3, r0
 800826e:	bf08      	it	eq
 8008270:	f042 0201 	orreq.w	r2, r2, #1
 8008274:	3018      	adds	r0, #24
 8008276:	4283      	cmp	r3, r0
 8008278:	bf08      	it	eq
 800827a:	f042 0201 	orreq.w	r2, r2, #1
 800827e:	2a00      	cmp	r2, #0
 8008280:	f47f ae20 	bne.w	8007ec4 <HAL_DMA_IRQHandler+0xd4>
 8008284:	2e00      	cmp	r6, #0
 8008286:	f47f ae1d 	bne.w	8007ec4 <HAL_DMA_IRQHandler+0xd4>
 800828a:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800828c:	2204      	movs	r2, #4
 800828e:	fa02 f20c 	lsl.w	r2, r2, ip
 8008292:	423a      	tst	r2, r7
 8008294:	f040 8094 	bne.w	80083c0 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008298:	2210      	movs	r2, #16
 800829a:	fa02 fc0c 	lsl.w	ip, r2, ip
 800829e:	ea17 0f0c 	tst.w	r7, ip
 80082a2:	f43f aef1 	beq.w	8008088 <HAL_DMA_IRQHandler+0x298>
 80082a6:	e684      	b.n	8007fb2 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082a8:	f023 0316 	bic.w	r3, r3, #22
 80082ac:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80082ae:	6953      	ldr	r3, [r2, #20]
 80082b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082b6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80082ba:	b39b      	cbz	r3, 8008324 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80082bc:	6813      	ldr	r3, [r2, #0]
 80082be:	f023 0308 	bic.w	r3, r3, #8
 80082c2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082c4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80082c6:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 80082c8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082ca:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80082ce:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082d2:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80082d4:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80082d8:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f47f af70 	bne.w	80081c2 <HAL_DMA_IRQHandler+0x3d2>
}
 80082e2:	b003      	add	sp, #12
 80082e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	0318      	lsls	r0, r3, #12
 80082ec:	f57f aeb7 	bpl.w	800805e <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80082f0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f47f aec3 	bne.w	8008080 <HAL_DMA_IRQHandler+0x290>
 80082fa:	e6c5      	b.n	8008088 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80082fc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8008300:	f47f af2c 	bne.w	800815c <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008304:	6811      	ldr	r1, [r2, #0]
 8008306:	f021 0110 	bic.w	r1, r1, #16
 800830a:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800830c:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800830e:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8008312:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8008316:	e721      	b.n	800815c <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8008318:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800831c:	2b00      	cmp	r3, #0
 800831e:	f47f af20 	bne.w	8008162 <HAL_DMA_IRQHandler+0x372>
 8008322:	e720      	b.n	8008166 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008324:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1c7      	bne.n	80082bc <HAL_DMA_IRQHandler+0x4cc>
 800832c:	e7ca      	b.n	80082c4 <HAL_DMA_IRQHandler+0x4d4>
 800832e:	bf00      	nop
 8008330:	40020010 	.word	0x40020010
 8008334:	40020028 	.word	0x40020028
 8008338:	400204b8 	.word	0x400204b8
 800833c:	1b4e81b5 	.word	0x1b4e81b5
 8008340:	40020058 	.word	0x40020058
 8008344:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008348:	4a4e      	ldr	r2, [pc, #312]	; (8008484 <HAL_DMA_IRQHandler+0x694>)
 800834a:	4d4f      	ldr	r5, [pc, #316]	; (8008488 <HAL_DMA_IRQHandler+0x698>)
 800834c:	42ab      	cmp	r3, r5
 800834e:	bf18      	it	ne
 8008350:	4293      	cmpne	r3, r2
 8008352:	f105 0514 	add.w	r5, r5, #20
 8008356:	bf0c      	ite	eq
 8008358:	2201      	moveq	r2, #1
 800835a:	2200      	movne	r2, #0
 800835c:	42ab      	cmp	r3, r5
 800835e:	bf08      	it	eq
 8008360:	f042 0201 	orreq.w	r2, r2, #1
 8008364:	3514      	adds	r5, #20
 8008366:	42ab      	cmp	r3, r5
 8008368:	bf08      	it	eq
 800836a:	f042 0201 	orreq.w	r2, r2, #1
 800836e:	3514      	adds	r5, #20
 8008370:	42ab      	cmp	r3, r5
 8008372:	bf08      	it	eq
 8008374:	f042 0201 	orreq.w	r2, r2, #1
 8008378:	3514      	adds	r5, #20
 800837a:	42ab      	cmp	r3, r5
 800837c:	bf08      	it	eq
 800837e:	f042 0201 	orreq.w	r2, r2, #1
 8008382:	3514      	adds	r5, #20
 8008384:	42ab      	cmp	r3, r5
 8008386:	bf08      	it	eq
 8008388:	f042 0201 	orreq.w	r2, r2, #1
 800838c:	b912      	cbnz	r2, 8008394 <HAL_DMA_IRQHandler+0x5a4>
 800838e:	4a3f      	ldr	r2, [pc, #252]	; (800848c <HAL_DMA_IRQHandler+0x69c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d1a6      	bne.n	80082e2 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008394:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8008398:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800839a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800839c:	f005 051f 	and.w	r5, r5, #31
 80083a0:	40ae      	lsls	r6, r5
 80083a2:	420e      	tst	r6, r1
 80083a4:	d019      	beq.n	80083da <HAL_DMA_IRQHandler+0x5ea>
 80083a6:	0757      	lsls	r7, r2, #29
 80083a8:	d517      	bpl.n	80083da <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083aa:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80083ac:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083ae:	d54b      	bpl.n	8008448 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80083b0:	03d1      	lsls	r1, r2, #15
 80083b2:	d44f      	bmi.n	8008454 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80083b4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f47f af02 	bne.w	80081c2 <HAL_DMA_IRQHandler+0x3d2>
 80083be:	e790      	b.n	80082e2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80083c0:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083c2:	2210      	movs	r2, #16
 80083c4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80083c8:	ea17 0f0c 	tst.w	r7, ip
 80083cc:	f43f ae5c 	beq.w	8008088 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	0752      	lsls	r2, r2, #29
 80083d4:	f57f ae58 	bpl.w	8008088 <HAL_DMA_IRQHandler+0x298>
 80083d8:	e634      	b.n	8008044 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80083da:	2602      	movs	r6, #2
 80083dc:	40ae      	lsls	r6, r5
 80083de:	420e      	tst	r6, r1
 80083e0:	d011      	beq.n	8008406 <HAL_DMA_IRQHandler+0x616>
 80083e2:	0797      	lsls	r7, r2, #30
 80083e4:	d50f      	bpl.n	8008406 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80083e6:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083e8:	0414      	lsls	r4, r2, #16
 80083ea:	d539      	bpl.n	8008460 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80083ec:	03d0      	lsls	r0, r2, #15
 80083ee:	d443      	bmi.n	8008478 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 80083f0:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f47f aee4 	bne.w	80081c2 <HAL_DMA_IRQHandler+0x3d2>
 80083fa:	e772      	b.n	80082e2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80083fc:	6813      	ldr	r3, [r2, #0]
 80083fe:	079f      	lsls	r7, r3, #30
 8008400:	f57f aeb1 	bpl.w	8008166 <HAL_DMA_IRQHandler+0x376>
 8008404:	e69b      	b.n	800813e <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008406:	2608      	movs	r6, #8
 8008408:	40ae      	lsls	r6, r5
 800840a:	420e      	tst	r6, r1
 800840c:	f43f af69 	beq.w	80082e2 <HAL_DMA_IRQHandler+0x4f2>
 8008410:	0711      	lsls	r1, r2, #28
 8008412:	f57f af66 	bpl.w	80082e2 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008416:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8008418:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800841a:	f022 020e 	bic.w	r2, r2, #14
 800841e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008420:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8008422:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008426:	fa03 f505 	lsl.w	r5, r3, r5
 800842a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800842c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8008430:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8008434:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8008438:	2a00      	cmp	r2, #0
 800843a:	f43f af52 	beq.w	80082e2 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800843e:	4648      	mov	r0, r9
}
 8008440:	b003      	add	sp, #12
 8008442:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8008446:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008448:	0692      	lsls	r2, r2, #26
 800844a:	d403      	bmi.n	8008454 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	f022 0204 	bic.w	r2, r2, #4
 8008452:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8008454:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8008458:	2b00      	cmp	r3, #0
 800845a:	f47f aeb2 	bne.w	80081c2 <HAL_DMA_IRQHandler+0x3d2>
 800845e:	e740      	b.n	80082e2 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008460:	f012 0220 	ands.w	r2, r2, #32
 8008464:	d108      	bne.n	8008478 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008466:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008468:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800846a:	f021 010a 	bic.w	r1, r1, #10
 800846e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008470:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008474:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8008478:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800847c:	2b00      	cmp	r3, #0
 800847e:	f47f aea0 	bne.w	80081c2 <HAL_DMA_IRQHandler+0x3d2>
 8008482:	e72e      	b.n	80082e2 <HAL_DMA_IRQHandler+0x4f2>
 8008484:	58025408 	.word	0x58025408
 8008488:	5802541c 	.word	0x5802541c
 800848c:	58025494 	.word	0x58025494

08008490 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008494:	680c      	ldr	r4, [r1, #0]
{
 8008496:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008498:	2c00      	cmp	r4, #0
 800849a:	f000 80a6 	beq.w	80085ea <HAL_GPIO_Init+0x15a>
 800849e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084a2:	4f8e      	ldr	r7, [pc, #568]	; (80086dc <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 80084a4:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084a6:	2201      	movs	r2, #1
 80084a8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80084aa:	ea12 0e04 	ands.w	lr, r2, r4
 80084ae:	f000 8095 	beq.w	80085dc <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084b2:	684d      	ldr	r5, [r1, #4]
 80084b4:	f005 0903 	and.w	r9, r5, #3
 80084b8:	f109 36ff 	add.w	r6, r9, #4294967295
 80084bc:	2e01      	cmp	r6, #1
 80084be:	f240 8097 	bls.w	80085f0 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084c2:	f1b9 0f03 	cmp.w	r9, #3
 80084c6:	f040 80d1 	bne.w	800866c <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084ca:	fa09 f20c 	lsl.w	r2, r9, ip
 80084ce:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80084d2:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084d8:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084dc:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80084e0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80084e2:	d07b      	beq.n	80085dc <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80084e8:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084ec:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084f0:	f042 0202 	orr.w	r2, r2, #2
 80084f4:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084f8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008500:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8008504:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008508:	f002 0202 	and.w	r2, r2, #2
 800850c:	9201      	str	r2, [sp, #4]
 800850e:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008510:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8008512:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008516:	fa02 f209 	lsl.w	r2, r2, r9
 800851a:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800851e:	4e70      	ldr	r6, [pc, #448]	; (80086e0 <HAL_GPIO_Init+0x250>)
 8008520:	42b0      	cmp	r0, r6
 8008522:	d029      	beq.n	8008578 <HAL_GPIO_Init+0xe8>
 8008524:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008528:	42b0      	cmp	r0, r6
 800852a:	f000 80ac 	beq.w	8008686 <HAL_GPIO_Init+0x1f6>
 800852e:	4e6d      	ldr	r6, [pc, #436]	; (80086e4 <HAL_GPIO_Init+0x254>)
 8008530:	42b0      	cmp	r0, r6
 8008532:	f000 80ae 	beq.w	8008692 <HAL_GPIO_Init+0x202>
 8008536:	4e6c      	ldr	r6, [pc, #432]	; (80086e8 <HAL_GPIO_Init+0x258>)
 8008538:	42b0      	cmp	r0, r6
 800853a:	f000 809e 	beq.w	800867a <HAL_GPIO_Init+0x1ea>
 800853e:	4e6b      	ldr	r6, [pc, #428]	; (80086ec <HAL_GPIO_Init+0x25c>)
 8008540:	42b0      	cmp	r0, r6
 8008542:	f000 80b2 	beq.w	80086aa <HAL_GPIO_Init+0x21a>
 8008546:	4e6a      	ldr	r6, [pc, #424]	; (80086f0 <HAL_GPIO_Init+0x260>)
 8008548:	42b0      	cmp	r0, r6
 800854a:	f000 80b4 	beq.w	80086b6 <HAL_GPIO_Init+0x226>
 800854e:	4e69      	ldr	r6, [pc, #420]	; (80086f4 <HAL_GPIO_Init+0x264>)
 8008550:	42b0      	cmp	r0, r6
 8008552:	f000 80a4 	beq.w	800869e <HAL_GPIO_Init+0x20e>
 8008556:	4e68      	ldr	r6, [pc, #416]	; (80086f8 <HAL_GPIO_Init+0x268>)
 8008558:	42b0      	cmp	r0, r6
 800855a:	f000 80b2 	beq.w	80086c2 <HAL_GPIO_Init+0x232>
 800855e:	4e67      	ldr	r6, [pc, #412]	; (80086fc <HAL_GPIO_Init+0x26c>)
 8008560:	42b0      	cmp	r0, r6
 8008562:	f000 80b4 	beq.w	80086ce <HAL_GPIO_Init+0x23e>
 8008566:	4e66      	ldr	r6, [pc, #408]	; (8008700 <HAL_GPIO_Init+0x270>)
 8008568:	42b0      	cmp	r0, r6
 800856a:	bf0c      	ite	eq
 800856c:	2609      	moveq	r6, #9
 800856e:	260a      	movne	r6, #10
 8008570:	fa06 f909 	lsl.w	r9, r6, r9
 8008574:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008578:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800857c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008580:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8008582:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8008586:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008588:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800858c:	bf54      	ite	pl
 800858e:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8008592:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8008596:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008598:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 800859a:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800859c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80085a0:	bf54      	ite	pl
 80085a2:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80085a6:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 80085aa:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80085ac:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085b0:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80085b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80085b6:	bf54      	ite	pl
 80085b8:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80085bc:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085c0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80085c2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80085c6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80085ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80085ce:	bf54      	ite	pl
 80085d0:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80085d4:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80085d8:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80085dc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085de:	f10c 0c02 	add.w	ip, ip, #2
 80085e2:	fa34 f203 	lsrs.w	r2, r4, r3
 80085e6:	f47f af5e 	bne.w	80084a6 <HAL_GPIO_Init+0x16>
  }
}
 80085ea:	b003      	add	sp, #12
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085f0:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80085f4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085f6:	fa08 f80c 	lsl.w	r8, r8, ip
 80085fa:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085fe:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008600:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008604:	fa06 f60c 	lsl.w	r6, r6, ip
 8008608:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800860c:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800860e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8008612:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008616:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008618:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800861c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800861e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8008620:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008622:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008626:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008628:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800862c:	fa06 f60c 	lsl.w	r6, r6, ip
 8008630:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8008634:	fa09 f20c 	lsl.w	r2, r9, ip
 8008638:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800863a:	f47f af4a 	bne.w	80084d2 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800863e:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8008642:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008646:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800864a:	260f      	movs	r6, #15
 800864c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008650:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8008654:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008658:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800865c:	690e      	ldr	r6, [r1, #16]
 800865e:	fa06 f60b 	lsl.w	r6, r6, fp
 8008662:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8008666:	f8c9 6020 	str.w	r6, [r9, #32]
 800866a:	e732      	b.n	80084d2 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800866c:	f04f 0803 	mov.w	r8, #3
 8008670:	fa08 f80c 	lsl.w	r8, r8, ip
 8008674:	ea6f 0808 	mvn.w	r8, r8
 8008678:	e7d2      	b.n	8008620 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800867a:	2603      	movs	r6, #3
 800867c:	fa06 f909 	lsl.w	r9, r6, r9
 8008680:	ea42 0209 	orr.w	r2, r2, r9
 8008684:	e778      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 8008686:	2601      	movs	r6, #1
 8008688:	fa06 f909 	lsl.w	r9, r6, r9
 800868c:	ea42 0209 	orr.w	r2, r2, r9
 8008690:	e772      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 8008692:	2602      	movs	r6, #2
 8008694:	fa06 f909 	lsl.w	r9, r6, r9
 8008698:	ea42 0209 	orr.w	r2, r2, r9
 800869c:	e76c      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 800869e:	2606      	movs	r6, #6
 80086a0:	fa06 f909 	lsl.w	r9, r6, r9
 80086a4:	ea42 0209 	orr.w	r2, r2, r9
 80086a8:	e766      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 80086aa:	2604      	movs	r6, #4
 80086ac:	fa06 f909 	lsl.w	r9, r6, r9
 80086b0:	ea42 0209 	orr.w	r2, r2, r9
 80086b4:	e760      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 80086b6:	2605      	movs	r6, #5
 80086b8:	fa06 f909 	lsl.w	r9, r6, r9
 80086bc:	ea42 0209 	orr.w	r2, r2, r9
 80086c0:	e75a      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 80086c2:	2607      	movs	r6, #7
 80086c4:	fa06 f909 	lsl.w	r9, r6, r9
 80086c8:	ea42 0209 	orr.w	r2, r2, r9
 80086cc:	e754      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 80086ce:	2608      	movs	r6, #8
 80086d0:	fa06 f909 	lsl.w	r9, r6, r9
 80086d4:	ea42 0209 	orr.w	r2, r2, r9
 80086d8:	e74e      	b.n	8008578 <HAL_GPIO_Init+0xe8>
 80086da:	bf00      	nop
 80086dc:	58024400 	.word	0x58024400
 80086e0:	58020000 	.word	0x58020000
 80086e4:	58020800 	.word	0x58020800
 80086e8:	58020c00 	.word	0x58020c00
 80086ec:	58021000 	.word	0x58021000
 80086f0:	58021400 	.word	0x58021400
 80086f4:	58021800 	.word	0x58021800
 80086f8:	58021c00 	.word	0x58021c00
 80086fc:	58022000 	.word	0x58022000
 8008700:	58022400 	.word	0x58022400

08008704 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008704:	6903      	ldr	r3, [r0, #16]
 8008706:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008708:	bf14      	ite	ne
 800870a:	2001      	movne	r0, #1
 800870c:	2000      	moveq	r0, #0
 800870e:	4770      	bx	lr

08008710 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008710:	b902      	cbnz	r2, 8008714 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008712:	0409      	lsls	r1, r1, #16
 8008714:	6181      	str	r1, [r0, #24]
  }
}
 8008716:	4770      	bx	lr

08008718 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800871c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008720:	4201      	tst	r1, r0
 8008722:	d100      	bne.n	8008726 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8008724:	4770      	bx	lr
{
 8008726:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008728:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800872c:	f7f8 fd20 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008730:	bd08      	pop	{r3, pc}
 8008732:	bf00      	nop

08008734 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008734:	2800      	cmp	r0, #0
 8008736:	d05e      	beq.n	80087f6 <HAL_LPTIM_Init+0xc2>
{
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800873a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800873e:	4604      	mov	r4, r0
 8008740:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008744:	2b00      	cmp	r3, #0
 8008746:	d051      	beq.n	80087ec <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008748:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800874a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800874c:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008750:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008754:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8008756:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008758:	d03c      	beq.n	80087d4 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800875a:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800875e:	d039      	beq.n	80087d4 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008760:	6962      	ldr	r2, [r4, #20]
 8008762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008766:	429a      	cmp	r2, r3
 8008768:	d003      	beq.n	8008772 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800876a:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800876e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008772:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8008774:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008776:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8008778:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800877a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800877c:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800877e:	4e22      	ldr	r6, [pc, #136]	; (8008808 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 8008780:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008782:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008784:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008786:	b1ed      	cbz	r5, 80087c4 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008788:	2d01      	cmp	r5, #1
 800878a:	d11f      	bne.n	80087cc <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800878c:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8008790:	4328      	orrs	r0, r5
 8008792:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008794:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008798:	4282      	cmp	r2, r0
 800879a:	d004      	beq.n	80087a6 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800879c:	69a0      	ldr	r0, [r4, #24]
 800879e:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 80087a0:	69e0      	ldr	r0, [r4, #28]
 80087a2:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80087a4:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80087a6:	4a19      	ldr	r2, [pc, #100]	; (800880c <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 80087a8:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80087aa:	4291      	cmp	r1, r2
 80087ac:	d015      	beq.n	80087da <HAL_LPTIM_Init+0xa6>
 80087ae:	4b18      	ldr	r3, [pc, #96]	; (8008810 <HAL_LPTIM_Init+0xdc>)
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d012      	beq.n	80087da <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80087b4:	4b17      	ldr	r3, [pc, #92]	; (8008814 <HAL_LPTIM_Init+0xe0>)
 80087b6:	4299      	cmp	r1, r3
 80087b8:	d01f      	beq.n	80087fa <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80087ba:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80087bc:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80087be:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80087c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80087c4:	69e0      	ldr	r0, [r4, #28]
 80087c6:	6925      	ldr	r5, [r4, #16]
 80087c8:	4328      	orrs	r0, r5
 80087ca:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80087cc:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 80087d0:	d1e0      	bne.n	8008794 <HAL_LPTIM_Init+0x60>
 80087d2:	e7db      	b.n	800878c <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80087d4:	f020 001e 	bic.w	r0, r0, #30
 80087d8:	e7c2      	b.n	8008760 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80087da:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80087de:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80087e0:	4313      	orrs	r3, r2
 80087e2:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80087e4:	2301      	movs	r3, #1
 80087e6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80087ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80087ec:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80087f0:	f7fc fcda 	bl	80051a8 <HAL_LPTIM_MspInit>
 80087f4:	e7a8      	b.n	8008748 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80087f6:	2001      	movs	r0, #1
}
 80087f8:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80087fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80087fc:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80087fe:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008800:	2301      	movs	r3, #1
 8008802:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	ff19f1fe 	.word	0xff19f1fe
 800880c:	40002400 	.word	0x40002400
 8008810:	58002400 	.word	0x58002400
 8008814:	58002800 	.word	0x58002800

08008818 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800881c:	2800      	cmp	r0, #0
 800881e:	f000 8088 	beq.w	8008932 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008822:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8008826:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8008828:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800882a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800882e:	2b00      	cmp	r3, #0
 8008830:	d079      	beq.n	8008926 <HAL_PCD_Init+0x10e>
 8008832:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008834:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008836:	462e      	mov	r6, r5
 8008838:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800883a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800883e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008840:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008842:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8008846:	bf08      	it	eq
 8008848:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800884a:	f004 f9b1 	bl	800cbb0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800884e:	f856 eb10 	ldr.w	lr, [r6], #16
 8008852:	46b4      	mov	ip, r6
 8008854:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800885a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800885e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008860:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008864:	e884 0003 	stmia.w	r4, {r0, r1}
 8008868:	4670      	mov	r0, lr
 800886a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800886e:	f004 f87f 	bl	800c970 <USB_CoreInit>
 8008872:	4604      	mov	r4, r0
 8008874:	b130      	cbz	r0, 8008884 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8008876:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008878:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800887a:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800887c:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8008880:	b00b      	add	sp, #44	; 0x2c
 8008882:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008884:	4601      	mov	r1, r0
 8008886:	6828      	ldr	r0, [r5, #0]
 8008888:	f004 f99a 	bl	800cbc0 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800888c:	6868      	ldr	r0, [r5, #4]
 800888e:	b358      	cbz	r0, 80088e8 <HAL_PCD_Init+0xd0>
 8008890:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008892:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008896:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8008898:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800889c:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 80088a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80088a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ac:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 80088b0:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088b4:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088b6:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80088ba:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088bc:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c0:	d3ea      	bcc.n	8008898 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80088c2:	2200      	movs	r2, #0
 80088c4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088c8:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80088ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80088ce:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d2:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80088d4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d8:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088da:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80088de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80088e2:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088e6:	d3ed      	bcc.n	80088c4 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088e8:	466c      	mov	r4, sp
 80088ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80088ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80088f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80088f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80088fa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80088fe:	6828      	ldr	r0, [r5, #0]
 8008900:	f004 f994 	bl	800cc2c <USB_DevInit>
 8008904:	4604      	mov	r4, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d1b5      	bne.n	8008876 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 800890a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800890c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800890e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8008912:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8008914:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8008918:	d00f      	beq.n	800893a <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 800891a:	6828      	ldr	r0, [r5, #0]
 800891c:	f004 fe00 	bl	800d520 <USB_DevDisconnect>
}
 8008920:	4620      	mov	r0, r4
 8008922:	b00b      	add	sp, #44	; 0x2c
 8008924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8008926:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800892a:	f005 fe55 	bl	800e5d8 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800892e:	6828      	ldr	r0, [r5, #0]
 8008930:	e780      	b.n	8008834 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8008932:	2401      	movs	r4, #1
}
 8008934:	4620      	mov	r0, r4
 8008936:	b00b      	add	sp, #44	; 0x2c
 8008938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800893a:	4628      	mov	r0, r5
 800893c:	f000 fce0 	bl	8009300 <HAL_PCDEx_ActivateLPM>
 8008940:	e7eb      	b.n	800891a <HAL_PCD_Init+0x102>
 8008942:	bf00      	nop

08008944 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008944:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8008946:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 800894a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800894c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800894e:	2b01      	cmp	r3, #1
 8008950:	d017      	beq.n	8008982 <HAL_PCD_Start+0x3e>
 8008952:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008956:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8008958:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800895c:	d009      	beq.n	8008972 <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800895e:	f004 f91f 	bl	800cba0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008962:	6820      	ldr	r0, [r4, #0]
 8008964:	f004 fdcc 	bl	800d500 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008968:	2300      	movs	r3, #0

  return HAL_OK;
 800896a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800896c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8008970:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008972:	69a3      	ldr	r3, [r4, #24]
 8008974:	4293      	cmp	r3, r2
 8008976:	d0f2      	beq.n	800895e <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008978:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800897a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800897e:	6383      	str	r3, [r0, #56]	; 0x38
 8008980:	e7ed      	b.n	800895e <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8008982:	2002      	movs	r0, #2
}
 8008984:	bd10      	pop	{r4, pc}
 8008986:	bf00      	nop

08008988 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800898c:	6807      	ldr	r7, [r0, #0]
{
 800898e:	b089      	sub	sp, #36	; 0x24
 8008990:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008992:	4638      	mov	r0, r7
 8008994:	f004 fe02 	bl	800d59c <USB_GetMode>
 8008998:	b110      	cbz	r0, 80089a0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800899a:	b009      	add	sp, #36	; 0x24
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80089a0:	4683      	mov	fp, r0
 80089a2:	6820      	ldr	r0, [r4, #0]
 80089a4:	f004 fdcc 	bl	800d540 <USB_ReadInterrupts>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d0f6      	beq.n	800899a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	f004 fdc7 	bl	800d540 <USB_ReadInterrupts>
 80089b2:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089b6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089b8:	d003      	beq.n	80089c2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089ba:	6943      	ldr	r3, [r0, #20]
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089c2:	f004 fdbd 	bl	800d540 <USB_ReadInterrupts>
 80089c6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089cc:	d012      	beq.n	80089f4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089ce:	6983      	ldr	r3, [r0, #24]
 80089d0:	f023 0310 	bic.w	r3, r3, #16
 80089d4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80089d6:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80089d8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80089dc:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	f000 8261 	beq.w	8008ea8 <HAL_PCD_IRQHandler+0x520>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80089e6:	2b06      	cmp	r3, #6
 80089e8:	f000 81b1 	beq.w	8008d4e <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089ec:	6983      	ldr	r3, [r0, #24]
 80089ee:	f043 0310 	orr.w	r3, r3, #16
 80089f2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80089f4:	f004 fda4 	bl	800d540 <USB_ReadInterrupts>
 80089f8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80089fc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80089fe:	f040 80cf 	bne.w	8008ba0 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008a02:	f004 fd9d 	bl	800d540 <USB_ReadInterrupts>
 8008a06:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008a0a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008a0c:	d175      	bne.n	8008afa <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a0e:	f004 fd97 	bl	800d540 <USB_ReadInterrupts>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	db5d      	blt.n	8008ad2 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	f004 fd92 	bl	800d540 <USB_ReadInterrupts>
 8008a1c:	0500      	lsls	r0, r0, #20
 8008a1e:	d44d      	bmi.n	8008abc <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a20:	6820      	ldr	r0, [r4, #0]
 8008a22:	f004 fd8d 	bl	800d540 <USB_ReadInterrupts>
 8008a26:	0102      	lsls	r2, r0, #4
 8008a28:	d514      	bpl.n	8008a54 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	6953      	ldr	r3, [r2, #20]
 8008a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a32:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8008a34:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f040 8172 	bne.w	8008d22 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 8008a3e:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a40:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8008a42:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a46:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008a48:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8008a4c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a50:	f000 fc6e 	bl	8009330 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008a54:	6820      	ldr	r0, [r4, #0]
 8008a56:	f004 fd73 	bl	800d540 <USB_ReadInterrupts>
 8008a5a:	04c3      	lsls	r3, r0, #19
 8008a5c:	f100 8116 	bmi.w	8008c8c <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	f004 fd6d 	bl	800d540 <USB_ReadInterrupts>
 8008a66:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a6a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a6c:	f040 80f7 	bne.w	8008c5e <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a70:	f004 fd66 	bl	800d540 <USB_ReadInterrupts>
 8008a74:	0707      	lsls	r7, r0, #28
 8008a76:	f100 80e9 	bmi.w	8008c4c <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a7a:	6820      	ldr	r0, [r4, #0]
 8008a7c:	f004 fd60 	bl	800d540 <USB_ReadInterrupts>
 8008a80:	02c6      	lsls	r6, r0, #11
 8008a82:	f100 80d9 	bmi.w	8008c38 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a86:	6820      	ldr	r0, [r4, #0]
 8008a88:	f004 fd5a 	bl	800d540 <USB_ReadInterrupts>
 8008a8c:	0285      	lsls	r5, r0, #10
 8008a8e:	f100 80c9 	bmi.w	8008c24 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	f004 fd54 	bl	800d540 <USB_ReadInterrupts>
 8008a98:	0040      	lsls	r0, r0, #1
 8008a9a:	f100 80ba 	bmi.w	8008c12 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a9e:	6820      	ldr	r0, [r4, #0]
 8008aa0:	f004 fd4e 	bl	800d540 <USB_ReadInterrupts>
 8008aa4:	0741      	lsls	r1, r0, #29
 8008aa6:	f57f af78 	bpl.w	800899a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008aae:	076a      	lsls	r2, r5, #29
 8008ab0:	f100 821b 	bmi.w	8008eea <HAL_PCD_IRQHandler+0x562>
      hpcd->Instance->GOTGINT |= temp;
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	432a      	orrs	r2, r5
 8008ab8:	605a      	str	r2, [r3, #4]
 8008aba:	e76e      	b.n	800899a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008abc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8008ac0:	07d9      	lsls	r1, r3, #31
 8008ac2:	f100 820e 	bmi.w	8008ee2 <HAL_PCD_IRQHandler+0x55a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	6943      	ldr	r3, [r0, #20]
 8008aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ace:	6143      	str	r3, [r0, #20]
 8008ad0:	e7a7      	b.n	8008a22 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ad2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8008ade:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	f000 812c 	beq.w	8008d40 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f005 fe1f 	bl	800e72c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008aee:	6820      	ldr	r0, [r4, #0]
 8008af0:	6943      	ldr	r3, [r0, #20]
 8008af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008af6:	6143      	str	r3, [r0, #20]
 8008af8:	e78e      	b.n	8008a18 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008afa:	f004 fd2d 	bl	800d558 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8008afe:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b00:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8008b02:	f1b8 0f00 	cmp.w	r8, #0
 8008b06:	d082      	beq.n	8008a0e <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 8008b08:	f04f 0a00 	mov.w	sl, #0
 8008b0c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b10:	9703      	str	r7, [sp, #12]
 8008b12:	4626      	mov	r6, r4
 8008b14:	4657      	mov	r7, sl
 8008b16:	f8cd b010 	str.w	fp, [sp, #16]
 8008b1a:	e009      	b.n	8008b30 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 8008b1c:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 8008b20:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8008b24:	f106 061c 	add.w	r6, r6, #28
 8008b28:	f109 0920 	add.w	r9, r9, #32
 8008b2c:	f000 8124 	beq.w	8008d78 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008b30:	f018 0f01 	tst.w	r8, #1
 8008b34:	d0f2      	beq.n	8008b1c <HAL_PCD_IRQHandler+0x194>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b36:	fa5f fa87 	uxtb.w	sl, r7
 8008b3a:	4651      	mov	r1, sl
 8008b3c:	f004 fd1e 	bl	800d57c <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b40:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b42:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b44:	d515      	bpl.n	8008b72 <HAL_PCD_IRQHandler+0x1ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b46:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b48:	f007 030f 	and.w	r3, r7, #15
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b50:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 8008b54:	ea23 0302 	bic.w	r3, r3, r2
 8008b58:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b5c:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 8008b5e:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b60:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8008b64:	4299      	cmp	r1, r3
 8008b66:	f000 81c5 	beq.w	8008ef4 <HAL_PCD_IRQHandler+0x56c>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f005 fda1 	bl	800e6b4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008b72:	0728      	lsls	r0, r5, #28
 8008b74:	d502      	bpl.n	8008b7c <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008b76:	2308      	movs	r3, #8
 8008b78:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008b7c:	06e9      	lsls	r1, r5, #27
 8008b7e:	d502      	bpl.n	8008b86 <HAL_PCD_IRQHandler+0x1fe>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008b80:	2310      	movs	r3, #16
 8008b82:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008b86:	066a      	lsls	r2, r5, #25
 8008b88:	d502      	bpl.n	8008b90 <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b8a:	2340      	movs	r3, #64	; 0x40
 8008b8c:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008b90:	07ab      	lsls	r3, r5, #30
 8008b92:	f100 8181 	bmi.w	8008e98 <HAL_PCD_IRQHandler+0x510>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008b96:	062d      	lsls	r5, r5, #24
 8008b98:	f100 812a 	bmi.w	8008df0 <HAL_PCD_IRQHandler+0x468>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	e7bd      	b.n	8008b1c <HAL_PCD_IRQHandler+0x194>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008ba0:	f004 fcd2 	bl	800d548 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8008ba4:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ba6:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	f43f af2a 	beq.w	8008a02 <HAL_PCD_IRQHandler+0x7a>
 8008bae:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 8008bb2:	46a2      	mov	sl, r4
      epnum = 0U;
 8008bb4:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008bb8:	9703      	str	r7, [sp, #12]
 8008bba:	e008      	b.n	8008bce <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 8008bbc:	086d      	lsrs	r5, r5, #1
        epnum++;
 8008bbe:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8008bc2:	f106 0620 	add.w	r6, r6, #32
 8008bc6:	f10a 0a1c 	add.w	sl, sl, #28
 8008bca:	f000 80d3 	beq.w	8008d74 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 8008bce:	07ef      	lsls	r7, r5, #31
 8008bd0:	d5f4      	bpl.n	8008bbc <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bd2:	fa5f f788 	uxtb.w	r7, r8
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f004 fcc6 	bl	800d568 <USB_ReadDevOutEPInterrupt>
 8008bdc:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bde:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008be0:	f019 0f01 	tst.w	r9, #1
 8008be4:	f040 80e5 	bne.w	8008db2 <HAL_PCD_IRQHandler+0x42a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008be8:	f019 0f08 	tst.w	r9, #8
 8008bec:	f040 80c7 	bne.w	8008d7e <HAL_PCD_IRQHandler+0x3f6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008bf0:	f019 0f10 	tst.w	r9, #16
 8008bf4:	d001      	beq.n	8008bfa <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bfa:	f019 0f20 	tst.w	r9, #32
 8008bfe:	d001      	beq.n	8008c04 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c00:	2320      	movs	r3, #32
 8008c02:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008c04:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8008c08:	d0d8      	beq.n	8008bbc <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c0e:	60b3      	str	r3, [r6, #8]
 8008c10:	e7d4      	b.n	8008bbc <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 8008c12:	4620      	mov	r0, r4
 8008c14:	f005 fd96 	bl	800e744 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008c18:	6820      	ldr	r0, [r4, #0]
 8008c1a:	6943      	ldr	r3, [r0, #20]
 8008c1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c20:	6143      	str	r3, [r0, #20]
 8008c22:	e73d      	b.n	8008aa0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c24:	4620      	mov	r0, r4
 8008c26:	2100      	movs	r1, #0
 8008c28:	f005 fd84 	bl	800e734 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008c2c:	6820      	ldr	r0, [r4, #0]
 8008c2e:	6943      	ldr	r3, [r0, #20]
 8008c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c34:	6143      	str	r3, [r0, #20]
 8008c36:	e72d      	b.n	8008a94 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c38:	4620      	mov	r0, r4
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	f005 fd7e 	bl	800e73c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	6943      	ldr	r3, [r0, #20]
 8008c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c48:	6143      	str	r3, [r0, #20]
 8008c4a:	e71d      	b.n	8008a88 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f005 fd3b 	bl	800e6c8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	6943      	ldr	r3, [r0, #20]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	6143      	str	r3, [r0, #20]
 8008c5c:	e70e      	b.n	8008a7c <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c5e:	f004 fca1 	bl	800d5a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	f004 f91a 	bl	800ce9c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c68:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c6a:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c6c:	f001 f900 	bl	8009e70 <HAL_RCC_GetHCLKFreq>
 8008c70:	7b22      	ldrb	r2, [r4, #12]
 8008c72:	4601      	mov	r1, r0
 8008c74:	4628      	mov	r0, r5
 8008c76:	f003 ff19 	bl	800caac <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f005 fd28 	bl	800e6d0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	6943      	ldr	r3, [r0, #20]
 8008c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c88:	6143      	str	r3, [r0, #20]
 8008c8a:	e6f1      	b.n	8008a70 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c8c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8008c90:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008c94:	2110      	movs	r1, #16
 8008c96:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c98:	f023 0301 	bic.w	r3, r3, #1
 8008c9c:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008c9e:	f004 f8d5 	bl	800ce4c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ca2:	6860      	ldr	r0, [r4, #4]
 8008ca4:	b1e0      	cbz	r0, 8008ce0 <HAL_PCD_IRQHandler+0x358>
 8008ca6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008caa:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8008cae:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cb0:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008cb4:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cb6:	3320      	adds	r3, #32
 8008cb8:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008cba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008cbe:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008cc2:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cc6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008cca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8008cce:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008cd2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8008cd6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8008cda:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cde:	d1e6      	bne.n	8008cae <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ce0:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ce4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ce8:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008cea:	b9f2      	cbnz	r2, 8008d2a <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008cec:	696a      	ldr	r2, [r5, #20]
 8008cee:	f242 032b 	movw	r3, #8235	; 0x202b
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008cf6:	692b      	ldr	r3, [r5, #16]
 8008cf8:	f043 030b 	orr.w	r3, r3, #11
 8008cfc:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008cfe:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d02:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008d06:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008d08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d0c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008d0e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d12:	f004 fc5d 	bl	800d5d0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008d16:	6820      	ldr	r0, [r4, #0]
 8008d18:	6943      	ldr	r3, [r0, #20]
 8008d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d1e:	6143      	str	r3, [r0, #20]
 8008d20:	e69f      	b.n	8008a62 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 8008d22:	4620      	mov	r0, r4
 8008d24:	f005 fcea 	bl	800e6fc <HAL_PCD_SuspendCallback>
 8008d28:	e694      	b.n	8008a54 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008d2a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8008d2e:	f043 030b 	orr.w	r3, r3, #11
 8008d32:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008d36:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008d38:	f043 030b 	orr.w	r3, r3, #11
 8008d3c:	646b      	str	r3, [r5, #68]	; 0x44
 8008d3e:	e7de      	b.n	8008cfe <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 8008d40:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d42:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8008d44:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d48:	f000 faf2 	bl	8009330 <HAL_PCDEx_LPM_Callback>
 8008d4c:	e6cf      	b.n	8008aee <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d4e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008d52:	2208      	movs	r2, #8
 8008d54:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8008d58:	4638      	mov	r0, r7
 8008d5a:	f004 fb39 	bl	800d3d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d5e:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8008d62:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d66:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d68:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8008d6c:	440b      	add	r3, r1
 8008d6e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8008d72:	e63b      	b.n	80089ec <HAL_PCD_IRQHandler+0x64>
 8008d74:	9f03      	ldr	r7, [sp, #12]
 8008d76:	e644      	b.n	8008a02 <HAL_PCD_IRQHandler+0x7a>
 8008d78:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 8008d7c:	e647      	b.n	8008a0e <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008d7e:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d80:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008d84:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d8a:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d8c:	4890      	ldr	r0, [pc, #576]	; (8008fd0 <HAL_PCD_IRQHandler+0x648>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d8e:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d90:	4282      	cmp	r2, r0
 8008d92:	f240 80c0 	bls.w	8008f16 <HAL_PCD_IRQHandler+0x58e>
 8008d96:	040a      	lsls	r2, r1, #16
 8008d98:	d502      	bpl.n	8008da0 <HAL_PCD_IRQHandler+0x418>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008d9e:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008da0:	4620      	mov	r0, r4
 8008da2:	f005 fc77 	bl	800e694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008da6:	6921      	ldr	r1, [r4, #16]
 8008da8:	2901      	cmp	r1, #1
 8008daa:	f000 80df 	beq.w	8008f6c <HAL_PCD_IRQHandler+0x5e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008dae:	6820      	ldr	r0, [r4, #0]
 8008db0:	e71e      	b.n	8008bf0 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008db2:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8008db4:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008db6:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008db8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8008dbc:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dbe:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008dc2:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8008dc6:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8008dc8:	f000 80aa 	beq.w	8008f20 <HAL_PCD_IRQHandler+0x598>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008dcc:	4981      	ldr	r1, [pc, #516]	; (8008fd4 <HAL_PCD_IRQHandler+0x64c>)
 8008dce:	458c      	cmp	ip, r1
 8008dd0:	f000 80bf 	beq.w	8008f52 <HAL_PCD_IRQHandler+0x5ca>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008dd4:	f1b8 0f00 	cmp.w	r8, #0
 8008dd8:	d104      	bne.n	8008de4 <HAL_PCD_IRQHandler+0x45c>
 8008dda:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	f000 80ef 	beq.w	8008fc2 <HAL_PCD_IRQHandler+0x63a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008de4:	4620      	mov	r0, r4
 8008de6:	4639      	mov	r1, r7
 8008de8:	f005 fc5a 	bl	800e6a0 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dec:	6820      	ldr	r0, [r4, #0]
 8008dee:	e6fb      	b.n	8008be8 <HAL_PCD_IRQHandler+0x260>
  if (ep->xfer_count > ep->xfer_len)
 8008df0:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008df4:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8008df8:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dfa:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8008dfc:	f63f ae8e 	bhi.w	8008b1c <HAL_PCD_IRQHandler+0x194>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e00:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8008e04:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e0a:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8008e0e:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8008e10:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8008e12:	428a      	cmp	r2, r1
 8008e14:	bf28      	it	cs
 8008e16:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e18:	9905      	ldr	r1, [sp, #20]
 8008e1a:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8008e1c:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e1e:	b289      	uxth	r1, r1
 8008e20:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8008e24:	f0c0 8091 	bcc.w	8008f4a <HAL_PCD_IRQHandler+0x5c2>
 8008e28:	464a      	mov	r2, r9
 8008e2a:	9706      	str	r7, [sp, #24]
 8008e2c:	46c1      	mov	r9, r8
 8008e2e:	4627      	mov	r7, r4
 8008e30:	46d0      	mov	r8, sl
 8008e32:	9c05      	ldr	r4, [sp, #20]
 8008e34:	4692      	mov	sl, r2
 8008e36:	e018      	b.n	8008e6a <HAL_PCD_IRQHandler+0x4e2>
 8008e38:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8008e3e:	4658      	mov	r0, fp
 8008e40:	429d      	cmp	r5, r3
 8008e42:	bf28      	it	cs
 8008e44:	461d      	movcs	r5, r3
 8008e46:	7c3b      	ldrb	r3, [r7, #16]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	b2ab      	uxth	r3, r5
 8008e4c:	f004 faaa 	bl	800d3a4 <USB_WritePacket>
    ep->xfer_buff  += len;
 8008e50:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e52:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 8008e54:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e56:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 8008e58:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8008e5a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8008e5c:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8008e5e:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e60:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 8008e64:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e66:	d368      	bcc.n	8008f3a <HAL_PCD_IRQHandler+0x5b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e68:	6d35      	ldr	r5, [r6, #80]	; 0x50
 8008e6a:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 8008e6c:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e70:	d3e2      	bcc.n	8008e38 <HAL_PCD_IRQHandler+0x4b0>
 8008e72:	463c      	mov	r4, r7
 8008e74:	46c8      	mov	r8, r9
 8008e76:	9f06      	ldr	r7, [sp, #24]
 8008e78:	46d1      	mov	r9, sl
 8008e7a:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e7e:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e80:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008e82:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e84:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e88:	f007 030f 	and.w	r3, r7, #15
 8008e8c:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e8e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008e90:	ea23 0302 	bic.w	r3, r3, r2
 8008e94:	634b      	str	r3, [r1, #52]	; 0x34
 8008e96:	e641      	b.n	8008b1c <HAL_PCD_IRQHandler+0x194>
            (void)USB_FlushTxFifo(USBx, epnum);
 8008e98:	4639      	mov	r1, r7
 8008e9a:	9803      	ldr	r0, [sp, #12]
 8008e9c:	f003 ffd6 	bl	800ce4c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f8c9 3008 	str.w	r3, [r9, #8]
 8008ea6:	e676      	b.n	8008b96 <HAL_PCD_IRQHandler+0x20e>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ea8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008eac:	421d      	tst	r5, r3
 8008eae:	f43f ad9d 	beq.w	80089ec <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008eb2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008eb6:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8008eba:	4638      	mov	r0, r7
 8008ebc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008ec0:	4615      	mov	r5, r2
 8008ec2:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8008ec6:	f004 fa83 	bl	800d3d0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008eca:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ece:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ed0:	442b      	add	r3, r5
 8008ed2:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ed6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8008eda:	442b      	add	r3, r5
 8008edc:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 8008ee0:	e584      	b.n	80089ec <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f005 fc0a 	bl	800e6fc <HAL_PCD_SuspendCallback>
 8008ee8:	e5ed      	b.n	8008ac6 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 8008eea:	4620      	mov	r0, r4
 8008eec:	f005 fc2e 	bl	800e74c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	e5df      	b.n	8008ab4 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008ef4:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8008ef8:	4413      	add	r3, r2
 8008efa:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008efc:	2f00      	cmp	r7, #0
 8008efe:	f47f ae34 	bne.w	8008b6a <HAL_PCD_IRQHandler+0x1e2>
 8008f02:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f ae30 	bne.w	8008b6a <HAL_PCD_IRQHandler+0x1e2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f0a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008f0e:	6820      	ldr	r0, [r4, #0]
 8008f10:	f004 fb5e 	bl	800d5d0 <USB_EP0_OutStart>
 8008f14:	e629      	b.n	8008b6a <HAL_PCD_IRQHandler+0x1e2>
  HAL_PCD_SetupStageCallback(hpcd);
 8008f16:	4620      	mov	r0, r4
 8008f18:	f005 fbbc 	bl	800e694 <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	e667      	b.n	8008bf0 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008f20:	0719      	lsls	r1, r3, #28
 8008f22:	d51e      	bpl.n	8008f62 <HAL_PCD_IRQHandler+0x5da>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f24:	492a      	ldr	r1, [pc, #168]	; (8008fd0 <HAL_PCD_IRQHandler+0x648>)
 8008f26:	458c      	cmp	ip, r1
 8008f28:	f67f ae5e 	bls.w	8008be8 <HAL_PCD_IRQHandler+0x260>
 8008f2c:	041f      	lsls	r7, r3, #16
 8008f2e:	f57f ae5b 	bpl.w	8008be8 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f36:	6093      	str	r3, [r2, #8]
 8008f38:	e656      	b.n	8008be8 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f3a:	463c      	mov	r4, r7
 8008f3c:	46c8      	mov	r8, r9
 8008f3e:	9f06      	ldr	r7, [sp, #24]
 8008f40:	46d1      	mov	r9, sl
 8008f42:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8008f46:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f48:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 8008f4a:	42ab      	cmp	r3, r5
 8008f4c:	f4ff ade6 	bcc.w	8008b1c <HAL_PCD_IRQHandler+0x194>
 8008f50:	e795      	b.n	8008e7e <HAL_PCD_IRQHandler+0x4f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f52:	0419      	lsls	r1, r3, #16
 8008f54:	d4ed      	bmi.n	8008f32 <HAL_PCD_IRQHandler+0x5aa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f56:	0699      	lsls	r1, r3, #26
 8008f58:	f57f af44 	bpl.w	8008de4 <HAL_PCD_IRQHandler+0x45c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f5c:	2120      	movs	r1, #32
 8008f5e:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f60:	e740      	b.n	8008de4 <HAL_PCD_IRQHandler+0x45c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f62:	0699      	lsls	r1, r3, #26
 8008f64:	d508      	bpl.n	8008f78 <HAL_PCD_IRQHandler+0x5f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f66:	2320      	movs	r3, #32
 8008f68:	6093      	str	r3, [r2, #8]
 8008f6a:	e63d      	b.n	8008be8 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f6c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	f004 fb2d 	bl	800d5d0 <USB_EP0_OutStart>
 8008f76:	e71a      	b.n	8008dae <HAL_PCD_IRQHandler+0x426>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008f78:	f013 0f28 	tst.w	r3, #40	; 0x28
 8008f7c:	f47f ae34 	bne.w	8008be8 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f80:	4913      	ldr	r1, [pc, #76]	; (8008fd0 <HAL_PCD_IRQHandler+0x648>)
 8008f82:	458c      	cmp	ip, r1
 8008f84:	d901      	bls.n	8008f8a <HAL_PCD_IRQHandler+0x602>
 8008f86:	041b      	lsls	r3, r3, #16
 8008f88:	d4d3      	bmi.n	8008f32 <HAL_PCD_IRQHandler+0x5aa>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f8a:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8008f8c:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f90:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008f94:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 8008f96:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008f9a:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008fa4:	f1b8 0f00 	cmp.w	r8, #0
 8008fa8:	f47f af1c 	bne.w	8008de4 <HAL_PCD_IRQHandler+0x45c>
 8008fac:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008fb0:	2a00      	cmp	r2, #0
 8008fb2:	f47f af17 	bne.w	8008de4 <HAL_PCD_IRQHandler+0x45c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fb6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008fba:	2101      	movs	r1, #1
 8008fbc:	f004 fb08 	bl	800d5d0 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fc0:	e710      	b.n	8008de4 <HAL_PCD_IRQHandler+0x45c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008fc2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8008fc6:	4641      	mov	r1, r8
 8008fc8:	f004 fb02 	bl	800d5d0 <USB_EP0_OutStart>
 8008fcc:	e70a      	b.n	8008de4 <HAL_PCD_IRQHandler+0x45c>
 8008fce:	bf00      	nop
 8008fd0:	4f54300a 	.word	0x4f54300a
 8008fd4:	4f54310a 	.word	0x4f54310a

08008fd8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8008fd8:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8008fdc:	2a01      	cmp	r2, #1
 8008fde:	d00e      	beq.n	8008ffe <HAL_PCD_SetAddress+0x26>
 8008fe0:	2201      	movs	r2, #1
{
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fe6:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8008fe8:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8008fec:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ff0:	f004 fa74 	bl	800d4dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ff4:	2300      	movs	r3, #0
  return HAL_OK;
 8008ff6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8008ff8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8008ffc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008ffe:	2002      	movs	r0, #2
}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop

08009004 <HAL_PCD_EP_Open>:
{
 8009004:	b510      	push	{r4, lr}
 8009006:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800900a:	0609      	lsls	r1, r1, #24
{
 800900c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800900e:	d427      	bmi.n	8009060 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009010:	f04f 0c1c 	mov.w	ip, #28
 8009014:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8009018:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800901c:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8009020:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009024:	2000      	movs	r0, #0
 8009026:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800902a:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800902c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800902e:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8009032:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009034:	b10a      	cbz	r2, 800903a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8009036:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800903a:	2b02      	cmp	r3, #2
 800903c:	d101      	bne.n	8009042 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009042:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009046:	2b01      	cmp	r3, #1
 8009048:	d018      	beq.n	800907c <HAL_PCD_EP_Open+0x78>
 800904a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800904c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800904e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009052:	f003 ff2f 	bl	800ceb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009056:	2300      	movs	r3, #0
  return ret;
 8009058:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800905a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800905e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009060:	201c      	movs	r0, #28
    ep->is_in = 1U;
 8009062:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009066:	fb00 400e 	mla	r0, r0, lr, r4
 800906a:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800906e:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 8009072:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009076:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800907a:	e7d6      	b.n	800902a <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800907c:	2002      	movs	r0, #2
}
 800907e:	bd10      	pop	{r4, pc}

08009080 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009080:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009084:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009088:	f04f 011c 	mov.w	r1, #28
{
 800908c:	b510      	push	{r4, lr}
 800908e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009090:	d11a      	bne.n	80090c8 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009092:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009096:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800909a:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800909c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80090a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80090a4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090a8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80090aa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d019      	beq.n	80090e6 <HAL_PCD_EP_Close+0x66>
 80090b2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80090b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090ba:	f003 ff43 	bl	800cf44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090be:	2300      	movs	r3, #0
  return HAL_OK;
 80090c0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80090c2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 80090c6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090c8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 80090cc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80090d0:	2001      	movs	r0, #1
 80090d2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090d6:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80090d8:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090dc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80090de:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d1e5      	bne.n	80090b2 <HAL_PCD_EP_Close+0x32>
 80090e6:	2002      	movs	r0, #2
}
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	bf00      	nop

080090ec <HAL_PCD_EP_Receive>:
{
 80090ec:	b510      	push	{r4, lr}
 80090ee:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f2:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 80090f4:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f8:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 80090fc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009100:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8009104:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8009108:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800910a:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800910e:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8009112:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8009116:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800911a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800911c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800911e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009120:	bf08      	it	eq
 8009122:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009126:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009128:	b91c      	cbnz	r4, 8009132 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800912a:	f004 f881 	bl	800d230 <USB_EP0StartXfer>
}
 800912e:	2000      	movs	r0, #0
 8009130:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009132:	f003 ff65 	bl	800d000 <USB_EPStartXfer>
}
 8009136:	2000      	movs	r0, #0
 8009138:	bd10      	pop	{r4, pc}
 800913a:	bf00      	nop

0800913c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800913c:	f001 010f 	and.w	r1, r1, #15
 8009140:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009144:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8009148:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <HAL_PCD_EP_Transmit>:
{
 8009150:	b510      	push	{r4, lr}
 8009152:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009156:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8009158:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800915c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8009160:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009164:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8009166:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800916a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800916c:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8009170:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8009174:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009176:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800917a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800917e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009180:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8009182:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8009184:	bf08      	it	eq
 8009186:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800918a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800918c:	b91c      	cbnz	r4, 8009196 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800918e:	f004 f84f 	bl	800d230 <USB_EP0StartXfer>
}
 8009192:	2000      	movs	r0, #0
 8009194:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009196:	f003 ff33 	bl	800d000 <USB_EPStartXfer>
}
 800919a:	2000      	movs	r0, #0
 800919c:	bd10      	pop	{r4, pc}
 800919e:	bf00      	nop

080091a0 <HAL_PCD_EP_SetStall>:
{
 80091a0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091a2:	6843      	ldr	r3, [r0, #4]
 80091a4:	f001 050f 	and.w	r5, r1, #15
 80091a8:	429d      	cmp	r5, r3
 80091aa:	d834      	bhi.n	8009216 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 80091ac:	060b      	lsls	r3, r1, #24
 80091ae:	4604      	mov	r4, r0
 80091b0:	d41d      	bmi.n	80091ee <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 80091b2:	221c      	movs	r2, #28
    ep->is_in = 0U;
 80091b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 80091b8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 80091bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80091c0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80091c2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 80091c6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80091ca:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80091cc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80091ce:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80091d0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d01c      	beq.n	8009212 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80091d8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80091da:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80091de:	f004 f91d 	bl	800d41c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091e2:	b1d5      	cbz	r5, 800921a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 80091e4:	2300      	movs	r3, #0
  return HAL_OK;
 80091e6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 80091e8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091ee:	211c      	movs	r1, #28
    ep->is_in = 1U;
 80091f0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80091f4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091f6:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80091fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091fe:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8009204:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8009206:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8009208:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800920a:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800920e:	429a      	cmp	r2, r3
 8009210:	d1e2      	bne.n	80091d8 <HAL_PCD_EP_SetStall+0x38>
 8009212:	2002      	movs	r0, #2
}
 8009214:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009216:	2001      	movs	r0, #1
}
 8009218:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800921a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800921e:	7c21      	ldrb	r1, [r4, #16]
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	f004 f9d5 	bl	800d5d0 <USB_EP0_OutStart>
 8009226:	e7dd      	b.n	80091e4 <HAL_PCD_EP_SetStall+0x44>

08009228 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009228:	6842      	ldr	r2, [r0, #4]
{
 800922a:	b538      	push	{r3, r4, r5, lr}
 800922c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009230:	4293      	cmp	r3, r2
 8009232:	d832      	bhi.n	800929a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8009234:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009238:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800923a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800923e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8009242:	d119      	bne.n	8009278 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009244:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8009248:	2000      	movs	r0, #0
 800924a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800924e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009250:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8009254:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8009258:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800925a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800925c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009260:	2b01      	cmp	r3, #1
 8009262:	d018      	beq.n	8009296 <HAL_PCD_EP_ClrStall+0x6e>
 8009264:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009266:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009268:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800926c:	f004 f90a 	bl	800d484 <USB_EPClearStall>
  return HAL_OK;
 8009270:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8009272:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8009276:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009278:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800927c:	2001      	movs	r0, #1
 800927e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8009282:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009284:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8009286:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800928a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800928c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800928e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8009292:	2b01      	cmp	r3, #1
 8009294:	d1e6      	bne.n	8009264 <HAL_PCD_EP_ClrStall+0x3c>
 8009296:	2002      	movs	r0, #2
}
 8009298:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800929a:	2001      	movs	r0, #1
}
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop

080092a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80092a0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80092a2:	6804      	ldr	r4, [r0, #0]
 80092a4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 80092a6:	b931      	cbnz	r1, 80092b6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80092a8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80092ac:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80092ae:	2000      	movs	r0, #0
 80092b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80092b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80092b8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80092bc:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092c0:	d00b      	beq.n	80092da <HAL_PCDEx_SetTxFiFo+0x3a>
 80092c2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092c4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 80092c8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80092ce:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092d0:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80092d2:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80092d4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80092d8:	d3f4      	bcc.n	80092c4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80092da:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80092de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80092e2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 80092e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80092ea:	f8cc 0004 	str.w	r0, [ip, #4]
}
 80092ee:	2000      	movs	r0, #0
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop

080092f4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80092f4:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 80092f6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6259      	str	r1, [r3, #36]	; 0x24
}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop

08009300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009300:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8009302:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009306:	4909      	ldr	r1, [pc, #36]	; (800932c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009308:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800930a:	4660      	mov	r0, ip
{
 800930c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800930e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 8009310:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8009314:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009318:	6993      	ldr	r3, [r2, #24]
}
 800931a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800931e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009322:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009324:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009326:	4319      	orrs	r1, r3
 8009328:	6551      	str	r1, [r2, #84]	; 0x54
}
 800932a:	4770      	bx	lr
 800932c:	10000003 	.word	0x10000003

08009330 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009334:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009336:	4c10      	ldr	r4, [pc, #64]	; (8009378 <HAL_PWREx_ConfigSupply+0x44>)
 8009338:	68e3      	ldr	r3, [r4, #12]
 800933a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800933e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009340:	d105      	bne.n	800934e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009342:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009346:	1a18      	subs	r0, r3, r0
 8009348:	bf18      	it	ne
 800934a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800934c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800934e:	f023 0307 	bic.w	r3, r3, #7
 8009352:	4318      	orrs	r0, r3
 8009354:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8009356:	f7fc fa4b 	bl	80057f0 <HAL_GetTick>
 800935a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800935c:	e005      	b.n	800936a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800935e:	f7fc fa47 	bl	80057f0 <HAL_GetTick>
 8009362:	1b40      	subs	r0, r0, r5
 8009364:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009368:	d804      	bhi.n	8009374 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800936a:	6863      	ldr	r3, [r4, #4]
 800936c:	049b      	lsls	r3, r3, #18
 800936e:	d5f6      	bpl.n	800935e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8009370:	2000      	movs	r0, #0
}
 8009372:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009374:	2001      	movs	r0, #1
}
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	58024800 	.word	0x58024800

0800937c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800937c:	4a02      	ldr	r2, [pc, #8]	; (8009388 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800937e:	68d3      	ldr	r3, [r2, #12]
 8009380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009384:	60d3      	str	r3, [r2, #12]
}
 8009386:	4770      	bx	lr
 8009388:	58024800 	.word	0x58024800

0800938c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800938c:	4b3b      	ldr	r3, [pc, #236]	; (800947c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800938e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009392:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009394:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8009396:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800939a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800939c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80093a0:	d038      	beq.n	8009414 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093a2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093a6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093aa:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80093ae:	fb05 f101 	mul.w	r1, r5, r1
 80093b2:	2a01      	cmp	r2, #1
 80093b4:	ee07 1a90 	vmov	s15, r1
 80093b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80093bc:	d002      	beq.n	80093c4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80093be:	2a02      	cmp	r2, #2
 80093c0:	d04e      	beq.n	8009460 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80093c2:	b34a      	cbz	r2, 8009418 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093c4:	ee07 0a90 	vmov	s15, r0
 80093c8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8009480 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80093cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80093d6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009484 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80093da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093de:	ee06 3a90 	vmov	s13, r3
 80093e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80093e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80093ea:	ee76 6a85 	vadd.f32	s13, s13, s10
 80093ee:	eee7 6a25 	vfma.f32	s13, s14, s11
 80093f2:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80093f6:	4b21      	ldr	r3, [pc, #132]	; (800947c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80093fe:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800940c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009410:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8009414:	bc30      	pop	{r4, r5}
 8009416:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	0692      	lsls	r2, r2, #26
 800941c:	d527      	bpl.n	800946e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800941e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009420:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009424:	4a18      	ldr	r2, [pc, #96]	; (8009488 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009426:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800942a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800942c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009434:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009484 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8009438:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800943c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800943e:	ee06 3a90 	vmov	s13, r3
 8009442:	ee05 2a90 	vmov	s11, r2
 8009446:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800944a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800944e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009452:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009456:	eee7 6a05 	vfma.f32	s13, s14, s10
 800945a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800945e:	e7ca      	b.n	80093f6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009460:	ee07 0a90 	vmov	s15, r0
 8009464:	eddf 6a09 	vldr	s13, [pc, #36]	; 800948c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8009468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946c:	e7b0      	b.n	80093d0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800946e:	ee07 0a90 	vmov	s15, r0
 8009472:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009490 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8009476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800947a:	e7a9      	b.n	80093d0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800947c:	58024400 	.word	0x58024400
 8009480:	4a742400 	.word	0x4a742400
 8009484:	39000000 	.word	0x39000000
 8009488:	03d09000 	.word	0x03d09000
 800948c:	4bbebc20 	.word	0x4bbebc20
 8009490:	4c742400 	.word	0x4c742400

08009494 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8009494:	2800      	cmp	r0, #0
 8009496:	f000 81e8 	beq.w	800986a <HAL_RCC_OscConfig+0x3d6>
{
 800949a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800949c:	6803      	ldr	r3, [r0, #0]
 800949e:	4604      	mov	r4, r0
 80094a0:	07d9      	lsls	r1, r3, #31
 80094a2:	d52e      	bpl.n	8009502 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094a4:	49a4      	ldr	r1, [pc, #656]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 80094a6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094a8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094aa:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80094ae:	2a10      	cmp	r2, #16
 80094b0:	f000 8107 	beq.w	80096c2 <HAL_RCC_OscConfig+0x22e>
 80094b4:	2a18      	cmp	r2, #24
 80094b6:	f000 80ff 	beq.w	80096b8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094ba:	6863      	ldr	r3, [r4, #4]
 80094bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c0:	f000 812a 	beq.w	8009718 <HAL_RCC_OscConfig+0x284>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8168 	beq.w	800979a <HAL_RCC_OscConfig+0x306>
 80094ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094ce:	4b9a      	ldr	r3, [pc, #616]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	f000 8269 	beq.w	80099a8 <HAL_RCC_OscConfig+0x514>
 80094d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80094e4:	f7fc f984 	bl	80057f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094e8:	4e93      	ldr	r6, [pc, #588]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80094ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094ec:	e005      	b.n	80094fa <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094ee:	f7fc f97f 	bl	80057f0 <HAL_GetTick>
 80094f2:	1b40      	subs	r0, r0, r5
 80094f4:	2864      	cmp	r0, #100	; 0x64
 80094f6:	f200 814e 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094fa:	6833      	ldr	r3, [r6, #0]
 80094fc:	039b      	lsls	r3, r3, #14
 80094fe:	d5f6      	bpl.n	80094ee <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	079d      	lsls	r5, r3, #30
 8009504:	f100 808a 	bmi.w	800961c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009508:	06d9      	lsls	r1, r3, #27
 800950a:	d533      	bpl.n	8009574 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800950c:	4a8a      	ldr	r2, [pc, #552]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 800950e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009510:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009512:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009516:	2b08      	cmp	r3, #8
 8009518:	f000 80e3 	beq.w	80096e2 <HAL_RCC_OscConfig+0x24e>
 800951c:	2b18      	cmp	r3, #24
 800951e:	f000 80db 	beq.w	80096d8 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009522:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8009524:	4d84      	ldr	r5, [pc, #528]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 816f 	beq.w	800980a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009532:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009534:	f7fc f95c 	bl	80057f0 <HAL_GetTick>
 8009538:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800953a:	e005      	b.n	8009548 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800953c:	f7fc f958 	bl	80057f0 <HAL_GetTick>
 8009540:	1b80      	subs	r0, r0, r6
 8009542:	2802      	cmp	r0, #2
 8009544:	f200 8127 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	05db      	lsls	r3, r3, #23
 800954c:	d5f6      	bpl.n	800953c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800954e:	f7fc f967 	bl	8005820 <HAL_GetREVID>
 8009552:	f241 0303 	movw	r3, #4099	; 0x1003
 8009556:	4298      	cmp	r0, r3
 8009558:	f200 8247 	bhi.w	80099ea <HAL_RCC_OscConfig+0x556>
 800955c:	6a22      	ldr	r2, [r4, #32]
 800955e:	686b      	ldr	r3, [r5, #4]
 8009560:	2a20      	cmp	r2, #32
 8009562:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009566:	bf0c      	ite	eq
 8009568:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800956c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009570:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	071d      	lsls	r5, r3, #28
 8009576:	d516      	bpl.n	80095a6 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009578:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800957a:	4d6f      	ldr	r5, [pc, #444]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 8122 	beq.w	80097c6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8009582:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009584:	f043 0301 	orr.w	r3, r3, #1
 8009588:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800958a:	f7fc f931 	bl	80057f0 <HAL_GetTick>
 800958e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009590:	e005      	b.n	800959e <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009592:	f7fc f92d 	bl	80057f0 <HAL_GetTick>
 8009596:	1b80      	subs	r0, r0, r6
 8009598:	2802      	cmp	r0, #2
 800959a:	f200 80fc 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800959e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80095a0:	0798      	lsls	r0, r3, #30
 80095a2:	d5f6      	bpl.n	8009592 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	069a      	lsls	r2, r3, #26
 80095a8:	d516      	bpl.n	80095d8 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80095aa:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80095ac:	4d62      	ldr	r5, [pc, #392]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 811a 	beq.w	80097e8 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80095bc:	f7fc f918 	bl	80057f0 <HAL_GetTick>
 80095c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095c2:	e005      	b.n	80095d0 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80095c4:	f7fc f914 	bl	80057f0 <HAL_GetTick>
 80095c8:	1b80      	subs	r0, r0, r6
 80095ca:	2802      	cmp	r0, #2
 80095cc:	f200 80e3 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	049f      	lsls	r7, r3, #18
 80095d4:	d5f6      	bpl.n	80095c4 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	0759      	lsls	r1, r3, #29
 80095da:	f100 80a3 	bmi.w	8009724 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095e0:	b1d0      	cbz	r0, 8009618 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80095e2:	4d55      	ldr	r5, [pc, #340]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 80095e4:	692b      	ldr	r3, [r5, #16]
 80095e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ea:	2b18      	cmp	r3, #24
 80095ec:	f000 81ae 	beq.w	800994c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80095f0:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095f2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80095f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095f8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095fa:	f000 8142 	beq.w	8009882 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 80095fe:	f7fc f8f7 	bl	80057f0 <HAL_GetTick>
 8009602:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009604:	e005      	b.n	8009612 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009606:	f7fc f8f3 	bl	80057f0 <HAL_GetTick>
 800960a:	1b00      	subs	r0, r0, r4
 800960c:	2802      	cmp	r0, #2
 800960e:	f200 80c2 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	019b      	lsls	r3, r3, #6
 8009616:	d4f6      	bmi.n	8009606 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8009618:	2000      	movs	r0, #0
}
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800961c:	4a46      	ldr	r2, [pc, #280]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 800961e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009620:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009622:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8009626:	d12d      	bne.n	8009684 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009628:	4b43      	ldr	r3, [pc, #268]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 800962a:	68e2      	ldr	r2, [r4, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	0759      	lsls	r1, r3, #29
 8009630:	d501      	bpl.n	8009636 <HAL_RCC_OscConfig+0x1a2>
 8009632:	2a00      	cmp	r2, #0
 8009634:	d04e      	beq.n	80096d4 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009636:	4d40      	ldr	r5, [pc, #256]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	f023 0319 	bic.w	r3, r3, #25
 800963e:	4313      	orrs	r3, r2
 8009640:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8009642:	f7fc f8d5 	bl	80057f0 <HAL_GetTick>
 8009646:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009648:	e005      	b.n	8009656 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800964a:	f7fc f8d1 	bl	80057f0 <HAL_GetTick>
 800964e:	1b80      	subs	r0, r0, r6
 8009650:	2802      	cmp	r0, #2
 8009652:	f200 80a0 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009656:	682b      	ldr	r3, [r5, #0]
 8009658:	075b      	lsls	r3, r3, #29
 800965a:	d5f6      	bpl.n	800964a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800965c:	f7fc f8e0 	bl	8005820 <HAL_GetREVID>
 8009660:	f241 0303 	movw	r3, #4099	; 0x1003
 8009664:	4298      	cmp	r0, r3
 8009666:	f200 80f7 	bhi.w	8009858 <HAL_RCC_OscConfig+0x3c4>
 800966a:	6922      	ldr	r2, [r4, #16]
 800966c:	686b      	ldr	r3, [r5, #4]
 800966e:	2a40      	cmp	r2, #64	; 0x40
 8009670:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009674:	bf0c      	ite	eq
 8009676:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800967a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800967e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	e741      	b.n	8009508 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009684:	2b18      	cmp	r3, #24
 8009686:	f000 80e3 	beq.w	8009850 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800968a:	4d2b      	ldr	r5, [pc, #172]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800968c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800968e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009690:	2a00      	cmp	r2, #0
 8009692:	f000 80cc 	beq.w	800982e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009696:	f023 0319 	bic.w	r3, r3, #25
 800969a:	4313      	orrs	r3, r2
 800969c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800969e:	f7fc f8a7 	bl	80057f0 <HAL_GetTick>
 80096a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a4:	e004      	b.n	80096b0 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096a6:	f7fc f8a3 	bl	80057f0 <HAL_GetTick>
 80096aa:	1b80      	subs	r0, r0, r6
 80096ac:	2802      	cmp	r0, #2
 80096ae:	d872      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	075f      	lsls	r7, r3, #29
 80096b4:	d5f7      	bpl.n	80096a6 <HAL_RCC_OscConfig+0x212>
 80096b6:	e7d1      	b.n	800965c <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80096b8:	f001 0103 	and.w	r1, r1, #3
 80096bc:	2902      	cmp	r1, #2
 80096be:	f47f aefc 	bne.w	80094ba <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096c2:	4a1d      	ldr	r2, [pc, #116]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 80096c4:	6812      	ldr	r2, [r2, #0]
 80096c6:	0392      	lsls	r2, r2, #14
 80096c8:	f57f af1b 	bpl.w	8009502 <HAL_RCC_OscConfig+0x6e>
 80096cc:	6862      	ldr	r2, [r4, #4]
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	f47f af17 	bne.w	8009502 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80096d4:	2001      	movs	r0, #1
}
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096d8:	f002 0203 	and.w	r2, r2, #3
 80096dc:	2a01      	cmp	r2, #1
 80096de:	f47f af20 	bne.w	8009522 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	05da      	lsls	r2, r3, #23
 80096e8:	d502      	bpl.n	80096f0 <HAL_RCC_OscConfig+0x25c>
 80096ea:	69e3      	ldr	r3, [r4, #28]
 80096ec:	2b80      	cmp	r3, #128	; 0x80
 80096ee:	d1f1      	bne.n	80096d4 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096f0:	f7fc f896 	bl	8005820 <HAL_GetREVID>
 80096f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80096f8:	4298      	cmp	r0, r3
 80096fa:	f200 80b8 	bhi.w	800986e <HAL_RCC_OscConfig+0x3da>
 80096fe:	6a22      	ldr	r2, [r4, #32]
 8009700:	2a20      	cmp	r2, #32
 8009702:	f000 8187 	beq.w	8009a14 <HAL_RCC_OscConfig+0x580>
 8009706:	490c      	ldr	r1, [pc, #48]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 8009708:	684b      	ldr	r3, [r1, #4]
 800970a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800970e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8009712:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	e72d      	b.n	8009574 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009718:	4a07      	ldr	r2, [pc, #28]	; (8009738 <HAL_RCC_OscConfig+0x2a4>)
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009720:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009722:	e6df      	b.n	80094e4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8009724:	4d05      	ldr	r5, [pc, #20]	; (800973c <HAL_RCC_OscConfig+0x2a8>)
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800972c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800972e:	f7fc f85f 	bl	80057f0 <HAL_GetTick>
 8009732:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009734:	e009      	b.n	800974a <HAL_RCC_OscConfig+0x2b6>
 8009736:	bf00      	nop
 8009738:	58024400 	.word	0x58024400
 800973c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009740:	f7fc f856 	bl	80057f0 <HAL_GetTick>
 8009744:	1b80      	subs	r0, r0, r6
 8009746:	2864      	cmp	r0, #100	; 0x64
 8009748:	d825      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800974a:	682b      	ldr	r3, [r5, #0]
 800974c:	05da      	lsls	r2, r3, #23
 800974e:	d5f7      	bpl.n	8009740 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009750:	68a3      	ldr	r3, [r4, #8]
 8009752:	2b01      	cmp	r3, #1
 8009754:	f000 8158 	beq.w	8009a08 <HAL_RCC_OscConfig+0x574>
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 812d 	beq.w	80099b8 <HAL_RCC_OscConfig+0x524>
 800975e:	2b05      	cmp	r3, #5
 8009760:	4ba6      	ldr	r3, [pc, #664]	; (80099fc <HAL_RCC_OscConfig+0x568>)
 8009762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009764:	f000 815f 	beq.w	8009a26 <HAL_RCC_OscConfig+0x592>
 8009768:	f022 0201 	bic.w	r2, r2, #1
 800976c:	671a      	str	r2, [r3, #112]	; 0x70
 800976e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009770:	f022 0204 	bic.w	r2, r2, #4
 8009774:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009776:	f7fc f83b 	bl	80057f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800977a:	4ea0      	ldr	r6, [pc, #640]	; (80099fc <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800977c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009780:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009782:	e004      	b.n	800978e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009784:	f7fc f834 	bl	80057f0 <HAL_GetTick>
 8009788:	1b40      	subs	r0, r0, r5
 800978a:	42b8      	cmp	r0, r7
 800978c:	d803      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800978e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009790:	079b      	lsls	r3, r3, #30
 8009792:	d5f7      	bpl.n	8009784 <HAL_RCC_OscConfig+0x2f0>
 8009794:	e723      	b.n	80095de <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8009796:	2003      	movs	r0, #3
}
 8009798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800979a:	4d98      	ldr	r5, [pc, #608]	; (80099fc <HAL_RCC_OscConfig+0x568>)
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097a2:	602b      	str	r3, [r5, #0]
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80097ac:	f7fc f820 	bl	80057f0 <HAL_GetTick>
 80097b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097b2:	e004      	b.n	80097be <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097b4:	f7fc f81c 	bl	80057f0 <HAL_GetTick>
 80097b8:	1b80      	subs	r0, r0, r6
 80097ba:	2864      	cmp	r0, #100	; 0x64
 80097bc:	d8eb      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097be:	682b      	ldr	r3, [r5, #0]
 80097c0:	039f      	lsls	r7, r3, #14
 80097c2:	d4f7      	bmi.n	80097b4 <HAL_RCC_OscConfig+0x320>
 80097c4:	e69c      	b.n	8009500 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80097c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80097ce:	f7fc f80f 	bl	80057f0 <HAL_GetTick>
 80097d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097d4:	e004      	b.n	80097e0 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097d6:	f7fc f80b 	bl	80057f0 <HAL_GetTick>
 80097da:	1b80      	subs	r0, r0, r6
 80097dc:	2802      	cmp	r0, #2
 80097de:	d8da      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80097e2:	0799      	lsls	r1, r3, #30
 80097e4:	d4f7      	bmi.n	80097d6 <HAL_RCC_OscConfig+0x342>
 80097e6:	e6dd      	b.n	80095a4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80097f0:	f7fb fffe 	bl	80057f0 <HAL_GetTick>
 80097f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80097f6:	e004      	b.n	8009802 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80097f8:	f7fb fffa 	bl	80057f0 <HAL_GetTick>
 80097fc:	1b80      	subs	r0, r0, r6
 80097fe:	2802      	cmp	r0, #2
 8009800:	d8c9      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	0498      	lsls	r0, r3, #18
 8009806:	d4f7      	bmi.n	80097f8 <HAL_RCC_OscConfig+0x364>
 8009808:	e6e5      	b.n	80095d6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009810:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009812:	f7fb ffed 	bl	80057f0 <HAL_GetTick>
 8009816:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009818:	e004      	b.n	8009824 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800981a:	f7fb ffe9 	bl	80057f0 <HAL_GetTick>
 800981e:	1b80      	subs	r0, r0, r6
 8009820:	2802      	cmp	r0, #2
 8009822:	d8b8      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	05df      	lsls	r7, r3, #23
 8009828:	d4f7      	bmi.n	800981a <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	e6a2      	b.n	8009574 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800982e:	f023 0301 	bic.w	r3, r3, #1
 8009832:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009834:	f7fb ffdc 	bl	80057f0 <HAL_GetTick>
 8009838:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800983a:	e004      	b.n	8009846 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800983c:	f7fb ffd8 	bl	80057f0 <HAL_GetTick>
 8009840:	1b80      	subs	r0, r0, r6
 8009842:	2802      	cmp	r0, #2
 8009844:	d8a7      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	0758      	lsls	r0, r3, #29
 800984a:	d4f7      	bmi.n	800983c <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	e65b      	b.n	8009508 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009850:	0790      	lsls	r0, r2, #30
 8009852:	f47f af1a 	bne.w	800968a <HAL_RCC_OscConfig+0x1f6>
 8009856:	e6e7      	b.n	8009628 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009858:	686b      	ldr	r3, [r5, #4]
 800985a:	6922      	ldr	r2, [r4, #16]
 800985c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009860:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009864:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	e64e      	b.n	8009508 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800986a:	2001      	movs	r0, #1
}
 800986c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800986e:	4a63      	ldr	r2, [pc, #396]	; (80099fc <HAL_RCC_OscConfig+0x568>)
 8009870:	6a21      	ldr	r1, [r4, #32]
 8009872:	68d3      	ldr	r3, [r2, #12]
 8009874:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009878:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800987c:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	e678      	b.n	8009574 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8009882:	f7fb ffb5 	bl	80057f0 <HAL_GetTick>
 8009886:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009888:	e004      	b.n	8009894 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800988a:	f7fb ffb1 	bl	80057f0 <HAL_GetTick>
 800988e:	1b80      	subs	r0, r0, r6
 8009890:	2802      	cmp	r0, #2
 8009892:	d880      	bhi.n	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	0199      	lsls	r1, r3, #6
 8009898:	d4f7      	bmi.n	800988a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800989a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800989c:	4b58      	ldr	r3, [pc, #352]	; (8009a00 <HAL_RCC_OscConfig+0x56c>)
 800989e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80098a0:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80098a2:	4958      	ldr	r1, [pc, #352]	; (8009a04 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098a4:	4e55      	ldr	r6, [pc, #340]	; (80099fc <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098a6:	4313      	orrs	r3, r2
 80098a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80098ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80098b0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80098b4:	3b01      	subs	r3, #1
 80098b6:	3a01      	subs	r2, #1
 80098b8:	025b      	lsls	r3, r3, #9
 80098ba:	0412      	lsls	r2, r2, #16
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80098c2:	4313      	orrs	r3, r2
 80098c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80098c6:	3a01      	subs	r2, #1
 80098c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098cc:	4313      	orrs	r3, r2
 80098ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80098d0:	3a01      	subs	r2, #1
 80098d2:	0612      	lsls	r2, r2, #24
 80098d4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80098d8:	4313      	orrs	r3, r2
 80098da:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80098dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80098de:	f023 0301 	bic.w	r3, r3, #1
 80098e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80098e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80098e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80098e8:	4011      	ands	r1, r2
 80098ea:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80098ee:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80098f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80098f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098f4:	f023 030c 	bic.w	r3, r3, #12
 80098f8:	4313      	orrs	r3, r2
 80098fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80098fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80098fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009900:	f023 0302 	bic.w	r3, r3, #2
 8009904:	4313      	orrs	r3, r2
 8009906:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009908:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800990a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800990e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009910:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009916:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009918:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800991a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800991e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8009920:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009922:	f043 0301 	orr.w	r3, r3, #1
 8009926:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800992e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009930:	f7fb ff5e 	bl	80057f0 <HAL_GetTick>
 8009934:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009936:	e005      	b.n	8009944 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009938:	f7fb ff5a 	bl	80057f0 <HAL_GetTick>
 800993c:	1b00      	subs	r0, r0, r4
 800993e:	2802      	cmp	r0, #2
 8009940:	f63f af29 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009944:	6833      	ldr	r3, [r6, #0]
 8009946:	019a      	lsls	r2, r3, #6
 8009948:	d5f6      	bpl.n	8009938 <HAL_RCC_OscConfig+0x4a4>
 800994a:	e665      	b.n	8009618 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800994c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800994e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009950:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009952:	f43f ae62 	beq.w	800961a <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009956:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800995a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800995c:	428b      	cmp	r3, r1
 800995e:	f47f aeb9 	bne.w	80096d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009962:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009968:	429a      	cmp	r2, r3
 800996a:	f47f aeb3 	bne.w	80096d4 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800996e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009970:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8009974:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009976:	429a      	cmp	r2, r3
 8009978:	f47f aeac 	bne.w	80096d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800997c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800997e:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8009982:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009984:	429a      	cmp	r2, r3
 8009986:	f47f aea5 	bne.w	80096d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800998a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800998c:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8009990:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009992:	429a      	cmp	r2, r3
 8009994:	f47f ae9e 	bne.w	80096d4 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009998:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800999a:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800999e:	3801      	subs	r0, #1
  return HAL_OK;
 80099a0:	1a28      	subs	r0, r5, r0
 80099a2:	bf18      	it	ne
 80099a4:	2001      	movne	r0, #1
}
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e595      	b.n	80094e4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099b8:	4d10      	ldr	r5, [pc, #64]	; (80099fc <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ba:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099c0:	f023 0301 	bic.w	r3, r3, #1
 80099c4:	672b      	str	r3, [r5, #112]	; 0x70
 80099c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099c8:	f023 0304 	bic.w	r3, r3, #4
 80099cc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80099ce:	f7fb ff0f 	bl	80057f0 <HAL_GetTick>
 80099d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099d4:	e005      	b.n	80099e2 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099d6:	f7fb ff0b 	bl	80057f0 <HAL_GetTick>
 80099da:	1b80      	subs	r0, r0, r6
 80099dc:	42b8      	cmp	r0, r7
 80099de:	f63f aeda 	bhi.w	8009796 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099e4:	0798      	lsls	r0, r3, #30
 80099e6:	d4f6      	bmi.n	80099d6 <HAL_RCC_OscConfig+0x542>
 80099e8:	e5f9      	b.n	80095de <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099ea:	68eb      	ldr	r3, [r5, #12]
 80099ec:	6a22      	ldr	r2, [r4, #32]
 80099ee:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80099f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80099f6:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	e5bb      	b.n	8009574 <HAL_RCC_OscConfig+0xe0>
 80099fc:	58024400 	.word	0x58024400
 8009a00:	fffffc0c 	.word	0xfffffc0c
 8009a04:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a08:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <HAL_RCC_OscConfig+0x5a4>)
 8009a0a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009a0c:	f043 0301 	orr.w	r3, r3, #1
 8009a10:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a12:	e6b0      	b.n	8009776 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a14:	4a08      	ldr	r2, [pc, #32]	; (8009a38 <HAL_RCC_OscConfig+0x5a4>)
 8009a16:	6853      	ldr	r3, [r2, #4]
 8009a18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a20:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	e5a6      	b.n	8009574 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a26:	f042 0204 	orr.w	r2, r2, #4
 8009a2a:	671a      	str	r2, [r3, #112]	; 0x70
 8009a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	671a      	str	r2, [r3, #112]	; 0x70
 8009a34:	e69f      	b.n	8009776 <HAL_RCC_OscConfig+0x2e2>
 8009a36:	bf00      	nop
 8009a38:	58024400 	.word	0x58024400

08009a3c <HAL_RCC_MCOConfig>:
{
 8009a3c:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 8009a3e:	4e25      	ldr	r6, [pc, #148]	; (8009ad4 <HAL_RCC_MCOConfig+0x98>)
{
 8009a40:	b088      	sub	sp, #32
 8009a42:	460d      	mov	r5, r1
 8009a44:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 8009a46:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 8009a4a:	b9f8      	cbnz	r0, 8009a8c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009a4c:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009a50:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a54:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 8009a56:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8009a5a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009a5e:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 8009a60:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a64:	481c      	ldr	r0, [pc, #112]	; (8009ad8 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a70:	2200      	movs	r2, #0
 8009a72:	2303      	movs	r3, #3
 8009a74:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a78:	f7fe fd0a 	bl	8008490 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009a7c:	6932      	ldr	r2, [r6, #16]
 8009a7e:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 8009a82:	432a      	orrs	r2, r5
 8009a84:	4322      	orrs	r2, r4
 8009a86:	6132      	str	r2, [r6, #16]
}
 8009a88:	b008      	add	sp, #32
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009a8c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009a90:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009a94:	4811      	ldr	r0, [pc, #68]	; (8009adc <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 8009a96:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8009a9a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009aa4:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 8009aa6:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009aa8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009aaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009aba:	f7fe fce9 	bl	8008490 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009abe:	6933      	ldr	r3, [r6, #16]
 8009ac0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009ac4:	ea43 0105 	orr.w	r1, r3, r5
 8009ac8:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8009acc:	6131      	str	r1, [r6, #16]
}
 8009ace:	b008      	add	sp, #32
 8009ad0:	bd70      	pop	{r4, r5, r6, pc}
 8009ad2:	bf00      	nop
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	58020000 	.word	0x58020000
 8009adc:	58020800 	.word	0x58020800

08009ae0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ae0:	4a47      	ldr	r2, [pc, #284]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x120>)
 8009ae2:	6913      	ldr	r3, [r2, #16]
 8009ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d004      	beq.n	8009af6 <HAL_RCC_GetSysClockFreq+0x16>
 8009aec:	2b18      	cmp	r3, #24
 8009aee:	d00d      	beq.n	8009b0c <HAL_RCC_GetSysClockFreq+0x2c>
 8009af0:	b11b      	cbz	r3, 8009afa <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8009af2:	4844      	ldr	r0, [pc, #272]	; (8009c04 <HAL_RCC_GetSysClockFreq+0x124>)
 8009af4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009af6:	4844      	ldr	r0, [pc, #272]	; (8009c08 <HAL_RCC_GetSysClockFreq+0x128>)
 8009af8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009afa:	6813      	ldr	r3, [r2, #0]
 8009afc:	0699      	lsls	r1, r3, #26
 8009afe:	d54a      	bpl.n	8009b96 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b00:	6813      	ldr	r3, [r2, #0]
 8009b02:	4842      	ldr	r0, [pc, #264]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8009b04:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b08:	40d8      	lsrs	r0, r3
 8009b0a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8009b0e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009b10:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b12:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8009b14:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b18:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009b1a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8009b1e:	d038      	beq.n	8009b92 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b20:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b24:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b28:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b2c:	fb05 f101 	mul.w	r1, r5, r1
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	ee07 1a90 	vmov	s15, r1
 8009b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8009b3a:	d002      	beq.n	8009b42 <HAL_RCC_GetSysClockFreq+0x62>
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d02c      	beq.n	8009b9a <HAL_RCC_GetSysClockFreq+0xba>
 8009b40:	b393      	cbz	r3, 8009ba8 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b42:	ee07 0a90 	vmov	s15, r0
 8009b46:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009c10 <HAL_RCC_GetSysClockFreq+0x130>
 8009b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009b50:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009b54:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8009c14 <HAL_RCC_GetSysClockFreq+0x134>
 8009b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5c:	ee06 3a90 	vmov	s13, r3
 8009b60:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009b64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009b68:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009b6c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009b70:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009b74:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <HAL_RCC_GetSysClockFreq+0x120>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b7c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b8e:	ee17 0a90 	vmov	r0, s15
}
 8009b92:	bc30      	pop	{r4, r5}
 8009b94:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b96:	481d      	ldr	r0, [pc, #116]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8009b98:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b9a:	ee07 0a90 	vmov	s15, r0
 8009b9e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8009c18 <HAL_RCC_GetSysClockFreq+0x138>
 8009ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ba6:	e7d2      	b.n	8009b4e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ba8:	6813      	ldr	r3, [r2, #0]
 8009baa:	069b      	lsls	r3, r3, #26
 8009bac:	d520      	bpl.n	8009bf0 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bae:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bb4:	4915      	ldr	r1, [pc, #84]	; (8009c0c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bbc:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009c14 <HAL_RCC_GetSysClockFreq+0x134>
 8009bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bcc:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bce:	ee06 3a90 	vmov	s13, r3
 8009bd2:	ee05 1a90 	vmov	s11, r1
 8009bd6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009bda:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009bde:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009be2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009be6:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009bea:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009bee:	e7c1      	b.n	8009b74 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bf0:	ee07 0a90 	vmov	s15, r0
 8009bf4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009c1c <HAL_RCC_GetSysClockFreq+0x13c>
 8009bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bfc:	e7a7      	b.n	8009b4e <HAL_RCC_GetSysClockFreq+0x6e>
 8009bfe:	bf00      	nop
 8009c00:	58024400 	.word	0x58024400
 8009c04:	003d0900 	.word	0x003d0900
 8009c08:	017d7840 	.word	0x017d7840
 8009c0c:	03d09000 	.word	0x03d09000
 8009c10:	4a742400 	.word	0x4a742400
 8009c14:	39000000 	.word	0x39000000
 8009c18:	4bbebc20 	.word	0x4bbebc20
 8009c1c:	4c742400 	.word	0x4c742400

08009c20 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f000 810c 	beq.w	8009e3e <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c26:	4a8c      	ldr	r2, [pc, #560]	; (8009e58 <HAL_RCC_ClockConfig+0x238>)
 8009c28:	6813      	ldr	r3, [r2, #0]
 8009c2a:	f003 030f 	and.w	r3, r3, #15
 8009c2e:	428b      	cmp	r3, r1
{
 8009c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c34:	4604      	mov	r4, r0
 8009c36:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c38:	d20c      	bcs.n	8009c54 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	f023 030f 	bic.w	r3, r3, #15
 8009c40:	430b      	orrs	r3, r1
 8009c42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c44:	6813      	ldr	r3, [r2, #0]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	428b      	cmp	r3, r1
 8009c4c:	d002      	beq.n	8009c54 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009c4e:	2001      	movs	r0, #1
}
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	075f      	lsls	r7, r3, #29
 8009c58:	d50b      	bpl.n	8009c72 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c5a:	4980      	ldr	r1, [pc, #512]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009c5c:	6920      	ldr	r0, [r4, #16]
 8009c5e:	698a      	ldr	r2, [r1, #24]
 8009c60:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009c64:	4290      	cmp	r0, r2
 8009c66:	d904      	bls.n	8009c72 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c68:	698a      	ldr	r2, [r1, #24]
 8009c6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c6e:	4302      	orrs	r2, r0
 8009c70:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c72:	071e      	lsls	r6, r3, #28
 8009c74:	d50b      	bpl.n	8009c8e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c76:	4979      	ldr	r1, [pc, #484]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009c78:	6960      	ldr	r0, [r4, #20]
 8009c7a:	69ca      	ldr	r2, [r1, #28]
 8009c7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009c80:	4290      	cmp	r0, r2
 8009c82:	d904      	bls.n	8009c8e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c84:	69ca      	ldr	r2, [r1, #28]
 8009c86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c8a:	4302      	orrs	r2, r0
 8009c8c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c8e:	06d8      	lsls	r0, r3, #27
 8009c90:	d50b      	bpl.n	8009caa <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c92:	4972      	ldr	r1, [pc, #456]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009c94:	69a0      	ldr	r0, [r4, #24]
 8009c96:	69ca      	ldr	r2, [r1, #28]
 8009c98:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009c9c:	4290      	cmp	r0, r2
 8009c9e:	d904      	bls.n	8009caa <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ca0:	69ca      	ldr	r2, [r1, #28]
 8009ca2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009ca6:	4302      	orrs	r2, r0
 8009ca8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009caa:	0699      	lsls	r1, r3, #26
 8009cac:	d50b      	bpl.n	8009cc6 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cae:	496b      	ldr	r1, [pc, #428]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009cb0:	69e0      	ldr	r0, [r4, #28]
 8009cb2:	6a0a      	ldr	r2, [r1, #32]
 8009cb4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009cb8:	4290      	cmp	r0, r2
 8009cba:	d904      	bls.n	8009cc6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009cbc:	6a0a      	ldr	r2, [r1, #32]
 8009cbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009cc2:	4302      	orrs	r2, r0
 8009cc4:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cc6:	079a      	lsls	r2, r3, #30
 8009cc8:	f140 80ab 	bpl.w	8009e22 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ccc:	4863      	ldr	r0, [pc, #396]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009cce:	68e1      	ldr	r1, [r4, #12]
 8009cd0:	6982      	ldr	r2, [r0, #24]
 8009cd2:	f002 020f 	and.w	r2, r2, #15
 8009cd6:	4291      	cmp	r1, r2
 8009cd8:	d904      	bls.n	8009ce4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cda:	6982      	ldr	r2, [r0, #24]
 8009cdc:	f022 020f 	bic.w	r2, r2, #15
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ce4:	07d8      	lsls	r0, r3, #31
 8009ce6:	d530      	bpl.n	8009d4a <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009ce8:	4a5c      	ldr	r2, [pc, #368]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009cea:	68a1      	ldr	r1, [r4, #8]
 8009cec:	6993      	ldr	r3, [r2, #24]
 8009cee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cf6:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cf8:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cfa:	2902      	cmp	r1, #2
 8009cfc:	f000 80a1 	beq.w	8009e42 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d00:	2903      	cmp	r1, #3
 8009d02:	f000 8098 	beq.w	8009e36 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d06:	2901      	cmp	r1, #1
 8009d08:	f000 80a1 	beq.w	8009e4e <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d0c:	0758      	lsls	r0, r3, #29
 8009d0e:	d59e      	bpl.n	8009c4e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d10:	4e52      	ldr	r6, [pc, #328]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d12:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d16:	6933      	ldr	r3, [r6, #16]
 8009d18:	f023 0307 	bic.w	r3, r3, #7
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8009d20:	f7fb fd66 	bl	80057f0 <HAL_GetTick>
 8009d24:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d26:	e005      	b.n	8009d34 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d28:	f7fb fd62 	bl	80057f0 <HAL_GetTick>
 8009d2c:	1bc0      	subs	r0, r0, r7
 8009d2e:	4540      	cmp	r0, r8
 8009d30:	f200 808b 	bhi.w	8009e4a <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d34:	6933      	ldr	r3, [r6, #16]
 8009d36:	6862      	ldr	r2, [r4, #4]
 8009d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d3c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009d40:	d1f2      	bne.n	8009d28 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	0799      	lsls	r1, r3, #30
 8009d46:	d506      	bpl.n	8009d56 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d48:	68e1      	ldr	r1, [r4, #12]
 8009d4a:	4844      	ldr	r0, [pc, #272]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009d4c:	6982      	ldr	r2, [r0, #24]
 8009d4e:	f002 020f 	and.w	r2, r2, #15
 8009d52:	428a      	cmp	r2, r1
 8009d54:	d869      	bhi.n	8009e2a <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d56:	4940      	ldr	r1, [pc, #256]	; (8009e58 <HAL_RCC_ClockConfig+0x238>)
 8009d58:	680a      	ldr	r2, [r1, #0]
 8009d5a:	f002 020f 	and.w	r2, r2, #15
 8009d5e:	42aa      	cmp	r2, r5
 8009d60:	d90a      	bls.n	8009d78 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d62:	680a      	ldr	r2, [r1, #0]
 8009d64:	f022 020f 	bic.w	r2, r2, #15
 8009d68:	432a      	orrs	r2, r5
 8009d6a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d6c:	680a      	ldr	r2, [r1, #0]
 8009d6e:	f002 020f 	and.w	r2, r2, #15
 8009d72:	42aa      	cmp	r2, r5
 8009d74:	f47f af6b 	bne.w	8009c4e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d78:	075a      	lsls	r2, r3, #29
 8009d7a:	d50b      	bpl.n	8009d94 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d7c:	4937      	ldr	r1, [pc, #220]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009d7e:	6920      	ldr	r0, [r4, #16]
 8009d80:	698a      	ldr	r2, [r1, #24]
 8009d82:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009d86:	4290      	cmp	r0, r2
 8009d88:	d204      	bcs.n	8009d94 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d8a:	698a      	ldr	r2, [r1, #24]
 8009d8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d90:	4302      	orrs	r2, r0
 8009d92:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d94:	071f      	lsls	r7, r3, #28
 8009d96:	d50b      	bpl.n	8009db0 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d98:	4930      	ldr	r1, [pc, #192]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009d9a:	6960      	ldr	r0, [r4, #20]
 8009d9c:	69ca      	ldr	r2, [r1, #28]
 8009d9e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009da2:	4290      	cmp	r0, r2
 8009da4:	d204      	bcs.n	8009db0 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009da6:	69ca      	ldr	r2, [r1, #28]
 8009da8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009dac:	4302      	orrs	r2, r0
 8009dae:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009db0:	06de      	lsls	r6, r3, #27
 8009db2:	d50b      	bpl.n	8009dcc <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009db4:	4929      	ldr	r1, [pc, #164]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009db6:	69a0      	ldr	r0, [r4, #24]
 8009db8:	69ca      	ldr	r2, [r1, #28]
 8009dba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009dbe:	4290      	cmp	r0, r2
 8009dc0:	d204      	bcs.n	8009dcc <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009dc2:	69ca      	ldr	r2, [r1, #28]
 8009dc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009dc8:	4302      	orrs	r2, r0
 8009dca:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009dcc:	069d      	lsls	r5, r3, #26
 8009dce:	d50b      	bpl.n	8009de8 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009dd0:	4a22      	ldr	r2, [pc, #136]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009dd2:	69e1      	ldr	r1, [r4, #28]
 8009dd4:	6a13      	ldr	r3, [r2, #32]
 8009dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	d204      	bcs.n	8009de8 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009dde:	6a13      	ldr	r3, [r2, #32]
 8009de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009de8:	f7ff fe7a 	bl	8009ae0 <HAL_RCC_GetSysClockFreq>
 8009dec:	4a1b      	ldr	r2, [pc, #108]	; (8009e5c <HAL_RCC_ClockConfig+0x23c>)
 8009dee:	4603      	mov	r3, r0
 8009df0:	481b      	ldr	r0, [pc, #108]	; (8009e60 <HAL_RCC_ClockConfig+0x240>)
 8009df2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009df4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009df6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8009dfa:	4d1a      	ldr	r5, [pc, #104]	; (8009e64 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dfc:	f002 020f 	and.w	r2, r2, #15
 8009e00:	4c19      	ldr	r4, [pc, #100]	; (8009e68 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e02:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e04:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e06:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8009e0a:	4818      	ldr	r0, [pc, #96]	; (8009e6c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e0c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009e10:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8009e12:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8009e14:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e16:	40d3      	lsrs	r3, r2
 8009e18:	6023      	str	r3, [r4, #0]
}
 8009e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8009e1e:	f7fb bc85 	b.w	800572c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e22:	07da      	lsls	r2, r3, #31
 8009e24:	f53f af60 	bmi.w	8009ce8 <HAL_RCC_ClockConfig+0xc8>
 8009e28:	e795      	b.n	8009d56 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e2a:	6982      	ldr	r2, [r0, #24]
 8009e2c:	f022 020f 	bic.w	r2, r2, #15
 8009e30:	4311      	orrs	r1, r2
 8009e32:	6181      	str	r1, [r0, #24]
 8009e34:	e78f      	b.n	8009d56 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e36:	019f      	lsls	r7, r3, #6
 8009e38:	f53f af6a 	bmi.w	8009d10 <HAL_RCC_ClockConfig+0xf0>
 8009e3c:	e707      	b.n	8009c4e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009e3e:	2001      	movs	r0, #1
}
 8009e40:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e42:	039b      	lsls	r3, r3, #14
 8009e44:	f53f af64 	bmi.w	8009d10 <HAL_RCC_ClockConfig+0xf0>
 8009e48:	e701      	b.n	8009c4e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8009e4a:	2003      	movs	r0, #3
 8009e4c:	e700      	b.n	8009c50 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e4e:	05de      	lsls	r6, r3, #23
 8009e50:	f53f af5e 	bmi.w	8009d10 <HAL_RCC_ClockConfig+0xf0>
 8009e54:	e6fb      	b.n	8009c4e <HAL_RCC_ClockConfig+0x2e>
 8009e56:	bf00      	nop
 8009e58:	52002000 	.word	0x52002000
 8009e5c:	58024400 	.word	0x58024400
 8009e60:	0801a0dc 	.word	0x0801a0dc
 8009e64:	2400030c 	.word	0x2400030c
 8009e68:	24000310 	.word	0x24000310
 8009e6c:	24000318 	.word	0x24000318

08009e70 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e70:	4a18      	ldr	r2, [pc, #96]	; (8009ed4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e72:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e74:	6913      	ldr	r3, [r2, #16]
 8009e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d01a      	beq.n	8009eb4 <HAL_RCC_GetHCLKFreq+0x44>
 8009e7e:	2b18      	cmp	r3, #24
 8009e80:	d023      	beq.n	8009eca <HAL_RCC_GetHCLKFreq+0x5a>
 8009e82:	b1cb      	cbz	r3, 8009eb8 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8009e84:	4814      	ldr	r0, [pc, #80]	; (8009ed8 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <HAL_RCC_GetHCLKFreq+0x64>)
 8009e88:	4914      	ldr	r1, [pc, #80]	; (8009edc <HAL_RCC_GetHCLKFreq+0x6c>)
 8009e8a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e8c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e8e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e92:	4c13      	ldr	r4, [pc, #76]	; (8009ee0 <HAL_RCC_GetHCLKFreq+0x70>)
 8009e94:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e98:	4d12      	ldr	r5, [pc, #72]	; (8009ee4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e9a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e9c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e9e:	f002 021f 	and.w	r2, r2, #31
 8009ea2:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ea6:	f003 001f 	and.w	r0, r3, #31
 8009eaa:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8009eae:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009eb0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009eb4:	480c      	ldr	r0, [pc, #48]	; (8009ee8 <HAL_RCC_GetHCLKFreq+0x78>)
 8009eb6:	e7e6      	b.n	8009e86 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb8:	6813      	ldr	r3, [r2, #0]
 8009eba:	069b      	lsls	r3, r3, #26
 8009ebc:	d508      	bpl.n	8009ed0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	480a      	ldr	r0, [pc, #40]	; (8009eec <HAL_RCC_GetHCLKFreq+0x7c>)
 8009ec2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009ec6:	40d0      	lsrs	r0, r2
 8009ec8:	e7dd      	b.n	8009e86 <HAL_RCC_GetHCLKFreq+0x16>
 8009eca:	f7ff fa5f 	bl	800938c <HAL_RCC_GetSysClockFreq.part.0>
 8009ece:	e7da      	b.n	8009e86 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ed0:	4806      	ldr	r0, [pc, #24]	; (8009eec <HAL_RCC_GetHCLKFreq+0x7c>)
 8009ed2:	e7d8      	b.n	8009e86 <HAL_RCC_GetHCLKFreq+0x16>
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	003d0900 	.word	0x003d0900
 8009edc:	0801a0dc 	.word	0x0801a0dc
 8009ee0:	24000310 	.word	0x24000310
 8009ee4:	2400030c 	.word	0x2400030c
 8009ee8:	017d7840 	.word	0x017d7840
 8009eec:	03d09000 	.word	0x03d09000

08009ef0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ef0:	4a1c      	ldr	r2, [pc, #112]	; (8009f64 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ef2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ef4:	6913      	ldr	r3, [r2, #16]
 8009ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009efa:	2b10      	cmp	r3, #16
 8009efc:	d021      	beq.n	8009f42 <HAL_RCC_GetPCLK1Freq+0x52>
 8009efe:	2b18      	cmp	r3, #24
 8009f00:	d02b      	beq.n	8009f5a <HAL_RCC_GetPCLK1Freq+0x6a>
 8009f02:	b303      	cbz	r3, 8009f46 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8009f04:	4818      	ldr	r0, [pc, #96]	; (8009f68 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f06:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <HAL_RCC_GetPCLK1Freq+0x74>)
 8009f08:	4918      	ldr	r1, [pc, #96]	; (8009f6c <HAL_RCC_GetPCLK1Freq+0x7c>)
 8009f0a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8009f0c:	4d18      	ldr	r5, [pc, #96]	; (8009f70 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f0e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f12:	4c18      	ldr	r4, [pc, #96]	; (8009f74 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f14:	5ccb      	ldrb	r3, [r1, r3]
 8009f16:	f003 031f 	and.w	r3, r3, #31
 8009f1a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f1e:	6990      	ldr	r0, [r2, #24]
 8009f20:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8009f24:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f26:	5c08      	ldrb	r0, [r1, r0]
 8009f28:	f000 001f 	and.w	r0, r0, #31
 8009f2c:	40c3      	lsrs	r3, r0
 8009f2e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009f30:	69d2      	ldr	r2, [r2, #28]
 8009f32:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8009f36:	5c88      	ldrb	r0, [r1, r2]
 8009f38:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009f3c:	fa23 f000 	lsr.w	r0, r3, r0
 8009f40:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f42:	480d      	ldr	r0, [pc, #52]	; (8009f78 <HAL_RCC_GetPCLK1Freq+0x88>)
 8009f44:	e7df      	b.n	8009f06 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f46:	6813      	ldr	r3, [r2, #0]
 8009f48:	069b      	lsls	r3, r3, #26
 8009f4a:	d509      	bpl.n	8009f60 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f4c:	6810      	ldr	r0, [r2, #0]
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8009f50:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8009f54:	fa23 f000 	lsr.w	r0, r3, r0
 8009f58:	e7d5      	b.n	8009f06 <HAL_RCC_GetPCLK1Freq+0x16>
 8009f5a:	f7ff fa17 	bl	800938c <HAL_RCC_GetSysClockFreq.part.0>
 8009f5e:	e7d2      	b.n	8009f06 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009f60:	4806      	ldr	r0, [pc, #24]	; (8009f7c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8009f62:	e7d0      	b.n	8009f06 <HAL_RCC_GetPCLK1Freq+0x16>
 8009f64:	58024400 	.word	0x58024400
 8009f68:	003d0900 	.word	0x003d0900
 8009f6c:	0801a0dc 	.word	0x0801a0dc
 8009f70:	2400030c 	.word	0x2400030c
 8009f74:	24000310 	.word	0x24000310
 8009f78:	017d7840 	.word	0x017d7840
 8009f7c:	03d09000 	.word	0x03d09000

08009f80 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f80:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f82:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f84:	6913      	ldr	r3, [r2, #16]
 8009f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f8a:	2b10      	cmp	r3, #16
 8009f8c:	d021      	beq.n	8009fd2 <HAL_RCC_GetPCLK2Freq+0x52>
 8009f8e:	2b18      	cmp	r3, #24
 8009f90:	d02b      	beq.n	8009fea <HAL_RCC_GetPCLK2Freq+0x6a>
 8009f92:	b303      	cbz	r3, 8009fd6 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8009f94:	4818      	ldr	r0, [pc, #96]	; (8009ff8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f96:	4a17      	ldr	r2, [pc, #92]	; (8009ff4 <HAL_RCC_GetPCLK2Freq+0x74>)
 8009f98:	4918      	ldr	r1, [pc, #96]	; (8009ffc <HAL_RCC_GetPCLK2Freq+0x7c>)
 8009f9a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8009f9c:	4d18      	ldr	r5, [pc, #96]	; (800a000 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f9e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fa2:	4c18      	ldr	r4, [pc, #96]	; (800a004 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009fa4:	5ccb      	ldrb	r3, [r1, r3]
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fae:	6990      	ldr	r0, [r2, #24]
 8009fb0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8009fb4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fb6:	5c08      	ldrb	r0, [r1, r0]
 8009fb8:	f000 001f 	and.w	r0, r0, #31
 8009fbc:	40c3      	lsrs	r3, r0
 8009fbe:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009fc0:	69d2      	ldr	r2, [r2, #28]
 8009fc2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8009fc6:	5c88      	ldrb	r0, [r1, r2]
 8009fc8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009fcc:	fa23 f000 	lsr.w	r0, r3, r0
 8009fd0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fd2:	480d      	ldr	r0, [pc, #52]	; (800a008 <HAL_RCC_GetPCLK2Freq+0x88>)
 8009fd4:	e7df      	b.n	8009f96 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	069b      	lsls	r3, r3, #26
 8009fda:	d509      	bpl.n	8009ff0 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fdc:	6810      	ldr	r0, [r2, #0]
 8009fde:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8009fe0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8009fe4:	fa23 f000 	lsr.w	r0, r3, r0
 8009fe8:	e7d5      	b.n	8009f96 <HAL_RCC_GetPCLK2Freq+0x16>
 8009fea:	f7ff f9cf 	bl	800938c <HAL_RCC_GetSysClockFreq.part.0>
 8009fee:	e7d2      	b.n	8009f96 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ff0:	4806      	ldr	r0, [pc, #24]	; (800a00c <HAL_RCC_GetPCLK2Freq+0x8c>)
 8009ff2:	e7d0      	b.n	8009f96 <HAL_RCC_GetPCLK2Freq+0x16>
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	003d0900 	.word	0x003d0900
 8009ffc:	0801a0dc 	.word	0x0801a0dc
 800a000:	2400030c 	.word	0x2400030c
 800a004:	24000310 	.word	0x24000310
 800a008:	017d7840 	.word	0x017d7840
 800a00c:	03d09000 	.word	0x03d09000

0800a010 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a012:	4c3a      	ldr	r4, [pc, #232]	; (800a0fc <RCCEx_PLL2_Config+0xec>)
 800a014:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a016:	f003 0303 	and.w	r3, r3, #3
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d067      	beq.n	800a0ee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	4606      	mov	r6, r0
 800a022:	460f      	mov	r7, r1
 800a024:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a028:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02a:	f7fb fbe1 	bl	80057f0 <HAL_GetTick>
 800a02e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a030:	e004      	b.n	800a03c <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a032:	f7fb fbdd 	bl	80057f0 <HAL_GetTick>
 800a036:	1b43      	subs	r3, r0, r5
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d856      	bhi.n	800a0ea <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	011a      	lsls	r2, r3, #4
 800a040:	d4f7      	bmi.n	800a032 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a042:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a044:	6832      	ldr	r2, [r6, #0]
 800a046:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a04a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a04e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a050:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a054:	3b01      	subs	r3, #1
 800a056:	3a01      	subs	r2, #1
 800a058:	025b      	lsls	r3, r3, #9
 800a05a:	0412      	lsls	r2, r2, #16
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a062:	4313      	orrs	r3, r2
 800a064:	6872      	ldr	r2, [r6, #4]
 800a066:	3a01      	subs	r2, #1
 800a068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a06c:	4313      	orrs	r3, r2
 800a06e:	6932      	ldr	r2, [r6, #16]
 800a070:	3a01      	subs	r2, #1
 800a072:	0612      	lsls	r2, r2, #24
 800a074:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a078:	4313      	orrs	r3, r2
 800a07a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a07c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a07e:	6972      	ldr	r2, [r6, #20]
 800a080:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a084:	4313      	orrs	r3, r2
 800a086:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a088:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a08a:	69b3      	ldr	r3, [r6, #24]
 800a08c:	f022 0220 	bic.w	r2, r2, #32
 800a090:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a092:	4b1b      	ldr	r3, [pc, #108]	; (800a100 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a094:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a096:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a098:	f022 0210 	bic.w	r2, r2, #16
 800a09c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a09e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a0a0:	69f2      	ldr	r2, [r6, #28]
 800a0a2:	400b      	ands	r3, r1
 800a0a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a0a8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a0aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0ac:	f043 0310 	orr.w	r3, r3, #16
 800a0b0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800a0b4:	b1ef      	cbz	r7, 800a0f2 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0b6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a0b8:	bf0c      	ite	eq
 800a0ba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a0be:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800a0c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0c4:	4c0d      	ldr	r4, [pc, #52]	; (800a0fc <RCCEx_PLL2_Config+0xec>)
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ce:	f7fb fb8f 	bl	80057f0 <HAL_GetTick>
 800a0d2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0d4:	e004      	b.n	800a0e0 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0d6:	f7fb fb8b 	bl	80057f0 <HAL_GetTick>
 800a0da:	1b40      	subs	r0, r0, r5
 800a0dc:	2802      	cmp	r0, #2
 800a0de:	d804      	bhi.n	800a0ea <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	d5f7      	bpl.n	800a0d6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800a0e6:	2000      	movs	r0, #0
}
 800a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a0ea:	2003      	movs	r0, #3
}
 800a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a0ee:	2001      	movs	r0, #1
}
 800a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a0f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0f8:	e7e4      	b.n	800a0c4 <RCCEx_PLL2_Config+0xb4>
 800a0fa:	bf00      	nop
 800a0fc:	58024400 	.word	0x58024400
 800a100:	ffff0007 	.word	0xffff0007

0800a104 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a106:	4c3a      	ldr	r4, [pc, #232]	; (800a1f0 <RCCEx_PLL3_Config+0xec>)
 800a108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d067      	beq.n	800a1e2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	4606      	mov	r6, r0
 800a116:	460f      	mov	r7, r1
 800a118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a11c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a11e:	f7fb fb67 	bl	80057f0 <HAL_GetTick>
 800a122:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a124:	e004      	b.n	800a130 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a126:	f7fb fb63 	bl	80057f0 <HAL_GetTick>
 800a12a:	1b43      	subs	r3, r0, r5
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d856      	bhi.n	800a1de <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	009a      	lsls	r2, r3, #2
 800a134:	d4f7      	bmi.n	800a126 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a138:	6832      	ldr	r2, [r6, #0]
 800a13a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800a13e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a142:	62a3      	str	r3, [r4, #40]	; 0x28
 800a144:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a148:	3b01      	subs	r3, #1
 800a14a:	3a01      	subs	r2, #1
 800a14c:	025b      	lsls	r3, r3, #9
 800a14e:	0412      	lsls	r2, r2, #16
 800a150:	b29b      	uxth	r3, r3
 800a152:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a156:	4313      	orrs	r3, r2
 800a158:	6872      	ldr	r2, [r6, #4]
 800a15a:	3a01      	subs	r2, #1
 800a15c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a160:	4313      	orrs	r3, r2
 800a162:	6932      	ldr	r2, [r6, #16]
 800a164:	3a01      	subs	r2, #1
 800a166:	0612      	lsls	r2, r2, #24
 800a168:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a16c:	4313      	orrs	r3, r2
 800a16e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a172:	6972      	ldr	r2, [r6, #20]
 800a174:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a178:	4313      	orrs	r3, r2
 800a17a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a17c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a17e:	69b3      	ldr	r3, [r6, #24]
 800a180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a184:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a186:	4b1b      	ldr	r3, [pc, #108]	; (800a1f4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a188:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a18a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a18c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a190:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a192:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a194:	69f2      	ldr	r2, [r6, #28]
 800a196:	400b      	ands	r3, r1
 800a198:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a19c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a19e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1a4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800a1a8:	b1ef      	cbz	r7, 800a1e6 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1aa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1ac:	bf0c      	ite	eq
 800a1ae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a1b2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800a1b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1b8:	4c0d      	ldr	r4, [pc, #52]	; (800a1f0 <RCCEx_PLL3_Config+0xec>)
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1c2:	f7fb fb15 	bl	80057f0 <HAL_GetTick>
 800a1c6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1c8:	e004      	b.n	800a1d4 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1ca:	f7fb fb11 	bl	80057f0 <HAL_GetTick>
 800a1ce:	1b40      	subs	r0, r0, r5
 800a1d0:	2802      	cmp	r0, #2
 800a1d2:	d804      	bhi.n	800a1de <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	d5f7      	bpl.n	800a1ca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800a1da:	2000      	movs	r0, #0
}
 800a1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a1de:	2003      	movs	r0, #3
}
 800a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a1e2:	2001      	movs	r0, #1
}
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1ec:	e7e4      	b.n	800a1b8 <RCCEx_PLL3_Config+0xb4>
 800a1ee:	bf00      	nop
 800a1f0:	58024400 	.word	0x58024400
 800a1f4:	ffff0007 	.word	0xffff0007

0800a1f8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1fc:	6803      	ldr	r3, [r0, #0]
{
 800a1fe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a200:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800a204:	d022      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800a206:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a208:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800a20c:	f000 8499 	beq.w	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a210:	d811      	bhi.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800a212:	2a00      	cmp	r2, #0
 800a214:	f000 8503 	beq.w	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800a218:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800a21c:	f040 84fc 	bne.w	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a220:	2102      	movs	r1, #2
 800a222:	3004      	adds	r0, #4
 800a224:	f7ff fef4 	bl	800a010 <RCCEx_PLL2_Config>
 800a228:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a22a:	2e00      	cmp	r6, #0
 800a22c:	f040 8491 	bne.w	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a230:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	e003      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800a236:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800a23a:	f040 84ed 	bne.w	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a23e:	48a8      	ldr	r0, [pc, #672]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a240:	2600      	movs	r6, #0
 800a242:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800a244:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800a248:	430a      	orrs	r2, r1
 800a24a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a24c:	05dd      	lsls	r5, r3, #23
 800a24e:	d50a      	bpl.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a250:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a252:	2a04      	cmp	r2, #4
 800a254:	d806      	bhi.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800a256:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a25a:	04ad      	.short	0x04ad
 800a25c:	0493048c 	.word	0x0493048c
 800a260:	02e902e9 	.word	0x02e902e9
 800a264:	2601      	movs	r6, #1
 800a266:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a268:	0598      	lsls	r0, r3, #22
 800a26a:	d51b      	bpl.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 800a26c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a26e:	2a80      	cmp	r2, #128	; 0x80
 800a270:	f000 8497 	beq.w	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800a274:	f200 80ec 	bhi.w	800a450 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800a278:	2a00      	cmp	r2, #0
 800a27a:	f000 8394 	beq.w	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800a27e:	2a40      	cmp	r2, #64	; 0x40
 800a280:	f040 80ed 	bne.w	800a45e <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a284:	2100      	movs	r1, #0
 800a286:	1d20      	adds	r0, r4, #4
 800a288:	f7ff fec2 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a28c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a28e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a290:	2d00      	cmp	r5, #0
 800a292:	f040 836e 	bne.w	800a972 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a296:	4992      	ldr	r1, [pc, #584]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a29a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a29c:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800a2a0:	4302      	orrs	r2, r0
 800a2a2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a2a4:	0559      	lsls	r1, r3, #21
 800a2a6:	d51f      	bpl.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 800a2a8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800a2ac:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800a2b0:	f000 8456 	beq.w	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800a2b4:	f200 80d6 	bhi.w	800a464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	f000 837a 	beq.w	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 800a2be:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800a2c2:	f040 80d7 	bne.w	800a474 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	1d20      	adds	r0, r4, #4
 800a2ca:	f7ff fea1 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2ce:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	f040 8351 	bne.w	800a97a <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a2d8:	4981      	ldr	r1, [pc, #516]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a2da:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800a2de:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a2e0:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800a2e4:	4302      	orrs	r2, r0
 800a2e6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2e8:	051a      	lsls	r2, r3, #20
 800a2ea:	d51f      	bpl.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 800a2ec:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800a2f0:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800a2f4:	f000 8465 	beq.w	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 800a2f8:	f200 80bf 	bhi.w	800a47a <HAL_RCCEx_PeriphCLKConfig+0x282>
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	f000 835e 	beq.w	800a9be <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800a302:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a306:	f040 80c0 	bne.w	800a48a <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a30a:	2100      	movs	r1, #0
 800a30c:	1d20      	adds	r0, r4, #4
 800a30e:	f7ff fe7f 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a312:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a314:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a316:	2d00      	cmp	r5, #0
 800a318:	f040 8333 	bne.w	800a982 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a31c:	4970      	ldr	r1, [pc, #448]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a31e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800a322:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a324:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800a328:	4302      	orrs	r2, r0
 800a32a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a32c:	019f      	lsls	r7, r3, #6
 800a32e:	d518      	bpl.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 800a330:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a332:	2a20      	cmp	r2, #32
 800a334:	f000 83ce 	beq.w	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a338:	f200 80aa 	bhi.w	800a490 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a33c:	b13a      	cbz	r2, 800a34e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800a33e:	2a10      	cmp	r2, #16
 800a340:	f040 80a9 	bne.w	800a496 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a344:	4966      	ldr	r1, [pc, #408]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a346:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a348:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a34c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800a34e:	2d00      	cmp	r5, #0
 800a350:	f040 8360 	bne.w	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a354:	4962      	ldr	r1, [pc, #392]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a356:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a358:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a35a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a35e:	4302      	orrs	r2, r0
 800a360:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a362:	04d8      	lsls	r0, r3, #19
 800a364:	d51d      	bpl.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 800a366:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a368:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a36c:	f000 8410 	beq.w	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800a370:	f200 8094 	bhi.w	800a49c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800a374:	2a00      	cmp	r2, #0
 800a376:	f000 8328 	beq.w	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a37a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a37e:	f040 8095 	bne.w	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a382:	2100      	movs	r1, #0
 800a384:	1d20      	adds	r0, r4, #4
 800a386:	f7ff fe43 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a38a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a38c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a38e:	2d00      	cmp	r5, #0
 800a390:	f040 82f1 	bne.w	800a976 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a394:	4952      	ldr	r1, [pc, #328]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a396:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a398:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a39a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800a39e:	4302      	orrs	r2, r0
 800a3a0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a3a2:	0499      	lsls	r1, r3, #18
 800a3a4:	d51a      	bpl.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 800a3a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a3a8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800a3ac:	f000 8376 	beq.w	800aa9c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800a3b0:	d87f      	bhi.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a3b2:	b14a      	cbz	r2, 800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800a3b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a3b8:	f040 8083 	bne.w	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3bc:	2101      	movs	r1, #1
 800a3be:	1d20      	adds	r0, r4, #4
 800a3c0:	f7ff fe26 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3c4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3c6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	f040 8325 	bne.w	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3ce:	4944      	ldr	r1, [pc, #272]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a3d0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a3d2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a3d4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a3d8:	4302      	orrs	r2, r0
 800a3da:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3dc:	045a      	lsls	r2, r3, #17
 800a3de:	d51b      	bpl.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 800a3e0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800a3e4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a3e8:	f000 8362 	beq.w	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a3ec:	d86c      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a3ee:	b142      	cbz	r2, 800a402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a3f0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800a3f4:	d170      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	1d20      	adds	r0, r4, #4
 800a3fa:	f7ff fe09 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a3fe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a400:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a402:	2d00      	cmp	r5, #0
 800a404:	f040 830a 	bne.w	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a408:	4935      	ldr	r1, [pc, #212]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a40a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800a40e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a410:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800a414:	4302      	orrs	r2, r0
 800a416:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a418:	041f      	lsls	r7, r3, #16
 800a41a:	d50d      	bpl.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 800a41c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a41e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800a422:	f000 834f 	beq.w	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800a426:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a42a:	f000 820b 	beq.w	800a844 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a42e:	2a00      	cmp	r2, #0
 800a430:	f000 820e 	beq.w	800a850 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800a434:	2601      	movs	r6, #1
 800a436:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a438:	01d8      	lsls	r0, r3, #7
 800a43a:	d55d      	bpl.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 800a43c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a43e:	2a03      	cmp	r2, #3
 800a440:	f200 8418 	bhi.w	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 800a444:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a448:	035a0054 	.word	0x035a0054
 800a44c:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 800a450:	2ac0      	cmp	r2, #192	; 0xc0
 800a452:	f43f af1d 	beq.w	800a290 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a456:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a45a:	f43f af19 	beq.w	800a290 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a45e:	2601      	movs	r6, #1
 800a460:	4635      	mov	r5, r6
 800a462:	e71f      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 800a464:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800a468:	f43f af33 	beq.w	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800a46c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a470:	f43f af2f 	beq.w	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 800a474:	2601      	movs	r6, #1
 800a476:	4635      	mov	r5, r6
 800a478:	e736      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800a47a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800a47e:	f43f af4a 	beq.w	800a316 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800a482:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800a486:	f43f af46 	beq.w	800a316 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800a48a:	2601      	movs	r6, #1
 800a48c:	4635      	mov	r5, r6
 800a48e:	e74d      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 800a490:	2a30      	cmp	r2, #48	; 0x30
 800a492:	f43f af5c 	beq.w	800a34e <HAL_RCCEx_PeriphCLKConfig+0x156>
 800a496:	2601      	movs	r6, #1
 800a498:	4635      	mov	r5, r6
 800a49a:	e762      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800a49c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800a4a0:	f43f af75 	beq.w	800a38e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a4a4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a4a8:	f43f af71 	beq.w	800a38e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a4ac:	2601      	movs	r6, #1
 800a4ae:	4635      	mov	r5, r6
 800a4b0:	e777      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 800a4b2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800a4b6:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800a4ba:	d085      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800a4bc:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 800a4c0:	d082      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800a4c2:	2601      	movs	r6, #1
 800a4c4:	4635      	mov	r5, r6
 800a4c6:	e789      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 800a4c8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800a4cc:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800a4d0:	d097      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a4d2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800a4d6:	d094      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a4d8:	2601      	movs	r6, #1
 800a4da:	4635      	mov	r5, r6
 800a4dc:	e79c      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800a4de:	bf00      	nop
 800a4e0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	1d20      	adds	r0, r4, #4
 800a4e8:	f7ff fd92 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4ec:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a4ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	f000 8272 	beq.w	800a9da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 800a4f6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4f8:	0259      	lsls	r1, r3, #9
 800a4fa:	f100 81ee 	bmi.w	800a8da <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4fe:	07df      	lsls	r7, r3, #31
 800a500:	d52f      	bpl.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800a502:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a504:	2a28      	cmp	r2, #40	; 0x28
 800a506:	d82a      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a508:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a50c:	002901dc 	.word	0x002901dc
 800a510:	00290029 	.word	0x00290029
 800a514:	00290029 	.word	0x00290029
 800a518:	00290029 	.word	0x00290029
 800a51c:	00290378 	.word	0x00290378
 800a520:	00290029 	.word	0x00290029
 800a524:	00290029 	.word	0x00290029
 800a528:	00290029 	.word	0x00290029
 800a52c:	002901d5 	.word	0x002901d5
 800a530:	00290029 	.word	0x00290029
 800a534:	00290029 	.word	0x00290029
 800a538:	00290029 	.word	0x00290029
 800a53c:	002901dc 	.word	0x002901dc
 800a540:	00290029 	.word	0x00290029
 800a544:	00290029 	.word	0x00290029
 800a548:	00290029 	.word	0x00290029
 800a54c:	002901dc 	.word	0x002901dc
 800a550:	00290029 	.word	0x00290029
 800a554:	00290029 	.word	0x00290029
 800a558:	00290029 	.word	0x00290029
 800a55c:	01dc      	.short	0x01dc
 800a55e:	2601      	movs	r6, #1
 800a560:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a562:	0798      	lsls	r0, r3, #30
 800a564:	d516      	bpl.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a566:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a568:	2a05      	cmp	r2, #5
 800a56a:	f200 8380 	bhi.w	800ac6e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a56e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a572:	000d      	.short	0x000d
 800a574:	00060331 	.word	0x00060331
 800a578:	000d000d 	.word	0x000d000d
 800a57c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a57e:	2101      	movs	r1, #1
 800a580:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a584:	f7ff fdbe 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a588:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a58a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a58c:	2d00      	cmp	r5, #0
 800a58e:	f000 822e 	beq.w	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800a592:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a594:	0759      	lsls	r1, r3, #29
 800a596:	d517      	bpl.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a598:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a59c:	2a05      	cmp	r2, #5
 800a59e:	f200 836c 	bhi.w	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a5a2:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a5a6:	000d      	.short	0x000d
 800a5a8:	00060321 	.word	0x00060321
 800a5ac:	000d000d 	.word	0x000d000d
 800a5b0:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a5b8:	f7ff fda4 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5bc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	f000 821c 	beq.w	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x806>
 800a5c6:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5c8:	069a      	lsls	r2, r3, #26
 800a5ca:	d51d      	bpl.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a5cc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a5d0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a5d4:	f000 8287 	beq.w	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a5d8:	f200 80e6 	bhi.w	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 800a5dc:	b14a      	cbz	r2, 800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a5de:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800a5e2:	f040 80eb 	bne.w	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	1d20      	adds	r0, r4, #4
 800a5ea:	f7ff fd11 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a5ee:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	f040 81ef 	bne.w	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5f8:	49a4      	ldr	r1, [pc, #656]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a5fa:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a5fe:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a600:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800a604:	4302      	orrs	r2, r0
 800a606:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a608:	065f      	lsls	r7, r3, #25
 800a60a:	d51d      	bpl.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a60c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a610:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a614:	f000 822e 	beq.w	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800a618:	f200 80d3 	bhi.w	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800a61c:	b14a      	cbz	r2, 800a632 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800a61e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a622:	f040 80d8 	bne.w	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a626:	2100      	movs	r1, #0
 800a628:	1d20      	adds	r0, r4, #4
 800a62a:	f7ff fcf1 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a62e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a630:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a632:	2d00      	cmp	r5, #0
 800a634:	f040 81f4 	bne.w	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a638:	4994      	ldr	r1, [pc, #592]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a63a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800a63e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a640:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800a644:	4302      	orrs	r2, r0
 800a646:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a648:	0618      	lsls	r0, r3, #24
 800a64a:	d51d      	bpl.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a64c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800a650:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a654:	f000 8218 	beq.w	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800a658:	f200 80c0 	bhi.w	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800a65c:	b14a      	cbz	r2, 800a672 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800a65e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a662:	f040 80c5 	bne.w	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a666:	2100      	movs	r1, #0
 800a668:	1d20      	adds	r0, r4, #4
 800a66a:	f7ff fcd1 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a66e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a670:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a672:	2d00      	cmp	r5, #0
 800a674:	f040 81b9 	bne.w	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a678:	4984      	ldr	r1, [pc, #528]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a67a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800a67e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a680:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a684:	4302      	orrs	r2, r0
 800a686:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a688:	0719      	lsls	r1, r3, #28
 800a68a:	d50b      	bpl.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a68c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a690:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a694:	f000 823b 	beq.w	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a698:	487c      	ldr	r0, [pc, #496]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a69a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a69c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a6a4:	06da      	lsls	r2, r3, #27
 800a6a6:	d50b      	bpl.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a6a8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a6ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a6b0:	f000 823a 	beq.w	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6b4:	4875      	ldr	r0, [pc, #468]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a6b6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a6b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6c0:	031f      	lsls	r7, r3, #12
 800a6c2:	d50e      	bpl.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 800a6c4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a6c8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a6cc:	f000 80e0 	beq.w	800a890 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800a6d0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a6d4:	f000 80e3 	beq.w	800a89e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	f000 81c3 	beq.w	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800a6de:	2601      	movs	r6, #1
 800a6e0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6e2:	0358      	lsls	r0, r3, #13
 800a6e4:	d50f      	bpl.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 800a6e6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a6ea:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800a6ee:	f000 80ba 	beq.w	800a866 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a6f2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800a6f6:	f000 80bd 	beq.w	800a874 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800a6fa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800a6fe:	f000 81a9 	beq.w	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800a702:	2601      	movs	r6, #1
 800a704:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a706:	03d9      	lsls	r1, r3, #15
 800a708:	d509      	bpl.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a70a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	f000 818f 	beq.w	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a712:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a716:	f000 8136 	beq.w	800a986 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800a71a:	2601      	movs	r6, #1
 800a71c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a71e:	009a      	lsls	r2, r3, #2
 800a720:	f100 811c 	bmi.w	800a95c <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a724:	039f      	lsls	r7, r3, #14
 800a726:	d466      	bmi.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 800a728:	1e30      	subs	r0, r6, #0
 800a72a:	bf18      	it	ne
 800a72c:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a72e:	02de      	lsls	r6, r3, #11
 800a730:	d506      	bpl.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a732:	4956      	ldr	r1, [pc, #344]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a734:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a736:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a738:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a73c:	432a      	orrs	r2, r5
 800a73e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a740:	00dd      	lsls	r5, r3, #3
 800a742:	d507      	bpl.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a744:	4951      	ldr	r1, [pc, #324]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a746:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800a74a:	690a      	ldr	r2, [r1, #16]
 800a74c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a750:	432a      	orrs	r2, r5
 800a752:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a754:	0299      	lsls	r1, r3, #10
 800a756:	d506      	bpl.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a758:	494c      	ldr	r1, [pc, #304]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a75a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800a75c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a75e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a762:	432a      	orrs	r2, r5
 800a764:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a766:	005a      	lsls	r2, r3, #1
 800a768:	d509      	bpl.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a76a:	4a48      	ldr	r2, [pc, #288]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a76c:	6911      	ldr	r1, [r2, #16]
 800a76e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800a772:	6111      	str	r1, [r2, #16]
 800a774:	6911      	ldr	r1, [r2, #16]
 800a776:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800a77a:	4329      	orrs	r1, r5
 800a77c:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a77e:	2b00      	cmp	r3, #0
 800a780:	da06      	bge.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a782:	4942      	ldr	r1, [pc, #264]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a784:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800a786:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a78c:	432a      	orrs	r2, r5
 800a78e:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a790:	021b      	lsls	r3, r3, #8
 800a792:	d507      	bpl.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a794:	4a3d      	ldr	r2, [pc, #244]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a796:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a79a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a79c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	6553      	str	r3, [r2, #84]	; 0x54
}
 800a7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a7a8:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 800a7ac:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800a7b0:	f43f af1f 	beq.w	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a7b4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800a7b8:	f43f af1b 	beq.w	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a7bc:	2601      	movs	r6, #1
 800a7be:	4635      	mov	r5, r6
 800a7c0:	e722      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a7c2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 800a7c6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a7ca:	f43f af32 	beq.w	800a632 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800a7ce:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800a7d2:	f43f af2e 	beq.w	800a632 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800a7d6:	2601      	movs	r6, #1
 800a7d8:	4635      	mov	r5, r6
 800a7da:	e735      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a7dc:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800a7e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a7e4:	f43f af45 	beq.w	800a672 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800a7e8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800a7ec:	f43f af41 	beq.w	800a672 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800a7f0:	2601      	movs	r6, #1
 800a7f2:	4635      	mov	r5, r6
 800a7f4:	e748      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 800a7f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a7f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a7fc:	f000 8121 	beq.w	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800a800:	d906      	bls.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800a802:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 800a806:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a80a:	d003      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800a80c:	2001      	movs	r0, #1
 800a80e:	e78e      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x536>
 800a810:	2a00      	cmp	r2, #0
 800a812:	d1fb      	bne.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 800a814:	2d00      	cmp	r5, #0
 800a816:	d1f9      	bne.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a818:	4d1c      	ldr	r5, [pc, #112]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 800a81a:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a81c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800a81e:	bf18      	it	ne
 800a820:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a822:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a826:	430a      	orrs	r2, r1
 800a828:	656a      	str	r2, [r5, #84]	; 0x54
 800a82a:	e780      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a82c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800a82e:	2d00      	cmp	r5, #0
 800a830:	f040 80a5 	bne.w	800a97e <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a834:	4915      	ldr	r1, [pc, #84]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a838:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a83a:	f022 0207 	bic.w	r2, r2, #7
 800a83e:	4302      	orrs	r2, r0
 800a840:	650a      	str	r2, [r1, #80]	; 0x50
 800a842:	e511      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a844:	2101      	movs	r1, #1
 800a846:	1d20      	adds	r0, r4, #4
 800a848:	f7ff fbe2 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a84c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a84e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a850:	2d00      	cmp	r5, #0
 800a852:	f040 80dd 	bne.w	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a856:	490d      	ldr	r1, [pc, #52]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a858:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a85a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a85c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a860:	4302      	orrs	r2, r0
 800a862:	650a      	str	r2, [r1, #80]	; 0x50
 800a864:	e5e8      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a866:	2101      	movs	r1, #1
 800a868:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a86c:	f7ff fc4a 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a870:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a872:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a874:	2d00      	cmp	r5, #0
 800a876:	f040 80d9 	bne.w	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a87a:	4904      	ldr	r1, [pc, #16]	; (800a88c <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800a87c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800a880:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a882:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a886:	4302      	orrs	r2, r0
 800a888:	654a      	str	r2, [r1, #84]	; 0x54
 800a88a:	e73c      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 800a88c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a890:	2102      	movs	r1, #2
 800a892:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a896:	f7ff fc35 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a89a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a89c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a89e:	2d00      	cmp	r5, #0
 800a8a0:	f040 80c2 	bne.w	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a8a4:	49ac      	ldr	r1, [pc, #688]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a8a6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800a8aa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800a8ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a8b0:	4302      	orrs	r2, r0
 800a8b2:	658a      	str	r2, [r1, #88]	; 0x58
 800a8b4:	e715      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a8bc:	f7ff fc22 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a8c0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	f040 80ad 	bne.w	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a8ca:	49a3      	ldr	r1, [pc, #652]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a8cc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a8ce:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a8d0:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800a8d4:	4302      	orrs	r2, r0
 800a8d6:	654a      	str	r2, [r1, #84]	; 0x54
 800a8d8:	e643      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8da:	4fa0      	ldr	r7, [pc, #640]	; (800ab5c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8e2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a8e4:	f7fa ff84 	bl	80057f0 <HAL_GetTick>
 800a8e8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8ea:	e006      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8ec:	f7fa ff80 	bl	80057f0 <HAL_GetTick>
 800a8f0:	eba0 0008 	sub.w	r0, r0, r8
 800a8f4:	2864      	cmp	r0, #100	; 0x64
 800a8f6:	f200 818b 	bhi.w	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	05da      	lsls	r2, r3, #23
 800a8fe:	d5f5      	bpl.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 800a900:	2d00      	cmp	r5, #0
 800a902:	f040 81b1 	bne.w	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a906:	4a94      	ldr	r2, [pc, #592]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a908:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800a90c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a90e:	4059      	eors	r1, r3
 800a910:	f411 7f40 	tst.w	r1, #768	; 0x300
 800a914:	d00b      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a916:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a918:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a91a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a91e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800a922:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a924:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800a926:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800a92a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800a92c:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a932:	f000 817b 	beq.w	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a936:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a93a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a93e:	f000 8189 	beq.w	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 800a942:	4985      	ldr	r1, [pc, #532]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a944:	690a      	ldr	r2, [r1, #16]
 800a946:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800a94a:	610a      	str	r2, [r1, #16]
 800a94c:	4a82      	ldr	r2, [pc, #520]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a94e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a952:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a954:	430b      	orrs	r3, r1
 800a956:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	e5d0      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a95c:	2102      	movs	r1, #2
 800a95e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a962:	f7ff fbcf 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a966:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a968:	2800      	cmp	r0, #0
 800a96a:	f43f aedb 	beq.w	800a724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 800a96e:	2601      	movs	r6, #1
 800a970:	e6d8      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a972:	462e      	mov	r6, r5
 800a974:	e496      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800a976:	462e      	mov	r6, r5
 800a978:	e513      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a97a:	462e      	mov	r6, r5
 800a97c:	e4b4      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800a97e:	462e      	mov	r6, r5
 800a980:	e472      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800a982:	462e      	mov	r6, r5
 800a984:	e4d2      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a986:	2102      	movs	r1, #2
 800a988:	1d20      	adds	r0, r4, #4
 800a98a:	f7ff fb41 	bl	800a010 <RCCEx_PLL2_Config>
 800a98e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a990:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800a992:	2d00      	cmp	r5, #0
 800a994:	d153      	bne.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a996:	4970      	ldr	r1, [pc, #448]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a998:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a99a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a99c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9a0:	4302      	orrs	r2, r0
 800a9a2:	64ca      	str	r2, [r1, #76]	; 0x4c
 800a9a4:	e6bb      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9a6:	496c      	ldr	r1, [pc, #432]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a9aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a9ae:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a9b0:	e46e      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b2:	4969      	ldr	r1, [pc, #420]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a9b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a9ba:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a9bc:	e489      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9be:	4966      	ldr	r1, [pc, #408]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a9c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a9c6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a9c8:	e4a5      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ca:	4963      	ldr	r1, [pc, #396]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800a9ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a9d2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800a9d4:	e4db      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a9d6:	462e      	mov	r6, r5
 800a9d8:	e616      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a9da:	495f      	ldr	r1, [pc, #380]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a9de:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a9e0:	f022 0203 	bic.w	r2, r2, #3
 800a9e4:	4302      	orrs	r2, r0
 800a9e6:	64ca      	str	r2, [r1, #76]	; 0x4c
 800a9e8:	e586      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a9ea:	462e      	mov	r6, r5
 800a9ec:	e64c      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a9ee:	495a      	ldr	r1, [pc, #360]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800a9f0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a9f2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800a9f4:	f022 0207 	bic.w	r2, r2, #7
 800a9f8:	4302      	orrs	r2, r0
 800a9fa:	654a      	str	r2, [r1, #84]	; 0x54
 800a9fc:	e5ca      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9fe:	4956      	ldr	r1, [pc, #344]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa00:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800aa04:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800aa06:	f022 0207 	bic.w	r2, r2, #7
 800aa0a:	4302      	orrs	r2, r0
 800aa0c:	658a      	str	r2, [r1, #88]	; 0x58
 800aa0e:	e5db      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800aa10:	462e      	mov	r6, r5
 800aa12:	e511      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800aa14:	462e      	mov	r6, r5
 800aa16:	e4a4      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800aa18:	462e      	mov	r6, r5
 800aa1a:	e4df      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aa1c:	462e      	mov	r6, r5
 800aa1e:	e4fb      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800aa20:	462e      	mov	r6, r5
 800aa22:	e611      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x450>
 800aa24:	462e      	mov	r6, r5
 800aa26:	e59c      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800aa28:	462e      	mov	r6, r5
 800aa2a:	e65a      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800aa2c:	462e      	mov	r6, r5
 800aa2e:	e66a      	b.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa30:	4949      	ldr	r1, [pc, #292]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa32:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aa34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aa38:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	d0ab      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800aa3e:	462e      	mov	r6, r5
 800aa40:	e66d      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa42:	4845      	ldr	r0, [pc, #276]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa44:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800aa46:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800aa4a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	f47f aedd 	bne.w	800a80c <HAL_RCCEx_PeriphCLKConfig+0x614>
 800aa52:	e6e1      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa54:	4940      	ldr	r1, [pc, #256]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aa56:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aa58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aa5c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	d1e4      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x834>
 800aa62:	e70a      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa64:	1d20      	adds	r0, r4, #4
 800aa66:	f7ff fad3 	bl	800a010 <RCCEx_PLL2_Config>
 800aa6a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa6c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	d1da      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800aa72:	e717      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa74:	2102      	movs	r1, #2
 800aa76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aa7a:	f7ff fb43 	bl	800a104 <RCCEx_PLL3_Config>
 800aa7e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa80:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	d1cc      	bne.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x828>
 800aa86:	e5d7      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa88:	2102      	movs	r1, #2
 800aa8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aa8e:	f7ff fb39 	bl	800a104 <RCCEx_PLL3_Config>
 800aa92:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa94:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	d1a7      	bne.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800aa9a:	e5ed      	b.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aaa2:	f7ff fb2f 	bl	800a104 <RCCEx_PLL3_Config>
 800aaa6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aaa8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aaaa:	2d00      	cmp	r5, #0
 800aaac:	d1b4      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x820>
 800aaae:	e48e      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aab0:	2101      	movs	r1, #1
 800aab2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aab6:	f7ff fb25 	bl	800a104 <RCCEx_PLL3_Config>
 800aaba:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aabc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aabe:	2d00      	cmp	r5, #0
 800aac0:	d1ac      	bne.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x824>
 800aac2:	e4a1      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac4:	4924      	ldr	r1, [pc, #144]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aac6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800aac8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aacc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800aace:	2d00      	cmp	r5, #0
 800aad0:	d19e      	bne.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x818>
 800aad2:	e6c0      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aad4:	2102      	movs	r1, #2
 800aad6:	1d20      	adds	r0, r4, #4
 800aad8:	f7ff fa9a 	bl	800a010 <RCCEx_PLL2_Config>
 800aadc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aade:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aae0:	2d00      	cmp	r5, #0
 800aae2:	d197      	bne.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800aae4:	e436      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aae6:	2102      	movs	r1, #2
 800aae8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aaec:	f7ff fb0a 	bl	800a104 <RCCEx_PLL3_Config>
 800aaf0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aaf2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	f47f af6e 	bne.w	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800aafa:	e57d      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aafc:	4916      	ldr	r1, [pc, #88]	; (800ab58 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800aafe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800ab00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ab04:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	f47f acf5 	bne.w	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800ab0c:	e765      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab0e:	2102      	movs	r1, #2
 800ab10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab14:	f7ff faf6 	bl	800a104 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ab18:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab1c:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	f43f adba 	beq.w	800a698 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 800ab24:	2601      	movs	r6, #1
 800ab26:	e5b7      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab28:	2102      	movs	r1, #2
 800ab2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab2e:	f7ff fae9 	bl	800a104 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab32:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab36:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	f43f adbb 	beq.w	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800ab3e:	2601      	movs	r6, #1
 800ab40:	e5b8      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab42:	2102      	movs	r1, #2
 800ab44:	3024      	adds	r0, #36	; 0x24
 800ab46:	f7ff fadd 	bl	800a104 <RCCEx_PLL3_Config>
 800ab4a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800ab4c:	2e00      	cmp	r6, #0
 800ab4e:	f43f ab6f 	beq.w	800a230 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	f7ff bb7a 	b.w	800a24c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ab58:	58024400 	.word	0x58024400
 800ab5c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab60:	2100      	movs	r1, #0
 800ab62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab66:	f7ff facd 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab6a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab6c:	4605      	mov	r5, r0
      break;
 800ab6e:	f7ff bbb0 	b.w	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab72:	2100      	movs	r1, #0
 800ab74:	1d20      	adds	r0, r4, #4
 800ab76:	f7ff fa4b 	bl	800a010 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab7a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab7c:	4605      	mov	r5, r0
      break;
 800ab7e:	e656      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab80:	2100      	movs	r1, #0
 800ab82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab86:	f7ff fabd 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab8a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab8c:	4605      	mov	r5, r0
      break;
 800ab8e:	e64e      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab90:	2100      	movs	r1, #0
 800ab92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab96:	f7ff fab5 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab9a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ab9c:	4605      	mov	r5, r0
      break;
 800ab9e:	f7ff bbf6 	b.w	800a38e <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aba2:	2100      	movs	r1, #0
 800aba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aba8:	f7ff faac 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800abac:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800abae:	4605      	mov	r5, r0
      break;
 800abb0:	f7ff bb6e 	b.w	800a290 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb4:	4932      	ldr	r1, [pc, #200]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 800abb6:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800abba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800abbe:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800abc0:	e635      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abc2:	2100      	movs	r1, #0
 800abc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800abc8:	f7ff fa9c 	bl	800a104 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800abcc:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abce:	4605      	mov	r5, r0
      break;
 800abd0:	f7ff bba1 	b.w	800a316 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abd4:	2101      	movs	r1, #1
 800abd6:	1d20      	adds	r0, r4, #4
 800abd8:	f7ff fa1a 	bl	800a010 <RCCEx_PLL2_Config>
 800abdc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800abde:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	f47f acd6 	bne.w	800a592 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800abe6:	e702      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abe8:	2101      	movs	r1, #1
 800abea:	1d20      	adds	r0, r4, #4
 800abec:	f7ff fa10 	bl	800a010 <RCCEx_PLL2_Config>
 800abf0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800abf2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800abf4:	2d00      	cmp	r5, #0
 800abf6:	f47f ace6 	bne.w	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800abfa:	e700      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abfc:	2101      	movs	r1, #1
 800abfe:	1d20      	adds	r0, r4, #4
 800ac00:	f7ff fa06 	bl	800a010 <RCCEx_PLL2_Config>
 800ac04:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac06:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	f47f af0b 	bne.w	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ac0e:	e65c      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 800ac10:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ac12:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 800ac14:	4635      	mov	r5, r6
 800ac16:	e472      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800ac18:	2601      	movs	r6, #1
 800ac1a:	f7ff bb17 	b.w	800a24c <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac1e:	4818      	ldr	r0, [pc, #96]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ac20:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800ac22:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800ac26:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800ac28:	f7ff bb09 	b.w	800a23e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 800ac2c:	f7fa fde0 	bl	80057f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac30:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800ac80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 800ac34:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac36:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac3a:	e004      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac3c:	f7fa fdd8 	bl	80057f0 <HAL_GetTick>
 800ac40:	1bc0      	subs	r0, r0, r7
 800ac42:	4548      	cmp	r0, r9
 800ac44:	d8e4      	bhi.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac46:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ac4a:	079b      	lsls	r3, r3, #30
 800ac4c:	d5f6      	bpl.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac4e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ac52:	e670      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800ac54:	480a      	ldr	r0, [pc, #40]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ac56:	4a0b      	ldr	r2, [pc, #44]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 800ac58:	6901      	ldr	r1, [r0, #16]
 800ac5a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ac5e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800ac62:	430a      	orrs	r2, r1
 800ac64:	6102      	str	r2, [r0, #16]
 800ac66:	e671      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	462e      	mov	r6, r5
 800ac6c:	e447      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ac6e:	2601      	movs	r6, #1
 800ac70:	4635      	mov	r5, r6
 800ac72:	e48f      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 800ac74:	2601      	movs	r6, #1
 800ac76:	4635      	mov	r5, r6
 800ac78:	e43e      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ac7a:	2601      	movs	r6, #1
 800ac7c:	4635      	mov	r5, r6
 800ac7e:	e4a3      	b.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ac80:	58024400 	.word	0x58024400
 800ac84:	00ffffcf 	.word	0x00ffffcf

0800ac88 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800ac88:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac8a:	f7ff f8f1 	bl	8009e70 <HAL_RCC_GetHCLKFreq>
 800ac8e:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800ac90:	4a05      	ldr	r2, [pc, #20]	; (800aca8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ac98:	5cd3      	ldrb	r3, [r2, r3]
 800ac9a:	f003 031f 	and.w	r3, r3, #31
}
 800ac9e:	40d8      	lsrs	r0, r3
 800aca0:	bd08      	pop	{r3, pc}
 800aca2:	bf00      	nop
 800aca4:	58024400 	.word	0x58024400
 800aca8:	0801a0dc 	.word	0x0801a0dc

0800acac <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acac:	4b4f      	ldr	r3, [pc, #316]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800acae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acb0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800acb2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800acb4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800acb6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800acba:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800acbe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800acc0:	d05c      	beq.n	800ad7c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800acc2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800acc6:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acca:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800acce:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800acd2:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800acd4:	ee07 4a90 	vmov	s15, r4
 800acd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800acdc:	d003      	beq.n	800ace6 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800acde:	2902      	cmp	r1, #2
 800ace0:	d075      	beq.n	800adce <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800ace2:	2900      	cmp	r1, #0
 800ace4:	d04f      	beq.n	800ad86 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ace6:	ee07 2a90 	vmov	s15, r2
 800acea:	eddf 6a41 	vldr	s13, [pc, #260]	; 800adf0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800acee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800acf8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800acfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad00:	ee06 3a90 	vmov	s13, r3
 800ad04:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ad08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ad0c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ad10:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ad14:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad18:	4a34      	ldr	r2, [pc, #208]	; (800adec <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800ad1a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ad1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ad20:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ad24:	ee07 3a10 	vmov	s14, r3
 800ad28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ad2c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ad2e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ad32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad3a:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ad3e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ad40:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ad44:	ee07 3a10 	vmov	s14, r3
 800ad48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ad4c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ad50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad58:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad5c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ad5e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad72:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ad76:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800ad7a:	4770      	bx	lr
 800ad7c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad7e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad82:	6082      	str	r2, [r0, #8]
}
 800ad84:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad86:	6819      	ldr	r1, [r3, #0]
 800ad88:	0689      	lsls	r1, r1, #26
 800ad8a:	d527      	bpl.n	800addc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad8c:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad8e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad92:	4919      	ldr	r1, [pc, #100]	; (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad94:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad9a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ada2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800adf4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800ada6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adaa:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adac:	ee06 3a90 	vmov	s13, r3
 800adb0:	ee05 1a90 	vmov	s11, r1
 800adb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800adb8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800adbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800adc0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800adc4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800adc8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800adcc:	e7a4      	b.n	800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800adce:	ee07 2a90 	vmov	s15, r2
 800add2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800add6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adda:	e78a      	b.n	800acf2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800addc:	ee07 2a90 	vmov	s15, r2
 800ade0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800ade4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ade8:	e783      	b.n	800acf2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800adea:	bf00      	nop
 800adec:	58024400 	.word	0x58024400
 800adf0:	4a742400 	.word	0x4a742400
 800adf4:	39000000 	.word	0x39000000
 800adf8:	03d09000 	.word	0x03d09000
 800adfc:	4bbebc20 	.word	0x4bbebc20
 800ae00:	4c742400 	.word	0x4c742400

0800ae04 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae04:	4b4f      	ldr	r3, [pc, #316]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800ae06:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae08:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae0a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae0c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800ae0e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae12:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae16:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800ae18:	d05c      	beq.n	800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae1a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae1e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae22:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae26:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800ae2a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae2c:	ee07 4a90 	vmov	s15, r4
 800ae30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800ae34:	d003      	beq.n	800ae3e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800ae36:	2902      	cmp	r1, #2
 800ae38:	d075      	beq.n	800af26 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	d04f      	beq.n	800aede <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae3e:	ee07 2a90 	vmov	s15, r2
 800ae42:	eddf 6a41 	vldr	s13, [pc, #260]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800ae46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800ae50:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800ae54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae58:	ee06 3a90 	vmov	s13, r3
 800ae5c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ae60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ae64:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ae68:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ae6c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae70:	4a34      	ldr	r2, [pc, #208]	; (800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800ae72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ae76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ae78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ae7c:	ee07 3a10 	vmov	s14, r3
 800ae80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ae84:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae86:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ae8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae92:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ae98:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ae9c:	ee07 3a10 	vmov	s14, r3
 800aea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aea4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeb0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aeb4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800aeb6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800aece:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800aed2:	4770      	bx	lr
 800aed4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aed6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aeda:	6082      	str	r2, [r0, #8]
}
 800aedc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	0689      	lsls	r1, r1, #26
 800aee2:	d527      	bpl.n	800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aee4:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aee6:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aeea:	4919      	ldr	r1, [pc, #100]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aef2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aefa:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800aefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af02:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af04:	ee06 3a90 	vmov	s13, r3
 800af08:	ee05 1a90 	vmov	s11, r1
 800af0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800af10:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800af14:	ee76 6a86 	vadd.f32	s13, s13, s12
 800af18:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800af1c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800af20:	ee66 6a26 	vmul.f32	s13, s12, s13
 800af24:	e7a4      	b.n	800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af26:	ee07 2a90 	vmov	s15, r2
 800af2a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800af2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af32:	e78a      	b.n	800ae4a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af34:	ee07 2a90 	vmov	s15, r2
 800af38:	eddf 6a07 	vldr	s13, [pc, #28]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800af3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af40:	e783      	b.n	800ae4a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800af42:	bf00      	nop
 800af44:	58024400 	.word	0x58024400
 800af48:	4a742400 	.word	0x4a742400
 800af4c:	39000000 	.word	0x39000000
 800af50:	03d09000 	.word	0x03d09000
 800af54:	4bbebc20 	.word	0x4bbebc20
 800af58:	4c742400 	.word	0x4c742400

0800af5c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af5c:	4b4f      	ldr	r3, [pc, #316]	; (800b09c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800af5e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af60:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800af62:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af64:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800af66:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800af6a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af6e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800af70:	d05c      	beq.n	800b02c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af72:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af76:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af7a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af7e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800af82:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af84:	ee07 4a90 	vmov	s15, r4
 800af88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800af8c:	d07e      	beq.n	800b08c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800af8e:	2902      	cmp	r1, #2
 800af90:	d075      	beq.n	800b07e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800af92:	2900      	cmp	r1, #0
 800af94:	d04f      	beq.n	800b036 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af96:	ee07 2a90 	vmov	s15, r2
 800af9a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800af9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800afa8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800afac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb0:	ee06 3a90 	vmov	s13, r3
 800afb4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800afb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800afbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800afc0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800afc4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800afc8:	4a34      	ldr	r2, [pc, #208]	; (800b09c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800afca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800afce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800afd0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800afd4:	ee07 3a10 	vmov	s14, r3
 800afd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800afdc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800afde:	ee37 7a06 	vadd.f32	s14, s14, s12
 800afe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afea:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800afee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800aff0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800aff4:	ee07 3a10 	vmov	s14, r3
 800aff8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800affc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b008:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b00c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b00e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b01a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b022:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b026:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b02a:	4770      	bx	lr
 800b02c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b02e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b032:	6082      	str	r2, [r0, #8]
}
 800b034:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b036:	6819      	ldr	r1, [r3, #0]
 800b038:	0689      	lsls	r1, r1, #26
 800b03a:	d5ac      	bpl.n	800af96 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b03c:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b03e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b042:	4919      	ldr	r1, [pc, #100]	; (800b0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b044:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b04a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b052:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b056:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b05a:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b05c:	ee06 3a90 	vmov	s13, r3
 800b060:	ee05 1a90 	vmov	s11, r1
 800b064:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b068:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b06c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b070:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b074:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b078:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b07c:	e7a4      	b.n	800afc8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b07e:	ee07 2a90 	vmov	s15, r2
 800b082:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b0ac <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800b086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b08a:	e78a      	b.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b08c:	ee07 2a90 	vmov	s15, r2
 800b090:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800b094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b098:	e783      	b.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800b09a:	bf00      	nop
 800b09c:	58024400 	.word	0x58024400
 800b0a0:	4c742400 	.word	0x4c742400
 800b0a4:	39000000 	.word	0x39000000
 800b0a8:	03d09000 	.word	0x03d09000
 800b0ac:	4bbebc20 	.word	0x4bbebc20
 800b0b0:	4a742400 	.word	0x4a742400

0800b0b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b0b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800b0b8:	b500      	push	{lr}
 800b0ba:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b0bc:	d074      	beq.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b0be:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b0c2:	d02c      	beq.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b0c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b0c8:	f000 80cd 	beq.w	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b0cc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b0d0:	d07e      	beq.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b0d2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b0d6:	d058      	beq.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b0d8:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800b0dc:	f000 8102 	beq.w	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b0e0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b0e4:	f000 810d 	beq.w	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b0e8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b0ec:	f000 80e1 	beq.w	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0f0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b0f4:	d138      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b0f6:	4b99      	ldr	r3, [pc, #612]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800b0fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b102:	f000 808d 	beq.w	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800b106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b10a:	f000 813d 	beq.w	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800b10e:	bb5b      	cbnz	r3, 800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b110:	4b92      	ldr	r3, [pc, #584]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b112:	6818      	ldr	r0, [r3, #0]
 800b114:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b118:	d043      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 800b11a:	4891      	ldr	r0, [pc, #580]	; (800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800b11c:	e041      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b11e:	4a8f      	ldr	r2, [pc, #572]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b120:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b122:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800b126:	2b80      	cmp	r3, #128	; 0x80
 800b128:	f000 8098 	beq.w	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b12c:	d920      	bls.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800b12e:	2bc0      	cmp	r3, #192	; 0xc0
 800b130:	d036      	beq.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b136:	d117      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b138:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b13a:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b13c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b140:	0749      	lsls	r1, r1, #29
 800b142:	d502      	bpl.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80ae 	beq.w	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b14a:	4a84      	ldr	r2, [pc, #528]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b14c:	6812      	ldr	r2, [r2, #0]
 800b14e:	05d0      	lsls	r0, r2, #23
 800b150:	d503      	bpl.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800b152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b156:	f000 80ff 	beq.w	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b15a:	4a80      	ldr	r2, [pc, #512]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b15c:	6812      	ldr	r2, [r2, #0]
 800b15e:	0391      	lsls	r1, r2, #14
 800b160:	d502      	bpl.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b166:	d0d8      	beq.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 800b168:	2000      	movs	r0, #0
}
 800b16a:	b005      	add	sp, #20
 800b16c:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 800b170:	2b00      	cmp	r3, #0
 800b172:	d04c      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800b174:	2b40      	cmp	r3, #64	; 0x40
 800b176:	d1f7      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b178:	6810      	ldr	r0, [r2, #0]
 800b17a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b17e:	d010      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b180:	a801      	add	r0, sp, #4
 800b182:	f7ff fd93 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b186:	9801      	ldr	r0, [sp, #4]
 800b188:	e00b      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b18a:	4a74      	ldr	r2, [pc, #464]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b18c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b18e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 800b192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b196:	d061      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b198:	d937      	bls.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 800b19a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b19e:	d179      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 800b1a0:	4870      	ldr	r0, [pc, #448]	; (800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 800b1a2:	b005      	add	sp, #20
 800b1a4:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b1a8:	4b6c      	ldr	r3, [pc, #432]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ac:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d8d9      	bhi.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b1b4:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800b1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ba:	bf00      	nop
 800b1bc:	0800b221 	.word	0x0800b221
 800b1c0:	0800b245 	.word	0x0800b245
 800b1c4:	0800b231 	.word	0x0800b231
 800b1c8:	0800b1a1 	.word	0x0800b1a1
 800b1cc:	0800b22d 	.word	0x0800b22d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b1d0:	4a62      	ldr	r2, [pc, #392]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b1d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b1d4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800b1d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1dc:	d03e      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b1de:	d937      	bls.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 800b1e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b1e4:	d0dc      	beq.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b1e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b1ea:	d1bd      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b1ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1ee:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b1f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1f4:	0752      	lsls	r2, r2, #29
 800b1f6:	d5a8      	bpl.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1a6      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1fc:	4b57      	ldr	r3, [pc, #348]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b1fe:	485a      	ldr	r0, [pc, #360]	; (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b206:	40d8      	lsrs	r0, r3
 800b208:	e7cb      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d146      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b20e:	6810      	ldr	r0, [r2, #0]
 800b210:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b214:	d0c5      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b216:	a801      	add	r0, sp, #4
 800b218:	f7ff fea0 	bl	800af5c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800b21c:	9802      	ldr	r0, [sp, #8]
 800b21e:	e7c0      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b220:	4b4e      	ldr	r3, [pc, #312]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b222:	6818      	ldr	r0, [r3, #0]
 800b224:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b228:	d0bb      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b22a:	e7f4      	b.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b22c:	4a4b      	ldr	r2, [pc, #300]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b22e:	e783      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b230:	4b4a      	ldr	r3, [pc, #296]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b238:	d0b3      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b23a:	a801      	add	r0, sp, #4
 800b23c:	f7ff fde2 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b240:	9801      	ldr	r0, [sp, #4]
 800b242:	e7ae      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b244:	4b45      	ldr	r3, [pc, #276]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b246:	6818      	ldr	r0, [r3, #0]
 800b248:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b24c:	d0a9      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b24e:	e797      	b.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 800b250:	2b00      	cmp	r3, #0
 800b252:	d0dc      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800b254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b258:	d08e      	beq.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800b25a:	e785      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b25c:	6810      	ldr	r0, [r2, #0]
 800b25e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b262:	d09e      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b264:	e7e9      	b.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b266:	4a3d      	ldr	r2, [pc, #244]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b268:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b26a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800b26e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b272:	d0f3      	beq.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800b274:	d806      	bhi.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0c9      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800b27a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b27e:	f43f af7b 	beq.w	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800b282:	e771      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b284:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b288:	d08a      	beq.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b28a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b28e:	f43f af53 	beq.w	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800b292:	e769      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 800b294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b298:	d0a8      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b29a:	e765      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a0:	f43f af6a 	beq.w	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800b2a4:	e760      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2a6:	6813      	ldr	r3, [r2, #0]
 800b2a8:	482f      	ldr	r0, [pc, #188]	; (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b2aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b2ae:	40d8      	lsrs	r0, r3
 800b2b0:	e777      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b2b2:	4a2a      	ldr	r2, [pc, #168]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b2b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b2b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800b2ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2be:	d06e      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800b2c0:	d83c      	bhi.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800b2c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2c6:	d05f      	beq.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800b2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2cc:	d127      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ce:	4b23      	ldr	r3, [pc, #140]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b2d6:	f43f af64 	beq.w	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2da:	a801      	add	r0, sp, #4
 800b2dc:	f7ff fd92 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2e0:	9802      	ldr	r0, [sp, #8]
 800b2e2:	e75e      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b2e4:	4a1d      	ldr	r2, [pc, #116]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b2e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b2e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800b2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2f0:	d040      	beq.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b2f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2f6:	f43f af79 	beq.w	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f47f af34 	bne.w	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800b300:	e73a      	b.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b302:	4b16      	ldr	r3, [pc, #88]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800b306:	03d2      	lsls	r2, r2, #15
 800b308:	d58b      	bpl.n	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b30a:	6818      	ldr	r0, [r3, #0]
 800b30c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b310:	f43f af47 	beq.w	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b314:	a801      	add	r0, sp, #4
 800b316:	f7ff fcc9 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b31a:	9803      	ldr	r0, [sp, #12]
 800b31c:	e741      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f47f af22 	bne.w	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b324:	f7fe fda4 	bl	8009e70 <HAL_RCC_GetHCLKFreq>
 800b328:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b32a:	4a10      	ldr	r2, [pc, #64]	; (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b332:	5cd3      	ldrb	r3, [r2, r3]
 800b334:	f003 031f 	and.w	r3, r3, #31
 800b338:	40d8      	lsrs	r0, r3
          break;
 800b33a:	e732      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800b33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b340:	d004      	beq.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800b342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b346:	f43f aee3 	beq.w	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800b34a:	e70d      	b.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b34c:	4b03      	ldr	r3, [pc, #12]	; (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b354:	f43f af25 	beq.w	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 800b358:	4805      	ldr	r0, [pc, #20]	; (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b35a:	e722      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b35c:	58024400 	.word	0x58024400
 800b360:	017d7840 	.word	0x017d7840
 800b364:	00bb8000 	.word	0x00bb8000
 800b368:	03d09000 	.word	0x03d09000
 800b36c:	0801a0dc 	.word	0x0801a0dc
 800b370:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b374:	6810      	ldr	r0, [r2, #0]
 800b376:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b37a:	f43f af12 	beq.w	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37e:	a801      	add	r0, sp, #4
 800b380:	f7ff fd40 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b384:	9803      	ldr	r0, [sp, #12]
 800b386:	e70c      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b388:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800b38a:	6818      	ldr	r0, [r3, #0]
 800b38c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b390:	f43f af07 	beq.w	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b394:	a801      	add	r0, sp, #4
 800b396:	f7ff fc89 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b39a:	9802      	ldr	r0, [sp, #8]
 800b39c:	e701      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b39e:	6810      	ldr	r0, [r2, #0]
 800b3a0:	f010 0004 	ands.w	r0, r0, #4
 800b3a4:	f43f aefd 	beq.w	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800b3a8:	e728      	b.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800b3aa:	bf00      	nop
 800b3ac:	58024400 	.word	0x58024400

0800b3b0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f000 80a5 	beq.w	800b500 <HAL_TIM_Base_Init+0x150>
{
 800b3b6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b3bc:	4604      	mov	r4, r0
 800b3be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d076      	beq.n	800b4b4 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3c6:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c8:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3ca:	494e      	ldr	r1, [pc, #312]	; (800b504 <HAL_TIM_Base_Init+0x154>)
 800b3cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3d4:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800b3d8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3da:	fab1 f181 	clz	r1, r1
 800b3de:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800b3e2:	d027      	beq.n	800b434 <HAL_TIM_Base_Init+0x84>
 800b3e4:	bb31      	cbnz	r1, 800b434 <HAL_TIM_Base_Init+0x84>
 800b3e6:	4848      	ldr	r0, [pc, #288]	; (800b508 <HAL_TIM_Base_Init+0x158>)
 800b3e8:	4d48      	ldr	r5, [pc, #288]	; (800b50c <HAL_TIM_Base_Init+0x15c>)
 800b3ea:	4282      	cmp	r2, r0
 800b3ec:	d067      	beq.n	800b4be <HAL_TIM_Base_Init+0x10e>
 800b3ee:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b3f2:	4282      	cmp	r2, r0
 800b3f4:	d063      	beq.n	800b4be <HAL_TIM_Base_Init+0x10e>
 800b3f6:	1b55      	subs	r5, r2, r5
 800b3f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b3fc:	fab5 f585 	clz	r5, r5
 800b400:	4282      	cmp	r2, r0
 800b402:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800b406:	d063      	beq.n	800b4d0 <HAL_TIM_Base_Init+0x120>
 800b408:	2d00      	cmp	r5, #0
 800b40a:	d161      	bne.n	800b4d0 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b40c:	4840      	ldr	r0, [pc, #256]	; (800b510 <HAL_TIM_Base_Init+0x160>)
 800b40e:	4941      	ldr	r1, [pc, #260]	; (800b514 <HAL_TIM_Base_Init+0x164>)
 800b410:	428a      	cmp	r2, r1
 800b412:	bf18      	it	ne
 800b414:	4282      	cmpne	r2, r0
 800b416:	d065      	beq.n	800b4e4 <HAL_TIM_Base_Init+0x134>
 800b418:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b41c:	428a      	cmp	r2, r1
 800b41e:	d061      	beq.n	800b4e4 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b420:	69a0      	ldr	r0, [r4, #24]
 800b422:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b426:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b428:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800b42a:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b42c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b42e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b430:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b432:	e023      	b.n	800b47c <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b434:	4d35      	ldr	r5, [pc, #212]	; (800b50c <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b43a:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b43c:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800b43e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b440:	fab5 f585 	clz	r5, r5
 800b444:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b446:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b44c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b44e:	69a0      	ldr	r0, [r4, #24]
 800b450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b454:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800b456:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b458:	68e3      	ldr	r3, [r4, #12]
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b460:	b951      	cbnz	r1, 800b478 <HAL_TIM_Base_Init+0xc8>
 800b462:	b94d      	cbnz	r5, 800b478 <HAL_TIM_Base_Init+0xc8>
 800b464:	492a      	ldr	r1, [pc, #168]	; (800b510 <HAL_TIM_Base_Init+0x160>)
 800b466:	4b2b      	ldr	r3, [pc, #172]	; (800b514 <HAL_TIM_Base_Init+0x164>)
 800b468:	429a      	cmp	r2, r3
 800b46a:	bf18      	it	ne
 800b46c:	428a      	cmpne	r2, r1
 800b46e:	d003      	beq.n	800b478 <HAL_TIM_Base_Init+0xc8>
 800b470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b474:	429a      	cmp	r2, r3
 800b476:	d101      	bne.n	800b47c <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b478:	6963      	ldr	r3, [r4, #20]
 800b47a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b47c:	2301      	movs	r3, #1
  return HAL_OK;
 800b47e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800b480:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b482:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b486:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b48a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b48e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b492:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b49a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b49e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b4a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b4aa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b4ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800b4b2:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800b4b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b4b8:	f7f9 feb4 	bl	8005224 <HAL_TIM_Base_MspInit>
 800b4bc:	e783      	b.n	800b3c6 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4be:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b4c4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4c6:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800b4ca:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4cc:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ce:	e7ba      	b.n	800b446 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800b4d0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b4d6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4d8:	480f      	ldr	r0, [pc, #60]	; (800b518 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4da:	4282      	cmp	r2, r0
 800b4dc:	d0b3      	beq.n	800b446 <HAL_TIM_Base_Init+0x96>
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	d1b1      	bne.n	800b446 <HAL_TIM_Base_Init+0x96>
 800b4e2:	e793      	b.n	800b40c <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4e4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4ea:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ec:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4ee:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4f4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800b4f6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800b4f8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4fa:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b4fc:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4fe:	e7b1      	b.n	800b464 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800b500:	2001      	movs	r0, #1
}
 800b502:	4770      	bx	lr
 800b504:	40010000 	.word	0x40010000
 800b508:	40000400 	.word	0x40000400
 800b50c:	40010400 	.word	0x40010400
 800b510:	40014000 	.word	0x40014000
 800b514:	40014400 	.word	0x40014400
 800b518:	40000c00 	.word	0x40000c00

0800b51c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b51c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b520:	2b01      	cmp	r3, #1
 800b522:	d13d      	bne.n	800b5a0 <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b524:	6802      	ldr	r2, [r0, #0]
 800b526:	4b23      	ldr	r3, [pc, #140]	; (800b5b4 <HAL_TIM_Base_Start+0x98>)
 800b528:	4923      	ldr	r1, [pc, #140]	; (800b5b8 <HAL_TIM_Base_Start+0x9c>)
 800b52a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b52e:	bf18      	it	ne
 800b530:	429a      	cmpne	r2, r3
{
 800b532:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b534:	bf0c      	ite	eq
 800b536:	2301      	moveq	r3, #1
 800b538:	2300      	movne	r3, #0
 800b53a:	4d20      	ldr	r5, [pc, #128]	; (800b5bc <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b53c:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b53e:	42aa      	cmp	r2, r5
 800b540:	bf08      	it	eq
 800b542:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b546:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b54a:	4c1d      	ldr	r4, [pc, #116]	; (800b5c0 <HAL_TIM_Base_Start+0xa4>)
 800b54c:	428a      	cmp	r2, r1
 800b54e:	bf08      	it	eq
 800b550:	f043 0301 	orreq.w	r3, r3, #1
 800b554:	481b      	ldr	r0, [pc, #108]	; (800b5c4 <HAL_TIM_Base_Start+0xa8>)
 800b556:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800b55a:	42a2      	cmp	r2, r4
 800b55c:	bf08      	it	eq
 800b55e:	f043 0301 	orreq.w	r3, r3, #1
 800b562:	4282      	cmp	r2, r0
 800b564:	bf08      	it	eq
 800b566:	f043 0301 	orreq.w	r3, r3, #1
 800b56a:	428a      	cmp	r2, r1
 800b56c:	bf08      	it	eq
 800b56e:	f043 0301 	orreq.w	r3, r3, #1
 800b572:	b933      	cbnz	r3, 800b582 <HAL_TIM_Base_Start+0x66>
 800b574:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800b578:	1a10      	subs	r0, r2, r0
 800b57a:	fab0 f080 	clz	r0, r0
 800b57e:	0940      	lsrs	r0, r0, #5
 800b580:	b198      	cbz	r0, 800b5aa <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b582:	6891      	ldr	r1, [r2, #8]
 800b584:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <HAL_TIM_Base_Start+0xac>)
 800b586:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b588:	2b06      	cmp	r3, #6
 800b58a:	d00b      	beq.n	800b5a4 <HAL_TIM_Base_Start+0x88>
 800b58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b590:	d008      	beq.n	800b5a4 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800b592:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800b594:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	6013      	str	r3, [r2, #0]
}
 800b59c:	bc30      	pop	{r4, r5}
 800b59e:	4770      	bx	lr
    return HAL_ERROR;
 800b5a0:	2001      	movs	r0, #1
}
 800b5a2:	4770      	bx	lr
  return HAL_OK;
 800b5a4:	2000      	movs	r0, #0
}
 800b5a6:	bc30      	pop	{r4, r5}
 800b5a8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	f043 0301 	orr.w	r3, r3, #1
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	e7f3      	b.n	800b59c <HAL_TIM_Base_Start+0x80>
 800b5b4:	40010000 	.word	0x40010000
 800b5b8:	40000800 	.word	0x40000800
 800b5bc:	40000400 	.word	0x40000400
 800b5c0:	40000c00 	.word	0x40000c00
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	00010007 	.word	0x00010007

0800b5cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b5cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d141      	bne.n	800b658 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5d4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b5d6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5d8:	4b24      	ldr	r3, [pc, #144]	; (800b66c <HAL_TIM_Base_Start_IT+0xa0>)
 800b5da:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b5de:	bf18      	it	ne
 800b5e0:	429a      	cmpne	r2, r3
{
 800b5e2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	4d21      	ldr	r5, [pc, #132]	; (800b670 <HAL_TIM_Base_Start_IT+0xa4>)
 800b5ec:	4c21      	ldr	r4, [pc, #132]	; (800b674 <HAL_TIM_Base_Start_IT+0xa8>)
 800b5ee:	42aa      	cmp	r2, r5
 800b5f0:	bf08      	it	eq
 800b5f2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5fa:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5fc:	42a2      	cmp	r2, r4
 800b5fe:	bf08      	it	eq
 800b600:	f043 0301 	orreq.w	r3, r3, #1
 800b604:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b608:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b60c:	481a      	ldr	r0, [pc, #104]	; (800b678 <HAL_TIM_Base_Start_IT+0xac>)
 800b60e:	42a2      	cmp	r2, r4
 800b610:	bf08      	it	eq
 800b612:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b616:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b618:	4282      	cmp	r2, r0
 800b61a:	bf08      	it	eq
 800b61c:	f043 0301 	orreq.w	r3, r3, #1
 800b620:	4916      	ldr	r1, [pc, #88]	; (800b67c <HAL_TIM_Base_Start_IT+0xb0>)
 800b622:	428a      	cmp	r2, r1
 800b624:	bf08      	it	eq
 800b626:	f043 0301 	orreq.w	r3, r3, #1
 800b62a:	b933      	cbnz	r3, 800b63a <HAL_TIM_Base_Start_IT+0x6e>
 800b62c:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800b630:	1a10      	subs	r0, r2, r0
 800b632:	fab0 f080 	clz	r0, r0
 800b636:	0940      	lsrs	r0, r0, #5
 800b638:	b198      	cbz	r0, 800b662 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b63a:	6891      	ldr	r1, [r2, #8]
 800b63c:	4b10      	ldr	r3, [pc, #64]	; (800b680 <HAL_TIM_Base_Start_IT+0xb4>)
 800b63e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b640:	2b06      	cmp	r3, #6
 800b642:	d00b      	beq.n	800b65c <HAL_TIM_Base_Start_IT+0x90>
 800b644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b648:	d008      	beq.n	800b65c <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800b64a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800b64c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800b64e:	f043 0301 	orr.w	r3, r3, #1
 800b652:	6013      	str	r3, [r2, #0]
}
 800b654:	bc30      	pop	{r4, r5}
 800b656:	4770      	bx	lr
    return HAL_ERROR;
 800b658:	2001      	movs	r0, #1
}
 800b65a:	4770      	bx	lr
  return HAL_OK;
 800b65c:	2000      	movs	r0, #0
}
 800b65e:	bc30      	pop	{r4, r5}
 800b660:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800b662:	6813      	ldr	r3, [r2, #0]
 800b664:	f043 0301 	orr.w	r3, r3, #1
 800b668:	6013      	str	r3, [r2, #0]
 800b66a:	e7f3      	b.n	800b654 <HAL_TIM_Base_Start_IT+0x88>
 800b66c:	40010000 	.word	0x40010000
 800b670:	40000400 	.word	0x40000400
 800b674:	40000800 	.word	0x40000800
 800b678:	40010400 	.word	0x40010400
 800b67c:	40001800 	.word	0x40001800
 800b680:	00010007 	.word	0x00010007

0800b684 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800b684:	2800      	cmp	r0, #0
 800b686:	f000 80cc 	beq.w	800b822 <HAL_TIM_Encoder_Init+0x19e>
{
 800b68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800b68c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b690:	4604      	mov	r4, r0
 800b692:	460d      	mov	r5, r1
 800b694:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 809b 	beq.w	800b7d4 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b69e:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a0:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6a2:	4a61      	ldr	r2, [pc, #388]	; (800b828 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6ac:	6899      	ldr	r1, [r3, #8]
 800b6ae:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6b2:	495e      	ldr	r1, [pc, #376]	; (800b82c <HAL_TIM_Encoder_Init+0x1a8>)
 800b6b4:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6b8:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800b6ba:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6bc:	fab1 f181 	clz	r1, r1
 800b6c0:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800b6c4:	d02b      	beq.n	800b71e <HAL_TIM_Encoder_Init+0x9a>
 800b6c6:	bb51      	cbnz	r1, 800b71e <HAL_TIM_Encoder_Init+0x9a>
 800b6c8:	4859      	ldr	r0, [pc, #356]	; (800b830 <HAL_TIM_Encoder_Init+0x1ac>)
 800b6ca:	4283      	cmp	r3, r0
 800b6cc:	f000 8087 	beq.w	800b7de <HAL_TIM_Encoder_Init+0x15a>
 800b6d0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b6d4:	4283      	cmp	r3, r0
 800b6d6:	f000 8082 	beq.w	800b7de <HAL_TIM_Encoder_Init+0x15a>
 800b6da:	4e56      	ldr	r6, [pc, #344]	; (800b834 <HAL_TIM_Encoder_Init+0x1b0>)
 800b6dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b6e0:	1b9e      	subs	r6, r3, r6
 800b6e2:	4283      	cmp	r3, r0
 800b6e4:	fab6 f686 	clz	r6, r6
 800b6e8:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800b6ec:	f000 8081 	beq.w	800b7f2 <HAL_TIM_Encoder_Init+0x16e>
 800b6f0:	2e00      	cmp	r6, #0
 800b6f2:	d17e      	bne.n	800b7f2 <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6f4:	4850      	ldr	r0, [pc, #320]	; (800b838 <HAL_TIM_Encoder_Init+0x1b4>)
 800b6f6:	4951      	ldr	r1, [pc, #324]	; (800b83c <HAL_TIM_Encoder_Init+0x1b8>)
 800b6f8:	428b      	cmp	r3, r1
 800b6fa:	bf18      	it	ne
 800b6fc:	4283      	cmpne	r3, r0
 800b6fe:	f000 8082 	beq.w	800b806 <HAL_TIM_Encoder_Init+0x182>
 800b702:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b706:	428b      	cmp	r3, r1
 800b708:	d07d      	beq.n	800b806 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b70a:	69a1      	ldr	r1, [r4, #24]
 800b70c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b710:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b712:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800b714:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800b716:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b718:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b71a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b71c:	e023      	b.n	800b766 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b71e:	4e45      	ldr	r6, [pc, #276]	; (800b834 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b720:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b724:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b726:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800b728:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b72a:	fab6 f686 	clz	r6, r6
 800b72e:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b730:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b732:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b736:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b738:	69a0      	ldr	r0, [r4, #24]
 800b73a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b73e:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800b740:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b742:	68e2      	ldr	r2, [r4, #12]
 800b744:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b746:	6862      	ldr	r2, [r4, #4]
 800b748:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b74a:	b951      	cbnz	r1, 800b762 <HAL_TIM_Encoder_Init+0xde>
 800b74c:	b94e      	cbnz	r6, 800b762 <HAL_TIM_Encoder_Init+0xde>
 800b74e:	493a      	ldr	r1, [pc, #232]	; (800b838 <HAL_TIM_Encoder_Init+0x1b4>)
 800b750:	4a3a      	ldr	r2, [pc, #232]	; (800b83c <HAL_TIM_Encoder_Init+0x1b8>)
 800b752:	4293      	cmp	r3, r2
 800b754:	bf18      	it	ne
 800b756:	428b      	cmpne	r3, r1
 800b758:	d003      	beq.n	800b762 <HAL_TIM_Encoder_Init+0xde>
 800b75a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b75e:	4293      	cmp	r3, r2
 800b760:	d101      	bne.n	800b766 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800b762:	6962      	ldr	r2, [r4, #20]
 800b764:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b766:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800b768:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b76a:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b76c:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b770:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800b772:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b774:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b778:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800b77a:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b77c:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800b780:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b782:	492f      	ldr	r1, [pc, #188]	; (800b840 <HAL_TIM_Encoder_Init+0x1bc>)
 800b784:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b786:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b788:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b78c:	68e9      	ldr	r1, [r5, #12]
 800b78e:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800b790:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b792:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b796:	6a29      	ldr	r1, [r5, #32]
 800b798:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b79c:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800b79e:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b7a0:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800b7a4:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b7a6:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800b7aa:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b7ac:	4825      	ldr	r0, [pc, #148]	; (800b844 <HAL_TIM_Encoder_Init+0x1c0>)
 800b7ae:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b7b2:	4302      	orrs	r2, r0
  return HAL_OK;
 800b7b4:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800b7b6:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800b7b8:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ba:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7be:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7c2:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7c6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7ca:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b7ce:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800b7d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800b7d8:	f7f9 fd82 	bl	80052e0 <HAL_TIM_Encoder_MspInit>
 800b7dc:	e75f      	b.n	800b69e <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7de:	4e15      	ldr	r6, [pc, #84]	; (800b834 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b7e4:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7e6:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800b7e8:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7ea:	fab6 f686 	clz	r6, r6
 800b7ee:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7f0:	e79e      	b.n	800b730 <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800b7f2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b7f8:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7fa:	4813      	ldr	r0, [pc, #76]	; (800b848 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7fc:	4283      	cmp	r3, r0
 800b7fe:	d097      	beq.n	800b730 <HAL_TIM_Encoder_Init+0xac>
 800b800:	2e00      	cmp	r6, #0
 800b802:	d195      	bne.n	800b730 <HAL_TIM_Encoder_Init+0xac>
 800b804:	e776      	b.n	800b6f4 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b806:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b808:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b80c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b80e:	69a1      	ldr	r1, [r4, #24]
 800b810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b814:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b816:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800b818:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800b81a:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b81c:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b820:	e795      	b.n	800b74e <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800b822:	2001      	movs	r0, #1
}
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	fffebff8 	.word	0xfffebff8
 800b82c:	40010000 	.word	0x40010000
 800b830:	40000400 	.word	0x40000400
 800b834:	40010400 	.word	0x40010400
 800b838:	40014000 	.word	0x40014000
 800b83c:	40014400 	.word	0x40014400
 800b840:	fffffcfc 	.word	0xfffffcfc
 800b844:	ffff0303 	.word	0xffff0303
 800b848:	40000c00 	.word	0x40000c00

0800b84c <HAL_TIM_Encoder_Start>:
{
 800b84c:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b84e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b852:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b856:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b85a:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b85c:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b860:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800b862:	b9c1      	cbnz	r1, 800b896 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b864:	2b01      	cmp	r3, #1
 800b866:	d123      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
 800b868:	2a01      	cmp	r2, #1
 800b86a:	d121      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b86c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b86e:	2302      	movs	r3, #2
 800b870:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b874:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b878:	6a13      	ldr	r3, [r2, #32]
 800b87a:	f023 0301 	bic.w	r3, r3, #1
 800b87e:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b880:	6a13      	ldr	r3, [r2, #32]
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800b888:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800b88a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800b88c:	f043 0301 	orr.w	r3, r3, #1
 800b890:	6013      	str	r3, [r2, #0]
}
 800b892:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800b896:	2904      	cmp	r1, #4
 800b898:	fa5f fc8c 	uxtb.w	ip, ip
 800b89c:	fa5f fe8e 	uxtb.w	lr, lr
 800b8a0:	d027      	beq.n	800b8f2 <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d104      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
 800b8a6:	f1bc 0f01 	cmp.w	ip, #1
 800b8aa:	d101      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8ac:	2a01      	cmp	r2, #1
 800b8ae:	d002      	beq.n	800b8b6 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800b8b0:	2001      	movs	r0, #1
}
 800b8b2:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8b6:	f1be 0f01 	cmp.w	lr, #1
 800b8ba:	d1f9      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8bc:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8be:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8c4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8c8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8cc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800b8d0:	6a13      	ldr	r3, [r2, #32]
 800b8d2:	f023 0301 	bic.w	r3, r3, #1
 800b8d6:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8d8:	6a13      	ldr	r3, [r2, #32]
 800b8da:	f043 0301 	orr.w	r3, r3, #1
 800b8de:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800b8e0:	6a13      	ldr	r3, [r2, #32]
 800b8e2:	f023 0310 	bic.w	r3, r3, #16
 800b8e6:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8e8:	6a13      	ldr	r3, [r2, #32]
 800b8ea:	f043 0310 	orr.w	r3, r3, #16
 800b8ee:	6213      	str	r3, [r2, #32]
}
 800b8f0:	e7ca      	b.n	800b888 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8f2:	f1bc 0f01 	cmp.w	ip, #1
 800b8f6:	d1db      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
 800b8f8:	f1be 0f01 	cmp.w	lr, #1
 800b8fc:	d1d8      	bne.n	800b8b0 <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8fe:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b900:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b902:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b906:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800b90a:	e7e9      	b.n	800b8e0 <HAL_TIM_Encoder_Start+0x94>

0800b90c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b90c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b910:	2b01      	cmp	r3, #1
 800b912:	f000 8081 	beq.w	800ba18 <HAL_TIM_ConfigClockSource+0x10c>
 800b916:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b918:	2302      	movs	r3, #2
{
 800b91a:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800b91c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800b91e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b920:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800b924:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b928:	4b5a      	ldr	r3, [pc, #360]	; (800ba94 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800b92a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b92c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800b92e:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800b930:	680b      	ldr	r3, [r1, #0]
 800b932:	2b70      	cmp	r3, #112	; 0x70
 800b934:	f000 809c 	beq.w	800ba70 <HAL_TIM_ConfigClockSource+0x164>
 800b938:	d825      	bhi.n	800b986 <HAL_TIM_ConfigClockSource+0x7a>
 800b93a:	2b50      	cmp	r3, #80	; 0x50
 800b93c:	d06e      	beq.n	800ba1c <HAL_TIM_ConfigClockSource+0x110>
 800b93e:	d939      	bls.n	800b9b4 <HAL_TIM_ConfigClockSource+0xa8>
 800b940:	2b60      	cmp	r3, #96	; 0x60
 800b942:	d118      	bne.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b944:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b946:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b948:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b94c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b94e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b950:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800b952:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b958:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800b95c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b95e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800b962:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b964:	4b4c      	ldr	r3, [pc, #304]	; (800ba98 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800b966:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800b96a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800b96c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b96e:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b970:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800b974:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800b976:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800b978:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800b97a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b97e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800b982:	bc70      	pop	{r4, r5, r6}
 800b984:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800b986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b98a:	d060      	beq.n	800ba4e <HAL_TIM_ConfigClockSource+0x142>
 800b98c:	d933      	bls.n	800b9f6 <HAL_TIM_ConfigClockSource+0xea>
 800b98e:	4943      	ldr	r1, [pc, #268]	; (800ba9c <HAL_TIM_ConfigClockSource+0x190>)
 800b990:	428b      	cmp	r3, r1
 800b992:	d006      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x96>
 800b994:	d929      	bls.n	800b9ea <HAL_TIM_ConfigClockSource+0xde>
 800b996:	4942      	ldr	r1, [pc, #264]	; (800baa0 <HAL_TIM_ConfigClockSource+0x194>)
 800b998:	428b      	cmp	r3, r1
 800b99a:	d002      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x96>
 800b99c:	3110      	adds	r1, #16
 800b99e:	428b      	cmp	r3, r1
 800b9a0:	d1e9      	bne.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800b9a2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9a4:	493c      	ldr	r1, [pc, #240]	; (800ba98 <HAL_TIM_ConfigClockSource+0x18c>)
 800b9a6:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800b9a8:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9aa:	430b      	orrs	r3, r1
 800b9ac:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800b9b0:	60a3      	str	r3, [r4, #8]
}
 800b9b2:	e7e0      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800b9b4:	2b40      	cmp	r3, #64	; 0x40
 800b9b6:	d123      	bne.n	800ba00 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800b9b8:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ba:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9bc:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9be:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9c2:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9c6:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800b9c8:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9ca:	4b33      	ldr	r3, [pc, #204]	; (800ba98 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9cc:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ce:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9d0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9d4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b9d8:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800b9da:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800b9dc:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800b9de:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9e0:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9e2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800b9e6:	60a3      	str	r3, [r4, #8]
}
 800b9e8:	e7c5      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800b9ea:	f023 0110 	bic.w	r1, r3, #16
 800b9ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b9f2:	d1c0      	bne.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
 800b9f4:	e7d5      	b.n	800b9a2 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800b9f6:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800b9fa:	bf18      	it	ne
 800b9fc:	2001      	movne	r0, #1
 800b9fe:	e7ba      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800ba00:	d8b9      	bhi.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
 800ba02:	2b20      	cmp	r3, #32
 800ba04:	d0cd      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x96>
 800ba06:	d903      	bls.n	800ba10 <HAL_TIM_ConfigClockSource+0x104>
 800ba08:	2b30      	cmp	r3, #48	; 0x30
 800ba0a:	d0ca      	beq.n	800b9a2 <HAL_TIM_ConfigClockSource+0x96>
 800ba0c:	2001      	movs	r0, #1
 800ba0e:	e7b2      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
 800ba10:	f033 0110 	bics.w	r1, r3, #16
 800ba14:	d1af      	bne.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
 800ba16:	e7c4      	b.n	800b9a2 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800ba18:	2002      	movs	r0, #2
}
 800ba1a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800ba1c:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba1e:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba20:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba22:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba26:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba2a:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800ba2c:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba2e:	4b1a      	ldr	r3, [pc, #104]	; (800ba98 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba30:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba32:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba34:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba38:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ba3c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800ba3e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800ba40:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800ba42:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba44:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba46:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800ba4a:	60a3      	str	r3, [r4, #8]
}
 800ba4c:	e793      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba4e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ba52:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba54:	432b      	orrs	r3, r5
 800ba56:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba58:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800ba5c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800ba62:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800ba64:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba6c:	60a3      	str	r3, [r4, #8]
      break;
 800ba6e:	e782      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba70:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ba74:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba76:	432b      	orrs	r3, r5
 800ba78:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba7a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800ba7e:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba80:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800ba84:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800ba86:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ba88:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ba8e:	60a3      	str	r3, [r4, #8]
      break;
 800ba90:	e771      	b.n	800b976 <HAL_TIM_ConfigClockSource+0x6a>
 800ba92:	bf00      	nop
 800ba94:	ffce0088 	.word	0xffce0088
 800ba98:	ffcfff8f 	.word	0xffcfff8f
 800ba9c:	00100020 	.word	0x00100020
 800baa0:	00100030 	.word	0x00100030

0800baa4 <HAL_TIM_OC_DelayElapsedCallback>:
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop

0800baa8 <HAL_TIM_IC_CaptureCallback>:
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop

0800baac <HAL_TIM_PWM_PulseFinishedCallback>:
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop

0800bab0 <HAL_TIM_TriggerCallback>:
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop

0800bab4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bab4:	6803      	ldr	r3, [r0, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	0791      	lsls	r1, r2, #30
{
 800baba:	b510      	push	{r4, lr}
 800babc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800babe:	d502      	bpl.n	800bac6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	0792      	lsls	r2, r2, #30
 800bac4:	d468      	bmi.n	800bb98 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bac6:	691a      	ldr	r2, [r3, #16]
 800bac8:	0752      	lsls	r2, r2, #29
 800baca:	d502      	bpl.n	800bad2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	0750      	lsls	r0, r2, #29
 800bad0:	d44f      	bmi.n	800bb72 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bad2:	691a      	ldr	r2, [r3, #16]
 800bad4:	0711      	lsls	r1, r2, #28
 800bad6:	d502      	bpl.n	800bade <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	0712      	lsls	r2, r2, #28
 800badc:	d437      	bmi.n	800bb4e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bade:	691a      	ldr	r2, [r3, #16]
 800bae0:	06d0      	lsls	r0, r2, #27
 800bae2:	d502      	bpl.n	800baea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bae4:	68da      	ldr	r2, [r3, #12]
 800bae6:	06d1      	lsls	r1, r2, #27
 800bae8:	d41e      	bmi.n	800bb28 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800baea:	691a      	ldr	r2, [r3, #16]
 800baec:	07d2      	lsls	r2, r2, #31
 800baee:	d502      	bpl.n	800baf6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800baf0:	68da      	ldr	r2, [r3, #12]
 800baf2:	07d0      	lsls	r0, r2, #31
 800baf4:	d469      	bmi.n	800bbca <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800baf6:	691a      	ldr	r2, [r3, #16]
 800baf8:	0611      	lsls	r1, r2, #24
 800bafa:	d502      	bpl.n	800bb02 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	0612      	lsls	r2, r2, #24
 800bb00:	d46b      	bmi.n	800bbda <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb02:	691a      	ldr	r2, [r3, #16]
 800bb04:	05d0      	lsls	r0, r2, #23
 800bb06:	d502      	bpl.n	800bb0e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb08:	68da      	ldr	r2, [r3, #12]
 800bb0a:	0611      	lsls	r1, r2, #24
 800bb0c:	d46d      	bmi.n	800bbea <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb0e:	691a      	ldr	r2, [r3, #16]
 800bb10:	0652      	lsls	r2, r2, #25
 800bb12:	d502      	bpl.n	800bb1a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb14:	68da      	ldr	r2, [r3, #12]
 800bb16:	0650      	lsls	r0, r2, #25
 800bb18:	d46f      	bmi.n	800bbfa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb1a:	691a      	ldr	r2, [r3, #16]
 800bb1c:	0691      	lsls	r1, r2, #26
 800bb1e:	d502      	bpl.n	800bb26 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	0692      	lsls	r2, r2, #26
 800bb24:	d449      	bmi.n	800bbba <HAL_TIM_IRQHandler+0x106>
}
 800bb26:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb28:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb2c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800bb2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb30:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb32:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bb3a:	d16f      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3c:	f7ff ffb2 	bl	800baa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb40:	4620      	mov	r0, r4
 800bb42:	f7ff ffb3 	bl	800baac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb46:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb48:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4a:	7722      	strb	r2, [r4, #28]
 800bb4c:	e7cd      	b.n	800baea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb4e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb52:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800bb54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb56:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb5a:	69db      	ldr	r3, [r3, #28]
 800bb5c:	079b      	lsls	r3, r3, #30
 800bb5e:	d15a      	bne.n	800bc16 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb60:	f7ff ffa0 	bl	800baa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb64:	4620      	mov	r0, r4
 800bb66:	f7ff ffa1 	bl	800baac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb6c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6e:	7722      	strb	r2, [r4, #28]
 800bb70:	e7b5      	b.n	800bade <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb72:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb76:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800bb78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb7a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb7c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bb84:	d144      	bne.n	800bc10 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb86:	f7ff ff8d 	bl	800baa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff ff8e 	bl	800baac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb90:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb92:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb94:	7722      	strb	r2, [r4, #28]
 800bb96:	e79c      	b.n	800bad2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb98:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb9c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb9e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bba0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	0799      	lsls	r1, r3, #30
 800bba6:	d130      	bne.n	800bc0a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bba8:	f7ff ff7c 	bl	800baa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbac:	4620      	mov	r0, r4
 800bbae:	f7ff ff7d 	bl	800baac <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbb2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbb4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbb6:	7722      	strb	r2, [r4, #28]
 800bbb8:	e785      	b.n	800bac6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800bbbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbc0:	611a      	str	r2, [r3, #16]
}
 800bbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bbc6:	f000 b887 	b.w	800bcd8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbd2:	f7f4 fd6d 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	e78d      	b.n	800baf6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbda:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800bbde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbe0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bbe2:	f000 f87b 	bl	800bcdc <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	e78b      	b.n	800bb02 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbea:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800bbee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbf0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bbf2:	f000 f875 	bl	800bce0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	e789      	b.n	800bb0e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800bbfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc00:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bc02:	f7ff ff55 	bl	800bab0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	e787      	b.n	800bb1a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800bc0a:	f7ff ff4d 	bl	800baa8 <HAL_TIM_IC_CaptureCallback>
 800bc0e:	e7d0      	b.n	800bbb2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800bc10:	f7ff ff4a 	bl	800baa8 <HAL_TIM_IC_CaptureCallback>
 800bc14:	e7bc      	b.n	800bb90 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800bc16:	f7ff ff47 	bl	800baa8 <HAL_TIM_IC_CaptureCallback>
 800bc1a:	e7a6      	b.n	800bb6a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800bc1c:	f7ff ff44 	bl	800baa8 <HAL_TIM_IC_CaptureCallback>
 800bc20:	e791      	b.n	800bb46 <HAL_TIM_IRQHandler+0x92>
 800bc22:	bf00      	nop

0800bc24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d04b      	beq.n	800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc2c:	6803      	ldr	r3, [r0, #0]
 800bc2e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800bc30:	2002      	movs	r0, #2
{
 800bc32:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc34:	4d24      	ldr	r5, [pc, #144]	; (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bc36:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc3a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800bc3c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bc3e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc40:	d029      	beq.n	800bc96 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800bc42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc46:	42ab      	cmp	r3, r5
 800bc48:	d025      	beq.n	800bc96 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc4a:	4d20      	ldr	r5, [pc, #128]	; (800bccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc4c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	bf18      	it	ne
 800bc54:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800bc58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc5c:	bf0c      	ite	eq
 800bc5e:	f04f 0c01 	moveq.w	ip, #1
 800bc62:	f04f 0c00 	movne.w	ip, #0
 800bc66:	42ab      	cmp	r3, r5
 800bc68:	bf08      	it	eq
 800bc6a:	f04c 0c01 	orreq.w	ip, ip, #1
 800bc6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc72:	42ab      	cmp	r3, r5
 800bc74:	bf08      	it	eq
 800bc76:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc7a:	680d      	ldr	r5, [r1, #0]
 800bc7c:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc7e:	4d14      	ldr	r5, [pc, #80]	; (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800bc80:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc82:	42ab      	cmp	r3, r5
 800bc84:	bf14      	ite	ne
 800bc86:	4660      	movne	r0, ip
 800bc88:	f04c 0001 	orreq.w	r0, ip, #1
 800bc8c:	b960      	cbnz	r0, 800bca8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800bc8e:	4811      	ldr	r0, [pc, #68]	; (800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bc90:	4283      	cmp	r3, r0
 800bc92:	d009      	beq.n	800bca8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800bc94:	e00d      	b.n	800bcb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc96:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc98:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc9c:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc9e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800bca0:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bca4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800bca6:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bca8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcaa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcae:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcb0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800bcb2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800bcb4:	2101      	movs	r1, #1

  return HAL_OK;
 800bcb6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800bcb8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bcbc:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800bcc0:	bc30      	pop	{r4, r5}
 800bcc2:	4770      	bx	lr
  __HAL_LOCK(htim);
 800bcc4:	2002      	movs	r0, #2
}
 800bcc6:	4770      	bx	lr
 800bcc8:	40010000 	.word	0x40010000
 800bccc:	40000400 	.word	0x40000400
 800bcd0:	40001800 	.word	0x40001800
 800bcd4:	40014000 	.word	0x40014000

0800bcd8 <HAL_TIMEx_CommutCallback>:
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop

0800bcdc <HAL_TIMEx_BreakCallback>:
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop

0800bce0 <HAL_TIMEx_Break2Callback>:
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop

0800bce4 <HAL_UART_TxCpltCallback>:
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop

0800bce8 <HAL_UART_ErrorCallback>:
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop

0800bcec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bcf6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcfa:	f7ff fff5 	bl	800bce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcfe:	bd08      	pop	{r3, pc}

0800bd00 <HAL_UARTEx_RxEventCallback>:
}
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop

0800bd04 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd04:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd06:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd0a:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800bd0c:	ea12 0f0c 	tst.w	r2, ip
{
 800bd10:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd12:	681d      	ldr	r5, [r3, #0]
{
 800bd14:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd16:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800bd18:	f000 811c 	beq.w	800bf54 <HAL_UART_IRQHandler+0x250>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd1c:	4eae      	ldr	r6, [pc, #696]	; (800bfd8 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd1e:	48af      	ldr	r0, [pc, #700]	; (800bfdc <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd20:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd24:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd26:	ea5c 0600 	orrs.w	r6, ip, r0
 800bd2a:	f040 8086 	bne.w	800be3a <HAL_UART_IRQHandler+0x136>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd2e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800bd30:	2801      	cmp	r0, #1
 800bd32:	d022      	beq.n	800bd7a <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd34:	02d0      	lsls	r0, r2, #11
 800bd36:	d502      	bpl.n	800bd3e <HAL_UART_IRQHandler+0x3a>
 800bd38:	024e      	lsls	r6, r1, #9
 800bd3a:	f100 8134 	bmi.w	800bfa6 <HAL_UART_IRQHandler+0x2a2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd3e:	0610      	lsls	r0, r2, #24
 800bd40:	d506      	bpl.n	800bd50 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd42:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd46:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd4a:	4301      	orrs	r1, r0
 800bd4c:	f040 8123 	bne.w	800bf96 <HAL_UART_IRQHandler+0x292>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd50:	0651      	lsls	r1, r2, #25
 800bd52:	d564      	bpl.n	800be1e <HAL_UART_IRQHandler+0x11a>
 800bd54:	066e      	lsls	r6, r5, #25
 800bd56:	d562      	bpl.n	800be1e <HAL_UART_IRQHandler+0x11a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd58:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd60:	e843 2100 	strex	r1, r2, [r3]
 800bd64:	2900      	cmp	r1, #0
 800bd66:	d1f7      	bne.n	800bd58 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd68:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd6a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd6c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800bd6e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800bd72:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800bd74:	f7ff ffb6 	bl	800bce4 <HAL_UART_TxCpltCallback>
}
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd7a:	06d0      	lsls	r0, r2, #27
 800bd7c:	d5da      	bpl.n	800bd34 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd7e:	06ee      	lsls	r6, r5, #27
 800bd80:	d5d8      	bpl.n	800bd34 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd82:	2210      	movs	r2, #16
 800bd84:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd86:	689a      	ldr	r2, [r3, #8]
 800bd88:	0655      	lsls	r5, r2, #25
 800bd8a:	f140 8136 	bpl.w	800bffa <HAL_UART_IRQHandler+0x2f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd8e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800bd90:	6801      	ldr	r1, [r0, #0]
 800bd92:	684a      	ldr	r2, [r1, #4]
 800bd94:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	d0ee      	beq.n	800bd78 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd9a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800bd9e:	4291      	cmp	r1, r2
 800bda0:	d9ea      	bls.n	800bd78 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800bda2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bda6:	69c2      	ldr	r2, [r0, #28]
 800bda8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bdac:	d02f      	beq.n	800be0e <HAL_UART_IRQHandler+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	e843 2100 	strex	r1, r2, [r3]
 800bdba:	2900      	cmp	r1, #0
 800bdbc:	d1f7      	bne.n	800bdae <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	f103 0208 	add.w	r2, r3, #8
 800bdc2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	f103 0508 	add.w	r5, r3, #8
 800bdce:	e845 2100 	strex	r1, r2, [r5]
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	d1f3      	bne.n	800bdbe <HAL_UART_IRQHandler+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	f103 0208 	add.w	r2, r3, #8
 800bdda:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	f103 0508 	add.w	r5, r3, #8
 800bde6:	e845 2100 	strex	r1, r2, [r5]
 800bdea:	2900      	cmp	r1, #0
 800bdec:	d1f3      	bne.n	800bdd6 <HAL_UART_IRQHandler+0xd2>
          huart->RxState = HAL_UART_STATE_READY;
 800bdee:	2220      	movs	r2, #32
 800bdf0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf4:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdfa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfe:	e843 2100 	strex	r1, r2, [r3]
 800be02:	2900      	cmp	r1, #0
 800be04:	d1f7      	bne.n	800bdf6 <HAL_UART_IRQHandler+0xf2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be06:	f7fb fdb1 	bl	800796c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be0a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800be0e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800be12:	4620      	mov	r0, r4
 800be14:	1ac9      	subs	r1, r1, r3
 800be16:	b289      	uxth	r1, r1
 800be18:	f7ff ff72 	bl	800bd00 <HAL_UARTEx_RxEventCallback>
}
 800be1c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be1e:	0210      	lsls	r0, r2, #8
 800be20:	d502      	bpl.n	800be28 <HAL_UART_IRQHandler+0x124>
 800be22:	0069      	lsls	r1, r5, #1
 800be24:	f100 80e4 	bmi.w	800bff0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be28:	01d3      	lsls	r3, r2, #7
 800be2a:	d5a5      	bpl.n	800bd78 <HAL_UART_IRQHandler+0x74>
 800be2c:	2d00      	cmp	r5, #0
 800be2e:	daa3      	bge.n	800bd78 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be30:	4620      	mov	r0, r4
}
 800be32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be36:	f000 bcf5 	b.w	800c824 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be3a:	07d6      	lsls	r6, r2, #31
 800be3c:	d509      	bpl.n	800be52 <HAL_UART_IRQHandler+0x14e>
 800be3e:	05ee      	lsls	r6, r5, #23
 800be40:	d507      	bpl.n	800be52 <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be42:	2601      	movs	r6, #1
 800be44:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be46:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800be4a:	f046 0601 	orr.w	r6, r6, #1
 800be4e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be52:	0796      	lsls	r6, r2, #30
 800be54:	f140 8090 	bpl.w	800bf78 <HAL_UART_IRQHandler+0x274>
 800be58:	07ce      	lsls	r6, r1, #31
 800be5a:	d50a      	bpl.n	800be72 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be5c:	2602      	movs	r6, #2
 800be5e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be60:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800be64:	f046 0604 	orr.w	r6, r6, #4
 800be68:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be6c:	0756      	lsls	r6, r2, #29
 800be6e:	f100 8089 	bmi.w	800bf84 <HAL_UART_IRQHandler+0x280>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be72:	0716      	lsls	r6, r2, #28
 800be74:	d50b      	bpl.n	800be8e <HAL_UART_IRQHandler+0x18a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be76:	f005 0620 	and.w	r6, r5, #32
 800be7a:	4330      	orrs	r0, r6
 800be7c:	d007      	beq.n	800be8e <HAL_UART_IRQHandler+0x18a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be7e:	2008      	movs	r0, #8
 800be80:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be82:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800be86:	f040 0008 	orr.w	r0, r0, #8
 800be8a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be8e:	0516      	lsls	r6, r2, #20
 800be90:	d50a      	bpl.n	800bea8 <HAL_UART_IRQHandler+0x1a4>
 800be92:	0168      	lsls	r0, r5, #5
 800be94:	d508      	bpl.n	800bea8 <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be9a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be9c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800bea0:	f040 0020 	orr.w	r0, r0, #32
 800bea4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bea8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800beac:	2800      	cmp	r0, #0
 800beae:	f43f af63 	beq.w	800bd78 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800beb2:	0696      	lsls	r6, r2, #26
 800beb4:	d50b      	bpl.n	800bece <HAL_UART_IRQHandler+0x1ca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800beb6:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800beba:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800bebe:	ea55 0201 	orrs.w	r2, r5, r1
 800bec2:	d004      	beq.n	800bece <HAL_UART_IRQHandler+0x1ca>
        if (huart->RxISR != NULL)
 800bec4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800bec6:	b112      	cbz	r2, 800bece <HAL_UART_IRQHandler+0x1ca>
          huart->RxISR(huart);
 800bec8:	4620      	mov	r0, r4
 800beca:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800becc:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800bece:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bed2:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bed4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bed8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800bedc:	4315      	orrs	r5, r2
 800bede:	f000 80c0 	beq.w	800c062 <HAL_UART_IRQHandler+0x35e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	e843 2100 	strex	r1, r2, [r3]
 800beee:	2900      	cmp	r1, #0
 800bef0:	d1f7      	bne.n	800bee2 <HAL_UART_IRQHandler+0x1de>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bef2:	483b      	ldr	r0, [pc, #236]	; (800bfe0 <HAL_UART_IRQHandler+0x2dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef4:	f103 0208 	add.w	r2, r3, #8
 800bef8:	e852 2f00 	ldrex	r2, [r2]
 800befc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befe:	f103 0508 	add.w	r5, r3, #8
 800bf02:	e845 2100 	strex	r1, r2, [r5]
 800bf06:	2900      	cmp	r1, #0
 800bf08:	d1f4      	bne.n	800bef4 <HAL_UART_IRQHandler+0x1f0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf0a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800bf0c:	2a01      	cmp	r2, #1
 800bf0e:	d052      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x2b2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf10:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800bf12:	2120      	movs	r1, #32
 800bf14:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf18:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf1a:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800bf1c:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf1e:	064d      	lsls	r5, r1, #25
 800bf20:	d562      	bpl.n	800bfe8 <HAL_UART_IRQHandler+0x2e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf22:	f103 0208 	add.w	r2, r3, #8
 800bf26:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	f103 0008 	add.w	r0, r3, #8
 800bf32:	e840 2100 	strex	r1, r2, [r0]
 800bf36:	2900      	cmp	r1, #0
 800bf38:	d1f3      	bne.n	800bf22 <HAL_UART_IRQHandler+0x21e>
          if (huart->hdmarx != NULL)
 800bf3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d053      	beq.n	800bfe8 <HAL_UART_IRQHandler+0x2e4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf40:	4b28      	ldr	r3, [pc, #160]	; (800bfe4 <HAL_UART_IRQHandler+0x2e0>)
 800bf42:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf44:	f7fb fe8a 	bl	8007c5c <HAL_DMA_Abort_IT>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	f43f af15 	beq.w	800bd78 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf4e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800bf50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bf52:	e00e      	b.n	800bf72 <HAL_UART_IRQHandler+0x26e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf54:	0696      	lsls	r6, r2, #26
 800bf56:	f57f aeea 	bpl.w	800bd2e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf5a:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf5e:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800bf62:	ea56 060c 	orrs.w	r6, r6, ip
 800bf66:	f43f aee2 	beq.w	800bd2e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800bf6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f43f af03 	beq.w	800bd78 <HAL_UART_IRQHandler+0x74>
}
 800bf72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf76:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf78:	0756      	lsls	r6, r2, #29
 800bf7a:	f57f af7a 	bpl.w	800be72 <HAL_UART_IRQHandler+0x16e>
 800bf7e:	07ce      	lsls	r6, r1, #31
 800bf80:	f57f af77 	bpl.w	800be72 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf84:	2604      	movs	r6, #4
 800bf86:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf88:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800bf8c:	f046 0602 	orr.w	r6, r6, #2
 800bf90:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800bf94:	e76d      	b.n	800be72 <HAL_UART_IRQHandler+0x16e>
    if (huart->TxISR != NULL)
 800bf96:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f43f aeed 	beq.w	800bd78 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800bf9e:	4620      	mov	r0, r4
}
 800bfa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800bfa4:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800bfaa:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bfac:	621a      	str	r2, [r3, #32]
}
 800bfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800bfb2:	f000 bc35 	b.w	800c820 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	e843 2100 	strex	r1, r2, [r3]
 800bfc2:	2900      	cmp	r1, #0
 800bfc4:	d0a4      	beq.n	800bf10 <HAL_UART_IRQHandler+0x20c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	e853 2f00 	ldrex	r2, [r3]
 800bfca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	e843 2100 	strex	r1, r2, [r3]
 800bfd2:	2900      	cmp	r1, #0
 800bfd4:	d1ef      	bne.n	800bfb6 <HAL_UART_IRQHandler+0x2b2>
 800bfd6:	e79b      	b.n	800bf10 <HAL_UART_IRQHandler+0x20c>
 800bfd8:	04000120 	.word	0x04000120
 800bfdc:	10000001 	.word	0x10000001
 800bfe0:	effffffe 	.word	0xeffffffe
 800bfe4:	0800bced 	.word	0x0800bced
            HAL_UART_ErrorCallback(huart);
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f7ff fe7d 	bl	800bce8 <HAL_UART_ErrorCallback>
}
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bff0:	4620      	mov	r0, r4
}
 800bff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bff6:	f000 bc17 	b.w	800c828 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bffa:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800bffe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800c002:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c006:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800c008:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c00a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800c00c:	2a00      	cmp	r2, #0
 800c00e:	f43f aeb3 	beq.w	800bd78 <HAL_UART_IRQHandler+0x74>
 800c012:	2900      	cmp	r1, #0
 800c014:	f43f aeb0 	beq.w	800bd78 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c01c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	e843 2000 	strex	r0, r2, [r3]
 800c024:	2800      	cmp	r0, #0
 800c026:	d1f7      	bne.n	800c018 <HAL_UART_IRQHandler+0x314>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c028:	4d11      	ldr	r5, [pc, #68]	; (800c070 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	f103 0208 	add.w	r2, r3, #8
 800c02e:	e852 2f00 	ldrex	r2, [r2]
 800c032:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	f103 0608 	add.w	r6, r3, #8
 800c038:	e846 2000 	strex	r0, r2, [r6]
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d1f4      	bne.n	800c02a <HAL_UART_IRQHandler+0x326>
        huart->RxState = HAL_UART_STATE_READY;
 800c040:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800c042:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800c044:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c048:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c04e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c052:	e843 2000 	strex	r0, r2, [r3]
 800c056:	2800      	cmp	r0, #0
 800c058:	d1f7      	bne.n	800c04a <HAL_UART_IRQHandler+0x346>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c05a:	4620      	mov	r0, r4
 800c05c:	f7ff fe50 	bl	800bd00 <HAL_UARTEx_RxEventCallback>
}
 800c060:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fe40 	bl	800bce8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c068:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
 800c06e:	bf00      	nop
 800c070:	effffffe 	.word	0xeffffffe

0800c074 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c074:	6901      	ldr	r1, [r0, #16]
 800c076:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800c078:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c07a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c07c:	49c0      	ldr	r1, [pc, #768]	; (800c380 <UART_SetConfig+0x30c>)
{
 800c07e:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c080:	6945      	ldr	r5, [r0, #20]
{
 800c082:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c084:	69c0      	ldr	r0, [r0, #28]
{
 800c086:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c088:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c08a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c08c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c08e:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c090:	4dbc      	ldr	r5, [pc, #752]	; (800c384 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c092:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c094:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c096:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c098:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c0a0:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0a4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0a6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0a8:	f000 80e0 	beq.w	800c26c <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800c0ac:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0ae:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800c0b0:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0b2:	4ab5      	ldr	r2, [pc, #724]	; (800c388 <UART_SetConfig+0x314>)
 800c0b4:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0b8:	4311      	orrs	r1, r2
 800c0ba:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0be:	f022 020f 	bic.w	r2, r2, #15
 800c0c2:	432a      	orrs	r2, r5
 800c0c4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0c6:	4ab1      	ldr	r2, [pc, #708]	; (800c38c <UART_SetConfig+0x318>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d023      	beq.n	800c114 <UART_SetConfig+0xa0>
 800c0cc:	4ab0      	ldr	r2, [pc, #704]	; (800c390 <UART_SetConfig+0x31c>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d076      	beq.n	800c1c0 <UART_SetConfig+0x14c>
 800c0d2:	4ab0      	ldr	r2, [pc, #704]	; (800c394 <UART_SetConfig+0x320>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	f000 818f 	beq.w	800c3f8 <UART_SetConfig+0x384>
 800c0da:	4aaf      	ldr	r2, [pc, #700]	; (800c398 <UART_SetConfig+0x324>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	f000 81e1 	beq.w	800c4a4 <UART_SetConfig+0x430>
 800c0e2:	4aae      	ldr	r2, [pc, #696]	; (800c39c <UART_SetConfig+0x328>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	f000 8121 	beq.w	800c32c <UART_SetConfig+0x2b8>
 800c0ea:	4aad      	ldr	r2, [pc, #692]	; (800c3a0 <UART_SetConfig+0x32c>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	f000 81e3 	beq.w	800c4b8 <UART_SetConfig+0x444>
 800c0f2:	4aac      	ldr	r2, [pc, #688]	; (800c3a4 <UART_SetConfig+0x330>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	f000 8234 	beq.w	800c562 <UART_SetConfig+0x4ee>
 800c0fa:	4aab      	ldr	r2, [pc, #684]	; (800c3a8 <UART_SetConfig+0x334>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	f000 81e7 	beq.w	800c4d0 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800c102:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800c104:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800c106:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800c10a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800c10c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800c10e:	6763      	str	r3, [r4, #116]	; 0x74
}
 800c110:	b007      	add	sp, #28
 800c112:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c114:	4ba5      	ldr	r3, [pc, #660]	; (800c3ac <UART_SetConfig+0x338>)
 800c116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c11c:	2b28      	cmp	r3, #40	; 0x28
 800c11e:	d8f0      	bhi.n	800c102 <UART_SetConfig+0x8e>
 800c120:	4aa3      	ldr	r2, [pc, #652]	; (800c3b0 <UART_SetConfig+0x33c>)
 800c122:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c124:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c128:	d055      	beq.n	800c1d6 <UART_SetConfig+0x162>
    switch (clocksource)
 800c12a:	2b20      	cmp	r3, #32
 800c12c:	f200 814a 	bhi.w	800c3c4 <UART_SetConfig+0x350>
 800c130:	2b20      	cmp	r3, #32
 800c132:	d8e6      	bhi.n	800c102 <UART_SetConfig+0x8e>
 800c134:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <UART_SetConfig+0xc8>)
 800c136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13a:	bf00      	nop
 800c13c:	0800c37b 	.word	0x0800c37b
 800c140:	0800c375 	.word	0x0800c375
 800c144:	0800c103 	.word	0x0800c103
 800c148:	0800c103 	.word	0x0800c103
 800c14c:	0800c365 	.word	0x0800c365
 800c150:	0800c103 	.word	0x0800c103
 800c154:	0800c103 	.word	0x0800c103
 800c158:	0800c103 	.word	0x0800c103
 800c15c:	0800c357 	.word	0x0800c357
 800c160:	0800c103 	.word	0x0800c103
 800c164:	0800c103 	.word	0x0800c103
 800c168:	0800c103 	.word	0x0800c103
 800c16c:	0800c103 	.word	0x0800c103
 800c170:	0800c103 	.word	0x0800c103
 800c174:	0800c103 	.word	0x0800c103
 800c178:	0800c103 	.word	0x0800c103
 800c17c:	0800c341 	.word	0x0800c341
 800c180:	0800c103 	.word	0x0800c103
 800c184:	0800c103 	.word	0x0800c103
 800c188:	0800c103 	.word	0x0800c103
 800c18c:	0800c103 	.word	0x0800c103
 800c190:	0800c103 	.word	0x0800c103
 800c194:	0800c103 	.word	0x0800c103
 800c198:	0800c103 	.word	0x0800c103
 800c19c:	0800c103 	.word	0x0800c103
 800c1a0:	0800c103 	.word	0x0800c103
 800c1a4:	0800c103 	.word	0x0800c103
 800c1a8:	0800c103 	.word	0x0800c103
 800c1ac:	0800c103 	.word	0x0800c103
 800c1b0:	0800c103 	.word	0x0800c103
 800c1b4:	0800c103 	.word	0x0800c103
 800c1b8:	0800c103 	.word	0x0800c103
 800c1bc:	0800c4e5 	.word	0x0800c4e5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1c0:	4b7a      	ldr	r3, [pc, #488]	; (800c3ac <UART_SetConfig+0x338>)
 800c1c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c4:	f003 0307 	and.w	r3, r3, #7
 800c1c8:	2b05      	cmp	r3, #5
 800c1ca:	d89a      	bhi.n	800c102 <UART_SetConfig+0x8e>
 800c1cc:	4a79      	ldr	r2, [pc, #484]	; (800c3b4 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ce:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c1d2:	5cd3      	ldrb	r3, [r2, r3]
 800c1d4:	d1a9      	bne.n	800c12a <UART_SetConfig+0xb6>
    switch (clocksource)
 800c1d6:	2b20      	cmp	r3, #32
 800c1d8:	f200 8145 	bhi.w	800c466 <UART_SetConfig+0x3f2>
 800c1dc:	2b20      	cmp	r3, #32
 800c1de:	d890      	bhi.n	800c102 <UART_SetConfig+0x8e>
 800c1e0:	a201      	add	r2, pc, #4	; (adr r2, 800c1e8 <UART_SetConfig+0x174>)
 800c1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e6:	bf00      	nop
 800c1e8:	0800c54f 	.word	0x0800c54f
 800c1ec:	0800c549 	.word	0x0800c549
 800c1f0:	0800c103 	.word	0x0800c103
 800c1f4:	0800c103 	.word	0x0800c103
 800c1f8:	0800c555 	.word	0x0800c555
 800c1fc:	0800c103 	.word	0x0800c103
 800c200:	0800c103 	.word	0x0800c103
 800c204:	0800c103 	.word	0x0800c103
 800c208:	0800c537 	.word	0x0800c537
 800c20c:	0800c103 	.word	0x0800c103
 800c210:	0800c103 	.word	0x0800c103
 800c214:	0800c103 	.word	0x0800c103
 800c218:	0800c103 	.word	0x0800c103
 800c21c:	0800c103 	.word	0x0800c103
 800c220:	0800c103 	.word	0x0800c103
 800c224:	0800c103 	.word	0x0800c103
 800c228:	0800c523 	.word	0x0800c523
 800c22c:	0800c103 	.word	0x0800c103
 800c230:	0800c103 	.word	0x0800c103
 800c234:	0800c103 	.word	0x0800c103
 800c238:	0800c103 	.word	0x0800c103
 800c23c:	0800c103 	.word	0x0800c103
 800c240:	0800c103 	.word	0x0800c103
 800c244:	0800c103 	.word	0x0800c103
 800c248:	0800c103 	.word	0x0800c103
 800c24c:	0800c103 	.word	0x0800c103
 800c250:	0800c103 	.word	0x0800c103
 800c254:	0800c103 	.word	0x0800c103
 800c258:	0800c103 	.word	0x0800c103
 800c25c:	0800c103 	.word	0x0800c103
 800c260:	0800c103 	.word	0x0800c103
 800c264:	0800c103 	.word	0x0800c103
 800c268:	0800c55f 	.word	0x0800c55f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c26c:	6898      	ldr	r0, [r3, #8]
 800c26e:	4a46      	ldr	r2, [pc, #280]	; (800c388 <UART_SetConfig+0x314>)
 800c270:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c272:	484e      	ldr	r0, [pc, #312]	; (800c3ac <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c274:	430a      	orrs	r2, r1
 800c276:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c27c:	f022 020f 	bic.w	r2, r2, #15
 800c280:	430a      	orrs	r2, r1
 800c282:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c284:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	f63f af39 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c290:	4a49      	ldr	r2, [pc, #292]	; (800c3b8 <UART_SetConfig+0x344>)
 800c292:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800c294:	2b20      	cmp	r3, #32
 800c296:	f200 80b9 	bhi.w	800c40c <UART_SetConfig+0x398>
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	f67f af31 	bls.w	800c102 <UART_SetConfig+0x8e>
 800c2a0:	3b02      	subs	r3, #2
 800c2a2:	2b1e      	cmp	r3, #30
 800c2a4:	f63f af2d 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c2a8:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <UART_SetConfig+0x23c>)
 800c2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ae:	bf00      	nop
 800c2b0:	0800c519 	.word	0x0800c519
 800c2b4:	0800c103 	.word	0x0800c103
 800c2b8:	0800c50f 	.word	0x0800c50f
 800c2bc:	0800c103 	.word	0x0800c103
 800c2c0:	0800c103 	.word	0x0800c103
 800c2c4:	0800c103 	.word	0x0800c103
 800c2c8:	0800c4fd 	.word	0x0800c4fd
 800c2cc:	0800c103 	.word	0x0800c103
 800c2d0:	0800c103 	.word	0x0800c103
 800c2d4:	0800c103 	.word	0x0800c103
 800c2d8:	0800c103 	.word	0x0800c103
 800c2dc:	0800c103 	.word	0x0800c103
 800c2e0:	0800c103 	.word	0x0800c103
 800c2e4:	0800c103 	.word	0x0800c103
 800c2e8:	0800c4e9 	.word	0x0800c4e9
 800c2ec:	0800c103 	.word	0x0800c103
 800c2f0:	0800c103 	.word	0x0800c103
 800c2f4:	0800c103 	.word	0x0800c103
 800c2f8:	0800c103 	.word	0x0800c103
 800c2fc:	0800c103 	.word	0x0800c103
 800c300:	0800c103 	.word	0x0800c103
 800c304:	0800c103 	.word	0x0800c103
 800c308:	0800c103 	.word	0x0800c103
 800c30c:	0800c103 	.word	0x0800c103
 800c310:	0800c103 	.word	0x0800c103
 800c314:	0800c103 	.word	0x0800c103
 800c318:	0800c103 	.word	0x0800c103
 800c31c:	0800c103 	.word	0x0800c103
 800c320:	0800c103 	.word	0x0800c103
 800c324:	0800c103 	.word	0x0800c103
 800c328:	0800c51f 	.word	0x0800c51f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c32c:	4b1f      	ldr	r3, [pc, #124]	; (800c3ac <UART_SetConfig+0x338>)
 800c32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c330:	f003 0307 	and.w	r3, r3, #7
 800c334:	2b05      	cmp	r3, #5
 800c336:	f63f aee4 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c33a:	4a20      	ldr	r2, [pc, #128]	; (800c3bc <UART_SetConfig+0x348>)
 800c33c:	5cd3      	ldrb	r3, [r2, r3]
 800c33e:	e6f1      	b.n	800c124 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c340:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <UART_SetConfig+0x338>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	0692      	lsls	r2, r2, #26
 800c346:	f140 80c1 	bpl.w	800c4cc <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	481c      	ldr	r0, [pc, #112]	; (800c3c0 <UART_SetConfig+0x34c>)
 800c34e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c352:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c354:	e03b      	b.n	800c3ce <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c356:	a803      	add	r0, sp, #12
 800c358:	f7fe fd54 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c35c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c35e:	b938      	cbnz	r0, 800c370 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800c360:	2000      	movs	r0, #0
 800c362:	e6cf      	b.n	800c104 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c364:	4668      	mov	r0, sp
 800c366:	f7fe fca1 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c36a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d0f7      	beq.n	800c360 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c370:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c372:	e02c      	b.n	800c3ce <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c374:	f7fd fe04 	bl	8009f80 <HAL_RCC_GetPCLK2Freq>
        break;
 800c378:	e7f1      	b.n	800c35e <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c37a:	f7fd fdb9 	bl	8009ef0 <HAL_RCC_GetPCLK1Freq>
        break;
 800c37e:	e7ee      	b.n	800c35e <UART_SetConfig+0x2ea>
 800c380:	cfff69f3 	.word	0xcfff69f3
 800c384:	58000c00 	.word	0x58000c00
 800c388:	11fff4ff 	.word	0x11fff4ff
 800c38c:	40011000 	.word	0x40011000
 800c390:	40004400 	.word	0x40004400
 800c394:	40004800 	.word	0x40004800
 800c398:	40004c00 	.word	0x40004c00
 800c39c:	40005000 	.word	0x40005000
 800c3a0:	40011400 	.word	0x40011400
 800c3a4:	40007800 	.word	0x40007800
 800c3a8:	40007c00 	.word	0x40007c00
 800c3ac:	58024400 	.word	0x58024400
 800c3b0:	0801a0f4 	.word	0x0801a0f4
 800c3b4:	0801a120 	.word	0x0801a120
 800c3b8:	0801a128 	.word	0x0801a128
 800c3bc:	0801a120 	.word	0x0801a120
 800c3c0:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800c3c4:	2b40      	cmp	r3, #64	; 0x40
 800c3c6:	f47f ae9c 	bne.w	800c102 <UART_SetConfig+0x8e>
 800c3ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3ce:	4b6c      	ldr	r3, [pc, #432]	; (800c580 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3d0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3d4:	6862      	ldr	r2, [r4, #4]
 800c3d6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800c3da:	fbb0 f3f3 	udiv	r3, r0, r3
 800c3de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c3e2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3e6:	f1a3 0210 	sub.w	r2, r3, #16
 800c3ea:	428a      	cmp	r2, r1
 800c3ec:	f63f ae89 	bhi.w	800c102 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c3f0:	6822      	ldr	r2, [r4, #0]
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	60d3      	str	r3, [r2, #12]
 800c3f6:	e685      	b.n	800c104 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3f8:	4b62      	ldr	r3, [pc, #392]	; (800c584 <UART_SetConfig+0x510>)
 800c3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fc:	f003 0307 	and.w	r3, r3, #7
 800c400:	2b05      	cmp	r3, #5
 800c402:	f63f ae7e 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c406:	4a60      	ldr	r2, [pc, #384]	; (800c588 <UART_SetConfig+0x514>)
 800c408:	5cd3      	ldrb	r3, [r2, r3]
 800c40a:	e68b      	b.n	800c124 <UART_SetConfig+0xb0>
    switch (clocksource)
 800c40c:	2b40      	cmp	r3, #64	; 0x40
 800c40e:	f47f ae78 	bne.w	800c102 <UART_SetConfig+0x8e>
 800c412:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c416:	4b5a      	ldr	r3, [pc, #360]	; (800c580 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c418:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c41a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c41e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c422:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c426:	4299      	cmp	r1, r3
 800c428:	f63f ae6b 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c42c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c430:	f63f ae67 	bhi.w	800c102 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c434:	2300      	movs	r3, #0
 800c436:	4619      	mov	r1, r3
 800c438:	f7f3 ffaa 	bl	8000390 <__aeabi_uldivmod>
 800c43c:	462a      	mov	r2, r5
 800c43e:	0209      	lsls	r1, r1, #8
 800c440:	0203      	lsls	r3, r0, #8
 800c442:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c446:	0868      	lsrs	r0, r5, #1
 800c448:	1818      	adds	r0, r3, r0
 800c44a:	f04f 0300 	mov.w	r3, #0
 800c44e:	f141 0100 	adc.w	r1, r1, #0
 800c452:	f7f3 ff9d 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c456:	4a4d      	ldr	r2, [pc, #308]	; (800c58c <UART_SetConfig+0x518>)
 800c458:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c45c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c45e:	4291      	cmp	r1, r2
 800c460:	f63f ae4f 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c464:	e7c4      	b.n	800c3f0 <UART_SetConfig+0x37c>
    switch (clocksource)
 800c466:	2b40      	cmp	r3, #64	; 0x40
 800c468:	f47f ae4b 	bne.w	800c102 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c46c:	4b44      	ldr	r3, [pc, #272]	; (800c580 <UART_SetConfig+0x50c>)
 800c46e:	6862      	ldr	r2, [r4, #4]
 800c470:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800c474:	0853      	lsrs	r3, r2, #1
 800c476:	fbb0 f0f1 	udiv	r0, r0, r1
 800c47a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c47e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c482:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c486:	f1a0 0210 	sub.w	r2, r0, #16
 800c48a:	429a      	cmp	r2, r3
 800c48c:	f63f ae39 	bhi.w	800c102 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c490:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c494:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800c498:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c49a:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800c49c:	4303      	orrs	r3, r0
 800c49e:	2000      	movs	r0, #0
 800c4a0:	60d3      	str	r3, [r2, #12]
 800c4a2:	e62f      	b.n	800c104 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4a4:	4b37      	ldr	r3, [pc, #220]	; (800c584 <UART_SetConfig+0x510>)
 800c4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a8:	f003 0307 	and.w	r3, r3, #7
 800c4ac:	2b05      	cmp	r3, #5
 800c4ae:	f63f ae28 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c4b2:	4a37      	ldr	r2, [pc, #220]	; (800c590 <UART_SetConfig+0x51c>)
 800c4b4:	5cd3      	ldrb	r3, [r2, r3]
 800c4b6:	e635      	b.n	800c124 <UART_SetConfig+0xb0>
 800c4b8:	4b32      	ldr	r3, [pc, #200]	; (800c584 <UART_SetConfig+0x510>)
 800c4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4c0:	2b28      	cmp	r3, #40	; 0x28
 800c4c2:	f63f ae1e 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c4c6:	4a33      	ldr	r2, [pc, #204]	; (800c594 <UART_SetConfig+0x520>)
 800c4c8:	5cd3      	ldrb	r3, [r2, r3]
 800c4ca:	e62b      	b.n	800c124 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800c4cc:	4832      	ldr	r0, [pc, #200]	; (800c598 <UART_SetConfig+0x524>)
 800c4ce:	e77e      	b.n	800c3ce <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4d0:	4b2c      	ldr	r3, [pc, #176]	; (800c584 <UART_SetConfig+0x510>)
 800c4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d4:	f003 0307 	and.w	r3, r3, #7
 800c4d8:	2b05      	cmp	r3, #5
 800c4da:	f63f ae12 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c4de:	4a2f      	ldr	r2, [pc, #188]	; (800c59c <UART_SetConfig+0x528>)
 800c4e0:	5cd3      	ldrb	r3, [r2, r3]
 800c4e2:	e61f      	b.n	800c124 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800c4e4:	482e      	ldr	r0, [pc, #184]	; (800c5a0 <UART_SetConfig+0x52c>)
 800c4e6:	e772      	b.n	800c3ce <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4e8:	4b26      	ldr	r3, [pc, #152]	; (800c584 <UART_SetConfig+0x510>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	0690      	lsls	r0, r2, #26
 800c4ee:	d542      	bpl.n	800c576 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4829      	ldr	r0, [pc, #164]	; (800c598 <UART_SetConfig+0x524>)
 800c4f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c4f8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c4fa:	e78c      	b.n	800c416 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4fc:	a803      	add	r0, sp, #12
 800c4fe:	f7fe fc81 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c502:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c504:	2800      	cmp	r0, #0
 800c506:	f43f af2b 	beq.w	800c360 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c50a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c50c:	e783      	b.n	800c416 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c50e:	4668      	mov	r0, sp
 800c510:	f7fe fbcc 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c514:	9801      	ldr	r0, [sp, #4]
        break;
 800c516:	e7f5      	b.n	800c504 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c518:	f7fe fbb6 	bl	800ac88 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800c51c:	e7f2      	b.n	800c504 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800c51e:	4820      	ldr	r0, [pc, #128]	; (800c5a0 <UART_SetConfig+0x52c>)
 800c520:	e779      	b.n	800c416 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c522:	4b18      	ldr	r3, [pc, #96]	; (800c584 <UART_SetConfig+0x510>)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	0691      	lsls	r1, r2, #26
 800c528:	d527      	bpl.n	800c57a <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	481a      	ldr	r0, [pc, #104]	; (800c598 <UART_SetConfig+0x524>)
 800c52e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c532:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c534:	e79a      	b.n	800c46c <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c536:	a803      	add	r0, sp, #12
 800c538:	f7fe fc64 	bl	800ae04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c53c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800c53e:	2800      	cmp	r0, #0
 800c540:	f43f af0e 	beq.w	800c360 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c544:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c546:	e791      	b.n	800c46c <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c548:	f7fd fd1a 	bl	8009f80 <HAL_RCC_GetPCLK2Freq>
        break;
 800c54c:	e7f7      	b.n	800c53e <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c54e:	f7fd fccf 	bl	8009ef0 <HAL_RCC_GetPCLK1Freq>
        break;
 800c552:	e7f4      	b.n	800c53e <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c554:	4668      	mov	r0, sp
 800c556:	f7fe fba9 	bl	800acac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c55a:	9801      	ldr	r0, [sp, #4]
        break;
 800c55c:	e7ef      	b.n	800c53e <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800c55e:	4810      	ldr	r0, [pc, #64]	; (800c5a0 <UART_SetConfig+0x52c>)
 800c560:	e784      	b.n	800c46c <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c562:	4b08      	ldr	r3, [pc, #32]	; (800c584 <UART_SetConfig+0x510>)
 800c564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b05      	cmp	r3, #5
 800c56c:	f63f adc9 	bhi.w	800c102 <UART_SetConfig+0x8e>
 800c570:	4a0c      	ldr	r2, [pc, #48]	; (800c5a4 <UART_SetConfig+0x530>)
 800c572:	5cd3      	ldrb	r3, [r2, r3]
 800c574:	e5d6      	b.n	800c124 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800c576:	4808      	ldr	r0, [pc, #32]	; (800c598 <UART_SetConfig+0x524>)
 800c578:	e74d      	b.n	800c416 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800c57a:	4807      	ldr	r0, [pc, #28]	; (800c598 <UART_SetConfig+0x524>)
 800c57c:	e776      	b.n	800c46c <UART_SetConfig+0x3f8>
 800c57e:	bf00      	nop
 800c580:	0801a130 	.word	0x0801a130
 800c584:	58024400 	.word	0x58024400
 800c588:	0801a120 	.word	0x0801a120
 800c58c:	000ffcff 	.word	0x000ffcff
 800c590:	0801a120 	.word	0x0801a120
 800c594:	0801a0f4 	.word	0x0801a0f4
 800c598:	03d09000 	.word	0x03d09000
 800c59c:	0801a120 	.word	0x0801a120
 800c5a0:	003d0900 	.word	0x003d0900
 800c5a4:	0801a120 	.word	0x0801a120

0800c5a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c5aa:	07da      	lsls	r2, r3, #31
{
 800c5ac:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5ae:	d506      	bpl.n	800c5be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5b0:	6801      	ldr	r1, [r0, #0]
 800c5b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c5b4:	684a      	ldr	r2, [r1, #4]
 800c5b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c5ba:	4322      	orrs	r2, r4
 800c5bc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5be:	079c      	lsls	r4, r3, #30
 800c5c0:	d506      	bpl.n	800c5d0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5c2:	6801      	ldr	r1, [r0, #0]
 800c5c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c5c6:	684a      	ldr	r2, [r1, #4]
 800c5c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c5cc:	4322      	orrs	r2, r4
 800c5ce:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5d0:	0759      	lsls	r1, r3, #29
 800c5d2:	d506      	bpl.n	800c5e2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5d4:	6801      	ldr	r1, [r0, #0]
 800c5d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c5d8:	684a      	ldr	r2, [r1, #4]
 800c5da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c5de:	4322      	orrs	r2, r4
 800c5e0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5e2:	071a      	lsls	r2, r3, #28
 800c5e4:	d506      	bpl.n	800c5f4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5e6:	6801      	ldr	r1, [r0, #0]
 800c5e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c5ea:	684a      	ldr	r2, [r1, #4]
 800c5ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5f0:	4322      	orrs	r2, r4
 800c5f2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5f4:	06dc      	lsls	r4, r3, #27
 800c5f6:	d506      	bpl.n	800c606 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5f8:	6801      	ldr	r1, [r0, #0]
 800c5fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c5fc:	688a      	ldr	r2, [r1, #8]
 800c5fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c602:	4322      	orrs	r2, r4
 800c604:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c606:	0699      	lsls	r1, r3, #26
 800c608:	d506      	bpl.n	800c618 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c60a:	6801      	ldr	r1, [r0, #0]
 800c60c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c60e:	688a      	ldr	r2, [r1, #8]
 800c610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c614:	4322      	orrs	r2, r4
 800c616:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c618:	065a      	lsls	r2, r3, #25
 800c61a:	d50a      	bpl.n	800c632 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c61c:	6801      	ldr	r1, [r0, #0]
 800c61e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c620:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c622:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c626:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c62a:	ea42 0204 	orr.w	r2, r2, r4
 800c62e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c630:	d00b      	beq.n	800c64a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c632:	061b      	lsls	r3, r3, #24
 800c634:	d506      	bpl.n	800c644 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c636:	6802      	ldr	r2, [r0, #0]
 800c638:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c63a:	6853      	ldr	r3, [r2, #4]
 800c63c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c640:	430b      	orrs	r3, r1
 800c642:	6053      	str	r3, [r2, #4]
}
 800c644:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c648:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c64a:	684a      	ldr	r2, [r1, #4]
 800c64c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c64e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c652:	4322      	orrs	r2, r4
 800c654:	604a      	str	r2, [r1, #4]
 800c656:	e7ec      	b.n	800c632 <UART_AdvFeatureConfig+0x8a>

0800c658 <UART_WaitOnFlagUntilTimeout>:
{
 800c658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c65c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c660:	4607      	mov	r7, r0
 800c662:	460e      	mov	r6, r1
 800c664:	4615      	mov	r5, r2
 800c666:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c668:	6804      	ldr	r4, [r0, #0]
 800c66a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c66e:	d10a      	bne.n	800c686 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c670:	69e3      	ldr	r3, [r4, #28]
 800c672:	ea36 0303 	bics.w	r3, r6, r3
 800c676:	bf0c      	ite	eq
 800c678:	2301      	moveq	r3, #1
 800c67a:	2300      	movne	r3, #0
 800c67c:	429d      	cmp	r5, r3
 800c67e:	d0f7      	beq.n	800c670 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800c680:	2000      	movs	r0, #0
}
 800c682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c686:	69e3      	ldr	r3, [r4, #28]
 800c688:	ea36 0303 	bics.w	r3, r6, r3
 800c68c:	bf0c      	ite	eq
 800c68e:	2301      	moveq	r3, #1
 800c690:	2300      	movne	r3, #0
 800c692:	42ab      	cmp	r3, r5
 800c694:	d1f4      	bne.n	800c680 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c696:	f7f9 f8ab 	bl	80057f0 <HAL_GetTick>
 800c69a:	eba0 0009 	sub.w	r0, r0, r9
 800c69e:	4540      	cmp	r0, r8
 800c6a0:	d833      	bhi.n	800c70a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6a2:	f1b8 0f00 	cmp.w	r8, #0
 800c6a6:	d030      	beq.n	800c70a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6a8:	683c      	ldr	r4, [r7, #0]
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	0759      	lsls	r1, r3, #29
 800c6b0:	d5db      	bpl.n	800c66a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6b2:	69e3      	ldr	r3, [r4, #28]
 800c6b4:	051b      	lsls	r3, r3, #20
 800c6b6:	d5d8      	bpl.n	800c66a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6bc:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6be:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c6c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c6:	e844 3100 	strex	r1, r3, [r4]
 800c6ca:	b139      	cbz	r1, 800c6dc <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	e852 3f00 	ldrex	r3, [r2]
 800c6d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d4:	e842 3100 	strex	r1, r3, [r2]
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	d1f7      	bne.n	800c6cc <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6dc:	f102 0308 	add.w	r3, r2, #8
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	f102 0008 	add.w	r0, r2, #8
 800c6ec:	e840 3100 	strex	r1, r3, [r0]
 800c6f0:	2900      	cmp	r1, #0
 800c6f2:	d1f3      	bne.n	800c6dc <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800c6f4:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800c6f6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800c6f8:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800c6fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800c708:	e7bb      	b.n	800c682 <UART_WaitOnFlagUntilTimeout+0x2a>
 800c70a:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c714:	e842 3100 	strex	r1, r3, [r2]
 800c718:	2900      	cmp	r1, #0
 800c71a:	d1f7      	bne.n	800c70c <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71c:	f102 0308 	add.w	r3, r2, #8
 800c720:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c724:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c728:	f102 0008 	add.w	r0, r2, #8
 800c72c:	e840 3100 	strex	r1, r3, [r0]
 800c730:	2900      	cmp	r1, #0
 800c732:	d1f3      	bne.n	800c71c <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800c734:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800c736:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800c738:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800c73c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800c744:	e79d      	b.n	800c682 <UART_WaitOnFlagUntilTimeout+0x2a>
 800c746:	bf00      	nop

0800c748 <HAL_UART_Init>:
  if (huart == NULL)
 800c748:	2800      	cmp	r0, #0
 800c74a:	d066      	beq.n	800c81a <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c74c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4604      	mov	r4, r0
 800c754:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 800c756:	2b00      	cmp	r3, #0
 800c758:	d04c      	beq.n	800c7f4 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800c75a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c75c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c75e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c760:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800c764:	6813      	ldr	r3, [r2, #0]
 800c766:	f023 0301 	bic.w	r3, r3, #1
 800c76a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c76c:	f7ff fc82 	bl	800c074 <UART_SetConfig>
 800c770:	2801      	cmp	r0, #1
 800c772:	d03c      	beq.n	800c7ee <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c776:	2b00      	cmp	r3, #0
 800c778:	d135      	bne.n	800c7e6 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c77a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c77c:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c77e:	6859      	ldr	r1, [r3, #4]
 800c780:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800c784:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c786:	6899      	ldr	r1, [r3, #8]
 800c788:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800c78c:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c78e:	6819      	ldr	r1, [r3, #0]
 800c790:	f041 0101 	orr.w	r1, r1, #1
 800c794:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c796:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800c79a:	f7f9 f829 	bl	80057f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c79e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c7a0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	0712      	lsls	r2, r2, #28
 800c7a6:	d40e      	bmi.n	800c7c6 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	075b      	lsls	r3, r3, #29
 800c7ac:	d427      	bmi.n	800c7fe <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ae:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800c7b0:	2220      	movs	r2, #32
  return HAL_OK;
 800c7b2:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800c7b4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c7b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c7bc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800c7c2:	b002      	add	sp, #8
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7c6:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	462a      	mov	r2, r5
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	9100      	str	r1, [sp, #0]
 800c7d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c7d6:	f7ff ff3f 	bl	800c658 <UART_WaitOnFlagUntilTimeout>
 800c7da:	b9e0      	cbnz	r0, 800c816 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	075b      	lsls	r3, r3, #29
 800c7e2:	d40c      	bmi.n	800c7fe <HAL_UART_Init+0xb6>
 800c7e4:	e7e3      	b.n	800c7ae <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7ff fede 	bl	800c5a8 <UART_AdvFeatureConfig>
 800c7ec:	e7c5      	b.n	800c77a <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800c7ee:	2001      	movs	r0, #1
}
 800c7f0:	b002      	add	sp, #8
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800c7f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800c7f8:	f7f8 fdb4 	bl	8005364 <HAL_UART_MspInit>
 800c7fc:	e7ad      	b.n	800c75a <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7fe:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800c802:	4633      	mov	r3, r6
 800c804:	2200      	movs	r2, #0
 800c806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c80a:	9000      	str	r0, [sp, #0]
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7ff ff23 	bl	800c658 <UART_WaitOnFlagUntilTimeout>
 800c812:	2800      	cmp	r0, #0
 800c814:	d0cb      	beq.n	800c7ae <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800c816:	2003      	movs	r0, #3
 800c818:	e7d3      	b.n	800c7c2 <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800c81a:	2001      	movs	r0, #1
}
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop

0800c820 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop

0800c824 <HAL_UARTEx_RxFifoFullCallback>:
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop

0800c828 <HAL_UARTEx_TxFifoEmptyCallback>:
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop

0800c82c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c82c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800c830:	2a01      	cmp	r2, #1
 800c832:	d017      	beq.n	800c864 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c834:	6802      	ldr	r2, [r0, #0]
 800c836:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800c838:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c83a:	2100      	movs	r1, #0
{
 800c83c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800c83e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800c842:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c844:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c846:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c848:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800c84c:	f024 0401 	bic.w	r4, r4, #1
 800c850:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c852:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c854:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800c856:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800c858:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c85c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800c860:	bc30      	pop	{r4, r5}
 800c862:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c864:	2002      	movs	r0, #2
}
 800c866:	4770      	bx	lr

0800c868 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c868:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800c86c:	2a01      	cmp	r2, #1
 800c86e:	d037      	beq.n	800c8e0 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c870:	6802      	ldr	r2, [r0, #0]
 800c872:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800c874:	2024      	movs	r0, #36	; 0x24
{
 800c876:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800c878:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c87c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c87e:	6810      	ldr	r0, [r2, #0]
 800c880:	f020 0001 	bic.w	r0, r0, #1
 800c884:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c886:	6890      	ldr	r0, [r2, #8]
 800c888:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800c88c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c88e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c890:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c892:	b310      	cbz	r0, 800c8da <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c894:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c896:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c898:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c89c:	4911      	ldr	r1, [pc, #68]	; (800c8e4 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c89e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8a2:	4d11      	ldr	r5, [pc, #68]	; (800c8e8 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8a4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8a8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8ac:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8b0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8b2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8b6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8b8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8bc:	fbb1 f1f5 	udiv	r1, r1, r5
 800c8c0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800c8c4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8cc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800c8ce:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800c8d0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c8d4:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800c8d8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800c8da:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800c8dc:	4608      	mov	r0, r1
 800c8de:	e7ef      	b.n	800c8c0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800c8e0:	2002      	movs	r0, #2
}
 800c8e2:	4770      	bx	lr
 800c8e4:	0801a150 	.word	0x0801a150
 800c8e8:	0801a148 	.word	0x0801a148

0800c8ec <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800c8ec:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800c8f0:	2a01      	cmp	r2, #1
 800c8f2:	d037      	beq.n	800c964 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8f4:	6802      	ldr	r2, [r0, #0]
 800c8f6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800c8f8:	2024      	movs	r0, #36	; 0x24
{
 800c8fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800c8fc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c900:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c902:	6810      	ldr	r0, [r2, #0]
 800c904:	f020 0001 	bic.w	r0, r0, #1
 800c908:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c90a:	6890      	ldr	r0, [r2, #8]
 800c90c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800c910:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c912:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c914:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c916:	b310      	cbz	r0, 800c95e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c918:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c91a:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c91c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c920:	4911      	ldr	r1, [pc, #68]	; (800c968 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c922:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800c926:	4d11      	ldr	r5, [pc, #68]	; (800c96c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c928:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c92c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c930:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c934:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800c936:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c93a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c93c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c940:	fbb1 f1f5 	udiv	r1, r1, r5
 800c944:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800c948:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800c94a:	2100      	movs	r1, #0
 800c94c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c950:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800c952:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800c954:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800c958:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800c95c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800c95e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800c960:	4608      	mov	r0, r1
 800c962:	e7ef      	b.n	800c944 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800c964:	2002      	movs	r0, #2
}
 800c966:	4770      	bx	lr
 800c968:	0801a150 	.word	0x0801a150
 800c96c:	0801a148 	.word	0x0801a148

0800c970 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c970:	b084      	sub	sp, #16
 800c972:	4684      	mov	ip, r0
 800c974:	b500      	push	{lr}
 800c976:	b083      	sub	sp, #12
 800c978:	f10d 0e14 	add.w	lr, sp, #20
 800c97c:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c982:	2b01      	cmp	r3, #1
 800c984:	d13d      	bne.n	800ca02 <USB_CoreInit+0x92>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c986:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c988:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800c98c:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c98e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800c992:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c994:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c996:	68c2      	ldr	r2, [r0, #12]
 800c998:	ea03 0302 	and.w	r3, r3, r2
 800c99c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c99e:	68c3      	ldr	r3, [r0, #12]
 800c9a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c9a4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800c9a6:	d078      	beq.n	800ca9a <USB_CoreInit+0x12a>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800c9a8:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c9aa:	4a3e      	ldr	r2, [pc, #248]	; (800caa4 <USB_CoreInit+0x134>)
  __IO uint32_t count = 0U;
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	e003      	b.n	800c9b8 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9b0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	db3f      	blt.n	800ca38 <USB_CoreInit+0xc8>
    if (++count > 200000U)
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	d9f6      	bls.n	800c9b0 <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800c9c2:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800c9c4:	9b08      	ldr	r3, [sp, #32]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d116      	bne.n	800c9f8 <USB_CoreInit+0x88>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c9ca:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c9ce:	4b36      	ldr	r3, [pc, #216]	; (800caa8 <USB_CoreInit+0x138>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c9d0:	b292      	uxth	r2, r2
 800c9d2:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c9d6:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c9e0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c9e4:	f043 0306 	orr.w	r3, r3, #6
 800c9e8:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c9ec:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c9f0:	f043 0320 	orr.w	r3, r3, #32
 800c9f4:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800c9f8:	b003      	add	sp, #12
 800c9fa:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9fe:	b004      	add	sp, #16
 800ca00:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca02:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800ca04:	2100      	movs	r1, #0
    if (++count > 200000U)
 800ca06:	4a27      	ldr	r2, [pc, #156]	; (800caa4 <USB_CoreInit+0x134>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ca08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca0c:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800ca0e:	9101      	str	r1, [sp, #4]
 800ca10:	e003      	b.n	800ca1a <USB_CoreInit+0xaa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca12:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	db2a      	blt.n	800ca70 <USB_CoreInit+0x100>
    if (++count > 200000U)
 800ca1a:	9b01      	ldr	r3, [sp, #4]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	d9f6      	bls.n	800ca12 <USB_CoreInit+0xa2>
      return HAL_TIMEOUT;
 800ca24:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800ca26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca28:	b9db      	cbnz	r3, 800ca62 <USB_CoreInit+0xf2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ca2a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800ca2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca32:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800ca36:	e7c5      	b.n	800c9c4 <USB_CoreInit+0x54>

  /* Core Soft Reset */
  count = 0U;
 800ca38:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 800ca3a:	4a1a      	ldr	r2, [pc, #104]	; (800caa4 <USB_CoreInit+0x134>)
  count = 0U;
 800ca3c:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca3e:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	f8cc 3010 	str.w	r3, [ip, #16]
 800ca4a:	e004      	b.n	800ca56 <USB_CoreInit+0xe6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca4c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800ca50:	f010 0001 	ands.w	r0, r0, #1
 800ca54:	d0b6      	beq.n	800c9c4 <USB_CoreInit+0x54>
    if (++count > 200000U)
 800ca56:	9b00      	ldr	r3, [sp, #0]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	d9f5      	bls.n	800ca4c <USB_CoreInit+0xdc>
 800ca60:	e7af      	b.n	800c9c2 <USB_CoreInit+0x52>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ca62:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800ca66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca6a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800ca6e:	e7a9      	b.n	800c9c4 <USB_CoreInit+0x54>
  count = 0U;
 800ca70:	2300      	movs	r3, #0
    if (++count > 200000U)
 800ca72:	4a0c      	ldr	r2, [pc, #48]	; (800caa4 <USB_CoreInit+0x134>)
  count = 0U;
 800ca74:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca76:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800ca7a:	f043 0301 	orr.w	r3, r3, #1
 800ca7e:	f8cc 3010 	str.w	r3, [ip, #16]
 800ca82:	e004      	b.n	800ca8e <USB_CoreInit+0x11e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca84:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800ca88:	f010 0001 	ands.w	r0, r0, #1
 800ca8c:	d0cb      	beq.n	800ca26 <USB_CoreInit+0xb6>
    if (++count > 200000U)
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	3301      	adds	r3, #1
 800ca92:	4293      	cmp	r3, r2
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	d9f5      	bls.n	800ca84 <USB_CoreInit+0x114>
 800ca98:	e7c4      	b.n	800ca24 <USB_CoreInit+0xb4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ca9a:	68c3      	ldr	r3, [r0, #12]
 800ca9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caa0:	60c3      	str	r3, [r0, #12]
 800caa2:	e781      	b.n	800c9a8 <USB_CoreInit+0x38>
 800caa4:	00030d40 	.word	0x00030d40
 800caa8:	03ee0000 	.word	0x03ee0000

0800caac <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800caac:	2a02      	cmp	r2, #2
{
 800caae:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800cab0:	d00b      	beq.n	800caca <USB_SetTurnaroundTime+0x1e>
 800cab2:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cab6:	68d9      	ldr	r1, [r3, #12]
}
 800cab8:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800caba:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800cabe:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	ea42 020c 	orr.w	r2, r2, ip
 800cac6:	60da      	str	r2, [r3, #12]
}
 800cac8:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800caca:	4a23      	ldr	r2, [pc, #140]	; (800cb58 <USB_SetTurnaroundTime+0xac>)
 800cacc:	4823      	ldr	r0, [pc, #140]	; (800cb5c <USB_SetTurnaroundTime+0xb0>)
 800cace:	440a      	add	r2, r1
 800cad0:	4282      	cmp	r2, r0
 800cad2:	d92c      	bls.n	800cb2e <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cad4:	4a22      	ldr	r2, [pc, #136]	; (800cb60 <USB_SetTurnaroundTime+0xb4>)
 800cad6:	4823      	ldr	r0, [pc, #140]	; (800cb64 <USB_SetTurnaroundTime+0xb8>)
 800cad8:	440a      	add	r2, r1
 800cada:	4282      	cmp	r2, r0
 800cadc:	d92a      	bls.n	800cb34 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cade:	4a22      	ldr	r2, [pc, #136]	; (800cb68 <USB_SetTurnaroundTime+0xbc>)
 800cae0:	4822      	ldr	r0, [pc, #136]	; (800cb6c <USB_SetTurnaroundTime+0xc0>)
 800cae2:	440a      	add	r2, r1
 800cae4:	4282      	cmp	r2, r0
 800cae6:	d928      	bls.n	800cb3a <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cae8:	4a21      	ldr	r2, [pc, #132]	; (800cb70 <USB_SetTurnaroundTime+0xc4>)
 800caea:	4822      	ldr	r0, [pc, #136]	; (800cb74 <USB_SetTurnaroundTime+0xc8>)
 800caec:	440a      	add	r2, r1
 800caee:	4282      	cmp	r2, r0
 800caf0:	d326      	bcc.n	800cb40 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800caf2:	4a21      	ldr	r2, [pc, #132]	; (800cb78 <USB_SetTurnaroundTime+0xcc>)
 800caf4:	4821      	ldr	r0, [pc, #132]	; (800cb7c <USB_SetTurnaroundTime+0xd0>)
 800caf6:	440a      	add	r2, r1
 800caf8:	4282      	cmp	r2, r0
 800cafa:	d924      	bls.n	800cb46 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cafc:	4a20      	ldr	r2, [pc, #128]	; (800cb80 <USB_SetTurnaroundTime+0xd4>)
 800cafe:	4821      	ldr	r0, [pc, #132]	; (800cb84 <USB_SetTurnaroundTime+0xd8>)
 800cb00:	440a      	add	r2, r1
 800cb02:	4282      	cmp	r2, r0
 800cb04:	d322      	bcc.n	800cb4c <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cb06:	4a20      	ldr	r2, [pc, #128]	; (800cb88 <USB_SetTurnaroundTime+0xdc>)
 800cb08:	4820      	ldr	r0, [pc, #128]	; (800cb8c <USB_SetTurnaroundTime+0xe0>)
 800cb0a:	440a      	add	r2, r1
 800cb0c:	4282      	cmp	r2, r0
 800cb0e:	d3d0      	bcc.n	800cab2 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cb10:	4a1f      	ldr	r2, [pc, #124]	; (800cb90 <USB_SetTurnaroundTime+0xe4>)
 800cb12:	4820      	ldr	r0, [pc, #128]	; (800cb94 <USB_SetTurnaroundTime+0xe8>)
 800cb14:	440a      	add	r2, r1
 800cb16:	4282      	cmp	r2, r0
 800cb18:	d31b      	bcc.n	800cb52 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cb1a:	4a1f      	ldr	r2, [pc, #124]	; (800cb98 <USB_SetTurnaroundTime+0xec>)
 800cb1c:	481f      	ldr	r0, [pc, #124]	; (800cb9c <USB_SetTurnaroundTime+0xf0>)
 800cb1e:	440a      	add	r2, r1
 800cb20:	4282      	cmp	r2, r0
 800cb22:	bf34      	ite	cc
 800cb24:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800cb28:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800cb2c:	e7c3      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb2e:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800cb32:	e7c0      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb34:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800cb38:	e7bd      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb3a:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800cb3e:	e7ba      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb40:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800cb44:	e7b7      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb46:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800cb4a:	e7b4      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb4c:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800cb50:	e7b1      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb52:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800cb56:	e7ae      	b.n	800cab6 <USB_SetTurnaroundTime+0xa>
 800cb58:	ff275340 	.word	0xff275340
 800cb5c:	000c34ff 	.word	0x000c34ff
 800cb60:	ff1b1e40 	.word	0xff1b1e40
 800cb64:	000f423f 	.word	0x000f423f
 800cb68:	ff0bdc00 	.word	0xff0bdc00
 800cb6c:	00124f7f 	.word	0x00124f7f
 800cb70:	fef98c80 	.word	0xfef98c80
 800cb74:	0013d620 	.word	0x0013d620
 800cb78:	fee5b660 	.word	0xfee5b660
 800cb7c:	0016e35f 	.word	0x0016e35f
 800cb80:	feced300 	.word	0xfeced300
 800cb84:	001b7740 	.word	0x001b7740
 800cb88:	feb35bc0 	.word	0xfeb35bc0
 800cb8c:	002191c0 	.word	0x002191c0
 800cb90:	fe91ca00 	.word	0xfe91ca00
 800cb94:	00387520 	.word	0x00387520
 800cb98:	fe5954e0 	.word	0xfe5954e0
 800cb9c:	00419ce0 	.word	0x00419ce0

0800cba0 <USB_EnableGlobalInt>:
{
 800cba0:	4603      	mov	r3, r0
}
 800cba2:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cba4:	689a      	ldr	r2, [r3, #8]
 800cba6:	f042 0201 	orr.w	r2, r2, #1
 800cbaa:	609a      	str	r2, [r3, #8]
}
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop

0800cbb0 <USB_DisableGlobalInt>:
{
 800cbb0:	4603      	mov	r3, r0
}
 800cbb2:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cbb4:	689a      	ldr	r2, [r3, #8]
 800cbb6:	f022 0201 	bic.w	r2, r2, #1
 800cbba:	609a      	str	r2, [r3, #8]
}
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop

0800cbc0 <USB_SetCurrentMode>:
{
 800cbc0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbc2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cbc4:	2901      	cmp	r1, #1
{
 800cbc6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cbcc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800cbce:	d017      	beq.n	800cc00 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800cbd0:	b9a1      	cbnz	r1, 800cbfc <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cbd2:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800cbd4:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cbd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbda:	60c3      	str	r3, [r0, #12]
 800cbdc:	e001      	b.n	800cbe2 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cbde:	2c32      	cmp	r4, #50	; 0x32
 800cbe0:	d00c      	beq.n	800cbfc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800cbe2:	2001      	movs	r0, #1
      ms++;
 800cbe4:	4404      	add	r4, r0
      HAL_Delay(1U);
 800cbe6:	f7f8 fe09 	bl	80057fc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800cbea:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cbec:	07db      	lsls	r3, r3, #31
 800cbee:	d4f6      	bmi.n	800cbde <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800cbf0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800cbf4:	fab0 f080 	clz	r0, r0
 800cbf8:	0940      	lsrs	r0, r0, #5
}
 800cbfa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cbfc:	2001      	movs	r0, #1
}
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc00:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800cc02:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cc04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc08:	60c3      	str	r3, [r0, #12]
 800cc0a:	e001      	b.n	800cc10 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cc0c:	2c32      	cmp	r4, #50	; 0x32
 800cc0e:	d0f5      	beq.n	800cbfc <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800cc10:	2001      	movs	r0, #1
      ms++;
 800cc12:	4404      	add	r4, r0
      HAL_Delay(1U);
 800cc14:	f7f8 fdf2 	bl	80057fc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800cc18:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cc1a:	07da      	lsls	r2, r3, #31
 800cc1c:	d5f6      	bpl.n	800cc0c <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800cc1e:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800cc22:	fab0 f080 	clz	r0, r0
 800cc26:	0940      	lsrs	r0, r0, #5
 800cc28:	e7e7      	b.n	800cbfa <USB_SetCurrentMode+0x3a>
 800cc2a:	bf00      	nop

0800cc2c <USB_DevInit>:
{
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc32:	b083      	sub	sp, #12
 800cc34:	ac0b      	add	r4, sp, #44	; 0x2c
 800cc36:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800cc3e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800cc42:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800cc46:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800cc4a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800cc4e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800cc52:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800cc56:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800cc5a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800cc5e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800cc62:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800cc66:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800cc6a:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800cc6e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800cc72:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800cc76:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800cc7a:	2c00      	cmp	r4, #0
 800cc7c:	f040 80a8 	bne.w	800cdd0 <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800cc84:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800cc88:	f043 0302 	orr.w	r3, r3, #2
 800cc8c:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cc90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cc92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc96:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cc98:	6803      	ldr	r3, [r0, #0]
 800cc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc9e:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cca0:	6803      	ldr	r3, [r0, #0]
 800cca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca6:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ccae:	f8dc 3000 	ldr.w	r3, [ip]
 800ccb2:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	f000 80b0 	beq.w	800ce1e <USB_DevInit+0x1f2>
  USBx_DEVICE->DCFG |= speed;
 800ccbe:	f8dc 3000 	ldr.w	r3, [ip]
 800ccc2:	f043 0303 	orr.w	r3, r3, #3
 800ccc6:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800ccca:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cccc:	4a5c      	ldr	r2, [pc, #368]	; (800ce40 <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	e003      	b.n	800ccda <USB_DevInit+0xae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccd2:	6903      	ldr	r3, [r0, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f2c0 8091 	blt.w	800cdfc <USB_DevInit+0x1d0>
    if (++count > 200000U)
 800ccda:	9b00      	ldr	r3, [sp, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	4293      	cmp	r3, r2
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	d9f6      	bls.n	800ccd2 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800cce4:	f04f 0e01 	mov.w	lr, #1
  __IO uint32_t count = 0U;
 800cce8:	2300      	movs	r3, #0
    if (++count > 200000U)
 800ccea:	4a55      	ldr	r2, [pc, #340]	; (800ce40 <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	e002      	b.n	800ccf6 <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ccf0:	6903      	ldr	r3, [r0, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	db73      	blt.n	800cdde <USB_DevInit+0x1b2>
    if (++count > 200000U)
 800ccf6:	9b01      	ldr	r3, [sp, #4]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	d9f7      	bls.n	800ccf0 <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 800cd00:	f04f 0e01 	mov.w	lr, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd0a:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd0e:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd12:	b1d1      	cbz	r1, 800cd4a <USB_DevInit+0x11e>
 800cd14:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cd18:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd1c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800cd20:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd22:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800cd26:	e006      	b.n	800cd36 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800cd28:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd2a:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cd2c:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd2e:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd30:	3320      	adds	r3, #32
 800cd32:	4291      	cmp	r1, r2
 800cd34:	d030      	beq.n	800cd98 <USB_DevInit+0x16c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd36:	681d      	ldr	r5, [r3, #0]
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	daf5      	bge.n	800cd28 <USB_DevInit+0xfc>
      if (i == 0U)
 800cd3c:	b112      	cbz	r2, 800cd44 <USB_DevInit+0x118>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cd3e:	f8c3 8000 	str.w	r8, [r3]
 800cd42:	e7f2      	b.n	800cd2a <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd44:	f8c3 9000 	str.w	r9, [r3]
 800cd48:	e7ef      	b.n	800cd2a <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd4a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800cd4e:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd54:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd58:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800cd5c:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd5e:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800cd60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd62:	b91b      	cbnz	r3, 800cd6c <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd64:	6983      	ldr	r3, [r0, #24]
 800cd66:	f043 0310 	orr.w	r3, r3, #16
 800cd6a:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd6c:	6982      	ldr	r2, [r0, #24]
 800cd6e:	4b35      	ldr	r3, [pc, #212]	; (800ce44 <USB_DevInit+0x218>)
 800cd70:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800cd72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd74:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800cd76:	b11a      	cbz	r2, 800cd80 <USB_DevInit+0x154>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd78:	6983      	ldr	r3, [r0, #24]
 800cd7a:	f043 0308 	orr.w	r3, r3, #8
 800cd7e:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800cd80:	2c01      	cmp	r4, #1
 800cd82:	d103      	bne.n	800cd8c <USB_DevInit+0x160>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd84:	6982      	ldr	r2, [r0, #24]
 800cd86:	4b30      	ldr	r3, [pc, #192]	; (800ce48 <USB_DevInit+0x21c>)
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	6183      	str	r3, [r0, #24]
}
 800cd8c:	4670      	mov	r0, lr
 800cd8e:	b003      	add	sp, #12
 800cd90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd94:	b004      	add	sp, #16
 800cd96:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd9e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cda2:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cda6:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cda8:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800cdac:	e006      	b.n	800cdbc <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cdae:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdb0:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cdb2:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cdb4:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdb6:	3320      	adds	r3, #32
 800cdb8:	4291      	cmp	r1, r2
 800cdba:	d0c6      	beq.n	800cd4a <USB_DevInit+0x11e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdbc:	681d      	ldr	r5, [r3, #0]
 800cdbe:	2d00      	cmp	r5, #0
 800cdc0:	daf5      	bge.n	800cdae <USB_DevInit+0x182>
      if (i == 0U)
 800cdc2:	b112      	cbz	r2, 800cdca <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cdc4:	f8c3 8000 	str.w	r8, [r3]
 800cdc8:	e7f2      	b.n	800cdb0 <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cdca:	f8c3 9000 	str.w	r9, [r3]
 800cdce:	e7ef      	b.n	800cdb0 <USB_DevInit+0x184>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cdd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cdd2:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cdd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdda:	6383      	str	r3, [r0, #56]	; 0x38
 800cddc:	e764      	b.n	800cca8 <USB_DevInit+0x7c>
  count = 0U;
 800cdde:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cde0:	4a17      	ldr	r2, [pc, #92]	; (800ce40 <USB_DevInit+0x214>)
  count = 0U;
 800cde2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cde4:	2310      	movs	r3, #16
 800cde6:	6103      	str	r3, [r0, #16]
 800cde8:	e002      	b.n	800cdf0 <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdea:	6903      	ldr	r3, [r0, #16]
 800cdec:	06db      	lsls	r3, r3, #27
 800cdee:	d589      	bpl.n	800cd04 <USB_DevInit+0xd8>
    if (++count > 200000U)
 800cdf0:	9b01      	ldr	r3, [sp, #4]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	d9f7      	bls.n	800cdea <USB_DevInit+0x1be>
 800cdfa:	e781      	b.n	800cd00 <USB_DevInit+0xd4>
  count = 0U;
 800cdfc:	2300      	movs	r3, #0
    if (++count > 200000U)
 800cdfe:	4a10      	ldr	r2, [pc, #64]	; (800ce40 <USB_DevInit+0x214>)
  count = 0U;
 800ce00:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce02:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800ce06:	6103      	str	r3, [r0, #16]
 800ce08:	e003      	b.n	800ce12 <USB_DevInit+0x1e6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce0a:	6903      	ldr	r3, [r0, #16]
 800ce0c:	f013 0320 	ands.w	r3, r3, #32
 800ce10:	d00c      	beq.n	800ce2c <USB_DevInit+0x200>
    if (++count > 200000U)
 800ce12:	9b00      	ldr	r3, [sp, #0]
 800ce14:	3301      	adds	r3, #1
 800ce16:	4293      	cmp	r3, r2
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	d9f6      	bls.n	800ce0a <USB_DevInit+0x1de>
 800ce1c:	e762      	b.n	800cce4 <USB_DevInit+0xb8>
    if (cfg.speed == USBD_HS_SPEED)
 800ce1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce20:	b933      	cbnz	r3, 800ce30 <USB_DevInit+0x204>
  USBx_DEVICE->DCFG |= speed;
 800ce22:	f8dc 3000 	ldr.w	r3, [ip]
 800ce26:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ce2a:	e74e      	b.n	800ccca <USB_DevInit+0x9e>
  HAL_StatusTypeDef ret = HAL_OK;
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	e75b      	b.n	800cce8 <USB_DevInit+0xbc>
  USBx_DEVICE->DCFG |= speed;
 800ce30:	f8dc 3000 	ldr.w	r3, [ip]
 800ce34:	f043 0301 	orr.w	r3, r3, #1
 800ce38:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ce3c:	e745      	b.n	800ccca <USB_DevInit+0x9e>
 800ce3e:	bf00      	nop
 800ce40:	00030d40 	.word	0x00030d40
 800ce44:	803c3800 	.word	0x803c3800
 800ce48:	40000004 	.word	0x40000004

0800ce4c <USB_FlushTxFifo>:
{
 800ce4c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800ce4e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800ce50:	4a11      	ldr	r2, [pc, #68]	; (800ce98 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	e002      	b.n	800ce5c <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce56:	6903      	ldr	r3, [r0, #16]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	db07      	blt.n	800ce6c <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800ce5c:	9b01      	ldr	r3, [sp, #4]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	4293      	cmp	r3, r2
 800ce62:	9301      	str	r3, [sp, #4]
 800ce64:	d9f7      	bls.n	800ce56 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800ce66:	2003      	movs	r0, #3
}
 800ce68:	b002      	add	sp, #8
 800ce6a:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce6c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800ce6e:	2300      	movs	r3, #0
    if (++count > 200000U)
 800ce70:	4a09      	ldr	r2, [pc, #36]	; (800ce98 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce72:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800ce76:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce78:	6101      	str	r1, [r0, #16]
 800ce7a:	e003      	b.n	800ce84 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce7c:	6903      	ldr	r3, [r0, #16]
 800ce7e:	f013 0320 	ands.w	r3, r3, #32
 800ce82:	d005      	beq.n	800ce90 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800ce84:	9b01      	ldr	r3, [sp, #4]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	9301      	str	r3, [sp, #4]
 800ce8c:	d9f6      	bls.n	800ce7c <USB_FlushTxFifo+0x30>
 800ce8e:	e7ea      	b.n	800ce66 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800ce90:	4618      	mov	r0, r3
}
 800ce92:	b002      	add	sp, #8
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	00030d40 	.word	0x00030d40

0800ce9c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ce9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cea0:	f013 0006 	ands.w	r0, r3, #6
 800cea4:	d004      	beq.n	800ceb0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800cea6:	f013 0f02 	tst.w	r3, #2
 800ceaa:	bf14      	ite	ne
 800ceac:	2002      	movne	r0, #2
 800ceae:	200f      	moveq	r0, #15
}
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop

0800ceb4 <USB_ActivateEndpoint>:
{
 800ceb4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800ceb6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ceb8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d020      	beq.n	800cf00 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cebe:	f002 0c0f 	and.w	ip, r2, #15
 800cec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cec6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ceca:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cece:	fa03 f30c 	lsl.w	r3, r3, ip
 800ced2:	4323      	orrs	r3, r4
 800ced4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ced8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800cedc:	041b      	lsls	r3, r3, #16
 800cede:	d40c      	bmi.n	800cefa <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cee0:	688b      	ldr	r3, [r1, #8]
 800cee2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800cee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ceea:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ceec:	4914      	ldr	r1, [pc, #80]	; (800cf40 <USB_ActivateEndpoint+0x8c>)
 800ceee:	4323      	orrs	r3, r4
 800cef0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800cef4:	4319      	orrs	r1, r3
 800cef6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800cefa:	2000      	movs	r0, #0
 800cefc:	bc30      	pop	{r4, r5}
 800cefe:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf00:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800cf04:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf08:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf0c:	40ab      	lsls	r3, r5
 800cf0e:	69e5      	ldr	r5, [r4, #28]
 800cf10:	432b      	orrs	r3, r5
 800cf12:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf14:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800cf18:	041c      	lsls	r4, r3, #16
 800cf1a:	d4ee      	bmi.n	800cefa <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf1c:	688b      	ldr	r3, [r1, #8]
 800cf1e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800cf22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf26:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf28:	4905      	ldr	r1, [pc, #20]	; (800cf40 <USB_ActivateEndpoint+0x8c>)
 800cf2a:	432b      	orrs	r3, r5
 800cf2c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800cf30:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800cf34:	4311      	orrs	r1, r2
}
 800cf36:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf38:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	4770      	bx	lr
 800cf40:	10008000 	.word	0x10008000

0800cf44 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800cf44:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800cf46:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800cf48:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf4a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800cf4e:	d02a      	beq.n	800cfa6 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf50:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800cf54:	2a00      	cmp	r2, #0
 800cf56:	db19      	blt.n	800cf8c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cf5c:	f003 030f 	and.w	r3, r3, #15
 800cf60:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800cf64:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf68:	4a23      	ldr	r2, [pc, #140]	; (800cff8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf6a:	ea21 0103 	bic.w	r1, r1, r3
 800cf6e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf72:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800cf76:	ea21 0303 	bic.w	r3, r1, r3
 800cf7a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800cf7e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf80:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800cf84:	401a      	ands	r2, r3
 800cf86:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800cf8a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cf8c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800cf90:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cf94:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cf98:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800cf9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800cfa0:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800cfa4:	e7d8      	b.n	800cf58 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cfa6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800cfaa:	2a00      	cmp	r2, #0
 800cfac:	da0b      	bge.n	800cfc6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cfae:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800cfb2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cfb6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cfba:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800cfbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800cfc2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfc6:	f003 020f 	and.w	r2, r3, #15
 800cfca:	2301      	movs	r3, #1
 800cfcc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800cfd0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cfd2:	4a0a      	ldr	r2, [pc, #40]	; (800cffc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfd4:	ea21 0103 	bic.w	r1, r1, r3
 800cfd8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfdc:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800cfe0:	ea21 0303 	bic.w	r3, r1, r3
 800cfe4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800cfe8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cfea:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800cfee:	401a      	ands	r2, r3
 800cff0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	eff37800 	.word	0xeff37800
 800cffc:	ec337800 	.word	0xec337800

0800d000 <USB_EPStartXfer>:
{
 800d000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800d004:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d006:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d051      	beq.n	800d0b2 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d00e:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 800d012:	4c84      	ldr	r4, [pc, #528]	; (800d224 <USB_EPStartXfer+0x224>)
 800d014:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 800d018:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800d01c:	402c      	ands	r4, r5
 800d01e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d020:	4c81      	ldr	r4, [pc, #516]	; (800d228 <USB_EPStartXfer+0x228>)
 800d022:	691d      	ldr	r5, [r3, #16]
 800d024:	402c      	ands	r4, r5
 800d026:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800d028:	694c      	ldr	r4, [r1, #20]
 800d02a:	b384      	cbz	r4, 800d08e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d02c:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800d02e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d030:	4e7e      	ldr	r6, [pc, #504]	; (800d22c <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d032:	442c      	add	r4, r5
 800d034:	f104 34ff 	add.w	r4, r4, #4294967295
 800d038:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d03c:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 800d040:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d042:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d046:	691d      	ldr	r5, [r3, #16]
 800d048:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d04c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d050:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d052:	691d      	ldr	r5, [r3, #16]
 800d054:	ea44 0405 	orr.w	r4, r4, r5
 800d058:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800d05a:	d025      	beq.n	800d0a8 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 800d05c:	78cb      	ldrb	r3, [r1, #3]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d10c      	bne.n	800d07c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d062:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d066:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d06a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800d06e:	bf0c      	ite	eq
 800d070:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d074:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d078:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d07c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800d080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d084:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 800d088:	2000      	movs	r0, #0
 800d08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d08e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 800d090:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d092:	691d      	ldr	r5, [r3, #16]
 800d094:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800d098:	ea44 0405 	orr.w	r4, r4, r5
 800d09c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d09e:	691c      	ldr	r4, [r3, #16]
 800d0a0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d0a4:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800d0a6:	d1d9      	bne.n	800d05c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800d0a8:	68ca      	ldr	r2, [r1, #12]
 800d0aa:	2a00      	cmp	r2, #0
 800d0ac:	d0d6      	beq.n	800d05c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d0ae:	615a      	str	r2, [r3, #20]
 800d0b0:	e7d4      	b.n	800d05c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 800d0b2:	694d      	ldr	r5, [r1, #20]
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	d03d      	beq.n	800d134 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0b8:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 800d0bc:	4e59      	ldr	r6, [pc, #356]	; (800d224 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d0be:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0c2:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0c6:	4f58      	ldr	r7, [pc, #352]	; (800d228 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0c8:	ea08 0606 	and.w	r6, r8, r6
 800d0cc:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d0d0:	eb05 060e 	add.w	r6, r5, lr
 800d0d4:	3e01      	subs	r6, #1
 800d0d6:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0da:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800d0de:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d0e0:	4e52      	ldr	r6, [pc, #328]	; (800d22c <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0e2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d0e6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 800d0ea:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800d0ee:	433e      	orrs	r6, r7
 800d0f0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d0f4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 800d0f8:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800d0fc:	433e      	orrs	r6, r7
 800d0fe:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d102:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800d106:	f891 e003 	ldrb.w	lr, [r1, #3]
 800d10a:	f1be 0f01 	cmp.w	lr, #1
 800d10e:	d057      	beq.n	800d1c0 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 800d110:	2a01      	cmp	r2, #1
 800d112:	d072      	beq.n	800d1fa <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d114:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d118:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d11c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d120:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d124:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d128:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800d12c:	4313      	orrs	r3, r2
 800d12e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 800d132:	e7a9      	b.n	800d088 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d134:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 800d138:	4e3b      	ldr	r6, [pc, #236]	; (800d228 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d13a:	4c3a      	ldr	r4, [pc, #232]	; (800d224 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 800d13c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d13e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800d142:	ea06 0607 	and.w	r6, r6, r7
 800d146:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d14a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800d14e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800d152:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d156:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800d15a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d15e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d162:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800d166:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 800d16a:	d03a      	beq.n	800d1e2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d16c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d170:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d174:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800d178:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d17c:	d184      	bne.n	800d088 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d17e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d182:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d186:	6833      	ldr	r3, [r6, #0]
 800d188:	bf0c      	ite	eq
 800d18a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d18e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d192:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 800d194:	2a00      	cmp	r2, #0
 800d196:	f47f af77 	bne.w	800d088 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d19a:	b2ad      	uxth	r5, r5
 800d19c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 800d19e:	08ad      	lsrs	r5, r5, #2
 800d1a0:	f43f af72 	beq.w	800d088 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d1a4:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1a6:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 800d1aa:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800d1ae:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800d1b2:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800d1b6:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d1b8:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 800d1bc:	d1f9      	bne.n	800d1b2 <USB_EPStartXfer+0x1b2>
 800d1be:	e763      	b.n	800d088 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d1c0:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 800d1c2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d1c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d1c8:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d1ca:	6933      	ldr	r3, [r6, #16]
 800d1cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1d0:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 800d1d2:	d017      	beq.n	800d204 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1d4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800d1d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1dc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800d1e0:	e7cd      	b.n	800d17e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 800d1e2:	690b      	ldr	r3, [r1, #16]
 800d1e4:	b963      	cbnz	r3, 800d200 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 800d1e6:	f1be 0f01 	cmp.w	lr, #1
 800d1ea:	d00e      	beq.n	800d20a <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1ec:	6833      	ldr	r3, [r6, #0]
}
 800d1ee:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1f4:	6033      	str	r3, [r6, #0]
}
 800d1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800d1fa:	690b      	ldr	r3, [r1, #16]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0f5      	beq.n	800d1ec <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d200:	6173      	str	r3, [r6, #20]
 800d202:	e7f0      	b.n	800d1e6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 800d204:	690b      	ldr	r3, [r1, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1fa      	bne.n	800d200 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d20a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800d20e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d212:	6833      	ldr	r3, [r6, #0]
 800d214:	bf0c      	ite	eq
 800d216:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d21a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800d21e:	6033      	str	r3, [r6, #0]
 800d220:	e7e4      	b.n	800d1ec <USB_EPStartXfer+0x1ec>
 800d222:	bf00      	nop
 800d224:	fff80000 	.word	0xfff80000
 800d228:	e007ffff 	.word	0xe007ffff
 800d22c:	1ff80000 	.word	0x1ff80000

0800d230 <USB_EP0StartXfer>:
{
 800d230:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800d232:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d234:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d236:	2c01      	cmp	r4, #1
 800d238:	d026      	beq.n	800d288 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d23a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d23e:	4c57      	ldr	r4, [pc, #348]	; (800d39c <USB_EP0StartXfer+0x16c>)
 800d240:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 800d244:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800d248:	402c      	ands	r4, r5
 800d24a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d24c:	4c54      	ldr	r4, [pc, #336]	; (800d3a0 <USB_EP0StartXfer+0x170>)
 800d24e:	691d      	ldr	r5, [r3, #16]
 800d250:	402c      	ands	r4, r5
 800d252:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800d254:	694c      	ldr	r4, [r1, #20]
 800d256:	b9a4      	cbnz	r4, 800d282 <USB_EP0StartXfer+0x52>
      if (ep->xfer_len > ep->maxpacket)
 800d258:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d25a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d25c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800d260:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d262:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800d266:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d268:	691d      	ldr	r5, [r3, #16]
 800d26a:	ea44 0405 	orr.w	r4, r4, r5
 800d26e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800d270:	d049      	beq.n	800d306 <USB_EP0StartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d272:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d276:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d27a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d27e:	2000      	movs	r0, #0
 800d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 800d282:	688c      	ldr	r4, [r1, #8]
 800d284:	614c      	str	r4, [r1, #20]
 800d286:	e7e8      	b.n	800d25a <USB_EP0StartXfer+0x2a>
    if (ep->xfer_len == 0U)
 800d288:	694c      	ldr	r4, [r1, #20]
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	d040      	beq.n	800d310 <USB_EP0StartXfer+0xe0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d28e:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800d292:	4f42      	ldr	r7, [pc, #264]	; (800d39c <USB_EP0StartXfer+0x16c>)
      if (ep->xfer_len > ep->maxpacket)
 800d294:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d298:	f8d5 c910 	ldr.w	ip, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d29c:	4e40      	ldr	r6, [pc, #256]	; (800d3a0 <USB_EP0StartXfer+0x170>)
      if (ep->xfer_len > ep->maxpacket)
 800d29e:	4574      	cmp	r4, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2a0:	ea0c 0707 	and.w	r7, ip, r7
 800d2a4:	f505 6c10 	add.w	ip, r5, #2304	; 0x900
 800d2a8:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2ac:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 800d2b0:	ea06 0607 	and.w	r6, r6, r7
 800d2b4:	f8c5 6910 	str.w	r6, [r5, #2320]	; 0x910
      if (ep->xfer_len > ep->maxpacket)
 800d2b8:	d958      	bls.n	800d36c <USB_EP0StartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2ba:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800d2be:	2a01      	cmp	r2, #1
        ep->xfer_len = ep->maxpacket;
 800d2c0:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2c4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800d2c8:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2cc:	f3ce 0412 	ubfx	r4, lr, #0, #19
 800d2d0:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800d2d4:	ea44 0406 	orr.w	r4, r4, r6
 800d2d8:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800d2dc:	d03a      	beq.n	800d354 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2de:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d2e2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800d2e6:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d2ea:	f1be 0f00 	cmp.w	lr, #0
 800d2ee:	d0c6      	beq.n	800d27e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d2f0:	f003 010f 	and.w	r1, r3, #15
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800d2fa:	408b      	lsls	r3, r1
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800d302:	2000      	movs	r0, #0
 800d304:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800d306:	68ca      	ldr	r2, [r1, #12]
 800d308:	2a00      	cmp	r2, #0
 800d30a:	d0b2      	beq.n	800d272 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d30c:	615a      	str	r2, [r3, #20]
 800d30e:	e7b0      	b.n	800d272 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d310:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800d314:	4b22      	ldr	r3, [pc, #136]	; (800d3a0 <USB_EP0StartXfer+0x170>)
    if (dma == 1U)
 800d316:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d318:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800d31c:	f500 6c10 	add.w	ip, r0, #2304	; 0x900
 800d320:	ea03 0304 	and.w	r3, r3, r4
 800d324:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d328:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800d32c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d330:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d334:	4b19      	ldr	r3, [pc, #100]	; (800d39c <USB_EP0StartXfer+0x16c>)
 800d336:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800d33a:	ea03 0304 	and.w	r3, r3, r4
 800d33e:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
 800d342:	d007      	beq.n	800d354 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d344:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d348:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d34c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d350:	2000      	movs	r0, #0
 800d352:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800d354:	690b      	ldr	r3, [r1, #16]
 800d356:	b10b      	cbz	r3, 800d35c <USB_EP0StartXfer+0x12c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d358:	f8cc 3014 	str.w	r3, [ip, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d35c:	f8dc 3000 	ldr.w	r3, [ip]
}
 800d360:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d366:	f8cc 3000 	str.w	r3, [ip]
}
 800d36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d36c:	f8dc 6010 	ldr.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d370:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800d374:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d376:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800d37a:	f8cc 6010 	str.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d37e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800d382:	ea44 0406 	orr.w	r4, r4, r6
 800d386:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800d38a:	d0e3      	beq.n	800d354 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d38c:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800d390:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800d394:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800d398:	e7aa      	b.n	800d2f0 <USB_EP0StartXfer+0xc0>
 800d39a:	bf00      	nop
 800d39c:	fff80000 	.word	0xfff80000
 800d3a0:	e007ffff 	.word	0xe007ffff

0800d3a4 <USB_WritePacket>:
{
 800d3a4:	b410      	push	{r4}
 800d3a6:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800d3aa:	b964      	cbnz	r4, 800d3c6 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d3ac:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800d3ae:	089b      	lsrs	r3, r3, #2
 800d3b0:	d009      	beq.n	800d3c6 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d3b2:	3201      	adds	r2, #1
 800d3b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d3b8:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800d3bc:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800d3c0:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d3c2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800d3c4:	d1fa      	bne.n	800d3bc <USB_WritePacket+0x18>
}
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop

0800d3d0 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800d3d0:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800d3d8:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800d3dc:	d01c      	beq.n	800d418 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d3de:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800d3e2:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d3e8:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800d3ec:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d3ee:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800d3f2:	d1f8      	bne.n	800d3e6 <USB_ReadPacket+0x16>
    pDest++;
 800d3f4:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800d3f8:	b16e      	cbz	r6, 800d416 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d3fa:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800d3fe:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d400:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800d402:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d404:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800d406:	b12b      	cbz	r3, 800d414 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d408:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800d40a:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d40c:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800d40e:	d001      	beq.n	800d414 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d410:	0c12      	lsrs	r2, r2, #16
 800d412:	7082      	strb	r2, [r0, #2]
      pDest++;
 800d414:	4430      	add	r0, r6
}
 800d416:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800d418:	4608      	mov	r0, r1
 800d41a:	e7ed      	b.n	800d3f8 <USB_ReadPacket+0x28>

0800d41c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800d41c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d41e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d420:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d422:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d426:	d00c      	beq.n	800d442 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d428:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800d42c:	b10b      	cbz	r3, 800d432 <USB_EPSetStall+0x16>
 800d42e:	2a00      	cmp	r2, #0
 800d430:	da14      	bge.n	800d45c <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d432:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d43a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d43e:	2000      	movs	r0, #0
 800d440:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d442:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800d446:	2a00      	cmp	r2, #0
 800d448:	db00      	blt.n	800d44c <USB_EPSetStall+0x30>
 800d44a:	b973      	cbnz	r3, 800d46a <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d44c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d454:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d458:	2000      	movs	r0, #0
 800d45a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d45c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d460:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d464:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800d468:	e7e3      	b.n	800d432 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d46a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d46e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d472:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d476:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d47a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d47e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800d482:	e7e9      	b.n	800d458 <USB_EPSetStall+0x3c>

0800d484 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800d484:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800d486:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800d488:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d48a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800d48e:	d013      	beq.n	800d4b8 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d490:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d498:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d49c:	78cb      	ldrb	r3, [r1, #3]
 800d49e:	3b02      	subs	r3, #2
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d901      	bls.n	800d4a8 <USB_EPClearStall+0x24>
}
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d4a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d4ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d4b8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d4bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d4c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d4c4:	78cb      	ldrb	r3, [r1, #3]
 800d4c6:	3b02      	subs	r3, #2
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d8eb      	bhi.n	800d4a4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d4cc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800d4d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4d4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800d4d8:	2000      	movs	r0, #0
 800d4da:	4770      	bx	lr

0800d4dc <USB_SetDevAddress>:
{
 800d4dc:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d4de:	0109      	lsls	r1, r1, #4
}
 800d4e0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d4e2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d4e6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d4ea:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800d4ee:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d4f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800d4f6:	4311      	orrs	r1, r2
 800d4f8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop

0800d500 <USB_DevConnect>:
{
 800d500:	4603      	mov	r3, r0
}
 800d502:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d504:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d508:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d50c:	f022 0203 	bic.w	r2, r2, #3
 800d510:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d514:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800d518:	f023 0302 	bic.w	r3, r3, #2
 800d51c:	604b      	str	r3, [r1, #4]
}
 800d51e:	4770      	bx	lr

0800d520 <USB_DevDisconnect>:
{
 800d520:	4603      	mov	r3, r0
}
 800d522:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d524:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d528:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d52c:	f022 0203 	bic.w	r2, r2, #3
 800d530:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d534:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800d538:	f043 0302 	orr.w	r3, r3, #2
 800d53c:	604b      	str	r3, [r1, #4]
}
 800d53e:	4770      	bx	lr

0800d540 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d540:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d542:	6980      	ldr	r0, [r0, #24]
}
 800d544:	4010      	ands	r0, r2
 800d546:	4770      	bx	lr

0800d548 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d548:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d54c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800d550:	4018      	ands	r0, r3
}
 800d552:	0c00      	lsrs	r0, r0, #16
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop

0800d558 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800d558:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d55c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800d560:	4018      	ands	r0, r3
}
 800d562:	b280      	uxth	r0, r0
 800d564:	4770      	bx	lr
 800d566:	bf00      	nop

0800d568 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d568:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d56c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d570:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d574:	6940      	ldr	r0, [r0, #20]
}
 800d576:	4010      	ands	r0, r2
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop

0800d57c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800d57c:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d580:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d584:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d588:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d58c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d590:	40cb      	lsrs	r3, r1
 800d592:	01db      	lsls	r3, r3, #7
 800d594:	b2db      	uxtb	r3, r3
 800d596:	4313      	orrs	r3, r2
}
 800d598:	4018      	ands	r0, r3
 800d59a:	4770      	bx	lr

0800d59c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d59c:	6940      	ldr	r0, [r0, #20]
}
 800d59e:	f000 0001 	and.w	r0, r0, #1
 800d5a2:	4770      	bx	lr

0800d5a4 <USB_ActivateSetup>:
{
 800d5a4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d5a6:	4a09      	ldr	r2, [pc, #36]	; (800d5cc <USB_ActivateSetup+0x28>)
}
 800d5a8:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d5aa:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800d5ae:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d5b0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800d5b4:	4022      	ands	r2, r4
}
 800d5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d5ba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d5be:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800d5c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5c6:	604b      	str	r3, [r1, #4]
}
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	fffff800 	.word	0xfffff800

0800d5d0 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d5d0:	4b14      	ldr	r3, [pc, #80]	; (800d624 <USB_EP0_OutStart+0x54>)
{
 800d5d2:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d5d4:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d5d6:	429c      	cmp	r4, r3
 800d5d8:	d81a      	bhi.n	800d610 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5da:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d5de:	2300      	movs	r3, #0
  if (dma == 1U)
 800d5e0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d5e2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d5e4:	6903      	ldr	r3, [r0, #16]
 800d5e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5ea:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d5ec:	6903      	ldr	r3, [r0, #16]
 800d5ee:	f043 0318 	orr.w	r3, r3, #24
 800d5f2:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d5f4:	6903      	ldr	r3, [r0, #16]
 800d5f6:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d5fa:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800d5fc:	d104      	bne.n	800d608 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d5fe:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d600:	6803      	ldr	r3, [r0, #0]
 800d602:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d606:	6003      	str	r3, [r0, #0]
}
 800d608:	2000      	movs	r0, #0
 800d60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d60e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d610:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800d614:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dae0      	bge.n	800d5de <USB_EP0_OutStart+0xe>
}
 800d61c:	2000      	movs	r0, #0
 800d61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	4f54300a 	.word	0x4f54300a

0800d628 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d628:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d62a:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800d62e:	b194      	cbz	r4, 800d656 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d630:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800d634:	b16b      	cbz	r3, 800d652 <USBD_CDC_EP0_RxReady+0x2a>
 800d636:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800d63a:	28ff      	cmp	r0, #255	; 0xff
 800d63c:	d009      	beq.n	800d652 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	4621      	mov	r1, r4
 800d642:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800d646:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800d648:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800d64a:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800d64c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800d650:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800d652:	2000      	movs	r0, #0
}
 800d654:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800d656:	2003      	movs	r0, #3
}
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	bf00      	nop

0800d65c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d65c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d65e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800d660:	4801      	ldr	r0, [pc, #4]	; (800d668 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d662:	801a      	strh	r2, [r3, #0]
}
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	24000354 	.word	0x24000354

0800d66c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d66c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d66e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800d670:	4801      	ldr	r0, [pc, #4]	; (800d678 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d672:	801a      	strh	r2, [r3, #0]
}
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	24000398 	.word	0x24000398

0800d67c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d67c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d67e:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800d680:	4801      	ldr	r0, [pc, #4]	; (800d688 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d682:	801a      	strh	r2, [r3, #0]
}
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	240003e8 	.word	0x240003e8

0800d68c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d68c:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d68e:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800d690:	4801      	ldr	r0, [pc, #4]	; (800d698 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d692:	801a      	strh	r2, [r3, #0]
}
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop
 800d698:	240003dc 	.word	0x240003dc

0800d69c <USBD_CDC_DataOut>:
{
 800d69c:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d69e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800d6a2:	b17d      	cbz	r5, 800d6c4 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	f001 f91f 	bl	800e8e8 <USBD_LL_GetRxDataSize>
 800d6aa:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d6ac:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800d6b0:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800d6b4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800d6b8:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d6ba:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d6be:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d6c0:	2000      	movs	r0, #0
}
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800d6c4:	2003      	movs	r0, #3
}
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}

0800d6c8 <USBD_CDC_DataIn>:
{
 800d6c8:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800d6ca:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800d6ce:	b36d      	cbz	r5, 800d72c <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d6d0:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800d6d4:	4684      	mov	ip, r0
 800d6d6:	460a      	mov	r2, r1
 800d6d8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800d6dc:	f8de 3018 	ldr.w	r3, [lr, #24]
 800d6e0:	b96b      	cbnz	r3, 800d6fe <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d6e2:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800d6e6:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d6e8:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800d6ea:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d6ee:	b1db      	cbz	r3, 800d728 <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6f0:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800d6f4:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800d6f8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800d6fa:	4620      	mov	r0, r4
}
 800d6fc:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d6fe:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800d702:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800d706:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800d70a:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800d70c:	fbb3 f6f4 	udiv	r6, r3, r4
 800d710:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d714:	2c00      	cmp	r4, #0
 800d716:	d1e4      	bne.n	800d6e2 <USBD_CDC_DataIn+0x1a>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d718:	4623      	mov	r3, r4
 800d71a:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800d71c:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d720:	f001 f8c6 	bl	800e8b0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800d724:	4620      	mov	r0, r4
}
 800d726:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800d728:	4618      	mov	r0, r3
}
 800d72a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800d72c:	2003      	movs	r0, #3
}
 800d72e:	bd70      	pop	{r4, r5, r6, pc}

0800d730 <USBD_CDC_Setup>:
{
 800d730:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 800d732:	2300      	movs	r3, #0
{
 800d734:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d736:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800d73a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800d73e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800d742:	2d00      	cmp	r5, #0
 800d744:	d067      	beq.n	800d816 <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d746:	f891 c000 	ldrb.w	ip, [r1]
 800d74a:	4606      	mov	r6, r0
 800d74c:	460c      	mov	r4, r1
 800d74e:	f01c 0760 	ands.w	r7, ip, #96	; 0x60
 800d752:	d01e      	beq.n	800d792 <USBD_CDC_Setup+0x62>
 800d754:	2f20      	cmp	r7, #32
 800d756:	d007      	beq.n	800d768 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800d758:	4621      	mov	r1, r4
 800d75a:	4630      	mov	r0, r6
          ret = USBD_FAIL;
 800d75c:	2703      	movs	r7, #3
          USBD_CtlError(pdev, req);
 800d75e:	f000 fd45 	bl	800e1ec <USBD_CtlError>
}
 800d762:	4638      	mov	r0, r7
 800d764:	b003      	add	sp, #12
 800d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800d768:	88ca      	ldrh	r2, [r1, #6]
 800d76a:	b38a      	cbz	r2, 800d7d0 <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800d76c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800d770:	d055      	beq.n	800d81e <USBD_CDC_Setup+0xee>
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	461f      	mov	r7, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d774:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800d778:	4629      	mov	r1, r5
 800d77a:	7860      	ldrb	r0, [r4, #1]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d780:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d782:	4629      	mov	r1, r5
 800d784:	4630      	mov	r0, r6
 800d786:	2a07      	cmp	r2, #7
 800d788:	bf28      	it	cs
 800d78a:	2207      	movcs	r2, #7
 800d78c:	f000 fd64 	bl	800e258 <USBD_CtlSendData>
 800d790:	e7e7      	b.n	800d762 <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800d792:	784b      	ldrb	r3, [r1, #1]
 800d794:	2b0b      	cmp	r3, #11
 800d796:	d8df      	bhi.n	800d758 <USBD_CDC_Setup+0x28>
 800d798:	a201      	add	r2, pc, #4	; (adr r2, 800d7a0 <USBD_CDC_Setup+0x70>)
 800d79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d79e:	bf00      	nop
 800d7a0:	0800d801 	.word	0x0800d801
 800d7a4:	0800d763 	.word	0x0800d763
 800d7a8:	0800d759 	.word	0x0800d759
 800d7ac:	0800d759 	.word	0x0800d759
 800d7b0:	0800d759 	.word	0x0800d759
 800d7b4:	0800d759 	.word	0x0800d759
 800d7b8:	0800d759 	.word	0x0800d759
 800d7bc:	0800d759 	.word	0x0800d759
 800d7c0:	0800d759 	.word	0x0800d759
 800d7c4:	0800d759 	.word	0x0800d759
 800d7c8:	0800d7ed 	.word	0x0800d7ed
 800d7cc:	0800d7e3 	.word	0x0800d7e3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d7d0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800d7d4:	4617      	mov	r7, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d7d6:	7848      	ldrb	r0, [r1, #1]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	4798      	blx	r3
}
 800d7dc:	4638      	mov	r0, r7
 800d7de:	b003      	add	sp, #12
 800d7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d7e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d0bb      	beq.n	800d762 <USBD_CDC_Setup+0x32>
 800d7ea:	e7b5      	b.n	800d758 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800d7f0:	2b03      	cmp	r3, #3
 800d7f2:	d1b1      	bne.n	800d758 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f10d 0105 	add.w	r1, sp, #5
 800d7fa:	f000 fd2d 	bl	800e258 <USBD_CtlSendData>
 800d7fe:	e7b0      	b.n	800d762 <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d800:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800d804:	2a03      	cmp	r2, #3
 800d806:	d1a7      	bne.n	800d758 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d808:	2202      	movs	r2, #2
 800d80a:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800d80e:	461f      	mov	r7, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d810:	f000 fd22 	bl	800e258 <USBD_CtlSendData>
 800d814:	e7a5      	b.n	800d762 <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800d816:	2703      	movs	r7, #3
}
 800d818:	4638      	mov	r0, r7
 800d81a:	b003      	add	sp, #12
 800d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 800d81e:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 800d820:	461f      	mov	r7, r3
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d822:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
          hcdc->CmdOpCode = req->bRequest;
 800d826:	f885 1200 	strb.w	r1, [r5, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d82a:	4629      	mov	r1, r5
 800d82c:	f000 fd2c 	bl	800e288 <USBD_CtlPrepareRx>
 800d830:	e797      	b.n	800d762 <USBD_CDC_Setup+0x32>
 800d832:	bf00      	nop

0800d834 <USBD_CDC_DeInit>:
{
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d838:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d83a:	2181      	movs	r1, #129	; 0x81
 800d83c:	f000 ffec 	bl	800e818 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d840:	2101      	movs	r1, #1
 800d842:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d844:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d846:	f000 ffe7 	bl	800e818 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d84a:	2182      	movs	r1, #130	; 0x82
 800d84c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d84e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d852:	f000 ffe1 	bl	800e818 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800d856:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d85a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800d85c:	b14b      	cbz	r3, 800d872 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d85e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d866:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800d86a:	f001 f845 	bl	800e8f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800d86e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800d872:	2000      	movs	r0, #0
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	bf00      	nop

0800d878 <USBD_CDC_Init>:
{
 800d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d87e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d882:	f001 f835 	bl	800e8f0 <USBD_static_malloc>
  if (hcdc == NULL)
 800d886:	4605      	mov	r5, r0
 800d888:	2800      	cmp	r0, #0
 800d88a:	d04c      	beq.n	800d926 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d88c:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800d88e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d892:	b393      	cbz	r3, 800d8fa <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d894:	2340      	movs	r3, #64	; 0x40
 800d896:	2202      	movs	r2, #2
 800d898:	2181      	movs	r1, #129	; 0x81
 800d89a:	4620      	mov	r0, r4
 800d89c:	f000 ffaa 	bl	800e7f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d8a0:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d8a2:	2340      	movs	r3, #64	; 0x40
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d8a8:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f000 ffa2 	bl	800e7f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d8b0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d8b2:	2203      	movs	r2, #3
 800d8b4:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d8b6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d8ba:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d8bc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d8c0:	2308      	movs	r3, #8
 800d8c2:	f000 ff97 	bl	800e7f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d8c6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d8ca:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800d8ce:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d8d0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4798      	blx	r3
  hcdc->TxState = 0U;
 800d8d8:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800d8dc:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8e0:	7c26      	ldrb	r6, [r4, #16]
 800d8e2:	b9ae      	cbnz	r6, 800d910 <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d8e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8e8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800d8ec:	4641      	mov	r1, r8
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 ffec 	bl	800e8cc <USBD_LL_PrepareReceive>
}
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d8fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8fe:	2202      	movs	r2, #2
 800d900:	2181      	movs	r1, #129	; 0x81
 800d902:	4620      	mov	r0, r4
 800d904:	f000 ff76 	bl	800e7f4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d908:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d90a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d90e:	e7c9      	b.n	800d8a4 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 800d910:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d912:	2340      	movs	r3, #64	; 0x40
 800d914:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800d918:	4641      	mov	r1, r8
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 ffd6 	bl	800e8cc <USBD_LL_PrepareReceive>
}
 800d920:	4630      	mov	r0, r6
 800d922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800d926:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800d928:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800d92c:	4630      	mov	r0, r6
 800d92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d932:	bf00      	nop

0800d934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d934:	4603      	mov	r3, r0
  if (fops == NULL)
 800d936:	b119      	cbz	r1, 800d940 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 800d938:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 800d93a:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 800d93e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800d940:	2003      	movs	r0, #3
}
 800d942:	4770      	bx	lr

0800d944 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d944:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800d948:	b12b      	cbz	r3, 800d956 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800d94a:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800d94c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d950:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800d954:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800d956:	2003      	movs	r0, #3
}
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop

0800d95c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d95c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800d960:	b11b      	cbz	r3, 800d96a <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800d962:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800d964:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800d968:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800d96a:	2003      	movs	r0, #3
}
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop

0800d970 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d970:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800d974:	b192      	cbz	r2, 800d99c <USBD_CDC_TransmitPacket+0x2c>
{
 800d976:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800d978:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800d97c:	b10c      	cbz	r4, 800d982 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d97e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800d980:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800d982:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d984:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800d986:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d98a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d98e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d992:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d994:	f000 ff8c 	bl	800e8b0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800d998:	4620      	mov	r0, r4
}
 800d99a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800d99c:	2003      	movs	r0, #3
}
 800d99e:	4770      	bx	lr

0800d9a0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9a0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800d9a4:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800d9a6:	b19a      	cbz	r2, 800d9d0 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9a8:	7c04      	ldrb	r4, [r0, #16]
 800d9aa:	b144      	cbz	r4, 800d9be <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d9ac:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9ae:	2340      	movs	r3, #64	; 0x40
 800d9b0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	f000 ff89 	bl	800e8cc <USBD_LL_PrepareReceive>
}
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9c2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800d9c6:	2101      	movs	r1, #1
 800d9c8:	f000 ff80 	bl	800e8cc <USBD_LL_PrepareReceive>
}
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800d9d0:	2403      	movs	r4, #3
}
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	bd10      	pop	{r4, pc}
 800d9d6:	bf00      	nop

0800d9d8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d9d8:	b178      	cbz	r0, 800d9fa <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d9e0:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d9e4:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d9e8:	b109      	cbz	r1, 800d9ee <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800d9ea:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9ee:	2301      	movs	r3, #1
  pdev->id = id;
 800d9f0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9f2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d9f6:	f000 beaf 	b.w	800e758 <USBD_LL_Init>

  return ret;
}
 800d9fa:	2003      	movs	r0, #3
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop

0800da00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da00:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800da02:	2400      	movs	r4, #0
{
 800da04:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800da06:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800da0a:	b181      	cbz	r1, 800da2e <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800da0c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800da0e:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800da10:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800da14:	b143      	cbz	r3, 800da28 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800da16:	f10d 0006 	add.w	r0, sp, #6
 800da1a:	4798      	blx	r3
 800da1c:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800da1e:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800da20:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800da24:	b003      	add	sp, #12
 800da26:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800da28:	4618      	mov	r0, r3
}
 800da2a:	b003      	add	sp, #12
 800da2c:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800da2e:	2003      	movs	r0, #3
}
 800da30:	b003      	add	sp, #12
 800da32:	bd30      	pop	{r4, r5, pc}

0800da34 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800da34:	f000 bed0 	b.w	800e7d8 <USBD_LL_Start>

0800da38 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800da38:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800da3c:	b10b      	cbz	r3, 800da42 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4718      	bx	r3
  }

  return ret;
}
 800da42:	2003      	movs	r0, #3
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop

0800da48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da48:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800da4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800da4e:	b10b      	cbz	r3, 800da54 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	4798      	blx	r3
  }

  return USBD_OK;
}
 800da54:	2000      	movs	r0, #0
 800da56:	bd08      	pop	{r3, pc}

0800da58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da58:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da5a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800da5e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da60:	4628      	mov	r0, r5
 800da62:	f000 fbb7 	bl	800e1d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800da66:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800da6a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800da6e:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800da70:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800da74:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800da78:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d009      	beq.n	800da94 <USBD_LL_SetupStage+0x3c>
 800da80:	2b02      	cmp	r3, #2
 800da82:	d013      	beq.n	800daac <USBD_LL_SetupStage+0x54>
 800da84:	b163      	cbz	r3, 800daa0 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da86:	4620      	mov	r0, r4
 800da88:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800da8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da90:	f000 bed0 	b.w	800e834 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da94:	4629      	mov	r1, r5
 800da96:	4620      	mov	r0, r4
}
 800da98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da9c:	f000 bac6 	b.w	800e02c <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800daa0:	4629      	mov	r1, r5
 800daa2:	4620      	mov	r0, r4
}
 800daa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800daa8:	f000 b92a 	b.w	800dd00 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800daac:	4629      	mov	r1, r5
 800daae:	4620      	mov	r0, r4
}
 800dab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dab4:	f000 baf2 	b.w	800e09c <USBD_StdEPReq>

0800dab8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dabc:	b929      	cbnz	r1, 800daca <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dabe:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d00d      	beq.n	800dae2 <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800dac6:	2000      	movs	r0, #0
 800dac8:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d1f9      	bne.n	800dac6 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800dad2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d0f4      	beq.n	800dac6 <USBD_LL_DataOutStage+0xe>
}
 800dadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dae0:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800dae2:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800dae6:	42ab      	cmp	r3, r5
 800dae8:	d808      	bhi.n	800dafc <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d00f      	beq.n	800db12 <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 fbe0 	bl	800e2b8 <USBD_CtlSendStatus>
}
 800daf8:	2000      	movs	r0, #0
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800dafc:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dafe:	4611      	mov	r1, r2
 800db00:	462a      	mov	r2, r5
 800db02:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800db04:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800db08:	bf28      	it	cs
 800db0a:	461a      	movcs	r2, r3
 800db0c:	f000 fbca 	bl	800e2a4 <USBD_CtlContinueRx>
 800db10:	e7d9      	b.n	800dac6 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800db12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d0ea      	beq.n	800daf2 <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800db1c:	4798      	blx	r3
 800db1e:	e7e8      	b.n	800daf2 <USBD_LL_DataOutStage+0x3a>

0800db20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800db24:	b949      	cbnz	r1, 800db3a <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800db26:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	d011      	beq.n	800db52 <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800db2e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800db32:	2b01      	cmp	r3, #1
 800db34:	d022      	beq.n	800db7c <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800db36:	2000      	movs	r0, #0
 800db38:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d1f9      	bne.n	800db36 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800db42:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d0f4      	beq.n	800db36 <USBD_LL_DataInStage+0x16>
}
 800db4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800db50:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800db52:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800db56:	460d      	mov	r5, r1
 800db58:	42b3      	cmp	r3, r6
 800db5a:	d814      	bhi.n	800db86 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800db5c:	d020      	beq.n	800dba0 <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db5e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800db62:	2b03      	cmp	r3, #3
 800db64:	d02f      	beq.n	800dbc6 <USBD_LL_DataInStage+0xa6>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800db66:	2180      	movs	r1, #128	; 0x80
 800db68:	4620      	mov	r0, r4
 800db6a:	f000 fe63 	bl	800e834 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 fbae 	bl	800e2d0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800db74:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d1dc      	bne.n	800db36 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800db80:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800db84:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800db86:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800db88:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800db8a:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800db8c:	461a      	mov	r2, r3
 800db8e:	f000 fb71 	bl	800e274 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db92:	462b      	mov	r3, r5
 800db94:	462a      	mov	r2, r5
 800db96:	4629      	mov	r1, r5
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 fe97 	bl	800e8cc <USBD_LL_PrepareReceive>
 800db9e:	e7c6      	b.n	800db2e <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800dba0:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d8db      	bhi.n	800db5e <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800dba6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d2d7      	bcs.n	800db5e <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dbae:	460a      	mov	r2, r1
 800dbb0:	f000 fb60 	bl	800e274 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbb4:	462b      	mov	r3, r5
 800dbb6:	462a      	mov	r2, r5
 800dbb8:	4629      	mov	r1, r5
 800dbba:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800dbbc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbc0:	f000 fe84 	bl	800e8cc <USBD_LL_PrepareReceive>
 800dbc4:	e7b3      	b.n	800db2e <USBD_LL_DataInStage+0xe>
            if (pdev->pClass->EP0_TxSent != NULL)
 800dbc6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0ca      	beq.n	800db66 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	4798      	blx	r3
 800dbd4:	e7c7      	b.n	800db66 <USBD_LL_DataInStage+0x46>
 800dbd6:	bf00      	nop

0800dbd8 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbd8:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbda:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800dbdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbe0:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800dbe4:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbe6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800dbea:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800dbee:	b1eb      	cbz	r3, 800dc2c <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800dbf0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800dbf8:	b112      	cbz	r2, 800dc00 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	b103      	cbz	r3, 800dc00 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dbfe:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc00:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc02:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc04:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc06:	4620      	mov	r0, r4
 800dc08:	462b      	mov	r3, r5
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	f000 fdf2 	bl	800e7f4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc10:	462b      	mov	r3, r5
 800dc12:	2200      	movs	r2, #0
 800dc14:	2180      	movs	r1, #128	; 0x80
 800dc16:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc18:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc1c:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc20:	f000 fde8 	bl	800e7f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800dc24:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc26:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc28:	6225      	str	r5, [r4, #32]
}
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800dc2c:	2003      	movs	r0, #3
}
 800dc2e:	4770      	bx	lr

0800dc30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc30:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800dc32:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800dc34:	7419      	strb	r1, [r3, #16]
}
 800dc36:	4770      	bx	lr

0800dc38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc38:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc3a:	2104      	movs	r1, #4

  return USBD_OK;
}
 800dc3c:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800dc3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dc42:	b2d2      	uxtb	r2, r2
 800dc44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc48:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop

0800dc50 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dc54:	2b04      	cmp	r3, #4
 800dc56:	d104      	bne.n	800dc62 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc58:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800dc62:	2000      	movs	r0, #0
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop

0800dc68 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800dc68:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dc6c:	b15a      	cbz	r2, 800dc86 <USBD_LL_SOF+0x1e>
{
 800dc6e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d001      	beq.n	800dc7c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800dc78:	2000      	movs	r0, #0
}
 800dc7a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800dc7c:	69d3      	ldr	r3, [r2, #28]
 800dc7e:	b123      	cbz	r3, 800dc8a <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800dc80:	4798      	blx	r3
  return USBD_OK;
 800dc82:	2000      	movs	r0, #0
}
 800dc84:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dc86:	2003      	movs	r0, #3
}
 800dc88:	4770      	bx	lr
  return USBD_OK;
 800dc8a:	4618      	mov	r0, r3
}
 800dc8c:	bd08      	pop	{r3, pc}
 800dc8e:	bf00      	nop

0800dc90 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800dc90:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dc94:	b15a      	cbz	r2, 800dcae <USBD_LL_IsoINIncomplete+0x1e>
{
 800dc96:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc98:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d001      	beq.n	800dca4 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800dca0:	2000      	movs	r0, #0
}
 800dca2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800dca4:	6a13      	ldr	r3, [r2, #32]
 800dca6:	b123      	cbz	r3, 800dcb2 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800dca8:	4798      	blx	r3
  return USBD_OK;
 800dcaa:	2000      	movs	r0, #0
}
 800dcac:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dcae:	2003      	movs	r0, #3
}
 800dcb0:	4770      	bx	lr
  return USBD_OK;
 800dcb2:	4618      	mov	r0, r3
}
 800dcb4:	bd08      	pop	{r3, pc}
 800dcb6:	bf00      	nop

0800dcb8 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800dcb8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800dcbc:	b15a      	cbz	r2, 800dcd6 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800dcbe:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d001      	beq.n	800dccc <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800dcc8:	2000      	movs	r0, #0
}
 800dcca:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800dccc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dcce:	b123      	cbz	r3, 800dcda <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800dcd0:	4798      	blx	r3
  return USBD_OK;
 800dcd2:	2000      	movs	r0, #0
}
 800dcd4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800dcd6:	2003      	movs	r0, #3
}
 800dcd8:	4770      	bx	lr
  return USBD_OK;
 800dcda:	4618      	mov	r0, r3
}
 800dcdc:	bd08      	pop	{r3, pc}
 800dcde:	bf00      	nop

0800dce0 <USBD_LL_DevConnected>:
 800dce0:	2000      	movs	r0, #0
 800dce2:	4770      	bx	lr

0800dce4 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dce4:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800dce6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcea:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800dcee:	b12a      	cbz	r2, 800dcfc <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dcf0:	6852      	ldr	r2, [r2, #4]
 800dcf2:	7901      	ldrb	r1, [r0, #4]
{
 800dcf4:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dcf6:	4790      	blx	r2
  }

  return USBD_OK;
}
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	bd08      	pop	{r3, pc}
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	4770      	bx	lr

0800dd00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	780c      	ldrb	r4, [r1, #0]
 800dd04:	b082      	sub	sp, #8
 800dd06:	460e      	mov	r6, r1
 800dd08:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd0a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800dd0e:	2c20      	cmp	r4, #32
 800dd10:	d00e      	beq.n	800dd30 <USBD_StdDevReq+0x30>
 800dd12:	2c40      	cmp	r4, #64	; 0x40
 800dd14:	d00c      	beq.n	800dd30 <USBD_StdDevReq+0x30>
 800dd16:	b1a4      	cbz	r4, 800dd42 <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd18:	2180      	movs	r1, #128	; 0x80
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	f000 fd8a 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd20:	2100      	movs	r1, #0
 800dd22:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800dd24:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd26:	f000 fd85 	bl	800e834 <USBD_LL_StallEP>
}
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	b002      	add	sp, #8
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd30:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800dd34:	4631      	mov	r1, r6
 800dd36:	4628      	mov	r0, r5
 800dd38:	689b      	ldr	r3, [r3, #8]
}
 800dd3a:	b002      	add	sp, #8
 800dd3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd40:	4718      	bx	r3
      switch (req->bRequest)
 800dd42:	784b      	ldrb	r3, [r1, #1]
 800dd44:	2b09      	cmp	r3, #9
 800dd46:	d8e7      	bhi.n	800dd18 <USBD_StdDevReq+0x18>
 800dd48:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <USBD_StdDevReq+0x50>)
 800dd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4e:	bf00      	nop
 800dd50:	0800ddb1 	.word	0x0800ddb1
 800dd54:	0800dddf 	.word	0x0800dddf
 800dd58:	0800dd19 	.word	0x0800dd19
 800dd5c:	0800ddfd 	.word	0x0800ddfd
 800dd60:	0800dd19 	.word	0x0800dd19
 800dd64:	0800de05 	.word	0x0800de05
 800dd68:	0800de3d 	.word	0x0800de3d
 800dd6c:	0800dd19 	.word	0x0800dd19
 800dd70:	0800de59 	.word	0x0800de59
 800dd74:	0800dd79 	.word	0x0800dd79
  cfgidx = (uint8_t)(req->wValue);
 800dd78:	7889      	ldrb	r1, [r1, #2]
 800dd7a:	4eab      	ldr	r6, [pc, #684]	; (800e028 <USBD_StdDevReq+0x328>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd7c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800dd7e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd80:	f200 8140 	bhi.w	800e004 <USBD_StdDevReq+0x304>
  switch (pdev->dev_state)
 800dd84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dd88:	2b02      	cmp	r3, #2
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	f000 8129 	beq.w	800dfe2 <USBD_StdDevReq+0x2e2>
 800dd90:	2a03      	cmp	r2, #3
 800dd92:	f000 8105 	beq.w	800dfa0 <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd96:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800dd98:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd9a:	f000 fd4b 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4628      	mov	r0, r5
 800dda2:	f000 fd47 	bl	800e834 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dda6:	7831      	ldrb	r1, [r6, #0]
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f7ff fe4d 	bl	800da48 <USBD_ClrClassConfig>
      break;
 800ddae:	e7bc      	b.n	800dd2a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ddb0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ddb4:	3a01      	subs	r2, #1
 800ddb6:	2a02      	cmp	r2, #2
 800ddb8:	d866      	bhi.n	800de88 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800ddba:	88ca      	ldrh	r2, [r1, #6]
 800ddbc:	2a02      	cmp	r2, #2
 800ddbe:	d163      	bne.n	800de88 <USBD_StdDevReq+0x188>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddc0:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800ddc2:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddc6:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800ddc8:	b10a      	cbz	r2, 800ddce <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddca:	2203      	movs	r2, #3
 800ddcc:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddce:	2202      	movs	r2, #2
 800ddd0:	f105 010c 	add.w	r1, r5, #12
 800ddd4:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800ddd6:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddd8:	f000 fa3e 	bl	800e258 <USBD_CtlSendData>
      break;
 800dddc:	e7a5      	b.n	800dd2a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ddde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800dde2:	3b01      	subs	r3, #1
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d84f      	bhi.n	800de88 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dde8:	884b      	ldrh	r3, [r1, #2]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d19d      	bne.n	800dd2a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800ddee:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800ddf0:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800ddf2:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ddf6:	f000 fa5f 	bl	800e2b8 <USBD_CtlSendStatus>
 800ddfa:	e796      	b.n	800dd2a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddfc:	884b      	ldrh	r3, [r1, #2]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d193      	bne.n	800dd2a <USBD_StdDevReq+0x2a>
 800de02:	e7f5      	b.n	800ddf0 <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800de04:	888b      	ldrh	r3, [r1, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d13e      	bne.n	800de88 <USBD_StdDevReq+0x188>
 800de0a:	88cb      	ldrh	r3, [r1, #6]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d13b      	bne.n	800de88 <USBD_StdDevReq+0x188>
 800de10:	884e      	ldrh	r6, [r1, #2]
 800de12:	2e7f      	cmp	r6, #127	; 0x7f
 800de14:	d838      	bhi.n	800de88 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800de1a:	2b03      	cmp	r3, #3
 800de1c:	d034      	beq.n	800de88 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800de1e:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800de20:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800de24:	f000 fd36 	bl	800e894 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800de28:	4628      	mov	r0, r5
 800de2a:	f000 fa45 	bl	800e2b8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800de2e:	2e00      	cmp	r6, #0
 800de30:	f040 80d3 	bne.w	800dfda <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de34:	2301      	movs	r3, #1
 800de36:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800de3a:	e776      	b.n	800dd2a <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800de3c:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800de3e:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800de40:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800de44:	0a13      	lsrs	r3, r2, #8
 800de46:	3b01      	subs	r3, #1
 800de48:	2b06      	cmp	r3, #6
 800de4a:	d81d      	bhi.n	800de88 <USBD_StdDevReq+0x188>
 800de4c:	e8df f003 	tbb	[pc, r3]
 800de50:	1c624d5a 	.word	0x1c624d5a
 800de54:	431c      	.short	0x431c
 800de56:	27          	.byte	0x27
 800de57:	00          	.byte	0x00
  if (req->wLength != 1U)
 800de58:	88ca      	ldrh	r2, [r1, #6]
 800de5a:	2a01      	cmp	r2, #1
 800de5c:	d114      	bne.n	800de88 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800de5e:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800de62:	2902      	cmp	r1, #2
 800de64:	b2cb      	uxtb	r3, r1
 800de66:	f200 8094 	bhi.w	800df92 <USBD_StdDevReq+0x292>
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f43f af54 	beq.w	800dd18 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800de70:	4601      	mov	r1, r0
 800de72:	2300      	movs	r3, #0
 800de74:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800de78:	f000 f9ee 	bl	800e258 <USBD_CtlSendData>
        break;
 800de7c:	e755      	b.n	800dd2a <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800de7e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d15c      	bne.n	800df42 <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de88:	2180      	movs	r1, #128	; 0x80
 800de8a:	4628      	mov	r0, r5
 800de8c:	f000 fcd2 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de90:	2100      	movs	r1, #0
 800de92:	4628      	mov	r0, r5
 800de94:	f000 fcce 	bl	800e834 <USBD_LL_StallEP>
}
 800de98:	4620      	mov	r0, r4
 800de9a:	b002      	add	sp, #8
 800de9c:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de9e:	7c03      	ldrb	r3, [r0, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1f1      	bne.n	800de88 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dea4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dea8:	f10d 0006 	add.w	r0, sp, #6
 800deac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800deb0:	2307      	movs	r3, #7
 800deb2:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800deb4:	88f2      	ldrh	r2, [r6, #6]
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	d067      	beq.n	800df8a <USBD_StdDevReq+0x28a>
    if (len != 0U)
 800deba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d0e2      	beq.n	800de88 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 800dec2:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dec4:	4601      	mov	r1, r0
 800dec6:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800dec8:	bf28      	it	cs
 800deca:	461a      	movcs	r2, r3
 800decc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ded0:	f000 f9c2 	bl	800e258 <USBD_CtlSendData>
 800ded4:	e729      	b.n	800dd2a <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ded6:	7c03      	ldrb	r3, [r0, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1d5      	bne.n	800de88 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dedc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800dee0:	f10d 0006 	add.w	r0, sp, #6
 800dee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee6:	4798      	blx	r3
  if (err != 0U)
 800dee8:	e7e4      	b.n	800deb4 <USBD_StdDevReq+0x1b4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deea:	7c03      	ldrb	r3, [r0, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8092 	bne.w	800e016 <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800def2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800def6:	f10d 0006 	add.w	r0, sp, #6
 800defa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800defe:	2302      	movs	r3, #2
 800df00:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800df02:	e7d7      	b.n	800deb4 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df08:	f10d 0106 	add.w	r1, sp, #6
 800df0c:	7c00      	ldrb	r0, [r0, #16]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4798      	blx	r3
  if (err != 0U)
 800df12:	e7cf      	b.n	800deb4 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800df14:	b2d2      	uxtb	r2, r2
 800df16:	2a05      	cmp	r2, #5
 800df18:	d8b6      	bhi.n	800de88 <USBD_StdDevReq+0x188>
 800df1a:	a301      	add	r3, pc, #4	; (adr r3, 800df20 <USBD_StdDevReq+0x220>)
 800df1c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800df20:	0800de7f 	.word	0x0800de7f
 800df24:	0800df71 	.word	0x0800df71
 800df28:	0800df65 	.word	0x0800df65
 800df2c:	0800df59 	.word	0x0800df59
 800df30:	0800df4d 	.word	0x0800df4d
 800df34:	0800df39 	.word	0x0800df39
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800df38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d0a2      	beq.n	800de88 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df42:	f10d 0106 	add.w	r1, sp, #6
 800df46:	7c28      	ldrb	r0, [r5, #16]
 800df48:	4798      	blx	r3
  if (err != 0U)
 800df4a:	e7b3      	b.n	800deb4 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800df4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d1f5      	bne.n	800df42 <USBD_StdDevReq+0x242>
 800df56:	e797      	b.n	800de88 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800df58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1ef      	bne.n	800df42 <USBD_StdDevReq+0x242>
 800df62:	e791      	b.n	800de88 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1e9      	bne.n	800df42 <USBD_StdDevReq+0x242>
 800df6e:	e78b      	b.n	800de88 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1e3      	bne.n	800df42 <USBD_StdDevReq+0x242>
 800df7a:	e785      	b.n	800de88 <USBD_StdDevReq+0x188>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df7c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800df7e:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800df80:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df86:	f7ff fd5f 	bl	800da48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800df8a:	4628      	mov	r0, r5
 800df8c:	f000 f994 	bl	800e2b8 <USBD_CtlSendStatus>
 800df90:	e6cb      	b.n	800dd2a <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800df92:	2b03      	cmp	r3, #3
 800df94:	f47f aec0 	bne.w	800dd18 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df98:	1d01      	adds	r1, r0, #4
 800df9a:	f000 f95d 	bl	800e258 <USBD_CtlSendData>
        break;
 800df9e:	e6c4      	b.n	800dd2a <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800dfa0:	2900      	cmp	r1, #0
 800dfa2:	d0eb      	beq.n	800df7c <USBD_StdDevReq+0x27c>
      else if (cfgidx != pdev->dev_config)
 800dfa4:	6841      	ldr	r1, [r0, #4]
 800dfa6:	2901      	cmp	r1, #1
 800dfa8:	d0ef      	beq.n	800df8a <USBD_StdDevReq+0x28a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfaa:	b2c9      	uxtb	r1, r1
 800dfac:	f7ff fd4c 	bl	800da48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dfb0:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfb2:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800dfb4:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfb6:	f7ff fd3f 	bl	800da38 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800dfba:	4606      	mov	r6, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0e4      	beq.n	800df8a <USBD_StdDevReq+0x28a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfc0:	2180      	movs	r1, #128	; 0x80
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f000 fc36 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4628      	mov	r0, r5
 800dfcc:	4634      	mov	r4, r6
 800dfce:	f000 fc31 	bl	800e834 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfd2:	7929      	ldrb	r1, [r5, #4]
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f7ff fd37 	bl	800da48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfda:	2302      	movs	r3, #2
 800dfdc:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800dfe0:	e6a3      	b.n	800dd2a <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800dfe2:	2900      	cmp	r1, #0
 800dfe4:	d0d1      	beq.n	800df8a <USBD_StdDevReq+0x28a>
        pdev->dev_config = cfgidx;
 800dfe6:	2101      	movs	r1, #1
 800dfe8:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfea:	f7ff fd25 	bl	800da38 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800dfee:	4604      	mov	r4, r0
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f47f af49 	bne.w	800de88 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800dff6:	4628      	mov	r0, r5
 800dff8:	f000 f95e 	bl	800e2b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dffc:	2303      	movs	r3, #3
 800dffe:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800e002:	e692      	b.n	800dd2a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e004:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800e006:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e008:	f000 fc14 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e00c:	2100      	movs	r1, #0
 800e00e:	4628      	mov	r0, r5
 800e010:	f000 fc10 	bl	800e834 <USBD_LL_StallEP>
    return USBD_FAIL;
 800e014:	e689      	b.n	800dd2a <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e016:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800e01a:	f10d 0006 	add.w	r0, sp, #6
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e022:	2302      	movs	r3, #2
 800e024:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800e026:	e745      	b.n	800deb4 <USBD_StdDevReq+0x1b4>
 800e028:	2400c9dc 	.word	0x2400c9dc

0800e02c <USBD_StdItfReq>:
{
 800e02c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e02e:	780b      	ldrb	r3, [r1, #0]
{
 800e030:	460d      	mov	r5, r1
 800e032:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e034:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800e038:	2a40      	cmp	r2, #64	; 0x40
 800e03a:	d00b      	beq.n	800e054 <USBD_StdItfReq+0x28>
 800e03c:	065b      	lsls	r3, r3, #25
 800e03e:	d509      	bpl.n	800e054 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800e040:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e042:	2180      	movs	r1, #128	; 0x80
 800e044:	f000 fbf6 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e048:	4620      	mov	r0, r4
 800e04a:	4629      	mov	r1, r5
 800e04c:	f000 fbf2 	bl	800e834 <USBD_LL_StallEP>
}
 800e050:	4628      	mov	r0, r5
 800e052:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800e054:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800e058:	3b01      	subs	r3, #1
 800e05a:	2b02      	cmp	r3, #2
 800e05c:	d812      	bhi.n	800e084 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e05e:	792b      	ldrb	r3, [r5, #4]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d80f      	bhi.n	800e084 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e064:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e068:	4629      	mov	r1, r5
 800e06a:	4620      	mov	r0, r4
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e070:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e072:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1eb      	bne.n	800e050 <USBD_StdItfReq+0x24>
 800e078:	2800      	cmp	r0, #0
 800e07a:	d1e9      	bne.n	800e050 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 f91b 	bl	800e2b8 <USBD_CtlSendStatus>
 800e082:	e7e5      	b.n	800e050 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e084:	2180      	movs	r1, #128	; 0x80
 800e086:	4620      	mov	r0, r4
 800e088:	f000 fbd4 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e08c:	2100      	movs	r1, #0
 800e08e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800e090:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800e092:	f000 fbcf 	bl	800e834 <USBD_LL_StallEP>
}
 800e096:	4628      	mov	r0, r5
 800e098:	bd38      	pop	{r3, r4, r5, pc}
 800e09a:	bf00      	nop

0800e09c <USBD_StdEPReq>:
{
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	780b      	ldrb	r3, [r1, #0]
 800e0a0:	460d      	mov	r5, r1
 800e0a2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0a8:	2b20      	cmp	r3, #32
 800e0aa:	d01b      	beq.n	800e0e4 <USBD_StdEPReq+0x48>
 800e0ac:	2b40      	cmp	r3, #64	; 0x40
 800e0ae:	d019      	beq.n	800e0e4 <USBD_StdEPReq+0x48>
 800e0b0:	b303      	cbz	r3, 800e0f4 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0b2:	2180      	movs	r1, #128	; 0x80
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fbbd 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f000 fbb9 	bl	800e834 <USBD_LL_StallEP>
}
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800e0c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e0ca:	2b02      	cmp	r3, #2
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	d04e      	beq.n	800e16e <USBD_StdEPReq+0xd2>
 800e0d0:	2a03      	cmp	r2, #3
 800e0d2:	d1ee      	bne.n	800e0b2 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0d4:	886b      	ldrh	r3, [r5, #2]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d1f3      	bne.n	800e0c2 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800e0da:	064e      	lsls	r6, r1, #25
 800e0dc:	d172      	bne.n	800e1c4 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 f8ea 	bl	800e2b8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0e4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	689b      	ldr	r3, [r3, #8]
}
 800e0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0f2:	4718      	bx	r3
      switch (req->bRequest)
 800e0f4:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800e0f6:	888a      	ldrh	r2, [r1, #4]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800e0fc:	d0e3      	beq.n	800e0c6 <USBD_StdEPReq+0x2a>
 800e0fe:	2b03      	cmp	r3, #3
 800e100:	d024      	beq.n	800e14c <USBD_StdEPReq+0xb0>
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1d5      	bne.n	800e0b2 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800e106:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	b2d8      	uxtb	r0, r3
 800e10e:	d037      	beq.n	800e180 <USBD_StdEPReq+0xe4>
 800e110:	2803      	cmp	r0, #3
 800e112:	d1ce      	bne.n	800e0b2 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e114:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800e118:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e11a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e11e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800e122:	d43e      	bmi.n	800e1a2 <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e124:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0c2      	beq.n	800e0b2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e12c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800e130:	2514      	movs	r5, #20
 800e132:	fb05 4503 	mla	r5, r5, r3, r4
 800e136:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d13c      	bne.n	800e1b8 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800e13e:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e140:	2202      	movs	r2, #2
 800e142:	4629      	mov	r1, r5
 800e144:	4620      	mov	r0, r4
 800e146:	f000 f887 	bl	800e258 <USBD_CtlSendData>
              break;
 800e14a:	e7ba      	b.n	800e0c2 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800e14c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800e150:	2b02      	cmp	r3, #2
 800e152:	b2da      	uxtb	r2, r3
 800e154:	d00b      	beq.n	800e16e <USBD_StdEPReq+0xd2>
 800e156:	2a03      	cmp	r2, #3
 800e158:	d1ab      	bne.n	800e0b2 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e15a:	886b      	ldrh	r3, [r5, #2]
 800e15c:	b91b      	cbnz	r3, 800e166 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e15e:	064a      	lsls	r2, r1, #25
 800e160:	d001      	beq.n	800e166 <USBD_StdEPReq+0xca>
 800e162:	88eb      	ldrh	r3, [r5, #6]
 800e164:	b39b      	cbz	r3, 800e1ce <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800e166:	4620      	mov	r0, r4
 800e168:	f000 f8a6 	bl	800e2b8 <USBD_CtlSendStatus>
              break;
 800e16c:	e7a9      	b.n	800e0c2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e16e:	064b      	lsls	r3, r1, #25
 800e170:	d09f      	beq.n	800e0b2 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e172:	f000 fb5f 	bl	800e834 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e176:	2180      	movs	r1, #128	; 0x80
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fb5b 	bl	800e834 <USBD_LL_StallEP>
 800e17e:	e7a0      	b.n	800e0c2 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e180:	0648      	lsls	r0, r1, #25
 800e182:	d196      	bne.n	800e0b2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e184:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800e186:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e18a:	f04f 0202 	mov.w	r2, #2
 800e18e:	4620      	mov	r0, r4
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e190:	bf4c      	ite	mi
 800e192:	f104 0114 	addmi.w	r1, r4, #20
 800e196:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800e19a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e19c:	f000 f85c 	bl	800e258 <USBD_CtlSendData>
              break;
 800e1a0:	e78f      	b.n	800e0c2 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d084      	beq.n	800e0b2 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800e1ac:	1c5d      	adds	r5, r3, #1
 800e1ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800e1b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e1b6:	e7c0      	b.n	800e13a <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fb57 	bl	800e86c <USBD_LL_IsStallEP>
 800e1be:	b120      	cbz	r0, 800e1ca <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	e7bc      	b.n	800e13e <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e1c4:	f000 fb44 	bl	800e850 <USBD_LL_ClearStallEP>
 800e1c8:	e789      	b.n	800e0de <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800e1ca:	6028      	str	r0, [r5, #0]
 800e1cc:	e7b8      	b.n	800e140 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1ce:	f000 fb31 	bl	800e834 <USBD_LL_StallEP>
 800e1d2:	e7c8      	b.n	800e166 <USBD_StdEPReq+0xca>

0800e1d4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800e1d4:	780b      	ldrb	r3, [r1, #0]
 800e1d6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800e1d8:	784b      	ldrb	r3, [r1, #1]
 800e1da:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800e1dc:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800e1de:	8043      	strh	r3, [r0, #2]
 800e1e0:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800e1e2:	8083      	strh	r3, [r0, #4]
 800e1e4:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800e1e6:	80c3      	strh	r3, [r0, #6]
}
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop

0800e1ec <USBD_CtlError>:
{
 800e1ec:	b510      	push	{r4, lr}
 800e1ee:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1f0:	2180      	movs	r1, #128	; 0x80
 800e1f2:	f000 fb1f 	bl	800e834 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	4620      	mov	r0, r4
}
 800e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800e1fe:	f000 bb19 	b.w	800e834 <USBD_LL_StallEP>
 800e202:	bf00      	nop

0800e204 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800e204:	b318      	cbz	r0, 800e24e <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800e206:	7803      	ldrb	r3, [r0, #0]
{
 800e208:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800e20a:	b30b      	cbz	r3, 800e250 <USBD_GetString+0x4c>
 800e20c:	4604      	mov	r4, r0
 800e20e:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800e212:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800e216:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	2d00      	cmp	r5, #0
 800e21e:	d1f8      	bne.n	800e212 <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e220:	3301      	adds	r3, #1
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	b2dc      	uxtb	r4, r3
 800e226:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e228:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800e22a:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e22c:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800e22e:	7804      	ldrb	r4, [r0, #0]
 800e230:	b15c      	cbz	r4, 800e24a <USBD_GetString+0x46>
  idx++;
 800e232:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800e234:	2500      	movs	r5, #0
    idx++;
 800e236:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800e238:	54cc      	strb	r4, [r1, r3]
    idx++;
 800e23a:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800e23c:	b2d2      	uxtb	r2, r2
    idx++;
 800e23e:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800e240:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800e242:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800e246:	2c00      	cmp	r4, #0
 800e248:	d1f5      	bne.n	800e236 <USBD_GetString+0x32>
}
 800e24a:	bc30      	pop	{r4, r5}
 800e24c:	4770      	bx	lr
 800e24e:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800e250:	2402      	movs	r4, #2
 800e252:	4623      	mov	r3, r4
 800e254:	e7e7      	b.n	800e226 <USBD_GetString+0x22>
 800e256:	bf00      	nop

0800e258 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e258:	b510      	push	{r4, lr}
 800e25a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e25c:	2402      	movs	r4, #2
{
 800e25e:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e260:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e262:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800e266:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e26a:	f000 fb21 	bl	800e8b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e26e:	2000      	movs	r0, #0
 800e270:	bd10      	pop	{r4, pc}
 800e272:	bf00      	nop

0800e274 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e274:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e276:	2100      	movs	r1, #0
{
 800e278:	b508      	push	{r3, lr}
 800e27a:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e27c:	4662      	mov	r2, ip
 800e27e:	f000 fb17 	bl	800e8b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e282:	2000      	movs	r0, #0
 800e284:	bd08      	pop	{r3, pc}
 800e286:	bf00      	nop

0800e288 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e288:	b510      	push	{r4, lr}
 800e28a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e28c:	2403      	movs	r4, #3
{
 800e28e:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e290:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e292:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800e296:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e29a:	f000 fb17 	bl	800e8cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e29e:	2000      	movs	r0, #0
 800e2a0:	bd10      	pop	{r4, pc}
 800e2a2:	bf00      	nop

0800e2a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2a4:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2a6:	2100      	movs	r1, #0
{
 800e2a8:	b508      	push	{r3, lr}
 800e2aa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2ac:	4662      	mov	r2, ip
 800e2ae:	f000 fb0d 	bl	800e8cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	bd08      	pop	{r3, pc}
 800e2b6:	bf00      	nop

0800e2b8 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2b8:	2300      	movs	r3, #0
{
 800e2ba:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2bc:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2be:	461a      	mov	r2, r3
 800e2c0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2c2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2c6:	f000 faf3 	bl	800e8b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	bf00      	nop

0800e2d0 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2d0:	2300      	movs	r3, #0
{
 800e2d2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2d4:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2da:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2de:	f000 faf5 	bl	800e8cc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	bd10      	pop	{r4, pc}
 800e2e6:	bf00      	nop

0800e2e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e2e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4919      	ldr	r1, [pc, #100]	; (800e354 <MX_USB_DEVICE_Init+0x6c>)
 800e2ee:	481a      	ldr	r0, [pc, #104]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e2f0:	f7ff fb72 	bl	800d9d8 <USBD_Init>
 800e2f4:	b988      	cbnz	r0, 800e31a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e2f6:	4919      	ldr	r1, [pc, #100]	; (800e35c <MX_USB_DEVICE_Init+0x74>)
 800e2f8:	4817      	ldr	r0, [pc, #92]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e2fa:	f7ff fb81 	bl	800da00 <USBD_RegisterClass>
 800e2fe:	b9a0      	cbnz	r0, 800e32a <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e300:	4917      	ldr	r1, [pc, #92]	; (800e360 <MX_USB_DEVICE_Init+0x78>)
 800e302:	4815      	ldr	r0, [pc, #84]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e304:	f7ff fb16 	bl	800d934 <USBD_CDC_RegisterInterface>
 800e308:	b9b8      	cbnz	r0, 800e33a <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e30a:	4813      	ldr	r0, [pc, #76]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e30c:	f7ff fb92 	bl	800da34 <USBD_Start>
 800e310:	b9d0      	cbnz	r0, 800e348 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800e316:	f7fb b831 	b.w	800937c <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800e31a:	f7f6 f83b 	bl	8004394 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e31e:	490f      	ldr	r1, [pc, #60]	; (800e35c <MX_USB_DEVICE_Init+0x74>)
 800e320:	480d      	ldr	r0, [pc, #52]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e322:	f7ff fb6d 	bl	800da00 <USBD_RegisterClass>
 800e326:	2800      	cmp	r0, #0
 800e328:	d0ea      	beq.n	800e300 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800e32a:	f7f6 f833 	bl	8004394 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e32e:	490c      	ldr	r1, [pc, #48]	; (800e360 <MX_USB_DEVICE_Init+0x78>)
 800e330:	4809      	ldr	r0, [pc, #36]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e332:	f7ff faff 	bl	800d934 <USBD_CDC_RegisterInterface>
 800e336:	2800      	cmp	r0, #0
 800e338:	d0e7      	beq.n	800e30a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800e33a:	f7f6 f82b 	bl	8004394 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e33e:	4806      	ldr	r0, [pc, #24]	; (800e358 <MX_USB_DEVICE_Init+0x70>)
 800e340:	f7ff fb78 	bl	800da34 <USBD_Start>
 800e344:	2800      	cmp	r0, #0
 800e346:	d0e4      	beq.n	800e312 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800e348:	f7f6 f824 	bl	8004394 <Error_Handler>
}
 800e34c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800e350:	f7fb b814 	b.w	800937c <HAL_PWREx_EnableUSBVoltageDetector>
 800e354:	24000448 	.word	0x24000448
 800e358:	2400c9e0 	.word	0x2400c9e0
 800e35c:	2400031c 	.word	0x2400031c
 800e360:	2400042c 	.word	0x2400042c

0800e364 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800e364:	2000      	movs	r0, #0
 800e366:	4770      	bx	lr

0800e368 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800e368:	2000      	movs	r0, #0
 800e36a:	4770      	bx	lr

0800e36c <CDC_Receive_FS>:
{
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e370:	4e08      	ldr	r6, [pc, #32]	; (800e394 <CDC_Receive_FS+0x28>)
{
 800e372:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e374:	4630      	mov	r0, r6
 800e376:	4621      	mov	r1, r4
 800e378:	f7ff faf0 	bl	800d95c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7ff fb0f 	bl	800d9a0 <USBD_CDC_ReceivePacket>
 800e382:	682a      	ldr	r2, [r5, #0]
 800e384:	4b04      	ldr	r3, [pc, #16]	; (800e398 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800e386:	4621      	mov	r1, r4
 800e388:	4804      	ldr	r0, [pc, #16]	; (800e39c <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800e38a:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800e38c:	f001 fc0e 	bl	800fbac <memcpy>
}
 800e390:	2000      	movs	r0, #0
 800e392:	bd70      	pop	{r4, r5, r6, pc}
 800e394:	2400c9e0 	.word	0x2400c9e0
 800e398:	240072ec 	.word	0x240072ec
 800e39c:	240072f4 	.word	0x240072f4

0800e3a0 <CDC_Init_FS>:
{
 800e3a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3a2:	4c06      	ldr	r4, [pc, #24]	; (800e3bc <CDC_Init_FS+0x1c>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	4906      	ldr	r1, [pc, #24]	; (800e3c0 <CDC_Init_FS+0x20>)
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f7ff facb 	bl	800d944 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3ae:	4905      	ldr	r1, [pc, #20]	; (800e3c4 <CDC_Init_FS+0x24>)
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f7ff fad3 	bl	800d95c <USBD_CDC_SetRxBuffer>
}
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	bd10      	pop	{r4, pc}
 800e3ba:	bf00      	nop
 800e3bc:	2400c9e0 	.word	0x2400c9e0
 800e3c0:	2400d4b0 	.word	0x2400d4b0
 800e3c4:	2400ccb0 	.word	0x2400ccb0

0800e3c8 <CDC_Control_FS>:
  switch(cmd)
 800e3c8:	2820      	cmp	r0, #32
 800e3ca:	d00a      	beq.n	800e3e2 <CDC_Control_FS+0x1a>
 800e3cc:	2821      	cmp	r0, #33	; 0x21
 800e3ce:	d106      	bne.n	800e3de <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800e3d0:	4b09      	ldr	r3, [pc, #36]	; (800e3f8 <CDC_Control_FS+0x30>)
 800e3d2:	6818      	ldr	r0, [r3, #0]
 800e3d4:	889a      	ldrh	r2, [r3, #4]
 800e3d6:	799b      	ldrb	r3, [r3, #6]
 800e3d8:	6008      	str	r0, [r1, #0]
 800e3da:	808a      	strh	r2, [r1, #4]
 800e3dc:	718b      	strb	r3, [r1, #6]
}
 800e3de:	2000      	movs	r0, #0
 800e3e0:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800e3e2:	4b05      	ldr	r3, [pc, #20]	; (800e3f8 <CDC_Control_FS+0x30>)
 800e3e4:	6808      	ldr	r0, [r1, #0]
 800e3e6:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 800e3ea:	798a      	ldrb	r2, [r1, #6]
 800e3ec:	6018      	str	r0, [r3, #0]
}
 800e3ee:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800e3f0:	f8a3 c004 	strh.w	ip, [r3, #4]
 800e3f4:	719a      	strb	r2, [r3, #6]
}
 800e3f6:	4770      	bx	lr
 800e3f8:	24000440 	.word	0x24000440

0800e3fc <CDC_Transmit_FS>:
{
 800e3fc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e3fe:	4c09      	ldr	r4, [pc, #36]	; (800e424 <CDC_Transmit_FS+0x28>)
 800e400:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800e404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e408:	b10b      	cbz	r3, 800e40e <CDC_Transmit_FS+0x12>
}
 800e40a:	2001      	movs	r0, #1
 800e40c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e40e:	460a      	mov	r2, r1
 800e410:	4601      	mov	r1, r0
 800e412:	4620      	mov	r0, r4
 800e414:	f7ff fa96 	bl	800d944 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e418:	4620      	mov	r0, r4
}
 800e41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e41e:	f7ff baa7 	b.w	800d970 <USBD_CDC_TransmitPacket>
 800e422:	bf00      	nop
 800e424:	2400c9e0 	.word	0x2400c9e0

0800e428 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e428:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800e42a:	4801      	ldr	r0, [pc, #4]	; (800e430 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800e42c:	800b      	strh	r3, [r1, #0]
}
 800e42e:	4770      	bx	lr
 800e430:	24000464 	.word	0x24000464

0800e434 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e434:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800e436:	4801      	ldr	r0, [pc, #4]	; (800e43c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800e438:	800b      	strh	r3, [r1, #0]
}
 800e43a:	4770      	bx	lr
 800e43c:	24000478 	.word	0x24000478

0800e440 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e440:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e442:	4c04      	ldr	r4, [pc, #16]	; (800e454 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800e444:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e446:	4804      	ldr	r0, [pc, #16]	; (800e458 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800e448:	4621      	mov	r1, r4
 800e44a:	f7ff fedb 	bl	800e204 <USBD_GetString>
  return USBD_StrDesc;
}
 800e44e:	4620      	mov	r0, r4
 800e450:	bd10      	pop	{r4, pc}
 800e452:	bf00      	nop
 800e454:	2400dcb0 	.word	0x2400dcb0
 800e458:	0801a158 	.word	0x0801a158

0800e45c <USBD_FS_ProductStrDescriptor>:
{
 800e45c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e45e:	4c04      	ldr	r4, [pc, #16]	; (800e470 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800e460:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e462:	4804      	ldr	r0, [pc, #16]	; (800e474 <USBD_FS_ProductStrDescriptor+0x18>)
 800e464:	4621      	mov	r1, r4
 800e466:	f7ff fecd 	bl	800e204 <USBD_GetString>
}
 800e46a:	4620      	mov	r0, r4
 800e46c:	bd10      	pop	{r4, pc}
 800e46e:	bf00      	nop
 800e470:	2400dcb0 	.word	0x2400dcb0
 800e474:	0801a16c 	.word	0x0801a16c

0800e478 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e478:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e47a:	4c04      	ldr	r4, [pc, #16]	; (800e48c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800e47c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e47e:	4804      	ldr	r0, [pc, #16]	; (800e490 <USBD_FS_ConfigStrDescriptor+0x18>)
 800e480:	4621      	mov	r1, r4
 800e482:	f7ff febf 	bl	800e204 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800e486:	4620      	mov	r0, r4
 800e488:	bd10      	pop	{r4, pc}
 800e48a:	bf00      	nop
 800e48c:	2400dcb0 	.word	0x2400dcb0
 800e490:	0801a184 	.word	0x0801a184

0800e494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e494:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e496:	4c04      	ldr	r4, [pc, #16]	; (800e4a8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800e498:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e49a:	4804      	ldr	r0, [pc, #16]	; (800e4ac <USBD_FS_InterfaceStrDescriptor+0x18>)
 800e49c:	4621      	mov	r1, r4
 800e49e:	f7ff feb1 	bl	800e204 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	bd10      	pop	{r4, pc}
 800e4a6:	bf00      	nop
 800e4a8:	2400dcb0 	.word	0x2400dcb0
 800e4ac:	0801a190 	.word	0x0801a190

0800e4b0 <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4b0:	4a46      	ldr	r2, [pc, #280]	; (800e5cc <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800e4b2:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e4b6:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800e4ba:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 800e4be:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800e4c2:	18c3      	adds	r3, r0, r3
 800e4c4:	d101      	bne.n	800e4ca <USBD_FS_SerialStrDescriptor+0x1a>
}
 800e4c6:	4842      	ldr	r0, [pc, #264]	; (800e5d0 <USBD_FS_SerialStrDescriptor+0x120>)
 800e4c8:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800e4ca:	0f18      	lsrs	r0, r3, #28
 800e4cc:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4d0:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800e4d4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e4d8:	4a3d      	ldr	r2, [pc, #244]	; (800e5d0 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e4da:	bf2c      	ite	cs
 800e4dc:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e4de:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e4e0:	f882 c003 	strb.w	ip, [r2, #3]
 800e4e4:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e4e8:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800e4ea:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 800e4ee:	f882 c005 	strb.w	ip, [r2, #5]
 800e4f2:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800e4f6:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800e4f8:	f882 c007 	strb.w	ip, [r2, #7]
 800e4fc:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e500:	bf8c      	ite	hi
 800e502:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e504:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e506:	f882 c009 	strb.w	ip, [r2, #9]
 800e50a:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e50e:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800e510:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800e514:	f882 c00b 	strb.w	ip, [r2, #11]
 800e518:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800e51c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800e51e:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e522:	bf8c      	ite	hi
 800e524:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e526:	3030      	addls	r0, #48	; 0x30
 800e528:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800e52a:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800e52e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e530:	bf8c      	ite	hi
 800e532:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e534:	3030      	addls	r0, #48	; 0x30
 800e536:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800e538:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800e53c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e53e:	bf8c      	ite	hi
 800e540:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e542:	3030      	addls	r0, #48	; 0x30
 800e544:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800e546:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800e54a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e54c:	bf8c      	ite	hi
 800e54e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e550:	3030      	addls	r0, #48	; 0x30
 800e552:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800e554:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800e558:	f003 030f 	and.w	r3, r3, #15
 800e55c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e55e:	bf8c      	ite	hi
 800e560:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e562:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800e564:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800e566:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800e568:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e56c:	bf94      	ite	ls
 800e56e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e570:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800e572:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800e576:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e578:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800e57a:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800e57e:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e582:	bf2c      	ite	cs
 800e584:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e586:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e588:	7450      	strb	r0, [r2, #17]
 800e58a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800e58c:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800e58e:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800e592:	74d0      	strb	r0, [r2, #19]
 800e594:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800e596:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800e598:	7550      	strb	r0, [r2, #21]
 800e59a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e59e:	bf8c      	ite	hi
 800e5a0:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5a2:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800e5a4:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5a6:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800e5a8:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 800e5ac:	4808      	ldr	r0, [pc, #32]	; (800e5d0 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 800e5ae:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5b0:	bf8c      	ite	hi
 800e5b2:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5b4:	3330      	addls	r3, #48	; 0x30
 800e5b6:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800e5b8:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800e5bc:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5be:	bf94      	ite	ls
 800e5c0:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5c2:	3337      	addhi	r3, #55	; 0x37
 800e5c4:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	7653      	strb	r3, [r2, #25]
}
 800e5ca:	4770      	bx	lr
 800e5cc:	1ff1e000 	.word	0x1ff1e000
 800e5d0:	2400047c 	.word	0x2400047c
 800e5d4:	00000000 	.word	0x00000000

0800e5d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e5d8:	b510      	push	{r4, lr}
 800e5da:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5dc:	2100      	movs	r1, #0
{
 800e5de:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e5e0:	22bc      	movs	r2, #188	; 0xbc
 800e5e2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5e4:	9106      	str	r1, [sp, #24]
 800e5e6:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800e5ea:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e5ee:	f001 faeb 	bl	800fbc8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e5f2:	4b25      	ldr	r3, [pc, #148]	; (800e688 <HAL_PCD_MspInit+0xb0>)
 800e5f4:	6822      	ldr	r2, [r4, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d001      	beq.n	800e5fe <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e5fa:	b036      	add	sp, #216	; 0xd8
 800e5fc:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e5fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e602:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e606:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e608:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e60a:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e60c:	f7fb fdf4 	bl	800a1f8 <HAL_RCCEx_PeriphCLKConfig>
 800e610:	bb90      	cbnz	r0, 800e678 <HAL_PCD_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e612:	4c1e      	ldr	r4, [pc, #120]	; (800e68c <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800e614:	f7fa feb2 	bl	800937c <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e618:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e61a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e61c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e620:	481b      	ldr	r0, [pc, #108]	; (800e690 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e622:	f043 0301 	orr.w	r3, r3, #1
 800e626:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800e62a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e62e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e630:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e632:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e636:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800e680 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e63e:	2300      	movs	r3, #0
 800e640:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e644:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e648:	f7f9 ff22 	bl	8008490 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e64c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e650:	2200      	movs	r2, #0
 800e652:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e658:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e65a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800e65e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800e662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e66a:	f7f8 fa2d 	bl	8006ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e66e:	2065      	movs	r0, #101	; 0x65
 800e670:	f7f8 fa68 	bl	8006b44 <HAL_NVIC_EnableIRQ>
}
 800e674:	b036      	add	sp, #216	; 0xd8
 800e676:	bd10      	pop	{r4, pc}
      Error_Handler();
 800e678:	f7f5 fe8c 	bl	8004394 <Error_Handler>
 800e67c:	e7c9      	b.n	800e612 <HAL_PCD_MspInit+0x3a>
 800e67e:	bf00      	nop
 800e680:	00001800 	.word	0x00001800
 800e684:	00000002 	.word	0x00000002
 800e688:	40080000 	.word	0x40080000
 800e68c:	58024400 	.word	0x58024400
 800e690:	58020000 	.word	0x58020000

0800e694 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e694:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800e698:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e69c:	f7ff b9dc 	b.w	800da58 <USBD_LL_SetupStage>

0800e6a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e6a0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800e6a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e6a8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e6ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e6b0:	f7ff ba02 	b.w	800dab8 <USBD_LL_DataOutStage>

0800e6b4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6b4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800e6b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e6bc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e6c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6c2:	f7ff ba2d 	b.w	800db20 <USBD_LL_DataInStage>
 800e6c6:	bf00      	nop

0800e6c8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6c8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e6cc:	f7ff bacc 	b.w	800dc68 <USBD_LL_SOF>

0800e6d0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e6d0:	68c1      	ldr	r1, [r0, #12]
{
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e6d6:	b111      	cbz	r1, 800e6de <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e6d8:	2902      	cmp	r1, #2
 800e6da:	d10a      	bne.n	800e6f2 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800e6dc:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e6de:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800e6e2:	f7ff faa5 	bl	800dc30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e6e6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800e6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e6ee:	f7ff ba73 	b.w	800dbd8 <USBD_LL_Reset>
    Error_Handler();
 800e6f2:	f7f5 fe4f 	bl	8004394 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	e7f1      	b.n	800e6de <HAL_PCD_ResetCallback+0xe>
 800e6fa:	bf00      	nop

0800e6fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e700:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e704:	f7ff fa98 	bl	800dc38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e708:	6822      	ldr	r2, [r4, #0]
 800e70a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800e70e:	f043 0301 	orr.w	r3, r3, #1
 800e712:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e716:	6a23      	ldr	r3, [r4, #32]
 800e718:	b123      	cbz	r3, 800e724 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e71a:	4a03      	ldr	r2, [pc, #12]	; (800e728 <HAL_PCD_SuspendCallback+0x2c>)
 800e71c:	6913      	ldr	r3, [r2, #16]
 800e71e:	f043 0306 	orr.w	r3, r3, #6
 800e722:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e724:	bd10      	pop	{r4, pc}
 800e726:	bf00      	nop
 800e728:	e000ed00 	.word	0xe000ed00

0800e72c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e72c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e730:	f7ff ba8e 	b.w	800dc50 <USBD_LL_Resume>

0800e734 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e734:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e738:	f7ff babe 	b.w	800dcb8 <USBD_LL_IsoOUTIncomplete>

0800e73c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e73c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e740:	f7ff baa6 	b.w	800dc90 <USBD_LL_IsoINIncomplete>

0800e744 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e744:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e748:	f7ff baca 	b.w	800dce0 <USBD_LL_DevConnected>

0800e74c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e74c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800e750:	f7ff bac8 	b.w	800dce4 <USBD_LL_DevDisconnected>
 800e754:	0000      	movs	r0, r0
	...

0800e758 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e758:	7802      	ldrb	r2, [r0, #0]
 800e75a:	b10a      	cbz	r2, 800e760 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800e75c:	2000      	movs	r0, #0
 800e75e:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e760:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800e7c0 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 800e764:	4b1a      	ldr	r3, [pc, #104]	; (800e7d0 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e766:	491b      	ldr	r1, [pc, #108]	; (800e7d4 <USBD_LL_Init+0x7c>)
{
 800e768:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e76a:	ed83 7b06 	vstr	d7, [r3, #24]
 800e76e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e7c8 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e772:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e774:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e776:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800e778:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e77c:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e780:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e782:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e784:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e786:	ed83 7b08 	vstr	d7, [r3, #32]
 800e78a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e78e:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e792:	f7fa f841 	bl	8008818 <HAL_PCD_Init>
 800e796:	b978      	cbnz	r0, 800e7b8 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e798:	2180      	movs	r1, #128	; 0x80
 800e79a:	480d      	ldr	r0, [pc, #52]	; (800e7d0 <USBD_LL_Init+0x78>)
 800e79c:	f7fa fdaa 	bl	80092f4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e7a0:	2240      	movs	r2, #64	; 0x40
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	480a      	ldr	r0, [pc, #40]	; (800e7d0 <USBD_LL_Init+0x78>)
 800e7a6:	f7fa fd7b 	bl	80092a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e7aa:	2280      	movs	r2, #128	; 0x80
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	4808      	ldr	r0, [pc, #32]	; (800e7d0 <USBD_LL_Init+0x78>)
 800e7b0:	f7fa fd76 	bl	80092a0 <HAL_PCDEx_SetTxFiFo>
}
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800e7b8:	f7f5 fdec 	bl	8004394 <Error_Handler>
 800e7bc:	e7ec      	b.n	800e798 <USBD_LL_Init+0x40>
 800e7be:	bf00      	nop
 800e7c0:	00000002 	.word	0x00000002
	...
 800e7d0:	2400deb0 	.word	0x2400deb0
 800e7d4:	40080000 	.word	0x40080000

0800e7d8 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800e7d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e7dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e7de:	f7fa f8b1 	bl	8008944 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800e7e2:	2803      	cmp	r0, #3
 800e7e4:	d802      	bhi.n	800e7ec <USBD_LL_Start+0x14>
 800e7e6:	4b02      	ldr	r3, [pc, #8]	; (800e7f0 <USBD_LL_Start+0x18>)
 800e7e8:	5c18      	ldrb	r0, [r3, r0]
}
 800e7ea:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800e7ec:	2003      	movs	r0, #3
}
 800e7ee:	bd08      	pop	{r3, pc}
 800e7f0:	0801a1a0 	.word	0x0801a1a0

0800e7f4 <USBD_LL_OpenEP>:
{
 800e7f4:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7fe:	4663      	mov	r3, ip
 800e800:	f7fa fc00 	bl	8009004 <HAL_PCD_EP_Open>
  switch (hal_status)
 800e804:	2803      	cmp	r0, #3
 800e806:	d802      	bhi.n	800e80e <USBD_LL_OpenEP+0x1a>
 800e808:	4b02      	ldr	r3, [pc, #8]	; (800e814 <USBD_LL_OpenEP+0x20>)
 800e80a:	5c18      	ldrb	r0, [r3, r0]
}
 800e80c:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e80e:	2003      	movs	r0, #3
}
 800e810:	bd08      	pop	{r3, pc}
 800e812:	bf00      	nop
 800e814:	0801a1a0 	.word	0x0801a1a0

0800e818 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e818:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e81c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e81e:	f7fa fc2f 	bl	8009080 <HAL_PCD_EP_Close>
  switch (hal_status)
 800e822:	2803      	cmp	r0, #3
 800e824:	d802      	bhi.n	800e82c <USBD_LL_CloseEP+0x14>
 800e826:	4b02      	ldr	r3, [pc, #8]	; (800e830 <USBD_LL_CloseEP+0x18>)
 800e828:	5c18      	ldrb	r0, [r3, r0]
}
 800e82a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e82c:	2003      	movs	r0, #3
}
 800e82e:	bd08      	pop	{r3, pc}
 800e830:	0801a1a0 	.word	0x0801a1a0

0800e834 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e834:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e838:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e83a:	f7fa fcb1 	bl	80091a0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800e83e:	2803      	cmp	r0, #3
 800e840:	d802      	bhi.n	800e848 <USBD_LL_StallEP+0x14>
 800e842:	4b02      	ldr	r3, [pc, #8]	; (800e84c <USBD_LL_StallEP+0x18>)
 800e844:	5c18      	ldrb	r0, [r3, r0]
}
 800e846:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e848:	2003      	movs	r0, #3
}
 800e84a:	bd08      	pop	{r3, pc}
 800e84c:	0801a1a0 	.word	0x0801a1a0

0800e850 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e850:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e854:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e856:	f7fa fce7 	bl	8009228 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800e85a:	2803      	cmp	r0, #3
 800e85c:	d802      	bhi.n	800e864 <USBD_LL_ClearStallEP+0x14>
 800e85e:	4b02      	ldr	r3, [pc, #8]	; (800e868 <USBD_LL_ClearStallEP+0x18>)
 800e860:	5c18      	ldrb	r0, [r3, r0]
}
 800e862:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e864:	2003      	movs	r0, #3
}
 800e866:	bd08      	pop	{r3, pc}
 800e868:	0801a1a0 	.word	0x0801a1a0

0800e86c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800e86c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e86e:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800e872:	d406      	bmi.n	800e882 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e874:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e878:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e87c:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800e880:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e882:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800e886:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800e88a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e88e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800e892:	4770      	bx	lr

0800e894 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e894:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e898:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e89a:	f7fa fb9d 	bl	8008fd8 <HAL_PCD_SetAddress>
  switch (hal_status)
 800e89e:	2803      	cmp	r0, #3
 800e8a0:	d802      	bhi.n	800e8a8 <USBD_LL_SetUSBAddress+0x14>
 800e8a2:	4b02      	ldr	r3, [pc, #8]	; (800e8ac <USBD_LL_SetUSBAddress+0x18>)
 800e8a4:	5c18      	ldrb	r0, [r3, r0]
}
 800e8a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8a8:	2003      	movs	r0, #3
}
 800e8aa:	bd08      	pop	{r3, pc}
 800e8ac:	0801a1a0 	.word	0x0801a1a0

0800e8b0 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8b0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e8b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8b6:	f7fa fc4b 	bl	8009150 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800e8ba:	2803      	cmp	r0, #3
 800e8bc:	d802      	bhi.n	800e8c4 <USBD_LL_Transmit+0x14>
 800e8be:	4b02      	ldr	r3, [pc, #8]	; (800e8c8 <USBD_LL_Transmit+0x18>)
 800e8c0:	5c18      	ldrb	r0, [r3, r0]
}
 800e8c2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8c4:	2003      	movs	r0, #3
}
 800e8c6:	bd08      	pop	{r3, pc}
 800e8c8:	0801a1a0 	.word	0x0801a1a0

0800e8cc <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800e8d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8d2:	f7fa fc0b 	bl	80090ec <HAL_PCD_EP_Receive>
  switch (hal_status)
 800e8d6:	2803      	cmp	r0, #3
 800e8d8:	d802      	bhi.n	800e8e0 <USBD_LL_PrepareReceive+0x14>
 800e8da:	4b02      	ldr	r3, [pc, #8]	; (800e8e4 <USBD_LL_PrepareReceive+0x18>)
 800e8dc:	5c18      	ldrb	r0, [r3, r0]
}
 800e8de:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8e0:	2003      	movs	r0, #3
}
 800e8e2:	bd08      	pop	{r3, pc}
 800e8e4:	0801a1a0 	.word	0x0801a1a0

0800e8e8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800e8ec:	f7fa bc26 	b.w	800913c <HAL_PCD_EP_GetRxCount>

0800e8f0 <USBD_static_malloc>:
}
 800e8f0:	4800      	ldr	r0, [pc, #0]	; (800e8f4 <USBD_static_malloc+0x4>)
 800e8f2:	4770      	bx	lr
 800e8f4:	2400e2b8 	.word	0x2400e2b8

0800e8f8 <USBD_static_free>:
}
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop

0800e8fc <arm_cfft_radix8by2_f32>:
 800e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e900:	4607      	mov	r7, r0
 800e902:	4608      	mov	r0, r1
 800e904:	ed2d 8b06 	vpush	{d8-d10}
 800e908:	f8b7 c000 	ldrh.w	ip, [r7]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e912:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800e916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800e91a:	f000 80ac 	beq.w	800ea76 <arm_cfft_radix8by2_f32+0x17a>
 800e91e:	008c      	lsls	r4, r1, #2
 800e920:	f100 0310 	add.w	r3, r0, #16
 800e924:	3210      	adds	r2, #16
 800e926:	f108 0610 	add.w	r6, r8, #16
 800e92a:	3410      	adds	r4, #16
 800e92c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800e930:	1905      	adds	r5, r0, r4
 800e932:	4444      	add	r4, r8
 800e934:	ed16 7a04 	vldr	s14, [r6, #-16]
 800e938:	3310      	adds	r3, #16
 800e93a:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800e93e:	3510      	adds	r5, #16
 800e940:	ed56 0a03 	vldr	s1, [r6, #-12]
 800e944:	3210      	adds	r2, #16
 800e946:	ee74 9a87 	vadd.f32	s19, s9, s14
 800e94a:	ed56 7a02 	vldr	s15, [r6, #-8]
 800e94e:	ed56 2a01 	vldr	s5, [r6, #-4]
 800e952:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800e956:	ed54 5a04 	vldr	s11, [r4, #-16]
 800e95a:	3610      	adds	r6, #16
 800e95c:	ed14 5a03 	vldr	s10, [r4, #-12]
 800e960:	3410      	adds	r4, #16
 800e962:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800e966:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800e96a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800e96e:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800e972:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800e976:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800e97a:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800e97e:	ee33 8a83 	vadd.f32	s16, s7, s6
 800e982:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800e986:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800e98a:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800e98e:	ee34 0a06 	vadd.f32	s0, s8, s12
 800e992:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800e996:	ee77 aa20 	vadd.f32	s21, s14, s1
 800e99a:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800e99e:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800e9a2:	ee72 9a22 	vadd.f32	s19, s4, s5
 800e9a6:	ee71 8a05 	vadd.f32	s17, s2, s10
 800e9aa:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800e9ae:	ee37 7a60 	vsub.f32	s14, s14, s1
 800e9b2:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800e9b6:	ee35 5a41 	vsub.f32	s10, s10, s2
 800e9ba:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800e9be:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e9c2:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800e9c6:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800e9ca:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800e9ce:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800e9d2:	ee72 7a62 	vsub.f32	s15, s4, s5
 800e9d6:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800e9da:	ee73 2a63 	vsub.f32	s5, s6, s7
 800e9de:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800e9e2:	4563      	cmp	r3, ip
 800e9e4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800e9e8:	ee24 3a84 	vmul.f32	s6, s9, s8
 800e9ec:	ee27 2a26 	vmul.f32	s4, s14, s13
 800e9f0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800e9f4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800e9f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e9fc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ea00:	ee65 6a26 	vmul.f32	s13, s10, s13
 800ea04:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ea08:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ea0c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ea10:	ee33 4a02 	vadd.f32	s8, s6, s4
 800ea14:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ea18:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800ea1c:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800ea20:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800ea24:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800ea28:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800ea2c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800ea30:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800ea34:	ee27 4a87 	vmul.f32	s8, s15, s14
 800ea38:	ee61 5a87 	vmul.f32	s11, s3, s14
 800ea3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ea40:	ee22 5a87 	vmul.f32	s10, s5, s14
 800ea44:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ea48:	ee26 6a26 	vmul.f32	s12, s12, s13
 800ea4c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800ea50:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ea54:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ea58:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ea5c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ea60:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800ea64:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800ea68:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800ea6c:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800ea70:	f47f af60 	bne.w	800e934 <arm_cfft_radix8by2_f32+0x38>
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	b28c      	uxth	r4, r1
 800ea78:	2302      	movs	r3, #2
 800ea7a:	4621      	mov	r1, r4
 800ea7c:	f000 fda6 	bl	800f5cc <arm_radix8_butterfly_f32>
 800ea80:	4621      	mov	r1, r4
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	4640      	mov	r0, r8
 800ea86:	2302      	movs	r3, #2
 800ea88:	ecbd 8b06 	vpop	{d8-d10}
 800ea8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	f000 bd9c 	b.w	800f5cc <arm_radix8_butterfly_f32>

0800ea94 <arm_cfft_radix8by4_f32>:
 800ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	ed2d 8b04 	vpush	{d8-d9}
 800ea9c:	8804      	ldrh	r4, [r0, #0]
 800ea9e:	b08d      	sub	sp, #52	; 0x34
 800eaa0:	6842      	ldr	r2, [r0, #4]
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	0864      	lsrs	r4, r4, #1
 800eaa6:	edd1 7a00 	vldr	s15, [r1]
 800eaaa:	edd1 5a01 	vldr	s11, [r1, #4]
 800eaae:	00a3      	lsls	r3, r4, #2
 800eab0:	18ce      	adds	r6, r1, r3
 800eab2:	18f7      	adds	r7, r6, r3
 800eab4:	ed96 7a00 	vldr	s14, [r6]
 800eab8:	ed96 4a01 	vldr	s8, [r6, #4]
 800eabc:	ed97 6a00 	vldr	s12, [r7]
 800eac0:	edd7 4a01 	vldr	s9, [r7, #4]
 800eac4:	ee77 6a86 	vadd.f32	s13, s15, s12
 800eac8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eacc:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800ead0:	ee77 2a26 	vadd.f32	s5, s14, s13
 800ead4:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800ead8:	ee74 3a27 	vadd.f32	s7, s8, s15
 800eadc:	ee76 4a44 	vsub.f32	s9, s12, s8
 800eae0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800eae4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800eae8:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800eaec:	ee37 7a25 	vadd.f32	s14, s14, s11
 800eaf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800eaf4:	0860      	lsrs	r0, r4, #1
 800eaf6:	f102 0408 	add.w	r4, r2, #8
 800eafa:	9405      	str	r4, [sp, #20]
 800eafc:	f102 0410 	add.w	r4, r2, #16
 800eb00:	9009      	str	r0, [sp, #36]	; 0x24
 800eb02:	f1a0 0902 	sub.w	r9, r0, #2
 800eb06:	9403      	str	r4, [sp, #12]
 800eb08:	18fc      	adds	r4, r7, r3
 800eb0a:	f102 0018 	add.w	r0, r2, #24
 800eb0e:	ed94 5a00 	vldr	s10, [r4]
 800eb12:	ed94 3a01 	vldr	s6, [r4, #4]
 800eb16:	ee72 2a85 	vadd.f32	s5, s5, s10
 800eb1a:	9004      	str	r0, [sp, #16]
 800eb1c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800eb20:	4620      	mov	r0, r4
 800eb22:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800eb26:	9408      	str	r4, [sp, #32]
 800eb28:	ee12 ca90 	vmov	ip, s5
 800eb2c:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800eb30:	ee77 7a83 	vadd.f32	s15, s15, s6
 800eb34:	f845 cb08 	str.w	ip, [r5], #8
 800eb38:	ee13 ca90 	vmov	ip, s7
 800eb3c:	ed96 2a01 	vldr	s4, [r6, #4]
 800eb40:	ee74 4a05 	vadd.f32	s9, s8, s10
 800eb44:	edd4 2a01 	vldr	s5, [r4, #4]
 800eb48:	ee37 7a45 	vsub.f32	s14, s14, s10
 800eb4c:	ee36 6a02 	vadd.f32	s12, s12, s4
 800eb50:	9500      	str	r5, [sp, #0]
 800eb52:	460d      	mov	r5, r1
 800eb54:	ee36 6a22 	vadd.f32	s12, s12, s5
 800eb58:	ed81 6a01 	vstr	s12, [r1, #4]
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	f841 cb08 	str.w	ip, [r1], #8
 800eb62:	ee16 ca90 	vmov	ip, s13
 800eb66:	9106      	str	r1, [sp, #24]
 800eb68:	4639      	mov	r1, r7
 800eb6a:	edc6 4a01 	vstr	s9, [r6, #4]
 800eb6e:	f841 cb08 	str.w	ip, [r1], #8
 800eb72:	9102      	str	r1, [sp, #8]
 800eb74:	ee17 1a90 	vmov	r1, s15
 800eb78:	edc7 5a01 	vstr	s11, [r7, #4]
 800eb7c:	f840 1b08 	str.w	r1, [r0], #8
 800eb80:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800eb84:	9001      	str	r0, [sp, #4]
 800eb86:	ed84 7a01 	vstr	s14, [r4, #4]
 800eb8a:	9107      	str	r1, [sp, #28]
 800eb8c:	f000 8135 	beq.w	800edfa <arm_cfft_radix8by4_f32+0x366>
 800eb90:	3b0c      	subs	r3, #12
 800eb92:	f102 0920 	add.w	r9, r2, #32
 800eb96:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	468b      	mov	fp, r1
 800eb9e:	f105 0e10 	add.w	lr, r5, #16
 800eba2:	4423      	add	r3, r4
 800eba4:	f1a6 0c0c 	sub.w	ip, r6, #12
 800eba8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ebac:	f106 0010 	add.w	r0, r6, #16
 800ebb0:	f1a7 010c 	sub.w	r1, r7, #12
 800ebb4:	f107 0510 	add.w	r5, r7, #16
 800ebb8:	3c0c      	subs	r4, #12
 800ebba:	3210      	adds	r2, #16
 800ebbc:	ed15 7a02 	vldr	s14, [r5, #-8]
 800ebc0:	f1bb 0b01 	subs.w	fp, fp, #1
 800ebc4:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800ebc8:	f1ac 0c08 	sub.w	ip, ip, #8
 800ebcc:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ebd0:	f10e 0e08 	add.w	lr, lr, #8
 800ebd4:	ee77 1a87 	vadd.f32	s3, s15, s14
 800ebd8:	ed52 4a02 	vldr	s9, [r2, #-8]
 800ebdc:	ed55 5a01 	vldr	s11, [r5, #-4]
 800ebe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebe4:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800ebe8:	f10a 0a08 	add.w	sl, sl, #8
 800ebec:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800ebf0:	ed10 3a01 	vldr	s6, [r0, #-4]
 800ebf4:	ee37 4a25 	vadd.f32	s8, s14, s11
 800ebf8:	ed52 3a01 	vldr	s7, [r2, #-4]
 800ebfc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ec00:	f100 0008 	add.w	r0, r0, #8
 800ec04:	ee36 6a24 	vadd.f32	s12, s12, s9
 800ec08:	f1a1 0108 	sub.w	r1, r1, #8
 800ec0c:	ee73 2a27 	vadd.f32	s5, s6, s15
 800ec10:	f109 0910 	add.w	r9, r9, #16
 800ec14:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ec18:	f105 0508 	add.w	r5, r5, #8
 800ec1c:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800ec20:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ec24:	ed50 5a03 	vldr	s11, [r0, #-12]
 800ec28:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800ec2c:	ed12 6a01 	vldr	s12, [r2, #-4]
 800ec30:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ec34:	ee74 5a25 	vadd.f32	s11, s8, s11
 800ec38:	f1a4 0408 	sub.w	r4, r4, #8
 800ec3c:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ec40:	f108 0818 	add.w	r8, r8, #24
 800ec44:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800ec48:	f102 0208 	add.w	r2, r2, #8
 800ec4c:	ee75 5a86 	vadd.f32	s11, s11, s12
 800ec50:	f1a3 0308 	sub.w	r3, r3, #8
 800ec54:	ee34 6a63 	vsub.f32	s12, s8, s7
 800ec58:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800ec5c:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800ec60:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ec64:	ed94 4a04 	vldr	s8, [r4, #16]
 800ec68:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800ec6c:	ed9c 3a04 	vldr	s6, [ip, #16]
 800ec70:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ec74:	edd1 7a04 	vldr	s15, [r1, #16]
 800ec78:	ee73 6a04 	vadd.f32	s13, s6, s8
 800ec7c:	ed93 8a04 	vldr	s16, [r3, #16]
 800ec80:	edd4 5a03 	vldr	s11, [r4, #12]
 800ec84:	ee33 3a44 	vsub.f32	s6, s6, s8
 800ec88:	ed9c 2a03 	vldr	s4, [ip, #12]
 800ec8c:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800ec90:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800ec94:	ed91 1a03 	vldr	s2, [r1, #12]
 800ec98:	ee32 4a25 	vadd.f32	s8, s4, s11
 800ec9c:	edd3 2a03 	vldr	s5, [r3, #12]
 800eca0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800eca4:	ee70 0a88 	vadd.f32	s1, s1, s16
 800eca8:	ee73 4a41 	vsub.f32	s9, s6, s2
 800ecac:	ee32 2a65 	vsub.f32	s4, s4, s11
 800ecb0:	edcc 0a04 	vstr	s1, [ip, #16]
 800ecb4:	ee74 0a41 	vsub.f32	s1, s8, s2
 800ecb8:	edd1 6a03 	vldr	s13, [r1, #12]
 800ecbc:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800ecc0:	ed93 9a03 	vldr	s18, [r3, #12]
 800ecc4:	ee78 5a82 	vadd.f32	s11, s17, s4
 800ecc8:	ee34 4a26 	vadd.f32	s8, s8, s13
 800eccc:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800ecd0:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800ecd4:	ee34 4a09 	vadd.f32	s8, s8, s18
 800ecd8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ecdc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800ece0:	ed8c 4a03 	vstr	s8, [ip, #12]
 800ece4:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800ece8:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800ecec:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800ecf0:	ee60 2a01 	vmul.f32	s5, s0, s2
 800ecf4:	ee64 6a81 	vmul.f32	s13, s9, s2
 800ecf8:	ee20 8a04 	vmul.f32	s16, s0, s8
 800ecfc:	ee64 4a84 	vmul.f32	s9, s9, s8
 800ed00:	ee25 0a01 	vmul.f32	s0, s10, s2
 800ed04:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ed08:	ee25 4a84 	vmul.f32	s8, s11, s8
 800ed0c:	ee65 5a81 	vmul.f32	s11, s11, s2
 800ed10:	ee35 5a62 	vsub.f32	s10, s10, s5
 800ed14:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800ed18:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800ed1c:	ee38 1a00 	vadd.f32	s2, s16, s0
 800ed20:	ed00 5a03 	vstr	s10, [r0, #-12]
 800ed24:	ed00 1a04 	vstr	s2, [r0, #-16]
 800ed28:	ed81 4a04 	vstr	s8, [r1, #16]
 800ed2c:	edc1 5a03 	vstr	s11, [r1, #12]
 800ed30:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800ed34:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800ed38:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800ed3c:	ee66 2a25 	vmul.f32	s5, s12, s11
 800ed40:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800ed44:	ee21 4a85 	vmul.f32	s8, s3, s10
 800ed48:	ee60 7a85 	vmul.f32	s15, s1, s10
 800ed4c:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800ed50:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ed54:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800ed58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ed5c:	ee34 5a22 	vadd.f32	s10, s8, s5
 800ed60:	ee36 6a61 	vsub.f32	s12, s12, s3
 800ed64:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800ed68:	ed05 5a04 	vstr	s10, [r5, #-16]
 800ed6c:	ed05 6a03 	vstr	s12, [r5, #-12]
 800ed70:	edc4 5a04 	vstr	s11, [r4, #16]
 800ed74:	edc4 6a03 	vstr	s13, [r4, #12]
 800ed78:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800ed7c:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800ed80:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800ed84:	ee67 5a27 	vmul.f32	s11, s14, s15
 800ed88:	ee63 6a27 	vmul.f32	s13, s6, s15
 800ed8c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800ed90:	ee27 7a22 	vmul.f32	s14, s14, s5
 800ed94:	ee62 7a27 	vmul.f32	s15, s4, s15
 800ed98:	ee23 3a22 	vmul.f32	s6, s6, s5
 800ed9c:	ee22 2a22 	vmul.f32	s4, s4, s5
 800eda0:	ee36 6a25 	vadd.f32	s12, s12, s11
 800eda4:	ee37 7a63 	vsub.f32	s14, s14, s7
 800eda8:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800edac:	ee77 7a83 	vadd.f32	s15, s15, s6
 800edb0:	ed02 6a04 	vstr	s12, [r2, #-16]
 800edb4:	ed02 7a03 	vstr	s14, [r2, #-12]
 800edb8:	ed83 2a04 	vstr	s4, [r3, #16]
 800edbc:	edc3 7a03 	vstr	s15, [r3, #12]
 800edc0:	f47f aefc 	bne.w	800ebbc <arm_cfft_radix8by4_f32+0x128>
 800edc4:	9907      	ldr	r1, [sp, #28]
 800edc6:	9803      	ldr	r0, [sp, #12]
 800edc8:	00cb      	lsls	r3, r1, #3
 800edca:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800edce:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800edd2:	9103      	str	r1, [sp, #12]
 800edd4:	9900      	ldr	r1, [sp, #0]
 800edd6:	4419      	add	r1, r3
 800edd8:	9100      	str	r1, [sp, #0]
 800edda:	9905      	ldr	r1, [sp, #20]
 800eddc:	4419      	add	r1, r3
 800edde:	9105      	str	r1, [sp, #20]
 800ede0:	9906      	ldr	r1, [sp, #24]
 800ede2:	4419      	add	r1, r3
 800ede4:	9106      	str	r1, [sp, #24]
 800ede6:	9902      	ldr	r1, [sp, #8]
 800ede8:	4419      	add	r1, r3
 800edea:	9102      	str	r1, [sp, #8]
 800edec:	9901      	ldr	r1, [sp, #4]
 800edee:	4419      	add	r1, r3
 800edf0:	9b04      	ldr	r3, [sp, #16]
 800edf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edf6:	9101      	str	r1, [sp, #4]
 800edf8:	9304      	str	r3, [sp, #16]
 800edfa:	9b00      	ldr	r3, [sp, #0]
 800edfc:	9902      	ldr	r1, [sp, #8]
 800edfe:	ed93 7a00 	vldr	s14, [r3]
 800ee02:	edd1 7a00 	vldr	s15, [r1]
 800ee06:	9a06      	ldr	r2, [sp, #24]
 800ee08:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ee0c:	9d01      	ldr	r5, [sp, #4]
 800ee0e:	edd2 6a00 	vldr	s13, [r2]
 800ee12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	ee76 3a86 	vadd.f32	s7, s13, s12
 800ee1c:	ed95 3a00 	vldr	s6, [r5]
 800ee20:	ed93 5a01 	vldr	s10, [r3, #4]
 800ee24:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ee28:	9b00      	ldr	r3, [sp, #0]
 800ee2a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ee2e:	edd5 2a01 	vldr	s5, [r5, #4]
 800ee32:	ed93 4a01 	vldr	s8, [r3, #4]
 800ee36:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ee3a:	9b00      	ldr	r3, [sp, #0]
 800ee3c:	ee74 5a05 	vadd.f32	s11, s8, s10
 800ee40:	edd2 7a01 	vldr	s15, [r2, #4]
 800ee44:	edc3 3a00 	vstr	s7, [r3]
 800ee48:	ee34 4a45 	vsub.f32	s8, s8, s10
 800ee4c:	edd2 3a01 	vldr	s7, [r2, #4]
 800ee50:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ee54:	ed95 2a01 	vldr	s4, [r5, #4]
 800ee58:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800ee5c:	9d05      	ldr	r5, [sp, #20]
 800ee5e:	ee34 5a66 	vsub.f32	s10, s8, s13
 800ee62:	9b00      	ldr	r3, [sp, #0]
 800ee64:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800ee68:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800ee6c:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ee70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee72:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ee76:	4621      	mov	r1, r4
 800ee78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ee7c:	edc3 3a01 	vstr	s7, [r3, #4]
 800ee80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee84:	edd5 3a00 	vldr	s7, [r5]
 800ee88:	ee76 6a84 	vadd.f32	s13, s13, s8
 800ee8c:	ed95 7a01 	vldr	s14, [r5, #4]
 800ee90:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800ee94:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800ee98:	2304      	movs	r3, #4
 800ee9a:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ee9e:	ee25 7a07 	vmul.f32	s14, s10, s14
 800eea2:	ee25 5a23 	vmul.f32	s10, s10, s7
 800eea6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800eeaa:	ee34 7a07 	vadd.f32	s14, s8, s14
 800eeae:	ee35 5a64 	vsub.f32	s10, s10, s9
 800eeb2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800eeb6:	ed82 7a00 	vstr	s14, [r2]
 800eeba:	ed82 5a01 	vstr	s10, [r2, #4]
 800eebe:	9a03      	ldr	r2, [sp, #12]
 800eec0:	edd2 4a01 	vldr	s9, [r2, #4]
 800eec4:	ed92 7a00 	vldr	s14, [r2]
 800eec8:	9a02      	ldr	r2, [sp, #8]
 800eeca:	ee26 5a07 	vmul.f32	s10, s12, s14
 800eece:	ee26 6a24 	vmul.f32	s12, s12, s9
 800eed2:	ee25 7a87 	vmul.f32	s14, s11, s14
 800eed6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800eeda:	ee37 6a46 	vsub.f32	s12, s14, s12
 800eede:	ee75 5a25 	vadd.f32	s11, s10, s11
 800eee2:	edc2 5a00 	vstr	s11, [r2]
 800eee6:	ed82 6a01 	vstr	s12, [r2, #4]
 800eeea:	9a04      	ldr	r2, [sp, #16]
 800eeec:	9d01      	ldr	r5, [sp, #4]
 800eeee:	edd2 5a01 	vldr	s11, [r2, #4]
 800eef2:	ed92 7a00 	vldr	s14, [r2]
 800eef6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800eefa:	ee26 7a87 	vmul.f32	s14, s13, s14
 800eefe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef02:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ef06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ef0e:	edc5 7a01 	vstr	s15, [r5, #4]
 800ef12:	edc5 6a00 	vstr	s13, [r5]
 800ef16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ef18:	686a      	ldr	r2, [r5, #4]
 800ef1a:	f000 fb57 	bl	800f5cc <arm_radix8_butterfly_f32>
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4621      	mov	r1, r4
 800ef22:	686a      	ldr	r2, [r5, #4]
 800ef24:	2304      	movs	r3, #4
 800ef26:	f000 fb51 	bl	800f5cc <arm_radix8_butterfly_f32>
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	686a      	ldr	r2, [r5, #4]
 800ef30:	2304      	movs	r3, #4
 800ef32:	f000 fb4b 	bl	800f5cc <arm_radix8_butterfly_f32>
 800ef36:	4621      	mov	r1, r4
 800ef38:	686a      	ldr	r2, [r5, #4]
 800ef3a:	2304      	movs	r3, #4
 800ef3c:	9808      	ldr	r0, [sp, #32]
 800ef3e:	b00d      	add	sp, #52	; 0x34
 800ef40:	ecbd 8b04 	vpop	{d8-d9}
 800ef44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef48:	f000 bb40 	b.w	800f5cc <arm_radix8_butterfly_f32>

0800ef4c <arm_cfft_f32>:
 800ef4c:	2a01      	cmp	r2, #1
 800ef4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef52:	4606      	mov	r6, r0
 800ef54:	4617      	mov	r7, r2
 800ef56:	460c      	mov	r4, r1
 800ef58:	4698      	mov	r8, r3
 800ef5a:	8805      	ldrh	r5, [r0, #0]
 800ef5c:	d055      	beq.n	800f00a <arm_cfft_f32+0xbe>
 800ef5e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ef62:	d061      	beq.n	800f028 <arm_cfft_f32+0xdc>
 800ef64:	d916      	bls.n	800ef94 <arm_cfft_f32+0x48>
 800ef66:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ef6a:	d01a      	beq.n	800efa2 <arm_cfft_f32+0x56>
 800ef6c:	d946      	bls.n	800effc <arm_cfft_f32+0xb0>
 800ef6e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ef72:	d059      	beq.n	800f028 <arm_cfft_f32+0xdc>
 800ef74:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ef78:	d105      	bne.n	800ef86 <arm_cfft_f32+0x3a>
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	6872      	ldr	r2, [r6, #4]
 800ef7e:	4629      	mov	r1, r5
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 fb23 	bl	800f5cc <arm_radix8_butterfly_f32>
 800ef86:	f1b8 0f00 	cmp.w	r8, #0
 800ef8a:	d111      	bne.n	800efb0 <arm_cfft_f32+0x64>
 800ef8c:	2f01      	cmp	r7, #1
 800ef8e:	d016      	beq.n	800efbe <arm_cfft_f32+0x72>
 800ef90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef94:	2d20      	cmp	r5, #32
 800ef96:	d047      	beq.n	800f028 <arm_cfft_f32+0xdc>
 800ef98:	d934      	bls.n	800f004 <arm_cfft_f32+0xb8>
 800ef9a:	2d40      	cmp	r5, #64	; 0x40
 800ef9c:	d0ed      	beq.n	800ef7a <arm_cfft_f32+0x2e>
 800ef9e:	2d80      	cmp	r5, #128	; 0x80
 800efa0:	d1f1      	bne.n	800ef86 <arm_cfft_f32+0x3a>
 800efa2:	4621      	mov	r1, r4
 800efa4:	4630      	mov	r0, r6
 800efa6:	f7ff fca9 	bl	800e8fc <arm_cfft_radix8by2_f32>
 800efaa:	f1b8 0f00 	cmp.w	r8, #0
 800efae:	d0ed      	beq.n	800ef8c <arm_cfft_f32+0x40>
 800efb0:	68b2      	ldr	r2, [r6, #8]
 800efb2:	4620      	mov	r0, r4
 800efb4:	89b1      	ldrh	r1, [r6, #12]
 800efb6:	f000 f83f 	bl	800f038 <arm_bitreversal_32>
 800efba:	2f01      	cmp	r7, #1
 800efbc:	d1e8      	bne.n	800ef90 <arm_cfft_f32+0x44>
 800efbe:	ee07 5a90 	vmov	s15, r5
 800efc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800efc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800efce:	2d00      	cmp	r5, #0
 800efd0:	d0de      	beq.n	800ef90 <arm_cfft_f32+0x44>
 800efd2:	f104 0108 	add.w	r1, r4, #8
 800efd6:	2300      	movs	r3, #0
 800efd8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800efdc:	3301      	adds	r3, #1
 800efde:	ed51 7a01 	vldr	s15, [r1, #-4]
 800efe2:	3108      	adds	r1, #8
 800efe4:	429d      	cmp	r5, r3
 800efe6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800efea:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800efee:	ed01 7a04 	vstr	s14, [r1, #-16]
 800eff2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800eff6:	d1ef      	bne.n	800efd8 <arm_cfft_f32+0x8c>
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f000:	d0bb      	beq.n	800ef7a <arm_cfft_f32+0x2e>
 800f002:	e7c0      	b.n	800ef86 <arm_cfft_f32+0x3a>
 800f004:	2d10      	cmp	r5, #16
 800f006:	d0cc      	beq.n	800efa2 <arm_cfft_f32+0x56>
 800f008:	e7bd      	b.n	800ef86 <arm_cfft_f32+0x3a>
 800f00a:	b195      	cbz	r5, 800f032 <arm_cfft_f32+0xe6>
 800f00c:	f101 030c 	add.w	r3, r1, #12
 800f010:	2200      	movs	r2, #0
 800f012:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f016:	3201      	adds	r2, #1
 800f018:	3308      	adds	r3, #8
 800f01a:	eef1 7a67 	vneg.f32	s15, s15
 800f01e:	4295      	cmp	r5, r2
 800f020:	ed43 7a04 	vstr	s15, [r3, #-16]
 800f024:	d1f5      	bne.n	800f012 <arm_cfft_f32+0xc6>
 800f026:	e79a      	b.n	800ef5e <arm_cfft_f32+0x12>
 800f028:	4621      	mov	r1, r4
 800f02a:	4630      	mov	r0, r6
 800f02c:	f7ff fd32 	bl	800ea94 <arm_cfft_radix8by4_f32>
 800f030:	e7a9      	b.n	800ef86 <arm_cfft_f32+0x3a>
 800f032:	2b00      	cmp	r3, #0
 800f034:	d0ac      	beq.n	800ef90 <arm_cfft_f32+0x44>
 800f036:	e7bb      	b.n	800efb0 <arm_cfft_f32+0x64>

0800f038 <arm_bitreversal_32>:
 800f038:	b321      	cbz	r1, 800f084 <arm_bitreversal_32+0x4c>
 800f03a:	f102 0c02 	add.w	ip, r2, #2
 800f03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f042:	4690      	mov	r8, r2
 800f044:	2500      	movs	r5, #0
 800f046:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800f04a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800f04e:	3502      	adds	r5, #2
 800f050:	08a4      	lsrs	r4, r4, #2
 800f052:	089b      	lsrs	r3, r3, #2
 800f054:	428d      	cmp	r5, r1
 800f056:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800f05a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800f05e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800f062:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800f066:	f107 0704 	add.w	r7, r7, #4
 800f06a:	f106 0604 	add.w	r6, r6, #4
 800f06e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800f072:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800f076:	59c4      	ldr	r4, [r0, r7]
 800f078:	5983      	ldr	r3, [r0, r6]
 800f07a:	51c3      	str	r3, [r0, r7]
 800f07c:	5184      	str	r4, [r0, r6]
 800f07e:	d3e2      	bcc.n	800f046 <arm_bitreversal_32+0xe>
 800f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop

0800f088 <arm_fir_decimate_init_f32>:
 800f088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08c:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800f090:	fbbc f4f2 	udiv	r4, ip, r2
 800f094:	fb02 c414 	mls	r4, r2, r4, ip
 800f098:	b99c      	cbnz	r4, 800f0c2 <arm_fir_decimate_init_f32+0x3a>
 800f09a:	460f      	mov	r7, r1
 800f09c:	4616      	mov	r6, r2
 800f09e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	443a      	add	r2, r7
 800f0a6:	8069      	strh	r1, [r5, #2]
 800f0a8:	6043      	str	r3, [r0, #4]
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4462      	add	r2, ip
 800f0ae:	4640      	mov	r0, r8
 800f0b0:	0092      	lsls	r2, r2, #2
 800f0b2:	f000 fd89 	bl	800fbc8 <memset>
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f8c5 8008 	str.w	r8, [r5, #8]
 800f0bc:	702e      	strb	r6, [r5, #0]
 800f0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c2:	f06f 0001 	mvn.w	r0, #1
 800f0c6:	e7fa      	b.n	800f0be <arm_fir_decimate_init_f32+0x36>

0800f0c8 <arm_fir_decimate_f32>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	b08d      	sub	sp, #52	; 0x34
 800f0d0:	4694      	mov	ip, r2
 800f0d2:	782c      	ldrb	r4, [r5, #0]
 800f0d4:	886f      	ldrh	r7, [r5, #2]
 800f0d6:	9001      	str	r0, [sp, #4]
 800f0d8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800f0dc:	68ae      	ldr	r6, [r5, #8]
 800f0de:	4438      	add	r0, r7
 800f0e0:	686d      	ldr	r5, [r5, #4]
 800f0e2:	9207      	str	r2, [sp, #28]
 800f0e4:	970a      	str	r7, [sp, #40]	; 0x28
 800f0e6:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800f0ea:	9508      	str	r5, [sp, #32]
 800f0ec:	fbb3 f3f4 	udiv	r3, r3, r4
 800f0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f2:	089b      	lsrs	r3, r3, #2
 800f0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f6:	f000 80ef 	beq.w	800f2d8 <arm_fir_decimate_f32+0x210>
 800f0fa:	08ba      	lsrs	r2, r7, #2
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	3510      	adds	r5, #16
 800f100:	f007 0703 	and.w	r7, r7, #3
 800f104:	9205      	str	r2, [sp, #20]
 800f106:	0112      	lsls	r2, r2, #4
 800f108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f10a:	f10c 0910 	add.w	r9, ip, #16
 800f10e:	4413      	add	r3, r2
 800f110:	9100      	str	r1, [sp, #0]
 800f112:	eb05 0e02 	add.w	lr, r5, r2
 800f116:	4611      	mov	r1, r2
 800f118:	9503      	str	r5, [sp, #12]
 800f11a:	9704      	str	r7, [sp, #16]
 800f11c:	9002      	str	r0, [sp, #8]
 800f11e:	9306      	str	r3, [sp, #24]
 800f120:	00a4      	lsls	r4, r4, #2
 800f122:	4658      	mov	r0, fp
 800f124:	9a00      	ldr	r2, [sp, #0]
 800f126:	4623      	mov	r3, r4
 800f128:	f852 5b04 	ldr.w	r5, [r2], #4
 800f12c:	3b01      	subs	r3, #1
 800f12e:	f840 5b04 	str.w	r5, [r0], #4
 800f132:	d1f9      	bne.n	800f128 <arm_fir_decimate_f32+0x60>
 800f134:	9b01      	ldr	r3, [sp, #4]
 800f136:	00a4      	lsls	r4, r4, #2
 800f138:	eddf 0abe 	vldr	s1, [pc, #760]	; 800f434 <arm_fir_decimate_f32+0x36c>
 800f13c:	f893 8000 	ldrb.w	r8, [r3]
 800f140:	44a3      	add	fp, r4
 800f142:	9b00      	ldr	r3, [sp, #0]
 800f144:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800f148:	4423      	add	r3, r4
 800f14a:	eb06 0708 	add.w	r7, r6, r8
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	eb07 0c08 	add.w	ip, r7, r8
 800f154:	9b05      	ldr	r3, [sp, #20]
 800f156:	eb0c 0a08 	add.w	sl, ip, r8
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 815c 	beq.w	800f418 <arm_fir_decimate_f32+0x350>
 800f160:	eef0 4a60 	vmov.f32	s9, s1
 800f164:	9b03      	ldr	r3, [sp, #12]
 800f166:	eef0 7a60 	vmov.f32	s15, s1
 800f16a:	f106 0510 	add.w	r5, r6, #16
 800f16e:	eeb0 7a60 	vmov.f32	s14, s1
 800f172:	f107 0410 	add.w	r4, r7, #16
 800f176:	f10c 0010 	add.w	r0, ip, #16
 800f17a:	f10a 0210 	add.w	r2, sl, #16
 800f17e:	ed53 5a04 	vldr	s11, [r3, #-16]
 800f182:	3310      	adds	r3, #16
 800f184:	ed12 5a04 	vldr	s10, [r2, #-16]
 800f188:	3510      	adds	r5, #16
 800f18a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800f18e:	3410      	adds	r4, #16
 800f190:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800f194:	3010      	adds	r0, #16
 800f196:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800f19a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f19e:	ee25 1a81 	vmul.f32	s2, s11, s2
 800f1a2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800f1a6:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800f1aa:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800f1ae:	ee65 5a85 	vmul.f32	s11, s11, s10
 800f1b2:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800f1b6:	ed12 5a03 	vldr	s10, [r2, #-12]
 800f1ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f1be:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800f1c2:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800f1c6:	ee26 2a02 	vmul.f32	s4, s12, s4
 800f1ca:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800f1ce:	ee31 1a27 	vadd.f32	s2, s2, s15
 800f1d2:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800f1d6:	ee66 7a22 	vmul.f32	s15, s12, s5
 800f1da:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800f1de:	ee26 3a03 	vmul.f32	s6, s12, s6
 800f1e2:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800f1e6:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800f1ea:	ed52 0a02 	vldr	s1, [r2, #-8]
 800f1ee:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f1f2:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800f1f6:	ee72 2a07 	vadd.f32	s5, s4, s14
 800f1fa:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800f1fe:	ee77 7a81 	vadd.f32	s15, s15, s2
 800f202:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800f206:	ee33 3a21 	vadd.f32	s6, s6, s3
 800f20a:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800f20e:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800f212:	ed52 1a01 	vldr	s3, [r2, #-4]
 800f216:	ee26 4a84 	vmul.f32	s8, s13, s8
 800f21a:	459e      	cmp	lr, r3
 800f21c:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800f220:	f102 0210 	add.w	r2, r2, #16
 800f224:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800f228:	ee36 6a25 	vadd.f32	s12, s12, s11
 800f22c:	ee25 7a07 	vmul.f32	s14, s10, s14
 800f230:	ee34 4a27 	vadd.f32	s8, s8, s15
 800f234:	ee74 4a83 	vadd.f32	s9, s9, s6
 800f238:	ee65 7a01 	vmul.f32	s15, s10, s2
 800f23c:	ee25 3a02 	vmul.f32	s6, s10, s4
 800f240:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800f244:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f248:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f24c:	ee37 7a23 	vadd.f32	s14, s14, s7
 800f250:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f254:	ee73 4a24 	vadd.f32	s9, s6, s9
 800f258:	ee75 0a26 	vadd.f32	s1, s10, s13
 800f25c:	d18f      	bne.n	800f17e <arm_fir_decimate_f32+0xb6>
 800f25e:	440e      	add	r6, r1
 800f260:	440f      	add	r7, r1
 800f262:	448c      	add	ip, r1
 800f264:	eb0a 0001 	add.w	r0, sl, r1
 800f268:	9a06      	ldr	r2, [sp, #24]
 800f26a:	9b04      	ldr	r3, [sp, #16]
 800f26c:	b1db      	cbz	r3, 800f2a6 <arm_fir_decimate_f32+0x1de>
 800f26e:	ecb2 5a01 	vldmia	r2!, {s10}
 800f272:	3b01      	subs	r3, #1
 800f274:	ecf6 2a01 	vldmia	r6!, {s5}
 800f278:	ecf7 3a01 	vldmia	r7!, {s7}
 800f27c:	ecbc 4a01 	vldmia	ip!, {s8}
 800f280:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f284:	ecf0 6a01 	vldmia	r0!, {s13}
 800f288:	ee65 3a23 	vmul.f32	s7, s10, s7
 800f28c:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f290:	ee25 5a26 	vmul.f32	s10, s10, s13
 800f294:	ee37 7a22 	vadd.f32	s14, s14, s5
 800f298:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f29c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f2a0:	ee70 0a85 	vadd.f32	s1, s1, s10
 800f2a4:	d1e3      	bne.n	800f26e <arm_fir_decimate_f32+0x1a6>
 800f2a6:	9b02      	ldr	r3, [sp, #8]
 800f2a8:	eb0a 0608 	add.w	r6, sl, r8
 800f2ac:	ed09 7a04 	vstr	s14, [r9, #-16]
 800f2b0:	f109 0910 	add.w	r9, r9, #16
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800f2ba:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800f2be:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800f2c2:	9302      	str	r3, [sp, #8]
 800f2c4:	d002      	beq.n	800f2cc <arm_fir_decimate_f32+0x204>
 800f2c6:	9b01      	ldr	r3, [sp, #4]
 800f2c8:	781c      	ldrb	r4, [r3, #0]
 800f2ca:	e729      	b.n	800f120 <arm_fir_decimate_f32+0x58>
 800f2cc:	9b07      	ldr	r3, [sp, #28]
 800f2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2d0:	9900      	ldr	r1, [sp, #0]
 800f2d2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f2d6:	9307      	str	r3, [sp, #28]
 800f2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2da:	f013 0803 	ands.w	r8, r3, #3
 800f2de:	d067      	beq.n	800f3b0 <arm_fir_decimate_f32+0x2e8>
 800f2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2e2:	9808      	ldr	r0, [sp, #32]
 800f2e4:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800f2e8:	9d07      	ldr	r5, [sp, #28]
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	f003 0703 	and.w	r7, r3, #3
 800f2f0:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800f2f4:	f8cd e000 	str.w	lr, [sp]
 800f2f8:	3210      	adds	r2, #16
 800f2fa:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800f2fe:	eb00 090c 	add.w	r9, r0, ip
 800f302:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f306:	eb02 040c 	add.w	r4, r2, ip
 800f30a:	46aa      	mov	sl, r5
 800f30c:	9203      	str	r2, [sp, #12]
 800f30e:	f89e 5000 	ldrb.w	r5, [lr]
 800f312:	4658      	mov	r0, fp
 800f314:	460a      	mov	r2, r1
 800f316:	462b      	mov	r3, r5
 800f318:	ecf2 7a01 	vldmia	r2!, {s15}
 800f31c:	3b01      	subs	r3, #1
 800f31e:	ece0 7a01 	vstmia	r0!, {s15}
 800f322:	d1f9      	bne.n	800f318 <arm_fir_decimate_f32+0x250>
 800f324:	00ad      	lsls	r5, r5, #2
 800f326:	9b00      	ldr	r3, [sp, #0]
 800f328:	4429      	add	r1, r5
 800f32a:	44ab      	add	fp, r5
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d07c      	beq.n	800f42a <arm_fir_decimate_f32+0x362>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	f106 0210 	add.w	r2, r6, #16
 800f336:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f434 <arm_fir_decimate_f32+0x36c>
 800f33a:	ed13 7a04 	vldr	s14, [r3, #-16]
 800f33e:	3310      	adds	r3, #16
 800f340:	ed52 6a04 	vldr	s13, [r2, #-16]
 800f344:	3210      	adds	r2, #16
 800f346:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800f34a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f34e:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800f352:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800f356:	ee26 6a25 	vmul.f32	s12, s12, s11
 800f35a:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800f35e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f362:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800f366:	ee26 7a85 	vmul.f32	s14, s13, s10
 800f36a:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800f36e:	429c      	cmp	r4, r3
 800f370:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f374:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f380:	d1db      	bne.n	800f33a <arm_fir_decimate_f32+0x272>
 800f382:	eb06 000c 	add.w	r0, r6, ip
 800f386:	464a      	mov	r2, r9
 800f388:	b157      	cbz	r7, 800f3a0 <arm_fir_decimate_f32+0x2d8>
 800f38a:	463b      	mov	r3, r7
 800f38c:	ecb2 7a01 	vldmia	r2!, {s14}
 800f390:	3b01      	subs	r3, #1
 800f392:	ecf0 6a01 	vldmia	r0!, {s13}
 800f396:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f39a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f39e:	d1f5      	bne.n	800f38c <arm_fir_decimate_f32+0x2c4>
 800f3a0:	f89e 3000 	ldrb.w	r3, [lr]
 800f3a4:	ecea 7a01 	vstmia	sl!, {s15}
 800f3a8:	45c2      	cmp	sl, r8
 800f3aa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800f3ae:	d1ae      	bne.n	800f30e <arm_fir_decimate_f32+0x246>
 800f3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3b2:	1e5c      	subs	r4, r3, #1
 800f3b4:	9b01      	ldr	r3, [sp, #4]
 800f3b6:	08a5      	lsrs	r5, r4, #2
 800f3b8:	689f      	ldr	r7, [r3, #8]
 800f3ba:	d01d      	beq.n	800f3f8 <arm_fir_decimate_f32+0x330>
 800f3bc:	f106 0210 	add.w	r2, r6, #16
 800f3c0:	f107 0310 	add.w	r3, r7, #16
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800f3ca:	3901      	subs	r1, #1
 800f3cc:	f102 0210 	add.w	r2, r2, #16
 800f3d0:	f103 0310 	add.w	r3, r3, #16
 800f3d4:	f843 0c20 	str.w	r0, [r3, #-32]
 800f3d8:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800f3dc:	f843 0c1c 	str.w	r0, [r3, #-28]
 800f3e0:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800f3e4:	f843 0c18 	str.w	r0, [r3, #-24]
 800f3e8:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800f3ec:	f843 0c14 	str.w	r0, [r3, #-20]
 800f3f0:	d1e9      	bne.n	800f3c6 <arm_fir_decimate_f32+0x2fe>
 800f3f2:	012d      	lsls	r5, r5, #4
 800f3f4:	442e      	add	r6, r5
 800f3f6:	442f      	add	r7, r5
 800f3f8:	f014 0403 	ands.w	r4, r4, #3
 800f3fc:	d009      	beq.n	800f412 <arm_fir_decimate_f32+0x34a>
 800f3fe:	6833      	ldr	r3, [r6, #0]
 800f400:	3c01      	subs	r4, #1
 800f402:	603b      	str	r3, [r7, #0]
 800f404:	d005      	beq.n	800f412 <arm_fir_decimate_f32+0x34a>
 800f406:	6873      	ldr	r3, [r6, #4]
 800f408:	2c01      	cmp	r4, #1
 800f40a:	607b      	str	r3, [r7, #4]
 800f40c:	d001      	beq.n	800f412 <arm_fir_decimate_f32+0x34a>
 800f40e:	68b3      	ldr	r3, [r6, #8]
 800f410:	60bb      	str	r3, [r7, #8]
 800f412:	b00d      	add	sp, #52	; 0x34
 800f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f418:	4650      	mov	r0, sl
 800f41a:	9a08      	ldr	r2, [sp, #32]
 800f41c:	eef0 4a60 	vmov.f32	s9, s1
 800f420:	eef0 7a60 	vmov.f32	s15, s1
 800f424:	eeb0 7a60 	vmov.f32	s14, s1
 800f428:	e71f      	b.n	800f26a <arm_fir_decimate_f32+0x1a2>
 800f42a:	9a08      	ldr	r2, [sp, #32]
 800f42c:	4630      	mov	r0, r6
 800f42e:	eddf 7a01 	vldr	s15, [pc, #4]	; 800f434 <arm_fir_decimate_f32+0x36c>
 800f432:	e7a9      	b.n	800f388 <arm_fir_decimate_f32+0x2c0>
 800f434:	00000000 	.word	0x00000000

0800f438 <arm_cmplx_mult_cmplx_f32>:
 800f438:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800f43c:	b4f0      	push	{r4, r5, r6, r7}
 800f43e:	d073      	beq.n	800f528 <arm_cmplx_mult_cmplx_f32+0xf0>
 800f440:	f100 0620 	add.w	r6, r0, #32
 800f444:	f101 0520 	add.w	r5, r1, #32
 800f448:	f102 0420 	add.w	r4, r2, #32
 800f44c:	4667      	mov	r7, ip
 800f44e:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800f452:	3f01      	subs	r7, #1
 800f454:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800f458:	f105 0520 	add.w	r5, r5, #32
 800f45c:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800f460:	f106 0620 	add.w	r6, r6, #32
 800f464:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800f468:	f104 0420 	add.w	r4, r4, #32
 800f46c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f470:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f474:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f478:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f47c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f480:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f484:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800f488:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800f48c:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800f490:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800f494:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800f498:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800f49c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f4a0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f4a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f4a8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f4ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4b0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f4b4:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800f4b8:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800f4bc:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800f4c0:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800f4c4:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800f4c8:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800f4cc:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f4d0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f4d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f4d8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f4dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f4e4:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800f4e8:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800f4ec:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800f4f0:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800f4f4:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800f4f8:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800f4fc:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f500:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f504:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f508:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f50c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f510:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f514:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800f518:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800f51c:	d197      	bne.n	800f44e <arm_cmplx_mult_cmplx_f32+0x16>
 800f51e:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800f522:	4420      	add	r0, r4
 800f524:	4421      	add	r1, r4
 800f526:	4422      	add	r2, r4
 800f528:	f013 0303 	ands.w	r3, r3, #3
 800f52c:	d04b      	beq.n	800f5c6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800f52e:	edd0 5a00 	vldr	s11, [r0]
 800f532:	3b01      	subs	r3, #1
 800f534:	edd1 7a00 	vldr	s15, [r1]
 800f538:	edd0 6a01 	vldr	s13, [r0, #4]
 800f53c:	ed91 7a01 	vldr	s14, [r1, #4]
 800f540:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800f544:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f548:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f54c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f550:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f554:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f558:	edc2 6a00 	vstr	s13, [r2]
 800f55c:	edc2 7a01 	vstr	s15, [r2, #4]
 800f560:	d031      	beq.n	800f5c6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800f562:	edd0 7a02 	vldr	s15, [r0, #8]
 800f566:	2b01      	cmp	r3, #1
 800f568:	ed91 7a02 	vldr	s14, [r1, #8]
 800f56c:	edd0 6a03 	vldr	s13, [r0, #12]
 800f570:	edd1 5a03 	vldr	s11, [r1, #12]
 800f574:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f578:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f57c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f580:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f584:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f588:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f58c:	edc2 7a03 	vstr	s15, [r2, #12]
 800f590:	edc2 6a02 	vstr	s13, [r2, #8]
 800f594:	d017      	beq.n	800f5c6 <arm_cmplx_mult_cmplx_f32+0x18e>
 800f596:	edd0 7a04 	vldr	s15, [r0, #16]
 800f59a:	ed91 7a04 	vldr	s14, [r1, #16]
 800f59e:	edd0 6a05 	vldr	s13, [r0, #20]
 800f5a2:	edd1 5a05 	vldr	s11, [r1, #20]
 800f5a6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800f5aa:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f5ae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5b2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f5b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f5ba:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f5be:	edc2 7a05 	vstr	s15, [r2, #20]
 800f5c2:	edc2 6a04 	vstr	s13, [r2, #16]
 800f5c6:	bcf0      	pop	{r4, r5, r6, r7}
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop

0800f5cc <arm_radix8_butterfly_f32>:
 800f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d0:	ed2d 8b10 	vpush	{d8-d15}
 800f5d4:	b095      	sub	sp, #84	; 0x54
 800f5d6:	468a      	mov	sl, r1
 800f5d8:	468b      	mov	fp, r1
 800f5da:	eddf 8abb 	vldr	s17, [pc, #748]	; 800f8c8 <arm_radix8_butterfly_f32+0x2fc>
 800f5de:	9012      	str	r0, [sp, #72]	; 0x48
 800f5e0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f5ea:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800f5ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f5f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f5f4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800f5f8:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800f5fc:	920f      	str	r2, [sp, #60]	; 0x3c
 800f5fe:	9303      	str	r3, [sp, #12]
 800f600:	0153      	lsls	r3, r2, #5
 800f602:	0114      	lsls	r4, r2, #4
 800f604:	eba9 0002 	sub.w	r0, r9, r2
 800f608:	18ce      	adds	r6, r1, r3
 800f60a:	9302      	str	r3, [sp, #8]
 800f60c:	0097      	lsls	r7, r2, #2
 800f60e:	4613      	mov	r3, r2
 800f610:	eb06 0509 	add.w	r5, r6, r9
 800f614:	9004      	str	r0, [sp, #16]
 800f616:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800f61a:	1bd2      	subs	r2, r2, r7
 800f61c:	eb05 0109 	add.w	r1, r5, r9
 800f620:	441f      	add	r7, r3
 800f622:	9405      	str	r4, [sp, #20]
 800f624:	f109 0004 	add.w	r0, r9, #4
 800f628:	9101      	str	r1, [sp, #4]
 800f62a:	1d21      	adds	r1, r4, #4
 800f62c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f62e:	f04f 0e00 	mov.w	lr, #0
 800f632:	9c01      	ldr	r4, [sp, #4]
 800f634:	4418      	add	r0, r3
 800f636:	4419      	add	r1, r3
 800f638:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800f63c:	9b02      	ldr	r3, [sp, #8]
 800f63e:	00fc      	lsls	r4, r7, #3
 800f640:	18d7      	adds	r7, r2, r3
 800f642:	9b04      	ldr	r3, [sp, #16]
 800f644:	9406      	str	r4, [sp, #24]
 800f646:	00db      	lsls	r3, r3, #3
 800f648:	9c01      	ldr	r4, [sp, #4]
 800f64a:	9307      	str	r3, [sp, #28]
 800f64c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800f650:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800f654:	9304      	str	r3, [sp, #16]
 800f656:	9b03      	ldr	r3, [sp, #12]
 800f658:	edd6 6a00 	vldr	s13, [r6]
 800f65c:	44de      	add	lr, fp
 800f65e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800f662:	ed94 7a00 	vldr	s14, [r4]
 800f666:	45f2      	cmp	sl, lr
 800f668:	ed10 6a01 	vldr	s12, [r0, #-4]
 800f66c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800f670:	edd5 2a00 	vldr	s5, [r5]
 800f674:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f678:	edd7 3a00 	vldr	s7, [r7]
 800f67c:	ed11 5a01 	vldr	s10, [r1, #-4]
 800f680:	ee36 3a22 	vadd.f32	s6, s12, s5
 800f684:	edd2 6a00 	vldr	s13, [r2]
 800f688:	ee75 5a07 	vadd.f32	s11, s10, s14
 800f68c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800f690:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800f694:	ee72 4a25 	vadd.f32	s9, s4, s11
 800f698:	ee73 3a04 	vadd.f32	s7, s6, s8
 800f69c:	ee35 5a47 	vsub.f32	s10, s10, s14
 800f6a0:	ee36 7a62 	vsub.f32	s14, s12, s5
 800f6a4:	ee32 2a65 	vsub.f32	s4, s4, s11
 800f6a8:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800f6ac:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800f6b0:	ee37 6a66 	vsub.f32	s12, s14, s13
 800f6b4:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800f6b8:	ee33 3a44 	vsub.f32	s6, s6, s8
 800f6bc:	edc6 4a00 	vstr	s9, [r6]
 800f6c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f6c4:	ed97 4a01 	vldr	s8, [r7, #4]
 800f6c8:	ee66 6a28 	vmul.f32	s13, s12, s17
 800f6cc:	edd0 5a00 	vldr	s11, [r0]
 800f6d0:	ed95 6a01 	vldr	s12, [r5, #4]
 800f6d4:	ee27 7a28 	vmul.f32	s14, s14, s17
 800f6d8:	edd2 3a01 	vldr	s7, [r2, #4]
 800f6dc:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800f6e0:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800f6e4:	ed96 1a01 	vldr	s2, [r6, #4]
 800f6e8:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800f6ec:	edd4 0a01 	vldr	s1, [r4, #4]
 800f6f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f6f4:	eddc 6a00 	vldr	s13, [ip]
 800f6f8:	ee75 5a86 	vadd.f32	s11, s11, s12
 800f6fc:	ed91 6a00 	vldr	s12, [r1]
 800f700:	ee73 3a84 	vadd.f32	s7, s7, s8
 800f704:	ee74 1a80 	vadd.f32	s3, s9, s0
 800f708:	ee36 4a81 	vadd.f32	s8, s13, s2
 800f70c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800f710:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800f714:	ee36 1a20 	vadd.f32	s2, s12, s1
 800f718:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800f71c:	ee36 6a60 	vsub.f32	s12, s12, s1
 800f720:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800f724:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800f728:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800f72c:	ee74 3a01 	vadd.f32	s7, s8, s2
 800f730:	ee34 4a41 	vsub.f32	s8, s8, s2
 800f734:	ee36 1a21 	vadd.f32	s2, s12, s3
 800f738:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800f73c:	ee36 6a61 	vsub.f32	s12, s12, s3
 800f740:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800f744:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800f748:	ed8c 0a00 	vstr	s0, [ip]
 800f74c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800f750:	449c      	add	ip, r3
 800f752:	ee75 4a07 	vadd.f32	s9, s10, s14
 800f756:	edc6 3a01 	vstr	s7, [r6, #4]
 800f75a:	ee35 7a47 	vsub.f32	s14, s10, s14
 800f75e:	441e      	add	r6, r3
 800f760:	ee32 5a25 	vadd.f32	s10, s4, s11
 800f764:	ee72 5a65 	vsub.f32	s11, s4, s11
 800f768:	ee72 3a81 	vadd.f32	s7, s5, s2
 800f76c:	ed01 5a01 	vstr	s10, [r1, #-4]
 800f770:	ee34 2a43 	vsub.f32	s4, s8, s6
 800f774:	edc4 5a00 	vstr	s11, [r4]
 800f778:	ee37 5a86 	vadd.f32	s10, s15, s12
 800f77c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800f780:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f784:	ed81 2a00 	vstr	s4, [r1]
 800f788:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800f78c:	4419      	add	r1, r3
 800f78e:	ee33 4a04 	vadd.f32	s8, s6, s8
 800f792:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800f796:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800f79a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f79e:	ed84 4a01 	vstr	s8, [r4, #4]
 800f7a2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800f7a6:	441c      	add	r4, r3
 800f7a8:	edc7 2a00 	vstr	s5, [r7]
 800f7ac:	ed85 5a00 	vstr	s10, [r5]
 800f7b0:	edc2 7a00 	vstr	s15, [r2]
 800f7b4:	edc0 5a00 	vstr	s11, [r0]
 800f7b8:	4418      	add	r0, r3
 800f7ba:	edc7 4a01 	vstr	s9, [r7, #4]
 800f7be:	441f      	add	r7, r3
 800f7c0:	ed85 6a01 	vstr	s12, [r5, #4]
 800f7c4:	441d      	add	r5, r3
 800f7c6:	ed82 7a01 	vstr	s14, [r2, #4]
 800f7ca:	441a      	add	r2, r3
 800f7cc:	f63f af44 	bhi.w	800f658 <arm_radix8_butterfly_f32+0x8c>
 800f7d0:	469c      	mov	ip, r3
 800f7d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7d4:	2b07      	cmp	r3, #7
 800f7d6:	f240 81b6 	bls.w	800fb46 <arm_radix8_butterfly_f32+0x57a>
 800f7da:	9a02      	ldr	r2, [sp, #8]
 800f7dc:	f109 0608 	add.w	r6, r9, #8
 800f7e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7e2:	f108 0408 	add.w	r4, r8, #8
 800f7e6:	3208      	adds	r2, #8
 800f7e8:	9f06      	ldr	r7, [sp, #24]
 800f7ea:	9d04      	ldr	r5, [sp, #16]
 800f7ec:	189a      	adds	r2, r3, r2
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	3508      	adds	r5, #8
 800f7f2:	9807      	ldr	r0, [sp, #28]
 800f7f4:	920c      	str	r2, [sp, #48]	; 0x30
 800f7f6:	199a      	adds	r2, r3, r6
 800f7f8:	9905      	ldr	r1, [sp, #20]
 800f7fa:	3008      	adds	r0, #8
 800f7fc:	920b      	str	r2, [sp, #44]	; 0x2c
 800f7fe:	19da      	adds	r2, r3, r7
 800f800:	310c      	adds	r1, #12
 800f802:	920a      	str	r2, [sp, #40]	; 0x28
 800f804:	195a      	adds	r2, r3, r5
 800f806:	9209      	str	r2, [sp, #36]	; 0x24
 800f808:	191a      	adds	r2, r3, r4
 800f80a:	9208      	str	r2, [sp, #32]
 800f80c:	181a      	adds	r2, r3, r0
 800f80e:	9207      	str	r2, [sp, #28]
 800f810:	185a      	adds	r2, r3, r1
 800f812:	330c      	adds	r3, #12
 800f814:	9205      	str	r2, [sp, #20]
 800f816:	9306      	str	r3, [sp, #24]
 800f818:	2301      	movs	r3, #1
 800f81a:	9304      	str	r3, [sp, #16]
 800f81c:	2300      	movs	r3, #0
 800f81e:	930d      	str	r3, [sp, #52]	; 0x34
 800f820:	4663      	mov	r3, ip
 800f822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f824:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f826:	f8dd c014 	ldr.w	ip, [sp, #20]
 800f82a:	440a      	add	r2, r1
 800f82c:	9f06      	ldr	r7, [sp, #24]
 800f82e:	9e07      	ldr	r6, [sp, #28]
 800f830:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800f834:	920d      	str	r2, [sp, #52]	; 0x34
 800f836:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800f83a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f83c:	9d08      	ldr	r5, [sp, #32]
 800f83e:	4442      	add	r2, r8
 800f840:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f842:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f844:	eb02 0108 	add.w	r1, r2, r8
 800f848:	ed92 ea00 	vldr	s28, [r2]
 800f84c:	eb01 0208 	add.w	r2, r1, r8
 800f850:	edd1 da00 	vldr	s27, [r1]
 800f854:	eb02 0108 	add.w	r1, r2, r8
 800f858:	ed92 da00 	vldr	s26, [r2]
 800f85c:	eb01 0208 	add.w	r2, r1, r8
 800f860:	edd1 ca00 	vldr	s25, [r1]
 800f864:	eb02 0108 	add.w	r1, r2, r8
 800f868:	ed92 ca00 	vldr	s24, [r2]
 800f86c:	eb01 0208 	add.w	r2, r1, r8
 800f870:	edd1 ba00 	vldr	s23, [r1]
 800f874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f876:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800f87a:	ed92 ba00 	vldr	s22, [r2]
 800f87e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f880:	eb0e 0908 	add.w	r9, lr, r8
 800f884:	910e      	str	r1, [sp, #56]	; 0x38
 800f886:	9201      	str	r2, [sp, #4]
 800f888:	eb09 0208 	add.w	r2, r9, r8
 800f88c:	ed99 aa01 	vldr	s20, [r9, #4]
 800f890:	edde aa01 	vldr	s21, [lr, #4]
 800f894:	eb02 0908 	add.w	r9, r2, r8
 800f898:	edd2 9a01 	vldr	s19, [r2, #4]
 800f89c:	f8dd e010 	ldr.w	lr, [sp, #16]
 800f8a0:	eb09 0208 	add.w	r2, r9, r8
 800f8a4:	ed99 9a01 	vldr	s18, [r9, #4]
 800f8a8:	eb02 0908 	add.w	r9, r2, r8
 800f8ac:	ed92 8a01 	vldr	s16, [r2, #4]
 800f8b0:	9a01      	ldr	r2, [sp, #4]
 800f8b2:	edd9 7a01 	vldr	s15, [r9, #4]
 800f8b6:	44c8      	add	r8, r9
 800f8b8:	edcd 7a02 	vstr	s15, [sp, #8]
 800f8bc:	edd8 7a01 	vldr	s15, [r8, #4]
 800f8c0:	edcd 7a03 	vstr	s15, [sp, #12]
 800f8c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f8c6:	e001      	b.n	800f8cc <arm_radix8_butterfly_f32+0x300>
 800f8c8:	3f3504f3 	.word	0x3f3504f3
 800f8cc:	ed92 7a00 	vldr	s14, [r2]
 800f8d0:	44de      	add	lr, fp
 800f8d2:	ed17 1a01 	vldr	s2, [r7, #-4]
 800f8d6:	ed90 5a00 	vldr	s10, [r0]
 800f8da:	45f2      	cmp	sl, lr
 800f8dc:	ed1c fa01 	vldr	s30, [ip, #-4]
 800f8e0:	ee31 3a07 	vadd.f32	s6, s2, s14
 800f8e4:	edd6 5a00 	vldr	s11, [r6]
 800f8e8:	ee31 1a47 	vsub.f32	s2, s2, s14
 800f8ec:	edd4 7a00 	vldr	s15, [r4]
 800f8f0:	ed95 7a00 	vldr	s14, [r5]
 800f8f4:	ed91 4a00 	vldr	s8, [r1]
 800f8f8:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800f8fc:	ee77 6a25 	vadd.f32	s13, s14, s11
 800f900:	edd7 ea00 	vldr	s29, [r7]
 800f904:	ee74 fa05 	vadd.f32	s31, s8, s10
 800f908:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f90c:	ee34 4a45 	vsub.f32	s8, s8, s10
 800f910:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800f914:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f918:	ee33 3a46 	vsub.f32	s6, s6, s12
 800f91c:	ee31 6a85 	vadd.f32	s12, s3, s10
 800f920:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800f924:	ee34 fa07 	vadd.f32	s30, s8, s14
 800f928:	ed07 6a01 	vstr	s12, [r7, #-4]
 800f92c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800f930:	edd5 3a01 	vldr	s7, [r5, #4]
 800f934:	ee7f fae6 	vsub.f32	s31, s31, s13
 800f938:	ed90 7a01 	vldr	s14, [r0, #4]
 800f93c:	ee2f fa28 	vmul.f32	s30, s30, s17
 800f940:	edd1 5a01 	vldr	s11, [r1, #4]
 800f944:	ee24 4a28 	vmul.f32	s8, s8, s17
 800f948:	ed96 6a01 	vldr	s12, [r6, #4]
 800f94c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800f950:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800f954:	edd2 6a01 	vldr	s13, [r2, #4]
 800f958:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800f95c:	edd4 4a01 	vldr	s9, [r4, #4]
 800f960:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f964:	ed9c 7a00 	vldr	s14, [ip]
 800f968:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800f96c:	ee33 6a86 	vadd.f32	s12, s7, s12
 800f970:	ee37 facf 	vsub.f32	s30, s15, s30
 800f974:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800f978:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800f97c:	ee7e eae6 	vsub.f32	s29, s29, s13
 800f980:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800f984:	ee77 6a24 	vadd.f32	s13, s14, s9
 800f988:	ee75 0a86 	vadd.f32	s1, s11, s12
 800f98c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f990:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800f994:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800f998:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800f99c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f9a0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800f9a4:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800f9a8:	ee77 4a22 	vadd.f32	s9, s14, s5
 800f9ac:	ee7e eae7 	vsub.f32	s29, s29, s15
 800f9b0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800f9b4:	ee71 2a04 	vadd.f32	s5, s2, s8
 800f9b8:	ee31 7a44 	vsub.f32	s14, s2, s8
 800f9bc:	ee30 1a60 	vsub.f32	s2, s0, s1
 800f9c0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f9c4:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f9c8:	ee33 3aef 	vsub.f32	s6, s7, s31
 800f9cc:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800f9d0:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800f9d4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800f9d8:	ee72 5a25 	vadd.f32	s11, s4, s11
 800f9dc:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800f9e0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800f9e4:	ee77 2a27 	vadd.f32	s5, s14, s15
 800f9e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9ec:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800f9f0:	ee2c fa85 	vmul.f32	s30, s25, s10
 800f9f4:	ee69 ea01 	vmul.f32	s29, s18, s2
 800f9f8:	ee29 5a05 	vmul.f32	s10, s18, s10
 800f9fc:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800fa00:	ee6d faa1 	vmul.f32	s31, s27, s3
 800fa04:	ee70 0a20 	vadd.f32	s1, s0, s1
 800fa08:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800fa0c:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800fa10:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800fa14:	edc7 0a00 	vstr	s1, [r7]
 800fa18:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800fa1c:	441f      	add	r7, r3
 800fa1e:	ee2a faa3 	vmul.f32	s30, s21, s7
 800fa22:	ee31 5a45 	vsub.f32	s10, s2, s10
 800fa26:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800fa2a:	edc2 ea00 	vstr	s29, [r2]
 800fa2e:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800fa32:	ee33 3a61 	vsub.f32	s6, s6, s3
 800fa36:	ed82 5a01 	vstr	s10, [r2, #4]
 800fa3a:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800fa3e:	edcd 3a01 	vstr	s7, [sp, #4]
 800fa42:	ed9d 5a03 	vldr	s10, [sp, #12]
 800fa46:	ee6b ea86 	vmul.f32	s29, s23, s12
 800fa4a:	eddd 3a02 	vldr	s7, [sp, #8]
 800fa4e:	ee6b fa24 	vmul.f32	s31, s22, s9
 800fa52:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800fa56:	ee65 4a24 	vmul.f32	s9, s10, s9
 800fa5a:	ed8c 3a00 	vstr	s6, [ip]
 800fa5e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800fa62:	ee23 6a86 	vmul.f32	s12, s7, s12
 800fa66:	eddd 3a01 	vldr	s7, [sp, #4]
 800fa6a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800fa6e:	441a      	add	r2, r3
 800fa70:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800fa74:	449c      	add	ip, r3
 800fa76:	ee68 1a04 	vmul.f32	s3, s16, s8
 800fa7a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800fa7e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800fa82:	ee29 faa7 	vmul.f32	s30, s19, s15
 800fa86:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800fa8a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800fa8e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800fa92:	ee68 2a22 	vmul.f32	s5, s16, s5
 800fa96:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800fa9a:	ee29 7a87 	vmul.f32	s14, s19, s14
 800fa9e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800faa2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800faa6:	ee7e ea81 	vadd.f32	s29, s29, s2
 800faaa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800faae:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800fab2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800fab6:	edc4 ea00 	vstr	s29, [r4]
 800faba:	ee30 0a21 	vadd.f32	s0, s0, s3
 800fabe:	ed84 6a01 	vstr	s12, [r4, #4]
 800fac2:	ee74 2a62 	vsub.f32	s5, s8, s5
 800fac6:	edc1 0a00 	vstr	s1, [r1]
 800faca:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800face:	edc1 3a01 	vstr	s7, [r1, #4]
 800fad2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fad6:	ed86 5a00 	vstr	s10, [r6]
 800fada:	edc6 4a01 	vstr	s9, [r6, #4]
 800fade:	4419      	add	r1, r3
 800fae0:	ed80 0a00 	vstr	s0, [r0]
 800fae4:	441c      	add	r4, r3
 800fae6:	edc0 2a01 	vstr	s5, [r0, #4]
 800faea:	441e      	add	r6, r3
 800faec:	ed85 3a00 	vstr	s6, [r5]
 800faf0:	4418      	add	r0, r3
 800faf2:	ed85 7a01 	vstr	s14, [r5, #4]
 800faf6:	441d      	add	r5, r3
 800faf8:	f63f aee8 	bhi.w	800f8cc <arm_radix8_butterfly_f32+0x300>
 800fafc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fafe:	9a04      	ldr	r2, [sp, #16]
 800fb00:	3108      	adds	r1, #8
 800fb02:	3201      	adds	r2, #1
 800fb04:	910c      	str	r1, [sp, #48]	; 0x30
 800fb06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb08:	9204      	str	r2, [sp, #16]
 800fb0a:	3108      	adds	r1, #8
 800fb0c:	910b      	str	r1, [sp, #44]	; 0x2c
 800fb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb10:	3108      	adds	r1, #8
 800fb12:	910a      	str	r1, [sp, #40]	; 0x28
 800fb14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb16:	3108      	adds	r1, #8
 800fb18:	9109      	str	r1, [sp, #36]	; 0x24
 800fb1a:	9908      	ldr	r1, [sp, #32]
 800fb1c:	3108      	adds	r1, #8
 800fb1e:	9108      	str	r1, [sp, #32]
 800fb20:	9907      	ldr	r1, [sp, #28]
 800fb22:	3108      	adds	r1, #8
 800fb24:	9107      	str	r1, [sp, #28]
 800fb26:	9906      	ldr	r1, [sp, #24]
 800fb28:	3108      	adds	r1, #8
 800fb2a:	9106      	str	r1, [sp, #24]
 800fb2c:	9905      	ldr	r1, [sp, #20]
 800fb2e:	3108      	adds	r1, #8
 800fb30:	9105      	str	r1, [sp, #20]
 800fb32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fb34:	4291      	cmp	r1, r2
 800fb36:	f47f ae74 	bne.w	800f822 <arm_radix8_butterfly_f32+0x256>
 800fb3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb3c:	468b      	mov	fp, r1
 800fb3e:	00db      	lsls	r3, r3, #3
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	9310      	str	r3, [sp, #64]	; 0x40
 800fb44:	e551      	b.n	800f5ea <arm_radix8_butterfly_f32+0x1e>
 800fb46:	b015      	add	sp, #84	; 0x54
 800fb48:	ecbd 8b10 	vpop	{d8-d15}
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb50 <atoi>:
 800fb50:	220a      	movs	r2, #10
 800fb52:	2100      	movs	r1, #0
 800fb54:	f000 bdd8 	b.w	8010708 <strtol>

0800fb58 <__errno>:
 800fb58:	4b01      	ldr	r3, [pc, #4]	; (800fb60 <__errno+0x8>)
 800fb5a:	6818      	ldr	r0, [r3, #0]
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop
 800fb60:	24000498 	.word	0x24000498

0800fb64 <__libc_init_array>:
 800fb64:	b570      	push	{r4, r5, r6, lr}
 800fb66:	4d0d      	ldr	r5, [pc, #52]	; (800fb9c <__libc_init_array+0x38>)
 800fb68:	4c0d      	ldr	r4, [pc, #52]	; (800fba0 <__libc_init_array+0x3c>)
 800fb6a:	1b64      	subs	r4, r4, r5
 800fb6c:	10a4      	asrs	r4, r4, #2
 800fb6e:	2600      	movs	r6, #0
 800fb70:	42a6      	cmp	r6, r4
 800fb72:	d109      	bne.n	800fb88 <__libc_init_array+0x24>
 800fb74:	4d0b      	ldr	r5, [pc, #44]	; (800fba4 <__libc_init_array+0x40>)
 800fb76:	4c0c      	ldr	r4, [pc, #48]	; (800fba8 <__libc_init_array+0x44>)
 800fb78:	f004 f8c4 	bl	8013d04 <_init>
 800fb7c:	1b64      	subs	r4, r4, r5
 800fb7e:	10a4      	asrs	r4, r4, #2
 800fb80:	2600      	movs	r6, #0
 800fb82:	42a6      	cmp	r6, r4
 800fb84:	d105      	bne.n	800fb92 <__libc_init_array+0x2e>
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb8c:	4798      	blx	r3
 800fb8e:	3601      	adds	r6, #1
 800fb90:	e7ee      	b.n	800fb70 <__libc_init_array+0xc>
 800fb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb96:	4798      	blx	r3
 800fb98:	3601      	adds	r6, #1
 800fb9a:	e7f2      	b.n	800fb82 <__libc_init_array+0x1e>
 800fb9c:	0801e740 	.word	0x0801e740
 800fba0:	0801e740 	.word	0x0801e740
 800fba4:	0801e740 	.word	0x0801e740
 800fba8:	0801e744 	.word	0x0801e744

0800fbac <memcpy>:
 800fbac:	440a      	add	r2, r1
 800fbae:	4291      	cmp	r1, r2
 800fbb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbb4:	d100      	bne.n	800fbb8 <memcpy+0xc>
 800fbb6:	4770      	bx	lr
 800fbb8:	b510      	push	{r4, lr}
 800fbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbc2:	4291      	cmp	r1, r2
 800fbc4:	d1f9      	bne.n	800fbba <memcpy+0xe>
 800fbc6:	bd10      	pop	{r4, pc}

0800fbc8 <memset>:
 800fbc8:	4402      	add	r2, r0
 800fbca:	4603      	mov	r3, r0
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d100      	bne.n	800fbd2 <memset+0xa>
 800fbd0:	4770      	bx	lr
 800fbd2:	f803 1b01 	strb.w	r1, [r3], #1
 800fbd6:	e7f9      	b.n	800fbcc <memset+0x4>

0800fbd8 <__cvt>:
 800fbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbda:	ed2d 8b02 	vpush	{d8}
 800fbde:	eeb0 8b40 	vmov.f64	d8, d0
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	4617      	mov	r7, r2
 800fbe6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fbe8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fbea:	ee18 2a90 	vmov	r2, s17
 800fbee:	f025 0520 	bic.w	r5, r5, #32
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	bfb6      	itet	lt
 800fbf6:	222d      	movlt	r2, #45	; 0x2d
 800fbf8:	2200      	movge	r2, #0
 800fbfa:	eeb1 8b40 	vneglt.f64	d8, d0
 800fbfe:	2d46      	cmp	r5, #70	; 0x46
 800fc00:	460c      	mov	r4, r1
 800fc02:	701a      	strb	r2, [r3, #0]
 800fc04:	d004      	beq.n	800fc10 <__cvt+0x38>
 800fc06:	2d45      	cmp	r5, #69	; 0x45
 800fc08:	d100      	bne.n	800fc0c <__cvt+0x34>
 800fc0a:	3401      	adds	r4, #1
 800fc0c:	2102      	movs	r1, #2
 800fc0e:	e000      	b.n	800fc12 <__cvt+0x3a>
 800fc10:	2103      	movs	r1, #3
 800fc12:	ab03      	add	r3, sp, #12
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	ab02      	add	r3, sp, #8
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	4633      	mov	r3, r6
 800fc1e:	eeb0 0b48 	vmov.f64	d0, d8
 800fc22:	f000 fe25 	bl	8010870 <_dtoa_r>
 800fc26:	2d47      	cmp	r5, #71	; 0x47
 800fc28:	d101      	bne.n	800fc2e <__cvt+0x56>
 800fc2a:	07fb      	lsls	r3, r7, #31
 800fc2c:	d51a      	bpl.n	800fc64 <__cvt+0x8c>
 800fc2e:	2d46      	cmp	r5, #70	; 0x46
 800fc30:	eb00 0204 	add.w	r2, r0, r4
 800fc34:	d10c      	bne.n	800fc50 <__cvt+0x78>
 800fc36:	7803      	ldrb	r3, [r0, #0]
 800fc38:	2b30      	cmp	r3, #48	; 0x30
 800fc3a:	d107      	bne.n	800fc4c <__cvt+0x74>
 800fc3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc44:	bf1c      	itt	ne
 800fc46:	f1c4 0401 	rsbne	r4, r4, #1
 800fc4a:	6034      	strne	r4, [r6, #0]
 800fc4c:	6833      	ldr	r3, [r6, #0]
 800fc4e:	441a      	add	r2, r3
 800fc50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc58:	bf08      	it	eq
 800fc5a:	9203      	streq	r2, [sp, #12]
 800fc5c:	2130      	movs	r1, #48	; 0x30
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d307      	bcc.n	800fc74 <__cvt+0x9c>
 800fc64:	9b03      	ldr	r3, [sp, #12]
 800fc66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc68:	1a1b      	subs	r3, r3, r0
 800fc6a:	6013      	str	r3, [r2, #0]
 800fc6c:	b005      	add	sp, #20
 800fc6e:	ecbd 8b02 	vpop	{d8}
 800fc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc74:	1c5c      	adds	r4, r3, #1
 800fc76:	9403      	str	r4, [sp, #12]
 800fc78:	7019      	strb	r1, [r3, #0]
 800fc7a:	e7f0      	b.n	800fc5e <__cvt+0x86>

0800fc7c <__exponent>:
 800fc7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2900      	cmp	r1, #0
 800fc82:	bfb8      	it	lt
 800fc84:	4249      	neglt	r1, r1
 800fc86:	f803 2b02 	strb.w	r2, [r3], #2
 800fc8a:	bfb4      	ite	lt
 800fc8c:	222d      	movlt	r2, #45	; 0x2d
 800fc8e:	222b      	movge	r2, #43	; 0x2b
 800fc90:	2909      	cmp	r1, #9
 800fc92:	7042      	strb	r2, [r0, #1]
 800fc94:	dd2a      	ble.n	800fcec <__exponent+0x70>
 800fc96:	f10d 0407 	add.w	r4, sp, #7
 800fc9a:	46a4      	mov	ip, r4
 800fc9c:	270a      	movs	r7, #10
 800fc9e:	46a6      	mov	lr, r4
 800fca0:	460a      	mov	r2, r1
 800fca2:	fb91 f6f7 	sdiv	r6, r1, r7
 800fca6:	fb07 1516 	mls	r5, r7, r6, r1
 800fcaa:	3530      	adds	r5, #48	; 0x30
 800fcac:	2a63      	cmp	r2, #99	; 0x63
 800fcae:	f104 34ff 	add.w	r4, r4, #4294967295
 800fcb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fcb6:	4631      	mov	r1, r6
 800fcb8:	dcf1      	bgt.n	800fc9e <__exponent+0x22>
 800fcba:	3130      	adds	r1, #48	; 0x30
 800fcbc:	f1ae 0502 	sub.w	r5, lr, #2
 800fcc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fcc4:	1c44      	adds	r4, r0, #1
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	4561      	cmp	r1, ip
 800fcca:	d30a      	bcc.n	800fce2 <__exponent+0x66>
 800fccc:	f10d 0209 	add.w	r2, sp, #9
 800fcd0:	eba2 020e 	sub.w	r2, r2, lr
 800fcd4:	4565      	cmp	r5, ip
 800fcd6:	bf88      	it	hi
 800fcd8:	2200      	movhi	r2, #0
 800fcda:	4413      	add	r3, r2
 800fcdc:	1a18      	subs	r0, r3, r0
 800fcde:	b003      	add	sp, #12
 800fce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fcea:	e7ed      	b.n	800fcc8 <__exponent+0x4c>
 800fcec:	2330      	movs	r3, #48	; 0x30
 800fcee:	3130      	adds	r1, #48	; 0x30
 800fcf0:	7083      	strb	r3, [r0, #2]
 800fcf2:	70c1      	strb	r1, [r0, #3]
 800fcf4:	1d03      	adds	r3, r0, #4
 800fcf6:	e7f1      	b.n	800fcdc <__exponent+0x60>

0800fcf8 <_printf_float>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	b08b      	sub	sp, #44	; 0x2c
 800fcfe:	460c      	mov	r4, r1
 800fd00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fd04:	4616      	mov	r6, r2
 800fd06:	461f      	mov	r7, r3
 800fd08:	4605      	mov	r5, r0
 800fd0a:	f001 fb31 	bl	8011370 <_localeconv_r>
 800fd0e:	f8d0 b000 	ldr.w	fp, [r0]
 800fd12:	4658      	mov	r0, fp
 800fd14:	f7f0 fae4 	bl	80002e0 <strlen>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	9308      	str	r3, [sp, #32]
 800fd1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fd20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fd24:	6822      	ldr	r2, [r4, #0]
 800fd26:	3307      	adds	r3, #7
 800fd28:	f023 0307 	bic.w	r3, r3, #7
 800fd2c:	f103 0108 	add.w	r1, r3, #8
 800fd30:	f8c8 1000 	str.w	r1, [r8]
 800fd34:	4682      	mov	sl, r0
 800fd36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fd3e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ffa0 <_printf_float+0x2a8>
 800fd42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fd46:	eeb0 6bc0 	vabs.f64	d6, d0
 800fd4a:	eeb4 6b47 	vcmp.f64	d6, d7
 800fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd52:	dd24      	ble.n	800fd9e <_printf_float+0xa6>
 800fd54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd5c:	d502      	bpl.n	800fd64 <_printf_float+0x6c>
 800fd5e:	232d      	movs	r3, #45	; 0x2d
 800fd60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd64:	4b90      	ldr	r3, [pc, #576]	; (800ffa8 <_printf_float+0x2b0>)
 800fd66:	4891      	ldr	r0, [pc, #580]	; (800ffac <_printf_float+0x2b4>)
 800fd68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fd6c:	bf94      	ite	ls
 800fd6e:	4698      	movls	r8, r3
 800fd70:	4680      	movhi	r8, r0
 800fd72:	2303      	movs	r3, #3
 800fd74:	6123      	str	r3, [r4, #16]
 800fd76:	f022 0204 	bic.w	r2, r2, #4
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6022      	str	r2, [r4, #0]
 800fd7e:	9304      	str	r3, [sp, #16]
 800fd80:	9700      	str	r7, [sp, #0]
 800fd82:	4633      	mov	r3, r6
 800fd84:	aa09      	add	r2, sp, #36	; 0x24
 800fd86:	4621      	mov	r1, r4
 800fd88:	4628      	mov	r0, r5
 800fd8a:	f000 f9d3 	bl	8010134 <_printf_common>
 800fd8e:	3001      	adds	r0, #1
 800fd90:	f040 808a 	bne.w	800fea8 <_printf_float+0x1b0>
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	b00b      	add	sp, #44	; 0x2c
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	eeb4 0b40 	vcmp.f64	d0, d0
 800fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda6:	d709      	bvc.n	800fdbc <_printf_float+0xc4>
 800fda8:	ee10 3a90 	vmov	r3, s1
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfbc      	itt	lt
 800fdb0:	232d      	movlt	r3, #45	; 0x2d
 800fdb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fdb6:	487e      	ldr	r0, [pc, #504]	; (800ffb0 <_printf_float+0x2b8>)
 800fdb8:	4b7e      	ldr	r3, [pc, #504]	; (800ffb4 <_printf_float+0x2bc>)
 800fdba:	e7d5      	b.n	800fd68 <_printf_float+0x70>
 800fdbc:	6863      	ldr	r3, [r4, #4]
 800fdbe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fdc2:	9104      	str	r1, [sp, #16]
 800fdc4:	1c59      	adds	r1, r3, #1
 800fdc6:	d13c      	bne.n	800fe42 <_printf_float+0x14a>
 800fdc8:	2306      	movs	r3, #6
 800fdca:	6063      	str	r3, [r4, #4]
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9303      	str	r3, [sp, #12]
 800fdd0:	ab08      	add	r3, sp, #32
 800fdd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fdd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fdda:	ab07      	add	r3, sp, #28
 800fddc:	6861      	ldr	r1, [r4, #4]
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	6022      	str	r2, [r4, #0]
 800fde2:	f10d 031b 	add.w	r3, sp, #27
 800fde6:	4628      	mov	r0, r5
 800fde8:	f7ff fef6 	bl	800fbd8 <__cvt>
 800fdec:	9b04      	ldr	r3, [sp, #16]
 800fdee:	9907      	ldr	r1, [sp, #28]
 800fdf0:	2b47      	cmp	r3, #71	; 0x47
 800fdf2:	4680      	mov	r8, r0
 800fdf4:	d108      	bne.n	800fe08 <_printf_float+0x110>
 800fdf6:	1cc8      	adds	r0, r1, #3
 800fdf8:	db02      	blt.n	800fe00 <_printf_float+0x108>
 800fdfa:	6863      	ldr	r3, [r4, #4]
 800fdfc:	4299      	cmp	r1, r3
 800fdfe:	dd41      	ble.n	800fe84 <_printf_float+0x18c>
 800fe00:	f1a9 0902 	sub.w	r9, r9, #2
 800fe04:	fa5f f989 	uxtb.w	r9, r9
 800fe08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fe0c:	d820      	bhi.n	800fe50 <_printf_float+0x158>
 800fe0e:	3901      	subs	r1, #1
 800fe10:	464a      	mov	r2, r9
 800fe12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe16:	9107      	str	r1, [sp, #28]
 800fe18:	f7ff ff30 	bl	800fc7c <__exponent>
 800fe1c:	9a08      	ldr	r2, [sp, #32]
 800fe1e:	9004      	str	r0, [sp, #16]
 800fe20:	1813      	adds	r3, r2, r0
 800fe22:	2a01      	cmp	r2, #1
 800fe24:	6123      	str	r3, [r4, #16]
 800fe26:	dc02      	bgt.n	800fe2e <_printf_float+0x136>
 800fe28:	6822      	ldr	r2, [r4, #0]
 800fe2a:	07d2      	lsls	r2, r2, #31
 800fe2c:	d501      	bpl.n	800fe32 <_printf_float+0x13a>
 800fe2e:	3301      	adds	r3, #1
 800fe30:	6123      	str	r3, [r4, #16]
 800fe32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d0a2      	beq.n	800fd80 <_printf_float+0x88>
 800fe3a:	232d      	movs	r3, #45	; 0x2d
 800fe3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe40:	e79e      	b.n	800fd80 <_printf_float+0x88>
 800fe42:	9904      	ldr	r1, [sp, #16]
 800fe44:	2947      	cmp	r1, #71	; 0x47
 800fe46:	d1c1      	bne.n	800fdcc <_printf_float+0xd4>
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1bf      	bne.n	800fdcc <_printf_float+0xd4>
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e7bc      	b.n	800fdca <_printf_float+0xd2>
 800fe50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fe54:	d118      	bne.n	800fe88 <_printf_float+0x190>
 800fe56:	2900      	cmp	r1, #0
 800fe58:	6863      	ldr	r3, [r4, #4]
 800fe5a:	dd0b      	ble.n	800fe74 <_printf_float+0x17c>
 800fe5c:	6121      	str	r1, [r4, #16]
 800fe5e:	b913      	cbnz	r3, 800fe66 <_printf_float+0x16e>
 800fe60:	6822      	ldr	r2, [r4, #0]
 800fe62:	07d0      	lsls	r0, r2, #31
 800fe64:	d502      	bpl.n	800fe6c <_printf_float+0x174>
 800fe66:	3301      	adds	r3, #1
 800fe68:	440b      	add	r3, r1
 800fe6a:	6123      	str	r3, [r4, #16]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	e7de      	b.n	800fe32 <_printf_float+0x13a>
 800fe74:	b913      	cbnz	r3, 800fe7c <_printf_float+0x184>
 800fe76:	6822      	ldr	r2, [r4, #0]
 800fe78:	07d2      	lsls	r2, r2, #31
 800fe7a:	d501      	bpl.n	800fe80 <_printf_float+0x188>
 800fe7c:	3302      	adds	r3, #2
 800fe7e:	e7f4      	b.n	800fe6a <_printf_float+0x172>
 800fe80:	2301      	movs	r3, #1
 800fe82:	e7f2      	b.n	800fe6a <_printf_float+0x172>
 800fe84:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fe88:	9b08      	ldr	r3, [sp, #32]
 800fe8a:	4299      	cmp	r1, r3
 800fe8c:	db05      	blt.n	800fe9a <_printf_float+0x1a2>
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	6121      	str	r1, [r4, #16]
 800fe92:	07d8      	lsls	r0, r3, #31
 800fe94:	d5ea      	bpl.n	800fe6c <_printf_float+0x174>
 800fe96:	1c4b      	adds	r3, r1, #1
 800fe98:	e7e7      	b.n	800fe6a <_printf_float+0x172>
 800fe9a:	2900      	cmp	r1, #0
 800fe9c:	bfd4      	ite	le
 800fe9e:	f1c1 0202 	rsble	r2, r1, #2
 800fea2:	2201      	movgt	r2, #1
 800fea4:	4413      	add	r3, r2
 800fea6:	e7e0      	b.n	800fe6a <_printf_float+0x172>
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	055a      	lsls	r2, r3, #21
 800feac:	d407      	bmi.n	800febe <_printf_float+0x1c6>
 800feae:	6923      	ldr	r3, [r4, #16]
 800feb0:	4642      	mov	r2, r8
 800feb2:	4631      	mov	r1, r6
 800feb4:	4628      	mov	r0, r5
 800feb6:	47b8      	blx	r7
 800feb8:	3001      	adds	r0, #1
 800feba:	d12a      	bne.n	800ff12 <_printf_float+0x21a>
 800febc:	e76a      	b.n	800fd94 <_printf_float+0x9c>
 800febe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fec2:	f240 80e2 	bls.w	801008a <_printf_float+0x392>
 800fec6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800feca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed2:	d133      	bne.n	800ff3c <_printf_float+0x244>
 800fed4:	4a38      	ldr	r2, [pc, #224]	; (800ffb8 <_printf_float+0x2c0>)
 800fed6:	2301      	movs	r3, #1
 800fed8:	4631      	mov	r1, r6
 800feda:	4628      	mov	r0, r5
 800fedc:	47b8      	blx	r7
 800fede:	3001      	adds	r0, #1
 800fee0:	f43f af58 	beq.w	800fd94 <_printf_float+0x9c>
 800fee4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fee8:	429a      	cmp	r2, r3
 800feea:	db02      	blt.n	800fef2 <_printf_float+0x1fa>
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	07d8      	lsls	r0, r3, #31
 800fef0:	d50f      	bpl.n	800ff12 <_printf_float+0x21a>
 800fef2:	4653      	mov	r3, sl
 800fef4:	465a      	mov	r2, fp
 800fef6:	4631      	mov	r1, r6
 800fef8:	4628      	mov	r0, r5
 800fefa:	47b8      	blx	r7
 800fefc:	3001      	adds	r0, #1
 800fefe:	f43f af49 	beq.w	800fd94 <_printf_float+0x9c>
 800ff02:	f04f 0800 	mov.w	r8, #0
 800ff06:	f104 091a 	add.w	r9, r4, #26
 800ff0a:	9b08      	ldr	r3, [sp, #32]
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	4543      	cmp	r3, r8
 800ff10:	dc09      	bgt.n	800ff26 <_printf_float+0x22e>
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	079b      	lsls	r3, r3, #30
 800ff16:	f100 8108 	bmi.w	801012a <_printf_float+0x432>
 800ff1a:	68e0      	ldr	r0, [r4, #12]
 800ff1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff1e:	4298      	cmp	r0, r3
 800ff20:	bfb8      	it	lt
 800ff22:	4618      	movlt	r0, r3
 800ff24:	e738      	b.n	800fd98 <_printf_float+0xa0>
 800ff26:	2301      	movs	r3, #1
 800ff28:	464a      	mov	r2, r9
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	47b8      	blx	r7
 800ff30:	3001      	adds	r0, #1
 800ff32:	f43f af2f 	beq.w	800fd94 <_printf_float+0x9c>
 800ff36:	f108 0801 	add.w	r8, r8, #1
 800ff3a:	e7e6      	b.n	800ff0a <_printf_float+0x212>
 800ff3c:	9b07      	ldr	r3, [sp, #28]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	dc3c      	bgt.n	800ffbc <_printf_float+0x2c4>
 800ff42:	4a1d      	ldr	r2, [pc, #116]	; (800ffb8 <_printf_float+0x2c0>)
 800ff44:	2301      	movs	r3, #1
 800ff46:	4631      	mov	r1, r6
 800ff48:	4628      	mov	r0, r5
 800ff4a:	47b8      	blx	r7
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	f43f af21 	beq.w	800fd94 <_printf_float+0x9c>
 800ff52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	d102      	bne.n	800ff60 <_printf_float+0x268>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	07d9      	lsls	r1, r3, #31
 800ff5e:	d5d8      	bpl.n	800ff12 <_printf_float+0x21a>
 800ff60:	4653      	mov	r3, sl
 800ff62:	465a      	mov	r2, fp
 800ff64:	4631      	mov	r1, r6
 800ff66:	4628      	mov	r0, r5
 800ff68:	47b8      	blx	r7
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	f43f af12 	beq.w	800fd94 <_printf_float+0x9c>
 800ff70:	f04f 0900 	mov.w	r9, #0
 800ff74:	f104 0a1a 	add.w	sl, r4, #26
 800ff78:	9b07      	ldr	r3, [sp, #28]
 800ff7a:	425b      	negs	r3, r3
 800ff7c:	454b      	cmp	r3, r9
 800ff7e:	dc01      	bgt.n	800ff84 <_printf_float+0x28c>
 800ff80:	9b08      	ldr	r3, [sp, #32]
 800ff82:	e795      	b.n	800feb0 <_printf_float+0x1b8>
 800ff84:	2301      	movs	r3, #1
 800ff86:	4652      	mov	r2, sl
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	47b8      	blx	r7
 800ff8e:	3001      	adds	r0, #1
 800ff90:	f43f af00 	beq.w	800fd94 <_printf_float+0x9c>
 800ff94:	f109 0901 	add.w	r9, r9, #1
 800ff98:	e7ee      	b.n	800ff78 <_printf_float+0x280>
 800ff9a:	bf00      	nop
 800ff9c:	f3af 8000 	nop.w
 800ffa0:	ffffffff 	.word	0xffffffff
 800ffa4:	7fefffff 	.word	0x7fefffff
 800ffa8:	0801d0cc 	.word	0x0801d0cc
 800ffac:	0801d0d0 	.word	0x0801d0d0
 800ffb0:	0801d0d8 	.word	0x0801d0d8
 800ffb4:	0801d0d4 	.word	0x0801d0d4
 800ffb8:	0801d0dc 	.word	0x0801d0dc
 800ffbc:	9a08      	ldr	r2, [sp, #32]
 800ffbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	bfa8      	it	ge
 800ffc4:	461a      	movge	r2, r3
 800ffc6:	2a00      	cmp	r2, #0
 800ffc8:	4691      	mov	r9, r2
 800ffca:	dc38      	bgt.n	801003e <_printf_float+0x346>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	9305      	str	r3, [sp, #20]
 800ffd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffd4:	f104 021a 	add.w	r2, r4, #26
 800ffd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffda:	9905      	ldr	r1, [sp, #20]
 800ffdc:	9304      	str	r3, [sp, #16]
 800ffde:	eba3 0309 	sub.w	r3, r3, r9
 800ffe2:	428b      	cmp	r3, r1
 800ffe4:	dc33      	bgt.n	801004e <_printf_float+0x356>
 800ffe6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	db3c      	blt.n	8010068 <_printf_float+0x370>
 800ffee:	6823      	ldr	r3, [r4, #0]
 800fff0:	07da      	lsls	r2, r3, #31
 800fff2:	d439      	bmi.n	8010068 <_printf_float+0x370>
 800fff4:	9b08      	ldr	r3, [sp, #32]
 800fff6:	9a04      	ldr	r2, [sp, #16]
 800fff8:	9907      	ldr	r1, [sp, #28]
 800fffa:	1a9a      	subs	r2, r3, r2
 800fffc:	eba3 0901 	sub.w	r9, r3, r1
 8010000:	4591      	cmp	r9, r2
 8010002:	bfa8      	it	ge
 8010004:	4691      	movge	r9, r2
 8010006:	f1b9 0f00 	cmp.w	r9, #0
 801000a:	dc35      	bgt.n	8010078 <_printf_float+0x380>
 801000c:	f04f 0800 	mov.w	r8, #0
 8010010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010014:	f104 0a1a 	add.w	sl, r4, #26
 8010018:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801001c:	1a9b      	subs	r3, r3, r2
 801001e:	eba3 0309 	sub.w	r3, r3, r9
 8010022:	4543      	cmp	r3, r8
 8010024:	f77f af75 	ble.w	800ff12 <_printf_float+0x21a>
 8010028:	2301      	movs	r3, #1
 801002a:	4652      	mov	r2, sl
 801002c:	4631      	mov	r1, r6
 801002e:	4628      	mov	r0, r5
 8010030:	47b8      	blx	r7
 8010032:	3001      	adds	r0, #1
 8010034:	f43f aeae 	beq.w	800fd94 <_printf_float+0x9c>
 8010038:	f108 0801 	add.w	r8, r8, #1
 801003c:	e7ec      	b.n	8010018 <_printf_float+0x320>
 801003e:	4613      	mov	r3, r2
 8010040:	4631      	mov	r1, r6
 8010042:	4642      	mov	r2, r8
 8010044:	4628      	mov	r0, r5
 8010046:	47b8      	blx	r7
 8010048:	3001      	adds	r0, #1
 801004a:	d1bf      	bne.n	800ffcc <_printf_float+0x2d4>
 801004c:	e6a2      	b.n	800fd94 <_printf_float+0x9c>
 801004e:	2301      	movs	r3, #1
 8010050:	4631      	mov	r1, r6
 8010052:	4628      	mov	r0, r5
 8010054:	9204      	str	r2, [sp, #16]
 8010056:	47b8      	blx	r7
 8010058:	3001      	adds	r0, #1
 801005a:	f43f ae9b 	beq.w	800fd94 <_printf_float+0x9c>
 801005e:	9b05      	ldr	r3, [sp, #20]
 8010060:	9a04      	ldr	r2, [sp, #16]
 8010062:	3301      	adds	r3, #1
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	e7b7      	b.n	800ffd8 <_printf_float+0x2e0>
 8010068:	4653      	mov	r3, sl
 801006a:	465a      	mov	r2, fp
 801006c:	4631      	mov	r1, r6
 801006e:	4628      	mov	r0, r5
 8010070:	47b8      	blx	r7
 8010072:	3001      	adds	r0, #1
 8010074:	d1be      	bne.n	800fff4 <_printf_float+0x2fc>
 8010076:	e68d      	b.n	800fd94 <_printf_float+0x9c>
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	464b      	mov	r3, r9
 801007c:	4442      	add	r2, r8
 801007e:	4631      	mov	r1, r6
 8010080:	4628      	mov	r0, r5
 8010082:	47b8      	blx	r7
 8010084:	3001      	adds	r0, #1
 8010086:	d1c1      	bne.n	801000c <_printf_float+0x314>
 8010088:	e684      	b.n	800fd94 <_printf_float+0x9c>
 801008a:	9a08      	ldr	r2, [sp, #32]
 801008c:	2a01      	cmp	r2, #1
 801008e:	dc01      	bgt.n	8010094 <_printf_float+0x39c>
 8010090:	07db      	lsls	r3, r3, #31
 8010092:	d537      	bpl.n	8010104 <_printf_float+0x40c>
 8010094:	2301      	movs	r3, #1
 8010096:	4642      	mov	r2, r8
 8010098:	4631      	mov	r1, r6
 801009a:	4628      	mov	r0, r5
 801009c:	47b8      	blx	r7
 801009e:	3001      	adds	r0, #1
 80100a0:	f43f ae78 	beq.w	800fd94 <_printf_float+0x9c>
 80100a4:	4653      	mov	r3, sl
 80100a6:	465a      	mov	r2, fp
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	f43f ae70 	beq.w	800fd94 <_printf_float+0x9c>
 80100b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80100b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c0:	d01b      	beq.n	80100fa <_printf_float+0x402>
 80100c2:	9b08      	ldr	r3, [sp, #32]
 80100c4:	f108 0201 	add.w	r2, r8, #1
 80100c8:	3b01      	subs	r3, #1
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	47b8      	blx	r7
 80100d0:	3001      	adds	r0, #1
 80100d2:	d10e      	bne.n	80100f2 <_printf_float+0x3fa>
 80100d4:	e65e      	b.n	800fd94 <_printf_float+0x9c>
 80100d6:	2301      	movs	r3, #1
 80100d8:	464a      	mov	r2, r9
 80100da:	4631      	mov	r1, r6
 80100dc:	4628      	mov	r0, r5
 80100de:	47b8      	blx	r7
 80100e0:	3001      	adds	r0, #1
 80100e2:	f43f ae57 	beq.w	800fd94 <_printf_float+0x9c>
 80100e6:	f108 0801 	add.w	r8, r8, #1
 80100ea:	9b08      	ldr	r3, [sp, #32]
 80100ec:	3b01      	subs	r3, #1
 80100ee:	4543      	cmp	r3, r8
 80100f0:	dcf1      	bgt.n	80100d6 <_printf_float+0x3de>
 80100f2:	9b04      	ldr	r3, [sp, #16]
 80100f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80100f8:	e6db      	b.n	800feb2 <_printf_float+0x1ba>
 80100fa:	f04f 0800 	mov.w	r8, #0
 80100fe:	f104 091a 	add.w	r9, r4, #26
 8010102:	e7f2      	b.n	80100ea <_printf_float+0x3f2>
 8010104:	2301      	movs	r3, #1
 8010106:	4642      	mov	r2, r8
 8010108:	e7df      	b.n	80100ca <_printf_float+0x3d2>
 801010a:	2301      	movs	r3, #1
 801010c:	464a      	mov	r2, r9
 801010e:	4631      	mov	r1, r6
 8010110:	4628      	mov	r0, r5
 8010112:	47b8      	blx	r7
 8010114:	3001      	adds	r0, #1
 8010116:	f43f ae3d 	beq.w	800fd94 <_printf_float+0x9c>
 801011a:	f108 0801 	add.w	r8, r8, #1
 801011e:	68e3      	ldr	r3, [r4, #12]
 8010120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010122:	1a5b      	subs	r3, r3, r1
 8010124:	4543      	cmp	r3, r8
 8010126:	dcf0      	bgt.n	801010a <_printf_float+0x412>
 8010128:	e6f7      	b.n	800ff1a <_printf_float+0x222>
 801012a:	f04f 0800 	mov.w	r8, #0
 801012e:	f104 0919 	add.w	r9, r4, #25
 8010132:	e7f4      	b.n	801011e <_printf_float+0x426>

08010134 <_printf_common>:
 8010134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010138:	4616      	mov	r6, r2
 801013a:	4699      	mov	r9, r3
 801013c:	688a      	ldr	r2, [r1, #8]
 801013e:	690b      	ldr	r3, [r1, #16]
 8010140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010144:	4293      	cmp	r3, r2
 8010146:	bfb8      	it	lt
 8010148:	4613      	movlt	r3, r2
 801014a:	6033      	str	r3, [r6, #0]
 801014c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010150:	4607      	mov	r7, r0
 8010152:	460c      	mov	r4, r1
 8010154:	b10a      	cbz	r2, 801015a <_printf_common+0x26>
 8010156:	3301      	adds	r3, #1
 8010158:	6033      	str	r3, [r6, #0]
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	0699      	lsls	r1, r3, #26
 801015e:	bf42      	ittt	mi
 8010160:	6833      	ldrmi	r3, [r6, #0]
 8010162:	3302      	addmi	r3, #2
 8010164:	6033      	strmi	r3, [r6, #0]
 8010166:	6825      	ldr	r5, [r4, #0]
 8010168:	f015 0506 	ands.w	r5, r5, #6
 801016c:	d106      	bne.n	801017c <_printf_common+0x48>
 801016e:	f104 0a19 	add.w	sl, r4, #25
 8010172:	68e3      	ldr	r3, [r4, #12]
 8010174:	6832      	ldr	r2, [r6, #0]
 8010176:	1a9b      	subs	r3, r3, r2
 8010178:	42ab      	cmp	r3, r5
 801017a:	dc26      	bgt.n	80101ca <_printf_common+0x96>
 801017c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010180:	1e13      	subs	r3, r2, #0
 8010182:	6822      	ldr	r2, [r4, #0]
 8010184:	bf18      	it	ne
 8010186:	2301      	movne	r3, #1
 8010188:	0692      	lsls	r2, r2, #26
 801018a:	d42b      	bmi.n	80101e4 <_printf_common+0xb0>
 801018c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010190:	4649      	mov	r1, r9
 8010192:	4638      	mov	r0, r7
 8010194:	47c0      	blx	r8
 8010196:	3001      	adds	r0, #1
 8010198:	d01e      	beq.n	80101d8 <_printf_common+0xa4>
 801019a:	6823      	ldr	r3, [r4, #0]
 801019c:	68e5      	ldr	r5, [r4, #12]
 801019e:	6832      	ldr	r2, [r6, #0]
 80101a0:	f003 0306 	and.w	r3, r3, #6
 80101a4:	2b04      	cmp	r3, #4
 80101a6:	bf08      	it	eq
 80101a8:	1aad      	subeq	r5, r5, r2
 80101aa:	68a3      	ldr	r3, [r4, #8]
 80101ac:	6922      	ldr	r2, [r4, #16]
 80101ae:	bf0c      	ite	eq
 80101b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101b4:	2500      	movne	r5, #0
 80101b6:	4293      	cmp	r3, r2
 80101b8:	bfc4      	itt	gt
 80101ba:	1a9b      	subgt	r3, r3, r2
 80101bc:	18ed      	addgt	r5, r5, r3
 80101be:	2600      	movs	r6, #0
 80101c0:	341a      	adds	r4, #26
 80101c2:	42b5      	cmp	r5, r6
 80101c4:	d11a      	bne.n	80101fc <_printf_common+0xc8>
 80101c6:	2000      	movs	r0, #0
 80101c8:	e008      	b.n	80101dc <_printf_common+0xa8>
 80101ca:	2301      	movs	r3, #1
 80101cc:	4652      	mov	r2, sl
 80101ce:	4649      	mov	r1, r9
 80101d0:	4638      	mov	r0, r7
 80101d2:	47c0      	blx	r8
 80101d4:	3001      	adds	r0, #1
 80101d6:	d103      	bne.n	80101e0 <_printf_common+0xac>
 80101d8:	f04f 30ff 	mov.w	r0, #4294967295
 80101dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e0:	3501      	adds	r5, #1
 80101e2:	e7c6      	b.n	8010172 <_printf_common+0x3e>
 80101e4:	18e1      	adds	r1, r4, r3
 80101e6:	1c5a      	adds	r2, r3, #1
 80101e8:	2030      	movs	r0, #48	; 0x30
 80101ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101ee:	4422      	add	r2, r4
 80101f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101f8:	3302      	adds	r3, #2
 80101fa:	e7c7      	b.n	801018c <_printf_common+0x58>
 80101fc:	2301      	movs	r3, #1
 80101fe:	4622      	mov	r2, r4
 8010200:	4649      	mov	r1, r9
 8010202:	4638      	mov	r0, r7
 8010204:	47c0      	blx	r8
 8010206:	3001      	adds	r0, #1
 8010208:	d0e6      	beq.n	80101d8 <_printf_common+0xa4>
 801020a:	3601      	adds	r6, #1
 801020c:	e7d9      	b.n	80101c2 <_printf_common+0x8e>
	...

08010210 <_printf_i>:
 8010210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010214:	7e0f      	ldrb	r7, [r1, #24]
 8010216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010218:	2f78      	cmp	r7, #120	; 0x78
 801021a:	4691      	mov	r9, r2
 801021c:	4680      	mov	r8, r0
 801021e:	460c      	mov	r4, r1
 8010220:	469a      	mov	sl, r3
 8010222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010226:	d807      	bhi.n	8010238 <_printf_i+0x28>
 8010228:	2f62      	cmp	r7, #98	; 0x62
 801022a:	d80a      	bhi.n	8010242 <_printf_i+0x32>
 801022c:	2f00      	cmp	r7, #0
 801022e:	f000 80d8 	beq.w	80103e2 <_printf_i+0x1d2>
 8010232:	2f58      	cmp	r7, #88	; 0x58
 8010234:	f000 80a3 	beq.w	801037e <_printf_i+0x16e>
 8010238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801023c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010240:	e03a      	b.n	80102b8 <_printf_i+0xa8>
 8010242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010246:	2b15      	cmp	r3, #21
 8010248:	d8f6      	bhi.n	8010238 <_printf_i+0x28>
 801024a:	a101      	add	r1, pc, #4	; (adr r1, 8010250 <_printf_i+0x40>)
 801024c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010250:	080102a9 	.word	0x080102a9
 8010254:	080102bd 	.word	0x080102bd
 8010258:	08010239 	.word	0x08010239
 801025c:	08010239 	.word	0x08010239
 8010260:	08010239 	.word	0x08010239
 8010264:	08010239 	.word	0x08010239
 8010268:	080102bd 	.word	0x080102bd
 801026c:	08010239 	.word	0x08010239
 8010270:	08010239 	.word	0x08010239
 8010274:	08010239 	.word	0x08010239
 8010278:	08010239 	.word	0x08010239
 801027c:	080103c9 	.word	0x080103c9
 8010280:	080102ed 	.word	0x080102ed
 8010284:	080103ab 	.word	0x080103ab
 8010288:	08010239 	.word	0x08010239
 801028c:	08010239 	.word	0x08010239
 8010290:	080103eb 	.word	0x080103eb
 8010294:	08010239 	.word	0x08010239
 8010298:	080102ed 	.word	0x080102ed
 801029c:	08010239 	.word	0x08010239
 80102a0:	08010239 	.word	0x08010239
 80102a4:	080103b3 	.word	0x080103b3
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	1d1a      	adds	r2, r3, #4
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	602a      	str	r2, [r5, #0]
 80102b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102b8:	2301      	movs	r3, #1
 80102ba:	e0a3      	b.n	8010404 <_printf_i+0x1f4>
 80102bc:	6820      	ldr	r0, [r4, #0]
 80102be:	6829      	ldr	r1, [r5, #0]
 80102c0:	0606      	lsls	r6, r0, #24
 80102c2:	f101 0304 	add.w	r3, r1, #4
 80102c6:	d50a      	bpl.n	80102de <_printf_i+0xce>
 80102c8:	680e      	ldr	r6, [r1, #0]
 80102ca:	602b      	str	r3, [r5, #0]
 80102cc:	2e00      	cmp	r6, #0
 80102ce:	da03      	bge.n	80102d8 <_printf_i+0xc8>
 80102d0:	232d      	movs	r3, #45	; 0x2d
 80102d2:	4276      	negs	r6, r6
 80102d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102d8:	485e      	ldr	r0, [pc, #376]	; (8010454 <_printf_i+0x244>)
 80102da:	230a      	movs	r3, #10
 80102dc:	e019      	b.n	8010312 <_printf_i+0x102>
 80102de:	680e      	ldr	r6, [r1, #0]
 80102e0:	602b      	str	r3, [r5, #0]
 80102e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80102e6:	bf18      	it	ne
 80102e8:	b236      	sxthne	r6, r6
 80102ea:	e7ef      	b.n	80102cc <_printf_i+0xbc>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	6820      	ldr	r0, [r4, #0]
 80102f0:	1d19      	adds	r1, r3, #4
 80102f2:	6029      	str	r1, [r5, #0]
 80102f4:	0601      	lsls	r1, r0, #24
 80102f6:	d501      	bpl.n	80102fc <_printf_i+0xec>
 80102f8:	681e      	ldr	r6, [r3, #0]
 80102fa:	e002      	b.n	8010302 <_printf_i+0xf2>
 80102fc:	0646      	lsls	r6, r0, #25
 80102fe:	d5fb      	bpl.n	80102f8 <_printf_i+0xe8>
 8010300:	881e      	ldrh	r6, [r3, #0]
 8010302:	4854      	ldr	r0, [pc, #336]	; (8010454 <_printf_i+0x244>)
 8010304:	2f6f      	cmp	r7, #111	; 0x6f
 8010306:	bf0c      	ite	eq
 8010308:	2308      	moveq	r3, #8
 801030a:	230a      	movne	r3, #10
 801030c:	2100      	movs	r1, #0
 801030e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010312:	6865      	ldr	r5, [r4, #4]
 8010314:	60a5      	str	r5, [r4, #8]
 8010316:	2d00      	cmp	r5, #0
 8010318:	bfa2      	ittt	ge
 801031a:	6821      	ldrge	r1, [r4, #0]
 801031c:	f021 0104 	bicge.w	r1, r1, #4
 8010320:	6021      	strge	r1, [r4, #0]
 8010322:	b90e      	cbnz	r6, 8010328 <_printf_i+0x118>
 8010324:	2d00      	cmp	r5, #0
 8010326:	d04d      	beq.n	80103c4 <_printf_i+0x1b4>
 8010328:	4615      	mov	r5, r2
 801032a:	fbb6 f1f3 	udiv	r1, r6, r3
 801032e:	fb03 6711 	mls	r7, r3, r1, r6
 8010332:	5dc7      	ldrb	r7, [r0, r7]
 8010334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010338:	4637      	mov	r7, r6
 801033a:	42bb      	cmp	r3, r7
 801033c:	460e      	mov	r6, r1
 801033e:	d9f4      	bls.n	801032a <_printf_i+0x11a>
 8010340:	2b08      	cmp	r3, #8
 8010342:	d10b      	bne.n	801035c <_printf_i+0x14c>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	07de      	lsls	r6, r3, #31
 8010348:	d508      	bpl.n	801035c <_printf_i+0x14c>
 801034a:	6923      	ldr	r3, [r4, #16]
 801034c:	6861      	ldr	r1, [r4, #4]
 801034e:	4299      	cmp	r1, r3
 8010350:	bfde      	ittt	le
 8010352:	2330      	movle	r3, #48	; 0x30
 8010354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010358:	f105 35ff 	addle.w	r5, r5, #4294967295
 801035c:	1b52      	subs	r2, r2, r5
 801035e:	6122      	str	r2, [r4, #16]
 8010360:	f8cd a000 	str.w	sl, [sp]
 8010364:	464b      	mov	r3, r9
 8010366:	aa03      	add	r2, sp, #12
 8010368:	4621      	mov	r1, r4
 801036a:	4640      	mov	r0, r8
 801036c:	f7ff fee2 	bl	8010134 <_printf_common>
 8010370:	3001      	adds	r0, #1
 8010372:	d14c      	bne.n	801040e <_printf_i+0x1fe>
 8010374:	f04f 30ff 	mov.w	r0, #4294967295
 8010378:	b004      	add	sp, #16
 801037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801037e:	4835      	ldr	r0, [pc, #212]	; (8010454 <_printf_i+0x244>)
 8010380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010384:	6829      	ldr	r1, [r5, #0]
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	f851 6b04 	ldr.w	r6, [r1], #4
 801038c:	6029      	str	r1, [r5, #0]
 801038e:	061d      	lsls	r5, r3, #24
 8010390:	d514      	bpl.n	80103bc <_printf_i+0x1ac>
 8010392:	07df      	lsls	r7, r3, #31
 8010394:	bf44      	itt	mi
 8010396:	f043 0320 	orrmi.w	r3, r3, #32
 801039a:	6023      	strmi	r3, [r4, #0]
 801039c:	b91e      	cbnz	r6, 80103a6 <_printf_i+0x196>
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	f023 0320 	bic.w	r3, r3, #32
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	2310      	movs	r3, #16
 80103a8:	e7b0      	b.n	801030c <_printf_i+0xfc>
 80103aa:	6823      	ldr	r3, [r4, #0]
 80103ac:	f043 0320 	orr.w	r3, r3, #32
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	2378      	movs	r3, #120	; 0x78
 80103b4:	4828      	ldr	r0, [pc, #160]	; (8010458 <_printf_i+0x248>)
 80103b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103ba:	e7e3      	b.n	8010384 <_printf_i+0x174>
 80103bc:	0659      	lsls	r1, r3, #25
 80103be:	bf48      	it	mi
 80103c0:	b2b6      	uxthmi	r6, r6
 80103c2:	e7e6      	b.n	8010392 <_printf_i+0x182>
 80103c4:	4615      	mov	r5, r2
 80103c6:	e7bb      	b.n	8010340 <_printf_i+0x130>
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	6826      	ldr	r6, [r4, #0]
 80103cc:	6961      	ldr	r1, [r4, #20]
 80103ce:	1d18      	adds	r0, r3, #4
 80103d0:	6028      	str	r0, [r5, #0]
 80103d2:	0635      	lsls	r5, r6, #24
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	d501      	bpl.n	80103dc <_printf_i+0x1cc>
 80103d8:	6019      	str	r1, [r3, #0]
 80103da:	e002      	b.n	80103e2 <_printf_i+0x1d2>
 80103dc:	0670      	lsls	r0, r6, #25
 80103de:	d5fb      	bpl.n	80103d8 <_printf_i+0x1c8>
 80103e0:	8019      	strh	r1, [r3, #0]
 80103e2:	2300      	movs	r3, #0
 80103e4:	6123      	str	r3, [r4, #16]
 80103e6:	4615      	mov	r5, r2
 80103e8:	e7ba      	b.n	8010360 <_printf_i+0x150>
 80103ea:	682b      	ldr	r3, [r5, #0]
 80103ec:	1d1a      	adds	r2, r3, #4
 80103ee:	602a      	str	r2, [r5, #0]
 80103f0:	681d      	ldr	r5, [r3, #0]
 80103f2:	6862      	ldr	r2, [r4, #4]
 80103f4:	2100      	movs	r1, #0
 80103f6:	4628      	mov	r0, r5
 80103f8:	f7ef ff7a 	bl	80002f0 <memchr>
 80103fc:	b108      	cbz	r0, 8010402 <_printf_i+0x1f2>
 80103fe:	1b40      	subs	r0, r0, r5
 8010400:	6060      	str	r0, [r4, #4]
 8010402:	6863      	ldr	r3, [r4, #4]
 8010404:	6123      	str	r3, [r4, #16]
 8010406:	2300      	movs	r3, #0
 8010408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801040c:	e7a8      	b.n	8010360 <_printf_i+0x150>
 801040e:	6923      	ldr	r3, [r4, #16]
 8010410:	462a      	mov	r2, r5
 8010412:	4649      	mov	r1, r9
 8010414:	4640      	mov	r0, r8
 8010416:	47d0      	blx	sl
 8010418:	3001      	adds	r0, #1
 801041a:	d0ab      	beq.n	8010374 <_printf_i+0x164>
 801041c:	6823      	ldr	r3, [r4, #0]
 801041e:	079b      	lsls	r3, r3, #30
 8010420:	d413      	bmi.n	801044a <_printf_i+0x23a>
 8010422:	68e0      	ldr	r0, [r4, #12]
 8010424:	9b03      	ldr	r3, [sp, #12]
 8010426:	4298      	cmp	r0, r3
 8010428:	bfb8      	it	lt
 801042a:	4618      	movlt	r0, r3
 801042c:	e7a4      	b.n	8010378 <_printf_i+0x168>
 801042e:	2301      	movs	r3, #1
 8010430:	4632      	mov	r2, r6
 8010432:	4649      	mov	r1, r9
 8010434:	4640      	mov	r0, r8
 8010436:	47d0      	blx	sl
 8010438:	3001      	adds	r0, #1
 801043a:	d09b      	beq.n	8010374 <_printf_i+0x164>
 801043c:	3501      	adds	r5, #1
 801043e:	68e3      	ldr	r3, [r4, #12]
 8010440:	9903      	ldr	r1, [sp, #12]
 8010442:	1a5b      	subs	r3, r3, r1
 8010444:	42ab      	cmp	r3, r5
 8010446:	dcf2      	bgt.n	801042e <_printf_i+0x21e>
 8010448:	e7eb      	b.n	8010422 <_printf_i+0x212>
 801044a:	2500      	movs	r5, #0
 801044c:	f104 0619 	add.w	r6, r4, #25
 8010450:	e7f5      	b.n	801043e <_printf_i+0x22e>
 8010452:	bf00      	nop
 8010454:	0801d0de 	.word	0x0801d0de
 8010458:	0801d0ef 	.word	0x0801d0ef

0801045c <rand>:
 801045c:	4b16      	ldr	r3, [pc, #88]	; (80104b8 <rand+0x5c>)
 801045e:	b510      	push	{r4, lr}
 8010460:	681c      	ldr	r4, [r3, #0]
 8010462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010464:	b9b3      	cbnz	r3, 8010494 <rand+0x38>
 8010466:	2018      	movs	r0, #24
 8010468:	f000 ff86 	bl	8011378 <malloc>
 801046c:	63a0      	str	r0, [r4, #56]	; 0x38
 801046e:	b928      	cbnz	r0, 801047c <rand+0x20>
 8010470:	4602      	mov	r2, r0
 8010472:	4b12      	ldr	r3, [pc, #72]	; (80104bc <rand+0x60>)
 8010474:	4812      	ldr	r0, [pc, #72]	; (80104c0 <rand+0x64>)
 8010476:	214e      	movs	r1, #78	; 0x4e
 8010478:	f000 f950 	bl	801071c <__assert_func>
 801047c:	4a11      	ldr	r2, [pc, #68]	; (80104c4 <rand+0x68>)
 801047e:	4b12      	ldr	r3, [pc, #72]	; (80104c8 <rand+0x6c>)
 8010480:	e9c0 2300 	strd	r2, r3, [r0]
 8010484:	4b11      	ldr	r3, [pc, #68]	; (80104cc <rand+0x70>)
 8010486:	6083      	str	r3, [r0, #8]
 8010488:	230b      	movs	r3, #11
 801048a:	8183      	strh	r3, [r0, #12]
 801048c:	2201      	movs	r2, #1
 801048e:	2300      	movs	r3, #0
 8010490:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010494:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010496:	4a0e      	ldr	r2, [pc, #56]	; (80104d0 <rand+0x74>)
 8010498:	6920      	ldr	r0, [r4, #16]
 801049a:	6963      	ldr	r3, [r4, #20]
 801049c:	490d      	ldr	r1, [pc, #52]	; (80104d4 <rand+0x78>)
 801049e:	4342      	muls	r2, r0
 80104a0:	fb01 2203 	mla	r2, r1, r3, r2
 80104a4:	fba0 0101 	umull	r0, r1, r0, r1
 80104a8:	1c43      	adds	r3, r0, #1
 80104aa:	eb42 0001 	adc.w	r0, r2, r1
 80104ae:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80104b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80104b6:	bd10      	pop	{r4, pc}
 80104b8:	24000498 	.word	0x24000498
 80104bc:	0801d100 	.word	0x0801d100
 80104c0:	0801d117 	.word	0x0801d117
 80104c4:	abcd330e 	.word	0xabcd330e
 80104c8:	e66d1234 	.word	0xe66d1234
 80104cc:	0005deec 	.word	0x0005deec
 80104d0:	5851f42d 	.word	0x5851f42d
 80104d4:	4c957f2d 	.word	0x4c957f2d

080104d8 <siprintf>:
 80104d8:	b40e      	push	{r1, r2, r3}
 80104da:	b500      	push	{lr}
 80104dc:	b09c      	sub	sp, #112	; 0x70
 80104de:	ab1d      	add	r3, sp, #116	; 0x74
 80104e0:	9002      	str	r0, [sp, #8]
 80104e2:	9006      	str	r0, [sp, #24]
 80104e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104e8:	4809      	ldr	r0, [pc, #36]	; (8010510 <siprintf+0x38>)
 80104ea:	9107      	str	r1, [sp, #28]
 80104ec:	9104      	str	r1, [sp, #16]
 80104ee:	4909      	ldr	r1, [pc, #36]	; (8010514 <siprintf+0x3c>)
 80104f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104f4:	9105      	str	r1, [sp, #20]
 80104f6:	6800      	ldr	r0, [r0, #0]
 80104f8:	9301      	str	r3, [sp, #4]
 80104fa:	a902      	add	r1, sp, #8
 80104fc:	f001 fc1a 	bl	8011d34 <_svfiprintf_r>
 8010500:	9b02      	ldr	r3, [sp, #8]
 8010502:	2200      	movs	r2, #0
 8010504:	701a      	strb	r2, [r3, #0]
 8010506:	b01c      	add	sp, #112	; 0x70
 8010508:	f85d eb04 	ldr.w	lr, [sp], #4
 801050c:	b003      	add	sp, #12
 801050e:	4770      	bx	lr
 8010510:	24000498 	.word	0x24000498
 8010514:	ffff0208 	.word	0xffff0208

08010518 <strcpy>:
 8010518:	4603      	mov	r3, r0
 801051a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801051e:	f803 2b01 	strb.w	r2, [r3], #1
 8010522:	2a00      	cmp	r2, #0
 8010524:	d1f9      	bne.n	801051a <strcpy+0x2>
 8010526:	4770      	bx	lr

08010528 <strcspn>:
 8010528:	b570      	push	{r4, r5, r6, lr}
 801052a:	4603      	mov	r3, r0
 801052c:	461e      	mov	r6, r3
 801052e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010532:	b144      	cbz	r4, 8010546 <strcspn+0x1e>
 8010534:	1e4a      	subs	r2, r1, #1
 8010536:	e001      	b.n	801053c <strcspn+0x14>
 8010538:	42a5      	cmp	r5, r4
 801053a:	d004      	beq.n	8010546 <strcspn+0x1e>
 801053c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010540:	2d00      	cmp	r5, #0
 8010542:	d1f9      	bne.n	8010538 <strcspn+0x10>
 8010544:	e7f2      	b.n	801052c <strcspn+0x4>
 8010546:	1a30      	subs	r0, r6, r0
 8010548:	bd70      	pop	{r4, r5, r6, pc}
	...

0801054c <strtok>:
 801054c:	4b16      	ldr	r3, [pc, #88]	; (80105a8 <strtok+0x5c>)
 801054e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010550:	681e      	ldr	r6, [r3, #0]
 8010552:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8010554:	4605      	mov	r5, r0
 8010556:	b9fc      	cbnz	r4, 8010598 <strtok+0x4c>
 8010558:	2050      	movs	r0, #80	; 0x50
 801055a:	9101      	str	r1, [sp, #4]
 801055c:	f000 ff0c 	bl	8011378 <malloc>
 8010560:	9901      	ldr	r1, [sp, #4]
 8010562:	65b0      	str	r0, [r6, #88]	; 0x58
 8010564:	4602      	mov	r2, r0
 8010566:	b920      	cbnz	r0, 8010572 <strtok+0x26>
 8010568:	4b10      	ldr	r3, [pc, #64]	; (80105ac <strtok+0x60>)
 801056a:	4811      	ldr	r0, [pc, #68]	; (80105b0 <strtok+0x64>)
 801056c:	2157      	movs	r1, #87	; 0x57
 801056e:	f000 f8d5 	bl	801071c <__assert_func>
 8010572:	e9c0 4400 	strd	r4, r4, [r0]
 8010576:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801057a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801057e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8010582:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8010586:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801058a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801058e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010592:	6184      	str	r4, [r0, #24]
 8010594:	7704      	strb	r4, [r0, #28]
 8010596:	6244      	str	r4, [r0, #36]	; 0x24
 8010598:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801059a:	2301      	movs	r3, #1
 801059c:	4628      	mov	r0, r5
 801059e:	b002      	add	sp, #8
 80105a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105a4:	f000 b806 	b.w	80105b4 <__strtok_r>
 80105a8:	24000498 	.word	0x24000498
 80105ac:	0801d100 	.word	0x0801d100
 80105b0:	0801d172 	.word	0x0801d172

080105b4 <__strtok_r>:
 80105b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b6:	b908      	cbnz	r0, 80105bc <__strtok_r+0x8>
 80105b8:	6810      	ldr	r0, [r2, #0]
 80105ba:	b188      	cbz	r0, 80105e0 <__strtok_r+0x2c>
 80105bc:	4604      	mov	r4, r0
 80105be:	4620      	mov	r0, r4
 80105c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80105c4:	460f      	mov	r7, r1
 80105c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80105ca:	b91e      	cbnz	r6, 80105d4 <__strtok_r+0x20>
 80105cc:	b965      	cbnz	r5, 80105e8 <__strtok_r+0x34>
 80105ce:	6015      	str	r5, [r2, #0]
 80105d0:	4628      	mov	r0, r5
 80105d2:	e005      	b.n	80105e0 <__strtok_r+0x2c>
 80105d4:	42b5      	cmp	r5, r6
 80105d6:	d1f6      	bne.n	80105c6 <__strtok_r+0x12>
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d1f0      	bne.n	80105be <__strtok_r+0xa>
 80105dc:	6014      	str	r4, [r2, #0]
 80105de:	7003      	strb	r3, [r0, #0]
 80105e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105e2:	461c      	mov	r4, r3
 80105e4:	e00c      	b.n	8010600 <__strtok_r+0x4c>
 80105e6:	b915      	cbnz	r5, 80105ee <__strtok_r+0x3a>
 80105e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105ec:	460e      	mov	r6, r1
 80105ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80105f2:	42ab      	cmp	r3, r5
 80105f4:	d1f7      	bne.n	80105e6 <__strtok_r+0x32>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d0f3      	beq.n	80105e2 <__strtok_r+0x2e>
 80105fa:	2300      	movs	r3, #0
 80105fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010600:	6014      	str	r4, [r2, #0]
 8010602:	e7ed      	b.n	80105e0 <__strtok_r+0x2c>

08010604 <_strtol_l.constprop.0>:
 8010604:	2b01      	cmp	r3, #1
 8010606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801060a:	d001      	beq.n	8010610 <_strtol_l.constprop.0+0xc>
 801060c:	2b24      	cmp	r3, #36	; 0x24
 801060e:	d906      	bls.n	801061e <_strtol_l.constprop.0+0x1a>
 8010610:	f7ff faa2 	bl	800fb58 <__errno>
 8010614:	2316      	movs	r3, #22
 8010616:	6003      	str	r3, [r0, #0]
 8010618:	2000      	movs	r0, #0
 801061a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801061e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010704 <_strtol_l.constprop.0+0x100>
 8010622:	460d      	mov	r5, r1
 8010624:	462e      	mov	r6, r5
 8010626:	f815 4b01 	ldrb.w	r4, [r5], #1
 801062a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801062e:	f017 0708 	ands.w	r7, r7, #8
 8010632:	d1f7      	bne.n	8010624 <_strtol_l.constprop.0+0x20>
 8010634:	2c2d      	cmp	r4, #45	; 0x2d
 8010636:	d132      	bne.n	801069e <_strtol_l.constprop.0+0x9a>
 8010638:	782c      	ldrb	r4, [r5, #0]
 801063a:	2701      	movs	r7, #1
 801063c:	1cb5      	adds	r5, r6, #2
 801063e:	2b00      	cmp	r3, #0
 8010640:	d05b      	beq.n	80106fa <_strtol_l.constprop.0+0xf6>
 8010642:	2b10      	cmp	r3, #16
 8010644:	d109      	bne.n	801065a <_strtol_l.constprop.0+0x56>
 8010646:	2c30      	cmp	r4, #48	; 0x30
 8010648:	d107      	bne.n	801065a <_strtol_l.constprop.0+0x56>
 801064a:	782c      	ldrb	r4, [r5, #0]
 801064c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010650:	2c58      	cmp	r4, #88	; 0x58
 8010652:	d14d      	bne.n	80106f0 <_strtol_l.constprop.0+0xec>
 8010654:	786c      	ldrb	r4, [r5, #1]
 8010656:	2310      	movs	r3, #16
 8010658:	3502      	adds	r5, #2
 801065a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801065e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010662:	f04f 0c00 	mov.w	ip, #0
 8010666:	fbb8 f9f3 	udiv	r9, r8, r3
 801066a:	4666      	mov	r6, ip
 801066c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010670:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010674:	f1be 0f09 	cmp.w	lr, #9
 8010678:	d816      	bhi.n	80106a8 <_strtol_l.constprop.0+0xa4>
 801067a:	4674      	mov	r4, lr
 801067c:	42a3      	cmp	r3, r4
 801067e:	dd24      	ble.n	80106ca <_strtol_l.constprop.0+0xc6>
 8010680:	f1bc 0f00 	cmp.w	ip, #0
 8010684:	db1e      	blt.n	80106c4 <_strtol_l.constprop.0+0xc0>
 8010686:	45b1      	cmp	r9, r6
 8010688:	d31c      	bcc.n	80106c4 <_strtol_l.constprop.0+0xc0>
 801068a:	d101      	bne.n	8010690 <_strtol_l.constprop.0+0x8c>
 801068c:	45a2      	cmp	sl, r4
 801068e:	db19      	blt.n	80106c4 <_strtol_l.constprop.0+0xc0>
 8010690:	fb06 4603 	mla	r6, r6, r3, r4
 8010694:	f04f 0c01 	mov.w	ip, #1
 8010698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801069c:	e7e8      	b.n	8010670 <_strtol_l.constprop.0+0x6c>
 801069e:	2c2b      	cmp	r4, #43	; 0x2b
 80106a0:	bf04      	itt	eq
 80106a2:	782c      	ldrbeq	r4, [r5, #0]
 80106a4:	1cb5      	addeq	r5, r6, #2
 80106a6:	e7ca      	b.n	801063e <_strtol_l.constprop.0+0x3a>
 80106a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80106ac:	f1be 0f19 	cmp.w	lr, #25
 80106b0:	d801      	bhi.n	80106b6 <_strtol_l.constprop.0+0xb2>
 80106b2:	3c37      	subs	r4, #55	; 0x37
 80106b4:	e7e2      	b.n	801067c <_strtol_l.constprop.0+0x78>
 80106b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80106ba:	f1be 0f19 	cmp.w	lr, #25
 80106be:	d804      	bhi.n	80106ca <_strtol_l.constprop.0+0xc6>
 80106c0:	3c57      	subs	r4, #87	; 0x57
 80106c2:	e7db      	b.n	801067c <_strtol_l.constprop.0+0x78>
 80106c4:	f04f 3cff 	mov.w	ip, #4294967295
 80106c8:	e7e6      	b.n	8010698 <_strtol_l.constprop.0+0x94>
 80106ca:	f1bc 0f00 	cmp.w	ip, #0
 80106ce:	da05      	bge.n	80106dc <_strtol_l.constprop.0+0xd8>
 80106d0:	2322      	movs	r3, #34	; 0x22
 80106d2:	6003      	str	r3, [r0, #0]
 80106d4:	4646      	mov	r6, r8
 80106d6:	b942      	cbnz	r2, 80106ea <_strtol_l.constprop.0+0xe6>
 80106d8:	4630      	mov	r0, r6
 80106da:	e79e      	b.n	801061a <_strtol_l.constprop.0+0x16>
 80106dc:	b107      	cbz	r7, 80106e0 <_strtol_l.constprop.0+0xdc>
 80106de:	4276      	negs	r6, r6
 80106e0:	2a00      	cmp	r2, #0
 80106e2:	d0f9      	beq.n	80106d8 <_strtol_l.constprop.0+0xd4>
 80106e4:	f1bc 0f00 	cmp.w	ip, #0
 80106e8:	d000      	beq.n	80106ec <_strtol_l.constprop.0+0xe8>
 80106ea:	1e69      	subs	r1, r5, #1
 80106ec:	6011      	str	r1, [r2, #0]
 80106ee:	e7f3      	b.n	80106d8 <_strtol_l.constprop.0+0xd4>
 80106f0:	2430      	movs	r4, #48	; 0x30
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1b1      	bne.n	801065a <_strtol_l.constprop.0+0x56>
 80106f6:	2308      	movs	r3, #8
 80106f8:	e7af      	b.n	801065a <_strtol_l.constprop.0+0x56>
 80106fa:	2c30      	cmp	r4, #48	; 0x30
 80106fc:	d0a5      	beq.n	801064a <_strtol_l.constprop.0+0x46>
 80106fe:	230a      	movs	r3, #10
 8010700:	e7ab      	b.n	801065a <_strtol_l.constprop.0+0x56>
 8010702:	bf00      	nop
 8010704:	0801cfc5 	.word	0x0801cfc5

08010708 <strtol>:
 8010708:	4613      	mov	r3, r2
 801070a:	460a      	mov	r2, r1
 801070c:	4601      	mov	r1, r0
 801070e:	4802      	ldr	r0, [pc, #8]	; (8010718 <strtol+0x10>)
 8010710:	6800      	ldr	r0, [r0, #0]
 8010712:	f7ff bf77 	b.w	8010604 <_strtol_l.constprop.0>
 8010716:	bf00      	nop
 8010718:	24000498 	.word	0x24000498

0801071c <__assert_func>:
 801071c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801071e:	4614      	mov	r4, r2
 8010720:	461a      	mov	r2, r3
 8010722:	4b09      	ldr	r3, [pc, #36]	; (8010748 <__assert_func+0x2c>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4605      	mov	r5, r0
 8010728:	68d8      	ldr	r0, [r3, #12]
 801072a:	b14c      	cbz	r4, 8010740 <__assert_func+0x24>
 801072c:	4b07      	ldr	r3, [pc, #28]	; (801074c <__assert_func+0x30>)
 801072e:	9100      	str	r1, [sp, #0]
 8010730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010734:	4906      	ldr	r1, [pc, #24]	; (8010750 <__assert_func+0x34>)
 8010736:	462b      	mov	r3, r5
 8010738:	f000 fe08 	bl	801134c <fiprintf>
 801073c:	f001 fe24 	bl	8012388 <abort>
 8010740:	4b04      	ldr	r3, [pc, #16]	; (8010754 <__assert_func+0x38>)
 8010742:	461c      	mov	r4, r3
 8010744:	e7f3      	b.n	801072e <__assert_func+0x12>
 8010746:	bf00      	nop
 8010748:	24000498 	.word	0x24000498
 801074c:	0801d1cf 	.word	0x0801d1cf
 8010750:	0801d1dc 	.word	0x0801d1dc
 8010754:	0801d20a 	.word	0x0801d20a

08010758 <quorem>:
 8010758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075c:	6903      	ldr	r3, [r0, #16]
 801075e:	690c      	ldr	r4, [r1, #16]
 8010760:	42a3      	cmp	r3, r4
 8010762:	4607      	mov	r7, r0
 8010764:	f2c0 8081 	blt.w	801086a <quorem+0x112>
 8010768:	3c01      	subs	r4, #1
 801076a:	f101 0814 	add.w	r8, r1, #20
 801076e:	f100 0514 	add.w	r5, r0, #20
 8010772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010776:	9301      	str	r3, [sp, #4]
 8010778:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801077c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010780:	3301      	adds	r3, #1
 8010782:	429a      	cmp	r2, r3
 8010784:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010788:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801078c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010790:	d331      	bcc.n	80107f6 <quorem+0x9e>
 8010792:	f04f 0e00 	mov.w	lr, #0
 8010796:	4640      	mov	r0, r8
 8010798:	46ac      	mov	ip, r5
 801079a:	46f2      	mov	sl, lr
 801079c:	f850 2b04 	ldr.w	r2, [r0], #4
 80107a0:	b293      	uxth	r3, r2
 80107a2:	fb06 e303 	mla	r3, r6, r3, lr
 80107a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	ebaa 0303 	sub.w	r3, sl, r3
 80107b0:	f8dc a000 	ldr.w	sl, [ip]
 80107b4:	0c12      	lsrs	r2, r2, #16
 80107b6:	fa13 f38a 	uxtah	r3, r3, sl
 80107ba:	fb06 e202 	mla	r2, r6, r2, lr
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	9b00      	ldr	r3, [sp, #0]
 80107c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80107c6:	b292      	uxth	r2, r2
 80107c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80107cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80107d4:	4581      	cmp	r9, r0
 80107d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107da:	f84c 3b04 	str.w	r3, [ip], #4
 80107de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80107e2:	d2db      	bcs.n	801079c <quorem+0x44>
 80107e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80107e8:	b92b      	cbnz	r3, 80107f6 <quorem+0x9e>
 80107ea:	9b01      	ldr	r3, [sp, #4]
 80107ec:	3b04      	subs	r3, #4
 80107ee:	429d      	cmp	r5, r3
 80107f0:	461a      	mov	r2, r3
 80107f2:	d32e      	bcc.n	8010852 <quorem+0xfa>
 80107f4:	613c      	str	r4, [r7, #16]
 80107f6:	4638      	mov	r0, r7
 80107f8:	f001 f848 	bl	801188c <__mcmp>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	db24      	blt.n	801084a <quorem+0xf2>
 8010800:	3601      	adds	r6, #1
 8010802:	4628      	mov	r0, r5
 8010804:	f04f 0c00 	mov.w	ip, #0
 8010808:	f858 2b04 	ldr.w	r2, [r8], #4
 801080c:	f8d0 e000 	ldr.w	lr, [r0]
 8010810:	b293      	uxth	r3, r2
 8010812:	ebac 0303 	sub.w	r3, ip, r3
 8010816:	0c12      	lsrs	r2, r2, #16
 8010818:	fa13 f38e 	uxtah	r3, r3, lr
 801081c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010820:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010824:	b29b      	uxth	r3, r3
 8010826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801082a:	45c1      	cmp	r9, r8
 801082c:	f840 3b04 	str.w	r3, [r0], #4
 8010830:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010834:	d2e8      	bcs.n	8010808 <quorem+0xb0>
 8010836:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801083a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801083e:	b922      	cbnz	r2, 801084a <quorem+0xf2>
 8010840:	3b04      	subs	r3, #4
 8010842:	429d      	cmp	r5, r3
 8010844:	461a      	mov	r2, r3
 8010846:	d30a      	bcc.n	801085e <quorem+0x106>
 8010848:	613c      	str	r4, [r7, #16]
 801084a:	4630      	mov	r0, r6
 801084c:	b003      	add	sp, #12
 801084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010852:	6812      	ldr	r2, [r2, #0]
 8010854:	3b04      	subs	r3, #4
 8010856:	2a00      	cmp	r2, #0
 8010858:	d1cc      	bne.n	80107f4 <quorem+0x9c>
 801085a:	3c01      	subs	r4, #1
 801085c:	e7c7      	b.n	80107ee <quorem+0x96>
 801085e:	6812      	ldr	r2, [r2, #0]
 8010860:	3b04      	subs	r3, #4
 8010862:	2a00      	cmp	r2, #0
 8010864:	d1f0      	bne.n	8010848 <quorem+0xf0>
 8010866:	3c01      	subs	r4, #1
 8010868:	e7eb      	b.n	8010842 <quorem+0xea>
 801086a:	2000      	movs	r0, #0
 801086c:	e7ee      	b.n	801084c <quorem+0xf4>
	...

08010870 <_dtoa_r>:
 8010870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	ed2d 8b02 	vpush	{d8}
 8010878:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801087a:	b091      	sub	sp, #68	; 0x44
 801087c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010880:	ec59 8b10 	vmov	r8, r9, d0
 8010884:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010886:	9106      	str	r1, [sp, #24]
 8010888:	4606      	mov	r6, r0
 801088a:	9208      	str	r2, [sp, #32]
 801088c:	930c      	str	r3, [sp, #48]	; 0x30
 801088e:	b975      	cbnz	r5, 80108ae <_dtoa_r+0x3e>
 8010890:	2010      	movs	r0, #16
 8010892:	f000 fd71 	bl	8011378 <malloc>
 8010896:	4602      	mov	r2, r0
 8010898:	6270      	str	r0, [r6, #36]	; 0x24
 801089a:	b920      	cbnz	r0, 80108a6 <_dtoa_r+0x36>
 801089c:	4baa      	ldr	r3, [pc, #680]	; (8010b48 <_dtoa_r+0x2d8>)
 801089e:	21ea      	movs	r1, #234	; 0xea
 80108a0:	48aa      	ldr	r0, [pc, #680]	; (8010b4c <_dtoa_r+0x2dc>)
 80108a2:	f7ff ff3b 	bl	801071c <__assert_func>
 80108a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108aa:	6005      	str	r5, [r0, #0]
 80108ac:	60c5      	str	r5, [r0, #12]
 80108ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80108b0:	6819      	ldr	r1, [r3, #0]
 80108b2:	b151      	cbz	r1, 80108ca <_dtoa_r+0x5a>
 80108b4:	685a      	ldr	r2, [r3, #4]
 80108b6:	604a      	str	r2, [r1, #4]
 80108b8:	2301      	movs	r3, #1
 80108ba:	4093      	lsls	r3, r2
 80108bc:	608b      	str	r3, [r1, #8]
 80108be:	4630      	mov	r0, r6
 80108c0:	f000 fda2 	bl	8011408 <_Bfree>
 80108c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80108c6:	2200      	movs	r2, #0
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	f1b9 0300 	subs.w	r3, r9, #0
 80108ce:	bfbb      	ittet	lt
 80108d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80108d4:	9303      	strlt	r3, [sp, #12]
 80108d6:	2300      	movge	r3, #0
 80108d8:	2201      	movlt	r2, #1
 80108da:	bfac      	ite	ge
 80108dc:	6023      	strge	r3, [r4, #0]
 80108de:	6022      	strlt	r2, [r4, #0]
 80108e0:	4b9b      	ldr	r3, [pc, #620]	; (8010b50 <_dtoa_r+0x2e0>)
 80108e2:	9c03      	ldr	r4, [sp, #12]
 80108e4:	43a3      	bics	r3, r4
 80108e6:	d11c      	bne.n	8010922 <_dtoa_r+0xb2>
 80108e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80108f4:	ea53 0308 	orrs.w	r3, r3, r8
 80108f8:	f000 84fd 	beq.w	80112f6 <_dtoa_r+0xa86>
 80108fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108fe:	b963      	cbnz	r3, 801091a <_dtoa_r+0xaa>
 8010900:	4b94      	ldr	r3, [pc, #592]	; (8010b54 <_dtoa_r+0x2e4>)
 8010902:	e01f      	b.n	8010944 <_dtoa_r+0xd4>
 8010904:	4b94      	ldr	r3, [pc, #592]	; (8010b58 <_dtoa_r+0x2e8>)
 8010906:	9301      	str	r3, [sp, #4]
 8010908:	3308      	adds	r3, #8
 801090a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801090c:	6013      	str	r3, [r2, #0]
 801090e:	9801      	ldr	r0, [sp, #4]
 8010910:	b011      	add	sp, #68	; 0x44
 8010912:	ecbd 8b02 	vpop	{d8}
 8010916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091a:	4b8e      	ldr	r3, [pc, #568]	; (8010b54 <_dtoa_r+0x2e4>)
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	3303      	adds	r3, #3
 8010920:	e7f3      	b.n	801090a <_dtoa_r+0x9a>
 8010922:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010926:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092e:	d10b      	bne.n	8010948 <_dtoa_r+0xd8>
 8010930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010932:	2301      	movs	r3, #1
 8010934:	6013      	str	r3, [r2, #0]
 8010936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 84d9 	beq.w	80112f0 <_dtoa_r+0xa80>
 801093e:	4887      	ldr	r0, [pc, #540]	; (8010b5c <_dtoa_r+0x2ec>)
 8010940:	6018      	str	r0, [r3, #0]
 8010942:	1e43      	subs	r3, r0, #1
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	e7e2      	b.n	801090e <_dtoa_r+0x9e>
 8010948:	a90f      	add	r1, sp, #60	; 0x3c
 801094a:	aa0e      	add	r2, sp, #56	; 0x38
 801094c:	4630      	mov	r0, r6
 801094e:	eeb0 0b48 	vmov.f64	d0, d8
 8010952:	f001 f841 	bl	80119d8 <__d2b>
 8010956:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801095a:	4605      	mov	r5, r0
 801095c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801095e:	2900      	cmp	r1, #0
 8010960:	d046      	beq.n	80109f0 <_dtoa_r+0x180>
 8010962:	ee18 4a90 	vmov	r4, s17
 8010966:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801096a:	ec53 2b18 	vmov	r2, r3, d8
 801096e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010972:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010976:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801097a:	2400      	movs	r4, #0
 801097c:	ec43 2b16 	vmov	d6, r2, r3
 8010980:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010984:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010b30 <_dtoa_r+0x2c0>
 8010988:	ee36 7b47 	vsub.f64	d7, d6, d7
 801098c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010b38 <_dtoa_r+0x2c8>
 8010990:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010994:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010b40 <_dtoa_r+0x2d0>
 8010998:	ee07 1a90 	vmov	s15, r1
 801099c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80109a0:	eeb0 7b46 	vmov.f64	d7, d6
 80109a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80109a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80109ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80109b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b4:	ee16 ba90 	vmov	fp, s13
 80109b8:	940a      	str	r4, [sp, #40]	; 0x28
 80109ba:	d508      	bpl.n	80109ce <_dtoa_r+0x15e>
 80109bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80109c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80109c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c8:	bf18      	it	ne
 80109ca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80109ce:	f1bb 0f16 	cmp.w	fp, #22
 80109d2:	d82f      	bhi.n	8010a34 <_dtoa_r+0x1c4>
 80109d4:	4b62      	ldr	r3, [pc, #392]	; (8010b60 <_dtoa_r+0x2f0>)
 80109d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80109da:	ed93 7b00 	vldr	d7, [r3]
 80109de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80109e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e6:	d501      	bpl.n	80109ec <_dtoa_r+0x17c>
 80109e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80109ec:	2300      	movs	r3, #0
 80109ee:	e022      	b.n	8010a36 <_dtoa_r+0x1c6>
 80109f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80109f2:	4401      	add	r1, r0
 80109f4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80109f8:	2b20      	cmp	r3, #32
 80109fa:	bfc1      	itttt	gt
 80109fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a00:	fa04 f303 	lslgt.w	r3, r4, r3
 8010a04:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010a08:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010a0c:	bfd6      	itet	le
 8010a0e:	f1c3 0320 	rsble	r3, r3, #32
 8010a12:	ea43 0808 	orrgt.w	r8, r3, r8
 8010a16:	fa08 f803 	lslle.w	r8, r8, r3
 8010a1a:	ee07 8a90 	vmov	s15, r8
 8010a1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010a22:	3901      	subs	r1, #1
 8010a24:	ee17 4a90 	vmov	r4, s15
 8010a28:	ec53 2b17 	vmov	r2, r3, d7
 8010a2c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010a30:	2401      	movs	r4, #1
 8010a32:	e7a3      	b.n	801097c <_dtoa_r+0x10c>
 8010a34:	2301      	movs	r3, #1
 8010a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a38:	1a43      	subs	r3, r0, r1
 8010a3a:	1e5a      	subs	r2, r3, #1
 8010a3c:	bf45      	ittet	mi
 8010a3e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010a42:	9304      	strmi	r3, [sp, #16]
 8010a44:	2300      	movpl	r3, #0
 8010a46:	2300      	movmi	r3, #0
 8010a48:	9205      	str	r2, [sp, #20]
 8010a4a:	bf54      	ite	pl
 8010a4c:	9304      	strpl	r3, [sp, #16]
 8010a4e:	9305      	strmi	r3, [sp, #20]
 8010a50:	f1bb 0f00 	cmp.w	fp, #0
 8010a54:	db18      	blt.n	8010a88 <_dtoa_r+0x218>
 8010a56:	9b05      	ldr	r3, [sp, #20]
 8010a58:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010a5c:	445b      	add	r3, fp
 8010a5e:	9305      	str	r3, [sp, #20]
 8010a60:	2300      	movs	r3, #0
 8010a62:	9a06      	ldr	r2, [sp, #24]
 8010a64:	2a09      	cmp	r2, #9
 8010a66:	d849      	bhi.n	8010afc <_dtoa_r+0x28c>
 8010a68:	2a05      	cmp	r2, #5
 8010a6a:	bfc4      	itt	gt
 8010a6c:	3a04      	subgt	r2, #4
 8010a6e:	9206      	strgt	r2, [sp, #24]
 8010a70:	9a06      	ldr	r2, [sp, #24]
 8010a72:	f1a2 0202 	sub.w	r2, r2, #2
 8010a76:	bfcc      	ite	gt
 8010a78:	2400      	movgt	r4, #0
 8010a7a:	2401      	movle	r4, #1
 8010a7c:	2a03      	cmp	r2, #3
 8010a7e:	d848      	bhi.n	8010b12 <_dtoa_r+0x2a2>
 8010a80:	e8df f002 	tbb	[pc, r2]
 8010a84:	3a2c2e0b 	.word	0x3a2c2e0b
 8010a88:	9b04      	ldr	r3, [sp, #16]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	eba3 030b 	sub.w	r3, r3, fp
 8010a90:	9304      	str	r3, [sp, #16]
 8010a92:	9209      	str	r2, [sp, #36]	; 0x24
 8010a94:	f1cb 0300 	rsb	r3, fp, #0
 8010a98:	e7e3      	b.n	8010a62 <_dtoa_r+0x1f2>
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	9207      	str	r2, [sp, #28]
 8010a9e:	9a08      	ldr	r2, [sp, #32]
 8010aa0:	2a00      	cmp	r2, #0
 8010aa2:	dc39      	bgt.n	8010b18 <_dtoa_r+0x2a8>
 8010aa4:	f04f 0a01 	mov.w	sl, #1
 8010aa8:	46d1      	mov	r9, sl
 8010aaa:	4652      	mov	r2, sl
 8010aac:	f8cd a020 	str.w	sl, [sp, #32]
 8010ab0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	6079      	str	r1, [r7, #4]
 8010ab6:	2004      	movs	r0, #4
 8010ab8:	f100 0c14 	add.w	ip, r0, #20
 8010abc:	4594      	cmp	ip, r2
 8010abe:	6879      	ldr	r1, [r7, #4]
 8010ac0:	d92f      	bls.n	8010b22 <_dtoa_r+0x2b2>
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	930d      	str	r3, [sp, #52]	; 0x34
 8010ac6:	f000 fc5f 	bl	8011388 <_Balloc>
 8010aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010acc:	9001      	str	r0, [sp, #4]
 8010ace:	4602      	mov	r2, r0
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d149      	bne.n	8010b68 <_dtoa_r+0x2f8>
 8010ad4:	4b23      	ldr	r3, [pc, #140]	; (8010b64 <_dtoa_r+0x2f4>)
 8010ad6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010ada:	e6e1      	b.n	80108a0 <_dtoa_r+0x30>
 8010adc:	2201      	movs	r2, #1
 8010ade:	e7dd      	b.n	8010a9c <_dtoa_r+0x22c>
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	9207      	str	r2, [sp, #28]
 8010ae4:	9a08      	ldr	r2, [sp, #32]
 8010ae6:	eb0b 0a02 	add.w	sl, fp, r2
 8010aea:	f10a 0901 	add.w	r9, sl, #1
 8010aee:	464a      	mov	r2, r9
 8010af0:	2a01      	cmp	r2, #1
 8010af2:	bfb8      	it	lt
 8010af4:	2201      	movlt	r2, #1
 8010af6:	e7db      	b.n	8010ab0 <_dtoa_r+0x240>
 8010af8:	2201      	movs	r2, #1
 8010afa:	e7f2      	b.n	8010ae2 <_dtoa_r+0x272>
 8010afc:	2401      	movs	r4, #1
 8010afe:	2200      	movs	r2, #0
 8010b00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010b04:	f04f 3aff 	mov.w	sl, #4294967295
 8010b08:	2100      	movs	r1, #0
 8010b0a:	46d1      	mov	r9, sl
 8010b0c:	2212      	movs	r2, #18
 8010b0e:	9108      	str	r1, [sp, #32]
 8010b10:	e7ce      	b.n	8010ab0 <_dtoa_r+0x240>
 8010b12:	2201      	movs	r2, #1
 8010b14:	9207      	str	r2, [sp, #28]
 8010b16:	e7f5      	b.n	8010b04 <_dtoa_r+0x294>
 8010b18:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010b1c:	46d1      	mov	r9, sl
 8010b1e:	4652      	mov	r2, sl
 8010b20:	e7c6      	b.n	8010ab0 <_dtoa_r+0x240>
 8010b22:	3101      	adds	r1, #1
 8010b24:	6079      	str	r1, [r7, #4]
 8010b26:	0040      	lsls	r0, r0, #1
 8010b28:	e7c6      	b.n	8010ab8 <_dtoa_r+0x248>
 8010b2a:	bf00      	nop
 8010b2c:	f3af 8000 	nop.w
 8010b30:	636f4361 	.word	0x636f4361
 8010b34:	3fd287a7 	.word	0x3fd287a7
 8010b38:	8b60c8b3 	.word	0x8b60c8b3
 8010b3c:	3fc68a28 	.word	0x3fc68a28
 8010b40:	509f79fb 	.word	0x509f79fb
 8010b44:	3fd34413 	.word	0x3fd34413
 8010b48:	0801d100 	.word	0x0801d100
 8010b4c:	0801d218 	.word	0x0801d218
 8010b50:	7ff00000 	.word	0x7ff00000
 8010b54:	0801d214 	.word	0x0801d214
 8010b58:	0801d20b 	.word	0x0801d20b
 8010b5c:	0801d0dd 	.word	0x0801d0dd
 8010b60:	0801d308 	.word	0x0801d308
 8010b64:	0801d273 	.word	0x0801d273
 8010b68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010b6a:	9901      	ldr	r1, [sp, #4]
 8010b6c:	6011      	str	r1, [r2, #0]
 8010b6e:	f1b9 0f0e 	cmp.w	r9, #14
 8010b72:	d86c      	bhi.n	8010c4e <_dtoa_r+0x3de>
 8010b74:	2c00      	cmp	r4, #0
 8010b76:	d06a      	beq.n	8010c4e <_dtoa_r+0x3de>
 8010b78:	f1bb 0f00 	cmp.w	fp, #0
 8010b7c:	f340 80a0 	ble.w	8010cc0 <_dtoa_r+0x450>
 8010b80:	49c1      	ldr	r1, [pc, #772]	; (8010e88 <_dtoa_r+0x618>)
 8010b82:	f00b 020f 	and.w	r2, fp, #15
 8010b86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010b8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010b8e:	ed92 7b00 	vldr	d7, [r2]
 8010b92:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010b96:	f000 8087 	beq.w	8010ca8 <_dtoa_r+0x438>
 8010b9a:	4abc      	ldr	r2, [pc, #752]	; (8010e8c <_dtoa_r+0x61c>)
 8010b9c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010ba0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010ba4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010ba8:	f001 010f 	and.w	r1, r1, #15
 8010bac:	2203      	movs	r2, #3
 8010bae:	48b7      	ldr	r0, [pc, #732]	; (8010e8c <_dtoa_r+0x61c>)
 8010bb0:	2900      	cmp	r1, #0
 8010bb2:	d17b      	bne.n	8010cac <_dtoa_r+0x43c>
 8010bb4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010bb8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010bbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010bc2:	2900      	cmp	r1, #0
 8010bc4:	f000 80a2 	beq.w	8010d0c <_dtoa_r+0x49c>
 8010bc8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010bcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd8:	f140 8098 	bpl.w	8010d0c <_dtoa_r+0x49c>
 8010bdc:	f1b9 0f00 	cmp.w	r9, #0
 8010be0:	f000 8094 	beq.w	8010d0c <_dtoa_r+0x49c>
 8010be4:	f1ba 0f00 	cmp.w	sl, #0
 8010be8:	dd2f      	ble.n	8010c4a <_dtoa_r+0x3da>
 8010bea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010bee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010bf2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010bf6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010bfa:	3201      	adds	r2, #1
 8010bfc:	4650      	mov	r0, sl
 8010bfe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c02:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010c06:	ee07 2a90 	vmov	s15, r2
 8010c0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c0e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010c12:	ee15 4a90 	vmov	r4, s11
 8010c16:	ec52 1b15 	vmov	r1, r2, d5
 8010c1a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d177      	bne.n	8010d12 <_dtoa_r+0x4a2>
 8010c22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010c26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010c2a:	ec42 1b17 	vmov	d7, r1, r2
 8010c2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c36:	f300 8263 	bgt.w	8011100 <_dtoa_r+0x890>
 8010c3a:	eeb1 7b47 	vneg.f64	d7, d7
 8010c3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c46:	f100 8258 	bmi.w	80110fa <_dtoa_r+0x88a>
 8010c4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010c4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010c50:	2a00      	cmp	r2, #0
 8010c52:	f2c0 811d 	blt.w	8010e90 <_dtoa_r+0x620>
 8010c56:	f1bb 0f0e 	cmp.w	fp, #14
 8010c5a:	f300 8119 	bgt.w	8010e90 <_dtoa_r+0x620>
 8010c5e:	4b8a      	ldr	r3, [pc, #552]	; (8010e88 <_dtoa_r+0x618>)
 8010c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010c64:	ed93 6b00 	vldr	d6, [r3]
 8010c68:	9b08      	ldr	r3, [sp, #32]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f280 80b7 	bge.w	8010dde <_dtoa_r+0x56e>
 8010c70:	f1b9 0f00 	cmp.w	r9, #0
 8010c74:	f300 80b3 	bgt.w	8010dde <_dtoa_r+0x56e>
 8010c78:	f040 823f 	bne.w	80110fa <_dtoa_r+0x88a>
 8010c7c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010c80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c90:	464c      	mov	r4, r9
 8010c92:	464f      	mov	r7, r9
 8010c94:	f280 8215 	bge.w	80110c2 <_dtoa_r+0x852>
 8010c98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010c9c:	2331      	movs	r3, #49	; 0x31
 8010c9e:	f808 3b01 	strb.w	r3, [r8], #1
 8010ca2:	f10b 0b01 	add.w	fp, fp, #1
 8010ca6:	e211      	b.n	80110cc <_dtoa_r+0x85c>
 8010ca8:	2202      	movs	r2, #2
 8010caa:	e780      	b.n	8010bae <_dtoa_r+0x33e>
 8010cac:	07cc      	lsls	r4, r1, #31
 8010cae:	d504      	bpl.n	8010cba <_dtoa_r+0x44a>
 8010cb0:	ed90 6b00 	vldr	d6, [r0]
 8010cb4:	3201      	adds	r2, #1
 8010cb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010cba:	1049      	asrs	r1, r1, #1
 8010cbc:	3008      	adds	r0, #8
 8010cbe:	e777      	b.n	8010bb0 <_dtoa_r+0x340>
 8010cc0:	d022      	beq.n	8010d08 <_dtoa_r+0x498>
 8010cc2:	f1cb 0100 	rsb	r1, fp, #0
 8010cc6:	4a70      	ldr	r2, [pc, #448]	; (8010e88 <_dtoa_r+0x618>)
 8010cc8:	f001 000f 	and.w	r0, r1, #15
 8010ccc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010cd0:	ed92 7b00 	vldr	d7, [r2]
 8010cd4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cdc:	486b      	ldr	r0, [pc, #428]	; (8010e8c <_dtoa_r+0x61c>)
 8010cde:	1109      	asrs	r1, r1, #4
 8010ce0:	2400      	movs	r4, #0
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	b929      	cbnz	r1, 8010cf2 <_dtoa_r+0x482>
 8010ce6:	2c00      	cmp	r4, #0
 8010ce8:	f43f af6a 	beq.w	8010bc0 <_dtoa_r+0x350>
 8010cec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cf0:	e766      	b.n	8010bc0 <_dtoa_r+0x350>
 8010cf2:	07cf      	lsls	r7, r1, #31
 8010cf4:	d505      	bpl.n	8010d02 <_dtoa_r+0x492>
 8010cf6:	ed90 6b00 	vldr	d6, [r0]
 8010cfa:	3201      	adds	r2, #1
 8010cfc:	2401      	movs	r4, #1
 8010cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d02:	1049      	asrs	r1, r1, #1
 8010d04:	3008      	adds	r0, #8
 8010d06:	e7ed      	b.n	8010ce4 <_dtoa_r+0x474>
 8010d08:	2202      	movs	r2, #2
 8010d0a:	e759      	b.n	8010bc0 <_dtoa_r+0x350>
 8010d0c:	465f      	mov	r7, fp
 8010d0e:	4648      	mov	r0, r9
 8010d10:	e775      	b.n	8010bfe <_dtoa_r+0x38e>
 8010d12:	ec42 1b17 	vmov	d7, r1, r2
 8010d16:	4a5c      	ldr	r2, [pc, #368]	; (8010e88 <_dtoa_r+0x618>)
 8010d18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d1c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010d20:	9a01      	ldr	r2, [sp, #4]
 8010d22:	1814      	adds	r4, r2, r0
 8010d24:	9a07      	ldr	r2, [sp, #28]
 8010d26:	b352      	cbz	r2, 8010d7e <_dtoa_r+0x50e>
 8010d28:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010d2c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010d30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010d34:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010d38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010d3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010d40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010d44:	ee14 2a90 	vmov	r2, s9
 8010d48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010d4c:	3230      	adds	r2, #48	; 0x30
 8010d4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	f808 2b01 	strb.w	r2, [r8], #1
 8010d5e:	d439      	bmi.n	8010dd4 <_dtoa_r+0x564>
 8010d60:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010d64:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6c:	d472      	bmi.n	8010e54 <_dtoa_r+0x5e4>
 8010d6e:	45a0      	cmp	r8, r4
 8010d70:	f43f af6b 	beq.w	8010c4a <_dtoa_r+0x3da>
 8010d74:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010d78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010d7c:	e7e0      	b.n	8010d40 <_dtoa_r+0x4d0>
 8010d7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010d82:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010d86:	4621      	mov	r1, r4
 8010d88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010d8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010d90:	ee14 2a90 	vmov	r2, s9
 8010d94:	3230      	adds	r2, #48	; 0x30
 8010d96:	f808 2b01 	strb.w	r2, [r8], #1
 8010d9a:	45a0      	cmp	r8, r4
 8010d9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010da0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010da4:	d118      	bne.n	8010dd8 <_dtoa_r+0x568>
 8010da6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010daa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010dae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db6:	dc4d      	bgt.n	8010e54 <_dtoa_r+0x5e4>
 8010db8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010dbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc4:	f57f af41 	bpl.w	8010c4a <_dtoa_r+0x3da>
 8010dc8:	4688      	mov	r8, r1
 8010dca:	3901      	subs	r1, #1
 8010dcc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010dd0:	2b30      	cmp	r3, #48	; 0x30
 8010dd2:	d0f9      	beq.n	8010dc8 <_dtoa_r+0x558>
 8010dd4:	46bb      	mov	fp, r7
 8010dd6:	e02a      	b.n	8010e2e <_dtoa_r+0x5be>
 8010dd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010ddc:	e7d6      	b.n	8010d8c <_dtoa_r+0x51c>
 8010dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010de2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010de6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010dea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010dee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010df2:	ee15 3a10 	vmov	r3, s10
 8010df6:	3330      	adds	r3, #48	; 0x30
 8010df8:	f808 3b01 	strb.w	r3, [r8], #1
 8010dfc:	9b01      	ldr	r3, [sp, #4]
 8010dfe:	eba8 0303 	sub.w	r3, r8, r3
 8010e02:	4599      	cmp	r9, r3
 8010e04:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010e08:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010e0c:	d133      	bne.n	8010e76 <_dtoa_r+0x606>
 8010e0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010e12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e1a:	dc1a      	bgt.n	8010e52 <_dtoa_r+0x5e2>
 8010e1c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e24:	d103      	bne.n	8010e2e <_dtoa_r+0x5be>
 8010e26:	ee15 3a10 	vmov	r3, s10
 8010e2a:	07d9      	lsls	r1, r3, #31
 8010e2c:	d411      	bmi.n	8010e52 <_dtoa_r+0x5e2>
 8010e2e:	4629      	mov	r1, r5
 8010e30:	4630      	mov	r0, r6
 8010e32:	f000 fae9 	bl	8011408 <_Bfree>
 8010e36:	2300      	movs	r3, #0
 8010e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e3a:	f888 3000 	strb.w	r3, [r8]
 8010e3e:	f10b 0301 	add.w	r3, fp, #1
 8010e42:	6013      	str	r3, [r2, #0]
 8010e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f43f ad61 	beq.w	801090e <_dtoa_r+0x9e>
 8010e4c:	f8c3 8000 	str.w	r8, [r3]
 8010e50:	e55d      	b.n	801090e <_dtoa_r+0x9e>
 8010e52:	465f      	mov	r7, fp
 8010e54:	4643      	mov	r3, r8
 8010e56:	4698      	mov	r8, r3
 8010e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e5c:	2a39      	cmp	r2, #57	; 0x39
 8010e5e:	d106      	bne.n	8010e6e <_dtoa_r+0x5fe>
 8010e60:	9a01      	ldr	r2, [sp, #4]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d1f7      	bne.n	8010e56 <_dtoa_r+0x5e6>
 8010e66:	9901      	ldr	r1, [sp, #4]
 8010e68:	2230      	movs	r2, #48	; 0x30
 8010e6a:	3701      	adds	r7, #1
 8010e6c:	700a      	strb	r2, [r1, #0]
 8010e6e:	781a      	ldrb	r2, [r3, #0]
 8010e70:	3201      	adds	r2, #1
 8010e72:	701a      	strb	r2, [r3, #0]
 8010e74:	e7ae      	b.n	8010dd4 <_dtoa_r+0x564>
 8010e76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e82:	d1b2      	bne.n	8010dea <_dtoa_r+0x57a>
 8010e84:	e7d3      	b.n	8010e2e <_dtoa_r+0x5be>
 8010e86:	bf00      	nop
 8010e88:	0801d308 	.word	0x0801d308
 8010e8c:	0801d2e0 	.word	0x0801d2e0
 8010e90:	9907      	ldr	r1, [sp, #28]
 8010e92:	2900      	cmp	r1, #0
 8010e94:	f000 80d0 	beq.w	8011038 <_dtoa_r+0x7c8>
 8010e98:	9906      	ldr	r1, [sp, #24]
 8010e9a:	2901      	cmp	r1, #1
 8010e9c:	f300 80b4 	bgt.w	8011008 <_dtoa_r+0x798>
 8010ea0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010ea2:	2900      	cmp	r1, #0
 8010ea4:	f000 80ac 	beq.w	8011000 <_dtoa_r+0x790>
 8010ea8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010eac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010eb0:	461c      	mov	r4, r3
 8010eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8010eb4:	9b04      	ldr	r3, [sp, #16]
 8010eb6:	4413      	add	r3, r2
 8010eb8:	9304      	str	r3, [sp, #16]
 8010eba:	9b05      	ldr	r3, [sp, #20]
 8010ebc:	2101      	movs	r1, #1
 8010ebe:	4413      	add	r3, r2
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	9305      	str	r3, [sp, #20]
 8010ec4:	f000 fb58 	bl	8011578 <__i2b>
 8010ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eca:	4607      	mov	r7, r0
 8010ecc:	f1b8 0f00 	cmp.w	r8, #0
 8010ed0:	dd0d      	ble.n	8010eee <_dtoa_r+0x67e>
 8010ed2:	9a05      	ldr	r2, [sp, #20]
 8010ed4:	2a00      	cmp	r2, #0
 8010ed6:	dd0a      	ble.n	8010eee <_dtoa_r+0x67e>
 8010ed8:	4542      	cmp	r2, r8
 8010eda:	9904      	ldr	r1, [sp, #16]
 8010edc:	bfa8      	it	ge
 8010ede:	4642      	movge	r2, r8
 8010ee0:	1a89      	subs	r1, r1, r2
 8010ee2:	9104      	str	r1, [sp, #16]
 8010ee4:	9905      	ldr	r1, [sp, #20]
 8010ee6:	eba8 0802 	sub.w	r8, r8, r2
 8010eea:	1a8a      	subs	r2, r1, r2
 8010eec:	9205      	str	r2, [sp, #20]
 8010eee:	b303      	cbz	r3, 8010f32 <_dtoa_r+0x6c2>
 8010ef0:	9a07      	ldr	r2, [sp, #28]
 8010ef2:	2a00      	cmp	r2, #0
 8010ef4:	f000 80a5 	beq.w	8011042 <_dtoa_r+0x7d2>
 8010ef8:	2c00      	cmp	r4, #0
 8010efa:	dd13      	ble.n	8010f24 <_dtoa_r+0x6b4>
 8010efc:	4639      	mov	r1, r7
 8010efe:	4622      	mov	r2, r4
 8010f00:	4630      	mov	r0, r6
 8010f02:	930d      	str	r3, [sp, #52]	; 0x34
 8010f04:	f000 fbf8 	bl	80116f8 <__pow5mult>
 8010f08:	462a      	mov	r2, r5
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	4607      	mov	r7, r0
 8010f0e:	4630      	mov	r0, r6
 8010f10:	f000 fb48 	bl	80115a4 <__multiply>
 8010f14:	4629      	mov	r1, r5
 8010f16:	900a      	str	r0, [sp, #40]	; 0x28
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f000 fa75 	bl	8011408 <_Bfree>
 8010f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f22:	4615      	mov	r5, r2
 8010f24:	1b1a      	subs	r2, r3, r4
 8010f26:	d004      	beq.n	8010f32 <_dtoa_r+0x6c2>
 8010f28:	4629      	mov	r1, r5
 8010f2a:	4630      	mov	r0, r6
 8010f2c:	f000 fbe4 	bl	80116f8 <__pow5mult>
 8010f30:	4605      	mov	r5, r0
 8010f32:	2101      	movs	r1, #1
 8010f34:	4630      	mov	r0, r6
 8010f36:	f000 fb1f 	bl	8011578 <__i2b>
 8010f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	4604      	mov	r4, r0
 8010f40:	f340 8081 	ble.w	8011046 <_dtoa_r+0x7d6>
 8010f44:	461a      	mov	r2, r3
 8010f46:	4601      	mov	r1, r0
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f000 fbd5 	bl	80116f8 <__pow5mult>
 8010f4e:	9b06      	ldr	r3, [sp, #24]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	4604      	mov	r4, r0
 8010f54:	dd7a      	ble.n	801104c <_dtoa_r+0x7dc>
 8010f56:	2300      	movs	r3, #0
 8010f58:	930a      	str	r3, [sp, #40]	; 0x28
 8010f5a:	6922      	ldr	r2, [r4, #16]
 8010f5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010f60:	6910      	ldr	r0, [r2, #16]
 8010f62:	f000 fab9 	bl	80114d8 <__hi0bits>
 8010f66:	f1c0 0020 	rsb	r0, r0, #32
 8010f6a:	9b05      	ldr	r3, [sp, #20]
 8010f6c:	4418      	add	r0, r3
 8010f6e:	f010 001f 	ands.w	r0, r0, #31
 8010f72:	f000 808c 	beq.w	801108e <_dtoa_r+0x81e>
 8010f76:	f1c0 0220 	rsb	r2, r0, #32
 8010f7a:	2a04      	cmp	r2, #4
 8010f7c:	f340 8085 	ble.w	801108a <_dtoa_r+0x81a>
 8010f80:	f1c0 001c 	rsb	r0, r0, #28
 8010f84:	9b04      	ldr	r3, [sp, #16]
 8010f86:	4403      	add	r3, r0
 8010f88:	9304      	str	r3, [sp, #16]
 8010f8a:	9b05      	ldr	r3, [sp, #20]
 8010f8c:	4403      	add	r3, r0
 8010f8e:	4480      	add	r8, r0
 8010f90:	9305      	str	r3, [sp, #20]
 8010f92:	9b04      	ldr	r3, [sp, #16]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	dd05      	ble.n	8010fa4 <_dtoa_r+0x734>
 8010f98:	4629      	mov	r1, r5
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	4630      	mov	r0, r6
 8010f9e:	f000 fc05 	bl	80117ac <__lshift>
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	9b05      	ldr	r3, [sp, #20]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	dd05      	ble.n	8010fb6 <_dtoa_r+0x746>
 8010faa:	4621      	mov	r1, r4
 8010fac:	461a      	mov	r2, r3
 8010fae:	4630      	mov	r0, r6
 8010fb0:	f000 fbfc 	bl	80117ac <__lshift>
 8010fb4:	4604      	mov	r4, r0
 8010fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d06a      	beq.n	8011092 <_dtoa_r+0x822>
 8010fbc:	4621      	mov	r1, r4
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	f000 fc64 	bl	801188c <__mcmp>
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	da64      	bge.n	8011092 <_dtoa_r+0x822>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4629      	mov	r1, r5
 8010fcc:	220a      	movs	r2, #10
 8010fce:	4630      	mov	r0, r6
 8010fd0:	f000 fa3c 	bl	801144c <__multadd>
 8010fd4:	9b07      	ldr	r3, [sp, #28]
 8010fd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010fda:	4605      	mov	r5, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 8191 	beq.w	8011304 <_dtoa_r+0xa94>
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	220a      	movs	r2, #10
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f000 fa2f 	bl	801144c <__multadd>
 8010fee:	f1ba 0f00 	cmp.w	sl, #0
 8010ff2:	4607      	mov	r7, r0
 8010ff4:	f300 808d 	bgt.w	8011112 <_dtoa_r+0x8a2>
 8010ff8:	9b06      	ldr	r3, [sp, #24]
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	dc50      	bgt.n	80110a0 <_dtoa_r+0x830>
 8010ffe:	e088      	b.n	8011112 <_dtoa_r+0x8a2>
 8011000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011002:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011006:	e751      	b.n	8010eac <_dtoa_r+0x63c>
 8011008:	f109 34ff 	add.w	r4, r9, #4294967295
 801100c:	42a3      	cmp	r3, r4
 801100e:	bfbf      	itttt	lt
 8011010:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8011012:	1ae3      	sublt	r3, r4, r3
 8011014:	18d2      	addlt	r2, r2, r3
 8011016:	9209      	strlt	r2, [sp, #36]	; 0x24
 8011018:	bfb6      	itet	lt
 801101a:	4623      	movlt	r3, r4
 801101c:	1b1c      	subge	r4, r3, r4
 801101e:	2400      	movlt	r4, #0
 8011020:	f1b9 0f00 	cmp.w	r9, #0
 8011024:	bfb5      	itete	lt
 8011026:	9a04      	ldrlt	r2, [sp, #16]
 8011028:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801102c:	eba2 0809 	sublt.w	r8, r2, r9
 8011030:	464a      	movge	r2, r9
 8011032:	bfb8      	it	lt
 8011034:	2200      	movlt	r2, #0
 8011036:	e73c      	b.n	8010eb2 <_dtoa_r+0x642>
 8011038:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801103c:	9f07      	ldr	r7, [sp, #28]
 801103e:	461c      	mov	r4, r3
 8011040:	e744      	b.n	8010ecc <_dtoa_r+0x65c>
 8011042:	461a      	mov	r2, r3
 8011044:	e770      	b.n	8010f28 <_dtoa_r+0x6b8>
 8011046:	9b06      	ldr	r3, [sp, #24]
 8011048:	2b01      	cmp	r3, #1
 801104a:	dc18      	bgt.n	801107e <_dtoa_r+0x80e>
 801104c:	9b02      	ldr	r3, [sp, #8]
 801104e:	b9b3      	cbnz	r3, 801107e <_dtoa_r+0x80e>
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011056:	b9a2      	cbnz	r2, 8011082 <_dtoa_r+0x812>
 8011058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801105c:	0d12      	lsrs	r2, r2, #20
 801105e:	0512      	lsls	r2, r2, #20
 8011060:	b18a      	cbz	r2, 8011086 <_dtoa_r+0x816>
 8011062:	9b04      	ldr	r3, [sp, #16]
 8011064:	3301      	adds	r3, #1
 8011066:	9304      	str	r3, [sp, #16]
 8011068:	9b05      	ldr	r3, [sp, #20]
 801106a:	3301      	adds	r3, #1
 801106c:	9305      	str	r3, [sp, #20]
 801106e:	2301      	movs	r3, #1
 8011070:	930a      	str	r3, [sp, #40]	; 0x28
 8011072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011074:	2b00      	cmp	r3, #0
 8011076:	f47f af70 	bne.w	8010f5a <_dtoa_r+0x6ea>
 801107a:	2001      	movs	r0, #1
 801107c:	e775      	b.n	8010f6a <_dtoa_r+0x6fa>
 801107e:	2300      	movs	r3, #0
 8011080:	e7f6      	b.n	8011070 <_dtoa_r+0x800>
 8011082:	9b02      	ldr	r3, [sp, #8]
 8011084:	e7f4      	b.n	8011070 <_dtoa_r+0x800>
 8011086:	920a      	str	r2, [sp, #40]	; 0x28
 8011088:	e7f3      	b.n	8011072 <_dtoa_r+0x802>
 801108a:	d082      	beq.n	8010f92 <_dtoa_r+0x722>
 801108c:	4610      	mov	r0, r2
 801108e:	301c      	adds	r0, #28
 8011090:	e778      	b.n	8010f84 <_dtoa_r+0x714>
 8011092:	f1b9 0f00 	cmp.w	r9, #0
 8011096:	dc37      	bgt.n	8011108 <_dtoa_r+0x898>
 8011098:	9b06      	ldr	r3, [sp, #24]
 801109a:	2b02      	cmp	r3, #2
 801109c:	dd34      	ble.n	8011108 <_dtoa_r+0x898>
 801109e:	46ca      	mov	sl, r9
 80110a0:	f1ba 0f00 	cmp.w	sl, #0
 80110a4:	d10d      	bne.n	80110c2 <_dtoa_r+0x852>
 80110a6:	4621      	mov	r1, r4
 80110a8:	4653      	mov	r3, sl
 80110aa:	2205      	movs	r2, #5
 80110ac:	4630      	mov	r0, r6
 80110ae:	f000 f9cd 	bl	801144c <__multadd>
 80110b2:	4601      	mov	r1, r0
 80110b4:	4604      	mov	r4, r0
 80110b6:	4628      	mov	r0, r5
 80110b8:	f000 fbe8 	bl	801188c <__mcmp>
 80110bc:	2800      	cmp	r0, #0
 80110be:	f73f adeb 	bgt.w	8010c98 <_dtoa_r+0x428>
 80110c2:	9b08      	ldr	r3, [sp, #32]
 80110c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80110c8:	ea6f 0b03 	mvn.w	fp, r3
 80110cc:	f04f 0900 	mov.w	r9, #0
 80110d0:	4621      	mov	r1, r4
 80110d2:	4630      	mov	r0, r6
 80110d4:	f000 f998 	bl	8011408 <_Bfree>
 80110d8:	2f00      	cmp	r7, #0
 80110da:	f43f aea8 	beq.w	8010e2e <_dtoa_r+0x5be>
 80110de:	f1b9 0f00 	cmp.w	r9, #0
 80110e2:	d005      	beq.n	80110f0 <_dtoa_r+0x880>
 80110e4:	45b9      	cmp	r9, r7
 80110e6:	d003      	beq.n	80110f0 <_dtoa_r+0x880>
 80110e8:	4649      	mov	r1, r9
 80110ea:	4630      	mov	r0, r6
 80110ec:	f000 f98c 	bl	8011408 <_Bfree>
 80110f0:	4639      	mov	r1, r7
 80110f2:	4630      	mov	r0, r6
 80110f4:	f000 f988 	bl	8011408 <_Bfree>
 80110f8:	e699      	b.n	8010e2e <_dtoa_r+0x5be>
 80110fa:	2400      	movs	r4, #0
 80110fc:	4627      	mov	r7, r4
 80110fe:	e7e0      	b.n	80110c2 <_dtoa_r+0x852>
 8011100:	46bb      	mov	fp, r7
 8011102:	4604      	mov	r4, r0
 8011104:	4607      	mov	r7, r0
 8011106:	e5c7      	b.n	8010c98 <_dtoa_r+0x428>
 8011108:	9b07      	ldr	r3, [sp, #28]
 801110a:	46ca      	mov	sl, r9
 801110c:	2b00      	cmp	r3, #0
 801110e:	f000 8100 	beq.w	8011312 <_dtoa_r+0xaa2>
 8011112:	f1b8 0f00 	cmp.w	r8, #0
 8011116:	dd05      	ble.n	8011124 <_dtoa_r+0x8b4>
 8011118:	4639      	mov	r1, r7
 801111a:	4642      	mov	r2, r8
 801111c:	4630      	mov	r0, r6
 801111e:	f000 fb45 	bl	80117ac <__lshift>
 8011122:	4607      	mov	r7, r0
 8011124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011126:	2b00      	cmp	r3, #0
 8011128:	d05d      	beq.n	80111e6 <_dtoa_r+0x976>
 801112a:	6879      	ldr	r1, [r7, #4]
 801112c:	4630      	mov	r0, r6
 801112e:	f000 f92b 	bl	8011388 <_Balloc>
 8011132:	4680      	mov	r8, r0
 8011134:	b928      	cbnz	r0, 8011142 <_dtoa_r+0x8d2>
 8011136:	4b82      	ldr	r3, [pc, #520]	; (8011340 <_dtoa_r+0xad0>)
 8011138:	4602      	mov	r2, r0
 801113a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801113e:	f7ff bbaf 	b.w	80108a0 <_dtoa_r+0x30>
 8011142:	693a      	ldr	r2, [r7, #16]
 8011144:	3202      	adds	r2, #2
 8011146:	0092      	lsls	r2, r2, #2
 8011148:	f107 010c 	add.w	r1, r7, #12
 801114c:	300c      	adds	r0, #12
 801114e:	f7fe fd2d 	bl	800fbac <memcpy>
 8011152:	2201      	movs	r2, #1
 8011154:	4641      	mov	r1, r8
 8011156:	4630      	mov	r0, r6
 8011158:	f000 fb28 	bl	80117ac <__lshift>
 801115c:	9b01      	ldr	r3, [sp, #4]
 801115e:	3301      	adds	r3, #1
 8011160:	9304      	str	r3, [sp, #16]
 8011162:	9b01      	ldr	r3, [sp, #4]
 8011164:	4453      	add	r3, sl
 8011166:	9308      	str	r3, [sp, #32]
 8011168:	9b02      	ldr	r3, [sp, #8]
 801116a:	f003 0301 	and.w	r3, r3, #1
 801116e:	46b9      	mov	r9, r7
 8011170:	9307      	str	r3, [sp, #28]
 8011172:	4607      	mov	r7, r0
 8011174:	9b04      	ldr	r3, [sp, #16]
 8011176:	4621      	mov	r1, r4
 8011178:	3b01      	subs	r3, #1
 801117a:	4628      	mov	r0, r5
 801117c:	9302      	str	r3, [sp, #8]
 801117e:	f7ff faeb 	bl	8010758 <quorem>
 8011182:	4603      	mov	r3, r0
 8011184:	3330      	adds	r3, #48	; 0x30
 8011186:	9005      	str	r0, [sp, #20]
 8011188:	4649      	mov	r1, r9
 801118a:	4628      	mov	r0, r5
 801118c:	9309      	str	r3, [sp, #36]	; 0x24
 801118e:	f000 fb7d 	bl	801188c <__mcmp>
 8011192:	463a      	mov	r2, r7
 8011194:	4682      	mov	sl, r0
 8011196:	4621      	mov	r1, r4
 8011198:	4630      	mov	r0, r6
 801119a:	f000 fb93 	bl	80118c4 <__mdiff>
 801119e:	68c2      	ldr	r2, [r0, #12]
 80111a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a2:	4680      	mov	r8, r0
 80111a4:	bb0a      	cbnz	r2, 80111ea <_dtoa_r+0x97a>
 80111a6:	4601      	mov	r1, r0
 80111a8:	4628      	mov	r0, r5
 80111aa:	f000 fb6f 	bl	801188c <__mcmp>
 80111ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111b0:	4602      	mov	r2, r0
 80111b2:	4641      	mov	r1, r8
 80111b4:	4630      	mov	r0, r6
 80111b6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80111ba:	f000 f925 	bl	8011408 <_Bfree>
 80111be:	9b06      	ldr	r3, [sp, #24]
 80111c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111c2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80111c6:	ea43 0102 	orr.w	r1, r3, r2
 80111ca:	9b07      	ldr	r3, [sp, #28]
 80111cc:	430b      	orrs	r3, r1
 80111ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d0:	d10d      	bne.n	80111ee <_dtoa_r+0x97e>
 80111d2:	2b39      	cmp	r3, #57	; 0x39
 80111d4:	d029      	beq.n	801122a <_dtoa_r+0x9ba>
 80111d6:	f1ba 0f00 	cmp.w	sl, #0
 80111da:	dd01      	ble.n	80111e0 <_dtoa_r+0x970>
 80111dc:	9b05      	ldr	r3, [sp, #20]
 80111de:	3331      	adds	r3, #49	; 0x31
 80111e0:	9a02      	ldr	r2, [sp, #8]
 80111e2:	7013      	strb	r3, [r2, #0]
 80111e4:	e774      	b.n	80110d0 <_dtoa_r+0x860>
 80111e6:	4638      	mov	r0, r7
 80111e8:	e7b8      	b.n	801115c <_dtoa_r+0x8ec>
 80111ea:	2201      	movs	r2, #1
 80111ec:	e7e1      	b.n	80111b2 <_dtoa_r+0x942>
 80111ee:	f1ba 0f00 	cmp.w	sl, #0
 80111f2:	db06      	blt.n	8011202 <_dtoa_r+0x992>
 80111f4:	9906      	ldr	r1, [sp, #24]
 80111f6:	ea41 0a0a 	orr.w	sl, r1, sl
 80111fa:	9907      	ldr	r1, [sp, #28]
 80111fc:	ea5a 0101 	orrs.w	r1, sl, r1
 8011200:	d120      	bne.n	8011244 <_dtoa_r+0x9d4>
 8011202:	2a00      	cmp	r2, #0
 8011204:	ddec      	ble.n	80111e0 <_dtoa_r+0x970>
 8011206:	4629      	mov	r1, r5
 8011208:	2201      	movs	r2, #1
 801120a:	4630      	mov	r0, r6
 801120c:	9304      	str	r3, [sp, #16]
 801120e:	f000 facd 	bl	80117ac <__lshift>
 8011212:	4621      	mov	r1, r4
 8011214:	4605      	mov	r5, r0
 8011216:	f000 fb39 	bl	801188c <__mcmp>
 801121a:	2800      	cmp	r0, #0
 801121c:	9b04      	ldr	r3, [sp, #16]
 801121e:	dc02      	bgt.n	8011226 <_dtoa_r+0x9b6>
 8011220:	d1de      	bne.n	80111e0 <_dtoa_r+0x970>
 8011222:	07da      	lsls	r2, r3, #31
 8011224:	d5dc      	bpl.n	80111e0 <_dtoa_r+0x970>
 8011226:	2b39      	cmp	r3, #57	; 0x39
 8011228:	d1d8      	bne.n	80111dc <_dtoa_r+0x96c>
 801122a:	9a02      	ldr	r2, [sp, #8]
 801122c:	2339      	movs	r3, #57	; 0x39
 801122e:	7013      	strb	r3, [r2, #0]
 8011230:	4643      	mov	r3, r8
 8011232:	4698      	mov	r8, r3
 8011234:	3b01      	subs	r3, #1
 8011236:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801123a:	2a39      	cmp	r2, #57	; 0x39
 801123c:	d051      	beq.n	80112e2 <_dtoa_r+0xa72>
 801123e:	3201      	adds	r2, #1
 8011240:	701a      	strb	r2, [r3, #0]
 8011242:	e745      	b.n	80110d0 <_dtoa_r+0x860>
 8011244:	2a00      	cmp	r2, #0
 8011246:	dd03      	ble.n	8011250 <_dtoa_r+0x9e0>
 8011248:	2b39      	cmp	r3, #57	; 0x39
 801124a:	d0ee      	beq.n	801122a <_dtoa_r+0x9ba>
 801124c:	3301      	adds	r3, #1
 801124e:	e7c7      	b.n	80111e0 <_dtoa_r+0x970>
 8011250:	9a04      	ldr	r2, [sp, #16]
 8011252:	9908      	ldr	r1, [sp, #32]
 8011254:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011258:	428a      	cmp	r2, r1
 801125a:	d02b      	beq.n	80112b4 <_dtoa_r+0xa44>
 801125c:	4629      	mov	r1, r5
 801125e:	2300      	movs	r3, #0
 8011260:	220a      	movs	r2, #10
 8011262:	4630      	mov	r0, r6
 8011264:	f000 f8f2 	bl	801144c <__multadd>
 8011268:	45b9      	cmp	r9, r7
 801126a:	4605      	mov	r5, r0
 801126c:	f04f 0300 	mov.w	r3, #0
 8011270:	f04f 020a 	mov.w	r2, #10
 8011274:	4649      	mov	r1, r9
 8011276:	4630      	mov	r0, r6
 8011278:	d107      	bne.n	801128a <_dtoa_r+0xa1a>
 801127a:	f000 f8e7 	bl	801144c <__multadd>
 801127e:	4681      	mov	r9, r0
 8011280:	4607      	mov	r7, r0
 8011282:	9b04      	ldr	r3, [sp, #16]
 8011284:	3301      	adds	r3, #1
 8011286:	9304      	str	r3, [sp, #16]
 8011288:	e774      	b.n	8011174 <_dtoa_r+0x904>
 801128a:	f000 f8df 	bl	801144c <__multadd>
 801128e:	4639      	mov	r1, r7
 8011290:	4681      	mov	r9, r0
 8011292:	2300      	movs	r3, #0
 8011294:	220a      	movs	r2, #10
 8011296:	4630      	mov	r0, r6
 8011298:	f000 f8d8 	bl	801144c <__multadd>
 801129c:	4607      	mov	r7, r0
 801129e:	e7f0      	b.n	8011282 <_dtoa_r+0xa12>
 80112a0:	f1ba 0f00 	cmp.w	sl, #0
 80112a4:	9a01      	ldr	r2, [sp, #4]
 80112a6:	bfcc      	ite	gt
 80112a8:	46d0      	movgt	r8, sl
 80112aa:	f04f 0801 	movle.w	r8, #1
 80112ae:	4490      	add	r8, r2
 80112b0:	f04f 0900 	mov.w	r9, #0
 80112b4:	4629      	mov	r1, r5
 80112b6:	2201      	movs	r2, #1
 80112b8:	4630      	mov	r0, r6
 80112ba:	9302      	str	r3, [sp, #8]
 80112bc:	f000 fa76 	bl	80117ac <__lshift>
 80112c0:	4621      	mov	r1, r4
 80112c2:	4605      	mov	r5, r0
 80112c4:	f000 fae2 	bl	801188c <__mcmp>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	dcb1      	bgt.n	8011230 <_dtoa_r+0x9c0>
 80112cc:	d102      	bne.n	80112d4 <_dtoa_r+0xa64>
 80112ce:	9b02      	ldr	r3, [sp, #8]
 80112d0:	07db      	lsls	r3, r3, #31
 80112d2:	d4ad      	bmi.n	8011230 <_dtoa_r+0x9c0>
 80112d4:	4643      	mov	r3, r8
 80112d6:	4698      	mov	r8, r3
 80112d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112dc:	2a30      	cmp	r2, #48	; 0x30
 80112de:	d0fa      	beq.n	80112d6 <_dtoa_r+0xa66>
 80112e0:	e6f6      	b.n	80110d0 <_dtoa_r+0x860>
 80112e2:	9a01      	ldr	r2, [sp, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d1a4      	bne.n	8011232 <_dtoa_r+0x9c2>
 80112e8:	f10b 0b01 	add.w	fp, fp, #1
 80112ec:	2331      	movs	r3, #49	; 0x31
 80112ee:	e778      	b.n	80111e2 <_dtoa_r+0x972>
 80112f0:	4b14      	ldr	r3, [pc, #80]	; (8011344 <_dtoa_r+0xad4>)
 80112f2:	f7ff bb27 	b.w	8010944 <_dtoa_r+0xd4>
 80112f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f47f ab03 	bne.w	8010904 <_dtoa_r+0x94>
 80112fe:	4b12      	ldr	r3, [pc, #72]	; (8011348 <_dtoa_r+0xad8>)
 8011300:	f7ff bb20 	b.w	8010944 <_dtoa_r+0xd4>
 8011304:	f1ba 0f00 	cmp.w	sl, #0
 8011308:	dc03      	bgt.n	8011312 <_dtoa_r+0xaa2>
 801130a:	9b06      	ldr	r3, [sp, #24]
 801130c:	2b02      	cmp	r3, #2
 801130e:	f73f aec7 	bgt.w	80110a0 <_dtoa_r+0x830>
 8011312:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011316:	4621      	mov	r1, r4
 8011318:	4628      	mov	r0, r5
 801131a:	f7ff fa1d 	bl	8010758 <quorem>
 801131e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011322:	f808 3b01 	strb.w	r3, [r8], #1
 8011326:	9a01      	ldr	r2, [sp, #4]
 8011328:	eba8 0202 	sub.w	r2, r8, r2
 801132c:	4592      	cmp	sl, r2
 801132e:	ddb7      	ble.n	80112a0 <_dtoa_r+0xa30>
 8011330:	4629      	mov	r1, r5
 8011332:	2300      	movs	r3, #0
 8011334:	220a      	movs	r2, #10
 8011336:	4630      	mov	r0, r6
 8011338:	f000 f888 	bl	801144c <__multadd>
 801133c:	4605      	mov	r5, r0
 801133e:	e7ea      	b.n	8011316 <_dtoa_r+0xaa6>
 8011340:	0801d273 	.word	0x0801d273
 8011344:	0801d0dc 	.word	0x0801d0dc
 8011348:	0801d20b 	.word	0x0801d20b

0801134c <fiprintf>:
 801134c:	b40e      	push	{r1, r2, r3}
 801134e:	b503      	push	{r0, r1, lr}
 8011350:	4601      	mov	r1, r0
 8011352:	ab03      	add	r3, sp, #12
 8011354:	4805      	ldr	r0, [pc, #20]	; (801136c <fiprintf+0x20>)
 8011356:	f853 2b04 	ldr.w	r2, [r3], #4
 801135a:	6800      	ldr	r0, [r0, #0]
 801135c:	9301      	str	r3, [sp, #4]
 801135e:	f000 fe13 	bl	8011f88 <_vfiprintf_r>
 8011362:	b002      	add	sp, #8
 8011364:	f85d eb04 	ldr.w	lr, [sp], #4
 8011368:	b003      	add	sp, #12
 801136a:	4770      	bx	lr
 801136c:	24000498 	.word	0x24000498

08011370 <_localeconv_r>:
 8011370:	4800      	ldr	r0, [pc, #0]	; (8011374 <_localeconv_r+0x4>)
 8011372:	4770      	bx	lr
 8011374:	240005ec 	.word	0x240005ec

08011378 <malloc>:
 8011378:	4b02      	ldr	r3, [pc, #8]	; (8011384 <malloc+0xc>)
 801137a:	4601      	mov	r1, r0
 801137c:	6818      	ldr	r0, [r3, #0]
 801137e:	f000 bc09 	b.w	8011b94 <_malloc_r>
 8011382:	bf00      	nop
 8011384:	24000498 	.word	0x24000498

08011388 <_Balloc>:
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801138c:	4604      	mov	r4, r0
 801138e:	460d      	mov	r5, r1
 8011390:	b976      	cbnz	r6, 80113b0 <_Balloc+0x28>
 8011392:	2010      	movs	r0, #16
 8011394:	f7ff fff0 	bl	8011378 <malloc>
 8011398:	4602      	mov	r2, r0
 801139a:	6260      	str	r0, [r4, #36]	; 0x24
 801139c:	b920      	cbnz	r0, 80113a8 <_Balloc+0x20>
 801139e:	4b18      	ldr	r3, [pc, #96]	; (8011400 <_Balloc+0x78>)
 80113a0:	4818      	ldr	r0, [pc, #96]	; (8011404 <_Balloc+0x7c>)
 80113a2:	2166      	movs	r1, #102	; 0x66
 80113a4:	f7ff f9ba 	bl	801071c <__assert_func>
 80113a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113ac:	6006      	str	r6, [r0, #0]
 80113ae:	60c6      	str	r6, [r0, #12]
 80113b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80113b2:	68f3      	ldr	r3, [r6, #12]
 80113b4:	b183      	cbz	r3, 80113d8 <_Balloc+0x50>
 80113b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113be:	b9b8      	cbnz	r0, 80113f0 <_Balloc+0x68>
 80113c0:	2101      	movs	r1, #1
 80113c2:	fa01 f605 	lsl.w	r6, r1, r5
 80113c6:	1d72      	adds	r2, r6, #5
 80113c8:	0092      	lsls	r2, r2, #2
 80113ca:	4620      	mov	r0, r4
 80113cc:	f000 fb60 	bl	8011a90 <_calloc_r>
 80113d0:	b160      	cbz	r0, 80113ec <_Balloc+0x64>
 80113d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113d6:	e00e      	b.n	80113f6 <_Balloc+0x6e>
 80113d8:	2221      	movs	r2, #33	; 0x21
 80113da:	2104      	movs	r1, #4
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fb57 	bl	8011a90 <_calloc_r>
 80113e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113e4:	60f0      	str	r0, [r6, #12]
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d1e4      	bne.n	80113b6 <_Balloc+0x2e>
 80113ec:	2000      	movs	r0, #0
 80113ee:	bd70      	pop	{r4, r5, r6, pc}
 80113f0:	6802      	ldr	r2, [r0, #0]
 80113f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113f6:	2300      	movs	r3, #0
 80113f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80113fc:	e7f7      	b.n	80113ee <_Balloc+0x66>
 80113fe:	bf00      	nop
 8011400:	0801d100 	.word	0x0801d100
 8011404:	0801d284 	.word	0x0801d284

08011408 <_Bfree>:
 8011408:	b570      	push	{r4, r5, r6, lr}
 801140a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801140c:	4605      	mov	r5, r0
 801140e:	460c      	mov	r4, r1
 8011410:	b976      	cbnz	r6, 8011430 <_Bfree+0x28>
 8011412:	2010      	movs	r0, #16
 8011414:	f7ff ffb0 	bl	8011378 <malloc>
 8011418:	4602      	mov	r2, r0
 801141a:	6268      	str	r0, [r5, #36]	; 0x24
 801141c:	b920      	cbnz	r0, 8011428 <_Bfree+0x20>
 801141e:	4b09      	ldr	r3, [pc, #36]	; (8011444 <_Bfree+0x3c>)
 8011420:	4809      	ldr	r0, [pc, #36]	; (8011448 <_Bfree+0x40>)
 8011422:	218a      	movs	r1, #138	; 0x8a
 8011424:	f7ff f97a 	bl	801071c <__assert_func>
 8011428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801142c:	6006      	str	r6, [r0, #0]
 801142e:	60c6      	str	r6, [r0, #12]
 8011430:	b13c      	cbz	r4, 8011442 <_Bfree+0x3a>
 8011432:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011434:	6862      	ldr	r2, [r4, #4]
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801143c:	6021      	str	r1, [r4, #0]
 801143e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011442:	bd70      	pop	{r4, r5, r6, pc}
 8011444:	0801d100 	.word	0x0801d100
 8011448:	0801d284 	.word	0x0801d284

0801144c <__multadd>:
 801144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011450:	690d      	ldr	r5, [r1, #16]
 8011452:	4607      	mov	r7, r0
 8011454:	460c      	mov	r4, r1
 8011456:	461e      	mov	r6, r3
 8011458:	f101 0c14 	add.w	ip, r1, #20
 801145c:	2000      	movs	r0, #0
 801145e:	f8dc 3000 	ldr.w	r3, [ip]
 8011462:	b299      	uxth	r1, r3
 8011464:	fb02 6101 	mla	r1, r2, r1, r6
 8011468:	0c1e      	lsrs	r6, r3, #16
 801146a:	0c0b      	lsrs	r3, r1, #16
 801146c:	fb02 3306 	mla	r3, r2, r6, r3
 8011470:	b289      	uxth	r1, r1
 8011472:	3001      	adds	r0, #1
 8011474:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011478:	4285      	cmp	r5, r0
 801147a:	f84c 1b04 	str.w	r1, [ip], #4
 801147e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011482:	dcec      	bgt.n	801145e <__multadd+0x12>
 8011484:	b30e      	cbz	r6, 80114ca <__multadd+0x7e>
 8011486:	68a3      	ldr	r3, [r4, #8]
 8011488:	42ab      	cmp	r3, r5
 801148a:	dc19      	bgt.n	80114c0 <__multadd+0x74>
 801148c:	6861      	ldr	r1, [r4, #4]
 801148e:	4638      	mov	r0, r7
 8011490:	3101      	adds	r1, #1
 8011492:	f7ff ff79 	bl	8011388 <_Balloc>
 8011496:	4680      	mov	r8, r0
 8011498:	b928      	cbnz	r0, 80114a6 <__multadd+0x5a>
 801149a:	4602      	mov	r2, r0
 801149c:	4b0c      	ldr	r3, [pc, #48]	; (80114d0 <__multadd+0x84>)
 801149e:	480d      	ldr	r0, [pc, #52]	; (80114d4 <__multadd+0x88>)
 80114a0:	21b5      	movs	r1, #181	; 0xb5
 80114a2:	f7ff f93b 	bl	801071c <__assert_func>
 80114a6:	6922      	ldr	r2, [r4, #16]
 80114a8:	3202      	adds	r2, #2
 80114aa:	f104 010c 	add.w	r1, r4, #12
 80114ae:	0092      	lsls	r2, r2, #2
 80114b0:	300c      	adds	r0, #12
 80114b2:	f7fe fb7b 	bl	800fbac <memcpy>
 80114b6:	4621      	mov	r1, r4
 80114b8:	4638      	mov	r0, r7
 80114ba:	f7ff ffa5 	bl	8011408 <_Bfree>
 80114be:	4644      	mov	r4, r8
 80114c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114c4:	3501      	adds	r5, #1
 80114c6:	615e      	str	r6, [r3, #20]
 80114c8:	6125      	str	r5, [r4, #16]
 80114ca:	4620      	mov	r0, r4
 80114cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d0:	0801d273 	.word	0x0801d273
 80114d4:	0801d284 	.word	0x0801d284

080114d8 <__hi0bits>:
 80114d8:	0c03      	lsrs	r3, r0, #16
 80114da:	041b      	lsls	r3, r3, #16
 80114dc:	b9d3      	cbnz	r3, 8011514 <__hi0bits+0x3c>
 80114de:	0400      	lsls	r0, r0, #16
 80114e0:	2310      	movs	r3, #16
 80114e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80114e6:	bf04      	itt	eq
 80114e8:	0200      	lsleq	r0, r0, #8
 80114ea:	3308      	addeq	r3, #8
 80114ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80114f0:	bf04      	itt	eq
 80114f2:	0100      	lsleq	r0, r0, #4
 80114f4:	3304      	addeq	r3, #4
 80114f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80114fa:	bf04      	itt	eq
 80114fc:	0080      	lsleq	r0, r0, #2
 80114fe:	3302      	addeq	r3, #2
 8011500:	2800      	cmp	r0, #0
 8011502:	db05      	blt.n	8011510 <__hi0bits+0x38>
 8011504:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011508:	f103 0301 	add.w	r3, r3, #1
 801150c:	bf08      	it	eq
 801150e:	2320      	moveq	r3, #32
 8011510:	4618      	mov	r0, r3
 8011512:	4770      	bx	lr
 8011514:	2300      	movs	r3, #0
 8011516:	e7e4      	b.n	80114e2 <__hi0bits+0xa>

08011518 <__lo0bits>:
 8011518:	6803      	ldr	r3, [r0, #0]
 801151a:	f013 0207 	ands.w	r2, r3, #7
 801151e:	4601      	mov	r1, r0
 8011520:	d00b      	beq.n	801153a <__lo0bits+0x22>
 8011522:	07da      	lsls	r2, r3, #31
 8011524:	d423      	bmi.n	801156e <__lo0bits+0x56>
 8011526:	0798      	lsls	r0, r3, #30
 8011528:	bf49      	itett	mi
 801152a:	085b      	lsrmi	r3, r3, #1
 801152c:	089b      	lsrpl	r3, r3, #2
 801152e:	2001      	movmi	r0, #1
 8011530:	600b      	strmi	r3, [r1, #0]
 8011532:	bf5c      	itt	pl
 8011534:	600b      	strpl	r3, [r1, #0]
 8011536:	2002      	movpl	r0, #2
 8011538:	4770      	bx	lr
 801153a:	b298      	uxth	r0, r3
 801153c:	b9a8      	cbnz	r0, 801156a <__lo0bits+0x52>
 801153e:	0c1b      	lsrs	r3, r3, #16
 8011540:	2010      	movs	r0, #16
 8011542:	b2da      	uxtb	r2, r3
 8011544:	b90a      	cbnz	r2, 801154a <__lo0bits+0x32>
 8011546:	3008      	adds	r0, #8
 8011548:	0a1b      	lsrs	r3, r3, #8
 801154a:	071a      	lsls	r2, r3, #28
 801154c:	bf04      	itt	eq
 801154e:	091b      	lsreq	r3, r3, #4
 8011550:	3004      	addeq	r0, #4
 8011552:	079a      	lsls	r2, r3, #30
 8011554:	bf04      	itt	eq
 8011556:	089b      	lsreq	r3, r3, #2
 8011558:	3002      	addeq	r0, #2
 801155a:	07da      	lsls	r2, r3, #31
 801155c:	d403      	bmi.n	8011566 <__lo0bits+0x4e>
 801155e:	085b      	lsrs	r3, r3, #1
 8011560:	f100 0001 	add.w	r0, r0, #1
 8011564:	d005      	beq.n	8011572 <__lo0bits+0x5a>
 8011566:	600b      	str	r3, [r1, #0]
 8011568:	4770      	bx	lr
 801156a:	4610      	mov	r0, r2
 801156c:	e7e9      	b.n	8011542 <__lo0bits+0x2a>
 801156e:	2000      	movs	r0, #0
 8011570:	4770      	bx	lr
 8011572:	2020      	movs	r0, #32
 8011574:	4770      	bx	lr
	...

08011578 <__i2b>:
 8011578:	b510      	push	{r4, lr}
 801157a:	460c      	mov	r4, r1
 801157c:	2101      	movs	r1, #1
 801157e:	f7ff ff03 	bl	8011388 <_Balloc>
 8011582:	4602      	mov	r2, r0
 8011584:	b928      	cbnz	r0, 8011592 <__i2b+0x1a>
 8011586:	4b05      	ldr	r3, [pc, #20]	; (801159c <__i2b+0x24>)
 8011588:	4805      	ldr	r0, [pc, #20]	; (80115a0 <__i2b+0x28>)
 801158a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801158e:	f7ff f8c5 	bl	801071c <__assert_func>
 8011592:	2301      	movs	r3, #1
 8011594:	6144      	str	r4, [r0, #20]
 8011596:	6103      	str	r3, [r0, #16]
 8011598:	bd10      	pop	{r4, pc}
 801159a:	bf00      	nop
 801159c:	0801d273 	.word	0x0801d273
 80115a0:	0801d284 	.word	0x0801d284

080115a4 <__multiply>:
 80115a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a8:	4691      	mov	r9, r2
 80115aa:	690a      	ldr	r2, [r1, #16]
 80115ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	bfb8      	it	lt
 80115b4:	460b      	movlt	r3, r1
 80115b6:	460c      	mov	r4, r1
 80115b8:	bfbc      	itt	lt
 80115ba:	464c      	movlt	r4, r9
 80115bc:	4699      	movlt	r9, r3
 80115be:	6927      	ldr	r7, [r4, #16]
 80115c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80115c4:	68a3      	ldr	r3, [r4, #8]
 80115c6:	6861      	ldr	r1, [r4, #4]
 80115c8:	eb07 060a 	add.w	r6, r7, sl
 80115cc:	42b3      	cmp	r3, r6
 80115ce:	b085      	sub	sp, #20
 80115d0:	bfb8      	it	lt
 80115d2:	3101      	addlt	r1, #1
 80115d4:	f7ff fed8 	bl	8011388 <_Balloc>
 80115d8:	b930      	cbnz	r0, 80115e8 <__multiply+0x44>
 80115da:	4602      	mov	r2, r0
 80115dc:	4b44      	ldr	r3, [pc, #272]	; (80116f0 <__multiply+0x14c>)
 80115de:	4845      	ldr	r0, [pc, #276]	; (80116f4 <__multiply+0x150>)
 80115e0:	f240 115d 	movw	r1, #349	; 0x15d
 80115e4:	f7ff f89a 	bl	801071c <__assert_func>
 80115e8:	f100 0514 	add.w	r5, r0, #20
 80115ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80115f0:	462b      	mov	r3, r5
 80115f2:	2200      	movs	r2, #0
 80115f4:	4543      	cmp	r3, r8
 80115f6:	d321      	bcc.n	801163c <__multiply+0x98>
 80115f8:	f104 0314 	add.w	r3, r4, #20
 80115fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011600:	f109 0314 	add.w	r3, r9, #20
 8011604:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011608:	9202      	str	r2, [sp, #8]
 801160a:	1b3a      	subs	r2, r7, r4
 801160c:	3a15      	subs	r2, #21
 801160e:	f022 0203 	bic.w	r2, r2, #3
 8011612:	3204      	adds	r2, #4
 8011614:	f104 0115 	add.w	r1, r4, #21
 8011618:	428f      	cmp	r7, r1
 801161a:	bf38      	it	cc
 801161c:	2204      	movcc	r2, #4
 801161e:	9201      	str	r2, [sp, #4]
 8011620:	9a02      	ldr	r2, [sp, #8]
 8011622:	9303      	str	r3, [sp, #12]
 8011624:	429a      	cmp	r2, r3
 8011626:	d80c      	bhi.n	8011642 <__multiply+0x9e>
 8011628:	2e00      	cmp	r6, #0
 801162a:	dd03      	ble.n	8011634 <__multiply+0x90>
 801162c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011630:	2b00      	cmp	r3, #0
 8011632:	d05a      	beq.n	80116ea <__multiply+0x146>
 8011634:	6106      	str	r6, [r0, #16]
 8011636:	b005      	add	sp, #20
 8011638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163c:	f843 2b04 	str.w	r2, [r3], #4
 8011640:	e7d8      	b.n	80115f4 <__multiply+0x50>
 8011642:	f8b3 a000 	ldrh.w	sl, [r3]
 8011646:	f1ba 0f00 	cmp.w	sl, #0
 801164a:	d024      	beq.n	8011696 <__multiply+0xf2>
 801164c:	f104 0e14 	add.w	lr, r4, #20
 8011650:	46a9      	mov	r9, r5
 8011652:	f04f 0c00 	mov.w	ip, #0
 8011656:	f85e 2b04 	ldr.w	r2, [lr], #4
 801165a:	f8d9 1000 	ldr.w	r1, [r9]
 801165e:	fa1f fb82 	uxth.w	fp, r2
 8011662:	b289      	uxth	r1, r1
 8011664:	fb0a 110b 	mla	r1, sl, fp, r1
 8011668:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801166c:	f8d9 2000 	ldr.w	r2, [r9]
 8011670:	4461      	add	r1, ip
 8011672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011676:	fb0a c20b 	mla	r2, sl, fp, ip
 801167a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801167e:	b289      	uxth	r1, r1
 8011680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011684:	4577      	cmp	r7, lr
 8011686:	f849 1b04 	str.w	r1, [r9], #4
 801168a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801168e:	d8e2      	bhi.n	8011656 <__multiply+0xb2>
 8011690:	9a01      	ldr	r2, [sp, #4]
 8011692:	f845 c002 	str.w	ip, [r5, r2]
 8011696:	9a03      	ldr	r2, [sp, #12]
 8011698:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801169c:	3304      	adds	r3, #4
 801169e:	f1b9 0f00 	cmp.w	r9, #0
 80116a2:	d020      	beq.n	80116e6 <__multiply+0x142>
 80116a4:	6829      	ldr	r1, [r5, #0]
 80116a6:	f104 0c14 	add.w	ip, r4, #20
 80116aa:	46ae      	mov	lr, r5
 80116ac:	f04f 0a00 	mov.w	sl, #0
 80116b0:	f8bc b000 	ldrh.w	fp, [ip]
 80116b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80116b8:	fb09 220b 	mla	r2, r9, fp, r2
 80116bc:	4492      	add	sl, r2
 80116be:	b289      	uxth	r1, r1
 80116c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80116c4:	f84e 1b04 	str.w	r1, [lr], #4
 80116c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80116cc:	f8be 1000 	ldrh.w	r1, [lr]
 80116d0:	0c12      	lsrs	r2, r2, #16
 80116d2:	fb09 1102 	mla	r1, r9, r2, r1
 80116d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80116da:	4567      	cmp	r7, ip
 80116dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80116e0:	d8e6      	bhi.n	80116b0 <__multiply+0x10c>
 80116e2:	9a01      	ldr	r2, [sp, #4]
 80116e4:	50a9      	str	r1, [r5, r2]
 80116e6:	3504      	adds	r5, #4
 80116e8:	e79a      	b.n	8011620 <__multiply+0x7c>
 80116ea:	3e01      	subs	r6, #1
 80116ec:	e79c      	b.n	8011628 <__multiply+0x84>
 80116ee:	bf00      	nop
 80116f0:	0801d273 	.word	0x0801d273
 80116f4:	0801d284 	.word	0x0801d284

080116f8 <__pow5mult>:
 80116f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116fc:	4615      	mov	r5, r2
 80116fe:	f012 0203 	ands.w	r2, r2, #3
 8011702:	4606      	mov	r6, r0
 8011704:	460f      	mov	r7, r1
 8011706:	d007      	beq.n	8011718 <__pow5mult+0x20>
 8011708:	4c25      	ldr	r4, [pc, #148]	; (80117a0 <__pow5mult+0xa8>)
 801170a:	3a01      	subs	r2, #1
 801170c:	2300      	movs	r3, #0
 801170e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011712:	f7ff fe9b 	bl	801144c <__multadd>
 8011716:	4607      	mov	r7, r0
 8011718:	10ad      	asrs	r5, r5, #2
 801171a:	d03d      	beq.n	8011798 <__pow5mult+0xa0>
 801171c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801171e:	b97c      	cbnz	r4, 8011740 <__pow5mult+0x48>
 8011720:	2010      	movs	r0, #16
 8011722:	f7ff fe29 	bl	8011378 <malloc>
 8011726:	4602      	mov	r2, r0
 8011728:	6270      	str	r0, [r6, #36]	; 0x24
 801172a:	b928      	cbnz	r0, 8011738 <__pow5mult+0x40>
 801172c:	4b1d      	ldr	r3, [pc, #116]	; (80117a4 <__pow5mult+0xac>)
 801172e:	481e      	ldr	r0, [pc, #120]	; (80117a8 <__pow5mult+0xb0>)
 8011730:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011734:	f7fe fff2 	bl	801071c <__assert_func>
 8011738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801173c:	6004      	str	r4, [r0, #0]
 801173e:	60c4      	str	r4, [r0, #12]
 8011740:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011748:	b94c      	cbnz	r4, 801175e <__pow5mult+0x66>
 801174a:	f240 2171 	movw	r1, #625	; 0x271
 801174e:	4630      	mov	r0, r6
 8011750:	f7ff ff12 	bl	8011578 <__i2b>
 8011754:	2300      	movs	r3, #0
 8011756:	f8c8 0008 	str.w	r0, [r8, #8]
 801175a:	4604      	mov	r4, r0
 801175c:	6003      	str	r3, [r0, #0]
 801175e:	f04f 0900 	mov.w	r9, #0
 8011762:	07eb      	lsls	r3, r5, #31
 8011764:	d50a      	bpl.n	801177c <__pow5mult+0x84>
 8011766:	4639      	mov	r1, r7
 8011768:	4622      	mov	r2, r4
 801176a:	4630      	mov	r0, r6
 801176c:	f7ff ff1a 	bl	80115a4 <__multiply>
 8011770:	4639      	mov	r1, r7
 8011772:	4680      	mov	r8, r0
 8011774:	4630      	mov	r0, r6
 8011776:	f7ff fe47 	bl	8011408 <_Bfree>
 801177a:	4647      	mov	r7, r8
 801177c:	106d      	asrs	r5, r5, #1
 801177e:	d00b      	beq.n	8011798 <__pow5mult+0xa0>
 8011780:	6820      	ldr	r0, [r4, #0]
 8011782:	b938      	cbnz	r0, 8011794 <__pow5mult+0x9c>
 8011784:	4622      	mov	r2, r4
 8011786:	4621      	mov	r1, r4
 8011788:	4630      	mov	r0, r6
 801178a:	f7ff ff0b 	bl	80115a4 <__multiply>
 801178e:	6020      	str	r0, [r4, #0]
 8011790:	f8c0 9000 	str.w	r9, [r0]
 8011794:	4604      	mov	r4, r0
 8011796:	e7e4      	b.n	8011762 <__pow5mult+0x6a>
 8011798:	4638      	mov	r0, r7
 801179a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801179e:	bf00      	nop
 80117a0:	0801d3d0 	.word	0x0801d3d0
 80117a4:	0801d100 	.word	0x0801d100
 80117a8:	0801d284 	.word	0x0801d284

080117ac <__lshift>:
 80117ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117b0:	460c      	mov	r4, r1
 80117b2:	6849      	ldr	r1, [r1, #4]
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117ba:	68a3      	ldr	r3, [r4, #8]
 80117bc:	4607      	mov	r7, r0
 80117be:	4691      	mov	r9, r2
 80117c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117c4:	f108 0601 	add.w	r6, r8, #1
 80117c8:	42b3      	cmp	r3, r6
 80117ca:	db0b      	blt.n	80117e4 <__lshift+0x38>
 80117cc:	4638      	mov	r0, r7
 80117ce:	f7ff fddb 	bl	8011388 <_Balloc>
 80117d2:	4605      	mov	r5, r0
 80117d4:	b948      	cbnz	r0, 80117ea <__lshift+0x3e>
 80117d6:	4602      	mov	r2, r0
 80117d8:	4b2a      	ldr	r3, [pc, #168]	; (8011884 <__lshift+0xd8>)
 80117da:	482b      	ldr	r0, [pc, #172]	; (8011888 <__lshift+0xdc>)
 80117dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80117e0:	f7fe ff9c 	bl	801071c <__assert_func>
 80117e4:	3101      	adds	r1, #1
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	e7ee      	b.n	80117c8 <__lshift+0x1c>
 80117ea:	2300      	movs	r3, #0
 80117ec:	f100 0114 	add.w	r1, r0, #20
 80117f0:	f100 0210 	add.w	r2, r0, #16
 80117f4:	4618      	mov	r0, r3
 80117f6:	4553      	cmp	r3, sl
 80117f8:	db37      	blt.n	801186a <__lshift+0xbe>
 80117fa:	6920      	ldr	r0, [r4, #16]
 80117fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011800:	f104 0314 	add.w	r3, r4, #20
 8011804:	f019 091f 	ands.w	r9, r9, #31
 8011808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801180c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011810:	d02f      	beq.n	8011872 <__lshift+0xc6>
 8011812:	f1c9 0e20 	rsb	lr, r9, #32
 8011816:	468a      	mov	sl, r1
 8011818:	f04f 0c00 	mov.w	ip, #0
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	fa02 f209 	lsl.w	r2, r2, r9
 8011822:	ea42 020c 	orr.w	r2, r2, ip
 8011826:	f84a 2b04 	str.w	r2, [sl], #4
 801182a:	f853 2b04 	ldr.w	r2, [r3], #4
 801182e:	4298      	cmp	r0, r3
 8011830:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011834:	d8f2      	bhi.n	801181c <__lshift+0x70>
 8011836:	1b03      	subs	r3, r0, r4
 8011838:	3b15      	subs	r3, #21
 801183a:	f023 0303 	bic.w	r3, r3, #3
 801183e:	3304      	adds	r3, #4
 8011840:	f104 0215 	add.w	r2, r4, #21
 8011844:	4290      	cmp	r0, r2
 8011846:	bf38      	it	cc
 8011848:	2304      	movcc	r3, #4
 801184a:	f841 c003 	str.w	ip, [r1, r3]
 801184e:	f1bc 0f00 	cmp.w	ip, #0
 8011852:	d001      	beq.n	8011858 <__lshift+0xac>
 8011854:	f108 0602 	add.w	r6, r8, #2
 8011858:	3e01      	subs	r6, #1
 801185a:	4638      	mov	r0, r7
 801185c:	612e      	str	r6, [r5, #16]
 801185e:	4621      	mov	r1, r4
 8011860:	f7ff fdd2 	bl	8011408 <_Bfree>
 8011864:	4628      	mov	r0, r5
 8011866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801186a:	f842 0f04 	str.w	r0, [r2, #4]!
 801186e:	3301      	adds	r3, #1
 8011870:	e7c1      	b.n	80117f6 <__lshift+0x4a>
 8011872:	3904      	subs	r1, #4
 8011874:	f853 2b04 	ldr.w	r2, [r3], #4
 8011878:	f841 2f04 	str.w	r2, [r1, #4]!
 801187c:	4298      	cmp	r0, r3
 801187e:	d8f9      	bhi.n	8011874 <__lshift+0xc8>
 8011880:	e7ea      	b.n	8011858 <__lshift+0xac>
 8011882:	bf00      	nop
 8011884:	0801d273 	.word	0x0801d273
 8011888:	0801d284 	.word	0x0801d284

0801188c <__mcmp>:
 801188c:	b530      	push	{r4, r5, lr}
 801188e:	6902      	ldr	r2, [r0, #16]
 8011890:	690c      	ldr	r4, [r1, #16]
 8011892:	1b12      	subs	r2, r2, r4
 8011894:	d10e      	bne.n	80118b4 <__mcmp+0x28>
 8011896:	f100 0314 	add.w	r3, r0, #20
 801189a:	3114      	adds	r1, #20
 801189c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80118a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80118a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80118a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80118ac:	42a5      	cmp	r5, r4
 80118ae:	d003      	beq.n	80118b8 <__mcmp+0x2c>
 80118b0:	d305      	bcc.n	80118be <__mcmp+0x32>
 80118b2:	2201      	movs	r2, #1
 80118b4:	4610      	mov	r0, r2
 80118b6:	bd30      	pop	{r4, r5, pc}
 80118b8:	4283      	cmp	r3, r0
 80118ba:	d3f3      	bcc.n	80118a4 <__mcmp+0x18>
 80118bc:	e7fa      	b.n	80118b4 <__mcmp+0x28>
 80118be:	f04f 32ff 	mov.w	r2, #4294967295
 80118c2:	e7f7      	b.n	80118b4 <__mcmp+0x28>

080118c4 <__mdiff>:
 80118c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c8:	460c      	mov	r4, r1
 80118ca:	4606      	mov	r6, r0
 80118cc:	4611      	mov	r1, r2
 80118ce:	4620      	mov	r0, r4
 80118d0:	4690      	mov	r8, r2
 80118d2:	f7ff ffdb 	bl	801188c <__mcmp>
 80118d6:	1e05      	subs	r5, r0, #0
 80118d8:	d110      	bne.n	80118fc <__mdiff+0x38>
 80118da:	4629      	mov	r1, r5
 80118dc:	4630      	mov	r0, r6
 80118de:	f7ff fd53 	bl	8011388 <_Balloc>
 80118e2:	b930      	cbnz	r0, 80118f2 <__mdiff+0x2e>
 80118e4:	4b3a      	ldr	r3, [pc, #232]	; (80119d0 <__mdiff+0x10c>)
 80118e6:	4602      	mov	r2, r0
 80118e8:	f240 2132 	movw	r1, #562	; 0x232
 80118ec:	4839      	ldr	r0, [pc, #228]	; (80119d4 <__mdiff+0x110>)
 80118ee:	f7fe ff15 	bl	801071c <__assert_func>
 80118f2:	2301      	movs	r3, #1
 80118f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118fc:	bfa4      	itt	ge
 80118fe:	4643      	movge	r3, r8
 8011900:	46a0      	movge	r8, r4
 8011902:	4630      	mov	r0, r6
 8011904:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011908:	bfa6      	itte	ge
 801190a:	461c      	movge	r4, r3
 801190c:	2500      	movge	r5, #0
 801190e:	2501      	movlt	r5, #1
 8011910:	f7ff fd3a 	bl	8011388 <_Balloc>
 8011914:	b920      	cbnz	r0, 8011920 <__mdiff+0x5c>
 8011916:	4b2e      	ldr	r3, [pc, #184]	; (80119d0 <__mdiff+0x10c>)
 8011918:	4602      	mov	r2, r0
 801191a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801191e:	e7e5      	b.n	80118ec <__mdiff+0x28>
 8011920:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011924:	6926      	ldr	r6, [r4, #16]
 8011926:	60c5      	str	r5, [r0, #12]
 8011928:	f104 0914 	add.w	r9, r4, #20
 801192c:	f108 0514 	add.w	r5, r8, #20
 8011930:	f100 0e14 	add.w	lr, r0, #20
 8011934:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011938:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801193c:	f108 0210 	add.w	r2, r8, #16
 8011940:	46f2      	mov	sl, lr
 8011942:	2100      	movs	r1, #0
 8011944:	f859 3b04 	ldr.w	r3, [r9], #4
 8011948:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801194c:	fa1f f883 	uxth.w	r8, r3
 8011950:	fa11 f18b 	uxtah	r1, r1, fp
 8011954:	0c1b      	lsrs	r3, r3, #16
 8011956:	eba1 0808 	sub.w	r8, r1, r8
 801195a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801195e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011962:	fa1f f888 	uxth.w	r8, r8
 8011966:	1419      	asrs	r1, r3, #16
 8011968:	454e      	cmp	r6, r9
 801196a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801196e:	f84a 3b04 	str.w	r3, [sl], #4
 8011972:	d8e7      	bhi.n	8011944 <__mdiff+0x80>
 8011974:	1b33      	subs	r3, r6, r4
 8011976:	3b15      	subs	r3, #21
 8011978:	f023 0303 	bic.w	r3, r3, #3
 801197c:	3304      	adds	r3, #4
 801197e:	3415      	adds	r4, #21
 8011980:	42a6      	cmp	r6, r4
 8011982:	bf38      	it	cc
 8011984:	2304      	movcc	r3, #4
 8011986:	441d      	add	r5, r3
 8011988:	4473      	add	r3, lr
 801198a:	469e      	mov	lr, r3
 801198c:	462e      	mov	r6, r5
 801198e:	4566      	cmp	r6, ip
 8011990:	d30e      	bcc.n	80119b0 <__mdiff+0xec>
 8011992:	f10c 0203 	add.w	r2, ip, #3
 8011996:	1b52      	subs	r2, r2, r5
 8011998:	f022 0203 	bic.w	r2, r2, #3
 801199c:	3d03      	subs	r5, #3
 801199e:	45ac      	cmp	ip, r5
 80119a0:	bf38      	it	cc
 80119a2:	2200      	movcc	r2, #0
 80119a4:	441a      	add	r2, r3
 80119a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80119aa:	b17b      	cbz	r3, 80119cc <__mdiff+0x108>
 80119ac:	6107      	str	r7, [r0, #16]
 80119ae:	e7a3      	b.n	80118f8 <__mdiff+0x34>
 80119b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80119b4:	fa11 f288 	uxtah	r2, r1, r8
 80119b8:	1414      	asrs	r4, r2, #16
 80119ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80119be:	b292      	uxth	r2, r2
 80119c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80119c4:	f84e 2b04 	str.w	r2, [lr], #4
 80119c8:	1421      	asrs	r1, r4, #16
 80119ca:	e7e0      	b.n	801198e <__mdiff+0xca>
 80119cc:	3f01      	subs	r7, #1
 80119ce:	e7ea      	b.n	80119a6 <__mdiff+0xe2>
 80119d0:	0801d273 	.word	0x0801d273
 80119d4:	0801d284 	.word	0x0801d284

080119d8 <__d2b>:
 80119d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80119dc:	4689      	mov	r9, r1
 80119de:	2101      	movs	r1, #1
 80119e0:	ec57 6b10 	vmov	r6, r7, d0
 80119e4:	4690      	mov	r8, r2
 80119e6:	f7ff fccf 	bl	8011388 <_Balloc>
 80119ea:	4604      	mov	r4, r0
 80119ec:	b930      	cbnz	r0, 80119fc <__d2b+0x24>
 80119ee:	4602      	mov	r2, r0
 80119f0:	4b25      	ldr	r3, [pc, #148]	; (8011a88 <__d2b+0xb0>)
 80119f2:	4826      	ldr	r0, [pc, #152]	; (8011a8c <__d2b+0xb4>)
 80119f4:	f240 310a 	movw	r1, #778	; 0x30a
 80119f8:	f7fe fe90 	bl	801071c <__assert_func>
 80119fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a04:	bb35      	cbnz	r5, 8011a54 <__d2b+0x7c>
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	9301      	str	r3, [sp, #4]
 8011a0a:	d028      	beq.n	8011a5e <__d2b+0x86>
 8011a0c:	4668      	mov	r0, sp
 8011a0e:	9600      	str	r6, [sp, #0]
 8011a10:	f7ff fd82 	bl	8011518 <__lo0bits>
 8011a14:	9900      	ldr	r1, [sp, #0]
 8011a16:	b300      	cbz	r0, 8011a5a <__d2b+0x82>
 8011a18:	9a01      	ldr	r2, [sp, #4]
 8011a1a:	f1c0 0320 	rsb	r3, r0, #32
 8011a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a22:	430b      	orrs	r3, r1
 8011a24:	40c2      	lsrs	r2, r0
 8011a26:	6163      	str	r3, [r4, #20]
 8011a28:	9201      	str	r2, [sp, #4]
 8011a2a:	9b01      	ldr	r3, [sp, #4]
 8011a2c:	61a3      	str	r3, [r4, #24]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	bf14      	ite	ne
 8011a32:	2202      	movne	r2, #2
 8011a34:	2201      	moveq	r2, #1
 8011a36:	6122      	str	r2, [r4, #16]
 8011a38:	b1d5      	cbz	r5, 8011a70 <__d2b+0x98>
 8011a3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011a3e:	4405      	add	r5, r0
 8011a40:	f8c9 5000 	str.w	r5, [r9]
 8011a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011a48:	f8c8 0000 	str.w	r0, [r8]
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	b003      	add	sp, #12
 8011a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a58:	e7d5      	b.n	8011a06 <__d2b+0x2e>
 8011a5a:	6161      	str	r1, [r4, #20]
 8011a5c:	e7e5      	b.n	8011a2a <__d2b+0x52>
 8011a5e:	a801      	add	r0, sp, #4
 8011a60:	f7ff fd5a 	bl	8011518 <__lo0bits>
 8011a64:	9b01      	ldr	r3, [sp, #4]
 8011a66:	6163      	str	r3, [r4, #20]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	6122      	str	r2, [r4, #16]
 8011a6c:	3020      	adds	r0, #32
 8011a6e:	e7e3      	b.n	8011a38 <__d2b+0x60>
 8011a70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011a78:	f8c9 0000 	str.w	r0, [r9]
 8011a7c:	6918      	ldr	r0, [r3, #16]
 8011a7e:	f7ff fd2b 	bl	80114d8 <__hi0bits>
 8011a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011a86:	e7df      	b.n	8011a48 <__d2b+0x70>
 8011a88:	0801d273 	.word	0x0801d273
 8011a8c:	0801d284 	.word	0x0801d284

08011a90 <_calloc_r>:
 8011a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a92:	fba1 2402 	umull	r2, r4, r1, r2
 8011a96:	b94c      	cbnz	r4, 8011aac <_calloc_r+0x1c>
 8011a98:	4611      	mov	r1, r2
 8011a9a:	9201      	str	r2, [sp, #4]
 8011a9c:	f000 f87a 	bl	8011b94 <_malloc_r>
 8011aa0:	9a01      	ldr	r2, [sp, #4]
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	b930      	cbnz	r0, 8011ab4 <_calloc_r+0x24>
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	b003      	add	sp, #12
 8011aaa:	bd30      	pop	{r4, r5, pc}
 8011aac:	220c      	movs	r2, #12
 8011aae:	6002      	str	r2, [r0, #0]
 8011ab0:	2500      	movs	r5, #0
 8011ab2:	e7f8      	b.n	8011aa6 <_calloc_r+0x16>
 8011ab4:	4621      	mov	r1, r4
 8011ab6:	f7fe f887 	bl	800fbc8 <memset>
 8011aba:	e7f4      	b.n	8011aa6 <_calloc_r+0x16>

08011abc <_free_r>:
 8011abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011abe:	2900      	cmp	r1, #0
 8011ac0:	d044      	beq.n	8011b4c <_free_r+0x90>
 8011ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ac6:	9001      	str	r0, [sp, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f1a1 0404 	sub.w	r4, r1, #4
 8011ace:	bfb8      	it	lt
 8011ad0:	18e4      	addlt	r4, r4, r3
 8011ad2:	f000 fead 	bl	8012830 <__malloc_lock>
 8011ad6:	4a1e      	ldr	r2, [pc, #120]	; (8011b50 <_free_r+0x94>)
 8011ad8:	9801      	ldr	r0, [sp, #4]
 8011ada:	6813      	ldr	r3, [r2, #0]
 8011adc:	b933      	cbnz	r3, 8011aec <_free_r+0x30>
 8011ade:	6063      	str	r3, [r4, #4]
 8011ae0:	6014      	str	r4, [r2, #0]
 8011ae2:	b003      	add	sp, #12
 8011ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ae8:	f000 bea8 	b.w	801283c <__malloc_unlock>
 8011aec:	42a3      	cmp	r3, r4
 8011aee:	d908      	bls.n	8011b02 <_free_r+0x46>
 8011af0:	6825      	ldr	r5, [r4, #0]
 8011af2:	1961      	adds	r1, r4, r5
 8011af4:	428b      	cmp	r3, r1
 8011af6:	bf01      	itttt	eq
 8011af8:	6819      	ldreq	r1, [r3, #0]
 8011afa:	685b      	ldreq	r3, [r3, #4]
 8011afc:	1949      	addeq	r1, r1, r5
 8011afe:	6021      	streq	r1, [r4, #0]
 8011b00:	e7ed      	b.n	8011ade <_free_r+0x22>
 8011b02:	461a      	mov	r2, r3
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	b10b      	cbz	r3, 8011b0c <_free_r+0x50>
 8011b08:	42a3      	cmp	r3, r4
 8011b0a:	d9fa      	bls.n	8011b02 <_free_r+0x46>
 8011b0c:	6811      	ldr	r1, [r2, #0]
 8011b0e:	1855      	adds	r5, r2, r1
 8011b10:	42a5      	cmp	r5, r4
 8011b12:	d10b      	bne.n	8011b2c <_free_r+0x70>
 8011b14:	6824      	ldr	r4, [r4, #0]
 8011b16:	4421      	add	r1, r4
 8011b18:	1854      	adds	r4, r2, r1
 8011b1a:	42a3      	cmp	r3, r4
 8011b1c:	6011      	str	r1, [r2, #0]
 8011b1e:	d1e0      	bne.n	8011ae2 <_free_r+0x26>
 8011b20:	681c      	ldr	r4, [r3, #0]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	6053      	str	r3, [r2, #4]
 8011b26:	4421      	add	r1, r4
 8011b28:	6011      	str	r1, [r2, #0]
 8011b2a:	e7da      	b.n	8011ae2 <_free_r+0x26>
 8011b2c:	d902      	bls.n	8011b34 <_free_r+0x78>
 8011b2e:	230c      	movs	r3, #12
 8011b30:	6003      	str	r3, [r0, #0]
 8011b32:	e7d6      	b.n	8011ae2 <_free_r+0x26>
 8011b34:	6825      	ldr	r5, [r4, #0]
 8011b36:	1961      	adds	r1, r4, r5
 8011b38:	428b      	cmp	r3, r1
 8011b3a:	bf04      	itt	eq
 8011b3c:	6819      	ldreq	r1, [r3, #0]
 8011b3e:	685b      	ldreq	r3, [r3, #4]
 8011b40:	6063      	str	r3, [r4, #4]
 8011b42:	bf04      	itt	eq
 8011b44:	1949      	addeq	r1, r1, r5
 8011b46:	6021      	streq	r1, [r4, #0]
 8011b48:	6054      	str	r4, [r2, #4]
 8011b4a:	e7ca      	b.n	8011ae2 <_free_r+0x26>
 8011b4c:	b003      	add	sp, #12
 8011b4e:	bd30      	pop	{r4, r5, pc}
 8011b50:	2400e4d8 	.word	0x2400e4d8

08011b54 <sbrk_aligned>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	4e0e      	ldr	r6, [pc, #56]	; (8011b90 <sbrk_aligned+0x3c>)
 8011b58:	460c      	mov	r4, r1
 8011b5a:	6831      	ldr	r1, [r6, #0]
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	b911      	cbnz	r1, 8011b66 <sbrk_aligned+0x12>
 8011b60:	f000 fb42 	bl	80121e8 <_sbrk_r>
 8011b64:	6030      	str	r0, [r6, #0]
 8011b66:	4621      	mov	r1, r4
 8011b68:	4628      	mov	r0, r5
 8011b6a:	f000 fb3d 	bl	80121e8 <_sbrk_r>
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	d00a      	beq.n	8011b88 <sbrk_aligned+0x34>
 8011b72:	1cc4      	adds	r4, r0, #3
 8011b74:	f024 0403 	bic.w	r4, r4, #3
 8011b78:	42a0      	cmp	r0, r4
 8011b7a:	d007      	beq.n	8011b8c <sbrk_aligned+0x38>
 8011b7c:	1a21      	subs	r1, r4, r0
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f000 fb32 	bl	80121e8 <_sbrk_r>
 8011b84:	3001      	adds	r0, #1
 8011b86:	d101      	bne.n	8011b8c <sbrk_aligned+0x38>
 8011b88:	f04f 34ff 	mov.w	r4, #4294967295
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	bd70      	pop	{r4, r5, r6, pc}
 8011b90:	2400e4dc 	.word	0x2400e4dc

08011b94 <_malloc_r>:
 8011b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b98:	1ccd      	adds	r5, r1, #3
 8011b9a:	f025 0503 	bic.w	r5, r5, #3
 8011b9e:	3508      	adds	r5, #8
 8011ba0:	2d0c      	cmp	r5, #12
 8011ba2:	bf38      	it	cc
 8011ba4:	250c      	movcc	r5, #12
 8011ba6:	2d00      	cmp	r5, #0
 8011ba8:	4607      	mov	r7, r0
 8011baa:	db01      	blt.n	8011bb0 <_malloc_r+0x1c>
 8011bac:	42a9      	cmp	r1, r5
 8011bae:	d905      	bls.n	8011bbc <_malloc_r+0x28>
 8011bb0:	230c      	movs	r3, #12
 8011bb2:	603b      	str	r3, [r7, #0]
 8011bb4:	2600      	movs	r6, #0
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbc:	4e2e      	ldr	r6, [pc, #184]	; (8011c78 <_malloc_r+0xe4>)
 8011bbe:	f000 fe37 	bl	8012830 <__malloc_lock>
 8011bc2:	6833      	ldr	r3, [r6, #0]
 8011bc4:	461c      	mov	r4, r3
 8011bc6:	bb34      	cbnz	r4, 8011c16 <_malloc_r+0x82>
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4638      	mov	r0, r7
 8011bcc:	f7ff ffc2 	bl	8011b54 <sbrk_aligned>
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	d14d      	bne.n	8011c72 <_malloc_r+0xde>
 8011bd6:	6834      	ldr	r4, [r6, #0]
 8011bd8:	4626      	mov	r6, r4
 8011bda:	2e00      	cmp	r6, #0
 8011bdc:	d140      	bne.n	8011c60 <_malloc_r+0xcc>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	4631      	mov	r1, r6
 8011be2:	4638      	mov	r0, r7
 8011be4:	eb04 0803 	add.w	r8, r4, r3
 8011be8:	f000 fafe 	bl	80121e8 <_sbrk_r>
 8011bec:	4580      	cmp	r8, r0
 8011bee:	d13a      	bne.n	8011c66 <_malloc_r+0xd2>
 8011bf0:	6821      	ldr	r1, [r4, #0]
 8011bf2:	3503      	adds	r5, #3
 8011bf4:	1a6d      	subs	r5, r5, r1
 8011bf6:	f025 0503 	bic.w	r5, r5, #3
 8011bfa:	3508      	adds	r5, #8
 8011bfc:	2d0c      	cmp	r5, #12
 8011bfe:	bf38      	it	cc
 8011c00:	250c      	movcc	r5, #12
 8011c02:	4629      	mov	r1, r5
 8011c04:	4638      	mov	r0, r7
 8011c06:	f7ff ffa5 	bl	8011b54 <sbrk_aligned>
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	d02b      	beq.n	8011c66 <_malloc_r+0xd2>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	442b      	add	r3, r5
 8011c12:	6023      	str	r3, [r4, #0]
 8011c14:	e00e      	b.n	8011c34 <_malloc_r+0xa0>
 8011c16:	6822      	ldr	r2, [r4, #0]
 8011c18:	1b52      	subs	r2, r2, r5
 8011c1a:	d41e      	bmi.n	8011c5a <_malloc_r+0xc6>
 8011c1c:	2a0b      	cmp	r2, #11
 8011c1e:	d916      	bls.n	8011c4e <_malloc_r+0xba>
 8011c20:	1961      	adds	r1, r4, r5
 8011c22:	42a3      	cmp	r3, r4
 8011c24:	6025      	str	r5, [r4, #0]
 8011c26:	bf18      	it	ne
 8011c28:	6059      	strne	r1, [r3, #4]
 8011c2a:	6863      	ldr	r3, [r4, #4]
 8011c2c:	bf08      	it	eq
 8011c2e:	6031      	streq	r1, [r6, #0]
 8011c30:	5162      	str	r2, [r4, r5]
 8011c32:	604b      	str	r3, [r1, #4]
 8011c34:	4638      	mov	r0, r7
 8011c36:	f104 060b 	add.w	r6, r4, #11
 8011c3a:	f000 fdff 	bl	801283c <__malloc_unlock>
 8011c3e:	f026 0607 	bic.w	r6, r6, #7
 8011c42:	1d23      	adds	r3, r4, #4
 8011c44:	1af2      	subs	r2, r6, r3
 8011c46:	d0b6      	beq.n	8011bb6 <_malloc_r+0x22>
 8011c48:	1b9b      	subs	r3, r3, r6
 8011c4a:	50a3      	str	r3, [r4, r2]
 8011c4c:	e7b3      	b.n	8011bb6 <_malloc_r+0x22>
 8011c4e:	6862      	ldr	r2, [r4, #4]
 8011c50:	42a3      	cmp	r3, r4
 8011c52:	bf0c      	ite	eq
 8011c54:	6032      	streq	r2, [r6, #0]
 8011c56:	605a      	strne	r2, [r3, #4]
 8011c58:	e7ec      	b.n	8011c34 <_malloc_r+0xa0>
 8011c5a:	4623      	mov	r3, r4
 8011c5c:	6864      	ldr	r4, [r4, #4]
 8011c5e:	e7b2      	b.n	8011bc6 <_malloc_r+0x32>
 8011c60:	4634      	mov	r4, r6
 8011c62:	6876      	ldr	r6, [r6, #4]
 8011c64:	e7b9      	b.n	8011bda <_malloc_r+0x46>
 8011c66:	230c      	movs	r3, #12
 8011c68:	603b      	str	r3, [r7, #0]
 8011c6a:	4638      	mov	r0, r7
 8011c6c:	f000 fde6 	bl	801283c <__malloc_unlock>
 8011c70:	e7a1      	b.n	8011bb6 <_malloc_r+0x22>
 8011c72:	6025      	str	r5, [r4, #0]
 8011c74:	e7de      	b.n	8011c34 <_malloc_r+0xa0>
 8011c76:	bf00      	nop
 8011c78:	2400e4d8 	.word	0x2400e4d8

08011c7c <__ssputs_r>:
 8011c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c80:	688e      	ldr	r6, [r1, #8]
 8011c82:	429e      	cmp	r6, r3
 8011c84:	4682      	mov	sl, r0
 8011c86:	460c      	mov	r4, r1
 8011c88:	4690      	mov	r8, r2
 8011c8a:	461f      	mov	r7, r3
 8011c8c:	d838      	bhi.n	8011d00 <__ssputs_r+0x84>
 8011c8e:	898a      	ldrh	r2, [r1, #12]
 8011c90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c94:	d032      	beq.n	8011cfc <__ssputs_r+0x80>
 8011c96:	6825      	ldr	r5, [r4, #0]
 8011c98:	6909      	ldr	r1, [r1, #16]
 8011c9a:	eba5 0901 	sub.w	r9, r5, r1
 8011c9e:	6965      	ldr	r5, [r4, #20]
 8011ca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ca8:	3301      	adds	r3, #1
 8011caa:	444b      	add	r3, r9
 8011cac:	106d      	asrs	r5, r5, #1
 8011cae:	429d      	cmp	r5, r3
 8011cb0:	bf38      	it	cc
 8011cb2:	461d      	movcc	r5, r3
 8011cb4:	0553      	lsls	r3, r2, #21
 8011cb6:	d531      	bpl.n	8011d1c <__ssputs_r+0xa0>
 8011cb8:	4629      	mov	r1, r5
 8011cba:	f7ff ff6b 	bl	8011b94 <_malloc_r>
 8011cbe:	4606      	mov	r6, r0
 8011cc0:	b950      	cbnz	r0, 8011cd8 <__ssputs_r+0x5c>
 8011cc2:	230c      	movs	r3, #12
 8011cc4:	f8ca 3000 	str.w	r3, [sl]
 8011cc8:	89a3      	ldrh	r3, [r4, #12]
 8011cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cce:	81a3      	strh	r3, [r4, #12]
 8011cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd8:	6921      	ldr	r1, [r4, #16]
 8011cda:	464a      	mov	r2, r9
 8011cdc:	f7fd ff66 	bl	800fbac <memcpy>
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cea:	81a3      	strh	r3, [r4, #12]
 8011cec:	6126      	str	r6, [r4, #16]
 8011cee:	6165      	str	r5, [r4, #20]
 8011cf0:	444e      	add	r6, r9
 8011cf2:	eba5 0509 	sub.w	r5, r5, r9
 8011cf6:	6026      	str	r6, [r4, #0]
 8011cf8:	60a5      	str	r5, [r4, #8]
 8011cfa:	463e      	mov	r6, r7
 8011cfc:	42be      	cmp	r6, r7
 8011cfe:	d900      	bls.n	8011d02 <__ssputs_r+0x86>
 8011d00:	463e      	mov	r6, r7
 8011d02:	6820      	ldr	r0, [r4, #0]
 8011d04:	4632      	mov	r2, r6
 8011d06:	4641      	mov	r1, r8
 8011d08:	f000 fd78 	bl	80127fc <memmove>
 8011d0c:	68a3      	ldr	r3, [r4, #8]
 8011d0e:	1b9b      	subs	r3, r3, r6
 8011d10:	60a3      	str	r3, [r4, #8]
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	4433      	add	r3, r6
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	2000      	movs	r0, #0
 8011d1a:	e7db      	b.n	8011cd4 <__ssputs_r+0x58>
 8011d1c:	462a      	mov	r2, r5
 8011d1e:	f000 fd93 	bl	8012848 <_realloc_r>
 8011d22:	4606      	mov	r6, r0
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d1e1      	bne.n	8011cec <__ssputs_r+0x70>
 8011d28:	6921      	ldr	r1, [r4, #16]
 8011d2a:	4650      	mov	r0, sl
 8011d2c:	f7ff fec6 	bl	8011abc <_free_r>
 8011d30:	e7c7      	b.n	8011cc2 <__ssputs_r+0x46>
	...

08011d34 <_svfiprintf_r>:
 8011d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	4698      	mov	r8, r3
 8011d3a:	898b      	ldrh	r3, [r1, #12]
 8011d3c:	061b      	lsls	r3, r3, #24
 8011d3e:	b09d      	sub	sp, #116	; 0x74
 8011d40:	4607      	mov	r7, r0
 8011d42:	460d      	mov	r5, r1
 8011d44:	4614      	mov	r4, r2
 8011d46:	d50e      	bpl.n	8011d66 <_svfiprintf_r+0x32>
 8011d48:	690b      	ldr	r3, [r1, #16]
 8011d4a:	b963      	cbnz	r3, 8011d66 <_svfiprintf_r+0x32>
 8011d4c:	2140      	movs	r1, #64	; 0x40
 8011d4e:	f7ff ff21 	bl	8011b94 <_malloc_r>
 8011d52:	6028      	str	r0, [r5, #0]
 8011d54:	6128      	str	r0, [r5, #16]
 8011d56:	b920      	cbnz	r0, 8011d62 <_svfiprintf_r+0x2e>
 8011d58:	230c      	movs	r3, #12
 8011d5a:	603b      	str	r3, [r7, #0]
 8011d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d60:	e0d1      	b.n	8011f06 <_svfiprintf_r+0x1d2>
 8011d62:	2340      	movs	r3, #64	; 0x40
 8011d64:	616b      	str	r3, [r5, #20]
 8011d66:	2300      	movs	r3, #0
 8011d68:	9309      	str	r3, [sp, #36]	; 0x24
 8011d6a:	2320      	movs	r3, #32
 8011d6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d74:	2330      	movs	r3, #48	; 0x30
 8011d76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011f20 <_svfiprintf_r+0x1ec>
 8011d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d7e:	f04f 0901 	mov.w	r9, #1
 8011d82:	4623      	mov	r3, r4
 8011d84:	469a      	mov	sl, r3
 8011d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d8a:	b10a      	cbz	r2, 8011d90 <_svfiprintf_r+0x5c>
 8011d8c:	2a25      	cmp	r2, #37	; 0x25
 8011d8e:	d1f9      	bne.n	8011d84 <_svfiprintf_r+0x50>
 8011d90:	ebba 0b04 	subs.w	fp, sl, r4
 8011d94:	d00b      	beq.n	8011dae <_svfiprintf_r+0x7a>
 8011d96:	465b      	mov	r3, fp
 8011d98:	4622      	mov	r2, r4
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	4638      	mov	r0, r7
 8011d9e:	f7ff ff6d 	bl	8011c7c <__ssputs_r>
 8011da2:	3001      	adds	r0, #1
 8011da4:	f000 80aa 	beq.w	8011efc <_svfiprintf_r+0x1c8>
 8011da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011daa:	445a      	add	r2, fp
 8011dac:	9209      	str	r2, [sp, #36]	; 0x24
 8011dae:	f89a 3000 	ldrb.w	r3, [sl]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f000 80a2 	beq.w	8011efc <_svfiprintf_r+0x1c8>
 8011db8:	2300      	movs	r3, #0
 8011dba:	f04f 32ff 	mov.w	r2, #4294967295
 8011dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dc2:	f10a 0a01 	add.w	sl, sl, #1
 8011dc6:	9304      	str	r3, [sp, #16]
 8011dc8:	9307      	str	r3, [sp, #28]
 8011dca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dce:	931a      	str	r3, [sp, #104]	; 0x68
 8011dd0:	4654      	mov	r4, sl
 8011dd2:	2205      	movs	r2, #5
 8011dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd8:	4851      	ldr	r0, [pc, #324]	; (8011f20 <_svfiprintf_r+0x1ec>)
 8011dda:	f7ee fa89 	bl	80002f0 <memchr>
 8011dde:	9a04      	ldr	r2, [sp, #16]
 8011de0:	b9d8      	cbnz	r0, 8011e1a <_svfiprintf_r+0xe6>
 8011de2:	06d0      	lsls	r0, r2, #27
 8011de4:	bf44      	itt	mi
 8011de6:	2320      	movmi	r3, #32
 8011de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dec:	0711      	lsls	r1, r2, #28
 8011dee:	bf44      	itt	mi
 8011df0:	232b      	movmi	r3, #43	; 0x2b
 8011df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011df6:	f89a 3000 	ldrb.w	r3, [sl]
 8011dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8011dfc:	d015      	beq.n	8011e2a <_svfiprintf_r+0xf6>
 8011dfe:	9a07      	ldr	r2, [sp, #28]
 8011e00:	4654      	mov	r4, sl
 8011e02:	2000      	movs	r0, #0
 8011e04:	f04f 0c0a 	mov.w	ip, #10
 8011e08:	4621      	mov	r1, r4
 8011e0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e0e:	3b30      	subs	r3, #48	; 0x30
 8011e10:	2b09      	cmp	r3, #9
 8011e12:	d94e      	bls.n	8011eb2 <_svfiprintf_r+0x17e>
 8011e14:	b1b0      	cbz	r0, 8011e44 <_svfiprintf_r+0x110>
 8011e16:	9207      	str	r2, [sp, #28]
 8011e18:	e014      	b.n	8011e44 <_svfiprintf_r+0x110>
 8011e1a:	eba0 0308 	sub.w	r3, r0, r8
 8011e1e:	fa09 f303 	lsl.w	r3, r9, r3
 8011e22:	4313      	orrs	r3, r2
 8011e24:	9304      	str	r3, [sp, #16]
 8011e26:	46a2      	mov	sl, r4
 8011e28:	e7d2      	b.n	8011dd0 <_svfiprintf_r+0x9c>
 8011e2a:	9b03      	ldr	r3, [sp, #12]
 8011e2c:	1d19      	adds	r1, r3, #4
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	9103      	str	r1, [sp, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	bfbb      	ittet	lt
 8011e36:	425b      	neglt	r3, r3
 8011e38:	f042 0202 	orrlt.w	r2, r2, #2
 8011e3c:	9307      	strge	r3, [sp, #28]
 8011e3e:	9307      	strlt	r3, [sp, #28]
 8011e40:	bfb8      	it	lt
 8011e42:	9204      	strlt	r2, [sp, #16]
 8011e44:	7823      	ldrb	r3, [r4, #0]
 8011e46:	2b2e      	cmp	r3, #46	; 0x2e
 8011e48:	d10c      	bne.n	8011e64 <_svfiprintf_r+0x130>
 8011e4a:	7863      	ldrb	r3, [r4, #1]
 8011e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8011e4e:	d135      	bne.n	8011ebc <_svfiprintf_r+0x188>
 8011e50:	9b03      	ldr	r3, [sp, #12]
 8011e52:	1d1a      	adds	r2, r3, #4
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	9203      	str	r2, [sp, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	bfb8      	it	lt
 8011e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e60:	3402      	adds	r4, #2
 8011e62:	9305      	str	r3, [sp, #20]
 8011e64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011f30 <_svfiprintf_r+0x1fc>
 8011e68:	7821      	ldrb	r1, [r4, #0]
 8011e6a:	2203      	movs	r2, #3
 8011e6c:	4650      	mov	r0, sl
 8011e6e:	f7ee fa3f 	bl	80002f0 <memchr>
 8011e72:	b140      	cbz	r0, 8011e86 <_svfiprintf_r+0x152>
 8011e74:	2340      	movs	r3, #64	; 0x40
 8011e76:	eba0 000a 	sub.w	r0, r0, sl
 8011e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8011e7e:	9b04      	ldr	r3, [sp, #16]
 8011e80:	4303      	orrs	r3, r0
 8011e82:	3401      	adds	r4, #1
 8011e84:	9304      	str	r3, [sp, #16]
 8011e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e8a:	4826      	ldr	r0, [pc, #152]	; (8011f24 <_svfiprintf_r+0x1f0>)
 8011e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e90:	2206      	movs	r2, #6
 8011e92:	f7ee fa2d 	bl	80002f0 <memchr>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d038      	beq.n	8011f0c <_svfiprintf_r+0x1d8>
 8011e9a:	4b23      	ldr	r3, [pc, #140]	; (8011f28 <_svfiprintf_r+0x1f4>)
 8011e9c:	bb1b      	cbnz	r3, 8011ee6 <_svfiprintf_r+0x1b2>
 8011e9e:	9b03      	ldr	r3, [sp, #12]
 8011ea0:	3307      	adds	r3, #7
 8011ea2:	f023 0307 	bic.w	r3, r3, #7
 8011ea6:	3308      	adds	r3, #8
 8011ea8:	9303      	str	r3, [sp, #12]
 8011eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eac:	4433      	add	r3, r6
 8011eae:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb0:	e767      	b.n	8011d82 <_svfiprintf_r+0x4e>
 8011eb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	2001      	movs	r0, #1
 8011eba:	e7a5      	b.n	8011e08 <_svfiprintf_r+0xd4>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	3401      	adds	r4, #1
 8011ec0:	9305      	str	r3, [sp, #20]
 8011ec2:	4619      	mov	r1, r3
 8011ec4:	f04f 0c0a 	mov.w	ip, #10
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ece:	3a30      	subs	r2, #48	; 0x30
 8011ed0:	2a09      	cmp	r2, #9
 8011ed2:	d903      	bls.n	8011edc <_svfiprintf_r+0x1a8>
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d0c5      	beq.n	8011e64 <_svfiprintf_r+0x130>
 8011ed8:	9105      	str	r1, [sp, #20]
 8011eda:	e7c3      	b.n	8011e64 <_svfiprintf_r+0x130>
 8011edc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ee0:	4604      	mov	r4, r0
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e7f0      	b.n	8011ec8 <_svfiprintf_r+0x194>
 8011ee6:	ab03      	add	r3, sp, #12
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	462a      	mov	r2, r5
 8011eec:	4b0f      	ldr	r3, [pc, #60]	; (8011f2c <_svfiprintf_r+0x1f8>)
 8011eee:	a904      	add	r1, sp, #16
 8011ef0:	4638      	mov	r0, r7
 8011ef2:	f7fd ff01 	bl	800fcf8 <_printf_float>
 8011ef6:	1c42      	adds	r2, r0, #1
 8011ef8:	4606      	mov	r6, r0
 8011efa:	d1d6      	bne.n	8011eaa <_svfiprintf_r+0x176>
 8011efc:	89ab      	ldrh	r3, [r5, #12]
 8011efe:	065b      	lsls	r3, r3, #25
 8011f00:	f53f af2c 	bmi.w	8011d5c <_svfiprintf_r+0x28>
 8011f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f06:	b01d      	add	sp, #116	; 0x74
 8011f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f0c:	ab03      	add	r3, sp, #12
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	462a      	mov	r2, r5
 8011f12:	4b06      	ldr	r3, [pc, #24]	; (8011f2c <_svfiprintf_r+0x1f8>)
 8011f14:	a904      	add	r1, sp, #16
 8011f16:	4638      	mov	r0, r7
 8011f18:	f7fe f97a 	bl	8010210 <_printf_i>
 8011f1c:	e7eb      	b.n	8011ef6 <_svfiprintf_r+0x1c2>
 8011f1e:	bf00      	nop
 8011f20:	0801d3dc 	.word	0x0801d3dc
 8011f24:	0801d3e6 	.word	0x0801d3e6
 8011f28:	0800fcf9 	.word	0x0800fcf9
 8011f2c:	08011c7d 	.word	0x08011c7d
 8011f30:	0801d3e2 	.word	0x0801d3e2

08011f34 <__sfputc_r>:
 8011f34:	6893      	ldr	r3, [r2, #8]
 8011f36:	3b01      	subs	r3, #1
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	b410      	push	{r4}
 8011f3c:	6093      	str	r3, [r2, #8]
 8011f3e:	da08      	bge.n	8011f52 <__sfputc_r+0x1e>
 8011f40:	6994      	ldr	r4, [r2, #24]
 8011f42:	42a3      	cmp	r3, r4
 8011f44:	db01      	blt.n	8011f4a <__sfputc_r+0x16>
 8011f46:	290a      	cmp	r1, #10
 8011f48:	d103      	bne.n	8011f52 <__sfputc_r+0x1e>
 8011f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f4e:	f000 b95b 	b.w	8012208 <__swbuf_r>
 8011f52:	6813      	ldr	r3, [r2, #0]
 8011f54:	1c58      	adds	r0, r3, #1
 8011f56:	6010      	str	r0, [r2, #0]
 8011f58:	7019      	strb	r1, [r3, #0]
 8011f5a:	4608      	mov	r0, r1
 8011f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f60:	4770      	bx	lr

08011f62 <__sfputs_r>:
 8011f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f64:	4606      	mov	r6, r0
 8011f66:	460f      	mov	r7, r1
 8011f68:	4614      	mov	r4, r2
 8011f6a:	18d5      	adds	r5, r2, r3
 8011f6c:	42ac      	cmp	r4, r5
 8011f6e:	d101      	bne.n	8011f74 <__sfputs_r+0x12>
 8011f70:	2000      	movs	r0, #0
 8011f72:	e007      	b.n	8011f84 <__sfputs_r+0x22>
 8011f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f78:	463a      	mov	r2, r7
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f7ff ffda 	bl	8011f34 <__sfputc_r>
 8011f80:	1c43      	adds	r3, r0, #1
 8011f82:	d1f3      	bne.n	8011f6c <__sfputs_r+0xa>
 8011f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f88 <_vfiprintf_r>:
 8011f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	b09d      	sub	sp, #116	; 0x74
 8011f90:	4614      	mov	r4, r2
 8011f92:	4698      	mov	r8, r3
 8011f94:	4606      	mov	r6, r0
 8011f96:	b118      	cbz	r0, 8011fa0 <_vfiprintf_r+0x18>
 8011f98:	6983      	ldr	r3, [r0, #24]
 8011f9a:	b90b      	cbnz	r3, 8011fa0 <_vfiprintf_r+0x18>
 8011f9c:	f000 fb16 	bl	80125cc <__sinit>
 8011fa0:	4b89      	ldr	r3, [pc, #548]	; (80121c8 <_vfiprintf_r+0x240>)
 8011fa2:	429d      	cmp	r5, r3
 8011fa4:	d11b      	bne.n	8011fde <_vfiprintf_r+0x56>
 8011fa6:	6875      	ldr	r5, [r6, #4]
 8011fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011faa:	07d9      	lsls	r1, r3, #31
 8011fac:	d405      	bmi.n	8011fba <_vfiprintf_r+0x32>
 8011fae:	89ab      	ldrh	r3, [r5, #12]
 8011fb0:	059a      	lsls	r2, r3, #22
 8011fb2:	d402      	bmi.n	8011fba <_vfiprintf_r+0x32>
 8011fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fb6:	f000 fba7 	bl	8012708 <__retarget_lock_acquire_recursive>
 8011fba:	89ab      	ldrh	r3, [r5, #12]
 8011fbc:	071b      	lsls	r3, r3, #28
 8011fbe:	d501      	bpl.n	8011fc4 <_vfiprintf_r+0x3c>
 8011fc0:	692b      	ldr	r3, [r5, #16]
 8011fc2:	b9eb      	cbnz	r3, 8012000 <_vfiprintf_r+0x78>
 8011fc4:	4629      	mov	r1, r5
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	f000 f970 	bl	80122ac <__swsetup_r>
 8011fcc:	b1c0      	cbz	r0, 8012000 <_vfiprintf_r+0x78>
 8011fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fd0:	07dc      	lsls	r4, r3, #31
 8011fd2:	d50e      	bpl.n	8011ff2 <_vfiprintf_r+0x6a>
 8011fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd8:	b01d      	add	sp, #116	; 0x74
 8011fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fde:	4b7b      	ldr	r3, [pc, #492]	; (80121cc <_vfiprintf_r+0x244>)
 8011fe0:	429d      	cmp	r5, r3
 8011fe2:	d101      	bne.n	8011fe8 <_vfiprintf_r+0x60>
 8011fe4:	68b5      	ldr	r5, [r6, #8]
 8011fe6:	e7df      	b.n	8011fa8 <_vfiprintf_r+0x20>
 8011fe8:	4b79      	ldr	r3, [pc, #484]	; (80121d0 <_vfiprintf_r+0x248>)
 8011fea:	429d      	cmp	r5, r3
 8011fec:	bf08      	it	eq
 8011fee:	68f5      	ldreq	r5, [r6, #12]
 8011ff0:	e7da      	b.n	8011fa8 <_vfiprintf_r+0x20>
 8011ff2:	89ab      	ldrh	r3, [r5, #12]
 8011ff4:	0598      	lsls	r0, r3, #22
 8011ff6:	d4ed      	bmi.n	8011fd4 <_vfiprintf_r+0x4c>
 8011ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ffa:	f000 fb86 	bl	801270a <__retarget_lock_release_recursive>
 8011ffe:	e7e9      	b.n	8011fd4 <_vfiprintf_r+0x4c>
 8012000:	2300      	movs	r3, #0
 8012002:	9309      	str	r3, [sp, #36]	; 0x24
 8012004:	2320      	movs	r3, #32
 8012006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801200a:	f8cd 800c 	str.w	r8, [sp, #12]
 801200e:	2330      	movs	r3, #48	; 0x30
 8012010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121d4 <_vfiprintf_r+0x24c>
 8012014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012018:	f04f 0901 	mov.w	r9, #1
 801201c:	4623      	mov	r3, r4
 801201e:	469a      	mov	sl, r3
 8012020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012024:	b10a      	cbz	r2, 801202a <_vfiprintf_r+0xa2>
 8012026:	2a25      	cmp	r2, #37	; 0x25
 8012028:	d1f9      	bne.n	801201e <_vfiprintf_r+0x96>
 801202a:	ebba 0b04 	subs.w	fp, sl, r4
 801202e:	d00b      	beq.n	8012048 <_vfiprintf_r+0xc0>
 8012030:	465b      	mov	r3, fp
 8012032:	4622      	mov	r2, r4
 8012034:	4629      	mov	r1, r5
 8012036:	4630      	mov	r0, r6
 8012038:	f7ff ff93 	bl	8011f62 <__sfputs_r>
 801203c:	3001      	adds	r0, #1
 801203e:	f000 80aa 	beq.w	8012196 <_vfiprintf_r+0x20e>
 8012042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012044:	445a      	add	r2, fp
 8012046:	9209      	str	r2, [sp, #36]	; 0x24
 8012048:	f89a 3000 	ldrb.w	r3, [sl]
 801204c:	2b00      	cmp	r3, #0
 801204e:	f000 80a2 	beq.w	8012196 <_vfiprintf_r+0x20e>
 8012052:	2300      	movs	r3, #0
 8012054:	f04f 32ff 	mov.w	r2, #4294967295
 8012058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801205c:	f10a 0a01 	add.w	sl, sl, #1
 8012060:	9304      	str	r3, [sp, #16]
 8012062:	9307      	str	r3, [sp, #28]
 8012064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012068:	931a      	str	r3, [sp, #104]	; 0x68
 801206a:	4654      	mov	r4, sl
 801206c:	2205      	movs	r2, #5
 801206e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012072:	4858      	ldr	r0, [pc, #352]	; (80121d4 <_vfiprintf_r+0x24c>)
 8012074:	f7ee f93c 	bl	80002f0 <memchr>
 8012078:	9a04      	ldr	r2, [sp, #16]
 801207a:	b9d8      	cbnz	r0, 80120b4 <_vfiprintf_r+0x12c>
 801207c:	06d1      	lsls	r1, r2, #27
 801207e:	bf44      	itt	mi
 8012080:	2320      	movmi	r3, #32
 8012082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012086:	0713      	lsls	r3, r2, #28
 8012088:	bf44      	itt	mi
 801208a:	232b      	movmi	r3, #43	; 0x2b
 801208c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012090:	f89a 3000 	ldrb.w	r3, [sl]
 8012094:	2b2a      	cmp	r3, #42	; 0x2a
 8012096:	d015      	beq.n	80120c4 <_vfiprintf_r+0x13c>
 8012098:	9a07      	ldr	r2, [sp, #28]
 801209a:	4654      	mov	r4, sl
 801209c:	2000      	movs	r0, #0
 801209e:	f04f 0c0a 	mov.w	ip, #10
 80120a2:	4621      	mov	r1, r4
 80120a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120a8:	3b30      	subs	r3, #48	; 0x30
 80120aa:	2b09      	cmp	r3, #9
 80120ac:	d94e      	bls.n	801214c <_vfiprintf_r+0x1c4>
 80120ae:	b1b0      	cbz	r0, 80120de <_vfiprintf_r+0x156>
 80120b0:	9207      	str	r2, [sp, #28]
 80120b2:	e014      	b.n	80120de <_vfiprintf_r+0x156>
 80120b4:	eba0 0308 	sub.w	r3, r0, r8
 80120b8:	fa09 f303 	lsl.w	r3, r9, r3
 80120bc:	4313      	orrs	r3, r2
 80120be:	9304      	str	r3, [sp, #16]
 80120c0:	46a2      	mov	sl, r4
 80120c2:	e7d2      	b.n	801206a <_vfiprintf_r+0xe2>
 80120c4:	9b03      	ldr	r3, [sp, #12]
 80120c6:	1d19      	adds	r1, r3, #4
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	9103      	str	r1, [sp, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	bfbb      	ittet	lt
 80120d0:	425b      	neglt	r3, r3
 80120d2:	f042 0202 	orrlt.w	r2, r2, #2
 80120d6:	9307      	strge	r3, [sp, #28]
 80120d8:	9307      	strlt	r3, [sp, #28]
 80120da:	bfb8      	it	lt
 80120dc:	9204      	strlt	r2, [sp, #16]
 80120de:	7823      	ldrb	r3, [r4, #0]
 80120e0:	2b2e      	cmp	r3, #46	; 0x2e
 80120e2:	d10c      	bne.n	80120fe <_vfiprintf_r+0x176>
 80120e4:	7863      	ldrb	r3, [r4, #1]
 80120e6:	2b2a      	cmp	r3, #42	; 0x2a
 80120e8:	d135      	bne.n	8012156 <_vfiprintf_r+0x1ce>
 80120ea:	9b03      	ldr	r3, [sp, #12]
 80120ec:	1d1a      	adds	r2, r3, #4
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	9203      	str	r2, [sp, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	bfb8      	it	lt
 80120f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80120fa:	3402      	adds	r4, #2
 80120fc:	9305      	str	r3, [sp, #20]
 80120fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121e4 <_vfiprintf_r+0x25c>
 8012102:	7821      	ldrb	r1, [r4, #0]
 8012104:	2203      	movs	r2, #3
 8012106:	4650      	mov	r0, sl
 8012108:	f7ee f8f2 	bl	80002f0 <memchr>
 801210c:	b140      	cbz	r0, 8012120 <_vfiprintf_r+0x198>
 801210e:	2340      	movs	r3, #64	; 0x40
 8012110:	eba0 000a 	sub.w	r0, r0, sl
 8012114:	fa03 f000 	lsl.w	r0, r3, r0
 8012118:	9b04      	ldr	r3, [sp, #16]
 801211a:	4303      	orrs	r3, r0
 801211c:	3401      	adds	r4, #1
 801211e:	9304      	str	r3, [sp, #16]
 8012120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012124:	482c      	ldr	r0, [pc, #176]	; (80121d8 <_vfiprintf_r+0x250>)
 8012126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801212a:	2206      	movs	r2, #6
 801212c:	f7ee f8e0 	bl	80002f0 <memchr>
 8012130:	2800      	cmp	r0, #0
 8012132:	d03f      	beq.n	80121b4 <_vfiprintf_r+0x22c>
 8012134:	4b29      	ldr	r3, [pc, #164]	; (80121dc <_vfiprintf_r+0x254>)
 8012136:	bb1b      	cbnz	r3, 8012180 <_vfiprintf_r+0x1f8>
 8012138:	9b03      	ldr	r3, [sp, #12]
 801213a:	3307      	adds	r3, #7
 801213c:	f023 0307 	bic.w	r3, r3, #7
 8012140:	3308      	adds	r3, #8
 8012142:	9303      	str	r3, [sp, #12]
 8012144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012146:	443b      	add	r3, r7
 8012148:	9309      	str	r3, [sp, #36]	; 0x24
 801214a:	e767      	b.n	801201c <_vfiprintf_r+0x94>
 801214c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012150:	460c      	mov	r4, r1
 8012152:	2001      	movs	r0, #1
 8012154:	e7a5      	b.n	80120a2 <_vfiprintf_r+0x11a>
 8012156:	2300      	movs	r3, #0
 8012158:	3401      	adds	r4, #1
 801215a:	9305      	str	r3, [sp, #20]
 801215c:	4619      	mov	r1, r3
 801215e:	f04f 0c0a 	mov.w	ip, #10
 8012162:	4620      	mov	r0, r4
 8012164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012168:	3a30      	subs	r2, #48	; 0x30
 801216a:	2a09      	cmp	r2, #9
 801216c:	d903      	bls.n	8012176 <_vfiprintf_r+0x1ee>
 801216e:	2b00      	cmp	r3, #0
 8012170:	d0c5      	beq.n	80120fe <_vfiprintf_r+0x176>
 8012172:	9105      	str	r1, [sp, #20]
 8012174:	e7c3      	b.n	80120fe <_vfiprintf_r+0x176>
 8012176:	fb0c 2101 	mla	r1, ip, r1, r2
 801217a:	4604      	mov	r4, r0
 801217c:	2301      	movs	r3, #1
 801217e:	e7f0      	b.n	8012162 <_vfiprintf_r+0x1da>
 8012180:	ab03      	add	r3, sp, #12
 8012182:	9300      	str	r3, [sp, #0]
 8012184:	462a      	mov	r2, r5
 8012186:	4b16      	ldr	r3, [pc, #88]	; (80121e0 <_vfiprintf_r+0x258>)
 8012188:	a904      	add	r1, sp, #16
 801218a:	4630      	mov	r0, r6
 801218c:	f7fd fdb4 	bl	800fcf8 <_printf_float>
 8012190:	4607      	mov	r7, r0
 8012192:	1c78      	adds	r0, r7, #1
 8012194:	d1d6      	bne.n	8012144 <_vfiprintf_r+0x1bc>
 8012196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012198:	07d9      	lsls	r1, r3, #31
 801219a:	d405      	bmi.n	80121a8 <_vfiprintf_r+0x220>
 801219c:	89ab      	ldrh	r3, [r5, #12]
 801219e:	059a      	lsls	r2, r3, #22
 80121a0:	d402      	bmi.n	80121a8 <_vfiprintf_r+0x220>
 80121a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121a4:	f000 fab1 	bl	801270a <__retarget_lock_release_recursive>
 80121a8:	89ab      	ldrh	r3, [r5, #12]
 80121aa:	065b      	lsls	r3, r3, #25
 80121ac:	f53f af12 	bmi.w	8011fd4 <_vfiprintf_r+0x4c>
 80121b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121b2:	e711      	b.n	8011fd8 <_vfiprintf_r+0x50>
 80121b4:	ab03      	add	r3, sp, #12
 80121b6:	9300      	str	r3, [sp, #0]
 80121b8:	462a      	mov	r2, r5
 80121ba:	4b09      	ldr	r3, [pc, #36]	; (80121e0 <_vfiprintf_r+0x258>)
 80121bc:	a904      	add	r1, sp, #16
 80121be:	4630      	mov	r0, r6
 80121c0:	f7fe f826 	bl	8010210 <_printf_i>
 80121c4:	e7e4      	b.n	8012190 <_vfiprintf_r+0x208>
 80121c6:	bf00      	nop
 80121c8:	0801d410 	.word	0x0801d410
 80121cc:	0801d430 	.word	0x0801d430
 80121d0:	0801d3f0 	.word	0x0801d3f0
 80121d4:	0801d3dc 	.word	0x0801d3dc
 80121d8:	0801d3e6 	.word	0x0801d3e6
 80121dc:	0800fcf9 	.word	0x0800fcf9
 80121e0:	08011f63 	.word	0x08011f63
 80121e4:	0801d3e2 	.word	0x0801d3e2

080121e8 <_sbrk_r>:
 80121e8:	b538      	push	{r3, r4, r5, lr}
 80121ea:	4d06      	ldr	r5, [pc, #24]	; (8012204 <_sbrk_r+0x1c>)
 80121ec:	2300      	movs	r3, #0
 80121ee:	4604      	mov	r4, r0
 80121f0:	4608      	mov	r0, r1
 80121f2:	602b      	str	r3, [r5, #0]
 80121f4:	f7f3 f9e2 	bl	80055bc <_sbrk>
 80121f8:	1c43      	adds	r3, r0, #1
 80121fa:	d102      	bne.n	8012202 <_sbrk_r+0x1a>
 80121fc:	682b      	ldr	r3, [r5, #0]
 80121fe:	b103      	cbz	r3, 8012202 <_sbrk_r+0x1a>
 8012200:	6023      	str	r3, [r4, #0]
 8012202:	bd38      	pop	{r3, r4, r5, pc}
 8012204:	2400e4e4 	.word	0x2400e4e4

08012208 <__swbuf_r>:
 8012208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801220a:	460e      	mov	r6, r1
 801220c:	4614      	mov	r4, r2
 801220e:	4605      	mov	r5, r0
 8012210:	b118      	cbz	r0, 801221a <__swbuf_r+0x12>
 8012212:	6983      	ldr	r3, [r0, #24]
 8012214:	b90b      	cbnz	r3, 801221a <__swbuf_r+0x12>
 8012216:	f000 f9d9 	bl	80125cc <__sinit>
 801221a:	4b21      	ldr	r3, [pc, #132]	; (80122a0 <__swbuf_r+0x98>)
 801221c:	429c      	cmp	r4, r3
 801221e:	d12b      	bne.n	8012278 <__swbuf_r+0x70>
 8012220:	686c      	ldr	r4, [r5, #4]
 8012222:	69a3      	ldr	r3, [r4, #24]
 8012224:	60a3      	str	r3, [r4, #8]
 8012226:	89a3      	ldrh	r3, [r4, #12]
 8012228:	071a      	lsls	r2, r3, #28
 801222a:	d52f      	bpl.n	801228c <__swbuf_r+0x84>
 801222c:	6923      	ldr	r3, [r4, #16]
 801222e:	b36b      	cbz	r3, 801228c <__swbuf_r+0x84>
 8012230:	6923      	ldr	r3, [r4, #16]
 8012232:	6820      	ldr	r0, [r4, #0]
 8012234:	1ac0      	subs	r0, r0, r3
 8012236:	6963      	ldr	r3, [r4, #20]
 8012238:	b2f6      	uxtb	r6, r6
 801223a:	4283      	cmp	r3, r0
 801223c:	4637      	mov	r7, r6
 801223e:	dc04      	bgt.n	801224a <__swbuf_r+0x42>
 8012240:	4621      	mov	r1, r4
 8012242:	4628      	mov	r0, r5
 8012244:	f000 f92e 	bl	80124a4 <_fflush_r>
 8012248:	bb30      	cbnz	r0, 8012298 <__swbuf_r+0x90>
 801224a:	68a3      	ldr	r3, [r4, #8]
 801224c:	3b01      	subs	r3, #1
 801224e:	60a3      	str	r3, [r4, #8]
 8012250:	6823      	ldr	r3, [r4, #0]
 8012252:	1c5a      	adds	r2, r3, #1
 8012254:	6022      	str	r2, [r4, #0]
 8012256:	701e      	strb	r6, [r3, #0]
 8012258:	6963      	ldr	r3, [r4, #20]
 801225a:	3001      	adds	r0, #1
 801225c:	4283      	cmp	r3, r0
 801225e:	d004      	beq.n	801226a <__swbuf_r+0x62>
 8012260:	89a3      	ldrh	r3, [r4, #12]
 8012262:	07db      	lsls	r3, r3, #31
 8012264:	d506      	bpl.n	8012274 <__swbuf_r+0x6c>
 8012266:	2e0a      	cmp	r6, #10
 8012268:	d104      	bne.n	8012274 <__swbuf_r+0x6c>
 801226a:	4621      	mov	r1, r4
 801226c:	4628      	mov	r0, r5
 801226e:	f000 f919 	bl	80124a4 <_fflush_r>
 8012272:	b988      	cbnz	r0, 8012298 <__swbuf_r+0x90>
 8012274:	4638      	mov	r0, r7
 8012276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012278:	4b0a      	ldr	r3, [pc, #40]	; (80122a4 <__swbuf_r+0x9c>)
 801227a:	429c      	cmp	r4, r3
 801227c:	d101      	bne.n	8012282 <__swbuf_r+0x7a>
 801227e:	68ac      	ldr	r4, [r5, #8]
 8012280:	e7cf      	b.n	8012222 <__swbuf_r+0x1a>
 8012282:	4b09      	ldr	r3, [pc, #36]	; (80122a8 <__swbuf_r+0xa0>)
 8012284:	429c      	cmp	r4, r3
 8012286:	bf08      	it	eq
 8012288:	68ec      	ldreq	r4, [r5, #12]
 801228a:	e7ca      	b.n	8012222 <__swbuf_r+0x1a>
 801228c:	4621      	mov	r1, r4
 801228e:	4628      	mov	r0, r5
 8012290:	f000 f80c 	bl	80122ac <__swsetup_r>
 8012294:	2800      	cmp	r0, #0
 8012296:	d0cb      	beq.n	8012230 <__swbuf_r+0x28>
 8012298:	f04f 37ff 	mov.w	r7, #4294967295
 801229c:	e7ea      	b.n	8012274 <__swbuf_r+0x6c>
 801229e:	bf00      	nop
 80122a0:	0801d410 	.word	0x0801d410
 80122a4:	0801d430 	.word	0x0801d430
 80122a8:	0801d3f0 	.word	0x0801d3f0

080122ac <__swsetup_r>:
 80122ac:	4b32      	ldr	r3, [pc, #200]	; (8012378 <__swsetup_r+0xcc>)
 80122ae:	b570      	push	{r4, r5, r6, lr}
 80122b0:	681d      	ldr	r5, [r3, #0]
 80122b2:	4606      	mov	r6, r0
 80122b4:	460c      	mov	r4, r1
 80122b6:	b125      	cbz	r5, 80122c2 <__swsetup_r+0x16>
 80122b8:	69ab      	ldr	r3, [r5, #24]
 80122ba:	b913      	cbnz	r3, 80122c2 <__swsetup_r+0x16>
 80122bc:	4628      	mov	r0, r5
 80122be:	f000 f985 	bl	80125cc <__sinit>
 80122c2:	4b2e      	ldr	r3, [pc, #184]	; (801237c <__swsetup_r+0xd0>)
 80122c4:	429c      	cmp	r4, r3
 80122c6:	d10f      	bne.n	80122e8 <__swsetup_r+0x3c>
 80122c8:	686c      	ldr	r4, [r5, #4]
 80122ca:	89a3      	ldrh	r3, [r4, #12]
 80122cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122d0:	0719      	lsls	r1, r3, #28
 80122d2:	d42c      	bmi.n	801232e <__swsetup_r+0x82>
 80122d4:	06dd      	lsls	r5, r3, #27
 80122d6:	d411      	bmi.n	80122fc <__swsetup_r+0x50>
 80122d8:	2309      	movs	r3, #9
 80122da:	6033      	str	r3, [r6, #0]
 80122dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122e0:	81a3      	strh	r3, [r4, #12]
 80122e2:	f04f 30ff 	mov.w	r0, #4294967295
 80122e6:	e03e      	b.n	8012366 <__swsetup_r+0xba>
 80122e8:	4b25      	ldr	r3, [pc, #148]	; (8012380 <__swsetup_r+0xd4>)
 80122ea:	429c      	cmp	r4, r3
 80122ec:	d101      	bne.n	80122f2 <__swsetup_r+0x46>
 80122ee:	68ac      	ldr	r4, [r5, #8]
 80122f0:	e7eb      	b.n	80122ca <__swsetup_r+0x1e>
 80122f2:	4b24      	ldr	r3, [pc, #144]	; (8012384 <__swsetup_r+0xd8>)
 80122f4:	429c      	cmp	r4, r3
 80122f6:	bf08      	it	eq
 80122f8:	68ec      	ldreq	r4, [r5, #12]
 80122fa:	e7e6      	b.n	80122ca <__swsetup_r+0x1e>
 80122fc:	0758      	lsls	r0, r3, #29
 80122fe:	d512      	bpl.n	8012326 <__swsetup_r+0x7a>
 8012300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012302:	b141      	cbz	r1, 8012316 <__swsetup_r+0x6a>
 8012304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012308:	4299      	cmp	r1, r3
 801230a:	d002      	beq.n	8012312 <__swsetup_r+0x66>
 801230c:	4630      	mov	r0, r6
 801230e:	f7ff fbd5 	bl	8011abc <_free_r>
 8012312:	2300      	movs	r3, #0
 8012314:	6363      	str	r3, [r4, #52]	; 0x34
 8012316:	89a3      	ldrh	r3, [r4, #12]
 8012318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801231c:	81a3      	strh	r3, [r4, #12]
 801231e:	2300      	movs	r3, #0
 8012320:	6063      	str	r3, [r4, #4]
 8012322:	6923      	ldr	r3, [r4, #16]
 8012324:	6023      	str	r3, [r4, #0]
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	f043 0308 	orr.w	r3, r3, #8
 801232c:	81a3      	strh	r3, [r4, #12]
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	b94b      	cbnz	r3, 8012346 <__swsetup_r+0x9a>
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801233c:	d003      	beq.n	8012346 <__swsetup_r+0x9a>
 801233e:	4621      	mov	r1, r4
 8012340:	4630      	mov	r0, r6
 8012342:	f000 fa09 	bl	8012758 <__smakebuf_r>
 8012346:	89a0      	ldrh	r0, [r4, #12]
 8012348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801234c:	f010 0301 	ands.w	r3, r0, #1
 8012350:	d00a      	beq.n	8012368 <__swsetup_r+0xbc>
 8012352:	2300      	movs	r3, #0
 8012354:	60a3      	str	r3, [r4, #8]
 8012356:	6963      	ldr	r3, [r4, #20]
 8012358:	425b      	negs	r3, r3
 801235a:	61a3      	str	r3, [r4, #24]
 801235c:	6923      	ldr	r3, [r4, #16]
 801235e:	b943      	cbnz	r3, 8012372 <__swsetup_r+0xc6>
 8012360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012364:	d1ba      	bne.n	80122dc <__swsetup_r+0x30>
 8012366:	bd70      	pop	{r4, r5, r6, pc}
 8012368:	0781      	lsls	r1, r0, #30
 801236a:	bf58      	it	pl
 801236c:	6963      	ldrpl	r3, [r4, #20]
 801236e:	60a3      	str	r3, [r4, #8]
 8012370:	e7f4      	b.n	801235c <__swsetup_r+0xb0>
 8012372:	2000      	movs	r0, #0
 8012374:	e7f7      	b.n	8012366 <__swsetup_r+0xba>
 8012376:	bf00      	nop
 8012378:	24000498 	.word	0x24000498
 801237c:	0801d410 	.word	0x0801d410
 8012380:	0801d430 	.word	0x0801d430
 8012384:	0801d3f0 	.word	0x0801d3f0

08012388 <abort>:
 8012388:	b508      	push	{r3, lr}
 801238a:	2006      	movs	r0, #6
 801238c:	f000 fab4 	bl	80128f8 <raise>
 8012390:	2001      	movs	r0, #1
 8012392:	f7f3 f8e3 	bl	800555c <_exit>
	...

08012398 <__sflush_r>:
 8012398:	898a      	ldrh	r2, [r1, #12]
 801239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239e:	4605      	mov	r5, r0
 80123a0:	0710      	lsls	r0, r2, #28
 80123a2:	460c      	mov	r4, r1
 80123a4:	d458      	bmi.n	8012458 <__sflush_r+0xc0>
 80123a6:	684b      	ldr	r3, [r1, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	dc05      	bgt.n	80123b8 <__sflush_r+0x20>
 80123ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	dc02      	bgt.n	80123b8 <__sflush_r+0x20>
 80123b2:	2000      	movs	r0, #0
 80123b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123ba:	2e00      	cmp	r6, #0
 80123bc:	d0f9      	beq.n	80123b2 <__sflush_r+0x1a>
 80123be:	2300      	movs	r3, #0
 80123c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123c4:	682f      	ldr	r7, [r5, #0]
 80123c6:	602b      	str	r3, [r5, #0]
 80123c8:	d032      	beq.n	8012430 <__sflush_r+0x98>
 80123ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123cc:	89a3      	ldrh	r3, [r4, #12]
 80123ce:	075a      	lsls	r2, r3, #29
 80123d0:	d505      	bpl.n	80123de <__sflush_r+0x46>
 80123d2:	6863      	ldr	r3, [r4, #4]
 80123d4:	1ac0      	subs	r0, r0, r3
 80123d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123d8:	b10b      	cbz	r3, 80123de <__sflush_r+0x46>
 80123da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123dc:	1ac0      	subs	r0, r0, r3
 80123de:	2300      	movs	r3, #0
 80123e0:	4602      	mov	r2, r0
 80123e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123e4:	6a21      	ldr	r1, [r4, #32]
 80123e6:	4628      	mov	r0, r5
 80123e8:	47b0      	blx	r6
 80123ea:	1c43      	adds	r3, r0, #1
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	d106      	bne.n	80123fe <__sflush_r+0x66>
 80123f0:	6829      	ldr	r1, [r5, #0]
 80123f2:	291d      	cmp	r1, #29
 80123f4:	d82c      	bhi.n	8012450 <__sflush_r+0xb8>
 80123f6:	4a2a      	ldr	r2, [pc, #168]	; (80124a0 <__sflush_r+0x108>)
 80123f8:	40ca      	lsrs	r2, r1
 80123fa:	07d6      	lsls	r6, r2, #31
 80123fc:	d528      	bpl.n	8012450 <__sflush_r+0xb8>
 80123fe:	2200      	movs	r2, #0
 8012400:	6062      	str	r2, [r4, #4]
 8012402:	04d9      	lsls	r1, r3, #19
 8012404:	6922      	ldr	r2, [r4, #16]
 8012406:	6022      	str	r2, [r4, #0]
 8012408:	d504      	bpl.n	8012414 <__sflush_r+0x7c>
 801240a:	1c42      	adds	r2, r0, #1
 801240c:	d101      	bne.n	8012412 <__sflush_r+0x7a>
 801240e:	682b      	ldr	r3, [r5, #0]
 8012410:	b903      	cbnz	r3, 8012414 <__sflush_r+0x7c>
 8012412:	6560      	str	r0, [r4, #84]	; 0x54
 8012414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012416:	602f      	str	r7, [r5, #0]
 8012418:	2900      	cmp	r1, #0
 801241a:	d0ca      	beq.n	80123b2 <__sflush_r+0x1a>
 801241c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012420:	4299      	cmp	r1, r3
 8012422:	d002      	beq.n	801242a <__sflush_r+0x92>
 8012424:	4628      	mov	r0, r5
 8012426:	f7ff fb49 	bl	8011abc <_free_r>
 801242a:	2000      	movs	r0, #0
 801242c:	6360      	str	r0, [r4, #52]	; 0x34
 801242e:	e7c1      	b.n	80123b4 <__sflush_r+0x1c>
 8012430:	6a21      	ldr	r1, [r4, #32]
 8012432:	2301      	movs	r3, #1
 8012434:	4628      	mov	r0, r5
 8012436:	47b0      	blx	r6
 8012438:	1c41      	adds	r1, r0, #1
 801243a:	d1c7      	bne.n	80123cc <__sflush_r+0x34>
 801243c:	682b      	ldr	r3, [r5, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d0c4      	beq.n	80123cc <__sflush_r+0x34>
 8012442:	2b1d      	cmp	r3, #29
 8012444:	d001      	beq.n	801244a <__sflush_r+0xb2>
 8012446:	2b16      	cmp	r3, #22
 8012448:	d101      	bne.n	801244e <__sflush_r+0xb6>
 801244a:	602f      	str	r7, [r5, #0]
 801244c:	e7b1      	b.n	80123b2 <__sflush_r+0x1a>
 801244e:	89a3      	ldrh	r3, [r4, #12]
 8012450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012454:	81a3      	strh	r3, [r4, #12]
 8012456:	e7ad      	b.n	80123b4 <__sflush_r+0x1c>
 8012458:	690f      	ldr	r7, [r1, #16]
 801245a:	2f00      	cmp	r7, #0
 801245c:	d0a9      	beq.n	80123b2 <__sflush_r+0x1a>
 801245e:	0793      	lsls	r3, r2, #30
 8012460:	680e      	ldr	r6, [r1, #0]
 8012462:	bf08      	it	eq
 8012464:	694b      	ldreq	r3, [r1, #20]
 8012466:	600f      	str	r7, [r1, #0]
 8012468:	bf18      	it	ne
 801246a:	2300      	movne	r3, #0
 801246c:	eba6 0807 	sub.w	r8, r6, r7
 8012470:	608b      	str	r3, [r1, #8]
 8012472:	f1b8 0f00 	cmp.w	r8, #0
 8012476:	dd9c      	ble.n	80123b2 <__sflush_r+0x1a>
 8012478:	6a21      	ldr	r1, [r4, #32]
 801247a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801247c:	4643      	mov	r3, r8
 801247e:	463a      	mov	r2, r7
 8012480:	4628      	mov	r0, r5
 8012482:	47b0      	blx	r6
 8012484:	2800      	cmp	r0, #0
 8012486:	dc06      	bgt.n	8012496 <__sflush_r+0xfe>
 8012488:	89a3      	ldrh	r3, [r4, #12]
 801248a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801248e:	81a3      	strh	r3, [r4, #12]
 8012490:	f04f 30ff 	mov.w	r0, #4294967295
 8012494:	e78e      	b.n	80123b4 <__sflush_r+0x1c>
 8012496:	4407      	add	r7, r0
 8012498:	eba8 0800 	sub.w	r8, r8, r0
 801249c:	e7e9      	b.n	8012472 <__sflush_r+0xda>
 801249e:	bf00      	nop
 80124a0:	20400001 	.word	0x20400001

080124a4 <_fflush_r>:
 80124a4:	b538      	push	{r3, r4, r5, lr}
 80124a6:	690b      	ldr	r3, [r1, #16]
 80124a8:	4605      	mov	r5, r0
 80124aa:	460c      	mov	r4, r1
 80124ac:	b913      	cbnz	r3, 80124b4 <_fflush_r+0x10>
 80124ae:	2500      	movs	r5, #0
 80124b0:	4628      	mov	r0, r5
 80124b2:	bd38      	pop	{r3, r4, r5, pc}
 80124b4:	b118      	cbz	r0, 80124be <_fflush_r+0x1a>
 80124b6:	6983      	ldr	r3, [r0, #24]
 80124b8:	b90b      	cbnz	r3, 80124be <_fflush_r+0x1a>
 80124ba:	f000 f887 	bl	80125cc <__sinit>
 80124be:	4b14      	ldr	r3, [pc, #80]	; (8012510 <_fflush_r+0x6c>)
 80124c0:	429c      	cmp	r4, r3
 80124c2:	d11b      	bne.n	80124fc <_fflush_r+0x58>
 80124c4:	686c      	ldr	r4, [r5, #4]
 80124c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d0ef      	beq.n	80124ae <_fflush_r+0xa>
 80124ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124d0:	07d0      	lsls	r0, r2, #31
 80124d2:	d404      	bmi.n	80124de <_fflush_r+0x3a>
 80124d4:	0599      	lsls	r1, r3, #22
 80124d6:	d402      	bmi.n	80124de <_fflush_r+0x3a>
 80124d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124da:	f000 f915 	bl	8012708 <__retarget_lock_acquire_recursive>
 80124de:	4628      	mov	r0, r5
 80124e0:	4621      	mov	r1, r4
 80124e2:	f7ff ff59 	bl	8012398 <__sflush_r>
 80124e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124e8:	07da      	lsls	r2, r3, #31
 80124ea:	4605      	mov	r5, r0
 80124ec:	d4e0      	bmi.n	80124b0 <_fflush_r+0xc>
 80124ee:	89a3      	ldrh	r3, [r4, #12]
 80124f0:	059b      	lsls	r3, r3, #22
 80124f2:	d4dd      	bmi.n	80124b0 <_fflush_r+0xc>
 80124f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124f6:	f000 f908 	bl	801270a <__retarget_lock_release_recursive>
 80124fa:	e7d9      	b.n	80124b0 <_fflush_r+0xc>
 80124fc:	4b05      	ldr	r3, [pc, #20]	; (8012514 <_fflush_r+0x70>)
 80124fe:	429c      	cmp	r4, r3
 8012500:	d101      	bne.n	8012506 <_fflush_r+0x62>
 8012502:	68ac      	ldr	r4, [r5, #8]
 8012504:	e7df      	b.n	80124c6 <_fflush_r+0x22>
 8012506:	4b04      	ldr	r3, [pc, #16]	; (8012518 <_fflush_r+0x74>)
 8012508:	429c      	cmp	r4, r3
 801250a:	bf08      	it	eq
 801250c:	68ec      	ldreq	r4, [r5, #12]
 801250e:	e7da      	b.n	80124c6 <_fflush_r+0x22>
 8012510:	0801d410 	.word	0x0801d410
 8012514:	0801d430 	.word	0x0801d430
 8012518:	0801d3f0 	.word	0x0801d3f0

0801251c <std>:
 801251c:	2300      	movs	r3, #0
 801251e:	b510      	push	{r4, lr}
 8012520:	4604      	mov	r4, r0
 8012522:	e9c0 3300 	strd	r3, r3, [r0]
 8012526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801252a:	6083      	str	r3, [r0, #8]
 801252c:	8181      	strh	r1, [r0, #12]
 801252e:	6643      	str	r3, [r0, #100]	; 0x64
 8012530:	81c2      	strh	r2, [r0, #14]
 8012532:	6183      	str	r3, [r0, #24]
 8012534:	4619      	mov	r1, r3
 8012536:	2208      	movs	r2, #8
 8012538:	305c      	adds	r0, #92	; 0x5c
 801253a:	f7fd fb45 	bl	800fbc8 <memset>
 801253e:	4b05      	ldr	r3, [pc, #20]	; (8012554 <std+0x38>)
 8012540:	6263      	str	r3, [r4, #36]	; 0x24
 8012542:	4b05      	ldr	r3, [pc, #20]	; (8012558 <std+0x3c>)
 8012544:	62a3      	str	r3, [r4, #40]	; 0x28
 8012546:	4b05      	ldr	r3, [pc, #20]	; (801255c <std+0x40>)
 8012548:	62e3      	str	r3, [r4, #44]	; 0x2c
 801254a:	4b05      	ldr	r3, [pc, #20]	; (8012560 <std+0x44>)
 801254c:	6224      	str	r4, [r4, #32]
 801254e:	6323      	str	r3, [r4, #48]	; 0x30
 8012550:	bd10      	pop	{r4, pc}
 8012552:	bf00      	nop
 8012554:	08012931 	.word	0x08012931
 8012558:	08012953 	.word	0x08012953
 801255c:	0801298b 	.word	0x0801298b
 8012560:	080129af 	.word	0x080129af

08012564 <_cleanup_r>:
 8012564:	4901      	ldr	r1, [pc, #4]	; (801256c <_cleanup_r+0x8>)
 8012566:	f000 b8af 	b.w	80126c8 <_fwalk_reent>
 801256a:	bf00      	nop
 801256c:	080124a5 	.word	0x080124a5

08012570 <__sfmoreglue>:
 8012570:	b570      	push	{r4, r5, r6, lr}
 8012572:	2268      	movs	r2, #104	; 0x68
 8012574:	1e4d      	subs	r5, r1, #1
 8012576:	4355      	muls	r5, r2
 8012578:	460e      	mov	r6, r1
 801257a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801257e:	f7ff fb09 	bl	8011b94 <_malloc_r>
 8012582:	4604      	mov	r4, r0
 8012584:	b140      	cbz	r0, 8012598 <__sfmoreglue+0x28>
 8012586:	2100      	movs	r1, #0
 8012588:	e9c0 1600 	strd	r1, r6, [r0]
 801258c:	300c      	adds	r0, #12
 801258e:	60a0      	str	r0, [r4, #8]
 8012590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012594:	f7fd fb18 	bl	800fbc8 <memset>
 8012598:	4620      	mov	r0, r4
 801259a:	bd70      	pop	{r4, r5, r6, pc}

0801259c <__sfp_lock_acquire>:
 801259c:	4801      	ldr	r0, [pc, #4]	; (80125a4 <__sfp_lock_acquire+0x8>)
 801259e:	f000 b8b3 	b.w	8012708 <__retarget_lock_acquire_recursive>
 80125a2:	bf00      	nop
 80125a4:	2400e4e1 	.word	0x2400e4e1

080125a8 <__sfp_lock_release>:
 80125a8:	4801      	ldr	r0, [pc, #4]	; (80125b0 <__sfp_lock_release+0x8>)
 80125aa:	f000 b8ae 	b.w	801270a <__retarget_lock_release_recursive>
 80125ae:	bf00      	nop
 80125b0:	2400e4e1 	.word	0x2400e4e1

080125b4 <__sinit_lock_acquire>:
 80125b4:	4801      	ldr	r0, [pc, #4]	; (80125bc <__sinit_lock_acquire+0x8>)
 80125b6:	f000 b8a7 	b.w	8012708 <__retarget_lock_acquire_recursive>
 80125ba:	bf00      	nop
 80125bc:	2400e4e2 	.word	0x2400e4e2

080125c0 <__sinit_lock_release>:
 80125c0:	4801      	ldr	r0, [pc, #4]	; (80125c8 <__sinit_lock_release+0x8>)
 80125c2:	f000 b8a2 	b.w	801270a <__retarget_lock_release_recursive>
 80125c6:	bf00      	nop
 80125c8:	2400e4e2 	.word	0x2400e4e2

080125cc <__sinit>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	4604      	mov	r4, r0
 80125d0:	f7ff fff0 	bl	80125b4 <__sinit_lock_acquire>
 80125d4:	69a3      	ldr	r3, [r4, #24]
 80125d6:	b11b      	cbz	r3, 80125e0 <__sinit+0x14>
 80125d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125dc:	f7ff bff0 	b.w	80125c0 <__sinit_lock_release>
 80125e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125e4:	6523      	str	r3, [r4, #80]	; 0x50
 80125e6:	4b13      	ldr	r3, [pc, #76]	; (8012634 <__sinit+0x68>)
 80125e8:	4a13      	ldr	r2, [pc, #76]	; (8012638 <__sinit+0x6c>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80125ee:	42a3      	cmp	r3, r4
 80125f0:	bf04      	itt	eq
 80125f2:	2301      	moveq	r3, #1
 80125f4:	61a3      	streq	r3, [r4, #24]
 80125f6:	4620      	mov	r0, r4
 80125f8:	f000 f820 	bl	801263c <__sfp>
 80125fc:	6060      	str	r0, [r4, #4]
 80125fe:	4620      	mov	r0, r4
 8012600:	f000 f81c 	bl	801263c <__sfp>
 8012604:	60a0      	str	r0, [r4, #8]
 8012606:	4620      	mov	r0, r4
 8012608:	f000 f818 	bl	801263c <__sfp>
 801260c:	2200      	movs	r2, #0
 801260e:	60e0      	str	r0, [r4, #12]
 8012610:	2104      	movs	r1, #4
 8012612:	6860      	ldr	r0, [r4, #4]
 8012614:	f7ff ff82 	bl	801251c <std>
 8012618:	68a0      	ldr	r0, [r4, #8]
 801261a:	2201      	movs	r2, #1
 801261c:	2109      	movs	r1, #9
 801261e:	f7ff ff7d 	bl	801251c <std>
 8012622:	68e0      	ldr	r0, [r4, #12]
 8012624:	2202      	movs	r2, #2
 8012626:	2112      	movs	r1, #18
 8012628:	f7ff ff78 	bl	801251c <std>
 801262c:	2301      	movs	r3, #1
 801262e:	61a3      	str	r3, [r4, #24]
 8012630:	e7d2      	b.n	80125d8 <__sinit+0xc>
 8012632:	bf00      	nop
 8012634:	0801d0c8 	.word	0x0801d0c8
 8012638:	08012565 	.word	0x08012565

0801263c <__sfp>:
 801263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263e:	4607      	mov	r7, r0
 8012640:	f7ff ffac 	bl	801259c <__sfp_lock_acquire>
 8012644:	4b1e      	ldr	r3, [pc, #120]	; (80126c0 <__sfp+0x84>)
 8012646:	681e      	ldr	r6, [r3, #0]
 8012648:	69b3      	ldr	r3, [r6, #24]
 801264a:	b913      	cbnz	r3, 8012652 <__sfp+0x16>
 801264c:	4630      	mov	r0, r6
 801264e:	f7ff ffbd 	bl	80125cc <__sinit>
 8012652:	3648      	adds	r6, #72	; 0x48
 8012654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012658:	3b01      	subs	r3, #1
 801265a:	d503      	bpl.n	8012664 <__sfp+0x28>
 801265c:	6833      	ldr	r3, [r6, #0]
 801265e:	b30b      	cbz	r3, 80126a4 <__sfp+0x68>
 8012660:	6836      	ldr	r6, [r6, #0]
 8012662:	e7f7      	b.n	8012654 <__sfp+0x18>
 8012664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012668:	b9d5      	cbnz	r5, 80126a0 <__sfp+0x64>
 801266a:	4b16      	ldr	r3, [pc, #88]	; (80126c4 <__sfp+0x88>)
 801266c:	60e3      	str	r3, [r4, #12]
 801266e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012672:	6665      	str	r5, [r4, #100]	; 0x64
 8012674:	f000 f847 	bl	8012706 <__retarget_lock_init_recursive>
 8012678:	f7ff ff96 	bl	80125a8 <__sfp_lock_release>
 801267c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012684:	6025      	str	r5, [r4, #0]
 8012686:	61a5      	str	r5, [r4, #24]
 8012688:	2208      	movs	r2, #8
 801268a:	4629      	mov	r1, r5
 801268c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012690:	f7fd fa9a 	bl	800fbc8 <memset>
 8012694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801269c:	4620      	mov	r0, r4
 801269e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126a0:	3468      	adds	r4, #104	; 0x68
 80126a2:	e7d9      	b.n	8012658 <__sfp+0x1c>
 80126a4:	2104      	movs	r1, #4
 80126a6:	4638      	mov	r0, r7
 80126a8:	f7ff ff62 	bl	8012570 <__sfmoreglue>
 80126ac:	4604      	mov	r4, r0
 80126ae:	6030      	str	r0, [r6, #0]
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d1d5      	bne.n	8012660 <__sfp+0x24>
 80126b4:	f7ff ff78 	bl	80125a8 <__sfp_lock_release>
 80126b8:	230c      	movs	r3, #12
 80126ba:	603b      	str	r3, [r7, #0]
 80126bc:	e7ee      	b.n	801269c <__sfp+0x60>
 80126be:	bf00      	nop
 80126c0:	0801d0c8 	.word	0x0801d0c8
 80126c4:	ffff0001 	.word	0xffff0001

080126c8 <_fwalk_reent>:
 80126c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126cc:	4606      	mov	r6, r0
 80126ce:	4688      	mov	r8, r1
 80126d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126d4:	2700      	movs	r7, #0
 80126d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126da:	f1b9 0901 	subs.w	r9, r9, #1
 80126de:	d505      	bpl.n	80126ec <_fwalk_reent+0x24>
 80126e0:	6824      	ldr	r4, [r4, #0]
 80126e2:	2c00      	cmp	r4, #0
 80126e4:	d1f7      	bne.n	80126d6 <_fwalk_reent+0xe>
 80126e6:	4638      	mov	r0, r7
 80126e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ec:	89ab      	ldrh	r3, [r5, #12]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d907      	bls.n	8012702 <_fwalk_reent+0x3a>
 80126f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126f6:	3301      	adds	r3, #1
 80126f8:	d003      	beq.n	8012702 <_fwalk_reent+0x3a>
 80126fa:	4629      	mov	r1, r5
 80126fc:	4630      	mov	r0, r6
 80126fe:	47c0      	blx	r8
 8012700:	4307      	orrs	r7, r0
 8012702:	3568      	adds	r5, #104	; 0x68
 8012704:	e7e9      	b.n	80126da <_fwalk_reent+0x12>

08012706 <__retarget_lock_init_recursive>:
 8012706:	4770      	bx	lr

08012708 <__retarget_lock_acquire_recursive>:
 8012708:	4770      	bx	lr

0801270a <__retarget_lock_release_recursive>:
 801270a:	4770      	bx	lr

0801270c <__swhatbuf_r>:
 801270c:	b570      	push	{r4, r5, r6, lr}
 801270e:	460e      	mov	r6, r1
 8012710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012714:	2900      	cmp	r1, #0
 8012716:	b096      	sub	sp, #88	; 0x58
 8012718:	4614      	mov	r4, r2
 801271a:	461d      	mov	r5, r3
 801271c:	da08      	bge.n	8012730 <__swhatbuf_r+0x24>
 801271e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012722:	2200      	movs	r2, #0
 8012724:	602a      	str	r2, [r5, #0]
 8012726:	061a      	lsls	r2, r3, #24
 8012728:	d410      	bmi.n	801274c <__swhatbuf_r+0x40>
 801272a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801272e:	e00e      	b.n	801274e <__swhatbuf_r+0x42>
 8012730:	466a      	mov	r2, sp
 8012732:	f000 f96f 	bl	8012a14 <_fstat_r>
 8012736:	2800      	cmp	r0, #0
 8012738:	dbf1      	blt.n	801271e <__swhatbuf_r+0x12>
 801273a:	9a01      	ldr	r2, [sp, #4]
 801273c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012744:	425a      	negs	r2, r3
 8012746:	415a      	adcs	r2, r3
 8012748:	602a      	str	r2, [r5, #0]
 801274a:	e7ee      	b.n	801272a <__swhatbuf_r+0x1e>
 801274c:	2340      	movs	r3, #64	; 0x40
 801274e:	2000      	movs	r0, #0
 8012750:	6023      	str	r3, [r4, #0]
 8012752:	b016      	add	sp, #88	; 0x58
 8012754:	bd70      	pop	{r4, r5, r6, pc}
	...

08012758 <__smakebuf_r>:
 8012758:	898b      	ldrh	r3, [r1, #12]
 801275a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801275c:	079d      	lsls	r5, r3, #30
 801275e:	4606      	mov	r6, r0
 8012760:	460c      	mov	r4, r1
 8012762:	d507      	bpl.n	8012774 <__smakebuf_r+0x1c>
 8012764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012768:	6023      	str	r3, [r4, #0]
 801276a:	6123      	str	r3, [r4, #16]
 801276c:	2301      	movs	r3, #1
 801276e:	6163      	str	r3, [r4, #20]
 8012770:	b002      	add	sp, #8
 8012772:	bd70      	pop	{r4, r5, r6, pc}
 8012774:	ab01      	add	r3, sp, #4
 8012776:	466a      	mov	r2, sp
 8012778:	f7ff ffc8 	bl	801270c <__swhatbuf_r>
 801277c:	9900      	ldr	r1, [sp, #0]
 801277e:	4605      	mov	r5, r0
 8012780:	4630      	mov	r0, r6
 8012782:	f7ff fa07 	bl	8011b94 <_malloc_r>
 8012786:	b948      	cbnz	r0, 801279c <__smakebuf_r+0x44>
 8012788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801278c:	059a      	lsls	r2, r3, #22
 801278e:	d4ef      	bmi.n	8012770 <__smakebuf_r+0x18>
 8012790:	f023 0303 	bic.w	r3, r3, #3
 8012794:	f043 0302 	orr.w	r3, r3, #2
 8012798:	81a3      	strh	r3, [r4, #12]
 801279a:	e7e3      	b.n	8012764 <__smakebuf_r+0xc>
 801279c:	4b0d      	ldr	r3, [pc, #52]	; (80127d4 <__smakebuf_r+0x7c>)
 801279e:	62b3      	str	r3, [r6, #40]	; 0x28
 80127a0:	89a3      	ldrh	r3, [r4, #12]
 80127a2:	6020      	str	r0, [r4, #0]
 80127a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127a8:	81a3      	strh	r3, [r4, #12]
 80127aa:	9b00      	ldr	r3, [sp, #0]
 80127ac:	6163      	str	r3, [r4, #20]
 80127ae:	9b01      	ldr	r3, [sp, #4]
 80127b0:	6120      	str	r0, [r4, #16]
 80127b2:	b15b      	cbz	r3, 80127cc <__smakebuf_r+0x74>
 80127b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127b8:	4630      	mov	r0, r6
 80127ba:	f000 f93d 	bl	8012a38 <_isatty_r>
 80127be:	b128      	cbz	r0, 80127cc <__smakebuf_r+0x74>
 80127c0:	89a3      	ldrh	r3, [r4, #12]
 80127c2:	f023 0303 	bic.w	r3, r3, #3
 80127c6:	f043 0301 	orr.w	r3, r3, #1
 80127ca:	81a3      	strh	r3, [r4, #12]
 80127cc:	89a0      	ldrh	r0, [r4, #12]
 80127ce:	4305      	orrs	r5, r0
 80127d0:	81a5      	strh	r5, [r4, #12]
 80127d2:	e7cd      	b.n	8012770 <__smakebuf_r+0x18>
 80127d4:	08012565 	.word	0x08012565

080127d8 <__ascii_mbtowc>:
 80127d8:	b082      	sub	sp, #8
 80127da:	b901      	cbnz	r1, 80127de <__ascii_mbtowc+0x6>
 80127dc:	a901      	add	r1, sp, #4
 80127de:	b142      	cbz	r2, 80127f2 <__ascii_mbtowc+0x1a>
 80127e0:	b14b      	cbz	r3, 80127f6 <__ascii_mbtowc+0x1e>
 80127e2:	7813      	ldrb	r3, [r2, #0]
 80127e4:	600b      	str	r3, [r1, #0]
 80127e6:	7812      	ldrb	r2, [r2, #0]
 80127e8:	1e10      	subs	r0, r2, #0
 80127ea:	bf18      	it	ne
 80127ec:	2001      	movne	r0, #1
 80127ee:	b002      	add	sp, #8
 80127f0:	4770      	bx	lr
 80127f2:	4610      	mov	r0, r2
 80127f4:	e7fb      	b.n	80127ee <__ascii_mbtowc+0x16>
 80127f6:	f06f 0001 	mvn.w	r0, #1
 80127fa:	e7f8      	b.n	80127ee <__ascii_mbtowc+0x16>

080127fc <memmove>:
 80127fc:	4288      	cmp	r0, r1
 80127fe:	b510      	push	{r4, lr}
 8012800:	eb01 0402 	add.w	r4, r1, r2
 8012804:	d902      	bls.n	801280c <memmove+0x10>
 8012806:	4284      	cmp	r4, r0
 8012808:	4623      	mov	r3, r4
 801280a:	d807      	bhi.n	801281c <memmove+0x20>
 801280c:	1e43      	subs	r3, r0, #1
 801280e:	42a1      	cmp	r1, r4
 8012810:	d008      	beq.n	8012824 <memmove+0x28>
 8012812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012816:	f803 2f01 	strb.w	r2, [r3, #1]!
 801281a:	e7f8      	b.n	801280e <memmove+0x12>
 801281c:	4402      	add	r2, r0
 801281e:	4601      	mov	r1, r0
 8012820:	428a      	cmp	r2, r1
 8012822:	d100      	bne.n	8012826 <memmove+0x2a>
 8012824:	bd10      	pop	{r4, pc}
 8012826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801282a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801282e:	e7f7      	b.n	8012820 <memmove+0x24>

08012830 <__malloc_lock>:
 8012830:	4801      	ldr	r0, [pc, #4]	; (8012838 <__malloc_lock+0x8>)
 8012832:	f7ff bf69 	b.w	8012708 <__retarget_lock_acquire_recursive>
 8012836:	bf00      	nop
 8012838:	2400e4e0 	.word	0x2400e4e0

0801283c <__malloc_unlock>:
 801283c:	4801      	ldr	r0, [pc, #4]	; (8012844 <__malloc_unlock+0x8>)
 801283e:	f7ff bf64 	b.w	801270a <__retarget_lock_release_recursive>
 8012842:	bf00      	nop
 8012844:	2400e4e0 	.word	0x2400e4e0

08012848 <_realloc_r>:
 8012848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801284c:	4680      	mov	r8, r0
 801284e:	4614      	mov	r4, r2
 8012850:	460e      	mov	r6, r1
 8012852:	b921      	cbnz	r1, 801285e <_realloc_r+0x16>
 8012854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012858:	4611      	mov	r1, r2
 801285a:	f7ff b99b 	b.w	8011b94 <_malloc_r>
 801285e:	b92a      	cbnz	r2, 801286c <_realloc_r+0x24>
 8012860:	f7ff f92c 	bl	8011abc <_free_r>
 8012864:	4625      	mov	r5, r4
 8012866:	4628      	mov	r0, r5
 8012868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801286c:	f000 f906 	bl	8012a7c <_malloc_usable_size_r>
 8012870:	4284      	cmp	r4, r0
 8012872:	4607      	mov	r7, r0
 8012874:	d802      	bhi.n	801287c <_realloc_r+0x34>
 8012876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801287a:	d812      	bhi.n	80128a2 <_realloc_r+0x5a>
 801287c:	4621      	mov	r1, r4
 801287e:	4640      	mov	r0, r8
 8012880:	f7ff f988 	bl	8011b94 <_malloc_r>
 8012884:	4605      	mov	r5, r0
 8012886:	2800      	cmp	r0, #0
 8012888:	d0ed      	beq.n	8012866 <_realloc_r+0x1e>
 801288a:	42bc      	cmp	r4, r7
 801288c:	4622      	mov	r2, r4
 801288e:	4631      	mov	r1, r6
 8012890:	bf28      	it	cs
 8012892:	463a      	movcs	r2, r7
 8012894:	f7fd f98a 	bl	800fbac <memcpy>
 8012898:	4631      	mov	r1, r6
 801289a:	4640      	mov	r0, r8
 801289c:	f7ff f90e 	bl	8011abc <_free_r>
 80128a0:	e7e1      	b.n	8012866 <_realloc_r+0x1e>
 80128a2:	4635      	mov	r5, r6
 80128a4:	e7df      	b.n	8012866 <_realloc_r+0x1e>

080128a6 <_raise_r>:
 80128a6:	291f      	cmp	r1, #31
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4604      	mov	r4, r0
 80128ac:	460d      	mov	r5, r1
 80128ae:	d904      	bls.n	80128ba <_raise_r+0x14>
 80128b0:	2316      	movs	r3, #22
 80128b2:	6003      	str	r3, [r0, #0]
 80128b4:	f04f 30ff 	mov.w	r0, #4294967295
 80128b8:	bd38      	pop	{r3, r4, r5, pc}
 80128ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80128bc:	b112      	cbz	r2, 80128c4 <_raise_r+0x1e>
 80128be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80128c2:	b94b      	cbnz	r3, 80128d8 <_raise_r+0x32>
 80128c4:	4620      	mov	r0, r4
 80128c6:	f000 f831 	bl	801292c <_getpid_r>
 80128ca:	462a      	mov	r2, r5
 80128cc:	4601      	mov	r1, r0
 80128ce:	4620      	mov	r0, r4
 80128d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128d4:	f000 b818 	b.w	8012908 <_kill_r>
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d00a      	beq.n	80128f2 <_raise_r+0x4c>
 80128dc:	1c59      	adds	r1, r3, #1
 80128de:	d103      	bne.n	80128e8 <_raise_r+0x42>
 80128e0:	2316      	movs	r3, #22
 80128e2:	6003      	str	r3, [r0, #0]
 80128e4:	2001      	movs	r0, #1
 80128e6:	e7e7      	b.n	80128b8 <_raise_r+0x12>
 80128e8:	2400      	movs	r4, #0
 80128ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80128ee:	4628      	mov	r0, r5
 80128f0:	4798      	blx	r3
 80128f2:	2000      	movs	r0, #0
 80128f4:	e7e0      	b.n	80128b8 <_raise_r+0x12>
	...

080128f8 <raise>:
 80128f8:	4b02      	ldr	r3, [pc, #8]	; (8012904 <raise+0xc>)
 80128fa:	4601      	mov	r1, r0
 80128fc:	6818      	ldr	r0, [r3, #0]
 80128fe:	f7ff bfd2 	b.w	80128a6 <_raise_r>
 8012902:	bf00      	nop
 8012904:	24000498 	.word	0x24000498

08012908 <_kill_r>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	4d07      	ldr	r5, [pc, #28]	; (8012928 <_kill_r+0x20>)
 801290c:	2300      	movs	r3, #0
 801290e:	4604      	mov	r4, r0
 8012910:	4608      	mov	r0, r1
 8012912:	4611      	mov	r1, r2
 8012914:	602b      	str	r3, [r5, #0]
 8012916:	f7f2 fe17 	bl	8005548 <_kill>
 801291a:	1c43      	adds	r3, r0, #1
 801291c:	d102      	bne.n	8012924 <_kill_r+0x1c>
 801291e:	682b      	ldr	r3, [r5, #0]
 8012920:	b103      	cbz	r3, 8012924 <_kill_r+0x1c>
 8012922:	6023      	str	r3, [r4, #0]
 8012924:	bd38      	pop	{r3, r4, r5, pc}
 8012926:	bf00      	nop
 8012928:	2400e4e4 	.word	0x2400e4e4

0801292c <_getpid_r>:
 801292c:	f7f2 be0a 	b.w	8005544 <_getpid>

08012930 <__sread>:
 8012930:	b510      	push	{r4, lr}
 8012932:	460c      	mov	r4, r1
 8012934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012938:	f000 f8a8 	bl	8012a8c <_read_r>
 801293c:	2800      	cmp	r0, #0
 801293e:	bfab      	itete	ge
 8012940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012942:	89a3      	ldrhlt	r3, [r4, #12]
 8012944:	181b      	addge	r3, r3, r0
 8012946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801294a:	bfac      	ite	ge
 801294c:	6563      	strge	r3, [r4, #84]	; 0x54
 801294e:	81a3      	strhlt	r3, [r4, #12]
 8012950:	bd10      	pop	{r4, pc}

08012952 <__swrite>:
 8012952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012956:	461f      	mov	r7, r3
 8012958:	898b      	ldrh	r3, [r1, #12]
 801295a:	05db      	lsls	r3, r3, #23
 801295c:	4605      	mov	r5, r0
 801295e:	460c      	mov	r4, r1
 8012960:	4616      	mov	r6, r2
 8012962:	d505      	bpl.n	8012970 <__swrite+0x1e>
 8012964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012968:	2302      	movs	r3, #2
 801296a:	2200      	movs	r2, #0
 801296c:	f000 f874 	bl	8012a58 <_lseek_r>
 8012970:	89a3      	ldrh	r3, [r4, #12]
 8012972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801297a:	81a3      	strh	r3, [r4, #12]
 801297c:	4632      	mov	r2, r6
 801297e:	463b      	mov	r3, r7
 8012980:	4628      	mov	r0, r5
 8012982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012986:	f000 b823 	b.w	80129d0 <_write_r>

0801298a <__sseek>:
 801298a:	b510      	push	{r4, lr}
 801298c:	460c      	mov	r4, r1
 801298e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012992:	f000 f861 	bl	8012a58 <_lseek_r>
 8012996:	1c43      	adds	r3, r0, #1
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	bf15      	itete	ne
 801299c:	6560      	strne	r0, [r4, #84]	; 0x54
 801299e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129a6:	81a3      	strheq	r3, [r4, #12]
 80129a8:	bf18      	it	ne
 80129aa:	81a3      	strhne	r3, [r4, #12]
 80129ac:	bd10      	pop	{r4, pc}

080129ae <__sclose>:
 80129ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129b2:	f000 b81f 	b.w	80129f4 <_close_r>

080129b6 <__ascii_wctomb>:
 80129b6:	b149      	cbz	r1, 80129cc <__ascii_wctomb+0x16>
 80129b8:	2aff      	cmp	r2, #255	; 0xff
 80129ba:	bf85      	ittet	hi
 80129bc:	238a      	movhi	r3, #138	; 0x8a
 80129be:	6003      	strhi	r3, [r0, #0]
 80129c0:	700a      	strbls	r2, [r1, #0]
 80129c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80129c6:	bf98      	it	ls
 80129c8:	2001      	movls	r0, #1
 80129ca:	4770      	bx	lr
 80129cc:	4608      	mov	r0, r1
 80129ce:	4770      	bx	lr

080129d0 <_write_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	4d07      	ldr	r5, [pc, #28]	; (80129f0 <_write_r+0x20>)
 80129d4:	4604      	mov	r4, r0
 80129d6:	4608      	mov	r0, r1
 80129d8:	4611      	mov	r1, r2
 80129da:	2200      	movs	r2, #0
 80129dc:	602a      	str	r2, [r5, #0]
 80129de:	461a      	mov	r2, r3
 80129e0:	f7f2 fdd0 	bl	8005584 <_write>
 80129e4:	1c43      	adds	r3, r0, #1
 80129e6:	d102      	bne.n	80129ee <_write_r+0x1e>
 80129e8:	682b      	ldr	r3, [r5, #0]
 80129ea:	b103      	cbz	r3, 80129ee <_write_r+0x1e>
 80129ec:	6023      	str	r3, [r4, #0]
 80129ee:	bd38      	pop	{r3, r4, r5, pc}
 80129f0:	2400e4e4 	.word	0x2400e4e4

080129f4 <_close_r>:
 80129f4:	b538      	push	{r3, r4, r5, lr}
 80129f6:	4d06      	ldr	r5, [pc, #24]	; (8012a10 <_close_r+0x1c>)
 80129f8:	2300      	movs	r3, #0
 80129fa:	4604      	mov	r4, r0
 80129fc:	4608      	mov	r0, r1
 80129fe:	602b      	str	r3, [r5, #0]
 8012a00:	f7f2 fdce 	bl	80055a0 <_close>
 8012a04:	1c43      	adds	r3, r0, #1
 8012a06:	d102      	bne.n	8012a0e <_close_r+0x1a>
 8012a08:	682b      	ldr	r3, [r5, #0]
 8012a0a:	b103      	cbz	r3, 8012a0e <_close_r+0x1a>
 8012a0c:	6023      	str	r3, [r4, #0]
 8012a0e:	bd38      	pop	{r3, r4, r5, pc}
 8012a10:	2400e4e4 	.word	0x2400e4e4

08012a14 <_fstat_r>:
 8012a14:	b538      	push	{r3, r4, r5, lr}
 8012a16:	4d07      	ldr	r5, [pc, #28]	; (8012a34 <_fstat_r+0x20>)
 8012a18:	2300      	movs	r3, #0
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4608      	mov	r0, r1
 8012a1e:	4611      	mov	r1, r2
 8012a20:	602b      	str	r3, [r5, #0]
 8012a22:	f7f2 fdc1 	bl	80055a8 <_fstat>
 8012a26:	1c43      	adds	r3, r0, #1
 8012a28:	d102      	bne.n	8012a30 <_fstat_r+0x1c>
 8012a2a:	682b      	ldr	r3, [r5, #0]
 8012a2c:	b103      	cbz	r3, 8012a30 <_fstat_r+0x1c>
 8012a2e:	6023      	str	r3, [r4, #0]
 8012a30:	bd38      	pop	{r3, r4, r5, pc}
 8012a32:	bf00      	nop
 8012a34:	2400e4e4 	.word	0x2400e4e4

08012a38 <_isatty_r>:
 8012a38:	b538      	push	{r3, r4, r5, lr}
 8012a3a:	4d06      	ldr	r5, [pc, #24]	; (8012a54 <_isatty_r+0x1c>)
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	4604      	mov	r4, r0
 8012a40:	4608      	mov	r0, r1
 8012a42:	602b      	str	r3, [r5, #0]
 8012a44:	f7f2 fdb6 	bl	80055b4 <_isatty>
 8012a48:	1c43      	adds	r3, r0, #1
 8012a4a:	d102      	bne.n	8012a52 <_isatty_r+0x1a>
 8012a4c:	682b      	ldr	r3, [r5, #0]
 8012a4e:	b103      	cbz	r3, 8012a52 <_isatty_r+0x1a>
 8012a50:	6023      	str	r3, [r4, #0]
 8012a52:	bd38      	pop	{r3, r4, r5, pc}
 8012a54:	2400e4e4 	.word	0x2400e4e4

08012a58 <_lseek_r>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	4d07      	ldr	r5, [pc, #28]	; (8012a78 <_lseek_r+0x20>)
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	4608      	mov	r0, r1
 8012a60:	4611      	mov	r1, r2
 8012a62:	2200      	movs	r2, #0
 8012a64:	602a      	str	r2, [r5, #0]
 8012a66:	461a      	mov	r2, r3
 8012a68:	f7f2 fda6 	bl	80055b8 <_lseek>
 8012a6c:	1c43      	adds	r3, r0, #1
 8012a6e:	d102      	bne.n	8012a76 <_lseek_r+0x1e>
 8012a70:	682b      	ldr	r3, [r5, #0]
 8012a72:	b103      	cbz	r3, 8012a76 <_lseek_r+0x1e>
 8012a74:	6023      	str	r3, [r4, #0]
 8012a76:	bd38      	pop	{r3, r4, r5, pc}
 8012a78:	2400e4e4 	.word	0x2400e4e4

08012a7c <_malloc_usable_size_r>:
 8012a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a80:	1f18      	subs	r0, r3, #4
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	bfbc      	itt	lt
 8012a86:	580b      	ldrlt	r3, [r1, r0]
 8012a88:	18c0      	addlt	r0, r0, r3
 8012a8a:	4770      	bx	lr

08012a8c <_read_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4d07      	ldr	r5, [pc, #28]	; (8012aac <_read_r+0x20>)
 8012a90:	4604      	mov	r4, r0
 8012a92:	4608      	mov	r0, r1
 8012a94:	4611      	mov	r1, r2
 8012a96:	2200      	movs	r2, #0
 8012a98:	602a      	str	r2, [r5, #0]
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	f7f2 fd64 	bl	8005568 <_read>
 8012aa0:	1c43      	adds	r3, r0, #1
 8012aa2:	d102      	bne.n	8012aaa <_read_r+0x1e>
 8012aa4:	682b      	ldr	r3, [r5, #0]
 8012aa6:	b103      	cbz	r3, 8012aaa <_read_r+0x1e>
 8012aa8:	6023      	str	r3, [r4, #0]
 8012aaa:	bd38      	pop	{r3, r4, r5, pc}
 8012aac:	2400e4e4 	.word	0x2400e4e4

08012ab0 <exp>:
 8012ab0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8012ab2:	ee10 3a90 	vmov	r3, s1
 8012ab6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8012aba:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8012abe:	18a2      	adds	r2, r4, r2
 8012ac0:	2a3e      	cmp	r2, #62	; 0x3e
 8012ac2:	ee10 1a10 	vmov	r1, s0
 8012ac6:	d922      	bls.n	8012b0e <exp+0x5e>
 8012ac8:	2a00      	cmp	r2, #0
 8012aca:	da06      	bge.n	8012ada <exp+0x2a>
 8012acc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012ad0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012ad4:	b004      	add	sp, #16
 8012ad6:	bcf0      	pop	{r4, r5, r6, r7}
 8012ad8:	4770      	bx	lr
 8012ada:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8012ade:	f04f 0000 	mov.w	r0, #0
 8012ae2:	d913      	bls.n	8012b0c <exp+0x5c>
 8012ae4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8012ae8:	bf08      	it	eq
 8012aea:	4281      	cmpeq	r1, r0
 8012aec:	f000 80a0 	beq.w	8012c30 <exp+0x180>
 8012af0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012af4:	4294      	cmp	r4, r2
 8012af6:	d0e9      	beq.n	8012acc <exp+0x1c>
 8012af8:	4283      	cmp	r3, r0
 8012afa:	da03      	bge.n	8012b04 <exp+0x54>
 8012afc:	b004      	add	sp, #16
 8012afe:	bcf0      	pop	{r4, r5, r6, r7}
 8012b00:	f000 b8c6 	b.w	8012c90 <__math_uflow>
 8012b04:	b004      	add	sp, #16
 8012b06:	bcf0      	pop	{r4, r5, r6, r7}
 8012b08:	f000 b8ca 	b.w	8012ca0 <__math_oflow>
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	4950      	ldr	r1, [pc, #320]	; (8012c50 <exp+0x1a0>)
 8012b10:	ed91 6b02 	vldr	d6, [r1, #8]
 8012b14:	ed91 5b00 	vldr	d5, [r1]
 8012b18:	eeb0 7b46 	vmov.f64	d7, d6
 8012b1c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012b20:	ee17 5a10 	vmov	r5, s14
 8012b24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b28:	ed91 6b04 	vldr	d6, [r1, #16]
 8012b2c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8012b30:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012b34:	ed91 6b06 	vldr	d6, [r1, #24]
 8012b38:	18d8      	adds	r0, r3, r3
 8012b3a:	f100 030f 	add.w	r3, r0, #15
 8012b3e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8012b42:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012b46:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8012b4a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8012b4e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8012b52:	ed91 5b08 	vldr	d5, [r1, #32]
 8012b56:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012b5a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012b5e:	eea4 5b00 	vfma.f64	d5, d4, d0
 8012b62:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8012b66:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012b6a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8012b6e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8012b72:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8012b76:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8012b7a:	eea4 5b00 	vfma.f64	d5, d4, d0
 8012b7e:	2600      	movs	r6, #0
 8012b80:	19f2      	adds	r2, r6, r7
 8012b82:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8012b86:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012b8a:	2c00      	cmp	r4, #0
 8012b8c:	d14b      	bne.n	8012c26 <exp+0x176>
 8012b8e:	42b5      	cmp	r5, r6
 8012b90:	db10      	blt.n	8012bb4 <exp+0x104>
 8012b92:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8012b96:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8012c38 <exp+0x188>
 8012b9a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8012b9e:	4610      	mov	r0, r2
 8012ba0:	ec41 0b10 	vmov	d0, r0, r1
 8012ba4:	eea6 0b00 	vfma.f64	d0, d6, d0
 8012ba8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012bac:	b004      	add	sp, #16
 8012bae:	bcf0      	pop	{r4, r5, r6, r7}
 8012bb0:	f000 b8ae 	b.w	8012d10 <__math_check_oflow>
 8012bb4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012bb8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	ec41 0b17 	vmov	d7, r0, r1
 8012bc2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012bc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012bca:	ee37 5b06 	vadd.f64	d5, d7, d6
 8012bce:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8012bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012c40 <exp+0x190>
 8012bda:	d51e      	bpl.n	8012c1a <exp+0x16a>
 8012bdc:	ee35 3b04 	vadd.f64	d3, d5, d4
 8012be0:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012be8:	ee34 6b43 	vsub.f64	d6, d4, d3
 8012bec:	ee36 5b05 	vadd.f64	d5, d6, d5
 8012bf0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8012bf4:	ee35 5b03 	vadd.f64	d5, d5, d3
 8012bf8:	ee35 5b44 	vsub.f64	d5, d5, d4
 8012bfc:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8012c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c04:	d101      	bne.n	8012c0a <exp+0x15a>
 8012c06:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8012c48 <exp+0x198>
 8012c0a:	ed8d 0b00 	vstr	d0, [sp]
 8012c0e:	ed9d 7b00 	vldr	d7, [sp]
 8012c12:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012c16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c1a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8012c1e:	b004      	add	sp, #16
 8012c20:	bcf0      	pop	{r4, r5, r6, r7}
 8012c22:	f000 b86c 	b.w	8012cfe <__math_check_uflow>
 8012c26:	ec43 2b10 	vmov	d0, r2, r3
 8012c2a:	eea6 0b00 	vfma.f64	d0, d6, d0
 8012c2e:	e751      	b.n	8012ad4 <exp+0x24>
 8012c30:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8012c48 <exp+0x198>
 8012c34:	e74e      	b.n	8012ad4 <exp+0x24>
 8012c36:	bf00      	nop
 8012c38:	00000000 	.word	0x00000000
 8012c3c:	7f000000 	.word	0x7f000000
 8012c40:	00000000 	.word	0x00000000
 8012c44:	00100000 	.word	0x00100000
	...
 8012c50:	0801d460 	.word	0x0801d460

08012c54 <with_errno>:
 8012c54:	b513      	push	{r0, r1, r4, lr}
 8012c56:	4604      	mov	r4, r0
 8012c58:	ed8d 0b00 	vstr	d0, [sp]
 8012c5c:	f7fc ff7c 	bl	800fb58 <__errno>
 8012c60:	ed9d 0b00 	vldr	d0, [sp]
 8012c64:	6004      	str	r4, [r0, #0]
 8012c66:	b002      	add	sp, #8
 8012c68:	bd10      	pop	{r4, pc}

08012c6a <xflow>:
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	b158      	cbz	r0, 8012c86 <xflow+0x1c>
 8012c6e:	eeb1 7b40 	vneg.f64	d7, d0
 8012c72:	ed8d 7b00 	vstr	d7, [sp]
 8012c76:	ed9d 7b00 	vldr	d7, [sp]
 8012c7a:	2022      	movs	r0, #34	; 0x22
 8012c7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c80:	b002      	add	sp, #8
 8012c82:	f7ff bfe7 	b.w	8012c54 <with_errno>
 8012c86:	eeb0 7b40 	vmov.f64	d7, d0
 8012c8a:	e7f2      	b.n	8012c72 <xflow+0x8>
 8012c8c:	0000      	movs	r0, r0
	...

08012c90 <__math_uflow>:
 8012c90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012c98 <__math_uflow+0x8>
 8012c94:	f7ff bfe9 	b.w	8012c6a <xflow>
 8012c98:	00000000 	.word	0x00000000
 8012c9c:	10000000 	.word	0x10000000

08012ca0 <__math_oflow>:
 8012ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ca8 <__math_oflow+0x8>
 8012ca4:	f7ff bfe1 	b.w	8012c6a <xflow>
 8012ca8:	00000000 	.word	0x00000000
 8012cac:	70000000 	.word	0x70000000

08012cb0 <__math_divzero>:
 8012cb0:	b082      	sub	sp, #8
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012cb8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012cbc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012cc0:	ed8d 7b00 	vstr	d7, [sp]
 8012cc4:	ed9d 0b00 	vldr	d0, [sp]
 8012cc8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012cd8 <__math_divzero+0x28>
 8012ccc:	2022      	movs	r0, #34	; 0x22
 8012cce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012cd2:	b002      	add	sp, #8
 8012cd4:	f7ff bfbe 	b.w	8012c54 <with_errno>
	...

08012ce0 <__math_invalid>:
 8012ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8012ce4:	eeb4 7b47 	vcmp.f64	d7, d7
 8012ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cec:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012cf0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012cf4:	d602      	bvs.n	8012cfc <__math_invalid+0x1c>
 8012cf6:	2021      	movs	r0, #33	; 0x21
 8012cf8:	f7ff bfac 	b.w	8012c54 <with_errno>
 8012cfc:	4770      	bx	lr

08012cfe <__math_check_uflow>:
 8012cfe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d06:	d102      	bne.n	8012d0e <__math_check_uflow+0x10>
 8012d08:	2022      	movs	r0, #34	; 0x22
 8012d0a:	f7ff bfa3 	b.w	8012c54 <with_errno>
 8012d0e:	4770      	bx	lr

08012d10 <__math_check_oflow>:
 8012d10:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012d30 <__math_check_oflow+0x20>
 8012d14:	eeb0 7bc0 	vabs.f64	d7, d0
 8012d18:	eeb4 7b46 	vcmp.f64	d7, d6
 8012d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d20:	dd02      	ble.n	8012d28 <__math_check_oflow+0x18>
 8012d22:	2022      	movs	r0, #34	; 0x22
 8012d24:	f7ff bf96 	b.w	8012c54 <with_errno>
 8012d28:	4770      	bx	lr
 8012d2a:	bf00      	nop
 8012d2c:	f3af 8000 	nop.w
 8012d30:	ffffffff 	.word	0xffffffff
 8012d34:	7fefffff 	.word	0x7fefffff

08012d38 <cos>:
 8012d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d3a:	eeb0 7b40 	vmov.f64	d7, d0
 8012d3e:	ee17 3a90 	vmov	r3, s15
 8012d42:	4a21      	ldr	r2, [pc, #132]	; (8012dc8 <cos+0x90>)
 8012d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	dc06      	bgt.n	8012d5a <cos+0x22>
 8012d4c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8012dc0 <cos+0x88>
 8012d50:	b005      	add	sp, #20
 8012d52:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d56:	f000 ba6f 	b.w	8013238 <__kernel_cos>
 8012d5a:	4a1c      	ldr	r2, [pc, #112]	; (8012dcc <cos+0x94>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	dd04      	ble.n	8012d6a <cos+0x32>
 8012d60:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012d64:	b005      	add	sp, #20
 8012d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d6a:	4668      	mov	r0, sp
 8012d6c:	f000 f920 	bl	8012fb0 <__ieee754_rem_pio2>
 8012d70:	f000 0003 	and.w	r0, r0, #3
 8012d74:	2801      	cmp	r0, #1
 8012d76:	d009      	beq.n	8012d8c <cos+0x54>
 8012d78:	2802      	cmp	r0, #2
 8012d7a:	d010      	beq.n	8012d9e <cos+0x66>
 8012d7c:	b9b0      	cbnz	r0, 8012dac <cos+0x74>
 8012d7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d82:	ed9d 0b00 	vldr	d0, [sp]
 8012d86:	f000 fa57 	bl	8013238 <__kernel_cos>
 8012d8a:	e7eb      	b.n	8012d64 <cos+0x2c>
 8012d8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d90:	ed9d 0b00 	vldr	d0, [sp]
 8012d94:	f000 fd54 	bl	8013840 <__kernel_sin>
 8012d98:	eeb1 0b40 	vneg.f64	d0, d0
 8012d9c:	e7e2      	b.n	8012d64 <cos+0x2c>
 8012d9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012da2:	ed9d 0b00 	vldr	d0, [sp]
 8012da6:	f000 fa47 	bl	8013238 <__kernel_cos>
 8012daa:	e7f5      	b.n	8012d98 <cos+0x60>
 8012dac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012db0:	ed9d 0b00 	vldr	d0, [sp]
 8012db4:	2001      	movs	r0, #1
 8012db6:	f000 fd43 	bl	8013840 <__kernel_sin>
 8012dba:	e7d3      	b.n	8012d64 <cos+0x2c>
 8012dbc:	f3af 8000 	nop.w
	...
 8012dc8:	3fe921fb 	.word	0x3fe921fb
 8012dcc:	7fefffff 	.word	0x7fefffff

08012dd0 <sin>:
 8012dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dd2:	eeb0 7b40 	vmov.f64	d7, d0
 8012dd6:	ee17 3a90 	vmov	r3, s15
 8012dda:	4a21      	ldr	r2, [pc, #132]	; (8012e60 <sin+0x90>)
 8012ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012de0:	4293      	cmp	r3, r2
 8012de2:	dc07      	bgt.n	8012df4 <sin+0x24>
 8012de4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8012e58 <sin+0x88>
 8012de8:	2000      	movs	r0, #0
 8012dea:	b005      	add	sp, #20
 8012dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8012df0:	f000 bd26 	b.w	8013840 <__kernel_sin>
 8012df4:	4a1b      	ldr	r2, [pc, #108]	; (8012e64 <sin+0x94>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	dd04      	ble.n	8012e04 <sin+0x34>
 8012dfa:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012dfe:	b005      	add	sp, #20
 8012e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e04:	4668      	mov	r0, sp
 8012e06:	f000 f8d3 	bl	8012fb0 <__ieee754_rem_pio2>
 8012e0a:	f000 0003 	and.w	r0, r0, #3
 8012e0e:	2801      	cmp	r0, #1
 8012e10:	d00a      	beq.n	8012e28 <sin+0x58>
 8012e12:	2802      	cmp	r0, #2
 8012e14:	d00f      	beq.n	8012e36 <sin+0x66>
 8012e16:	b9c0      	cbnz	r0, 8012e4a <sin+0x7a>
 8012e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e1c:	ed9d 0b00 	vldr	d0, [sp]
 8012e20:	2001      	movs	r0, #1
 8012e22:	f000 fd0d 	bl	8013840 <__kernel_sin>
 8012e26:	e7ea      	b.n	8012dfe <sin+0x2e>
 8012e28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e2c:	ed9d 0b00 	vldr	d0, [sp]
 8012e30:	f000 fa02 	bl	8013238 <__kernel_cos>
 8012e34:	e7e3      	b.n	8012dfe <sin+0x2e>
 8012e36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e3a:	ed9d 0b00 	vldr	d0, [sp]
 8012e3e:	2001      	movs	r0, #1
 8012e40:	f000 fcfe 	bl	8013840 <__kernel_sin>
 8012e44:	eeb1 0b40 	vneg.f64	d0, d0
 8012e48:	e7d9      	b.n	8012dfe <sin+0x2e>
 8012e4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e4e:	ed9d 0b00 	vldr	d0, [sp]
 8012e52:	f000 f9f1 	bl	8013238 <__kernel_cos>
 8012e56:	e7f5      	b.n	8012e44 <sin+0x74>
	...
 8012e60:	3fe921fb 	.word	0x3fe921fb
 8012e64:	7fefffff 	.word	0x7fefffff

08012e68 <log10>:
 8012e68:	b508      	push	{r3, lr}
 8012e6a:	ed2d 8b02 	vpush	{d8}
 8012e6e:	eeb0 8b40 	vmov.f64	d8, d0
 8012e72:	f000 f82d 	bl	8012ed0 <__ieee754_log10>
 8012e76:	eeb4 8b48 	vcmp.f64	d8, d8
 8012e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7e:	d60f      	bvs.n	8012ea0 <log10+0x38>
 8012e80:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8012e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e88:	d80a      	bhi.n	8012ea0 <log10+0x38>
 8012e8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e92:	d108      	bne.n	8012ea6 <log10+0x3e>
 8012e94:	f7fc fe60 	bl	800fb58 <__errno>
 8012e98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012ec0 <log10+0x58>
 8012e9c:	2322      	movs	r3, #34	; 0x22
 8012e9e:	6003      	str	r3, [r0, #0]
 8012ea0:	ecbd 8b02 	vpop	{d8}
 8012ea4:	bd08      	pop	{r3, pc}
 8012ea6:	f7fc fe57 	bl	800fb58 <__errno>
 8012eaa:	ecbd 8b02 	vpop	{d8}
 8012eae:	2321      	movs	r3, #33	; 0x21
 8012eb0:	6003      	str	r3, [r0, #0]
 8012eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012eb6:	4804      	ldr	r0, [pc, #16]	; (8012ec8 <log10+0x60>)
 8012eb8:	f000 be92 	b.w	8013be0 <nan>
 8012ebc:	f3af 8000 	nop.w
 8012ec0:	00000000 	.word	0x00000000
 8012ec4:	fff00000 	.word	0xfff00000
 8012ec8:	0801d20a 	.word	0x0801d20a
 8012ecc:	00000000 	.word	0x00000000

08012ed0 <__ieee754_log10>:
 8012ed0:	b510      	push	{r4, lr}
 8012ed2:	ee10 3a90 	vmov	r3, s1
 8012ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012eda:	ed2d 8b02 	vpush	{d8}
 8012ede:	da21      	bge.n	8012f24 <__ieee754_log10+0x54>
 8012ee0:	ee10 1a10 	vmov	r1, s0
 8012ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012ee8:	430a      	orrs	r2, r1
 8012eea:	d108      	bne.n	8012efe <__ieee754_log10+0x2e>
 8012eec:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8012f78 <__ieee754_log10+0xa8>
 8012ef0:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8012f80 <__ieee754_log10+0xb0>
 8012ef4:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8012ef8:	ecbd 8b02 	vpop	{d8}
 8012efc:	bd10      	pop	{r4, pc}
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	da02      	bge.n	8012f08 <__ieee754_log10+0x38>
 8012f02:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012f06:	e7f3      	b.n	8012ef0 <__ieee754_log10+0x20>
 8012f08:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012f88 <__ieee754_log10+0xb8>
 8012f0c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012f10:	ee10 3a90 	vmov	r3, s1
 8012f14:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8012f18:	4923      	ldr	r1, [pc, #140]	; (8012fa8 <__ieee754_log10+0xd8>)
 8012f1a:	428b      	cmp	r3, r1
 8012f1c:	dd04      	ble.n	8012f28 <__ieee754_log10+0x58>
 8012f1e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012f22:	e7e9      	b.n	8012ef8 <__ieee754_log10+0x28>
 8012f24:	2200      	movs	r2, #0
 8012f26:	e7f7      	b.n	8012f18 <__ieee754_log10+0x48>
 8012f28:	1518      	asrs	r0, r3, #20
 8012f2a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8012f2e:	4410      	add	r0, r2
 8012f30:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8012f34:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8012f38:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8012f3c:	ee08 3a10 	vmov	s16, r3
 8012f40:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8012f44:	ec53 2b10 	vmov	r2, r3, d0
 8012f48:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8012f4c:	ec43 2b10 	vmov	d0, r2, r3
 8012f50:	f000 fcce 	bl	80138f0 <log>
 8012f54:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012f90 <__ieee754_log10+0xc0>
 8012f58:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012f5c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012f98 <__ieee754_log10+0xc8>
 8012f60:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8012f64:	eea8 0b07 	vfma.f64	d0, d8, d7
 8012f68:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012fa0 <__ieee754_log10+0xd0>
 8012f6c:	eea8 0b07 	vfma.f64	d0, d8, d7
 8012f70:	e7c2      	b.n	8012ef8 <__ieee754_log10+0x28>
 8012f72:	bf00      	nop
 8012f74:	f3af 8000 	nop.w
 8012f78:	00000000 	.word	0x00000000
 8012f7c:	c3500000 	.word	0xc3500000
	...
 8012f8c:	43500000 	.word	0x43500000
 8012f90:	1526e50e 	.word	0x1526e50e
 8012f94:	3fdbcb7b 	.word	0x3fdbcb7b
 8012f98:	11f12b36 	.word	0x11f12b36
 8012f9c:	3d59fef3 	.word	0x3d59fef3
 8012fa0:	509f6000 	.word	0x509f6000
 8012fa4:	3fd34413 	.word	0x3fd34413
 8012fa8:	7fefffff 	.word	0x7fefffff
 8012fac:	00000000 	.word	0x00000000

08012fb0 <__ieee754_rem_pio2>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	eeb0 7b40 	vmov.f64	d7, d0
 8012fb6:	ee17 5a90 	vmov	r5, s15
 8012fba:	4b99      	ldr	r3, [pc, #612]	; (8013220 <__ieee754_rem_pio2+0x270>)
 8012fbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012fc0:	429e      	cmp	r6, r3
 8012fc2:	b088      	sub	sp, #32
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	dc07      	bgt.n	8012fd8 <__ieee754_rem_pio2+0x28>
 8012fc8:	2200      	movs	r2, #0
 8012fca:	2300      	movs	r3, #0
 8012fcc:	ed84 0b00 	vstr	d0, [r4]
 8012fd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	e01b      	b.n	8013010 <__ieee754_rem_pio2+0x60>
 8012fd8:	4b92      	ldr	r3, [pc, #584]	; (8013224 <__ieee754_rem_pio2+0x274>)
 8012fda:	429e      	cmp	r6, r3
 8012fdc:	dc3b      	bgt.n	8013056 <__ieee754_rem_pio2+0xa6>
 8012fde:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80131e0 <__ieee754_rem_pio2+0x230>
 8012fe8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8012fec:	dd19      	ble.n	8013022 <__ieee754_rem_pio2+0x72>
 8012fee:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012ff2:	429e      	cmp	r6, r3
 8012ff4:	d00e      	beq.n	8013014 <__ieee754_rem_pio2+0x64>
 8012ff6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80131e8 <__ieee754_rem_pio2+0x238>
 8012ffa:	ee37 5b46 	vsub.f64	d5, d7, d6
 8012ffe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013002:	ed84 5b00 	vstr	d5, [r4]
 8013006:	ee37 7b46 	vsub.f64	d7, d7, d6
 801300a:	ed84 7b02 	vstr	d7, [r4, #8]
 801300e:	2001      	movs	r0, #1
 8013010:	b008      	add	sp, #32
 8013012:	bd70      	pop	{r4, r5, r6, pc}
 8013014:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80131f0 <__ieee754_rem_pio2+0x240>
 8013018:	ee37 7b46 	vsub.f64	d7, d7, d6
 801301c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80131f8 <__ieee754_rem_pio2+0x248>
 8013020:	e7eb      	b.n	8012ffa <__ieee754_rem_pio2+0x4a>
 8013022:	429e      	cmp	r6, r3
 8013024:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013028:	d00e      	beq.n	8013048 <__ieee754_rem_pio2+0x98>
 801302a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80131e8 <__ieee754_rem_pio2+0x238>
 801302e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013032:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013036:	ed84 5b00 	vstr	d5, [r4]
 801303a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801303e:	f04f 30ff 	mov.w	r0, #4294967295
 8013042:	ed84 7b02 	vstr	d7, [r4, #8]
 8013046:	e7e3      	b.n	8013010 <__ieee754_rem_pio2+0x60>
 8013048:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80131f0 <__ieee754_rem_pio2+0x240>
 801304c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013050:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80131f8 <__ieee754_rem_pio2+0x248>
 8013054:	e7eb      	b.n	801302e <__ieee754_rem_pio2+0x7e>
 8013056:	4b74      	ldr	r3, [pc, #464]	; (8013228 <__ieee754_rem_pio2+0x278>)
 8013058:	429e      	cmp	r6, r3
 801305a:	dc70      	bgt.n	801313e <__ieee754_rem_pio2+0x18e>
 801305c:	f000 fd40 	bl	8013ae0 <fabs>
 8013060:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013064:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8013200 <__ieee754_rem_pio2+0x250>
 8013068:	eea0 7b06 	vfma.f64	d7, d0, d6
 801306c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013070:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013074:	ee17 0a90 	vmov	r0, s15
 8013078:	eeb1 4b45 	vneg.f64	d4, d5
 801307c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80131e0 <__ieee754_rem_pio2+0x230>
 8013080:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013084:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80131e8 <__ieee754_rem_pio2+0x238>
 8013088:	281f      	cmp	r0, #31
 801308a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801308e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013092:	dc08      	bgt.n	80130a6 <__ieee754_rem_pio2+0xf6>
 8013094:	4b65      	ldr	r3, [pc, #404]	; (801322c <__ieee754_rem_pio2+0x27c>)
 8013096:	1e42      	subs	r2, r0, #1
 8013098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801309c:	42b3      	cmp	r3, r6
 801309e:	d002      	beq.n	80130a6 <__ieee754_rem_pio2+0xf6>
 80130a0:	ed84 6b00 	vstr	d6, [r4]
 80130a4:	e026      	b.n	80130f4 <__ieee754_rem_pio2+0x144>
 80130a6:	ee16 3a90 	vmov	r3, s13
 80130aa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80130ae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80130b2:	2b10      	cmp	r3, #16
 80130b4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80130b8:	ddf2      	ble.n	80130a0 <__ieee754_rem_pio2+0xf0>
 80130ba:	eeb0 6b40 	vmov.f64	d6, d0
 80130be:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80131f0 <__ieee754_rem_pio2+0x240>
 80130c2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80131f8 <__ieee754_rem_pio2+0x248>
 80130c6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80130ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 80130ce:	eea4 0b07 	vfma.f64	d0, d4, d7
 80130d2:	eeb0 7b40 	vmov.f64	d7, d0
 80130d6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80130da:	ee36 3b47 	vsub.f64	d3, d6, d7
 80130de:	ee13 3a90 	vmov	r3, s7
 80130e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	2b31      	cmp	r3, #49	; 0x31
 80130ea:	dc17      	bgt.n	801311c <__ieee754_rem_pio2+0x16c>
 80130ec:	eeb0 0b46 	vmov.f64	d0, d6
 80130f0:	ed84 3b00 	vstr	d3, [r4]
 80130f4:	ed94 6b00 	vldr	d6, [r4]
 80130f8:	2d00      	cmp	r5, #0
 80130fa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80130fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013102:	ed84 0b02 	vstr	d0, [r4, #8]
 8013106:	da83      	bge.n	8013010 <__ieee754_rem_pio2+0x60>
 8013108:	eeb1 6b46 	vneg.f64	d6, d6
 801310c:	eeb1 0b40 	vneg.f64	d0, d0
 8013110:	ed84 6b00 	vstr	d6, [r4]
 8013114:	ed84 0b02 	vstr	d0, [r4, #8]
 8013118:	4240      	negs	r0, r0
 801311a:	e779      	b.n	8013010 <__ieee754_rem_pio2+0x60>
 801311c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8013208 <__ieee754_rem_pio2+0x258>
 8013120:	eeb0 0b46 	vmov.f64	d0, d6
 8013124:	eea4 0b03 	vfma.f64	d0, d4, d3
 8013128:	ee36 7b40 	vsub.f64	d7, d6, d0
 801312c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8013210 <__ieee754_rem_pio2+0x260>
 8013130:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013134:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8013138:	ee30 6b47 	vsub.f64	d6, d0, d7
 801313c:	e7b0      	b.n	80130a0 <__ieee754_rem_pio2+0xf0>
 801313e:	4b3c      	ldr	r3, [pc, #240]	; (8013230 <__ieee754_rem_pio2+0x280>)
 8013140:	429e      	cmp	r6, r3
 8013142:	dd06      	ble.n	8013152 <__ieee754_rem_pio2+0x1a2>
 8013144:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013148:	ed80 7b02 	vstr	d7, [r0, #8]
 801314c:	ed80 7b00 	vstr	d7, [r0]
 8013150:	e740      	b.n	8012fd4 <__ieee754_rem_pio2+0x24>
 8013152:	1532      	asrs	r2, r6, #20
 8013154:	ee10 0a10 	vmov	r0, s0
 8013158:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801315c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013160:	ec41 0b17 	vmov	d7, r0, r1
 8013164:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013168:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8013218 <__ieee754_rem_pio2+0x268>
 801316c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013170:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013174:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013178:	ee27 7b05 	vmul.f64	d7, d7, d5
 801317c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013180:	a902      	add	r1, sp, #8
 8013182:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013186:	ee37 7b46 	vsub.f64	d7, d7, d6
 801318a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801318e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013192:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013196:	2603      	movs	r6, #3
 8013198:	4608      	mov	r0, r1
 801319a:	ed91 7b04 	vldr	d7, [r1, #16]
 801319e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80131a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a6:	4633      	mov	r3, r6
 80131a8:	f1a1 0108 	sub.w	r1, r1, #8
 80131ac:	f106 36ff 	add.w	r6, r6, #4294967295
 80131b0:	d0f3      	beq.n	801319a <__ieee754_rem_pio2+0x1ea>
 80131b2:	4920      	ldr	r1, [pc, #128]	; (8013234 <__ieee754_rem_pio2+0x284>)
 80131b4:	9101      	str	r1, [sp, #4]
 80131b6:	2102      	movs	r1, #2
 80131b8:	9100      	str	r1, [sp, #0]
 80131ba:	4621      	mov	r1, r4
 80131bc:	f000 f8a8 	bl	8013310 <__kernel_rem_pio2>
 80131c0:	2d00      	cmp	r5, #0
 80131c2:	f6bf af25 	bge.w	8013010 <__ieee754_rem_pio2+0x60>
 80131c6:	ed94 7b00 	vldr	d7, [r4]
 80131ca:	eeb1 7b47 	vneg.f64	d7, d7
 80131ce:	ed84 7b00 	vstr	d7, [r4]
 80131d2:	ed94 7b02 	vldr	d7, [r4, #8]
 80131d6:	eeb1 7b47 	vneg.f64	d7, d7
 80131da:	ed84 7b02 	vstr	d7, [r4, #8]
 80131de:	e79b      	b.n	8013118 <__ieee754_rem_pio2+0x168>
 80131e0:	54400000 	.word	0x54400000
 80131e4:	3ff921fb 	.word	0x3ff921fb
 80131e8:	1a626331 	.word	0x1a626331
 80131ec:	3dd0b461 	.word	0x3dd0b461
 80131f0:	1a600000 	.word	0x1a600000
 80131f4:	3dd0b461 	.word	0x3dd0b461
 80131f8:	2e037073 	.word	0x2e037073
 80131fc:	3ba3198a 	.word	0x3ba3198a
 8013200:	6dc9c883 	.word	0x6dc9c883
 8013204:	3fe45f30 	.word	0x3fe45f30
 8013208:	2e000000 	.word	0x2e000000
 801320c:	3ba3198a 	.word	0x3ba3198a
 8013210:	252049c1 	.word	0x252049c1
 8013214:	397b839a 	.word	0x397b839a
 8013218:	00000000 	.word	0x00000000
 801321c:	41700000 	.word	0x41700000
 8013220:	3fe921fb 	.word	0x3fe921fb
 8013224:	4002d97b 	.word	0x4002d97b
 8013228:	413921fb 	.word	0x413921fb
 801322c:	0801dcd0 	.word	0x0801dcd0
 8013230:	7fefffff 	.word	0x7fefffff
 8013234:	0801dd50 	.word	0x0801dd50

08013238 <__kernel_cos>:
 8013238:	ee10 1a90 	vmov	r1, s1
 801323c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013240:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013244:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013248:	da05      	bge.n	8013256 <__kernel_cos+0x1e>
 801324a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801324e:	ee17 3a90 	vmov	r3, s15
 8013252:	2b00      	cmp	r3, #0
 8013254:	d03d      	beq.n	80132d2 <__kernel_cos+0x9a>
 8013256:	ee20 3b00 	vmul.f64	d3, d0, d0
 801325a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80132d8 <__kernel_cos+0xa0>
 801325e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80132e0 <__kernel_cos+0xa8>
 8013262:	eea3 6b07 	vfma.f64	d6, d3, d7
 8013266:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80132e8 <__kernel_cos+0xb0>
 801326a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801326e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80132f0 <__kernel_cos+0xb8>
 8013272:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013276:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80132f8 <__kernel_cos+0xc0>
 801327a:	4b23      	ldr	r3, [pc, #140]	; (8013308 <__kernel_cos+0xd0>)
 801327c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013280:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8013300 <__kernel_cos+0xc8>
 8013284:	4299      	cmp	r1, r3
 8013286:	eea7 6b03 	vfma.f64	d6, d7, d3
 801328a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801328e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8013292:	ee23 7b07 	vmul.f64	d7, d3, d7
 8013296:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801329a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801329e:	dc04      	bgt.n	80132aa <__kernel_cos+0x72>
 80132a0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80132a4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80132a8:	4770      	bx	lr
 80132aa:	4b18      	ldr	r3, [pc, #96]	; (801330c <__kernel_cos+0xd4>)
 80132ac:	4299      	cmp	r1, r3
 80132ae:	dc0d      	bgt.n	80132cc <__kernel_cos+0x94>
 80132b0:	2200      	movs	r2, #0
 80132b2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80132b6:	ec43 2b15 	vmov	d5, r2, r3
 80132ba:	ee34 0b45 	vsub.f64	d0, d4, d5
 80132be:	ee37 7b45 	vsub.f64	d7, d7, d5
 80132c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132c6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80132ca:	4770      	bx	lr
 80132cc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80132d0:	e7f3      	b.n	80132ba <__kernel_cos+0x82>
 80132d2:	eeb0 0b44 	vmov.f64	d0, d4
 80132d6:	4770      	bx	lr
 80132d8:	be8838d4 	.word	0xbe8838d4
 80132dc:	bda8fae9 	.word	0xbda8fae9
 80132e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80132e4:	3e21ee9e 	.word	0x3e21ee9e
 80132e8:	809c52ad 	.word	0x809c52ad
 80132ec:	be927e4f 	.word	0xbe927e4f
 80132f0:	19cb1590 	.word	0x19cb1590
 80132f4:	3efa01a0 	.word	0x3efa01a0
 80132f8:	16c15177 	.word	0x16c15177
 80132fc:	bf56c16c 	.word	0xbf56c16c
 8013300:	5555554c 	.word	0x5555554c
 8013304:	3fa55555 	.word	0x3fa55555
 8013308:	3fd33332 	.word	0x3fd33332
 801330c:	3fe90000 	.word	0x3fe90000

08013310 <__kernel_rem_pio2>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	ed2d 8b06 	vpush	{d8-d10}
 8013318:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801331c:	460f      	mov	r7, r1
 801331e:	9002      	str	r0, [sp, #8]
 8013320:	49c5      	ldr	r1, [pc, #788]	; (8013638 <__kernel_rem_pio2+0x328>)
 8013322:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8013324:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8013328:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801332c:	9301      	str	r3, [sp, #4]
 801332e:	f112 0f14 	cmn.w	r2, #20
 8013332:	bfa8      	it	ge
 8013334:	2018      	movge	r0, #24
 8013336:	f103 31ff 	add.w	r1, r3, #4294967295
 801333a:	bfb8      	it	lt
 801333c:	2000      	movlt	r0, #0
 801333e:	f06f 0417 	mvn.w	r4, #23
 8013342:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8013620 <__kernel_rem_pio2+0x310>
 8013346:	bfa4      	itt	ge
 8013348:	f1a2 0a03 	subge.w	sl, r2, #3
 801334c:	fb9a f0f0 	sdivge	r0, sl, r0
 8013350:	fb00 4404 	mla	r4, r0, r4, r4
 8013354:	1a46      	subs	r6, r0, r1
 8013356:	4414      	add	r4, r2
 8013358:	eb09 0c01 	add.w	ip, r9, r1
 801335c:	ad1a      	add	r5, sp, #104	; 0x68
 801335e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8013362:	2200      	movs	r2, #0
 8013364:	4562      	cmp	r2, ip
 8013366:	dd10      	ble.n	801338a <__kernel_rem_pio2+0x7a>
 8013368:	9a01      	ldr	r2, [sp, #4]
 801336a:	ab1a      	add	r3, sp, #104	; 0x68
 801336c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8013370:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8013374:	f04f 0c00 	mov.w	ip, #0
 8013378:	45cc      	cmp	ip, r9
 801337a:	dc26      	bgt.n	80133ca <__kernel_rem_pio2+0xba>
 801337c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8013620 <__kernel_rem_pio2+0x310>
 8013380:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013384:	4616      	mov	r6, r2
 8013386:	2500      	movs	r5, #0
 8013388:	e015      	b.n	80133b6 <__kernel_rem_pio2+0xa6>
 801338a:	42d6      	cmn	r6, r2
 801338c:	d409      	bmi.n	80133a2 <__kernel_rem_pio2+0x92>
 801338e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8013392:	ee07 3a90 	vmov	s15, r3
 8013396:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801339a:	eca5 7b02 	vstmia	r5!, {d7}
 801339e:	3201      	adds	r2, #1
 80133a0:	e7e0      	b.n	8013364 <__kernel_rem_pio2+0x54>
 80133a2:	eeb0 7b46 	vmov.f64	d7, d6
 80133a6:	e7f8      	b.n	801339a <__kernel_rem_pio2+0x8a>
 80133a8:	ecb8 5b02 	vldmia	r8!, {d5}
 80133ac:	ed96 6b00 	vldr	d6, [r6]
 80133b0:	3501      	adds	r5, #1
 80133b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80133b6:	428d      	cmp	r5, r1
 80133b8:	f1a6 0608 	sub.w	r6, r6, #8
 80133bc:	ddf4      	ble.n	80133a8 <__kernel_rem_pio2+0x98>
 80133be:	ecaa 7b02 	vstmia	sl!, {d7}
 80133c2:	f10c 0c01 	add.w	ip, ip, #1
 80133c6:	3208      	adds	r2, #8
 80133c8:	e7d6      	b.n	8013378 <__kernel_rem_pio2+0x68>
 80133ca:	ab06      	add	r3, sp, #24
 80133cc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013628 <__kernel_rem_pio2+0x318>
 80133d0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8013630 <__kernel_rem_pio2+0x320>
 80133d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80133d8:	9303      	str	r3, [sp, #12]
 80133da:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80133de:	464d      	mov	r5, r9
 80133e0:	00eb      	lsls	r3, r5, #3
 80133e2:	9304      	str	r3, [sp, #16]
 80133e4:	ab92      	add	r3, sp, #584	; 0x248
 80133e6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80133ea:	f10d 0b18 	add.w	fp, sp, #24
 80133ee:	ab6a      	add	r3, sp, #424	; 0x1a8
 80133f0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80133f4:	465e      	mov	r6, fp
 80133f6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80133fa:	4628      	mov	r0, r5
 80133fc:	2800      	cmp	r0, #0
 80133fe:	f1a2 0208 	sub.w	r2, r2, #8
 8013402:	dc4c      	bgt.n	801349e <__kernel_rem_pio2+0x18e>
 8013404:	4620      	mov	r0, r4
 8013406:	9105      	str	r1, [sp, #20]
 8013408:	f000 fbf2 	bl	8013bf0 <scalbn>
 801340c:	eeb0 8b40 	vmov.f64	d8, d0
 8013410:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8013414:	ee28 0b00 	vmul.f64	d0, d8, d0
 8013418:	f000 fb6e 	bl	8013af8 <floor>
 801341c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8013420:	eea0 8b47 	vfms.f64	d8, d0, d7
 8013424:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8013428:	2c00      	cmp	r4, #0
 801342a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801342e:	ee17 8a90 	vmov	r8, s15
 8013432:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013436:	9905      	ldr	r1, [sp, #20]
 8013438:	dd43      	ble.n	80134c2 <__kernel_rem_pio2+0x1b2>
 801343a:	1e68      	subs	r0, r5, #1
 801343c:	ab06      	add	r3, sp, #24
 801343e:	f1c4 0c18 	rsb	ip, r4, #24
 8013442:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013446:	fa46 f20c 	asr.w	r2, r6, ip
 801344a:	4490      	add	r8, r2
 801344c:	fa02 f20c 	lsl.w	r2, r2, ip
 8013450:	1ab6      	subs	r6, r6, r2
 8013452:	f1c4 0217 	rsb	r2, r4, #23
 8013456:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801345a:	4116      	asrs	r6, r2
 801345c:	2e00      	cmp	r6, #0
 801345e:	dd3f      	ble.n	80134e0 <__kernel_rem_pio2+0x1d0>
 8013460:	f04f 0c00 	mov.w	ip, #0
 8013464:	f108 0801 	add.w	r8, r8, #1
 8013468:	4660      	mov	r0, ip
 801346a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801346e:	4565      	cmp	r5, ip
 8013470:	dc6e      	bgt.n	8013550 <__kernel_rem_pio2+0x240>
 8013472:	2c00      	cmp	r4, #0
 8013474:	dd04      	ble.n	8013480 <__kernel_rem_pio2+0x170>
 8013476:	2c01      	cmp	r4, #1
 8013478:	d07f      	beq.n	801357a <__kernel_rem_pio2+0x26a>
 801347a:	2c02      	cmp	r4, #2
 801347c:	f000 8087 	beq.w	801358e <__kernel_rem_pio2+0x27e>
 8013480:	2e02      	cmp	r6, #2
 8013482:	d12d      	bne.n	80134e0 <__kernel_rem_pio2+0x1d0>
 8013484:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013488:	ee30 8b48 	vsub.f64	d8, d0, d8
 801348c:	b340      	cbz	r0, 80134e0 <__kernel_rem_pio2+0x1d0>
 801348e:	4620      	mov	r0, r4
 8013490:	9105      	str	r1, [sp, #20]
 8013492:	f000 fbad 	bl	8013bf0 <scalbn>
 8013496:	9905      	ldr	r1, [sp, #20]
 8013498:	ee38 8b40 	vsub.f64	d8, d8, d0
 801349c:	e020      	b.n	80134e0 <__kernel_rem_pio2+0x1d0>
 801349e:	ee20 7b09 	vmul.f64	d7, d0, d9
 80134a2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80134a6:	3801      	subs	r0, #1
 80134a8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80134ac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80134b0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80134b4:	eca6 0a01 	vstmia	r6!, {s0}
 80134b8:	ed92 0b00 	vldr	d0, [r2]
 80134bc:	ee37 0b00 	vadd.f64	d0, d7, d0
 80134c0:	e79c      	b.n	80133fc <__kernel_rem_pio2+0xec>
 80134c2:	d105      	bne.n	80134d0 <__kernel_rem_pio2+0x1c0>
 80134c4:	1e6a      	subs	r2, r5, #1
 80134c6:	ab06      	add	r3, sp, #24
 80134c8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80134cc:	15f6      	asrs	r6, r6, #23
 80134ce:	e7c5      	b.n	801345c <__kernel_rem_pio2+0x14c>
 80134d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80134d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80134d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134dc:	da36      	bge.n	801354c <__kernel_rem_pio2+0x23c>
 80134de:	2600      	movs	r6, #0
 80134e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80134e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e8:	f040 80aa 	bne.w	8013640 <__kernel_rem_pio2+0x330>
 80134ec:	f105 3bff 	add.w	fp, r5, #4294967295
 80134f0:	4658      	mov	r0, fp
 80134f2:	2200      	movs	r2, #0
 80134f4:	4548      	cmp	r0, r9
 80134f6:	da52      	bge.n	801359e <__kernel_rem_pio2+0x28e>
 80134f8:	2a00      	cmp	r2, #0
 80134fa:	f000 8081 	beq.w	8013600 <__kernel_rem_pio2+0x2f0>
 80134fe:	ab06      	add	r3, sp, #24
 8013500:	3c18      	subs	r4, #24
 8013502:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 8087 	beq.w	801361a <__kernel_rem_pio2+0x30a>
 801350c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013510:	4620      	mov	r0, r4
 8013512:	f000 fb6d 	bl	8013bf0 <scalbn>
 8013516:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801351a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8013628 <__kernel_rem_pio2+0x318>
 801351e:	a96a      	add	r1, sp, #424	; 0x1a8
 8013520:	f103 0208 	add.w	r2, r3, #8
 8013524:	1888      	adds	r0, r1, r2
 8013526:	4659      	mov	r1, fp
 8013528:	2900      	cmp	r1, #0
 801352a:	f280 80b7 	bge.w	801369c <__kernel_rem_pio2+0x38c>
 801352e:	4659      	mov	r1, fp
 8013530:	2900      	cmp	r1, #0
 8013532:	f2c0 80d5 	blt.w	80136e0 <__kernel_rem_pio2+0x3d0>
 8013536:	a86a      	add	r0, sp, #424	; 0x1a8
 8013538:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801353c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8013620 <__kernel_rem_pio2+0x310>
 8013540:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801363c <__kernel_rem_pio2+0x32c>
 8013544:	2400      	movs	r4, #0
 8013546:	ebab 0001 	sub.w	r0, fp, r1
 801354a:	e0be      	b.n	80136ca <__kernel_rem_pio2+0x3ba>
 801354c:	2602      	movs	r6, #2
 801354e:	e787      	b.n	8013460 <__kernel_rem_pio2+0x150>
 8013550:	f8db 2000 	ldr.w	r2, [fp]
 8013554:	b958      	cbnz	r0, 801356e <__kernel_rem_pio2+0x25e>
 8013556:	b122      	cbz	r2, 8013562 <__kernel_rem_pio2+0x252>
 8013558:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801355c:	f8cb 2000 	str.w	r2, [fp]
 8013560:	2201      	movs	r2, #1
 8013562:	f10c 0c01 	add.w	ip, ip, #1
 8013566:	f10b 0b04 	add.w	fp, fp, #4
 801356a:	4610      	mov	r0, r2
 801356c:	e77f      	b.n	801346e <__kernel_rem_pio2+0x15e>
 801356e:	ebae 0202 	sub.w	r2, lr, r2
 8013572:	f8cb 2000 	str.w	r2, [fp]
 8013576:	4602      	mov	r2, r0
 8013578:	e7f3      	b.n	8013562 <__kernel_rem_pio2+0x252>
 801357a:	f105 3cff 	add.w	ip, r5, #4294967295
 801357e:	ab06      	add	r3, sp, #24
 8013580:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8013584:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8013588:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801358c:	e778      	b.n	8013480 <__kernel_rem_pio2+0x170>
 801358e:	f105 3cff 	add.w	ip, r5, #4294967295
 8013592:	ab06      	add	r3, sp, #24
 8013594:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8013598:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801359c:	e7f4      	b.n	8013588 <__kernel_rem_pio2+0x278>
 801359e:	ab06      	add	r3, sp, #24
 80135a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80135a4:	3801      	subs	r0, #1
 80135a6:	431a      	orrs	r2, r3
 80135a8:	e7a4      	b.n	80134f4 <__kernel_rem_pio2+0x1e4>
 80135aa:	f10c 0c01 	add.w	ip, ip, #1
 80135ae:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d0f9      	beq.n	80135aa <__kernel_rem_pio2+0x29a>
 80135b6:	9b04      	ldr	r3, [sp, #16]
 80135b8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80135bc:	eb0d 0203 	add.w	r2, sp, r3
 80135c0:	9b01      	ldr	r3, [sp, #4]
 80135c2:	18e8      	adds	r0, r5, r3
 80135c4:	ab1a      	add	r3, sp, #104	; 0x68
 80135c6:	1c6e      	adds	r6, r5, #1
 80135c8:	3a98      	subs	r2, #152	; 0x98
 80135ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80135ce:	4465      	add	r5, ip
 80135d0:	42b5      	cmp	r5, r6
 80135d2:	f6ff af05 	blt.w	80133e0 <__kernel_rem_pio2+0xd0>
 80135d6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80135da:	f8dd e008 	ldr.w	lr, [sp, #8]
 80135de:	ee07 3a90 	vmov	s15, r3
 80135e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80135e6:	f04f 0c00 	mov.w	ip, #0
 80135ea:	eca0 7b02 	vstmia	r0!, {d7}
 80135ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8013620 <__kernel_rem_pio2+0x310>
 80135f2:	4680      	mov	r8, r0
 80135f4:	458c      	cmp	ip, r1
 80135f6:	dd07      	ble.n	8013608 <__kernel_rem_pio2+0x2f8>
 80135f8:	eca2 7b02 	vstmia	r2!, {d7}
 80135fc:	3601      	adds	r6, #1
 80135fe:	e7e7      	b.n	80135d0 <__kernel_rem_pio2+0x2c0>
 8013600:	9a03      	ldr	r2, [sp, #12]
 8013602:	f04f 0c01 	mov.w	ip, #1
 8013606:	e7d2      	b.n	80135ae <__kernel_rem_pio2+0x29e>
 8013608:	ecbe 5b02 	vldmia	lr!, {d5}
 801360c:	ed38 6b02 	vldmdb	r8!, {d6}
 8013610:	f10c 0c01 	add.w	ip, ip, #1
 8013614:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013618:	e7ec      	b.n	80135f4 <__kernel_rem_pio2+0x2e4>
 801361a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801361e:	e76e      	b.n	80134fe <__kernel_rem_pio2+0x1ee>
	...
 801362c:	3e700000 	.word	0x3e700000
 8013630:	00000000 	.word	0x00000000
 8013634:	41700000 	.word	0x41700000
 8013638:	0801de98 	.word	0x0801de98
 801363c:	0801de58 	.word	0x0801de58
 8013640:	4260      	negs	r0, r4
 8013642:	eeb0 0b48 	vmov.f64	d0, d8
 8013646:	f000 fad3 	bl	8013bf0 <scalbn>
 801364a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8013828 <__kernel_rem_pio2+0x518>
 801364e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8013652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013656:	db18      	blt.n	801368a <__kernel_rem_pio2+0x37a>
 8013658:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8013830 <__kernel_rem_pio2+0x520>
 801365c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013660:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013664:	aa06      	add	r2, sp, #24
 8013666:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801366a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801366e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013672:	f105 0b01 	add.w	fp, r5, #1
 8013676:	ee10 3a10 	vmov	r3, s0
 801367a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801367e:	ee17 3a10 	vmov	r3, s14
 8013682:	3418      	adds	r4, #24
 8013684:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8013688:	e740      	b.n	801350c <__kernel_rem_pio2+0x1fc>
 801368a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801368e:	aa06      	add	r2, sp, #24
 8013690:	ee10 3a10 	vmov	r3, s0
 8013694:	46ab      	mov	fp, r5
 8013696:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801369a:	e737      	b.n	801350c <__kernel_rem_pio2+0x1fc>
 801369c:	ac06      	add	r4, sp, #24
 801369e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80136a2:	9401      	str	r4, [sp, #4]
 80136a4:	ee07 4a90 	vmov	s15, r4
 80136a8:	3901      	subs	r1, #1
 80136aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80136ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 80136b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80136b6:	ed20 7b02 	vstmdb	r0!, {d7}
 80136ba:	e735      	b.n	8013528 <__kernel_rem_pio2+0x218>
 80136bc:	ecbc 5b02 	vldmia	ip!, {d5}
 80136c0:	ecb5 6b02 	vldmia	r5!, {d6}
 80136c4:	3401      	adds	r4, #1
 80136c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80136ca:	454c      	cmp	r4, r9
 80136cc:	dc01      	bgt.n	80136d2 <__kernel_rem_pio2+0x3c2>
 80136ce:	4284      	cmp	r4, r0
 80136d0:	ddf4      	ble.n	80136bc <__kernel_rem_pio2+0x3ac>
 80136d2:	ac42      	add	r4, sp, #264	; 0x108
 80136d4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80136d8:	ed80 7b00 	vstr	d7, [r0]
 80136dc:	3901      	subs	r1, #1
 80136de:	e727      	b.n	8013530 <__kernel_rem_pio2+0x220>
 80136e0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80136e2:	2902      	cmp	r1, #2
 80136e4:	dc0a      	bgt.n	80136fc <__kernel_rem_pio2+0x3ec>
 80136e6:	2900      	cmp	r1, #0
 80136e8:	dc2c      	bgt.n	8013744 <__kernel_rem_pio2+0x434>
 80136ea:	d045      	beq.n	8013778 <__kernel_rem_pio2+0x468>
 80136ec:	f008 0007 	and.w	r0, r8, #7
 80136f0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80136f4:	ecbd 8b06 	vpop	{d8-d10}
 80136f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136fc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80136fe:	2a03      	cmp	r2, #3
 8013700:	d1f4      	bne.n	80136ec <__kernel_rem_pio2+0x3dc>
 8013702:	aa42      	add	r2, sp, #264	; 0x108
 8013704:	4413      	add	r3, r2
 8013706:	461a      	mov	r2, r3
 8013708:	4619      	mov	r1, r3
 801370a:	4658      	mov	r0, fp
 801370c:	2800      	cmp	r0, #0
 801370e:	f1a1 0108 	sub.w	r1, r1, #8
 8013712:	dc54      	bgt.n	80137be <__kernel_rem_pio2+0x4ae>
 8013714:	4659      	mov	r1, fp
 8013716:	2901      	cmp	r1, #1
 8013718:	f1a2 0208 	sub.w	r2, r2, #8
 801371c:	dc5f      	bgt.n	80137de <__kernel_rem_pio2+0x4ce>
 801371e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8013838 <__kernel_rem_pio2+0x528>
 8013722:	3308      	adds	r3, #8
 8013724:	f1bb 0f01 	cmp.w	fp, #1
 8013728:	dc69      	bgt.n	80137fe <__kernel_rem_pio2+0x4ee>
 801372a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801372e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8013732:	2e00      	cmp	r6, #0
 8013734:	d16a      	bne.n	801380c <__kernel_rem_pio2+0x4fc>
 8013736:	ed87 5b00 	vstr	d5, [r7]
 801373a:	ed87 6b02 	vstr	d6, [r7, #8]
 801373e:	ed87 7b04 	vstr	d7, [r7, #16]
 8013742:	e7d3      	b.n	80136ec <__kernel_rem_pio2+0x3dc>
 8013744:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013838 <__kernel_rem_pio2+0x528>
 8013748:	ab42      	add	r3, sp, #264	; 0x108
 801374a:	441a      	add	r2, r3
 801374c:	465b      	mov	r3, fp
 801374e:	2b00      	cmp	r3, #0
 8013750:	da26      	bge.n	80137a0 <__kernel_rem_pio2+0x490>
 8013752:	b35e      	cbz	r6, 80137ac <__kernel_rem_pio2+0x49c>
 8013754:	eeb1 7b46 	vneg.f64	d7, d6
 8013758:	ed87 7b00 	vstr	d7, [r7]
 801375c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8013760:	aa44      	add	r2, sp, #272	; 0x110
 8013762:	2301      	movs	r3, #1
 8013764:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013768:	459b      	cmp	fp, r3
 801376a:	da22      	bge.n	80137b2 <__kernel_rem_pio2+0x4a2>
 801376c:	b10e      	cbz	r6, 8013772 <__kernel_rem_pio2+0x462>
 801376e:	eeb1 7b47 	vneg.f64	d7, d7
 8013772:	ed87 7b02 	vstr	d7, [r7, #8]
 8013776:	e7b9      	b.n	80136ec <__kernel_rem_pio2+0x3dc>
 8013778:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013838 <__kernel_rem_pio2+0x528>
 801377c:	ab42      	add	r3, sp, #264	; 0x108
 801377e:	441a      	add	r2, r3
 8013780:	f1bb 0f00 	cmp.w	fp, #0
 8013784:	da05      	bge.n	8013792 <__kernel_rem_pio2+0x482>
 8013786:	b10e      	cbz	r6, 801378c <__kernel_rem_pio2+0x47c>
 8013788:	eeb1 7b47 	vneg.f64	d7, d7
 801378c:	ed87 7b00 	vstr	d7, [r7]
 8013790:	e7ac      	b.n	80136ec <__kernel_rem_pio2+0x3dc>
 8013792:	ed32 6b02 	vldmdb	r2!, {d6}
 8013796:	f10b 3bff 	add.w	fp, fp, #4294967295
 801379a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801379e:	e7ef      	b.n	8013780 <__kernel_rem_pio2+0x470>
 80137a0:	ed32 7b02 	vldmdb	r2!, {d7}
 80137a4:	3b01      	subs	r3, #1
 80137a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80137aa:	e7d0      	b.n	801374e <__kernel_rem_pio2+0x43e>
 80137ac:	eeb0 7b46 	vmov.f64	d7, d6
 80137b0:	e7d2      	b.n	8013758 <__kernel_rem_pio2+0x448>
 80137b2:	ecb2 6b02 	vldmia	r2!, {d6}
 80137b6:	3301      	adds	r3, #1
 80137b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80137bc:	e7d4      	b.n	8013768 <__kernel_rem_pio2+0x458>
 80137be:	ed91 7b00 	vldr	d7, [r1]
 80137c2:	ed91 5b02 	vldr	d5, [r1, #8]
 80137c6:	3801      	subs	r0, #1
 80137c8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80137cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80137d0:	ed81 6b00 	vstr	d6, [r1]
 80137d4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80137d8:	ed81 7b02 	vstr	d7, [r1, #8]
 80137dc:	e796      	b.n	801370c <__kernel_rem_pio2+0x3fc>
 80137de:	ed92 7b00 	vldr	d7, [r2]
 80137e2:	ed92 5b02 	vldr	d5, [r2, #8]
 80137e6:	3901      	subs	r1, #1
 80137e8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80137ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80137f0:	ed82 6b00 	vstr	d6, [r2]
 80137f4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80137f8:	ed82 7b02 	vstr	d7, [r2, #8]
 80137fc:	e78b      	b.n	8013716 <__kernel_rem_pio2+0x406>
 80137fe:	ed33 6b02 	vldmdb	r3!, {d6}
 8013802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013806:	ee37 7b06 	vadd.f64	d7, d7, d6
 801380a:	e78b      	b.n	8013724 <__kernel_rem_pio2+0x414>
 801380c:	eeb1 5b45 	vneg.f64	d5, d5
 8013810:	eeb1 6b46 	vneg.f64	d6, d6
 8013814:	ed87 5b00 	vstr	d5, [r7]
 8013818:	eeb1 7b47 	vneg.f64	d7, d7
 801381c:	ed87 6b02 	vstr	d6, [r7, #8]
 8013820:	e78d      	b.n	801373e <__kernel_rem_pio2+0x42e>
 8013822:	bf00      	nop
 8013824:	f3af 8000 	nop.w
 8013828:	00000000 	.word	0x00000000
 801382c:	41700000 	.word	0x41700000
 8013830:	00000000 	.word	0x00000000
 8013834:	3e700000 	.word	0x3e700000
	...

08013840 <__kernel_sin>:
 8013840:	ee10 3a90 	vmov	r3, s1
 8013844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013848:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801384c:	da04      	bge.n	8013858 <__kernel_sin+0x18>
 801384e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013852:	ee17 3a90 	vmov	r3, s15
 8013856:	b35b      	cbz	r3, 80138b0 <__kernel_sin+0x70>
 8013858:	ee20 6b00 	vmul.f64	d6, d0, d0
 801385c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013860:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80138b8 <__kernel_sin+0x78>
 8013864:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80138c0 <__kernel_sin+0x80>
 8013868:	eea6 4b07 	vfma.f64	d4, d6, d7
 801386c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80138c8 <__kernel_sin+0x88>
 8013870:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013874:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80138d0 <__kernel_sin+0x90>
 8013878:	eea7 4b06 	vfma.f64	d4, d7, d6
 801387c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80138d8 <__kernel_sin+0x98>
 8013880:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013884:	b930      	cbnz	r0, 8013894 <__kernel_sin+0x54>
 8013886:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80138e0 <__kernel_sin+0xa0>
 801388a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801388e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8013892:	4770      	bx	lr
 8013894:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013898:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801389c:	eea1 7b04 	vfma.f64	d7, d1, d4
 80138a0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80138a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80138e8 <__kernel_sin+0xa8>
 80138a8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80138ac:	ee30 0b41 	vsub.f64	d0, d0, d1
 80138b0:	4770      	bx	lr
 80138b2:	bf00      	nop
 80138b4:	f3af 8000 	nop.w
 80138b8:	5acfd57c 	.word	0x5acfd57c
 80138bc:	3de5d93a 	.word	0x3de5d93a
 80138c0:	8a2b9ceb 	.word	0x8a2b9ceb
 80138c4:	be5ae5e6 	.word	0xbe5ae5e6
 80138c8:	57b1fe7d 	.word	0x57b1fe7d
 80138cc:	3ec71de3 	.word	0x3ec71de3
 80138d0:	19c161d5 	.word	0x19c161d5
 80138d4:	bf2a01a0 	.word	0xbf2a01a0
 80138d8:	1110f8a6 	.word	0x1110f8a6
 80138dc:	3f811111 	.word	0x3f811111
 80138e0:	55555549 	.word	0x55555549
 80138e4:	bfc55555 	.word	0xbfc55555
 80138e8:	55555549 	.word	0x55555549
 80138ec:	3fc55555 	.word	0x3fc55555

080138f0 <log>:
 80138f0:	b470      	push	{r4, r5, r6}
 80138f2:	ee10 1a90 	vmov	r1, s1
 80138f6:	ee10 2a10 	vmov	r2, s0
 80138fa:	f04f 34ff 	mov.w	r4, #4294967295
 80138fe:	4294      	cmp	r4, r2
 8013900:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8013904:	4c72      	ldr	r4, [pc, #456]	; (8013ad0 <log+0x1e0>)
 8013906:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 801390a:	eb74 0000 	sbcs.w	r0, r4, r0
 801390e:	ed2d 8b02 	vpush	{d8}
 8013912:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8013916:	d35c      	bcc.n	80139d2 <log+0xe2>
 8013918:	4b6e      	ldr	r3, [pc, #440]	; (8013ad4 <log+0x1e4>)
 801391a:	4299      	cmp	r1, r3
 801391c:	bf08      	it	eq
 801391e:	2a00      	cmpeq	r2, #0
 8013920:	f000 80c6 	beq.w	8013ab0 <log+0x1c0>
 8013924:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013928:	ee30 0b47 	vsub.f64	d0, d0, d7
 801392c:	4b6a      	ldr	r3, [pc, #424]	; (8013ad8 <log+0x1e8>)
 801392e:	ee20 2b00 	vmul.f64	d2, d0, d0
 8013932:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8013936:	ee20 4b02 	vmul.f64	d4, d0, d2
 801393a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 801393e:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013942:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8013946:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 801394a:	eea6 7b02 	vfma.f64	d7, d6, d2
 801394e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8013952:	eea5 6b00 	vfma.f64	d6, d5, d0
 8013956:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 801395a:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 801395e:	eea5 6b02 	vfma.f64	d6, d5, d2
 8013962:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8013966:	eea3 5b00 	vfma.f64	d5, d3, d0
 801396a:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 801396e:	eea3 5b02 	vfma.f64	d5, d3, d2
 8013972:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8013976:	eeb0 2b40 	vmov.f64	d2, d0
 801397a:	eea3 5b04 	vfma.f64	d5, d3, d4
 801397e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8013982:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013986:	eea6 7b04 	vfma.f64	d7, d6, d4
 801398a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8013ab8 <log+0x1c8>
 801398e:	eeb0 1b47 	vmov.f64	d1, d7
 8013992:	eeb0 5b40 	vmov.f64	d5, d0
 8013996:	eea0 5b06 	vfma.f64	d5, d0, d6
 801399a:	eea0 5b46 	vfms.f64	d5, d0, d6
 801399e:	ee30 8b45 	vsub.f64	d8, d0, d5
 80139a2:	ee25 7b05 	vmul.f64	d7, d5, d5
 80139a6:	ee30 5b05 	vadd.f64	d5, d0, d5
 80139aa:	eea7 2b03 	vfma.f64	d2, d7, d3
 80139ae:	ee30 6b42 	vsub.f64	d6, d0, d2
 80139b2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80139b6:	ee23 3b08 	vmul.f64	d3, d3, d8
 80139ba:	eea3 6b05 	vfma.f64	d6, d3, d5
 80139be:	eeb0 0b46 	vmov.f64	d0, d6
 80139c2:	eea1 0b04 	vfma.f64	d0, d1, d4
 80139c6:	ee32 0b00 	vadd.f64	d0, d2, d0
 80139ca:	ecbd 8b02 	vpop	{d8}
 80139ce:	bc70      	pop	{r4, r5, r6}
 80139d0:	4770      	bx	lr
 80139d2:	f1a3 0410 	sub.w	r4, r3, #16
 80139d6:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80139da:	4284      	cmp	r4, r0
 80139dc:	d923      	bls.n	8013a26 <log+0x136>
 80139de:	1894      	adds	r4, r2, r2
 80139e0:	eb41 0001 	adc.w	r0, r1, r1
 80139e4:	4320      	orrs	r0, r4
 80139e6:	d105      	bne.n	80139f4 <log+0x104>
 80139e8:	ecbd 8b02 	vpop	{d8}
 80139ec:	2001      	movs	r0, #1
 80139ee:	bc70      	pop	{r4, r5, r6}
 80139f0:	f7ff b95e 	b.w	8012cb0 <__math_divzero>
 80139f4:	4839      	ldr	r0, [pc, #228]	; (8013adc <log+0x1ec>)
 80139f6:	4281      	cmp	r1, r0
 80139f8:	bf08      	it	eq
 80139fa:	2a00      	cmpeq	r2, #0
 80139fc:	d0e5      	beq.n	80139ca <log+0xda>
 80139fe:	041a      	lsls	r2, r3, #16
 8013a00:	d404      	bmi.n	8013a0c <log+0x11c>
 8013a02:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8013a06:	ea32 0303 	bics.w	r3, r2, r3
 8013a0a:	d104      	bne.n	8013a16 <log+0x126>
 8013a0c:	ecbd 8b02 	vpop	{d8}
 8013a10:	bc70      	pop	{r4, r5, r6}
 8013a12:	f7ff b965 	b.w	8012ce0 <__math_invalid>
 8013a16:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8013ac0 <log+0x1d0>
 8013a1a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013a1e:	ec53 2b17 	vmov	r2, r3, d7
 8013a22:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8013a26:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8013a2a:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8013a2e:	0d1e      	lsrs	r6, r3, #20
 8013a30:	1e14      	subs	r4, r2, #0
 8013a32:	4a29      	ldr	r2, [pc, #164]	; (8013ad8 <log+0x1e8>)
 8013a34:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8013a38:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8013a3c:	0536      	lsls	r6, r6, #20
 8013a3e:	1b8d      	subs	r5, r1, r6
 8013a40:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8013a44:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8013a48:	ec45 4b16 	vmov	d6, r4, r5
 8013a4c:	151b      	asrs	r3, r3, #20
 8013a4e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013a52:	ee07 3a90 	vmov	s15, r3
 8013a56:	ee25 2b05 	vmul.f64	d2, d5, d5
 8013a5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8013a5e:	ed92 4b00 	vldr	d4, [r2]
 8013a62:	ee25 1b02 	vmul.f64	d1, d5, d2
 8013a66:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8013a6a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013a6e:	ee35 4b07 	vadd.f64	d4, d5, d7
 8013a72:	ee37 0b44 	vsub.f64	d0, d7, d4
 8013a76:	ed92 7b02 	vldr	d7, [r2, #8]
 8013a7a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013a7e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8013a82:	ed92 7b04 	vldr	d7, [r2, #16]
 8013a86:	ed92 6b08 	vldr	d6, [r2, #32]
 8013a8a:	eea7 0b02 	vfma.f64	d0, d7, d2
 8013a8e:	ed92 7b06 	vldr	d7, [r2, #24]
 8013a92:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 8013a96:	eea6 7b05 	vfma.f64	d7, d6, d5
 8013a9a:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8013a9e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013aa2:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013aa6:	eea1 0b07 	vfma.f64	d0, d1, d7
 8013aaa:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013aae:	e78c      	b.n	80139ca <log+0xda>
 8013ab0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013ac8 <log+0x1d8>
 8013ab4:	e789      	b.n	80139ca <log+0xda>
 8013ab6:	bf00      	nop
 8013ab8:	00000000 	.word	0x00000000
 8013abc:	41a00000 	.word	0x41a00000
 8013ac0:	00000000 	.word	0x00000000
 8013ac4:	43300000 	.word	0x43300000
	...
 8013ad0:	000308ff 	.word	0x000308ff
 8013ad4:	3ff00000 	.word	0x3ff00000
 8013ad8:	0801dea8 	.word	0x0801dea8
 8013adc:	7ff00000 	.word	0x7ff00000

08013ae0 <fabs>:
 8013ae0:	ec51 0b10 	vmov	r0, r1, d0
 8013ae4:	ee10 2a10 	vmov	r2, s0
 8013ae8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013aec:	ec43 2b10 	vmov	d0, r2, r3
 8013af0:	4770      	bx	lr
 8013af2:	0000      	movs	r0, r0
 8013af4:	0000      	movs	r0, r0
	...

08013af8 <floor>:
 8013af8:	ee10 1a90 	vmov	r1, s1
 8013afc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013b00:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8013b04:	2b13      	cmp	r3, #19
 8013b06:	b530      	push	{r4, r5, lr}
 8013b08:	ee10 0a10 	vmov	r0, s0
 8013b0c:	ee10 5a10 	vmov	r5, s0
 8013b10:	dc31      	bgt.n	8013b76 <floor+0x7e>
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	da15      	bge.n	8013b42 <floor+0x4a>
 8013b16:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013bd0 <floor+0xd8>
 8013b1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b26:	dd07      	ble.n	8013b38 <floor+0x40>
 8013b28:	2900      	cmp	r1, #0
 8013b2a:	da4e      	bge.n	8013bca <floor+0xd2>
 8013b2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b30:	4318      	orrs	r0, r3
 8013b32:	d001      	beq.n	8013b38 <floor+0x40>
 8013b34:	4928      	ldr	r1, [pc, #160]	; (8013bd8 <floor+0xe0>)
 8013b36:	2000      	movs	r0, #0
 8013b38:	460b      	mov	r3, r1
 8013b3a:	4602      	mov	r2, r0
 8013b3c:	ec43 2b10 	vmov	d0, r2, r3
 8013b40:	e020      	b.n	8013b84 <floor+0x8c>
 8013b42:	4a26      	ldr	r2, [pc, #152]	; (8013bdc <floor+0xe4>)
 8013b44:	411a      	asrs	r2, r3
 8013b46:	ea01 0402 	and.w	r4, r1, r2
 8013b4a:	4304      	orrs	r4, r0
 8013b4c:	d01a      	beq.n	8013b84 <floor+0x8c>
 8013b4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013bd0 <floor+0xd8>
 8013b52:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b56:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5e:	ddeb      	ble.n	8013b38 <floor+0x40>
 8013b60:	2900      	cmp	r1, #0
 8013b62:	bfbe      	ittt	lt
 8013b64:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8013b68:	fa40 f303 	asrlt.w	r3, r0, r3
 8013b6c:	18c9      	addlt	r1, r1, r3
 8013b6e:	ea21 0102 	bic.w	r1, r1, r2
 8013b72:	2000      	movs	r0, #0
 8013b74:	e7e0      	b.n	8013b38 <floor+0x40>
 8013b76:	2b33      	cmp	r3, #51	; 0x33
 8013b78:	dd05      	ble.n	8013b86 <floor+0x8e>
 8013b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b7e:	d101      	bne.n	8013b84 <floor+0x8c>
 8013b80:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013b84:	bd30      	pop	{r4, r5, pc}
 8013b86:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8013b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b8e:	40e2      	lsrs	r2, r4
 8013b90:	4202      	tst	r2, r0
 8013b92:	d0f7      	beq.n	8013b84 <floor+0x8c>
 8013b94:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013bd0 <floor+0xd8>
 8013b98:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba4:	ddc8      	ble.n	8013b38 <floor+0x40>
 8013ba6:	2900      	cmp	r1, #0
 8013ba8:	da02      	bge.n	8013bb0 <floor+0xb8>
 8013baa:	2b14      	cmp	r3, #20
 8013bac:	d103      	bne.n	8013bb6 <floor+0xbe>
 8013bae:	3101      	adds	r1, #1
 8013bb0:	ea20 0002 	bic.w	r0, r0, r2
 8013bb4:	e7c0      	b.n	8013b38 <floor+0x40>
 8013bb6:	2401      	movs	r4, #1
 8013bb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013bbc:	fa04 f303 	lsl.w	r3, r4, r3
 8013bc0:	4418      	add	r0, r3
 8013bc2:	42a8      	cmp	r0, r5
 8013bc4:	bf38      	it	cc
 8013bc6:	1909      	addcc	r1, r1, r4
 8013bc8:	e7f2      	b.n	8013bb0 <floor+0xb8>
 8013bca:	2000      	movs	r0, #0
 8013bcc:	4601      	mov	r1, r0
 8013bce:	e7b3      	b.n	8013b38 <floor+0x40>
 8013bd0:	8800759c 	.word	0x8800759c
 8013bd4:	7e37e43c 	.word	0x7e37e43c
 8013bd8:	bff00000 	.word	0xbff00000
 8013bdc:	000fffff 	.word	0x000fffff

08013be0 <nan>:
 8013be0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013be8 <nan+0x8>
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop
 8013be8:	00000000 	.word	0x00000000
 8013bec:	7ff80000 	.word	0x7ff80000

08013bf0 <scalbn>:
 8013bf0:	ee10 1a90 	vmov	r1, s1
 8013bf4:	b510      	push	{r4, lr}
 8013bf6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013bfa:	b98c      	cbnz	r4, 8013c20 <scalbn+0x30>
 8013bfc:	ee10 3a10 	vmov	r3, s0
 8013c00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013c04:	430b      	orrs	r3, r1
 8013c06:	d011      	beq.n	8013c2c <scalbn+0x3c>
 8013c08:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8013cd0 <scalbn+0xe0>
 8013c0c:	4b3c      	ldr	r3, [pc, #240]	; (8013d00 <scalbn+0x110>)
 8013c0e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013c12:	4298      	cmp	r0, r3
 8013c14:	da0b      	bge.n	8013c2e <scalbn+0x3e>
 8013c16:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8013cd8 <scalbn+0xe8>
 8013c1a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013c1e:	e005      	b.n	8013c2c <scalbn+0x3c>
 8013c20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013c24:	429c      	cmp	r4, r3
 8013c26:	d107      	bne.n	8013c38 <scalbn+0x48>
 8013c28:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013c2c:	bd10      	pop	{r4, pc}
 8013c2e:	ee10 1a90 	vmov	r1, s1
 8013c32:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013c36:	3c36      	subs	r4, #54	; 0x36
 8013c38:	4404      	add	r4, r0
 8013c3a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8013c3e:	429c      	cmp	r4, r3
 8013c40:	dd0d      	ble.n	8013c5e <scalbn+0x6e>
 8013c42:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8013ce0 <scalbn+0xf0>
 8013c46:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8013ce8 <scalbn+0xf8>
 8013c4a:	eeb0 6b47 	vmov.f64	d6, d7
 8013c4e:	ee10 3a90 	vmov	r3, s1
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013c58:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013c5c:	e7e6      	b.n	8013c2c <scalbn+0x3c>
 8013c5e:	2c00      	cmp	r4, #0
 8013c60:	dd0a      	ble.n	8013c78 <scalbn+0x88>
 8013c62:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8013c66:	ec53 2b10 	vmov	r2, r3, d0
 8013c6a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013c6e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8013c72:	ec43 2b10 	vmov	d0, r2, r3
 8013c76:	e7d9      	b.n	8013c2c <scalbn+0x3c>
 8013c78:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8013c7c:	da19      	bge.n	8013cb2 <scalbn+0xc2>
 8013c7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013c82:	4298      	cmp	r0, r3
 8013c84:	ee10 3a90 	vmov	r3, s1
 8013c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c8c:	dd09      	ble.n	8013ca2 <scalbn+0xb2>
 8013c8e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8013ce0 <scalbn+0xf0>
 8013c92:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8013ce8 <scalbn+0xf8>
 8013c96:	eeb0 7b40 	vmov.f64	d7, d0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8013ca0:	e7bb      	b.n	8013c1a <scalbn+0x2a>
 8013ca2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8013cd8 <scalbn+0xe8>
 8013ca6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8013cf0 <scalbn+0x100>
 8013caa:	eeb0 7b40 	vmov.f64	d7, d0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	e7f4      	b.n	8013c9c <scalbn+0xac>
 8013cb2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8013cb6:	ec53 2b10 	vmov	r2, r3, d0
 8013cba:	3436      	adds	r4, #54	; 0x36
 8013cbc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013cc0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8013cc4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8013cf8 <scalbn+0x108>
 8013cc8:	ec43 2b10 	vmov	d0, r2, r3
 8013ccc:	e7a5      	b.n	8013c1a <scalbn+0x2a>
 8013cce:	bf00      	nop
 8013cd0:	00000000 	.word	0x00000000
 8013cd4:	43500000 	.word	0x43500000
 8013cd8:	c2f8f359 	.word	0xc2f8f359
 8013cdc:	01a56e1f 	.word	0x01a56e1f
 8013ce0:	8800759c 	.word	0x8800759c
 8013ce4:	7e37e43c 	.word	0x7e37e43c
 8013ce8:	8800759c 	.word	0x8800759c
 8013cec:	fe37e43c 	.word	0xfe37e43c
 8013cf0:	c2f8f359 	.word	0xc2f8f359
 8013cf4:	81a56e1f 	.word	0x81a56e1f
 8013cf8:	00000000 	.word	0x00000000
 8013cfc:	3c900000 	.word	0x3c900000
 8013d00:	ffff3cb0 	.word	0xffff3cb0

08013d04 <_init>:
 8013d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d06:	bf00      	nop
 8013d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d0a:	bc08      	pop	{r3}
 8013d0c:	469e      	mov	lr, r3
 8013d0e:	4770      	bx	lr

08013d10 <_fini>:
 8013d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d12:	bf00      	nop
 8013d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d16:	bc08      	pop	{r3}
 8013d18:	469e      	mov	lr, r3
 8013d1a:	4770      	bx	lr
