
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012624  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a7a0  080128c8  080128c8  000228c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d068  0801d068  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801d068  0801d068  0002d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d070  0801d070  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d070  0801d070  0002d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d074  0801d074  0002d074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  24000000  0801d078  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eda8  24000680  0801d6e0  00030680  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400f428  0801d6e0  0003f428  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   000487f5  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008264  00000000  00000000  00097823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002daa4  00000000  00000000  0009fa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b48  00000000  00000000  000cd530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004c08  00000000  00000000  000cf078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008af2  00000000  00000000  000d3c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000411cb  00000000  00000000  000dc772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186497  00000000  00000000  0011d93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c5  00000000  00000000  002a3dd4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ed8  00000000  00000000  002a3e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000680 	.word	0x24000680
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080128ac 	.word	0x080128ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000684 	.word	0x24000684
 80002dc:	080128ac 	.word	0x080128ac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 8000694:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 8000696:	4c05      	ldr	r4, [pc, #20]	; (80006ac <loadWPM+0x18>)
{
 8000698:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 800069a:	17c3      	asrs	r3, r0, #31
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80006a2:	f7ff fe75 	bl	8000390 <__aeabi_uldivmod>
 80006a6:	6020      	str	r0, [r4, #0]

}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	24009b78 	.word	0x24009b78

080006b0 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80006b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 80006b4:	4c9a      	ldr	r4, [pc, #616]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d12f      	bne.n	800071c <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 80006bc:	4a99      	ldr	r2, [pc, #612]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a02      	cmp	r2, #2
 80006c2:	d029      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 80006c4:	4d98      	ldr	r5, [pc, #608]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80006c6:	782a      	ldrb	r2, [r5, #0]
 80006c8:	2a05      	cmp	r2, #5
 80006ca:	d825      	bhi.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 80006cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80006d0:	009f0070 	.word	0x009f0070
 80006d4:	000600d9 	.word	0x000600d9
 80006d8:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 80006dc:	4a93      	ldr	r2, [pc, #588]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80006de:	2001      	movs	r0, #1
 80006e0:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 80e2 	beq.w	80008ac <HAL_TIM_PeriodElapsedCallback+0x1fc>
 80006e8:	4f91      	ldr	r7, [pc, #580]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 80006ea:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 80006ec:	2300      	movs	r3, #0
			CarrierEnable(1);
 80006ee:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 80006f0:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80006f2:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 80006f4:	f002 fd14 	bl	8003120 <CarrierEnable>
		TXSwitch(1);
 80006f8:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 80006fa:	2404      	movs	r4, #4
		TXSwitch(1);
 80006fc:	f002 fcac 	bl	8003058 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000700:	f003 ff6c 	bl	80045dc <HAL_GetTick>
 8000704:	498b      	ldr	r1, [pc, #556]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000706:	4a8c      	ldr	r2, [pc, #560]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000708:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 800070a:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800070c:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800070e:	7813      	ldrb	r3, [r2, #0]
 8000710:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8000714:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8000716:	7013      	strb	r3, [r2, #0]
}
 8000718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800071c:	f003 ff5e 	bl	80045dc <HAL_GetTick>
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000726:	4290      	cmp	r0, r2
 8000728:	f200 80b9 	bhi.w	800089e <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0c5      	beq.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
 8000730:	f003 ff54 	bl	80045dc <HAL_GetTick>
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	4298      	cmp	r0, r3
 8000738:	d9c0      	bls.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 800073a:	4f80      	ldr	r7, [pc, #512]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 800073c:	2000      	movs	r0, #0
 800073e:	f002 fc8b 	bl	8003058 <TXSwitch>
						pk = Saved_pk;
 8000742:	4e7f      	ldr	r6, [pc, #508]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 8000744:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 800074a:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 800074c:	6031      	str	r1, [r6, #0]
 800074e:	e7b5      	b.n	80006bc <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	487c      	ldr	r0, [pc, #496]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000754:	f006 fecc 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000758:	b948      	cbnz	r0, 800076e <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800075a:	4b7b      	ldr	r3, [pc, #492]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800075c:	4a76      	ldr	r2, [pc, #472]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	7811      	ldrb	r1, [r2, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2302      	movne	r3, #2
 8000768:	2301      	moveq	r3, #1
 800076a:	430b      	orrs	r3, r1
 800076c:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4874      	ldr	r0, [pc, #464]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000772:	f006 febd 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000776:	b948      	cbnz	r0, 800078c <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 8000778:	4b73      	ldr	r3, [pc, #460]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800077a:	4a6f      	ldr	r2, [pc, #444]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	7811      	ldrb	r1, [r2, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2302      	moveq	r3, #2
 8000788:	430b      	orrs	r3, r1
 800078a:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 800078c:	f003 ff26 	bl	80045dc <HAL_GetTick>
 8000790:	4b68      	ldr	r3, [pc, #416]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4298      	cmp	r0, r3
 8000796:	d9bf      	bls.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800079a:	7813      	ldrb	r3, [r2, #0]
 800079c:	f013 0104 	ands.w	r1, r3, #4
 80007a0:	f000 80b9 	beq.w	8000916 <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007a4:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007a8:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80007aa:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 80007ac:	7029      	strb	r1, [r5, #0]
 80007ae:	e7b3      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007b4:	f006 fe9c 	bl	80074f0 <HAL_GPIO_ReadPin>
 80007b8:	b140      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	4861      	ldr	r0, [pc, #388]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007be:	f006 fe97 	bl	80074f0 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 80007c2:	b118      	cbz	r0, 80007cc <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 80007c4:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	0798      	lsls	r0, r3, #30
 80007ca:	d0a5      	beq.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	485d      	ldr	r0, [pc, #372]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007d0:	f006 fe8e 	bl	80074f0 <HAL_GPIO_ReadPin>
 80007d4:	b948      	cbnz	r0, 80007ea <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80007d6:	4b5c      	ldr	r3, [pc, #368]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	7811      	ldrb	r1, [r2, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2302      	movne	r3, #2
 80007e4:	2301      	moveq	r3, #1
 80007e6:	430b      	orrs	r3, r1
 80007e8:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4855      	ldr	r0, [pc, #340]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80007ee:	f006 fe7f 	bl	80074f0 <HAL_GPIO_ReadPin>
 80007f2:	b948      	cbnz	r0, 8000808 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80007f4:	4b54      	ldr	r3, [pc, #336]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	7811      	ldrb	r1, [r2, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2302      	moveq	r3, #2
 8000804:	430b      	orrs	r3, r1
 8000806:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8000808:	2301      	movs	r3, #1
 800080a:	702b      	strb	r3, [r5, #0]
 800080c:	e784      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 800080e:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000810:	7813      	ldrb	r3, [r2, #0]
 8000812:	07d9      	lsls	r1, r3, #31
 8000814:	d55e      	bpl.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 8000816:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 800081a:	484c      	ldr	r0, [pc, #304]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800081c:	4945      	ldr	r1, [pc, #276]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800081e:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8000820:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 8000822:	2303      	movs	r3, #3
				ktimer = ditTime;
 8000824:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 8000826:	702b      	strb	r3, [r5, #0]
 8000828:	e776      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 800082a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000934 <HAL_TIM_PeriodElapsedCallback+0x284>
 800082e:	f003 fed5 	bl	80045dc <HAL_GetTick>
 8000832:	f8d8 3000 	ldr.w	r3, [r8]
 8000836:	4298      	cmp	r0, r3
 8000838:	d84f      	bhi.n	80008da <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 800083a:	4c3f      	ldr	r4, [pc, #252]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	06db      	lsls	r3, r3, #27
 8000840:	f57f af6a 	bpl.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	483f      	ldr	r0, [pc, #252]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000848:	f006 fe52 	bl	80074f0 <HAL_GPIO_ReadPin>
 800084c:	b940      	cbnz	r0, 8000860 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800084e:	4b3e      	ldr	r3, [pc, #248]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000850:	7822      	ldrb	r2, [r4, #0]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2302      	movne	r3, #2
 800085a:	2301      	moveq	r3, #1
 800085c:	4313      	orrs	r3, r2
 800085e:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4838      	ldr	r0, [pc, #224]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000864:	f006 fe44 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000868:	2800      	cmp	r0, #0
 800086a:	f47f af55 	bne.w	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000870:	7822      	ldrb	r2, [r4, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2302      	moveq	r3, #2
 800087c:	4313      	orrs	r3, r2
 800087e:	7023      	strb	r3, [r4, #0]
}
 8000880:	e74a      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f013 0302 	ands.w	r3, r3, #2
 800088a:	d00d      	beq.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 800088e:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000892:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 8000894:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 8000896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800089a:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800089c:	e73c      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f002 fbda 	bl	8003058 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	e741      	b.n	800072c <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 80008a8:	702b      	strb	r3, [r5, #0]
 80008aa:	e735      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80008ac:	4e28      	ldr	r6, [pc, #160]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80008ae:	4f20      	ldr	r7, [pc, #128]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008b0:	7833      	ldrb	r3, [r6, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f43f af19 	beq.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
 80008b8:	783b      	ldrb	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f47f af15 	bne.w	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008c6:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 80008c8:	f002 fbc6 	bl	8003058 <TXSwitch>
			HAL_Delay(txdelay);
 80008cc:	7830      	ldrb	r0, [r6, #0]
 80008ce:	f003 fe8b 	bl	80045e8 <HAL_Delay>
 80008d2:	e70a      	b.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 80008d4:	2302      	movs	r3, #2
 80008d6:	702b      	strb	r3, [r5, #0]
 80008d8:	e71e      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008dc:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 80008de:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 80008e0:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 80008e2:	bbb8      	cbnz	r0, 8000954 <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008e6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800094c <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 80008ea:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 80008ec:	f002 fc18 	bl	8003120 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80008f0:	f003 fe74 	bl	80045dc <HAL_GetTick>
 80008f4:	f8d9 3000 	ldr.w	r3, [r9]
 80008f8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80008fc:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80008fe:	2800      	cmp	r0, #0
 8000900:	d039      	beq.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000902:	f003 fe6b 	bl	80045dc <HAL_GetTick>
 8000906:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 800090a:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800090c:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 800090e:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8000910:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 8000914:	e700      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 8000916:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 800091a:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 800091c:	7013      	strb	r3, [r2, #0]
}
 800091e:	e6fb      	b.n	8000718 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000920:	2400c8d4 	.word	0x2400c8d4
 8000924:	2400c74a 	.word	0x2400c74a
 8000928:	2400c749 	.word	0x2400c749
 800092c:	240061ac 	.word	0x240061ac
 8000930:	2400d908 	.word	0x2400d908
 8000934:	2400c754 	.word	0x2400c754
 8000938:	2400c748 	.word	0x2400c748
 800093c:	240071d0 	.word	0x240071d0
 8000940:	2400c780 	.word	0x2400c780
 8000944:	58020000 	.word	0x58020000
 8000948:	2400c750 	.word	0x2400c750
 800094c:	24009b78 	.word	0x24009b78
 8000950:	2400d909 	.word	0x2400d909
	tx = tx_enable;
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 8000956:	4f0a      	ldr	r7, [pc, #40]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000958:	4e0a      	ldr	r6, [pc, #40]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 800095a:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800095c:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 800095e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8000988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 8000966:	2000      	movs	r0, #0
 8000968:	f002 fb76 	bl	8003058 <TXSwitch>
						pk = Saved_pk;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 8000974:	e7c5      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x252>
 8000976:	4e03      	ldr	r6, [pc, #12]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000978:	4f01      	ldr	r7, [pc, #4]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800097a:	e7f4      	b.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x2b6>
 800097c:	2400d908 	.word	0x2400d908
 8000980:	240071d0 	.word	0x240071d0
 8000984:	2400c780 	.word	0x2400c780
 8000988:	24009b78 	.word	0x24009b78

0800098c <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 800098c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 8000990:	497d      	ldr	r1, [pc, #500]	; (8000b88 <cw_tx_char+0x1fc>)
 8000992:	237e      	movs	r3, #126	; 0x7e
 8000994:	2500      	movs	r5, #0
 8000996:	e004      	b.n	80009a2 <cw_tx_char+0x16>
 8000998:	b2d5      	uxtb	r5, r2
 800099a:	5d4b      	ldrb	r3, [r1, r5]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 808b 	beq.w	8000ab8 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80009a2:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80009a4:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 80009a8:	d1f6      	bne.n	8000998 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80009aa:	062b      	lsls	r3, r5, #24
 80009ac:	f100 80e6 	bmi.w	8000b7c <cw_tx_char+0x1f0>
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	461e      	mov	r6, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	422b      	tst	r3, r5
 80009b8:	d0fb      	beq.n	80009b2 <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 80009ba:	08b6      	lsrs	r6, r6, #2
 80009bc:	f000 80b2 	beq.w	8000b24 <cw_tx_char+0x198>
 80009c0:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8000b9c <cw_tx_char+0x210>
 80009c4:	4f71      	ldr	r7, [pc, #452]	; (8000b8c <cw_tx_char+0x200>)
 80009c6:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000ba4 <cw_tx_char+0x218>
					Saved_pk = pk;
 80009ca:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8000ba0 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b93b      	cbnz	r3, 80009e2 <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 80009d2:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <cw_tx_char+0x204>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b123      	cbz	r3, 80009e2 <cw_tx_char+0x56>
 80009d8:	f898 3000 	ldrb.w	r3, [r8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 8095 	beq.w	8000b0c <cw_tx_char+0x180>
	tx = tx_enable;
 80009e2:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 80009e4:	2300      	movs	r3, #0
			CarrierEnable(1);
 80009e6:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 80009e8:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 80009ea:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 80009ee:	f002 fb97 	bl	8003120 <CarrierEnable>
		TXSwitch(1);
 80009f2:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 80009f4:	4c67      	ldr	r4, [pc, #412]	; (8000b94 <cw_tx_char+0x208>)
		TXSwitch(1);
 80009f6:	f002 fb2f 	bl	8003058 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80009fa:	422e      	tst	r6, r5
 80009fc:	f8d9 0000 	ldr.w	r0, [r9]
 8000a00:	bf14      	ite	ne
 8000a02:	f04f 0b03 	movne.w	fp, #3
 8000a06:	f04f 0b01 	moveq.w	fp, #1
 8000a0a:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8000a0e:	f003 fde5 	bl	80045dc <HAL_GetTick>
 8000a12:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a14:	e00a      	b.n	8000a2c <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 8000a16:	f006 fd6b 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4620      	mov	r0, r4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d04c      	beq.n	8000abe <cw_tx_char+0x132>
 8000a24:	f006 fd64 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d048      	beq.n	8000abe <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8000a2c:	f003 fdd6 	bl	80045dc <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a36:	459b      	cmp	fp, r3
 8000a38:	d8ed      	bhi.n	8000a16 <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8000a3a:	6838      	ldr	r0, [r7, #0]
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d151      	bne.n	8000ae4 <cw_tx_char+0x158>
	tx = tx_enable;
 8000a40:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000a44:	f002 fb6c 	bl	8003120 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000a48:	f003 fdc8 	bl	80045dc <HAL_GetTick>
 8000a4c:	f8d9 b000 	ldr.w	fp, [r9]
 8000a50:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8000a54:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d04c      	beq.n	8000af4 <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 8000a5a:	f003 fdbf 	bl	80045dc <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a5e:	4c4d      	ldr	r4, [pc, #308]	; (8000b94 <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 8000a60:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 8000a62:	e008      	b.n	8000a76 <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 8000a64:	f006 fd44 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	b3b3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000a70:	f006 fd3e 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000a74:	b398      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000a76:	f003 fdb1 	bl	80045dc <HAL_GetTick>
 8000a7a:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000a80:	459b      	cmp	fp, r3
 8000a82:	d8ef      	bhi.n	8000a64 <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 8000a84:	0876      	lsrs	r6, r6, #1
 8000a86:	d1a2      	bne.n	80009ce <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a88:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 8000a8c:	f003 fda6 	bl	80045dc <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 8000a90:	4c40      	ldr	r4, [pc, #256]	; (8000b94 <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 8000a92:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 8000a94:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000a96:	e008      	b.n	8000aaa <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 8000a98:	f006 fd2a 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	b1e3      	cbz	r3, 8000ade <cw_tx_char+0x152>
 8000aa4:	f006 fd24 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000aa8:	b1c8      	cbz	r0, 8000ade <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8000aaa:	f003 fd97 	bl	80045dc <HAL_GetTick>
 8000aae:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000ab4:	429e      	cmp	r6, r3
 8000ab6:	d8ef      	bhi.n	8000a98 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8000ab8:	2000      	movs	r0, #0
}
 8000aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d14a      	bne.n	8000b5a <cw_tx_char+0x1ce>
	tx = tx_enable;
 8000ac4:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8000ac8:	f002 fb2a 	bl	8003120 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8000acc:	f003 fd86 	bl	80045dc <HAL_GetTick>
 8000ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8000ad4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8000ad8:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8000ada:	2800      	cmp	r0, #0
 8000adc:	d050      	beq.n	8000b80 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 8000ae4:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000ae6:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000ae8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000aec:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000aee:	f8da 3000 	ldr.w	r3, [sl]
 8000af2:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f002 faaf 	bl	8003058 <TXSwitch>
			semi_qsk_timeout = 0;
 8000afa:	2300      	movs	r3, #0
						pk = Saved_pk;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8000afe:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8000b00:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 8000b04:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e7a6      	b.n	8000a5a <cw_tx_char+0xce>
					Saved_pk = pk;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8000b0e:	2001      	movs	r0, #1
					Saved_pk = pk;
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 8000b16:	f002 fa9f 	bl	8003058 <TXSwitch>
			HAL_Delay(txdelay);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <cw_tx_char+0x204>)
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	f003 fd63 	bl	80045e8 <HAL_Delay>
 8000b22:	e75e      	b.n	80009e2 <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 8000b26:	4c1b      	ldr	r4, [pc, #108]	; (8000b94 <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b28:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8000b2a:	f003 fd57 	bl	80045dc <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8000b2e:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8000b30:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 8000b32:	e00a      	b.n	8000b4a <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 8000b34:	f006 fcdc 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0ba      	beq.n	8000ab8 <cw_tx_char+0x12c>
 8000b42:	f006 fcd5 	bl	80074f0 <HAL_GPIO_ReadPin>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d0b6      	beq.n	8000ab8 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 8000b4a:	f003 fd47 	bl	80045dc <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d8ed      	bhi.n	8000b34 <cw_tx_char+0x1a8>
 8000b58:	e7ae      	b.n	8000ab8 <cw_tx_char+0x12c>
	tx = tx_enable;
 8000b5a:	2300      	movs	r3, #0
			pk = Saved_pk;
 8000b5c:	4d10      	ldr	r5, [pc, #64]	; (8000ba0 <cw_tx_char+0x214>)
 8000b5e:	4c0e      	ldr	r4, [pc, #56]	; (8000b98 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8000b60:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8000b64:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f002 fa74 	bl	8003058 <TXSwitch>
			semi_qsk_timeout = 0;
 8000b70:	2200      	movs	r2, #0
						pk = Saved_pk;
 8000b72:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8000b74:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 8000b76:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 8000b78:	6023      	str	r3, [r4, #0]
 8000b7a:	e79e      	b.n	8000aba <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8000b7c:	2640      	movs	r6, #64	; 0x40
 8000b7e:	e71f      	b.n	80009c0 <cw_tx_char+0x34>
 8000b80:	4d07      	ldr	r5, [pc, #28]	; (8000ba0 <cw_tx_char+0x214>)
 8000b82:	4c05      	ldr	r4, [pc, #20]	; (8000b98 <cw_tx_char+0x20c>)
 8000b84:	e7f1      	b.n	8000b6a <cw_tx_char+0x1de>
 8000b86:	bf00      	nop
 8000b88:	080128c8 	.word	0x080128c8
 8000b8c:	2400c8d4 	.word	0x2400c8d4
 8000b90:	2400d909 	.word	0x2400d909
 8000b94:	58020000 	.word	0x58020000
 8000b98:	2400c780 	.word	0x2400c780
 8000b9c:	24009b78 	.word	0x24009b78
 8000ba0:	240071d0 	.word	0x240071d0
 8000ba4:	2400d908 	.word	0x2400d908

08000ba8 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8000baa:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <SendCWMessage+0x28>)
 8000bb0:	012a      	lsls	r2, r5, #4
 8000bb2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8000bb6:	5c98      	ldrb	r0, [r3, r2]
 8000bb8:	b148      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bba:	2400      	movs	r4, #0
 8000bbc:	e002      	b.n	8000bc4 <SendCWMessage+0x1c>
 8000bbe:	b2e4      	uxtb	r4, r4
 8000bc0:	5d28      	ldrb	r0, [r5, r4]
 8000bc2:	b120      	cbz	r0, 8000bce <SendCWMessage+0x26>
 8000bc4:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8000bc6:	f7ff fee1 	bl	800098c <cw_tx_char>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d0f7      	beq.n	8000bbe <SendCWMessage+0x16>
}
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	24000000 	.word	0x24000000

08000bd4 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <Load_Presets+0x40>)
{
 8000bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bda:	4c0f      	ldr	r4, [pc, #60]	; (8000c18 <Load_Presets+0x44>)
 8000bdc:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000be0:	4f0e      	ldr	r7, [pc, #56]	; (8000c1c <Load_Presets+0x48>)
 8000be2:	4e0f      	ldr	r6, [pc, #60]	; (8000c20 <Load_Presets+0x4c>)
 8000be4:	4d0f      	ldr	r5, [pc, #60]	; (8000c24 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000be6:	4621      	mov	r1, r4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00e fb5f 	bl	800f2ac <strcpy>
 8000bee:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8000bf0:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8000bf4:	3410      	adds	r4, #16
 8000bf6:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8000bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8000bfc:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000c00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8000c04:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8000c06:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8000c0a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000c0e:	d1ea      	bne.n	8000be6 <Load_Presets+0x12>
	}
}
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c14:	2400c784 	.word	0x2400c784
 8000c18:	24000120 	.word	0x24000120
 8000c1c:	08018958 	.word	0x08018958
 8000c20:	0801898f 	.word	0x0801898f
 8000c24:	08018947 	.word	0x08018947

08000c28 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <SetBW+0x90>)
{
 8000c2c:	b410      	push	{r4}
	switch(CurrentMode)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000c30:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d83a      	bhi.n	8000cac <SetBW+0x84>
 8000c36:	e8df f003 	tbb	[pc, r3]
 8000c3a:	232b      	.short	0x232b
 8000c3c:	0210      	.short	0x0210

		break;

	case CW  :

		bw[CW] = newbw;
 8000c3e:	4c1f      	ldr	r4, [pc, #124]	; (8000cbc <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000c40:	2100      	movs	r1, #0
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000c48:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8000c4a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <SetBW+0x9c>)
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <SetBW+0xa0>)
 8000c50:	491e      	ldr	r1, [pc, #120]	; (8000ccc <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000c52:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c56:	f001 b865 	b.w	8001d24 <SDR_2R_toC_f32>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c5a:	1e02      	subs	r2, r0, #0
		bw[USB] = newbw;
 8000c5c:	4917      	ldr	r1, [pc, #92]	; (8000cbc <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <SetBW+0xa8>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	bf18      	it	ne
 8000c62:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8000c64:	4c1b      	ldr	r4, [pc, #108]	; (8000cd4 <SetBW+0xac>)
		bw[USB] = newbw;
 8000c66:	7088      	strb	r0, [r1, #2]
		USBindex = 0; // TODO toglimi
 8000c68:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c6a:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c6c:	491a      	ldr	r1, [pc, #104]	; (8000cd8 <SetBW+0xb0>)
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000c72:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <SetBW+0xa0>)
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <SetBW+0xb4>)
}	
 8000c78:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c7c:	f001 b852 	b.w	8001d24 <SDR_2R_toC_f32>
		bw[LSB] = newbw;
 8000c80:	490e      	ldr	r1, [pc, #56]	; (8000cbc <SetBW+0x94>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c82:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SetBW+0xa8>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c86:	bf18      	it	ne
 8000c88:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8000c8a:	4c15      	ldr	r4, [pc, #84]	; (8000ce0 <SetBW+0xb8>)
		bw[LSB] = newbw;
 8000c8c:	7048      	strb	r0, [r1, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c8e:	e7eb      	b.n	8000c68 <SetBW+0x40>
		bw[AM] = newbw;
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000c92:	2100      	movs	r1, #0
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000c9a:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8000c9c:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <SetBW+0xbc>)
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <SetBW+0xa0>)
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <SetBW+0xc0>)
}	
 8000ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ca8:	f001 b83c 	b.w	8001d24 <SDR_2R_toC_f32>
}	
 8000cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	24001f8c 	.word	0x24001f8c
 8000cb8:	24001f8b 	.word	0x24001f8b
 8000cbc:	24009b70 	.word	0x24009b70
 8000cc0:	24001f88 	.word	0x24001f88
 8000cc4:	08015948 	.word	0x08015948
 8000cc8:	20004000 	.word	0x20004000
 8000ccc:	08014948 	.word	0x08014948
 8000cd0:	24001768 	.word	0x24001768
 8000cd4:	24007230 	.word	0x24007230
 8000cd8:	08016948 	.word	0x08016948
 8000cdc:	08017948 	.word	0x08017948
 8000ce0:	240071b4 	.word	0x240071b4
 8000ce4:	08013948 	.word	0x08013948
 8000ce8:	08012948 	.word	0x08012948

08000cec <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8000cee:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <SetAGC+0x9c>)
{
 8000cf0:	b410      	push	{r4}
	switch(CurrentMode)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000cf4:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d811      	bhi.n	8000d1e <SetAGC+0x32>
 8000cfa:	e8df f003 	tbb	[pc, r3]
 8000cfe:	2333      	.short	0x2333
 8000d00:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8000d04:	4922      	ldr	r1, [pc, #136]	; (8000d90 <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d06:	4c23      	ldr	r4, [pc, #140]	; (8000d94 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000d0c:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d0e:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000d12:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8000d14:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000d18:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d1a:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d22:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8000d26:	491a      	ldr	r1, [pc, #104]	; (8000d90 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d28:	4c1a      	ldr	r4, [pc, #104]	; (8000d94 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8000d2e:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d30:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d36:	4919      	ldr	r1, [pc, #100]	; (8000d9c <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d38:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d3a:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000d3c:	6093      	str	r3, [r2, #8]
}	
 8000d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d42:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8000d46:	4912      	ldr	r1, [pc, #72]	; (8000d90 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d48:	4c12      	ldr	r4, [pc, #72]	; (8000d94 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000d4e:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d50:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d56:	4911      	ldr	r1, [pc, #68]	; (8000d9c <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d58:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d5a:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d5c:	6053      	str	r3, [r2, #4]
}	
 8000d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d62:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8000d66:	490a      	ldr	r1, [pc, #40]	; (8000d90 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8000d6e:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d70:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d76:	4909      	ldr	r1, [pc, #36]	; (8000d9c <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8000d78:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000d7a:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000d7c:	6013      	str	r3, [r2, #0]
}	
 8000d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	24001f8c 	.word	0x24001f8c
 8000d88:	24001f8a 	.word	0x24001f8a
 8000d8c:	24001760 	.word	0x24001760
 8000d90:	24009b60 	.word	0x24009b60
 8000d94:	240061a0 	.word	0x240061a0
 8000d98:	24001f90 	.word	0x24001f90
 8000d9c:	240061a4 	.word	0x240061a4

08000da0 <Tune_Preset>:
{
 8000da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000da4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000da8:	4e47      	ldr	r6, [pc, #284]	; (8000ec8 <Tune_Preset+0x128>)
 8000daa:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <Tune_Preset+0x12c>)
{
 8000dac:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000dae:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000db2:	4f47      	ldr	r7, [pc, #284]	; (8000ed0 <Tune_Preset+0x130>)
	LOfreq = psets[Idx].freq;
 8000db4:	0045      	lsls	r5, r0, #1
 8000db6:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000db8:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000dba:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000dbc:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d87b      	bhi.n	8000eba <Tune_Preset+0x11a>
 8000dc2:	e8df f003 	tbb	[pc, r3]
 8000dc6:	626e      	.short	0x626e
 8000dc8:	0256      	.short	0x0256
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000dca:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000f0c <Tune_Preset+0x16c>
 8000dce:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000dd2:	f7ff ff29 	bl	8000c28 <SetBW>
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <Tune_Preset+0x134>)
 8000dd8:	78d8      	ldrb	r0, [r3, #3]
 8000dda:	f7ff ff87 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000dde:	783a      	ldrb	r2, [r7, #0]
	SetBW( psets[Idx].bw);
 8000de0:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000de2:	493d      	ldr	r1, [pc, #244]	; (8000ed8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000de4:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000de8:	7d6b      	ldrb	r3, [r5, #21]
	CurrentBW = newbw;
 8000dea:	700b      	strb	r3, [r1, #0]
	switch(CurrentMode)
 8000dec:	2a03      	cmp	r2, #3
 8000dee:	d80f      	bhi.n	8000e10 <Tune_Preset+0x70>
 8000df0:	e8df f002 	tbb	[pc, r2]
 8000df4:	02173629 	.word	0x02173629
		CWindex = 0; // TODO toglimi
 8000df8:	4a38      	ldr	r2, [pc, #224]	; (8000edc <Tune_Preset+0x13c>)
 8000dfa:	2100      	movs	r1, #0
		bw[CW] = newbw;
 8000dfc:	f888 3003 	strb.w	r3, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000e04:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <Tune_Preset+0x140>)
 8000e08:	4a36      	ldr	r2, [pc, #216]	; (8000ee4 <Tune_Preset+0x144>)
 8000e0a:	4937      	ldr	r1, [pc, #220]	; (8000ee8 <Tune_Preset+0x148>)
 8000e0c:	f000 ff8a 	bl	8001d24 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000e10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <Tune_Preset+0x14c>)
 8000e16:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000e1e:	f00e ba45 	b.w	800f2ac <strcpy>
		bw[USB] = newbw;
 8000e22:	f888 3002 	strb.w	r3, [r8, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000e26:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e28:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <Tune_Preset+0x150>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000e2a:	bf18      	it	ne
 8000e2c:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e2e:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <Tune_Preset+0x154>)
 8000e32:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <Tune_Preset+0x158>)
		USBindex = 0; // TODO toglimi
 8000e3a:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <Tune_Preset+0x144>)
 8000e3e:	492f      	ldr	r1, [pc, #188]	; (8000efc <Tune_Preset+0x15c>)
 8000e40:	f000 ff70 	bl	8001d24 <SDR_2R_toC_f32>
		break;
 8000e44:	e7e4      	b.n	8000e10 <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000e46:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <Tune_Preset+0x150>)
 8000e48:	2100      	movs	r1, #0
		bw[AM] = newbw;
 8000e4a:	f888 3000 	strb.w	r3, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000e52:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <Tune_Preset+0x160>)
 8000e56:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <Tune_Preset+0x144>)
 8000e58:	492a      	ldr	r1, [pc, #168]	; (8000f04 <Tune_Preset+0x164>)
 8000e5a:	f000 ff63 	bl	8001d24 <SDR_2R_toC_f32>
		break;
 8000e5e:	e7d7      	b.n	8000e10 <Tune_Preset+0x70>
		bw[LSB] = newbw;
 8000e60:	f888 3001 	strb.w	r3, [r8, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000e64:	3b00      	subs	r3, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e66:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <Tune_Preset+0x150>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000e68:	bf18      	it	ne
 8000e6a:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000e6c:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <Tune_Preset+0x168>)
 8000e70:	e7df      	b.n	8000e32 <Tune_Preset+0x92>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e72:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000f0c <Tune_Preset+0x16c>
 8000e76:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000e7a:	f7ff fed5 	bl	8000c28 <SetBW>
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <Tune_Preset+0x134>)
 8000e80:	7898      	ldrb	r0, [r3, #2]
 8000e82:	f7ff ff33 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000e86:	783a      	ldrb	r2, [r7, #0]
		break;
 8000e88:	e7aa      	b.n	8000de0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e8a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000f0c <Tune_Preset+0x16c>
 8000e8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000e92:	f7ff fec9 	bl	8000c28 <SetBW>
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <Tune_Preset+0x134>)
 8000e98:	7858      	ldrb	r0, [r3, #1]
 8000e9a:	f7ff ff27 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000e9e:	783a      	ldrb	r2, [r7, #0]
		break;
 8000ea0:	e79e      	b.n	8000de0 <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ea2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000f0c <Tune_Preset+0x16c>
 8000ea6:	f898 0000 	ldrb.w	r0, [r8]
 8000eaa:	f7ff febd 	bl	8000c28 <SetBW>
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <Tune_Preset+0x134>)
 8000eb0:	7818      	ldrb	r0, [r3, #0]
 8000eb2:	f7ff ff1b 	bl	8000cec <SetAGC>
	switch(CurrentMode)
 8000eb6:	783a      	ldrb	r2, [r7, #0]
		break;

	default :
		break;
	}
}	
 8000eb8:	e792      	b.n	8000de0 <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000eba:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <Tune_Preset+0x138>)
	SetBW( psets[Idx].bw);
 8000ebe:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000ec2:	7d5b      	ldrb	r3, [r3, #21]
 8000ec4:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000ec6:	e7a3      	b.n	8000e10 <Tune_Preset+0x70>
 8000ec8:	2400c784 	.word	0x2400c784
 8000ecc:	240071b0 	.word	0x240071b0
 8000ed0:	24001f8c 	.word	0x24001f8c
 8000ed4:	24009b60 	.word	0x24009b60
 8000ed8:	24001f8b 	.word	0x24001f8b
 8000edc:	24001f88 	.word	0x24001f88
 8000ee0:	08015948 	.word	0x08015948
 8000ee4:	20004000 	.word	0x20004000
 8000ee8:	08014948 	.word	0x08014948
 8000eec:	2400c75c 	.word	0x2400c75c
 8000ef0:	24001768 	.word	0x24001768
 8000ef4:	24007230 	.word	0x24007230
 8000ef8:	08017948 	.word	0x08017948
 8000efc:	08016948 	.word	0x08016948
 8000f00:	08013948 	.word	0x08013948
 8000f04:	08012948 	.word	0x08012948
 8000f08:	240071b4 	.word	0x240071b4
 8000f0c:	24009b70 	.word	0x24009b70

08000f10 <SetMode>:
{
 8000f10:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <SetMode+0x64>)
 8000f14:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000f16:	2803      	cmp	r0, #3
 8000f18:	d82b      	bhi.n	8000f72 <SetMode+0x62>
 8000f1a:	e8df f000 	tbb	[pc, r0]
 8000f1e:	1620      	.short	0x1620
 8000f20:	020c      	.short	0x020c
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <SetMode+0x68>)
 8000f24:	78d8      	ldrb	r0, [r3, #3]
 8000f26:	f7ff fe7f 	bl	8000c28 <SetBW>
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <SetMode+0x6c>)
 8000f2c:	78d8      	ldrb	r0, [r3, #3]
}	
 8000f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f32:	f7ff bedb 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <SetMode+0x68>)
 8000f38:	7898      	ldrb	r0, [r3, #2]
 8000f3a:	f7ff fe75 	bl	8000c28 <SetBW>
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <SetMode+0x6c>)
 8000f40:	7898      	ldrb	r0, [r3, #2]
}	
 8000f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f46:	f7ff bed1 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <SetMode+0x68>)
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	f7ff fe6b 	bl	8000c28 <SetBW>
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <SetMode+0x6c>)
 8000f54:	7858      	ldrb	r0, [r3, #1]
}	
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f5a:	f7ff bec7 	b.w	8000cec <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SetMode+0x68>)
 8000f60:	7818      	ldrb	r0, [r3, #0]
 8000f62:	f7ff fe61 	bl	8000c28 <SetBW>
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SetMode+0x6c>)
 8000f68:	7818      	ldrb	r0, [r3, #0]
}	
 8000f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f6e:	f7ff bebd 	b.w	8000cec <SetAGC>
}	
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	24001f8c 	.word	0x24001f8c
 8000f78:	24009b70 	.word	0x24009b70
 8000f7c:	24009b60 	.word	0x24009b60

08000f80 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000f80:	2809      	cmp	r0, #9
{
 8000f82:	b508      	push	{r3, lr}
	if (idx == 9)
 8000f84:	d012      	beq.n	8000fac <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000f86:	f1c0 0005 	rsb	r0, r0, #5
 8000f8a:	ee07 0a90 	vmov	s15, r0
 8000f8e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000fb8 <SetFstep+0x38>
 8000f92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f96:	ee27 0b00 	vmul.f64	d0, d7, d0
 8000f9a:	f010 fb5d 	bl	8011658 <exp>
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <SetFstep+0x40>)
 8000fa0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	6013      	str	r3, [r2, #0]
}	
 8000faa:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000fac:	f242 3328 	movw	r3, #9000	; 0x2328
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <SetFstep+0x40>)
 8000fb2:	6013      	str	r3, [r2, #0]
}	
 8000fb4:	bd08      	pop	{r3, pc}
 8000fb6:	bf00      	nop
 8000fb8:	bbb55516 	.word	0xbbb55516
 8000fbc:	40026bb1 	.word	0x40026bb1
 8000fc0:	2400619c 	.word	0x2400619c

08000fc4 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <FplusClicked+0xb4>)
 8000fc6:	ee07 0a90 	vmov	s15, r0
 8000fca:	4a2c      	ldr	r2, [pc, #176]	; (800107c <FplusClicked+0xb8>)
 8000fcc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000fd0:	ed93 6a00 	vldr	s12, [r3]
 8000fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fd8:	ed92 7a00 	vldr	s14, [r2]
 8000fdc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fe2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000fe6:	4927      	ldr	r1, [pc, #156]	; (8001084 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000fe8:	eddf 5a27 	vldr	s11, [pc, #156]	; 8001088 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000fec:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000ff0:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000ff2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4c24      	ldr	r4, [pc, #144]	; (800108c <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000ffa:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000ffc:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001000:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8001002:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8001004:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8001008:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800100c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001010:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8001014:	2b03      	cmp	r3, #3
 8001016:	d80b      	bhi.n	8001030 <FplusClicked+0x6c>
 8001018:	e8df f003 	tbb	[pc, r3]
 800101c:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001020:	78c8      	ldrb	r0, [r1, #3]
 8001022:	f7ff fe01 	bl	8000c28 <SetBW>
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <FplusClicked+0xcc>)
 8001028:	78d8      	ldrb	r0, [r3, #3]
 800102a:	f7ff fe5f 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 800102e:	7d60      	ldrb	r0, [r4, #21]
 8001030:	f7ff fdfa 	bl	8000c28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001034:	4915      	ldr	r1, [pc, #84]	; (800108c <FplusClicked+0xc8>)
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8001038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 800103c:	f00e b936 	b.w	800f2ac <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001040:	7888      	ldrb	r0, [r1, #2]
 8001042:	f7ff fdf1 	bl	8000c28 <SetBW>
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <FplusClicked+0xcc>)
 8001048:	7898      	ldrb	r0, [r3, #2]
 800104a:	f7ff fe4f 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 800104e:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001050:	e7ee      	b.n	8001030 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001052:	7848      	ldrb	r0, [r1, #1]
 8001054:	f7ff fde8 	bl	8000c28 <SetBW>
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <FplusClicked+0xcc>)
 800105a:	7858      	ldrb	r0, [r3, #1]
 800105c:	f7ff fe46 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001060:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001062:	e7e5      	b.n	8001030 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001064:	7808      	ldrb	r0, [r1, #0]
 8001066:	f7ff fddf 	bl	8000c28 <SetBW>
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <FplusClicked+0xcc>)
 800106c:	7818      	ldrb	r0, [r3, #0]
 800106e:	f7ff fe3d 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001072:	7d60      	ldrb	r0, [r4, #21]
}	
 8001074:	e7dc      	b.n	8001030 <FplusClicked+0x6c>
 8001076:	bf00      	nop
 8001078:	2400619c 	.word	0x2400619c
 800107c:	240071b0 	.word	0x240071b0
 8001080:	24001f8c 	.word	0x24001f8c
 8001084:	24009b70 	.word	0x24009b70
 8001088:	4c3ebc20 	.word	0x4c3ebc20
 800108c:	2400c784 	.word	0x2400c784
 8001090:	24009b60 	.word	0x24009b60
 8001094:	2400c75c 	.word	0x2400c75c

08001098 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <FminusClicked+0xb4>)
 800109a:	ee07 0a90 	vmov	s15, r0
 800109e:	4a2c      	ldr	r2, [pc, #176]	; (8001150 <FminusClicked+0xb8>)
 80010a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80010a4:	ed93 6a00 	vldr	s12, [r3]
 80010a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ac:	ed92 7a00 	vldr	s14, [r2]
 80010b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 80010bc:	eddf 5a27 	vldr	s11, [pc, #156]	; 800115c <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010c0:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 80010c4:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010c6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4c24      	ldr	r4, [pc, #144]	; (8001160 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 80010ce:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010d0:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010d4:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 80010d6:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 80010d8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 80010dc:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 80010e0:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 80010e4:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d80b      	bhi.n	8001104 <FminusClicked+0x6c>
 80010ec:	e8df f003 	tbb	[pc, r3]
 80010f0:	02121b24 	.word	0x02121b24
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80010f4:	78c8      	ldrb	r0, [r1, #3]
 80010f6:	f7ff fd97 	bl	8000c28 <SetBW>
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <FminusClicked+0xcc>)
 80010fc:	78d8      	ldrb	r0, [r3, #3]
 80010fe:	f7ff fdf5 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001102:	7d60      	ldrb	r0, [r4, #21]
 8001104:	f7ff fd90 	bl	8000c28 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <FminusClicked+0xc8>)
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 800110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8001110:	f00e b8cc 	b.w	800f2ac <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001114:	7888      	ldrb	r0, [r1, #2]
 8001116:	f7ff fd87 	bl	8000c28 <SetBW>
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <FminusClicked+0xcc>)
 800111c:	7898      	ldrb	r0, [r3, #2]
 800111e:	f7ff fde5 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001122:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001124:	e7ee      	b.n	8001104 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001126:	7848      	ldrb	r0, [r1, #1]
 8001128:	f7ff fd7e 	bl	8000c28 <SetBW>
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <FminusClicked+0xcc>)
 800112e:	7858      	ldrb	r0, [r3, #1]
 8001130:	f7ff fddc 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001134:	7d60      	ldrb	r0, [r4, #21]
		break;
 8001136:	e7e5      	b.n	8001104 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001138:	7808      	ldrb	r0, [r1, #0]
 800113a:	f7ff fd75 	bl	8000c28 <SetBW>
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <FminusClicked+0xcc>)
 8001140:	7818      	ldrb	r0, [r3, #0]
 8001142:	f7ff fdd3 	bl	8000cec <SetAGC>
	SetBW( psets[Idx].bw);
 8001146:	7d60      	ldrb	r0, [r4, #21]
}	
 8001148:	e7dc      	b.n	8001104 <FminusClicked+0x6c>
 800114a:	bf00      	nop
 800114c:	2400619c 	.word	0x2400619c
 8001150:	240071b0 	.word	0x240071b0
 8001154:	24001f8c 	.word	0x24001f8c
 8001158:	24009b70 	.word	0x24009b70
 800115c:	45fa0000 	.word	0x45fa0000
 8001160:	2400c784 	.word	0x2400c784
 8001164:	24009b60 	.word	0x24009b60
 8001168:	2400c75c 	.word	0x2400c75c

0800116c <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8001170:	b570      	push	{r4, r5, r6, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001172:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 8001176:	b082      	sub	sp, #8
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001178:	496c      	ldr	r1, [pc, #432]	; (800132c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800117a:	486d      	ldr	r0, [pc, #436]	; (8001330 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800117c:	f000 fee6 	bl	8001f4c <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8001180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001184:	496b      	ldr	r1, [pc, #428]	; (8001334 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001186:	486c      	ldr	r0, [pc, #432]	; (8001338 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001188:	f000 fee0 	bl	8001f4c <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 800118c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001190:	4a6a      	ldr	r2, [pc, #424]	; (800133c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001192:	4967      	ldr	r1, [pc, #412]	; (8001330 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001194:	486a      	ldr	r0, [pc, #424]	; (8001340 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001196:	f00c fe8b 	bl	800deb0 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 800119a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119e:	4a69      	ldr	r2, [pc, #420]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011a0:	4965      	ldr	r1, [pc, #404]	; (8001338 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80011a2:	4869      	ldr	r0, [pc, #420]	; (8001348 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80011a4:	f00c fe84 	bl	800deb0 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011a8:	4968      	ldr	r1, [pc, #416]	; (800134c <HAL_GPIO_EXTI_Callback+0x1dc>)
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);



	// copy into the (in place...) FFT buffer
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80011aa:	4c69      	ldr	r4, [pc, #420]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1e0>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
*/

// TODO: check why with the original code above LSB and USB are swapped

 //if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80011b4:	4d67      	ldr	r5, [pc, #412]	; (8001354 <HAL_GPIO_EXTI_Callback+0x1e4>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80011b6:	f000 fec9 	bl	8001f4c <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80011ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011be:	4a63      	ldr	r2, [pc, #396]	; (800134c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80011c0:	4960      	ldr	r1, [pc, #384]	; (8001344 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80011c2:	485e      	ldr	r0, [pc, #376]	; (800133c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80011c4:	f000 fdae 	bl	8001d24 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80011c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011cc:	4962      	ldr	r1, [pc, #392]	; (8001358 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80011ce:	4620      	mov	r0, r4
 80011d0:	f000 febc 	bl	8001f4c <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 80011d4:	2301      	movs	r3, #1
 80011d6:	2200      	movs	r2, #0
 80011d8:	4621      	mov	r1, r4
 80011da:	4860      	ldr	r0, [pc, #384]	; (800135c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011dc:	f00c fdaa 	bl	800dd34 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80011e0:	782b      	ldrb	r3, [r5, #0]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	f000 8089 	beq.w	80012fa <HAL_GPIO_EXTI_Callback+0x18a>

#ifdef TEST_WF
	if (ShowWF) {
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d04a      	beq.n	8001286 <HAL_GPIO_EXTI_Callback+0x116>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80011f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001200:	d241      	bcs.n	8001286 <HAL_GPIO_EXTI_Callback+0x116>
 8001202:	4e58      	ldr	r6, [pc, #352]	; (8001364 <HAL_GPIO_EXTI_Callback+0x1f4>)
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001204:	f04f 0c00 	mov.w	ip, #0
		{
			tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 8001208:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800120c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8001210:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001214:	b280      	uxth	r0, r0
 8001216:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800121a:	b289      	uxth	r1, r1
 800121c:	b292      	uxth	r2, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001228:	edd2 7a01 	vldr	s15, [r2, #4]
 800122c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001230:	ed93 6a01 	vldr	s12, [r3, #4]
 8001234:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001238:	edd0 6a00 	vldr	s13, [r0]
 800123c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001240:	ed91 7a00 	vldr	s14, [r1]
 8001244:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001248:	edcd 7a01 	vstr	s15, [sp, #4]
			arm_sqrt_f32(tmp, &WFBuffer[WFSample >> 1]);
 800124c:	eddd 7a01 	vldr	s15, [sp, #4]
 8001250:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001258:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8001264:	db4f      	blt.n	8001306 <HAL_GPIO_EXTI_Callback+0x196>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001266:	eeb1 7ae7 	vsqrt.f32	s14, s15
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 800126a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800126e:	3302      	adds	r3, #2
 8001270:	b29b      	uxth	r3, r3
 8001272:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001276:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800127a:	b29b      	uxth	r3, r3
 800127c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001280:	ed82 7a00 	vstr	s14, [r2]
 8001284:	d3c0      	bcc.n	8001208 <HAL_GPIO_EXTI_Callback+0x98>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8001286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128a:	4a37      	ldr	r2, [pc, #220]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800128c:	4937      	ldr	r1, [pc, #220]	; (800136c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800128e:	4830      	ldr	r0, [pc, #192]	; (8001350 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001290:	f00c ffc6 	bl	800e220 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8001294:	2301      	movs	r3, #1
 8001296:	4934      	ldr	r1, [pc, #208]	; (8001368 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001298:	461a      	mov	r2, r3
 800129a:	4830      	ldr	r0, [pc, #192]	; (800135c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800129c:	f00c fd4a 	bl	800dd34 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80012a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a4:	4932      	ldr	r1, [pc, #200]	; (8001370 <HAL_GPIO_EXTI_Callback+0x200>)
 80012a6:	4833      	ldr	r0, [pc, #204]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012a8:	f000 fe50 	bl	8001f4c <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 80012ac:	782b      	ldrb	r3, [r5, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d80e      	bhi.n	80012d0 <HAL_GPIO_EXTI_Callback+0x160>
 80012b2:	b9eb      	cbnz	r3, 80012f0 <HAL_GPIO_EXTI_Callback+0x180>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80012b4:	4930      	ldr	r1, [pc, #192]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012b6:	482f      	ldr	r0, [pc, #188]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012b8:	f000 ff98 	bl	80021ec <SDR_demodAM_AGC>
*/

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <HAL_GPIO_EXTI_Callback+0x20c>)
 80012be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c2:	482d      	ldr	r0, [pc, #180]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012c4:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 80012c6:	b002      	add	sp, #8
 80012c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80012cc:	f000 bdc8 	b.w	8001e60 <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d1f3      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80012d4:	4928      	ldr	r1, [pc, #160]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012d6:	4827      	ldr	r0, [pc, #156]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012d8:	f001 f818 	bl	800230c <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_GPIO_EXTI_Callback+0x210>)
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1eb      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
			SDR_CWPeak(fAudio, BSIZE);
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	4823      	ldr	r0, [pc, #140]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012ea:	f000 fef5 	bl	80020d8 <SDR_CWPeak>
 80012ee:	e7e5      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80012f0:	4921      	ldr	r1, [pc, #132]	; (8001378 <HAL_GPIO_EXTI_Callback+0x208>)
 80012f2:	4820      	ldr	r0, [pc, #128]	; (8001374 <HAL_GPIO_EXTI_Callback+0x204>)
 80012f4:	f001 f80a 	bl	800230c <SDR_demodSSB_CW_AGC>
 80012f8:	e7e0      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0x14c>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fe3e 	bl	8001f80 <SDR_mirror_LSB>
 8001304:	e770      	b.n	80011e8 <HAL_GPIO_EXTI_Callback+0x78>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8001306:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800130a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800130e:	3202      	adds	r2, #2
 8001310:	f8c3 c000 	str.w	ip, [r3]
 8001314:	b293      	uxth	r3, r2
 8001316:	f8ad 3002 	strh.w	r3, [sp, #2]
 800131a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800131e:	b29b      	uxth	r3, r3
 8001320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001324:	f4ff af70 	bcc.w	8001208 <HAL_GPIO_EXTI_Callback+0x98>
 8001328:	e7ad      	b.n	8001286 <HAL_GPIO_EXTI_Callback+0x116>
 800132a:	bf00      	nop
 800132c:	2000d000 	.word	0x2000d000
 8001330:	20009000 	.word	0x20009000
 8001334:	2000b000 	.word	0x2000b000
 8001338:	20007000 	.word	0x20007000
 800133c:	20006800 	.word	0x20006800
 8001340:	240071e0 	.word	0x240071e0
 8001344:	20006000 	.word	0x20006000
 8001348:	240071d4 	.word	0x240071d4
 800134c:	2400b37c 	.word	0x2400b37c
 8001350:	20002000 	.word	0x20002000
 8001354:	24001f8c 	.word	0x24001f8c
 8001358:	2400a37c 	.word	0x2400a37c
 800135c:	08018b94 	.word	0x08018b94
 8001360:	240071ec 	.word	0x240071ec
 8001364:	24008338 	.word	0x24008338
 8001368:	20000000 	.word	0x20000000
 800136c:	20004000 	.word	0x20004000
 8001370:	20001000 	.word	0x20001000
 8001374:	2400c8d8 	.word	0x2400c8d8
 8001378:	24009b7c 	.word	0x24009b7c
 800137c:	24008334 	.word	0x24008334
 8001380:	24009b70 	.word	0x24009b70

08001384 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8001384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <ADC_Stream0_Handler+0x1e8>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800138a:	4f79      	ldr	r7, [pc, #484]	; (8001570 <ADC_Stream0_Handler+0x1ec>)
{
 800138c:	ed2d 8b10 	vpush	{d8-d15}
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001390:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 8001394:	781b      	ldrb	r3, [r3, #0]
{
 8001396:	b095      	sub	sp, #84	; 0x54
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001398:	2800      	cmp	r0, #0
 800139a:	bf08      	it	eq
 800139c:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 800139e:	2b03      	cmp	r3, #3
 80013a0:	f000 83f3 	beq.w	8001b8a <ADC_Stream0_Handler+0x806>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 80013a4:	4b73      	ldr	r3, [pc, #460]	; (8001574 <ADC_Stream0_Handler+0x1f0>)
 80013a6:	ed93 0a00 	vldr	s0, [r3]
 80013aa:	f000 fbfd 	bl	8001ba8 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 80013ae:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 80013b2:	1ebe      	subs	r6, r7, #2
	sum = 0; k = BSIZE;
 80013b4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8001578 <ADC_Stream0_Handler+0x1f4>
	{
		sum += pR[k-1];
 80013b8:	8810      	ldrh	r0, [r2, #0]
	while(k)
 80013ba:	3a08      	subs	r2, #8
		sum += pR[k-2];
 80013bc:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 80013be:	b280      	uxth	r0, r0
		sum += pR[k-3];
 80013c0:	8894      	ldrh	r4, [r2, #4]
		sum += pR[k-2];
 80013c2:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 80013c4:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 80013c6:	ee07 0a90 	vmov	s15, r0
		sum += pR[k-3];
 80013ca:	b2a4      	uxth	r4, r4
		sum += pR[k-2];
 80013cc:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 80013d0:	b289      	uxth	r1, r1
		sum += pR[k-1];
 80013d2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 80013d6:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-2];
 80013da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80013de:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80013e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80013e6:	4296      	cmp	r6, r2
		sum += pR[k-4];
 80013e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80013f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013f8:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80013fc:	d1dc      	bne.n	80013b8 <ADC_Stream0_Handler+0x34>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80013fe:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 8001402:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001404:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800157c <ADC_Stream0_Handler+0x1f8>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001408:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 800140a:	b29b      	uxth	r3, r3
 800140c:	4c5c      	ldr	r4, [pc, #368]	; (8001580 <ADC_Stream0_Handler+0x1fc>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800140e:	ee20 0a27 	vmul.f32	s0, s0, s15
	TestSampledValue=pR[BSIZE/2];
 8001412:	4d5c      	ldr	r5, [pc, #368]	; (8001584 <ADC_Stream0_Handler+0x200>)
 8001414:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <ADC_Stream0_Handler+0x204>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800141a:	495c      	ldr	r1, [pc, #368]	; (800158c <ADC_Stream0_Handler+0x208>)
	TestSampledValue=pR[BSIZE/2];
 800141c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001420:	8022      	strh	r2, [r4, #0]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001422:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <ADC_Stream0_Handler+0x20c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001424:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 8001428:	edc5 7a00 	vstr	s15, [r5]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800142c:	f000 fca6 	bl	8001d7c <SDR_downconvert_f32>
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <ADC_Stream0_Handler+0x210>)
 8001432:	23ff      	movs	r3, #255	; 0xff
 8001434:	4958      	ldr	r1, [pc, #352]	; (8001598 <ADC_Stream0_Handler+0x214>)
 8001436:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800143a:	ed92 2a00 	vldr	s4, [r2]
 800143e:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8001442:	4a56      	ldr	r2, [pc, #344]	; (800159c <ADC_Stream0_Handler+0x218>)
 8001444:	edd1 3a00 	vldr	s7, [r1]
 8001448:	edd2 1a00 	vldr	s3, [r2]
 800144c:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <ADC_Stream0_Handler+0x21c>)
 800144e:	4955      	ldr	r1, [pc, #340]	; (80015a4 <ADC_Stream0_Handler+0x220>)
 8001450:	ed92 7a00 	vldr	s14, [r2]
 8001454:	4a54      	ldr	r2, [pc, #336]	; (80015a8 <ADC_Stream0_Handler+0x224>)
 8001456:	ed91 9a00 	vldr	s18, [r1]
 800145a:	eeb0 6a47 	vmov.f32	s12, s14
 800145e:	edd2 2a00 	vldr	s5, [r2]
 8001462:	4952      	ldr	r1, [pc, #328]	; (80015ac <ADC_Stream0_Handler+0x228>)
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <ADC_Stream0_Handler+0x22c>)
 8001466:	edd1 ea00 	vldr	s29, [r1]
 800146a:	edd2 8a00 	vldr	s17, [r2]
 800146e:	4951      	ldr	r1, [pc, #324]	; (80015b4 <ADC_Stream0_Handler+0x230>)
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <ADC_Stream0_Handler+0x234>)
 8001472:	edd1 6a00 	vldr	s13, [r1]
 8001476:	ed92 5a00 	vldr	s10, [r2]
 800147a:	4950      	ldr	r1, [pc, #320]	; (80015bc <ADC_Stream0_Handler+0x238>)
 800147c:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <ADC_Stream0_Handler+0x23c>)
 800147e:	edd1 ca00 	vldr	s25, [r1]
 8001482:	edd2 fa00 	vldr	s31, [r2]
 8001486:	494f      	ldr	r1, [pc, #316]	; (80015c4 <ADC_Stream0_Handler+0x240>)
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <ADC_Stream0_Handler+0x244>)
 800148a:	ed91 da00 	vldr	s26, [r1]
 800148e:	ed92 8a00 	vldr	s16, [r2]
 8001492:	494e      	ldr	r1, [pc, #312]	; (80015cc <ADC_Stream0_Handler+0x248>)
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <ADC_Stream0_Handler+0x24c>)
 8001496:	edcd 6a02 	vstr	s13, [sp, #8]
 800149a:	edd2 5a00 	vldr	s11, [r2]
 800149e:	edd1 6a00 	vldr	s13, [r1]
 80014a2:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <ADC_Stream0_Handler+0x250>)
 80014a4:	494c      	ldr	r1, [pc, #304]	; (80015d8 <ADC_Stream0_Handler+0x254>)
 80014a6:	ed92 fa00 	vldr	s30, [r2]
 80014aa:	ed91 ca00 	vldr	s24, [r1]
 80014ae:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <ADC_Stream0_Handler+0x258>)
 80014b0:	494b      	ldr	r1, [pc, #300]	; (80015e0 <ADC_Stream0_Handler+0x25c>)
 80014b2:	edd2 ba00 	vldr	s23, [r2]
 80014b6:	edcd 6a01 	vstr	s13, [sp, #4]
 80014ba:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <ADC_Stream0_Handler+0x260>)
 80014bc:	edd1 6a00 	vldr	s13, [r1]
 80014c0:	4949      	ldr	r1, [pc, #292]	; (80015e8 <ADC_Stream0_Handler+0x264>)
 80014c2:	ed92 3a00 	vldr	s6, [r2]
 80014c6:	edcd 6a03 	vstr	s13, [sp, #12]
 80014ca:	4a48      	ldr	r2, [pc, #288]	; (80015ec <ADC_Stream0_Handler+0x268>)
 80014cc:	edd1 6a00 	vldr	s13, [r1]
 80014d0:	4947      	ldr	r1, [pc, #284]	; (80015f0 <ADC_Stream0_Handler+0x26c>)
 80014d2:	edd2 9a00 	vldr	s19, [r2]
 80014d6:	edcd 6a08 	vstr	s13, [sp, #32]
 80014da:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <ADC_Stream0_Handler+0x270>)
 80014dc:	edd1 6a00 	vldr	s13, [r1]
 80014e0:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8001620 <ADC_Stream0_Handler+0x29c>
 80014e4:	4944      	ldr	r1, [pc, #272]	; (80015f8 <ADC_Stream0_Handler+0x274>)
 80014e6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8001624 <ADC_Stream0_Handler+0x2a0>
 80014ea:	ed92 ba00 	vldr	s22, [r2]
 80014ee:	ed9a 1a00 	vldr	s2, [sl]
 80014f2:	edd9 7a00 	vldr	s15, [r9]
 80014f6:	8023      	strh	r3, [r4, #0]
 80014f8:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 80014fc:	edd1 6a00 	vldr	s13, [r1]
 8001500:	493e      	ldr	r1, [pc, #248]	; (80015fc <ADC_Stream0_Handler+0x278>)
 8001502:	edcd 6a00 	vstr	s13, [sp]
 8001506:	edd1 6a00 	vldr	s13, [r1]
 800150a:	493d      	ldr	r1, [pc, #244]	; (8001600 <ADC_Stream0_Handler+0x27c>)
 800150c:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8001510:	edd1 6a00 	vldr	s13, [r1]
 8001514:	493b      	ldr	r1, [pc, #236]	; (8001604 <ADC_Stream0_Handler+0x280>)
 8001516:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001628 <ADC_Stream0_Handler+0x2a4>
 800151a:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800151e:	edd1 6a00 	vldr	s13, [r1]
 8001522:	4f39      	ldr	r7, [pc, #228]	; (8001608 <ADC_Stream0_Handler+0x284>)
 8001524:	edcd 6a06 	vstr	s13, [sp, #24]
 8001528:	edd8 6a00 	vldr	s13, [r8]
 800152c:	4e37      	ldr	r6, [pc, #220]	; (800160c <ADC_Stream0_Handler+0x288>)
 800152e:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8001532:	edd7 6a00 	vldr	s13, [r7]
 8001536:	4936      	ldr	r1, [pc, #216]	; (8001610 <ADC_Stream0_Handler+0x28c>)
 8001538:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 800153c:	edd6 6a00 	vldr	s13, [r6]
 8001540:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800162c <ADC_Stream0_Handler+0x2a8>
 8001544:	edcd 6a07 	vstr	s13, [sp, #28]
 8001548:	edd1 6a00 	vldr	s13, [r1]
 800154c:	4931      	ldr	r1, [pc, #196]	; (8001614 <ADC_Stream0_Handler+0x290>)
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <ADC_Stream0_Handler+0x294>)
 8001550:	f9bb 0000 	ldrsh.w	r0, [fp]
 8001554:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001558:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 800155c:	edd1 6a00 	vldr	s13, [r1]
 8001560:	4686      	mov	lr, r0
 8001562:	492e      	ldr	r1, [pc, #184]	; (800161c <ADC_Stream0_Handler+0x298>)
 8001564:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001568:	e165      	b.n	8001836 <ADC_Stream0_Handler+0x4b2>
 800156a:	bf00      	nop
 800156c:	24001f8c 	.word	0x24001f8c
 8001570:	24009760 	.word	0x24009760
 8001574:	240071b0 	.word	0x240071b0
 8001578:	00000000 	.word	0x00000000
 800157c:	3b000000 	.word	0x3b000000
 8001580:	24000730 	.word	0x24000730
 8001584:	24007220 	.word	0x24007220
 8001588:	2400c758 	.word	0x2400c758
 800158c:	24000f60 	.word	0x24000f60
 8001590:	24000760 	.word	0x24000760
 8001594:	240006a4 	.word	0x240006a4
 8001598:	240006f4 	.word	0x240006f4
 800159c:	240006d0 	.word	0x240006d0
 80015a0:	240006d4 	.word	0x240006d4
 80015a4:	240006b0 	.word	0x240006b0
 80015a8:	240006a0 	.word	0x240006a0
 80015ac:	24000708 	.word	0x24000708
 80015b0:	240006e8 	.word	0x240006e8
 80015b4:	2400070c 	.word	0x2400070c
 80015b8:	240006ec 	.word	0x240006ec
 80015bc:	240006bc 	.word	0x240006bc
 80015c0:	240006ac 	.word	0x240006ac
 80015c4:	24000700 	.word	0x24000700
 80015c8:	240006e0 	.word	0x240006e0
 80015cc:	24000704 	.word	0x24000704
 80015d0:	240006e4 	.word	0x240006e4
 80015d4:	240006a8 	.word	0x240006a8
 80015d8:	240006b8 	.word	0x240006b8
 80015dc:	240006f8 	.word	0x240006f8
 80015e0:	24000718 	.word	0x24000718
 80015e4:	240006fc 	.word	0x240006fc
 80015e8:	2400071c 	.word	0x2400071c
 80015ec:	240006b4 	.word	0x240006b4
 80015f0:	240006c4 	.word	0x240006c4
 80015f4:	240006f0 	.word	0x240006f0
 80015f8:	24000710 	.word	0x24000710
 80015fc:	24000714 	.word	0x24000714
 8001600:	240006c0 	.word	0x240006c0
 8001604:	24000728 	.word	0x24000728
 8001608:	240006cc 	.word	0x240006cc
 800160c:	24000720 	.word	0x24000720
 8001610:	24000724 	.word	0x24000724
 8001614:	240006c8 	.word	0x240006c8
 8001618:	24000f68 	.word	0x24000f68
 800161c:	24000768 	.word	0x24000768
 8001620:	240006d8 	.word	0x240006d8
 8001624:	240006dc 	.word	0x240006dc
 8001628:	2400072c 	.word	0x2400072c
 800162c:	2400069c 	.word	0x2400069c
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001630:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001634:	0798      	lsls	r0, r3, #30
 8001636:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800163a:	ee7f faaa 	vadd.f32	s31, s31, s21
 800163e:	ee3f fa0a 	vadd.f32	s30, s30, s20
 8001642:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 8001646:	eeef 5a24 	vfma.f32	s11, s30, s9
 800164a:	ee75 6a27 	vadd.f32	s13, s10, s15
 800164e:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001652:	f100 8118 	bmi.w	8001886 <ADC_Stream0_Handler+0x502>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001656:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800165a:	075d      	lsls	r5, r3, #29
 800165c:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001660:	ee79 9a8e 	vadd.f32	s19, s19, s28
 8001664:	ee39 9a2d 	vadd.f32	s18, s18, s27
 8001668:	eea9 3aa4 	vfma.f32	s6, s19, s9
 800166c:	eee9 3a24 	vfma.f32	s7, s18, s9
 8001670:	ee33 9a26 	vadd.f32	s18, s6, s13
 8001674:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001678:	f100 8116 	bmi.w	80018a8 <ADC_Stream0_Handler+0x524>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800167c:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001680:	0718      	lsls	r0, r3, #28
 8001682:	ed9d 5a01 	vldr	s10, [sp, #4]
 8001686:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800168a:	eddd 3a05 	vldr	s7, [sp, #20]
 800168e:	eead 5a04 	vfma.f32	s10, s26, s8
 8001692:	ed9d 3a04 	vldr	s6, [sp, #16]
 8001696:	ee7c caa3 	vadd.f32	s25, s25, s7
 800169a:	ee3c ca03 	vadd.f32	s24, s24, s6
 800169e:	eeec 5aa4 	vfma.f32	s11, s25, s9
 80016a2:	eeac 5a24 	vfma.f32	s10, s24, s9
 80016a6:	ee39 ca25 	vadd.f32	s24, s18, s11
 80016aa:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80016ae:	f100 81a5 	bmi.w	80019fc <ADC_Stream0_Handler+0x678>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80016b2:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016b6:	f013 0010 	ands.w	r0, r3, #16
 80016ba:	ed9d 3a03 	vldr	s6, [sp, #12]
 80016be:	eddd 5a00 	vldr	s11, [sp]
 80016c2:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 80016c6:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80016ca:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 80016ce:	eee5 fa84 	vfma.f32	s31, s11, s8
 80016d2:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80016d6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80016da:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 80016de:	eea5 faa4 	vfma.f32	s30, s11, s9
 80016e2:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016e6:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80016e8:	ee75 5a25 	vadd.f32	s11, s10, s11
 80016ec:	eee5 faa4 	vfma.f32	s31, s11, s9
 80016f0:	ee3c fa0f 	vadd.f32	s30, s24, s30
 80016f4:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 80016f8:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016fc:	f040 819b 	bne.w	8001a36 <ADC_Stream0_Handler+0x6b2>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001700:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001704:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8001708:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 800170c:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8001710:	eee3 5a84 	vfma.f32	s11, s7, s8
 8001714:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001718:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 800171c:	eea3 5a84 	vfma.f32	s10, s7, s8
 8001720:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001724:	4ddb      	ldr	r5, [pc, #876]	; (8001a94 <ADC_Stream0_Handler+0x710>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001726:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800172a:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800172e:	4428      	add	r0, r5
 8001730:	4dd9      	ldr	r5, [pc, #868]	; (8001a98 <ADC_Stream0_Handler+0x714>)
 8001732:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001736:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 800173a:	ee73 3a8f 	vadd.f32	s7, s7, s30
 800173e:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8001742:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001746:	eddf 3ad5 	vldr	s7, [pc, #852]	; 8001a9c <ADC_Stream0_Handler+0x718>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800174a:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800174e:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001752:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001756:	ee25 5a23 	vmul.f32	s10, s10, s7
 800175a:	ed80 5a00 	vstr	s10, [r0]
 800175e:	f10e 0001 	add.w	r0, lr, #1
 8001762:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8001766:	edce 5a00 	vstr	s11, [lr]
 800176a:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800176e:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8001772:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001776:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 800177a:	f2c0 81cf 	blt.w	8001b1c <ADC_Stream0_Handler+0x798>

#endif

			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 800177e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001782:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001786:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800178a:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 800178e:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001790:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001794:	ed8d da01 	vstr	s26, [sp, #4]
 8001798:	eeb0 da69 	vmov.f32	s26, s19
 800179c:	edcd ea02 	vstr	s29, [sp, #8]
 80017a0:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80017a4:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 80017a8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80017ac:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017b0:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80017b4:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017b8:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017bc:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 80017c0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017c4:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 80017c8:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017cc:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 80017d0:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017d4:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017d8:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80017dc:	edcd fa07 	vstr	s31, [sp, #28]
 80017e0:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80017e4:	edcd ca00 	vstr	s25, [sp]
 80017e8:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 80017ec:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 80017ee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80017f2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017f6:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80017fa:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80017fe:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001802:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8001806:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 800180a:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 800180e:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8001812:	eeb0 fa4a 	vmov.f32	s30, s20
 8001816:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 800181a:	3208      	adds	r2, #8
 800181c:	3b01      	subs	r3, #1
 800181e:	eef0 7a41 	vmov.f32	s15, s2
 8001822:	3108      	adds	r1, #8
 8001824:	4594      	cmp	ip, r2
 8001826:	eeb0 6a61 	vmov.f32	s12, s3
 800182a:	b29b      	uxth	r3, r3
 800182c:	d059      	beq.n	80018e2 <ADC_Stream0_Handler+0x55e>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800182e:	eef0 1a60 	vmov.f32	s3, s1
 8001832:	eeb0 1a40 	vmov.f32	s2, s0
 8001836:	eeb0 7a42 	vmov.f32	s14, s4
 800183a:	ed12 0a01 	vldr	s0, [r2, #-4]
 800183e:	ed12 2a02 	vldr	s4, [r2, #-8]
 8001842:	eef0 6a62 	vmov.f32	s13, s5
 8001846:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800184a:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 800184c:	ee72 2a07 	vadd.f32	s5, s4, s14
 8001850:	eeb0 7a40 	vmov.f32	s14, s0
 8001854:	eea1 7a04 	vfma.f32	s14, s2, s8
 8001858:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800185c:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001860:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8001864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001868:	eeb0 7a60 	vmov.f32	s14, s1
 800186c:	eea1 7a84 	vfma.f32	s14, s3, s8
 8001870:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8001874:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001878:	f57f aeda 	bpl.w	8001630 <ADC_Stream0_Handler+0x2ac>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 800187c:	eeb0 aa47 	vmov.f32	s20, s14
 8001880:	eef0 aa67 	vmov.f32	s21, s15
 8001884:	e7c9      	b.n	800181a <ADC_Stream0_Handler+0x496>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001886:	eef0 5a48 	vmov.f32	s11, s16
 800188a:	eeb0 5a68 	vmov.f32	s10, s17
 800188e:	eeb0 8a47 	vmov.f32	s16, s14
 8001892:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001896:	eef0 da46 	vmov.f32	s27, s12
 800189a:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 800189e:	eeb0 fa4a 	vmov.f32	s30, s20
 80018a2:	eef0 fa6a 	vmov.f32	s31, s21
 80018a6:	e7b8      	b.n	800181a <ADC_Stream0_Handler+0x496>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018a8:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80018ac:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018b0:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80018b4:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018b8:	eef0 5a48 	vmov.f32	s11, s16
 80018bc:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018c0:	eeb0 ba46 	vmov.f32	s22, s12
 80018c4:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018c8:	eeb0 8a47 	vmov.f32	s16, s14
 80018cc:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80018d0:	eeb0 9a6d 	vmov.f32	s18, s27
 80018d4:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 80018d8:	eeb0 fa4a 	vmov.f32	s30, s20
 80018dc:	eef0 fa6a 	vmov.f32	s31, s21
 80018e0:	e79b      	b.n	800181a <ADC_Stream0_Handler+0x496>
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <ADC_Stream0_Handler+0x71c>)
 80018e4:	eddd 7a02 	vldr	s15, [sp, #8]
 80018e8:	ed83 2a00 	vstr	s4, [r3]
 80018ec:	4b6d      	ldr	r3, [pc, #436]	; (8001aa4 <ADC_Stream0_Handler+0x720>)
 80018ee:	ed8a 0a00 	vstr	s0, [sl]
 80018f2:	edc3 0a00 	vstr	s1, [r3]
 80018f6:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <ADC_Stream0_Handler+0x724>)
 80018f8:	ed89 1a00 	vstr	s2, [r9]
 80018fc:	edc3 1a00 	vstr	s3, [r3]
 8001900:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <ADC_Stream0_Handler+0x728>)
 8001902:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <ADC_Stream0_Handler+0x72c>)
 8001904:	edc3 2a00 	vstr	s5, [r3]
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <ADC_Stream0_Handler+0x730>)
 800190a:	edc3 8a00 	vstr	s17, [r3]
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <ADC_Stream0_Handler+0x734>)
 8001910:	ed83 5a00 	vstr	s10, [r3]
 8001914:	4b69      	ldr	r3, [pc, #420]	; (8001abc <ADC_Stream0_Handler+0x738>)
 8001916:	edc3 fa00 	vstr	s31, [r3]
 800191a:	4b69      	ldr	r3, [pc, #420]	; (8001ac0 <ADC_Stream0_Handler+0x73c>)
 800191c:	ed83 8a00 	vstr	s16, [r3]
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <ADC_Stream0_Handler+0x740>)
 8001922:	edc3 5a00 	vstr	s11, [r3]
 8001926:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <ADC_Stream0_Handler+0x744>)
 8001928:	ed83 fa00 	vstr	s30, [r3]
 800192c:	4b67      	ldr	r3, [pc, #412]	; (8001acc <ADC_Stream0_Handler+0x748>)
 800192e:	edc3 ba00 	vstr	s23, [r3]
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <ADC_Stream0_Handler+0x74c>)
 8001934:	ed83 3a00 	vstr	s6, [r3]
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <ADC_Stream0_Handler+0x750>)
 800193a:	edc3 9a00 	vstr	s19, [r3]
 800193e:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <ADC_Stream0_Handler+0x754>)
 8001940:	ed83 ba00 	vstr	s22, [r3]
 8001944:	4b65      	ldr	r3, [pc, #404]	; (8001adc <ADC_Stream0_Handler+0x758>)
 8001946:	edc3 3a00 	vstr	s7, [r3]
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <ADC_Stream0_Handler+0x75c>)
 800194c:	ed83 9a00 	vstr	s18, [r3]
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <ADC_Stream0_Handler+0x760>)
 8001952:	edc3 ea00 	vstr	s29, [r3]
 8001956:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <ADC_Stream0_Handler+0x764>)
 8001958:	edc3 7a00 	vstr	s15, [r3]
 800195c:	4b63      	ldr	r3, [pc, #396]	; (8001aec <ADC_Stream0_Handler+0x768>)
 800195e:	eddd 7a01 	vldr	s15, [sp, #4]
 8001962:	edc3 ca00 	vstr	s25, [r3]
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <ADC_Stream0_Handler+0x76c>)
 8001968:	ed83 da00 	vstr	s26, [r3]
 800196c:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <ADC_Stream0_Handler+0x770>)
 800196e:	edc3 7a00 	vstr	s15, [r3]
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <ADC_Stream0_Handler+0x774>)
 8001974:	eddd 7a03 	vldr	s15, [sp, #12]
 8001978:	ed83 ca00 	vstr	s24, [r3]
 800197c:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <ADC_Stream0_Handler+0x778>)
 800197e:	edc3 7a00 	vstr	s15, [r3]
 8001982:	eddd 7a08 	vldr	s15, [sp, #32]
 8001986:	4b5e      	ldr	r3, [pc, #376]	; (8001b00 <ADC_Stream0_Handler+0x77c>)
 8001988:	edc3 7a00 	vstr	s15, [r3]
 800198c:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001990:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <ADC_Stream0_Handler+0x780>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
 8001996:	eddd 7a00 	vldr	s15, [sp]
 800199a:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <ADC_Stream0_Handler+0x784>)
 800199c:	f8ab e000 	strh.w	lr, [fp]
 80019a0:	edc3 7a00 	vstr	s15, [r3]
 80019a4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80019a8:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <ADC_Stream0_Handler+0x788>)
 80019aa:	edc3 7a00 	vstr	s15, [r3]
 80019ae:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <ADC_Stream0_Handler+0x78c>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
 80019b8:	eddd 7a06 	vldr	s15, [sp, #24]
 80019bc:	4b55      	ldr	r3, [pc, #340]	; (8001b14 <ADC_Stream0_Handler+0x790>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
 80019c2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <ADC_Stream0_Handler+0x794>)
 80019c8:	edc8 7a00 	vstr	s15, [r8]
 80019cc:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80019d0:	edc7 7a00 	vstr	s15, [r7]
 80019d4:	eddd 7a07 	vldr	s15, [sp, #28]
 80019d8:	edc6 7a00 	vstr	s15, [r6]
 80019dc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80019e0:	edc3 7a00 	vstr	s15, [r3]
 80019e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e8:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80019ec:	8023      	strh	r3, [r4, #0]
 80019ee:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 80019f2:	b015      	add	sp, #84	; 0x54
 80019f4:	ecbd 8b10 	vpop	{d8-d15}
 80019f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80019fc:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a00:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a04:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a08:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a0c:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001a10:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a14:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001a18:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a1c:	eeb0 da69 	vmov.f32	s26, s19
 8001a20:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a24:	eeb0 ba46 	vmov.f32	s22, s12
 8001a28:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a2c:	eeb0 8a47 	vmov.f32	s16, s14
 8001a30:	eef0 8a67 	vmov.f32	s17, s15
 8001a34:	e6e5      	b.n	8001802 <ADC_Stream0_Handler+0x47e>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a36:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a3a:	eef0 3a4b 	vmov.f32	s7, s22
 8001a3e:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a42:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a46:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a4a:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a4e:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a52:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a56:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a5a:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a5e:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a62:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a66:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a6a:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a6e:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a72:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a76:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a7a:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a7e:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a82:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001a86:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a8a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001a8e:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8001a92:	e6b2      	b.n	80017fa <ADC_Stream0_Handler+0x476>
 8001a94:	2000b000 	.word	0x2000b000
 8001a98:	2000d000 	.word	0x2000d000
 8001a9c:	34000000 	.word	0x34000000
 8001aa0:	240006a4 	.word	0x240006a4
 8001aa4:	240006d0 	.word	0x240006d0
 8001aa8:	240006d4 	.word	0x240006d4
 8001aac:	240006a0 	.word	0x240006a0
 8001ab0:	240006c8 	.word	0x240006c8
 8001ab4:	240006e8 	.word	0x240006e8
 8001ab8:	240006ec 	.word	0x240006ec
 8001abc:	240006ac 	.word	0x240006ac
 8001ac0:	240006e0 	.word	0x240006e0
 8001ac4:	240006e4 	.word	0x240006e4
 8001ac8:	240006a8 	.word	0x240006a8
 8001acc:	240006f8 	.word	0x240006f8
 8001ad0:	240006fc 	.word	0x240006fc
 8001ad4:	240006b4 	.word	0x240006b4
 8001ad8:	240006f0 	.word	0x240006f0
 8001adc:	240006f4 	.word	0x240006f4
 8001ae0:	240006b0 	.word	0x240006b0
 8001ae4:	24000708 	.word	0x24000708
 8001ae8:	2400070c 	.word	0x2400070c
 8001aec:	240006bc 	.word	0x240006bc
 8001af0:	24000700 	.word	0x24000700
 8001af4:	24000704 	.word	0x24000704
 8001af8:	240006b8 	.word	0x240006b8
 8001afc:	24000718 	.word	0x24000718
 8001b00:	2400071c 	.word	0x2400071c
 8001b04:	240006c4 	.word	0x240006c4
 8001b08:	24000710 	.word	0x24000710
 8001b0c:	24000714 	.word	0x24000714
 8001b10:	240006c0 	.word	0x240006c0
 8001b14:	24000728 	.word	0x24000728
 8001b18:	24000724 	.word	0x24000724
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b1c:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b20:	eeb0 5a68 	vmov.f32	s10, s17
 8001b24:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b28:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b2c:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b30:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b34:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b38:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b3c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b40:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b44:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b48:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b4c:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b50:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b54:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b58:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b5c:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b60:	ed8d da01 	vstr	s26, [sp, #4]
 8001b64:	eeb0 da69 	vmov.f32	s26, s19
 8001b68:	edcd ea02 	vstr	s29, [sp, #8]
 8001b6c:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b70:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b74:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b78:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b7c:	edcd ca00 	vstr	s25, [sp]
 8001b80:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b84:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001b88:	e77f      	b.n	8001a8a <ADC_Stream0_Handler+0x706>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <ADC_Stream0_Handler+0x81c>)
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <ADC_Stream0_Handler+0x820>)
 8001b8e:	ed92 0a00 	vldr	s0, [r2]
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b9a:	f000 f805 	bl	8001ba8 <SDR_ComputeLO>
 8001b9e:	e406      	b.n	80013ae <ADC_Stream0_Handler+0x2a>
 8001ba0:	240071b0 	.word	0x240071b0
 8001ba4:	24009b74 	.word	0x24009b74

08001ba8 <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001ba8:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <SDR_ComputeLO+0x144>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001bb4:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	d173      	bne.n	8001ca6 <SDR_ComputeLO+0xfe>
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bbe:	4a4c      	ldr	r2, [pc, #304]	; (8001cf0 <SDR_ComputeLO+0x148>)
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <SDR_ComputeLO+0x14c>)
 8001bc2:	ed92 8a00 	vldr	s16, [r2]
 8001bc6:	ed93 7a00 	vldr	s14, [r3]
 8001bca:	4d4b      	ldr	r5, [pc, #300]	; (8001cf8 <SDR_ComputeLO+0x150>)
 8001bcc:	4c4b      	ldr	r4, [pc, #300]	; (8001cfc <SDR_ComputeLO+0x154>)
 8001bce:	484c      	ldr	r0, [pc, #304]	; (8001d00 <SDR_ComputeLO+0x158>)
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <SDR_ComputeLO+0x15c>)
 8001bd2:	edd5 5a00 	vldr	s11, [r5]
 8001bd6:	edd4 7a00 	vldr	s15, [r4]
 8001bda:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001bde:	edd0 6a00 	vldr	s13, [r0]
 8001be2:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be4:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8001be8:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bea:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8001bee:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bf0:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8001bf4:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bf6:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bfa:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c02:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c06:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c0a:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c0e:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c12:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c16:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c1a:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c1e:	ee66 5aa5 	vmul.f32	s11, s13, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c22:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c26:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c2a:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c2e:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c32:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c36:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c3a:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c42:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c46:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c4a:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c4e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c52:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c56:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c5a:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c5e:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c62:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c66:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c6a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001c6e:	d1b9      	bne.n	8001be4 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c70:	ee66 6a06 	vmul.f32	s13, s12, s12
 8001c74:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001d0c <SDR_ComputeLO+0x164>
 8001c78:	edc4 7a00 	vstr	s15, [r4]
 8001c7c:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001d10 <SDR_ComputeLO+0x168>
 8001c80:	eee5 6a05 	vfma.f32	s13, s10, s10
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <SDR_ComputeLO+0x16c>)
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <SDR_ComputeLO+0x170>)
 8001c88:	edc5 5a00 	vstr	s11, [r5]
 8001c8c:	ed82 5a00 	vstr	s10, [r2]
 8001c90:	ed83 6a00 	vstr	s12, [r3]
 8001c94:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8001c98:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c9c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001ca0:	edc0 7a00 	vstr	s15, [r0]
}	
 8001ca4:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001ca6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001d1c <SDR_ComputeLO+0x174>
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <SDR_ComputeLO+0x178>)
 8001cac:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001cb0:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001cb4:	ed92 7a00 	vldr	s14, [r2]
 8001cb8:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001cbc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001cc0:	eeb0 0b49 	vmov.f64	d0, d9
 8001cc4:	f00f ff04 	bl	8011ad0 <cos>
 8001cc8:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <SDR_ComputeLO+0x148>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001cce:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001cd2:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001cd6:	f00f ff47 	bl	8011b68 <sin>
 8001cda:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SDR_ComputeLO+0x14c>)
 8001ce0:	eeb1 7a47 	vneg.f32	s14, s14
 8001ce4:	ed83 7a00 	vstr	s14, [r3]
 8001ce8:	e76f      	b.n	8001bca <SDR_ComputeLO+0x22>
 8001cea:	bf00      	nop
 8001cec:	24000204 	.word	0x24000204
 8001cf0:	24000734 	.word	0x24000734
 8001cf4:	2400073c 	.word	0x2400073c
 8001cf8:	24000208 	.word	0x24000208
 8001cfc:	24000754 	.word	0x24000754
 8001d00:	24000200 	.word	0x24000200
 8001d04:	240069c0 	.word	0x240069c0
 8001d08:	240061c0 	.word	0x240061c0
 8001d0c:	46000200 	.word	0x46000200
 8001d10:	39000000 	.word	0x39000000
 8001d14:	24000758 	.word	0x24000758
 8001d18:	2400075c 	.word	0x2400075c
 8001d1c:	40c90fdb 	.word	0x40c90fdb
 8001d20:	240071cc 	.word	0x240071cc

08001d24 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	d028      	beq.n	8001d7a <SDR_2R_toC_f32+0x56>
 8001d28:	3010      	adds	r0, #16
 8001d2a:	3110      	adds	r1, #16
 8001d2c:	3220      	adds	r2, #32
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d2e:	f850 cc10 	ldr.w	ip, [r0, #-16]
  while(blkCnt)
 8001d32:	3110      	adds	r1, #16
 8001d34:	3010      	adds	r0, #16
 8001d36:	3b01      	subs	r3, #1
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d38:	f842 cc20 	str.w	ip, [r2, #-32]
  while(blkCnt)
 8001d3c:	f102 0220 	add.w	r2, r2, #32
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d40:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8001d44:	f842 cc3c 	str.w	ip, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d48:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8001d4c:	f842 cc38 	str.w	ip, [r2, #-56]
 8001d50:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8001d54:	f842 cc34 	str.w	ip, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d58:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8001d5c:	f842 cc30 	str.w	ip, [r2, #-48]
 8001d60:	f851 cc18 	ldr.w	ip, [r1, #-24]
 8001d64:	f842 cc2c 	str.w	ip, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d68:	f850 cc14 	ldr.w	ip, [r0, #-20]
 8001d6c:	f842 cc28 	str.w	ip, [r2, #-40]
 8001d70:	f851 cc14 	ldr.w	ip, [r1, #-20]
 8001d74:	f842 cc24 	str.w	ip, [r2, #-36]
  while(blkCnt)
 8001d78:	d1d9      	bne.n	8001d2e <SDR_2R_toC_f32+0xa>
    
    blkCnt--;
  }
}
 8001d7a:	4770      	bx	lr

08001d7c <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <SDR_downconvert_f32+0xd8>)
  float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;
	
// loop Unrolling
  blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
  while(blkCnt)
 8001d7e:	3110      	adds	r1, #16
 8001d80:	3210      	adds	r2, #16
 8001d82:	3008      	adds	r0, #8
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d84:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001e58 <SDR_downconvert_f32+0xdc>
 8001d88:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4c33      	ldr	r4, [pc, #204]	; (8001e5c <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d90:	f830 ec08 	ldrh.w	lr, [r0, #-8]
  while(blkCnt)
 8001d94:	3110      	adds	r1, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001d96:	ed13 5a04 	vldr	s10, [r3, #-16]
  while(blkCnt)
 8001d9a:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d9c:	ee06 ea10 	vmov	s12, lr
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001da0:	f830 ec06 	ldrh.w	lr, [r0, #-6]
  while(blkCnt)
 8001da4:	3310      	adds	r3, #16
 8001da6:	3210      	adds	r2, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001da8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001dac:	ee06 ea90 	vmov	s13, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001db0:	f830 ec02 	ldrh.w	lr, [r0, #-2]
  while(blkCnt)
 8001db4:	4563      	cmp	r3, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001db6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  while(blkCnt)
 8001dba:	f100 0008 	add.w	r0, r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001dbe:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dc2:	ee07 ea90 	vmov	s15, lr
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dc6:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001dca:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001dce:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dd2:	ee07 ea10 	vmov	s14, lr
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001dda:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dde:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001de2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001de6:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dea:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001dee:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001df2:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001df6:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001dfa:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dfe:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e02:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001e06:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001e0a:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001e0e:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001e12:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001e16:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001e1a:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001e1e:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001e22:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001e26:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001e2a:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001e2e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001e32:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001e36:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8001e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3e:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001e42:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001e4e:	d19f      	bne.n	8001d90 <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	bf00      	nop
 8001e54:	240061c0 	.word	0x240061c0
 8001e58:	3a000000 	.word	0x3a000000
 8001e5c:	240069c0 	.word	0x240069c0

08001e60 <SDR_float_to_DAC_audio>:
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001e60:	0893      	lsrs	r3, r2, #2
  while(blkCnt--)
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d058      	beq.n	8001f18 <SDR_float_to_DAC_audio+0xb8>
 8001e66:	f103 3cff 	add.w	ip, r3, #4294967295
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <SDR_float_to_DAC_audio+0xe4>)
 8001e6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e70:	fa1f fc8c 	uxth.w	ip, ip
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	f100 0310 	add.w	r3, r0, #16
 8001e7c:	3020      	adds	r0, #32
 8001e7e:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8001e82:	f101 0008 	add.w	r0, r1, #8
{
 8001e86:	b500      	push	{lr}
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e88:	eeb0 5a47 	vmov.f32	s10, s14
 8001e8c:	ed53 5a04 	vldr	s11, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e90:	ed13 6a03 	vldr	s12, [r3, #-12]
  while(blkCnt--)
 8001e94:	3008      	adds	r0, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e96:	ed53 6a02 	vldr	s13, [r3, #-8]
  while(blkCnt--)
 8001e9a:	3310      	adds	r3, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e9c:	eea5 5aa7 	vfma.f32	s10, s11, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea0:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea4:	eef0 5a47 	vmov.f32	s11, s14
  while(blkCnt--)
 8001ea8:	459c      	cmp	ip, r3
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eaa:	eee7 5a86 	vfma.f32	s11, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eae:	eeb0 6a47 	vmov.f32	s12, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eb2:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eb6:	eea7 6aa6 	vfma.f32	s12, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eba:	eef0 6a47 	vmov.f32	s13, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ebe:	ee15 ea10 	vmov	lr, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ec2:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ec6:	f820 ec10 	strh.w	lr, [r0, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eca:	eee7 6aa4 	vfma.f32	s13, s15, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ece:	ee15 ea90 	vmov	lr, s11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ed2:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ed6:	f820 ec0e 	strh.w	lr, [r0, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eda:	ee16 ea10 	vmov	lr, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ede:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ee2:	f820 ec0c 	strh.w	lr, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ee6:	ee16 ea90 	vmov	lr, s13
 8001eea:	f820 ec0a 	strh.w	lr, [r0, #-10]
  while(blkCnt--)
 8001eee:	d1cb      	bne.n	8001e88 <SDR_float_to_DAC_audio+0x28>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001ef0:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001ef2:	f001 021f 	and.w	r2, r1, #31
 8001ef6:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef8:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001efc:	4812      	ldr	r0, [pc, #72]	; (8001f48 <SDR_float_to_DAC_audio+0xe8>)
 8001efe:	440a      	add	r2, r1
 8001f00:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001f04:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001f06:	1a53      	subs	r3, r2, r1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dcf9      	bgt.n	8001f00 <SDR_float_to_DAC_audio+0xa0>
 8001f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f10:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001f14:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8001f18:	0093      	lsls	r3, r2, #2
 8001f1a:	b902      	cbnz	r2, 8001f1e <SDR_float_to_DAC_audio+0xbe>
 8001f1c:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001f1e:	f001 021f 	and.w	r2, r1, #31
 8001f22:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8001f24:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <SDR_float_to_DAC_audio+0xe8>)
 8001f2a:	440a      	add	r2, r1
 8001f2c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001f30:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 8001f32:	1a53      	subs	r3, r2, r1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	dcf9      	bgt.n	8001f2c <SDR_float_to_DAC_audio+0xcc>
 8001f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f3c:	f3bf 8f6f 	isb	sy
return;
 8001f40:	e7ec      	b.n	8001f1c <SDR_float_to_DAC_audio+0xbc>
 8001f42:	bf00      	nop
 8001f44:	2400d90c 	.word	0x2400d90c
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001f4c:	0892      	lsrs	r2, r2, #2
 8001f4e:	d016      	beq.n	8001f7e <SDR_memcpy_f32+0x32>
 8001f50:	3110      	adds	r1, #16
 8001f52:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001f54:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001f58:	3110      	adds	r1, #16
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001f60:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001f64:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001f68:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001f6c:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001f70:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001f74:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001f78:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001f7c:	d1ea      	bne.n	8001f54 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001f7e:	4770      	bx	lr

08001f80 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001f80:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f82:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001f86:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f88:	440b      	add	r3, r1
	while(blkCnt--)
 8001f8a:	f1a2 0102 	sub.w	r1, r2, #2
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 8001f92:	d036      	beq.n	8002002 <SDR_mirror_LSB+0x82>
 8001f94:	f1a3 0220 	sub.w	r2, r3, #32
 8001f98:	f1a3 0c1c 	sub.w	ip, r3, #28
 8001f9c:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001fa0:	4402      	add	r2, r0
 8001fa2:	4460      	add	r0, ip
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fa4:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 8001fa8:	3a20      	subs	r2, #32
 8001faa:	3820      	subs	r0, #32
 8001fac:	3901      	subs	r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fae:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 8001fb2:	3320      	adds	r3, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fb4:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 8001fb8:	f1b1 3fff 	cmp.w	r1, #4294967295
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fbc:	eef1 7a67 	vneg.f32	s15, s15
 8001fc0:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fc4:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8001fc8:	f843 cc38 	str.w	ip, [r3, #-56]
 8001fcc:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001fd0:	eef1 7a67 	vneg.f32	s15, s15
 8001fd4:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fd8:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8001fdc:	f843 cc30 	str.w	ip, [r3, #-48]
 8001fe0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001fe4:	eef1 7a67 	vneg.f32	s15, s15
 8001fe8:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fec:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 8001ff0:	f843 cc28 	str.w	ip, [r3, #-40]
 8001ff4:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001ff8:	eef1 7a67 	vneg.f32	s15, s15
 8001ffc:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8002000:	d1d0      	bne.n	8001fa4 <SDR_mirror_LSB+0x24>
	}
}
 8002002:	4770      	bx	lr

08002004 <SDR_compute_IIR_parms>:
#endif
   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8002004:	492b      	ldr	r1, [pc, #172]	; (80020b4 <SDR_compute_IIR_parms+0xb0>)
 8002006:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80020b8 <SDR_compute_IIR_parms+0xb4>
 800200a:	edd1 7a00 	vldr	s15, [r1]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 800200e:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8002010:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002014:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80020c0 <SDR_compute_IIR_parms+0xbc>
 8002018:	ed92 7a00 	vldr	s14, [r2]
{
 800201c:	b508      	push	{r3, lr}
 800201e:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8002022:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <SDR_compute_IIR_parms+0xc0>)
 8002028:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800202c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8002030:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002034:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8002038:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800203c:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8002040:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002044:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8002048:	f00f fd42 	bl	8011ad0 <cos>
 800204c:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <SDR_compute_IIR_parms+0xc8>)
 8002054:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002058:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 800205c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002060:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002064:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8002068:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800206c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002070:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8002074:	ee25 6b06 	vmul.f64	d6, d5, d6
 8002078:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 800207c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002080:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002084:	f00f fd24 	bl	8011ad0 <cos>
 8002088:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 800208c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80020d0 <SDR_compute_IIR_parms+0xcc>
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <SDR_compute_IIR_parms+0xd0>)
 8002092:	ee28 7a07 	vmul.f32	s14, s16, s14
 8002096:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800209a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 800209e:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80020a2:	eeb1 5bc6 	vsqrt.f64	d5, d6
 80020a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80020aa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80020ae:	ed83 7a00 	vstr	s14, [r3]
}
 80020b2:	bd08      	pop	{r3, pc}
 80020b4:	24009b74 	.word	0x24009b74
 80020b8:	44000000 	.word	0x44000000
 80020bc:	240071cc 	.word	0x240071cc
 80020c0:	40490fdb 	.word	0x40490fdb
 80020c4:	240071c4 	.word	0x240071c4
 80020c8:	2400933c 	.word	0x2400933c
 80020cc:	24009340 	.word	0x24009340
 80020d0:	3f99999a 	.word	0x3f99999a
 80020d4:	24009b6c 	.word	0x24009b6c

080020d8 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 80020d8:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 80020da:	2900      	cmp	r1, #0
 80020dc:	d077      	beq.n	80021ce <SDR_CWPeak+0xf6>
 80020de:	1e4b      	subs	r3, r1, #1
 80020e0:	f8df c104 	ldr.w	ip, [pc, #260]	; 80021e8 <SDR_CWPeak+0x110>
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020e4:	493a      	ldr	r1, [pc, #232]	; (80021d0 <SDR_CWPeak+0xf8>)
 80020e6:	3010      	adds	r0, #16
 80020e8:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <SDR_CWPeak+0xfc>)
 80020ea:	eddc 2a00 	vldr	s5, [ip]
 80020ee:	ed91 6a00 	vldr	s12, [r1]
 80020f2:	ed92 5a00 	vldr	s10, [r2]
{
 80020f6:	b4f0      	push	{r4, r5, r6, r7}
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80020f8:	4c37      	ldr	r4, [pc, #220]	; (80021d8 <SDR_CWPeak+0x100>)
 80020fa:	4f38      	ldr	r7, [pc, #224]	; (80021dc <SDR_CWPeak+0x104>)
 80020fc:	edd4 4a00 	vldr	s9, [r4]
 8002100:	4e37      	ldr	r6, [pc, #220]	; (80021e0 <SDR_CWPeak+0x108>)
 8002102:	4d38      	ldr	r5, [pc, #224]	; (80021e4 <SDR_CWPeak+0x10c>)
 8002104:	eeb1 2a64 	vneg.f32	s4, s9
 8002108:	ed97 7a00 	vldr	s14, [r7]
 800210c:	edd6 5a00 	vldr	s11, [r6]
 8002110:	edd5 6a00 	vldr	s13, [r5]
 8002114:	ee66 3a47 	vnmul.f32	s7, s12, s14
 8002118:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800211c:	ee26 4a66 	vnmul.f32	s8, s12, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002120:	ed50 7a03 	vldr	s15, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002124:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 8002128:	3010      	adds	r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800212a:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800212e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002132:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800213c:	eee7 3a05 	vfma.f32	s7, s14, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002140:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 8002144:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002148:	ed92 5a00 	vldr	s10, [r2]
 800214c:	ed91 6a00 	vldr	s12, [r1]
 8002150:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002154:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002158:	ee25 7a26 	vmul.f32	s14, s10, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800215c:	ee65 6a03 	vmul.f32	s13, s10, s6
 8002160:	eee6 7a62 	vfms.f32	s15, s12, s5
 8002164:	eea6 7a63 	vfms.f32	s14, s12, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002168:	eeb1 2a64 	vneg.f32	s4, s9
 800216c:	eee4 7ae3 	vfms.f32	s15, s9, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002170:	eea4 7ae7 	vfms.f32	s14, s9, s15
 8002174:	eee6 6a67 	vfms.f32	s13, s12, s15
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002178:	ee65 7a27 	vmul.f32	s15, s10, s15
 800217c:	eee4 7ac4 	vfms.f32	s15, s9, s8
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002180:	eee4 6ac7 	vfms.f32	s13, s9, s14
 8002184:	eef0 2a66 	vmov.f32	s5, s13
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002188:	ee65 6a07 	vmul.f32	s13, s10, s14
 800218c:	eee6 6a44 	vfms.f32	s13, s12, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002190:	eeb0 4a67 	vmov.f32	s8, s15
 8002194:	eed6 7a25 	vfnms.f32	s15, s12, s11
 8002198:	eea6 4a65 	vfms.f32	s8, s12, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800219c:	ee65 5a22 	vmul.f32	s11, s10, s5
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021a0:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80021a4:	eee6 5a44 	vfms.f32	s11, s12, s8
	   *buf++ = y0;
 80021a8:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
	   *buf++ = y0;
 80021ac:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021b0:	eee4 5ae6 	vfms.f32	s11, s9, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 80021b4:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 80021b8:	d1ac      	bne.n	8002114 <SDR_CWPeak+0x3c>
 80021ba:	ed87 7a00 	vstr	s14, [r7]
 80021be:	edc6 5a00 	vstr	s11, [r6]
 80021c2:	edc5 6a00 	vstr	s13, [r5]
 80021c6:	edcc 2a00 	vstr	s5, [ip]
   }
}
 80021ca:	bcf0      	pop	{r4, r5, r6, r7}
 80021cc:	4770      	bx	lr
 80021ce:	4770      	bx	lr
 80021d0:	24009340 	.word	0x24009340
 80021d4:	24009b6c 	.word	0x24009b6c
 80021d8:	2400933c 	.word	0x2400933c
 80021dc:	2400074c 	.word	0x2400074c
 80021e0:	24000748 	.word	0x24000748
 80021e4:	24000750 	.word	0x24000750
 80021e8:	24000744 	.word	0x24000744

080021ec <SDR_demodAM_AGC>:
// ------------------------------------------------------

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 80021f0:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <SDR_demodAM_AGC+0xf8>)
{
 80021f2:	b082      	sub	sp, #8
 80021f4:	4f3c      	ldr	r7, [pc, #240]	; (80022e8 <SDR_demodAM_AGC+0xfc>)
 80021f6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 80021fa:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002308 <SDR_demodAM_AGC+0x11c>
		  hangcnt = Hcount[AM]; 
 80021fe:	f8b3 e000 	ldrh.w	lr, [r3]
 8002202:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8002204:	eddf 4a39 	vldr	s9, [pc, #228]	; 80022ec <SDR_demodAM_AGC+0x100>
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002208:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80022f0 <SDR_demodAM_AGC+0x104>
 800220c:	ed98 7a00 	vldr	s14, [r8]
 8002210:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <SDR_demodAM_AGC+0x108>)
 8002212:	4d39      	ldr	r5, [pc, #228]	; (80022f8 <SDR_demodAM_AGC+0x10c>)
 8002214:	4c39      	ldr	r4, [pc, #228]	; (80022fc <SDR_demodAM_AGC+0x110>)
		  pk  *= Decay[AM];
 8002216:	4e3a      	ldr	r6, [pc, #232]	; (8002300 <SDR_demodAM_AGC+0x114>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002218:	edd0 7a01 	vldr	s15, [r0, #4]
 800221c:	edd0 6a00 	vldr	s13, [r0]
 8002220:	ee67 7aa7 	vmul.f32	s15, s15, s15
    audiotmp /= max(pk, AgcThreshold);  
 8002224:	ed95 6a00 	vldr	s12, [r5]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002228:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800222c:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8002230:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8002234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 800223c:	bfa8      	it	ge
 800223e:	eef1 5ae7 	vsqrtge.f32	s11, s15
	  if(pk < audiotmp)
 8002242:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 8002246:	bfb8      	it	lt
 8002248:	eef0 5a64 	vmovlt.f32	s11, s9
 800224c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002254:	d504      	bpl.n	8002260 <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 8002256:	eef0 7a65 	vmov.f32	s15, s11
		  hangcnt = Hcount[AM]; 
 800225a:	4672      	mov	r2, lr
			pk = audiotmp;
 800225c:	edc3 5a00 	vstr	s11, [r3]
    audiotmp /= max(pk, AgcThreshold);  
 8002260:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 8002264:	eec5 6a86 	vdiv.f32	s13, s11, s12
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002268:	eef0 5a66 	vmov.f32	s11, s13
    audiotmp /= max(pk, AgcThreshold);  
 800226c:	edc4 6a00 	vstr	s13, [r4]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002270:	eee7 5a05 	vfma.f32	s11, s14, s10
	  if(hangcnt == 0)
 8002274:	b9da      	cbnz	r2, 80022ae <SDR_demodAM_AGC+0xc2>
		  pk  *= Decay[AM];
 8002276:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 800227a:	3008      	adds	r0, #8
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800227c:	edcd 5a00 	vstr	s11, [sp]
		  pk  *= Decay[AM];
 8002280:	ee66 6aa7 	vmul.f32	s13, s13, s15
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002284:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002288:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800228a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 800228e:	ed9d 7a00 	vldr	s14, [sp]
		  pk  *= Decay[AM];
 8002292:	edc3 6a00 	vstr	s13, [r3]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002296:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800229a:	d1bd      	bne.n	8002218 <SDR_demodAM_AGC+0x2c>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 800229c:	4919      	ldr	r1, [pc, #100]	; (8002304 <SDR_demodAM_AGC+0x118>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	603a      	str	r2, [r7, #0]
 80022a2:	ed88 7a00 	vstr	s14, [r8]
 80022a6:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80022a8:	b002      	add	sp, #8
 80022aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80022ae:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80022b2:	3008      	adds	r0, #8
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80022b4:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80022b8:	4584      	cmp	ip, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80022ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
	  wold = w;
 80022be:	ed9d 7a00 	vldr	s14, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80022c2:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80022c6:	d1a7      	bne.n	8002218 <SDR_demodAM_AGC+0x2c>
    PeakAudioValue=pk;
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 80022ca:	2a00      	cmp	r2, #0
    PeakAudioValue=pk;
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	603a      	str	r2, [r7, #0]
 80022d0:	ed88 7a00 	vstr	s14, [r8]
 80022d4:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 80022d6:	dd01      	ble.n	80022dc <SDR_demodAM_AGC+0xf0>
 80022d8:	3a01      	subs	r2, #1
 80022da:	603a      	str	r2, [r7, #0]
}
 80022dc:	b002      	add	sp, #8
 80022de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e2:	bf00      	nop
 80022e4:	240061a4 	.word	0x240061a4
 80022e8:	2400c444 	.word	0x2400c444
 80022ec:	00000000 	.word	0x00000000
 80022f0:	3f75c28f 	.word	0x3f75c28f
 80022f4:	2400c780 	.word	0x2400c780
 80022f8:	2400176c 	.word	0x2400176c
 80022fc:	24009b68 	.word	0x24009b68
 8002300:	24001f90 	.word	0x24001f90
 8002304:	240071c0 	.word	0x240071c0
 8002308:	24000740 	.word	0x24000740

0800230c <SDR_demodSSB_CW_AGC>:
//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 800230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <SDR_demodSSB_CW_AGC+0xf0>)
 8002312:	f241 0e04 	movw	lr, #4100	; 0x1004
 8002316:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002414 <SDR_demodSSB_CW_AGC+0x108>
	  if(pk < sav)
 800231a:	4a39      	ldr	r2, [pc, #228]	; (8002400 <SDR_demodSSB_CW_AGC+0xf4>)
 800231c:	4486      	add	lr, r0
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800231e:	889f      	ldrh	r7, [r3, #4]
 8002320:	885e      	ldrh	r6, [r3, #2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002322:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8002326:	1d03      	adds	r3, r0, #4
	  if(pk < sav)
 8002328:	edd2 7a00 	vldr	s15, [r2]
 800232c:	f8d8 0000 	ldr.w	r0, [r8]
 8002330:	4d34      	ldr	r5, [pc, #208]	; (8002404 <SDR_demodSSB_CW_AGC+0xf8>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002332:	4c35      	ldr	r4, [pc, #212]	; (8002408 <SDR_demodSSB_CW_AGC+0xfc>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002334:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002418 <SDR_demodSSB_CW_AGC+0x10c>
 8002338:	e014      	b.n	8002364 <SDR_demodSSB_CW_AGC+0x58>
      if(CurrentMode == CW) pk  *= Decay[CW];
 800233a:	f894 c000 	ldrb.w	ip, [r4]
 800233e:	f1bc 0f03 	cmp.w	ip, #3
 8002342:	d052      	beq.n	80023ea <SDR_demodSSB_CW_AGC+0xde>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002344:	f1bc 0f01 	cmp.w	ip, #1
 8002348:	ed92 7a00 	vldr	s14, [r2]
 800234c:	bf0c      	ite	eq
 800234e:	edda 7a01 	vldreq	s15, [sl, #4]
 8002352:	edda 7a02 	vldrne	s15, [sl, #8]
 8002356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235a:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 800235e:	3308      	adds	r3, #8
 8002360:	459e      	cmp	lr, r3
 8002362:	d02d      	beq.n	80023c0 <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002364:	ed93 7a00 	vldr	s14, [r3]
 8002368:	ed53 6a01 	vldr	s13, [r3, #-4]
 800236c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8002370:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 8002374:	eeb1 6ac7 	vsqrt.f32	s12, s14
	  if(pk < sav)
 8002378:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	dd0f      	ble.n	80023a2 <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002382:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 8002386:	ed82 6a00 	vstr	s12, [r2]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800238a:	f1bc 0f03 	cmp.w	ip, #3
 800238e:	d026      	beq.n	80023de <SDR_demodSSB_CW_AGC+0xd2>
 8002390:	eef0 7a46 	vmov.f32	s15, s12
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002394:	f1bc 0f01 	cmp.w	ip, #1
 8002398:	bf0c      	ite	eq
 800239a:	4630      	moveq	r0, r6
 800239c:	4638      	movne	r0, r7
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800239e:	ed53 6a01 	vldr	s13, [r3, #-4]
 80023a2:	ed95 7a00 	vldr	s14, [r5]
 80023a6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80023aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ae:	eca1 7a01 	vstmia	r1!, {s14}
	  if(hangcnt == 0)
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d0c1      	beq.n	800233a <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 80023b6:	3308      	adds	r3, #8
    }  
	}
	PeakAudioValue=pk;
 80023b8:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 80023bc:	459e      	cmp	lr, r3
 80023be:	d1d1      	bne.n	8002364 <SDR_demodSSB_CW_AGC+0x58>
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 80023c2:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <SDR_demodSSB_CW_AGC+0x104>)
 80023c6:	f8c8 0000 	str.w	r0, [r8]
 80023ca:	ed82 6a00 	vstr	s12, [r2]
 80023ce:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 80023d2:	dd02      	ble.n	80023da <SDR_demodSSB_CW_AGC+0xce>
 80023d4:	3801      	subs	r0, #1
 80023d6:	f8c8 0000 	str.w	r0, [r8]
}
 80023da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023de:	eef0 7a46 	vmov.f32	s15, s12
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80023e2:	ed53 6a01 	vldr	s13, [r3, #-4]
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80023e6:	4648      	mov	r0, r9
 80023e8:	e7db      	b.n	80023a2 <SDR_demodSSB_CW_AGC+0x96>
      if(CurrentMode == CW) pk  *= Decay[CW];
 80023ea:	ed92 7a00 	vldr	s14, [r2]
 80023ee:	edda 7a03 	vldr	s15, [sl, #12]
 80023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f6:	edc2 7a00 	vstr	s15, [r2]
 80023fa:	e7b0      	b.n	800235e <SDR_demodSSB_CW_AGC+0x52>
 80023fc:	240061a4 	.word	0x240061a4
 8002400:	2400c780 	.word	0x2400c780
 8002404:	2400176c 	.word	0x2400176c
 8002408:	24001f8c 	.word	0x24001f8c
 800240c:	24000738 	.word	0x24000738
 8002410:	240071c0 	.word	0x240071c0
 8002414:	2400c444 	.word	0x2400c444
 8002418:	24001f90 	.word	0x24001f90

0800241c <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800241c:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002420:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002424:	490a      	ldr	r1, [pc, #40]	; (8002450 <HAL_ADC_ConvCpltCallback+0x34>)
 8002426:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800242a:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800242e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002430:	4293      	cmp	r3, r2
 8002432:	d1fa      	bne.n	800242a <HAL_ADC_ConvCpltCallback+0xe>
 8002434:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002438:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 2*BSIZE);
#endif
	ADC_Stream0_Handler(1);
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe ffa1 	bl	8001384 <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_ADC_ConvCpltCallback+0x38>)
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
}
 8002448:	bd08      	pop	{r3, pc}
 800244a:	bf00      	nop
 800244c:	24009760 	.word	0x24009760
 8002450:	e000ed00 	.word	0xe000ed00
 8002454:	2400d90a 	.word	0x2400d90a

08002458 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002458:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 800245c:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002460:	490a      	ldr	r1, [pc, #40]	; (800248c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002462:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002466:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800246a:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800246c:	4293      	cmp	r3, r2
 800246e:	d1fa      	bne.n	8002466 <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002474:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 2*BSIZE);
#endif
	ADC_Stream0_Handler(0);
 8002478:	2000      	movs	r0, #0
 800247a:	f7fe ff83 	bl	8001384 <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
}
 8002484:	bd08      	pop	{r3, pc}
 8002486:	bf00      	nop
 8002488:	24009360 	.word	0x24009360
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	2400d90a 	.word	0x2400d90a

08002494 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002494:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 8002498:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 800249a:	4c05      	ldr	r4, [pc, #20]	; (80024b0 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 800249c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80024a2:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 80024a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80024a8:	f005 b828 	b.w	80074fc <HAL_GPIO_WritePin>
 80024ac:	24008334 	.word	0x24008334
 80024b0:	24001b80 	.word	0x24001b80
 80024b4:	58020400 	.word	0x58020400

080024b8 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024b8:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80024bc:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80024be:	4c05      	ldr	r4, [pc, #20]	; (80024d4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80024c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80024c6:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 80024c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80024cc:	f005 b816 	b.w	80074fc <HAL_GPIO_WritePin>
 80024d0:	24008334 	.word	0x24008334
 80024d4:	24001780 	.word	0x24001780
 80024d8:	58020400 	.word	0x58020400

080024dc <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
	OVFDetected = OVF_TIMEOUT;
	/* Reset register IER */
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 80024de:	2002      	movs	r0, #2
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80024e2:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 80024e6:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80024e8:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80024ea:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80024ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f0:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80024f2:	6853      	ldr	r3, [r2, #4]
 80024f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f8:	6053      	str	r3, [r2, #4]
}
 80024fa:	4770      	bx	lr
 80024fc:	2400c37c 	.word	0x2400c37c
 8002500:	240071be 	.word	0x240071be
 8002504:	2400c3e0 	.word	0x2400c3e0

08002508 <DisplayStatus>:
	static char StringAGC[8];
	static char StringStep[8];
	static char StringTxPower[8];


	switch(Fstep)
 8002508:	4b74      	ldr	r3, [pc, #464]	; (80026dc <DisplayStatus+0x1d4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
	switch(Fstep)
 8002514:	f000 80d8 	beq.w	80026c8 <DisplayStatus+0x1c0>
 8002518:	d81f      	bhi.n	800255a <DisplayStatus+0x52>
 800251a:	2b0a      	cmp	r3, #10
 800251c:	f000 80c6 	beq.w	80026ac <DisplayStatus+0x1a4>
 8002520:	2b64      	cmp	r3, #100	; 0x64
 8002522:	d110      	bne.n	8002546 <DisplayStatus+0x3e>
	{
	case 1:			strcpy(StringStep,"   1 "); break;
	case 10: 		strcpy(StringStep,"  10 "); break;
	case 100: 		strcpy(StringStep," 100 "); break;
 8002524:	4b6e      	ldr	r3, [pc, #440]	; (80026e0 <DisplayStatus+0x1d8>)
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <DisplayStatus+0x1dc>)
 8002528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800252c:	6010      	str	r0, [r2, #0]
 800252e:	8091      	strh	r1, [r2, #4]
	case 9000: 		strcpy(StringStep,"   9K"); break;
	case 10000:		strcpy(StringStep,"  10K"); break;
	case 100000: 	strcpy(StringStep," 100K"); break;
	}

	switch(CurrentMode)
 8002530:	4b6d      	ldr	r3, [pc, #436]	; (80026e8 <DisplayStatus+0x1e0>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b03      	cmp	r3, #3
 8002536:	f200 80ce 	bhi.w	80026d6 <DisplayStatus+0x1ce>
 800253a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800253e:	00ab      	.short	0x00ab
 8002540:	008500a7 	.word	0x008500a7
 8002544:	0029      	.short	0x0029
	switch(Fstep)
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 80aa 	bne.w	80026a0 <DisplayStatus+0x198>
	case 1:			strcpy(StringStep,"   1 "); break;
 800254c:	4b67      	ldr	r3, [pc, #412]	; (80026ec <DisplayStatus+0x1e4>)
 800254e:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <DisplayStatus+0x1dc>)
 8002550:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002554:	6010      	str	r0, [r2, #0]
 8002556:	8091      	strh	r1, [r2, #4]
 8002558:	e7ea      	b.n	8002530 <DisplayStatus+0x28>
	switch(Fstep)
 800255a:	f242 7210 	movw	r2, #10000	; 0x2710
 800255e:	4293      	cmp	r3, r2
 8002560:	f000 80ab 	beq.w	80026ba <DisplayStatus+0x1b2>
 8002564:	4a62      	ldr	r2, [pc, #392]	; (80026f0 <DisplayStatus+0x1e8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d106      	bne.n	8002578 <DisplayStatus+0x70>
	case 100000: 	strcpy(StringStep," 100K"); break;
 800256a:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <DisplayStatus+0x1ec>)
 800256c:	4a5d      	ldr	r2, [pc, #372]	; (80026e4 <DisplayStatus+0x1dc>)
 800256e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002572:	6010      	str	r0, [r2, #0]
 8002574:	8091      	strh	r1, [r2, #4]
 8002576:	e7db      	b.n	8002530 <DisplayStatus+0x28>
	switch(Fstep)
 8002578:	f242 3228 	movw	r2, #9000	; 0x2328
 800257c:	4293      	cmp	r3, r2
 800257e:	f040 808f 	bne.w	80026a0 <DisplayStatus+0x198>
	case 9000: 		strcpy(StringStep,"   9K"); break;
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <DisplayStatus+0x1f0>)
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <DisplayStatus+0x1dc>)
 8002586:	e893 0003 	ldmia.w	r3, {r0, r1}
 800258a:	6010      	str	r0, [r2, #0]
 800258c:	8091      	strh	r1, [r2, #4]
 800258e:	e7cf      	b.n	8002530 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 8002590:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <DisplayStatus+0x1f4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4e5a      	ldr	r6, [pc, #360]	; (8002700 <DisplayStatus+0x1f8>)
 8002596:	0c19      	lsrs	r1, r3, #16
 8002598:	8033      	strh	r3, [r6, #0]
 800259a:	70b1      	strb	r1, [r6, #2]
	}
	switch (CurrentAGC)
 800259c:	4b59      	ldr	r3, [pc, #356]	; (8002704 <DisplayStatus+0x1fc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d058      	beq.n	8002656 <DisplayStatus+0x14e>
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d179      	bne.n	800269c <DisplayStatus+0x194>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <DisplayStatus+0x200>)
 80025aa:	4d58      	ldr	r5, [pc, #352]	; (800270c <DisplayStatus+0x204>)
 80025ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025b0:	6028      	str	r0, [r5, #0]
 80025b2:	7129      	strb	r1, [r5, #4]
	}
	switch (CurrentBW)
 80025b4:	4b56      	ldr	r3, [pc, #344]	; (8002710 <DisplayStatus+0x208>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d056      	beq.n	800266a <DisplayStatus+0x162>
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d16b      	bne.n	8002698 <DisplayStatus+0x190>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <DisplayStatus+0x20c>)
 80025c2:	4c55      	ldr	r4, [pc, #340]	; (8002718 <DisplayStatus+0x210>)
 80025c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025c8:	6020      	str	r0, [r4, #0]
 80025ca:	7121      	strb	r1, [r4, #4]
	}
	switch (TxPowerOut)
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <DisplayStatus+0x214>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d4:	d056      	beq.n	8002684 <DisplayStatus+0x17c>
 80025d6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80025da:	428b      	cmp	r3, r1
 80025dc:	d062      	beq.n	80026a4 <DisplayStatus+0x19c>
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e2:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <DisplayStatus+0x218>)
	{
	case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 80025e4:	bf04      	itt	eq
 80025e6:	494f      	ldreq	r1, [pc, #316]	; (8002724 <DisplayStatus+0x21c>)
 80025e8:	6019      	streq	r1, [r3, #0]
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 80025ea:	9306      	str	r3, [sp, #24]
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <DisplayStatus+0x220>)
 80025ee:	9503      	str	r5, [sp, #12]
 80025f0:	9402      	str	r4, [sp, #8]
 80025f2:	ed93 7a00 	vldr	s14, [r3]
 80025f6:	4b4d      	ldr	r3, [pc, #308]	; (800272c <DisplayStatus+0x224>)
 80025f8:	9601      	str	r6, [sp, #4]
 80025fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	484b      	ldr	r0, [pc, #300]	; (8002730 <DisplayStatus+0x228>)
 8002602:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8002734 <DisplayStatus+0x22c>
 8002606:	6804      	ldr	r4, [r0, #0]
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <DisplayStatus+0x230>)
 800260c:	9200      	str	r2, [sp, #0]
 800260e:	9405      	str	r4, [sp, #20]
 8002610:	494a      	ldr	r1, [pc, #296]	; (800273c <DisplayStatus+0x234>)
 8002612:	484b      	ldr	r0, [pc, #300]	; (8002740 <DisplayStatus+0x238>)
 8002614:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002620:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002624:	ec53 2b17 	vmov	r2, r3, d7
 8002628:	f00c fe08 	bl	800f23c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800262c:	4844      	ldr	r0, [pc, #272]	; (8002740 <DisplayStatus+0x238>)
 800262e:	f7fd fe57 	bl	80002e0 <strlen>
 8002632:	4601      	mov	r1, r0
 8002634:	4842      	ldr	r0, [pc, #264]	; (8002740 <DisplayStatus+0x238>)
 8002636:	b289      	uxth	r1, r1
 8002638:	f00a fdd6 	bl	800d1e8 <CDC_Transmit_FS>
	HAL_Delay(1);
 800263c:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 800263e:	b00a      	add	sp, #40	; 0x28
 8002640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8002644:	f001 bfd0 	b.w	80045e8 <HAL_Delay>
	case USB: strcpy(StringMode,"USB"); break;
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <DisplayStatus+0x23c>)
 800264a:	4e2d      	ldr	r6, [pc, #180]	; (8002700 <DisplayStatus+0x1f8>)
 800264c:	6033      	str	r3, [r6, #0]
	switch (CurrentAGC)
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <DisplayStatus+0x1fc>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1a6      	bne.n	80025a4 <DisplayStatus+0x9c>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002656:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <DisplayStatus+0x240>)
 8002658:	4d2c      	ldr	r5, [pc, #176]	; (800270c <DisplayStatus+0x204>)
 800265a:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <DisplayStatus+0x208>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002660:	6028      	str	r0, [r5, #0]
	switch (CurrentBW)
 8002662:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002664:	7129      	strb	r1, [r5, #4]
	switch (CurrentBW)
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1a8      	bne.n	80025bc <DisplayStatus+0xb4>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800266a:	4b38      	ldr	r3, [pc, #224]	; (800274c <DisplayStatus+0x244>)
 800266c:	4c2a      	ldr	r4, [pc, #168]	; (8002718 <DisplayStatus+0x210>)
 800266e:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (TxPowerOut)
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <DisplayStatus+0x214>)
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002674:	80a1      	strh	r1, [r4, #4]
 8002676:	0c09      	lsrs	r1, r1, #16
	switch (TxPowerOut)
 8002678:	681b      	ldr	r3, [r3, #0]
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800267a:	6020      	str	r0, [r4, #0]
	switch (TxPowerOut)
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002680:	71a1      	strb	r1, [r4, #6]
	switch (TxPowerOut)
 8002682:	d1a8      	bne.n	80025d6 <DisplayStatus+0xce>
	case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <DisplayStatus+0x218>)
 8002686:	4932      	ldr	r1, [pc, #200]	; (8002750 <DisplayStatus+0x248>)
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	e7ae      	b.n	80025ea <DisplayStatus+0xe2>
	case LSB: strcpy(StringMode,"LSB"); break;
 800268c:	4e1c      	ldr	r6, [pc, #112]	; (8002700 <DisplayStatus+0x1f8>)
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <DisplayStatus+0x24c>)
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	e783      	b.n	800259c <DisplayStatus+0x94>
	case AM: strcpy(StringMode,"AM"); break;
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <DisplayStatus+0x250>)
 8002696:	e77c      	b.n	8002592 <DisplayStatus+0x8a>
 8002698:	4c1f      	ldr	r4, [pc, #124]	; (8002718 <DisplayStatus+0x210>)
 800269a:	e797      	b.n	80025cc <DisplayStatus+0xc4>
 800269c:	4d1b      	ldr	r5, [pc, #108]	; (800270c <DisplayStatus+0x204>)
 800269e:	e789      	b.n	80025b4 <DisplayStatus+0xac>
 80026a0:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <DisplayStatus+0x1dc>)
 80026a2:	e745      	b.n	8002530 <DisplayStatus+0x28>
	case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <DisplayStatus+0x218>)
 80026a6:	492d      	ldr	r1, [pc, #180]	; (800275c <DisplayStatus+0x254>)
 80026a8:	6019      	str	r1, [r3, #0]
 80026aa:	e79e      	b.n	80025ea <DisplayStatus+0xe2>
	case 10: 		strcpy(StringStep,"  10 "); break;
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <DisplayStatus+0x258>)
 80026ae:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <DisplayStatus+0x1dc>)
 80026b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026b4:	6010      	str	r0, [r2, #0]
 80026b6:	8091      	strh	r1, [r2, #4]
 80026b8:	e73a      	b.n	8002530 <DisplayStatus+0x28>
	case 10000:		strcpy(StringStep,"  10K"); break;
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <DisplayStatus+0x25c>)
 80026bc:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <DisplayStatus+0x1dc>)
 80026be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026c2:	6010      	str	r0, [r2, #0]
 80026c4:	8091      	strh	r1, [r2, #4]
 80026c6:	e733      	b.n	8002530 <DisplayStatus+0x28>
	case 1000: 		strcpy(StringStep,"   1K"); break;
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <DisplayStatus+0x260>)
 80026ca:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <DisplayStatus+0x1dc>)
 80026cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026d0:	6010      	str	r0, [r2, #0]
 80026d2:	8091      	strh	r1, [r2, #4]
 80026d4:	e72c      	b.n	8002530 <DisplayStatus+0x28>
 80026d6:	4e0a      	ldr	r6, [pc, #40]	; (8002700 <DisplayStatus+0x1f8>)
 80026d8:	e760      	b.n	800259c <DisplayStatus+0x94>
 80026da:	bf00      	nop
 80026dc:	2400619c 	.word	0x2400619c
 80026e0:	080189b0 	.word	0x080189b0
 80026e4:	24007200 	.word	0x24007200
 80026e8:	24001f8c 	.word	0x24001f8c
 80026ec:	080189a0 	.word	0x080189a0
 80026f0:	000186a0 	.word	0x000186a0
 80026f4:	080189d0 	.word	0x080189d0
 80026f8:	080189c0 	.word	0x080189c0
 80026fc:	080189dc 	.word	0x080189dc
 8002700:	240071f8 	.word	0x240071f8
 8002704:	24001f8a 	.word	0x24001f8a
 8002708:	080189e8 	.word	0x080189e8
 800270c:	240071f0 	.word	0x240071f0
 8002710:	24001f8b 	.word	0x24001f8b
 8002714:	080189f8 	.word	0x080189f8
 8002718:	24007210 	.word	0x24007210
 800271c:	24007228 	.word	0x24007228
 8002720:	24007208 	.word	0x24007208
 8002724:	00776f4c 	.word	0x00776f4c
 8002728:	2400d90c 	.word	0x2400d90c
 800272c:	2400721c 	.word	0x2400721c
 8002730:	2400c74c 	.word	0x2400c74c
 8002734:	3a83126f 	.word	0x3a83126f
 8002738:	240071b0 	.word	0x240071b0
 800273c:	08018a00 	.word	0x08018a00
 8002740:	24007334 	.word	0x24007334
 8002744:	00425355 	.word	0x00425355
 8002748:	080189e0 	.word	0x080189e0
 800274c:	080189f0 	.word	0x080189f0
 8002750:	0064694d 	.word	0x0064694d
 8002754:	0042534c 	.word	0x0042534c
 8002758:	080189d8 	.word	0x080189d8
 800275c:	0078614d 	.word	0x0078614d
 8002760:	080189a8 	.word	0x080189a8
 8002764:	080189c8 	.word	0x080189c8
 8002768:	080189b8 	.word	0x080189b8

0800276c <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <SetTXPLL+0x198>)
 800276e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	MinDiff = 999999999;
 8002772:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8002908 <SetTXPLL+0x19c>
				OutF = XTalFreq * n / m / p / od;
 8002776:	ed93 5a00 	vldr	s10, [r3]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 800277a:	eddf 4a64 	vldr	s9, [pc, #400]	; 800290c <SetTXPLL+0x1a0>
 800277e:	eddf 3a64 	vldr	s7, [pc, #400]	; 8002910 <SetTXPLL+0x1a4>
{
 8002782:	b530      	push	{r4, r5, lr}
	for (m = 2; m <= 25; m++) //was 64
 8002784:	f04f 0e02 	mov.w	lr, #2
{
 8002788:	b083      	sub	sp, #12
		for (n = 2; n <= 512; n++) //was 1
 800278a:	f240 2401 	movw	r4, #513	; 0x201
				OutF = XTalFreq * n / m / p / od;
 800278e:	ee07 ea90 	vmov	s15, lr
		for (n = 2; n <= 512; n++) //was 1
 8002792:	2202      	movs	r2, #2
				OutF = XTalFreq * n / m / p / od;
 8002794:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002798:	ee83 4a25 	vdiv.f32	s8, s6, s11
 800279c:	e002      	b.n	80027a4 <SetTXPLL+0x38>
		for (n = 2; n <= 512; n++) //was 1
 800279e:	3201      	adds	r2, #1
 80027a0:	42a2      	cmp	r2, r4
 80027a2:	d03b      	beq.n	800281c <SetTXPLL+0xb0>
				OutF = XTalFreq * n / m / p / od;
 80027a4:	ee07 2a90 	vmov	s15, r2
 80027a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027ac:	ee66 6a85 	vmul.f32	s13, s13, s10
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027b0:	ee66 7a84 	vmul.f32	s15, s13, s8
 80027b4:	eef4 7a64 	vcmp.f32	s15, s9
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	ddef      	ble.n	800279e <SetTXPLL+0x32>
 80027be:	eef4 7ae3 	vcmpe.f32	s15, s7
 80027c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c6:	d5ea      	bpl.n	800279e <SetTXPLL+0x32>
			for (p = 2; p <= 128; p+=2)
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <SetTXPLL+0x66>
 80027cc:	3302      	adds	r3, #2
 80027ce:	2b82      	cmp	r3, #130	; 0x82
 80027d0:	d0e5      	beq.n	800279e <SetTXPLL+0x32>
				OutF = XTalFreq * n / m / p / od;
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027da:	ee27 7a25 	vmul.f32	s14, s14, s11
 80027de:	eec6 7a87 	vdiv.f32	s15, s13, s14
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80027e6:	eeb4 7a46 	vcmp.f32	s14, s12
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	d5ed      	bpl.n	80027cc <SetTXPLL+0x60>
 80027f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
				{
					MinDiff = abs(OutF - TF);
 80027f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 80027f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					MinDiff = abs(OutF - TF);
 80027fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002800:	dde4      	ble.n	80027cc <SetTXPLL+0x60>
					MinDiff = abs(OutF - TF);
 8002802:	ee17 1a90 	vmov	r1, s15
 8002806:	4610      	mov	r0, r2
 8002808:	46f4      	mov	ip, lr
 800280a:	2900      	cmp	r1, #0
 800280c:	bfb8      	it	lt
 800280e:	4249      	neglt	r1, r1
 8002810:	ee07 1a90 	vmov	s15, r1
 8002814:	4619      	mov	r1, r3
 8002816:	eeb8 6ae7 	vcvt.f32.s32	s12, s15

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 800281a:	e7d7      	b.n	80027cc <SetTXPLL+0x60>
	for (m = 2; m <= 25; m++) //was 64
 800281c:	f10e 0e01 	add.w	lr, lr, #1
 8002820:	f1be 0f1a 	cmp.w	lr, #26
 8002824:	d1b3      	bne.n	800278e <SetTXPLL+0x22>
				}
			}
		}
	}
	if (fn < 511)
 8002826:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 800282a:	d868      	bhi.n	80028fe <SetTXPLL+0x192>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 800282c:	ee07 0a90 	vmov	s15, r0
 8002830:	ee07 ca10 	vmov	s14, ip
 8002834:	ee05 1a90 	vmov	s11, r1
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8002838:	1c43      	adds	r3, r0, #1
		OutF = XTalFreq * fn / fm / fp / fod;
 800283a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 800283e:	eddf 4a35 	vldr	s9, [pc, #212]	; 8002914 <SetTXPLL+0x1a8>
		OutF = XTalFreq * fn / fm / fp / fod;
 8002842:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8002846:	ee07 3a90 	vmov	s15, r3
		OutF = XTalFreq * fn / fm / fp / fod;
 800284a:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800284e:	ee25 4a26 	vmul.f32	s8, s10, s13
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		OutF = XTalFreq * fn / fm / fp / fod;
 8002856:	ee27 7a25 	vmul.f32	s14, s14, s11
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 800285a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		OutF = XTalFreq * fn / fm / fp / fod;
 800285e:	eec4 6a07 	vdiv.f32	s13, s8, s14
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8002862:	ee27 5a85 	vmul.f32	s10, s15, s10
 8002866:	ee27 7a24 	vmul.f32	s14, s14, s9
 800286a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800286e:	eec0 7a05 	vdiv.f32	s15, s0, s10
 8002872:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002876:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 800287a:	ee17 3a10 	vmov	r3, s14
 800287e:	00dc      	lsls	r4, r3, #3
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
	__HAL_RCC_PLL2_DISABLE();
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002880:	1e4b      	subs	r3, r1, #1
 8002882:	1e42      	subs	r2, r0, #1
	TXFreqError = MinDiff;
 8002884:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8002888:	4d23      	ldr	r5, [pc, #140]	; (8002918 <SetTXPLL+0x1ac>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 800288a:	025b      	lsls	r3, r3, #9
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
	for (i=0; i< 50; i++)
 8002890:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002892:	b29b      	uxth	r3, r3
	TXFreqError = MinDiff;
 8002894:	ed85 6a00 	vstr	s12, [r5]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8002898:	4313      	orrs	r3, r2
	__HAL_RCC_PLL2_DISABLE();
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <SetTXPLL+0x1b0>)
 800289c:	6811      	ldr	r1, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	__HAL_RCC_PLL2_DISABLE();
 80028a2:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 80028a6:	6011      	str	r1, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80028a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028aa:	f421 317c 	bic.w	r1, r1, #258048	; 0x3f000
 80028ae:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
 80028b2:	6291      	str	r1, [r2, #40]	; 0x28
 80028b4:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80028b6:	6813      	ldr	r3, [r2, #0]
 80028b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028bc:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2FRACN_DISABLE();
 80028be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80028c0:	f023 0310 	bic.w	r3, r3, #16
 80028c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80028c6:	9001      	str	r0, [sp, #4]
 80028c8:	9b01      	ldr	r3, [sp, #4]
 80028ca:	2b31      	cmp	r3, #49	; 0x31
 80028cc:	d80b      	bhi.n	80028e6 <SetTXPLL+0x17a>
			 i++;
 80028ce:	9b01      	ldr	r3, [sp, #4]
 80028d0:	3301      	adds	r3, #1
 80028d2:	9301      	str	r3, [sp, #4]
			i--;
 80028d4:	9b01      	ldr	r3, [sp, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	9301      	str	r3, [sp, #4]
	for (i=0; i< 50; i++)
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	3301      	adds	r3, #1
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	9b01      	ldr	r3, [sp, #4]
 80028e2:	2b31      	cmp	r3, #49	; 0x31
 80028e4:	d9f3      	bls.n	80028ce <SetTXPLL+0x162>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 80028e6:	4a0d      	ldr	r2, [pc, #52]	; (800291c <SetTXPLL+0x1b0>)
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <SetTXPLL+0x1b4>)
 80028ea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80028ec:	400b      	ands	r3, r1
 80028ee:	4323      	orrs	r3, r4
 80028f0:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80028f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	62d3      	str	r3, [r2, #44]	; 0x2c

	SetFracPLL(FracDiv);
#endif

}
 80028fa:	b003      	add	sp, #12
 80028fc:	bd30      	pop	{r4, r5, pc}
 80028fe:	f64f 74f8 	movw	r4, #65528	; 0xfff8
 8002902:	e7bd      	b.n	8002880 <SetTXPLL+0x114>
 8002904:	24009338 	.word	0x24009338
 8002908:	4e6e6b28 	.word	0x4e6e6b28
 800290c:	4d0f0d18 	.word	0x4d0f0d18
 8002910:	4e64e1c0 	.word	0x4e64e1c0
 8002914:	46000000 	.word	0x46000000
 8002918:	2400721c 	.word	0x2400721c
 800291c:	58024400 	.word	0x58024400
 8002920:	ffff0007 	.word	0xffff0007
 8002924:	00000000 	.word	0x00000000

08002928 <UserInput>:
	if (USBRXLength)
 8002928:	4b7d      	ldr	r3, [pc, #500]	; (8002b20 <UserInput+0x1f8>)
 800292a:	681a      	ldr	r2, [r3, #0]
{
 800292c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002930:	ed2d 8b06 	vpush	{d8-d10}
 8002934:	b08d      	sub	sp, #52	; 0x34
	if (USBRXLength)
 8002936:	2a00      	cmp	r2, #0
 8002938:	f000 80e5 	beq.w	8002b06 <UserInput+0x1de>
		result = HAL_OK;
 800293c:	2200      	movs	r2, #0
 800293e:	f88d 200f 	strb.w	r2, [sp, #15]
		USBRXLength = 0;
 8002942:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 8002944:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002948:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800294c:	2b00      	cmp	r3, #0
 800294e:	d162      	bne.n	8002a16 <UserInput+0xee>
		switch (UartRXString[0])
 8002950:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <UserInput+0x1fc>)
		UartRXDataReady = RESET;
 8002952:	4975      	ldr	r1, [pc, #468]	; (8002b28 <UserInput+0x200>)
		switch (UartRXString[0])
 8002954:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 8002956:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8002958:	3b2b      	subs	r3, #43	; 0x2b
 800295a:	2b4c      	cmp	r3, #76	; 0x4c
 800295c:	d859      	bhi.n	8002a12 <UserInput+0xea>
 800295e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002962:	01c3      	.short	0x01c3
 8002964:	01e50058 	.word	0x01e50058
 8002968:	00580058 	.word	0x00580058
 800296c:	01e10058 	.word	0x01e10058
 8002970:	01d901dd 	.word	0x01d901dd
 8002974:	02130217 	.word	0x02130217
 8002978:	020b020f 	.word	0x020b020f
 800297c:	02030207 	.word	0x02030207
 8002980:	00580058 	.word	0x00580058
 8002984:	00580058 	.word	0x00580058
 8002988:	00580058 	.word	0x00580058
 800298c:	00580058 	.word	0x00580058
 8002990:	01ff0058 	.word	0x01ff0058
 8002994:	00580058 	.word	0x00580058
 8002998:	00580058 	.word	0x00580058
 800299c:	00580058 	.word	0x00580058
 80029a0:	032801fa 	.word	0x032801fa
 80029a4:	00580323 	.word	0x00580323
 80029a8:	00580058 	.word	0x00580058
 80029ac:	00580058 	.word	0x00580058
 80029b0:	00580058 	.word	0x00580058
 80029b4:	00580058 	.word	0x00580058
 80029b8:	031c0058 	.word	0x031c0058
 80029bc:	00580058 	.word	0x00580058
 80029c0:	00580058 	.word	0x00580058
 80029c4:	00580058 	.word	0x00580058
 80029c8:	00580058 	.word	0x00580058
 80029cc:	03180058 	.word	0x03180058
 80029d0:	032d0331 	.word	0x032d0331
 80029d4:	00580058 	.word	0x00580058
 80029d8:	030f0353 	.word	0x030f0353
 80029dc:	0058004d 	.word	0x0058004d
 80029e0:	00580058 	.word	0x00580058
 80029e4:	0058030b 	.word	0x0058030b
 80029e8:	00580307 	.word	0x00580307
 80029ec:	00580058 	.word	0x00580058
 80029f0:	02c202c6 	.word	0x02c202c6
 80029f4:	023d026b 	.word	0x023d026b
 80029f8:	01d5021b 	.word	0x01d5021b
			keyer_speed += 1;
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <UserInput+0x204>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 8002a02:	2832      	cmp	r0, #50	; 0x32
 8002a04:	f340 8304 	ble.w	8003010 <UserInput+0x6e8>
				keyer_speed = 50;
 8002a08:	2232      	movs	r2, #50	; 0x32
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8002a0e:	f7fd fe41 	bl	8000694 <loadWPM>
		DisplayStatus();
 8002a12:	f7ff fd79 	bl	8002508 <DisplayStatus>
	EncVal = TIM4->CNT;
 8002a16:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <UserInput+0x208>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a18:	4c46      	ldr	r4, [pc, #280]	; (8002b34 <UserInput+0x20c>)
	EncVal = TIM4->CNT;
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a1c:	8821      	ldrh	r1, [r4, #0]
	EncVal = TIM4->CNT;
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4d45      	ldr	r5, [pc, #276]	; (8002b38 <UserInput+0x210>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a22:	1a5a      	subs	r2, r3, r1
	EncVal = TIM4->CNT;
 8002a24:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a26:	b216      	sxth	r6, r2
 8002a28:	b290      	uxth	r0, r2
	if (DiffEncVal < 0)
 8002a2a:	2e00      	cmp	r6, #0
 8002a2c:	f2c0 8153 	blt.w	8002cd6 <UserInput+0x3ae>
	if (DiffEncVal > 0)
 8002a30:	d005      	beq.n	8002a3e <UserInput+0x116>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8002a32:	f7fe fb31 	bl	8001098 <FminusClicked>
		DisplayStatus();
 8002a36:	f7ff fd67 	bl	8002508 <DisplayStatus>
		LastEncVal = EncVal;
 8002a3a:	882b      	ldrh	r3, [r5, #0]
 8002a3c:	8023      	strh	r3, [r4, #0]
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <UserInput+0x214>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a40:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8002b54 <UserInput+0x22c>
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a44:	ed93 7a00 	vldr	s14, [r3]
 8002a48:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8002b10 <UserInput+0x1e8>
 8002a4c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002a50:	ee27 0b00 	vmul.f64	d0, d7, d0
 8002a54:	f00f f8d4 	bl	8011c00 <log10>
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <UserInput+0x218>)
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a5a:	493a      	ldr	r1, [pc, #232]	; (8002b44 <UserInput+0x21c>)
 8002a5c:	4648      	mov	r0, r9
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a5e:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 8002a62:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002b18 <UserInput+0x1f0>
 8002a66:	eea0 7b06 	vfma.f64	d7, d0, d6
 8002a6a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002a6e:	ed83 7a00 	vstr	s14, [r3]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a72:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002a76:	ec53 2b17 	vmov	r2, r3, d7
 8002a7a:	f00c fbdf 	bl	800f23c <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002a7e:	4648      	mov	r0, r9
 8002a80:	f7fd fc2e 	bl	80002e0 <strlen>
 8002a84:	4601      	mov	r1, r0
 8002a86:	4648      	mov	r0, r9
 8002a88:	b289      	uxth	r1, r1
 8002a8a:	f00a fbad 	bl	800d1e8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f001 fdaa 	bl	80045e8 <HAL_Delay>
	if (ShowWF) {
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <UserInput+0x220>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d163      	bne.n	8002b64 <UserInput+0x23c>
	if (OVFDetected)
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <UserInput+0x224>)
 8002a9e:	8813      	ldrh	r3, [r2, #0]
 8002aa0:	b343      	cbz	r3, 8002af4 <UserInput+0x1cc>
		OVFDetected--;
 8002aa2:	3b01      	subs	r3, #1
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002aa4:	492a      	ldr	r1, [pc, #168]	; (8002b50 <UserInput+0x228>)
 8002aa6:	4c2b      	ldr	r4, [pc, #172]	; (8002b54 <UserInput+0x22c>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002aa8:	2580      	movs	r5, #128	; 0x80
		OVFDetected--;
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8013      	strh	r3, [r2, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <UserInput+0x230>)
 8002ab0:	6816      	ldr	r6, [r2, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002ab2:	c907      	ldmia	r1, {r0, r1, r2}
 8002ab4:	c403      	stmia	r4!, {r0, r1}
 8002ab6:	f824 2b02 	strh.w	r2, [r4], #2
 8002aba:	0c12      	lsrs	r2, r2, #16
 8002abc:	7022      	strb	r2, [r4, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <UserInput+0x234>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002ac0:	6035      	str	r5, [r6, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	6015      	str	r5, [r2, #0]
		if (!OVFDetected)
 8002ac6:	b92b      	cbnz	r3, 8002ad4 <UserInput+0x1ac>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002ac8:	6873      	ldr	r3, [r6, #4]
 8002aca:	432b      	orrs	r3, r5
 8002acc:	6073      	str	r3, [r6, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002ace:	6853      	ldr	r3, [r2, #4]
 8002ad0:	432b      	orrs	r3, r5
 8002ad2:	6053      	str	r3, [r2, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002ad4:	481f      	ldr	r0, [pc, #124]	; (8002b54 <UserInput+0x22c>)
 8002ad6:	f7fd fc03 	bl	80002e0 <strlen>
 8002ada:	4601      	mov	r1, r0
 8002adc:	481d      	ldr	r0, [pc, #116]	; (8002b54 <UserInput+0x22c>)
 8002ade:	b289      	uxth	r1, r1
 8002ae0:	f00a fb82 	bl	800d1e8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f001 fd7f 	bl	80045e8 <HAL_Delay>
}
 8002aea:	b00d      	add	sp, #52	; 0x34
 8002aec:	ecbd 8b06 	vpop	{d8-d10}
 8002af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <UserInput+0x238>)
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <UserInput+0x22c>)
 8002af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002afa:	0c14      	lsrs	r4, r2, #16
 8002afc:	c303      	stmia	r3!, {r0, r1}
 8002afe:	f823 2b02 	strh.w	r2, [r3], #2
 8002b02:	701c      	strb	r4, [r3, #0]
 8002b04:	e7e6      	b.n	8002ad4 <UserInput+0x1ac>
		result = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f88d 300f 	strb.w	r3, [sp, #15]
 8002b0c:	e71a      	b.n	8002944 <UserInput+0x1c>
 8002b0e:	bf00      	nop
 8002b10:	00000000 	.word	0x00000000
 8002b14:	409f4000 	.word	0x409f4000
 8002b18:	9916f6a6 	.word	0x9916f6a6
 8002b1c:	400a93fc 	.word	0x400a93fc
 8002b20:	2400722c 	.word	0x2400722c
 8002b24:	24007234 	.word	0x24007234
 8002b28:	24007232 	.word	0x24007232
 8002b2c:	2400c74c 	.word	0x2400c74c
 8002b30:	40000800 	.word	0x40000800
 8002b34:	240071b6 	.word	0x240071b6
 8002b38:	24001fa0 	.word	0x24001fa0
 8002b3c:	240071c0 	.word	0x240071c0
 8002b40:	240071c8 	.word	0x240071c8
 8002b44:	08018a5c 	.word	0x08018a5c
 8002b48:	240071ec 	.word	0x240071ec
 8002b4c:	240071be 	.word	0x240071be
 8002b50:	08018a94 	.word	0x08018a94
 8002b54:	24007334 	.word	0x24007334
 8002b58:	2400c37c 	.word	0x2400c37c
 8002b5c:	2400c3e0 	.word	0x2400c3e0
 8002b60:	08018aa0 	.word	0x08018aa0
		sprintf((char*)UartTXString, "\e[11;1H");
 8002b64:	4ba8      	ldr	r3, [pc, #672]	; (8002e08 <UserInput+0x4e0>)
 8002b66:	ad06      	add	r5, sp, #24
 8002b68:	4ca8      	ldr	r4, [pc, #672]	; (8002e0c <UserInput+0x4e4>)
 8002b6a:	ed9f aaa9 	vldr	s20, [pc, #676]	; 8002e10 <UserInput+0x4e8>
 8002b6e:	f5a4 6780 	sub.w	r7, r4, #1024	; 0x400
 8002b72:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8002e34 <UserInput+0x50c>
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002b76:	ed9f 9b9c 	vldr	d9, [pc, #624]	; 8002de8 <UserInput+0x4c0>
 8002b7a:	ed9f 8b9d 	vldr	d8, [pc, #628]	; 8002df0 <UserInput+0x4c8>
		sprintf((char*)UartTXString, "\e[11;1H");
 8002b7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b82:	e889 0003 	stmia.w	r9, {r0, r1}
				if (StrongestSignal < WFBuffer[i + j])
 8002b86:	edd4 4a01 	vldr	s9, [r4, #4]
 8002b8a:	ed94 5a02 	vldr	s10, [r4, #8]
 8002b8e:	edd4 5a04 	vldr	s11, [r4, #16]
 8002b92:	ed94 6a05 	vldr	s12, [r4, #20]
 8002b96:	edd4 6a06 	vldr	s13, [r4, #24]
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002b9a:	ed94 7a07 	vldr	s14, [r4, #28]
 8002b9e:	edd4 7a00 	vldr	s15, [r4]
 8002ba2:	ed94 0a03 	vldr	s0, [r4, #12]
 8002ba6:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8002baa:	fec7 7a8a 	vmaxnm.f32	s15, s15, s20
 8002bae:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 8002bb2:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8002bb6:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 8002bba:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 8002bbe:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8002bc2:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8002bc6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002bca:	ee30 0b09 	vadd.f64	d0, d0, d9
 8002bce:	f00e fe17 	bl	8011800 <log>
 8002bd2:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002bd6:	498f      	ldr	r1, [pc, #572]	; (8002e14 <UserInput+0x4ec>)
 8002bd8:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002bda:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 50 * log(StrongestSignal + 1.01);
 8002bde:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002be2:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002be6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002bea:	edcd 7a01 	vstr	s15, [sp, #4]
 8002bee:	f89d 3004 	ldrb.w	r3, [sp, #4]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002bf2:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002bf6:	f00c fb21 	bl	800f23c <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	4886      	ldr	r0, [pc, #536]	; (8002e18 <UserInput+0x4f0>)
 8002bfe:	f00c fb46 	bl	800f28e <strcat>
		for (i = 256; i >= 0; i -= 8)
 8002c02:	42a7      	cmp	r7, r4
 8002c04:	f1a4 0420 	sub.w	r4, r4, #32
 8002c08:	d1bd      	bne.n	8002b86 <UserInput+0x25e>
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002c0a:	ed9f 8b7b 	vldr	d8, [pc, #492]	; 8002df8 <UserInput+0x4d0>
 8002c0e:	4c83      	ldr	r4, [pc, #524]	; (8002e1c <UserInput+0x4f4>)
 8002c10:	f507 673e 	add.w	r7, r7, #3040	; 0xbe0
 8002c14:	ed9f 9a7e 	vldr	s18, [pc, #504]	; 8002e10 <UserInput+0x4e8>
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002c18:	4e7e      	ldr	r6, [pc, #504]	; (8002e14 <UserInput+0x4ec>)
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c20:	ed94 4a06 	vldr	s8, [r4, #24]
 8002c24:	3c20      	subs	r4, #32
 8002c26:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8002c2a:	ed94 5a0b 	vldr	s10, [r4, #44]	; 0x2c
 8002c2e:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
 8002c32:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8002c36:	edd3 6a00 	vldr	s13, [r3]
 8002c3a:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8002c3e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8002c42:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8002c46:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
				if (StrongestSignal < WFBuffer[i - j])
 8002c4a:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8002c4e:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
 8002c52:	fe80 0a05 	vmaxnm.f32	s0, s0, s10
 8002c56:	fe80 0a25 	vmaxnm.f32	s0, s0, s11
 8002c5a:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002c5e:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8002c62:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c66:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002c6a:	f00e fdc9 	bl	8011800 <log>
 8002c6e:	ee20 0b08 	vmul.f64	d0, d0, d8
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002c72:	4631      	mov	r1, r6
 8002c74:	4628      	mov	r0, r5
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002c76:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
			BigBucketValue = 100 * log(StrongestSignal + 1);
 8002c7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002c7e:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002c82:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002c86:	edcd 7a01 	vstr	s15, [sp, #4]
 8002c8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
			sprintf((char*)WFString, "\e[48;5;%dm ", BucketColor);
 8002c8e:	f818 2003 	ldrb.w	r2, [r8, r3]
 8002c92:	f00c fad3 	bl	800f23c <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002c96:	4629      	mov	r1, r5
 8002c98:	485f      	ldr	r0, [pc, #380]	; (8002e18 <UserInput+0x4f0>)
 8002c9a:	f00c faf8 	bl	800f28e <strcat>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002c9e:	42bc      	cmp	r4, r7
 8002ca0:	d1bb      	bne.n	8002c1a <UserInput+0x2f2>
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <UserInput+0x4f8>)
 8002ca4:	462b      	mov	r3, r5
 8002ca6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca8:	c303      	stmia	r3!, {r0, r1}
 8002caa:	0c11      	lsrs	r1, r2, #16
 8002cac:	f823 2b02 	strh.w	r2, [r3], #2
 8002cb0:	4859      	ldr	r0, [pc, #356]	; (8002e18 <UserInput+0x4f0>)
 8002cb2:	7019      	strb	r1, [r3, #0]
		strcat(UartTXString, (int8_t *)WFString);
 8002cb4:	f7fd fb14 	bl	80002e0 <strlen>
 8002cb8:	4629      	mov	r1, r5
 8002cba:	4448      	add	r0, r9
 8002cbc:	f00c fade 	bl	800f27c <stpcpy>
 8002cc0:	4601      	mov	r1, r0
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002cc2:	4855      	ldr	r0, [pc, #340]	; (8002e18 <UserInput+0x4f0>)
 8002cc4:	eba1 0109 	sub.w	r1, r1, r9
 8002cc8:	b289      	uxth	r1, r1
 8002cca:	f00a fa8d 	bl	800d1e8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f001 fc8a 	bl	80045e8 <HAL_Delay>
}
 8002cd4:	e6e2      	b.n	8002a9c <UserInput+0x174>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 8002cd6:	1acb      	subs	r3, r1, r3
 8002cd8:	b298      	uxth	r0, r3
 8002cda:	f7fe f973 	bl	8000fc4 <FplusClicked>
		DisplayStatus();
 8002cde:	f7ff fc13 	bl	8002508 <DisplayStatus>
		LastEncVal = EncVal;
 8002ce2:	882b      	ldrh	r3, [r5, #0]
 8002ce4:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal > 0)
 8002ce6:	e6aa      	b.n	8002a3e <UserInput+0x116>
			volume += 0.1;
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <UserInput+0x4fc>)
			if (volume > 1.0)
 8002cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002cee:	ed93 7a00 	vldr	s14, [r3]
 8002cf2:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8002e00 <UserInput+0x4d8>
 8002cf6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002cfa:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002cfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d02:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8002d06:	edc3 7a00 	vstr	s15, [r3]
 8002d0a:	e682      	b.n	8002a12 <UserInput+0xea>
			SetBW((Bwidth)Wide);  break;
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7fd ff8b 	bl	8000c28 <SetBW>
 8002d12:	e67e      	b.n	8002a12 <UserInput+0xea>
			SetFstep(5);  break;
 8002d14:	2005      	movs	r0, #5
 8002d16:	f7fe f933 	bl	8000f80 <SetFstep>
 8002d1a:	e67a      	b.n	8002a12 <UserInput+0xea>
			FplusClicked(2); break;
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f7fe f951 	bl	8000fc4 <FplusClicked>
 8002d22:	e676      	b.n	8002a12 <UserInput+0xea>
			FminusClicked(2); break;
 8002d24:	2002      	movs	r0, #2
 8002d26:	f7fe f9b7 	bl	8001098 <FminusClicked>
 8002d2a:	e672      	b.n	8002a12 <UserInput+0xea>
			volume -= 0.1;
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <UserInput+0x4fc>)
			if (volume < 0)
 8002d2e:	2200      	movs	r2, #0
			volume -= 0.1;
 8002d30:	ed93 7a00 	vldr	s14, [r3]
 8002d34:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8002e00 <UserInput+0x4d8>
 8002d38:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d40:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002d44:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8002d4c:	bf54      	ite	pl
 8002d4e:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8002d52:	601a      	strmi	r2, [r3, #0]
 8002d54:	e65d      	b.n	8002a12 <UserInput+0xea>
			TxPowerOut = LOW_POWER_OUT;
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <UserInput+0x500>)
 8002d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5c:	601a      	str	r2, [r3, #0]
			break;
 8002d5e:	e658      	b.n	8002a12 <UserInput+0xea>
			SendCWMessage(0); break;
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd ff21 	bl	8000ba8 <SendCWMessage>
 8002d66:	e654      	b.n	8002a12 <UserInput+0xea>
			SetFstep(9); break;
 8002d68:	2009      	movs	r0, #9
 8002d6a:	f7fe f909 	bl	8000f80 <SetFstep>
 8002d6e:	e650      	b.n	8002a12 <UserInput+0xea>
			SetFstep(0); break;
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fe f905 	bl	8000f80 <SetFstep>
 8002d76:	e64c      	b.n	8002a12 <UserInput+0xea>
			SetFstep(1); break;
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f7fe f901 	bl	8000f80 <SetFstep>
 8002d7e:	e648      	b.n	8002a12 <UserInput+0xea>
			SetFstep(2);  break;
 8002d80:	2002      	movs	r0, #2
 8002d82:	f7fe f8fd 	bl	8000f80 <SetFstep>
 8002d86:	e644      	b.n	8002a12 <UserInput+0xea>
			SetFstep(3);  break;
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f7fe f8f9 	bl	8000f80 <SetFstep>
 8002d8e:	e640      	b.n	8002a12 <UserInput+0xea>
			SetFstep(4);  break;
 8002d90:	2004      	movs	r0, #4
 8002d92:	f7fe f8f5 	bl	8000f80 <SetFstep>
 8002d96:	e63c      	b.n	8002a12 <UserInput+0xea>
	__HAL_RCC_PLL2FRACN_DISABLE();
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <UserInput+0x504>)
	for (i=0; i< 50; i++)
 8002d9a:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8002d9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d9e:	f023 0310 	bic.w	r3, r3, #16
 8002da2:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8002da4:	9105      	str	r1, [sp, #20]
 8002da6:	9b05      	ldr	r3, [sp, #20]
 8002da8:	2b31      	cmp	r3, #49	; 0x31
 8002daa:	d80b      	bhi.n	8002dc4 <UserInput+0x49c>
			 i++;
 8002dac:	9b05      	ldr	r3, [sp, #20]
 8002dae:	3301      	adds	r3, #1
 8002db0:	9305      	str	r3, [sp, #20]
			i--;
 8002db2:	9b05      	ldr	r3, [sp, #20]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	9305      	str	r3, [sp, #20]
	for (i=0; i< 50; i++)
 8002db8:	9b05      	ldr	r3, [sp, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	9305      	str	r3, [sp, #20]
 8002dbe:	9b05      	ldr	r3, [sp, #20]
 8002dc0:	2b31      	cmp	r3, #49	; 0x31
 8002dc2:	d9f3      	bls.n	8002dac <UserInput+0x484>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8002dc4:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <UserInput+0x504>)
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <UserInput+0x508>)
 8002dc8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002dca:	400b      	ands	r3, r1
 8002dcc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002dd0:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8002dd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002dd4:	f043 0310 	orr.w	r3, r3, #16
 8002dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002dda:	e61a      	b.n	8002a12 <UserInput+0xea>
			SetMode((Mode)USB); break;
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f7fe f897 	bl	8000f10 <SetMode>
 8002de2:	e616      	b.n	8002a12 <UserInput+0xea>
 8002de4:	f3af 8000 	nop.w
 8002de8:	c28f5c29 	.word	0xc28f5c29
 8002dec:	3ff028f5 	.word	0x3ff028f5
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40490000 	.word	0x40490000
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	40590000 	.word	0x40590000
 8002e00:	9999999a 	.word	0x9999999a
 8002e04:	3fb99999 	.word	0x3fb99999
 8002e08:	08018a74 	.word	0x08018a74
 8002e0c:	24008738 	.word	0x24008738
 8002e10:	00000000 	.word	0x00000000
 8002e14:	08018a7c 	.word	0x08018a7c
 8002e18:	24007334 	.word	0x24007334
 8002e1c:	24009318 	.word	0x24009318
 8002e20:	08018a88 	.word	0x08018a88
 8002e24:	2400d90c 	.word	0x2400d90c
 8002e28:	24007228 	.word	0x24007228
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	ffff0007 	.word	0xffff0007
 8002e34:	08018aac 	.word	0x08018aac
	if (Status)
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8002e38:	4e7a      	ldr	r6, [pc, #488]	; (8003024 <UserInput+0x6fc>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3a:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 8002e3c:	4c7a      	ldr	r4, [pc, #488]	; (8003028 <UserInput+0x700>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	ad06      	add	r5, sp, #24
		if (LastTXFreq != LOfreq)
 8002e40:	ed96 0a00 	vldr	s0, [r6]
 8002e44:	edd4 7a00 	vldr	s15, [r4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	9306      	str	r3, [sp, #24]
		if (LastTXFreq != LOfreq)
 8002e4a:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8002e4e:	4a77      	ldr	r2, [pc, #476]	; (800302c <UserInput+0x704>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	e9c5 3301 	strd	r3, r3, [r5, #4]
		if (LastTXFreq != LOfreq)
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	e9c5 3303 	strd	r3, r3, [r5, #12]
		TransmissionEnabled = 1;
 8002e5c:	f04f 0301 	mov.w	r3, #1
 8002e60:	7013      	strb	r3, [r2, #0]
		if (LastTXFreq != LOfreq)
 8002e62:	f040 80d7 	bne.w	8003014 <UserInput+0x6ec>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e66:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e68:	f44f 7800 	mov.w	r8, #512	; 0x200
 8002e6c:	f04f 0902 	mov.w	r9, #2
 8002e70:	2600      	movs	r6, #0
 8002e72:	2703      	movs	r7, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e74:	4629      	mov	r1, r5
 8002e76:	486e      	ldr	r0, [pc, #440]	; (8003030 <UserInput+0x708>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e78:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e7a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e7e:	e9cd 6708 	strd	r6, r7, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e82:	f004 f9fb 	bl	800727c <HAL_GPIO_Init>

		RELAY_TX_ON;
 8002e86:	2201      	movs	r2, #1
 8002e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e8c:	4869      	ldr	r0, [pc, #420]	; (8003034 <UserInput+0x70c>)
 8002e8e:	f004 fb35 	bl	80074fc <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8002e92:	2201      	movs	r2, #1
 8002e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e98:	4867      	ldr	r0, [pc, #412]	; (8003038 <UserInput+0x710>)
 8002e9a:	f004 fb2f 	bl	80074fc <HAL_GPIO_WritePin>
}


void CarrierEnable(uint8_t Status)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9e:	9406      	str	r4, [sp, #24]
	if (Status)
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ea6:	4863      	ldr	r0, [pc, #396]	; (8003034 <UserInput+0x70c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	e9c5 4401 	strd	r4, r4, [r5, #4]
 8002eac:	e9c5 4403 	strd	r4, r4, [r5, #12]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002eb0:	f004 fb24 	bl	80074fc <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <UserInput+0x714>)
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	2110      	movs	r1, #16
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4860      	ldr	r0, [pc, #384]	; (8003040 <UserInput+0x718>)
 8002ebe:	f002 fe31 	bl	8005b24 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	485a      	ldr	r0, [pc, #360]	; (8003030 <UserInput+0x708>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ec6:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002ecc:	e9cd 6708 	strd	r6, r7, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f004 f9d4 	bl	800727c <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <UserInput+0x71c>)
		LED_GREEN_ON;
 8002ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002edc:	4856      	ldr	r0, [pc, #344]	; (8003038 <UserInput+0x710>)
		TXCarrierEnabled = 1;
 8002ede:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8002ee0:	f004 fb0c 	bl	80074fc <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 8002ee4:	e595      	b.n	8002a12 <UserInput+0xea>
			SetAGC((Agctype)Slow);  break;
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f7fd ff00 	bl	8000cec <SetAGC>
 8002eec:	e591      	b.n	8002a12 <UserInput+0xea>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eee:	ad06      	add	r5, sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ef2:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ef4:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002ef8:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efa:	4629      	mov	r1, r5
 8002efc:	484c      	ldr	r0, [pc, #304]	; (8003030 <UserInput+0x708>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002efe:	9308      	str	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f04:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f08:	f004 f9b8 	bl	800727c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f12:	4848      	ldr	r0, [pc, #288]	; (8003034 <UserInput+0x70c>)
 8002f14:	f004 faf2 	bl	80074fc <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8002f18:	4622      	mov	r2, r4
 8002f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f1e:	4846      	ldr	r0, [pc, #280]	; (8003038 <UserInput+0x710>)
 8002f20:	f004 faec 	bl	80074fc <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <UserInput+0x704>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002f26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f2a:	4842      	ldr	r0, [pc, #264]	; (8003034 <UserInput+0x70c>)
 8002f2c:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8002f2e:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	940a      	str	r4, [sp, #40]	; 0x28
 8002f32:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002f36:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002f3a:	f004 fadf 	bl	80074fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8002f3e:	4623      	mov	r3, r4
 8002f40:	4622      	mov	r2, r4
 8002f42:	2110      	movs	r1, #16
 8002f44:	483e      	ldr	r0, [pc, #248]	; (8003040 <UserInput+0x718>)
 8002f46:	f002 fded 	bl	8005b24 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4e:	4629      	mov	r1, r5
 8002f50:	4837      	ldr	r0, [pc, #220]	; (8003030 <UserInput+0x708>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f52:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <UserInput+0x71c>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f58:	e9cd 6706 	strd	r6, r7, [sp, #24]
		TXCarrierEnabled = 0;
 8002f5c:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5e:	f004 f98d 	bl	800727c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8002f62:	4622      	mov	r2, r4
 8002f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f68:	4833      	ldr	r0, [pc, #204]	; (8003038 <UserInput+0x710>)
 8002f6a:	f004 fac7 	bl	80074fc <HAL_GPIO_WritePin>
}
 8002f6e:	e550      	b.n	8002a12 <UserInput+0xea>
			SetBW((Bwidth)Narrow);  break;
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7fd fe59 	bl	8000c28 <SetBW>
 8002f76:	e54c      	b.n	8002a12 <UserInput+0xea>
			SetMode((Mode)LSB); break;
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f7fd ffc9 	bl	8000f10 <SetMode>
 8002f7e:	e548      	b.n	8002a12 <UserInput+0xea>
			keyer_speed -= 1;
 8002f80:	4b31      	ldr	r3, [pc, #196]	; (8003048 <UserInput+0x720>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8002f86:	2802      	cmp	r0, #2
 8002f88:	dc42      	bgt.n	8003010 <UserInput+0x6e8>
				keyer_speed = 3;
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8002f90:	e53d      	b.n	8002a0e <UserInput+0xe6>
			SetMode((Mode)AM); break;
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fd ffbc 	bl	8000f10 <SetMode>
 8002f98:	e53b      	b.n	8002a12 <UserInput+0xea>
			if (ShowWF)
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <UserInput+0x724>)
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d03d      	beq.n	800301e <UserInput+0x6f6>
				ShowWF=0;
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e534      	b.n	8002a12 <UserInput+0xea>
			TxPowerOut = MAX_POWER_OUT;
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <UserInput+0x714>)
 8002faa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002fae:	601a      	str	r2, [r3, #0]
			break;
 8002fb0:	e52f      	b.n	8002a12 <UserInput+0xea>
			TxPowerOut = MID_POWER_OUT;
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <UserInput+0x714>)
 8002fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb8:	601a      	str	r2, [r3, #0]
			break;
 8002fba:	e52a      	b.n	8002a12 <UserInput+0xea>
			SetMode((Mode)CW); break;
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f7fd ffa7 	bl	8000f10 <SetMode>
 8002fc2:	e526      	b.n	8002a12 <UserInput+0xea>
	__HAL_RCC_PLL2FRACN_DISABLE();
 8002fc4:	4a22      	ldr	r2, [pc, #136]	; (8003050 <UserInput+0x728>)
	for (i=0; i< 50; i++)
 8002fc6:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 8002fc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8002fd0:	9104      	str	r1, [sp, #16]
 8002fd2:	9b04      	ldr	r3, [sp, #16]
 8002fd4:	2b31      	cmp	r3, #49	; 0x31
 8002fd6:	d80b      	bhi.n	8002ff0 <UserInput+0x6c8>
			 i++;
 8002fd8:	9b04      	ldr	r3, [sp, #16]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	9304      	str	r3, [sp, #16]
			i--;
 8002fde:	9b04      	ldr	r3, [sp, #16]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	9304      	str	r3, [sp, #16]
	for (i=0; i< 50; i++)
 8002fe4:	9b04      	ldr	r3, [sp, #16]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	9304      	str	r3, [sp, #16]
 8002fea:	9b04      	ldr	r3, [sp, #16]
 8002fec:	2b31      	cmp	r3, #49	; 0x31
 8002fee:	d9f3      	bls.n	8002fd8 <UserInput+0x6b0>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <UserInput+0x728>)
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <UserInput+0x72c>)
 8002ff4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	f043 03a8 	orr.w	r3, r3, #168	; 0xa8
 8002ffc:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8002ffe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003000:	f043 0310 	orr.w	r3, r3, #16
 8003004:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003006:	e504      	b.n	8002a12 <UserInput+0xea>
			SetAGC((Agctype)Fast);  break;
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd fe6f 	bl	8000cec <SetAGC>
 800300e:	e500      	b.n	8002a12 <UserInput+0xea>
			keyer_speed += 1;
 8003010:	6018      	str	r0, [r3, #0]
 8003012:	e4fc      	b.n	8002a0e <UserInput+0xe6>
			SetTXPLL(LOfreq);
 8003014:	f7ff fbaa 	bl	800276c <SetTXPLL>
			LastTXFreq = LOfreq;
 8003018:	6833      	ldr	r3, [r6, #0]
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	e723      	b.n	8002e66 <UserInput+0x53e>
				ShowWF=1;
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e4f6      	b.n	8002a12 <UserInput+0xea>
 8003024:	240071b0 	.word	0x240071b0
 8003028:	240071b8 	.word	0x240071b8
 800302c:	24007224 	.word	0x24007224
 8003030:	58020800 	.word	0x58020800
 8003034:	58020c00 	.word	0x58020c00
 8003038:	58020400 	.word	0x58020400
 800303c:	24007228 	.word	0x24007228
 8003040:	2400c448 	.word	0x2400c448
 8003044:	24007218 	.word	0x24007218
 8003048:	2400c74c 	.word	0x2400c74c
 800304c:	240071ec 	.word	0x240071ec
 8003050:	58024400 	.word	0x58024400
 8003054:	ffff0007 	.word	0xffff0007

08003058 <TXSwitch>:
{
 8003058:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305a:	2300      	movs	r3, #0
{
 800305c:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305e:	e9cd 3300 	strd	r3, r3, [sp]
 8003062:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003066:	9304      	str	r3, [sp, #16]
	if (Status)
 8003068:	b378      	cbz	r0, 80030ca <TXSwitch+0x72>
		if (LastTXFreq != LOfreq)
 800306a:	4d27      	ldr	r5, [pc, #156]	; (8003108 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 800306c:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 800306e:	4c27      	ldr	r4, [pc, #156]	; (800310c <TXSwitch+0xb4>)
 8003070:	ed95 0a00 	vldr	s0, [r5]
 8003074:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 800307a:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 800307e:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	d11c      	bne.n	80030c0 <TXSwitch+0x68>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003086:	2200      	movs	r2, #0
 8003088:	2303      	movs	r3, #3
 800308a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800308e:	2502      	movs	r5, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003090:	4669      	mov	r1, sp
 8003092:	4820      	ldr	r0, [pc, #128]	; (8003114 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003094:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003098:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800309a:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800309e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a0:	f004 f8ec 	bl	800727c <HAL_GPIO_Init>
		RELAY_TX_ON;
 80030a4:	2201      	movs	r2, #1
 80030a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030aa:	481b      	ldr	r0, [pc, #108]	; (8003118 <TXSwitch+0xc0>)
 80030ac:	f004 fa26 	bl	80074fc <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 80030b0:	2201      	movs	r2, #1
 80030b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030b6:	4819      	ldr	r0, [pc, #100]	; (800311c <TXSwitch+0xc4>)
 80030b8:	f004 fa20 	bl	80074fc <HAL_GPIO_WritePin>
}
 80030bc:	b007      	add	sp, #28
 80030be:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 80030c0:	f7ff fb54 	bl	800276c <SetTXPLL>
			LastTXFreq = LOfreq;
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	e7dd      	b.n	8003086 <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8003100 <TXSwitch+0xa8>
 80030ce:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030d0:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d2:	4669      	mov	r1, sp
 80030d4:	480f      	ldr	r0, [pc, #60]	; (8003114 <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030d6:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030d8:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030dc:	f004 f8ce 	bl	800727c <HAL_GPIO_Init>
		RELAY_TX_OFF;
 80030e0:	4622      	mov	r2, r4
 80030e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030e6:	480c      	ldr	r0, [pc, #48]	; (8003118 <TXSwitch+0xc0>)
 80030e8:	f004 fa08 	bl	80074fc <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 80030ec:	4622      	mov	r2, r4
 80030ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030f2:	480a      	ldr	r0, [pc, #40]	; (800311c <TXSwitch+0xc4>)
 80030f4:	f004 fa02 	bl	80074fc <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <TXSwitch+0xb8>)
 80030fa:	701c      	strb	r4, [r3, #0]
}
 80030fc:	b007      	add	sp, #28
 80030fe:	bd30      	pop	{r4, r5, pc}
 8003100:	00000200 	.word	0x00000200
 8003104:	00000001 	.word	0x00000001
 8003108:	240071b0 	.word	0x240071b0
 800310c:	240071b8 	.word	0x240071b8
 8003110:	24007224 	.word	0x24007224
 8003114:	58020800 	.word	0x58020800
 8003118:	58020c00 	.word	0x58020c00
 800311c:	58020400 	.word	0x58020400

08003120 <CarrierEnable>:
{
 8003120:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003122:	2400      	movs	r4, #0
{
 8003124:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003126:	e9cd 4400 	strd	r4, r4, [sp]
 800312a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800312e:	9404      	str	r4, [sp, #16]
	if (Status)
 8003130:	b320      	cbz	r0, 800317c <CarrierEnable+0x5c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8003132:	4622      	mov	r2, r4
 8003134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003138:	4822      	ldr	r0, [pc, #136]	; (80031c4 <CarrierEnable+0xa4>)
 800313a:	f004 f9df 	bl	80074fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <CarrierEnable+0xa8>)
 8003140:	4622      	mov	r2, r4
 8003142:	2110      	movs	r1, #16
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4821      	ldr	r0, [pc, #132]	; (80031cc <CarrierEnable+0xac>)
 8003148:	f002 fcec 	bl	8005b24 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800314c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003150:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003152:	4669      	mov	r1, sp
 8003154:	481e      	ldr	r0, [pc, #120]	; (80031d0 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003156:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003158:	e9cd 2300 	strd	r2, r3, [sp]
 800315c:	2200      	movs	r2, #0
 800315e:	2303      	movs	r3, #3
 8003160:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003164:	f004 f88a 	bl	800727c <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8003168:	2201      	movs	r2, #1
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 800316c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003170:	4819      	ldr	r0, [pc, #100]	; (80031d8 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 8003172:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8003174:	f004 f9c2 	bl	80074fc <HAL_GPIO_WritePin>
}
 8003178:	b007      	add	sp, #28
 800317a:	bd30      	pop	{r4, r5, pc}
 800317c:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800317e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003182:	4810      	ldr	r0, [pc, #64]	; (80031c4 <CarrierEnable+0xa4>)
 8003184:	2201      	movs	r2, #1
 8003186:	f004 f9b9 	bl	80074fc <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 800318a:	462b      	mov	r3, r5
 800318c:	462a      	mov	r2, r5
 800318e:	2110      	movs	r1, #16
 8003190:	480e      	ldr	r0, [pc, #56]	; (80031cc <CarrierEnable+0xac>)
 8003192:	f002 fcc7 	bl	8005b24 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319a:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319e:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 80031a0:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a2:	480b      	ldr	r0, [pc, #44]	; (80031d0 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031a4:	e9cd 2300 	strd	r2, r3, [sp]
 80031a8:	2300      	movs	r3, #0
 80031aa:	2202      	movs	r2, #2
 80031ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b0:	f004 f864 	bl	800727c <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80031b4:	462a      	mov	r2, r5
 80031b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ba:	4807      	ldr	r0, [pc, #28]	; (80031d8 <CarrierEnable+0xb8>)
 80031bc:	f004 f99e 	bl	80074fc <HAL_GPIO_WritePin>
}
 80031c0:	b007      	add	sp, #28
 80031c2:	bd30      	pop	{r4, r5, pc}
 80031c4:	58020c00 	.word	0x58020c00
 80031c8:	24007228 	.word	0x24007228
 80031cc:	2400c448 	.word	0x2400c448
 80031d0:	58020800 	.word	0x58020800
 80031d4:	24007218 	.word	0x24007218
 80031d8:	58020400 	.word	0x58020400

080031dc <Error_Handler>:
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80031dc:	4e09      	ldr	r6, [pc, #36]	; (8003204 <Error_Handler+0x28>)
{
 80031de:	4d0a      	ldr	r5, [pc, #40]	; (8003208 <Error_Handler+0x2c>)
 80031e0:	4c0a      	ldr	r4, [pc, #40]	; (800320c <Error_Handler+0x30>)
 80031e2:	b508      	push	{r3, lr}
 80031e4:	6833      	ldr	r3, [r6, #0]
 80031e6:	fb05 f303 	mul.w	r3, r5, r3
 80031ea:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 80031ee:	d200      	bcs.n	80031f2 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 80031f0:	e7fe      	b.n	80031f0 <Error_Handler+0x14>
			LED_switch();
 80031f2:	f7fd ffbb 	bl	800116c <LED_switch>
 80031f6:	6833      	ldr	r3, [r6, #0]
 80031f8:	fb05 f303 	mul.w	r3, r5, r3
 80031fc:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8003200:	d2f7      	bcs.n	80031f2 <Error_Handler+0x16>
 8003202:	e7f5      	b.n	80031f0 <Error_Handler+0x14>
 8003204:	2400c77c 	.word	0x2400c77c
 8003208:	c28f5c29 	.word	0xc28f5c29
 800320c:	051eb851 	.word	0x051eb851

08003210 <SystemClock_Config_For_OC>:
{
 8003210:	b530      	push	{r4, r5, lr}
 8003212:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003214:	224c      	movs	r2, #76	; 0x4c
 8003216:	2100      	movs	r1, #0
 8003218:	a80a      	add	r0, sp, #40	; 0x28
 800321a:	f00b fbc5 	bl	800e9a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800321e:	2220      	movs	r2, #32
 8003220:	2100      	movs	r1, #0
 8003222:	a802      	add	r0, sp, #8
 8003224:	f00b fbc0 	bl	800e9a8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003228:	22bc      	movs	r2, #188	; 0xbc
 800322a:	2100      	movs	r1, #0
 800322c:	a81e      	add	r0, sp, #120	; 0x78
 800322e:	f00b fbbb 	bl	800e9a8 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003232:	2002      	movs	r0, #2
 8003234:	f004 ff74 	bl	8008120 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003238:	4a49      	ldr	r2, [pc, #292]	; (8003360 <SystemClock_Config_For_OC+0x150>)
 800323a:	2300      	movs	r3, #0
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	6991      	ldr	r1, [r2, #24]
 8003240:	4b48      	ldr	r3, [pc, #288]	; (8003364 <SystemClock_Config_For_OC+0x154>)
 8003242:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003246:	6191      	str	r1, [r2, #24]
 8003248:	6991      	ldr	r1, [r2, #24]
 800324a:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800324e:	9101      	str	r1, [sp, #4]
 8003250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003252:	f041 0101 	orr.w	r1, r1, #1
 8003256:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003262:	6993      	ldr	r3, [r2, #24]
 8003264:	0499      	lsls	r1, r3, #18
 8003266:	d5fc      	bpl.n	8003262 <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003268:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800326a:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800326c:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800326e:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003270:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800327c:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 800327e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003282:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8003284:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003286:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8003288:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800328a:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800328c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003290:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003292:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8003296:	230a      	movs	r3, #10
 8003298:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 800329c:	4b33      	ldr	r3, [pc, #204]	; (800336c <SystemClock_Config_For_OC+0x15c>)
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <SystemClock_Config_For_OC+0x160>)
 80032a0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80032a2:	2221      	movs	r2, #33	; 0x21
 80032a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80032a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ac:	f004 ffe8 	bl	8008280 <HAL_RCC_OscConfig>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d152      	bne.n	800335a <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032b4:	223f      	movs	r2, #63	; 0x3f
 80032b6:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032b8:	4621      	mov	r1, r4
 80032ba:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2308      	movs	r3, #8
 80032c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	2340      	movs	r3, #64	; 0x40
 80032cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032d0:	2340      	movs	r3, #64	; 0x40
 80032d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80032da:	f005 fb97 	bl	8008a0c <HAL_RCC_ClockConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d13a      	bne.n	800335a <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80032e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80032e8:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80032ea:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80032ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 80032f0:	9244      	str	r2, [sp, #272]	; 0x110
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80032f2:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <SystemClock_Config_For_OC+0x164>)
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f8:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80032fa:	9346      	str	r3, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 80032fc:	2304      	movs	r3, #4
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80032fe:	913f      	str	r1, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003300:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8003304:	2226      	movs	r2, #38	; 0x26
 8003306:	2318      	movs	r3, #24
 8003308:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 800330c:	2202      	movs	r2, #2
 800330e:	2302      	movs	r3, #2
 8003310:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	2300      	movs	r3, #0
 8003318:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800331c:	2200      	movs	r2, #0
 800331e:	2305      	movs	r3, #5
 8003320:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	2302      	movs	r3, #2
 8003328:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800332c:	2208      	movs	r2, #8
 800332e:	2305      	movs	r3, #5
 8003330:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 8003334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003338:	2300      	movs	r3, #0
 800333a:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333e:	f005 fe51 	bl	8008fe4 <HAL_RCCEx_PeriphCLKConfig>
 8003342:	b950      	cbnz	r0, 800335a <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 8003344:	f004 ff10 	bl	8008168 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8003348:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800334c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8003350:	4628      	mov	r0, r5
 8003352:	f005 fa69 	bl	8008828 <HAL_RCC_MCOConfig>
}
 8003356:	b04f      	add	sp, #316	; 0x13c
 8003358:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 800335a:	f7ff ff3f 	bl	80031dc <Error_Handler>
 800335e:	bf00      	nop
 8003360:	58024800 	.word	0x58024800
 8003364:	58000400 	.word	0x58000400
 8003368:	58024400 	.word	0x58024400
 800336c:	24009338 	.word	0x24009338
 8003370:	4bbebb88 	.word	0x4bbebb88
 8003374:	000c0042 	.word	0x000c0042

08003378 <MX_TIM6_Init_Custom_Rate>:
{
 8003378:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337a:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 800337c:	4c0f      	ldr	r4, [pc, #60]	; (80033bc <MX_TIM6_Init_Custom_Rate+0x44>)
 800337e:	4810      	ldr	r0, [pc, #64]	; (80033c0 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8003380:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 8003382:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003386:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003388:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800338a:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 800338c:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003390:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 8003392:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003396:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800339a:	f006 feff 	bl	800a19c <HAL_TIM_Base_Init>
 800339e:	b950      	cbnz	r0, 80033b6 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033a0:	4603      	mov	r3, r0
 80033a2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033a4:	a901      	add	r1, sp, #4
 80033a6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a8:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033aa:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033ac:	f007 fb30 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 80033b0:	b908      	cbnz	r0, 80033b6 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80033b2:	b004      	add	sp, #16
 80033b4:	bd10      	pop	{r4, pc}
		Error_Handler();
 80033b6:	f7ff ff11 	bl	80031dc <Error_Handler>
 80033ba:	bf00      	nop
 80033bc:	2400c620 	.word	0x2400c620
 80033c0:	40001000 	.word	0x40001000
 80033c4:	00000000 	.word	0x00000000

080033c8 <main>:
{
 80033c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80033cc:	b0cf      	sub	sp, #316	; 0x13c
	HAL_Init();
 80033ce:	f001 f8c9 	bl	8004564 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80033d2:	4add      	ldr	r2, [pc, #884]	; (8003748 <main+0x380>)
 80033d4:	6953      	ldr	r3, [r2, #20]
 80033d6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80033da:	d111      	bne.n	8003400 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80033dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033e0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80033e4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80033e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033ec:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80033f0:	6953      	ldr	r3, [r2, #20]
 80033f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80033f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033fc:	f3bf 8f6f 	isb	sy
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003402:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8003768 <main+0x3a0>
	SystemClock_Config_For_OC();
 8003406:	f7ff ff03 	bl	8003210 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always on an Android phone) does not initialize
 800340a:	2014      	movs	r0, #20
 800340c:	f001 f8ec 	bl	80045e8 <HAL_Delay>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	9448      	str	r4, [sp, #288]	; 0x120
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8003412:	48ce      	ldr	r0, [pc, #824]	; (800374c <main+0x384>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	2501      	movs	r5, #1
	hadc1.Instance = ADC1;
 8003416:	f8df b354 	ldr.w	fp, [pc, #852]	; 800376c <main+0x3a4>
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800341a:	f44f 7680 	mov.w	r6, #256	; 0x100
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800341e:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003422:	f04f 0908 	mov.w	r9, #8
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003426:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342a:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 800342e:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003432:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003436:	f042 0204 	orr.w	r2, r2, #4
 800343a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800343e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003442:	f002 0204 	and.w	r2, r2, #4
 8003446:	9205      	str	r2, [sp, #20]
 8003448:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800344a:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800344e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003452:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8003456:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800345a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800345e:	9206      	str	r2, [sp, #24]
 8003460:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800346e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003472:	f002 0201 	and.w	r2, r2, #1
 8003476:	9207      	str	r2, [sp, #28]
 8003478:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800347e:	f042 0202 	orr.w	r2, r2, #2
 8003482:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 8003486:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 800348a:	f002 0202 	and.w	r2, r2, #2
 800348e:	9208      	str	r2, [sp, #32]
 8003490:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003492:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 8003496:	f042 0208 	orr.w	r2, r2, #8
 800349a:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
 800349e:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80034a2:	f002 0208 	and.w	r2, r2, #8
 80034a6:	9209      	str	r2, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80034a8:	4622      	mov	r2, r4
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80034aa:	9909      	ldr	r1, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80034ac:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80034b0:	f004 f824 	bl	80074fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 80034b4:	4622      	mov	r2, r4
 80034b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80034ba:	48a5      	ldr	r0, [pc, #660]	; (8003750 <main+0x388>)
 80034bc:	f004 f81e 	bl	80074fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80034c0:	4622      	mov	r2, r4
 80034c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c6:	48a3      	ldr	r0, [pc, #652]	; (8003754 <main+0x38c>)
 80034c8:	f004 f818 	bl	80074fc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 80034cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034d0:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d2:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = IN_SW01_Pin;
 80034d4:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 80034d8:	a944      	add	r1, sp, #272	; 0x110
 80034da:	489f      	ldr	r0, [pc, #636]	; (8003758 <main+0x390>)
 80034dc:	f003 fece 	bl	800727c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80034e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034e4:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034e8:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = SwInt1_Pin;
 80034ea:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 80034ee:	a944      	add	r1, sp, #272	; 0x110
 80034f0:	4899      	ldr	r0, [pc, #612]	; (8003758 <main+0x390>)
 80034f2:	f003 fec3 	bl	800727c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80034f6:	20c0      	movs	r0, #192	; 0xc0
 80034f8:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fa:	9546      	str	r5, [sp, #280]	; 0x118
	GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 80034fc:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	a944      	add	r1, sp, #272	; 0x110
 8003502:	4894      	ldr	r0, [pc, #592]	; (8003754 <main+0x38c>)
 8003504:	f003 feba 	bl	800727c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8003508:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 800350c:	2101      	movs	r1, #1
 800350e:	ed9f 8b78 	vldr	d8, [pc, #480]	; 80036f0 <main+0x328>
 8003512:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003516:	a944      	add	r1, sp, #272	; 0x110
 8003518:	488c      	ldr	r0, [pc, #560]	; (800374c <main+0x384>)
	GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 800351a:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351e:	f003 fead 	bl	800727c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003522:	a944      	add	r1, sp, #272	; 0x110
 8003524:	488a      	ldr	r0, [pc, #552]	; (8003750 <main+0x388>)
	GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8003526:	ed9f 7b74 	vldr	d7, [pc, #464]	; 80036f8 <main+0x330>
 800352a:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 800352e:	ed9f 7b74 	vldr	d7, [pc, #464]	; 8003700 <main+0x338>
 8003532:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003536:	f003 fea1 	bl	800727c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353a:	a944      	add	r1, sp, #272	; 0x110
 800353c:	4886      	ldr	r0, [pc, #536]	; (8003758 <main+0x390>)
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800353e:	9448      	str	r4, [sp, #288]	; 0x120
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003540:	ed9f 7b71 	vldr	d7, [pc, #452]	; 8003708 <main+0x340>
 8003544:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
 8003548:	ed9f 7b71 	vldr	d7, [pc, #452]	; 8003710 <main+0x348>
 800354c:	ed8d 7b46 	vstr	d7, [sp, #280]	; 0x118
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003550:	f003 fe94 	bl	800727c <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003554:	a944      	add	r1, sp, #272	; 0x110
 8003556:	487f      	ldr	r0, [pc, #508]	; (8003754 <main+0x38c>)
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003558:	ed9f 7b6f 	vldr	d7, [pc, #444]	; 8003718 <main+0x350>
 800355c:	ed8d 8b46 	vstr	d8, [sp, #280]	; 0x118
 8003560:	ed8d 7b44 	vstr	d7, [sp, #272]	; 0x110
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003564:	f003 fe8a 	bl	800727c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8003568:	4622      	mov	r2, r4
 800356a:	2104      	movs	r1, #4
 800356c:	2028      	movs	r0, #40	; 0x28
 800356e:	f002 f9a1 	bl	80058b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003572:	2028      	movs	r0, #40	; 0x28
 8003574:	f002 f9dc 	bl	8005930 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003578:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800357c:	4621      	mov	r1, r4
 800357e:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003580:	432a      	orrs	r2, r5
 8003582:	f8c8 20d8 	str.w	r2, [r8, #216]	; 0xd8
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003586:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003588:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 800358c:	402b      	ands	r3, r5
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003592:	f002 f98f 	bl	80058b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003596:	200b      	movs	r0, #11
 8003598:	f002 f9ca 	bl	8005930 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 800359c:	4622      	mov	r2, r4
 800359e:	2102      	movs	r1, #2
 80035a0:	200c      	movs	r0, #12
 80035a2:	f002 f987 	bl	80058b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80035a6:	200c      	movs	r0, #12
 80035a8:	f002 f9c2 	bl	8005930 <HAL_NVIC_EnableIRQ>
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035ac:	2304      	movs	r3, #4
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035ae:	4658      	mov	r0, fp
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80035b0:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035b4:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc1.Instance = ADC1;
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <main+0x394>)
	ADC_MultiModeTypeDef multimode = {0};
 80035ba:	940c      	str	r4, [sp, #48]	; 0x30
	hadc1.Instance = ADC1;
 80035bc:	f8cb 3000 	str.w	r3, [fp]
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035c0:	2303      	movs	r3, #3
	ADC_ChannelConfTypeDef sConfig = {0};
 80035c2:	9438      	str	r4, [sp, #224]	; 0xe0
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035c4:	f8cb 400c 	str.w	r4, [fp, #12]
	hadc1.Init.NbrOfConversion = 1;
 80035c8:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035cc:	f88b 401c 	strb.w	r4, [fp, #28]
	hadc1.Init.OversamplingMode = DISABLE;
 80035d0:	f88b 4038 	strb.w	r4, [fp, #56]	; 0x38
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035d4:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
	ADC_MultiModeTypeDef multimode = {0};
 80035d8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80035dc:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
 80035e0:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 80035e4:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	ADC_ChannelConfTypeDef sConfig = {0};
 80035e8:	e9cd 4432 	strd	r4, r4, [sp, #200]	; 0xc8
 80035ec:	e9cd 4434 	strd	r4, r4, [sp, #208]	; 0xd0
 80035f0:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035f4:	e9cb a901 	strd	sl, r9, [fp, #4]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035f8:	e9cb 4409 	strd	r4, r4, [fp, #36]	; 0x24
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80035fc:	e9cb 740c 	strd	r7, r4, [fp, #48]	; 0x30
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003600:	f001 fef8 	bl	80053f4 <HAL_ADC_Init>
 8003604:	2800      	cmp	r0, #0
 8003606:	f040 8320 	bne.w	8003c4a <main+0x882>
	multimode.Mode = ADC_DUALMODE_INTERL;
 800360a:	2207      	movs	r2, #7
 800360c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003610:	a90a      	add	r1, sp, #40	; 0x28
 8003612:	4658      	mov	r0, fp
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8003614:	960c      	str	r6, [sp, #48]	; 0x30
	multimode.Mode = ADC_DUALMODE_INTERL;
 8003616:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800361a:	f002 f8d1 	bl	80057c0 <HAL_ADCEx_MultiModeConfigChannel>
 800361e:	2800      	cmp	r0, #0
 8003620:	f040 8313 	bne.w	8003c4a <main+0x882>
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003624:	4c4e      	ldr	r4, [pc, #312]	; (8003760 <main+0x398>)
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003626:	a924      	add	r1, sp, #144	; 0x90
 8003628:	4658      	mov	r0, fp
	AnalogWDGConfig.ITMode = ENABLE;
 800362a:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 800362e:	9426      	str	r4, [sp, #152]	; 0x98
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003630:	ed9f cb3b 	vldr	d12, [pc, #236]	; 8003720 <main+0x358>
	AnalogWDGConfig.HighThreshold = 4094;
 8003634:	ed9f bb3c 	vldr	d11, [pc, #240]	; 8003728 <main+0x360>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003638:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
	AnalogWDGConfig.HighThreshold = 4094;
 800363c:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003640:	f001 fbd2 	bl	8004de8 <HAL_ADC_AnalogWDGConfig>
 8003644:	2800      	cmp	r0, #0
 8003646:	f040 8300 	bne.w	8003c4a <main+0x882>
	sConfig.OffsetSignedSaturation = DISABLE;
 800364a:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800364e:	a932      	add	r1, sp, #200	; 0xc8
 8003650:	4658      	mov	r0, fp
	sConfig.Channel = ADC_CHANNEL_5;
 8003652:	ed9f ab37 	vldr	d10, [pc, #220]	; 8003730 <main+0x368>
 8003656:	ed9f 9b38 	vldr	d9, [pc, #224]	; 8003738 <main+0x370>
 800365a:	ed9f 8b39 	vldr	d8, [pc, #228]	; 8003740 <main+0x378>
 800365e:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 8003662:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 8003666:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800366a:	f001 f98d 	bl	8004988 <HAL_ADC_ConfigChannel>
 800366e:	2800      	cmp	r0, #0
 8003670:	f040 82eb 	bne.w	8003c4a <main+0x882>
	hadc2.Instance = ADC2;
 8003674:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8003770 <main+0x3a8>
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003678:	2304      	movs	r3, #4
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800367a:	901e      	str	r0, [sp, #120]	; 0x78
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800367c:	f8cb 3010 	str.w	r3, [fp, #16]
	hadc2.Instance = ADC2;
 8003680:	4b38      	ldr	r3, [pc, #224]	; (8003764 <main+0x39c>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8003682:	902a      	str	r0, [sp, #168]	; 0xa8
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003684:	9023      	str	r0, [sp, #140]	; 0x8c
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003686:	f8cb 000c 	str.w	r0, [fp, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800368a:	f88b 001c 	strb.w	r0, [fp, #28]
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800368e:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003692:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8003696:	f88b 0038 	strb.w	r0, [fp, #56]	; 0x38
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800369a:	f8ab 6014 	strh.w	r6, [fp, #20]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800369e:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
	hadc2.Init.NbrOfConversion = 1;
 80036a2:	f8cb 5018 	str.w	r5, [fp, #24]
	hadc2.Instance = ADC2;
 80036a6:	f8cb 3000 	str.w	r3, [fp]
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80036aa:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 80036ae:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
	ADC_ChannelConfTypeDef sConfig = {0};
 80036b2:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 80036b6:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 80036ba:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036be:	4658      	mov	r0, fp
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80036c0:	e9cb a901 	strd	sl, r9, [fp, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036c4:	f001 fe96 	bl	80053f4 <HAL_ADC_Init>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	f040 82be 	bne.w	8003c4a <main+0x882>
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80036ce:	a91e      	add	r1, sp, #120	; 0x78
 80036d0:	4658      	mov	r0, fp
	AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80036d2:	9420      	str	r4, [sp, #128]	; 0x80
	AnalogWDGConfig.ITMode = ENABLE;
 80036d4:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80036d8:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
	AnalogWDGConfig.HighThreshold = 4094;
 80036dc:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
	if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80036e0:	f001 fb82 	bl	8004de8 <HAL_ADC_AnalogWDGConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2800      	cmp	r0, #0
 80036e8:	f040 82af 	bne.w	8003c4a <main+0x882>
 80036ec:	e042      	b.n	8003774 <main+0x3ac>
 80036ee:	bf00      	nop
	...
 80036f8:	00000c00 	.word	0x00000c00
 80036fc:	00000001 	.word	0x00000001
 8003700:	00000002 	.word	0x00000002
 8003704:	00000000 	.word	0x00000000
 8003708:	00000200 	.word	0x00000200
 800370c:	00000002 	.word	0x00000002
 8003710:	00000000 	.word	0x00000000
 8003714:	00000003 	.word	0x00000003
 8003718:	00000100 	.word	0x00000100
 800371c:	00000001 	.word	0x00000001
 8003720:	7dc00000 	.word	0x7dc00000
 8003724:	00c00000 	.word	0x00c00000
 8003728:	00000ffe 	.word	0x00000ffe
 800372c:	00000001 	.word	0x00000001
 8003730:	14f00020 	.word	0x14f00020
 8003734:	00000006 	.word	0x00000006
 8003738:	00000000 	.word	0x00000000
 800373c:	000007ff 	.word	0x000007ff
 8003740:	00000004 	.word	0x00000004
 8003744:	00000000 	.word	0x00000000
 8003748:	e000ed00 	.word	0xe000ed00
 800374c:	58020400 	.word	0x58020400
 8003750:	58020c00 	.word	0x58020c00
 8003754:	58020000 	.word	0x58020000
 8003758:	58020800 	.word	0x58020800
 800375c:	40022000 	.word	0x40022000
 8003760:	14f00020 	.word	0x14f00020
 8003764:	40022100 	.word	0x40022100
 8003768:	58024400 	.word	0x58024400
 800376c:	2400c37c 	.word	0x2400c37c
 8003770:	2400c3e0 	.word	0x2400c3e0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003774:	a92a      	add	r1, sp, #168	; 0xa8
 8003776:	4658      	mov	r0, fp
	sConfig.OffsetSignedSaturation = DISABLE;
 8003778:	f88d 30c1 	strb.w	r3, [sp, #193]	; 0xc1
	sConfig.Channel = ADC_CHANNEL_5;
 800377c:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8003780:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 8003784:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003788:	f001 f8fe 	bl	8004988 <HAL_ADC_ConfigChannel>
 800378c:	4601      	mov	r1, r0
 800378e:	2800      	cmp	r0, #0
 8003790:	f040 825b 	bne.w	8003c4a <main+0x882>
	DAC_ChannelConfTypeDef sConfig = {0};
 8003794:	2224      	movs	r2, #36	; 0x24
	hdac1.Instance = DAC1;
 8003796:	4cc4      	ldr	r4, [pc, #784]	; (8003aa8 <main+0x6e0>)
	DAC_ChannelConfTypeDef sConfig = {0};
 8003798:	a844      	add	r0, sp, #272	; 0x110
 800379a:	f00b f905 	bl	800e9a8 <memset>
	hdac1.Instance = DAC1;
 800379e:	4bc3      	ldr	r3, [pc, #780]	; (8003aac <main+0x6e4>)
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80037a0:	4620      	mov	r0, r4
	hdac1.Instance = DAC1;
 80037a2:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80037a4:	f002 f8e8 	bl	8005978 <HAL_DAC_Init>
 80037a8:	4602      	mov	r2, r0
 80037aa:	2800      	cmp	r0, #0
 80037ac:	f040 824d 	bne.w	8003c4a <main+0x882>
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80037b0:	2101      	movs	r1, #1
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80037b2:	9048      	str	r0, [sp, #288]	; 0x120
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80037b4:	2000      	movs	r0, #0
 80037b6:	2600      	movs	r6, #0
 80037b8:	2716      	movs	r7, #22
 80037ba:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80037be:	a944      	add	r1, sp, #272	; 0x110
 80037c0:	4620      	mov	r0, r4
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80037c2:	e9cd 6744 	strd	r6, r7, [sp, #272]	; 0x110
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80037c6:	f002 fa17 	bl	8005bf8 <HAL_DAC_ConfigChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2800      	cmp	r0, #0
 80037ce:	f040 823c 	bne.w	8003c4a <main+0x882>
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80037d2:	2210      	movs	r2, #16
 80037d4:	a944      	add	r1, sp, #272	; 0x110
 80037d6:	4620      	mov	r0, r4
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80037d8:	9345      	str	r3, [sp, #276]	; 0x114
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80037da:	f002 fa0d 	bl	8005bf8 <HAL_DAC_ConfigChannel>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f040 8233 	bne.w	8003c4a <main+0x882>
	hlptim2.Instance = LPTIM2;
 80037e4:	48b2      	ldr	r0, [pc, #712]	; (8003ab0 <main+0x6e8>)
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80037e6:	2300      	movs	r3, #0
	hlptim2.Instance = LPTIM2;
 80037e8:	4ab2      	ldr	r2, [pc, #712]	; (8003ab4 <main+0x6ec>)
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80037ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80037ee:	6303      	str	r3, [r0, #48]	; 0x30
	hlptim2.Instance = LPTIM2;
 80037f0:	6002      	str	r2, [r0, #0]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80037f2:	2200      	movs	r2, #0
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80037f4:	6146      	str	r6, [r0, #20]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80037f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80037fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80037fe:	2300      	movs	r3, #0
 8003800:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8003804:	2300      	movs	r3, #0
 8003806:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800380a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 800380e:	f003 fe87 	bl	8007520 <HAL_LPTIM_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2800      	cmp	r0, #0
 8003816:	f040 8218 	bne.w	8003c4a <main+0x882>
	htim6.Instance = TIM6;
 800381a:	4ca7      	ldr	r4, [pc, #668]	; (8003ab8 <main+0x6f0>)
	htim6.Init.Period = 8191;
 800381c:	f641 72ff 	movw	r2, #8191	; 0x1fff
	htim6.Instance = TIM6;
 8003820:	49a6      	ldr	r1, [pc, #664]	; (8003abc <main+0x6f4>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003822:	9017      	str	r0, [sp, #92]	; 0x5c
	htim6.Init.Period = 8191;
 8003824:	e9c4 0202 	strd	r0, r2, [r4, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003828:	2280      	movs	r2, #128	; 0x80
	htim6.Init.Prescaler = 0;
 800382a:	e9c4 1000 	strd	r1, r0, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800382e:	4620      	mov	r0, r4
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003830:	61a2      	str	r2, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003832:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003836:	f006 fcb1 	bl	800a19c <HAL_TIM_Base_Init>
 800383a:	4603      	mov	r3, r0
 800383c:	2800      	cmp	r0, #0
 800383e:	f040 8204 	bne.w	8003c4a <main+0x882>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003842:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003844:	a917      	add	r1, sp, #92	; 0x5c
 8003846:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003848:	9319      	str	r3, [sp, #100]	; 0x64
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800384a:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800384c:	f007 f8e0 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 8003850:	4603      	mov	r3, r0
 8003852:	2800      	cmp	r0, #0
 8003854:	f040 81f9 	bne.w	8003c4a <main+0x882>
	huart3.Instance = USART3;
 8003858:	4c99      	ldr	r4, [pc, #612]	; (8003ac0 <main+0x6f8>)
	huart3.Init.BaudRate = 115200;
 800385a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 800385e:	4999      	ldr	r1, [pc, #612]	; (8003ac4 <main+0x6fc>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8003860:	4620      	mov	r0, r4
	huart3.Init.BaudRate = 115200;
 8003862:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003866:	220c      	movs	r2, #12
	huart3.Init.Parity = UART_PARITY_NONE;
 8003868:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386c:	e9c4 2305 	strd	r2, r3, [r4, #20]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003870:	e9c4 3307 	strd	r3, r3, [r4, #28]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003874:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8003878:	f007 fe5c 	bl	800b534 <HAL_UART_Init>
 800387c:	4601      	mov	r1, r0
 800387e:	2800      	cmp	r0, #0
 8003880:	f040 81e3 	bne.w	8003c4a <main+0x882>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003884:	4620      	mov	r0, r4
 8003886:	f007 fee5 	bl	800b654 <HAL_UARTEx_SetTxFifoThreshold>
 800388a:	4601      	mov	r1, r0
 800388c:	2800      	cmp	r0, #0
 800388e:	f040 81dc 	bne.w	8003c4a <main+0x882>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003892:	4620      	mov	r0, r4
 8003894:	f007 ff20 	bl	800b6d8 <HAL_UARTEx_SetRxFifoThreshold>
 8003898:	2800      	cmp	r0, #0
 800389a:	f040 81d6 	bne.w	8003c4a <main+0x882>
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800389e:	4620      	mov	r0, r4
 80038a0:	f007 feba 	bl	800b618 <HAL_UARTEx_DisableFifoMode>
 80038a4:	4604      	mov	r4, r0
 80038a6:	2800      	cmp	r0, #0
 80038a8:	f040 81cf 	bne.w	8003c4a <main+0x882>
	MX_USB_DEVICE_Init();
 80038ac:	f009 fc12 	bl	800d0d4 <MX_USB_DEVICE_Init>
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80038b0:	2001      	movs	r0, #1
 80038b2:	2102      	movs	r1, #2
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038b4:	2301      	movs	r3, #1
	htim4.Instance = TIM4;
 80038b6:	4d84      	ldr	r5, [pc, #528]	; (8003ac8 <main+0x700>)
 80038b8:	4a84      	ldr	r2, [pc, #528]	; (8003acc <main+0x704>)
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038ba:	933c      	str	r3, [sp, #240]	; 0xf0
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038bc:	9340      	str	r3, [sp, #256]	; 0x100
	sConfig.IC2Filter = 8;
 80038be:	2308      	movs	r3, #8
	TIM_Encoder_InitTypeDef sConfig = {0};
 80038c0:	943d      	str	r4, [sp, #244]	; 0xf4
	sConfig.IC2Filter = 8;
 80038c2:	9342      	str	r3, [sp, #264]	; 0x108
	TIM_Encoder_InitTypeDef sConfig = {0};
 80038c4:	9441      	str	r4, [sp, #260]	; 0x104
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c6:	9414      	str	r4, [sp, #80]	; 0x50
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c8:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ca:	61ac      	str	r4, [r5, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80038cc:	e9cd 013a 	strd	r0, r1, [sp, #232]	; 0xe8
	sConfig.IC1Filter = 8;
 80038d0:	2008      	movs	r0, #8
 80038d2:	2102      	movs	r1, #2
 80038d4:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80038d8:	a93a      	add	r1, sp, #232	; 0xe8
 80038da:	4628      	mov	r0, r5
	htim4.Init.Prescaler = 0;
 80038dc:	e9c5 2400 	strd	r2, r4, [r5]
	htim4.Init.Period = 65535;
 80038e0:	e9c5 4602 	strd	r4, r6, [r5, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80038e8:	f006 fdc2 	bl	800a470 <HAL_TIM_Encoder_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2800      	cmp	r0, #0
 80038f0:	f040 81ab 	bne.w	8003c4a <main+0x882>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038f4:	a914      	add	r1, sp, #80	; 0x50
 80038f6:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f8:	9314      	str	r3, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038fc:	f007 f888 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 8003900:	4603      	mov	r3, r0
 8003902:	2800      	cmp	r0, #0
 8003904:	f040 81a1 	bne.w	8003c4a <main+0x882>
	htim7.Instance = TIM7;
 8003908:	4c71      	ldr	r4, [pc, #452]	; (8003ad0 <main+0x708>)
	htim7.Init.Period = 8192;
 800390a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	htim7.Instance = TIM7;
 800390e:	4971      	ldr	r1, [pc, #452]	; (8003ad4 <main+0x70c>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003910:	9011      	str	r0, [sp, #68]	; 0x44
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003912:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003914:	61a3      	str	r3, [r4, #24]
	htim7.Init.Prescaler = 0;
 8003916:	e9c4 1300 	strd	r1, r3, [r4]
	htim7.Init.Period = 8192;
 800391a:	e9c4 3202 	strd	r3, r2, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800391e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003922:	f006 fc3b 	bl	800a19c <HAL_TIM_Base_Init>
 8003926:	2800      	cmp	r0, #0
 8003928:	f040 818f 	bne.w	8003c4a <main+0x882>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800392c:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800392e:	a911      	add	r1, sp, #68	; 0x44
 8003930:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003932:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003934:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003936:	f007 f86b 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 800393a:	4603      	mov	r3, r0
 800393c:	2800      	cmp	r0, #0
 800393e:	f040 8184 	bne.w	8003c4a <main+0x882>
	htim7.Instance = TIM7;
 8003942:	4964      	ldr	r1, [pc, #400]	; (8003ad4 <main+0x70c>)
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8003944:	f247 5230 	movw	r2, #30000	; 0x7530
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003948:	61a3      	str	r3, [r4, #24]
	htim7.Instance = TIM7;
 800394a:	6021      	str	r1, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 800394c:	60e2      	str	r2, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003952:	4620      	mov	r0, r4
 8003954:	f006 fc22 	bl	800a19c <HAL_TIM_Base_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2800      	cmp	r0, #0
 800395c:	f040 8175 	bne.w	8003c4a <main+0x882>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003960:	a911      	add	r1, sp, #68	; 0x44
 8003962:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003964:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003966:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003968:	f007 f852 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 800396c:	4603      	mov	r3, r0
 800396e:	2800      	cmp	r0, #0
 8003970:	f040 816b 	bne.w	8003c4a <main+0x882>
	htim2.Instance = TIM2;
 8003974:	4c58      	ldr	r4, [pc, #352]	; (8003ad8 <main+0x710>)
 8003976:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	htim2.Init.Period = 10000;
 800397a:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800397e:	901a      	str	r0, [sp, #104]	; 0x68
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003980:	900e      	str	r0, [sp, #56]	; 0x38
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003982:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003984:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003986:	931d      	str	r3, [sp, #116]	; 0x74
	htim2.Init.Prescaler = 0;
 8003988:	e9c4 6000 	strd	r6, r0, [r4]
	htim2.Init.Period = 10000;
 800398c:	e9c4 0202 	strd	r0, r2, [r4, #8]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003990:	4620      	mov	r0, r4
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003992:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003996:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800399a:	f006 fbff 	bl	800a19c <HAL_TIM_Base_Init>
 800399e:	2800      	cmp	r0, #0
 80039a0:	f040 8153 	bne.w	8003c4a <main+0x882>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039a8:	a91a      	add	r1, sp, #104	; 0x68
 80039aa:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ac:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039ae:	f006 fea3 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	f040 8149 	bne.w	8003c4a <main+0x882>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b8:	900e      	str	r0, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039ba:	a90e      	add	r1, sp, #56	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039bc:	9010      	str	r0, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039be:	4620      	mov	r0, r4
 80039c0:	f007 f826 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	f040 8140 	bne.w	8003c4a <main+0x882>
	htim2.Init.Period = 15000;
 80039ca:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ce:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d0:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d2:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 80039d4:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 80039d6:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039da:	4620      	mov	r0, r4
 80039dc:	f006 fbde 	bl	800a19c <HAL_TIM_Base_Init>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	f040 8132 	bne.w	8003c4a <main+0x882>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039e6:	a91a      	add	r1, sp, #104	; 0x68
 80039e8:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ea:	951a      	str	r5, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039ec:	f006 fe84 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2800      	cmp	r0, #0
 80039f4:	f040 8129 	bne.w	8003c4a <main+0x882>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039f8:	a90e      	add	r1, sp, #56	; 0x38
 80039fa:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fc:	930e      	str	r3, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fe:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a00:	f007 f806 	bl	800aa10 <HAL_TIMEx_MasterConfigSynchronization>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	f040 8120 	bne.w	8003c4a <main+0x882>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003a0a:	4b34      	ldr	r3, [pc, #208]	; (8003adc <main+0x714>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	03d9      	lsls	r1, r3, #15
 8003a10:	d426      	bmi.n	8003a60 <main+0x698>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a12:	4832      	ldr	r0, [pc, #200]	; (8003adc <main+0x714>)
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a1a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003a1e:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a22:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a26:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a2a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8003a2e:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a30:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a34:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a36:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8003a3a:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003a3c:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	d1f8      	bne.n	8003a36 <main+0x66e>
    } while(sets-- != 0U);
 8003a44:	3c20      	subs	r4, #32
 8003a46:	f114 0f20 	cmn.w	r4, #32
 8003a4a:	d1f1      	bne.n	8003a30 <main+0x668>
 8003a4c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003a50:	6943      	ldr	r3, [r0, #20]
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a56:	6143      	str	r3, [r0, #20]
 8003a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a5c:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8003a60:	f7ff fc8a 	bl	8003378 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8003a64:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003a68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a6c:	481c      	ldr	r0, [pc, #112]	; (8003ae0 <main+0x718>)
 8003a6e:	f001 fdcf 	bl	8005610 <HAL_ADCEx_Calibration_Start>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	f040 80e9 	bne.w	8003c4a <main+0x882>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8003a78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a80:	4818      	ldr	r0, [pc, #96]	; (8003ae4 <main+0x71c>)
 8003a82:	f001 fdc5 	bl	8005610 <HAL_ADCEx_Calibration_Start>
 8003a86:	4604      	mov	r4, r0
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	f040 80de 	bne.w	8003c4a <main+0x882>
	HAL_Delay(1);
 8003a8e:	2001      	movs	r0, #1
	volume= 0.1;
 8003a90:	4e15      	ldr	r6, [pc, #84]	; (8003ae8 <main+0x720>)
	HAL_Delay(1);
 8003a92:	f000 fda9 	bl	80045e8 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8003a96:	4621      	mov	r1, r4
 8003a98:	480b      	ldr	r0, [pc, #44]	; (8003ac8 <main+0x700>)
	AMindex  = LSBindex = 1;
 8003a9a:	2501      	movs	r5, #1
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8003a9c:	f006 fdcc 	bl	800a638 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <main+0x724>)
	LED_GREEN_ON;
 8003aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aa6:	e023      	b.n	8003af0 <main+0x728>
 8003aa8:	2400c448 	.word	0x2400c448
 8003aac:	40007400 	.word	0x40007400
 8003ab0:	2400c550 	.word	0x2400c550
 8003ab4:	58002400 	.word	0x58002400
 8003ab8:	2400c620 	.word	0x2400c620
 8003abc:	40001000 	.word	0x40001000
 8003ac0:	2400c6b8 	.word	0x2400c6b8
 8003ac4:	40004800 	.word	0x40004800
 8003ac8:	2400c5d4 	.word	0x2400c5d4
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	2400c66c 	.word	0x2400c66c
 8003ad4:	40001400 	.word	0x40001400
 8003ad8:	2400c588 	.word	0x2400c588
 8003adc:	e000ed00 	.word	0xe000ed00
 8003ae0:	2400c37c 	.word	0x2400c37c
 8003ae4:	2400c3e0 	.word	0x2400c3e0
 8003ae8:	3dcccccd 	.word	0x3dcccccd
 8003aec:	2400d90c 	.word	0x2400d90c
 8003af0:	486f      	ldr	r0, [pc, #444]	; (8003cb0 <main+0x8e8>)
 8003af2:	2201      	movs	r2, #1
	volume= 0.1;
 8003af4:	601e      	str	r6, [r3, #0]
	LED_GREEN_ON;
 8003af6:	f003 fd01 	bl	80074fc <HAL_GPIO_WritePin>
	LED_GREEN_OFF;
 8003afa:	4622      	mov	r2, r4
 8003afc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b00:	486b      	ldr	r0, [pc, #428]	; (8003cb0 <main+0x8e8>)
 8003b02:	f003 fcfb 	bl	80074fc <HAL_GPIO_WritePin>
	SetFstep(2);
 8003b06:	2002      	movs	r0, #2
 8003b08:	f7fd fa3a 	bl	8000f80 <SetFstep>
	cwpitch = CWPITCH;
 8003b0c:	4b69      	ldr	r3, [pc, #420]	; (8003cb4 <main+0x8ec>)
 8003b0e:	4a6a      	ldr	r2, [pc, #424]	; (8003cb8 <main+0x8f0>)
	meanavg = 0.f;
 8003b10:	2100      	movs	r1, #0
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8003b12:	4f6a      	ldr	r7, [pc, #424]	; (8003cbc <main+0x8f4>)
	CarrierEnable(0);
 8003b14:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 8003b16:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8003b18:	4a69      	ldr	r2, [pc, #420]	; (8003cc0 <main+0x8f8>)
	os_time = 0;
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <main+0x8fc>)
	meanavg = 0.f;
 8003b1c:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <main+0x900>)
 8003b20:	496a      	ldr	r1, [pc, #424]	; (8003ccc <main+0x904>)
	os_time = 0;
 8003b22:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8003b24:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8003b26:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8003b2a:	4a69      	ldr	r2, [pc, #420]	; (8003cd0 <main+0x908>)
	AGC_decay[Fast] = 0.9995f;
 8003b2c:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <main+0x90c>)
	Muted   = false;
 8003b2e:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8003b30:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <main+0x910>)
 8003b32:	8015      	strh	r5, [r2, #0]
 8003b34:	4a69      	ldr	r2, [pc, #420]	; (8003cdc <main+0x914>)
 8003b36:	8015      	strh	r5, [r2, #0]
	USBindex = CWindex  = 1;
 8003b38:	4a69      	ldr	r2, [pc, #420]	; (8003ce0 <main+0x918>)
 8003b3a:	8015      	strh	r5, [r2, #0]
 8003b3c:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <main+0x91c>)
 8003b3e:	8015      	strh	r5, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8003b40:	4a69      	ldr	r2, [pc, #420]	; (8003ce8 <main+0x920>)
 8003b42:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8003b44:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 8003b48:	4a68      	ldr	r2, [pc, #416]	; (8003cec <main+0x924>)
 8003b4a:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8003b4c:	4a68      	ldr	r2, [pc, #416]	; (8003cf0 <main+0x928>)
 8003b4e:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8003b50:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <main+0x92c>)
 8003b52:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8003b54:	4b68      	ldr	r3, [pc, #416]	; (8003cf8 <main+0x930>)
 8003b56:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <main+0x934>)
 8003b58:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8003b5a:	4b69      	ldr	r3, [pc, #420]	; (8003d00 <main+0x938>)
 8003b5c:	4a69      	ldr	r2, [pc, #420]	; (8003d04 <main+0x93c>)
 8003b5e:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8003b60:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <main+0x940>)
 8003b62:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <main+0x944>)
 8003b64:	601a      	str	r2, [r3, #0]
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <main+0x948>)
 8003b68:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 8003b6a:	f7ff fad9 	bl	8003120 <CarrierEnable>
	TXSwitch(0);
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff fa72 	bl	8003058 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8003b74:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <main+0x94c>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8003b76:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003b78:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003b7c:	4966      	ldr	r1, [pc, #408]	; (8003d18 <main+0x950>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8003b7e:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003b80:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8003b84:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003b86:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003d1c <main+0x954>
	__HAL_RCC_PLL2_DISABLE();
 8003b8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.1;
 8003b8e:	4864      	ldr	r0, [pc, #400]	; (8003d20 <main+0x958>)
	__HAL_RCC_PLL2_DISABLE();
 8003b90:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003b92:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003b94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003b9c:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8003ca8 <main+0x8e0>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003ba0:	6293      	str	r3, [r2, #40]	; 0x28
 8003ba2:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003ba4:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003bb0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8003bb4:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003bb6:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003bb8:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 8003bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	6013      	str	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003bc2:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <main+0x95c>)
	CWThreshold = 0.1;
 8003bc4:	6006      	str	r6, [r0, #0]
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003bc6:	f44f 6600 	mov.w	r6, #2048	; 0x800
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8003bca:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003bce:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8003bd2:	f7fe fa17 	bl	8002004 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003bd6:	4954      	ldr	r1, [pc, #336]	; (8003d28 <main+0x960>)
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4f54      	ldr	r7, [pc, #336]	; (8003d2c <main+0x964>)
 8003bdc:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <main+0x968>)
 8003bde:	4855      	ldr	r0, [pc, #340]	; (8003d34 <main+0x96c>)
 8003be0:	e9cd 1600 	strd	r1, r6, [sp]
 8003be4:	2140      	movs	r1, #64	; 0x40
 8003be6:	f00a f943 	bl	800de70 <arm_fir_decimate_init_f32>
 8003bea:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8003bec:	b100      	cbz	r0, 8003bf0 <main+0x828>
 8003bee:	e7fe      	b.n	8003bee <main+0x826>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8003bf0:	4a51      	ldr	r2, [pc, #324]	; (8003d38 <main+0x970>)
 8003bf2:	2140      	movs	r1, #64	; 0x40
 8003bf4:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <main+0x968>)
 8003bf6:	4851      	ldr	r0, [pc, #324]	; (8003d3c <main+0x974>)
 8003bf8:	e9cd 2600 	strd	r2, r6, [sp]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	f00a f937 	bl	800de70 <arm_fir_decimate_init_f32>
 8003c02:	4604      	mov	r4, r0
 8003c04:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 8003c06:	bb10      	cbnz	r0, 8003c4e <main+0x886>
	Load_Presets();
 8003c08:	f7fc ffe4 	bl	8000bd4 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7fd f8c7 	bl	8000da0 <Tune_Preset>
	keyerState = IDLE;
 8003c12:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <main+0x978>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8003c14:	2710      	movs	r7, #16
	keyer_speed = 15;
 8003c16:	200f      	movs	r0, #15
	keyerState = IDLE;
 8003c18:	701c      	strb	r4, [r3, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 8003c1a:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <main+0x97c>)
 8003c1c:	701f      	strb	r7, [r3, #0]
	keyer_speed = 15;
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	; (8003d48 <main+0x980>)
 8003c20:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 8003c22:	f7fc fd37 	bl	8000694 <loadWPM>
	keyer_mode = 1; //->  iambic
 8003c26:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <main+0x984>)
	txdelay = 10;
 8003c28:	210a      	movs	r1, #10
 8003c2a:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <main+0x988>)
	keyer_mode = 1; //->  iambic
 8003c2c:	701d      	strb	r5, [r3, #0]
	keyer_swap = 0; //->  DI/DAH
 8003c2e:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <main+0x98c>)
	txdelay = 10;
 8003c30:	7011      	strb	r1, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 8003c32:	701c      	strb	r4, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 8003c34:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <main+0x990>)
 8003c36:	601e      	str	r6, [r3, #0]
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8003c38:	f7fe fc66 	bl	8002508 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8003c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c40:	4946      	ldr	r1, [pc, #280]	; (8003d5c <main+0x994>)
 8003c42:	4847      	ldr	r0, [pc, #284]	; (8003d60 <main+0x998>)
 8003c44:	f001 fd36 	bl	80056b4 <HAL_ADCEx_MultiModeStart_DMA>
 8003c48:	b110      	cbz	r0, 8003c50 <main+0x888>
		Error_Handler();
 8003c4a:	f7ff fac7 	bl	80031dc <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8003c4e:	e7fe      	b.n	8003c4e <main+0x886>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8003c50:	4844      	ldr	r0, [pc, #272]	; (8003d64 <main+0x99c>)
 8003c52:	f006 fbb1 	bl	800a3b8 <HAL_TIM_Base_Start_IT>
 8003c56:	4604      	mov	r4, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d1f6      	bne.n	8003c4a <main+0x882>
	HAL_TIM_Base_Start(&htim6);
 8003c5c:	4842      	ldr	r0, [pc, #264]	; (8003d68 <main+0x9a0>)
 8003c5e:	f006 fb53 	bl	800a308 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8003c62:	4842      	ldr	r0, [pc, #264]	; (8003d6c <main+0x9a4>)
 8003c64:	f006 fb50 	bl	800a308 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4841      	ldr	r0, [pc, #260]	; (8003d70 <main+0x9a8>)
 8003c6c:	f001 fe9a 	bl	80059a4 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8003c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c74:	4a3f      	ldr	r2, [pc, #252]	; (8003d74 <main+0x9ac>)
 8003c76:	4621      	mov	r1, r4
 8003c78:	483d      	ldr	r0, [pc, #244]	; (8003d70 <main+0x9a8>)
 8003c7a:	9400      	str	r4, [sp, #0]
 8003c7c:	f001 fec6 	bl	8005a0c <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 fcc9 	bl	8004618 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8003c86:	4639      	mov	r1, r7
 8003c88:	4839      	ldr	r0, [pc, #228]	; (8003d70 <main+0x9a8>)
 8003c8a:	f001 fe8b 	bl	80059a4 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8003c8e:	4623      	mov	r3, r4
 8003c90:	4622      	mov	r2, r4
 8003c92:	4639      	mov	r1, r7
 8003c94:	4836      	ldr	r0, [pc, #216]	; (8003d70 <main+0x9a8>)
 8003c96:	f001 ff45 	bl	8005b24 <HAL_DAC_SetValue>
		UserInput();
 8003c9a:	f7fe fe45 	bl	8002928 <UserInput>
		HAL_Delay(100);
 8003c9e:	2064      	movs	r0, #100	; 0x64
 8003ca0:	f000 fca2 	bl	80045e8 <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 8003ca4:	e7f9      	b.n	8003c9a <main+0x8d2>
 8003ca6:	bf00      	nop
 8003ca8:	446822b9 	.word	0x446822b9
 8003cac:	3feffff3 	.word	0x3feffff3
 8003cb0:	58020400 	.word	0x58020400
 8003cb4:	24009b74 	.word	0x24009b74
 8003cb8:	44228000 	.word	0x44228000
 8003cbc:	240071cc 	.word	0x240071cc
 8003cc0:	2400c758 	.word	0x2400c758
 8003cc4:	2400c77c 	.word	0x2400c77c
 8003cc8:	240071c4 	.word	0x240071c4
 8003ccc:	3f7cac08 	.word	0x3f7cac08
 8003cd0:	240071bc 	.word	0x240071bc
 8003cd4:	24001760 	.word	0x24001760
 8003cd8:	240071b4 	.word	0x240071b4
 8003cdc:	24001768 	.word	0x24001768
 8003ce0:	24001f88 	.word	0x24001f88
 8003ce4:	24007230 	.word	0x24007230
 8003ce8:	24009b70 	.word	0x24009b70
 8003cec:	24009b60 	.word	0x24009b60
 8003cf0:	3f7fdf3b 	.word	0x3f7fdf3b
 8003cf4:	3f7ffcb9 	.word	0x3f7ffcb9
 8003cf8:	240061a0 	.word	0x240061a0
 8003cfc:	001e0002 	.word	0x001e0002
 8003d00:	2400176c 	.word	0x2400176c
 8003d04:	3949539c 	.word	0x3949539c
 8003d08:	3ca3d70a 	.word	0x3ca3d70a
 8003d0c:	2400c780 	.word	0x2400c780
 8003d10:	4af42400 	.word	0x4af42400
 8003d14:	58024400 	.word	0x58024400
 8003d18:	01012e00 	.word	0x01012e00
 8003d1c:	3b800000 	.word	0x3b800000
 8003d20:	24001f84 	.word	0x24001f84
 8003d24:	24001f80 	.word	0x24001f80
 8003d28:	240040a0 	.word	0x240040a0
 8003d2c:	24009b64 	.word	0x24009b64
 8003d30:	2400020c 	.word	0x2400020c
 8003d34:	240071e0 	.word	0x240071e0
 8003d38:	24001fa4 	.word	0x24001fa4
 8003d3c:	240071d4 	.word	0x240071d4
 8003d40:	2400c749 	.word	0x2400c749
 8003d44:	2400c748 	.word	0x2400c748
 8003d48:	2400c74c 	.word	0x2400c74c
 8003d4c:	2400c74a 	.word	0x2400c74a
 8003d50:	2400d909 	.word	0x2400d909
 8003d54:	2400c750 	.word	0x2400c750
 8003d58:	24007228 	.word	0x24007228
 8003d5c:	24009360 	.word	0x24009360
 8003d60:	2400c37c 	.word	0x2400c37c
 8003d64:	2400c66c 	.word	0x2400c66c
 8003d68:	2400c620 	.word	0x2400c620
 8003d6c:	2400c588 	.word	0x2400c588
 8003d70:	2400c448 	.word	0x2400c448
 8003d74:	24001780 	.word	0x24001780

08003d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	4c14      	ldr	r4, [pc, #80]	; (8003dcc <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003d7c:	2102      	movs	r1, #2
{
 8003d7e:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003d80:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003d86:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003d90:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003d94:	400b      	ands	r3, r1
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003d9a:	f001 fd8b 	bl	80058b4 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003d9e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003da2:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 8003da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8003dac:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8003db8:	f000 fc2e 	bl	8004618 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8003dbc:	f000 fc40 	bl	8004640 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003dc0:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc2:	b002      	add	sp, #8
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003dc8:	f000 bc30 	b.w	800462c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8003dcc:	58024400 	.word	0x58024400

08003dd0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003dd0:	494c      	ldr	r1, [pc, #304]	; (8003f04 <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd2:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003dd4:	6802      	ldr	r2, [r0, #0]
{
 8003dd6:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8003dd8:	428a      	cmp	r2, r1
{
 8003dda:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003de0:	9306      	str	r3, [sp, #24]
 8003de2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8003de6:	d029      	beq.n	8003e3c <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003de8:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_ADC_MspInit+0x138>)
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d001      	beq.n	8003df2 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003dee:	b00a      	add	sp, #40	; 0x28
 8003df0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003df2:	4a46      	ldr	r2, [pc, #280]	; (8003f0c <HAL_ADC_MspInit+0x13c>)
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003df8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003dfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003dfc:	d070      	beq.n	8003ee0 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfe:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e00:	2402      	movs	r4, #2
 8003e02:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e04:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0a:	4842      	ldr	r0, [pc, #264]	; (8003f14 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0c:	f042 0202 	orr.w	r2, r2, #2
 8003e10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	9303      	str	r3, [sp, #12]
 8003e1e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e20:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e24:	f003 fa2a 	bl	800727c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2012      	movs	r0, #18
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	f001 fd41 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e32:	2012      	movs	r0, #18
 8003e34:	f001 fd7c 	bl	8005930 <HAL_NVIC_EnableIRQ>
}
 8003e38:	b00a      	add	sp, #40	; 0x28
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003e3c:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <HAL_ADC_MspInit+0x13c>)
 8003e3e:	4604      	mov	r4, r0
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003e44:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003e46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003e48:	d03c      	beq.n	8003ec4 <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4a:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4c:	a904      	add	r1, sp, #16
 8003e4e:	4831      	ldr	r0, [pc, #196]	; (8003f14 <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 8003e54:	4d30      	ldr	r5, [pc, #192]	; (8003f18 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e5e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e6a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6c:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e72:	f003 fa03 	bl	800727c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003e76:	4929      	ldr	r1, [pc, #164]	; (8003f1c <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003e78:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e7a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e7c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e7e:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003e80:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e90:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e9c:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea4:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ea6:	f002 f851 	bl	8005f4c <HAL_DMA_Init>
 8003eaa:	bb38      	cbnz	r0, 8003efc <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003eac:	2200      	movs	r2, #0
 8003eae:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003eb0:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003eb2:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003eb4:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003eb6:	f001 fcfd 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003eba:	2012      	movs	r0, #18
 8003ebc:	f001 fd38 	bl	8005930 <HAL_NVIC_EnableIRQ>
}
 8003ec0:	b00a      	add	sp, #40	; 0x28
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ec4:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_ADC_MspInit+0x140>)
 8003ec6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003eca:	f042 0220 	orr.w	r2, r2, #32
 8003ece:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	9b00      	ldr	r3, [sp, #0]
 8003ede:	e7b4      	b.n	8003e4a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_ADC_MspInit+0x140>)
 8003ee2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003eee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	9b02      	ldr	r3, [sp, #8]
 8003efa:	e780      	b.n	8003dfe <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 8003efc:	f7ff f96e 	bl	80031dc <Error_Handler>
 8003f00:	e7d4      	b.n	8003eac <HAL_ADC_MspInit+0xdc>
 8003f02:	bf00      	nop
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40022100 	.word	0x40022100
 8003f0c:	2400d910 	.word	0x2400d910
 8003f10:	58024400 	.word	0x58024400
 8003f14:	58020400 	.word	0x58020400
 8003f18:	2400c45c 	.word	0x2400c45c
 8003f1c:	40020010 	.word	0x40020010

08003f20 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003f20:	4b2c      	ldr	r3, [pc, #176]	; (8003fd4 <HAL_DAC_MspInit+0xb4>)
 8003f22:	6802      	ldr	r2, [r0, #0]
{
 8003f24:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8003f26:	429a      	cmp	r2, r3
{
 8003f28:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2a:	f04f 0400 	mov.w	r4, #0
 8003f2e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003f32:	9404      	str	r4, [sp, #16]
 8003f34:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8003f38:	d001      	beq.n	8003f3e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003f3a:	b008      	add	sp, #32
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003f3e:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_DAC_MspInit+0xb8>)
 8003f40:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f42:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003f44:	4e25      	ldr	r6, [pc, #148]	; (8003fdc <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003f46:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003f4a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f4e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003f52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003f56:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003f5a:	9200      	str	r2, [sp, #0]
 8003f5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f6a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f76:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f78:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	4819      	ldr	r0, [pc, #100]	; (8003fe0 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f80:	f003 f97c 	bl	800727c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003f84:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003f86:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003f88:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003f8a:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f8c:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003f8e:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f94:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f9a:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa0:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003fa2:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fa4:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fa6:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fae:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003fb0:	f001 ffcc 	bl	8005f4c <HAL_DMA_Init>
 8003fb4:	b958      	cbnz	r0, 8003fce <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003fba:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003fbc:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003fbe:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003fc0:	f001 fc78 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fc4:	2036      	movs	r0, #54	; 0x36
 8003fc6:	f001 fcb3 	bl	8005930 <HAL_NVIC_EnableIRQ>
}
 8003fca:	b008      	add	sp, #32
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003fce:	f7ff f905 	bl	80031dc <Error_Handler>
 8003fd2:	e7f0      	b.n	8003fb6 <HAL_DAC_MspInit+0x96>
 8003fd4:	40007400 	.word	0x40007400
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	2400c4d4 	.word	0x2400c4d4
 8003fe0:	58020000 	.word	0x58020000
 8003fe4:	40020028 	.word	0x40020028

08003fe8 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fea:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8003fec:	6801      	ldr	r1, [r0, #0]
{
 8003fee:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 8003ff0:	4291      	cmp	r1, r2
{
 8003ff2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ff8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ffc:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8003ffe:	d001      	beq.n	8004004 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8004000:	b008      	add	sp, #32
 8004002:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8004006:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004008:	a902      	add	r1, sp, #8
 800400a:	4815      	ldr	r0, [pc, #84]	; (8004060 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800400c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004018:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800401c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004020:	9200      	str	r2, [sp, #0]
 8004022:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004028:	f042 0202 	orr.w	r2, r2, #2
 800402c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8004034:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004036:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800403a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8004050 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004042:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004046:	f003 f919 	bl	800727c <HAL_GPIO_Init>
}
 800404a:	b008      	add	sp, #32
 800404c:	bd10      	pop	{r4, pc}
 800404e:	bf00      	nop
 8004050:	00000400 	.word	0x00000400
 8004054:	00000002 	.word	0x00000002
 8004058:	58002400 	.word	0x58002400
 800405c:	58024400 	.word	0x58024400
 8004060:	58020400 	.word	0x58020400

08004064 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004064:	6803      	ldr	r3, [r0, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800406a:	b510      	push	{r4, lr}
 800406c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800406e:	d007      	beq.n	8004080 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8004070:	4a27      	ldr	r2, [pc, #156]	; (8004110 <HAL_TIM_Base_MspInit+0xac>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01c      	beq.n	80040b0 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004076:	4a27      	ldr	r2, [pc, #156]	; (8004114 <HAL_TIM_Base_MspInit+0xb0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d031      	beq.n	80040e0 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800407c:	b004      	add	sp, #16
 800407e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8004082:	201c      	movs	r0, #28
 8004084:	2200      	movs	r2, #0
 8004086:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004088:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800408c:	f044 0401 	orr.w	r4, r4, #1
 8004090:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8004094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80040a0:	f001 fc08 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040a4:	201c      	movs	r0, #28
}
 80040a6:	b004      	add	sp, #16
 80040a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80040ac:	f001 bc40 	b.w	8005930 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80040b2:	2036      	movs	r0, #54	; 0x36
 80040b4:	2200      	movs	r2, #0
 80040b6:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040b8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80040bc:	f044 0410 	orr.w	r4, r4, #16
 80040c0:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80040c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c8:	f003 0310 	and.w	r3, r3, #16
 80040cc:	9302      	str	r3, [sp, #8]
 80040ce:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80040d0:	f001 fbf0 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040d4:	2036      	movs	r0, #54	; 0x36
}
 80040d6:	b004      	add	sp, #16
 80040d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80040dc:	f001 bc28 	b.w	8005930 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80040e2:	2037      	movs	r0, #55	; 0x37
 80040e4:	2200      	movs	r2, #0
 80040e6:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040e8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80040ec:	f044 0420 	orr.w	r4, r4, #32
 80040f0:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80040f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004100:	f001 fbd8 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004104:	2037      	movs	r0, #55	; 0x37
}
 8004106:	b004      	add	sp, #16
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800410c:	f001 bc10 	b.w	8005930 <HAL_NVIC_EnableIRQ>
 8004110:	40001000 	.word	0x40001000
 8004114:	40001400 	.word	0x40001400
 8004118:	58024400 	.word	0x58024400
 800411c:	00000000 	.word	0x00000000

08004120 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004122:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8004124:	6801      	ldr	r1, [r0, #0]
{
 8004126:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8004128:	4291      	cmp	r1, r2
{
 800412a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004130:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004134:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8004136:	d002      	beq.n	800413e <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004138:	b009      	add	sp, #36	; 0x24
 800413a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004140:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004142:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004144:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8004148:	f042 0204 	orr.w	r2, r2, #4
 800414c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004150:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8004154:	f002 0204 	and.w	r2, r2, #4
 8004158:	9200      	str	r2, [sp, #0]
 800415a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800415c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004160:	f042 0208 	orr.w	r2, r2, #8
 8004164:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004168:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800416a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800416e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004170:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004174:	480a      	ldr	r0, [pc, #40]	; (80041a0 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004176:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800417c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8004190 <HAL_TIM_Encoder_MspInit+0x70>
 8004180:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004184:	f003 f87a 	bl	800727c <HAL_GPIO_Init>
}
 8004188:	b009      	add	sp, #36	; 0x24
 800418a:	f85d fb04 	ldr.w	pc, [sp], #4
 800418e:	bf00      	nop
 8004190:	00003000 	.word	0x00003000
 8004194:	00000002 	.word	0x00000002
 8004198:	40000800 	.word	0x40000800
 800419c:	58024400 	.word	0x58024400
 80041a0:	58020c00 	.word	0x58020c00

080041a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041a4:	b5d0      	push	{r4, r6, r7, lr}
 80041a6:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	2100      	movs	r1, #0
{
 80041aa:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041ac:	22bc      	movs	r2, #188	; 0xbc
 80041ae:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	9108      	str	r1, [sp, #32]
 80041b2:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80041b6:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041ba:	f00a fbf5 	bl	800e9a8 <memset>
  if(huart->Instance==USART3)
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_UART_MspInit+0xd0>)
 80041c0:	6822      	ldr	r2, [r4, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d001      	beq.n	80041ca <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041c6:	b038      	add	sp, #224	; 0xe0
 80041c8:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041ca:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041cc:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d0:	f004 ff08 	bl	8008fe4 <HAL_RCCEx_PeriphCLKConfig>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d149      	bne.n	800426c <HAL_UART_MspInit+0xc8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041de:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041e0:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80041e2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041e6:	2600      	movs	r6, #0
 80041e8:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80041ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041ee:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80041f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80041f6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80041fa:	9201      	str	r2, [sp, #4]
 80041fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004202:	f042 0202 	orr.w	r2, r2, #2
 8004206:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800420a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800420e:	f002 0202 	and.w	r2, r2, #2
 8004212:	9202      	str	r2, [sp, #8]
 8004214:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004216:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800421a:	f042 0208 	orr.w	r2, r2, #8
 800421e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004226:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004228:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800422c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004230:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004232:	a904      	add	r1, sp, #16
 8004234:	4811      	ldr	r0, [pc, #68]	; (800427c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004236:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004238:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423c:	f003 f81e 	bl	800727c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004240:	2302      	movs	r3, #2
 8004242:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004246:	a904      	add	r1, sp, #16
 8004248:	480d      	ldr	r0, [pc, #52]	; (8004280 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800424a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800424c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004250:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004254:	f003 f812 	bl	800727c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004258:	2200      	movs	r2, #0
 800425a:	2101      	movs	r1, #1
 800425c:	2027      	movs	r0, #39	; 0x27
 800425e:	f001 fb29 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004262:	2027      	movs	r0, #39	; 0x27
 8004264:	f001 fb64 	bl	8005930 <HAL_NVIC_EnableIRQ>
}
 8004268:	b038      	add	sp, #224	; 0xe0
 800426a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800426c:	f7fe ffb6 	bl	80031dc <Error_Handler>
 8004270:	e7b2      	b.n	80041d8 <HAL_UART_MspInit+0x34>
 8004272:	bf00      	nop
 8004274:	40004800 	.word	0x40004800
 8004278:	58024400 	.word	0x58024400
 800427c:	58020400 	.word	0x58020400
 8004280:	58020c00 	.word	0x58020c00

08004284 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop

08004288 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <HardFault_Handler>
 800428a:	bf00      	nop

0800428c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800428c:	e7fe      	b.n	800428c <MemManage_Handler>
 800428e:	bf00      	nop

08004290 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <BusFault_Handler>
 8004292:	bf00      	nop

08004294 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004294:	e7fe      	b.n	8004294 <UsageFault_Handler>
 8004296:	bf00      	nop

08004298 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8004298:	f000 b93c 	b.w	8004514 <ADC3_IRQHandler>

0800429c <DebugMon_Handler>:
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <PendSV_Handler>:
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop

080042a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042a4:	f000 b98e 	b.w	80045c4 <HAL_IncTick>

080042a8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042a8:	4801      	ldr	r0, [pc, #4]	; (80042b0 <DMA1_Stream0_IRQHandler+0x8>)
 80042aa:	f002 bc97 	b.w	8006bdc <HAL_DMA_IRQHandler>
 80042ae:	bf00      	nop
 80042b0:	2400c45c 	.word	0x2400c45c

080042b4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80042b4:	4801      	ldr	r0, [pc, #4]	; (80042bc <DMA1_Stream1_IRQHandler+0x8>)
 80042b6:	f002 bc91 	b.w	8006bdc <HAL_DMA_IRQHandler>
 80042ba:	bf00      	nop
 80042bc:	2400c4d4 	.word	0x2400c4d4

080042c0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042c0:	4804      	ldr	r0, [pc, #16]	; (80042d4 <ADC_IRQHandler+0x14>)
{
 80042c2:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 80042c4:	f000 f9dc 	bl	8004680 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80042c8:	4803      	ldr	r0, [pc, #12]	; (80042d8 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80042ce:	f000 b9d7 	b.w	8004680 <HAL_ADC_IRQHandler>
 80042d2:	bf00      	nop
 80042d4:	2400c37c 	.word	0x2400c37c
 80042d8:	2400c3e0 	.word	0x2400c3e0

080042dc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <TIM2_IRQHandler+0x8>)
 80042de:	f006 badf 	b.w	800a8a0 <HAL_TIM_IRQHandler>
 80042e2:	bf00      	nop
 80042e4:	2400c588 	.word	0x2400c588

080042e8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <USART3_IRQHandler+0x8>)
 80042ea:	f006 bc01 	b.w	800aaf0 <HAL_UART_IRQHandler>
 80042ee:	bf00      	nop
 80042f0:	2400c6b8 	.word	0x2400c6b8

080042f4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 80042f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80042f8:	f003 b904 	b.w	8007504 <HAL_GPIO_EXTI_IRQHandler>

080042fc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <TIM6_DAC_IRQHandler+0x14>)
{
 80042fe:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8004300:	f001 fc46 	bl	8005b90 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004304:	4803      	ldr	r0, [pc, #12]	; (8004314 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800430a:	f006 bac9 	b.w	800a8a0 <HAL_TIM_IRQHandler>
 800430e:	bf00      	nop
 8004310:	2400c448 	.word	0x2400c448
 8004314:	2400c620 	.word	0x2400c620

08004318 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <TIM7_IRQHandler+0x8>)
 800431a:	f006 bac1 	b.w	800a8a0 <HAL_TIM_IRQHandler>
 800431e:	bf00      	nop
 8004320:	2400c66c 	.word	0x2400c66c

08004324 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <OTG_FS_IRQHandler+0x8>)
 8004326:	f003 ba25 	b.w	8007774 <HAL_PCD_IRQHandler>
 800432a:	bf00      	nop
 800432c:	2400edf0 	.word	0x2400edf0

08004330 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004330:	2001      	movs	r0, #1
 8004332:	4770      	bx	lr

08004334 <_kill>:

int _kill(int pid, int sig)
{
 8004334:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004336:	f00a faff 	bl	800e938 <__errno>
 800433a:	2216      	movs	r2, #22
 800433c:	4603      	mov	r3, r0
	return -1;
}
 800433e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	bd08      	pop	{r3, pc}
 8004346:	bf00      	nop

08004348 <_exit>:

void _exit (int status)
{
 8004348:	b508      	push	{r3, lr}
	errno = EINVAL;
 800434a:	f00a faf5 	bl	800e938 <__errno>
 800434e:	2316      	movs	r3, #22
 8004350:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004352:	e7fe      	b.n	8004352 <_exit+0xa>

08004354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004354:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004356:	1e16      	subs	r6, r2, #0
 8004358:	dd07      	ble.n	800436a <_read+0x16>
 800435a:	460c      	mov	r4, r1
 800435c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800435e:	f3af 8000 	nop.w
 8004362:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004366:	42a5      	cmp	r5, r4
 8004368:	d1f9      	bne.n	800435e <_read+0xa>
	}

return len;
}
 800436a:	4630      	mov	r0, r6
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	bf00      	nop

08004370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004370:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004372:	1e16      	subs	r6, r2, #0
 8004374:	dd07      	ble.n	8004386 <_write+0x16>
 8004376:	460c      	mov	r4, r1
 8004378:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800437a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800437e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004382:	42ac      	cmp	r4, r5
 8004384:	d1f9      	bne.n	800437a <_write+0xa>
	}
	return len;
}
 8004386:	4630      	mov	r0, r6
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	bf00      	nop

0800438c <_close>:

int _close(int file)
{
	return -1;
}
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop

08004394 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004398:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800439a:	604b      	str	r3, [r1, #4]
}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80043a0:	2001      	movs	r0, #1
 80043a2:	4770      	bx	lr

080043a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80043a4:	2000      	movs	r0, #0
 80043a6:	4770      	bx	lr

080043a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043a8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043aa:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <_sbrk+0x38>)
{
 80043ac:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043ae:	490d      	ldr	r1, [pc, #52]	; (80043e4 <_sbrk+0x3c>)
 80043b0:	4d0d      	ldr	r5, [pc, #52]	; (80043e8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80043b2:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043b4:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80043b6:	b12a      	cbz	r2, 80043c4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043b8:	4413      	add	r3, r2
 80043ba:	428b      	cmp	r3, r1
 80043bc:	d808      	bhi.n	80043d0 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80043be:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80043c0:	6023      	str	r3, [r4, #0]
}
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80043c4:	4809      	ldr	r0, [pc, #36]	; (80043ec <_sbrk+0x44>)
 80043c6:	4602      	mov	r2, r0
 80043c8:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80043ca:	4413      	add	r3, r2
 80043cc:	428b      	cmp	r3, r1
 80043ce:	d9f6      	bls.n	80043be <_sbrk+0x16>
    errno = ENOMEM;
 80043d0:	f00a fab2 	bl	800e938 <__errno>
 80043d4:	230c      	movs	r3, #12
    return (void *)-1;
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80043da:	6003      	str	r3, [r0, #0]
}
 80043dc:	4610      	mov	r0, r2
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	2400d914 	.word	0x2400d914
 80043e4:	24080000 	.word	0x24080000
 80043e8:	00000400 	.word	0x00000400
 80043ec:	2400f428 	.word	0x2400f428

080043f0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043f0:	4929      	ldr	r1, [pc, #164]	; (8004498 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80043f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80043fc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2b06      	cmp	r3, #6
 800440a:	d805      	bhi.n	8004418 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	f023 030f 	bic.w	r3, r3, #15
 8004412:	f043 0307 	orr.w	r3, r3, #7
 8004416:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800441a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800441c:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 800441e:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004420:	481e      	ldr	r0, [pc, #120]	; (800449c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8004422:	f041 0101 	orr.w	r1, r1, #1
 8004426:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004428:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	400a      	ands	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004430:	6803      	ldr	r3, [r0, #0]
 8004432:	071b      	lsls	r3, r3, #28
 8004434:	d505      	bpl.n	8004442 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004436:	6803      	ldr	r3, [r0, #0]
 8004438:	f023 030f 	bic.w	r3, r3, #15
 800443c:	f043 0307 	orr.w	r3, r3, #7
 8004440:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <SystemInit+0xb0>)
 8004444:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004446:	4918      	ldr	r1, [pc, #96]	; (80044a8 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8004448:	4c18      	ldr	r4, [pc, #96]	; (80044ac <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 800444a:	4819      	ldr	r0, [pc, #100]	; (80044b0 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 800444c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800444e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004450:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8004452:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8004454:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8004456:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800445a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800445c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800445e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004460:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004462:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004464:	4c13      	ldr	r4, [pc, #76]	; (80044b4 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8004466:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800446a:	4913      	ldr	r1, [pc, #76]	; (80044b8 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 800446c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800446e:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	4019      	ands	r1, r3
 8004474:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004478:	d203      	bcs.n	8004482 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <SystemInit+0xcc>)
 800447c:	2201      	movs	r2, #1
 800447e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004482:	490f      	ldr	r1, [pc, #60]	; (80044c0 <SystemInit+0xd0>)
 8004484:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <SystemInit+0xa8>)
 800448a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800448e:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004490:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004494:	609a      	str	r2, [r3, #8]
}
 8004496:	4770      	bx	lr
 8004498:	e000ed00 	.word	0xe000ed00
 800449c:	52002000 	.word	0x52002000
 80044a0:	58024400 	.word	0x58024400
 80044a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80044a8:	01010280 	.word	0x01010280
 80044ac:	02020200 	.word	0x02020200
 80044b0:	01ff0000 	.word	0x01ff0000
 80044b4:	5c001000 	.word	0x5c001000
 80044b8:	ffff0000 	.word	0xffff0000
 80044bc:	51008000 	.word	0x51008000
 80044c0:	52004000 	.word	0x52004000

080044c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044fc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044c8:	f7ff ff92 	bl	80043f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044ce:	e003      	b.n	80044d8 <LoopCopyDataInit>

080044d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80044d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044d6:	3104      	adds	r1, #4

080044d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044d8:	480a      	ldr	r0, [pc, #40]	; (8004504 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80044dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044e0:	d3f6      	bcc.n	80044d0 <CopyDataInit>
  ldr  r2, =_sbss
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80044e4:	e002      	b.n	80044ec <LoopFillZerobss>

080044e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044e8:	f842 3b04 	str.w	r3, [r2], #4

080044ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80044ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044f0:	d3f9      	bcc.n	80044e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044f2:	f00a fa27 	bl	800e944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044f6:	f7fe ff67 	bl	80033c8 <main>
  bx  lr    
 80044fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044fc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004500:	0801d078 	.word	0x0801d078
  ldr  r0, =_sdata
 8004504:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004508:	24000668 	.word	0x24000668
  ldr  r2, =_sbss
 800450c:	24000680 	.word	0x24000680
  ldr  r3, = _ebss
 8004510:	2400f428 	.word	0x2400f428

08004514 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004514:	e7fe      	b.n	8004514 <ADC3_IRQHandler>
	...

08004518 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_InitTick+0x40>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b90b      	cbnz	r3, 8004522 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800451e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004520:	4770      	bx	lr
{
 8004522:	b510      	push	{r4, lr}
 8004524:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <HAL_InitTick+0x44>)
 800452c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004530:	6810      	ldr	r0, [r2, #0]
 8004532:	fbb0 f0f3 	udiv	r0, r0, r3
 8004536:	f001 fa09 	bl	800594c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800453a:	2c0f      	cmp	r4, #15
 800453c:	d800      	bhi.n	8004540 <HAL_InitTick+0x28>
 800453e:	b108      	cbz	r0, 8004544 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8004540:	2001      	movs	r0, #1
}
 8004542:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004544:	2200      	movs	r2, #0
 8004546:	4621      	mov	r1, r4
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	f001 f9b2 	bl	80058b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_InitTick+0x48>)
 8004552:	2000      	movs	r0, #0
 8004554:	601c      	str	r4, [r3, #0]
}
 8004556:	bd10      	pop	{r4, pc}
 8004558:	24000314 	.word	0x24000314
 800455c:	2400030c 	.word	0x2400030c
 8004560:	24000318 	.word	0x24000318

08004564 <HAL_Init>:
{
 8004564:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004566:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004568:	4c12      	ldr	r4, [pc, #72]	; (80045b4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800456a:	f001 f991 	bl	8005890 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800456e:	f004 f9ad 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_Init+0x54>)
 8004574:	4911      	ldr	r1, [pc, #68]	; (80045bc <HAL_Init+0x58>)
 8004576:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004578:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800457a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800457e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004582:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004584:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004586:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800458a:	490d      	ldr	r1, [pc, #52]	; (80045c0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800458c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004590:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004592:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8004596:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004598:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800459a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800459c:	f7ff ffbc 	bl	8004518 <HAL_InitTick>
 80045a0:	b110      	cbz	r0, 80045a8 <HAL_Init+0x44>
    return HAL_ERROR;
 80045a2:	2401      	movs	r4, #1
}
 80045a4:	4620      	mov	r0, r4
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	4604      	mov	r4, r0
  HAL_MspInit();
 80045aa:	f7ff fbe5 	bl	8003d78 <HAL_MspInit>
}
 80045ae:	4620      	mov	r0, r4
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	bf00      	nop
 80045b4:	24000310 	.word	0x24000310
 80045b8:	58024400 	.word	0x58024400
 80045bc:	08018acc 	.word	0x08018acc
 80045c0:	2400030c 	.word	0x2400030c

080045c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80045c4:	4a03      	ldr	r2, [pc, #12]	; (80045d4 <HAL_IncTick+0x10>)
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HAL_IncTick+0x14>)
 80045c8:	6811      	ldr	r1, [r2, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	440b      	add	r3, r1
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2400d918 	.word	0x2400d918
 80045d8:	24000314 	.word	0x24000314

080045dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <HAL_GetTick+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2400d918 	.word	0x2400d918

080045e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045ec:	f7ff fff6 	bl	80045dc <HAL_GetTick>
 80045f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f2:	1c63      	adds	r3, r4, #1
 80045f4:	d002      	beq.n	80045fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_Delay+0x20>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fc:	f7ff ffee 	bl	80045dc <HAL_GetTick>
 8004600:	1b43      	subs	r3, r0, r5
 8004602:	42a3      	cmp	r3, r4
 8004604:	d3fa      	bcc.n	80045fc <HAL_Delay+0x14>
  {
  }
}
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	24000314 	.word	0x24000314

0800460c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800460c:	4b01      	ldr	r3, [pc, #4]	; (8004614 <HAL_GetREVID+0x8>)
 800460e:	6818      	ldr	r0, [r3, #0]
}
 8004610:	0c00      	lsrs	r0, r0, #16
 8004612:	4770      	bx	lr
 8004614:	5c001000 	.word	0x5c001000

08004618 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8004618:	4a03      	ldr	r2, [pc, #12]	; (8004628 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 800461a:	6813      	ldr	r3, [r2, #0]
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	4318      	orrs	r0, r3
 8004622:	6010      	str	r0, [r2, #0]
}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	58003c00 	.word	0x58003c00

0800462c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 800462e:	6813      	ldr	r3, [r2, #0]
 8004630:	f023 0302 	bic.w	r3, r3, #2
 8004634:	4318      	orrs	r0, r3
 8004636:	6010      	str	r0, [r2, #0]
}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	58003c00 	.word	0x58003c00

08004640 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8004640:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8004642:	4c0a      	ldr	r4, [pc, #40]	; (800466c <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800464c:	f7ff ffc6 	bl	80045dc <HAL_GetTick>
 8004650:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8004652:	e004      	b.n	800465e <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8004654:	f7ff ffc2 	bl	80045dc <HAL_GetTick>
 8004658:	1b40      	subs	r0, r0, r5
 800465a:	280a      	cmp	r0, #10
 800465c:	d804      	bhi.n	8004668 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	d5f7      	bpl.n	8004654 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004664:	2000      	movs	r0, #0
}
 8004666:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8004668:	2003      	movs	r0, #3
}
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	58003c00 	.word	0x58003c00

08004670 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004670:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004672:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004674:	f7fd fef0 	bl	8002458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004678:	bd08      	pop	{r3, pc}
 800467a:	bf00      	nop

0800467c <HAL_ADC_ErrorCallback>:
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop

08004680 <HAL_ADC_IRQHandler>:
{
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004682:	4a90      	ldr	r2, [pc, #576]	; (80048c4 <HAL_ADC_IRQHandler+0x244>)
{
 8004684:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004686:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004688:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800468a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800468c:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800468e:	f000 8095 	beq.w	80047bc <HAL_ADC_IRQHandler+0x13c>
 8004692:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004696:	4293      	cmp	r3, r2
 8004698:	f000 8090 	beq.w	80047bc <HAL_ADC_IRQHandler+0x13c>
 800469c:	4a8a      	ldr	r2, [pc, #552]	; (80048c8 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800469e:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80046a0:	07a9      	lsls	r1, r5, #30
 80046a2:	f007 071f 	and.w	r7, r7, #31
 80046a6:	d502      	bpl.n	80046ae <HAL_ADC_IRQHandler+0x2e>
 80046a8:	07b2      	lsls	r2, r6, #30
 80046aa:	f100 80aa 	bmi.w	8004802 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046ae:	0769      	lsls	r1, r5, #29
 80046b0:	d579      	bpl.n	80047a6 <HAL_ADC_IRQHandler+0x126>
 80046b2:	0772      	lsls	r2, r6, #29
 80046b4:	d577      	bpl.n	80047a6 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046b8:	06d2      	lsls	r2, r2, #27
 80046ba:	d403      	bmi.n	80046c4 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80046be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c2:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80046ca:	d11c      	bne.n	8004706 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046cc:	4a7f      	ldr	r2, [pc, #508]	; (80048cc <HAL_ADC_IRQHandler+0x24c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	f000 80e8 	beq.w	80048a4 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80046d4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80046d6:	0490      	lsls	r0, r2, #18
 80046d8:	d415      	bmi.n	8004706 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	0711      	lsls	r1, r2, #28
 80046de:	d512      	bpl.n	8004706 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	0752      	lsls	r2, r2, #29
 80046e4:	f100 80f6 	bmi.w	80048d4 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	f022 020c 	bic.w	r2, r2, #12
 80046ee:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f6:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046fa:	04db      	lsls	r3, r3, #19
 80046fc:	d403      	bmi.n	8004706 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8004706:	4620      	mov	r0, r4
 8004708:	f7fd fe88 	bl	800241c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	220c      	movs	r2, #12
 8004710:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004712:	06a8      	lsls	r0, r5, #26
 8004714:	d54d      	bpl.n	80047b2 <HAL_ADC_IRQHandler+0x132>
 8004716:	06b1      	lsls	r1, r6, #26
 8004718:	d54b      	bpl.n	80047b2 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800471a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800471c:	06d1      	lsls	r1, r2, #27
 800471e:	d403      	bmi.n	8004728 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004720:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004722:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004726:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004728:	4968      	ldr	r1, [pc, #416]	; (80048cc <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800472a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800472c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800472e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004730:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8004734:	d073      	beq.n	800481e <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004736:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004738:	b9d2      	cbnz	r2, 8004770 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800473a:	018a      	lsls	r2, r1, #6
 800473c:	f100 80aa 	bmi.w	8004894 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	0650      	lsls	r0, r2, #25
 8004744:	d514      	bpl.n	8004770 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004746:	0289      	lsls	r1, r1, #10
 8004748:	d412      	bmi.n	8004770 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	0712      	lsls	r2, r2, #28
 800474e:	f100 80cc 	bmi.w	80048ea <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004758:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800475a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800475c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004760:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004762:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004764:	05d8      	lsls	r0, r3, #23
 8004766:	d403      	bmi.n	8004770 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004770:	4620      	mov	r0, r4
 8004772:	f001 f81b 	bl	80057ac <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	2260      	movs	r2, #96	; 0x60
 800477a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800477c:	0629      	lsls	r1, r5, #24
 800477e:	d501      	bpl.n	8004784 <HAL_ADC_IRQHandler+0x104>
 8004780:	0632      	lsls	r2, r6, #24
 8004782:	d460      	bmi.n	8004846 <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004784:	05e8      	lsls	r0, r5, #23
 8004786:	d501      	bpl.n	800478c <HAL_ADC_IRQHandler+0x10c>
 8004788:	05f1      	lsls	r1, r6, #23
 800478a:	d467      	bmi.n	800485c <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800478c:	05aa      	lsls	r2, r5, #22
 800478e:	d501      	bpl.n	8004794 <HAL_ADC_IRQHandler+0x114>
 8004790:	05b0      	lsls	r0, r6, #22
 8004792:	d44c      	bmi.n	800482e <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004794:	06e9      	lsls	r1, r5, #27
 8004796:	d501      	bpl.n	800479c <HAL_ADC_IRQHandler+0x11c>
 8004798:	06f2      	lsls	r2, r6, #27
 800479a:	d411      	bmi.n	80047c0 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800479c:	0568      	lsls	r0, r5, #21
 800479e:	d501      	bpl.n	80047a4 <HAL_ADC_IRQHandler+0x124>
 80047a0:	0571      	lsls	r1, r6, #21
 80047a2:	d467      	bmi.n	8004874 <HAL_ADC_IRQHandler+0x1f4>
}
 80047a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047a6:	0728      	lsls	r0, r5, #28
 80047a8:	d5b3      	bpl.n	8004712 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047aa:	0731      	lsls	r1, r6, #28
 80047ac:	d483      	bmi.n	80046b6 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047ae:	06a8      	lsls	r0, r5, #26
 80047b0:	d4b1      	bmi.n	8004716 <HAL_ADC_IRQHandler+0x96>
 80047b2:	066a      	lsls	r2, r5, #25
 80047b4:	d5e2      	bpl.n	800477c <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047b6:	0670      	lsls	r0, r6, #25
 80047b8:	d5e0      	bpl.n	800477c <HAL_ADC_IRQHandler+0xfc>
 80047ba:	e7ae      	b.n	800471a <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047bc:	4a44      	ldr	r2, [pc, #272]	; (80048d0 <HAL_ADC_IRQHandler+0x250>)
 80047be:	e76e      	b.n	800469e <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047c2:	b17a      	cbz	r2, 80047e4 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80047c4:	2f00      	cmp	r7, #0
 80047c6:	d072      	beq.n	80048ae <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047c8:	4a3e      	ldr	r2, [pc, #248]	; (80048c4 <HAL_ADC_IRQHandler+0x244>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f000 808b 	beq.w	80048e6 <HAL_ADC_IRQHandler+0x266>
 80047d0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80047d4:	4293      	cmp	r3, r2
 80047d6:	f000 8086 	beq.w	80048e6 <HAL_ADC_IRQHandler+0x266>
 80047da:	4a3b      	ldr	r2, [pc, #236]	; (80048c8 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80047dc:	6892      	ldr	r2, [r2, #8]
 80047de:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80047e2:	d00b      	beq.n	80047fc <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 80047e6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ec:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80047ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80047f6:	f7ff ff41 	bl	800467c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	e7cc      	b.n	800479c <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004802:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004804:	06d8      	lsls	r0, r3, #27
 8004806:	d403      	bmi.n	8004810 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004808:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800480a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800480e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004810:	4620      	mov	r0, r4
 8004812:	f000 ffd3 	bl	80057bc <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	2202      	movs	r2, #2
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e747      	b.n	80046ae <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800481e:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004820:	2901      	cmp	r1, #1
 8004822:	d988      	bls.n	8004736 <HAL_ADC_IRQHandler+0xb6>
 8004824:	2f00      	cmp	r7, #0
 8004826:	d086      	beq.n	8004736 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004828:	4926      	ldr	r1, [pc, #152]	; (80048c4 <HAL_ADC_IRQHandler+0x244>)
 800482a:	68c9      	ldr	r1, [r1, #12]
 800482c:	e784      	b.n	8004738 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800482e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004830:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004836:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004838:	f000 ffbe 	bl	80057b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e7a6      	b.n	8004794 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004846:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004848:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800484a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004850:	f7fd fe44 	bl	80024dc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	2280      	movs	r2, #128	; 0x80
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e793      	b.n	8004784 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800485c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800485e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004864:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004866:	f000 ffa5 	bl	80057b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e78b      	b.n	800478c <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004874:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004876:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800487a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800487c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004880:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004882:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004884:	f042 0208 	orr.w	r2, r2, #8
 8004888:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800488a:	6019      	str	r1, [r3, #0]
}
 800488c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004890:	f000 bf8e 	b.w	80057b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004894:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004898:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800489c:	4302      	orrs	r2, r0
 800489e:	f47f af67 	bne.w	8004770 <HAL_ADC_IRQHandler+0xf0>
 80048a2:	e74d      	b.n	8004740 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a4:	2f09      	cmp	r7, #9
 80048a6:	d906      	bls.n	80048b6 <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048a8:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <HAL_ADC_IRQHandler+0x244>)
 80048aa:	68d2      	ldr	r2, [r2, #12]
 80048ac:	e713      	b.n	80046d6 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	0797      	lsls	r7, r2, #30
 80048b2:	d0a3      	beq.n	80047fc <HAL_ADC_IRQHandler+0x17c>
 80048b4:	e796      	b.n	80047e4 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048b6:	f240 2221 	movw	r2, #545	; 0x221
 80048ba:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048bc:	07d2      	lsls	r2, r2, #31
 80048be:	f53f af09 	bmi.w	80046d4 <HAL_ADC_IRQHandler+0x54>
 80048c2:	e7f1      	b.n	80048a8 <HAL_ADC_IRQHandler+0x228>
 80048c4:	40022000 	.word	0x40022000
 80048c8:	58026300 	.word	0x58026300
 80048cc:	40022100 	.word	0x40022100
 80048d0:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048d6:	f043 0310 	orr.w	r3, r3, #16
 80048da:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80048e4:	e70f      	b.n	8004706 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <HAL_ADC_IRQHandler+0x27c>)
 80048e8:	e778      	b.n	80047dc <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048ec:	f043 0310 	orr.w	r3, r3, #16
 80048f0:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80048fa:	e739      	b.n	8004770 <HAL_ADC_IRQHandler+0xf0>
 80048fc:	40022300 	.word	0x40022300

08004900 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004900:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004902:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004904:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 800490a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800490c:	d11d      	bne.n	800494a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800490e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004916:	680a      	ldr	r2, [r1, #0]
 8004918:	f012 0f08 	tst.w	r2, #8
 800491c:	68ca      	ldr	r2, [r1, #12]
 800491e:	d01b      	beq.n	8004958 <ADC_DMAConvCplt+0x58>
 8004920:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004924:	d10d      	bne.n	8004942 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004926:	68ca      	ldr	r2, [r1, #12]
 8004928:	0494      	lsls	r4, r2, #18
 800492a:	d40a      	bmi.n	8004942 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800492c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800492e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004936:	04d1      	lsls	r1, r2, #19
 8004938:	d403      	bmi.n	8004942 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800493a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fd6a 	bl	800241c <HAL_ADC_ConvCpltCallback>
}
 8004948:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800494a:	06d2      	lsls	r2, r2, #27
 800494c:	d40a      	bmi.n	8004964 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004958:	0790      	lsls	r0, r2, #30
 800495a:	d0e7      	beq.n	800492c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd fd5d 	bl	800241c <HAL_ADC_ConvCpltCallback>
 8004962:	e7f1      	b.n	8004948 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fe89 	bl	800467c <HAL_ADC_ErrorCallback>
}
 800496a:	bd10      	pop	{r4, pc}

0800496c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800496e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004970:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004978:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004980:	f7ff fe7c 	bl	800467c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004984:	bd08      	pop	{r3, pc}
 8004986:	bf00      	nop

08004988 <HAL_ADC_ConfigChannel>:
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 800498a:	2200      	movs	r2, #0
{
 800498c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800498e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004990:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8004994:	2a01      	cmp	r2, #1
 8004996:	f000 813b 	beq.w	8004c10 <HAL_ADC_ConfigChannel+0x288>
 800499a:	4603      	mov	r3, r0
 800499c:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800499e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80049a0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049a4:	6894      	ldr	r4, [r2, #8]
 80049a6:	0764      	lsls	r4, r4, #29
 80049a8:	f100 8099 	bmi.w	8004ade <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80049ac:	680c      	ldr	r4, [r1, #0]
 80049ae:	f3c4 0513 	ubfx	r5, r4, #0, #20
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	f040 809e 	bne.w	8004af4 <HAL_ADC_ConfigChannel+0x16c>
 80049b8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80049bc:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80049be:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 80049c0:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80049c4:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049c6:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80049ca:	4330      	orrs	r0, r6
 80049cc:	f00c 0c0c 	and.w	ip, ip, #12
 80049d0:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 80049d2:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80049d6:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80049da:	4084      	lsls	r4, r0
 80049dc:	fa0e fe00 	lsl.w	lr, lr, r0
 80049e0:	f85c 0005 	ldr.w	r0, [ip, r5]
 80049e4:	ea20 000e 	bic.w	r0, r0, lr
 80049e8:	4304      	orrs	r4, r0
 80049ea:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ee:	6890      	ldr	r0, [r2, #8]
 80049f0:	0740      	lsls	r0, r0, #29
 80049f2:	d47d      	bmi.n	8004af0 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049f4:	6895      	ldr	r5, [r2, #8]
 80049f6:	f015 0508 	ands.w	r5, r5, #8
 80049fa:	d156      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80049fc:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 80049fe:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a00:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a04:	4fb7      	ldr	r7, [pc, #732]	; (8004ce4 <HAL_ADC_ConfigChannel+0x35c>)
 8004a06:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8004a0a:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a0e:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8004a12:	fa00 fe04 	lsl.w	lr, r0, r4
 8004a16:	6888      	ldr	r0, [r1, #8]
 8004a18:	fa00 f404 	lsl.w	r4, r0, r4
 8004a1c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8004a20:	ea20 000e 	bic.w	r0, r0, lr
 8004a24:	4320      	orrs	r0, r4
 8004a26:	f84c 0006 	str.w	r0, [ip, r6]
 8004a2a:	6838      	ldr	r0, [r7, #0]
 8004a2c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004a30:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004a34:	f000 8095 	beq.w	8004b62 <HAL_ADC_ConfigChannel+0x1da>
 8004a38:	68d0      	ldr	r0, [r2, #12]
 8004a3a:	68d6      	ldr	r6, [r2, #12]
 8004a3c:	06c7      	lsls	r7, r0, #27
 8004a3e:	f100 8107 	bmi.w	8004c50 <HAL_ADC_ConfigChannel+0x2c8>
 8004a42:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004a46:	6948      	ldr	r0, [r1, #20]
 8004a48:	0076      	lsls	r6, r6, #1
 8004a4a:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a4e:	690f      	ldr	r7, [r1, #16]
 8004a50:	2f04      	cmp	r7, #4
 8004a52:	f000 80e0 	beq.w	8004c16 <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a56:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 8004a5a:	6808      	ldr	r0, [r1, #0]
 8004a5c:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8004a60:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004a64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8004a68:	ea40 000c 	orr.w	r0, r0, ip
 8004a6c:	4330      	orrs	r0, r6
 8004a6e:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a72:	7e48      	ldrb	r0, [r1, #25]
 8004a74:	690e      	ldr	r6, [r1, #16]
 8004a76:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004a78:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004a7c:	bf0c      	ite	eq
 8004a7e:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8004a82:	2700      	movne	r7, #0
 8004a84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a88:	4338      	orrs	r0, r7
 8004a8a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a8e:	7e0c      	ldrb	r4, [r1, #24]
 8004a90:	6908      	ldr	r0, [r1, #16]
 8004a92:	2c01      	cmp	r4, #1
 8004a94:	d104      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004a96:	f000 001f 	and.w	r0, r0, #31
 8004a9a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004a9e:	4085      	lsls	r5, r0
 8004aa0:	6910      	ldr	r0, [r2, #16]
 8004aa2:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8004aa6:	4305      	orrs	r5, r0
 8004aa8:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aaa:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aac:	07c4      	lsls	r4, r0, #31
 8004aae:	d414      	bmi.n	8004ada <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ab0:	68ce      	ldr	r6, [r1, #12]
 8004ab2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8004ab4:	f006 0718 	and.w	r7, r6, #24
 8004ab8:	488b      	ldr	r0, [pc, #556]	; (8004ce8 <HAL_ADC_ConfigChannel+0x360>)
 8004aba:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8004abe:	40f8      	lsrs	r0, r7
 8004ac0:	f3c4 0713 	ubfx	r7, r4, #0, #20
 8004ac4:	4020      	ands	r0, r4
 8004ac6:	ea25 0507 	bic.w	r5, r5, r7
 8004aca:	4328      	orrs	r0, r5
 8004acc:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ad0:	4886      	ldr	r0, [pc, #536]	; (8004cec <HAL_ADC_ConfigChannel+0x364>)
 8004ad2:	4286      	cmp	r6, r0
 8004ad4:	d04d      	beq.n	8004b72 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	db15      	blt.n	8004b06 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ada:	2000      	movs	r0, #0
 8004adc:	e003      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ade:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004aec:	b003      	add	sp, #12
 8004aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004af0:	6890      	ldr	r0, [r2, #8]
 8004af2:	e7da      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004af8:	b115      	cbz	r5, 8004b00 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004afa:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004afe:	40a8      	lsls	r0, r5
 8004b00:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004b04:	e75b      	b.n	80049be <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b06:	497a      	ldr	r1, [pc, #488]	; (8004cf0 <HAL_ADC_ConfigChannel+0x368>)
 8004b08:	428a      	cmp	r2, r1
 8004b0a:	f000 80c7 	beq.w	8004c9c <HAL_ADC_ConfigChannel+0x314>
 8004b0e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8004b12:	428a      	cmp	r2, r1
 8004b14:	f000 80c2 	beq.w	8004c9c <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004b18:	4d76      	ldr	r5, [pc, #472]	; (8004cf4 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b1a:	4877      	ldr	r0, [pc, #476]	; (8004cf8 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004b1c:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b1e:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004b20:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b24:	43c0      	mvns	r0, r0
 8004b26:	f000 0001 	and.w	r0, r0, #1
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	f000 80c5 	beq.w	8004cba <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b30:	4872      	ldr	r0, [pc, #456]	; (8004cfc <HAL_ADC_ConfigChannel+0x374>)
 8004b32:	4284      	cmp	r4, r0
 8004b34:	f000 810e 	beq.w	8004d54 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b38:	4871      	ldr	r0, [pc, #452]	; (8004d00 <HAL_ADC_ConfigChannel+0x378>)
 8004b3a:	4284      	cmp	r4, r0
 8004b3c:	f000 812d 	beq.w	8004d9a <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b40:	4870      	ldr	r0, [pc, #448]	; (8004d04 <HAL_ADC_ConfigChannel+0x37c>)
 8004b42:	4284      	cmp	r4, r0
 8004b44:	d1c9      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b46:	0249      	lsls	r1, r1, #9
 8004b48:	d4c7      	bmi.n	8004ada <HAL_ADC_ConfigChannel+0x152>
 8004b4a:	496b      	ldr	r1, [pc, #428]	; (8004cf8 <HAL_ADC_ConfigChannel+0x370>)
 8004b4c:	428a      	cmp	r2, r1
 8004b4e:	d1c4      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004b50:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b52:	2000      	movs	r0, #0
 8004b54:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004b58:	4332      	orrs	r2, r6
 8004b5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004b5e:	60aa      	str	r2, [r5, #8]
}
 8004b60:	e7c1      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b62:	68d6      	ldr	r6, [r2, #12]
 8004b64:	6948      	ldr	r0, [r1, #20]
 8004b66:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004b6a:	0076      	lsls	r6, r6, #1
 8004b6c:	fa00 f606 	lsl.w	r6, r0, r6
 8004b70:	e76d      	b.n	8004a4e <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	d073      	beq.n	8004c5e <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	f000 80c6 	beq.w	8004d0c <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 8004b80:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b84:	3001      	adds	r0, #1
 8004b86:	f000 001f 	and.w	r0, r0, #31
 8004b8a:	2809      	cmp	r0, #9
 8004b8c:	f240 80be 	bls.w	8004d0c <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004b94:	2800      	cmp	r0, #0
 8004b96:	f000 8114 	beq.w	8004dc2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004b9a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	0680      	lsls	r0, r0, #26
 8004ba2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004baa:	2d00      	cmp	r5, #0
 8004bac:	f000 8107 	beq.w	8004dbe <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8004bb0:	fab5 f585 	clz	r5, r5
 8004bb4:	2601      	movs	r6, #1
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	f005 051f 	and.w	r5, r5, #31
 8004bbc:	fa06 f505 	lsl.w	r5, r6, r5
 8004bc0:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	f000 80f7 	beq.w	8004dba <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8004bcc:	fab4 f484 	clz	r4, r4
 8004bd0:	f06f 061d 	mvn.w	r6, #29
 8004bd4:	1c60      	adds	r0, r4, #1
 8004bd6:	f000 041f 	and.w	r4, r0, #31
 8004bda:	2003      	movs	r0, #3
 8004bdc:	fb10 6004 	smlabb	r0, r0, r4, r6
 8004be0:	0500      	lsls	r0, r0, #20
 8004be2:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004be6:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8004be8:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bea:	f102 0514 	add.w	r5, r2, #20
 8004bee:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8004bf0:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bf4:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8004bf8:	fa04 f700 	lsl.w	r7, r4, r0
 8004bfc:	5974      	ldr	r4, [r6, r5]
 8004bfe:	ea24 0407 	bic.w	r4, r4, r7
 8004c02:	688f      	ldr	r7, [r1, #8]
 8004c04:	fa07 f000 	lsl.w	r0, r7, r0
 8004c08:	4320      	orrs	r0, r4
 8004c0a:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c0c:	680c      	ldr	r4, [r1, #0]
}
 8004c0e:	e762      	b.n	8004ad6 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8004c10:	2002      	movs	r0, #2
}
 8004c12:	b003      	add	sp, #12
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c16:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004c18:	680c      	ldr	r4, [r1, #0]
 8004c1a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004c1e:	06a5      	lsls	r5, r4, #26
 8004c20:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8004c24:	d030      	beq.n	8004c88 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c26:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004c28:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004c2c:	4285      	cmp	r5, r0
 8004c2e:	d026      	beq.n	8004c7e <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c30:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004c32:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004c36:	4285      	cmp	r5, r0
 8004c38:	d02b      	beq.n	8004c92 <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c3a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004c3c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004c40:	4285      	cmp	r5, r0
 8004c42:	f47f af32 	bne.w	8004aaa <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c46:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004c48:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c4c:	66d0      	str	r0, [r2, #108]	; 0x6c
 8004c4e:	e72c      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004c50:	0876      	lsrs	r6, r6, #1
 8004c52:	6948      	ldr	r0, [r1, #20]
 8004c54:	f006 0608 	and.w	r6, r6, #8
 8004c58:	fa00 f606 	lsl.w	r6, r0, r6
 8004c5c:	e6f7      	b.n	8004a4e <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c5e:	0ea4      	lsrs	r4, r4, #26
 8004c60:	3401      	adds	r4, #1
 8004c62:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c66:	2e09      	cmp	r6, #9
 8004c68:	d82d      	bhi.n	8004cc6 <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c6a:	06a5      	lsls	r5, r4, #26
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004c72:	40b0      	lsls	r0, r6
 8004c74:	4305      	orrs	r5, r0
 8004c76:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004c7a:	0500      	lsls	r0, r0, #20
 8004c7c:	e7b3      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c7e:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004c80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c84:	6650      	str	r0, [r2, #100]	; 0x64
 8004c86:	e7d3      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c88:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004c8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c8e:	6610      	str	r0, [r2, #96]	; 0x60
 8004c90:	e7c9      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c92:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004c94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c98:	6690      	str	r0, [r2, #104]	; 0x68
 8004c9a:	e7ce      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c9c:	4814      	ldr	r0, [pc, #80]	; (8004cf0 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004c9e:	4d1a      	ldr	r5, [pc, #104]	; (8004d08 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ca0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004ca4:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ca6:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 8004caa:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cac:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004cae:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 8004cb2:	43c0      	mvns	r0, r0
 8004cb4:	f000 0001 	and.w	r0, r0, #1
 8004cb8:	e737      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004cbc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cbe:	f042 0220 	orr.w	r2, r2, #32
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004cc4:	e70f      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cc6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004cca:	06a5      	lsls	r5, r4, #26
 8004ccc:	2401      	movs	r4, #1
 8004cce:	381e      	subs	r0, #30
 8004cd0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004cd4:	fa04 f606 	lsl.w	r6, r4, r6
 8004cd8:	0500      	lsls	r0, r0, #20
 8004cda:	4335      	orrs	r5, r6
 8004cdc:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004ce0:	e781      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x25e>
 8004ce2:	bf00      	nop
 8004ce4:	5c001000 	.word	0x5c001000
 8004ce8:	000fffff 	.word	0x000fffff
 8004cec:	47ff0000 	.word	0x47ff0000
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	58026300 	.word	0x58026300
 8004cf8:	58026000 	.word	0x58026000
 8004cfc:	cb840000 	.word	0xcb840000
 8004d00:	c7520000 	.word	0xc7520000
 8004d04:	cfb80000 	.word	0xcfb80000
 8004d08:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d05e      	beq.n	8004dd2 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8004d14:	fab0 f080 	clz	r0, r0
 8004d18:	3001      	adds	r0, #1
 8004d1a:	0680      	lsls	r0, r0, #26
 8004d1c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	d052      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004d28:	fab5 f585 	clz	r5, r5
 8004d2c:	2601      	movs	r6, #1
 8004d2e:	3501      	adds	r5, #1
 8004d30:	f005 051f 	and.w	r5, r5, #31
 8004d34:	fa06 f505 	lsl.w	r5, r6, r5
 8004d38:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	d042      	beq.n	8004dc8 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8004d42:	fab4 f484 	clz	r4, r4
 8004d46:	3401      	adds	r4, #1
 8004d48:	f004 041f 	and.w	r4, r4, #31
 8004d4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004d50:	0520      	lsls	r0, r4, #20
 8004d52:	e748      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d54:	0208      	lsls	r0, r1, #8
 8004d56:	f53f aec0 	bmi.w	8004ada <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d5a:	491f      	ldr	r1, [pc, #124]	; (8004dd8 <HAL_ADC_ConfigChannel+0x450>)
 8004d5c:	428a      	cmp	r2, r1
 8004d5e:	f47f aebc 	bne.w	8004ada <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_ADC_ConfigChannel+0x454>)
 8004d64:	481e      	ldr	r0, [pc, #120]	; (8004de0 <HAL_ADC_ConfigChannel+0x458>)
 8004d66:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d68:	68a9      	ldr	r1, [r5, #8]
 8004d6a:	0992      	lsrs	r2, r2, #6
 8004d6c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004d70:	fba0 0202 	umull	r0, r2, r0, r2
 8004d74:	4331      	orrs	r1, r6
 8004d76:	0992      	lsrs	r2, r2, #6
 8004d78:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004d7c:	3201      	adds	r2, #1
 8004d7e:	60a9      	str	r1, [r5, #8]
 8004d80:	0052      	lsls	r2, r2, #1
 8004d82:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8004d84:	9a01      	ldr	r2, [sp, #4]
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	f43f aea7 	beq.w	8004ada <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8004d8c:	9a01      	ldr	r2, [sp, #4]
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8004d92:	9a01      	ldr	r2, [sp, #4]
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d1f9      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x404>
 8004d98:	e69f      	b.n	8004ada <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d9a:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8004d9e:	f47f ae9c 	bne.w	8004ada <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004da2:	490d      	ldr	r1, [pc, #52]	; (8004dd8 <HAL_ADC_ConfigChannel+0x450>)
 8004da4:	428a      	cmp	r2, r1
 8004da6:	f47f ae98 	bne.w	8004ada <HAL_ADC_ConfigChannel+0x152>
 8004daa:	68aa      	ldr	r2, [r5, #8]
 8004dac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004db0:	4332      	orrs	r2, r6
 8004db2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004db6:	60aa      	str	r2, [r5, #8]
}
 8004db8:	e695      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x15e>
 8004dba:	480a      	ldr	r0, [pc, #40]	; (8004de4 <HAL_ADC_ConfigChannel+0x45c>)
 8004dbc:	e713      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x25e>
 8004dbe:	2502      	movs	r5, #2
 8004dc0:	e6fe      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x238>
 8004dc2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004dc6:	e6ee      	b.n	8004ba6 <HAL_ADC_ConfigChannel+0x21e>
 8004dc8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004dcc:	e70b      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x25e>
 8004dce:	2502      	movs	r5, #2
 8004dd0:	e7b2      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x3b0>
 8004dd2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004dd6:	e7a3      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x398>
 8004dd8:	58026000 	.word	0x58026000
 8004ddc:	2400030c 	.word	0x2400030c
 8004de0:	053e2d63 	.word	0x053e2d63
 8004de4:	fe500000 	.word	0xfe500000

08004de8 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8004de8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8004dec:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004dee:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8004df0:	2a01      	cmp	r2, #1
 8004df2:	f000 80f3 	beq.w	8004fdc <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004df6:	681a      	ldr	r2, [r3, #0]
{
 8004df8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8004dfa:	2401      	movs	r4, #1
 8004dfc:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e00:	6894      	ldr	r4, [r2, #8]
 8004e02:	0765      	lsls	r5, r4, #29
 8004e04:	d428      	bmi.n	8004e58 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e06:	6894      	ldr	r4, [r2, #8]
 8004e08:	0724      	lsls	r4, r4, #28
 8004e0a:	d426      	bmi.n	8004e5a <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004e0c:	680c      	ldr	r4, [r1, #0]
 8004e0e:	4db8      	ldr	r5, [pc, #736]	; (80050f0 <HAL_ADC_AnalogWDGConfig+0x308>)
 8004e10:	42ac      	cmp	r4, r5
 8004e12:	f000 80a0 	beq.w	8004f56 <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 8004e16:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004e1a:	d02e      	beq.n	8004e7a <HAL_ADC_AnalogWDGConfig+0x92>
 8004e1c:	d827      	bhi.n	8004e6e <HAL_ADC_AnalogWDGConfig+0x86>
 8004e1e:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004e22:	d02a      	beq.n	8004e7a <HAL_ADC_AnalogWDGConfig+0x92>
 8004e24:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004e28:	d027      	beq.n	8004e7a <HAL_ADC_AnalogWDGConfig+0x92>
 8004e2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004e2e:	d024      	beq.n	8004e7a <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004e30:	f004 0001 	and.w	r0, r4, #1
 8004e34:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8004e38:	4eae      	ldr	r6, [pc, #696]	; (80050f4 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004e3a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 8004e3e:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004e40:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8004e44:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8004e48:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8004e4c:	ea24 0406 	bic.w	r4, r4, r6
 8004e50:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004e54:	680c      	ldr	r4, [r1, #0]
}
 8004e56:	e023      	b.n	8004ea0 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e58:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004e5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5e:	f042 0220 	orr.w	r2, r2, #32
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004e6a:	bc70      	pop	{r4, r5, r6}
 8004e6c:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004e6e:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004e72:	d002      	beq.n	8004e7a <HAL_ADC_AnalogWDGConfig+0x92>
 8004e74:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004e78:	d1da      	bne.n	8004e30 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004e7a:	489f      	ldr	r0, [pc, #636]	; (80050f8 <HAL_ADC_AnalogWDGConfig+0x310>)
 8004e7c:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004e7e:	6888      	ldr	r0, [r1, #8]
 8004e80:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004e84:	f000 80cb 	beq.w	800501e <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	f040 80df 	bne.w	800504c <HAL_ADC_AnalogWDGConfig+0x264>
 8004e8e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004e92:	2501      	movs	r5, #1
 8004e94:	4085      	lsls	r5, r0
 8004e96:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8004e9a:	4328      	orrs	r0, r5
 8004e9c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004ea0:	4896      	ldr	r0, [pc, #600]	; (80050fc <HAL_ADC_AnalogWDGConfig+0x314>)
 8004ea2:	6800      	ldr	r0, [r0, #0]
 8004ea4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004ea8:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004eac:	68d0      	ldr	r0, [r2, #12]
 8004eae:	d04b      	beq.n	8004f48 <HAL_ADC_AnalogWDGConfig+0x160>
 8004eb0:	f010 0f10 	tst.w	r0, #16
 8004eb4:	68d0      	ldr	r0, [r2, #12]
 8004eb6:	d047      	beq.n	8004f48 <HAL_ADC_AnalogWDGConfig+0x160>
 8004eb8:	0840      	lsrs	r0, r0, #1
 8004eba:	690d      	ldr	r5, [r1, #16]
 8004ebc:	f000 0008 	and.w	r0, r0, #8
 8004ec0:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004ec4:	4d8d      	ldr	r5, [pc, #564]	; (80050fc <HAL_ADC_AnalogWDGConfig+0x314>)
 8004ec6:	682d      	ldr	r5, [r5, #0]
 8004ec8:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 8004ecc:	68d5      	ldr	r5, [r2, #12]
 8004ece:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8004ed2:	d031      	beq.n	8004f38 <HAL_ADC_AnalogWDGConfig+0x150>
 8004ed4:	f015 0f10 	tst.w	r5, #16
 8004ed8:	68d5      	ldr	r5, [r2, #12]
 8004eda:	d02d      	beq.n	8004f38 <HAL_ADC_AnalogWDGConfig+0x150>
 8004edc:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8004ee0:	694d      	ldr	r5, [r1, #20]
 8004ee2:	f00c 0c08 	and.w	ip, ip, #8
 8004ee6:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004eea:	4d83      	ldr	r5, [pc, #524]	; (80050f8 <HAL_ADC_AnalogWDGConfig+0x310>)
 8004eec:	42ac      	cmp	r4, r5
 8004eee:	d077      	beq.n	8004fe0 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004ef0:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8004ef4:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004ef8:	ea44 040c 	orr.w	r4, r4, ip
 8004efc:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004f00:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8004f04:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004f08:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004f0a:	f44f 7400 	mov.w	r4, #512	; 0x200
 8004f0e:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f12:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004f14:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004f18:	6558      	str	r0, [r3, #84]	; 0x54
 8004f1a:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004f1c:	7b09      	ldrb	r1, [r1, #12]
 8004f1e:	2901      	cmp	r1, #1
 8004f20:	f000 808e 	beq.w	8005040 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004f24:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f26:	2000      	movs	r0, #0
 8004f28:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004f2c:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004f34:	bc70      	pop	{r4, r5, r6}
 8004f36:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004f38:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 8004f3c:	694d      	ldr	r5, [r1, #20]
 8004f3e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004f42:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004f46:	e7d0      	b.n	8004eea <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004f48:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004f4c:	690d      	ldr	r5, [r1, #16]
 8004f4e:	0040      	lsls	r0, r0, #1
 8004f50:	fa05 f000 	lsl.w	r0, r5, r0
 8004f54:	e7b6      	b.n	8004ec4 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 8004f56:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004f5a:	f000 80f0 	beq.w	800513e <HAL_ADC_AnalogWDGConfig+0x356>
 8004f5e:	d82a      	bhi.n	8004fb6 <HAL_ADC_AnalogWDGConfig+0x1ce>
 8004f60:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004f64:	f000 80e0 	beq.w	8005128 <HAL_ADC_AnalogWDGConfig+0x340>
 8004f68:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004f6c:	d118      	bne.n	8004fa0 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 8004f6e:	68d4      	ldr	r4, [r2, #12]
 8004f70:	4863      	ldr	r0, [pc, #396]	; (8005100 <HAL_ADC_AnalogWDGConfig+0x318>)
 8004f72:	4020      	ands	r0, r4
 8004f74:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8004f78:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004f7a:	4860      	ldr	r0, [pc, #384]	; (80050fc <HAL_ADC_AnalogWDGConfig+0x314>)
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004f82:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004f86:	68d0      	ldr	r0, [r2, #12]
 8004f88:	d069      	beq.n	800505e <HAL_ADC_AnalogWDGConfig+0x276>
 8004f8a:	f010 0f10 	tst.w	r0, #16
 8004f8e:	690d      	ldr	r5, [r1, #16]
 8004f90:	68d0      	ldr	r0, [r2, #12]
 8004f92:	f040 8099 	bne.w	80050c8 <HAL_ADC_AnalogWDGConfig+0x2e0>
 8004f96:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004f9a:	0040      	lsls	r0, r0, #1
 8004f9c:	4085      	lsls	r5, r0
 8004f9e:	e063      	b.n	8005068 <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 8004fa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004fa4:	f040 80b4 	bne.w	8005110 <HAL_ADC_AnalogWDGConfig+0x328>
 8004fa8:	68d4      	ldr	r4, [r2, #12]
 8004faa:	4855      	ldr	r0, [pc, #340]	; (8005100 <HAL_ADC_AnalogWDGConfig+0x318>)
 8004fac:	4020      	ands	r0, r4
 8004fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004fb2:	60d0      	str	r0, [r2, #12]
}
 8004fb4:	e7e1      	b.n	8004f7a <HAL_ADC_AnalogWDGConfig+0x192>
 8004fb6:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004fba:	f000 80ae 	beq.w	800511a <HAL_ADC_AnalogWDGConfig+0x332>
 8004fbe:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004fc2:	f040 80a5 	bne.w	8005110 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 8004fc6:	68d5      	ldr	r5, [r2, #12]
 8004fc8:	6888      	ldr	r0, [r1, #8]
 8004fca:	4c4d      	ldr	r4, [pc, #308]	; (8005100 <HAL_ADC_AnalogWDGConfig+0x318>)
 8004fcc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004fd0:	402c      	ands	r4, r5
 8004fd2:	4320      	orrs	r0, r4
 8004fd4:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8004fd8:	60d0      	str	r0, [r2, #12]
}
 8004fda:	e7ce      	b.n	8004f7a <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 8004fdc:	2002      	movs	r0, #2
}
 8004fde:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004fe0:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8004fe4:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004fe8:	ea44 040c 	orr.w	r4, r4, ip
 8004fec:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004ff0:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8004ff4:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004ff8:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004ffa:	f44f 7480 	mov.w	r4, #256	; 0x100
 8004ffe:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005002:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005004:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8005008:	6558      	str	r0, [r3, #84]	; 0x54
 800500a:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 800500c:	7b09      	ldrb	r1, [r1, #12]
 800500e:	2901      	cmp	r1, #1
 8005010:	d078      	beq.n	8005104 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005012:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005014:	2000      	movs	r0, #0
 8005016:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800501a:	6051      	str	r1, [r2, #4]
}
 800501c:	e722      	b.n	8004e64 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800501e:	2d00      	cmp	r5, #0
 8005020:	d05e      	beq.n	80050e0 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005026:	2800      	cmp	r0, #0
 8005028:	f000 8094 	beq.w	8005154 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 800502c:	fab0 f080 	clz	r0, r0
 8005030:	2501      	movs	r5, #1
 8005032:	4085      	lsls	r5, r0
 8005034:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8005038:	4328      	orrs	r0, r5
 800503a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 800503e:	e72f      	b.n	8004ea0 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005040:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005042:	2000      	movs	r0, #0
 8005044:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005048:	6051      	str	r1, [r2, #4]
}
 800504a:	e70b      	b.n	8004e64 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005050:	2800      	cmp	r0, #0
 8005052:	d04a      	beq.n	80050ea <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8005054:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8005058:	2501      	movs	r5, #1
 800505a:	4085      	lsls	r5, r0
 800505c:	e71b      	b.n	8004e96 <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800505e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8005062:	690d      	ldr	r5, [r1, #16]
 8005064:	0040      	lsls	r0, r0, #1
 8005066:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005068:	4824      	ldr	r0, [pc, #144]	; (80050fc <HAL_ADC_AnalogWDGConfig+0x314>)
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005070:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8005074:	68d0      	ldr	r0, [r2, #12]
 8005076:	d003      	beq.n	8005080 <HAL_ADC_AnalogWDGConfig+0x298>
 8005078:	f010 0f10 	tst.w	r0, #16
 800507c:	68d0      	ldr	r0, [r2, #12]
 800507e:	d128      	bne.n	80050d2 <HAL_ADC_AnalogWDGConfig+0x2ea>
 8005080:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8005084:	694c      	ldr	r4, [r1, #20]
 8005086:	0040      	lsls	r0, r0, #1
 8005088:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800508c:	6a14      	ldr	r4, [r2, #32]
 800508e:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8005092:	4304      	orrs	r4, r0
 8005094:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8005096:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8005098:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800509a:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 800509e:	4328      	orrs	r0, r5
 80050a0:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80050a4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80050a8:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050aa:	2000      	movs	r0, #0
 80050ac:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80050ae:	7b09      	ldrb	r1, [r1, #12]
 80050b0:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80050b2:	6851      	ldr	r1, [r2, #4]
 80050b4:	bf0c      	ite	eq
 80050b6:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80050b8:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80050bc:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80050c4:	bc70      	pop	{r4, r5, r6}
 80050c6:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80050c8:	0840      	lsrs	r0, r0, #1
 80050ca:	f000 0008 	and.w	r0, r0, #8
 80050ce:	4085      	lsls	r5, r0
 80050d0:	e7ca      	b.n	8005068 <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80050d2:	0840      	lsrs	r0, r0, #1
 80050d4:	694c      	ldr	r4, [r1, #20]
 80050d6:	f000 0008 	and.w	r0, r0, #8
 80050da:	fa04 f000 	lsl.w	r0, r4, r0
 80050de:	e7d5      	b.n	800508c <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80050e0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80050e4:	2501      	movs	r5, #1
 80050e6:	4085      	lsls	r5, r0
 80050e8:	e7a4      	b.n	8005034 <HAL_ADC_AnalogWDGConfig+0x24c>
 80050ea:	2501      	movs	r5, #1
 80050ec:	e6d3      	b.n	8004e96 <HAL_ADC_AnalogWDGConfig+0xae>
 80050ee:	bf00      	nop
 80050f0:	7dc00000 	.word	0x7dc00000
 80050f4:	7dcfffff 	.word	0x7dcfffff
 80050f8:	001fffff 	.word	0x001fffff
 80050fc:	5c001000 	.word	0x5c001000
 8005100:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005104:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005106:	2000      	movs	r0, #0
 8005108:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800510c:	6051      	str	r1, [r2, #4]
}
 800510e:	e6a9      	b.n	8004e64 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8005110:	68d4      	ldr	r4, [r2, #12]
 8005112:	4811      	ldr	r0, [pc, #68]	; (8005158 <HAL_ADC_AnalogWDGConfig+0x370>)
 8005114:	4020      	ands	r0, r4
 8005116:	60d0      	str	r0, [r2, #12]
}
 8005118:	e72f      	b.n	8004f7a <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800511a:	68d4      	ldr	r4, [r2, #12]
 800511c:	480e      	ldr	r0, [pc, #56]	; (8005158 <HAL_ADC_AnalogWDGConfig+0x370>)
 800511e:	4020      	ands	r0, r4
 8005120:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8005124:	60d0      	str	r0, [r2, #12]
}
 8005126:	e728      	b.n	8004f7a <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8005128:	68d5      	ldr	r5, [r2, #12]
 800512a:	6888      	ldr	r0, [r1, #8]
 800512c:	4c0a      	ldr	r4, [pc, #40]	; (8005158 <HAL_ADC_AnalogWDGConfig+0x370>)
 800512e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005132:	402c      	ands	r4, r5
 8005134:	4320      	orrs	r0, r4
 8005136:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800513a:	60d0      	str	r0, [r2, #12]
}
 800513c:	e71d      	b.n	8004f7a <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800513e:	68d5      	ldr	r5, [r2, #12]
 8005140:	6888      	ldr	r0, [r1, #8]
 8005142:	4c05      	ldr	r4, [pc, #20]	; (8005158 <HAL_ADC_AnalogWDGConfig+0x370>)
 8005144:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005148:	402c      	ands	r4, r5
 800514a:	4320      	orrs	r0, r4
 800514c:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8005150:	60d0      	str	r0, [r2, #12]
}
 8005152:	e712      	b.n	8004f7a <HAL_ADC_AnalogWDGConfig+0x192>
 8005154:	2501      	movs	r5, #1
 8005156:	e76d      	b.n	8005034 <HAL_ADC_AnalogWDGConfig+0x24c>
 8005158:	823fffff 	.word	0x823fffff

0800515c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800515c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	07d1      	lsls	r1, r2, #31
 8005162:	d501      	bpl.n	8005168 <ADC_Enable+0xc>
  return HAL_OK;
 8005164:	2000      	movs	r0, #0
}
 8005166:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <ADC_Enable+0x94>)
 800516c:	4211      	tst	r1, r2
{
 800516e:	b570      	push	{r4, r5, r6, lr}
 8005170:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005172:	d12c      	bne.n	80051ce <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8005174:	6899      	ldr	r1, [r3, #8]
 8005176:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <ADC_Enable+0x98>)
 8005178:	400a      	ands	r2, r1
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005180:	f7ff fa2c 	bl	80045dc <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8005188:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800518a:	4293      	cmp	r3, r2
 800518c:	d028      	beq.n	80051e0 <ADC_Enable+0x84>
 800518e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005192:	4293      	cmp	r3, r2
 8005194:	d024      	beq.n	80051e0 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005196:	4a19      	ldr	r2, [pc, #100]	; (80051fc <ADC_Enable+0xa0>)
 8005198:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	07d6      	lsls	r6, r2, #31
 800519e:	d414      	bmi.n	80051ca <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 80051a0:	4e14      	ldr	r6, [pc, #80]	; (80051f4 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051a2:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051a4:	07d0      	lsls	r0, r2, #31
 80051a6:	d404      	bmi.n	80051b2 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	4032      	ands	r2, r6
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051b2:	f7ff fa13 	bl	80045dc <HAL_GetTick>
 80051b6:	1b43      	subs	r3, r0, r5
 80051b8:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051ba:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051bc:	d902      	bls.n	80051c4 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	07d1      	lsls	r1, r2, #31
 80051c2:	d504      	bpl.n	80051ce <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	07d2      	lsls	r2, r2, #31
 80051c8:	d5eb      	bpl.n	80051a2 <ADC_Enable+0x46>
  return HAL_OK;
 80051ca:	2000      	movs	r0, #0
}
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80051d0:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d2:	f043 0310 	orr.w	r3, r3, #16
 80051d6:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051da:	4303      	orrs	r3, r0
 80051dc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80051de:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80051e0:	4a07      	ldr	r2, [pc, #28]	; (8005200 <ADC_Enable+0xa4>)
 80051e2:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051e4:	06d2      	lsls	r2, r2, #27
 80051e6:	d0d8      	beq.n	800519a <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051e8:	4a06      	ldr	r2, [pc, #24]	; (8005204 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d1d5      	bne.n	800519a <ADC_Enable+0x3e>
 80051ee:	e7ec      	b.n	80051ca <ADC_Enable+0x6e>
 80051f0:	8000003f 	.word	0x8000003f
 80051f4:	7fffffc0 	.word	0x7fffffc0
 80051f8:	40022000 	.word	0x40022000
 80051fc:	58026300 	.word	0x58026300
 8005200:	40022300 	.word	0x40022300
 8005204:	40022100 	.word	0x40022100

08005208 <ADC_Disable>:
{
 8005208:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800520a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	0795      	lsls	r5, r2, #30
 8005210:	d502      	bpl.n	8005218 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005212:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8005214:	2000      	movs	r0, #0
}
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800521a:	07d4      	lsls	r4, r2, #31
 800521c:	d529      	bpl.n	8005272 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	4604      	mov	r4, r0
 8005222:	f002 020d 	and.w	r2, r2, #13
 8005226:	2a01      	cmp	r2, #1
 8005228:	d008      	beq.n	800523c <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800522a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800522c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800522e:	f043 0310 	orr.w	r3, r3, #16
 8005232:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005234:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005236:	4303      	orrs	r3, r0
 8005238:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800523a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800523c:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800523e:	2103      	movs	r1, #3
 8005240:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <ADC_Disable+0x70>)
 8005242:	4002      	ands	r2, r0
 8005244:	f042 0202 	orr.w	r2, r2, #2
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800524c:	f7ff f9c6 	bl	80045dc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005250:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8005252:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	07d9      	lsls	r1, r3, #31
 8005258:	d50b      	bpl.n	8005272 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800525a:	f7ff f9bf 	bl	80045dc <HAL_GetTick>
 800525e:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005260:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005262:	2802      	cmp	r0, #2
 8005264:	d902      	bls.n	800526c <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	07d2      	lsls	r2, r2, #31
 800526a:	d4de      	bmi.n	800522a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	07db      	lsls	r3, r3, #31
 8005270:	d4f3      	bmi.n	800525a <ADC_Disable+0x52>
  return HAL_OK;
 8005272:	2000      	movs	r0, #0
}
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	bf00      	nop
 8005278:	7fffffc0 	.word	0x7fffffc0

0800527c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800527c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800527e:	4a56      	ldr	r2, [pc, #344]	; (80053d8 <ADC_ConfigureBoostMode+0x15c>)
{
 8005280:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005282:	6803      	ldr	r3, [r0, #0]
 8005284:	4293      	cmp	r3, r2
 8005286:	d025      	beq.n	80052d4 <ADC_ConfigureBoostMode+0x58>
 8005288:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800528c:	4293      	cmp	r3, r2
 800528e:	d021      	beq.n	80052d4 <ADC_ConfigureBoostMode+0x58>
 8005290:	4b52      	ldr	r3, [pc, #328]	; (80053dc <ADC_ConfigureBoostMode+0x160>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005298:	d021      	beq.n	80052de <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800529a:	f003 fcdf 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800529e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80052a0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80052a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052a6:	f000 8086 	beq.w	80053b6 <ADC_ConfigureBoostMode+0x13a>
 80052aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052ae:	d06a      	beq.n	8005386 <ADC_ConfigureBoostMode+0x10a>
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b4:	d07f      	beq.n	80053b6 <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052b6:	f7ff f9a9 	bl	800460c <HAL_GetREVID>
 80052ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80052be:	4298      	cmp	r0, r3
 80052c0:	d84a      	bhi.n	8005358 <ADC_ConfigureBoostMode+0xdc>
  {
    if (freq > 20000000UL)
 80052c2:	4b47      	ldr	r3, [pc, #284]	; (80053e0 <ADC_ConfigureBoostMode+0x164>)
 80052c4:	429d      	cmp	r5, r3
 80052c6:	d929      	bls.n	800531c <ADC_ConfigureBoostMode+0xa0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	6893      	ldr	r3, [r2, #8]
 80052cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d0:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80052d4:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <ADC_ConfigureBoostMode+0x168>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80052dc:	d1dd      	bne.n	800529a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80052e2:	f004 fddd 	bl	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80052e6:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052e8:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80052ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052ee:	d06c      	beq.n	80053ca <ADC_ConfigureBoostMode+0x14e>
 80052f0:	d808      	bhi.n	8005304 <ADC_ConfigureBoostMode+0x88>
 80052f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052f6:	d050      	beq.n	800539a <ADC_ConfigureBoostMode+0x11e>
 80052f8:	d916      	bls.n	8005328 <ADC_ConfigureBoostMode+0xac>
 80052fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052fe:	d1da      	bne.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8005300:	0945      	lsrs	r5, r0, #5
        break;
 8005302:	e7d8      	b.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8005304:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005308:	d045      	beq.n	8005396 <ADC_ConfigureBoostMode+0x11a>
 800530a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800530e:	d1d2      	bne.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005310:	f7ff f97c 	bl	800460c <HAL_GetREVID>
 8005314:	f241 0303 	movw	r3, #4099	; 0x1003
 8005318:	4298      	cmp	r0, r3
 800531a:	d840      	bhi.n	800539e <ADC_ConfigureBoostMode+0x122>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	6893      	ldr	r3, [r2, #8]
 8005320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005324:	6093      	str	r3, [r2, #8]
}
 8005326:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8005328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532c:	d006      	beq.n	800533c <ADC_ConfigureBoostMode+0xc0>
 800532e:	d90a      	bls.n	8005346 <ADC_ConfigureBoostMode+0xca>
 8005330:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005334:	d002      	beq.n	800533c <ADC_ConfigureBoostMode+0xc0>
 8005336:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800533a:	d1bc      	bne.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800533c:	0c9b      	lsrs	r3, r3, #18
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8005344:	e7b7      	b.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8005346:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800534a:	d0f7      	beq.n	800533c <ADC_ConfigureBoostMode+0xc0>
 800534c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005350:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8005354:	d0f2      	beq.n	800533c <ADC_ConfigureBoostMode+0xc0>
 8005356:	e7ae      	b.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 8005358:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <ADC_ConfigureBoostMode+0x16c>)
 800535a:	429d      	cmp	r5, r3
 800535c:	d805      	bhi.n	800536a <ADC_ConfigureBoostMode+0xee>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	6893      	ldr	r3, [r2, #8]
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	6093      	str	r3, [r2, #8]
}
 8005368:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <ADC_ConfigureBoostMode+0x170>)
 800536c:	429d      	cmp	r5, r3
 800536e:	d91a      	bls.n	80053a6 <ADC_ConfigureBoostMode+0x12a>
    else if (freq <= 25000000UL)
 8005370:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005372:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8005374:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005376:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8005378:	d829      	bhi.n	80053ce <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800537a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005382:	6093      	str	r3, [r2, #8]
}
 8005384:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8005386:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005388:	f7ff f940 	bl	800460c <HAL_GetREVID>
 800538c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005390:	4298      	cmp	r0, r3
 8005392:	d8e1      	bhi.n	8005358 <ADC_ConfigureBoostMode+0xdc>
 8005394:	e795      	b.n	80052c2 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 8005396:	09c5      	lsrs	r5, r0, #7
        break;
 8005398:	e78d      	b.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 800539a:	0905      	lsrs	r5, r0, #4
        break;
 800539c:	e78b      	b.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 800539e:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <ADC_ConfigureBoostMode+0x16c>)
 80053a0:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80053a4:	d2db      	bcs.n	800535e <ADC_ConfigureBoostMode+0xe2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	6893      	ldr	r3, [r2, #8]
 80053aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b2:	6093      	str	r3, [r2, #8]
}
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80053bc:	f7ff f926 	bl	800460c <HAL_GetREVID>
 80053c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80053c4:	4298      	cmp	r0, r3
 80053c6:	d8c7      	bhi.n	8005358 <ADC_ConfigureBoostMode+0xdc>
 80053c8:	e77b      	b.n	80052c2 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 80053ca:	0985      	lsrs	r5, r0, #6
        break;
 80053cc:	e773      	b.n	80052b6 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80053ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80053d2:	6093      	str	r3, [r2, #8]
}
 80053d4:	bd38      	pop	{r3, r4, r5, pc}
 80053d6:	bf00      	nop
 80053d8:	40022000 	.word	0x40022000
 80053dc:	58026300 	.word	0x58026300
 80053e0:	01312d00 	.word	0x01312d00
 80053e4:	40022300 	.word	0x40022300
 80053e8:	00bebc21 	.word	0x00bebc21
 80053ec:	017d7841 	.word	0x017d7841
 80053f0:	02faf081 	.word	0x02faf081

080053f4 <HAL_ADC_Init>:
{
 80053f4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80053f6:	2300      	movs	r3, #0
{
 80053f8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80053fa:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f000 80d1 	beq.w	80055a4 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005402:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8005404:	4604      	mov	r4, r0
 8005406:	2d00      	cmp	r5, #0
 8005408:	f000 80bb 	beq.w	8005582 <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800540c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800540e:	6893      	ldr	r3, [r2, #8]
 8005410:	009d      	lsls	r5, r3, #2
 8005412:	d503      	bpl.n	800541c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005414:	6891      	ldr	r1, [r2, #8]
 8005416:	4b72      	ldr	r3, [pc, #456]	; (80055e0 <HAL_ADC_Init+0x1ec>)
 8005418:	400b      	ands	r3, r1
 800541a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800541c:	6893      	ldr	r3, [r2, #8]
 800541e:	00d8      	lsls	r0, r3, #3
 8005420:	d416      	bmi.n	8005450 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005422:	4b70      	ldr	r3, [pc, #448]	; (80055e4 <HAL_ADC_Init+0x1f0>)
 8005424:	4970      	ldr	r1, [pc, #448]	; (80055e8 <HAL_ADC_Init+0x1f4>)
 8005426:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005428:	6890      	ldr	r0, [r2, #8]
 800542a:	099b      	lsrs	r3, r3, #6
 800542c:	fba1 1303 	umull	r1, r3, r1, r3
 8005430:	496e      	ldr	r1, [pc, #440]	; (80055ec <HAL_ADC_Init+0x1f8>)
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	4001      	ands	r1, r0
 8005436:	3301      	adds	r3, #1
 8005438:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800543c:	6091      	str	r1, [r2, #8]
 800543e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005440:	9b01      	ldr	r3, [sp, #4]
 8005442:	b12b      	cbz	r3, 8005450 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800544a:	9b01      	ldr	r3, [sp, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f9      	bne.n	8005444 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005450:	6893      	ldr	r3, [r2, #8]
 8005452:	00d9      	lsls	r1, r3, #3
 8005454:	d424      	bmi.n	80054a0 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005456:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005458:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800545a:	f043 0310 	orr.w	r3, r3, #16
 800545e:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005462:	432b      	orrs	r3, r5
 8005464:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005466:	6893      	ldr	r3, [r2, #8]
 8005468:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800546c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800546e:	d11d      	bne.n	80054ac <HAL_ADC_Init+0xb8>
 8005470:	06db      	lsls	r3, r3, #27
 8005472:	d41b      	bmi.n	80054ac <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8005474:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005476:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800547a:	f043 0302 	orr.w	r3, r3, #2
 800547e:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005480:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005482:	07de      	lsls	r6, r3, #31
 8005484:	d428      	bmi.n	80054d8 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005486:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <HAL_ADC_Init+0x1fc>)
 8005488:	429a      	cmp	r2, r3
 800548a:	d017      	beq.n	80054bc <HAL_ADC_Init+0xc8>
 800548c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005490:	429a      	cmp	r2, r3
 8005492:	d013      	beq.n	80054bc <HAL_ADC_Init+0xc8>
 8005494:	4b57      	ldr	r3, [pc, #348]	; (80055f4 <HAL_ADC_Init+0x200>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	07d9      	lsls	r1, r3, #31
 800549a:	d41d      	bmi.n	80054d8 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800549c:	4a56      	ldr	r2, [pc, #344]	; (80055f8 <HAL_ADC_Init+0x204>)
 800549e:	e015      	b.n	80054cc <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054a0:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a2:	2500      	movs	r5, #0
 80054a4:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054aa:	d0e1      	beq.n	8005470 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80054ae:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b0:	f043 0310 	orr.w	r3, r3, #16
}
 80054b4:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b6:	6563      	str	r3, [r4, #84]	; 0x54
}
 80054b8:	b002      	add	sp, #8
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054bc:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <HAL_ADC_Init+0x1fc>)
 80054be:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <HAL_ADC_Init+0x208>)
 80054c0:	6892      	ldr	r2, [r2, #8]
 80054c2:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	07d8      	lsls	r0, r3, #31
 80054c8:	d406      	bmi.n	80054d8 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054ca:	4a4d      	ldr	r2, [pc, #308]	; (8005600 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	6861      	ldr	r1, [r4, #4]
 80054d0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80054d4:	430b      	orrs	r3, r1
 80054d6:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80054d8:	f7ff f898 	bl	800460c <HAL_GetREVID>
 80054dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80054e0:	68a1      	ldr	r1, [r4, #8]
 80054e2:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054e4:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80054e6:	d852      	bhi.n	800558e <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80054e8:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054ec:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80054ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80054f0:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80054f4:	4302      	orrs	r2, r0
 80054f6:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d103      	bne.n	8005504 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80054fc:	6a23      	ldr	r3, [r4, #32]
 80054fe:	3b01      	subs	r3, #1
 8005500:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005506:	b123      	cbz	r3, 8005512 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005508:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800550c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800550e:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005510:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	493b      	ldr	r1, [pc, #236]	; (8005604 <HAL_ADC_Init+0x210>)
 8005516:	68d8      	ldr	r0, [r3, #12]
 8005518:	4001      	ands	r1, r0
 800551a:	430a      	orrs	r2, r1
 800551c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005524:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005526:	d11c      	bne.n	8005562 <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005528:	0712      	lsls	r2, r2, #28
 800552a:	d41a      	bmi.n	8005562 <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800552c:	68d8      	ldr	r0, [r3, #12]
 800552e:	4a36      	ldr	r2, [pc, #216]	; (8005608 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005530:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005532:	4002      	ands	r2, r0
 8005534:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8005538:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800553a:	430a      	orrs	r2, r1
 800553c:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800553e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8005542:	2a01      	cmp	r2, #1
 8005544:	d03a      	beq.n	80055bc <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800554e:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8005550:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005554:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005558:	430a      	orrs	r2, r1
 800555a:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800555c:	f7ff fe8e 	bl	800527c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005560:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005562:	68e2      	ldr	r2, [r4, #12]
 8005564:	2a01      	cmp	r2, #1
 8005566:	d021      	beq.n	80055ac <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800556a:	f022 020f 	bic.w	r2, r2, #15
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005570:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8005572:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005574:	f023 0303 	bic.w	r3, r3, #3
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800557e:	b002      	add	sp, #8
 8005580:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8005582:	f7fe fc25 	bl	8003dd0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005586:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8005588:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800558c:	e73e      	b.n	800540c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800558e:	2910      	cmp	r1, #16
 8005590:	d1aa      	bne.n	80054e8 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005592:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005594:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005596:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800559a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800559c:	430a      	orrs	r2, r1
 800559e:	f042 021c 	orr.w	r2, r2, #28
 80055a2:	e7a9      	b.n	80054f8 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 80055a4:	2501      	movs	r5, #1
}
 80055a6:	4628      	mov	r0, r5
 80055a8:	b002      	add	sp, #8
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80055ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055ae:	69a2      	ldr	r2, [r4, #24]
 80055b0:	f021 010f 	bic.w	r1, r1, #15
 80055b4:	3a01      	subs	r2, #1
 80055b6:	430a      	orrs	r2, r1
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
 80055ba:	e7d9      	b.n	8005570 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80055bc:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 80055c0:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80055c2:	3901      	subs	r1, #1
 80055c4:	6918      	ldr	r0, [r3, #16]
 80055c6:	4332      	orrs	r2, r6
 80055c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055ce:	430a      	orrs	r2, r1
 80055d0:	490e      	ldr	r1, [pc, #56]	; (800560c <HAL_ADC_Init+0x218>)
 80055d2:	4001      	ands	r1, r0
 80055d4:	430a      	orrs	r2, r1
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	611a      	str	r2, [r3, #16]
 80055dc:	e7b7      	b.n	800554e <HAL_ADC_Init+0x15a>
 80055de:	bf00      	nop
 80055e0:	5fffffc0 	.word	0x5fffffc0
 80055e4:	2400030c 	.word	0x2400030c
 80055e8:	053e2d63 	.word	0x053e2d63
 80055ec:	6fffffc0 	.word	0x6fffffc0
 80055f0:	40022000 	.word	0x40022000
 80055f4:	58026000 	.word	0x58026000
 80055f8:	58026300 	.word	0x58026300
 80055fc:	40022100 	.word	0x40022100
 8005600:	40022300 	.word	0x40022300
 8005604:	fff0c003 	.word	0xfff0c003
 8005608:	ffffbffc 	.word	0xffffbffc
 800560c:	fc00f81e 	.word	0xfc00f81e

08005610 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005610:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005612:	2300      	movs	r3, #0
{
 8005614:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005616:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005618:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800561c:	2b01      	cmp	r3, #1
 800561e:	d040      	beq.n	80056a2 <HAL_ADCEx_Calibration_Start+0x92>
 8005620:	2301      	movs	r3, #1
 8005622:	4604      	mov	r4, r0
 8005624:	460e      	mov	r6, r1
 8005626:	4615      	mov	r5, r2
 8005628:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800562c:	f7ff fdec 	bl	8005208 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005630:	b9e8      	cbnz	r0, 800566e <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005632:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8005634:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <HAL_ADCEx_Calibration_Start+0x98>)
 800563a:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 800563e:	4d1b      	ldr	r5, [pc, #108]	; (80056ac <HAL_ADCEx_Calibration_Start+0x9c>)
 8005640:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005642:	4f1b      	ldr	r7, [pc, #108]	; (80056b0 <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	689e      	ldr	r6, [r3, #8]
 800564e:	4035      	ands	r5, r6
 8005650:	4315      	orrs	r5, r2
 8005652:	430d      	orrs	r5, r1
 8005654:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8005658:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	2a00      	cmp	r2, #0
 800565e:	db0f      	blt.n	8005680 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005660:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	6563      	str	r3, [r4, #84]	; 0x54
 800566c:	e003      	b.n	8005676 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005670:	f043 0310 	orr.w	r3, r3, #16
 8005674:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005676:	2300      	movs	r3, #0
 8005678:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800567c:	b003      	add	sp, #12
 800567e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8005680:	9a01      	ldr	r2, [sp, #4]
 8005682:	3201      	adds	r2, #1
 8005684:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005686:	9a01      	ldr	r2, [sp, #4]
 8005688:	42ba      	cmp	r2, r7
 800568a:	d3e6      	bcc.n	800565a <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 800568c:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800568e:	2200      	movs	r2, #0
        return HAL_ERROR;
 8005690:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8005692:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8005696:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800569a:	f043 0310 	orr.w	r3, r3, #16
 800569e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80056a0:	e7ec      	b.n	800567c <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80056a2:	2002      	movs	r0, #2
}
 80056a4:	b003      	add	sp, #12
 80056a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a8:	ffffeefd 	.word	0xffffeefd
 80056ac:	3ffeffc0 	.word	0x3ffeffc0
 80056b0:	25c3f800 	.word	0x25c3f800

080056b4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80056b8:	f8d0 8000 	ldr.w	r8, [r0]
{
 80056bc:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056be:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80056c2:	f015 0504 	ands.w	r5, r5, #4
 80056c6:	d117      	bne.n	80056f8 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056c8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80056cc:	4604      	mov	r4, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d012      	beq.n	80056f8 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056d2:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 80056d4:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80056d8:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056da:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80056dc:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 80056de:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056e2:	d00d      	beq.n	8005700 <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056e4:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80056e6:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 80056e8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ec:	f043 0320 	orr.w	r3, r3, #32
 80056f0:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80056f2:	b01a      	add	sp, #104	; 0x68
 80056f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80056f8:	2002      	movs	r0, #2
}
 80056fa:	b01a      	add	sp, #104	; 0x68
 80056fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005700:	4d22      	ldr	r5, [pc, #136]	; (800578c <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8005702:	460e      	mov	r6, r1
 8005704:	4617      	mov	r7, r2
 8005706:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8005708:	f7ff fd28 	bl	800515c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800570c:	b128      	cbz	r0, 800571a <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 800570e:	2300      	movs	r3, #0
 8005710:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005714:	b01a      	add	sp, #104	; 0x68
 8005716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800571a:	a801      	add	r0, sp, #4
 800571c:	f7ff fd1e 	bl	800515c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005720:	2800      	cmp	r0, #0
 8005722:	d1f4      	bne.n	800570e <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8005724:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005726:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005728:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 800572a:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800572c:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8005730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005734:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8005736:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8005738:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800573a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800573c:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8005740:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8005744:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005746:	d01d      	beq.n	8005784 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8005748:	45ac      	cmp	ip, r5
 800574a:	d01b      	beq.n	8005784 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 800574c:	4914      	ldr	r1, [pc, #80]	; (80057a0 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800574e:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8005750:	463b      	mov	r3, r7
 8005752:	4632      	mov	r2, r6
 8005754:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005756:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 800575a:	2500      	movs	r5, #0
 800575c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005760:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8005764:	f045 0510 	orr.w	r5, r5, #16
 8005768:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800576c:	f000 fe5c 	bl	8006428 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005770:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8005774:	6891      	ldr	r1, [r2, #8]
 8005776:	400b      	ands	r3, r1
 8005778:	f043 0304 	orr.w	r3, r3, #4
 800577c:	6093      	str	r3, [r2, #8]
}
 800577e:	b01a      	add	sp, #104	; 0x68
 8005780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005784:	4908      	ldr	r1, [pc, #32]	; (80057a8 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8005786:	e7e2      	b.n	800574e <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8005788:	40022000 	.word	0x40022000
 800578c:	40022100 	.word	0x40022100
 8005790:	fffff0fe 	.word	0xfffff0fe
 8005794:	08004901 	.word	0x08004901
 8005798:	08004671 	.word	0x08004671
 800579c:	0800496d 	.word	0x0800496d
 80057a0:	58026300 	.word	0x58026300
 80057a4:	7fffffc0 	.word	0x7fffffc0
 80057a8:	40022300 	.word	0x40022300

080057ac <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop

080057b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop

080057b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop

080057bc <HAL_ADCEx_EndOfSamplingCallback>:
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop

080057c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80057c0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057c2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80057c6:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c8:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	d04d      	beq.n	800586a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80057ce:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057d0:	4c2b      	ldr	r4, [pc, #172]	; (8005880 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80057d2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80057d4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057d6:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80057d8:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057da:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80057dc:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80057e0:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057e2:	d008      	beq.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057e4:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057ea:	f041 0120 	orr.w	r1, r1, #32
 80057ee:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80057f0:	b01a      	add	sp, #104	; 0x68
 80057f2:	bcf0      	pop	{r4, r5, r6, r7}
 80057f4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057f6:	4c23      	ldr	r4, [pc, #140]	; (8005884 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80057f8:	68a2      	ldr	r2, [r4, #8]
 80057fa:	0752      	lsls	r2, r2, #29
 80057fc:	d50b      	bpl.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80057fe:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005802:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005804:	f042 0220 	orr.w	r2, r2, #32
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8005810:	b01a      	add	sp, #104	; 0x68
 8005812:	bcf0      	pop	{r4, r5, r6, r7}
 8005814:	4770      	bx	lr
 8005816:	68a8      	ldr	r0, [r5, #8]
 8005818:	f010 0004 	ands.w	r0, r0, #4
 800581c:	d1f0      	bne.n	8005800 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800581e:	b1c6      	cbz	r6, 8005852 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005820:	f8df c068 	ldr.w	ip, [pc, #104]	; 800588c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8005824:	684f      	ldr	r7, [r1, #4]
 8005826:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800582a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800582e:	433a      	orrs	r2, r7
 8005830:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005834:	68ad      	ldr	r5, [r5, #8]
 8005836:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005838:	432a      	orrs	r2, r5
 800583a:	07d4      	lsls	r4, r2, #31
 800583c:	d413      	bmi.n	8005866 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 800583e:	688a      	ldr	r2, [r1, #8]
 8005840:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005844:	4316      	orrs	r6, r2
 8005846:	4a10      	ldr	r2, [pc, #64]	; (8005888 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005848:	400a      	ands	r2, r1
 800584a:	4316      	orrs	r6, r2
 800584c:	f8cc 6008 	str.w	r6, [ip, #8]
 8005850:	e7db      	b.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005852:	490e      	ldr	r1, [pc, #56]	; (800588c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8005854:	688a      	ldr	r2, [r1, #8]
 8005856:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800585a:	608a      	str	r2, [r1, #8]
 800585c:	68a8      	ldr	r0, [r5, #8]
 800585e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005860:	4302      	orrs	r2, r0
 8005862:	07d0      	lsls	r0, r2, #31
 8005864:	d505      	bpl.n	8005872 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005866:	2000      	movs	r0, #0
 8005868:	e7cf      	b.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800586a:	2002      	movs	r0, #2
}
 800586c:	b01a      	add	sp, #104	; 0x68
 800586e:	bcf0      	pop	{r4, r5, r6, r7}
 8005870:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005872:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005874:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005876:	4a04      	ldr	r2, [pc, #16]	; (8005888 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005878:	4022      	ands	r2, r4
 800587a:	608a      	str	r2, [r1, #8]
 800587c:	e7c5      	b.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800587e:	bf00      	nop
 8005880:	40022000 	.word	0x40022000
 8005884:	40022100 	.word	0x40022100
 8005888:	fffff0e0 	.word	0xfffff0e0
 800588c:	40022300 	.word	0x40022300

08005890 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005890:	4906      	ldr	r1, [pc, #24]	; (80058ac <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005892:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005896:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800589a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800589c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058a0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058a4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80058a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80058a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00
 80058b0:	05fa0000 	.word	0x05fa0000

080058b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <HAL_NVIC_SetPriority+0x70>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058bc:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058be:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058c2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058c6:	f1be 0f04 	cmp.w	lr, #4
 80058ca:	bf28      	it	cs
 80058cc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058d0:	f1bc 0f06 	cmp.w	ip, #6
 80058d4:	d91a      	bls.n	800590c <HAL_NVIC_SetPriority+0x58>
 80058d6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058d8:	f04f 3cff 	mov.w	ip, #4294967295
 80058dc:	fa0c fc03 	lsl.w	ip, ip, r3
 80058e0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e4:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80058e8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ea:	fa0c fc0e 	lsl.w	ip, ip, lr
 80058ee:	ea21 010c 	bic.w	r1, r1, ip
 80058f2:	fa01 f103 	lsl.w	r1, r1, r3
 80058f6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80058fa:	db0a      	blt.n	8005912 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fc:	0109      	lsls	r1, r1, #4
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_NVIC_SetPriority+0x74>)
 8005900:	b2c9      	uxtb	r1, r1
 8005902:	4403      	add	r3, r0
 8005904:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005908:	f85d fb04 	ldr.w	pc, [sp], #4
 800590c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800590e:	4613      	mov	r3, r2
 8005910:	e7e8      	b.n	80058e4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005912:	f000 000f 	and.w	r0, r0, #15
 8005916:	0109      	lsls	r1, r1, #4
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <HAL_NVIC_SetPriority+0x78>)
 800591a:	b2c9      	uxtb	r1, r1
 800591c:	4403      	add	r3, r0
 800591e:	7619      	strb	r1, [r3, #24]
 8005920:	f85d fb04 	ldr.w	pc, [sp], #4
 8005924:	e000ed00 	.word	0xe000ed00
 8005928:	e000e100 	.word	0xe000e100
 800592c:	e000ecfc 	.word	0xe000ecfc

08005930 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005930:	2800      	cmp	r0, #0
 8005932:	db07      	blt.n	8005944 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005934:	2301      	movs	r3, #1
 8005936:	f000 011f 	and.w	r1, r0, #31
 800593a:	4a03      	ldr	r2, [pc, #12]	; (8005948 <HAL_NVIC_EnableIRQ+0x18>)
 800593c:	0940      	lsrs	r0, r0, #5
 800593e:	408b      	lsls	r3, r1
 8005940:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	e000e100 	.word	0xe000e100

0800594c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800594c:	1e43      	subs	r3, r0, #1
 800594e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005952:	d20c      	bcs.n	800596e <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005954:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005958:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800595a:	4906      	ldr	r1, [pc, #24]	; (8005974 <HAL_SYSTICK_Config+0x28>)
 800595c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005960:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005962:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005964:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005968:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800596c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800596e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	e000ed00 	.word	0xe000ed00

08005978 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005978:	b188      	cbz	r0, 800599e <HAL_DAC_Init+0x26>
{
 800597a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800597c:	7903      	ldrb	r3, [r0, #4]
 800597e:	4604      	mov	r4, r0
 8005980:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005984:	b13b      	cbz	r3, 8005996 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005986:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005988:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800598a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800598c:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800598e:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005990:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005992:	7122      	strb	r2, [r4, #4]
}
 8005994:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005996:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005998:	f7fe fac2 	bl	8003f20 <HAL_DAC_MspInit>
 800599c:	e7f3      	b.n	8005986 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop

080059a4 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059a4:	7942      	ldrb	r2, [r0, #5]
 80059a6:	2a01      	cmp	r2, #1
 80059a8:	d02e      	beq.n	8005a08 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059aa:	4603      	mov	r3, r0
 80059ac:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80059b0:	6800      	ldr	r0, [r0, #0]
 80059b2:	2201      	movs	r2, #1
{
 80059b4:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 80059b6:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80059ba:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80059be:	6804      	ldr	r4, [r0, #0]
 80059c0:	fa02 f20e 	lsl.w	r2, r2, lr
 80059c4:	4322      	orrs	r2, r4
 80059c6:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80059c8:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 80059ca:	b969      	cbnz	r1, 80059e8 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80059cc:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 80059d0:	4562      	cmp	r2, ip
 80059d2:	d103      	bne.n	80059dc <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80059d4:	6842      	ldr	r2, [r0, #4]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059dc:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80059de:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80059e0:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80059e2:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80059e4:	715a      	strb	r2, [r3, #5]
}
 80059e6:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80059e8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80059ec:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80059f0:	4562      	cmp	r2, ip
 80059f2:	d1f3      	bne.n	80059dc <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80059f4:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 80059f6:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80059f8:	f042 0202 	orr.w	r2, r2, #2
 80059fc:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 80059fe:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005a00:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 8005a02:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8005a04:	715a      	strb	r2, [r3, #5]
}
 8005a06:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8005a08:	2002      	movs	r0, #2
}
 8005a0a:	4770      	bx	lr

08005a0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a10:	7940      	ldrb	r0, [r0, #5]
{
 8005a12:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8005a14:	2801      	cmp	r0, #1
 8005a16:	d053      	beq.n	8005ac0 <HAL_DAC_Start_DMA+0xb4>
 8005a18:	460d      	mov	r5, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005a1e:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 8005a20:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a22:	2202      	movs	r2, #2
 8005a24:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8005a26:	bb3d      	cbnz	r5, 8005a78 <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005a28:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005a2a:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005a2c:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005a2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005b14 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005a32:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005a34:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005a36:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005a3e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8005b18 <HAL_DAC_Start_DMA+0x10c>
 8005a42:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005a46:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8005a48:	d042      	beq.n	8005ad0 <HAL_DAC_Start_DMA+0xc4>
 8005a4a:	2f08      	cmp	r7, #8
 8005a4c:	d03d      	beq.n	8005aca <HAL_DAC_Start_DMA+0xbe>
 8005a4e:	2f00      	cmp	r7, #0
 8005a50:	d038      	beq.n	8005ac4 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005a52:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005a54:	6837      	ldr	r7, [r6, #0]
 8005a56:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8005a5a:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005a5c:	f000 fce4 	bl	8006428 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005a60:	2300      	movs	r3, #0
 8005a62:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8005a64:	bb38      	cbnz	r0, 8005ab6 <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	f005 0110 	and.w	r1, r5, #16
 8005a6c:	2501      	movs	r5, #1
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	408d      	lsls	r5, r1
 8005a72:	4315      	orrs	r5, r2
 8005a74:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8005a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a78:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8005a7a:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005a7e:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005b1c <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005a82:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a84:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005a86:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005a8e:	f8df c090 	ldr.w	ip, [pc, #144]	; 8005b20 <HAL_DAC_Start_DMA+0x114>
 8005a92:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005a96:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8005a98:	d02f      	beq.n	8005afa <HAL_DAC_Start_DMA+0xee>
 8005a9a:	2f08      	cmp	r7, #8
 8005a9c:	d024      	beq.n	8005ae8 <HAL_DAC_Start_DMA+0xdc>
 8005a9e:	b1d7      	cbz	r7, 8005ad6 <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005aa0:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005aa2:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005aa4:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005aa8:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005aaa:	f000 fcbd 	bl	8006428 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d0d7      	beq.n	8005a66 <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	f043 0304 	orr.w	r3, r3, #4
 8005abc:	6123      	str	r3, [r4, #16]
}
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8005ac0:	2002      	movs	r0, #2
}
 8005ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005ac4:	f106 0208 	add.w	r2, r6, #8
        break;
 8005ac8:	e7c4      	b.n	8005a54 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005aca:	f106 0210 	add.w	r2, r6, #16
        break;
 8005ace:	e7c1      	b.n	8005a54 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005ad0:	f106 020c 	add.w	r2, r6, #12
        break;
 8005ad4:	e7be      	b.n	8005a54 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ad6:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005ad8:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005adc:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005ae0:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005ae2:	f000 fca1 	bl	8006428 <HAL_DMA_Start_IT>
 8005ae6:	e7e2      	b.n	8005aae <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ae8:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005aea:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005aee:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005af2:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005af4:	f000 fc98 	bl	8006428 <HAL_DMA_Start_IT>
 8005af8:	e7d9      	b.n	8005aae <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005afa:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005afc:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005b00:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8005b04:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005b06:	f000 fc8f 	bl	8006428 <HAL_DMA_Start_IT>
 8005b0a:	e7d0      	b.n	8005aae <HAL_DAC_Start_DMA+0xa2>
 8005b0c:	08005b55 	.word	0x08005b55
 8005b10:	08005d41 	.word	0x08005d41
 8005b14:	08005b65 	.word	0x08005b65
 8005b18:	08005b75 	.word	0x08005b75
 8005b1c:	08005d55 	.word	0x08005d55
 8005b20:	08005d65 	.word	0x08005d65

08005b24 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005b24:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005b26:	6800      	ldr	r0, [r0, #0]
{
 8005b28:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8005b2a:	2400      	movs	r4, #0
 8005b2c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8005b2e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005b30:	b951      	cbnz	r1, 8005b48 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005b32:	9901      	ldr	r1, [sp, #4]
 8005b34:	3108      	adds	r1, #8
 8005b36:	440a      	add	r2, r1
 8005b38:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005b3a:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8005b3c:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	b003      	add	sp, #12
 8005b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b46:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005b48:	9901      	ldr	r1, [sp, #4]
 8005b4a:	3114      	adds	r1, #20
 8005b4c:	440a      	add	r2, r1
 8005b4e:	9201      	str	r2, [sp, #4]
 8005b50:	e7f3      	b.n	8005b3a <HAL_DAC_SetValue+0x16>
 8005b52:	bf00      	nop

08005b54 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b54:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b56:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7fc fc9b 	bl	8002494 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	7123      	strb	r3, [r4, #4]
}
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005b64:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005b66:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005b68:	f7fc fca6 	bl	80024b8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b6c:	bd08      	pop	{r3, pc}
 8005b6e:	bf00      	nop

08005b70 <HAL_DAC_ErrorCallbackCh1>:
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop

08005b74 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005b74:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b76:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b78:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005b7a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b7c:	f043 0304 	orr.w	r3, r3, #4
 8005b80:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005b82:	f7ff fff5 	bl	8005b70 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b86:	2301      	movs	r3, #1
 8005b88:	7123      	strb	r3, [r4, #4]
}
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <HAL_DAC_DMAUnderrunCallbackCh1>:
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005b90:	6803      	ldr	r3, [r0, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	0491      	lsls	r1, r2, #18
{
 8005b96:	b510      	push	{r4, lr}
 8005b98:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005b9a:	d502      	bpl.n	8005ba2 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9e:	0492      	lsls	r2, r2, #18
 8005ba0:	d418      	bmi.n	8005bd4 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	0091      	lsls	r1, r2, #2
 8005ba6:	d502      	bpl.n	8005bae <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	d400      	bmi.n	8005bb0 <HAL_DAC_IRQHandler+0x20>
}
 8005bae:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bb0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005bb2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005bb6:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bb8:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005bba:	6922      	ldr	r2, [r4, #16]
 8005bbc:	f042 0202 	orr.w	r2, r2, #2
 8005bc0:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005bc2:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8005bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005bce:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005bd0:	f000 b8d4 	b.w	8005d7c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bd4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8005bda:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005bdc:	6902      	ldr	r2, [r0, #16]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005be4:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bec:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005bee:	f7ff ffcd 	bl	8005b8c <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	e7d5      	b.n	8005ba2 <HAL_DAC_IRQHandler+0x12>
 8005bf6:	bf00      	nop

08005bf8 <HAL_DAC_ConfigChannel>:
{
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8005bfc:	7943      	ldrb	r3, [r0, #5]
{
 8005bfe:	460d      	mov	r5, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005c00:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	f000 808d 	beq.w	8005d22 <HAL_DAC_ConfigChannel+0x12a>
 8005c08:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c0a:	2904      	cmp	r1, #4
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8005c10:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c12:	f04f 0302 	mov.w	r3, #2
 8005c16:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c18:	d045      	beq.n	8005ca6 <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005c1a:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8005c1e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005c20:	692b      	ldr	r3, [r5, #16]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d108      	bne.n	8005c38 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005c26:	261f      	movs	r6, #31
    tmpreg1 = hdac->Instance->CCR;
 8005c28:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005c2a:	4096      	lsls	r6, r2
 8005c2c:	ea23 0606 	bic.w	r6, r3, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c30:	696b      	ldr	r3, [r5, #20]
 8005c32:	4093      	lsls	r3, r2
 8005c34:	4333      	orrs	r3, r6
    hdac->Instance->CCR = tmpreg1;
 8005c36:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c38:	2607      	movs	r6, #7
 8005c3a:	fa06 f302 	lsl.w	r3, r6, r2
  tmpreg1 = hdac->Instance->MCR;
 8005c3e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c40:	ea26 0603 	bic.w	r6, r6, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005c44:	e9d5 7302 	ldrd	r7, r3, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d028      	beq.n	8005c9e <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d028      	beq.n	8005ca2 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005c50:	fab7 f387 	clz	r3, r7
 8005c54:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005c56:	433b      	orrs	r3, r7
 8005c58:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c5a:	6869      	ldr	r1, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c5c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c60:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c62:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c64:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c66:	4333      	orrs	r3, r6
  hdac->Instance->MCR = tmpreg1;
 8005c68:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	ea23 0305 	bic.w	r3, r3, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c70:	f640 75fe 	movw	r5, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c74:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c76:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8005c78:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c7a:	ea23 0305 	bic.w	r3, r3, r5
  hdac->State = HAL_DAC_STATE_READY;
 8005c7e:	2501      	movs	r5, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c80:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c82:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8005c84:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c86:	fa01 f302 	lsl.w	r3, r1, r2
 8005c8a:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 8005c8c:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c8e:	ea22 0203 	bic.w	r2, r2, r3
 8005c92:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 8005c94:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8005c96:	7125      	strb	r5, [r4, #4]
  __HAL_UNLOCK(hdac);
 8005c98:	7161      	strb	r1, [r4, #5]
}
 8005c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e7d9      	b.n	8005c56 <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7d7      	b.n	8005c56 <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 8005ca6:	f7fe fc99 	bl	80045dc <HAL_GetTick>
 8005caa:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8005cac:	b9c6      	cbnz	r6, 8005ce0 <HAL_DAC_ConfigChannel+0xe8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005d38 <HAL_DAC_ConfigChannel+0x140>
 8005cb2:	e004      	b.n	8005cbe <HAL_DAC_ConfigChannel+0xc6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cb4:	f7fe fc92 	bl	80045dc <HAL_GetTick>
 8005cb8:	1bc3      	subs	r3, r0, r7
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d834      	bhi.n	8005d28 <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	ea13 0f08 	tst.w	r3, r8
 8005cc6:	d1f5      	bne.n	8005cb4 <HAL_DAC_ConfigChannel+0xbc>
      HAL_Delay(1);
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7fe fc8d 	bl	80045e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cce:	6820      	ldr	r0, [r4, #0]
 8005cd0:	69ab      	ldr	r3, [r5, #24]
 8005cd2:	6403      	str	r3, [r0, #64]	; 0x40
 8005cd4:	e00e      	b.n	8005cf4 <HAL_DAC_ConfigChannel+0xfc>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cd6:	f7fe fc81 	bl	80045dc <HAL_GetTick>
 8005cda:	1bc3      	subs	r3, r0, r7
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d823      	bhi.n	8005d28 <HAL_DAC_ConfigChannel+0x130>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dbf6      	blt.n	8005cd6 <HAL_DAC_ConfigChannel+0xde>
      HAL_Delay(1U);
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7fe fc7d 	bl	80045e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	69ab      	ldr	r3, [r5, #24]
 8005cf2:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005cf4:	f006 0210 	and.w	r2, r6, #16
 8005cf8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005cfc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005cfe:	4091      	lsls	r1, r2
 8005d00:	ea23 0301 	bic.w	r3, r3, r1
 8005d04:	69e9      	ldr	r1, [r5, #28]
 8005d06:	4091      	lsls	r1, r2
 8005d08:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d0a:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d0c:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d0e:	4091      	lsls	r1, r2
 8005d10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d12:	ea23 0301 	bic.w	r3, r3, r1
 8005d16:	6a29      	ldr	r1, [r5, #32]
 8005d18:	4091      	lsls	r1, r2
 8005d1a:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d1c:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d1e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005d20:	e77e      	b.n	8005c20 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8005d22:	2002      	movs	r0, #2
}
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d28:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d2a:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d2c:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8005d30:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005d32:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005d34:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 8005d36:	e7b0      	b.n	8005c9a <HAL_DAC_ConfigChannel+0xa2>
 8005d38:	20008000 	.word	0x20008000

08005d3c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop

08005d40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005d40:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d42:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff fff9 	bl	8005d3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	7123      	strb	r3, [r4, #4]
}
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005d54:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005d56:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005d58:	f7ff fffa 	bl	8005d50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005d5c:	bd08      	pop	{r3, pc}
 8005d5e:	bf00      	nop

08005d60 <HAL_DACEx_ErrorCallbackCh2>:
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop

08005d64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005d64:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d66:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d68:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005d6a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d6c:	f043 0304 	orr.w	r3, r3, #4
 8005d70:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005d72:	f7ff fff5 	bl	8005d60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d76:	2301      	movs	r3, #1
 8005d78:	7123      	strb	r3, [r4, #4]
}
 8005d7a:	bd10      	pop	{r4, pc}

08005d7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop

08005d80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d80:	6802      	ldr	r2, [r0, #0]
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <DMA_CalcBaseAndBitshift+0xd4>)
 8005d84:	4934      	ldr	r1, [pc, #208]	; (8005e58 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8005d86:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d88:	4d34      	ldr	r5, [pc, #208]	; (8005e5c <DMA_CalcBaseAndBitshift+0xdc>)
 8005d8a:	4c35      	ldr	r4, [pc, #212]	; (8005e60 <DMA_CalcBaseAndBitshift+0xe0>)
 8005d8c:	42aa      	cmp	r2, r5
 8005d8e:	bf18      	it	ne
 8005d90:	429a      	cmpne	r2, r3
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	428a      	cmp	r2, r1
 8005d9a:	bf08      	it	eq
 8005d9c:	f043 0301 	orreq.w	r3, r3, #1
 8005da0:	3130      	adds	r1, #48	; 0x30
 8005da2:	42a2      	cmp	r2, r4
 8005da4:	bf08      	it	eq
 8005da6:	f043 0301 	orreq.w	r3, r3, #1
 8005daa:	3430      	adds	r4, #48	; 0x30
 8005dac:	428a      	cmp	r2, r1
 8005dae:	bf08      	it	eq
 8005db0:	f043 0301 	orreq.w	r3, r3, #1
 8005db4:	3130      	adds	r1, #48	; 0x30
 8005db6:	42a2      	cmp	r2, r4
 8005db8:	bf08      	it	eq
 8005dba:	f043 0301 	orreq.w	r3, r3, #1
 8005dbe:	3430      	adds	r4, #48	; 0x30
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	bf08      	it	eq
 8005dc4:	f043 0301 	orreq.w	r3, r3, #1
 8005dc8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005dcc:	42a2      	cmp	r2, r4
 8005dce:	bf08      	it	eq
 8005dd0:	f043 0301 	orreq.w	r3, r3, #1
 8005dd4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8005dd8:	428a      	cmp	r2, r1
 8005dda:	bf08      	it	eq
 8005ddc:	f043 0301 	orreq.w	r3, r3, #1
 8005de0:	3130      	adds	r1, #48	; 0x30
 8005de2:	42a2      	cmp	r2, r4
 8005de4:	bf08      	it	eq
 8005de6:	f043 0301 	orreq.w	r3, r3, #1
 8005dea:	3430      	adds	r4, #48	; 0x30
 8005dec:	428a      	cmp	r2, r1
 8005dee:	bf08      	it	eq
 8005df0:	f043 0301 	orreq.w	r3, r3, #1
 8005df4:	3130      	adds	r1, #48	; 0x30
 8005df6:	42a2      	cmp	r2, r4
 8005df8:	bf08      	it	eq
 8005dfa:	f043 0301 	orreq.w	r3, r3, #1
 8005dfe:	3430      	adds	r4, #48	; 0x30
 8005e00:	428a      	cmp	r2, r1
 8005e02:	bf08      	it	eq
 8005e04:	f043 0301 	orreq.w	r3, r3, #1
 8005e08:	3130      	adds	r1, #48	; 0x30
 8005e0a:	42a2      	cmp	r2, r4
 8005e0c:	bf08      	it	eq
 8005e0e:	f043 0301 	orreq.w	r3, r3, #1
 8005e12:	428a      	cmp	r2, r1
 8005e14:	bf08      	it	eq
 8005e16:	f043 0301 	orreq.w	r3, r3, #1
 8005e1a:	b913      	cbnz	r3, 8005e22 <DMA_CalcBaseAndBitshift+0xa2>
 8005e1c:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <DMA_CalcBaseAndBitshift+0xe4>)
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d113      	bne.n	8005e4a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e22:	b2d3      	uxtb	r3, r2
 8005e24:	4910      	ldr	r1, [pc, #64]	; (8005e68 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e26:	4c11      	ldr	r4, [pc, #68]	; (8005e6c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e28:	3b10      	subs	r3, #16
 8005e2a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8005e2e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e32:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e36:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e3a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005e3c:	bf88      	it	hi
 8005e3e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005e40:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005e42:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bc30      	pop	{r4, r5}
 8005e48:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005e4a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8005e4e:	6583      	str	r3, [r0, #88]	; 0x58
 8005e50:	e7f8      	b.n	8005e44 <DMA_CalcBaseAndBitshift+0xc4>
 8005e52:	bf00      	nop
 8005e54:	40020010 	.word	0x40020010
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020058 	.word	0x40020058
 8005e64:	400204b8 	.word	0x400204b8
 8005e68:	aaaaaaab 	.word	0xaaaaaaab
 8005e6c:	08018adc 	.word	0x08018adc
 8005e70:	fffffc00 	.word	0xfffffc00

08005e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e74:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e76:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8005e78:	4929      	ldr	r1, [pc, #164]	; (8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8005e7a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e7c:	4d29      	ldr	r5, [pc, #164]	; (8005f24 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8005e7e:	4c2a      	ldr	r4, [pc, #168]	; (8005f28 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8005e80:	42ab      	cmp	r3, r5
 8005e82:	bf18      	it	ne
 8005e84:	4293      	cmpne	r3, r2
 8005e86:	bf0c      	ite	eq
 8005e88:	2201      	moveq	r2, #1
 8005e8a:	2200      	movne	r2, #0
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf08      	it	eq
 8005e90:	f042 0201 	orreq.w	r2, r2, #1
 8005e94:	3128      	adds	r1, #40	; 0x28
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	bf08      	it	eq
 8005e9a:	f042 0201 	orreq.w	r2, r2, #1
 8005e9e:	3428      	adds	r4, #40	; 0x28
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf08      	it	eq
 8005ea4:	f042 0201 	orreq.w	r2, r2, #1
 8005ea8:	3128      	adds	r1, #40	; 0x28
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	bf08      	it	eq
 8005eae:	f042 0201 	orreq.w	r2, r2, #1
 8005eb2:	428b      	cmp	r3, r1
 8005eb4:	bf08      	it	eq
 8005eb6:	f042 0201 	orreq.w	r2, r2, #1
 8005eba:	b912      	cbnz	r2, 8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d113      	bne.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4c1a      	ldr	r4, [pc, #104]	; (8005f30 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ec8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005eca:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ecc:	4d1a      	ldr	r5, [pc, #104]	; (8005f38 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ece:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ed2:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ed4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ed8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005edc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ede:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ee2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ee4:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ee6:	bc30      	pop	{r4, r5}
 8005ee8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eea:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005eec:	4913      	ldr	r1, [pc, #76]	; (8005f3c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eee:	4c14      	ldr	r4, [pc, #80]	; (8005f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ef0:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ef2:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ef4:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ef6:	fba4 2302 	umull	r2, r3, r4, r2
 8005efa:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005efe:	d800      	bhi.n	8005f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8005f00:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f02:	4a10      	ldr	r2, [pc, #64]	; (8005f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f04:	f003 051f 	and.w	r5, r3, #31
 8005f08:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f0a:	4c0f      	ldr	r4, [pc, #60]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f0c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f0e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f10:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f12:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f14:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f16:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005f18:	e7e5      	b.n	8005ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8005f1a:	bf00      	nop
 8005f1c:	58025408 	.word	0x58025408
 8005f20:	58025430 	.word	0x58025430
 8005f24:	5802541c 	.word	0x5802541c
 8005f28:	58025444 	.word	0x58025444
 8005f2c:	58025494 	.word	0x58025494
 8005f30:	cccccccd 	.word	0xcccccccd
 8005f34:	16009600 	.word	0x16009600
 8005f38:	58025880 	.word	0x58025880
 8005f3c:	bffdfbf0 	.word	0xbffdfbf0
 8005f40:	aaaaaaab 	.word	0xaaaaaaab
 8005f44:	10008200 	.word	0x10008200
 8005f48:	40020880 	.word	0x40020880

08005f4c <HAL_DMA_Init>:
{
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005f50:	f7fe fb44 	bl	80045dc <HAL_GetTick>
  if(hdma == NULL)
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	f000 8177 	beq.w	8006248 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	4a92      	ldr	r2, [pc, #584]	; (80061a8 <HAL_DMA_Init+0x25c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d048      	beq.n	8005ff6 <HAL_DMA_Init+0xaa>
 8005f64:	3218      	adds	r2, #24
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d045      	beq.n	8005ff6 <HAL_DMA_Init+0xaa>
 8005f6a:	3230      	adds	r2, #48	; 0x30
 8005f6c:	498f      	ldr	r1, [pc, #572]	; (80061ac <HAL_DMA_Init+0x260>)
 8005f6e:	428b      	cmp	r3, r1
 8005f70:	bf18      	it	ne
 8005f72:	4293      	cmpne	r3, r2
 8005f74:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005f78:	bf0c      	ite	eq
 8005f7a:	2201      	moveq	r2, #1
 8005f7c:	2200      	movne	r2, #0
 8005f7e:	428b      	cmp	r3, r1
 8005f80:	bf08      	it	eq
 8005f82:	f042 0201 	orreq.w	r2, r2, #1
 8005f86:	3118      	adds	r1, #24
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf08      	it	eq
 8005f8c:	f042 0201 	orreq.w	r2, r2, #1
 8005f90:	3118      	adds	r1, #24
 8005f92:	428b      	cmp	r3, r1
 8005f94:	bf08      	it	eq
 8005f96:	f042 0201 	orreq.w	r2, r2, #1
 8005f9a:	3118      	adds	r1, #24
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf08      	it	eq
 8005fa0:	f042 0201 	orreq.w	r2, r2, #1
 8005fa4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	bf08      	it	eq
 8005fac:	f042 0201 	orreq.w	r2, r2, #1
 8005fb0:	3118      	adds	r1, #24
 8005fb2:	428b      	cmp	r3, r1
 8005fb4:	bf08      	it	eq
 8005fb6:	f042 0201 	orreq.w	r2, r2, #1
 8005fba:	3118      	adds	r1, #24
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	bf08      	it	eq
 8005fc0:	f042 0201 	orreq.w	r2, r2, #1
 8005fc4:	3118      	adds	r1, #24
 8005fc6:	428b      	cmp	r3, r1
 8005fc8:	bf08      	it	eq
 8005fca:	f042 0201 	orreq.w	r2, r2, #1
 8005fce:	3118      	adds	r1, #24
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	bf08      	it	eq
 8005fd4:	f042 0201 	orreq.w	r2, r2, #1
 8005fd8:	3118      	adds	r1, #24
 8005fda:	428b      	cmp	r3, r1
 8005fdc:	bf08      	it	eq
 8005fde:	f042 0201 	orreq.w	r2, r2, #1
 8005fe2:	3118      	adds	r1, #24
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf08      	it	eq
 8005fe8:	f042 0201 	orreq.w	r2, r2, #1
 8005fec:	b91a      	cbnz	r2, 8005ff6 <HAL_DMA_Init+0xaa>
 8005fee:	4a70      	ldr	r2, [pc, #448]	; (80061b0 <HAL_DMA_Init+0x264>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	f040 8198 	bne.w	8006326 <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 8005ff6:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff8:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8005ffa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ffe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e006      	b.n	800601a <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800600c:	f7fe fae6 	bl	80045dc <HAL_GetTick>
 8006010:	1b43      	subs	r3, r0, r5
 8006012:	2b05      	cmp	r3, #5
 8006014:	f200 80ff 	bhi.w	8006216 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	07d6      	lsls	r6, r2, #31
 800601e:	d4f5      	bmi.n	800600c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8006020:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006024:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8006026:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006028:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800602a:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800602c:	4302      	orrs	r2, r0
 800602e:	6960      	ldr	r0, [r4, #20]
 8006030:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006032:	69e0      	ldr	r0, [r4, #28]
 8006034:	430a      	orrs	r2, r1
 8006036:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006038:	485e      	ldr	r0, [pc, #376]	; (80061b4 <HAL_DMA_Init+0x268>)
 800603a:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800603c:	6a25      	ldr	r5, [r4, #32]
 800603e:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006040:	4d5d      	ldr	r5, [pc, #372]	; (80061b8 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8006042:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006044:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006046:	2804      	cmp	r0, #4
 8006048:	f000 8100 	beq.w	800624c <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800604c:	682e      	ldr	r6, [r5, #0]
 800604e:	4d5b      	ldr	r5, [pc, #364]	; (80061bc <HAL_DMA_Init+0x270>)
 8006050:	4035      	ands	r5, r6
 8006052:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8006056:	f080 80bb 	bcs.w	80061d0 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800605a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800605c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800605e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8006062:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006064:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006066:	4620      	mov	r0, r4
 8006068:	f7ff fe8a 	bl	8005d80 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800606c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800606e:	233f      	movs	r3, #63	; 0x3f
 8006070:	f002 021f 	and.w	r2, r2, #31
 8006074:	4093      	lsls	r3, r2
 8006076:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	4b4b      	ldr	r3, [pc, #300]	; (80061a8 <HAL_DMA_Init+0x25c>)
 800607c:	4850      	ldr	r0, [pc, #320]	; (80061c0 <HAL_DMA_Init+0x274>)
 800607e:	494b      	ldr	r1, [pc, #300]	; (80061ac <HAL_DMA_Init+0x260>)
 8006080:	4282      	cmp	r2, r0
 8006082:	bf18      	it	ne
 8006084:	429a      	cmpne	r2, r3
 8006086:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	428a      	cmp	r2, r1
 8006092:	bf08      	it	eq
 8006094:	f043 0301 	orreq.w	r3, r3, #1
 8006098:	3130      	adds	r1, #48	; 0x30
 800609a:	4282      	cmp	r2, r0
 800609c:	bf08      	it	eq
 800609e:	f043 0301 	orreq.w	r3, r3, #1
 80060a2:	3030      	adds	r0, #48	; 0x30
 80060a4:	428a      	cmp	r2, r1
 80060a6:	bf08      	it	eq
 80060a8:	f043 0301 	orreq.w	r3, r3, #1
 80060ac:	3130      	adds	r1, #48	; 0x30
 80060ae:	4282      	cmp	r2, r0
 80060b0:	bf08      	it	eq
 80060b2:	f043 0301 	orreq.w	r3, r3, #1
 80060b6:	3030      	adds	r0, #48	; 0x30
 80060b8:	428a      	cmp	r2, r1
 80060ba:	bf08      	it	eq
 80060bc:	f043 0301 	orreq.w	r3, r3, #1
 80060c0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80060c4:	4282      	cmp	r2, r0
 80060c6:	bf08      	it	eq
 80060c8:	f043 0301 	orreq.w	r3, r3, #1
 80060cc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80060d0:	428a      	cmp	r2, r1
 80060d2:	bf08      	it	eq
 80060d4:	f043 0301 	orreq.w	r3, r3, #1
 80060d8:	3130      	adds	r1, #48	; 0x30
 80060da:	4282      	cmp	r2, r0
 80060dc:	bf08      	it	eq
 80060de:	f043 0301 	orreq.w	r3, r3, #1
 80060e2:	3030      	adds	r0, #48	; 0x30
 80060e4:	428a      	cmp	r2, r1
 80060e6:	bf08      	it	eq
 80060e8:	f043 0301 	orreq.w	r3, r3, #1
 80060ec:	3130      	adds	r1, #48	; 0x30
 80060ee:	4282      	cmp	r2, r0
 80060f0:	bf08      	it	eq
 80060f2:	f043 0301 	orreq.w	r3, r3, #1
 80060f6:	3030      	adds	r0, #48	; 0x30
 80060f8:	428a      	cmp	r2, r1
 80060fa:	bf08      	it	eq
 80060fc:	f043 0301 	orreq.w	r3, r3, #1
 8006100:	3130      	adds	r1, #48	; 0x30
 8006102:	4282      	cmp	r2, r0
 8006104:	bf08      	it	eq
 8006106:	f043 0301 	orreq.w	r3, r3, #1
 800610a:	3030      	adds	r0, #48	; 0x30
 800610c:	428a      	cmp	r2, r1
 800610e:	bf08      	it	eq
 8006110:	f043 0301 	orreq.w	r3, r3, #1
 8006114:	492b      	ldr	r1, [pc, #172]	; (80061c4 <HAL_DMA_Init+0x278>)
 8006116:	4282      	cmp	r2, r0
 8006118:	bf08      	it	eq
 800611a:	f043 0301 	orreq.w	r3, r3, #1
 800611e:	482a      	ldr	r0, [pc, #168]	; (80061c8 <HAL_DMA_Init+0x27c>)
 8006120:	428a      	cmp	r2, r1
 8006122:	bf08      	it	eq
 8006124:	f043 0301 	orreq.w	r3, r3, #1
 8006128:	3128      	adds	r1, #40	; 0x28
 800612a:	4282      	cmp	r2, r0
 800612c:	bf08      	it	eq
 800612e:	f043 0301 	orreq.w	r3, r3, #1
 8006132:	3028      	adds	r0, #40	; 0x28
 8006134:	428a      	cmp	r2, r1
 8006136:	bf08      	it	eq
 8006138:	f043 0301 	orreq.w	r3, r3, #1
 800613c:	3128      	adds	r1, #40	; 0x28
 800613e:	4282      	cmp	r2, r0
 8006140:	bf08      	it	eq
 8006142:	f043 0301 	orreq.w	r3, r3, #1
 8006146:	3028      	adds	r0, #40	; 0x28
 8006148:	428a      	cmp	r2, r1
 800614a:	bf08      	it	eq
 800614c:	f043 0301 	orreq.w	r3, r3, #1
 8006150:	3128      	adds	r1, #40	; 0x28
 8006152:	4282      	cmp	r2, r0
 8006154:	bf08      	it	eq
 8006156:	f043 0301 	orreq.w	r3, r3, #1
 800615a:	428a      	cmp	r2, r1
 800615c:	bf08      	it	eq
 800615e:	f043 0301 	orreq.w	r3, r3, #1
 8006162:	b913      	cbnz	r3, 800616a <HAL_DMA_Init+0x21e>
 8006164:	4b19      	ldr	r3, [pc, #100]	; (80061cc <HAL_DMA_Init+0x280>)
 8006166:	429a      	cmp	r2, r3
 8006168:	d118      	bne.n	800619c <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff fe82 	bl	8005e74 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d05c      	beq.n	8006230 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006176:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006178:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800617a:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800617c:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800617e:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006182:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006184:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006186:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006188:	d859      	bhi.n	800623e <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800618a:	1e50      	subs	r0, r2, #1
 800618c:	2807      	cmp	r0, #7
 800618e:	d96e      	bls.n	800626e <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006190:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006192:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006196:	2000      	movs	r0, #0
 8006198:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800619a:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800619c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800619e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80061a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80061a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a8:	40020010 	.word	0x40020010
 80061ac:	40020040 	.word	0x40020040
 80061b0:	400204b8 	.word	0x400204b8
 80061b4:	fe10803f 	.word	0xfe10803f
 80061b8:	5c001000 	.word	0x5c001000
 80061bc:	ffff0000 	.word	0xffff0000
 80061c0:	40020028 	.word	0x40020028
 80061c4:	58025408 	.word	0x58025408
 80061c8:	5802541c 	.word	0x5802541c
 80061cc:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80061d0:	6865      	ldr	r5, [r4, #4]
 80061d2:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 80061d6:	2e1f      	cmp	r6, #31
 80061d8:	d924      	bls.n	8006224 <HAL_DMA_Init+0x2d8>
 80061da:	3d4f      	subs	r5, #79	; 0x4f
 80061dc:	2d03      	cmp	r5, #3
 80061de:	d801      	bhi.n	80061e4 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 80061e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061e4:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061e6:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061e8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061ea:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80061ee:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061f2:	f47f af37 	bne.w	8006064 <HAL_DMA_Init+0x118>
 80061f6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 80061f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80061fa:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	f43f af31 	beq.w	8006064 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006202:	2900      	cmp	r1, #0
 8006204:	d169      	bne.n	80062da <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 8006206:	2801      	cmp	r0, #1
 8006208:	f000 8088 	beq.w	800631c <HAL_DMA_Init+0x3d0>
 800620c:	f030 0102 	bics.w	r1, r0, #2
 8006210:	f47f af28 	bne.w	8006064 <HAL_DMA_Init+0x118>
 8006214:	e069      	b.n	80062ea <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006216:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8006218:	2303      	movs	r3, #3
        return HAL_ERROR;
 800621a:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800621c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800621e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8006222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006224:	4d73      	ldr	r5, [pc, #460]	; (80063f4 <HAL_DMA_Init+0x4a8>)
 8006226:	fa25 f606 	lsr.w	r6, r5, r6
 800622a:	07f5      	lsls	r5, r6, #31
 800622c:	d5da      	bpl.n	80061e4 <HAL_DMA_Init+0x298>
 800622e:	e7d7      	b.n	80061e0 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006230:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006232:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006234:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006238:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800623a:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800623c:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800623e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8006240:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006244:	6763      	str	r3, [r4, #116]	; 0x74
 8006246:	e7a9      	b.n	800619c <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8006248:	2001      	movs	r0, #1
}
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800624c:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800624e:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8006252:	432e      	orrs	r6, r5
 8006254:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006256:	4e68      	ldr	r6, [pc, #416]	; (80063f8 <HAL_DMA_Init+0x4ac>)
 8006258:	403e      	ands	r6, r7
 800625a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800625e:	d2b7      	bcs.n	80061d0 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006260:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006262:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006264:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8006268:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800626c:	e7c4      	b.n	80061f8 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	4b62      	ldr	r3, [pc, #392]	; (80063fc <HAL_DMA_Init+0x4b0>)
 8006272:	4d63      	ldr	r5, [pc, #396]	; (8006400 <HAL_DMA_Init+0x4b4>)
 8006274:	42a9      	cmp	r1, r5
 8006276:	bf18      	it	ne
 8006278:	4299      	cmpne	r1, r3
 800627a:	f105 0514 	add.w	r5, r5, #20
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	42a9      	cmp	r1, r5
 8006286:	bf08      	it	eq
 8006288:	f043 0301 	orreq.w	r3, r3, #1
 800628c:	3514      	adds	r5, #20
 800628e:	42a9      	cmp	r1, r5
 8006290:	bf08      	it	eq
 8006292:	f043 0301 	orreq.w	r3, r3, #1
 8006296:	3514      	adds	r5, #20
 8006298:	42a9      	cmp	r1, r5
 800629a:	bf08      	it	eq
 800629c:	f043 0301 	orreq.w	r3, r3, #1
 80062a0:	3514      	adds	r5, #20
 80062a2:	42a9      	cmp	r1, r5
 80062a4:	bf08      	it	eq
 80062a6:	f043 0301 	orreq.w	r3, r3, #1
 80062aa:	3514      	adds	r5, #20
 80062ac:	42a9      	cmp	r1, r5
 80062ae:	bf08      	it	eq
 80062b0:	f043 0301 	orreq.w	r3, r3, #1
 80062b4:	b93b      	cbnz	r3, 80062c6 <HAL_DMA_Init+0x37a>
 80062b6:	4b53      	ldr	r3, [pc, #332]	; (8006404 <HAL_DMA_Init+0x4b8>)
 80062b8:	4299      	cmp	r1, r3
 80062ba:	d004      	beq.n	80062c6 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062bc:	4b52      	ldr	r3, [pc, #328]	; (8006408 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062be:	4953      	ldr	r1, [pc, #332]	; (800640c <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062c4:	e003      	b.n	80062ce <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80062c6:	4b52      	ldr	r3, [pc, #328]	; (8006410 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062c8:	4952      	ldr	r1, [pc, #328]	; (8006414 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062ce:	2201      	movs	r2, #1
 80062d0:	4082      	lsls	r2, r0
 80062d2:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 80062d6:	6762      	str	r2, [r4, #116]	; 0x74
 80062d8:	e75d      	b.n	8006196 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062da:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 80062e0:	2802      	cmp	r0, #2
 80062e2:	d905      	bls.n	80062f0 <HAL_DMA_Init+0x3a4>
 80062e4:	2803      	cmp	r0, #3
 80062e6:	f47f aebd 	bne.w	8006064 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062ea:	01e9      	lsls	r1, r5, #7
 80062ec:	f57f aeba 	bpl.w	8006064 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 80062f0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062f2:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80062f4:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062f6:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80062f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80062fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 80062fe:	2803      	cmp	r0, #3
 8006300:	f63f aeb0 	bhi.w	8006064 <HAL_DMA_Init+0x118>
 8006304:	a101      	add	r1, pc, #4	; (adr r1, 800630c <HAL_DMA_Init+0x3c0>)
 8006306:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800630a:	bf00      	nop
 800630c:	080062f1 	.word	0x080062f1
 8006310:	080062eb 	.word	0x080062eb
 8006314:	080062f1 	.word	0x080062f1
 8006318:	0800631d 	.word	0x0800631d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800631c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8006320:	f47f aea0 	bne.w	8006064 <HAL_DMA_Init+0x118>
 8006324:	e7e4      	b.n	80062f0 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006326:	4a35      	ldr	r2, [pc, #212]	; (80063fc <HAL_DMA_Init+0x4b0>)
 8006328:	4835      	ldr	r0, [pc, #212]	; (8006400 <HAL_DMA_Init+0x4b4>)
 800632a:	493b      	ldr	r1, [pc, #236]	; (8006418 <HAL_DMA_Init+0x4cc>)
 800632c:	4283      	cmp	r3, r0
 800632e:	bf18      	it	ne
 8006330:	4293      	cmpne	r3, r2
 8006332:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8006336:	bf0c      	ite	eq
 8006338:	2201      	moveq	r2, #1
 800633a:	2200      	movne	r2, #0
 800633c:	428b      	cmp	r3, r1
 800633e:	bf08      	it	eq
 8006340:	f042 0201 	orreq.w	r2, r2, #1
 8006344:	3128      	adds	r1, #40	; 0x28
 8006346:	4283      	cmp	r3, r0
 8006348:	bf08      	it	eq
 800634a:	f042 0201 	orreq.w	r2, r2, #1
 800634e:	3028      	adds	r0, #40	; 0x28
 8006350:	428b      	cmp	r3, r1
 8006352:	bf08      	it	eq
 8006354:	f042 0201 	orreq.w	r2, r2, #1
 8006358:	3128      	adds	r1, #40	; 0x28
 800635a:	4283      	cmp	r3, r0
 800635c:	bf08      	it	eq
 800635e:	f042 0201 	orreq.w	r2, r2, #1
 8006362:	428b      	cmp	r3, r1
 8006364:	bf08      	it	eq
 8006366:	f042 0201 	orreq.w	r2, r2, #1
 800636a:	b912      	cbnz	r2, 8006372 <HAL_DMA_Init+0x426>
 800636c:	4a25      	ldr	r2, [pc, #148]	; (8006404 <HAL_DMA_Init+0x4b8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d138      	bne.n	80063e4 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8006372:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8006374:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006376:	4d29      	ldr	r5, [pc, #164]	; (800641c <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8006378:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800637c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006380:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006382:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006384:	68a2      	ldr	r2, [r4, #8]
 8006386:	2a40      	cmp	r2, #64	; 0x40
 8006388:	d02a      	beq.n	80063e0 <HAL_DMA_Init+0x494>
 800638a:	2a80      	cmp	r2, #128	; 0x80
 800638c:	bf0c      	ite	eq
 800638e:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8006392:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006394:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006396:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800639a:	08d2      	lsrs	r2, r2, #3
 800639c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063a0:	6961      	ldr	r1, [r4, #20]
 80063a2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063a6:	69a1      	ldr	r1, [r4, #24]
 80063a8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063ac:	69e1      	ldr	r1, [r4, #28]
 80063ae:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063b2:	491b      	ldr	r1, [pc, #108]	; (8006420 <HAL_DMA_Init+0x4d4>)
 80063b4:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 80063b8:	4419      	add	r1, r3
 80063ba:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063bc:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063be:	4819      	ldr	r0, [pc, #100]	; (8006424 <HAL_DMA_Init+0x4d8>)
 80063c0:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063c4:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80063c6:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063c8:	090b      	lsrs	r3, r1, #4
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063ce:	f7ff fcd7 	bl	8005d80 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80063d4:	2301      	movs	r3, #1
 80063d6:	f002 021f 	and.w	r2, r2, #31
 80063da:	4093      	lsls	r3, r2
 80063dc:	6043      	str	r3, [r0, #4]
 80063de:	e64b      	b.n	8006078 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063e0:	2010      	movs	r0, #16
 80063e2:	e7d7      	b.n	8006394 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063e4:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063e6:	2303      	movs	r3, #3
    return HAL_ERROR;
 80063e8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063ea:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f2:	bf00      	nop
 80063f4:	c3c0003f 	.word	0xc3c0003f
 80063f8:	ffff0000 	.word	0xffff0000
 80063fc:	58025408 	.word	0x58025408
 8006400:	5802541c 	.word	0x5802541c
 8006404:	58025494 	.word	0x58025494
 8006408:	1000823f 	.word	0x1000823f
 800640c:	40020940 	.word	0x40020940
 8006410:	1600963f 	.word	0x1600963f
 8006414:	58025940 	.word	0x58025940
 8006418:	58025430 	.word	0x58025430
 800641c:	fffe000f 	.word	0xfffe000f
 8006420:	a7fdabf8 	.word	0xa7fdabf8
 8006424:	cccccccd 	.word	0xcccccccd

08006428 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8006428:	2800      	cmp	r0, #0
 800642a:	f000 8177 	beq.w	800671c <HAL_DMA_Start_IT+0x2f4>
 800642e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8006430:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8006434:	2801      	cmp	r0, #1
 8006436:	f000 8173 	beq.w	8006720 <HAL_DMA_Start_IT+0x2f8>
 800643a:	2001      	movs	r0, #1
{
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8006440:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8006444:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8006448:	4284      	cmp	r4, r0
 800644a:	d008      	beq.n	800645e <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800644c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8006450:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006452:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006456:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800645e:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8006460:	f8dc 4000 	ldr.w	r4, [ip]
 8006464:	4d53      	ldr	r5, [pc, #332]	; (80065b4 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8006466:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800646a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800646c:	4e52      	ldr	r6, [pc, #328]	; (80065b8 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800646e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8006472:	4852      	ldr	r0, [pc, #328]	; (80065bc <HAL_DMA_Start_IT+0x194>)
 8006474:	42ac      	cmp	r4, r5
 8006476:	bf18      	it	ne
 8006478:	4284      	cmpne	r4, r0
 800647a:	f105 0518 	add.w	r5, r5, #24
 800647e:	bf0c      	ite	eq
 8006480:	2001      	moveq	r0, #1
 8006482:	2000      	movne	r0, #0
 8006484:	42ac      	cmp	r4, r5
 8006486:	bf08      	it	eq
 8006488:	f040 0001 	orreq.w	r0, r0, #1
 800648c:	3518      	adds	r5, #24
 800648e:	42ac      	cmp	r4, r5
 8006490:	bf08      	it	eq
 8006492:	f040 0001 	orreq.w	r0, r0, #1
 8006496:	3518      	adds	r5, #24
 8006498:	42ac      	cmp	r4, r5
 800649a:	bf08      	it	eq
 800649c:	f040 0001 	orreq.w	r0, r0, #1
 80064a0:	3518      	adds	r5, #24
 80064a2:	42ac      	cmp	r4, r5
 80064a4:	bf08      	it	eq
 80064a6:	f040 0001 	orreq.w	r0, r0, #1
 80064aa:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80064ae:	42ac      	cmp	r4, r5
 80064b0:	bf08      	it	eq
 80064b2:	f040 0001 	orreq.w	r0, r0, #1
 80064b6:	3518      	adds	r5, #24
 80064b8:	42ac      	cmp	r4, r5
 80064ba:	bf08      	it	eq
 80064bc:	f040 0001 	orreq.w	r0, r0, #1
 80064c0:	3518      	adds	r5, #24
 80064c2:	42ac      	cmp	r4, r5
 80064c4:	bf08      	it	eq
 80064c6:	f040 0001 	orreq.w	r0, r0, #1
 80064ca:	3518      	adds	r5, #24
 80064cc:	42ac      	cmp	r4, r5
 80064ce:	bf08      	it	eq
 80064d0:	f040 0001 	orreq.w	r0, r0, #1
 80064d4:	3518      	adds	r5, #24
 80064d6:	42ac      	cmp	r4, r5
 80064d8:	bf08      	it	eq
 80064da:	f040 0001 	orreq.w	r0, r0, #1
 80064de:	3518      	adds	r5, #24
 80064e0:	42ac      	cmp	r4, r5
 80064e2:	bf08      	it	eq
 80064e4:	f040 0001 	orreq.w	r0, r0, #1
 80064e8:	3518      	adds	r5, #24
 80064ea:	42ac      	cmp	r4, r5
 80064ec:	bf08      	it	eq
 80064ee:	f040 0001 	orreq.w	r0, r0, #1
 80064f2:	3518      	adds	r5, #24
 80064f4:	42ac      	cmp	r4, r5
 80064f6:	bf14      	ite	ne
 80064f8:	4681      	movne	r9, r0
 80064fa:	f040 0901 	orreq.w	r9, r0, #1
 80064fe:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8006502:	42ac      	cmp	r4, r5
 8006504:	bf18      	it	ne
 8006506:	42b4      	cmpne	r4, r6
 8006508:	bf0c      	ite	eq
 800650a:	2501      	moveq	r5, #1
 800650c:	2500      	movne	r5, #0
 800650e:	d002      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 8006510:	f1b9 0f00 	cmp.w	r9, #0
 8006514:	d054      	beq.n	80065c0 <HAL_DMA_Start_IT+0x198>
 8006516:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006518:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800651c:	f026 0601 	bic.w	r6, r6, #1
 8006520:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006522:	2d00      	cmp	r5, #0
 8006524:	d078      	beq.n	8006618 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006526:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800652a:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800652c:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8006530:	b117      	cbz	r7, 8006538 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006532:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8006536:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006538:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 800653c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8006540:	f006 081f 	and.w	r8, r6, #31
 8006544:	fa0e fe08 	lsl.w	lr, lr, r8
 8006548:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800654c:	6826      	ldr	r6, [r4, #0]
 800654e:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8006552:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006554:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006556:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	f000 80e2 	beq.w	8006724 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006560:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006562:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006564:	b91d      	cbnz	r5, 800656e <HAL_DMA_Start_IT+0x146>
 8006566:	f1b9 0f00 	cmp.w	r9, #0
 800656a:	f000 80e1 	beq.w	8006730 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 031e 	bic.w	r3, r3, #30
 8006574:	f043 0316 	orr.w	r3, r3, #22
 8006578:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800657a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800657e:	b11b      	cbz	r3, 8006588 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	f043 0308 	orr.w	r3, r3, #8
 8006586:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006588:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	03d2      	lsls	r2, r2, #15
 8006590:	d503      	bpl.n	800659a <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006598:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800659a:	b11f      	cbz	r7, 80065a4 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a2:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80065a4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	6023      	str	r3, [r4, #0]
}
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b2:	bf00      	nop
 80065b4:	40020058 	.word	0x40020058
 80065b8:	40020010 	.word	0x40020010
 80065bc:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065c0:	4f61      	ldr	r7, [pc, #388]	; (8006748 <HAL_DMA_Start_IT+0x320>)
 80065c2:	4e62      	ldr	r6, [pc, #392]	; (800674c <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065c4:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065c8:	42b4      	cmp	r4, r6
 80065ca:	bf18      	it	ne
 80065cc:	42bc      	cmpne	r4, r7
 80065ce:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80065d2:	bf0c      	ite	eq
 80065d4:	2701      	moveq	r7, #1
 80065d6:	2700      	movne	r7, #0
 80065d8:	42b4      	cmp	r4, r6
 80065da:	bf08      	it	eq
 80065dc:	f047 0701 	orreq.w	r7, r7, #1
 80065e0:	3614      	adds	r6, #20
 80065e2:	42b4      	cmp	r4, r6
 80065e4:	bf08      	it	eq
 80065e6:	f047 0701 	orreq.w	r7, r7, #1
 80065ea:	3614      	adds	r6, #20
 80065ec:	42b4      	cmp	r4, r6
 80065ee:	bf08      	it	eq
 80065f0:	f047 0701 	orreq.w	r7, r7, #1
 80065f4:	3614      	adds	r6, #20
 80065f6:	42b4      	cmp	r4, r6
 80065f8:	bf08      	it	eq
 80065fa:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 80065fe:	6826      	ldr	r6, [r4, #0]
 8006600:	f026 0601 	bic.w	r6, r6, #1
 8006604:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006606:	4e52      	ldr	r6, [pc, #328]	; (8006750 <HAL_DMA_Start_IT+0x328>)
 8006608:	42b4      	cmp	r4, r6
 800660a:	bf08      	it	eq
 800660c:	f047 0701 	orreq.w	r7, r7, #1
 8006610:	b917      	cbnz	r7, 8006618 <HAL_DMA_Start_IT+0x1f0>
 8006612:	4f50      	ldr	r7, [pc, #320]	; (8006754 <HAL_DMA_Start_IT+0x32c>)
 8006614:	42bc      	cmp	r4, r7
 8006616:	d10b      	bne.n	8006630 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006618:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800661c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800661e:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8006622:	b117      	cbz	r7, 800662a <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006624:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8006628:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	d183      	bne.n	8006538 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006630:	4f46      	ldr	r7, [pc, #280]	; (800674c <HAL_DMA_Start_IT+0x324>)
 8006632:	f8df e114 	ldr.w	lr, [pc, #276]	; 8006748 <HAL_DMA_Start_IT+0x320>
 8006636:	4574      	cmp	r4, lr
 8006638:	bf18      	it	ne
 800663a:	42bc      	cmpne	r4, r7
 800663c:	f10e 0e14 	add.w	lr, lr, #20
 8006640:	bf0c      	ite	eq
 8006642:	2701      	moveq	r7, #1
 8006644:	2700      	movne	r7, #0
 8006646:	4574      	cmp	r4, lr
 8006648:	bf08      	it	eq
 800664a:	f047 0701 	orreq.w	r7, r7, #1
 800664e:	f10e 0e14 	add.w	lr, lr, #20
 8006652:	4574      	cmp	r4, lr
 8006654:	bf08      	it	eq
 8006656:	f047 0701 	orreq.w	r7, r7, #1
 800665a:	f10e 0e14 	add.w	lr, lr, #20
 800665e:	4574      	cmp	r4, lr
 8006660:	bf08      	it	eq
 8006662:	f047 0701 	orreq.w	r7, r7, #1
 8006666:	f10e 0e14 	add.w	lr, lr, #20
 800666a:	4574      	cmp	r4, lr
 800666c:	bf08      	it	eq
 800666e:	f047 0701 	orreq.w	r7, r7, #1
 8006672:	f10e 0e14 	add.w	lr, lr, #20
 8006676:	4574      	cmp	r4, lr
 8006678:	bf08      	it	eq
 800667a:	f047 0701 	orreq.w	r7, r7, #1
 800667e:	b917      	cbnz	r7, 8006686 <HAL_DMA_Start_IT+0x25e>
 8006680:	4f34      	ldr	r7, [pc, #208]	; (8006754 <HAL_DMA_Start_IT+0x32c>)
 8006682:	42bc      	cmp	r4, r7
 8006684:	d154      	bne.n	8006730 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006686:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800668a:	2701      	movs	r7, #1
 800668c:	f000 0e1f 	and.w	lr, r0, #31
 8006690:	fa07 f70e 	lsl.w	r7, r7, lr
 8006694:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006698:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800669a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d043      	beq.n	800672a <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80066a2:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80066a4:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f023 030e 	bic.w	r3, r3, #14
 80066ac:	f043 030a 	orr.w	r3, r3, #10
 80066b0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80066b2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d02d      	beq.n	8006716 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	f043 0304 	orr.w	r3, r3, #4
 80066c0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <HAL_DMA_Start_IT+0x320>)
 80066c4:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_DMA_Start_IT+0x324>)
 80066c6:	4294      	cmp	r4, r2
 80066c8:	bf18      	it	ne
 80066ca:	429c      	cmpne	r4, r3
 80066cc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	4294      	cmp	r4, r2
 80066d8:	bf08      	it	eq
 80066da:	f043 0301 	orreq.w	r3, r3, #1
 80066de:	3214      	adds	r2, #20
 80066e0:	4294      	cmp	r4, r2
 80066e2:	bf08      	it	eq
 80066e4:	f043 0301 	orreq.w	r3, r3, #1
 80066e8:	3214      	adds	r2, #20
 80066ea:	4294      	cmp	r4, r2
 80066ec:	bf08      	it	eq
 80066ee:	f043 0301 	orreq.w	r3, r3, #1
 80066f2:	3214      	adds	r2, #20
 80066f4:	4294      	cmp	r4, r2
 80066f6:	bf08      	it	eq
 80066f8:	f043 0301 	orreq.w	r3, r3, #1
 80066fc:	3214      	adds	r2, #20
 80066fe:	4294      	cmp	r4, r2
 8006700:	bf08      	it	eq
 8006702:	f043 0301 	orreq.w	r3, r3, #1
 8006706:	3214      	adds	r2, #20
 8006708:	4294      	cmp	r4, r2
 800670a:	bf08      	it	eq
 800670c:	f043 0301 	orreq.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	f43f af47 	beq.w	80065a4 <HAL_DMA_Start_IT+0x17c>
 8006716:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800671a:	e735      	b.n	8006588 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800671c:	2001      	movs	r0, #1
 800671e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8006720:	2002      	movs	r0, #2
}
 8006722:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006724:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006726:	60e1      	str	r1, [r4, #12]
 8006728:	e71c      	b.n	8006564 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800672a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800672c:	60e1      	str	r1, [r4, #12]
 800672e:	e7ba      	b.n	80066a6 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	f023 030e 	bic.w	r3, r3, #14
 8006736:	f043 030a 	orr.w	r3, r3, #10
 800673a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800673c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1ba      	bne.n	80066ba <HAL_DMA_Start_IT+0x292>
 8006744:	e7bd      	b.n	80066c2 <HAL_DMA_Start_IT+0x29a>
 8006746:	bf00      	nop
 8006748:	5802541c 	.word	0x5802541c
 800674c:	58025408 	.word	0x58025408
 8006750:	58025480 	.word	0x58025480
 8006754:	58025494 	.word	0x58025494

08006758 <HAL_DMA_Abort>:
{
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800675c:	f7fd ff3e 	bl	80045dc <HAL_GetTick>
  if(hdma == NULL)
 8006760:	2d00      	cmp	r5, #0
 8006762:	f000 8124 	beq.w	80069ae <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006766:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800676a:	2b02      	cmp	r3, #2
 800676c:	f040 80dd 	bne.w	800692a <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006770:	682c      	ldr	r4, [r5, #0]
 8006772:	4606      	mov	r6, r0
 8006774:	4b8f      	ldr	r3, [pc, #572]	; (80069b4 <HAL_DMA_Abort+0x25c>)
 8006776:	4890      	ldr	r0, [pc, #576]	; (80069b8 <HAL_DMA_Abort+0x260>)
 8006778:	4a90      	ldr	r2, [pc, #576]	; (80069bc <HAL_DMA_Abort+0x264>)
 800677a:	4284      	cmp	r4, r0
 800677c:	bf18      	it	ne
 800677e:	429c      	cmpne	r4, r3
 8006780:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006784:	498e      	ldr	r1, [pc, #568]	; (80069c0 <HAL_DMA_Abort+0x268>)
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	4284      	cmp	r4, r0
 800678e:	bf08      	it	eq
 8006790:	f043 0301 	orreq.w	r3, r3, #1
 8006794:	3018      	adds	r0, #24
 8006796:	4284      	cmp	r4, r0
 8006798:	bf08      	it	eq
 800679a:	f043 0301 	orreq.w	r3, r3, #1
 800679e:	3018      	adds	r0, #24
 80067a0:	4284      	cmp	r4, r0
 80067a2:	bf08      	it	eq
 80067a4:	f043 0301 	orreq.w	r3, r3, #1
 80067a8:	3018      	adds	r0, #24
 80067aa:	4284      	cmp	r4, r0
 80067ac:	bf08      	it	eq
 80067ae:	f043 0301 	orreq.w	r3, r3, #1
 80067b2:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80067b6:	4284      	cmp	r4, r0
 80067b8:	bf08      	it	eq
 80067ba:	f043 0301 	orreq.w	r3, r3, #1
 80067be:	3018      	adds	r0, #24
 80067c0:	4284      	cmp	r4, r0
 80067c2:	bf08      	it	eq
 80067c4:	f043 0301 	orreq.w	r3, r3, #1
 80067c8:	3018      	adds	r0, #24
 80067ca:	4284      	cmp	r4, r0
 80067cc:	bf08      	it	eq
 80067ce:	f043 0301 	orreq.w	r3, r3, #1
 80067d2:	3018      	adds	r0, #24
 80067d4:	4284      	cmp	r4, r0
 80067d6:	bf08      	it	eq
 80067d8:	f043 0301 	orreq.w	r3, r3, #1
 80067dc:	3018      	adds	r0, #24
 80067de:	4284      	cmp	r4, r0
 80067e0:	bf08      	it	eq
 80067e2:	f043 0301 	orreq.w	r3, r3, #1
 80067e6:	3018      	adds	r0, #24
 80067e8:	4284      	cmp	r4, r0
 80067ea:	bf08      	it	eq
 80067ec:	f043 0301 	orreq.w	r3, r3, #1
 80067f0:	3018      	adds	r0, #24
 80067f2:	4284      	cmp	r4, r0
 80067f4:	bf08      	it	eq
 80067f6:	f043 0301 	orreq.w	r3, r3, #1
 80067fa:	3018      	adds	r0, #24
 80067fc:	4284      	cmp	r4, r0
 80067fe:	bf08      	it	eq
 8006800:	f043 0301 	orreq.w	r3, r3, #1
 8006804:	428c      	cmp	r4, r1
 8006806:	bf18      	it	ne
 8006808:	4294      	cmpne	r4, r2
 800680a:	bf0c      	ite	eq
 800680c:	2201      	moveq	r2, #1
 800680e:	2200      	movne	r2, #0
 8006810:	d002      	beq.n	8006818 <HAL_DMA_Abort+0xc0>
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8090 	beq.w	8006938 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	f021 011e 	bic.w	r1, r1, #30
 800681e:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006820:	6961      	ldr	r1, [r4, #20]
 8006822:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006826:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006828:	2a00      	cmp	r2, #0
 800682a:	f000 80b0 	beq.w	800698e <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800682e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006836:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	e005      	b.n	800684e <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006842:	f7fd fecb 	bl	80045dc <HAL_GetTick>
 8006846:	1b83      	subs	r3, r0, r6
 8006848:	2b05      	cmp	r3, #5
 800684a:	f200 80a6 	bhi.w	800699a <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	07db      	lsls	r3, r3, #31
 8006852:	d4f6      	bmi.n	8006842 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006854:	682a      	ldr	r2, [r5, #0]
 8006856:	4b57      	ldr	r3, [pc, #348]	; (80069b4 <HAL_DMA_Abort+0x25c>)
 8006858:	4857      	ldr	r0, [pc, #348]	; (80069b8 <HAL_DMA_Abort+0x260>)
 800685a:	495a      	ldr	r1, [pc, #360]	; (80069c4 <HAL_DMA_Abort+0x26c>)
 800685c:	4282      	cmp	r2, r0
 800685e:	bf18      	it	ne
 8006860:	429a      	cmpne	r2, r3
 8006862:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006866:	bf0c      	ite	eq
 8006868:	2301      	moveq	r3, #1
 800686a:	2300      	movne	r3, #0
 800686c:	428a      	cmp	r2, r1
 800686e:	bf08      	it	eq
 8006870:	f043 0301 	orreq.w	r3, r3, #1
 8006874:	3130      	adds	r1, #48	; 0x30
 8006876:	4282      	cmp	r2, r0
 8006878:	bf08      	it	eq
 800687a:	f043 0301 	orreq.w	r3, r3, #1
 800687e:	3030      	adds	r0, #48	; 0x30
 8006880:	428a      	cmp	r2, r1
 8006882:	bf08      	it	eq
 8006884:	f043 0301 	orreq.w	r3, r3, #1
 8006888:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800688c:	4282      	cmp	r2, r0
 800688e:	bf08      	it	eq
 8006890:	f043 0301 	orreq.w	r3, r3, #1
 8006894:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006898:	428a      	cmp	r2, r1
 800689a:	bf08      	it	eq
 800689c:	f043 0301 	orreq.w	r3, r3, #1
 80068a0:	3130      	adds	r1, #48	; 0x30
 80068a2:	4282      	cmp	r2, r0
 80068a4:	bf08      	it	eq
 80068a6:	f043 0301 	orreq.w	r3, r3, #1
 80068aa:	3030      	adds	r0, #48	; 0x30
 80068ac:	428a      	cmp	r2, r1
 80068ae:	bf08      	it	eq
 80068b0:	f043 0301 	orreq.w	r3, r3, #1
 80068b4:	3130      	adds	r1, #48	; 0x30
 80068b6:	4282      	cmp	r2, r0
 80068b8:	bf08      	it	eq
 80068ba:	f043 0301 	orreq.w	r3, r3, #1
 80068be:	3030      	adds	r0, #48	; 0x30
 80068c0:	428a      	cmp	r2, r1
 80068c2:	bf08      	it	eq
 80068c4:	f043 0301 	orreq.w	r3, r3, #1
 80068c8:	3130      	adds	r1, #48	; 0x30
 80068ca:	4282      	cmp	r2, r0
 80068cc:	bf08      	it	eq
 80068ce:	f043 0301 	orreq.w	r3, r3, #1
 80068d2:	428a      	cmp	r2, r1
 80068d4:	bf08      	it	eq
 80068d6:	f043 0301 	orreq.w	r3, r3, #1
 80068da:	3118      	adds	r1, #24
 80068dc:	428a      	cmp	r2, r1
 80068de:	bf08      	it	eq
 80068e0:	f043 0301 	orreq.w	r3, r3, #1
 80068e4:	b933      	cbnz	r3, 80068f4 <HAL_DMA_Abort+0x19c>
 80068e6:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 80068ea:	4b35      	ldr	r3, [pc, #212]	; (80069c0 <HAL_DMA_Abort+0x268>)
 80068ec:	429a      	cmp	r2, r3
 80068ee:	bf18      	it	ne
 80068f0:	428a      	cmpne	r2, r1
 80068f2:	d16f      	bne.n	80069d4 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068f4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80068f6:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068f8:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068fa:	f002 021f 	and.w	r2, r2, #31
 80068fe:	4093      	lsls	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8006902:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006904:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8006908:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800690a:	b133      	cbz	r3, 800691a <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800690c:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800690e:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006916:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006918:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800691a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800691c:	2201      	movs	r2, #1
  return HAL_OK;
 800691e:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8006920:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8006924:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8006928:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800692a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800692c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800692e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006930:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006932:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8006936:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006938:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800693a:	4923      	ldr	r1, [pc, #140]	; (80069c8 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800693c:	f022 020e 	bic.w	r2, r2, #14
 8006940:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006942:	4a22      	ldr	r2, [pc, #136]	; (80069cc <HAL_DMA_Abort+0x274>)
 8006944:	428c      	cmp	r4, r1
 8006946:	bf18      	it	ne
 8006948:	4294      	cmpne	r4, r2
 800694a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800694e:	bf0c      	ite	eq
 8006950:	2201      	moveq	r2, #1
 8006952:	2200      	movne	r2, #0
 8006954:	428c      	cmp	r4, r1
 8006956:	bf08      	it	eq
 8006958:	f042 0201 	orreq.w	r2, r2, #1
 800695c:	3114      	adds	r1, #20
 800695e:	428c      	cmp	r4, r1
 8006960:	bf08      	it	eq
 8006962:	f042 0201 	orreq.w	r2, r2, #1
 8006966:	3114      	adds	r1, #20
 8006968:	428c      	cmp	r4, r1
 800696a:	bf08      	it	eq
 800696c:	f042 0201 	orreq.w	r2, r2, #1
 8006970:	3114      	adds	r1, #20
 8006972:	428c      	cmp	r4, r1
 8006974:	bf08      	it	eq
 8006976:	f042 0201 	orreq.w	r2, r2, #1
 800697a:	3114      	adds	r1, #20
 800697c:	428c      	cmp	r4, r1
 800697e:	bf08      	it	eq
 8006980:	f042 0201 	orreq.w	r2, r2, #1
 8006984:	b91a      	cbnz	r2, 800698e <HAL_DMA_Abort+0x236>
 8006986:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <HAL_DMA_Abort+0x278>)
 8006988:	4294      	cmp	r4, r2
 800698a:	f47f af55 	bne.w	8006838 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800698e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006990:	680a      	ldr	r2, [r1, #0]
 8006992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006996:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8006998:	e74e      	b.n	8006838 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800699a:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800699c:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 800699e:	2300      	movs	r3, #0
        return HAL_ERROR;
 80069a0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069a2:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80069a4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80069a8:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 80069ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80069ae:	2001      	movs	r0, #1
}
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	bf00      	nop
 80069b4:	40020058 	.word	0x40020058
 80069b8:	40020040 	.word	0x40020040
 80069bc:	40020010 	.word	0x40020010
 80069c0:	40020028 	.word	0x40020028
 80069c4:	40020070 	.word	0x40020070
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069d4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80069d6:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069d8:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069da:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069de:	4c16      	ldr	r4, [pc, #88]	; (8006a38 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069e0:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069e2:	42a2      	cmp	r2, r4
 80069e4:	bf18      	it	ne
 80069e6:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ea:	bf0c      	ite	eq
 80069ec:	2301      	moveq	r3, #1
 80069ee:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069f0:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069f2:	4812      	ldr	r0, [pc, #72]	; (8006a3c <HAL_DMA_Abort+0x2e4>)
 80069f4:	4912      	ldr	r1, [pc, #72]	; (8006a40 <HAL_DMA_Abort+0x2e8>)
 80069f6:	4282      	cmp	r2, r0
 80069f8:	bf08      	it	eq
 80069fa:	f043 0301 	orreq.w	r3, r3, #1
 80069fe:	3028      	adds	r0, #40	; 0x28
 8006a00:	428a      	cmp	r2, r1
 8006a02:	bf08      	it	eq
 8006a04:	f043 0301 	orreq.w	r3, r3, #1
 8006a08:	3128      	adds	r1, #40	; 0x28
 8006a0a:	4282      	cmp	r2, r0
 8006a0c:	bf08      	it	eq
 8006a0e:	f043 0301 	orreq.w	r3, r3, #1
 8006a12:	428a      	cmp	r2, r1
 8006a14:	bf08      	it	eq
 8006a16:	f043 0301 	orreq.w	r3, r3, #1
 8006a1a:	3114      	adds	r1, #20
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	bf08      	it	eq
 8006a20:	f043 0301 	orreq.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f47f af6c 	bne.w	8006902 <HAL_DMA_Abort+0x1aa>
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <HAL_DMA_Abort+0x2ec>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	f43f af68 	beq.w	8006902 <HAL_DMA_Abort+0x1aa>
 8006a32:	e772      	b.n	800691a <HAL_DMA_Abort+0x1c2>
 8006a34:	5802541c 	.word	0x5802541c
 8006a38:	58025408 	.word	0x58025408
 8006a3c:	58025430 	.word	0x58025430
 8006a40:	58025444 	.word	0x58025444
 8006a44:	58025494 	.word	0x58025494

08006a48 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d05f      	beq.n	8006b0c <HAL_DMA_Abort_IT+0xc4>
{
 8006a4c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a4e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8006a52:	4603      	mov	r3, r0
 8006a54:	2a02      	cmp	r2, #2
 8006a56:	d155      	bne.n	8006b04 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a58:	6801      	ldr	r1, [r0, #0]
 8006a5a:	4a57      	ldr	r2, [pc, #348]	; (8006bb8 <HAL_DMA_Abort_IT+0x170>)
 8006a5c:	4291      	cmp	r1, r2
 8006a5e:	d048      	beq.n	8006af2 <HAL_DMA_Abort_IT+0xaa>
 8006a60:	3218      	adds	r2, #24
 8006a62:	4291      	cmp	r1, r2
 8006a64:	d045      	beq.n	8006af2 <HAL_DMA_Abort_IT+0xaa>
 8006a66:	3230      	adds	r2, #48	; 0x30
 8006a68:	4c54      	ldr	r4, [pc, #336]	; (8006bbc <HAL_DMA_Abort_IT+0x174>)
 8006a6a:	4855      	ldr	r0, [pc, #340]	; (8006bc0 <HAL_DMA_Abort_IT+0x178>)
 8006a6c:	42a1      	cmp	r1, r4
 8006a6e:	bf18      	it	ne
 8006a70:	4291      	cmpne	r1, r2
 8006a72:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8006a76:	bf0c      	ite	eq
 8006a78:	2201      	moveq	r2, #1
 8006a7a:	2200      	movne	r2, #0
 8006a7c:	4281      	cmp	r1, r0
 8006a7e:	bf08      	it	eq
 8006a80:	f042 0201 	orreq.w	r2, r2, #1
 8006a84:	3030      	adds	r0, #48	; 0x30
 8006a86:	42a1      	cmp	r1, r4
 8006a88:	bf08      	it	eq
 8006a8a:	f042 0201 	orreq.w	r2, r2, #1
 8006a8e:	3430      	adds	r4, #48	; 0x30
 8006a90:	4281      	cmp	r1, r0
 8006a92:	bf08      	it	eq
 8006a94:	f042 0201 	orreq.w	r2, r2, #1
 8006a98:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006a9c:	42a1      	cmp	r1, r4
 8006a9e:	bf08      	it	eq
 8006aa0:	f042 0201 	orreq.w	r2, r2, #1
 8006aa4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8006aa8:	4281      	cmp	r1, r0
 8006aaa:	bf08      	it	eq
 8006aac:	f042 0201 	orreq.w	r2, r2, #1
 8006ab0:	3030      	adds	r0, #48	; 0x30
 8006ab2:	42a1      	cmp	r1, r4
 8006ab4:	bf08      	it	eq
 8006ab6:	f042 0201 	orreq.w	r2, r2, #1
 8006aba:	3430      	adds	r4, #48	; 0x30
 8006abc:	4281      	cmp	r1, r0
 8006abe:	bf08      	it	eq
 8006ac0:	f042 0201 	orreq.w	r2, r2, #1
 8006ac4:	3030      	adds	r0, #48	; 0x30
 8006ac6:	42a1      	cmp	r1, r4
 8006ac8:	bf08      	it	eq
 8006aca:	f042 0201 	orreq.w	r2, r2, #1
 8006ace:	3430      	adds	r4, #48	; 0x30
 8006ad0:	4281      	cmp	r1, r0
 8006ad2:	bf08      	it	eq
 8006ad4:	f042 0201 	orreq.w	r2, r2, #1
 8006ad8:	3030      	adds	r0, #48	; 0x30
 8006ada:	42a1      	cmp	r1, r4
 8006adc:	bf08      	it	eq
 8006ade:	f042 0201 	orreq.w	r2, r2, #1
 8006ae2:	4281      	cmp	r1, r0
 8006ae4:	bf08      	it	eq
 8006ae6:	f042 0201 	orreq.w	r2, r2, #1
 8006aea:	b912      	cbnz	r2, 8006af2 <HAL_DMA_Abort_IT+0xaa>
 8006aec:	4a35      	ldr	r2, [pc, #212]	; (8006bc4 <HAL_DMA_Abort_IT+0x17c>)
 8006aee:	4291      	cmp	r1, r2
 8006af0:	d10e      	bne.n	8006b10 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006af2:	2204      	movs	r2, #4
  return HAL_OK;
 8006af4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8006af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006afa:	680b      	ldr	r3, [r1, #0]
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	600b      	str	r3, [r1, #0]
}
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b04:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8006b06:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
}
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006b0c:	2001      	movs	r0, #1
}
 8006b0e:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b10:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_DMA_Abort_IT+0x180>)
 8006b12:	4d2e      	ldr	r5, [pc, #184]	; (8006bcc <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b14:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b16:	42a9      	cmp	r1, r5
 8006b18:	bf18      	it	ne
 8006b1a:	4291      	cmpne	r1, r2
 8006b1c:	4c2c      	ldr	r4, [pc, #176]	; (8006bd0 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b1e:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b22:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8006b26:	bf0c      	ite	eq
 8006b28:	2201      	moveq	r2, #1
 8006b2a:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b2c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b2e:	42a1      	cmp	r1, r4
 8006b30:	bf08      	it	eq
 8006b32:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8006b36:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b38:	3428      	adds	r4, #40	; 0x28
 8006b3a:	42a9      	cmp	r1, r5
 8006b3c:	bf08      	it	eq
 8006b3e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8006b42:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b46:	42a1      	cmp	r1, r4
 8006b48:	bf08      	it	eq
 8006b4a:	f042 0201 	orreq.w	r2, r2, #1
 8006b4e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8006b50:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b52:	42a1      	cmp	r1, r4
 8006b54:	bf08      	it	eq
 8006b56:	f042 0201 	orreq.w	r2, r2, #1
 8006b5a:	481e      	ldr	r0, [pc, #120]	; (8006bd4 <HAL_DMA_Abort_IT+0x18c>)
 8006b5c:	4281      	cmp	r1, r0
 8006b5e:	bf08      	it	eq
 8006b60:	f042 0201 	orreq.w	r2, r2, #1
 8006b64:	b912      	cbnz	r2, 8006b6c <HAL_DMA_Abort_IT+0x124>
 8006b66:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <HAL_DMA_Abort_IT+0x190>)
 8006b68:	4291      	cmp	r1, r2
 8006b6a:	d117      	bne.n	8006b9c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b6c:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b6e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b70:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b74:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b76:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b7a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b7e:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b80:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b82:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b86:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8006b8a:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8006b8c:	b132      	cbz	r2, 8006b9c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b8e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b90:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006b98:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b9a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8006b9c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8006b9e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8006ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8006ba6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8006baa:	b11a      	cbz	r2, 8006bb4 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8006bac:	4618      	mov	r0, r3
 8006bae:	4790      	blx	r2
  return HAL_OK;
 8006bb0:	4620      	mov	r0, r4
}
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8006bb4:	4610      	mov	r0, r2
}
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	40020010 	.word	0x40020010
 8006bbc:	40020040 	.word	0x40020040
 8006bc0:	40020070 	.word	0x40020070
 8006bc4:	400204b8 	.word	0x400204b8
 8006bc8:	5802541c 	.word	0x5802541c
 8006bcc:	58025408 	.word	0x58025408
 8006bd0:	58025430 	.word	0x58025430
 8006bd4:	58025480 	.word	0x58025480
 8006bd8:	58025494 	.word	0x58025494

08006bdc <HAL_DMA_IRQHandler>:
{
 8006bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8006be0:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8006be2:	4b9c      	ldr	r3, [pc, #624]	; (8006e54 <HAL_DMA_IRQHandler+0x278>)
{
 8006be4:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006be6:	4e9c      	ldr	r6, [pc, #624]	; (8006e58 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8006be8:	681d      	ldr	r5, [r3, #0]
{
 8006bea:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8006bec:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bee:	6803      	ldr	r3, [r0, #0]
 8006bf0:	4a9a      	ldr	r2, [pc, #616]	; (8006e5c <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bf2:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	bf18      	it	ne
 8006bf8:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8006bfa:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bfc:	bf08      	it	eq
 8006bfe:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8006c00:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c02:	bf18      	it	ne
 8006c04:	2600      	movne	r6, #0
 8006c06:	d045      	beq.n	8006c94 <HAL_DMA_IRQHandler+0xb8>
 8006c08:	3218      	adds	r2, #24
 8006c0a:	4895      	ldr	r0, [pc, #596]	; (8006e60 <HAL_DMA_IRQHandler+0x284>)
 8006c0c:	4283      	cmp	r3, r0
 8006c0e:	bf18      	it	ne
 8006c10:	4293      	cmpne	r3, r2
 8006c12:	f100 0018 	add.w	r0, r0, #24
 8006c16:	bf0c      	ite	eq
 8006c18:	2201      	moveq	r2, #1
 8006c1a:	2200      	movne	r2, #0
 8006c1c:	4283      	cmp	r3, r0
 8006c1e:	bf08      	it	eq
 8006c20:	f042 0201 	orreq.w	r2, r2, #1
 8006c24:	3018      	adds	r0, #24
 8006c26:	4283      	cmp	r3, r0
 8006c28:	bf08      	it	eq
 8006c2a:	f042 0201 	orreq.w	r2, r2, #1
 8006c2e:	3018      	adds	r0, #24
 8006c30:	4283      	cmp	r3, r0
 8006c32:	bf08      	it	eq
 8006c34:	f042 0201 	orreq.w	r2, r2, #1
 8006c38:	3018      	adds	r0, #24
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	bf08      	it	eq
 8006c3e:	f042 0201 	orreq.w	r2, r2, #1
 8006c42:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8006c46:	4283      	cmp	r3, r0
 8006c48:	bf08      	it	eq
 8006c4a:	f042 0201 	orreq.w	r2, r2, #1
 8006c4e:	3018      	adds	r0, #24
 8006c50:	4283      	cmp	r3, r0
 8006c52:	bf08      	it	eq
 8006c54:	f042 0201 	orreq.w	r2, r2, #1
 8006c58:	3018      	adds	r0, #24
 8006c5a:	4283      	cmp	r3, r0
 8006c5c:	bf08      	it	eq
 8006c5e:	f042 0201 	orreq.w	r2, r2, #1
 8006c62:	3018      	adds	r0, #24
 8006c64:	4283      	cmp	r3, r0
 8006c66:	bf08      	it	eq
 8006c68:	f042 0201 	orreq.w	r2, r2, #1
 8006c6c:	3018      	adds	r0, #24
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	bf08      	it	eq
 8006c72:	f042 0201 	orreq.w	r2, r2, #1
 8006c76:	3018      	adds	r0, #24
 8006c78:	4283      	cmp	r3, r0
 8006c7a:	bf08      	it	eq
 8006c7c:	f042 0201 	orreq.w	r2, r2, #1
 8006c80:	3018      	adds	r0, #24
 8006c82:	4283      	cmp	r3, r0
 8006c84:	bf08      	it	eq
 8006c86:	f042 0201 	orreq.w	r2, r2, #1
 8006c8a:	b91a      	cbnz	r2, 8006c94 <HAL_DMA_IRQHandler+0xb8>
 8006c8c:	4a75      	ldr	r2, [pc, #468]	; (8006e64 <HAL_DMA_IRQHandler+0x288>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	f040 8250 	bne.w	8007134 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c94:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 8006c98:	2208      	movs	r2, #8
 8006c9a:	f001 0c1f 	and.w	ip, r1, #31
 8006c9e:	fa02 f20c 	lsl.w	r2, r2, ip
 8006ca2:	4217      	tst	r7, r2
 8006ca4:	f040 8188 	bne.w	8006fb8 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ca8:	fa27 f20c 	lsr.w	r2, r7, ip
 8006cac:	07d2      	lsls	r2, r2, #31
 8006cae:	d50c      	bpl.n	8006cca <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	0610      	lsls	r0, r2, #24
 8006cb4:	d509      	bpl.n	8006cca <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f20c 	lsl.w	r2, r2, ip
 8006cbc:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006cbe:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8006cc2:	f042 0202 	orr.w	r2, r2, #2
 8006cc6:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cca:	f04f 0e04 	mov.w	lr, #4
 8006cce:	fa0e f00c 	lsl.w	r0, lr, ip
 8006cd2:	4238      	tst	r0, r7
 8006cd4:	d05b      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006cd6:	2e00      	cmp	r6, #0
 8006cd8:	d14f      	bne.n	8006d7a <HAL_DMA_IRQHandler+0x19e>
 8006cda:	4a61      	ldr	r2, [pc, #388]	; (8006e60 <HAL_DMA_IRQHandler+0x284>)
 8006cdc:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8006e68 <HAL_DMA_IRQHandler+0x28c>
 8006ce0:	4543      	cmp	r3, r8
 8006ce2:	bf18      	it	ne
 8006ce4:	4293      	cmpne	r3, r2
 8006ce6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006cea:	bf0c      	ite	eq
 8006cec:	2201      	moveq	r2, #1
 8006cee:	2200      	movne	r2, #0
 8006cf0:	4543      	cmp	r3, r8
 8006cf2:	bf08      	it	eq
 8006cf4:	f042 0201 	orreq.w	r2, r2, #1
 8006cf8:	f108 0818 	add.w	r8, r8, #24
 8006cfc:	4543      	cmp	r3, r8
 8006cfe:	bf08      	it	eq
 8006d00:	f042 0201 	orreq.w	r2, r2, #1
 8006d04:	f108 0818 	add.w	r8, r8, #24
 8006d08:	4543      	cmp	r3, r8
 8006d0a:	bf08      	it	eq
 8006d0c:	f042 0201 	orreq.w	r2, r2, #1
 8006d10:	f108 0818 	add.w	r8, r8, #24
 8006d14:	4543      	cmp	r3, r8
 8006d16:	bf08      	it	eq
 8006d18:	f042 0201 	orreq.w	r2, r2, #1
 8006d1c:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8006d20:	4543      	cmp	r3, r8
 8006d22:	bf08      	it	eq
 8006d24:	f042 0201 	orreq.w	r2, r2, #1
 8006d28:	f108 0818 	add.w	r8, r8, #24
 8006d2c:	4543      	cmp	r3, r8
 8006d2e:	bf08      	it	eq
 8006d30:	f042 0201 	orreq.w	r2, r2, #1
 8006d34:	f108 0818 	add.w	r8, r8, #24
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	bf08      	it	eq
 8006d3c:	f042 0201 	orreq.w	r2, r2, #1
 8006d40:	f108 0818 	add.w	r8, r8, #24
 8006d44:	4543      	cmp	r3, r8
 8006d46:	bf08      	it	eq
 8006d48:	f042 0201 	orreq.w	r2, r2, #1
 8006d4c:	f108 0818 	add.w	r8, r8, #24
 8006d50:	4543      	cmp	r3, r8
 8006d52:	bf08      	it	eq
 8006d54:	f042 0201 	orreq.w	r2, r2, #1
 8006d58:	f108 0818 	add.w	r8, r8, #24
 8006d5c:	4543      	cmp	r3, r8
 8006d5e:	bf08      	it	eq
 8006d60:	f042 0201 	orreq.w	r2, r2, #1
 8006d64:	f108 0818 	add.w	r8, r8, #24
 8006d68:	4543      	cmp	r3, r8
 8006d6a:	bf08      	it	eq
 8006d6c:	f042 0201 	orreq.w	r2, r2, #1
 8006d70:	b91a      	cbnz	r2, 8006d7a <HAL_DMA_IRQHandler+0x19e>
 8006d72:	4a3c      	ldr	r2, [pc, #240]	; (8006e64 <HAL_DMA_IRQHandler+0x288>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	f040 8219 	bne.w	80071ac <HAL_DMA_IRQHandler+0x5d0>
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	0792      	lsls	r2, r2, #30
 8006d7e:	d506      	bpl.n	8006d8e <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d80:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d82:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8006d86:	f042 0204 	orr.w	r2, r2, #4
 8006d8a:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d8e:	2210      	movs	r2, #16
 8006d90:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006d94:	ea1c 0f07 	tst.w	ip, r7
 8006d98:	d06c      	beq.n	8006e74 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	d145      	bne.n	8006e2a <HAL_DMA_IRQHandler+0x24e>
 8006d9e:	4a30      	ldr	r2, [pc, #192]	; (8006e60 <HAL_DMA_IRQHandler+0x284>)
 8006da0:	4e31      	ldr	r6, [pc, #196]	; (8006e68 <HAL_DMA_IRQHandler+0x28c>)
 8006da2:	42b3      	cmp	r3, r6
 8006da4:	bf18      	it	ne
 8006da6:	4293      	cmpne	r3, r2
 8006da8:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8006dac:	bf0c      	ite	eq
 8006dae:	2201      	moveq	r2, #1
 8006db0:	2200      	movne	r2, #0
 8006db2:	42b3      	cmp	r3, r6
 8006db4:	bf08      	it	eq
 8006db6:	f042 0201 	orreq.w	r2, r2, #1
 8006dba:	3618      	adds	r6, #24
 8006dbc:	42b3      	cmp	r3, r6
 8006dbe:	bf08      	it	eq
 8006dc0:	f042 0201 	orreq.w	r2, r2, #1
 8006dc4:	3618      	adds	r6, #24
 8006dc6:	42b3      	cmp	r3, r6
 8006dc8:	bf08      	it	eq
 8006dca:	f042 0201 	orreq.w	r2, r2, #1
 8006dce:	3618      	adds	r6, #24
 8006dd0:	42b3      	cmp	r3, r6
 8006dd2:	bf08      	it	eq
 8006dd4:	f042 0201 	orreq.w	r2, r2, #1
 8006dd8:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8006ddc:	42b3      	cmp	r3, r6
 8006dde:	bf08      	it	eq
 8006de0:	f042 0201 	orreq.w	r2, r2, #1
 8006de4:	3618      	adds	r6, #24
 8006de6:	42b3      	cmp	r3, r6
 8006de8:	bf08      	it	eq
 8006dea:	f042 0201 	orreq.w	r2, r2, #1
 8006dee:	3618      	adds	r6, #24
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	bf08      	it	eq
 8006df4:	f042 0201 	orreq.w	r2, r2, #1
 8006df8:	3618      	adds	r6, #24
 8006dfa:	42b3      	cmp	r3, r6
 8006dfc:	bf08      	it	eq
 8006dfe:	f042 0201 	orreq.w	r2, r2, #1
 8006e02:	3618      	adds	r6, #24
 8006e04:	42b3      	cmp	r3, r6
 8006e06:	bf08      	it	eq
 8006e08:	f042 0201 	orreq.w	r2, r2, #1
 8006e0c:	3618      	adds	r6, #24
 8006e0e:	42b3      	cmp	r3, r6
 8006e10:	bf08      	it	eq
 8006e12:	f042 0201 	orreq.w	r2, r2, #1
 8006e16:	3618      	adds	r6, #24
 8006e18:	42b3      	cmp	r3, r6
 8006e1a:	bf08      	it	eq
 8006e1c:	f042 0201 	orreq.w	r2, r2, #1
 8006e20:	b91a      	cbnz	r2, 8006e2a <HAL_DMA_IRQHandler+0x24e>
 8006e22:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <HAL_DMA_IRQHandler+0x288>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	f040 81c9 	bne.w	80071bc <HAL_DMA_IRQHandler+0x5e0>
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	0710      	lsls	r0, r2, #28
 8006e2e:	d521      	bpl.n	8006e74 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e30:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	0356      	lsls	r6, r2, #13
 8006e38:	f100 814c 	bmi.w	80070d4 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	05d2      	lsls	r2, r2, #23
 8006e40:	d403      	bmi.n	8006e4a <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	f022 0208 	bic.w	r2, r2, #8
 8006e48:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8006e4a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8006e4e:	b18b      	cbz	r3, 8006e74 <HAL_DMA_IRQHandler+0x298>
 8006e50:	e00c      	b.n	8006e6c <HAL_DMA_IRQHandler+0x290>
 8006e52:	bf00      	nop
 8006e54:	2400030c 	.word	0x2400030c
 8006e58:	40020010 	.word	0x40020010
 8006e5c:	40020028 	.word	0x40020028
 8006e60:	40020058 	.word	0x40020058
 8006e64:	400204b8 	.word	0x400204b8
 8006e68:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8006e6c:	4648      	mov	r0, r9
 8006e6e:	4798      	blx	r3
 8006e70:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e74:	f001 011f 	and.w	r1, r1, #31
 8006e78:	2620      	movs	r6, #32
 8006e7a:	408e      	lsls	r6, r1
 8006e7c:	423e      	tst	r6, r7
 8006e7e:	d068      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e80:	f8d9 2000 	ldr.w	r2, [r9]
 8006e84:	4ba5      	ldr	r3, [pc, #660]	; (800711c <HAL_DMA_IRQHandler+0x540>)
 8006e86:	4fa6      	ldr	r7, [pc, #664]	; (8007120 <HAL_DMA_IRQHandler+0x544>)
 8006e88:	42ba      	cmp	r2, r7
 8006e8a:	bf18      	it	ne
 8006e8c:	429a      	cmpne	r2, r3
 8006e8e:	f107 0718 	add.w	r7, r7, #24
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	42ba      	cmp	r2, r7
 8006e9a:	bf08      	it	eq
 8006e9c:	f043 0301 	orreq.w	r3, r3, #1
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	42ba      	cmp	r2, r7
 8006ea4:	bf08      	it	eq
 8006ea6:	f043 0301 	orreq.w	r3, r3, #1
 8006eaa:	3718      	adds	r7, #24
 8006eac:	42ba      	cmp	r2, r7
 8006eae:	bf08      	it	eq
 8006eb0:	f043 0301 	orreq.w	r3, r3, #1
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	42ba      	cmp	r2, r7
 8006eb8:	bf08      	it	eq
 8006eba:	f043 0301 	orreq.w	r3, r3, #1
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	42ba      	cmp	r2, r7
 8006ec2:	bf08      	it	eq
 8006ec4:	f043 0301 	orreq.w	r3, r3, #1
 8006ec8:	3718      	adds	r7, #24
 8006eca:	42ba      	cmp	r2, r7
 8006ecc:	bf08      	it	eq
 8006ece:	f043 0301 	orreq.w	r3, r3, #1
 8006ed2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8006ed6:	42ba      	cmp	r2, r7
 8006ed8:	bf08      	it	eq
 8006eda:	f043 0301 	orreq.w	r3, r3, #1
 8006ede:	3718      	adds	r7, #24
 8006ee0:	42ba      	cmp	r2, r7
 8006ee2:	bf08      	it	eq
 8006ee4:	f043 0301 	orreq.w	r3, r3, #1
 8006ee8:	3718      	adds	r7, #24
 8006eea:	42ba      	cmp	r2, r7
 8006eec:	bf08      	it	eq
 8006eee:	f043 0301 	orreq.w	r3, r3, #1
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	42ba      	cmp	r2, r7
 8006ef6:	bf08      	it	eq
 8006ef8:	f043 0301 	orreq.w	r3, r3, #1
 8006efc:	3718      	adds	r7, #24
 8006efe:	42ba      	cmp	r2, r7
 8006f00:	bf08      	it	eq
 8006f02:	f043 0301 	orreq.w	r3, r3, #1
 8006f06:	3718      	adds	r7, #24
 8006f08:	42ba      	cmp	r2, r7
 8006f0a:	bf08      	it	eq
 8006f0c:	f043 0301 	orreq.w	r3, r3, #1
 8006f10:	3718      	adds	r7, #24
 8006f12:	42ba      	cmp	r2, r7
 8006f14:	bf08      	it	eq
 8006f16:	f043 0301 	orreq.w	r3, r3, #1
 8006f1a:	b91b      	cbnz	r3, 8006f24 <HAL_DMA_IRQHandler+0x348>
 8006f1c:	4b81      	ldr	r3, [pc, #516]	; (8007124 <HAL_DMA_IRQHandler+0x548>)
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	f040 8162 	bne.w	80071e8 <HAL_DMA_IRQHandler+0x60c>
 8006f24:	6813      	ldr	r3, [r2, #0]
 8006f26:	06db      	lsls	r3, r3, #27
 8006f28:	d513      	bpl.n	8006f52 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f2a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f2c:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8006f30:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f32:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f34:	f000 80ae 	beq.w	8007094 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f38:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f3c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f3e:	f000 80d3 	beq.w	80070e8 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f42:	031c      	lsls	r4, r3, #12
 8006f44:	f140 80de 	bpl.w	8007104 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 8006f48:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8006f4c:	b10b      	cbz	r3, 8006f52 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8006f4e:	4648      	mov	r0, r9
 8006f50:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f52:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80b9 	beq.w	80070ce <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f5c:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8006f60:	07d8      	lsls	r0, r3, #31
 8006f62:	d51f      	bpl.n	8006fa4 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8006f64:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f68:	2104      	movs	r1, #4
 8006f6a:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f76:	4b6c      	ldr	r3, [pc, #432]	; (8007128 <HAL_DMA_IRQHandler+0x54c>)
 8006f78:	fba3 3505 	umull	r3, r5, r3, r5
 8006f7c:	0aad      	lsrs	r5, r5, #10
 8006f7e:	e002      	b.n	8006f86 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	d504      	bpl.n	8006f90 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	42ab      	cmp	r3, r5
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	d9f7      	bls.n	8006f80 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f94:	bf4c      	ite	mi
 8006f96:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8006f98:	2301      	movpl	r3, #1
 8006f9a:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8006fa4:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8090 	beq.w	80070ce <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 8006fae:	4648      	mov	r0, r9
}
 8006fb0:	b003      	add	sp, #12
 8006fb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 8006fb6:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	0740      	lsls	r0, r0, #29
 8006fbc:	d50a      	bpl.n	8006fd4 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	f020 0004 	bic.w	r0, r0, #4
 8006fc4:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fc6:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fc8:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006fd4:	fa27 f20c 	lsr.w	r2, r7, ip
 8006fd8:	07d2      	lsls	r2, r2, #31
 8006fda:	f57f ae76 	bpl.w	8006cca <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006fde:	4a53      	ldr	r2, [pc, #332]	; (800712c <HAL_DMA_IRQHandler+0x550>)
 8006fe0:	4853      	ldr	r0, [pc, #332]	; (8007130 <HAL_DMA_IRQHandler+0x554>)
 8006fe2:	4283      	cmp	r3, r0
 8006fe4:	bf18      	it	ne
 8006fe6:	4293      	cmpne	r3, r2
 8006fe8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006fec:	bf0c      	ite	eq
 8006fee:	2201      	moveq	r2, #1
 8006ff0:	2200      	movne	r2, #0
 8006ff2:	4283      	cmp	r3, r0
 8006ff4:	bf08      	it	eq
 8006ff6:	f042 0201 	orreq.w	r2, r2, #1
 8006ffa:	3018      	adds	r0, #24
 8006ffc:	4283      	cmp	r3, r0
 8006ffe:	bf08      	it	eq
 8007000:	f042 0201 	orreq.w	r2, r2, #1
 8007004:	3018      	adds	r0, #24
 8007006:	4283      	cmp	r3, r0
 8007008:	bf08      	it	eq
 800700a:	f042 0201 	orreq.w	r2, r2, #1
 800700e:	3018      	adds	r0, #24
 8007010:	4283      	cmp	r3, r0
 8007012:	bf08      	it	eq
 8007014:	f042 0201 	orreq.w	r2, r2, #1
 8007018:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800701c:	4283      	cmp	r3, r0
 800701e:	bf08      	it	eq
 8007020:	f042 0201 	orreq.w	r2, r2, #1
 8007024:	3018      	adds	r0, #24
 8007026:	4283      	cmp	r3, r0
 8007028:	bf08      	it	eq
 800702a:	f042 0201 	orreq.w	r2, r2, #1
 800702e:	3018      	adds	r0, #24
 8007030:	4283      	cmp	r3, r0
 8007032:	bf08      	it	eq
 8007034:	f042 0201 	orreq.w	r2, r2, #1
 8007038:	3018      	adds	r0, #24
 800703a:	4283      	cmp	r3, r0
 800703c:	bf08      	it	eq
 800703e:	f042 0201 	orreq.w	r2, r2, #1
 8007042:	3018      	adds	r0, #24
 8007044:	4283      	cmp	r3, r0
 8007046:	bf08      	it	eq
 8007048:	f042 0201 	orreq.w	r2, r2, #1
 800704c:	3018      	adds	r0, #24
 800704e:	4283      	cmp	r3, r0
 8007050:	bf08      	it	eq
 8007052:	f042 0201 	orreq.w	r2, r2, #1
 8007056:	3018      	adds	r0, #24
 8007058:	4283      	cmp	r3, r0
 800705a:	bf08      	it	eq
 800705c:	f042 0201 	orreq.w	r2, r2, #1
 8007060:	3018      	adds	r0, #24
 8007062:	4283      	cmp	r3, r0
 8007064:	bf08      	it	eq
 8007066:	f042 0201 	orreq.w	r2, r2, #1
 800706a:	2a00      	cmp	r2, #0
 800706c:	f47f ae20 	bne.w	8006cb0 <HAL_DMA_IRQHandler+0xd4>
 8007070:	2e00      	cmp	r6, #0
 8007072:	f47f ae1d 	bne.w	8006cb0 <HAL_DMA_IRQHandler+0xd4>
 8007076:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007078:	2204      	movs	r2, #4
 800707a:	fa02 f20c 	lsl.w	r2, r2, ip
 800707e:	423a      	tst	r2, r7
 8007080:	f040 8094 	bne.w	80071ac <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007084:	2210      	movs	r2, #16
 8007086:	fa02 fc0c 	lsl.w	ip, r2, ip
 800708a:	ea17 0f0c 	tst.w	r7, ip
 800708e:	f43f aef1 	beq.w	8006e74 <HAL_DMA_IRQHandler+0x298>
 8007092:	e684      	b.n	8006d9e <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007094:	f023 0316 	bic.w	r3, r3, #22
 8007098:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800709a:	6953      	ldr	r3, [r2, #20]
 800709c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070a2:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80070a6:	b39b      	cbz	r3, 8007110 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070a8:	6813      	ldr	r3, [r2, #0]
 80070aa:	f023 0308 	bic.w	r3, r3, #8
 80070ae:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070b0:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80070b2:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 80070b4:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070b6:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80070ba:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070be:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80070c0:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80070c4:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f af70 	bne.w	8006fae <HAL_DMA_IRQHandler+0x3d2>
}
 80070ce:	b003      	add	sp, #12
 80070d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	0318      	lsls	r0, r3, #12
 80070d8:	f57f aeb7 	bpl.w	8006e4a <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80070dc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f aec3 	bne.w	8006e6c <HAL_DMA_IRQHandler+0x290>
 80070e6:	e6c5      	b.n	8006e74 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80070ec:	f47f af2c 	bne.w	8006f48 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80070f0:	6811      	ldr	r1, [r2, #0]
 80070f2:	f021 0110 	bic.w	r1, r1, #16
 80070f6:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80070f8:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80070fa:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80070fe:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8007102:	e721      	b.n	8006f48 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8007104:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8007108:	2b00      	cmp	r3, #0
 800710a:	f47f af20 	bne.w	8006f4e <HAL_DMA_IRQHandler+0x372>
 800710e:	e720      	b.n	8006f52 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007110:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1c7      	bne.n	80070a8 <HAL_DMA_IRQHandler+0x4cc>
 8007118:	e7ca      	b.n	80070b0 <HAL_DMA_IRQHandler+0x4d4>
 800711a:	bf00      	nop
 800711c:	40020010 	.word	0x40020010
 8007120:	40020028 	.word	0x40020028
 8007124:	400204b8 	.word	0x400204b8
 8007128:	1b4e81b5 	.word	0x1b4e81b5
 800712c:	40020058 	.word	0x40020058
 8007130:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007134:	4a4e      	ldr	r2, [pc, #312]	; (8007270 <HAL_DMA_IRQHandler+0x694>)
 8007136:	4d4f      	ldr	r5, [pc, #316]	; (8007274 <HAL_DMA_IRQHandler+0x698>)
 8007138:	42ab      	cmp	r3, r5
 800713a:	bf18      	it	ne
 800713c:	4293      	cmpne	r3, r2
 800713e:	f105 0514 	add.w	r5, r5, #20
 8007142:	bf0c      	ite	eq
 8007144:	2201      	moveq	r2, #1
 8007146:	2200      	movne	r2, #0
 8007148:	42ab      	cmp	r3, r5
 800714a:	bf08      	it	eq
 800714c:	f042 0201 	orreq.w	r2, r2, #1
 8007150:	3514      	adds	r5, #20
 8007152:	42ab      	cmp	r3, r5
 8007154:	bf08      	it	eq
 8007156:	f042 0201 	orreq.w	r2, r2, #1
 800715a:	3514      	adds	r5, #20
 800715c:	42ab      	cmp	r3, r5
 800715e:	bf08      	it	eq
 8007160:	f042 0201 	orreq.w	r2, r2, #1
 8007164:	3514      	adds	r5, #20
 8007166:	42ab      	cmp	r3, r5
 8007168:	bf08      	it	eq
 800716a:	f042 0201 	orreq.w	r2, r2, #1
 800716e:	3514      	adds	r5, #20
 8007170:	42ab      	cmp	r3, r5
 8007172:	bf08      	it	eq
 8007174:	f042 0201 	orreq.w	r2, r2, #1
 8007178:	b912      	cbnz	r2, 8007180 <HAL_DMA_IRQHandler+0x5a4>
 800717a:	4a3f      	ldr	r2, [pc, #252]	; (8007278 <HAL_DMA_IRQHandler+0x69c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d1a6      	bne.n	80070ce <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007180:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 8007184:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007186:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007188:	f005 051f 	and.w	r5, r5, #31
 800718c:	40ae      	lsls	r6, r5
 800718e:	420e      	tst	r6, r1
 8007190:	d019      	beq.n	80071c6 <HAL_DMA_IRQHandler+0x5ea>
 8007192:	0757      	lsls	r7, r2, #29
 8007194:	d517      	bpl.n	80071c6 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007196:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007198:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800719a:	d54b      	bpl.n	8007234 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800719c:	03d1      	lsls	r1, r2, #15
 800719e:	d44f      	bmi.n	8007240 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071a0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f47f af02 	bne.w	8006fae <HAL_DMA_IRQHandler+0x3d2>
 80071aa:	e790      	b.n	80070ce <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071ac:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071ae:	2210      	movs	r2, #16
 80071b0:	fa02 fc0c 	lsl.w	ip, r2, ip
 80071b4:	ea17 0f0c 	tst.w	r7, ip
 80071b8:	f43f ae5c 	beq.w	8006e74 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	0752      	lsls	r2, r2, #29
 80071c0:	f57f ae58 	bpl.w	8006e74 <HAL_DMA_IRQHandler+0x298>
 80071c4:	e634      	b.n	8006e30 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071c6:	2602      	movs	r6, #2
 80071c8:	40ae      	lsls	r6, r5
 80071ca:	420e      	tst	r6, r1
 80071cc:	d011      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x616>
 80071ce:	0797      	lsls	r7, r2, #30
 80071d0:	d50f      	bpl.n	80071f2 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80071d2:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d4:	0414      	lsls	r4, r2, #16
 80071d6:	d539      	bpl.n	800724c <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071d8:	03d0      	lsls	r0, r2, #15
 80071da:	d443      	bmi.n	8007264 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 80071dc:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f47f aee4 	bne.w	8006fae <HAL_DMA_IRQHandler+0x3d2>
 80071e6:	e772      	b.n	80070ce <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80071e8:	6813      	ldr	r3, [r2, #0]
 80071ea:	079f      	lsls	r7, r3, #30
 80071ec:	f57f aeb1 	bpl.w	8006f52 <HAL_DMA_IRQHandler+0x376>
 80071f0:	e69b      	b.n	8006f2a <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80071f2:	2608      	movs	r6, #8
 80071f4:	40ae      	lsls	r6, r5
 80071f6:	420e      	tst	r6, r1
 80071f8:	f43f af69 	beq.w	80070ce <HAL_DMA_IRQHandler+0x4f2>
 80071fc:	0711      	lsls	r1, r2, #28
 80071fe:	f57f af66 	bpl.w	80070ce <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007202:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8007204:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007206:	f022 020e 	bic.w	r2, r2, #14
 800720a:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800720c:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800720e:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007212:	fa03 f505 	lsl.w	r5, r3, r5
 8007216:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007218:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800721c:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007220:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8007224:	2a00      	cmp	r2, #0
 8007226:	f43f af52 	beq.w	80070ce <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800722a:	4648      	mov	r0, r9
}
 800722c:	b003      	add	sp, #12
 800722e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8007232:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007234:	0692      	lsls	r2, r2, #26
 8007236:	d403      	bmi.n	8007240 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	f022 0204 	bic.w	r2, r2, #4
 800723e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8007240:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	f47f aeb2 	bne.w	8006fae <HAL_DMA_IRQHandler+0x3d2>
 800724a:	e740      	b.n	80070ce <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800724c:	f012 0220 	ands.w	r2, r2, #32
 8007250:	d108      	bne.n	8007264 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007252:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007254:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007256:	f021 010a 	bic.w	r1, r1, #10
 800725a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800725c:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8007260:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8007264:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	f47f aea0 	bne.w	8006fae <HAL_DMA_IRQHandler+0x3d2>
 800726e:	e72e      	b.n	80070ce <HAL_DMA_IRQHandler+0x4f2>
 8007270:	58025408 	.word	0x58025408
 8007274:	5802541c 	.word	0x5802541c
 8007278:	58025494 	.word	0x58025494

0800727c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007280:	680c      	ldr	r4, [r1, #0]
{
 8007282:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007284:	2c00      	cmp	r4, #0
 8007286:	f000 80a6 	beq.w	80073d6 <HAL_GPIO_Init+0x15a>
 800728a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800728e:	4f8e      	ldr	r7, [pc, #568]	; (80074c8 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8007290:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007292:	2201      	movs	r2, #1
 8007294:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8007296:	ea12 0e04 	ands.w	lr, r2, r4
 800729a:	f000 8095 	beq.w	80073c8 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800729e:	684d      	ldr	r5, [r1, #4]
 80072a0:	f005 0903 	and.w	r9, r5, #3
 80072a4:	f109 36ff 	add.w	r6, r9, #4294967295
 80072a8:	2e01      	cmp	r6, #1
 80072aa:	f240 8097 	bls.w	80073dc <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072ae:	f1b9 0f03 	cmp.w	r9, #3
 80072b2:	f040 80d1 	bne.w	8007458 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072b6:	fa09 f20c 	lsl.w	r2, r9, ip
 80072ba:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80072be:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072c0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072c4:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072c8:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80072cc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072ce:	d07b      	beq.n	80073c8 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072d0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80072d4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072d8:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072dc:	f042 0202 	orr.w	r2, r2, #2
 80072e0:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072e4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80072ec:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 80072f0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80072f4:	f002 0202 	and.w	r2, r2, #2
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80072fc:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80072fe:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007302:	fa02 f209 	lsl.w	r2, r2, r9
 8007306:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800730a:	4e70      	ldr	r6, [pc, #448]	; (80074cc <HAL_GPIO_Init+0x250>)
 800730c:	42b0      	cmp	r0, r6
 800730e:	d029      	beq.n	8007364 <HAL_GPIO_Init+0xe8>
 8007310:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007314:	42b0      	cmp	r0, r6
 8007316:	f000 80ac 	beq.w	8007472 <HAL_GPIO_Init+0x1f6>
 800731a:	4e6d      	ldr	r6, [pc, #436]	; (80074d0 <HAL_GPIO_Init+0x254>)
 800731c:	42b0      	cmp	r0, r6
 800731e:	f000 80ae 	beq.w	800747e <HAL_GPIO_Init+0x202>
 8007322:	4e6c      	ldr	r6, [pc, #432]	; (80074d4 <HAL_GPIO_Init+0x258>)
 8007324:	42b0      	cmp	r0, r6
 8007326:	f000 809e 	beq.w	8007466 <HAL_GPIO_Init+0x1ea>
 800732a:	4e6b      	ldr	r6, [pc, #428]	; (80074d8 <HAL_GPIO_Init+0x25c>)
 800732c:	42b0      	cmp	r0, r6
 800732e:	f000 80b2 	beq.w	8007496 <HAL_GPIO_Init+0x21a>
 8007332:	4e6a      	ldr	r6, [pc, #424]	; (80074dc <HAL_GPIO_Init+0x260>)
 8007334:	42b0      	cmp	r0, r6
 8007336:	f000 80b4 	beq.w	80074a2 <HAL_GPIO_Init+0x226>
 800733a:	4e69      	ldr	r6, [pc, #420]	; (80074e0 <HAL_GPIO_Init+0x264>)
 800733c:	42b0      	cmp	r0, r6
 800733e:	f000 80a4 	beq.w	800748a <HAL_GPIO_Init+0x20e>
 8007342:	4e68      	ldr	r6, [pc, #416]	; (80074e4 <HAL_GPIO_Init+0x268>)
 8007344:	42b0      	cmp	r0, r6
 8007346:	f000 80b2 	beq.w	80074ae <HAL_GPIO_Init+0x232>
 800734a:	4e67      	ldr	r6, [pc, #412]	; (80074e8 <HAL_GPIO_Init+0x26c>)
 800734c:	42b0      	cmp	r0, r6
 800734e:	f000 80b4 	beq.w	80074ba <HAL_GPIO_Init+0x23e>
 8007352:	4e66      	ldr	r6, [pc, #408]	; (80074ec <HAL_GPIO_Init+0x270>)
 8007354:	42b0      	cmp	r0, r6
 8007356:	bf0c      	ite	eq
 8007358:	2609      	moveq	r6, #9
 800735a:	260a      	movne	r6, #10
 800735c:	fa06 f909 	lsl.w	r9, r6, r9
 8007360:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007364:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800736c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800736e:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8007372:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8007374:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007378:	bf54      	ite	pl
 800737a:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 800737e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8007382:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007384:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 8007386:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8007388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800738c:	bf54      	ite	pl
 800738e:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8007392:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8007396:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007398:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800739c:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800739e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80073a2:	bf54      	ite	pl
 80073a4:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80073a8:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073ac:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073ae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80073b2:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80073b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80073ba:	bf54      	ite	pl
 80073bc:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80073c0:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80073c4:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80073c8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073ca:	f10c 0c02 	add.w	ip, ip, #2
 80073ce:	fa34 f203 	lsrs.w	r2, r4, r3
 80073d2:	f47f af5e 	bne.w	8007292 <HAL_GPIO_Init+0x16>
  }
}
 80073d6:	b003      	add	sp, #12
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073dc:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80073e0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073e2:	fa08 f80c 	lsl.w	r8, r8, ip
 80073e6:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073ea:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80073ec:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073f0:	fa06 f60c 	lsl.w	r6, r6, ip
 80073f4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80073f8:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073fa:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80073fe:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007402:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007404:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007408:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800740a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800740c:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800740e:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007412:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007414:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007418:	fa06 f60c 	lsl.w	r6, r6, ip
 800741c:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8007420:	fa09 f20c 	lsl.w	r2, r9, ip
 8007424:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007426:	f47f af4a 	bne.w	80072be <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800742a:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800742e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007432:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8007436:	260f      	movs	r6, #15
 8007438:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800743c:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8007440:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007444:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007448:	690e      	ldr	r6, [r1, #16]
 800744a:	fa06 f60b 	lsl.w	r6, r6, fp
 800744e:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8007452:	f8c9 6020 	str.w	r6, [r9, #32]
 8007456:	e732      	b.n	80072be <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007458:	f04f 0803 	mov.w	r8, #3
 800745c:	fa08 f80c 	lsl.w	r8, r8, ip
 8007460:	ea6f 0808 	mvn.w	r8, r8
 8007464:	e7d2      	b.n	800740c <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007466:	2603      	movs	r6, #3
 8007468:	fa06 f909 	lsl.w	r9, r6, r9
 800746c:	ea42 0209 	orr.w	r2, r2, r9
 8007470:	e778      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 8007472:	2601      	movs	r6, #1
 8007474:	fa06 f909 	lsl.w	r9, r6, r9
 8007478:	ea42 0209 	orr.w	r2, r2, r9
 800747c:	e772      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 800747e:	2602      	movs	r6, #2
 8007480:	fa06 f909 	lsl.w	r9, r6, r9
 8007484:	ea42 0209 	orr.w	r2, r2, r9
 8007488:	e76c      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 800748a:	2606      	movs	r6, #6
 800748c:	fa06 f909 	lsl.w	r9, r6, r9
 8007490:	ea42 0209 	orr.w	r2, r2, r9
 8007494:	e766      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 8007496:	2604      	movs	r6, #4
 8007498:	fa06 f909 	lsl.w	r9, r6, r9
 800749c:	ea42 0209 	orr.w	r2, r2, r9
 80074a0:	e760      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 80074a2:	2605      	movs	r6, #5
 80074a4:	fa06 f909 	lsl.w	r9, r6, r9
 80074a8:	ea42 0209 	orr.w	r2, r2, r9
 80074ac:	e75a      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 80074ae:	2607      	movs	r6, #7
 80074b0:	fa06 f909 	lsl.w	r9, r6, r9
 80074b4:	ea42 0209 	orr.w	r2, r2, r9
 80074b8:	e754      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 80074ba:	2608      	movs	r6, #8
 80074bc:	fa06 f909 	lsl.w	r9, r6, r9
 80074c0:	ea42 0209 	orr.w	r2, r2, r9
 80074c4:	e74e      	b.n	8007364 <HAL_GPIO_Init+0xe8>
 80074c6:	bf00      	nop
 80074c8:	58024400 	.word	0x58024400
 80074cc:	58020000 	.word	0x58020000
 80074d0:	58020800 	.word	0x58020800
 80074d4:	58020c00 	.word	0x58020c00
 80074d8:	58021000 	.word	0x58021000
 80074dc:	58021400 	.word	0x58021400
 80074e0:	58021800 	.word	0x58021800
 80074e4:	58021c00 	.word	0x58021c00
 80074e8:	58022000 	.word	0x58022000
 80074ec:	58022400 	.word	0x58022400

080074f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80074f0:	6903      	ldr	r3, [r0, #16]
 80074f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80074f4:	bf14      	ite	ne
 80074f6:	2001      	movne	r0, #1
 80074f8:	2000      	moveq	r0, #0
 80074fa:	4770      	bx	lr

080074fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074fc:	b902      	cbnz	r2, 8007500 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80074fe:	0409      	lsls	r1, r1, #16
 8007500:	6181      	str	r1, [r0, #24]
  }
}
 8007502:	4770      	bx	lr

08007504 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007508:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 800750c:	4201      	tst	r1, r0
 800750e:	d100      	bne.n	8007512 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8007510:	4770      	bx	lr
{
 8007512:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007514:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007518:	f7f9 fe2a 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800751c:	bd08      	pop	{r3, pc}
 800751e:	bf00      	nop

08007520 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007520:	2800      	cmp	r0, #0
 8007522:	d05e      	beq.n	80075e2 <HAL_LPTIM_Init+0xc2>
{
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007526:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800752a:	4604      	mov	r4, r0
 800752c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007530:	2b00      	cmp	r3, #0
 8007532:	d051      	beq.n	80075d8 <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007534:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007536:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007538:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800753c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007540:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8007542:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007544:	d03c      	beq.n	80075c0 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007546:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800754a:	d039      	beq.n	80075c0 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800754c:	6962      	ldr	r2, [r4, #20]
 800754e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007552:	429a      	cmp	r2, r3
 8007554:	d003      	beq.n	800755e <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007556:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800755a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800755e:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8007560:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007562:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8007564:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8007566:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007568:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800756a:	4e22      	ldr	r6, [pc, #136]	; (80075f4 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 800756c:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800756e:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007570:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007572:	b1ed      	cbz	r5, 80075b0 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007574:	2d01      	cmp	r5, #1
 8007576:	d11f      	bne.n	80075b8 <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007578:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 800757c:	4328      	orrs	r0, r5
 800757e:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007580:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007584:	4282      	cmp	r2, r0
 8007586:	d004      	beq.n	8007592 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007588:	69a0      	ldr	r0, [r4, #24]
 800758a:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 800758c:	69e0      	ldr	r0, [r4, #28]
 800758e:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007590:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007592:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8007594:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007596:	4291      	cmp	r1, r2
 8007598:	d015      	beq.n	80075c6 <HAL_LPTIM_Init+0xa6>
 800759a:	4b18      	ldr	r3, [pc, #96]	; (80075fc <HAL_LPTIM_Init+0xdc>)
 800759c:	4299      	cmp	r1, r3
 800759e:	d012      	beq.n	80075c6 <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <HAL_LPTIM_Init+0xe0>)
 80075a2:	4299      	cmp	r1, r3
 80075a4:	d01f      	beq.n	80075e6 <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80075a6:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80075a8:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80075aa:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80075ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80075b0:	69e0      	ldr	r0, [r4, #28]
 80075b2:	6925      	ldr	r5, [r4, #16]
 80075b4:	4328      	orrs	r0, r5
 80075b6:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80075b8:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 80075bc:	d1e0      	bne.n	8007580 <HAL_LPTIM_Init+0x60>
 80075be:	e7db      	b.n	8007578 <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80075c0:	f020 001e 	bic.w	r0, r0, #30
 80075c4:	e7c2      	b.n	800754c <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80075c6:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80075ca:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80075cc:	4313      	orrs	r3, r2
 80075ce:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80075d8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 80075dc:	f7fc fd04 	bl	8003fe8 <HAL_LPTIM_MspInit>
 80075e0:	e7a8      	b.n	8007534 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 80075e2:	2001      	movs	r0, #1
}
 80075e4:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80075e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80075e8:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80075ea:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80075f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f4:	ff19f1fe 	.word	0xff19f1fe
 80075f8:	40002400 	.word	0x40002400
 80075fc:	58002400 	.word	0x58002400
 8007600:	58002800 	.word	0x58002800

08007604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007608:	2800      	cmp	r0, #0
 800760a:	f000 8088 	beq.w	800771e <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800760e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8007612:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8007614:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800761a:	2b00      	cmp	r3, #0
 800761c:	d079      	beq.n	8007712 <HAL_PCD_Init+0x10e>
 800761e:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007620:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007622:	462e      	mov	r6, r5
 8007624:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007626:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800762a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800762c:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800762e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8007632:	bf08      	it	eq
 8007634:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007636:	f004 f9b1 	bl	800b99c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800763a:	f856 eb10 	ldr.w	lr, [r6], #16
 800763e:	46b4      	mov	ip, r6
 8007640:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007646:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800764a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800764c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8007650:	e884 0003 	stmia.w	r4, {r0, r1}
 8007654:	4670      	mov	r0, lr
 8007656:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800765a:	f004 f87f 	bl	800b75c <USB_CoreInit>
 800765e:	4604      	mov	r4, r0
 8007660:	b130      	cbz	r0, 8007670 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8007662:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007664:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8007666:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007668:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800766c:	b00b      	add	sp, #44	; 0x2c
 800766e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007670:	4601      	mov	r1, r0
 8007672:	6828      	ldr	r0, [r5, #0]
 8007674:	f004 f99a 	bl	800b9ac <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007678:	6868      	ldr	r0, [r5, #4]
 800767a:	b358      	cbz	r0, 80076d4 <HAL_PCD_Init+0xd0>
 800767c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800767e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007682:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8007684:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007688:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800768c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007694:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007698:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800769c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076a0:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80076a2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80076a6:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80076a8:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ac:	d3ea      	bcc.n	8007684 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80076ae:	2200      	movs	r2, #0
 80076b0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076b4:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80076b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80076ba:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076be:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80076c0:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076c4:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076c6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80076ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076ce:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076d2:	d3ed      	bcc.n	80076b0 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076d4:	466c      	mov	r4, sp
 80076d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80076e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80076e6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80076ea:	6828      	ldr	r0, [r5, #0]
 80076ec:	f004 f994 	bl	800ba18 <USB_DevInit>
 80076f0:	4604      	mov	r4, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1b5      	bne.n	8007662 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 80076f6:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80076f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 80076fa:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 80076fe:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8007700:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8007704:	d00f      	beq.n	8007726 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007706:	6828      	ldr	r0, [r5, #0]
 8007708:	f004 fe00 	bl	800c30c <USB_DevDisconnect>
}
 800770c:	4620      	mov	r0, r4
 800770e:	b00b      	add	sp, #44	; 0x2c
 8007710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8007712:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8007716:	f005 fe53 	bl	800d3c0 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800771a:	6828      	ldr	r0, [r5, #0]
 800771c:	e780      	b.n	8007620 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800771e:	2401      	movs	r4, #1
}
 8007720:	4620      	mov	r0, r4
 8007722:	b00b      	add	sp, #44	; 0x2c
 8007724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007726:	4628      	mov	r0, r5
 8007728:	f000 fce0 	bl	80080ec <HAL_PCDEx_ActivateLPM>
 800772c:	e7eb      	b.n	8007706 <HAL_PCD_Init+0x102>
 800772e:	bf00      	nop

08007730 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007730:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8007732:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8007736:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007738:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800773a:	2b01      	cmp	r3, #1
 800773c:	d017      	beq.n	800776e <HAL_PCD_Start+0x3e>
 800773e:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007742:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8007744:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007748:	d009      	beq.n	800775e <HAL_PCD_Start+0x2e>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 800774a:	f004 f91f 	bl	800b98c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	f004 fdcc 	bl	800c2ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007754:	2300      	movs	r3, #0

  return HAL_OK;
 8007756:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007758:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800775c:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800775e:	69a3      	ldr	r3, [r4, #24]
 8007760:	4293      	cmp	r3, r2
 8007762:	d0f2      	beq.n	800774a <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007764:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800776a:	6383      	str	r3, [r0, #56]	; 0x38
 800776c:	e7ed      	b.n	800774a <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 800776e:	2002      	movs	r0, #2
}
 8007770:	bd10      	pop	{r4, pc}
 8007772:	bf00      	nop

08007774 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007778:	6807      	ldr	r7, [r0, #0]
{
 800777a:	b089      	sub	sp, #36	; 0x24
 800777c:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800777e:	4638      	mov	r0, r7
 8007780:	f004 fe02 	bl	800c388 <USB_GetMode>
 8007784:	b110      	cbz	r0, 800778c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8007786:	b009      	add	sp, #36	; 0x24
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800778c:	4683      	mov	fp, r0
 800778e:	6820      	ldr	r0, [r4, #0]
 8007790:	f004 fdcc 	bl	800c32c <USB_ReadInterrupts>
 8007794:	2800      	cmp	r0, #0
 8007796:	d0f6      	beq.n	8007786 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	f004 fdc7 	bl	800c32c <USB_ReadInterrupts>
 800779e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80077a2:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80077a4:	d003      	beq.n	80077ae <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80077a6:	6943      	ldr	r3, [r0, #20]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80077ae:	f004 fdbd 	bl	800c32c <USB_ReadInterrupts>
 80077b2:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077b6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80077b8:	d012      	beq.n	80077e0 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077ba:	6983      	ldr	r3, [r0, #24]
 80077bc:	f023 0310 	bic.w	r3, r3, #16
 80077c0:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80077c2:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80077c4:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80077c8:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f000 8261 	beq.w	8007c94 <HAL_PCD_IRQHandler+0x520>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80077d2:	2b06      	cmp	r3, #6
 80077d4:	f000 81b1 	beq.w	8007b3a <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80077d8:	6983      	ldr	r3, [r0, #24]
 80077da:	f043 0310 	orr.w	r3, r3, #16
 80077de:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80077e0:	f004 fda4 	bl	800c32c <USB_ReadInterrupts>
 80077e4:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80077e8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80077ea:	f040 80cf 	bne.w	800798c <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80077ee:	f004 fd9d 	bl	800c32c <USB_ReadInterrupts>
 80077f2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80077f6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80077f8:	d175      	bne.n	80078e6 <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077fa:	f004 fd97 	bl	800c32c <USB_ReadInterrupts>
 80077fe:	2800      	cmp	r0, #0
 8007800:	db5d      	blt.n	80078be <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007802:	6820      	ldr	r0, [r4, #0]
 8007804:	f004 fd92 	bl	800c32c <USB_ReadInterrupts>
 8007808:	0500      	lsls	r0, r0, #20
 800780a:	d44d      	bmi.n	80078a8 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	f004 fd8d 	bl	800c32c <USB_ReadInterrupts>
 8007812:	0102      	lsls	r2, r0, #4
 8007814:	d514      	bpl.n	8007840 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	6953      	ldr	r3, [r2, #20]
 800781a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8007820:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007824:	2b00      	cmp	r3, #0
 8007826:	f040 8172 	bne.w	8007b0e <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800782a:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800782c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800782e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007832:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007834:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007838:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800783c:	f000 fc6e 	bl	800811c <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	f004 fd73 	bl	800c32c <USB_ReadInterrupts>
 8007846:	04c3      	lsls	r3, r0, #19
 8007848:	f100 8116 	bmi.w	8007a78 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	f004 fd6d 	bl	800c32c <USB_ReadInterrupts>
 8007852:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8007856:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007858:	f040 80f7 	bne.w	8007a4a <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800785c:	f004 fd66 	bl	800c32c <USB_ReadInterrupts>
 8007860:	0707      	lsls	r7, r0, #28
 8007862:	f100 80e9 	bmi.w	8007a38 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007866:	6820      	ldr	r0, [r4, #0]
 8007868:	f004 fd60 	bl	800c32c <USB_ReadInterrupts>
 800786c:	02c6      	lsls	r6, r0, #11
 800786e:	f100 80d9 	bmi.w	8007a24 <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007872:	6820      	ldr	r0, [r4, #0]
 8007874:	f004 fd5a 	bl	800c32c <USB_ReadInterrupts>
 8007878:	0285      	lsls	r5, r0, #10
 800787a:	f100 80c9 	bmi.w	8007a10 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	f004 fd54 	bl	800c32c <USB_ReadInterrupts>
 8007884:	0040      	lsls	r0, r0, #1
 8007886:	f100 80ba 	bmi.w	80079fe <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800788a:	6820      	ldr	r0, [r4, #0]
 800788c:	f004 fd4e 	bl	800c32c <USB_ReadInterrupts>
 8007890:	0741      	lsls	r1, r0, #29
 8007892:	f57f af78 	bpl.w	8007786 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800789a:	076a      	lsls	r2, r5, #29
 800789c:	f100 821b 	bmi.w	8007cd6 <HAL_PCD_IRQHandler+0x562>
      hpcd->Instance->GOTGINT |= temp;
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	432a      	orrs	r2, r5
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	e76e      	b.n	8007786 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80078a8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80078ac:	07d9      	lsls	r1, r3, #31
 80078ae:	f100 820e 	bmi.w	8007cce <HAL_PCD_IRQHandler+0x55a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	6943      	ldr	r3, [r0, #20]
 80078b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ba:	6143      	str	r3, [r0, #20]
 80078bc:	e7a7      	b.n	800780e <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078be:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80078ca:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	f000 812c 	beq.w	8007b2c <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 80078d4:	4620      	mov	r0, r4
 80078d6:	f005 fe1d 	bl	800d514 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80078da:	6820      	ldr	r0, [r4, #0]
 80078dc:	6943      	ldr	r3, [r0, #20]
 80078de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e2:	6143      	str	r3, [r0, #20]
 80078e4:	e78e      	b.n	8007804 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80078e6:	f004 fd2d 	bl	800c344 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 80078ea:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80078ec:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 80078ee:	f1b8 0f00 	cmp.w	r8, #0
 80078f2:	d082      	beq.n	80077fa <HAL_PCD_IRQHandler+0x86>
      epnum = 0U;
 80078f4:	f04f 0a00 	mov.w	sl, #0
 80078f8:	f507 6910 	add.w	r9, r7, #2304	; 0x900
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078fc:	9703      	str	r7, [sp, #12]
 80078fe:	4626      	mov	r6, r4
 8007900:	4657      	mov	r7, sl
 8007902:	f8cd b010 	str.w	fp, [sp, #16]
 8007906:	e009      	b.n	800791c <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 8007908:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800790c:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 8007910:	f106 061c 	add.w	r6, r6, #28
 8007914:	f109 0920 	add.w	r9, r9, #32
 8007918:	f000 8124 	beq.w	8007b64 <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800791c:	f018 0f01 	tst.w	r8, #1
 8007920:	d0f2      	beq.n	8007908 <HAL_PCD_IRQHandler+0x194>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007922:	fa5f fa87 	uxtb.w	sl, r7
 8007926:	4651      	mov	r1, sl
 8007928:	f004 fd1e 	bl	800c368 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800792c:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800792e:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007930:	d515      	bpl.n	800795e <HAL_PCD_IRQHandler+0x1ea>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007932:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007934:	f007 030f 	and.w	r3, r7, #15
 8007938:	2201      	movs	r2, #1
 800793a:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800793c:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 8007940:	ea23 0302 	bic.w	r3, r3, r2
 8007944:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007948:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800794a:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800794c:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8007950:	4299      	cmp	r1, r3
 8007952:	f000 81c5 	beq.w	8007ce0 <HAL_PCD_IRQHandler+0x56c>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007956:	4651      	mov	r1, sl
 8007958:	4620      	mov	r0, r4
 800795a:	f005 fd9f 	bl	800d49c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800795e:	0728      	lsls	r0, r5, #28
 8007960:	d502      	bpl.n	8007968 <HAL_PCD_IRQHandler+0x1f4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007962:	2308      	movs	r3, #8
 8007964:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007968:	06e9      	lsls	r1, r5, #27
 800796a:	d502      	bpl.n	8007972 <HAL_PCD_IRQHandler+0x1fe>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800796c:	2310      	movs	r3, #16
 800796e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007972:	066a      	lsls	r2, r5, #25
 8007974:	d502      	bpl.n	800797c <HAL_PCD_IRQHandler+0x208>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007976:	2340      	movs	r3, #64	; 0x40
 8007978:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800797c:	07ab      	lsls	r3, r5, #30
 800797e:	f100 8181 	bmi.w	8007c84 <HAL_PCD_IRQHandler+0x510>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007982:	062d      	lsls	r5, r5, #24
 8007984:	f100 812a 	bmi.w	8007bdc <HAL_PCD_IRQHandler+0x468>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	e7bd      	b.n	8007908 <HAL_PCD_IRQHandler+0x194>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800798c:	f004 fcd2 	bl	800c334 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8007990:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007992:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 8007994:	2d00      	cmp	r5, #0
 8007996:	f43f af2a 	beq.w	80077ee <HAL_PCD_IRQHandler+0x7a>
 800799a:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800799e:	46a2      	mov	sl, r4
      epnum = 0U;
 80079a0:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80079a4:	9703      	str	r7, [sp, #12]
 80079a6:	e008      	b.n	80079ba <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 80079a8:	086d      	lsrs	r5, r5, #1
        epnum++;
 80079aa:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 80079ae:	f106 0620 	add.w	r6, r6, #32
 80079b2:	f10a 0a1c 	add.w	sl, sl, #28
 80079b6:	f000 80d3 	beq.w	8007b60 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 80079ba:	07ef      	lsls	r7, r5, #31
 80079bc:	d5f4      	bpl.n	80079a8 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079be:	fa5f f788 	uxtb.w	r7, r8
 80079c2:	4639      	mov	r1, r7
 80079c4:	f004 fcc6 	bl	800c354 <USB_ReadDevOutEPInterrupt>
 80079c8:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ca:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80079cc:	f019 0f01 	tst.w	r9, #1
 80079d0:	f040 80e5 	bne.w	8007b9e <HAL_PCD_IRQHandler+0x42a>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80079d4:	f019 0f08 	tst.w	r9, #8
 80079d8:	f040 80c7 	bne.w	8007b6a <HAL_PCD_IRQHandler+0x3f6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80079dc:	f019 0f10 	tst.w	r9, #16
 80079e0:	d001      	beq.n	80079e6 <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80079e2:	2310      	movs	r3, #16
 80079e4:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80079e6:	f019 0f20 	tst.w	r9, #32
 80079ea:	d001      	beq.n	80079f0 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079ec:	2320      	movs	r3, #32
 80079ee:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80079f0:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 80079f4:	d0d8      	beq.n	80079a8 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80079f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079fa:	60b3      	str	r3, [r6, #8]
 80079fc:	e7d4      	b.n	80079a8 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 80079fe:	4620      	mov	r0, r4
 8007a00:	f005 fd94 	bl	800d52c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007a04:	6820      	ldr	r0, [r4, #0]
 8007a06:	6943      	ldr	r3, [r0, #20]
 8007a08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a0c:	6143      	str	r3, [r0, #20]
 8007a0e:	e73d      	b.n	800788c <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a10:	4620      	mov	r0, r4
 8007a12:	2100      	movs	r1, #0
 8007a14:	f005 fd82 	bl	800d51c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	6943      	ldr	r3, [r0, #20]
 8007a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a20:	6143      	str	r3, [r0, #20]
 8007a22:	e72d      	b.n	8007880 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a24:	4620      	mov	r0, r4
 8007a26:	2100      	movs	r1, #0
 8007a28:	f005 fd7c 	bl	800d524 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	6943      	ldr	r3, [r0, #20]
 8007a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a34:	6143      	str	r3, [r0, #20]
 8007a36:	e71d      	b.n	8007874 <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f005 fd39 	bl	800d4b0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	6943      	ldr	r3, [r0, #20]
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	6143      	str	r3, [r0, #20]
 8007a48:	e70e      	b.n	8007868 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a4a:	f004 fca1 	bl	800c390 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a4e:	6820      	ldr	r0, [r4, #0]
 8007a50:	f004 f91a 	bl	800bc88 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a54:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a56:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a58:	f001 f900 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 8007a5c:	7b22      	ldrb	r2, [r4, #12]
 8007a5e:	4601      	mov	r1, r0
 8007a60:	4628      	mov	r0, r5
 8007a62:	f003 ff19 	bl	800b898 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8007a66:	4620      	mov	r0, r4
 8007a68:	f005 fd26 	bl	800d4b8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	6943      	ldr	r3, [r0, #20]
 8007a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a74:	6143      	str	r3, [r0, #20]
 8007a76:	e6f1      	b.n	800785c <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a78:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8007a7c:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a80:	2110      	movs	r1, #16
 8007a82:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a84:	f023 0301 	bic.w	r3, r3, #1
 8007a88:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a8a:	f004 f8d5 	bl	800bc38 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a8e:	6860      	ldr	r0, [r4, #4]
 8007a90:	b1e0      	cbz	r0, 8007acc <HAL_PCD_IRQHandler+0x358>
 8007a92:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a96:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8007a9a:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a9c:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007aa0:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007aa2:	3320      	adds	r3, #32
 8007aa4:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007aa6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007aaa:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007aae:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ab2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007ab6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007aba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007abe:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007ac2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007ac6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007aca:	d1e6      	bne.n	8007a9a <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007acc:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007ace:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007ad0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007ad4:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007ad6:	b9f2      	cbnz	r2, 8007b16 <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ad8:	696a      	ldr	r2, [r5, #20]
 8007ada:	f242 032b 	movw	r3, #8235	; 0x202b
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ae2:	692b      	ldr	r3, [r5, #16]
 8007ae4:	f043 030b 	orr.w	r3, r3, #11
 8007ae8:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007aea:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007aee:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007af2:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007af4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007af8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007afa:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007afe:	f004 fc5d 	bl	800c3bc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b02:	6820      	ldr	r0, [r4, #0]
 8007b04:	6943      	ldr	r3, [r0, #20]
 8007b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b0a:	6143      	str	r3, [r0, #20]
 8007b0c:	e69f      	b.n	800784e <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f005 fce8 	bl	800d4e4 <HAL_PCD_SuspendCallback>
 8007b14:	e694      	b.n	8007840 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b16:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8007b1a:	f043 030b 	orr.w	r3, r3, #11
 8007b1e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b22:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007b24:	f043 030b 	orr.w	r3, r3, #11
 8007b28:	646b      	str	r3, [r5, #68]	; 0x44
 8007b2a:	e7de      	b.n	8007aea <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 8007b2c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b2e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8007b30:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b34:	f000 faf2 	bl	800811c <HAL_PCDEx_LPM_Callback>
 8007b38:	e6cf      	b.n	80078da <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b3a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007b3e:	2208      	movs	r2, #8
 8007b40:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007b44:	4638      	mov	r0, r7
 8007b46:	f004 fb39 	bl	800c1bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b4a:	f3c5 130a 	ubfx	r3, r5, #4, #11
 8007b4e:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b52:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b54:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8007b58:	440b      	add	r3, r1
 8007b5a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8007b5e:	e63b      	b.n	80077d8 <HAL_PCD_IRQHandler+0x64>
 8007b60:	9f03      	ldr	r7, [sp, #12]
 8007b62:	e644      	b.n	80077ee <HAL_PCD_IRQHandler+0x7a>
 8007b64:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 8007b68:	e647      	b.n	80077fa <HAL_PCD_IRQHandler+0x86>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b6a:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b6c:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b70:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b76:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b78:	4890      	ldr	r0, [pc, #576]	; (8007dbc <HAL_PCD_IRQHandler+0x648>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b7a:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b7c:	4282      	cmp	r2, r0
 8007b7e:	f240 80c0 	bls.w	8007d02 <HAL_PCD_IRQHandler+0x58e>
 8007b82:	040a      	lsls	r2, r1, #16
 8007b84:	d502      	bpl.n	8007b8c <HAL_PCD_IRQHandler+0x418>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b8a:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f005 fc75 	bl	800d47c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b92:	6921      	ldr	r1, [r4, #16]
 8007b94:	2901      	cmp	r1, #1
 8007b96:	f000 80df 	beq.w	8007d58 <HAL_PCD_IRQHandler+0x5e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007b9a:	6820      	ldr	r0, [r4, #0]
 8007b9c:	e71e      	b.n	80079dc <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b9e:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8007ba0:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007ba2:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ba4:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 8007ba8:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007baa:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bae:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 8007bb2:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 8007bb4:	f000 80aa 	beq.w	8007d0c <HAL_PCD_IRQHandler+0x598>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007bb8:	4981      	ldr	r1, [pc, #516]	; (8007dc0 <HAL_PCD_IRQHandler+0x64c>)
 8007bba:	458c      	cmp	ip, r1
 8007bbc:	f000 80bf 	beq.w	8007d3e <HAL_PCD_IRQHandler+0x5ca>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007bc0:	f1b8 0f00 	cmp.w	r8, #0
 8007bc4:	d104      	bne.n	8007bd0 <HAL_PCD_IRQHandler+0x45c>
 8007bc6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	f000 80ef 	beq.w	8007dae <HAL_PCD_IRQHandler+0x63a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f005 fc58 	bl	800d488 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	e6fb      	b.n	80079d4 <HAL_PCD_IRQHandler+0x260>
  if (ep->xfer_count > ep->xfer_len)
 8007bdc:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007be0:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 8007be4:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007be6:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 8007be8:	f63f ae8e 	bhi.w	8007908 <HAL_PCD_IRQHandler+0x194>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bec:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8007bf0:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf2:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bf6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
 8007bfa:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 8007bfc:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 8007bfe:	428a      	cmp	r2, r1
 8007c00:	bf28      	it	cs
 8007c02:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c04:	9905      	ldr	r1, [sp, #20]
 8007c06:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8007c08:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c0a:	b289      	uxth	r1, r1
 8007c0c:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 8007c10:	f0c0 8091 	bcc.w	8007d36 <HAL_PCD_IRQHandler+0x5c2>
 8007c14:	464a      	mov	r2, r9
 8007c16:	9706      	str	r7, [sp, #24]
 8007c18:	46c1      	mov	r9, r8
 8007c1a:	4627      	mov	r7, r4
 8007c1c:	46d0      	mov	r8, sl
 8007c1e:	9c05      	ldr	r4, [sp, #20]
 8007c20:	4692      	mov	sl, r2
 8007c22:	e018      	b.n	8007c56 <HAL_PCD_IRQHandler+0x4e2>
 8007c24:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c26:	4642      	mov	r2, r8
 8007c28:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8007c2a:	4658      	mov	r0, fp
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	bf28      	it	cs
 8007c30:	461d      	movcs	r5, r3
 8007c32:	7c3b      	ldrb	r3, [r7, #16]
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	b2ab      	uxth	r3, r5
 8007c38:	f004 faaa 	bl	800c190 <USB_WritePacket>
    ep->xfer_buff  += len;
 8007c3c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c3e:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 8007c40:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c42:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 8007c44:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8007c46:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8007c48:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 8007c4a:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c4c:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 8007c50:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c52:	d368      	bcc.n	8007d26 <HAL_PCD_IRQHandler+0x5b2>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c54:	6d35      	ldr	r5, [r6, #80]	; 0x50
 8007c56:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 8007c58:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c5c:	d3e2      	bcc.n	8007c24 <HAL_PCD_IRQHandler+0x4b0>
 8007c5e:	463c      	mov	r4, r7
 8007c60:	46c8      	mov	r8, r9
 8007c62:	9f06      	ldr	r7, [sp, #24]
 8007c64:	46d1      	mov	r9, sl
 8007c66:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c6a:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c6c:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c6e:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c70:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c74:	f007 030f 	and.w	r3, r7, #15
 8007c78:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c7a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007c7c:	ea23 0302 	bic.w	r3, r3, r2
 8007c80:	634b      	str	r3, [r1, #52]	; 0x34
 8007c82:	e641      	b.n	8007908 <HAL_PCD_IRQHandler+0x194>
            (void)USB_FlushTxFifo(USBx, epnum);
 8007c84:	4639      	mov	r1, r7
 8007c86:	9803      	ldr	r0, [sp, #12]
 8007c88:	f003 ffd6 	bl	800bc38 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	f8c9 3008 	str.w	r3, [r9, #8]
 8007c92:	e676      	b.n	8007982 <HAL_PCD_IRQHandler+0x20e>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007c94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007c98:	421d      	tst	r5, r3
 8007c9a:	f43f ad9d 	beq.w	80077d8 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c9e:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8007ca2:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007cac:	4615      	mov	r5, r2
 8007cae:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 8007cb2:	f004 fa83 	bl	800c1bc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007cb6:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007cba:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007cbc:	442b      	add	r3, r5
 8007cbe:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007cc2:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8007cc6:	442b      	add	r3, r5
 8007cc8:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 8007ccc:	e584      	b.n	80077d8 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f005 fc08 	bl	800d4e4 <HAL_PCD_SuspendCallback>
 8007cd4:	e5ed      	b.n	80078b2 <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f005 fc2c 	bl	800d534 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	e5df      	b.n	80078a0 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007ce0:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 8007ce4:	4413      	add	r3, r2
 8007ce6:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	f47f ae34 	bne.w	8007956 <HAL_PCD_IRQHandler+0x1e2>
 8007cee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f47f ae30 	bne.w	8007956 <HAL_PCD_IRQHandler+0x1e2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cf6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007cfa:	6820      	ldr	r0, [r4, #0]
 8007cfc:	f004 fb5e 	bl	800c3bc <USB_EP0_OutStart>
 8007d00:	e629      	b.n	8007956 <HAL_PCD_IRQHandler+0x1e2>
  HAL_PCD_SetupStageCallback(hpcd);
 8007d02:	4620      	mov	r0, r4
 8007d04:	f005 fbba 	bl	800d47c <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007d08:	6820      	ldr	r0, [r4, #0]
 8007d0a:	e667      	b.n	80079dc <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d0c:	0719      	lsls	r1, r3, #28
 8007d0e:	d51e      	bpl.n	8007d4e <HAL_PCD_IRQHandler+0x5da>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d10:	492a      	ldr	r1, [pc, #168]	; (8007dbc <HAL_PCD_IRQHandler+0x648>)
 8007d12:	458c      	cmp	ip, r1
 8007d14:	f67f ae5e 	bls.w	80079d4 <HAL_PCD_IRQHandler+0x260>
 8007d18:	041f      	lsls	r7, r3, #16
 8007d1a:	f57f ae5b 	bpl.w	80079d4 <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d22:	6093      	str	r3, [r2, #8]
 8007d24:	e656      	b.n	80079d4 <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d26:	463c      	mov	r4, r7
 8007d28:	46c8      	mov	r8, r9
 8007d2a:	9f06      	ldr	r7, [sp, #24]
 8007d2c:	46d1      	mov	r9, sl
 8007d2e:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8007d32:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d34:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 8007d36:	42ab      	cmp	r3, r5
 8007d38:	f4ff ade6 	bcc.w	8007908 <HAL_PCD_IRQHandler+0x194>
 8007d3c:	e795      	b.n	8007c6a <HAL_PCD_IRQHandler+0x4f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d3e:	0419      	lsls	r1, r3, #16
 8007d40:	d4ed      	bmi.n	8007d1e <HAL_PCD_IRQHandler+0x5aa>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d42:	0699      	lsls	r1, r3, #26
 8007d44:	f57f af44 	bpl.w	8007bd0 <HAL_PCD_IRQHandler+0x45c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d48:	2120      	movs	r1, #32
 8007d4a:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d4c:	e740      	b.n	8007bd0 <HAL_PCD_IRQHandler+0x45c>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d4e:	0699      	lsls	r1, r3, #26
 8007d50:	d508      	bpl.n	8007d64 <HAL_PCD_IRQHandler+0x5f0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d52:	2320      	movs	r3, #32
 8007d54:	6093      	str	r3, [r2, #8]
 8007d56:	e63d      	b.n	80079d4 <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d58:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	f004 fb2d 	bl	800c3bc <USB_EP0_OutStart>
 8007d62:	e71a      	b.n	8007b9a <HAL_PCD_IRQHandler+0x426>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d64:	f013 0f28 	tst.w	r3, #40	; 0x28
 8007d68:	f47f ae34 	bne.w	80079d4 <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d6c:	4913      	ldr	r1, [pc, #76]	; (8007dbc <HAL_PCD_IRQHandler+0x648>)
 8007d6e:	458c      	cmp	ip, r1
 8007d70:	d901      	bls.n	8007d76 <HAL_PCD_IRQHandler+0x602>
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	d4d3      	bmi.n	8007d1e <HAL_PCD_IRQHandler+0x5aa>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d76:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8007d78:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d7c:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007d80:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 8007d82:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007d86:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d90:	f1b8 0f00 	cmp.w	r8, #0
 8007d94:	f47f af1c 	bne.w	8007bd0 <HAL_PCD_IRQHandler+0x45c>
 8007d98:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	f47f af17 	bne.w	8007bd0 <HAL_PCD_IRQHandler+0x45c>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007da2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007da6:	2101      	movs	r1, #1
 8007da8:	f004 fb08 	bl	800c3bc <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dac:	e710      	b.n	8007bd0 <HAL_PCD_IRQHandler+0x45c>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007dae:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007db2:	4641      	mov	r1, r8
 8007db4:	f004 fb02 	bl	800c3bc <USB_EP0_OutStart>
 8007db8:	e70a      	b.n	8007bd0 <HAL_PCD_IRQHandler+0x45c>
 8007dba:	bf00      	nop
 8007dbc:	4f54300a 	.word	0x4f54300a
 8007dc0:	4f54310a 	.word	0x4f54310a

08007dc4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007dc4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8007dc8:	2a01      	cmp	r2, #1
 8007dca:	d00e      	beq.n	8007dea <HAL_PCD_SetAddress+0x26>
 8007dcc:	2201      	movs	r2, #1
{
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007dd2:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8007dd4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8007dd8:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ddc:	f004 fa74 	bl	800c2c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007de0:	2300      	movs	r3, #0
  return HAL_OK;
 8007de2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007de4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007de8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007dea:	2002      	movs	r0, #2
}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop

08007df0 <HAL_PCD_EP_Open>:
{
 8007df0:	b510      	push	{r4, lr}
 8007df2:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007df6:	0609      	lsls	r1, r1, #24
{
 8007df8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007dfa:	d427      	bmi.n	8007e4c <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dfc:	f04f 0c1c 	mov.w	ip, #28
 8007e00:	fb0c 0c0e 	mla	ip, ip, lr, r0
 8007e04:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 8007e08:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 8007e0c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007e10:	2000      	movs	r0, #0
 8007e12:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8007e16:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8007e18:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e1a:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 8007e1e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007e20:	b10a      	cbz	r2, 8007e26 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8007e22:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d101      	bne.n	8007e2e <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007e2e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d018      	beq.n	8007e68 <HAL_PCD_EP_Open+0x78>
 8007e36:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e38:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007e3a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007e3e:	f003 ff2f 	bl	800bca0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e42:	2300      	movs	r3, #0
  return ret;
 8007e44:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007e46:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007e4a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e4c:	201c      	movs	r0, #28
    ep->is_in = 1U;
 8007e4e:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e52:	fb00 400e 	mla	r0, r0, lr, r4
 8007e56:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 8007e5a:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 8007e5e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007e62:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 8007e66:	e7d6      	b.n	8007e16 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8007e68:	2002      	movs	r0, #2
}
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007e6c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007e70:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e74:	f04f 011c 	mov.w	r1, #28
{
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007e7c:	d11a      	bne.n	8007eb4 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e7e:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007e82:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007e86:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e88:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007e8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e90:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007e94:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007e96:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d019      	beq.n	8007ed2 <HAL_PCD_EP_Close+0x66>
 8007e9e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ea0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007ea2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ea6:	f003 ff43 	bl	800bd30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007eaa:	2300      	movs	r3, #0
  return HAL_OK;
 8007eac:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007eae:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007eb2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007eb4:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007eb8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ec2:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007ec4:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ec8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007eca:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d1e5      	bne.n	8007e9e <HAL_PCD_EP_Close+0x32>
 8007ed2:	2002      	movs	r0, #2
}
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	bf00      	nop

08007ed8 <HAL_PCD_EP_Receive>:
{
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ede:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007ee0:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ee4:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8007ee8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eec:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8007ef0:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8007ef4:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8007ef6:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 8007efa:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8007efe:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8007f02:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8007f06:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f08:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007f0a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007f0c:	bf08      	it	eq
 8007f0e:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f12:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f14:	b91c      	cbnz	r4, 8007f1e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f16:	f004 f881 	bl	800c01c <USB_EP0StartXfer>
}
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f1e:	f003 ff65 	bl	800bdec <USB_EPStartXfer>
}
 8007f22:	2000      	movs	r0, #0
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	bf00      	nop

08007f28 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007f28:	f001 010f 	and.w	r1, r1, #15
 8007f2c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007f30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007f34:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <HAL_PCD_EP_Transmit>:
{
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f42:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007f44:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f48:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 8007f4c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f50:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8007f52:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8007f56:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8007f58:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8007f5c:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8007f60:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f62:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 8007f66:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8007f6a:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f6c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007f6e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007f70:	bf08      	it	eq
 8007f72:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f76:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f78:	b91c      	cbnz	r4, 8007f82 <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f7a:	f004 f84f 	bl	800c01c <USB_EP0StartXfer>
}
 8007f7e:	2000      	movs	r0, #0
 8007f80:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f82:	f003 ff33 	bl	800bdec <USB_EPStartXfer>
}
 8007f86:	2000      	movs	r0, #0
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	bf00      	nop

08007f8c <HAL_PCD_EP_SetStall>:
{
 8007f8c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f8e:	6843      	ldr	r3, [r0, #4]
 8007f90:	f001 050f 	and.w	r5, r1, #15
 8007f94:	429d      	cmp	r5, r3
 8007f96:	d834      	bhi.n	8008002 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 8007f98:	060b      	lsls	r3, r1, #24
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	d41d      	bmi.n	8007fda <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 8007f9e:	221c      	movs	r2, #28
    ep->is_in = 0U;
 8007fa0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007fa4:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 8007fa8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007fac:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007fae:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007fb2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007fb6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fb8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007fba:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007fbc:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d01c      	beq.n	8007ffe <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007fc4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007fc6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007fca:	f004 f91d 	bl	800c208 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007fce:	b1d5      	cbz	r5, 8008006 <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 8007fd0:	2300      	movs	r3, #0
  return HAL_OK;
 8007fd2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8007fd4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fda:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8007fdc:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007fe0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fe2:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8007fe6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fea:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8007ff0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ff2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007ff4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007ff6:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d1e2      	bne.n	8007fc4 <HAL_PCD_EP_SetStall+0x38>
 8007ffe:	2002      	movs	r0, #2
}
 8008000:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008002:	2001      	movs	r0, #1
}
 8008004:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008006:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800800a:	7c21      	ldrb	r1, [r4, #16]
 800800c:	6820      	ldr	r0, [r4, #0]
 800800e:	f004 f9d5 	bl	800c3bc <USB_EP0_OutStart>
 8008012:	e7dd      	b.n	8007fd0 <HAL_PCD_EP_SetStall+0x44>

08008014 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008014:	6842      	ldr	r2, [r0, #4]
{
 8008016:	b538      	push	{r3, r4, r5, lr}
 8008018:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800801c:	4293      	cmp	r3, r2
 800801e:	d832      	bhi.n	8008086 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8008020:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008024:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008026:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800802a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800802e:	d119      	bne.n	8008064 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008030:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8008034:	2000      	movs	r0, #0
 8008036:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800803a:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800803c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8008040:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8008044:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8008046:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8008048:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800804c:	2b01      	cmp	r3, #1
 800804e:	d018      	beq.n	8008082 <HAL_PCD_EP_ClrStall+0x6e>
 8008050:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008052:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008054:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008058:	f004 f90a 	bl	800c270 <USB_EPClearStall>
  return HAL_OK;
 800805c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800805e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8008062:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008064:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8008068:	2001      	movs	r0, #1
 800806a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800806e:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008070:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8008072:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8008076:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8008078:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800807a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800807e:	2b01      	cmp	r3, #1
 8008080:	d1e6      	bne.n	8008050 <HAL_PCD_EP_ClrStall+0x3c>
 8008082:	2002      	movs	r0, #2
}
 8008084:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008086:	2001      	movs	r0, #1
}
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	bf00      	nop

0800808c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800808c:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800808e:	6804      	ldr	r4, [r0, #0]
 8008090:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8008092:	b931      	cbnz	r1, 80080a2 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008094:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008098:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800809a:	2000      	movs	r0, #0
 800809c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a0:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80080a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80080a4:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80080a8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80080ac:	d00b      	beq.n	80080c6 <HAL_PCDEx_SetTxFiFo+0x3a>
 80080ae:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80080b0:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 80080b4:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80080b6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 80080ba:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80080bc:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 80080be:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80080c0:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80080c4:	d3f4      	bcc.n	80080b0 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80080c6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80080ca:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80080ce:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 80080d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80080d6:	f8cc 0004 	str.w	r0, [ip, #4]
}
 80080da:	2000      	movs	r0, #0
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80080e0:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 80080e2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6259      	str	r1, [r3, #36]	; 0x24
}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop

080080ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80080ec:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80080ee:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80080f2:	4909      	ldr	r1, [pc, #36]	; (8008118 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080f4:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 80080f6:	4660      	mov	r0, ip
{
 80080f8:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 80080fa:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 80080fc:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 8008100:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008104:	6993      	ldr	r3, [r2, #24]
}
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800810a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800810e:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008110:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008112:	4319      	orrs	r1, r3
 8008114:	6551      	str	r1, [r2, #84]	; 0x54
}
 8008116:	4770      	bx	lr
 8008118:	10000003 	.word	0x10000003

0800811c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop

08008120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008120:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008122:	4c10      	ldr	r4, [pc, #64]	; (8008164 <HAL_PWREx_ConfigSupply+0x44>)
 8008124:	68e3      	ldr	r3, [r4, #12]
 8008126:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800812a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800812c:	d105      	bne.n	800813a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800812e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008132:	1a18      	subs	r0, r3, r0
 8008134:	bf18      	it	ne
 8008136:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008138:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	4318      	orrs	r0, r3
 8008140:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8008142:	f7fc fa4b 	bl	80045dc <HAL_GetTick>
 8008146:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008148:	e005      	b.n	8008156 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800814a:	f7fc fa47 	bl	80045dc <HAL_GetTick>
 800814e:	1b40      	subs	r0, r0, r5
 8008150:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008154:	d804      	bhi.n	8008160 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	049b      	lsls	r3, r3, #18
 800815a:	d5f6      	bpl.n	800814a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800815c:	2000      	movs	r0, #0
}
 800815e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008160:	2001      	movs	r0, #1
}
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	58024800 	.word	0x58024800

08008168 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008168:	4a02      	ldr	r2, [pc, #8]	; (8008174 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800816a:	68d3      	ldr	r3, [r2, #12]
 800816c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008170:	60d3      	str	r3, [r2, #12]
}
 8008172:	4770      	bx	lr
 8008174:	58024800 	.word	0x58024800

08008178 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008178:	4b3b      	ldr	r3, [pc, #236]	; (8008268 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800817a:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800817c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800817e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008180:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8008182:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008186:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008188:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800818c:	d038      	beq.n	8008200 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800818e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008192:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008196:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800819a:	fb05 f101 	mul.w	r1, r5, r1
 800819e:	2a01      	cmp	r2, #1
 80081a0:	ee07 1a90 	vmov	s15, r1
 80081a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80081a8:	d002      	beq.n	80081b0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80081aa:	2a02      	cmp	r2, #2
 80081ac:	d04e      	beq.n	800824c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80081ae:	b34a      	cbz	r2, 8008204 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081b0:	ee07 0a90 	vmov	s15, r0
 80081b4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800826c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80081b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80081c2:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8008270 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	ee06 3a90 	vmov	s13, r3
 80081ce:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80081d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80081d6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80081da:	eee7 6a25 	vfma.f32	s13, s14, s11
 80081de:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80081e2:	4b21      	ldr	r3, [pc, #132]	; (8008268 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80081ea:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fc:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8008200:	bc30      	pop	{r4, r5}
 8008202:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	0692      	lsls	r2, r2, #26
 8008208:	d527      	bpl.n	800825a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800820a:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800820c:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008210:	4a18      	ldr	r2, [pc, #96]	; (8008274 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008212:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008218:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800821c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008220:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008270 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008228:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800822a:	ee06 3a90 	vmov	s13, r3
 800822e:	ee05 2a90 	vmov	s11, r2
 8008232:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008236:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800823a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800823e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008242:	eee7 6a05 	vfma.f32	s13, s14, s10
 8008246:	ee66 6a26 	vmul.f32	s13, s12, s13
 800824a:	e7ca      	b.n	80081e2 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800824c:	ee07 0a90 	vmov	s15, r0
 8008250:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008278 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8008254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008258:	e7b0      	b.n	80081bc <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800825a:	ee07 0a90 	vmov	s15, r0
 800825e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800827c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8008262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008266:	e7a9      	b.n	80081bc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8008268:	58024400 	.word	0x58024400
 800826c:	4a742400 	.word	0x4a742400
 8008270:	39000000 	.word	0x39000000
 8008274:	03d09000 	.word	0x03d09000
 8008278:	4bbebc20 	.word	0x4bbebc20
 800827c:	4c742400 	.word	0x4c742400

08008280 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8008280:	2800      	cmp	r0, #0
 8008282:	f000 81e8 	beq.w	8008656 <HAL_RCC_OscConfig+0x3d6>
{
 8008286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008288:	6803      	ldr	r3, [r0, #0]
 800828a:	4604      	mov	r4, r0
 800828c:	07d9      	lsls	r1, r3, #31
 800828e:	d52e      	bpl.n	80082ee <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008290:	49a4      	ldr	r1, [pc, #656]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 8008292:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008294:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008296:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800829a:	2a10      	cmp	r2, #16
 800829c:	f000 8107 	beq.w	80084ae <HAL_RCC_OscConfig+0x22e>
 80082a0:	2a18      	cmp	r2, #24
 80082a2:	f000 80ff 	beq.w	80084a4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082a6:	6863      	ldr	r3, [r4, #4]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ac:	f000 812a 	beq.w	8008504 <HAL_RCC_OscConfig+0x284>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8168 	beq.w	8008586 <HAL_RCC_OscConfig+0x306>
 80082b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082ba:	4b9a      	ldr	r3, [pc, #616]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	f000 8269 	beq.w	8008794 <HAL_RCC_OscConfig+0x514>
 80082c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80082d0:	f7fc f984 	bl	80045dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082d4:	4e93      	ldr	r6, [pc, #588]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80082d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082d8:	e005      	b.n	80082e6 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082da:	f7fc f97f 	bl	80045dc <HAL_GetTick>
 80082de:	1b40      	subs	r0, r0, r5
 80082e0:	2864      	cmp	r0, #100	; 0x64
 80082e2:	f200 814e 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082e6:	6833      	ldr	r3, [r6, #0]
 80082e8:	039b      	lsls	r3, r3, #14
 80082ea:	d5f6      	bpl.n	80082da <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	079d      	lsls	r5, r3, #30
 80082f0:	f100 808a 	bmi.w	8008408 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082f4:	06d9      	lsls	r1, r3, #27
 80082f6:	d533      	bpl.n	8008360 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082f8:	4a8a      	ldr	r2, [pc, #552]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 80082fa:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008302:	2b08      	cmp	r3, #8
 8008304:	f000 80e3 	beq.w	80084ce <HAL_RCC_OscConfig+0x24e>
 8008308:	2b18      	cmp	r3, #24
 800830a:	f000 80db 	beq.w	80084c4 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800830e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8008310:	4d84      	ldr	r5, [pc, #528]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 816f 	beq.w	80085f6 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008320:	f7fc f95c 	bl	80045dc <HAL_GetTick>
 8008324:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008326:	e005      	b.n	8008334 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008328:	f7fc f958 	bl	80045dc <HAL_GetTick>
 800832c:	1b80      	subs	r0, r0, r6
 800832e:	2802      	cmp	r0, #2
 8008330:	f200 8127 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	05db      	lsls	r3, r3, #23
 8008338:	d5f6      	bpl.n	8008328 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800833a:	f7fc f967 	bl	800460c <HAL_GetREVID>
 800833e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008342:	4298      	cmp	r0, r3
 8008344:	f200 8247 	bhi.w	80087d6 <HAL_RCC_OscConfig+0x556>
 8008348:	6a22      	ldr	r2, [r4, #32]
 800834a:	686b      	ldr	r3, [r5, #4]
 800834c:	2a20      	cmp	r2, #32
 800834e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008352:	bf0c      	ite	eq
 8008354:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008358:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800835c:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	071d      	lsls	r5, r3, #28
 8008362:	d516      	bpl.n	8008392 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008364:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8008366:	4d6f      	ldr	r5, [pc, #444]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 8122 	beq.w	80085b2 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800836e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008376:	f7fc f931 	bl	80045dc <HAL_GetTick>
 800837a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800837c:	e005      	b.n	800838a <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800837e:	f7fc f92d 	bl	80045dc <HAL_GetTick>
 8008382:	1b80      	subs	r0, r0, r6
 8008384:	2802      	cmp	r0, #2
 8008386:	f200 80fc 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800838a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800838c:	0798      	lsls	r0, r3, #30
 800838e:	d5f6      	bpl.n	800837e <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	069a      	lsls	r2, r3, #26
 8008394:	d516      	bpl.n	80083c4 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008396:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8008398:	4d62      	ldr	r5, [pc, #392]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 811a 	beq.w	80085d4 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083a6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80083a8:	f7fc f918 	bl	80045dc <HAL_GetTick>
 80083ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083ae:	e005      	b.n	80083bc <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80083b0:	f7fc f914 	bl	80045dc <HAL_GetTick>
 80083b4:	1b80      	subs	r0, r0, r6
 80083b6:	2802      	cmp	r0, #2
 80083b8:	f200 80e3 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	049f      	lsls	r7, r3, #18
 80083c0:	d5f6      	bpl.n	80083b0 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	0759      	lsls	r1, r3, #29
 80083c6:	f100 80a3 	bmi.w	8008510 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083cc:	b1d0      	cbz	r0, 8008404 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083ce:	4d55      	ldr	r5, [pc, #340]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 80083d0:	692b      	ldr	r3, [r5, #16]
 80083d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083d6:	2b18      	cmp	r3, #24
 80083d8:	f000 81ae 	beq.w	8008738 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80083dc:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80083e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083e6:	f000 8142 	beq.w	800866e <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 80083ea:	f7fc f8f7 	bl	80045dc <HAL_GetTick>
 80083ee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083f0:	e005      	b.n	80083fe <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f2:	f7fc f8f3 	bl	80045dc <HAL_GetTick>
 80083f6:	1b00      	subs	r0, r0, r4
 80083f8:	2802      	cmp	r0, #2
 80083fa:	f200 80c2 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	019b      	lsls	r3, r3, #6
 8008402:	d4f6      	bmi.n	80083f2 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8008404:	2000      	movs	r0, #0
}
 8008406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008408:	4a46      	ldr	r2, [pc, #280]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 800840a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800840c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800840e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8008412:	d12d      	bne.n	8008470 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008414:	4b43      	ldr	r3, [pc, #268]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 8008416:	68e2      	ldr	r2, [r4, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	0759      	lsls	r1, r3, #29
 800841c:	d501      	bpl.n	8008422 <HAL_RCC_OscConfig+0x1a2>
 800841e:	2a00      	cmp	r2, #0
 8008420:	d04e      	beq.n	80084c0 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008422:	4d40      	ldr	r5, [pc, #256]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	f023 0319 	bic.w	r3, r3, #25
 800842a:	4313      	orrs	r3, r2
 800842c:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 800842e:	f7fc f8d5 	bl	80045dc <HAL_GetTick>
 8008432:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008434:	e005      	b.n	8008442 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008436:	f7fc f8d1 	bl	80045dc <HAL_GetTick>
 800843a:	1b80      	subs	r0, r0, r6
 800843c:	2802      	cmp	r0, #2
 800843e:	f200 80a0 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008442:	682b      	ldr	r3, [r5, #0]
 8008444:	075b      	lsls	r3, r3, #29
 8008446:	d5f6      	bpl.n	8008436 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008448:	f7fc f8e0 	bl	800460c <HAL_GetREVID>
 800844c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008450:	4298      	cmp	r0, r3
 8008452:	f200 80f7 	bhi.w	8008644 <HAL_RCC_OscConfig+0x3c4>
 8008456:	6922      	ldr	r2, [r4, #16]
 8008458:	686b      	ldr	r3, [r5, #4]
 800845a:	2a40      	cmp	r2, #64	; 0x40
 800845c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008460:	bf0c      	ite	eq
 8008462:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008466:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800846a:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	e741      	b.n	80082f4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008470:	2b18      	cmp	r3, #24
 8008472:	f000 80e3 	beq.w	800863c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008476:	4d2b      	ldr	r5, [pc, #172]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008478:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800847a:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800847c:	2a00      	cmp	r2, #0
 800847e:	f000 80cc 	beq.w	800861a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008482:	f023 0319 	bic.w	r3, r3, #25
 8008486:	4313      	orrs	r3, r2
 8008488:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800848a:	f7fc f8a7 	bl	80045dc <HAL_GetTick>
 800848e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008490:	e004      	b.n	800849c <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008492:	f7fc f8a3 	bl	80045dc <HAL_GetTick>
 8008496:	1b80      	subs	r0, r0, r6
 8008498:	2802      	cmp	r0, #2
 800849a:	d872      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	075f      	lsls	r7, r3, #29
 80084a0:	d5f7      	bpl.n	8008492 <HAL_RCC_OscConfig+0x212>
 80084a2:	e7d1      	b.n	8008448 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80084a4:	f001 0103 	and.w	r1, r1, #3
 80084a8:	2902      	cmp	r1, #2
 80084aa:	f47f aefc 	bne.w	80082a6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ae:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 80084b0:	6812      	ldr	r2, [r2, #0]
 80084b2:	0392      	lsls	r2, r2, #14
 80084b4:	f57f af1b 	bpl.w	80082ee <HAL_RCC_OscConfig+0x6e>
 80084b8:	6862      	ldr	r2, [r4, #4]
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	f47f af17 	bne.w	80082ee <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80084c0:	2001      	movs	r0, #1
}
 80084c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084c4:	f002 0203 	and.w	r2, r2, #3
 80084c8:	2a01      	cmp	r2, #1
 80084ca:	f47f af20 	bne.w	800830e <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084ce:	4b15      	ldr	r3, [pc, #84]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	05da      	lsls	r2, r3, #23
 80084d4:	d502      	bpl.n	80084dc <HAL_RCC_OscConfig+0x25c>
 80084d6:	69e3      	ldr	r3, [r4, #28]
 80084d8:	2b80      	cmp	r3, #128	; 0x80
 80084da:	d1f1      	bne.n	80084c0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084dc:	f7fc f896 	bl	800460c <HAL_GetREVID>
 80084e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80084e4:	4298      	cmp	r0, r3
 80084e6:	f200 80b8 	bhi.w	800865a <HAL_RCC_OscConfig+0x3da>
 80084ea:	6a22      	ldr	r2, [r4, #32]
 80084ec:	2a20      	cmp	r2, #32
 80084ee:	f000 8187 	beq.w	8008800 <HAL_RCC_OscConfig+0x580>
 80084f2:	490c      	ldr	r1, [pc, #48]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 80084f4:	684b      	ldr	r3, [r1, #4]
 80084f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084fa:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80084fe:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	e72d      	b.n	8008360 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008504:	4a07      	ldr	r2, [pc, #28]	; (8008524 <HAL_RCC_OscConfig+0x2a4>)
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800850e:	e6df      	b.n	80082d0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8008510:	4d05      	ldr	r5, [pc, #20]	; (8008528 <HAL_RCC_OscConfig+0x2a8>)
 8008512:	682b      	ldr	r3, [r5, #0]
 8008514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008518:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800851a:	f7fc f85f 	bl	80045dc <HAL_GetTick>
 800851e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008520:	e009      	b.n	8008536 <HAL_RCC_OscConfig+0x2b6>
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400
 8008528:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800852c:	f7fc f856 	bl	80045dc <HAL_GetTick>
 8008530:	1b80      	subs	r0, r0, r6
 8008532:	2864      	cmp	r0, #100	; 0x64
 8008534:	d825      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	05da      	lsls	r2, r3, #23
 800853a:	d5f7      	bpl.n	800852c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800853c:	68a3      	ldr	r3, [r4, #8]
 800853e:	2b01      	cmp	r3, #1
 8008540:	f000 8158 	beq.w	80087f4 <HAL_RCC_OscConfig+0x574>
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 812d 	beq.w	80087a4 <HAL_RCC_OscConfig+0x524>
 800854a:	2b05      	cmp	r3, #5
 800854c:	4ba6      	ldr	r3, [pc, #664]	; (80087e8 <HAL_RCC_OscConfig+0x568>)
 800854e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008550:	f000 815f 	beq.w	8008812 <HAL_RCC_OscConfig+0x592>
 8008554:	f022 0201 	bic.w	r2, r2, #1
 8008558:	671a      	str	r2, [r3, #112]	; 0x70
 800855a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800855c:	f022 0204 	bic.w	r2, r2, #4
 8008560:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008562:	f7fc f83b 	bl	80045dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008566:	4ea0      	ldr	r6, [pc, #640]	; (80087e8 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008568:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800856c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800856e:	e004      	b.n	800857a <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008570:	f7fc f834 	bl	80045dc <HAL_GetTick>
 8008574:	1b40      	subs	r0, r0, r5
 8008576:	42b8      	cmp	r0, r7
 8008578:	d803      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800857a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800857c:	079b      	lsls	r3, r3, #30
 800857e:	d5f7      	bpl.n	8008570 <HAL_RCC_OscConfig+0x2f0>
 8008580:	e723      	b.n	80083ca <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8008582:	2003      	movs	r0, #3
}
 8008584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008586:	4d98      	ldr	r5, [pc, #608]	; (80087e8 <HAL_RCC_OscConfig+0x568>)
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858e:	602b      	str	r3, [r5, #0]
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008596:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008598:	f7fc f820 	bl	80045dc <HAL_GetTick>
 800859c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800859e:	e004      	b.n	80085aa <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085a0:	f7fc f81c 	bl	80045dc <HAL_GetTick>
 80085a4:	1b80      	subs	r0, r0, r6
 80085a6:	2864      	cmp	r0, #100	; 0x64
 80085a8:	d8eb      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	039f      	lsls	r7, r3, #14
 80085ae:	d4f7      	bmi.n	80085a0 <HAL_RCC_OscConfig+0x320>
 80085b0:	e69c      	b.n	80082ec <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80085b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80085b4:	f023 0301 	bic.w	r3, r3, #1
 80085b8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80085ba:	f7fc f80f 	bl	80045dc <HAL_GetTick>
 80085be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085c0:	e004      	b.n	80085cc <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085c2:	f7fc f80b 	bl	80045dc <HAL_GetTick>
 80085c6:	1b80      	subs	r0, r0, r6
 80085c8:	2802      	cmp	r0, #2
 80085ca:	d8da      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085cc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80085ce:	0799      	lsls	r1, r3, #30
 80085d0:	d4f7      	bmi.n	80085c2 <HAL_RCC_OscConfig+0x342>
 80085d2:	e6dd      	b.n	8008390 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085da:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80085dc:	f7fb fffe 	bl	80045dc <HAL_GetTick>
 80085e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085e2:	e004      	b.n	80085ee <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085e4:	f7fb fffa 	bl	80045dc <HAL_GetTick>
 80085e8:	1b80      	subs	r0, r0, r6
 80085ea:	2802      	cmp	r0, #2
 80085ec:	d8c9      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	0498      	lsls	r0, r3, #18
 80085f2:	d4f7      	bmi.n	80085e4 <HAL_RCC_OscConfig+0x364>
 80085f4:	e6e5      	b.n	80083c2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80085fe:	f7fb ffed 	bl	80045dc <HAL_GetTick>
 8008602:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008604:	e004      	b.n	8008610 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008606:	f7fb ffe9 	bl	80045dc <HAL_GetTick>
 800860a:	1b80      	subs	r0, r0, r6
 800860c:	2802      	cmp	r0, #2
 800860e:	d8b8      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	05df      	lsls	r7, r3, #23
 8008614:	d4f7      	bmi.n	8008606 <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	e6a2      	b.n	8008360 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008620:	f7fb ffdc 	bl	80045dc <HAL_GetTick>
 8008624:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008626:	e004      	b.n	8008632 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008628:	f7fb ffd8 	bl	80045dc <HAL_GetTick>
 800862c:	1b80      	subs	r0, r0, r6
 800862e:	2802      	cmp	r0, #2
 8008630:	d8a7      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	0758      	lsls	r0, r3, #29
 8008636:	d4f7      	bmi.n	8008628 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	e65b      	b.n	80082f4 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800863c:	0790      	lsls	r0, r2, #30
 800863e:	f47f af1a 	bne.w	8008476 <HAL_RCC_OscConfig+0x1f6>
 8008642:	e6e7      	b.n	8008414 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008644:	686b      	ldr	r3, [r5, #4]
 8008646:	6922      	ldr	r2, [r4, #16]
 8008648:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800864c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008650:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	e64e      	b.n	80082f4 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8008656:	2001      	movs	r0, #1
}
 8008658:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800865a:	4a63      	ldr	r2, [pc, #396]	; (80087e8 <HAL_RCC_OscConfig+0x568>)
 800865c:	6a21      	ldr	r1, [r4, #32]
 800865e:	68d3      	ldr	r3, [r2, #12]
 8008660:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008664:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008668:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	e678      	b.n	8008360 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800866e:	f7fb ffb5 	bl	80045dc <HAL_GetTick>
 8008672:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008674:	e004      	b.n	8008680 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008676:	f7fb ffb1 	bl	80045dc <HAL_GetTick>
 800867a:	1b80      	subs	r0, r0, r6
 800867c:	2802      	cmp	r0, #2
 800867e:	d880      	bhi.n	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	0199      	lsls	r1, r3, #6
 8008684:	d4f7      	bmi.n	8008676 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008686:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008688:	4b58      	ldr	r3, [pc, #352]	; (80087ec <HAL_RCC_OscConfig+0x56c>)
 800868a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800868c:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800868e:	4958      	ldr	r1, [pc, #352]	; (80087f0 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008690:	4e55      	ldr	r6, [pc, #340]	; (80087e8 <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008692:	4313      	orrs	r3, r2
 8008694:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008696:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800869a:	62ab      	str	r3, [r5, #40]	; 0x28
 800869c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80086a0:	3b01      	subs	r3, #1
 80086a2:	3a01      	subs	r2, #1
 80086a4:	025b      	lsls	r3, r3, #9
 80086a6:	0412      	lsls	r2, r2, #16
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80086ae:	4313      	orrs	r3, r2
 80086b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086b2:	3a01      	subs	r2, #1
 80086b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086b8:	4313      	orrs	r3, r2
 80086ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80086bc:	3a01      	subs	r2, #1
 80086be:	0612      	lsls	r2, r2, #24
 80086c0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80086c4:	4313      	orrs	r3, r2
 80086c6:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80086c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80086d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80086d4:	4011      	ands	r1, r2
 80086d6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80086da:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80086e0:	f023 030c 	bic.w	r3, r3, #12
 80086e4:	4313      	orrs	r3, r2
 80086e6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80086ec:	f023 0302 	bic.w	r3, r3, #2
 80086f0:	4313      	orrs	r3, r2
 80086f2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086fa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80086fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008702:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008704:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800870a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800870c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800871a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800871c:	f7fb ff5e 	bl	80045dc <HAL_GetTick>
 8008720:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008722:	e005      	b.n	8008730 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008724:	f7fb ff5a 	bl	80045dc <HAL_GetTick>
 8008728:	1b00      	subs	r0, r0, r4
 800872a:	2802      	cmp	r0, #2
 800872c:	f63f af29 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008730:	6833      	ldr	r3, [r6, #0]
 8008732:	019a      	lsls	r2, r3, #6
 8008734:	d5f6      	bpl.n	8008724 <HAL_RCC_OscConfig+0x4a4>
 8008736:	e665      	b.n	8008404 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008738:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800873a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800873c:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800873e:	f43f ae62 	beq.w	8008406 <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008742:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008746:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008748:	428b      	cmp	r3, r1
 800874a:	f47f aeb9 	bne.w	80084c0 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800874e:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008754:	429a      	cmp	r2, r3
 8008756:	f47f aeb3 	bne.w	80084c0 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800875a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800875c:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8008760:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008762:	429a      	cmp	r2, r3
 8008764:	f47f aeac 	bne.w	80084c0 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008768:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800876a:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800876e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008770:	429a      	cmp	r2, r3
 8008772:	f47f aea5 	bne.w	80084c0 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008778:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800877c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800877e:	429a      	cmp	r2, r3
 8008780:	f47f ae9e 	bne.w	80084c0 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008784:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008786:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800878a:	3801      	subs	r0, #1
  return HAL_OK;
 800878c:	1a28      	subs	r0, r5, r0
 800878e:	bf18      	it	ne
 8008790:	2001      	movne	r0, #1
}
 8008792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008794:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	e595      	b.n	80082d0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a4:	4d10      	ldr	r5, [pc, #64]	; (80087e8 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087a6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	672b      	str	r3, [r5, #112]	; 0x70
 80087b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80087b4:	f023 0304 	bic.w	r3, r3, #4
 80087b8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80087ba:	f7fb ff0f 	bl	80045dc <HAL_GetTick>
 80087be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087c0:	e005      	b.n	80087ce <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087c2:	f7fb ff0b 	bl	80045dc <HAL_GetTick>
 80087c6:	1b80      	subs	r0, r0, r6
 80087c8:	42b8      	cmp	r0, r7
 80087ca:	f63f aeda 	bhi.w	8008582 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80087d0:	0798      	lsls	r0, r3, #30
 80087d2:	d4f6      	bmi.n	80087c2 <HAL_RCC_OscConfig+0x542>
 80087d4:	e5f9      	b.n	80083ca <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087d6:	68eb      	ldr	r3, [r5, #12]
 80087d8:	6a22      	ldr	r2, [r4, #32]
 80087da:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80087de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80087e2:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	e5bb      	b.n	8008360 <HAL_RCC_OscConfig+0xe0>
 80087e8:	58024400 	.word	0x58024400
 80087ec:	fffffc0c 	.word	0xfffffc0c
 80087f0:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087f4:	4a0b      	ldr	r2, [pc, #44]	; (8008824 <HAL_RCC_OscConfig+0x5a4>)
 80087f6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087fe:	e6b0      	b.n	8008562 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008800:	4a08      	ldr	r2, [pc, #32]	; (8008824 <HAL_RCC_OscConfig+0x5a4>)
 8008802:	6853      	ldr	r3, [r2, #4]
 8008804:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800880c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	e5a6      	b.n	8008360 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008812:	f042 0204 	orr.w	r2, r2, #4
 8008816:	671a      	str	r2, [r3, #112]	; 0x70
 8008818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800881a:	f042 0201 	orr.w	r2, r2, #1
 800881e:	671a      	str	r2, [r3, #112]	; 0x70
 8008820:	e69f      	b.n	8008562 <HAL_RCC_OscConfig+0x2e2>
 8008822:	bf00      	nop
 8008824:	58024400 	.word	0x58024400

08008828 <HAL_RCC_MCOConfig>:
{
 8008828:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800882a:	4e25      	ldr	r6, [pc, #148]	; (80088c0 <HAL_RCC_MCOConfig+0x98>)
{
 800882c:	b088      	sub	sp, #32
 800882e:	460d      	mov	r5, r1
 8008830:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 8008832:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 8008836:	b9f8      	cbnz	r0, 8008878 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8008838:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800883c:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008840:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 8008842:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8008846:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800884a:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800884c:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008850:	481c      	ldr	r0, [pc, #112]	; (80088c4 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008856:	2302      	movs	r3, #2
 8008858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	2303      	movs	r3, #3
 8008860:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008864:	f7fe fd0a 	bl	800727c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008868:	6932      	ldr	r2, [r6, #16]
 800886a:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800886e:	432a      	orrs	r2, r5
 8008870:	4322      	orrs	r2, r4
 8008872:	6132      	str	r2, [r6, #16]
}
 8008874:	b008      	add	sp, #32
 8008876:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8008878:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800887c:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008880:	4811      	ldr	r0, [pc, #68]	; (80088c8 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 8008882:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8008886:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008890:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 8008892:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008894:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	2303      	movs	r3, #3
 800889e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80088a2:	2300      	movs	r3, #0
 80088a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80088a6:	f7fe fce9 	bl	800727c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80088aa:	6933      	ldr	r3, [r6, #16]
 80088ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80088b0:	ea43 0105 	orr.w	r1, r3, r5
 80088b4:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80088b8:	6131      	str	r1, [r6, #16]
}
 80088ba:	b008      	add	sp, #32
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
 80088be:	bf00      	nop
 80088c0:	58024400 	.word	0x58024400
 80088c4:	58020000 	.word	0x58020000
 80088c8:	58020800 	.word	0x58020800

080088cc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088cc:	4a47      	ldr	r2, [pc, #284]	; (80089ec <HAL_RCC_GetSysClockFreq+0x120>)
 80088ce:	6913      	ldr	r3, [r2, #16]
 80088d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d004      	beq.n	80088e2 <HAL_RCC_GetSysClockFreq+0x16>
 80088d8:	2b18      	cmp	r3, #24
 80088da:	d00d      	beq.n	80088f8 <HAL_RCC_GetSysClockFreq+0x2c>
 80088dc:	b11b      	cbz	r3, 80088e6 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80088de:	4844      	ldr	r0, [pc, #272]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x124>)
 80088e0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088e2:	4844      	ldr	r0, [pc, #272]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x128>)
 80088e4:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	0699      	lsls	r1, r3, #26
 80088ea:	d54a      	bpl.n	8008982 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	4842      	ldr	r0, [pc, #264]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80088f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088f4:	40d8      	lsrs	r0, r3
 80088f6:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80088fa:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80088fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088fe:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8008900:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008904:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008906:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800890a:	d038      	beq.n	800897e <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800890c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008910:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008914:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008918:	fb05 f101 	mul.w	r1, r5, r1
 800891c:	2b01      	cmp	r3, #1
 800891e:	ee07 1a90 	vmov	s15, r1
 8008922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8008926:	d002      	beq.n	800892e <HAL_RCC_GetSysClockFreq+0x62>
 8008928:	2b02      	cmp	r3, #2
 800892a:	d02c      	beq.n	8008986 <HAL_RCC_GetSysClockFreq+0xba>
 800892c:	b393      	cbz	r3, 8008994 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800892e:	ee07 0a90 	vmov	s15, r0
 8008932:	eddf 6a32 	vldr	s13, [pc, #200]	; 80089fc <HAL_RCC_GetSysClockFreq+0x130>
 8008936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800893a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800893c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008940:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8008a00 <HAL_RCC_GetSysClockFreq+0x134>
 8008944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008948:	ee06 3a90 	vmov	s13, r3
 800894c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008950:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008954:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008958:	eee7 6a25 	vfma.f32	s13, s14, s11
 800895c:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008960:	4b22      	ldr	r3, [pc, #136]	; (80089ec <HAL_RCC_GetSysClockFreq+0x120>)
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008968:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897a:	ee17 0a90 	vmov	r0, s15
}
 800897e:	bc30      	pop	{r4, r5}
 8008980:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008982:	481d      	ldr	r0, [pc, #116]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8008984:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008986:	ee07 0a90 	vmov	s15, r0
 800898a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008a04 <HAL_RCC_GetSysClockFreq+0x138>
 800898e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008992:	e7d2      	b.n	800893a <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008994:	6813      	ldr	r3, [r2, #0]
 8008996:	069b      	lsls	r3, r3, #26
 8008998:	d520      	bpl.n	80089dc <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800899a:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800899c:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a0:	4915      	ldr	r1, [pc, #84]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80089a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089b0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008a00 <HAL_RCC_GetSysClockFreq+0x134>
 80089b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089b8:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ba:	ee06 3a90 	vmov	s13, r3
 80089be:	ee05 1a90 	vmov	s11, r1
 80089c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80089c6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80089ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 80089ce:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80089d2:	eee7 6a05 	vfma.f32	s13, s14, s10
 80089d6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80089da:	e7c1      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089dc:	ee07 0a90 	vmov	s15, r0
 80089e0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008a08 <HAL_RCC_GetSysClockFreq+0x13c>
 80089e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089e8:	e7a7      	b.n	800893a <HAL_RCC_GetSysClockFreq+0x6e>
 80089ea:	bf00      	nop
 80089ec:	58024400 	.word	0x58024400
 80089f0:	003d0900 	.word	0x003d0900
 80089f4:	017d7840 	.word	0x017d7840
 80089f8:	03d09000 	.word	0x03d09000
 80089fc:	4a742400 	.word	0x4a742400
 8008a00:	39000000 	.word	0x39000000
 8008a04:	4bbebc20 	.word	0x4bbebc20
 8008a08:	4c742400 	.word	0x4c742400

08008a0c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f000 810c 	beq.w	8008c2a <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a12:	4a8c      	ldr	r2, [pc, #560]	; (8008c44 <HAL_RCC_ClockConfig+0x238>)
 8008a14:	6813      	ldr	r3, [r2, #0]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	428b      	cmp	r3, r1
{
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	4604      	mov	r4, r0
 8008a22:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a24:	d20c      	bcs.n	8008a40 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a26:	6813      	ldr	r3, [r2, #0]
 8008a28:	f023 030f 	bic.w	r3, r3, #15
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a30:	6813      	ldr	r3, [r2, #0]
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	428b      	cmp	r3, r1
 8008a38:	d002      	beq.n	8008a40 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8008a3a:	2001      	movs	r0, #1
}
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	075f      	lsls	r7, r3, #29
 8008a44:	d50b      	bpl.n	8008a5e <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a46:	4980      	ldr	r1, [pc, #512]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008a48:	6920      	ldr	r0, [r4, #16]
 8008a4a:	698a      	ldr	r2, [r1, #24]
 8008a4c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a50:	4290      	cmp	r0, r2
 8008a52:	d904      	bls.n	8008a5e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a54:	698a      	ldr	r2, [r1, #24]
 8008a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a5a:	4302      	orrs	r2, r0
 8008a5c:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a5e:	071e      	lsls	r6, r3, #28
 8008a60:	d50b      	bpl.n	8008a7a <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a62:	4979      	ldr	r1, [pc, #484]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008a64:	6960      	ldr	r0, [r4, #20]
 8008a66:	69ca      	ldr	r2, [r1, #28]
 8008a68:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008a6c:	4290      	cmp	r0, r2
 8008a6e:	d904      	bls.n	8008a7a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a70:	69ca      	ldr	r2, [r1, #28]
 8008a72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008a76:	4302      	orrs	r2, r0
 8008a78:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a7a:	06d8      	lsls	r0, r3, #27
 8008a7c:	d50b      	bpl.n	8008a96 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a7e:	4972      	ldr	r1, [pc, #456]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008a80:	69a0      	ldr	r0, [r4, #24]
 8008a82:	69ca      	ldr	r2, [r1, #28]
 8008a84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008a88:	4290      	cmp	r0, r2
 8008a8a:	d904      	bls.n	8008a96 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a8c:	69ca      	ldr	r2, [r1, #28]
 8008a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a92:	4302      	orrs	r2, r0
 8008a94:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a96:	0699      	lsls	r1, r3, #26
 8008a98:	d50b      	bpl.n	8008ab2 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a9a:	496b      	ldr	r1, [pc, #428]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008a9c:	69e0      	ldr	r0, [r4, #28]
 8008a9e:	6a0a      	ldr	r2, [r1, #32]
 8008aa0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d904      	bls.n	8008ab2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008aa8:	6a0a      	ldr	r2, [r1, #32]
 8008aaa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008aae:	4302      	orrs	r2, r0
 8008ab0:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ab2:	079a      	lsls	r2, r3, #30
 8008ab4:	f140 80ab 	bpl.w	8008c0e <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ab8:	4863      	ldr	r0, [pc, #396]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008aba:	68e1      	ldr	r1, [r4, #12]
 8008abc:	6982      	ldr	r2, [r0, #24]
 8008abe:	f002 020f 	and.w	r2, r2, #15
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	d904      	bls.n	8008ad0 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ac6:	6982      	ldr	r2, [r0, #24]
 8008ac8:	f022 020f 	bic.w	r2, r2, #15
 8008acc:	430a      	orrs	r2, r1
 8008ace:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ad0:	07d8      	lsls	r0, r3, #31
 8008ad2:	d530      	bpl.n	8008b36 <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ad4:	4a5c      	ldr	r2, [pc, #368]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008ad6:	68a1      	ldr	r1, [r4, #8]
 8008ad8:	6993      	ldr	r3, [r2, #24]
 8008ada:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008ade:	430b      	orrs	r3, r1
 8008ae0:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ae2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ae4:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ae6:	2902      	cmp	r1, #2
 8008ae8:	f000 80a1 	beq.w	8008c2e <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008aec:	2903      	cmp	r1, #3
 8008aee:	f000 8098 	beq.w	8008c22 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008af2:	2901      	cmp	r1, #1
 8008af4:	f000 80a1 	beq.w	8008c3a <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008af8:	0758      	lsls	r0, r3, #29
 8008afa:	d59e      	bpl.n	8008a3a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008afc:	4e52      	ldr	r6, [pc, #328]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008afe:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b02:	6933      	ldr	r3, [r6, #16]
 8008b04:	f023 0307 	bic.w	r3, r3, #7
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8008b0c:	f7fb fd66 	bl	80045dc <HAL_GetTick>
 8008b10:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b12:	e005      	b.n	8008b20 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b14:	f7fb fd62 	bl	80045dc <HAL_GetTick>
 8008b18:	1bc0      	subs	r0, r0, r7
 8008b1a:	4540      	cmp	r0, r8
 8008b1c:	f200 808b 	bhi.w	8008c36 <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b20:	6933      	ldr	r3, [r6, #16]
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b28:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008b2c:	d1f2      	bne.n	8008b14 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	0799      	lsls	r1, r3, #30
 8008b32:	d506      	bpl.n	8008b42 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b34:	68e1      	ldr	r1, [r4, #12]
 8008b36:	4844      	ldr	r0, [pc, #272]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008b38:	6982      	ldr	r2, [r0, #24]
 8008b3a:	f002 020f 	and.w	r2, r2, #15
 8008b3e:	428a      	cmp	r2, r1
 8008b40:	d869      	bhi.n	8008c16 <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b42:	4940      	ldr	r1, [pc, #256]	; (8008c44 <HAL_RCC_ClockConfig+0x238>)
 8008b44:	680a      	ldr	r2, [r1, #0]
 8008b46:	f002 020f 	and.w	r2, r2, #15
 8008b4a:	42aa      	cmp	r2, r5
 8008b4c:	d90a      	bls.n	8008b64 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4e:	680a      	ldr	r2, [r1, #0]
 8008b50:	f022 020f 	bic.w	r2, r2, #15
 8008b54:	432a      	orrs	r2, r5
 8008b56:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b58:	680a      	ldr	r2, [r1, #0]
 8008b5a:	f002 020f 	and.w	r2, r2, #15
 8008b5e:	42aa      	cmp	r2, r5
 8008b60:	f47f af6b 	bne.w	8008a3a <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b64:	075a      	lsls	r2, r3, #29
 8008b66:	d50b      	bpl.n	8008b80 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b68:	4937      	ldr	r1, [pc, #220]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008b6a:	6920      	ldr	r0, [r4, #16]
 8008b6c:	698a      	ldr	r2, [r1, #24]
 8008b6e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b72:	4290      	cmp	r0, r2
 8008b74:	d204      	bcs.n	8008b80 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b76:	698a      	ldr	r2, [r1, #24]
 8008b78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b7c:	4302      	orrs	r2, r0
 8008b7e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b80:	071f      	lsls	r7, r3, #28
 8008b82:	d50b      	bpl.n	8008b9c <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b84:	4930      	ldr	r1, [pc, #192]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008b86:	6960      	ldr	r0, [r4, #20]
 8008b88:	69ca      	ldr	r2, [r1, #28]
 8008b8a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008b8e:	4290      	cmp	r0, r2
 8008b90:	d204      	bcs.n	8008b9c <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b92:	69ca      	ldr	r2, [r1, #28]
 8008b94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b98:	4302      	orrs	r2, r0
 8008b9a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9c:	06de      	lsls	r6, r3, #27
 8008b9e:	d50b      	bpl.n	8008bb8 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ba0:	4929      	ldr	r1, [pc, #164]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008ba2:	69a0      	ldr	r0, [r4, #24]
 8008ba4:	69ca      	ldr	r2, [r1, #28]
 8008ba6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008baa:	4290      	cmp	r0, r2
 8008bac:	d204      	bcs.n	8008bb8 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bae:	69ca      	ldr	r2, [r1, #28]
 8008bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008bb4:	4302      	orrs	r2, r0
 8008bb6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bb8:	069d      	lsls	r5, r3, #26
 8008bba:	d50b      	bpl.n	8008bd4 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bbc:	4a22      	ldr	r2, [pc, #136]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008bbe:	69e1      	ldr	r1, [r4, #28]
 8008bc0:	6a13      	ldr	r3, [r2, #32]
 8008bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	d204      	bcs.n	8008bd4 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008bca:	6a13      	ldr	r3, [r2, #32]
 8008bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bd4:	f7ff fe7a 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 8008bd8:	4a1b      	ldr	r2, [pc, #108]	; (8008c48 <HAL_RCC_ClockConfig+0x23c>)
 8008bda:	4603      	mov	r3, r0
 8008bdc:	481b      	ldr	r0, [pc, #108]	; (8008c4c <HAL_RCC_ClockConfig+0x240>)
 8008bde:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008be0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008be2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8008be6:	4d1a      	ldr	r5, [pc, #104]	; (8008c50 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008be8:	f002 020f 	and.w	r2, r2, #15
 8008bec:	4c19      	ldr	r4, [pc, #100]	; (8008c54 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bee:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bf0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bf2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8008bf6:	4818      	ldr	r0, [pc, #96]	; (8008c58 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bf8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bfc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8008bfe:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8008c00:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c02:	40d3      	lsrs	r3, r2
 8008c04:	6023      	str	r3, [r4, #0]
}
 8008c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008c0a:	f7fb bc85 	b.w	8004518 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c0e:	07da      	lsls	r2, r3, #31
 8008c10:	f53f af60 	bmi.w	8008ad4 <HAL_RCC_ClockConfig+0xc8>
 8008c14:	e795      	b.n	8008b42 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c16:	6982      	ldr	r2, [r0, #24]
 8008c18:	f022 020f 	bic.w	r2, r2, #15
 8008c1c:	4311      	orrs	r1, r2
 8008c1e:	6181      	str	r1, [r0, #24]
 8008c20:	e78f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c22:	019f      	lsls	r7, r3, #6
 8008c24:	f53f af6a 	bmi.w	8008afc <HAL_RCC_ClockConfig+0xf0>
 8008c28:	e707      	b.n	8008a3a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008c2a:	2001      	movs	r0, #1
}
 8008c2c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c2e:	039b      	lsls	r3, r3, #14
 8008c30:	f53f af64 	bmi.w	8008afc <HAL_RCC_ClockConfig+0xf0>
 8008c34:	e701      	b.n	8008a3a <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8008c36:	2003      	movs	r0, #3
 8008c38:	e700      	b.n	8008a3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c3a:	05de      	lsls	r6, r3, #23
 8008c3c:	f53f af5e 	bmi.w	8008afc <HAL_RCC_ClockConfig+0xf0>
 8008c40:	e6fb      	b.n	8008a3a <HAL_RCC_ClockConfig+0x2e>
 8008c42:	bf00      	nop
 8008c44:	52002000 	.word	0x52002000
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	08018acc 	.word	0x08018acc
 8008c50:	2400030c 	.word	0x2400030c
 8008c54:	24000310 	.word	0x24000310
 8008c58:	24000318 	.word	0x24000318

08008c5c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c5c:	4a18      	ldr	r2, [pc, #96]	; (8008cc0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c5e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c60:	6913      	ldr	r3, [r2, #16]
 8008c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c66:	2b10      	cmp	r3, #16
 8008c68:	d01a      	beq.n	8008ca0 <HAL_RCC_GetHCLKFreq+0x44>
 8008c6a:	2b18      	cmp	r3, #24
 8008c6c:	d023      	beq.n	8008cb6 <HAL_RCC_GetHCLKFreq+0x5a>
 8008c6e:	b1cb      	cbz	r3, 8008ca4 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8008c70:	4814      	ldr	r0, [pc, #80]	; (8008cc4 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c72:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <HAL_RCC_GetHCLKFreq+0x64>)
 8008c74:	4914      	ldr	r1, [pc, #80]	; (8008cc8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8008c76:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c78:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c7a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c7e:	4c13      	ldr	r4, [pc, #76]	; (8008ccc <HAL_RCC_GetHCLKFreq+0x70>)
 8008c80:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c84:	4d12      	ldr	r5, [pc, #72]	; (8008cd0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c86:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c88:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c8a:	f002 021f 	and.w	r2, r2, #31
 8008c8e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c92:	f003 001f 	and.w	r0, r3, #31
 8008c96:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8008c9a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c9c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ca0:	480c      	ldr	r0, [pc, #48]	; (8008cd4 <HAL_RCC_GetHCLKFreq+0x78>)
 8008ca2:	e7e6      	b.n	8008c72 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca4:	6813      	ldr	r3, [r2, #0]
 8008ca6:	069b      	lsls	r3, r3, #26
 8008ca8:	d508      	bpl.n	8008cbc <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008caa:	6812      	ldr	r2, [r2, #0]
 8008cac:	480a      	ldr	r0, [pc, #40]	; (8008cd8 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008cae:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008cb2:	40d0      	lsrs	r0, r2
 8008cb4:	e7dd      	b.n	8008c72 <HAL_RCC_GetHCLKFreq+0x16>
 8008cb6:	f7ff fa5f 	bl	8008178 <HAL_RCC_GetSysClockFreq.part.0>
 8008cba:	e7da      	b.n	8008c72 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cbc:	4806      	ldr	r0, [pc, #24]	; (8008cd8 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008cbe:	e7d8      	b.n	8008c72 <HAL_RCC_GetHCLKFreq+0x16>
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	003d0900 	.word	0x003d0900
 8008cc8:	08018acc 	.word	0x08018acc
 8008ccc:	24000310 	.word	0x24000310
 8008cd0:	2400030c 	.word	0x2400030c
 8008cd4:	017d7840 	.word	0x017d7840
 8008cd8:	03d09000 	.word	0x03d09000

08008cdc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cdc:	4a1c      	ldr	r2, [pc, #112]	; (8008d50 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cde:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ce0:	6913      	ldr	r3, [r2, #16]
 8008ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d021      	beq.n	8008d2e <HAL_RCC_GetPCLK1Freq+0x52>
 8008cea:	2b18      	cmp	r3, #24
 8008cec:	d02b      	beq.n	8008d46 <HAL_RCC_GetPCLK1Freq+0x6a>
 8008cee:	b303      	cbz	r3, 8008d32 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008cf0:	4818      	ldr	r0, [pc, #96]	; (8008d54 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cf2:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <HAL_RCC_GetPCLK1Freq+0x74>)
 8008cf4:	4918      	ldr	r1, [pc, #96]	; (8008d58 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8008cf6:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8008cf8:	4d18      	ldr	r5, [pc, #96]	; (8008d5c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cfa:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cfe:	4c18      	ldr	r4, [pc, #96]	; (8008d60 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d00:	5ccb      	ldrb	r3, [r1, r3]
 8008d02:	f003 031f 	and.w	r3, r3, #31
 8008d06:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d0a:	6990      	ldr	r0, [r2, #24]
 8008d0c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8008d10:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d12:	5c08      	ldrb	r0, [r1, r0]
 8008d14:	f000 001f 	and.w	r0, r0, #31
 8008d18:	40c3      	lsrs	r3, r0
 8008d1a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d1c:	69d2      	ldr	r2, [r2, #28]
 8008d1e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8008d22:	5c88      	ldrb	r0, [r1, r2]
 8008d24:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d28:	fa23 f000 	lsr.w	r0, r3, r0
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d2e:	480d      	ldr	r0, [pc, #52]	; (8008d64 <HAL_RCC_GetPCLK1Freq+0x88>)
 8008d30:	e7df      	b.n	8008cf2 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d32:	6813      	ldr	r3, [r2, #0]
 8008d34:	069b      	lsls	r3, r3, #26
 8008d36:	d509      	bpl.n	8008d4c <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d38:	6810      	ldr	r0, [r2, #0]
 8008d3a:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008d3c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8008d40:	fa23 f000 	lsr.w	r0, r3, r0
 8008d44:	e7d5      	b.n	8008cf2 <HAL_RCC_GetPCLK1Freq+0x16>
 8008d46:	f7ff fa17 	bl	8008178 <HAL_RCC_GetSysClockFreq.part.0>
 8008d4a:	e7d2      	b.n	8008cf2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d4c:	4806      	ldr	r0, [pc, #24]	; (8008d68 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8008d4e:	e7d0      	b.n	8008cf2 <HAL_RCC_GetPCLK1Freq+0x16>
 8008d50:	58024400 	.word	0x58024400
 8008d54:	003d0900 	.word	0x003d0900
 8008d58:	08018acc 	.word	0x08018acc
 8008d5c:	2400030c 	.word	0x2400030c
 8008d60:	24000310 	.word	0x24000310
 8008d64:	017d7840 	.word	0x017d7840
 8008d68:	03d09000 	.word	0x03d09000

08008d6c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d6c:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d6e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d70:	6913      	ldr	r3, [r2, #16]
 8008d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d021      	beq.n	8008dbe <HAL_RCC_GetPCLK2Freq+0x52>
 8008d7a:	2b18      	cmp	r3, #24
 8008d7c:	d02b      	beq.n	8008dd6 <HAL_RCC_GetPCLK2Freq+0x6a>
 8008d7e:	b303      	cbz	r3, 8008dc2 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008d80:	4818      	ldr	r0, [pc, #96]	; (8008de4 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d82:	4a17      	ldr	r2, [pc, #92]	; (8008de0 <HAL_RCC_GetPCLK2Freq+0x74>)
 8008d84:	4918      	ldr	r1, [pc, #96]	; (8008de8 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8008d86:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8008d88:	4d18      	ldr	r5, [pc, #96]	; (8008dec <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d8a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d8e:	4c18      	ldr	r4, [pc, #96]	; (8008df0 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d90:	5ccb      	ldrb	r3, [r1, r3]
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d9a:	6990      	ldr	r0, [r2, #24]
 8008d9c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8008da0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008da2:	5c08      	ldrb	r0, [r1, r0]
 8008da4:	f000 001f 	and.w	r0, r0, #31
 8008da8:	40c3      	lsrs	r3, r0
 8008daa:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008dac:	69d2      	ldr	r2, [r2, #28]
 8008dae:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8008db2:	5c88      	ldrb	r0, [r1, r2]
 8008db4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008db8:	fa23 f000 	lsr.w	r0, r3, r0
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dbe:	480d      	ldr	r0, [pc, #52]	; (8008df4 <HAL_RCC_GetPCLK2Freq+0x88>)
 8008dc0:	e7df      	b.n	8008d82 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	069b      	lsls	r3, r3, #26
 8008dc6:	d509      	bpl.n	8008ddc <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dc8:	6810      	ldr	r0, [r2, #0]
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008dcc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8008dd0:	fa23 f000 	lsr.w	r0, r3, r0
 8008dd4:	e7d5      	b.n	8008d82 <HAL_RCC_GetPCLK2Freq+0x16>
 8008dd6:	f7ff f9cf 	bl	8008178 <HAL_RCC_GetSysClockFreq.part.0>
 8008dda:	e7d2      	b.n	8008d82 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ddc:	4806      	ldr	r0, [pc, #24]	; (8008df8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008dde:	e7d0      	b.n	8008d82 <HAL_RCC_GetPCLK2Freq+0x16>
 8008de0:	58024400 	.word	0x58024400
 8008de4:	003d0900 	.word	0x003d0900
 8008de8:	08018acc 	.word	0x08018acc
 8008dec:	2400030c 	.word	0x2400030c
 8008df0:	24000310 	.word	0x24000310
 8008df4:	017d7840 	.word	0x017d7840
 8008df8:	03d09000 	.word	0x03d09000

08008dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dfe:	4c3a      	ldr	r4, [pc, #232]	; (8008ee8 <RCCEx_PLL2_Config+0xec>)
 8008e00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d067      	beq.n	8008eda <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	460f      	mov	r7, r1
 8008e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e16:	f7fb fbe1 	bl	80045dc <HAL_GetTick>
 8008e1a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e1c:	e004      	b.n	8008e28 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e1e:	f7fb fbdd 	bl	80045dc <HAL_GetTick>
 8008e22:	1b43      	subs	r3, r0, r5
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d856      	bhi.n	8008ed6 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	011a      	lsls	r2, r3, #4
 8008e2c:	d4f7      	bmi.n	8008e1e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e30:	6832      	ldr	r2, [r6, #0]
 8008e32:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e36:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008e3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e3c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	3a01      	subs	r2, #1
 8008e44:	025b      	lsls	r3, r3, #9
 8008e46:	0412      	lsls	r2, r2, #16
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	6872      	ldr	r2, [r6, #4]
 8008e52:	3a01      	subs	r2, #1
 8008e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	6932      	ldr	r2, [r6, #16]
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	0612      	lsls	r2, r2, #24
 8008e60:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008e64:	4313      	orrs	r3, r2
 8008e66:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e6a:	6972      	ldr	r2, [r6, #20]
 8008e6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e70:	4313      	orrs	r3, r2
 8008e72:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e76:	69b3      	ldr	r3, [r6, #24]
 8008e78:	f022 0220 	bic.w	r2, r2, #32
 8008e7c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e80:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e84:	f022 0210 	bic.w	r2, r2, #16
 8008e88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e8a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008e8c:	69f2      	ldr	r2, [r6, #28]
 8008e8e:	400b      	ands	r3, r1
 8008e90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008e94:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e98:	f043 0310 	orr.w	r3, r3, #16
 8008e9c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008ea0:	b1ef      	cbz	r7, 8008ede <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ea2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ea4:	bf0c      	ite	eq
 8008ea6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008eaa:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008eae:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008eb0:	4c0d      	ldr	r4, [pc, #52]	; (8008ee8 <RCCEx_PLL2_Config+0xec>)
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008eb8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eba:	f7fb fb8f 	bl	80045dc <HAL_GetTick>
 8008ebe:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ec0:	e004      	b.n	8008ecc <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ec2:	f7fb fb8b 	bl	80045dc <HAL_GetTick>
 8008ec6:	1b40      	subs	r0, r0, r5
 8008ec8:	2802      	cmp	r0, #2
 8008eca:	d804      	bhi.n	8008ed6 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	d5f7      	bpl.n	8008ec2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8008ed2:	2000      	movs	r0, #0
}
 8008ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008ed6:	2003      	movs	r0, #3
}
 8008ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008eda:	2001      	movs	r0, #1
}
 8008edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ee4:	e7e4      	b.n	8008eb0 <RCCEx_PLL2_Config+0xb4>
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	ffff0007 	.word	0xffff0007

08008ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ef2:	4c3a      	ldr	r4, [pc, #232]	; (8008fdc <RCCEx_PLL3_Config+0xec>)
 8008ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d067      	beq.n	8008fce <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f08:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0a:	f7fb fb67 	bl	80045dc <HAL_GetTick>
 8008f0e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f10:	e004      	b.n	8008f1c <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f12:	f7fb fb63 	bl	80045dc <HAL_GetTick>
 8008f16:	1b43      	subs	r3, r0, r5
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d856      	bhi.n	8008fca <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	009a      	lsls	r2, r3, #2
 8008f20:	d4f7      	bmi.n	8008f12 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f24:	6832      	ldr	r2, [r6, #0]
 8008f26:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008f2a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008f2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f30:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	3a01      	subs	r2, #1
 8008f38:	025b      	lsls	r3, r3, #9
 8008f3a:	0412      	lsls	r2, r2, #16
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008f42:	4313      	orrs	r3, r2
 8008f44:	6872      	ldr	r2, [r6, #4]
 8008f46:	3a01      	subs	r2, #1
 8008f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	6932      	ldr	r2, [r6, #16]
 8008f50:	3a01      	subs	r2, #1
 8008f52:	0612      	lsls	r2, r2, #24
 8008f54:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f5e:	6972      	ldr	r2, [r6, #20]
 8008f60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f64:	4313      	orrs	r3, r2
 8008f66:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f6a:	69b3      	ldr	r3, [r6, #24]
 8008f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f70:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f72:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f74:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008f80:	69f2      	ldr	r2, [r6, #28]
 8008f82:	400b      	ands	r3, r1
 8008f84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008f88:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f90:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008f94:	b1ef      	cbz	r7, 8008fd2 <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f96:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f98:	bf0c      	ite	eq
 8008f9a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f9e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fa4:	4c0d      	ldr	r4, [pc, #52]	; (8008fdc <RCCEx_PLL3_Config+0xec>)
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fae:	f7fb fb15 	bl	80045dc <HAL_GetTick>
 8008fb2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fb4:	e004      	b.n	8008fc0 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008fb6:	f7fb fb11 	bl	80045dc <HAL_GetTick>
 8008fba:	1b40      	subs	r0, r0, r5
 8008fbc:	2802      	cmp	r0, #2
 8008fbe:	d804      	bhi.n	8008fca <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	d5f7      	bpl.n	8008fb6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8008fc6:	2000      	movs	r0, #0
}
 8008fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008fca:	2003      	movs	r0, #3
}
 8008fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008fce:	2001      	movs	r0, #1
}
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fd8:	e7e4      	b.n	8008fa4 <RCCEx_PLL3_Config+0xb4>
 8008fda:	bf00      	nop
 8008fdc:	58024400 	.word	0x58024400
 8008fe0:	ffff0007 	.word	0xffff0007

08008fe4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fe8:	6803      	ldr	r3, [r0, #0]
{
 8008fea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fec:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008ff0:	d022      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ff2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008ff4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008ff8:	f000 8499 	beq.w	800992e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008ffc:	d811      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8008ffe:	2a00      	cmp	r2, #0
 8009000:	f000 8503 	beq.w	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8009004:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8009008:	f040 84fc 	bne.w	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800900c:	2102      	movs	r1, #2
 800900e:	3004      	adds	r0, #4
 8009010:	f7ff fef4 	bl	8008dfc <RCCEx_PLL2_Config>
 8009014:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009016:	2e00      	cmp	r6, #0
 8009018:	f040 8491 	bne.w	800993e <HAL_RCCEx_PeriphCLKConfig+0x95a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800901c:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	e003      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009022:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009026:	f040 84ed 	bne.w	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800902a:	48a8      	ldr	r0, [pc, #672]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800902c:	2600      	movs	r6, #0
 800902e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009030:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8009034:	430a      	orrs	r2, r1
 8009036:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009038:	05dd      	lsls	r5, r3, #23
 800903a:	d50a      	bpl.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800903c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800903e:	2a04      	cmp	r2, #4
 8009040:	d806      	bhi.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8009042:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009046:	04ad      	.short	0x04ad
 8009048:	0493048c 	.word	0x0493048c
 800904c:	02e902e9 	.word	0x02e902e9
 8009050:	2601      	movs	r6, #1
 8009052:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009054:	0598      	lsls	r0, r3, #22
 8009056:	d51b      	bpl.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009058:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800905a:	2a80      	cmp	r2, #128	; 0x80
 800905c:	f000 8497 	beq.w	800998e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8009060:	f200 80ec 	bhi.w	800923c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8009064:	2a00      	cmp	r2, #0
 8009066:	f000 8394 	beq.w	8009792 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800906a:	2a40      	cmp	r2, #64	; 0x40
 800906c:	f040 80ed 	bne.w	800924a <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009070:	2100      	movs	r1, #0
 8009072:	1d20      	adds	r0, r4, #4
 8009074:	f7ff fec2 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009078:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800907a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800907c:	2d00      	cmp	r5, #0
 800907e:	f040 836e 	bne.w	800975e <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009082:	4992      	ldr	r1, [pc, #584]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009086:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009088:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800908c:	4302      	orrs	r2, r0
 800908e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009090:	0559      	lsls	r1, r3, #21
 8009092:	d51f      	bpl.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009094:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8009098:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800909c:	f000 8456 	beq.w	800994c <HAL_RCCEx_PeriphCLKConfig+0x968>
 80090a0:	f200 80d6 	bhi.w	8009250 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80090a4:	2a00      	cmp	r2, #0
 80090a6:	f000 837a 	beq.w	800979e <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 80090aa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80090ae:	f040 80d7 	bne.w	8009260 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090b2:	2100      	movs	r1, #0
 80090b4:	1d20      	adds	r0, r4, #4
 80090b6:	f7ff fea1 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090ba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090be:	2d00      	cmp	r5, #0
 80090c0:	f040 8351 	bne.w	8009766 <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090c4:	4981      	ldr	r1, [pc, #516]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80090c6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80090ca:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80090cc:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80090d0:	4302      	orrs	r2, r0
 80090d2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090d4:	051a      	lsls	r2, r3, #20
 80090d6:	d51f      	bpl.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 80090d8:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80090dc:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 80090e0:	f000 8465 	beq.w	80099ae <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 80090e4:	f200 80bf 	bhi.w	8009266 <HAL_RCCEx_PeriphCLKConfig+0x282>
 80090e8:	2a00      	cmp	r2, #0
 80090ea:	f000 835e 	beq.w	80097aa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80090ee:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80090f2:	f040 80c0 	bne.w	8009276 <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f6:	2100      	movs	r1, #0
 80090f8:	1d20      	adds	r0, r4, #4
 80090fa:	f7ff fe7f 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090fe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009100:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009102:	2d00      	cmp	r5, #0
 8009104:	f040 8333 	bne.w	800976e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009108:	4970      	ldr	r1, [pc, #448]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800910a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800910e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009110:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8009114:	4302      	orrs	r2, r0
 8009116:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009118:	019f      	lsls	r7, r3, #6
 800911a:	d518      	bpl.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 800911c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800911e:	2a20      	cmp	r2, #32
 8009120:	f000 83ce 	beq.w	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009124:	f200 80aa 	bhi.w	800927c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009128:	b13a      	cbz	r2, 800913a <HAL_RCCEx_PeriphCLKConfig+0x156>
 800912a:	2a10      	cmp	r2, #16
 800912c:	f040 80a9 	bne.w	8009282 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009130:	4966      	ldr	r1, [pc, #408]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009132:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009134:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009138:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800913a:	2d00      	cmp	r5, #0
 800913c:	f040 8360 	bne.w	8009800 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009140:	4962      	ldr	r1, [pc, #392]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009142:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009144:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009146:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800914a:	4302      	orrs	r2, r0
 800914c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800914e:	04d8      	lsls	r0, r3, #19
 8009150:	d51d      	bpl.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009152:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009154:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009158:	f000 8410 	beq.w	800997c <HAL_RCCEx_PeriphCLKConfig+0x998>
 800915c:	f200 8094 	bhi.w	8009288 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8009160:	2a00      	cmp	r2, #0
 8009162:	f000 8328 	beq.w	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009166:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800916a:	f040 8095 	bne.w	8009298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800916e:	2100      	movs	r1, #0
 8009170:	1d20      	adds	r0, r4, #4
 8009172:	f7ff fe43 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009176:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009178:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800917a:	2d00      	cmp	r5, #0
 800917c:	f040 82f1 	bne.w	8009762 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009180:	4952      	ldr	r1, [pc, #328]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009182:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8009184:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009186:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800918a:	4302      	orrs	r2, r0
 800918c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800918e:	0499      	lsls	r1, r3, #18
 8009190:	d51a      	bpl.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009192:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009194:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8009198:	f000 8376 	beq.w	8009888 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800919c:	d87f      	bhi.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800919e:	b14a      	cbz	r2, 80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80091a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80091a4:	f040 8083 	bne.w	80092ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091a8:	2101      	movs	r1, #1
 80091aa:	1d20      	adds	r0, r4, #4
 80091ac:	f7ff fe26 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091b0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	f040 8325 	bne.w	8009804 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091ba:	4944      	ldr	r1, [pc, #272]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80091bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80091be:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80091c0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80091c4:	4302      	orrs	r2, r0
 80091c6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091c8:	045a      	lsls	r2, r3, #17
 80091ca:	d51b      	bpl.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 80091cc:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80091d0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80091d4:	f000 8362 	beq.w	800989c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80091d8:	d86c      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80091da:	b142      	cbz	r2, 80091ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80091dc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80091e0:	d170      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091e2:	2101      	movs	r1, #1
 80091e4:	1d20      	adds	r0, r4, #4
 80091e6:	f7ff fe09 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091ea:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80091ee:	2d00      	cmp	r5, #0
 80091f0:	f040 830a 	bne.w	8009808 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80091f4:	4935      	ldr	r1, [pc, #212]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80091f6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80091fa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80091fc:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009200:	4302      	orrs	r2, r0
 8009202:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009204:	041f      	lsls	r7, r3, #16
 8009206:	d50d      	bpl.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 8009208:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800920a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800920e:	f000 834f 	beq.w	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8009212:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009216:	f000 820b 	beq.w	8009630 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 820e 	beq.w	800963c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8009220:	2601      	movs	r6, #1
 8009222:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009224:	01d8      	lsls	r0, r3, #7
 8009226:	d55d      	bpl.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 8009228:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800922a:	2a03      	cmp	r2, #3
 800922c:	f200 8418 	bhi.w	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 8009230:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009234:	035a0054 	.word	0x035a0054
 8009238:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 800923c:	2ac0      	cmp	r2, #192	; 0xc0
 800923e:	f43f af1d 	beq.w	800907c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009242:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009246:	f43f af19 	beq.w	800907c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800924a:	2601      	movs	r6, #1
 800924c:	4635      	mov	r5, r6
 800924e:	e71f      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009250:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8009254:	f43f af33 	beq.w	80090be <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009258:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800925c:	f43f af2f 	beq.w	80090be <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009260:	2601      	movs	r6, #1
 8009262:	4635      	mov	r5, r6
 8009264:	e736      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009266:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 800926a:	f43f af4a 	beq.w	8009102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800926e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8009272:	f43f af46 	beq.w	8009102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8009276:	2601      	movs	r6, #1
 8009278:	4635      	mov	r5, r6
 800927a:	e74d      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 800927c:	2a30      	cmp	r2, #48	; 0x30
 800927e:	f43f af5c 	beq.w	800913a <HAL_RCCEx_PeriphCLKConfig+0x156>
 8009282:	2601      	movs	r6, #1
 8009284:	4635      	mov	r5, r6
 8009286:	e762      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009288:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800928c:	f43f af75 	beq.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009290:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009294:	f43f af71 	beq.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009298:	2601      	movs	r6, #1
 800929a:	4635      	mov	r5, r6
 800929c:	e777      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 800929e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80092a2:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80092a6:	d085      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80092a8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80092ac:	d082      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80092ae:	2601      	movs	r6, #1
 80092b0:	4635      	mov	r5, r6
 80092b2:	e789      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 80092b4:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80092b8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80092bc:	d097      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80092be:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80092c2:	d094      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80092c4:	2601      	movs	r6, #1
 80092c6:	4635      	mov	r5, r6
 80092c8:	e79c      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092d0:	2102      	movs	r1, #2
 80092d2:	1d20      	adds	r0, r4, #4
 80092d4:	f7ff fd92 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092d8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80092dc:	2d00      	cmp	r5, #0
 80092de:	f000 8272 	beq.w	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 80092e2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092e4:	0259      	lsls	r1, r3, #9
 80092e6:	f100 81ee 	bmi.w	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092ea:	07df      	lsls	r7, r3, #31
 80092ec:	d52f      	bpl.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 80092ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80092f0:	2a28      	cmp	r2, #40	; 0x28
 80092f2:	d82a      	bhi.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x366>
 80092f4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80092f8:	002901dc 	.word	0x002901dc
 80092fc:	00290029 	.word	0x00290029
 8009300:	00290029 	.word	0x00290029
 8009304:	00290029 	.word	0x00290029
 8009308:	00290378 	.word	0x00290378
 800930c:	00290029 	.word	0x00290029
 8009310:	00290029 	.word	0x00290029
 8009314:	00290029 	.word	0x00290029
 8009318:	002901d5 	.word	0x002901d5
 800931c:	00290029 	.word	0x00290029
 8009320:	00290029 	.word	0x00290029
 8009324:	00290029 	.word	0x00290029
 8009328:	002901dc 	.word	0x002901dc
 800932c:	00290029 	.word	0x00290029
 8009330:	00290029 	.word	0x00290029
 8009334:	00290029 	.word	0x00290029
 8009338:	002901dc 	.word	0x002901dc
 800933c:	00290029 	.word	0x00290029
 8009340:	00290029 	.word	0x00290029
 8009344:	00290029 	.word	0x00290029
 8009348:	01dc      	.short	0x01dc
 800934a:	2601      	movs	r6, #1
 800934c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800934e:	0798      	lsls	r0, r3, #30
 8009350:	d516      	bpl.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009352:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009354:	2a05      	cmp	r2, #5
 8009356:	f200 8380 	bhi.w	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800935a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800935e:	000d      	.short	0x000d
 8009360:	00060331 	.word	0x00060331
 8009364:	000d000d 	.word	0x000d000d
 8009368:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800936a:	2101      	movs	r1, #1
 800936c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009370:	f7ff fdbe 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009374:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009376:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009378:	2d00      	cmp	r5, #0
 800937a:	f000 822e 	beq.w	80097da <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800937e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009380:	0759      	lsls	r1, r3, #29
 8009382:	d517      	bpl.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009384:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009388:	2a05      	cmp	r2, #5
 800938a:	f200 836c 	bhi.w	8009a66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800938e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009392:	000d      	.short	0x000d
 8009394:	00060321 	.word	0x00060321
 8009398:	000d000d 	.word	0x000d000d
 800939c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800939e:	2101      	movs	r1, #1
 80093a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093a4:	f7ff fda4 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093a8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	f000 821c 	beq.w	80097ea <HAL_RCCEx_PeriphCLKConfig+0x806>
 80093b2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093b4:	069a      	lsls	r2, r3, #26
 80093b6:	d51d      	bpl.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80093b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80093bc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80093c0:	f000 8287 	beq.w	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093c4:	f200 80e6 	bhi.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 80093c8:	b14a      	cbz	r2, 80093de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80093ca:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80093ce:	f040 80eb 	bne.w	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d2:	2100      	movs	r1, #0
 80093d4:	1d20      	adds	r0, r4, #4
 80093d6:	f7ff fd11 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093da:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80093de:	2d00      	cmp	r5, #0
 80093e0:	f040 81ef 	bne.w	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093e4:	49a4      	ldr	r1, [pc, #656]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80093e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80093ea:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80093ec:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80093f0:	4302      	orrs	r2, r0
 80093f2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093f4:	065f      	lsls	r7, r3, #25
 80093f6:	d51d      	bpl.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80093f8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80093fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009400:	f000 822e 	beq.w	8009860 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8009404:	f200 80d3 	bhi.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009408:	b14a      	cbz	r2, 800941e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800940a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800940e:	f040 80d8 	bne.w	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009412:	2100      	movs	r1, #0
 8009414:	1d20      	adds	r0, r4, #4
 8009416:	f7ff fcf1 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800941a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800941c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800941e:	2d00      	cmp	r5, #0
 8009420:	f040 81f4 	bne.w	800980c <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009424:	4994      	ldr	r1, [pc, #592]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009426:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800942a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800942c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8009430:	4302      	orrs	r2, r0
 8009432:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009434:	0618      	lsls	r0, r3, #24
 8009436:	d51d      	bpl.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009438:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800943c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009440:	f000 8218 	beq.w	8009874 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8009444:	f200 80c0 	bhi.w	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8009448:	b14a      	cbz	r2, 800945e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800944a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800944e:	f040 80c5 	bne.w	80095dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009452:	2100      	movs	r1, #0
 8009454:	1d20      	adds	r0, r4, #4
 8009456:	f7ff fcd1 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800945a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800945c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800945e:	2d00      	cmp	r5, #0
 8009460:	f040 81b9 	bne.w	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009464:	4984      	ldr	r1, [pc, #528]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009466:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800946a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800946c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009470:	4302      	orrs	r2, r0
 8009472:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009474:	0719      	lsls	r1, r3, #28
 8009476:	d50b      	bpl.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009478:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800947c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009480:	f000 823b 	beq.w	80098fa <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009484:	487c      	ldr	r0, [pc, #496]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009486:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8009488:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800948c:	430a      	orrs	r2, r1
 800948e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009490:	06da      	lsls	r2, r3, #27
 8009492:	d50b      	bpl.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009494:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800949c:	f000 823a 	beq.w	8009914 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094a0:	4875      	ldr	r0, [pc, #468]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80094a2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80094a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80094a8:	430a      	orrs	r2, r1
 80094aa:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094ac:	031f      	lsls	r7, r3, #12
 80094ae:	d50e      	bpl.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 80094b0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80094b4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80094b8:	f000 80e0 	beq.w	800967c <HAL_RCCEx_PeriphCLKConfig+0x698>
 80094bc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80094c0:	f000 80e3 	beq.w	800968a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80094c4:	2900      	cmp	r1, #0
 80094c6:	f000 81c3 	beq.w	8009850 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80094ca:	2601      	movs	r6, #1
 80094cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094ce:	0358      	lsls	r0, r3, #13
 80094d0:	d50f      	bpl.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 80094d2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80094d6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80094da:	f000 80ba 	beq.w	8009652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80094de:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80094e2:	f000 80bd 	beq.w	8009660 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 80094e6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80094ea:	f000 81a9 	beq.w	8009840 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 80094ee:	2601      	movs	r6, #1
 80094f0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094f2:	03d9      	lsls	r1, r3, #15
 80094f4:	d509      	bpl.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 80094f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	f000 818f 	beq.w	800981c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80094fe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009502:	f000 8136 	beq.w	8009772 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8009506:	2601      	movs	r6, #1
 8009508:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800950a:	009a      	lsls	r2, r3, #2
 800950c:	f100 811c 	bmi.w	8009748 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009510:	039f      	lsls	r7, r3, #14
 8009512:	d466      	bmi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 8009514:	1e30      	subs	r0, r6, #0
 8009516:	bf18      	it	ne
 8009518:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800951a:	02de      	lsls	r6, r3, #11
 800951c:	d506      	bpl.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800951e:	4956      	ldr	r1, [pc, #344]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009520:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009522:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009524:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009528:	432a      	orrs	r2, r5
 800952a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800952c:	00dd      	lsls	r5, r3, #3
 800952e:	d507      	bpl.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009530:	4951      	ldr	r1, [pc, #324]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009532:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8009536:	690a      	ldr	r2, [r1, #16]
 8009538:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800953c:	432a      	orrs	r2, r5
 800953e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009540:	0299      	lsls	r1, r3, #10
 8009542:	d506      	bpl.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009544:	494c      	ldr	r1, [pc, #304]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009546:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8009548:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800954a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800954e:	432a      	orrs	r2, r5
 8009550:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009552:	005a      	lsls	r2, r3, #1
 8009554:	d509      	bpl.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009556:	4a48      	ldr	r2, [pc, #288]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009558:	6911      	ldr	r1, [r2, #16]
 800955a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800955e:	6111      	str	r1, [r2, #16]
 8009560:	6911      	ldr	r1, [r2, #16]
 8009562:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8009566:	4329      	orrs	r1, r5
 8009568:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800956a:	2b00      	cmp	r3, #0
 800956c:	da06      	bge.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800956e:	4942      	ldr	r1, [pc, #264]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009570:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8009572:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009578:	432a      	orrs	r2, r5
 800957a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	d507      	bpl.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009580:	4a3d      	ldr	r2, [pc, #244]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009582:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009586:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009588:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800958c:	430b      	orrs	r3, r1
 800958e:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009594:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009598:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800959c:	f43f af1f 	beq.w	80093de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80095a0:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80095a4:	f43f af1b 	beq.w	80093de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80095a8:	2601      	movs	r6, #1
 80095aa:	4635      	mov	r5, r6
 80095ac:	e722      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095ae:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80095b2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80095b6:	f43f af32 	beq.w	800941e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80095ba:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80095be:	f43f af2e 	beq.w	800941e <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80095c2:	2601      	movs	r6, #1
 80095c4:	4635      	mov	r5, r6
 80095c6:	e735      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095c8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80095cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80095d0:	f43f af45 	beq.w	800945e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80095d4:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80095d8:	f43f af41 	beq.w	800945e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80095dc:	2601      	movs	r6, #1
 80095de:	4635      	mov	r5, r6
 80095e0:	e748      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 80095e2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80095e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80095e8:	f000 8121 	beq.w	800982e <HAL_RCCEx_PeriphCLKConfig+0x84a>
 80095ec:	d906      	bls.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x618>
 80095ee:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80095f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80095f6:	d003      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80095f8:	2001      	movs	r0, #1
 80095fa:	e78e      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x536>
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	d1fb      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 8009600:	2d00      	cmp	r5, #0
 8009602:	d1f9      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009604:	4d1c      	ldr	r5, [pc, #112]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 8009606:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009608:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 800960a:	bf18      	it	ne
 800960c:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800960e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8009612:	430a      	orrs	r2, r1
 8009614:	656a      	str	r2, [r5, #84]	; 0x54
 8009616:	e780      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009618:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800961a:	2d00      	cmp	r5, #0
 800961c:	f040 80a5 	bne.w	800976a <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009620:	4915      	ldr	r1, [pc, #84]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009624:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009626:	f022 0207 	bic.w	r2, r2, #7
 800962a:	4302      	orrs	r2, r0
 800962c:	650a      	str	r2, [r1, #80]	; 0x50
 800962e:	e511      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009630:	2101      	movs	r1, #1
 8009632:	1d20      	adds	r0, r4, #4
 8009634:	f7ff fbe2 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009638:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800963a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800963c:	2d00      	cmp	r5, #0
 800963e:	f040 80dd 	bne.w	80097fc <HAL_RCCEx_PeriphCLKConfig+0x818>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009642:	490d      	ldr	r1, [pc, #52]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009644:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009646:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800964c:	4302      	orrs	r2, r0
 800964e:	650a      	str	r2, [r1, #80]	; 0x50
 8009650:	e5e8      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009652:	2101      	movs	r1, #1
 8009654:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009658:	f7ff fc4a 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800965c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800965e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009660:	2d00      	cmp	r5, #0
 8009662:	f040 80d9 	bne.w	8009818 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009666:	4904      	ldr	r1, [pc, #16]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8009668:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800966c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800966e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009672:	4302      	orrs	r2, r0
 8009674:	654a      	str	r2, [r1, #84]	; 0x54
 8009676:	e73c      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8009678:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800967c:	2102      	movs	r1, #2
 800967e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009682:	f7ff fc35 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009686:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009688:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800968a:	2d00      	cmp	r5, #0
 800968c:	f040 80c2 	bne.w	8009814 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009690:	49ac      	ldr	r1, [pc, #688]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009692:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8009696:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009698:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800969c:	4302      	orrs	r2, r0
 800969e:	658a      	str	r2, [r1, #88]	; 0x58
 80096a0:	e715      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096a2:	2101      	movs	r1, #1
 80096a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096a8:	f7ff fc22 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096ac:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096ae:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	f040 80ad 	bne.w	8009810 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096b6:	49a3      	ldr	r1, [pc, #652]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80096b8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80096ba:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80096bc:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80096c0:	4302      	orrs	r2, r0
 80096c2:	654a      	str	r2, [r1, #84]	; 0x54
 80096c4:	e643      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096c6:	4fa0      	ldr	r7, [pc, #640]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ce:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80096d0:	f7fa ff84 	bl	80045dc <HAL_GetTick>
 80096d4:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096d6:	e006      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096d8:	f7fa ff80 	bl	80045dc <HAL_GetTick>
 80096dc:	eba0 0008 	sub.w	r0, r0, r8
 80096e0:	2864      	cmp	r0, #100	; 0x64
 80096e2:	f200 818b 	bhi.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	05da      	lsls	r2, r3, #23
 80096ea:	d5f5      	bpl.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    if(ret == HAL_OK)
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	f040 81b1 	bne.w	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096f2:	4a94      	ldr	r2, [pc, #592]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80096f4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80096f8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80096fa:	4059      	eors	r1, r3
 80096fc:	f411 7f40 	tst.w	r1, #768	; 0x300
 8009700:	d00b      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x736>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009702:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009704:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009706:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800970a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800970e:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009710:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8009712:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8009716:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009718:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800971a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971e:	f000 817b 	beq.w	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009722:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009726:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800972a:	f000 8189 	beq.w	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
 800972e:	4985      	ldr	r1, [pc, #532]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009730:	690a      	ldr	r2, [r1, #16]
 8009732:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009736:	610a      	str	r2, [r1, #16]
 8009738:	4a82      	ldr	r2, [pc, #520]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800973a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800973e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009740:	430b      	orrs	r3, r1
 8009742:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	e5d0      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009748:	2102      	movs	r1, #2
 800974a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800974e:	f7ff fbcf 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009752:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009754:	2800      	cmp	r0, #0
 8009756:	f43f aedb 	beq.w	8009510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 800975a:	2601      	movs	r6, #1
 800975c:	e6d8      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800975e:	462e      	mov	r6, r5
 8009760:	e496      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8009762:	462e      	mov	r6, r5
 8009764:	e513      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009766:	462e      	mov	r6, r5
 8009768:	e4b4      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800976a:	462e      	mov	r6, r5
 800976c:	e472      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800976e:	462e      	mov	r6, r5
 8009770:	e4d2      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009772:	2102      	movs	r1, #2
 8009774:	1d20      	adds	r0, r4, #4
 8009776:	f7ff fb41 	bl	8008dfc <RCCEx_PLL2_Config>
 800977a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800977c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800977e:	2d00      	cmp	r5, #0
 8009780:	d153      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009782:	4970      	ldr	r1, [pc, #448]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009784:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009786:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009788:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800978c:	4302      	orrs	r2, r0
 800978e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8009790:	e6bb      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009792:	496c      	ldr	r1, [pc, #432]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009794:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009796:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800979a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800979c:	e46e      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800979e:	4969      	ldr	r1, [pc, #420]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80097a0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80097a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80097a6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80097a8:	e489      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097aa:	4966      	ldr	r1, [pc, #408]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80097ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80097ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80097b2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80097b4:	e4a5      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b6:	4963      	ldr	r1, [pc, #396]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80097b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80097ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80097be:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80097c0:	e4db      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80097c2:	462e      	mov	r6, r5
 80097c4:	e616      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097c6:	495f      	ldr	r1, [pc, #380]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80097c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80097ca:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80097cc:	f022 0203 	bic.w	r2, r2, #3
 80097d0:	4302      	orrs	r2, r0
 80097d2:	64ca      	str	r2, [r1, #76]	; 0x4c
 80097d4:	e586      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80097d6:	462e      	mov	r6, r5
 80097d8:	e64c      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80097da:	495a      	ldr	r1, [pc, #360]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80097dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80097de:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80097e0:	f022 0207 	bic.w	r2, r2, #7
 80097e4:	4302      	orrs	r2, r0
 80097e6:	654a      	str	r2, [r1, #84]	; 0x54
 80097e8:	e5ca      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097ea:	4956      	ldr	r1, [pc, #344]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80097ec:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80097f0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80097f2:	f022 0207 	bic.w	r2, r2, #7
 80097f6:	4302      	orrs	r2, r0
 80097f8:	658a      	str	r2, [r1, #88]	; 0x58
 80097fa:	e5db      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80097fc:	462e      	mov	r6, r5
 80097fe:	e511      	b.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009800:	462e      	mov	r6, r5
 8009802:	e4a4      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8009804:	462e      	mov	r6, r5
 8009806:	e4df      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009808:	462e      	mov	r6, r5
 800980a:	e4fb      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800980c:	462e      	mov	r6, r5
 800980e:	e611      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8009810:	462e      	mov	r6, r5
 8009812:	e59c      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009814:	462e      	mov	r6, r5
 8009816:	e65a      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8009818:	462e      	mov	r6, r5
 800981a:	e66a      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800981c:	4949      	ldr	r1, [pc, #292]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800981e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009820:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009824:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009826:	2d00      	cmp	r5, #0
 8009828:	d0ab      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 800982a:	462e      	mov	r6, r5
 800982c:	e66d      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982e:	4845      	ldr	r0, [pc, #276]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009830:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009832:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009836:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009838:	2d00      	cmp	r5, #0
 800983a:	f47f aedd 	bne.w	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800983e:	e6e1      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009840:	4940      	ldr	r1, [pc, #256]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009842:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009844:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009848:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800984a:	2d00      	cmp	r5, #0
 800984c:	d1e4      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800984e:	e70a      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x682>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009850:	1d20      	adds	r0, r4, #4
 8009852:	f7ff fad3 	bl	8008dfc <RCCEx_PLL2_Config>
 8009856:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009858:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800985a:	2d00      	cmp	r5, #0
 800985c:	d1da      	bne.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800985e:	e717      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009860:	2102      	movs	r1, #2
 8009862:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009866:	f7ff fb43 	bl	8008ef0 <RCCEx_PLL3_Config>
 800986a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800986c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800986e:	2d00      	cmp	r5, #0
 8009870:	d1cc      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x828>
 8009872:	e5d7      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009874:	2102      	movs	r1, #2
 8009876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800987a:	f7ff fb39 	bl	8008ef0 <RCCEx_PLL3_Config>
 800987e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009880:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009882:	2d00      	cmp	r5, #0
 8009884:	d1a7      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8009886:	e5ed      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009888:	2101      	movs	r1, #1
 800988a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800988e:	f7ff fb2f 	bl	8008ef0 <RCCEx_PLL3_Config>
 8009892:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009894:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8009896:	2d00      	cmp	r5, #0
 8009898:	d1b4      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x820>
 800989a:	e48e      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800989c:	2101      	movs	r1, #1
 800989e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098a2:	f7ff fb25 	bl	8008ef0 <RCCEx_PLL3_Config>
 80098a6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098a8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80098aa:	2d00      	cmp	r5, #0
 80098ac:	d1ac      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80098ae:	e4a1      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b0:	4924      	ldr	r1, [pc, #144]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80098b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80098b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80098b8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80098ba:	2d00      	cmp	r5, #0
 80098bc:	d19e      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x818>
 80098be:	e6c0      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098c0:	2102      	movs	r1, #2
 80098c2:	1d20      	adds	r0, r4, #4
 80098c4:	f7ff fa9a 	bl	8008dfc <RCCEx_PLL2_Config>
 80098c8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80098ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	d197      	bne.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 80098d0:	e436      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098d2:	2102      	movs	r1, #2
 80098d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80098d8:	f7ff fb0a 	bl	8008ef0 <RCCEx_PLL3_Config>
 80098dc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	f47f af6e 	bne.w	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80098e6:	e57d      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e8:	4916      	ldr	r1, [pc, #88]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80098ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80098ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80098f0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80098f2:	2d00      	cmp	r5, #0
 80098f4:	f47f acf5 	bne.w	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80098f8:	e765      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098fa:	2102      	movs	r1, #2
 80098fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009900:	f7ff faf6 	bl	8008ef0 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009904:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009908:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800990a:	2800      	cmp	r0, #0
 800990c:	f43f adba 	beq.w	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 8009910:	2601      	movs	r6, #1
 8009912:	e5b7      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009914:	2102      	movs	r1, #2
 8009916:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800991a:	f7ff fae9 	bl	8008ef0 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800991e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009922:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009924:	2800      	cmp	r0, #0
 8009926:	f43f adbb 	beq.w	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 800992a:	2601      	movs	r6, #1
 800992c:	e5b8      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800992e:	2102      	movs	r1, #2
 8009930:	3024      	adds	r0, #36	; 0x24
 8009932:	f7ff fadd 	bl	8008ef0 <RCCEx_PLL3_Config>
 8009936:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009938:	2e00      	cmp	r6, #0
 800993a:	f43f ab6f 	beq.w	800901c <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	f7ff bb7a 	b.w	8009038 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009944:	58024400 	.word	0x58024400
 8009948:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800994c:	2100      	movs	r1, #0
 800994e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009952:	f7ff facd 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009956:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009958:	4605      	mov	r5, r0
      break;
 800995a:	f7ff bbb0 	b.w	80090be <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800995e:	2100      	movs	r1, #0
 8009960:	1d20      	adds	r0, r4, #4
 8009962:	f7ff fa4b 	bl	8008dfc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009966:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009968:	4605      	mov	r5, r0
      break;
 800996a:	e656      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800996c:	2100      	movs	r1, #0
 800996e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009972:	f7ff fabd 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009976:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009978:	4605      	mov	r5, r0
      break;
 800997a:	e64e      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800997c:	2100      	movs	r1, #0
 800997e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009982:	f7ff fab5 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009986:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009988:	4605      	mov	r5, r0
      break;
 800998a:	f7ff bbf6 	b.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800998e:	2100      	movs	r1, #0
 8009990:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009994:	f7ff faac 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009998:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800999a:	4605      	mov	r5, r0
      break;
 800999c:	f7ff bb6e 	b.w	800907c <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a0:	4932      	ldr	r1, [pc, #200]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
      break;
 80099a2:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80099a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80099aa:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80099ac:	e635      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x636>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099ae:	2100      	movs	r1, #0
 80099b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80099b4:	f7ff fa9c 	bl	8008ef0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099b8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099ba:	4605      	mov	r5, r0
      break;
 80099bc:	f7ff bba1 	b.w	8009102 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099c0:	2101      	movs	r1, #1
 80099c2:	1d20      	adds	r0, r4, #4
 80099c4:	f7ff fa1a 	bl	8008dfc <RCCEx_PLL2_Config>
 80099c8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80099cc:	2d00      	cmp	r5, #0
 80099ce:	f47f acd6 	bne.w	800937e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80099d2:	e702      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099d4:	2101      	movs	r1, #1
 80099d6:	1d20      	adds	r0, r4, #4
 80099d8:	f7ff fa10 	bl	8008dfc <RCCEx_PLL2_Config>
 80099dc:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80099e0:	2d00      	cmp	r5, #0
 80099e2:	f47f ace6 	bne.w	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80099e6:	e700      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099e8:	2101      	movs	r1, #1
 80099ea:	1d20      	adds	r0, r4, #4
 80099ec:	f7ff fa06 	bl	8008dfc <RCCEx_PLL2_Config>
 80099f0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	f47f af0b 	bne.w	8009810 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80099fa:	e65c      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
            ret = HAL_TIMEOUT;
 80099fc:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099fe:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8009a00:	4635      	mov	r5, r6
 8009a02:	e472      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a04:	2601      	movs	r6, #1
 8009a06:	f7ff bb17 	b.w	8009038 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a0a:	4818      	ldr	r0, [pc, #96]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a0c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009a0e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009a12:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009a14:	f7ff bb09 	b.w	800902a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8009a18:	f7fa fde0 	bl	80045dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a1c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
        tickstart = HAL_GetTick();
 8009a20:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a22:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a26:	e004      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a28:	f7fa fdd8 	bl	80045dc <HAL_GetTick>
 8009a2c:	1bc0      	subs	r0, r0, r7
 8009a2e:	4548      	cmp	r0, r9
 8009a30:	d8e4      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a32:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009a36:	079b      	lsls	r3, r3, #30
 8009a38:	d5f6      	bpl.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xa44>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a3a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8009a3e:	e670      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009a40:	480a      	ldr	r0, [pc, #40]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a42:	4a0b      	ldr	r2, [pc, #44]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8009a44:	6901      	ldr	r1, [r0, #16]
 8009a46:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009a4a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	6102      	str	r2, [r0, #16]
 8009a52:	e671      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x754>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	462e      	mov	r6, r5
 8009a58:	e447      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009a5a:	2601      	movs	r6, #1
 8009a5c:	4635      	mov	r5, r6
 8009a5e:	e48f      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 8009a60:	2601      	movs	r6, #1
 8009a62:	4635      	mov	r5, r6
 8009a64:	e43e      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a66:	2601      	movs	r6, #1
 8009a68:	4635      	mov	r5, r6
 8009a6a:	e4a3      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	00ffffcf 	.word	0x00ffffcf

08009a74 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009a74:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a76:	f7ff f8f1 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009a7c:	4a05      	ldr	r2, [pc, #20]	; (8009a94 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009a84:	5cd3      	ldrb	r3, [r2, r3]
 8009a86:	f003 031f 	and.w	r3, r3, #31
}
 8009a8a:	40d8      	lsrs	r0, r3
 8009a8c:	bd08      	pop	{r3, pc}
 8009a8e:	bf00      	nop
 8009a90:	58024400 	.word	0x58024400
 8009a94:	08018acc 	.word	0x08018acc

08009a98 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a98:	4b4f      	ldr	r3, [pc, #316]	; (8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8009a9a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a9e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009aa0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8009aa2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009aa6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009aaa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8009aac:	d05c      	beq.n	8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009aae:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009ab2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ab6:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009aba:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8009abe:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009ac0:	ee07 4a90 	vmov	s15, r4
 8009ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009ac8:	d003      	beq.n	8009ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8009aca:	2902      	cmp	r1, #2
 8009acc:	d075      	beq.n	8009bba <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d04f      	beq.n	8009b72 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ad2:	ee07 2a90 	vmov	s15, r2
 8009ad6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009ae4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009be0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aec:	ee06 3a90 	vmov	s13, r3
 8009af0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009af4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009af8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009afc:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009b00:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b04:	4a34      	ldr	r2, [pc, #208]	; (8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8009b06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009b0a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009b0c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009b10:	ee07 3a10 	vmov	s14, r3
 8009b14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009b18:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b26:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009b2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009b2c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009b30:	ee07 3a10 	vmov	s14, r3
 8009b34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009b38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b44:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009b48:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009b4a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009b62:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009b66:	4770      	bx	lr
 8009b68:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b6a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b6e:	6082      	str	r2, [r0, #8]
}
 8009b70:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b72:	6819      	ldr	r1, [r3, #0]
 8009b74:	0689      	lsls	r1, r1, #26
 8009b76:	d527      	bpl.n	8009bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b78:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b7a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b7e:	4919      	ldr	r1, [pc, #100]	; (8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b86:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b8e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8009be0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b96:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b98:	ee06 3a90 	vmov	s13, r3
 8009b9c:	ee05 1a90 	vmov	s11, r1
 8009ba0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009ba4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009ba8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009bac:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009bb0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009bb4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009bb8:	e7a4      	b.n	8009b04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bba:	ee07 2a90 	vmov	s15, r2
 8009bbe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009be8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8009bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc6:	e78a      	b.n	8009ade <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bc8:	ee07 2a90 	vmov	s15, r2
 8009bcc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8009bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bd4:	e783      	b.n	8009ade <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8009bd6:	bf00      	nop
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	4a742400 	.word	0x4a742400
 8009be0:	39000000 	.word	0x39000000
 8009be4:	03d09000 	.word	0x03d09000
 8009be8:	4bbebc20 	.word	0x4bbebc20
 8009bec:	4c742400 	.word	0x4c742400

08009bf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bf0:	4b4f      	ldr	r3, [pc, #316]	; (8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8009bf2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bf4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009bf6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009bf8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8009bfa:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009bfe:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c02:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009c04:	d05c      	beq.n	8009cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c06:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c0a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c0e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c12:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8009c16:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c18:	ee07 4a90 	vmov	s15, r4
 8009c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009c20:	d003      	beq.n	8009c2a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8009c22:	2902      	cmp	r1, #2
 8009c24:	d075      	beq.n	8009d12 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d04f      	beq.n	8009cca <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c2a:	ee07 2a90 	vmov	s15, r2
 8009c2e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c38:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009c3c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c44:	ee06 3a90 	vmov	s13, r3
 8009c48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009c4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009c50:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009c54:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009c58:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c5c:	4a34      	ldr	r2, [pc, #208]	; (8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8009c5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009c62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009c64:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009c68:	ee07 3a10 	vmov	s14, r3
 8009c6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009c70:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c72:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c82:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009c84:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009c88:	ee07 3a10 	vmov	s14, r3
 8009c8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c90:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c9c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ca0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009ca2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cae:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009cba:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009cbe:	4770      	bx	lr
 8009cc0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cc2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009cc6:	6082      	str	r2, [r0, #8]
}
 8009cc8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cca:	6819      	ldr	r1, [r3, #0]
 8009ccc:	0689      	lsls	r1, r1, #26
 8009cce:	d527      	bpl.n	8009d20 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cd0:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd2:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cd6:	4919      	ldr	r1, [pc, #100]	; (8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cde:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cee:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cf0:	ee06 3a90 	vmov	s13, r3
 8009cf4:	ee05 1a90 	vmov	s11, r1
 8009cf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009cfc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009d00:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009d04:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009d08:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009d0c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009d10:	e7a4      	b.n	8009c5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d12:	ee07 2a90 	vmov	s15, r2
 8009d16:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8009d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d1e:	e78a      	b.n	8009c36 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d20:	ee07 2a90 	vmov	s15, r2
 8009d24:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009d44 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8009d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d2c:	e783      	b.n	8009c36 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8009d2e:	bf00      	nop
 8009d30:	58024400 	.word	0x58024400
 8009d34:	4a742400 	.word	0x4a742400
 8009d38:	39000000 	.word	0x39000000
 8009d3c:	03d09000 	.word	0x03d09000
 8009d40:	4bbebc20 	.word	0x4bbebc20
 8009d44:	4c742400 	.word	0x4c742400

08009d48 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d48:	4b4f      	ldr	r3, [pc, #316]	; (8009e88 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8009d4a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d4e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d50:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8009d52:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009d56:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d5a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8009d5c:	d05c      	beq.n	8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d5e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009d62:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d66:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d6a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8009d6e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d70:	ee07 4a90 	vmov	s15, r4
 8009d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009d78:	d07e      	beq.n	8009e78 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009d7a:	2902      	cmp	r1, #2
 8009d7c:	d075      	beq.n	8009e6a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009d7e:	2900      	cmp	r1, #0
 8009d80:	d04f      	beq.n	8009e22 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d82:	ee07 2a90 	vmov	s15, r2
 8009d86:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009e8c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d90:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009d94:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	ee06 3a90 	vmov	s13, r3
 8009da0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009da4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009da8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009dac:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009db0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009db4:	4a34      	ldr	r2, [pc, #208]	; (8009e88 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8009db6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009dba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009dbc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009dc0:	ee07 3a10 	vmov	s14, r3
 8009dc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009dc8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009dca:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd6:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009dda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009ddc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009de0:	ee07 3a10 	vmov	s14, r3
 8009de4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009de8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009df4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009df8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009dfa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e06:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009e12:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009e16:	4770      	bx	lr
 8009e18:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e1a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e1e:	6082      	str	r2, [r0, #8]
}
 8009e20:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	0689      	lsls	r1, r1, #26
 8009e26:	d5ac      	bpl.n	8009d82 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e28:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e2a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e2e:	4919      	ldr	r1, [pc, #100]	; (8009e94 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e36:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e3e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8009e90 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e46:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e48:	ee06 3a90 	vmov	s13, r3
 8009e4c:	ee05 1a90 	vmov	s11, r1
 8009e50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009e54:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009e58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009e5c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009e60:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009e64:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009e68:	e7a4      	b.n	8009db4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e6a:	ee07 2a90 	vmov	s15, r2
 8009e6e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009e98 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8009e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e76:	e78a      	b.n	8009d8e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e78:	ee07 2a90 	vmov	s15, r2
 8009e7c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009e9c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8009e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e84:	e783      	b.n	8009d8e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8009e86:	bf00      	nop
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	4c742400 	.word	0x4c742400
 8009e90:	39000000 	.word	0x39000000
 8009e94:	03d09000 	.word	0x03d09000
 8009e98:	4bbebc20 	.word	0x4bbebc20
 8009e9c:	4a742400 	.word	0x4a742400

08009ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ea0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009ea4:	b500      	push	{lr}
 8009ea6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ea8:	d074      	beq.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009eaa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009eae:	d02c      	beq.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009eb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009eb4:	f000 80cd 	beq.w	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009eb8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009ebc:	d07e      	beq.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ebe:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009ec2:	d058      	beq.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009ec4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009ec8:	f000 8102 	beq.w	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009ecc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009ed0:	f000 810d 	beq.w	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009ed4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009ed8:	f000 80e1 	beq.w	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009edc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009ee0:	d138      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009ee2:	4b99      	ldr	r3, [pc, #612]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eee:	f000 808d 	beq.w	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8009ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ef6:	f000 813d 	beq.w	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8009efa:	bb5b      	cbnz	r3, 8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009efc:	4b92      	ldr	r3, [pc, #584]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009f04:	d043      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 8009f06:	4891      	ldr	r0, [pc, #580]	; (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009f08:	e041      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009f0a:	4a8f      	ldr	r2, [pc, #572]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009f0c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f0e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009f12:	2b80      	cmp	r3, #128	; 0x80
 8009f14:	f000 8098 	beq.w	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009f18:	d920      	bls.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8009f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8009f1c:	d036      	beq.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f22:	d117      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f26:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f2c:	0749      	lsls	r1, r1, #29
 8009f2e:	d502      	bpl.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 80ae 	beq.w	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f36:	4a84      	ldr	r2, [pc, #528]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009f38:	6812      	ldr	r2, [r2, #0]
 8009f3a:	05d0      	lsls	r0, r2, #23
 8009f3c:	d503      	bpl.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8009f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f42:	f000 80ff 	beq.w	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f46:	4a80      	ldr	r2, [pc, #512]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	0391      	lsls	r1, r2, #14
 8009f4c:	d502      	bpl.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f52:	d0d8      	beq.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 8009f54:	2000      	movs	r0, #0
}
 8009f56:	b005      	add	sp, #20
 8009f58:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d04c      	beq.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d1f7      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f64:	6810      	ldr	r0, [r2, #0]
 8009f66:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009f6a:	d010      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f6c:	a801      	add	r0, sp, #4
 8009f6e:	f7ff fd93 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f72:	9801      	ldr	r0, [sp, #4]
 8009f74:	e00b      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009f76:	4a74      	ldr	r2, [pc, #464]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009f78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009f7a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f82:	d061      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009f84:	d937      	bls.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8009f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f8a:	d179      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f8c:	4870      	ldr	r0, [pc, #448]	; (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 8009f8e:	b005      	add	sp, #20
 8009f90:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009f94:	4b6c      	ldr	r3, [pc, #432]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	d8d9      	bhi.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009fa0:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	0800a00d 	.word	0x0800a00d
 8009fac:	0800a031 	.word	0x0800a031
 8009fb0:	0800a01d 	.word	0x0800a01d
 8009fb4:	08009f8d 	.word	0x08009f8d
 8009fb8:	0800a019 	.word	0x0800a019
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009fbc:	4a62      	ldr	r2, [pc, #392]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009fbe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009fc0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fc8:	d03e      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8009fca:	d937      	bls.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8009fcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fd0:	d0dc      	beq.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fd6:	d1bd      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009fd8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fda:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fe0:	0752      	lsls	r2, r2, #29
 8009fe2:	d5a8      	bpl.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1a6      	bne.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fe8:	4b57      	ldr	r3, [pc, #348]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009fea:	485a      	ldr	r0, [pc, #360]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009ff2:	40d8      	lsrs	r0, r3
 8009ff4:	e7cb      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d146      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ffa:	6810      	ldr	r0, [r2, #0]
 8009ffc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a000:	d0c5      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a002:	a801      	add	r0, sp, #4
 800a004:	f7ff fea0 	bl	8009d48 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a008:	9802      	ldr	r0, [sp, #8]
 800a00a:	e7c0      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a00c:	4b4e      	ldr	r3, [pc, #312]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a00e:	6818      	ldr	r0, [r3, #0]
 800a010:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800a014:	d0bb      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a016:	e7f4      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a018:	4a4b      	ldr	r2, [pc, #300]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a01a:	e783      	b.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a01c:	4b4a      	ldr	r3, [pc, #296]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a024:	d0b3      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a026:	a801      	add	r0, sp, #4
 800a028:	f7ff fde2 	bl	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a02c:	9801      	ldr	r0, [sp, #4]
 800a02e:	e7ae      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a030:	4b45      	ldr	r3, [pc, #276]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a038:	d0a9      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a03a:	e797      	b.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d0dc      	beq.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800a040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a044:	d08e      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800a046:	e785      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a048:	6810      	ldr	r0, [r2, #0]
 800a04a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a04e:	d09e      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a050:	e7e9      	b.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a052:	4a3d      	ldr	r2, [pc, #244]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a054:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a056:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 800a05a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a05e:	d0f3      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 800a060:	d806      	bhi.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0c9      	beq.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 800a066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a06a:	f43f af7b 	beq.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800a06e:	e771      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800a070:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a074:	d08a      	beq.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a07a:	f43f af53 	beq.w	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 800a07e:	e769      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 800a080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a084:	d0a8      	beq.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a086:	e765      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800a088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08c:	f43f af6a 	beq.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800a090:	e760      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a092:	6813      	ldr	r3, [r2, #0]
 800a094:	482f      	ldr	r0, [pc, #188]	; (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a096:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a09a:	40d8      	lsrs	r0, r3
 800a09c:	e777      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a09e:	4a2a      	ldr	r2, [pc, #168]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a0a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800a0a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0aa:	d06e      	beq.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800a0ac:	d83c      	bhi.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800a0ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0b2:	d05f      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800a0b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0b8:	d127      	bne.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ba:	4b23      	ldr	r3, [pc, #140]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a0bc:	6818      	ldr	r0, [r3, #0]
 800a0be:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a0c2:	f43f af64 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c6:	a801      	add	r0, sp, #4
 800a0c8:	f7ff fd92 	bl	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0cc:	9802      	ldr	r0, [sp, #8]
 800a0ce:	e75e      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a0d0:	4a1d      	ldr	r2, [pc, #116]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a0d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 800a0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0dc:	d040      	beq.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800a0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e2:	f43f af79 	beq.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f47f af34 	bne.w	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800a0ec:	e73a      	b.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a0ee:	4b16      	ldr	r3, [pc, #88]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a0f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800a0f2:	03d2      	lsls	r2, r2, #15
 800a0f4:	d58b      	bpl.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0f6:	6818      	ldr	r0, [r3, #0]
 800a0f8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a0fc:	f43f af47 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a100:	a801      	add	r0, sp, #4
 800a102:	f7ff fcc9 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a106:	9803      	ldr	r0, [sp, #12]
 800a108:	e741      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f47f af22 	bne.w	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a110:	f7fe fda4 	bl	8008c5c <HAL_RCC_GetHCLKFreq>
 800a114:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a116:	4a10      	ldr	r2, [pc, #64]	; (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a11e:	5cd3      	ldrb	r3, [r2, r3]
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	40d8      	lsrs	r0, r3
          break;
 800a126:	e732      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 800a128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12c:	d004      	beq.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800a12e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a132:	f43f aee3 	beq.w	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800a136:	e70d      	b.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a138:	4b03      	ldr	r3, [pc, #12]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800a140:	f43f af25 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 800a144:	4805      	ldr	r0, [pc, #20]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a146:	e722      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a148:	58024400 	.word	0x58024400
 800a14c:	017d7840 	.word	0x017d7840
 800a150:	00bb8000 	.word	0x00bb8000
 800a154:	03d09000 	.word	0x03d09000
 800a158:	08018acc 	.word	0x08018acc
 800a15c:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a160:	6810      	ldr	r0, [r2, #0]
 800a162:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800a166:	f43f af12 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a16a:	a801      	add	r0, sp, #4
 800a16c:	f7ff fd40 	bl	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a170:	9803      	ldr	r0, [sp, #12]
 800a172:	e70c      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a174:	4b08      	ldr	r3, [pc, #32]	; (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a17c:	f43f af07 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a180:	a801      	add	r0, sp, #4
 800a182:	f7ff fc89 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a186:	9802      	ldr	r0, [sp, #8]
 800a188:	e701      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a18a:	6810      	ldr	r0, [r2, #0]
 800a18c:	f010 0004 	ands.w	r0, r0, #4
 800a190:	f43f aefd 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800a194:	e728      	b.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800a196:	bf00      	nop
 800a198:	58024400 	.word	0x58024400

0800a19c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f000 80a5 	beq.w	800a2ec <HAL_TIM_Base_Init+0x150>
{
 800a1a2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d076      	beq.n	800a2a0 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1b2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b4:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1b6:	494e      	ldr	r1, [pc, #312]	; (800a2f0 <HAL_TIM_Base_Init+0x154>)
 800a1b8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800a1bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c0:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800a1c4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1c6:	fab1 f181 	clz	r1, r1
 800a1ca:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800a1ce:	d027      	beq.n	800a220 <HAL_TIM_Base_Init+0x84>
 800a1d0:	bb31      	cbnz	r1, 800a220 <HAL_TIM_Base_Init+0x84>
 800a1d2:	4848      	ldr	r0, [pc, #288]	; (800a2f4 <HAL_TIM_Base_Init+0x158>)
 800a1d4:	4d48      	ldr	r5, [pc, #288]	; (800a2f8 <HAL_TIM_Base_Init+0x15c>)
 800a1d6:	4282      	cmp	r2, r0
 800a1d8:	d067      	beq.n	800a2aa <HAL_TIM_Base_Init+0x10e>
 800a1da:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a1de:	4282      	cmp	r2, r0
 800a1e0:	d063      	beq.n	800a2aa <HAL_TIM_Base_Init+0x10e>
 800a1e2:	1b55      	subs	r5, r2, r5
 800a1e4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a1e8:	fab5 f585 	clz	r5, r5
 800a1ec:	4282      	cmp	r2, r0
 800a1ee:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800a1f2:	d063      	beq.n	800a2bc <HAL_TIM_Base_Init+0x120>
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	d161      	bne.n	800a2bc <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1f8:	4840      	ldr	r0, [pc, #256]	; (800a2fc <HAL_TIM_Base_Init+0x160>)
 800a1fa:	4941      	ldr	r1, [pc, #260]	; (800a300 <HAL_TIM_Base_Init+0x164>)
 800a1fc:	428a      	cmp	r2, r1
 800a1fe:	bf18      	it	ne
 800a200:	4282      	cmpne	r2, r0
 800a202:	d065      	beq.n	800a2d0 <HAL_TIM_Base_Init+0x134>
 800a204:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a208:	428a      	cmp	r2, r1
 800a20a:	d061      	beq.n	800a2d0 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a20c:	69a0      	ldr	r0, [r4, #24]
 800a20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a212:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a214:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800a216:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a218:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a21a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a21c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a21e:	e023      	b.n	800a268 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a220:	4d35      	ldr	r5, [pc, #212]	; (800a2f8 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a226:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a228:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800a22a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a22c:	fab5 f585 	clz	r5, r5
 800a230:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a232:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a238:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a23a:	69a0      	ldr	r0, [r4, #24]
 800a23c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a240:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800a242:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a244:	68e3      	ldr	r3, [r4, #12]
 800a246:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a24c:	b951      	cbnz	r1, 800a264 <HAL_TIM_Base_Init+0xc8>
 800a24e:	b94d      	cbnz	r5, 800a264 <HAL_TIM_Base_Init+0xc8>
 800a250:	492a      	ldr	r1, [pc, #168]	; (800a2fc <HAL_TIM_Base_Init+0x160>)
 800a252:	4b2b      	ldr	r3, [pc, #172]	; (800a300 <HAL_TIM_Base_Init+0x164>)
 800a254:	429a      	cmp	r2, r3
 800a256:	bf18      	it	ne
 800a258:	428a      	cmpne	r2, r1
 800a25a:	d003      	beq.n	800a264 <HAL_TIM_Base_Init+0xc8>
 800a25c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a260:	429a      	cmp	r2, r3
 800a262:	d101      	bne.n	800a268 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a264:	6963      	ldr	r3, [r4, #20]
 800a266:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a268:	2301      	movs	r3, #1
  return HAL_OK;
 800a26a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800a26c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a26e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a272:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a276:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a27a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a27e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a28a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a28e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a292:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a296:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a29a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800a2a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a2a4:	f7f9 fede 	bl	8004064 <HAL_TIM_Base_MspInit>
 800a2a8:	e783      	b.n	800a1b2 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2aa:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a2b0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b2:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800a2b6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b8:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2ba:	e7ba      	b.n	800a232 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800a2bc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a2c2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2c4:	480f      	ldr	r0, [pc, #60]	; (800a304 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2c6:	4282      	cmp	r2, r0
 800a2c8:	d0b3      	beq.n	800a232 <HAL_TIM_Base_Init+0x96>
 800a2ca:	2d00      	cmp	r5, #0
 800a2cc:	d1b1      	bne.n	800a232 <HAL_TIM_Base_Init+0x96>
 800a2ce:	e793      	b.n	800a1f8 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2d0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2d6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2d8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2da:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2e0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800a2e2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800a2e4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2e6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a2e8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2ea:	e7b1      	b.n	800a250 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800a2ec:	2001      	movs	r0, #1
}
 800a2ee:	4770      	bx	lr
 800a2f0:	40010000 	.word	0x40010000
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	40010400 	.word	0x40010400
 800a2fc:	40014000 	.word	0x40014000
 800a300:	40014400 	.word	0x40014400
 800a304:	40000c00 	.word	0x40000c00

0800a308 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a308:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d13d      	bne.n	800a38c <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a310:	6802      	ldr	r2, [r0, #0]
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <HAL_TIM_Base_Start+0x98>)
 800a314:	4923      	ldr	r1, [pc, #140]	; (800a3a4 <HAL_TIM_Base_Start+0x9c>)
 800a316:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a31a:	bf18      	it	ne
 800a31c:	429a      	cmpne	r2, r3
{
 800a31e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a320:	bf0c      	ite	eq
 800a322:	2301      	moveq	r3, #1
 800a324:	2300      	movne	r3, #0
 800a326:	4d20      	ldr	r5, [pc, #128]	; (800a3a8 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a328:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a32a:	42aa      	cmp	r2, r5
 800a32c:	bf08      	it	eq
 800a32e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a332:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a336:	4c1d      	ldr	r4, [pc, #116]	; (800a3ac <HAL_TIM_Base_Start+0xa4>)
 800a338:	428a      	cmp	r2, r1
 800a33a:	bf08      	it	eq
 800a33c:	f043 0301 	orreq.w	r3, r3, #1
 800a340:	481b      	ldr	r0, [pc, #108]	; (800a3b0 <HAL_TIM_Base_Start+0xa8>)
 800a342:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a346:	42a2      	cmp	r2, r4
 800a348:	bf08      	it	eq
 800a34a:	f043 0301 	orreq.w	r3, r3, #1
 800a34e:	4282      	cmp	r2, r0
 800a350:	bf08      	it	eq
 800a352:	f043 0301 	orreq.w	r3, r3, #1
 800a356:	428a      	cmp	r2, r1
 800a358:	bf08      	it	eq
 800a35a:	f043 0301 	orreq.w	r3, r3, #1
 800a35e:	b933      	cbnz	r3, 800a36e <HAL_TIM_Base_Start+0x66>
 800a360:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800a364:	1a10      	subs	r0, r2, r0
 800a366:	fab0 f080 	clz	r0, r0
 800a36a:	0940      	lsrs	r0, r0, #5
 800a36c:	b198      	cbz	r0, 800a396 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a36e:	6891      	ldr	r1, [r2, #8]
 800a370:	4b10      	ldr	r3, [pc, #64]	; (800a3b4 <HAL_TIM_Base_Start+0xac>)
 800a372:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a374:	2b06      	cmp	r3, #6
 800a376:	d00b      	beq.n	800a390 <HAL_TIM_Base_Start+0x88>
 800a378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a37c:	d008      	beq.n	800a390 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800a37e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a380:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a382:	f043 0301 	orr.w	r3, r3, #1
 800a386:	6013      	str	r3, [r2, #0]
}
 800a388:	bc30      	pop	{r4, r5}
 800a38a:	4770      	bx	lr
    return HAL_ERROR;
 800a38c:	2001      	movs	r0, #1
}
 800a38e:	4770      	bx	lr
  return HAL_OK;
 800a390:	2000      	movs	r0, #0
}
 800a392:	bc30      	pop	{r4, r5}
 800a394:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a396:	6813      	ldr	r3, [r2, #0]
 800a398:	f043 0301 	orr.w	r3, r3, #1
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	e7f3      	b.n	800a388 <HAL_TIM_Base_Start+0x80>
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	40000800 	.word	0x40000800
 800a3a8:	40000400 	.word	0x40000400
 800a3ac:	40000c00 	.word	0x40000c00
 800a3b0:	40010400 	.word	0x40010400
 800a3b4:	00010007 	.word	0x00010007

0800a3b8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a3b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d141      	bne.n	800a444 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3c0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c2:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3c4:	4b24      	ldr	r3, [pc, #144]	; (800a458 <HAL_TIM_Base_Start_IT+0xa0>)
 800a3c6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a3ca:	bf18      	it	ne
 800a3cc:	429a      	cmpne	r2, r3
{
 800a3ce:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3d0:	bf0c      	ite	eq
 800a3d2:	2301      	moveq	r3, #1
 800a3d4:	2300      	movne	r3, #0
 800a3d6:	4d21      	ldr	r5, [pc, #132]	; (800a45c <HAL_TIM_Base_Start_IT+0xa4>)
 800a3d8:	4c21      	ldr	r4, [pc, #132]	; (800a460 <HAL_TIM_Base_Start_IT+0xa8>)
 800a3da:	42aa      	cmp	r2, r5
 800a3dc:	bf08      	it	eq
 800a3de:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a3e2:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3e6:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e8:	42a2      	cmp	r2, r4
 800a3ea:	bf08      	it	eq
 800a3ec:	f043 0301 	orreq.w	r3, r3, #1
 800a3f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3f4:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f8:	481a      	ldr	r0, [pc, #104]	; (800a464 <HAL_TIM_Base_Start_IT+0xac>)
 800a3fa:	42a2      	cmp	r2, r4
 800a3fc:	bf08      	it	eq
 800a3fe:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a402:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a404:	4282      	cmp	r2, r0
 800a406:	bf08      	it	eq
 800a408:	f043 0301 	orreq.w	r3, r3, #1
 800a40c:	4916      	ldr	r1, [pc, #88]	; (800a468 <HAL_TIM_Base_Start_IT+0xb0>)
 800a40e:	428a      	cmp	r2, r1
 800a410:	bf08      	it	eq
 800a412:	f043 0301 	orreq.w	r3, r3, #1
 800a416:	b933      	cbnz	r3, 800a426 <HAL_TIM_Base_Start_IT+0x6e>
 800a418:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800a41c:	1a10      	subs	r0, r2, r0
 800a41e:	fab0 f080 	clz	r0, r0
 800a422:	0940      	lsrs	r0, r0, #5
 800a424:	b198      	cbz	r0, 800a44e <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a426:	6891      	ldr	r1, [r2, #8]
 800a428:	4b10      	ldr	r3, [pc, #64]	; (800a46c <HAL_TIM_Base_Start_IT+0xb4>)
 800a42a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42c:	2b06      	cmp	r3, #6
 800a42e:	d00b      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x90>
 800a430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a434:	d008      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800a436:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a438:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	6013      	str	r3, [r2, #0]
}
 800a440:	bc30      	pop	{r4, r5}
 800a442:	4770      	bx	lr
    return HAL_ERROR;
 800a444:	2001      	movs	r0, #1
}
 800a446:	4770      	bx	lr
  return HAL_OK;
 800a448:	2000      	movs	r0, #0
}
 800a44a:	bc30      	pop	{r4, r5}
 800a44c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a44e:	6813      	ldr	r3, [r2, #0]
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	e7f3      	b.n	800a440 <HAL_TIM_Base_Start_IT+0x88>
 800a458:	40010000 	.word	0x40010000
 800a45c:	40000400 	.word	0x40000400
 800a460:	40000800 	.word	0x40000800
 800a464:	40010400 	.word	0x40010400
 800a468:	40001800 	.word	0x40001800
 800a46c:	00010007 	.word	0x00010007

0800a470 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800a470:	2800      	cmp	r0, #0
 800a472:	f000 80cc 	beq.w	800a60e <HAL_TIM_Encoder_Init+0x19e>
{
 800a476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a478:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a47c:	4604      	mov	r4, r0
 800a47e:	460d      	mov	r5, r1
 800a480:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 809b 	beq.w	800a5c0 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a48a:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a48c:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a48e:	4a61      	ldr	r2, [pc, #388]	; (800a614 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a490:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a498:	6899      	ldr	r1, [r3, #8]
 800a49a:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a49e:	495e      	ldr	r1, [pc, #376]	; (800a618 <HAL_TIM_Encoder_Init+0x1a8>)
 800a4a0:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4a4:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800a4a6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4a8:	fab1 f181 	clz	r1, r1
 800a4ac:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800a4b0:	d02b      	beq.n	800a50a <HAL_TIM_Encoder_Init+0x9a>
 800a4b2:	bb51      	cbnz	r1, 800a50a <HAL_TIM_Encoder_Init+0x9a>
 800a4b4:	4859      	ldr	r0, [pc, #356]	; (800a61c <HAL_TIM_Encoder_Init+0x1ac>)
 800a4b6:	4283      	cmp	r3, r0
 800a4b8:	f000 8087 	beq.w	800a5ca <HAL_TIM_Encoder_Init+0x15a>
 800a4bc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a4c0:	4283      	cmp	r3, r0
 800a4c2:	f000 8082 	beq.w	800a5ca <HAL_TIM_Encoder_Init+0x15a>
 800a4c6:	4e56      	ldr	r6, [pc, #344]	; (800a620 <HAL_TIM_Encoder_Init+0x1b0>)
 800a4c8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a4cc:	1b9e      	subs	r6, r3, r6
 800a4ce:	4283      	cmp	r3, r0
 800a4d0:	fab6 f686 	clz	r6, r6
 800a4d4:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800a4d8:	f000 8081 	beq.w	800a5de <HAL_TIM_Encoder_Init+0x16e>
 800a4dc:	2e00      	cmp	r6, #0
 800a4de:	d17e      	bne.n	800a5de <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4e0:	4850      	ldr	r0, [pc, #320]	; (800a624 <HAL_TIM_Encoder_Init+0x1b4>)
 800a4e2:	4951      	ldr	r1, [pc, #324]	; (800a628 <HAL_TIM_Encoder_Init+0x1b8>)
 800a4e4:	428b      	cmp	r3, r1
 800a4e6:	bf18      	it	ne
 800a4e8:	4283      	cmpne	r3, r0
 800a4ea:	f000 8082 	beq.w	800a5f2 <HAL_TIM_Encoder_Init+0x182>
 800a4ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a4f2:	428b      	cmp	r3, r1
 800a4f4:	d07d      	beq.n	800a5f2 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4f6:	69a1      	ldr	r1, [r4, #24]
 800a4f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4fc:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4fe:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800a500:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800a502:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a504:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a506:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a508:	e023      	b.n	800a552 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a50a:	4e45      	ldr	r6, [pc, #276]	; (800a620 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a50c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a510:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a512:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800a514:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a516:	fab6 f686 	clz	r6, r6
 800a51a:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a51c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a51e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a522:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a524:	69a0      	ldr	r0, [r4, #24]
 800a526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a52a:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a52c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a52e:	68e2      	ldr	r2, [r4, #12]
 800a530:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a532:	6862      	ldr	r2, [r4, #4]
 800a534:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a536:	b951      	cbnz	r1, 800a54e <HAL_TIM_Encoder_Init+0xde>
 800a538:	b94e      	cbnz	r6, 800a54e <HAL_TIM_Encoder_Init+0xde>
 800a53a:	493a      	ldr	r1, [pc, #232]	; (800a624 <HAL_TIM_Encoder_Init+0x1b4>)
 800a53c:	4a3a      	ldr	r2, [pc, #232]	; (800a628 <HAL_TIM_Encoder_Init+0x1b8>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	bf18      	it	ne
 800a542:	428b      	cmpne	r3, r1
 800a544:	d003      	beq.n	800a54e <HAL_TIM_Encoder_Init+0xde>
 800a546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d101      	bne.n	800a552 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800a54e:	6962      	ldr	r2, [r4, #20]
 800a550:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a552:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800a554:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a556:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a558:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a55c:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800a55e:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a560:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a564:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800a566:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a568:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800a56c:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a56e:	492f      	ldr	r1, [pc, #188]	; (800a62c <HAL_TIM_Encoder_Init+0x1bc>)
 800a570:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a572:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a574:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a578:	68e9      	ldr	r1, [r5, #12]
 800a57a:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800a57c:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a57e:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a582:	6a29      	ldr	r1, [r5, #32]
 800a584:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a588:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800a58a:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a58c:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800a590:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a592:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800a596:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a598:	4825      	ldr	r0, [pc, #148]	; (800a630 <HAL_TIM_Encoder_Init+0x1c0>)
 800a59a:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a59e:	4302      	orrs	r2, r0
  return HAL_OK;
 800a5a0:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800a5a2:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800a5a4:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5a6:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5aa:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5ae:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5b2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5b6:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a5ba:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800a5c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800a5c4:	f7f9 fdac 	bl	8004120 <HAL_TIM_Encoder_MspInit>
 800a5c8:	e75f      	b.n	800a48a <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5ca:	4e15      	ldr	r6, [pc, #84]	; (800a620 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a5d0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5d2:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800a5d4:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5d6:	fab6 f686 	clz	r6, r6
 800a5da:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5dc:	e79e      	b.n	800a51c <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800a5de:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a5e4:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5e6:	4813      	ldr	r0, [pc, #76]	; (800a634 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d097      	beq.n	800a51c <HAL_TIM_Encoder_Init+0xac>
 800a5ec:	2e00      	cmp	r6, #0
 800a5ee:	d195      	bne.n	800a51c <HAL_TIM_Encoder_Init+0xac>
 800a5f0:	e776      	b.n	800a4e0 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5f2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5f8:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5fa:	69a1      	ldr	r1, [r4, #24]
 800a5fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a600:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a602:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800a604:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800a606:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a608:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a60a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a60c:	e795      	b.n	800a53a <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800a60e:	2001      	movs	r0, #1
}
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	fffebff8 	.word	0xfffebff8
 800a618:	40010000 	.word	0x40010000
 800a61c:	40000400 	.word	0x40000400
 800a620:	40010400 	.word	0x40010400
 800a624:	40014000 	.word	0x40014000
 800a628:	40014400 	.word	0x40014400
 800a62c:	fffffcfc 	.word	0xfffffcfc
 800a630:	ffff0303 	.word	0xffff0303
 800a634:	40000c00 	.word	0x40000c00

0800a638 <HAL_TIM_Encoder_Start>:
{
 800a638:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a63a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a63e:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a642:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a646:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a648:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a64c:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800a64e:	b9c1      	cbnz	r1, 800a682 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a650:	2b01      	cmp	r3, #1
 800a652:	d123      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
 800a654:	2a01      	cmp	r2, #1
 800a656:	d121      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a658:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a65a:	2302      	movs	r3, #2
 800a65c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a660:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a664:	6a13      	ldr	r3, [r2, #32]
 800a666:	f023 0301 	bic.w	r3, r3, #1
 800a66a:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a66c:	6a13      	ldr	r3, [r2, #32]
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800a674:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a676:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	6013      	str	r3, [r2, #0]
}
 800a67e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800a682:	2904      	cmp	r1, #4
 800a684:	fa5f fc8c 	uxtb.w	ip, ip
 800a688:	fa5f fe8e 	uxtb.w	lr, lr
 800a68c:	d027      	beq.n	800a6de <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d104      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
 800a692:	f1bc 0f01 	cmp.w	ip, #1
 800a696:	d101      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a698:	2a01      	cmp	r2, #1
 800a69a:	d002      	beq.n	800a6a2 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800a69c:	2001      	movs	r0, #1
}
 800a69e:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6a2:	f1be 0f01 	cmp.w	lr, #1
 800a6a6:	d1f9      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6a8:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6aa:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6b0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6b8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a6bc:	6a13      	ldr	r3, [r2, #32]
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6c4:	6a13      	ldr	r3, [r2, #32]
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800a6cc:	6a13      	ldr	r3, [r2, #32]
 800a6ce:	f023 0310 	bic.w	r3, r3, #16
 800a6d2:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6d4:	6a13      	ldr	r3, [r2, #32]
 800a6d6:	f043 0310 	orr.w	r3, r3, #16
 800a6da:	6213      	str	r3, [r2, #32]
}
 800a6dc:	e7ca      	b.n	800a674 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6de:	f1bc 0f01 	cmp.w	ip, #1
 800a6e2:	d1db      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
 800a6e4:	f1be 0f01 	cmp.w	lr, #1
 800a6e8:	d1d8      	bne.n	800a69c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6ea:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6ec:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6ee:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6f2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a6f6:	e7e9      	b.n	800a6cc <HAL_TIM_Encoder_Start+0x94>

0800a6f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a6f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	f000 8081 	beq.w	800a804 <HAL_TIM_ConfigClockSource+0x10c>
 800a702:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800a704:	2302      	movs	r3, #2
{
 800a706:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800a708:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800a70a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a70c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a710:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a714:	4b5a      	ldr	r3, [pc, #360]	; (800a880 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800a716:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a718:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800a71a:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800a71c:	680b      	ldr	r3, [r1, #0]
 800a71e:	2b70      	cmp	r3, #112	; 0x70
 800a720:	f000 809c 	beq.w	800a85c <HAL_TIM_ConfigClockSource+0x164>
 800a724:	d825      	bhi.n	800a772 <HAL_TIM_ConfigClockSource+0x7a>
 800a726:	2b50      	cmp	r3, #80	; 0x50
 800a728:	d06e      	beq.n	800a808 <HAL_TIM_ConfigClockSource+0x110>
 800a72a:	d939      	bls.n	800a7a0 <HAL_TIM_ConfigClockSource+0xa8>
 800a72c:	2b60      	cmp	r3, #96	; 0x60
 800a72e:	d118      	bne.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a730:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a732:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a734:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a738:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a73a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a73c:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800a73e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a744:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800a748:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a74a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800a74e:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a750:	4b4c      	ldr	r3, [pc, #304]	; (800a884 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800a752:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800a756:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800a758:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a75a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a75c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800a760:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800a762:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800a764:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a766:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a76a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a76e:	bc70      	pop	{r4, r5, r6}
 800a770:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800a772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a776:	d060      	beq.n	800a83a <HAL_TIM_ConfigClockSource+0x142>
 800a778:	d933      	bls.n	800a7e2 <HAL_TIM_ConfigClockSource+0xea>
 800a77a:	4943      	ldr	r1, [pc, #268]	; (800a888 <HAL_TIM_ConfigClockSource+0x190>)
 800a77c:	428b      	cmp	r3, r1
 800a77e:	d006      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x96>
 800a780:	d929      	bls.n	800a7d6 <HAL_TIM_ConfigClockSource+0xde>
 800a782:	4942      	ldr	r1, [pc, #264]	; (800a88c <HAL_TIM_ConfigClockSource+0x194>)
 800a784:	428b      	cmp	r3, r1
 800a786:	d002      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x96>
 800a788:	3110      	adds	r1, #16
 800a78a:	428b      	cmp	r3, r1
 800a78c:	d1e9      	bne.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800a78e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a790:	493c      	ldr	r1, [pc, #240]	; (800a884 <HAL_TIM_ConfigClockSource+0x18c>)
 800a792:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800a794:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a796:	430b      	orrs	r3, r1
 800a798:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800a79c:	60a3      	str	r3, [r4, #8]
}
 800a79e:	e7e0      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a7a0:	2b40      	cmp	r3, #64	; 0x40
 800a7a2:	d123      	bne.n	800a7ec <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800a7a4:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7a6:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7a8:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7aa:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7ae:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7b2:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a7b4:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7b6:	4b33      	ldr	r3, [pc, #204]	; (800a884 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7b8:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ba:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7bc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7c0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a7c4:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800a7c6:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a7c8:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800a7ca:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7cc:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7ce:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800a7d2:	60a3      	str	r3, [r4, #8]
}
 800a7d4:	e7c5      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a7d6:	f023 0110 	bic.w	r1, r3, #16
 800a7da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a7de:	d1c0      	bne.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
 800a7e0:	e7d5      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800a7e2:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800a7e6:	bf18      	it	ne
 800a7e8:	2001      	movne	r0, #1
 800a7ea:	e7ba      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800a7ec:	d8b9      	bhi.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d0cd      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x96>
 800a7f2:	d903      	bls.n	800a7fc <HAL_TIM_ConfigClockSource+0x104>
 800a7f4:	2b30      	cmp	r3, #48	; 0x30
 800a7f6:	d0ca      	beq.n	800a78e <HAL_TIM_ConfigClockSource+0x96>
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	e7b2      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
 800a7fc:	f033 0110 	bics.w	r1, r3, #16
 800a800:	d1af      	bne.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
 800a802:	e7c4      	b.n	800a78e <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800a804:	2002      	movs	r0, #2
}
 800a806:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800a808:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a80a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a80c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a80e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a812:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a816:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800a818:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800a81a:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a81e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a820:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a824:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800a828:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800a82a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800a82c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800a82e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a830:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a832:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800a836:	60a3      	str	r3, [r4, #8]
}
 800a838:	e793      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a83a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a83e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a840:	432b      	orrs	r3, r5
 800a842:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a844:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800a848:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a84a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a84e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a850:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a858:	60a3      	str	r3, [r4, #8]
      break;
 800a85a:	e782      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a85c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800a860:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a862:	432b      	orrs	r3, r5
 800a864:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a866:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800a86a:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a86c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800a870:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800a872:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800a874:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a876:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800a87a:	60a3      	str	r3, [r4, #8]
      break;
 800a87c:	e771      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x6a>
 800a87e:	bf00      	nop
 800a880:	ffce0088 	.word	0xffce0088
 800a884:	ffcfff8f 	.word	0xffcfff8f
 800a888:	00100020 	.word	0x00100020
 800a88c:	00100030 	.word	0x00100030

0800a890 <HAL_TIM_OC_DelayElapsedCallback>:
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop

0800a894 <HAL_TIM_IC_CaptureCallback>:
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop

0800a898 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop

0800a89c <HAL_TIM_TriggerCallback>:
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop

0800a8a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8a0:	6803      	ldr	r3, [r0, #0]
 800a8a2:	691a      	ldr	r2, [r3, #16]
 800a8a4:	0791      	lsls	r1, r2, #30
{
 800a8a6:	b510      	push	{r4, lr}
 800a8a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8aa:	d502      	bpl.n	800a8b2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	0792      	lsls	r2, r2, #30
 800a8b0:	d468      	bmi.n	800a984 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	0752      	lsls	r2, r2, #29
 800a8b6:	d502      	bpl.n	800a8be <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	0750      	lsls	r0, r2, #29
 800a8bc:	d44f      	bmi.n	800a95e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8be:	691a      	ldr	r2, [r3, #16]
 800a8c0:	0711      	lsls	r1, r2, #28
 800a8c2:	d502      	bpl.n	800a8ca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	0712      	lsls	r2, r2, #28
 800a8c8:	d437      	bmi.n	800a93a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8ca:	691a      	ldr	r2, [r3, #16]
 800a8cc:	06d0      	lsls	r0, r2, #27
 800a8ce:	d502      	bpl.n	800a8d6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8d0:	68da      	ldr	r2, [r3, #12]
 800a8d2:	06d1      	lsls	r1, r2, #27
 800a8d4:	d41e      	bmi.n	800a914 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8d6:	691a      	ldr	r2, [r3, #16]
 800a8d8:	07d2      	lsls	r2, r2, #31
 800a8da:	d502      	bpl.n	800a8e2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	07d0      	lsls	r0, r2, #31
 800a8e0:	d469      	bmi.n	800a9b6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	0611      	lsls	r1, r2, #24
 800a8e6:	d502      	bpl.n	800a8ee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	0612      	lsls	r2, r2, #24
 800a8ec:	d46b      	bmi.n	800a9c6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a8ee:	691a      	ldr	r2, [r3, #16]
 800a8f0:	05d0      	lsls	r0, r2, #23
 800a8f2:	d502      	bpl.n	800a8fa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	0611      	lsls	r1, r2, #24
 800a8f8:	d46d      	bmi.n	800a9d6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	0652      	lsls	r2, r2, #25
 800a8fe:	d502      	bpl.n	800a906 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	0650      	lsls	r0, r2, #25
 800a904:	d46f      	bmi.n	800a9e6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a906:	691a      	ldr	r2, [r3, #16]
 800a908:	0691      	lsls	r1, r2, #26
 800a90a:	d502      	bpl.n	800a912 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	0692      	lsls	r2, r2, #26
 800a910:	d449      	bmi.n	800a9a6 <HAL_TIM_IRQHandler+0x106>
}
 800a912:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a914:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a918:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a91a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a91c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a91e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a926:	d16f      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a928:	f7ff ffb2 	bl	800a890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a92c:	4620      	mov	r0, r4
 800a92e:	f7ff ffb3 	bl	800a898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a932:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a934:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a936:	7722      	strb	r2, [r4, #28]
 800a938:	e7cd      	b.n	800a8d6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a93a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a93e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a940:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a942:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a944:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	079b      	lsls	r3, r3, #30
 800a94a:	d15a      	bne.n	800aa02 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a94c:	f7ff ffa0 	bl	800a890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a950:	4620      	mov	r0, r4
 800a952:	f7ff ffa1 	bl	800a898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a956:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a958:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95a:	7722      	strb	r2, [r4, #28]
 800a95c:	e7b5      	b.n	800a8ca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a95e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a962:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a964:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a966:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a968:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a970:	d144      	bne.n	800a9fc <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a972:	f7ff ff8d 	bl	800a890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a976:	4620      	mov	r0, r4
 800a978:	f7ff ff8e 	bl	800a898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a97c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a97e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a980:	7722      	strb	r2, [r4, #28]
 800a982:	e79c      	b.n	800a8be <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a984:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a988:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a98a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a98c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	0799      	lsls	r1, r3, #30
 800a992:	d130      	bne.n	800a9f6 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a994:	f7ff ff7c 	bl	800a890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a998:	4620      	mov	r0, r4
 800a99a:	f7ff ff7d 	bl	800a898 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a99e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9a0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9a2:	7722      	strb	r2, [r4, #28]
 800a9a4:	e785      	b.n	800a8b2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9a6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a9aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9ac:	611a      	str	r2, [r3, #16]
}
 800a9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a9b2:	f000 b887 	b.w	800aac4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9b6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9be:	f7f5 fe77 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	e78d      	b.n	800a8e2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a9ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a9ce:	f000 f87b 	bl	800aac8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	e78b      	b.n	800a8ee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a9da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a9de:	f000 f875 	bl	800aacc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	e789      	b.n	800a8fa <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a9ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a9ee:	f7ff ff55 	bl	800a89c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	e787      	b.n	800a906 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a9f6:	f7ff ff4d 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800a9fa:	e7d0      	b.n	800a99e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a9fc:	f7ff ff4a 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800aa00:	e7bc      	b.n	800a97c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800aa02:	f7ff ff47 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800aa06:	e7a6      	b.n	800a956 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800aa08:	f7ff ff44 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800aa0c:	e791      	b.n	800a932 <HAL_TIM_IRQHandler+0x92>
 800aa0e:	bf00      	nop

0800aa10 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d04b      	beq.n	800aab0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa18:	6803      	ldr	r3, [r0, #0]
 800aa1a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800aa1c:	2002      	movs	r0, #2
{
 800aa1e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa20:	4d24      	ldr	r5, [pc, #144]	; (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800aa22:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa26:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800aa28:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800aa2a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa2c:	d029      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800aa2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800aa32:	42ab      	cmp	r3, r5
 800aa34:	d025      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa36:	4d20      	ldr	r5, [pc, #128]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa38:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa3c:	42ab      	cmp	r3, r5
 800aa3e:	bf18      	it	ne
 800aa40:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800aa44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800aa48:	bf0c      	ite	eq
 800aa4a:	f04f 0c01 	moveq.w	ip, #1
 800aa4e:	f04f 0c00 	movne.w	ip, #0
 800aa52:	42ab      	cmp	r3, r5
 800aa54:	bf08      	it	eq
 800aa56:	f04c 0c01 	orreq.w	ip, ip, #1
 800aa5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800aa5e:	42ab      	cmp	r3, r5
 800aa60:	bf08      	it	eq
 800aa62:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa66:	680d      	ldr	r5, [r1, #0]
 800aa68:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa6a:	4d14      	ldr	r5, [pc, #80]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800aa6c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa6e:	42ab      	cmp	r3, r5
 800aa70:	bf14      	ite	ne
 800aa72:	4660      	movne	r0, ip
 800aa74:	f04c 0001 	orreq.w	r0, ip, #1
 800aa78:	b960      	cbnz	r0, 800aa94 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800aa7a:	4811      	ldr	r0, [pc, #68]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800aa7c:	4283      	cmp	r3, r0
 800aa7e:	d009      	beq.n	800aa94 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800aa80:	e00d      	b.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa82:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa84:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa88:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa8a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa8c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa90:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800aa92:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa94:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa96:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa9a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa9c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800aa9e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800aaa0:	2101      	movs	r1, #1

  return HAL_OK;
 800aaa2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800aaa4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800aaa8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800aaac:	bc30      	pop	{r4, r5}
 800aaae:	4770      	bx	lr
  __HAL_LOCK(htim);
 800aab0:	2002      	movs	r0, #2
}
 800aab2:	4770      	bx	lr
 800aab4:	40010000 	.word	0x40010000
 800aab8:	40000400 	.word	0x40000400
 800aabc:	40001800 	.word	0x40001800
 800aac0:	40014000 	.word	0x40014000

0800aac4 <HAL_TIMEx_CommutCallback>:
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop

0800aac8 <HAL_TIMEx_BreakCallback>:
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop

0800aacc <HAL_TIMEx_Break2Callback>:
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop

0800aad0 <HAL_UART_TxCpltCallback>:
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop

0800aad4 <HAL_UART_ErrorCallback>:
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop

0800aad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aad8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aada:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aae2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aae6:	f7ff fff5 	bl	800aad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaea:	bd08      	pop	{r3, pc}

0800aaec <HAL_UARTEx_RxEventCallback>:
}
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop

0800aaf0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaf0:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aaf2:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aaf6:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800aaf8:	ea12 0f0c 	tst.w	r2, ip
{
 800aafc:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aafe:	681d      	ldr	r5, [r3, #0]
{
 800ab00:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab02:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800ab04:	f000 811c 	beq.w	800ad40 <HAL_UART_IRQHandler+0x250>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab08:	4eae      	ldr	r6, [pc, #696]	; (800adc4 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab0a:	48af      	ldr	r0, [pc, #700]	; (800adc8 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab0c:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab10:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab12:	ea5c 0600 	orrs.w	r6, ip, r0
 800ab16:	f040 8086 	bne.w	800ac26 <HAL_UART_IRQHandler+0x136>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab1a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ab1c:	2801      	cmp	r0, #1
 800ab1e:	d022      	beq.n	800ab66 <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab20:	02d0      	lsls	r0, r2, #11
 800ab22:	d502      	bpl.n	800ab2a <HAL_UART_IRQHandler+0x3a>
 800ab24:	024e      	lsls	r6, r1, #9
 800ab26:	f100 8134 	bmi.w	800ad92 <HAL_UART_IRQHandler+0x2a2>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab2a:	0610      	lsls	r0, r2, #24
 800ab2c:	d506      	bpl.n	800ab3c <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab2e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab32:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab36:	4301      	orrs	r1, r0
 800ab38:	f040 8123 	bne.w	800ad82 <HAL_UART_IRQHandler+0x292>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab3c:	0651      	lsls	r1, r2, #25
 800ab3e:	d564      	bpl.n	800ac0a <HAL_UART_IRQHandler+0x11a>
 800ab40:	066e      	lsls	r6, r5, #25
 800ab42:	d562      	bpl.n	800ac0a <HAL_UART_IRQHandler+0x11a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab44:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	e843 2100 	strex	r1, r2, [r3]
 800ab50:	2900      	cmp	r1, #0
 800ab52:	d1f7      	bne.n	800ab44 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab54:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab56:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab58:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800ab5a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800ab5e:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800ab60:	f7ff ffb6 	bl	800aad0 <HAL_UART_TxCpltCallback>
}
 800ab64:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab66:	06d0      	lsls	r0, r2, #27
 800ab68:	d5da      	bpl.n	800ab20 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab6a:	06ee      	lsls	r6, r5, #27
 800ab6c:	d5d8      	bpl.n	800ab20 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab6e:	2210      	movs	r2, #16
 800ab70:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	0655      	lsls	r5, r2, #25
 800ab76:	f140 8136 	bpl.w	800ade6 <HAL_UART_IRQHandler+0x2f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab7a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ab7c:	6801      	ldr	r1, [r0, #0]
 800ab7e:	684a      	ldr	r2, [r1, #4]
 800ab80:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800ab82:	2a00      	cmp	r2, #0
 800ab84:	d0ee      	beq.n	800ab64 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ab8a:	4291      	cmp	r1, r2
 800ab8c:	d9ea      	bls.n	800ab64 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800ab8e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab92:	69c2      	ldr	r2, [r0, #28]
 800ab94:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ab98:	d02f      	beq.n	800abfa <HAL_UART_IRQHandler+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	e843 2100 	strex	r1, r2, [r3]
 800aba6:	2900      	cmp	r1, #0
 800aba8:	d1f7      	bne.n	800ab9a <HAL_UART_IRQHandler+0xaa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	f103 0208 	add.w	r2, r3, #8
 800abae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb6:	f103 0508 	add.w	r5, r3, #8
 800abba:	e845 2100 	strex	r1, r2, [r5]
 800abbe:	2900      	cmp	r1, #0
 800abc0:	d1f3      	bne.n	800abaa <HAL_UART_IRQHandler+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	f103 0208 	add.w	r2, r3, #8
 800abc6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	f103 0508 	add.w	r5, r3, #8
 800abd2:	e845 2100 	strex	r1, r2, [r5]
 800abd6:	2900      	cmp	r1, #0
 800abd8:	d1f3      	bne.n	800abc2 <HAL_UART_IRQHandler+0xd2>
          huart->RxState = HAL_UART_STATE_READY;
 800abda:	2220      	movs	r2, #32
 800abdc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abe0:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abea:	e843 2100 	strex	r1, r2, [r3]
 800abee:	2900      	cmp	r1, #0
 800abf0:	d1f7      	bne.n	800abe2 <HAL_UART_IRQHandler+0xf2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abf2:	f7fb fdb1 	bl	8006758 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abf6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800abfa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800abfe:	4620      	mov	r0, r4
 800ac00:	1ac9      	subs	r1, r1, r3
 800ac02:	b289      	uxth	r1, r1
 800ac04:	f7ff ff72 	bl	800aaec <HAL_UARTEx_RxEventCallback>
}
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac0a:	0210      	lsls	r0, r2, #8
 800ac0c:	d502      	bpl.n	800ac14 <HAL_UART_IRQHandler+0x124>
 800ac0e:	0069      	lsls	r1, r5, #1
 800ac10:	f100 80e4 	bmi.w	800addc <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac14:	01d3      	lsls	r3, r2, #7
 800ac16:	d5a5      	bpl.n	800ab64 <HAL_UART_IRQHandler+0x74>
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	daa3      	bge.n	800ab64 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac1c:	4620      	mov	r0, r4
}
 800ac1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac22:	f000 bcf5 	b.w	800b610 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac26:	07d6      	lsls	r6, r2, #31
 800ac28:	d509      	bpl.n	800ac3e <HAL_UART_IRQHandler+0x14e>
 800ac2a:	05ee      	lsls	r6, r5, #23
 800ac2c:	d507      	bpl.n	800ac3e <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac2e:	2601      	movs	r6, #1
 800ac30:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac32:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800ac36:	f046 0601 	orr.w	r6, r6, #1
 800ac3a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac3e:	0796      	lsls	r6, r2, #30
 800ac40:	f140 8090 	bpl.w	800ad64 <HAL_UART_IRQHandler+0x274>
 800ac44:	07ce      	lsls	r6, r1, #31
 800ac46:	d50a      	bpl.n	800ac5e <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac48:	2602      	movs	r6, #2
 800ac4a:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac4c:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800ac50:	f046 0604 	orr.w	r6, r6, #4
 800ac54:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac58:	0756      	lsls	r6, r2, #29
 800ac5a:	f100 8089 	bmi.w	800ad70 <HAL_UART_IRQHandler+0x280>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac5e:	0716      	lsls	r6, r2, #28
 800ac60:	d50b      	bpl.n	800ac7a <HAL_UART_IRQHandler+0x18a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac62:	f005 0620 	and.w	r6, r5, #32
 800ac66:	4330      	orrs	r0, r6
 800ac68:	d007      	beq.n	800ac7a <HAL_UART_IRQHandler+0x18a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac6a:	2008      	movs	r0, #8
 800ac6c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800ac72:	f040 0008 	orr.w	r0, r0, #8
 800ac76:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac7a:	0516      	lsls	r6, r2, #20
 800ac7c:	d50a      	bpl.n	800ac94 <HAL_UART_IRQHandler+0x1a4>
 800ac7e:	0168      	lsls	r0, r5, #5
 800ac80:	d508      	bpl.n	800ac94 <HAL_UART_IRQHandler+0x1a4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ac86:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac88:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800ac8c:	f040 0020 	orr.w	r0, r0, #32
 800ac90:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac94:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	f43f af63 	beq.w	800ab64 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac9e:	0696      	lsls	r6, r2, #26
 800aca0:	d50b      	bpl.n	800acba <HAL_UART_IRQHandler+0x1ca>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aca2:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aca6:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800acaa:	ea55 0201 	orrs.w	r2, r5, r1
 800acae:	d004      	beq.n	800acba <HAL_UART_IRQHandler+0x1ca>
        if (huart->RxISR != NULL)
 800acb0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800acb2:	b112      	cbz	r2, 800acba <HAL_UART_IRQHandler+0x1ca>
          huart->RxISR(huart);
 800acb4:	4620      	mov	r0, r4
 800acb6:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acb8:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800acba:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acbe:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acc0:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acc4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800acc8:	4315      	orrs	r5, r2
 800acca:	f000 80c0 	beq.w	800ae4e <HAL_UART_IRQHandler+0x35e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acce:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	e843 2100 	strex	r1, r2, [r3]
 800acda:	2900      	cmp	r1, #0
 800acdc:	d1f7      	bne.n	800acce <HAL_UART_IRQHandler+0x1de>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acde:	483b      	ldr	r0, [pc, #236]	; (800adcc <HAL_UART_IRQHandler+0x2dc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	f103 0208 	add.w	r2, r3, #8
 800ace4:	e852 2f00 	ldrex	r2, [r2]
 800ace8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acea:	f103 0508 	add.w	r5, r3, #8
 800acee:	e845 2100 	strex	r1, r2, [r5]
 800acf2:	2900      	cmp	r1, #0
 800acf4:	d1f4      	bne.n	800ace0 <HAL_UART_IRQHandler+0x1f0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800acf8:	2a01      	cmp	r2, #1
 800acfa:	d052      	beq.n	800ada2 <HAL_UART_IRQHandler+0x2b2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800acfe:	2120      	movs	r1, #32
 800ad00:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad04:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad06:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800ad08:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad0a:	064d      	lsls	r5, r1, #25
 800ad0c:	d562      	bpl.n	800add4 <HAL_UART_IRQHandler+0x2e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	f103 0208 	add.w	r2, r3, #8
 800ad12:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	f103 0008 	add.w	r0, r3, #8
 800ad1e:	e840 2100 	strex	r1, r2, [r0]
 800ad22:	2900      	cmp	r1, #0
 800ad24:	d1f3      	bne.n	800ad0e <HAL_UART_IRQHandler+0x21e>
          if (huart->hdmarx != NULL)
 800ad26:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d053      	beq.n	800add4 <HAL_UART_IRQHandler+0x2e4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad2c:	4b28      	ldr	r3, [pc, #160]	; (800add0 <HAL_UART_IRQHandler+0x2e0>)
 800ad2e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad30:	f7fb fe8a 	bl	8006a48 <HAL_DMA_Abort_IT>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f43f af15 	beq.w	800ab64 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad3a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ad3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ad3e:	e00e      	b.n	800ad5e <HAL_UART_IRQHandler+0x26e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad40:	0696      	lsls	r6, r2, #26
 800ad42:	f57f aeea 	bpl.w	800ab1a <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad46:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad4a:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800ad4e:	ea56 060c 	orrs.w	r6, r6, ip
 800ad52:	f43f aee2 	beq.w	800ab1a <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800ad56:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f43f af03 	beq.w	800ab64 <HAL_UART_IRQHandler+0x74>
}
 800ad5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad62:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad64:	0756      	lsls	r6, r2, #29
 800ad66:	f57f af7a 	bpl.w	800ac5e <HAL_UART_IRQHandler+0x16e>
 800ad6a:	07ce      	lsls	r6, r1, #31
 800ad6c:	f57f af77 	bpl.w	800ac5e <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad70:	2604      	movs	r6, #4
 800ad72:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad74:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800ad78:	f046 0602 	orr.w	r6, r6, #2
 800ad7c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800ad80:	e76d      	b.n	800ac5e <HAL_UART_IRQHandler+0x16e>
    if (huart->TxISR != NULL)
 800ad82:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f43f aeed 	beq.w	800ab64 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800ad8a:	4620      	mov	r0, r4
}
 800ad8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800ad90:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ad96:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad98:	621a      	str	r2, [r3, #32]
}
 800ad9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800ad9e:	f000 bc35 	b.w	800b60c <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	e843 2100 	strex	r1, r2, [r3]
 800adae:	2900      	cmp	r1, #0
 800adb0:	d0a4      	beq.n	800acfc <HAL_UART_IRQHandler+0x20c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb2:	e853 2f00 	ldrex	r2, [r3]
 800adb6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adba:	e843 2100 	strex	r1, r2, [r3]
 800adbe:	2900      	cmp	r1, #0
 800adc0:	d1ef      	bne.n	800ada2 <HAL_UART_IRQHandler+0x2b2>
 800adc2:	e79b      	b.n	800acfc <HAL_UART_IRQHandler+0x20c>
 800adc4:	04000120 	.word	0x04000120
 800adc8:	10000001 	.word	0x10000001
 800adcc:	effffffe 	.word	0xeffffffe
 800add0:	0800aad9 	.word	0x0800aad9
            HAL_UART_ErrorCallback(huart);
 800add4:	4620      	mov	r0, r4
 800add6:	f7ff fe7d 	bl	800aad4 <HAL_UART_ErrorCallback>
}
 800adda:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800addc:	4620      	mov	r0, r4
}
 800adde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ade2:	f000 bc17 	b.w	800b614 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ade6:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800adea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800adee:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adf2:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800adf4:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adf6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	f43f aeb3 	beq.w	800ab64 <HAL_UART_IRQHandler+0x74>
 800adfe:	2900      	cmp	r1, #0
 800ae00:	f43f aeb0 	beq.w	800ab64 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	e843 2000 	strex	r0, r2, [r3]
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d1f7      	bne.n	800ae04 <HAL_UART_IRQHandler+0x314>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae14:	4d11      	ldr	r5, [pc, #68]	; (800ae5c <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	f103 0208 	add.w	r2, r3, #8
 800ae1a:	e852 2f00 	ldrex	r2, [r2]
 800ae1e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	f103 0608 	add.w	r6, r3, #8
 800ae24:	e846 2000 	strex	r0, r2, [r6]
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d1f4      	bne.n	800ae16 <HAL_UART_IRQHandler+0x326>
        huart->RxState = HAL_UART_STATE_READY;
 800ae2c:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ae2e:	6720      	str	r0, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800ae30:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae34:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	e843 2000 	strex	r0, r2, [r3]
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d1f7      	bne.n	800ae36 <HAL_UART_IRQHandler+0x346>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae46:	4620      	mov	r0, r4
 800ae48:	f7ff fe50 	bl	800aaec <HAL_UARTEx_RxEventCallback>
}
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f7ff fe40 	bl	800aad4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae54:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800ae58:	bd70      	pop	{r4, r5, r6, pc}
 800ae5a:	bf00      	nop
 800ae5c:	effffffe 	.word	0xeffffffe

0800ae60 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae60:	6901      	ldr	r1, [r0, #16]
 800ae62:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae64:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae66:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae68:	49c0      	ldr	r1, [pc, #768]	; (800b16c <UART_SetConfig+0x30c>)
{
 800ae6a:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae6c:	6945      	ldr	r5, [r0, #20]
{
 800ae6e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae70:	69c0      	ldr	r0, [r0, #28]
{
 800ae72:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae74:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae76:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae78:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae7a:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae7c:	4dbc      	ldr	r5, [pc, #752]	; (800b170 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae7e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae80:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae82:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae84:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ae8c:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae90:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae92:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae94:	f000 80e0 	beq.w	800b058 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800ae98:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae9a:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800ae9c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae9e:	4ab5      	ldr	r2, [pc, #724]	; (800b174 <UART_SetConfig+0x314>)
 800aea0:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aea2:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aea4:	4311      	orrs	r1, r2
 800aea6:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeaa:	f022 020f 	bic.w	r2, r2, #15
 800aeae:	432a      	orrs	r2, r5
 800aeb0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeb2:	4ab1      	ldr	r2, [pc, #708]	; (800b178 <UART_SetConfig+0x318>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d023      	beq.n	800af00 <UART_SetConfig+0xa0>
 800aeb8:	4ab0      	ldr	r2, [pc, #704]	; (800b17c <UART_SetConfig+0x31c>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d076      	beq.n	800afac <UART_SetConfig+0x14c>
 800aebe:	4ab0      	ldr	r2, [pc, #704]	; (800b180 <UART_SetConfig+0x320>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	f000 818f 	beq.w	800b1e4 <UART_SetConfig+0x384>
 800aec6:	4aaf      	ldr	r2, [pc, #700]	; (800b184 <UART_SetConfig+0x324>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	f000 81e1 	beq.w	800b290 <UART_SetConfig+0x430>
 800aece:	4aae      	ldr	r2, [pc, #696]	; (800b188 <UART_SetConfig+0x328>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	f000 8121 	beq.w	800b118 <UART_SetConfig+0x2b8>
 800aed6:	4aad      	ldr	r2, [pc, #692]	; (800b18c <UART_SetConfig+0x32c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	f000 81e3 	beq.w	800b2a4 <UART_SetConfig+0x444>
 800aede:	4aac      	ldr	r2, [pc, #688]	; (800b190 <UART_SetConfig+0x330>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	f000 8234 	beq.w	800b34e <UART_SetConfig+0x4ee>
 800aee6:	4aab      	ldr	r2, [pc, #684]	; (800b194 <UART_SetConfig+0x334>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	f000 81e7 	beq.w	800b2bc <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800aeee:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800aef0:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800aef2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800aef6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800aef8:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800aefa:	6763      	str	r3, [r4, #116]	; 0x74
}
 800aefc:	b007      	add	sp, #28
 800aefe:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af00:	4ba5      	ldr	r3, [pc, #660]	; (800b198 <UART_SetConfig+0x338>)
 800af02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af08:	2b28      	cmp	r3, #40	; 0x28
 800af0a:	d8f0      	bhi.n	800aeee <UART_SetConfig+0x8e>
 800af0c:	4aa3      	ldr	r2, [pc, #652]	; (800b19c <UART_SetConfig+0x33c>)
 800af0e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800af14:	d055      	beq.n	800afc2 <UART_SetConfig+0x162>
    switch (clocksource)
 800af16:	2b20      	cmp	r3, #32
 800af18:	f200 814a 	bhi.w	800b1b0 <UART_SetConfig+0x350>
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d8e6      	bhi.n	800aeee <UART_SetConfig+0x8e>
 800af20:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <UART_SetConfig+0xc8>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800b167 	.word	0x0800b167
 800af2c:	0800b161 	.word	0x0800b161
 800af30:	0800aeef 	.word	0x0800aeef
 800af34:	0800aeef 	.word	0x0800aeef
 800af38:	0800b151 	.word	0x0800b151
 800af3c:	0800aeef 	.word	0x0800aeef
 800af40:	0800aeef 	.word	0x0800aeef
 800af44:	0800aeef 	.word	0x0800aeef
 800af48:	0800b143 	.word	0x0800b143
 800af4c:	0800aeef 	.word	0x0800aeef
 800af50:	0800aeef 	.word	0x0800aeef
 800af54:	0800aeef 	.word	0x0800aeef
 800af58:	0800aeef 	.word	0x0800aeef
 800af5c:	0800aeef 	.word	0x0800aeef
 800af60:	0800aeef 	.word	0x0800aeef
 800af64:	0800aeef 	.word	0x0800aeef
 800af68:	0800b12d 	.word	0x0800b12d
 800af6c:	0800aeef 	.word	0x0800aeef
 800af70:	0800aeef 	.word	0x0800aeef
 800af74:	0800aeef 	.word	0x0800aeef
 800af78:	0800aeef 	.word	0x0800aeef
 800af7c:	0800aeef 	.word	0x0800aeef
 800af80:	0800aeef 	.word	0x0800aeef
 800af84:	0800aeef 	.word	0x0800aeef
 800af88:	0800aeef 	.word	0x0800aeef
 800af8c:	0800aeef 	.word	0x0800aeef
 800af90:	0800aeef 	.word	0x0800aeef
 800af94:	0800aeef 	.word	0x0800aeef
 800af98:	0800aeef 	.word	0x0800aeef
 800af9c:	0800aeef 	.word	0x0800aeef
 800afa0:	0800aeef 	.word	0x0800aeef
 800afa4:	0800aeef 	.word	0x0800aeef
 800afa8:	0800b2d1 	.word	0x0800b2d1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afac:	4b7a      	ldr	r3, [pc, #488]	; (800b198 <UART_SetConfig+0x338>)
 800afae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb0:	f003 0307 	and.w	r3, r3, #7
 800afb4:	2b05      	cmp	r3, #5
 800afb6:	d89a      	bhi.n	800aeee <UART_SetConfig+0x8e>
 800afb8:	4a79      	ldr	r2, [pc, #484]	; (800b1a0 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800afbe:	5cd3      	ldrb	r3, [r2, r3]
 800afc0:	d1a9      	bne.n	800af16 <UART_SetConfig+0xb6>
    switch (clocksource)
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	f200 8145 	bhi.w	800b252 <UART_SetConfig+0x3f2>
 800afc8:	2b20      	cmp	r3, #32
 800afca:	d890      	bhi.n	800aeee <UART_SetConfig+0x8e>
 800afcc:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <UART_SetConfig+0x174>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800b33b 	.word	0x0800b33b
 800afd8:	0800b335 	.word	0x0800b335
 800afdc:	0800aeef 	.word	0x0800aeef
 800afe0:	0800aeef 	.word	0x0800aeef
 800afe4:	0800b341 	.word	0x0800b341
 800afe8:	0800aeef 	.word	0x0800aeef
 800afec:	0800aeef 	.word	0x0800aeef
 800aff0:	0800aeef 	.word	0x0800aeef
 800aff4:	0800b323 	.word	0x0800b323
 800aff8:	0800aeef 	.word	0x0800aeef
 800affc:	0800aeef 	.word	0x0800aeef
 800b000:	0800aeef 	.word	0x0800aeef
 800b004:	0800aeef 	.word	0x0800aeef
 800b008:	0800aeef 	.word	0x0800aeef
 800b00c:	0800aeef 	.word	0x0800aeef
 800b010:	0800aeef 	.word	0x0800aeef
 800b014:	0800b30f 	.word	0x0800b30f
 800b018:	0800aeef 	.word	0x0800aeef
 800b01c:	0800aeef 	.word	0x0800aeef
 800b020:	0800aeef 	.word	0x0800aeef
 800b024:	0800aeef 	.word	0x0800aeef
 800b028:	0800aeef 	.word	0x0800aeef
 800b02c:	0800aeef 	.word	0x0800aeef
 800b030:	0800aeef 	.word	0x0800aeef
 800b034:	0800aeef 	.word	0x0800aeef
 800b038:	0800aeef 	.word	0x0800aeef
 800b03c:	0800aeef 	.word	0x0800aeef
 800b040:	0800aeef 	.word	0x0800aeef
 800b044:	0800aeef 	.word	0x0800aeef
 800b048:	0800aeef 	.word	0x0800aeef
 800b04c:	0800aeef 	.word	0x0800aeef
 800b050:	0800aeef 	.word	0x0800aeef
 800b054:	0800b34b 	.word	0x0800b34b
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b058:	6898      	ldr	r0, [r3, #8]
 800b05a:	4a46      	ldr	r2, [pc, #280]	; (800b174 <UART_SetConfig+0x314>)
 800b05c:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b05e:	484e      	ldr	r0, [pc, #312]	; (800b198 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b060:	430a      	orrs	r2, r1
 800b062:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b066:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b068:	f022 020f 	bic.w	r2, r2, #15
 800b06c:	430a      	orrs	r2, r1
 800b06e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b070:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800b072:	f003 0307 	and.w	r3, r3, #7
 800b076:	2b05      	cmp	r3, #5
 800b078:	f63f af39 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b07c:	4a49      	ldr	r2, [pc, #292]	; (800b1a4 <UART_SetConfig+0x344>)
 800b07e:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800b080:	2b20      	cmp	r3, #32
 800b082:	f200 80b9 	bhi.w	800b1f8 <UART_SetConfig+0x398>
 800b086:	2b01      	cmp	r3, #1
 800b088:	f67f af31 	bls.w	800aeee <UART_SetConfig+0x8e>
 800b08c:	3b02      	subs	r3, #2
 800b08e:	2b1e      	cmp	r3, #30
 800b090:	f63f af2d 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b094:	a201      	add	r2, pc, #4	; (adr r2, 800b09c <UART_SetConfig+0x23c>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b305 	.word	0x0800b305
 800b0a0:	0800aeef 	.word	0x0800aeef
 800b0a4:	0800b2fb 	.word	0x0800b2fb
 800b0a8:	0800aeef 	.word	0x0800aeef
 800b0ac:	0800aeef 	.word	0x0800aeef
 800b0b0:	0800aeef 	.word	0x0800aeef
 800b0b4:	0800b2e9 	.word	0x0800b2e9
 800b0b8:	0800aeef 	.word	0x0800aeef
 800b0bc:	0800aeef 	.word	0x0800aeef
 800b0c0:	0800aeef 	.word	0x0800aeef
 800b0c4:	0800aeef 	.word	0x0800aeef
 800b0c8:	0800aeef 	.word	0x0800aeef
 800b0cc:	0800aeef 	.word	0x0800aeef
 800b0d0:	0800aeef 	.word	0x0800aeef
 800b0d4:	0800b2d5 	.word	0x0800b2d5
 800b0d8:	0800aeef 	.word	0x0800aeef
 800b0dc:	0800aeef 	.word	0x0800aeef
 800b0e0:	0800aeef 	.word	0x0800aeef
 800b0e4:	0800aeef 	.word	0x0800aeef
 800b0e8:	0800aeef 	.word	0x0800aeef
 800b0ec:	0800aeef 	.word	0x0800aeef
 800b0f0:	0800aeef 	.word	0x0800aeef
 800b0f4:	0800aeef 	.word	0x0800aeef
 800b0f8:	0800aeef 	.word	0x0800aeef
 800b0fc:	0800aeef 	.word	0x0800aeef
 800b100:	0800aeef 	.word	0x0800aeef
 800b104:	0800aeef 	.word	0x0800aeef
 800b108:	0800aeef 	.word	0x0800aeef
 800b10c:	0800aeef 	.word	0x0800aeef
 800b110:	0800aeef 	.word	0x0800aeef
 800b114:	0800b30b 	.word	0x0800b30b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b118:	4b1f      	ldr	r3, [pc, #124]	; (800b198 <UART_SetConfig+0x338>)
 800b11a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	2b05      	cmp	r3, #5
 800b122:	f63f aee4 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b126:	4a20      	ldr	r2, [pc, #128]	; (800b1a8 <UART_SetConfig+0x348>)
 800b128:	5cd3      	ldrb	r3, [r2, r3]
 800b12a:	e6f1      	b.n	800af10 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b12c:	4b1a      	ldr	r3, [pc, #104]	; (800b198 <UART_SetConfig+0x338>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	0692      	lsls	r2, r2, #26
 800b132:	f140 80c1 	bpl.w	800b2b8 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	481c      	ldr	r0, [pc, #112]	; (800b1ac <UART_SetConfig+0x34c>)
 800b13a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b13e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b140:	e03b      	b.n	800b1ba <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b142:	a803      	add	r0, sp, #12
 800b144:	f7fe fd54 	bl	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b148:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b14a:	b938      	cbnz	r0, 800b15c <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800b14c:	2000      	movs	r0, #0
 800b14e:	e6cf      	b.n	800aef0 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b150:	4668      	mov	r0, sp
 800b152:	f7fe fca1 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b156:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800b158:	2800      	cmp	r0, #0
 800b15a:	d0f7      	beq.n	800b14c <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b15c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b15e:	e02c      	b.n	800b1ba <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b160:	f7fd fe04 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
        break;
 800b164:	e7f1      	b.n	800b14a <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b166:	f7fd fdb9 	bl	8008cdc <HAL_RCC_GetPCLK1Freq>
        break;
 800b16a:	e7ee      	b.n	800b14a <UART_SetConfig+0x2ea>
 800b16c:	cfff69f3 	.word	0xcfff69f3
 800b170:	58000c00 	.word	0x58000c00
 800b174:	11fff4ff 	.word	0x11fff4ff
 800b178:	40011000 	.word	0x40011000
 800b17c:	40004400 	.word	0x40004400
 800b180:	40004800 	.word	0x40004800
 800b184:	40004c00 	.word	0x40004c00
 800b188:	40005000 	.word	0x40005000
 800b18c:	40011400 	.word	0x40011400
 800b190:	40007800 	.word	0x40007800
 800b194:	40007c00 	.word	0x40007c00
 800b198:	58024400 	.word	0x58024400
 800b19c:	08018ae4 	.word	0x08018ae4
 800b1a0:	08018b10 	.word	0x08018b10
 800b1a4:	08018b18 	.word	0x08018b18
 800b1a8:	08018b10 	.word	0x08018b10
 800b1ac:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800b1b0:	2b40      	cmp	r3, #64	; 0x40
 800b1b2:	f47f ae9c 	bne.w	800aeee <UART_SetConfig+0x8e>
 800b1b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ba:	4b6c      	ldr	r3, [pc, #432]	; (800b36c <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1bc:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1c0:	6862      	ldr	r2, [r4, #4]
 800b1c2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800b1c6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b1ca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800b1ce:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1d2:	f1a3 0210 	sub.w	r2, r3, #16
 800b1d6:	428a      	cmp	r2, r1
 800b1d8:	f63f ae89 	bhi.w	800aeee <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b1dc:	6822      	ldr	r2, [r4, #0]
 800b1de:	2000      	movs	r0, #0
 800b1e0:	60d3      	str	r3, [r2, #12]
 800b1e2:	e685      	b.n	800aef0 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1e4:	4b62      	ldr	r3, [pc, #392]	; (800b370 <UART_SetConfig+0x510>)
 800b1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	2b05      	cmp	r3, #5
 800b1ee:	f63f ae7e 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b1f2:	4a60      	ldr	r2, [pc, #384]	; (800b374 <UART_SetConfig+0x514>)
 800b1f4:	5cd3      	ldrb	r3, [r2, r3]
 800b1f6:	e68b      	b.n	800af10 <UART_SetConfig+0xb0>
    switch (clocksource)
 800b1f8:	2b40      	cmp	r3, #64	; 0x40
 800b1fa:	f47f ae78 	bne.w	800aeee <UART_SetConfig+0x8e>
 800b1fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b202:	4b5a      	ldr	r3, [pc, #360]	; (800b36c <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b204:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b206:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b20a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b20e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b212:	4299      	cmp	r1, r3
 800b214:	f63f ae6b 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b218:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b21c:	f63f ae67 	bhi.w	800aeee <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b220:	2300      	movs	r3, #0
 800b222:	4619      	mov	r1, r3
 800b224:	f7f5 f8b4 	bl	8000390 <__aeabi_uldivmod>
 800b228:	462a      	mov	r2, r5
 800b22a:	0209      	lsls	r1, r1, #8
 800b22c:	0203      	lsls	r3, r0, #8
 800b22e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b232:	0868      	lsrs	r0, r5, #1
 800b234:	1818      	adds	r0, r3, r0
 800b236:	f04f 0300 	mov.w	r3, #0
 800b23a:	f141 0100 	adc.w	r1, r1, #0
 800b23e:	f7f5 f8a7 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b242:	4a4d      	ldr	r2, [pc, #308]	; (800b378 <UART_SetConfig+0x518>)
 800b244:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b248:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b24a:	4291      	cmp	r1, r2
 800b24c:	f63f ae4f 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b250:	e7c4      	b.n	800b1dc <UART_SetConfig+0x37c>
    switch (clocksource)
 800b252:	2b40      	cmp	r3, #64	; 0x40
 800b254:	f47f ae4b 	bne.w	800aeee <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b258:	4b44      	ldr	r3, [pc, #272]	; (800b36c <UART_SetConfig+0x50c>)
 800b25a:	6862      	ldr	r2, [r4, #4]
 800b25c:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800b260:	0853      	lsrs	r3, r2, #1
 800b262:	fbb0 f0f1 	udiv	r0, r0, r1
 800b266:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b26a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b26e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b272:	f1a0 0210 	sub.w	r2, r0, #16
 800b276:	429a      	cmp	r2, r3
 800b278:	f63f ae39 	bhi.w	800aeee <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b27c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b280:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800b284:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b286:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800b288:	4303      	orrs	r3, r0
 800b28a:	2000      	movs	r0, #0
 800b28c:	60d3      	str	r3, [r2, #12]
 800b28e:	e62f      	b.n	800aef0 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b290:	4b37      	ldr	r3, [pc, #220]	; (800b370 <UART_SetConfig+0x510>)
 800b292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b294:	f003 0307 	and.w	r3, r3, #7
 800b298:	2b05      	cmp	r3, #5
 800b29a:	f63f ae28 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b29e:	4a37      	ldr	r2, [pc, #220]	; (800b37c <UART_SetConfig+0x51c>)
 800b2a0:	5cd3      	ldrb	r3, [r2, r3]
 800b2a2:	e635      	b.n	800af10 <UART_SetConfig+0xb0>
 800b2a4:	4b32      	ldr	r3, [pc, #200]	; (800b370 <UART_SetConfig+0x510>)
 800b2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2ac:	2b28      	cmp	r3, #40	; 0x28
 800b2ae:	f63f ae1e 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b2b2:	4a33      	ldr	r2, [pc, #204]	; (800b380 <UART_SetConfig+0x520>)
 800b2b4:	5cd3      	ldrb	r3, [r2, r3]
 800b2b6:	e62b      	b.n	800af10 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800b2b8:	4832      	ldr	r0, [pc, #200]	; (800b384 <UART_SetConfig+0x524>)
 800b2ba:	e77e      	b.n	800b1ba <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2bc:	4b2c      	ldr	r3, [pc, #176]	; (800b370 <UART_SetConfig+0x510>)
 800b2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c0:	f003 0307 	and.w	r3, r3, #7
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	f63f ae12 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b2ca:	4a2f      	ldr	r2, [pc, #188]	; (800b388 <UART_SetConfig+0x528>)
 800b2cc:	5cd3      	ldrb	r3, [r2, r3]
 800b2ce:	e61f      	b.n	800af10 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800b2d0:	482e      	ldr	r0, [pc, #184]	; (800b38c <UART_SetConfig+0x52c>)
 800b2d2:	e772      	b.n	800b1ba <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d4:	4b26      	ldr	r3, [pc, #152]	; (800b370 <UART_SetConfig+0x510>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	0690      	lsls	r0, r2, #26
 800b2da:	d542      	bpl.n	800b362 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4829      	ldr	r0, [pc, #164]	; (800b384 <UART_SetConfig+0x524>)
 800b2e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b2e4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b2e6:	e78c      	b.n	800b202 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e8:	a803      	add	r0, sp, #12
 800b2ea:	f7fe fc81 	bl	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2ee:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	f43f af2b 	beq.w	800b14c <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2f8:	e783      	b.n	800b202 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2fa:	4668      	mov	r0, sp
 800b2fc:	f7fe fbcc 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b300:	9801      	ldr	r0, [sp, #4]
        break;
 800b302:	e7f5      	b.n	800b2f0 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b304:	f7fe fbb6 	bl	8009a74 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800b308:	e7f2      	b.n	800b2f0 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800b30a:	4820      	ldr	r0, [pc, #128]	; (800b38c <UART_SetConfig+0x52c>)
 800b30c:	e779      	b.n	800b202 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b30e:	4b18      	ldr	r3, [pc, #96]	; (800b370 <UART_SetConfig+0x510>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	0691      	lsls	r1, r2, #26
 800b314:	d527      	bpl.n	800b366 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	481a      	ldr	r0, [pc, #104]	; (800b384 <UART_SetConfig+0x524>)
 800b31a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b31e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b320:	e79a      	b.n	800b258 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b322:	a803      	add	r0, sp, #12
 800b324:	f7fe fc64 	bl	8009bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b328:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f af0e 	beq.w	800b14c <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b330:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b332:	e791      	b.n	800b258 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b334:	f7fd fd1a 	bl	8008d6c <HAL_RCC_GetPCLK2Freq>
        break;
 800b338:	e7f7      	b.n	800b32a <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b33a:	f7fd fccf 	bl	8008cdc <HAL_RCC_GetPCLK1Freq>
        break;
 800b33e:	e7f4      	b.n	800b32a <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b340:	4668      	mov	r0, sp
 800b342:	f7fe fba9 	bl	8009a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b346:	9801      	ldr	r0, [sp, #4]
        break;
 800b348:	e7ef      	b.n	800b32a <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800b34a:	4810      	ldr	r0, [pc, #64]	; (800b38c <UART_SetConfig+0x52c>)
 800b34c:	e784      	b.n	800b258 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b34e:	4b08      	ldr	r3, [pc, #32]	; (800b370 <UART_SetConfig+0x510>)
 800b350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b05      	cmp	r3, #5
 800b358:	f63f adc9 	bhi.w	800aeee <UART_SetConfig+0x8e>
 800b35c:	4a0c      	ldr	r2, [pc, #48]	; (800b390 <UART_SetConfig+0x530>)
 800b35e:	5cd3      	ldrb	r3, [r2, r3]
 800b360:	e5d6      	b.n	800af10 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800b362:	4808      	ldr	r0, [pc, #32]	; (800b384 <UART_SetConfig+0x524>)
 800b364:	e74d      	b.n	800b202 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800b366:	4807      	ldr	r0, [pc, #28]	; (800b384 <UART_SetConfig+0x524>)
 800b368:	e776      	b.n	800b258 <UART_SetConfig+0x3f8>
 800b36a:	bf00      	nop
 800b36c:	08018b20 	.word	0x08018b20
 800b370:	58024400 	.word	0x58024400
 800b374:	08018b10 	.word	0x08018b10
 800b378:	000ffcff 	.word	0x000ffcff
 800b37c:	08018b10 	.word	0x08018b10
 800b380:	08018ae4 	.word	0x08018ae4
 800b384:	03d09000 	.word	0x03d09000
 800b388:	08018b10 	.word	0x08018b10
 800b38c:	003d0900 	.word	0x003d0900
 800b390:	08018b10 	.word	0x08018b10

0800b394 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b394:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b396:	07da      	lsls	r2, r3, #31
{
 800b398:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b39a:	d506      	bpl.n	800b3aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b39c:	6801      	ldr	r1, [r0, #0]
 800b39e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b3a0:	684a      	ldr	r2, [r1, #4]
 800b3a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b3a6:	4322      	orrs	r2, r4
 800b3a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3aa:	079c      	lsls	r4, r3, #30
 800b3ac:	d506      	bpl.n	800b3bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3ae:	6801      	ldr	r1, [r0, #0]
 800b3b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b3b2:	684a      	ldr	r2, [r1, #4]
 800b3b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b3b8:	4322      	orrs	r2, r4
 800b3ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3bc:	0759      	lsls	r1, r3, #29
 800b3be:	d506      	bpl.n	800b3ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3c0:	6801      	ldr	r1, [r0, #0]
 800b3c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b3c4:	684a      	ldr	r2, [r1, #4]
 800b3c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b3ca:	4322      	orrs	r2, r4
 800b3cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3ce:	071a      	lsls	r2, r3, #28
 800b3d0:	d506      	bpl.n	800b3e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3d2:	6801      	ldr	r1, [r0, #0]
 800b3d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b3d6:	684a      	ldr	r2, [r1, #4]
 800b3d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3dc:	4322      	orrs	r2, r4
 800b3de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3e0:	06dc      	lsls	r4, r3, #27
 800b3e2:	d506      	bpl.n	800b3f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3e4:	6801      	ldr	r1, [r0, #0]
 800b3e6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b3e8:	688a      	ldr	r2, [r1, #8]
 800b3ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3ee:	4322      	orrs	r2, r4
 800b3f0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3f2:	0699      	lsls	r1, r3, #26
 800b3f4:	d506      	bpl.n	800b404 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3f6:	6801      	ldr	r1, [r0, #0]
 800b3f8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b3fa:	688a      	ldr	r2, [r1, #8]
 800b3fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b400:	4322      	orrs	r2, r4
 800b402:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b404:	065a      	lsls	r2, r3, #25
 800b406:	d50a      	bpl.n	800b41e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b408:	6801      	ldr	r1, [r0, #0]
 800b40a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b40c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b40e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b412:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b416:	ea42 0204 	orr.w	r2, r2, r4
 800b41a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b41c:	d00b      	beq.n	800b436 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b41e:	061b      	lsls	r3, r3, #24
 800b420:	d506      	bpl.n	800b430 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b422:	6802      	ldr	r2, [r0, #0]
 800b424:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b426:	6853      	ldr	r3, [r2, #4]
 800b428:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b42c:	430b      	orrs	r3, r1
 800b42e:	6053      	str	r3, [r2, #4]
}
 800b430:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b434:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b436:	684a      	ldr	r2, [r1, #4]
 800b438:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800b43a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b43e:	4322      	orrs	r2, r4
 800b440:	604a      	str	r2, [r1, #4]
 800b442:	e7ec      	b.n	800b41e <UART_AdvFeatureConfig+0x8a>

0800b444 <UART_WaitOnFlagUntilTimeout>:
{
 800b444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b44c:	4607      	mov	r7, r0
 800b44e:	460e      	mov	r6, r1
 800b450:	4615      	mov	r5, r2
 800b452:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b454:	6804      	ldr	r4, [r0, #0]
 800b456:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b45a:	d10a      	bne.n	800b472 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b45c:	69e3      	ldr	r3, [r4, #28]
 800b45e:	ea36 0303 	bics.w	r3, r6, r3
 800b462:	bf0c      	ite	eq
 800b464:	2301      	moveq	r3, #1
 800b466:	2300      	movne	r3, #0
 800b468:	429d      	cmp	r5, r3
 800b46a:	d0f7      	beq.n	800b45c <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800b46c:	2000      	movs	r0, #0
}
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b472:	69e3      	ldr	r3, [r4, #28]
 800b474:	ea36 0303 	bics.w	r3, r6, r3
 800b478:	bf0c      	ite	eq
 800b47a:	2301      	moveq	r3, #1
 800b47c:	2300      	movne	r3, #0
 800b47e:	42ab      	cmp	r3, r5
 800b480:	d1f4      	bne.n	800b46c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b482:	f7f9 f8ab 	bl	80045dc <HAL_GetTick>
 800b486:	eba0 0009 	sub.w	r0, r0, r9
 800b48a:	4540      	cmp	r0, r8
 800b48c:	d833      	bhi.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b48e:	f1b8 0f00 	cmp.w	r8, #0
 800b492:	d030      	beq.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b494:	683c      	ldr	r4, [r7, #0]
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	4622      	mov	r2, r4
 800b49a:	0759      	lsls	r1, r3, #29
 800b49c:	d5db      	bpl.n	800b456 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b49e:	69e3      	ldr	r3, [r4, #28]
 800b4a0:	051b      	lsls	r3, r3, #20
 800b4a2:	d5d8      	bpl.n	800b456 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4a8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b2:	e844 3100 	strex	r1, r3, [r4]
 800b4b6:	b139      	cbz	r1, 800b4c8 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	e852 3f00 	ldrex	r3, [r2]
 800b4bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	e842 3100 	strex	r1, r3, [r2]
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	d1f7      	bne.n	800b4b8 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	f102 0308 	add.w	r3, r2, #8
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	f102 0008 	add.w	r0, r2, #8
 800b4d8:	e840 3100 	strex	r1, r3, [r0]
 800b4dc:	2900      	cmp	r1, #0
 800b4de:	d1f3      	bne.n	800b4c8 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800b4e0:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800b4e2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800b4e4:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 800b4e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b4ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800b4f4:	e7bb      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0x2a>
 800b4f6:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b500:	e842 3100 	strex	r1, r3, [r2]
 800b504:	2900      	cmp	r1, #0
 800b506:	d1f7      	bne.n	800b4f8 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b508:	f102 0308 	add.w	r3, r2, #8
 800b50c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b510:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	f102 0008 	add.w	r0, r2, #8
 800b518:	e840 3100 	strex	r1, r3, [r0]
 800b51c:	2900      	cmp	r1, #0
 800b51e:	d1f3      	bne.n	800b508 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800b520:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800b522:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800b524:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800b528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b52c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800b530:	e79d      	b.n	800b46e <UART_WaitOnFlagUntilTimeout+0x2a>
 800b532:	bf00      	nop

0800b534 <HAL_UART_Init>:
  if (huart == NULL)
 800b534:	2800      	cmp	r0, #0
 800b536:	d066      	beq.n	800b606 <HAL_UART_Init+0xd2>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b538:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	4604      	mov	r4, r0
 800b540:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_RESET)
 800b542:	2b00      	cmp	r3, #0
 800b544:	d04c      	beq.n	800b5e0 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800b546:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b548:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b54a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800b54c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800b550:	6813      	ldr	r3, [r2, #0]
 800b552:	f023 0301 	bic.w	r3, r3, #1
 800b556:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b558:	f7ff fc82 	bl	800ae60 <UART_SetConfig>
 800b55c:	2801      	cmp	r0, #1
 800b55e:	d03c      	beq.n	800b5da <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d135      	bne.n	800b5d2 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b566:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b568:	2500      	movs	r5, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b56a:	6859      	ldr	r1, [r3, #4]
 800b56c:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800b570:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b572:	6899      	ldr	r1, [r3, #8]
 800b574:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800b578:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b57a:	6819      	ldr	r1, [r3, #0]
 800b57c:	f041 0101 	orr.w	r1, r1, #1
 800b580:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b582:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800b586:	f7f9 f829 	bl	80045dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b58a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b58c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	0712      	lsls	r2, r2, #28
 800b592:	d40e      	bmi.n	800b5b2 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	075b      	lsls	r3, r3, #29
 800b598:	d427      	bmi.n	800b5ea <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b59c:	2220      	movs	r2, #32
  return HAL_OK;
 800b59e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800b5a0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b5a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b5a8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ac:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800b5ae:	b002      	add	sp, #8
 800b5b0:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b2:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	462a      	mov	r2, r5
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	9100      	str	r1, [sp, #0]
 800b5be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5c2:	f7ff ff3f 	bl	800b444 <UART_WaitOnFlagUntilTimeout>
 800b5c6:	b9e0      	cbnz	r0, 800b602 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	075b      	lsls	r3, r3, #29
 800b5ce:	d40c      	bmi.n	800b5ea <HAL_UART_Init+0xb6>
 800b5d0:	e7e3      	b.n	800b59a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7ff fede 	bl	800b394 <UART_AdvFeatureConfig>
 800b5d8:	e7c5      	b.n	800b566 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800b5da:	2001      	movs	r0, #1
}
 800b5dc:	b002      	add	sp, #8
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800b5e0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800b5e4:	f7f8 fdde 	bl	80041a4 <HAL_UART_MspInit>
 800b5e8:	e7ad      	b.n	800b546 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5ea:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800b5ee:	4633      	mov	r3, r6
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5f6:	9000      	str	r0, [sp, #0]
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f7ff ff23 	bl	800b444 <UART_WaitOnFlagUntilTimeout>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d0cb      	beq.n	800b59a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800b602:	2003      	movs	r0, #3
 800b604:	e7d3      	b.n	800b5ae <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800b606:	2001      	movs	r0, #1
}
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop

0800b60c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop

0800b610 <HAL_UARTEx_RxFifoFullCallback>:
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop

0800b614 <HAL_UARTEx_TxFifoEmptyCallback>:
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop

0800b618 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b618:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b61c:	2a01      	cmp	r2, #1
 800b61e:	d017      	beq.n	800b650 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b620:	6802      	ldr	r2, [r0, #0]
 800b622:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b624:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b626:	2100      	movs	r1, #0
{
 800b628:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800b62a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800b62e:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b630:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b632:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b634:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800b638:	f024 0401 	bic.w	r4, r4, #1
 800b63c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b63e:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b640:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800b642:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b644:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b648:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b64c:	bc30      	pop	{r4, r5}
 800b64e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b650:	2002      	movs	r0, #2
}
 800b652:	4770      	bx	lr

0800b654 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b654:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b658:	2a01      	cmp	r2, #1
 800b65a:	d037      	beq.n	800b6cc <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b65c:	6802      	ldr	r2, [r0, #0]
 800b65e:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b660:	2024      	movs	r0, #36	; 0x24
{
 800b662:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b664:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b668:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b66a:	6810      	ldr	r0, [r2, #0]
 800b66c:	f020 0001 	bic.w	r0, r0, #1
 800b670:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b672:	6890      	ldr	r0, [r2, #8]
 800b674:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800b678:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b67a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b67c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b67e:	b310      	cbz	r0, 800b6c6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b680:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b682:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b684:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b688:	4911      	ldr	r1, [pc, #68]	; (800b6d0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b68a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b68e:	4d11      	ldr	r5, [pc, #68]	; (800b6d4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b690:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b694:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b698:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b69c:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b69e:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6a2:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6a4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6a8:	fbb1 f1f5 	udiv	r1, r1, r5
 800b6ac:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800b6b0:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6b8:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b6ba:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b6bc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b6c0:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b6c4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800b6c6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	e7ef      	b.n	800b6ac <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800b6cc:	2002      	movs	r0, #2
}
 800b6ce:	4770      	bx	lr
 800b6d0:	08018b40 	.word	0x08018b40
 800b6d4:	08018b38 	.word	0x08018b38

0800b6d8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b6d8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b6dc:	2a01      	cmp	r2, #1
 800b6de:	d037      	beq.n	800b750 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6e0:	6802      	ldr	r2, [r0, #0]
 800b6e2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800b6e4:	2024      	movs	r0, #36	; 0x24
{
 800b6e6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b6e8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ec:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b6ee:	6810      	ldr	r0, [r2, #0]
 800b6f0:	f020 0001 	bic.w	r0, r0, #1
 800b6f4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6f6:	6890      	ldr	r0, [r2, #8]
 800b6f8:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800b6fc:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6fe:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b700:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b702:	b310      	cbz	r0, 800b74a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b704:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b706:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b708:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b70c:	4911      	ldr	r1, [pc, #68]	; (800b754 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b70e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b712:	4d11      	ldr	r5, [pc, #68]	; (800b758 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b714:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b718:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b71c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b720:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b722:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b726:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b728:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b72c:	fbb1 f1f5 	udiv	r1, r1, r5
 800b730:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800b734:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800b736:	2100      	movs	r1, #0
 800b738:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b73c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b73e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b740:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b744:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b748:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800b74a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b74c:	4608      	mov	r0, r1
 800b74e:	e7ef      	b.n	800b730 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800b750:	2002      	movs	r0, #2
}
 800b752:	4770      	bx	lr
 800b754:	08018b40 	.word	0x08018b40
 800b758:	08018b38 	.word	0x08018b38

0800b75c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b75c:	b084      	sub	sp, #16
 800b75e:	4684      	mov	ip, r0
 800b760:	b500      	push	{lr}
 800b762:	b083      	sub	sp, #12
 800b764:	f10d 0e14 	add.w	lr, sp, #20
 800b768:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d13d      	bne.n	800b7ee <USB_CoreInit+0x92>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b772:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b774:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800b778:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b77a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800b77e:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b780:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b782:	68c2      	ldr	r2, [r0, #12]
 800b784:	ea03 0302 	and.w	r3, r3, r2
 800b788:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b78a:	68c3      	ldr	r3, [r0, #12]
 800b78c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b790:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b792:	d078      	beq.n	800b886 <USB_CoreInit+0x12a>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800b794:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b796:	4a3e      	ldr	r2, [pc, #248]	; (800b890 <USB_CoreInit+0x134>)
  __IO uint32_t count = 0U;
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	e003      	b.n	800b7a4 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b79c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	db3f      	blt.n	800b824 <USB_CoreInit+0xc8>
    if (++count > 200000U)
 800b7a4:	9b00      	ldr	r3, [sp, #0]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	d9f6      	bls.n	800b79c <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800b7ae:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800b7b0:	9b08      	ldr	r3, [sp, #32]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d116      	bne.n	800b7e4 <USB_CoreInit+0x88>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b7b6:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b7ba:	4b36      	ldr	r3, [pc, #216]	; (800b894 <USB_CoreInit+0x138>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b7bc:	b292      	uxth	r2, r2
 800b7be:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b7c2:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b7cc:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b7d0:	f043 0306 	orr.w	r3, r3, #6
 800b7d4:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b7d8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800b7dc:	f043 0320 	orr.w	r3, r3, #32
 800b7e0:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800b7e4:	b003      	add	sp, #12
 800b7e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ea:	b004      	add	sp, #16
 800b7ec:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7ee:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800b7f0:	2100      	movs	r1, #0
    if (++count > 200000U)
 800b7f2:	4a27      	ldr	r2, [pc, #156]	; (800b890 <USB_CoreInit+0x134>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f8:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800b7fa:	9101      	str	r1, [sp, #4]
 800b7fc:	e003      	b.n	800b806 <USB_CoreInit+0xaa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7fe:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b802:	2b00      	cmp	r3, #0
 800b804:	db2a      	blt.n	800b85c <USB_CoreInit+0x100>
    if (++count > 200000U)
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	3301      	adds	r3, #1
 800b80a:	4293      	cmp	r3, r2
 800b80c:	9301      	str	r3, [sp, #4]
 800b80e:	d9f6      	bls.n	800b7fe <USB_CoreInit+0xa2>
      return HAL_TIMEOUT;
 800b810:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800b812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b814:	b9db      	cbnz	r3, 800b84e <USB_CoreInit+0xf2>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b816:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800b81a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b81e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800b822:	e7c5      	b.n	800b7b0 <USB_CoreInit+0x54>

  /* Core Soft Reset */
  count = 0U;
 800b824:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 800b826:	4a1a      	ldr	r2, [pc, #104]	; (800b890 <USB_CoreInit+0x134>)
  count = 0U;
 800b828:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b82a:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	f8cc 3010 	str.w	r3, [ip, #16]
 800b836:	e004      	b.n	800b842 <USB_CoreInit+0xe6>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b838:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800b83c:	f010 0001 	ands.w	r0, r0, #1
 800b840:	d0b6      	beq.n	800b7b0 <USB_CoreInit+0x54>
    if (++count > 200000U)
 800b842:	9b00      	ldr	r3, [sp, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	4293      	cmp	r3, r2
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	d9f5      	bls.n	800b838 <USB_CoreInit+0xdc>
 800b84c:	e7af      	b.n	800b7ae <USB_CoreInit+0x52>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b84e:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800b852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b856:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800b85a:	e7a9      	b.n	800b7b0 <USB_CoreInit+0x54>
  count = 0U;
 800b85c:	2300      	movs	r3, #0
    if (++count > 200000U)
 800b85e:	4a0c      	ldr	r2, [pc, #48]	; (800b890 <USB_CoreInit+0x134>)
  count = 0U;
 800b860:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b862:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	f8cc 3010 	str.w	r3, [ip, #16]
 800b86e:	e004      	b.n	800b87a <USB_CoreInit+0x11e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b870:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800b874:	f010 0001 	ands.w	r0, r0, #1
 800b878:	d0cb      	beq.n	800b812 <USB_CoreInit+0xb6>
    if (++count > 200000U)
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	3301      	adds	r3, #1
 800b87e:	4293      	cmp	r3, r2
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	d9f5      	bls.n	800b870 <USB_CoreInit+0x114>
 800b884:	e7c4      	b.n	800b810 <USB_CoreInit+0xb4>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b886:	68c3      	ldr	r3, [r0, #12]
 800b888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b88c:	60c3      	str	r3, [r0, #12]
 800b88e:	e781      	b.n	800b794 <USB_CoreInit+0x38>
 800b890:	00030d40 	.word	0x00030d40
 800b894:	03ee0000 	.word	0x03ee0000

0800b898 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800b898:	2a02      	cmp	r2, #2
{
 800b89a:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800b89c:	d00b      	beq.n	800b8b6 <USB_SetTurnaroundTime+0x1e>
 800b89e:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b8a2:	68d9      	ldr	r1, [r3, #12]
}
 800b8a4:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b8a6:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800b8aa:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	ea42 020c 	orr.w	r2, r2, ip
 800b8b2:	60da      	str	r2, [r3, #12]
}
 800b8b4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b8b6:	4a23      	ldr	r2, [pc, #140]	; (800b944 <USB_SetTurnaroundTime+0xac>)
 800b8b8:	4823      	ldr	r0, [pc, #140]	; (800b948 <USB_SetTurnaroundTime+0xb0>)
 800b8ba:	440a      	add	r2, r1
 800b8bc:	4282      	cmp	r2, r0
 800b8be:	d92c      	bls.n	800b91a <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8c0:	4a22      	ldr	r2, [pc, #136]	; (800b94c <USB_SetTurnaroundTime+0xb4>)
 800b8c2:	4823      	ldr	r0, [pc, #140]	; (800b950 <USB_SetTurnaroundTime+0xb8>)
 800b8c4:	440a      	add	r2, r1
 800b8c6:	4282      	cmp	r2, r0
 800b8c8:	d92a      	bls.n	800b920 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b8ca:	4a22      	ldr	r2, [pc, #136]	; (800b954 <USB_SetTurnaroundTime+0xbc>)
 800b8cc:	4822      	ldr	r0, [pc, #136]	; (800b958 <USB_SetTurnaroundTime+0xc0>)
 800b8ce:	440a      	add	r2, r1
 800b8d0:	4282      	cmp	r2, r0
 800b8d2:	d928      	bls.n	800b926 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b8d4:	4a21      	ldr	r2, [pc, #132]	; (800b95c <USB_SetTurnaroundTime+0xc4>)
 800b8d6:	4822      	ldr	r0, [pc, #136]	; (800b960 <USB_SetTurnaroundTime+0xc8>)
 800b8d8:	440a      	add	r2, r1
 800b8da:	4282      	cmp	r2, r0
 800b8dc:	d326      	bcc.n	800b92c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b8de:	4a21      	ldr	r2, [pc, #132]	; (800b964 <USB_SetTurnaroundTime+0xcc>)
 800b8e0:	4821      	ldr	r0, [pc, #132]	; (800b968 <USB_SetTurnaroundTime+0xd0>)
 800b8e2:	440a      	add	r2, r1
 800b8e4:	4282      	cmp	r2, r0
 800b8e6:	d924      	bls.n	800b932 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b8e8:	4a20      	ldr	r2, [pc, #128]	; (800b96c <USB_SetTurnaroundTime+0xd4>)
 800b8ea:	4821      	ldr	r0, [pc, #132]	; (800b970 <USB_SetTurnaroundTime+0xd8>)
 800b8ec:	440a      	add	r2, r1
 800b8ee:	4282      	cmp	r2, r0
 800b8f0:	d322      	bcc.n	800b938 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b8f2:	4a20      	ldr	r2, [pc, #128]	; (800b974 <USB_SetTurnaroundTime+0xdc>)
 800b8f4:	4820      	ldr	r0, [pc, #128]	; (800b978 <USB_SetTurnaroundTime+0xe0>)
 800b8f6:	440a      	add	r2, r1
 800b8f8:	4282      	cmp	r2, r0
 800b8fa:	d3d0      	bcc.n	800b89e <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b8fc:	4a1f      	ldr	r2, [pc, #124]	; (800b97c <USB_SetTurnaroundTime+0xe4>)
 800b8fe:	4820      	ldr	r0, [pc, #128]	; (800b980 <USB_SetTurnaroundTime+0xe8>)
 800b900:	440a      	add	r2, r1
 800b902:	4282      	cmp	r2, r0
 800b904:	d31b      	bcc.n	800b93e <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b906:	4a1f      	ldr	r2, [pc, #124]	; (800b984 <USB_SetTurnaroundTime+0xec>)
 800b908:	481f      	ldr	r0, [pc, #124]	; (800b988 <USB_SetTurnaroundTime+0xf0>)
 800b90a:	440a      	add	r2, r1
 800b90c:	4282      	cmp	r2, r0
 800b90e:	bf34      	ite	cc
 800b910:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800b914:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800b918:	e7c3      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b91a:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800b91e:	e7c0      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b920:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800b924:	e7bd      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b926:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800b92a:	e7ba      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b92c:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800b930:	e7b7      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b932:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800b936:	e7b4      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b938:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800b93c:	e7b1      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b93e:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800b942:	e7ae      	b.n	800b8a2 <USB_SetTurnaroundTime+0xa>
 800b944:	ff275340 	.word	0xff275340
 800b948:	000c34ff 	.word	0x000c34ff
 800b94c:	ff1b1e40 	.word	0xff1b1e40
 800b950:	000f423f 	.word	0x000f423f
 800b954:	ff0bdc00 	.word	0xff0bdc00
 800b958:	00124f7f 	.word	0x00124f7f
 800b95c:	fef98c80 	.word	0xfef98c80
 800b960:	0013d620 	.word	0x0013d620
 800b964:	fee5b660 	.word	0xfee5b660
 800b968:	0016e35f 	.word	0x0016e35f
 800b96c:	feced300 	.word	0xfeced300
 800b970:	001b7740 	.word	0x001b7740
 800b974:	feb35bc0 	.word	0xfeb35bc0
 800b978:	002191c0 	.word	0x002191c0
 800b97c:	fe91ca00 	.word	0xfe91ca00
 800b980:	00387520 	.word	0x00387520
 800b984:	fe5954e0 	.word	0xfe5954e0
 800b988:	00419ce0 	.word	0x00419ce0

0800b98c <USB_EnableGlobalInt>:
{
 800b98c:	4603      	mov	r3, r0
}
 800b98e:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	609a      	str	r2, [r3, #8]
}
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop

0800b99c <USB_DisableGlobalInt>:
{
 800b99c:	4603      	mov	r3, r0
}
 800b99e:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9a0:	689a      	ldr	r2, [r3, #8]
 800b9a2:	f022 0201 	bic.w	r2, r2, #1
 800b9a6:	609a      	str	r2, [r3, #8]
}
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop

0800b9ac <USB_SetCurrentMode>:
{
 800b9ac:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9ae:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b9b0:	2901      	cmp	r1, #1
{
 800b9b2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b9b8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b9ba:	d017      	beq.n	800b9ec <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800b9bc:	b9a1      	cbnz	r1, 800b9e8 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9be:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800b9c0:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9c6:	60c3      	str	r3, [r0, #12]
 800b9c8:	e001      	b.n	800b9ce <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b9ca:	2c32      	cmp	r4, #50	; 0x32
 800b9cc:	d00c      	beq.n	800b9e8 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800b9ce:	2001      	movs	r0, #1
      ms++;
 800b9d0:	4404      	add	r4, r0
      HAL_Delay(1U);
 800b9d2:	f7f8 fe09 	bl	80045e8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800b9d6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b9d8:	07db      	lsls	r3, r3, #31
 800b9da:	d4f6      	bmi.n	800b9ca <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800b9dc:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800b9e0:	fab0 f080 	clz	r0, r0
 800b9e4:	0940      	lsrs	r0, r0, #5
}
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b9e8:	2001      	movs	r0, #1
}
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9ec:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800b9ee:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9f4:	60c3      	str	r3, [r0, #12]
 800b9f6:	e001      	b.n	800b9fc <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b9f8:	2c32      	cmp	r4, #50	; 0x32
 800b9fa:	d0f5      	beq.n	800b9e8 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800b9fc:	2001      	movs	r0, #1
      ms++;
 800b9fe:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ba00:	f7f8 fdf2 	bl	80045e8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ba04:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba06:	07da      	lsls	r2, r3, #31
 800ba08:	d5f6      	bpl.n	800b9f8 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800ba0a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800ba0e:	fab0 f080 	clz	r0, r0
 800ba12:	0940      	lsrs	r0, r0, #5
 800ba14:	e7e7      	b.n	800b9e6 <USB_SetCurrentMode+0x3a>
 800ba16:	bf00      	nop

0800ba18 <USB_DevInit>:
{
 800ba18:	b084      	sub	sp, #16
 800ba1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	ac0b      	add	r4, sp, #44	; 0x2c
 800ba22:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800ba2a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800ba2e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800ba32:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800ba36:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800ba3a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800ba3e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800ba42:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800ba46:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800ba4a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800ba4e:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800ba52:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800ba56:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800ba5a:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800ba5e:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800ba62:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800ba66:	2c00      	cmp	r4, #0
 800ba68:	f040 80a8 	bne.w	800bbbc <USB_DevInit+0x1a4>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba6c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ba70:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800ba74:	f043 0302 	orr.w	r3, r3, #2
 800ba78:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba82:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba84:	6803      	ldr	r3, [r0, #0]
 800ba86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8a:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba8c:	6803      	ldr	r3, [r0, #0]
 800ba8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba92:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ba9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba9e:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800baa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	f000 80b0 	beq.w	800bc0a <USB_DevInit+0x1f2>
  USBx_DEVICE->DCFG |= speed;
 800baaa:	f8dc 3000 	ldr.w	r3, [ip]
 800baae:	f043 0303 	orr.w	r3, r3, #3
 800bab2:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800bab6:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bab8:	4a5c      	ldr	r2, [pc, #368]	; (800bc2c <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	e003      	b.n	800bac6 <USB_DevInit+0xae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800babe:	6903      	ldr	r3, [r0, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f2c0 8091 	blt.w	800bbe8 <USB_DevInit+0x1d0>
    if (++count > 200000U)
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	3301      	adds	r3, #1
 800baca:	4293      	cmp	r3, r2
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	d9f6      	bls.n	800babe <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 800bad0:	f04f 0e01 	mov.w	lr, #1
  __IO uint32_t count = 0U;
 800bad4:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bad6:	4a55      	ldr	r2, [pc, #340]	; (800bc2c <USB_DevInit+0x214>)
  __IO uint32_t count = 0U;
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	e002      	b.n	800bae2 <USB_DevInit+0xca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800badc:	6903      	ldr	r3, [r0, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	db73      	blt.n	800bbca <USB_DevInit+0x1b2>
    if (++count > 200000U)
 800bae2:	9b01      	ldr	r3, [sp, #4]
 800bae4:	3301      	adds	r3, #1
 800bae6:	4293      	cmp	r3, r2
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	d9f7      	bls.n	800badc <USB_DevInit+0xc4>
    ret = HAL_ERROR;
 800baec:	f04f 0e01 	mov.w	lr, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800baf6:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bafa:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bafe:	b1d1      	cbz	r1, 800bb36 <USB_DevInit+0x11e>
 800bb00:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb04:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb08:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb0c:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb0e:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800bb12:	e006      	b.n	800bb22 <USB_DevInit+0x10a>
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb14:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb16:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb18:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb1a:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb1c:	3320      	adds	r3, #32
 800bb1e:	4291      	cmp	r1, r2
 800bb20:	d030      	beq.n	800bb84 <USB_DevInit+0x16c>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb22:	681d      	ldr	r5, [r3, #0]
 800bb24:	2d00      	cmp	r5, #0
 800bb26:	daf5      	bge.n	800bb14 <USB_DevInit+0xfc>
      if (i == 0U)
 800bb28:	b112      	cbz	r2, 800bb30 <USB_DevInit+0x118>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb2a:	f8c3 8000 	str.w	r8, [r3]
 800bb2e:	e7f2      	b.n	800bb16 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb30:	f8c3 9000 	str.w	r9, [r3]
 800bb34:	e7ef      	b.n	800bb16 <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb36:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800bb3a:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb40:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb44:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800bb48:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb4a:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800bb4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb4e:	b91b      	cbnz	r3, 800bb58 <USB_DevInit+0x140>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb50:	6983      	ldr	r3, [r0, #24]
 800bb52:	f043 0310 	orr.w	r3, r3, #16
 800bb56:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb58:	6982      	ldr	r2, [r0, #24]
 800bb5a:	4b35      	ldr	r3, [pc, #212]	; (800bc30 <USB_DevInit+0x218>)
 800bb5c:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800bb5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb60:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800bb62:	b11a      	cbz	r2, 800bb6c <USB_DevInit+0x154>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb64:	6983      	ldr	r3, [r0, #24]
 800bb66:	f043 0308 	orr.w	r3, r3, #8
 800bb6a:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800bb6c:	2c01      	cmp	r4, #1
 800bb6e:	d103      	bne.n	800bb78 <USB_DevInit+0x160>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb70:	6982      	ldr	r2, [r0, #24]
 800bb72:	4b30      	ldr	r3, [pc, #192]	; (800bc34 <USB_DevInit+0x21c>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	6183      	str	r3, [r0, #24]
}
 800bb78:	4670      	mov	r0, lr
 800bb7a:	b003      	add	sp, #12
 800bb7c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb80:	b004      	add	sp, #16
 800bb82:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb84:	2200      	movs	r2, #0
 800bb86:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb8a:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb8e:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb92:	4616      	mov	r6, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb94:	f64f 377f 	movw	r7, #64383	; 0xfb7f
 800bb98:	e006      	b.n	800bba8 <USB_DevInit+0x190>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb9a:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb9c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb9e:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bba0:	609f      	str	r7, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bba2:	3320      	adds	r3, #32
 800bba4:	4291      	cmp	r1, r2
 800bba6:	d0c6      	beq.n	800bb36 <USB_DevInit+0x11e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bba8:	681d      	ldr	r5, [r3, #0]
 800bbaa:	2d00      	cmp	r5, #0
 800bbac:	daf5      	bge.n	800bb9a <USB_DevInit+0x182>
      if (i == 0U)
 800bbae:	b112      	cbz	r2, 800bbb6 <USB_DevInit+0x19e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bbb0:	f8c3 8000 	str.w	r8, [r3]
 800bbb4:	e7f2      	b.n	800bb9c <USB_DevInit+0x184>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bbb6:	f8c3 9000 	str.w	r9, [r3]
 800bbba:	e7ef      	b.n	800bb9c <USB_DevInit+0x184>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbbe:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbc6:	6383      	str	r3, [r0, #56]	; 0x38
 800bbc8:	e764      	b.n	800ba94 <USB_DevInit+0x7c>
  count = 0U;
 800bbca:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bbcc:	4a17      	ldr	r2, [pc, #92]	; (800bc2c <USB_DevInit+0x214>)
  count = 0U;
 800bbce:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	6103      	str	r3, [r0, #16]
 800bbd4:	e002      	b.n	800bbdc <USB_DevInit+0x1c4>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bbd6:	6903      	ldr	r3, [r0, #16]
 800bbd8:	06db      	lsls	r3, r3, #27
 800bbda:	d589      	bpl.n	800baf0 <USB_DevInit+0xd8>
    if (++count > 200000U)
 800bbdc:	9b01      	ldr	r3, [sp, #4]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	d9f7      	bls.n	800bbd6 <USB_DevInit+0x1be>
 800bbe6:	e781      	b.n	800baec <USB_DevInit+0xd4>
  count = 0U;
 800bbe8:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bbea:	4a10      	ldr	r2, [pc, #64]	; (800bc2c <USB_DevInit+0x214>)
  count = 0U;
 800bbec:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbee:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800bbf2:	6103      	str	r3, [r0, #16]
 800bbf4:	e003      	b.n	800bbfe <USB_DevInit+0x1e6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbf6:	6903      	ldr	r3, [r0, #16]
 800bbf8:	f013 0320 	ands.w	r3, r3, #32
 800bbfc:	d00c      	beq.n	800bc18 <USB_DevInit+0x200>
    if (++count > 200000U)
 800bbfe:	9b00      	ldr	r3, [sp, #0]
 800bc00:	3301      	adds	r3, #1
 800bc02:	4293      	cmp	r3, r2
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	d9f6      	bls.n	800bbf6 <USB_DevInit+0x1de>
 800bc08:	e762      	b.n	800bad0 <USB_DevInit+0xb8>
    if (cfg.speed == USBD_HS_SPEED)
 800bc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc0c:	b933      	cbnz	r3, 800bc1c <USB_DevInit+0x204>
  USBx_DEVICE->DCFG |= speed;
 800bc0e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc12:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800bc16:	e74e      	b.n	800bab6 <USB_DevInit+0x9e>
  HAL_StatusTypeDef ret = HAL_OK;
 800bc18:	469e      	mov	lr, r3
 800bc1a:	e75b      	b.n	800bad4 <USB_DevInit+0xbc>
  USBx_DEVICE->DCFG |= speed;
 800bc1c:	f8dc 3000 	ldr.w	r3, [ip]
 800bc20:	f043 0301 	orr.w	r3, r3, #1
 800bc24:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800bc28:	e745      	b.n	800bab6 <USB_DevInit+0x9e>
 800bc2a:	bf00      	nop
 800bc2c:	00030d40 	.word	0x00030d40
 800bc30:	803c3800 	.word	0x803c3800
 800bc34:	40000004 	.word	0x40000004

0800bc38 <USB_FlushTxFifo>:
{
 800bc38:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800bc3a:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bc3c:	4a11      	ldr	r2, [pc, #68]	; (800bc84 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	e002      	b.n	800bc48 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc42:	6903      	ldr	r3, [r0, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	db07      	blt.n	800bc58 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 800bc48:	9b01      	ldr	r3, [sp, #4]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	d9f7      	bls.n	800bc42 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800bc52:	2003      	movs	r0, #3
}
 800bc54:	b002      	add	sp, #8
 800bc56:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc58:	0189      	lsls	r1, r1, #6
  count = 0U;
 800bc5a:	2300      	movs	r3, #0
    if (++count > 200000U)
 800bc5c:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc5e:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800bc62:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc64:	6101      	str	r1, [r0, #16]
 800bc66:	e003      	b.n	800bc70 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc68:	6903      	ldr	r3, [r0, #16]
 800bc6a:	f013 0320 	ands.w	r3, r3, #32
 800bc6e:	d005      	beq.n	800bc7c <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	3301      	adds	r3, #1
 800bc74:	4293      	cmp	r3, r2
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	d9f6      	bls.n	800bc68 <USB_FlushTxFifo+0x30>
 800bc7a:	e7ea      	b.n	800bc52 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 800bc7c:	4618      	mov	r0, r3
}
 800bc7e:	b002      	add	sp, #8
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	00030d40 	.word	0x00030d40

0800bc88 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc88:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc8c:	f013 0006 	ands.w	r0, r3, #6
 800bc90:	d004      	beq.n	800bc9c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800bc92:	f013 0f02 	tst.w	r3, #2
 800bc96:	bf14      	ite	ne
 800bc98:	2002      	movne	r0, #2
 800bc9a:	200f      	moveq	r0, #15
}
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop

0800bca0 <USB_ActivateEndpoint>:
{
 800bca0:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800bca2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bca4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d020      	beq.n	800bcec <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bcaa:	f002 0c0f 	and.w	ip, r2, #15
 800bcae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bcb2:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bcb6:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bcba:	fa03 f30c 	lsl.w	r3, r3, ip
 800bcbe:	4323      	orrs	r3, r4
 800bcc0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bcc4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800bcc8:	041b      	lsls	r3, r3, #16
 800bcca:	d40c      	bmi.n	800bce6 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bccc:	688b      	ldr	r3, [r1, #8]
 800bcce:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800bcd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bcd6:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcd8:	4914      	ldr	r1, [pc, #80]	; (800bd2c <USB_ActivateEndpoint+0x8c>)
 800bcda:	4323      	orrs	r3, r4
 800bcdc:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800bce0:	4319      	orrs	r1, r3
 800bce2:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800bce6:	2000      	movs	r0, #0
 800bce8:	bc30      	pop	{r4, r5}
 800bcea:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bcec:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800bcf0:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bcf4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bcf8:	40ab      	lsls	r3, r5
 800bcfa:	69e5      	ldr	r5, [r4, #28]
 800bcfc:	432b      	orrs	r3, r5
 800bcfe:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd00:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800bd04:	041c      	lsls	r4, r3, #16
 800bd06:	d4ee      	bmi.n	800bce6 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd08:	688b      	ldr	r3, [r1, #8]
 800bd0a:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800bd0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd12:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd14:	4905      	ldr	r1, [pc, #20]	; (800bd2c <USB_ActivateEndpoint+0x8c>)
 800bd16:	432b      	orrs	r3, r5
 800bd18:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800bd1c:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800bd20:	4311      	orrs	r1, r2
}
 800bd22:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd24:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800bd28:	2000      	movs	r0, #0
 800bd2a:	4770      	bx	lr
 800bd2c:	10008000 	.word	0x10008000

0800bd30 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800bd30:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bd32:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800bd34:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd36:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800bd3a:	d02a      	beq.n	800bd92 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd3c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	db19      	blt.n	800bd78 <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800bd50:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd54:	4a23      	ldr	r2, [pc, #140]	; (800bde4 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd56:	ea21 0103 	bic.w	r1, r1, r3
 800bd5a:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd5e:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800bd62:	ea21 0303 	bic.w	r3, r1, r3
 800bd66:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800bd6a:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd6c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800bd70:	401a      	ands	r2, r3
 800bd72:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800bd76:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd78:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800bd7c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bd80:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bd84:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800bd88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bd8c:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800bd90:	e7d8      	b.n	800bd44 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd92:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800bd96:	2a00      	cmp	r2, #0
 800bd98:	da0b      	bge.n	800bdb2 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd9a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800bd9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800bda2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bda6:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800bdaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bdae:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bdb2:	f003 020f 	and.w	r2, r3, #15
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800bdbc:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bdbe:	4a0a      	ldr	r2, [pc, #40]	; (800bde8 <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bdc0:	ea21 0103 	bic.w	r1, r1, r3
 800bdc4:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bdc8:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800bdcc:	ea21 0303 	bic.w	r3, r1, r3
 800bdd0:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800bdd4:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bdd6:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800bdda:	401a      	ands	r2, r3
 800bddc:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	eff37800 	.word	0xeff37800
 800bde8:	ec337800 	.word	0xec337800

0800bdec <USB_EPStartXfer>:
{
 800bdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800bdf0:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800bdf2:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d051      	beq.n	800be9e <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bdfa:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 800bdfe:	4c84      	ldr	r4, [pc, #528]	; (800c010 <USB_EPStartXfer+0x224>)
 800be00:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 800be04:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 800be08:	402c      	ands	r4, r5
 800be0a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be0c:	4c81      	ldr	r4, [pc, #516]	; (800c014 <USB_EPStartXfer+0x228>)
 800be0e:	691d      	ldr	r5, [r3, #16]
 800be10:	402c      	ands	r4, r5
 800be12:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 800be14:	694c      	ldr	r4, [r1, #20]
 800be16:	b384      	cbz	r4, 800be7a <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be18:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800be1a:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be1c:	4e7e      	ldr	r6, [pc, #504]	; (800c018 <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be1e:	442c      	add	r4, r5
 800be20:	f104 34ff 	add.w	r4, r4, #4294967295
 800be24:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be28:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 800be2c:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800be2e:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be32:	691d      	ldr	r5, [r3, #16]
 800be34:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800be38:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be3c:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800be3e:	691d      	ldr	r5, [r3, #16]
 800be40:	ea44 0405 	orr.w	r4, r4, r5
 800be44:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800be46:	d025      	beq.n	800be94 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 800be48:	78cb      	ldrb	r3, [r1, #3]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d10c      	bne.n	800be68 <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be4e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800be52:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800be56:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800be5a:	bf0c      	ite	eq
 800be5c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800be60:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800be64:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be68:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800be6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be70:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 800be74:	2000      	movs	r0, #0
 800be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800be7a:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 800be7c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800be7e:	691d      	ldr	r5, [r3, #16]
 800be80:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800be84:	ea44 0405 	orr.w	r4, r4, r5
 800be88:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be8a:	691c      	ldr	r4, [r3, #16]
 800be8c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800be90:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800be92:	d1d9      	bne.n	800be48 <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800be94:	68ca      	ldr	r2, [r1, #12]
 800be96:	2a00      	cmp	r2, #0
 800be98:	d0d6      	beq.n	800be48 <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be9a:	615a      	str	r2, [r3, #20]
 800be9c:	e7d4      	b.n	800be48 <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 800be9e:	694d      	ldr	r5, [r1, #20]
 800bea0:	2d00      	cmp	r5, #0
 800bea2:	d03d      	beq.n	800bf20 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bea4:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 800bea8:	4e59      	ldr	r6, [pc, #356]	; (800c010 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800beaa:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800beae:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800beb2:	4f58      	ldr	r7, [pc, #352]	; (800c014 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800beb4:	ea08 0606 	and.w	r6, r8, r6
 800beb8:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bebc:	eb05 060e 	add.w	r6, r5, lr
 800bec0:	3e01      	subs	r6, #1
 800bec2:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bec6:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800beca:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800becc:	4e52      	ldr	r6, [pc, #328]	; (800c018 <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bece:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bed2:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 800bed6:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800beda:	433e      	orrs	r6, r7
 800bedc:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bee0:	f3c5 0612 	ubfx	r6, r5, #0, #19
 800bee4:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 800bee8:	433e      	orrs	r6, r7
 800beea:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800beee:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800bef2:	f891 e003 	ldrb.w	lr, [r1, #3]
 800bef6:	f1be 0f01 	cmp.w	lr, #1
 800befa:	d057      	beq.n	800bfac <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 800befc:	2a01      	cmp	r2, #1
 800befe:	d072      	beq.n	800bfe6 <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf00:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf04:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf08:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf0c:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf10:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf14:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 800bf1e:	e7a9      	b.n	800be74 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf20:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 800bf24:	4e3b      	ldr	r6, [pc, #236]	; (800c014 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf26:	4c3a      	ldr	r4, [pc, #232]	; (800c010 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 800bf28:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf2a:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 800bf2e:	ea06 0607 	and.w	r6, r6, r7
 800bf32:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf36:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800bf3a:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800bf3e:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf42:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 800bf46:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf4a:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf4e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 800bf52:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 800bf56:	d03a      	beq.n	800bfce <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf58:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bf5c:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf60:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800bf64:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bf68:	d184      	bne.n	800be74 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf6a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800bf6e:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf72:	6833      	ldr	r3, [r6, #0]
 800bf74:	bf0c      	ite	eq
 800bf76:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf7a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800bf7e:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 800bf80:	2a00      	cmp	r2, #0
 800bf82:	f47f af77 	bne.w	800be74 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf86:	b2ad      	uxth	r5, r5
 800bf88:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 800bf8a:	08ad      	lsrs	r5, r5, #2
 800bf8c:	f43f af72 	beq.w	800be74 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bf90:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf92:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 800bf96:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 800bf9a:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 800bf9e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800bfa2:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bfa4:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 800bfa8:	d1f9      	bne.n	800bf9e <USB_EPStartXfer+0x1b2>
 800bfaa:	e763      	b.n	800be74 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bfac:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 800bfae:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bfb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bfb4:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bfb6:	6933      	ldr	r3, [r6, #16]
 800bfb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfbc:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 800bfbe:	d017      	beq.n	800bff0 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfc0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800bfc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfc8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800bfcc:	e7cd      	b.n	800bf6a <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 800bfce:	690b      	ldr	r3, [r1, #16]
 800bfd0:	b963      	cbnz	r3, 800bfec <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 800bfd2:	f1be 0f01 	cmp.w	lr, #1
 800bfd6:	d00e      	beq.n	800bff6 <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfd8:	6833      	ldr	r3, [r6, #0]
}
 800bfda:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfe0:	6033      	str	r3, [r6, #0]
}
 800bfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800bfe6:	690b      	ldr	r3, [r1, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d0f5      	beq.n	800bfd8 <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bfec:	6173      	str	r3, [r6, #20]
 800bfee:	e7f0      	b.n	800bfd2 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 800bff0:	690b      	ldr	r3, [r1, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1fa      	bne.n	800bfec <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bff6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800bffa:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bffe:	6833      	ldr	r3, [r6, #0]
 800c000:	bf0c      	ite	eq
 800c002:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c006:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800c00a:	6033      	str	r3, [r6, #0]
 800c00c:	e7e4      	b.n	800bfd8 <USB_EPStartXfer+0x1ec>
 800c00e:	bf00      	nop
 800c010:	fff80000 	.word	0xfff80000
 800c014:	e007ffff 	.word	0xe007ffff
 800c018:	1ff80000 	.word	0x1ff80000

0800c01c <USB_EP0StartXfer>:
{
 800c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800c01e:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800c020:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800c022:	2c01      	cmp	r4, #1
 800c024:	d026      	beq.n	800c074 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c026:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800c02a:	4c57      	ldr	r4, [pc, #348]	; (800c188 <USB_EP0StartXfer+0x16c>)
 800c02c:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 800c030:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800c034:	402c      	ands	r4, r5
 800c036:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c038:	4c54      	ldr	r4, [pc, #336]	; (800c18c <USB_EP0StartXfer+0x170>)
 800c03a:	691d      	ldr	r5, [r3, #16]
 800c03c:	402c      	ands	r4, r5
 800c03e:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800c040:	694c      	ldr	r4, [r1, #20]
 800c042:	b9a4      	cbnz	r4, 800c06e <USB_EP0StartXfer+0x52>
      if (ep->xfer_len > ep->maxpacket)
 800c044:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c046:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c048:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800c04c:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c04e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800c052:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c054:	691d      	ldr	r5, [r3, #16]
 800c056:	ea44 0405 	orr.w	r4, r4, r5
 800c05a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800c05c:	d049      	beq.n	800c0f2 <USB_EP0StartXfer+0xd6>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c05e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c066:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800c06a:	2000      	movs	r0, #0
 800c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ep->xfer_len = ep->maxpacket;
 800c06e:	688c      	ldr	r4, [r1, #8]
 800c070:	614c      	str	r4, [r1, #20]
 800c072:	e7e8      	b.n	800c046 <USB_EP0StartXfer+0x2a>
    if (ep->xfer_len == 0U)
 800c074:	694c      	ldr	r4, [r1, #20]
 800c076:	2c00      	cmp	r4, #0
 800c078:	d040      	beq.n	800c0fc <USB_EP0StartXfer+0xe0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c07a:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 800c07e:	4f42      	ldr	r7, [pc, #264]	; (800c188 <USB_EP0StartXfer+0x16c>)
      if (ep->xfer_len > ep->maxpacket)
 800c080:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c084:	f8d5 c910 	ldr.w	ip, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c088:	4e40      	ldr	r6, [pc, #256]	; (800c18c <USB_EP0StartXfer+0x170>)
      if (ep->xfer_len > ep->maxpacket)
 800c08a:	4574      	cmp	r4, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c08c:	ea0c 0707 	and.w	r7, ip, r7
 800c090:	f505 6c10 	add.w	ip, r5, #2304	; 0x900
 800c094:	f8c5 7910 	str.w	r7, [r5, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c098:	f8d5 7910 	ldr.w	r7, [r5, #2320]	; 0x910
 800c09c:	ea06 0607 	and.w	r6, r6, r7
 800c0a0:	f8c5 6910 	str.w	r6, [r5, #2320]	; 0x910
      if (ep->xfer_len > ep->maxpacket)
 800c0a4:	d958      	bls.n	800c158 <USB_EP0StartXfer+0x13c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0a6:	f8dc 4010 	ldr.w	r4, [ip, #16]
    if (dma == 1U)
 800c0aa:	2a01      	cmp	r2, #1
        ep->xfer_len = ep->maxpacket;
 800c0ac:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0b0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800c0b4:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0b8:	f3ce 0412 	ubfx	r4, lr, #0, #19
 800c0bc:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800c0c0:	ea44 0406 	orr.w	r4, r4, r6
 800c0c4:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800c0c8:	d03a      	beq.n	800c140 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0ca:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800c0ce:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800c0d2:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800c0d6:	f1be 0f00 	cmp.w	lr, #0
 800c0da:	d0c6      	beq.n	800c06a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c0dc:	f003 010f 	and.w	r1, r3, #15
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800c0e6:	408b      	lsls	r3, r1
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0f2:	68ca      	ldr	r2, [r1, #12]
 800c0f4:	2a00      	cmp	r2, #0
 800c0f6:	d0b2      	beq.n	800c05e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c0f8:	615a      	str	r2, [r3, #20]
 800c0fa:	e7b0      	b.n	800c05e <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800c100:	4b22      	ldr	r3, [pc, #136]	; (800c18c <USB_EP0StartXfer+0x170>)
    if (dma == 1U)
 800c102:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c104:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
 800c108:	f500 6c10 	add.w	ip, r0, #2304	; 0x900
 800c10c:	ea03 0304 	and.w	r3, r3, r4
 800c110:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c114:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800c118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c11c:	f8cc 3010 	str.w	r3, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c120:	4b19      	ldr	r3, [pc, #100]	; (800c188 <USB_EP0StartXfer+0x16c>)
 800c122:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800c126:	ea03 0304 	and.w	r3, r3, r4
 800c12a:	f8cc 3010 	str.w	r3, [ip, #16]
    if (dma == 1U)
 800c12e:	d007      	beq.n	800c140 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c130:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c138:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c13c:	2000      	movs	r0, #0
 800c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800c140:	690b      	ldr	r3, [r1, #16]
 800c142:	b10b      	cbz	r3, 800c148 <USB_EP0StartXfer+0x12c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c144:	f8cc 3014 	str.w	r3, [ip, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c148:	f8dc 3000 	ldr.w	r3, [ip]
}
 800c14c:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c14e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c152:	f8cc 3000 	str.w	r3, [ip]
}
 800c156:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c158:	f8dc 6010 	ldr.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c15c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800c160:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c162:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800c166:	f8cc 6010 	str.w	r6, [ip, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c16a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800c16e:	ea44 0406 	orr.w	r4, r4, r6
 800c172:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800c176:	d0e3      	beq.n	800c140 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c178:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800c17c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800c180:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800c184:	e7aa      	b.n	800c0dc <USB_EP0StartXfer+0xc0>
 800c186:	bf00      	nop
 800c188:	fff80000 	.word	0xfff80000
 800c18c:	e007ffff 	.word	0xe007ffff

0800c190 <USB_WritePacket>:
{
 800c190:	b410      	push	{r4}
 800c192:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800c196:	b964      	cbnz	r4, 800c1b2 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800c198:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800c19a:	089b      	lsrs	r3, r3, #2
 800c19c:	d009      	beq.n	800c1b2 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c19e:	3201      	adds	r2, #1
 800c1a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c1a4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800c1a8:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800c1ac:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c1ae:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800c1b0:	d1fa      	bne.n	800c1a8 <USB_WritePacket+0x18>
}
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop

0800c1bc <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800c1bc:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800c1c0:	b570      	push	{r4, r5, r6, lr}
 800c1c2:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800c1c4:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800c1c8:	d01c      	beq.n	800c204 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c1ca:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800c1ce:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c1d4:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800c1d8:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c1da:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800c1de:	d1f8      	bne.n	800c1d2 <USB_ReadPacket+0x16>
    pDest++;
 800c1e0:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800c1e4:	b16e      	cbz	r6, 800c202 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c1e6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800c1ea:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c1ec:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800c1ee:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c1f0:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800c1f2:	b12b      	cbz	r3, 800c200 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c1f4:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800c1f6:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c1f8:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800c1fa:	d001      	beq.n	800c200 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c1fc:	0c12      	lsrs	r2, r2, #16
 800c1fe:	7082      	strb	r2, [r0, #2]
      pDest++;
 800c200:	4430      	add	r0, r6
}
 800c202:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800c204:	4608      	mov	r0, r1
 800c206:	e7ed      	b.n	800c1e4 <USB_ReadPacket+0x28>

0800c208 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800c208:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800c20a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800c20c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c20e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800c212:	d00c      	beq.n	800c22e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c214:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800c218:	b10b      	cbz	r3, 800c21e <USB_EPSetStall+0x16>
 800c21a:	2a00      	cmp	r2, #0
 800c21c:	da14      	bge.n	800c248 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c21e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c226:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800c22a:	2000      	movs	r0, #0
 800c22c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c22e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800c232:	2a00      	cmp	r2, #0
 800c234:	db00      	blt.n	800c238 <USB_EPSetStall+0x30>
 800c236:	b973      	cbnz	r3, 800c256 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c238:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c23c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c240:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c244:	2000      	movs	r0, #0
 800c246:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c248:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c24c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c250:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800c254:	e7e3      	b.n	800c21e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c256:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c25a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c25e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c262:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c26a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800c26e:	e7e9      	b.n	800c244 <USB_EPSetStall+0x3c>

0800c270 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800c270:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800c272:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800c274:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c276:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800c27a:	d013      	beq.n	800c2a4 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c27c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c284:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c288:	78cb      	ldrb	r3, [r1, #3]
 800c28a:	3b02      	subs	r3, #2
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d901      	bls.n	800c294 <USB_EPClearStall+0x24>
}
 800c290:	2000      	movs	r0, #0
 800c292:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c294:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c29c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c2a4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c2a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2ac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c2b0:	78cb      	ldrb	r3, [r1, #3]
 800c2b2:	3b02      	subs	r3, #2
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d8eb      	bhi.n	800c290 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c2b8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800c2bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	4770      	bx	lr

0800c2c8 <USB_SetDevAddress>:
{
 800c2c8:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c2ca:	0109      	lsls	r1, r1, #4
}
 800c2cc:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c2ce:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c2d2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c2d6:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800c2da:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c2de:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800c2e2:	4311      	orrs	r1, r2
 800c2e4:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop

0800c2ec <USB_DevConnect>:
{
 800c2ec:	4603      	mov	r3, r0
}
 800c2ee:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2f0:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c2f4:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2f8:	f022 0203 	bic.w	r2, r2, #3
 800c2fc:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c300:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c304:	f023 0302 	bic.w	r3, r3, #2
 800c308:	604b      	str	r3, [r1, #4]
}
 800c30a:	4770      	bx	lr

0800c30c <USB_DevDisconnect>:
{
 800c30c:	4603      	mov	r3, r0
}
 800c30e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c310:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c314:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c318:	f022 0203 	bic.w	r2, r2, #3
 800c31c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c320:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c324:	f043 0302 	orr.w	r3, r3, #2
 800c328:	604b      	str	r3, [r1, #4]
}
 800c32a:	4770      	bx	lr

0800c32c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800c32c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800c32e:	6980      	ldr	r0, [r0, #24]
}
 800c330:	4010      	ands	r0, r2
 800c332:	4770      	bx	lr

0800c334 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800c334:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c338:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800c33c:	4018      	ands	r0, r3
}
 800c33e:	0c00      	lsrs	r0, r0, #16
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop

0800c344 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800c344:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c348:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800c34c:	4018      	ands	r0, r3
}
 800c34e:	b280      	uxth	r0, r0
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop

0800c354 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c354:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c358:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c35c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c360:	6940      	ldr	r0, [r0, #20]
}
 800c362:	4010      	ands	r0, r2
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop

0800c368 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800c368:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c36c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c370:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c374:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c378:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c37c:	40cb      	lsrs	r3, r1
 800c37e:	01db      	lsls	r3, r3, #7
 800c380:	b2db      	uxtb	r3, r3
 800c382:	4313      	orrs	r3, r2
}
 800c384:	4018      	ands	r0, r3
 800c386:	4770      	bx	lr

0800c388 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800c388:	6940      	ldr	r0, [r0, #20]
}
 800c38a:	f000 0001 	and.w	r0, r0, #1
 800c38e:	4770      	bx	lr

0800c390 <USB_ActivateSetup>:
{
 800c390:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c392:	4a09      	ldr	r2, [pc, #36]	; (800c3b8 <USB_ActivateSetup+0x28>)
}
 800c394:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c396:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800c39a:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c39c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800c3a0:	4022      	ands	r2, r4
}
 800c3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c3a6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c3aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800c3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3b2:	604b      	str	r3, [r1, #4]
}
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	fffff800 	.word	0xfffff800

0800c3bc <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c3bc:	4b14      	ldr	r3, [pc, #80]	; (800c410 <USB_EP0_OutStart+0x54>)
{
 800c3be:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3c0:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c3c2:	429c      	cmp	r4, r3
 800c3c4:	d81a      	bhi.n	800c3fc <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3c6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c3ca:	2300      	movs	r3, #0
  if (dma == 1U)
 800c3cc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c3ce:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3d0:	6903      	ldr	r3, [r0, #16]
 800c3d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3d6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c3d8:	6903      	ldr	r3, [r0, #16]
 800c3da:	f043 0318 	orr.w	r3, r3, #24
 800c3de:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c3e0:	6903      	ldr	r3, [r0, #16]
 800c3e2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c3e6:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800c3e8:	d104      	bne.n	800c3f4 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c3ea:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c3ec:	6803      	ldr	r3, [r0, #0]
 800c3ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c3f2:	6003      	str	r3, [r0, #0]
}
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3fa:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3fc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800c400:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800c404:	2b00      	cmp	r3, #0
 800c406:	dae0      	bge.n	800c3ca <USB_EP0_OutStart+0xe>
}
 800c408:	2000      	movs	r0, #0
 800c40a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	4f54300a 	.word	0x4f54300a

0800c414 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c414:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c416:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c41a:	b194      	cbz	r4, 800c442 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c41c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c420:	b16b      	cbz	r3, 800c43e <USBD_CDC_EP0_RxReady+0x2a>
 800c422:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c426:	28ff      	cmp	r0, #255	; 0xff
 800c428:	d009      	beq.n	800c43e <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	4621      	mov	r1, r4
 800c42e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c432:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800c434:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800c436:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800c438:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800c43c:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800c43e:	2000      	movs	r0, #0
}
 800c440:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c442:	2003      	movs	r0, #3
}
 800c444:	bd10      	pop	{r4, pc}
 800c446:	bf00      	nop

0800c448 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c448:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c44a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c44e:	801a      	strh	r2, [r3, #0]
}
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	24000354 	.word	0x24000354

0800c458 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c458:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c45a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800c45c:	4801      	ldr	r0, [pc, #4]	; (800c464 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c45e:	801a      	strh	r2, [r3, #0]
}
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	24000398 	.word	0x24000398

0800c468 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c468:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c46a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c46c:	4801      	ldr	r0, [pc, #4]	; (800c474 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c46e:	801a      	strh	r2, [r3, #0]
}
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	240003e8 	.word	0x240003e8

0800c478 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c478:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c47a:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800c47c:	4801      	ldr	r0, [pc, #4]	; (800c484 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c47e:	801a      	strh	r2, [r3, #0]
}
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	240003dc 	.word	0x240003dc

0800c488 <USBD_CDC_DataOut>:
{
 800c488:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c48a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800c48e:	b17d      	cbz	r5, 800c4b0 <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c490:	4604      	mov	r4, r0
 800c492:	f001 f91d 	bl	800d6d0 <USBD_LL_GetRxDataSize>
 800c496:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c498:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c49c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c4a0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c4a4:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c4a6:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c4aa:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c4ac:	2000      	movs	r0, #0
}
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800c4b0:	2003      	movs	r0, #3
}
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}

0800c4b4 <USBD_CDC_DataIn>:
{
 800c4b4:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 800c4b6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 800c4ba:	b36d      	cbz	r5, 800c518 <USBD_CDC_DataIn+0x64>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c4bc:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 800c4c0:	4684      	mov	ip, r0
 800c4c2:	460a      	mov	r2, r1
 800c4c4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c4c8:	f8de 3018 	ldr.w	r3, [lr, #24]
 800c4cc:	b96b      	cbnz	r3, 800c4ea <USBD_CDC_DataIn+0x36>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c4ce:	f8dc 32c0 	ldr.w	r3, [ip, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800c4d2:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c4d4:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800c4d6:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c4da:	b1db      	cbz	r3, 800c514 <USBD_CDC_DataIn+0x60>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4dc:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800c4e0:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800c4e4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800c4e6:	4620      	mov	r0, r4
}
 800c4e8:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c4ea:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 800c4ee:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800c4f2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800c4f6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800c4f8:	fbb3 f6f4 	udiv	r6, r3, r4
 800c4fc:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c500:	2c00      	cmp	r4, #0
 800c502:	d1e4      	bne.n	800c4ce <USBD_CDC_DataIn+0x1a>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c504:	4623      	mov	r3, r4
 800c506:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800c508:	f8ce 4018 	str.w	r4, [lr, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c50c:	f001 f8c4 	bl	800d698 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800c510:	4620      	mov	r0, r4
}
 800c512:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800c514:	4618      	mov	r0, r3
}
 800c516:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800c518:	2003      	movs	r0, #3
}
 800c51a:	bd70      	pop	{r4, r5, r6, pc}

0800c51c <USBD_CDC_Setup>:
{
 800c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t ifalt = 0U;
 800c51e:	2300      	movs	r3, #0
{
 800c520:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c522:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800c526:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800c52a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800c52e:	2d00      	cmp	r5, #0
 800c530:	d067      	beq.n	800c602 <USBD_CDC_Setup+0xe6>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c532:	f891 c000 	ldrb.w	ip, [r1]
 800c536:	4606      	mov	r6, r0
 800c538:	460c      	mov	r4, r1
 800c53a:	f01c 0760 	ands.w	r7, ip, #96	; 0x60
 800c53e:	d01e      	beq.n	800c57e <USBD_CDC_Setup+0x62>
 800c540:	2f20      	cmp	r7, #32
 800c542:	d007      	beq.n	800c554 <USBD_CDC_Setup+0x38>
          USBD_CtlError(pdev, req);
 800c544:	4621      	mov	r1, r4
 800c546:	4630      	mov	r0, r6
          ret = USBD_FAIL;
 800c548:	2703      	movs	r7, #3
          USBD_CtlError(pdev, req);
 800c54a:	f000 fd45 	bl	800cfd8 <USBD_CtlError>
}
 800c54e:	4638      	mov	r0, r7
 800c550:	b003      	add	sp, #12
 800c552:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800c554:	88ca      	ldrh	r2, [r1, #6]
 800c556:	b38a      	cbz	r2, 800c5bc <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800c558:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c55c:	d055      	beq.n	800c60a <USBD_CDC_Setup+0xee>
  USBD_StatusTypeDef ret = USBD_OK;
 800c55e:	461f      	mov	r7, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c560:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800c564:	4629      	mov	r1, r5
 800c566:	7860      	ldrb	r0, [r4, #1]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c56c:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c56e:	4629      	mov	r1, r5
 800c570:	4630      	mov	r0, r6
 800c572:	2a07      	cmp	r2, #7
 800c574:	bf28      	it	cs
 800c576:	2207      	movcs	r2, #7
 800c578:	f000 fd64 	bl	800d044 <USBD_CtlSendData>
 800c57c:	e7e7      	b.n	800c54e <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800c57e:	784b      	ldrb	r3, [r1, #1]
 800c580:	2b0b      	cmp	r3, #11
 800c582:	d8df      	bhi.n	800c544 <USBD_CDC_Setup+0x28>
 800c584:	a201      	add	r2, pc, #4	; (adr r2, 800c58c <USBD_CDC_Setup+0x70>)
 800c586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c58a:	bf00      	nop
 800c58c:	0800c5ed 	.word	0x0800c5ed
 800c590:	0800c54f 	.word	0x0800c54f
 800c594:	0800c545 	.word	0x0800c545
 800c598:	0800c545 	.word	0x0800c545
 800c59c:	0800c545 	.word	0x0800c545
 800c5a0:	0800c545 	.word	0x0800c545
 800c5a4:	0800c545 	.word	0x0800c545
 800c5a8:	0800c545 	.word	0x0800c545
 800c5ac:	0800c545 	.word	0x0800c545
 800c5b0:	0800c545 	.word	0x0800c545
 800c5b4:	0800c5d9 	.word	0x0800c5d9
 800c5b8:	0800c5cf 	.word	0x0800c5cf
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c5bc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800c5c0:	4617      	mov	r7, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c5c2:	7848      	ldrb	r0, [r1, #1]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	4798      	blx	r3
}
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	b003      	add	sp, #12
 800c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c5ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c5d2:	2b03      	cmp	r3, #3
 800c5d4:	d0bb      	beq.n	800c54e <USBD_CDC_Setup+0x32>
 800c5d6:	e7b5      	b.n	800c544 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c5dc:	2b03      	cmp	r3, #3
 800c5de:	d1b1      	bne.n	800c544 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f10d 0105 	add.w	r1, sp, #5
 800c5e6:	f000 fd2d 	bl	800d044 <USBD_CtlSendData>
 800c5ea:	e7b0      	b.n	800c54e <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c5f0:	2a03      	cmp	r2, #3
 800c5f2:	d1a7      	bne.n	800c544 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800c5fa:	461f      	mov	r7, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c5fc:	f000 fd22 	bl	800d044 <USBD_CtlSendData>
 800c600:	e7a5      	b.n	800c54e <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800c602:	2703      	movs	r7, #3
}
 800c604:	4638      	mov	r0, r7
 800c606:	b003      	add	sp, #12
 800c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 800c60a:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 800c60c:	461f      	mov	r7, r3
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c60e:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
          hcdc->CmdOpCode = req->bRequest;
 800c612:	f885 1200 	strb.w	r1, [r5, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c616:	4629      	mov	r1, r5
 800c618:	f000 fd2c 	bl	800d074 <USBD_CtlPrepareRx>
 800c61c:	e797      	b.n	800c54e <USBD_CDC_Setup+0x32>
 800c61e:	bf00      	nop

0800c620 <USBD_CDC_DeInit>:
{
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c624:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c626:	2181      	movs	r1, #129	; 0x81
 800c628:	f000 ffea 	bl	800d600 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c62c:	2101      	movs	r1, #1
 800c62e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c630:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c632:	f000 ffe5 	bl	800d600 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c636:	2182      	movs	r1, #130	; 0x82
 800c638:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c63a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c63e:	f000 ffdf 	bl	800d600 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800c642:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c646:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800c648:	b14b      	cbz	r3, 800c65e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c64a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c652:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800c656:	f001 f843 	bl	800d6e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800c65a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800c65e:	2000      	movs	r0, #0
 800c660:	bd38      	pop	{r3, r4, r5, pc}
 800c662:	bf00      	nop

0800c664 <USBD_CDC_Init>:
{
 800c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c668:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c66a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c66e:	f001 f833 	bl	800d6d8 <USBD_static_malloc>
  if (hcdc == NULL)
 800c672:	4605      	mov	r5, r0
 800c674:	2800      	cmp	r0, #0
 800c676:	d04c      	beq.n	800c712 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c678:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 800c67a:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c67e:	b393      	cbz	r3, 800c6e6 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c680:	2340      	movs	r3, #64	; 0x40
 800c682:	2202      	movs	r2, #2
 800c684:	2181      	movs	r1, #129	; 0x81
 800c686:	4620      	mov	r0, r4
 800c688:	f000 ffa8 	bl	800d5dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c68c:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c68e:	2340      	movs	r3, #64	; 0x40
 800c690:	4631      	mov	r1, r6
 800c692:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c694:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c696:	4620      	mov	r0, r4
 800c698:	f000 ffa0 	bl	800d5dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c69c:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c69e:	2203      	movs	r2, #3
 800c6a0:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c6a2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c6a6:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c6a8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c6ac:	2308      	movs	r3, #8
 800c6ae:	f000 ff95 	bl	800d5dc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c6b2:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c6b6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800c6ba:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c6bc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4798      	blx	r3
  hcdc->TxState = 0U;
 800c6c4:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800c6c8:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6cc:	7c26      	ldrb	r6, [r4, #16]
 800c6ce:	b9ae      	cbnz	r6, 800c6fc <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c6d8:	4641      	mov	r1, r8
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 ffea 	bl	800d6b4 <USBD_LL_PrepareReceive>
}
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	2181      	movs	r1, #129	; 0x81
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 ff74 	bl	800d5dc <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c6f4:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c6f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6fa:	e7c9      	b.n	800c690 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 800c6fc:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c6fe:	2340      	movs	r3, #64	; 0x40
 800c700:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c704:	4641      	mov	r1, r8
 800c706:	4620      	mov	r0, r4
 800c708:	f000 ffd4 	bl	800d6b4 <USBD_LL_PrepareReceive>
}
 800c70c:	4630      	mov	r0, r6
 800c70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800c712:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800c714:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800c718:	4630      	mov	r0, r6
 800c71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71e:	bf00      	nop

0800c720 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c720:	4603      	mov	r3, r0
  if (fops == NULL)
 800c722:	b119      	cbz	r1, 800c72c <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 800c724:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 800c726:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 800c72a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c72c:	2003      	movs	r0, #3
}
 800c72e:	4770      	bx	lr

0800c730 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c730:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c734:	b12b      	cbz	r3, 800c742 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800c736:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800c738:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c73c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800c740:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c742:	2003      	movs	r0, #3
}
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop

0800c748 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c748:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800c74c:	b11b      	cbz	r3, 800c756 <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800c74e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800c750:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800c754:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800c756:	2003      	movs	r0, #3
}
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop

0800c75c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c75c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800c760:	b192      	cbz	r2, 800c788 <USBD_CDC_TransmitPacket+0x2c>
{
 800c762:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800c764:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800c768:	b10c      	cbz	r4, 800c76e <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c76a:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800c76c:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800c76e:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c770:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800c772:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c776:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c77a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c77e:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c780:	f000 ff8a 	bl	800d698 <USBD_LL_Transmit>
    ret = USBD_OK;
 800c784:	4620      	mov	r0, r4
}
 800c786:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c788:	2003      	movs	r0, #3
}
 800c78a:	4770      	bx	lr

0800c78c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c78c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c790:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800c792:	b19a      	cbz	r2, 800c7bc <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c794:	7c04      	ldrb	r4, [r0, #16]
 800c796:	b144      	cbz	r4, 800c7aa <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c798:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	f000 ff87 	bl	800d6b4 <USBD_LL_PrepareReceive>
}
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c7aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7ae:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	f000 ff7e 	bl	800d6b4 <USBD_LL_PrepareReceive>
}
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800c7bc:	2403      	movs	r4, #3
}
 800c7be:	4620      	mov	r0, r4
 800c7c0:	bd10      	pop	{r4, pc}
 800c7c2:	bf00      	nop

0800c7c4 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c7c4:	b178      	cbz	r0, 800c7e6 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c7cc:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c7d0:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7d4:	b109      	cbz	r1, 800c7da <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c7d6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7da:	2301      	movs	r3, #1
  pdev->id = id;
 800c7dc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7de:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7e2:	f000 bead 	b.w	800d540 <USBD_LL_Init>

  return ret;
}
 800c7e6:	2003      	movs	r0, #3
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop

0800c7ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7ec:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800c7ee:	2400      	movs	r4, #0
{
 800c7f0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800c7f2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800c7f6:	b181      	cbz	r1, 800c81a <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c7f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800c7fa:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800c7fc:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c800:	b143      	cbz	r3, 800c814 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c802:	f10d 0006 	add.w	r0, sp, #6
 800c806:	4798      	blx	r3
 800c808:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c80a:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c80c:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800c810:	b003      	add	sp, #12
 800c812:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800c814:	4618      	mov	r0, r3
}
 800c816:	b003      	add	sp, #12
 800c818:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800c81a:	2003      	movs	r0, #3
}
 800c81c:	b003      	add	sp, #12
 800c81e:	bd30      	pop	{r4, r5, pc}

0800c820 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c820:	f000 bece 	b.w	800d5c0 <USBD_LL_Start>

0800c824 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800c824:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c828:	b10b      	cbz	r3, 800c82e <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4718      	bx	r3
  }

  return ret;
}
 800c82e:	2003      	movs	r0, #3
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop

0800c834 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c834:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c836:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c83a:	b10b      	cbz	r3, 800c840 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c840:	2000      	movs	r0, #0
 800c842:	bd08      	pop	{r3, pc}

0800c844 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c844:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c846:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800c84a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 fbb7 	bl	800cfc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800c852:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800c856:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800c85a:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800c85c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800c860:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800c864:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d009      	beq.n	800c880 <USBD_LL_SetupStage+0x3c>
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d013      	beq.n	800c898 <USBD_LL_SetupStage+0x54>
 800c870:	b163      	cbz	r3, 800c88c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c872:	4620      	mov	r0, r4
 800c874:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800c878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c87c:	f000 bece 	b.w	800d61c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c880:	4629      	mov	r1, r5
 800c882:	4620      	mov	r0, r4
}
 800c884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c888:	f000 bac6 	b.w	800ce18 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c88c:	4629      	mov	r1, r5
 800c88e:	4620      	mov	r0, r4
}
 800c890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c894:	f000 b92a 	b.w	800caec <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c898:	4629      	mov	r1, r5
 800c89a:	4620      	mov	r0, r4
}
 800c89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c8a0:	f000 baf2 	b.w	800ce88 <USBD_StdEPReq>

0800c8a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c8a8:	b929      	cbnz	r1, 800c8b6 <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c8aa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d00d      	beq.n	800c8ce <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	d1f9      	bne.n	800c8b2 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800c8be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c8c2:	699b      	ldr	r3, [r3, #24]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0f4      	beq.n	800c8b2 <USBD_LL_DataOutStage+0xe>
}
 800c8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c8cc:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c8ce:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800c8d2:	42ab      	cmp	r3, r5
 800c8d4:	d808      	bhi.n	800c8e8 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d00f      	beq.n	800c8fe <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f000 fbe0 	bl	800d0a4 <USBD_CtlSendStatus>
}
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c8e8:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800c8f0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8f4:	bf28      	it	cs
 800c8f6:	461a      	movcs	r2, r3
 800c8f8:	f000 fbca 	bl	800d090 <USBD_CtlContinueRx>
 800c8fc:	e7d9      	b.n	800c8b2 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c8fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d0ea      	beq.n	800c8de <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800c908:	4798      	blx	r3
 800c90a:	e7e8      	b.n	800c8de <USBD_LL_DataOutStage+0x3a>

0800c90c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c90c:	b570      	push	{r4, r5, r6, lr}
 800c90e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c910:	b949      	cbnz	r1, 800c926 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c912:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c916:	2b02      	cmp	r3, #2
 800c918:	d011      	beq.n	800c93e <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c91a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d022      	beq.n	800c968 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800c922:	2000      	movs	r0, #0
 800c924:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c926:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d1f9      	bne.n	800c922 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800c92e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d0f4      	beq.n	800c922 <USBD_LL_DataInStage+0x16>
}
 800c938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c93c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c93e:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800c942:	460d      	mov	r5, r1
 800c944:	42b3      	cmp	r3, r6
 800c946:	d814      	bhi.n	800c972 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800c948:	d020      	beq.n	800c98c <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d02f      	beq.n	800c9b2 <USBD_LL_DataInStage+0xa6>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c952:	2180      	movs	r1, #128	; 0x80
 800c954:	4620      	mov	r0, r4
 800c956:	f000 fe61 	bl	800d61c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 fbae 	bl	800d0bc <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800c960:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c964:	2b01      	cmp	r3, #1
 800c966:	d1dc      	bne.n	800c922 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800c96c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800c970:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c972:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c974:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c976:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c978:	461a      	mov	r2, r3
 800c97a:	f000 fb71 	bl	800d060 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c97e:	462b      	mov	r3, r5
 800c980:	462a      	mov	r2, r5
 800c982:	4629      	mov	r1, r5
 800c984:	4620      	mov	r0, r4
 800c986:	f000 fe95 	bl	800d6b4 <USBD_LL_PrepareReceive>
 800c98a:	e7c6      	b.n	800c91a <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800c98c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c98e:	4293      	cmp	r3, r2
 800c990:	d8db      	bhi.n	800c94a <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800c992:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800c996:	429a      	cmp	r2, r3
 800c998:	d2d7      	bcs.n	800c94a <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c99a:	460a      	mov	r2, r1
 800c99c:	f000 fb60 	bl	800d060 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800c9a8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ac:	f000 fe82 	bl	800d6b4 <USBD_LL_PrepareReceive>
 800c9b0:	e7b3      	b.n	800c91a <USBD_LL_DataInStage+0xe>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c9b2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0ca      	beq.n	800c952 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800c9bc:	4620      	mov	r0, r4
 800c9be:	4798      	blx	r3
 800c9c0:	e7c7      	b.n	800c952 <USBD_LL_DataInStage+0x46>
 800c9c2:	bf00      	nop

0800c9c4 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9c4:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9c6:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800c9c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9cc:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800c9d0:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9d2:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800c9d6:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800c9da:	b1eb      	cbz	r3, 800ca18 <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c9dc:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800c9e4:	b112      	cbz	r2, 800c9ec <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	b103      	cbz	r3, 800c9ec <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9ea:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9ec:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9ee:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9f0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	462b      	mov	r3, r5
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	f000 fdf0 	bl	800d5dc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	2200      	movs	r2, #0
 800ca00:	2180      	movs	r1, #128	; 0x80
 800ca02:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca04:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca08:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca0c:	f000 fde6 	bl	800d5dc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800ca10:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca12:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca14:	6225      	str	r5, [r4, #32]
}
 800ca16:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800ca18:	2003      	movs	r0, #3
}
 800ca1a:	4770      	bx	lr

0800ca1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca1c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800ca1e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800ca20:	7419      	strb	r1, [r3, #16]
}
 800ca22:	4770      	bx	lr

0800ca24 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca24:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca26:	2104      	movs	r1, #4

  return USBD_OK;
}
 800ca28:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800ca2a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca34:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop

0800ca3c <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca3c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca40:	2b04      	cmp	r3, #4
 800ca42:	d104      	bne.n	800ca4e <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca44:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800ca4e:	2000      	movs	r0, #0
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop

0800ca54 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800ca54:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ca58:	b15a      	cbz	r2, 800ca72 <USBD_LL_SOF+0x1e>
{
 800ca5a:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d001      	beq.n	800ca68 <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800ca64:	2000      	movs	r0, #0
}
 800ca66:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800ca68:	69d3      	ldr	r3, [r2, #28]
 800ca6a:	b123      	cbz	r3, 800ca76 <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800ca6c:	4798      	blx	r3
  return USBD_OK;
 800ca6e:	2000      	movs	r0, #0
}
 800ca70:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ca72:	2003      	movs	r0, #3
}
 800ca74:	4770      	bx	lr
  return USBD_OK;
 800ca76:	4618      	mov	r0, r3
}
 800ca78:	bd08      	pop	{r3, pc}
 800ca7a:	bf00      	nop

0800ca7c <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800ca7c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ca80:	b15a      	cbz	r2, 800ca9a <USBD_LL_IsoINIncomplete+0x1e>
{
 800ca82:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ca88:	2b03      	cmp	r3, #3
 800ca8a:	d001      	beq.n	800ca90 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800ca8c:	2000      	movs	r0, #0
}
 800ca8e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ca90:	6a13      	ldr	r3, [r2, #32]
 800ca92:	b123      	cbz	r3, 800ca9e <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ca94:	4798      	blx	r3
  return USBD_OK;
 800ca96:	2000      	movs	r0, #0
}
 800ca98:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800ca9a:	2003      	movs	r0, #3
}
 800ca9c:	4770      	bx	lr
  return USBD_OK;
 800ca9e:	4618      	mov	r0, r3
}
 800caa0:	bd08      	pop	{r3, pc}
 800caa2:	bf00      	nop

0800caa4 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800caa4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800caa8:	b15a      	cbz	r2, 800cac2 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800caaa:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d001      	beq.n	800cab8 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800cab4:	2000      	movs	r0, #0
}
 800cab6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800cab8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800caba:	b123      	cbz	r3, 800cac6 <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800cabc:	4798      	blx	r3
  return USBD_OK;
 800cabe:	2000      	movs	r0, #0
}
 800cac0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800cac2:	2003      	movs	r0, #3
}
 800cac4:	4770      	bx	lr
  return USBD_OK;
 800cac6:	4618      	mov	r0, r3
}
 800cac8:	bd08      	pop	{r3, pc}
 800caca:	bf00      	nop

0800cacc <USBD_LL_DevConnected>:
 800cacc:	2000      	movs	r0, #0
 800cace:	4770      	bx	lr

0800cad0 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cad0:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800cad2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cad6:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800cada:	b12a      	cbz	r2, 800cae8 <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cadc:	6852      	ldr	r2, [r2, #4]
 800cade:	7901      	ldrb	r1, [r0, #4]
{
 800cae0:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cae2:	4790      	blx	r2
  }

  return USBD_OK;
}
 800cae4:	2000      	movs	r0, #0
 800cae6:	bd08      	pop	{r3, pc}
 800cae8:	2000      	movs	r0, #0
 800caea:	4770      	bx	lr

0800caec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	780c      	ldrb	r4, [r1, #0]
 800caf0:	b082      	sub	sp, #8
 800caf2:	460e      	mov	r6, r1
 800caf4:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf6:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800cafa:	2c20      	cmp	r4, #32
 800cafc:	d00e      	beq.n	800cb1c <USBD_StdDevReq+0x30>
 800cafe:	2c40      	cmp	r4, #64	; 0x40
 800cb00:	d00c      	beq.n	800cb1c <USBD_StdDevReq+0x30>
 800cb02:	b1a4      	cbz	r4, 800cb2e <USBD_StdDevReq+0x42>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb04:	2180      	movs	r1, #128	; 0x80
 800cb06:	4628      	mov	r0, r5
 800cb08:	f000 fd88 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800cb10:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb12:	f000 fd83 	bl	800d61c <USBD_LL_StallEP>
}
 800cb16:	4620      	mov	r0, r4
 800cb18:	b002      	add	sp, #8
 800cb1a:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb1c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800cb20:	4631      	mov	r1, r6
 800cb22:	4628      	mov	r0, r5
 800cb24:	689b      	ldr	r3, [r3, #8]
}
 800cb26:	b002      	add	sp, #8
 800cb28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb2c:	4718      	bx	r3
      switch (req->bRequest)
 800cb2e:	784b      	ldrb	r3, [r1, #1]
 800cb30:	2b09      	cmp	r3, #9
 800cb32:	d8e7      	bhi.n	800cb04 <USBD_StdDevReq+0x18>
 800cb34:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <USBD_StdDevReq+0x50>)
 800cb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3a:	bf00      	nop
 800cb3c:	0800cb9d 	.word	0x0800cb9d
 800cb40:	0800cbcb 	.word	0x0800cbcb
 800cb44:	0800cb05 	.word	0x0800cb05
 800cb48:	0800cbe9 	.word	0x0800cbe9
 800cb4c:	0800cb05 	.word	0x0800cb05
 800cb50:	0800cbf1 	.word	0x0800cbf1
 800cb54:	0800cc29 	.word	0x0800cc29
 800cb58:	0800cb05 	.word	0x0800cb05
 800cb5c:	0800cc45 	.word	0x0800cc45
 800cb60:	0800cb65 	.word	0x0800cb65
  cfgidx = (uint8_t)(req->wValue);
 800cb64:	7889      	ldrb	r1, [r1, #2]
 800cb66:	4eab      	ldr	r6, [pc, #684]	; (800ce14 <USBD_StdDevReq+0x328>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb68:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800cb6a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb6c:	f200 8140 	bhi.w	800cdf0 <USBD_StdDevReq+0x304>
  switch (pdev->dev_state)
 800cb70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	f000 8129 	beq.w	800cdce <USBD_StdDevReq+0x2e2>
 800cb7c:	2a03      	cmp	r2, #3
 800cb7e:	f000 8105 	beq.w	800cd8c <USBD_StdDevReq+0x2a0>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb82:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800cb84:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb86:	f000 fd49 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f000 fd45 	bl	800d61c <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb92:	7831      	ldrb	r1, [r6, #0]
 800cb94:	4628      	mov	r0, r5
 800cb96:	f7ff fe4d 	bl	800c834 <USBD_ClrClassConfig>
      break;
 800cb9a:	e7bc      	b.n	800cb16 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800cb9c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800cba0:	3a01      	subs	r2, #1
 800cba2:	2a02      	cmp	r2, #2
 800cba4:	d866      	bhi.n	800cc74 <USBD_StdDevReq+0x188>
      if (req->wLength != 0x2U)
 800cba6:	88ca      	ldrh	r2, [r1, #6]
 800cba8:	2a02      	cmp	r2, #2
 800cbaa:	d163      	bne.n	800cc74 <USBD_StdDevReq+0x188>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbac:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800cbae:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cbb2:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800cbb4:	b10a      	cbz	r2, 800cbba <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cbb6:	2203      	movs	r2, #3
 800cbb8:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f105 010c 	add.w	r1, r5, #12
 800cbc0:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800cbc2:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cbc4:	f000 fa3e 	bl	800d044 <USBD_CtlSendData>
      break;
 800cbc8:	e7a5      	b.n	800cb16 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800cbca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d84f      	bhi.n	800cc74 <USBD_StdDevReq+0x188>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbd4:	884b      	ldrh	r3, [r1, #2]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d19d      	bne.n	800cb16 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800cbda:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800cbdc:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800cbde:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbe2:	f000 fa5f 	bl	800d0a4 <USBD_CtlSendStatus>
 800cbe6:	e796      	b.n	800cb16 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbe8:	884b      	ldrh	r3, [r1, #2]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d193      	bne.n	800cb16 <USBD_StdDevReq+0x2a>
 800cbee:	e7f5      	b.n	800cbdc <USBD_StdDevReq+0xf0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbf0:	888b      	ldrh	r3, [r1, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d13e      	bne.n	800cc74 <USBD_StdDevReq+0x188>
 800cbf6:	88cb      	ldrh	r3, [r1, #6]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d13b      	bne.n	800cc74 <USBD_StdDevReq+0x188>
 800cbfc:	884e      	ldrh	r6, [r1, #2]
 800cbfe:	2e7f      	cmp	r6, #127	; 0x7f
 800cc00:	d838      	bhi.n	800cc74 <USBD_StdDevReq+0x188>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d034      	beq.n	800cc74 <USBD_StdDevReq+0x188>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc0a:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800cc0c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc10:	f000 fd34 	bl	800d67c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc14:	4628      	mov	r0, r5
 800cc16:	f000 fa45 	bl	800d0a4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800cc1a:	2e00      	cmp	r6, #0
 800cc1c:	f040 80d3 	bne.w	800cdc6 <USBD_StdDevReq+0x2da>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc20:	2301      	movs	r3, #1
 800cc22:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800cc26:	e776      	b.n	800cb16 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800cc28:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800cc2a:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800cc2c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800cc30:	0a13      	lsrs	r3, r2, #8
 800cc32:	3b01      	subs	r3, #1
 800cc34:	2b06      	cmp	r3, #6
 800cc36:	d81d      	bhi.n	800cc74 <USBD_StdDevReq+0x188>
 800cc38:	e8df f003 	tbb	[pc, r3]
 800cc3c:	1c624d5a 	.word	0x1c624d5a
 800cc40:	431c      	.short	0x431c
 800cc42:	27          	.byte	0x27
 800cc43:	00          	.byte	0x00
  if (req->wLength != 1U)
 800cc44:	88ca      	ldrh	r2, [r1, #6]
 800cc46:	2a01      	cmp	r2, #1
 800cc48:	d114      	bne.n	800cc74 <USBD_StdDevReq+0x188>
    switch (pdev->dev_state)
 800cc4a:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800cc4e:	2902      	cmp	r1, #2
 800cc50:	b2cb      	uxtb	r3, r1
 800cc52:	f200 8094 	bhi.w	800cd7e <USBD_StdDevReq+0x292>
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f43f af54 	beq.w	800cb04 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800cc5c:	4601      	mov	r1, r0
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc64:	f000 f9ee 	bl	800d044 <USBD_CtlSendData>
        break;
 800cc68:	e755      	b.n	800cb16 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d15c      	bne.n	800cd2e <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc74:	2180      	movs	r1, #128	; 0x80
 800cc76:	4628      	mov	r0, r5
 800cc78:	f000 fcd0 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 fccc 	bl	800d61c <USBD_LL_StallEP>
}
 800cc84:	4620      	mov	r0, r4
 800cc86:	b002      	add	sp, #8
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc8a:	7c03      	ldrb	r3, [r0, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1f1      	bne.n	800cc74 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc90:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cc94:	f10d 0006 	add.w	r0, sp, #6
 800cc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc9c:	2307      	movs	r3, #7
 800cc9e:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800cca0:	88f2      	ldrh	r2, [r6, #6]
 800cca2:	2a00      	cmp	r2, #0
 800cca4:	d067      	beq.n	800cd76 <USBD_StdDevReq+0x28a>
    if (len != 0U)
 800cca6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0e2      	beq.n	800cc74 <USBD_StdDevReq+0x188>
      len = MIN(len, req->wLength);
 800ccae:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ccb0:	4601      	mov	r1, r0
 800ccb2:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800ccb4:	bf28      	it	cs
 800ccb6:	461a      	movcs	r2, r3
 800ccb8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ccbc:	f000 f9c2 	bl	800d044 <USBD_CtlSendData>
 800ccc0:	e729      	b.n	800cb16 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc2:	7c03      	ldrb	r3, [r0, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1d5      	bne.n	800cc74 <USBD_StdDevReq+0x188>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ccc8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cccc:	f10d 0006 	add.w	r0, sp, #6
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd2:	4798      	blx	r3
  if (err != 0U)
 800ccd4:	e7e4      	b.n	800cca0 <USBD_StdDevReq+0x1b4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccd6:	7c03      	ldrb	r3, [r0, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f040 8092 	bne.w	800ce02 <USBD_StdDevReq+0x316>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ccde:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800cce2:	f10d 0006 	add.w	r0, sp, #6
 800cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccea:	2302      	movs	r3, #2
 800ccec:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ccee:	e7d7      	b.n	800cca0 <USBD_StdDevReq+0x1b4>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ccf0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ccf4:	f10d 0106 	add.w	r1, sp, #6
 800ccf8:	7c00      	ldrb	r0, [r0, #16]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4798      	blx	r3
  if (err != 0U)
 800ccfe:	e7cf      	b.n	800cca0 <USBD_StdDevReq+0x1b4>
      switch ((uint8_t)(req->wValue))
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	2a05      	cmp	r2, #5
 800cd04:	d8b6      	bhi.n	800cc74 <USBD_StdDevReq+0x188>
 800cd06:	a301      	add	r3, pc, #4	; (adr r3, 800cd0c <USBD_StdDevReq+0x220>)
 800cd08:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800cd0c:	0800cc6b 	.word	0x0800cc6b
 800cd10:	0800cd5d 	.word	0x0800cd5d
 800cd14:	0800cd51 	.word	0x0800cd51
 800cd18:	0800cd45 	.word	0x0800cd45
 800cd1c:	0800cd39 	.word	0x0800cd39
 800cd20:	0800cd25 	.word	0x0800cd25
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0a2      	beq.n	800cc74 <USBD_StdDevReq+0x188>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd2e:	f10d 0106 	add.w	r1, sp, #6
 800cd32:	7c28      	ldrb	r0, [r5, #16]
 800cd34:	4798      	blx	r3
  if (err != 0U)
 800cd36:	e7b3      	b.n	800cca0 <USBD_StdDevReq+0x1b4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1f5      	bne.n	800cd2e <USBD_StdDevReq+0x242>
 800cd42:	e797      	b.n	800cc74 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1ef      	bne.n	800cd2e <USBD_StdDevReq+0x242>
 800cd4e:	e791      	b.n	800cc74 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd50:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e9      	bne.n	800cd2e <USBD_StdDevReq+0x242>
 800cd5a:	e78b      	b.n	800cc74 <USBD_StdDevReq+0x188>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1e3      	bne.n	800cd2e <USBD_StdDevReq+0x242>
 800cd66:	e785      	b.n	800cc74 <USBD_StdDevReq+0x188>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd68:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800cd6a:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd6c:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd6e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd72:	f7ff fd5f 	bl	800c834 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd76:	4628      	mov	r0, r5
 800cd78:	f000 f994 	bl	800d0a4 <USBD_CtlSendStatus>
 800cd7c:	e6cb      	b.n	800cb16 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	f47f aec0 	bne.w	800cb04 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd84:	1d01      	adds	r1, r0, #4
 800cd86:	f000 f95d 	bl	800d044 <USBD_CtlSendData>
        break;
 800cd8a:	e6c4      	b.n	800cb16 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	d0eb      	beq.n	800cd68 <USBD_StdDevReq+0x27c>
      else if (cfgidx != pdev->dev_config)
 800cd90:	6841      	ldr	r1, [r0, #4]
 800cd92:	2901      	cmp	r1, #1
 800cd94:	d0ef      	beq.n	800cd76 <USBD_StdDevReq+0x28a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd96:	b2c9      	uxtb	r1, r1
 800cd98:	f7ff fd4c 	bl	800c834 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd9c:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd9e:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800cda0:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cda2:	f7ff fd3f 	bl	800c824 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cda6:	4606      	mov	r6, r0
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d0e4      	beq.n	800cd76 <USBD_StdDevReq+0x28a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdac:	2180      	movs	r1, #128	; 0x80
 800cdae:	4628      	mov	r0, r5
 800cdb0:	f000 fc34 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	4634      	mov	r4, r6
 800cdba:	f000 fc2f 	bl	800d61c <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdbe:	7929      	ldrb	r1, [r5, #4]
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f7ff fd37 	bl	800c834 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdc6:	2302      	movs	r3, #2
 800cdc8:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800cdcc:	e6a3      	b.n	800cb16 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800cdce:	2900      	cmp	r1, #0
 800cdd0:	d0d1      	beq.n	800cd76 <USBD_StdDevReq+0x28a>
        pdev->dev_config = cfgidx;
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdd6:	f7ff fd25 	bl	800c824 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800cdda:	4604      	mov	r4, r0
 800cddc:	2800      	cmp	r0, #0
 800cdde:	f47f af49 	bne.w	800cc74 <USBD_StdDevReq+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800cde2:	4628      	mov	r0, r5
 800cde4:	f000 f95e 	bl	800d0a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cde8:	2303      	movs	r3, #3
 800cdea:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800cdee:	e692      	b.n	800cb16 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdf0:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800cdf2:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdf4:	f000 fc12 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f000 fc0e 	bl	800d61c <USBD_LL_StallEP>
    return USBD_FAIL;
 800ce00:	e689      	b.n	800cb16 <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce02:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ce06:	f10d 0006 	add.w	r0, sp, #6
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce0e:	2302      	movs	r3, #2
 800ce10:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ce12:	e745      	b.n	800cca0 <USBD_StdDevReq+0x1b4>
 800ce14:	2400d91c 	.word	0x2400d91c

0800ce18 <USBD_StdItfReq>:
{
 800ce18:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce1a:	780b      	ldrb	r3, [r1, #0]
{
 800ce1c:	460d      	mov	r5, r1
 800ce1e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce20:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800ce24:	2a40      	cmp	r2, #64	; 0x40
 800ce26:	d00b      	beq.n	800ce40 <USBD_StdItfReq+0x28>
 800ce28:	065b      	lsls	r3, r3, #25
 800ce2a:	d509      	bpl.n	800ce40 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800ce2c:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce2e:	2180      	movs	r1, #128	; 0x80
 800ce30:	f000 fbf4 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce34:	4620      	mov	r0, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	f000 fbf0 	bl	800d61c <USBD_LL_StallEP>
}
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800ce40:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ce44:	3b01      	subs	r3, #1
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d812      	bhi.n	800ce70 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce4a:	792b      	ldrb	r3, [r5, #4]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d80f      	bhi.n	800ce70 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce50:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ce54:	4629      	mov	r1, r5
 800ce56:	4620      	mov	r0, r4
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce5c:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce5e:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1eb      	bne.n	800ce3c <USBD_StdItfReq+0x24>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d1e9      	bne.n	800ce3c <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 f91b 	bl	800d0a4 <USBD_CtlSendStatus>
 800ce6e:	e7e5      	b.n	800ce3c <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce70:	2180      	movs	r1, #128	; 0x80
 800ce72:	4620      	mov	r0, r4
 800ce74:	f000 fbd2 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ce7c:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce7e:	f000 fbcd 	bl	800d61c <USBD_LL_StallEP>
}
 800ce82:	4628      	mov	r0, r5
 800ce84:	bd38      	pop	{r3, r4, r5, pc}
 800ce86:	bf00      	nop

0800ce88 <USBD_StdEPReq>:
{
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	780b      	ldrb	r3, [r1, #0]
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce94:	2b20      	cmp	r3, #32
 800ce96:	d01b      	beq.n	800ced0 <USBD_StdEPReq+0x48>
 800ce98:	2b40      	cmp	r3, #64	; 0x40
 800ce9a:	d019      	beq.n	800ced0 <USBD_StdEPReq+0x48>
 800ce9c:	b303      	cbz	r3, 800cee0 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce9e:	2180      	movs	r1, #128	; 0x80
 800cea0:	4620      	mov	r0, r4
 800cea2:	f000 fbbb 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cea6:	2100      	movs	r1, #0
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f000 fbb7 	bl	800d61c <USBD_LL_StallEP>
}
 800ceae:	2000      	movs	r0, #0
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800ceb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	d04e      	beq.n	800cf5a <USBD_StdEPReq+0xd2>
 800cebc:	2a03      	cmp	r2, #3
 800cebe:	d1ee      	bne.n	800ce9e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cec0:	886b      	ldrh	r3, [r5, #2]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f3      	bne.n	800ceae <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800cec6:	064e      	lsls	r6, r1, #25
 800cec8:	d172      	bne.n	800cfb0 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800ceca:	4620      	mov	r0, r4
 800cecc:	f000 f8ea 	bl	800d0a4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ced0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800ced4:	4629      	mov	r1, r5
 800ced6:	4620      	mov	r0, r4
 800ced8:	689b      	ldr	r3, [r3, #8]
}
 800ceda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cede:	4718      	bx	r3
      switch (req->bRequest)
 800cee0:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 800cee2:	888a      	ldrh	r2, [r1, #4]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800cee8:	d0e3      	beq.n	800ceb2 <USBD_StdEPReq+0x2a>
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d024      	beq.n	800cf38 <USBD_StdEPReq+0xb0>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1d5      	bne.n	800ce9e <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800cef2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cef6:	2b02      	cmp	r3, #2
 800cef8:	b2d8      	uxtb	r0, r3
 800cefa:	d037      	beq.n	800cf6c <USBD_StdEPReq+0xe4>
 800cefc:	2803      	cmp	r0, #3
 800cefe:	d1ce      	bne.n	800ce9e <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf00:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800cf04:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cf0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800cf0e:	d43e      	bmi.n	800cf8e <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf10:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0c2      	beq.n	800ce9e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf18:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cf1c:	2514      	movs	r5, #20
 800cf1e:	fb05 4503 	mla	r5, r5, r3, r4
 800cf22:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d13c      	bne.n	800cfa4 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800cf2a:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	4629      	mov	r1, r5
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 f887 	bl	800d044 <USBD_CtlSendData>
              break;
 800cf36:	e7ba      	b.n	800ceae <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800cf38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	d00b      	beq.n	800cf5a <USBD_StdEPReq+0xd2>
 800cf42:	2a03      	cmp	r2, #3
 800cf44:	d1ab      	bne.n	800ce9e <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf46:	886b      	ldrh	r3, [r5, #2]
 800cf48:	b91b      	cbnz	r3, 800cf52 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf4a:	064a      	lsls	r2, r1, #25
 800cf4c:	d001      	beq.n	800cf52 <USBD_StdEPReq+0xca>
 800cf4e:	88eb      	ldrh	r3, [r5, #6]
 800cf50:	b39b      	cbz	r3, 800cfba <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 f8a6 	bl	800d0a4 <USBD_CtlSendStatus>
              break;
 800cf58:	e7a9      	b.n	800ceae <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf5a:	064b      	lsls	r3, r1, #25
 800cf5c:	d09f      	beq.n	800ce9e <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf5e:	f000 fb5d 	bl	800d61c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf62:	2180      	movs	r1, #128	; 0x80
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 fb59 	bl	800d61c <USBD_LL_StallEP>
 800cf6a:	e7a0      	b.n	800ceae <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf6c:	0648      	lsls	r0, r1, #25
 800cf6e:	d196      	bne.n	800ce9e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf70:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800cf72:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf76:	f04f 0202 	mov.w	r2, #2
 800cf7a:	4620      	mov	r0, r4
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf7c:	bf4c      	ite	mi
 800cf7e:	f104 0114 	addmi.w	r1, r4, #20
 800cf82:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800cf86:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf88:	f000 f85c 	bl	800d044 <USBD_CtlSendData>
              break;
 800cf8c:	e78f      	b.n	800ceae <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d084      	beq.n	800ce9e <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf94:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cf98:	1c5d      	adds	r5, r3, #1
 800cf9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cf9e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800cfa2:	e7c0      	b.n	800cf26 <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fb55 	bl	800d654 <USBD_LL_IsStallEP>
 800cfaa:	b120      	cbz	r0, 800cfb6 <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800cfac:	2301      	movs	r3, #1
 800cfae:	e7bc      	b.n	800cf2a <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cfb0:	f000 fb42 	bl	800d638 <USBD_LL_ClearStallEP>
 800cfb4:	e789      	b.n	800ceca <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800cfb6:	6028      	str	r0, [r5, #0]
 800cfb8:	e7b8      	b.n	800cf2c <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfba:	f000 fb2f 	bl	800d61c <USBD_LL_StallEP>
 800cfbe:	e7c8      	b.n	800cf52 <USBD_StdEPReq+0xca>

0800cfc0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800cfc0:	780b      	ldrb	r3, [r1, #0]
 800cfc2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfc4:	784b      	ldrb	r3, [r1, #1]
 800cfc6:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800cfc8:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 800cfca:	8043      	strh	r3, [r0, #2]
 800cfcc:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 800cfce:	8083      	strh	r3, [r0, #4]
 800cfd0:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 800cfd2:	80c3      	strh	r3, [r0, #6]
}
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop

0800cfd8 <USBD_CtlError>:
{
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfdc:	2180      	movs	r1, #128	; 0x80
 800cfde:	f000 fb1d 	bl	800d61c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	4620      	mov	r0, r4
}
 800cfe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfea:	f000 bb17 	b.w	800d61c <USBD_LL_StallEP>
 800cfee:	bf00      	nop

0800cff0 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800cff0:	b318      	cbz	r0, 800d03a <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800cff2:	7803      	ldrb	r3, [r0, #0]
{
 800cff4:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800cff6:	b30b      	cbz	r3, 800d03c <USBD_GetString+0x4c>
 800cff8:	4604      	mov	r4, r0
 800cffa:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 800cffe:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 800d002:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2d00      	cmp	r5, #0
 800d00a:	d1f8      	bne.n	800cffe <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d00c:	3301      	adds	r3, #1
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	b2dc      	uxtb	r4, r3
 800d012:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d014:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 800d016:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d018:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800d01a:	7804      	ldrb	r4, [r0, #0]
 800d01c:	b15c      	cbz	r4, 800d036 <USBD_GetString+0x46>
  idx++;
 800d01e:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800d020:	2500      	movs	r5, #0
    idx++;
 800d022:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800d024:	54cc      	strb	r4, [r1, r3]
    idx++;
 800d026:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800d028:	b2d2      	uxtb	r2, r2
    idx++;
 800d02a:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800d02c:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800d02e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800d032:	2c00      	cmp	r4, #0
 800d034:	d1f5      	bne.n	800d022 <USBD_GetString+0x32>
}
 800d036:	bc30      	pop	{r4, r5}
 800d038:	4770      	bx	lr
 800d03a:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800d03c:	2402      	movs	r4, #2
 800d03e:	4623      	mov	r3, r4
 800d040:	e7e7      	b.n	800d012 <USBD_GetString+0x22>
 800d042:	bf00      	nop

0800d044 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d044:	b510      	push	{r4, lr}
 800d046:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d048:	2402      	movs	r4, #2
{
 800d04a:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d04c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d04e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800d052:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d056:	f000 fb1f 	bl	800d698 <USBD_LL_Transmit>

  return USBD_OK;
}
 800d05a:	2000      	movs	r0, #0
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	bf00      	nop

0800d060 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d060:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d062:	2100      	movs	r1, #0
{
 800d064:	b508      	push	{r3, lr}
 800d066:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d068:	4662      	mov	r2, ip
 800d06a:	f000 fb15 	bl	800d698 <USBD_LL_Transmit>

  return USBD_OK;
}
 800d06e:	2000      	movs	r0, #0
 800d070:	bd08      	pop	{r3, pc}
 800d072:	bf00      	nop

0800d074 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d074:	b510      	push	{r4, lr}
 800d076:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d078:	2403      	movs	r4, #3
{
 800d07a:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d07c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d07e:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800d082:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d086:	f000 fb15 	bl	800d6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d08a:	2000      	movs	r0, #0
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	bf00      	nop

0800d090 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d090:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d092:	2100      	movs	r1, #0
{
 800d094:	b508      	push	{r3, lr}
 800d096:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d098:	4662      	mov	r2, ip
 800d09a:	f000 fb0b 	bl	800d6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d09e:	2000      	movs	r0, #0
 800d0a0:	bd08      	pop	{r3, pc}
 800d0a2:	bf00      	nop

0800d0a4 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0a4:	2300      	movs	r3, #0
{
 800d0a6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0a8:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0ae:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0b2:	f000 faf1 	bl	800d698 <USBD_LL_Transmit>

  return USBD_OK;
}
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	bf00      	nop

0800d0bc <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0bc:	2300      	movs	r3, #0
{
 800d0be:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0c0:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0c6:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0ca:	f000 faf3 	bl	800d6b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	bf00      	nop

0800d0d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d0d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	4919      	ldr	r1, [pc, #100]	; (800d140 <MX_USB_DEVICE_Init+0x6c>)
 800d0da:	481a      	ldr	r0, [pc, #104]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d0dc:	f7ff fb72 	bl	800c7c4 <USBD_Init>
 800d0e0:	b988      	cbnz	r0, 800d106 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d0e2:	4919      	ldr	r1, [pc, #100]	; (800d148 <MX_USB_DEVICE_Init+0x74>)
 800d0e4:	4817      	ldr	r0, [pc, #92]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d0e6:	f7ff fb81 	bl	800c7ec <USBD_RegisterClass>
 800d0ea:	b9a0      	cbnz	r0, 800d116 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d0ec:	4917      	ldr	r1, [pc, #92]	; (800d14c <MX_USB_DEVICE_Init+0x78>)
 800d0ee:	4815      	ldr	r0, [pc, #84]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d0f0:	f7ff fb16 	bl	800c720 <USBD_CDC_RegisterInterface>
 800d0f4:	b9b8      	cbnz	r0, 800d126 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d0f6:	4813      	ldr	r0, [pc, #76]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d0f8:	f7ff fb92 	bl	800c820 <USBD_Start>
 800d0fc:	b9d0      	cbnz	r0, 800d134 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800d102:	f7fb b831 	b.w	8008168 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800d106:	f7f6 f869 	bl	80031dc <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d10a:	490f      	ldr	r1, [pc, #60]	; (800d148 <MX_USB_DEVICE_Init+0x74>)
 800d10c:	480d      	ldr	r0, [pc, #52]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d10e:	f7ff fb6d 	bl	800c7ec <USBD_RegisterClass>
 800d112:	2800      	cmp	r0, #0
 800d114:	d0ea      	beq.n	800d0ec <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800d116:	f7f6 f861 	bl	80031dc <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d11a:	490c      	ldr	r1, [pc, #48]	; (800d14c <MX_USB_DEVICE_Init+0x78>)
 800d11c:	4809      	ldr	r0, [pc, #36]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d11e:	f7ff faff 	bl	800c720 <USBD_CDC_RegisterInterface>
 800d122:	2800      	cmp	r0, #0
 800d124:	d0e7      	beq.n	800d0f6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800d126:	f7f6 f859 	bl	80031dc <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d12a:	4806      	ldr	r0, [pc, #24]	; (800d144 <MX_USB_DEVICE_Init+0x70>)
 800d12c:	f7ff fb78 	bl	800c820 <USBD_Start>
 800d130:	2800      	cmp	r0, #0
 800d132:	d0e4      	beq.n	800d0fe <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800d134:	f7f6 f852 	bl	80031dc <Error_Handler>
}
 800d138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800d13c:	f7fb b814 	b.w	8008168 <HAL_PWREx_EnableUSBVoltageDetector>
 800d140:	24000448 	.word	0x24000448
 800d144:	2400d920 	.word	0x2400d920
 800d148:	2400031c 	.word	0x2400031c
 800d14c:	2400042c 	.word	0x2400042c

0800d150 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800d150:	2000      	movs	r0, #0
 800d152:	4770      	bx	lr

0800d154 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800d154:	2000      	movs	r0, #0
 800d156:	4770      	bx	lr

0800d158 <CDC_Receive_FS>:
{
 800d158:	b570      	push	{r4, r5, r6, lr}
 800d15a:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d15c:	4e08      	ldr	r6, [pc, #32]	; (800d180 <CDC_Receive_FS+0x28>)
{
 800d15e:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d160:	4630      	mov	r0, r6
 800d162:	4621      	mov	r1, r4
 800d164:	f7ff faf0 	bl	800c748 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800d168:	4630      	mov	r0, r6
 800d16a:	f7ff fb0f 	bl	800c78c <USBD_CDC_ReceivePacket>
 800d16e:	682a      	ldr	r2, [r5, #0]
 800d170:	4b04      	ldr	r3, [pc, #16]	; (800d184 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800d172:	4621      	mov	r1, r4
 800d174:	4804      	ldr	r0, [pc, #16]	; (800d188 <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800d176:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800d178:	f001 fc08 	bl	800e98c <memcpy>
}
 800d17c:	2000      	movs	r0, #0
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
 800d180:	2400d920 	.word	0x2400d920
 800d184:	2400722c 	.word	0x2400722c
 800d188:	24007234 	.word	0x24007234

0800d18c <CDC_Init_FS>:
{
 800d18c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d18e:	4c06      	ldr	r4, [pc, #24]	; (800d1a8 <CDC_Init_FS+0x1c>)
 800d190:	2200      	movs	r2, #0
 800d192:	4906      	ldr	r1, [pc, #24]	; (800d1ac <CDC_Init_FS+0x20>)
 800d194:	4620      	mov	r0, r4
 800d196:	f7ff facb 	bl	800c730 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d19a:	4905      	ldr	r1, [pc, #20]	; (800d1b0 <CDC_Init_FS+0x24>)
 800d19c:	4620      	mov	r0, r4
 800d19e:	f7ff fad3 	bl	800c748 <USBD_CDC_SetRxBuffer>
}
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	bf00      	nop
 800d1a8:	2400d920 	.word	0x2400d920
 800d1ac:	2400e3f0 	.word	0x2400e3f0
 800d1b0:	2400dbf0 	.word	0x2400dbf0

0800d1b4 <CDC_Control_FS>:
  switch(cmd)
 800d1b4:	2820      	cmp	r0, #32
 800d1b6:	d00a      	beq.n	800d1ce <CDC_Control_FS+0x1a>
 800d1b8:	2821      	cmp	r0, #33	; 0x21
 800d1ba:	d106      	bne.n	800d1ca <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800d1bc:	4b09      	ldr	r3, [pc, #36]	; (800d1e4 <CDC_Control_FS+0x30>)
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	889a      	ldrh	r2, [r3, #4]
 800d1c2:	799b      	ldrb	r3, [r3, #6]
 800d1c4:	6008      	str	r0, [r1, #0]
 800d1c6:	808a      	strh	r2, [r1, #4]
 800d1c8:	718b      	strb	r3, [r1, #6]
}
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d1ce:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <CDC_Control_FS+0x30>)
 800d1d0:	6808      	ldr	r0, [r1, #0]
 800d1d2:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 800d1d6:	798a      	ldrb	r2, [r1, #6]
 800d1d8:	6018      	str	r0, [r3, #0]
}
 800d1da:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d1dc:	f8a3 c004 	strh.w	ip, [r3, #4]
 800d1e0:	719a      	strb	r2, [r3, #6]
}
 800d1e2:	4770      	bx	lr
 800d1e4:	24000440 	.word	0x24000440

0800d1e8 <CDC_Transmit_FS>:
{
 800d1e8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d1ea:	4c09      	ldr	r4, [pc, #36]	; (800d210 <CDC_Transmit_FS+0x28>)
 800d1ec:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800d1f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d1f4:	b10b      	cbz	r3, 800d1fa <CDC_Transmit_FS+0x12>
}
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d1fa:	460a      	mov	r2, r1
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	4620      	mov	r0, r4
 800d200:	f7ff fa96 	bl	800c730 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d204:	4620      	mov	r0, r4
}
 800d206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d20a:	f7ff baa7 	b.w	800c75c <USBD_CDC_TransmitPacket>
 800d20e:	bf00      	nop
 800d210:	2400d920 	.word	0x2400d920

0800d214 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d214:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800d216:	4801      	ldr	r0, [pc, #4]	; (800d21c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800d218:	800b      	strh	r3, [r1, #0]
}
 800d21a:	4770      	bx	lr
 800d21c:	24000464 	.word	0x24000464

0800d220 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d220:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800d222:	4801      	ldr	r0, [pc, #4]	; (800d228 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800d224:	800b      	strh	r3, [r1, #0]
}
 800d226:	4770      	bx	lr
 800d228:	24000478 	.word	0x24000478

0800d22c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d22c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d22e:	4c04      	ldr	r4, [pc, #16]	; (800d240 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800d230:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d232:	4804      	ldr	r0, [pc, #16]	; (800d244 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d234:	4621      	mov	r1, r4
 800d236:	f7ff fedb 	bl	800cff0 <USBD_GetString>
  return USBD_StrDesc;
}
 800d23a:	4620      	mov	r0, r4
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	bf00      	nop
 800d240:	2400ebf0 	.word	0x2400ebf0
 800d244:	08018b48 	.word	0x08018b48

0800d248 <USBD_FS_ProductStrDescriptor>:
{
 800d248:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d24a:	4c04      	ldr	r4, [pc, #16]	; (800d25c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800d24c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d24e:	4804      	ldr	r0, [pc, #16]	; (800d260 <USBD_FS_ProductStrDescriptor+0x18>)
 800d250:	4621      	mov	r1, r4
 800d252:	f7ff fecd 	bl	800cff0 <USBD_GetString>
}
 800d256:	4620      	mov	r0, r4
 800d258:	bd10      	pop	{r4, pc}
 800d25a:	bf00      	nop
 800d25c:	2400ebf0 	.word	0x2400ebf0
 800d260:	08018b5c 	.word	0x08018b5c

0800d264 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d264:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d266:	4c04      	ldr	r4, [pc, #16]	; (800d278 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800d268:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d26a:	4804      	ldr	r0, [pc, #16]	; (800d27c <USBD_FS_ConfigStrDescriptor+0x18>)
 800d26c:	4621      	mov	r1, r4
 800d26e:	f7ff febf 	bl	800cff0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800d272:	4620      	mov	r0, r4
 800d274:	bd10      	pop	{r4, pc}
 800d276:	bf00      	nop
 800d278:	2400ebf0 	.word	0x2400ebf0
 800d27c:	08018b74 	.word	0x08018b74

0800d280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d280:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d282:	4c04      	ldr	r4, [pc, #16]	; (800d294 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800d284:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d286:	4804      	ldr	r0, [pc, #16]	; (800d298 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800d288:	4621      	mov	r1, r4
 800d28a:	f7ff feb1 	bl	800cff0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800d28e:	4620      	mov	r0, r4
 800d290:	bd10      	pop	{r4, pc}
 800d292:	bf00      	nop
 800d294:	2400ebf0 	.word	0x2400ebf0
 800d298:	08018b80 	.word	0x08018b80

0800d29c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d29c:	4a46      	ldr	r2, [pc, #280]	; (800d3b8 <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 800d29e:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d2a2:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800d2a6:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 800d2aa:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800d2ae:	18c3      	adds	r3, r0, r3
 800d2b0:	d101      	bne.n	800d2b6 <USBD_FS_SerialStrDescriptor+0x1a>
}
 800d2b2:	4842      	ldr	r0, [pc, #264]	; (800d3bc <USBD_FS_SerialStrDescriptor+0x120>)
 800d2b4:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800d2b6:	0f18      	lsrs	r0, r3, #28
 800d2b8:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2bc:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800d2c0:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2c4:	4a3d      	ldr	r2, [pc, #244]	; (800d3bc <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2c6:	bf2c      	ite	cs
 800d2c8:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2ca:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d2cc:	f882 c003 	strb.w	ip, [r2, #3]
 800d2d0:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2d4:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800d2d6:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 800d2da:	f882 c005 	strb.w	ip, [r2, #5]
 800d2de:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800d2e2:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800d2e4:	f882 c007 	strb.w	ip, [r2, #7]
 800d2e8:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d2ec:	bf8c      	ite	hi
 800d2ee:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2f0:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d2f2:	f882 c009 	strb.w	ip, [r2, #9]
 800d2f6:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d2fa:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800d2fc:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800d300:	f882 c00b 	strb.w	ip, [r2, #11]
 800d304:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800d308:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800d30a:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d30e:	bf8c      	ite	hi
 800d310:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d312:	3030      	addls	r0, #48	; 0x30
 800d314:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800d316:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800d31a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d31c:	bf8c      	ite	hi
 800d31e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d320:	3030      	addls	r0, #48	; 0x30
 800d322:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800d324:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800d328:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d32a:	bf8c      	ite	hi
 800d32c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d32e:	3030      	addls	r0, #48	; 0x30
 800d330:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800d332:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800d336:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d338:	bf8c      	ite	hi
 800d33a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d33c:	3030      	addls	r0, #48	; 0x30
 800d33e:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800d340:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800d344:	f003 030f 	and.w	r3, r3, #15
 800d348:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d34a:	bf8c      	ite	hi
 800d34c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d34e:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800d350:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d352:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800d354:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d358:	bf94      	ite	ls
 800d35a:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d35c:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800d35e:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800d362:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d364:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800d366:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800d36a:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d36e:	bf2c      	ite	cs
 800d370:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d372:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d374:	7450      	strb	r0, [r2, #17]
 800d376:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800d378:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800d37a:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800d37e:	74d0      	strb	r0, [r2, #19]
 800d380:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800d382:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800d384:	7550      	strb	r0, [r2, #21]
 800d386:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d38a:	bf8c      	ite	hi
 800d38c:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d38e:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d390:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800d392:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800d394:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 800d398:	4808      	ldr	r0, [pc, #32]	; (800d3bc <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 800d39a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d39c:	bf8c      	ite	hi
 800d39e:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3a0:	3330      	addls	r3, #48	; 0x30
 800d3a2:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800d3a4:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800d3a8:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3aa:	bf94      	ite	ls
 800d3ac:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3ae:	3337      	addhi	r3, #55	; 0x37
 800d3b0:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	7653      	strb	r3, [r2, #25]
}
 800d3b6:	4770      	bx	lr
 800d3b8:	1ff1e000 	.word	0x1ff1e000
 800d3bc:	2400047c 	.word	0x2400047c

0800d3c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3c4:	2100      	movs	r1, #0
{
 800d3c6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d3c8:	22bc      	movs	r2, #188	; 0xbc
 800d3ca:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3cc:	9106      	str	r1, [sp, #24]
 800d3ce:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800d3d2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d3d6:	f001 fae7 	bl	800e9a8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d3da:	4b25      	ldr	r3, [pc, #148]	; (800d470 <HAL_PCD_MspInit+0xb0>)
 800d3dc:	6822      	ldr	r2, [r4, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d001      	beq.n	800d3e6 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3e2:	b036      	add	sp, #216	; 0xd8
 800d3e4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d3e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d3ea:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d3ee:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d3f0:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d3f2:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d3f4:	f7fb fdf6 	bl	8008fe4 <HAL_RCCEx_PeriphCLKConfig>
 800d3f8:	bb90      	cbnz	r0, 800d460 <HAL_PCD_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3fa:	4c1e      	ldr	r4, [pc, #120]	; (800d474 <HAL_PCD_MspInit+0xb4>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800d3fc:	f7fa feb4 	bl	8008168 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d400:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d402:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d404:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d408:	481b      	ldr	r0, [pc, #108]	; (800d478 <HAL_PCD_MspInit+0xb8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d40a:	f043 0301 	orr.w	r3, r3, #1
 800d40e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d412:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d416:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d418:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d41a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d41e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800d468 <HAL_PCD_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d422:	9300      	str	r3, [sp, #0]
 800d424:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d426:	2300      	movs	r3, #0
 800d428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d42c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d430:	f7f9 ff24 	bl	800727c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d434:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d438:	2200      	movs	r2, #0
 800d43a:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d43c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d440:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d442:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800d446:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d452:	f7f8 fa2f 	bl	80058b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d456:	2065      	movs	r0, #101	; 0x65
 800d458:	f7f8 fa6a 	bl	8005930 <HAL_NVIC_EnableIRQ>
}
 800d45c:	b036      	add	sp, #216	; 0xd8
 800d45e:	bd10      	pop	{r4, pc}
      Error_Handler();
 800d460:	f7f5 febc 	bl	80031dc <Error_Handler>
 800d464:	e7c9      	b.n	800d3fa <HAL_PCD_MspInit+0x3a>
 800d466:	bf00      	nop
 800d468:	00001800 	.word	0x00001800
 800d46c:	00000002 	.word	0x00000002
 800d470:	40080000 	.word	0x40080000
 800d474:	58024400 	.word	0x58024400
 800d478:	58020000 	.word	0x58020000

0800d47c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d47c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800d480:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d484:	f7ff b9de 	b.w	800c844 <USBD_LL_SetupStage>

0800d488 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d488:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800d48c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d490:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d494:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d498:	f7ff ba04 	b.w	800c8a4 <USBD_LL_DataOutStage>

0800d49c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d49c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800d4a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d4a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d4a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4aa:	f7ff ba2f 	b.w	800c90c <USBD_LL_DataInStage>
 800d4ae:	bf00      	nop

0800d4b0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d4b0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d4b4:	f7ff bace 	b.w	800ca54 <USBD_LL_SOF>

0800d4b8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4b8:	68c1      	ldr	r1, [r0, #12]
{
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d4be:	b111      	cbz	r1, 800d4c6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d4c0:	2902      	cmp	r1, #2
 800d4c2:	d10a      	bne.n	800d4da <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800d4c4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d4c6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800d4ca:	f7ff faa7 	bl	800ca1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d4ce:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800d4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d4d6:	f7ff ba75 	b.w	800c9c4 <USBD_LL_Reset>
    Error_Handler();
 800d4da:	f7f5 fe7f 	bl	80031dc <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d4de:	2101      	movs	r1, #1
 800d4e0:	e7f1      	b.n	800d4c6 <HAL_PCD_ResetCallback+0xe>
 800d4e2:	bf00      	nop

0800d4e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d4e8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d4ec:	f7ff fa9a 	bl	800ca24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d4f0:	6822      	ldr	r2, [r4, #0]
 800d4f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800d4f6:	f043 0301 	orr.w	r3, r3, #1
 800d4fa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d4fe:	6a23      	ldr	r3, [r4, #32]
 800d500:	b123      	cbz	r3, 800d50c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d502:	4a03      	ldr	r2, [pc, #12]	; (800d510 <HAL_PCD_SuspendCallback+0x2c>)
 800d504:	6913      	ldr	r3, [r2, #16]
 800d506:	f043 0306 	orr.w	r3, r3, #6
 800d50a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d50c:	bd10      	pop	{r4, pc}
 800d50e:	bf00      	nop
 800d510:	e000ed00 	.word	0xe000ed00

0800d514 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d514:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d518:	f7ff ba90 	b.w	800ca3c <USBD_LL_Resume>

0800d51c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d51c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d520:	f7ff bac0 	b.w	800caa4 <USBD_LL_IsoOUTIncomplete>

0800d524 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d524:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d528:	f7ff baa8 	b.w	800ca7c <USBD_LL_IsoINIncomplete>

0800d52c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d52c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d530:	f7ff bacc 	b.w	800cacc <USBD_LL_DevConnected>

0800d534 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d534:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800d538:	f7ff baca 	b.w	800cad0 <USBD_LL_DevDisconnected>
 800d53c:	0000      	movs	r0, r0
	...

0800d540 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d540:	7802      	ldrb	r2, [r0, #0]
 800d542:	b10a      	cbz	r2, 800d548 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800d544:	2000      	movs	r0, #0
 800d546:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d548:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800d5a8 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 800d54c:	4b1a      	ldr	r3, [pc, #104]	; (800d5b8 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d54e:	491b      	ldr	r1, [pc, #108]	; (800d5bc <USBD_LL_Init+0x7c>)
{
 800d550:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d552:	ed83 7b06 	vstr	d7, [r3, #24]
 800d556:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800d5b0 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d55a:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d55c:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d55e:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 800d560:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d564:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d568:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d56a:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d56c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d56e:	ed83 7b08 	vstr	d7, [r3, #32]
 800d572:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d576:	e9c3 1203 	strd	r1, r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d57a:	f7fa f843 	bl	8007604 <HAL_PCD_Init>
 800d57e:	b978      	cbnz	r0, 800d5a0 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d580:	2180      	movs	r1, #128	; 0x80
 800d582:	480d      	ldr	r0, [pc, #52]	; (800d5b8 <USBD_LL_Init+0x78>)
 800d584:	f7fa fdac 	bl	80080e0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d588:	2240      	movs	r2, #64	; 0x40
 800d58a:	2100      	movs	r1, #0
 800d58c:	480a      	ldr	r0, [pc, #40]	; (800d5b8 <USBD_LL_Init+0x78>)
 800d58e:	f7fa fd7d 	bl	800808c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d592:	2280      	movs	r2, #128	; 0x80
 800d594:	2101      	movs	r1, #1
 800d596:	4808      	ldr	r0, [pc, #32]	; (800d5b8 <USBD_LL_Init+0x78>)
 800d598:	f7fa fd78 	bl	800808c <HAL_PCDEx_SetTxFiFo>
}
 800d59c:	2000      	movs	r0, #0
 800d59e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d5a0:	f7f5 fe1c 	bl	80031dc <Error_Handler>
 800d5a4:	e7ec      	b.n	800d580 <USBD_LL_Init+0x40>
 800d5a6:	bf00      	nop
 800d5a8:	00000002 	.word	0x00000002
	...
 800d5b8:	2400edf0 	.word	0x2400edf0
 800d5bc:	40080000 	.word	0x40080000

0800d5c0 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5c0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d5c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d5c6:	f7fa f8b3 	bl	8007730 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d5ca:	2803      	cmp	r0, #3
 800d5cc:	d802      	bhi.n	800d5d4 <USBD_LL_Start+0x14>
 800d5ce:	4b02      	ldr	r3, [pc, #8]	; (800d5d8 <USBD_LL_Start+0x18>)
 800d5d0:	5c18      	ldrb	r0, [r3, r0]
}
 800d5d2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800d5d4:	2003      	movs	r0, #3
}
 800d5d6:	bd08      	pop	{r3, pc}
 800d5d8:	08018b90 	.word	0x08018b90

0800d5dc <USBD_LL_OpenEP>:
{
 800d5dc:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5de:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5e6:	4663      	mov	r3, ip
 800d5e8:	f7fa fc02 	bl	8007df0 <HAL_PCD_EP_Open>
  switch (hal_status)
 800d5ec:	2803      	cmp	r0, #3
 800d5ee:	d802      	bhi.n	800d5f6 <USBD_LL_OpenEP+0x1a>
 800d5f0:	4b02      	ldr	r3, [pc, #8]	; (800d5fc <USBD_LL_OpenEP+0x20>)
 800d5f2:	5c18      	ldrb	r0, [r3, r0]
}
 800d5f4:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5f6:	2003      	movs	r0, #3
}
 800d5f8:	bd08      	pop	{r3, pc}
 800d5fa:	bf00      	nop
 800d5fc:	08018b90 	.word	0x08018b90

0800d600 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d600:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d604:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d606:	f7fa fc31 	bl	8007e6c <HAL_PCD_EP_Close>
  switch (hal_status)
 800d60a:	2803      	cmp	r0, #3
 800d60c:	d802      	bhi.n	800d614 <USBD_LL_CloseEP+0x14>
 800d60e:	4b02      	ldr	r3, [pc, #8]	; (800d618 <USBD_LL_CloseEP+0x18>)
 800d610:	5c18      	ldrb	r0, [r3, r0]
}
 800d612:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d614:	2003      	movs	r0, #3
}
 800d616:	bd08      	pop	{r3, pc}
 800d618:	08018b90 	.word	0x08018b90

0800d61c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d61c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d620:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d622:	f7fa fcb3 	bl	8007f8c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800d626:	2803      	cmp	r0, #3
 800d628:	d802      	bhi.n	800d630 <USBD_LL_StallEP+0x14>
 800d62a:	4b02      	ldr	r3, [pc, #8]	; (800d634 <USBD_LL_StallEP+0x18>)
 800d62c:	5c18      	ldrb	r0, [r3, r0]
}
 800d62e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d630:	2003      	movs	r0, #3
}
 800d632:	bd08      	pop	{r3, pc}
 800d634:	08018b90 	.word	0x08018b90

0800d638 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d638:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d63c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d63e:	f7fa fce9 	bl	8008014 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800d642:	2803      	cmp	r0, #3
 800d644:	d802      	bhi.n	800d64c <USBD_LL_ClearStallEP+0x14>
 800d646:	4b02      	ldr	r3, [pc, #8]	; (800d650 <USBD_LL_ClearStallEP+0x18>)
 800d648:	5c18      	ldrb	r0, [r3, r0]
}
 800d64a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d64c:	2003      	movs	r0, #3
}
 800d64e:	bd08      	pop	{r3, pc}
 800d650:	08018b90 	.word	0x08018b90

0800d654 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d654:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d656:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800d65a:	d406      	bmi.n	800d66a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d65c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d660:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d664:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800d668:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d66a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d66e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d672:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d676:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800d67a:	4770      	bx	lr

0800d67c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d67c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d680:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d682:	f7fa fb9f 	bl	8007dc4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800d686:	2803      	cmp	r0, #3
 800d688:	d802      	bhi.n	800d690 <USBD_LL_SetUSBAddress+0x14>
 800d68a:	4b02      	ldr	r3, [pc, #8]	; (800d694 <USBD_LL_SetUSBAddress+0x18>)
 800d68c:	5c18      	ldrb	r0, [r3, r0]
}
 800d68e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d690:	2003      	movs	r0, #3
}
 800d692:	bd08      	pop	{r3, pc}
 800d694:	08018b90 	.word	0x08018b90

0800d698 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d698:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d69c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d69e:	f7fa fc4d 	bl	8007f3c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800d6a2:	2803      	cmp	r0, #3
 800d6a4:	d802      	bhi.n	800d6ac <USBD_LL_Transmit+0x14>
 800d6a6:	4b02      	ldr	r3, [pc, #8]	; (800d6b0 <USBD_LL_Transmit+0x18>)
 800d6a8:	5c18      	ldrb	r0, [r3, r0]
}
 800d6aa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d6ac:	2003      	movs	r0, #3
}
 800d6ae:	bd08      	pop	{r3, pc}
 800d6b0:	08018b90 	.word	0x08018b90

0800d6b4 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6b4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800d6b8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6ba:	f7fa fc0d 	bl	8007ed8 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800d6be:	2803      	cmp	r0, #3
 800d6c0:	d802      	bhi.n	800d6c8 <USBD_LL_PrepareReceive+0x14>
 800d6c2:	4b02      	ldr	r3, [pc, #8]	; (800d6cc <USBD_LL_PrepareReceive+0x18>)
 800d6c4:	5c18      	ldrb	r0, [r3, r0]
}
 800d6c6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6c8:	2003      	movs	r0, #3
}
 800d6ca:	bd08      	pop	{r3, pc}
 800d6cc:	08018b90 	.word	0x08018b90

0800d6d0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d6d0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800d6d4:	f7fa bc28 	b.w	8007f28 <HAL_PCD_EP_GetRxCount>

0800d6d8 <USBD_static_malloc>:
}
 800d6d8:	4800      	ldr	r0, [pc, #0]	; (800d6dc <USBD_static_malloc+0x4>)
 800d6da:	4770      	bx	lr
 800d6dc:	2400f1f8 	.word	0x2400f1f8

0800d6e0 <USBD_static_free>:
}
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop

0800d6e4 <arm_cfft_radix8by2_f32>:
 800d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	4608      	mov	r0, r1
 800d6ec:	ed2d 8b06 	vpush	{d8-d10}
 800d6f0:	f8b7 c000 	ldrh.w	ip, [r7]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800d6fa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800d6fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d702:	f000 80ac 	beq.w	800d85e <arm_cfft_radix8by2_f32+0x17a>
 800d706:	008c      	lsls	r4, r1, #2
 800d708:	f100 0310 	add.w	r3, r0, #16
 800d70c:	3210      	adds	r2, #16
 800d70e:	f108 0610 	add.w	r6, r8, #16
 800d712:	3410      	adds	r4, #16
 800d714:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800d718:	1905      	adds	r5, r0, r4
 800d71a:	4444      	add	r4, r8
 800d71c:	ed16 7a04 	vldr	s14, [r6, #-16]
 800d720:	3310      	adds	r3, #16
 800d722:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800d726:	3510      	adds	r5, #16
 800d728:	ed56 0a03 	vldr	s1, [r6, #-12]
 800d72c:	3210      	adds	r2, #16
 800d72e:	ee74 9a87 	vadd.f32	s19, s9, s14
 800d732:	ed56 7a02 	vldr	s15, [r6, #-8]
 800d736:	ed56 2a01 	vldr	s5, [r6, #-4]
 800d73a:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d73e:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d742:	3610      	adds	r6, #16
 800d744:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d748:	3410      	adds	r4, #16
 800d74a:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800d74e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800d752:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800d756:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800d75a:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800d75e:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800d762:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800d766:	ee33 8a83 	vadd.f32	s16, s7, s6
 800d76a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800d76e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800d772:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800d776:	ee34 0a06 	vadd.f32	s0, s8, s12
 800d77a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800d77e:	ee77 aa20 	vadd.f32	s21, s14, s1
 800d782:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800d786:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800d78a:	ee72 9a22 	vadd.f32	s19, s4, s5
 800d78e:	ee71 8a05 	vadd.f32	s17, s2, s10
 800d792:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800d796:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d79a:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800d79e:	ee35 5a41 	vsub.f32	s10, s10, s2
 800d7a2:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800d7a6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d7aa:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800d7ae:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800d7b2:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d7b6:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800d7ba:	ee72 7a62 	vsub.f32	s15, s4, s5
 800d7be:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800d7c2:	ee73 2a63 	vsub.f32	s5, s6, s7
 800d7c6:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800d7ca:	4563      	cmp	r3, ip
 800d7cc:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800d7d0:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d7d4:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d7d8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d7dc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d7e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d7e4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d7e8:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d7ec:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d7f0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d7f4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d7f8:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d7fc:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d800:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800d804:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800d808:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800d80c:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800d810:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800d814:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800d818:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d81c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d820:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d828:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d82c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d830:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d834:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d838:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d83c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d840:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d844:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d848:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800d84c:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800d850:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800d854:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800d858:	f47f af60 	bne.w	800d71c <arm_cfft_radix8by2_f32+0x38>
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	b28c      	uxth	r4, r1
 800d860:	2302      	movs	r3, #2
 800d862:	4621      	mov	r1, r4
 800d864:	f000 fda6 	bl	800e3b4 <arm_radix8_butterfly_f32>
 800d868:	4621      	mov	r1, r4
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	4640      	mov	r0, r8
 800d86e:	2302      	movs	r3, #2
 800d870:	ecbd 8b06 	vpop	{d8-d10}
 800d874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d878:	f000 bd9c 	b.w	800e3b4 <arm_radix8_butterfly_f32>

0800d87c <arm_cfft_radix8by4_f32>:
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	ed2d 8b04 	vpush	{d8-d9}
 800d884:	8804      	ldrh	r4, [r0, #0]
 800d886:	b08d      	sub	sp, #52	; 0x34
 800d888:	6842      	ldr	r2, [r0, #4]
 800d88a:	460d      	mov	r5, r1
 800d88c:	0864      	lsrs	r4, r4, #1
 800d88e:	edd1 7a00 	vldr	s15, [r1]
 800d892:	edd1 5a01 	vldr	s11, [r1, #4]
 800d896:	00a3      	lsls	r3, r4, #2
 800d898:	18ce      	adds	r6, r1, r3
 800d89a:	18f7      	adds	r7, r6, r3
 800d89c:	ed96 7a00 	vldr	s14, [r6]
 800d8a0:	ed96 4a01 	vldr	s8, [r6, #4]
 800d8a4:	ed97 6a00 	vldr	s12, [r7]
 800d8a8:	edd7 4a01 	vldr	s9, [r7, #4]
 800d8ac:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d8b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d8b4:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d8b8:	ee77 2a26 	vadd.f32	s5, s14, s13
 800d8bc:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d8c0:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d8c4:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d8c8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d8cc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d8d0:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d8d4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d8d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d8dc:	0860      	lsrs	r0, r4, #1
 800d8de:	f102 0408 	add.w	r4, r2, #8
 800d8e2:	9405      	str	r4, [sp, #20]
 800d8e4:	f102 0410 	add.w	r4, r2, #16
 800d8e8:	9009      	str	r0, [sp, #36]	; 0x24
 800d8ea:	f1a0 0902 	sub.w	r9, r0, #2
 800d8ee:	9403      	str	r4, [sp, #12]
 800d8f0:	18fc      	adds	r4, r7, r3
 800d8f2:	f102 0018 	add.w	r0, r2, #24
 800d8f6:	ed94 5a00 	vldr	s10, [r4]
 800d8fa:	ed94 3a01 	vldr	s6, [r4, #4]
 800d8fe:	ee72 2a85 	vadd.f32	s5, s5, s10
 800d902:	9004      	str	r0, [sp, #16]
 800d904:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d908:	4620      	mov	r0, r4
 800d90a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d90e:	9408      	str	r4, [sp, #32]
 800d910:	ee12 ca90 	vmov	ip, s5
 800d914:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d918:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d91c:	f845 cb08 	str.w	ip, [r5], #8
 800d920:	ee13 ca90 	vmov	ip, s7
 800d924:	ed96 2a01 	vldr	s4, [r6, #4]
 800d928:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d92c:	edd4 2a01 	vldr	s5, [r4, #4]
 800d930:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d934:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d938:	9500      	str	r5, [sp, #0]
 800d93a:	460d      	mov	r5, r1
 800d93c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d940:	ed81 6a01 	vstr	s12, [r1, #4]
 800d944:	4631      	mov	r1, r6
 800d946:	f841 cb08 	str.w	ip, [r1], #8
 800d94a:	ee16 ca90 	vmov	ip, s13
 800d94e:	9106      	str	r1, [sp, #24]
 800d950:	4639      	mov	r1, r7
 800d952:	edc6 4a01 	vstr	s9, [r6, #4]
 800d956:	f841 cb08 	str.w	ip, [r1], #8
 800d95a:	9102      	str	r1, [sp, #8]
 800d95c:	ee17 1a90 	vmov	r1, s15
 800d960:	edc7 5a01 	vstr	s11, [r7, #4]
 800d964:	f840 1b08 	str.w	r1, [r0], #8
 800d968:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800d96c:	9001      	str	r0, [sp, #4]
 800d96e:	ed84 7a01 	vstr	s14, [r4, #4]
 800d972:	9107      	str	r1, [sp, #28]
 800d974:	f000 8135 	beq.w	800dbe2 <arm_cfft_radix8by4_f32+0x366>
 800d978:	3b0c      	subs	r3, #12
 800d97a:	f102 0920 	add.w	r9, r2, #32
 800d97e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800d982:	4622      	mov	r2, r4
 800d984:	468b      	mov	fp, r1
 800d986:	f105 0e10 	add.w	lr, r5, #16
 800d98a:	4423      	add	r3, r4
 800d98c:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d990:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d994:	f106 0010 	add.w	r0, r6, #16
 800d998:	f1a7 010c 	sub.w	r1, r7, #12
 800d99c:	f107 0510 	add.w	r5, r7, #16
 800d9a0:	3c0c      	subs	r4, #12
 800d9a2:	3210      	adds	r2, #16
 800d9a4:	ed15 7a02 	vldr	s14, [r5, #-8]
 800d9a8:	f1bb 0b01 	subs.w	fp, fp, #1
 800d9ac:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d9b0:	f1ac 0c08 	sub.w	ip, ip, #8
 800d9b4:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d9b8:	f10e 0e08 	add.w	lr, lr, #8
 800d9bc:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d9c0:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d9c4:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d9c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9cc:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d9d0:	f10a 0a08 	add.w	sl, sl, #8
 800d9d4:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d9d8:	ed10 3a01 	vldr	s6, [r0, #-4]
 800d9dc:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d9e0:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d9e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d9e8:	f100 0008 	add.w	r0, r0, #8
 800d9ec:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d9f0:	f1a1 0108 	sub.w	r1, r1, #8
 800d9f4:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d9f8:	f109 0910 	add.w	r9, r9, #16
 800d9fc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800da00:	f105 0508 	add.w	r5, r5, #8
 800da04:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800da08:	ee37 5a66 	vsub.f32	s10, s14, s13
 800da0c:	ed50 5a03 	vldr	s11, [r0, #-12]
 800da10:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800da14:	ed12 6a01 	vldr	s12, [r2, #-4]
 800da18:	ee36 7a87 	vadd.f32	s14, s13, s14
 800da1c:	ee74 5a25 	vadd.f32	s11, s8, s11
 800da20:	f1a4 0408 	sub.w	r4, r4, #8
 800da24:	ee34 4a43 	vsub.f32	s8, s8, s6
 800da28:	f108 0818 	add.w	r8, r8, #24
 800da2c:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800da30:	f102 0208 	add.w	r2, r2, #8
 800da34:	ee75 5a86 	vadd.f32	s11, s11, s12
 800da38:	f1a3 0308 	sub.w	r3, r3, #8
 800da3c:	ee34 6a63 	vsub.f32	s12, s8, s7
 800da40:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800da44:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800da48:	ee35 5a24 	vadd.f32	s10, s10, s9
 800da4c:	ed94 4a04 	vldr	s8, [r4, #16]
 800da50:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800da54:	ed9c 3a04 	vldr	s6, [ip, #16]
 800da58:	ee37 7a64 	vsub.f32	s14, s14, s9
 800da5c:	edd1 7a04 	vldr	s15, [r1, #16]
 800da60:	ee73 6a04 	vadd.f32	s13, s6, s8
 800da64:	ed93 8a04 	vldr	s16, [r3, #16]
 800da68:	edd4 5a03 	vldr	s11, [r4, #12]
 800da6c:	ee33 3a44 	vsub.f32	s6, s6, s8
 800da70:	ed9c 2a03 	vldr	s4, [ip, #12]
 800da74:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800da78:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800da7c:	ed91 1a03 	vldr	s2, [r1, #12]
 800da80:	ee32 4a25 	vadd.f32	s8, s4, s11
 800da84:	edd3 2a03 	vldr	s5, [r3, #12]
 800da88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800da8c:	ee70 0a88 	vadd.f32	s1, s1, s16
 800da90:	ee73 4a41 	vsub.f32	s9, s6, s2
 800da94:	ee32 2a65 	vsub.f32	s4, s4, s11
 800da98:	edcc 0a04 	vstr	s1, [ip, #16]
 800da9c:	ee74 0a41 	vsub.f32	s1, s8, s2
 800daa0:	edd1 6a03 	vldr	s13, [r1, #12]
 800daa4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800daa8:	ed93 9a03 	vldr	s18, [r3, #12]
 800daac:	ee78 5a82 	vadd.f32	s11, s17, s4
 800dab0:	ee34 4a26 	vadd.f32	s8, s8, s13
 800dab4:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800dab8:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800dabc:	ee34 4a09 	vadd.f32	s8, s8, s18
 800dac0:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800dac4:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800dac8:	ed8c 4a03 	vstr	s8, [ip, #12]
 800dacc:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800dad0:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800dad4:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800dad8:	ee60 2a01 	vmul.f32	s5, s0, s2
 800dadc:	ee64 6a81 	vmul.f32	s13, s9, s2
 800dae0:	ee20 8a04 	vmul.f32	s16, s0, s8
 800dae4:	ee64 4a84 	vmul.f32	s9, s9, s8
 800dae8:	ee25 0a01 	vmul.f32	s0, s10, s2
 800daec:	ee25 5a04 	vmul.f32	s10, s10, s8
 800daf0:	ee25 4a84 	vmul.f32	s8, s11, s8
 800daf4:	ee65 5a81 	vmul.f32	s11, s11, s2
 800daf8:	ee35 5a62 	vsub.f32	s10, s10, s5
 800dafc:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800db00:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800db04:	ee38 1a00 	vadd.f32	s2, s16, s0
 800db08:	ed00 5a03 	vstr	s10, [r0, #-12]
 800db0c:	ed00 1a04 	vstr	s2, [r0, #-16]
 800db10:	ed81 4a04 	vstr	s8, [r1, #16]
 800db14:	edc1 5a03 	vstr	s11, [r1, #12]
 800db18:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800db1c:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800db20:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800db24:	ee66 2a25 	vmul.f32	s5, s12, s11
 800db28:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800db2c:	ee21 4a85 	vmul.f32	s8, s3, s10
 800db30:	ee60 7a85 	vmul.f32	s15, s1, s10
 800db34:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800db38:	ee26 6a05 	vmul.f32	s12, s12, s10
 800db3c:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800db40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800db44:	ee34 5a22 	vadd.f32	s10, s8, s5
 800db48:	ee36 6a61 	vsub.f32	s12, s12, s3
 800db4c:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800db50:	ed05 5a04 	vstr	s10, [r5, #-16]
 800db54:	ed05 6a03 	vstr	s12, [r5, #-12]
 800db58:	edc4 5a04 	vstr	s11, [r4, #16]
 800db5c:	edc4 6a03 	vstr	s13, [r4, #12]
 800db60:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800db64:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800db68:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800db6c:	ee67 5a27 	vmul.f32	s11, s14, s15
 800db70:	ee63 6a27 	vmul.f32	s13, s6, s15
 800db74:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800db78:	ee27 7a22 	vmul.f32	s14, s14, s5
 800db7c:	ee62 7a27 	vmul.f32	s15, s4, s15
 800db80:	ee23 3a22 	vmul.f32	s6, s6, s5
 800db84:	ee22 2a22 	vmul.f32	s4, s4, s5
 800db88:	ee36 6a25 	vadd.f32	s12, s12, s11
 800db8c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800db90:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800db94:	ee77 7a83 	vadd.f32	s15, s15, s6
 800db98:	ed02 6a04 	vstr	s12, [r2, #-16]
 800db9c:	ed02 7a03 	vstr	s14, [r2, #-12]
 800dba0:	ed83 2a04 	vstr	s4, [r3, #16]
 800dba4:	edc3 7a03 	vstr	s15, [r3, #12]
 800dba8:	f47f aefc 	bne.w	800d9a4 <arm_cfft_radix8by4_f32+0x128>
 800dbac:	9907      	ldr	r1, [sp, #28]
 800dbae:	9803      	ldr	r0, [sp, #12]
 800dbb0:	00cb      	lsls	r3, r1, #3
 800dbb2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800dbb6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800dbba:	9103      	str	r1, [sp, #12]
 800dbbc:	9900      	ldr	r1, [sp, #0]
 800dbbe:	4419      	add	r1, r3
 800dbc0:	9100      	str	r1, [sp, #0]
 800dbc2:	9905      	ldr	r1, [sp, #20]
 800dbc4:	4419      	add	r1, r3
 800dbc6:	9105      	str	r1, [sp, #20]
 800dbc8:	9906      	ldr	r1, [sp, #24]
 800dbca:	4419      	add	r1, r3
 800dbcc:	9106      	str	r1, [sp, #24]
 800dbce:	9902      	ldr	r1, [sp, #8]
 800dbd0:	4419      	add	r1, r3
 800dbd2:	9102      	str	r1, [sp, #8]
 800dbd4:	9901      	ldr	r1, [sp, #4]
 800dbd6:	4419      	add	r1, r3
 800dbd8:	9b04      	ldr	r3, [sp, #16]
 800dbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbde:	9101      	str	r1, [sp, #4]
 800dbe0:	9304      	str	r3, [sp, #16]
 800dbe2:	9b00      	ldr	r3, [sp, #0]
 800dbe4:	9902      	ldr	r1, [sp, #8]
 800dbe6:	ed93 7a00 	vldr	s14, [r3]
 800dbea:	edd1 7a00 	vldr	s15, [r1]
 800dbee:	9a06      	ldr	r2, [sp, #24]
 800dbf0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800dbf4:	9d01      	ldr	r5, [sp, #4]
 800dbf6:	edd2 6a00 	vldr	s13, [r2]
 800dbfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dbfe:	9b02      	ldr	r3, [sp, #8]
 800dc00:	ee76 3a86 	vadd.f32	s7, s13, s12
 800dc04:	ed95 3a00 	vldr	s6, [r5]
 800dc08:	ed93 5a01 	vldr	s10, [r3, #4]
 800dc0c:	ee36 6a66 	vsub.f32	s12, s12, s13
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	ee73 3a83 	vadd.f32	s7, s7, s6
 800dc16:	edd5 2a01 	vldr	s5, [r5, #4]
 800dc1a:	ed93 4a01 	vldr	s8, [r3, #4]
 800dc1e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800dc22:	9b00      	ldr	r3, [sp, #0]
 800dc24:	ee74 5a05 	vadd.f32	s11, s8, s10
 800dc28:	edd2 7a01 	vldr	s15, [r2, #4]
 800dc2c:	edc3 3a00 	vstr	s7, [r3]
 800dc30:	ee34 4a45 	vsub.f32	s8, s8, s10
 800dc34:	edd2 3a01 	vldr	s7, [r2, #4]
 800dc38:	ee77 4a87 	vadd.f32	s9, s15, s14
 800dc3c:	ed95 2a01 	vldr	s4, [r5, #4]
 800dc40:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800dc44:	9d05      	ldr	r5, [sp, #20]
 800dc46:	ee34 5a66 	vsub.f32	s10, s8, s13
 800dc4a:	9b00      	ldr	r3, [sp, #0]
 800dc4c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800dc50:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800dc54:	ee73 3a82 	vadd.f32	s7, s7, s4
 800dc58:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dc5a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800dc5e:	4621      	mov	r1, r4
 800dc60:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800dc64:	edc3 3a01 	vstr	s7, [r3, #4]
 800dc68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc6c:	edd5 3a00 	vldr	s7, [r5]
 800dc70:	ee76 6a84 	vadd.f32	s13, s13, s8
 800dc74:	ed95 7a01 	vldr	s14, [r5, #4]
 800dc78:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800dc7c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800dc80:	2304      	movs	r3, #4
 800dc82:	ee64 4a87 	vmul.f32	s9, s9, s14
 800dc86:	ee25 7a07 	vmul.f32	s14, s10, s14
 800dc8a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800dc8e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800dc92:	ee34 7a07 	vadd.f32	s14, s8, s14
 800dc96:	ee35 5a64 	vsub.f32	s10, s10, s9
 800dc9a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800dc9e:	ed82 7a00 	vstr	s14, [r2]
 800dca2:	ed82 5a01 	vstr	s10, [r2, #4]
 800dca6:	9a03      	ldr	r2, [sp, #12]
 800dca8:	edd2 4a01 	vldr	s9, [r2, #4]
 800dcac:	ed92 7a00 	vldr	s14, [r2]
 800dcb0:	9a02      	ldr	r2, [sp, #8]
 800dcb2:	ee26 5a07 	vmul.f32	s10, s12, s14
 800dcb6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800dcba:	ee25 7a87 	vmul.f32	s14, s11, s14
 800dcbe:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800dcc2:	ee37 6a46 	vsub.f32	s12, s14, s12
 800dcc6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800dcca:	edc2 5a00 	vstr	s11, [r2]
 800dcce:	ed82 6a01 	vstr	s12, [r2, #4]
 800dcd2:	9a04      	ldr	r2, [sp, #16]
 800dcd4:	9d01      	ldr	r5, [sp, #4]
 800dcd6:	edd2 5a01 	vldr	s11, [r2, #4]
 800dcda:	ed92 7a00 	vldr	s14, [r2]
 800dcde:	ee27 6a87 	vmul.f32	s12, s15, s14
 800dce2:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dce6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dcea:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dcee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcf2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dcf6:	edc5 7a01 	vstr	s15, [r5, #4]
 800dcfa:	edc5 6a00 	vstr	s13, [r5]
 800dcfe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800dd00:	686a      	ldr	r2, [r5, #4]
 800dd02:	f000 fb57 	bl	800e3b4 <arm_radix8_butterfly_f32>
 800dd06:	4630      	mov	r0, r6
 800dd08:	4621      	mov	r1, r4
 800dd0a:	686a      	ldr	r2, [r5, #4]
 800dd0c:	2304      	movs	r3, #4
 800dd0e:	f000 fb51 	bl	800e3b4 <arm_radix8_butterfly_f32>
 800dd12:	4638      	mov	r0, r7
 800dd14:	4621      	mov	r1, r4
 800dd16:	686a      	ldr	r2, [r5, #4]
 800dd18:	2304      	movs	r3, #4
 800dd1a:	f000 fb4b 	bl	800e3b4 <arm_radix8_butterfly_f32>
 800dd1e:	4621      	mov	r1, r4
 800dd20:	686a      	ldr	r2, [r5, #4]
 800dd22:	2304      	movs	r3, #4
 800dd24:	9808      	ldr	r0, [sp, #32]
 800dd26:	b00d      	add	sp, #52	; 0x34
 800dd28:	ecbd 8b04 	vpop	{d8-d9}
 800dd2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd30:	f000 bb40 	b.w	800e3b4 <arm_radix8_butterfly_f32>

0800dd34 <arm_cfft_f32>:
 800dd34:	2a01      	cmp	r2, #1
 800dd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	4606      	mov	r6, r0
 800dd3c:	4617      	mov	r7, r2
 800dd3e:	460c      	mov	r4, r1
 800dd40:	4698      	mov	r8, r3
 800dd42:	8805      	ldrh	r5, [r0, #0]
 800dd44:	d055      	beq.n	800ddf2 <arm_cfft_f32+0xbe>
 800dd46:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800dd4a:	d061      	beq.n	800de10 <arm_cfft_f32+0xdc>
 800dd4c:	d916      	bls.n	800dd7c <arm_cfft_f32+0x48>
 800dd4e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800dd52:	d01a      	beq.n	800dd8a <arm_cfft_f32+0x56>
 800dd54:	d946      	bls.n	800dde4 <arm_cfft_f32+0xb0>
 800dd56:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800dd5a:	d059      	beq.n	800de10 <arm_cfft_f32+0xdc>
 800dd5c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800dd60:	d105      	bne.n	800dd6e <arm_cfft_f32+0x3a>
 800dd62:	2301      	movs	r3, #1
 800dd64:	6872      	ldr	r2, [r6, #4]
 800dd66:	4629      	mov	r1, r5
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 fb23 	bl	800e3b4 <arm_radix8_butterfly_f32>
 800dd6e:	f1b8 0f00 	cmp.w	r8, #0
 800dd72:	d111      	bne.n	800dd98 <arm_cfft_f32+0x64>
 800dd74:	2f01      	cmp	r7, #1
 800dd76:	d016      	beq.n	800dda6 <arm_cfft_f32+0x72>
 800dd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd7c:	2d20      	cmp	r5, #32
 800dd7e:	d047      	beq.n	800de10 <arm_cfft_f32+0xdc>
 800dd80:	d934      	bls.n	800ddec <arm_cfft_f32+0xb8>
 800dd82:	2d40      	cmp	r5, #64	; 0x40
 800dd84:	d0ed      	beq.n	800dd62 <arm_cfft_f32+0x2e>
 800dd86:	2d80      	cmp	r5, #128	; 0x80
 800dd88:	d1f1      	bne.n	800dd6e <arm_cfft_f32+0x3a>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	f7ff fca9 	bl	800d6e4 <arm_cfft_radix8by2_f32>
 800dd92:	f1b8 0f00 	cmp.w	r8, #0
 800dd96:	d0ed      	beq.n	800dd74 <arm_cfft_f32+0x40>
 800dd98:	68b2      	ldr	r2, [r6, #8]
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	89b1      	ldrh	r1, [r6, #12]
 800dd9e:	f000 f83f 	bl	800de20 <arm_bitreversal_32>
 800dda2:	2f01      	cmp	r7, #1
 800dda4:	d1e8      	bne.n	800dd78 <arm_cfft_f32+0x44>
 800dda6:	ee07 5a90 	vmov	s15, r5
 800ddaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ddb6:	2d00      	cmp	r5, #0
 800ddb8:	d0de      	beq.n	800dd78 <arm_cfft_f32+0x44>
 800ddba:	f104 0108 	add.w	r1, r4, #8
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	ed11 7a02 	vldr	s14, [r1, #-8]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ddca:	3108      	adds	r1, #8
 800ddcc:	429d      	cmp	r5, r3
 800ddce:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ddd2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ddd6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ddda:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ddde:	d1ef      	bne.n	800ddc0 <arm_cfft_f32+0x8c>
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800dde8:	d0bb      	beq.n	800dd62 <arm_cfft_f32+0x2e>
 800ddea:	e7c0      	b.n	800dd6e <arm_cfft_f32+0x3a>
 800ddec:	2d10      	cmp	r5, #16
 800ddee:	d0cc      	beq.n	800dd8a <arm_cfft_f32+0x56>
 800ddf0:	e7bd      	b.n	800dd6e <arm_cfft_f32+0x3a>
 800ddf2:	b195      	cbz	r5, 800de1a <arm_cfft_f32+0xe6>
 800ddf4:	f101 030c 	add.w	r3, r1, #12
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ddfe:	3201      	adds	r2, #1
 800de00:	3308      	adds	r3, #8
 800de02:	eef1 7a67 	vneg.f32	s15, s15
 800de06:	4295      	cmp	r5, r2
 800de08:	ed43 7a04 	vstr	s15, [r3, #-16]
 800de0c:	d1f5      	bne.n	800ddfa <arm_cfft_f32+0xc6>
 800de0e:	e79a      	b.n	800dd46 <arm_cfft_f32+0x12>
 800de10:	4621      	mov	r1, r4
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff fd32 	bl	800d87c <arm_cfft_radix8by4_f32>
 800de18:	e7a9      	b.n	800dd6e <arm_cfft_f32+0x3a>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d0ac      	beq.n	800dd78 <arm_cfft_f32+0x44>
 800de1e:	e7bb      	b.n	800dd98 <arm_cfft_f32+0x64>

0800de20 <arm_bitreversal_32>:
 800de20:	b321      	cbz	r1, 800de6c <arm_bitreversal_32+0x4c>
 800de22:	f102 0c02 	add.w	ip, r2, #2
 800de26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de2a:	4690      	mov	r8, r2
 800de2c:	2500      	movs	r5, #0
 800de2e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800de32:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800de36:	3502      	adds	r5, #2
 800de38:	08a4      	lsrs	r4, r4, #2
 800de3a:	089b      	lsrs	r3, r3, #2
 800de3c:	428d      	cmp	r5, r1
 800de3e:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800de42:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800de46:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800de4a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800de4e:	f107 0704 	add.w	r7, r7, #4
 800de52:	f106 0604 	add.w	r6, r6, #4
 800de56:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800de5a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800de5e:	59c4      	ldr	r4, [r0, r7]
 800de60:	5983      	ldr	r3, [r0, r6]
 800de62:	51c3      	str	r3, [r0, r7]
 800de64:	5184      	str	r4, [r0, r6]
 800de66:	d3e2      	bcc.n	800de2e <arm_bitreversal_32+0xe>
 800de68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop

0800de70 <arm_fir_decimate_init_f32>:
 800de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de74:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800de78:	fbbc f4f2 	udiv	r4, ip, r2
 800de7c:	fb02 c414 	mls	r4, r2, r4, ip
 800de80:	b99c      	cbnz	r4, 800deaa <arm_fir_decimate_init_f32+0x3a>
 800de82:	460f      	mov	r7, r1
 800de84:	4616      	mov	r6, r2
 800de86:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800de8a:	4605      	mov	r5, r0
 800de8c:	443a      	add	r2, r7
 800de8e:	8069      	strh	r1, [r5, #2]
 800de90:	6043      	str	r3, [r0, #4]
 800de92:	4621      	mov	r1, r4
 800de94:	4462      	add	r2, ip
 800de96:	4640      	mov	r0, r8
 800de98:	0092      	lsls	r2, r2, #2
 800de9a:	f000 fd85 	bl	800e9a8 <memset>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f8c5 8008 	str.w	r8, [r5, #8]
 800dea4:	702e      	strb	r6, [r5, #0]
 800dea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deaa:	f06f 0001 	mvn.w	r0, #1
 800deae:	e7fa      	b.n	800dea6 <arm_fir_decimate_init_f32+0x36>

0800deb0 <arm_fir_decimate_f32>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	4605      	mov	r5, r0
 800deb6:	b08d      	sub	sp, #52	; 0x34
 800deb8:	4694      	mov	ip, r2
 800deba:	782c      	ldrb	r4, [r5, #0]
 800debc:	886f      	ldrh	r7, [r5, #2]
 800debe:	9001      	str	r0, [sp, #4]
 800dec0:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800dec4:	68ae      	ldr	r6, [r5, #8]
 800dec6:	4438      	add	r0, r7
 800dec8:	686d      	ldr	r5, [r5, #4]
 800deca:	9207      	str	r2, [sp, #28]
 800decc:	970a      	str	r7, [sp, #40]	; 0x28
 800dece:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800ded2:	9508      	str	r5, [sp, #32]
 800ded4:	fbb3 f3f4 	udiv	r3, r3, r4
 800ded8:	930b      	str	r3, [sp, #44]	; 0x2c
 800deda:	089b      	lsrs	r3, r3, #2
 800dedc:	9309      	str	r3, [sp, #36]	; 0x24
 800dede:	f000 80ef 	beq.w	800e0c0 <arm_fir_decimate_f32+0x210>
 800dee2:	08ba      	lsrs	r2, r7, #2
 800dee4:	462b      	mov	r3, r5
 800dee6:	3510      	adds	r5, #16
 800dee8:	f007 0703 	and.w	r7, r7, #3
 800deec:	9205      	str	r2, [sp, #20]
 800deee:	0112      	lsls	r2, r2, #4
 800def0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800def2:	f10c 0910 	add.w	r9, ip, #16
 800def6:	4413      	add	r3, r2
 800def8:	9100      	str	r1, [sp, #0]
 800defa:	eb05 0e02 	add.w	lr, r5, r2
 800defe:	4611      	mov	r1, r2
 800df00:	9503      	str	r5, [sp, #12]
 800df02:	9704      	str	r7, [sp, #16]
 800df04:	9002      	str	r0, [sp, #8]
 800df06:	9306      	str	r3, [sp, #24]
 800df08:	00a4      	lsls	r4, r4, #2
 800df0a:	4658      	mov	r0, fp
 800df0c:	9a00      	ldr	r2, [sp, #0]
 800df0e:	4623      	mov	r3, r4
 800df10:	f852 5b04 	ldr.w	r5, [r2], #4
 800df14:	3b01      	subs	r3, #1
 800df16:	f840 5b04 	str.w	r5, [r0], #4
 800df1a:	d1f9      	bne.n	800df10 <arm_fir_decimate_f32+0x60>
 800df1c:	9b01      	ldr	r3, [sp, #4]
 800df1e:	00a4      	lsls	r4, r4, #2
 800df20:	eddf 0abe 	vldr	s1, [pc, #760]	; 800e21c <arm_fir_decimate_f32+0x36c>
 800df24:	f893 8000 	ldrb.w	r8, [r3]
 800df28:	44a3      	add	fp, r4
 800df2a:	9b00      	ldr	r3, [sp, #0]
 800df2c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800df30:	4423      	add	r3, r4
 800df32:	eb06 0708 	add.w	r7, r6, r8
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	eb07 0c08 	add.w	ip, r7, r8
 800df3c:	9b05      	ldr	r3, [sp, #20]
 800df3e:	eb0c 0a08 	add.w	sl, ip, r8
 800df42:	2b00      	cmp	r3, #0
 800df44:	f000 815c 	beq.w	800e200 <arm_fir_decimate_f32+0x350>
 800df48:	eef0 4a60 	vmov.f32	s9, s1
 800df4c:	9b03      	ldr	r3, [sp, #12]
 800df4e:	eef0 7a60 	vmov.f32	s15, s1
 800df52:	f106 0510 	add.w	r5, r6, #16
 800df56:	eeb0 7a60 	vmov.f32	s14, s1
 800df5a:	f107 0410 	add.w	r4, r7, #16
 800df5e:	f10c 0010 	add.w	r0, ip, #16
 800df62:	f10a 0210 	add.w	r2, sl, #16
 800df66:	ed53 5a04 	vldr	s11, [r3, #-16]
 800df6a:	3310      	adds	r3, #16
 800df6c:	ed12 5a04 	vldr	s10, [r2, #-16]
 800df70:	3510      	adds	r5, #16
 800df72:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800df76:	3410      	adds	r4, #16
 800df78:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800df7c:	3010      	adds	r0, #16
 800df7e:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800df82:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800df86:	ee25 1a81 	vmul.f32	s2, s11, s2
 800df8a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800df8e:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800df92:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800df96:	ee65 5a85 	vmul.f32	s11, s11, s10
 800df9a:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800df9e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800dfa2:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dfa6:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800dfaa:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800dfae:	ee26 2a02 	vmul.f32	s4, s12, s4
 800dfb2:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800dfb6:	ee31 1a27 	vadd.f32	s2, s2, s15
 800dfba:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800dfbe:	ee66 7a22 	vmul.f32	s15, s12, s5
 800dfc2:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800dfc6:	ee26 3a03 	vmul.f32	s6, s12, s6
 800dfca:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800dfce:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800dfd2:	ed52 0a02 	vldr	s1, [r2, #-8]
 800dfd6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800dfda:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800dfde:	ee72 2a07 	vadd.f32	s5, s4, s14
 800dfe2:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800dfe6:	ee77 7a81 	vadd.f32	s15, s15, s2
 800dfea:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800dfee:	ee33 3a21 	vadd.f32	s6, s6, s3
 800dff2:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800dff6:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800dffa:	ed52 1a01 	vldr	s3, [r2, #-4]
 800dffe:	ee26 4a84 	vmul.f32	s8, s13, s8
 800e002:	459e      	cmp	lr, r3
 800e004:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800e008:	f102 0210 	add.w	r2, r2, #16
 800e00c:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800e010:	ee36 6a25 	vadd.f32	s12, s12, s11
 800e014:	ee25 7a07 	vmul.f32	s14, s10, s14
 800e018:	ee34 4a27 	vadd.f32	s8, s8, s15
 800e01c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800e020:	ee65 7a01 	vmul.f32	s15, s10, s2
 800e024:	ee25 3a02 	vmul.f32	s6, s10, s4
 800e028:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800e02c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e030:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e034:	ee37 7a23 	vadd.f32	s14, s14, s7
 800e038:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e03c:	ee73 4a24 	vadd.f32	s9, s6, s9
 800e040:	ee75 0a26 	vadd.f32	s1, s10, s13
 800e044:	d18f      	bne.n	800df66 <arm_fir_decimate_f32+0xb6>
 800e046:	440e      	add	r6, r1
 800e048:	440f      	add	r7, r1
 800e04a:	448c      	add	ip, r1
 800e04c:	eb0a 0001 	add.w	r0, sl, r1
 800e050:	9a06      	ldr	r2, [sp, #24]
 800e052:	9b04      	ldr	r3, [sp, #16]
 800e054:	b1db      	cbz	r3, 800e08e <arm_fir_decimate_f32+0x1de>
 800e056:	ecb2 5a01 	vldmia	r2!, {s10}
 800e05a:	3b01      	subs	r3, #1
 800e05c:	ecf6 2a01 	vldmia	r6!, {s5}
 800e060:	ecf7 3a01 	vldmia	r7!, {s7}
 800e064:	ecbc 4a01 	vldmia	ip!, {s8}
 800e068:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e06c:	ecf0 6a01 	vldmia	r0!, {s13}
 800e070:	ee65 3a23 	vmul.f32	s7, s10, s7
 800e074:	ee25 4a04 	vmul.f32	s8, s10, s8
 800e078:	ee25 5a26 	vmul.f32	s10, s10, s13
 800e07c:	ee37 7a22 	vadd.f32	s14, s14, s5
 800e080:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e084:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e088:	ee70 0a85 	vadd.f32	s1, s1, s10
 800e08c:	d1e3      	bne.n	800e056 <arm_fir_decimate_f32+0x1a6>
 800e08e:	9b02      	ldr	r3, [sp, #8]
 800e090:	eb0a 0608 	add.w	r6, sl, r8
 800e094:	ed09 7a04 	vstr	s14, [r9, #-16]
 800e098:	f109 0910 	add.w	r9, r9, #16
 800e09c:	3b01      	subs	r3, #1
 800e09e:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800e0a2:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800e0a6:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800e0aa:	9302      	str	r3, [sp, #8]
 800e0ac:	d002      	beq.n	800e0b4 <arm_fir_decimate_f32+0x204>
 800e0ae:	9b01      	ldr	r3, [sp, #4]
 800e0b0:	781c      	ldrb	r4, [r3, #0]
 800e0b2:	e729      	b.n	800df08 <arm_fir_decimate_f32+0x58>
 800e0b4:	9b07      	ldr	r3, [sp, #28]
 800e0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0b8:	9900      	ldr	r1, [sp, #0]
 800e0ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800e0be:	9307      	str	r3, [sp, #28]
 800e0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0c2:	f013 0803 	ands.w	r8, r3, #3
 800e0c6:	d067      	beq.n	800e198 <arm_fir_decimate_f32+0x2e8>
 800e0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ca:	9808      	ldr	r0, [sp, #32]
 800e0cc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800e0d0:	9d07      	ldr	r5, [sp, #28]
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	f003 0703 	and.w	r7, r3, #3
 800e0d8:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800e0dc:	f8cd e000 	str.w	lr, [sp]
 800e0e0:	3210      	adds	r2, #16
 800e0e2:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800e0e6:	eb00 090c 	add.w	r9, r0, ip
 800e0ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e0ee:	eb02 040c 	add.w	r4, r2, ip
 800e0f2:	46aa      	mov	sl, r5
 800e0f4:	9203      	str	r2, [sp, #12]
 800e0f6:	f89e 5000 	ldrb.w	r5, [lr]
 800e0fa:	4658      	mov	r0, fp
 800e0fc:	460a      	mov	r2, r1
 800e0fe:	462b      	mov	r3, r5
 800e100:	ecf2 7a01 	vldmia	r2!, {s15}
 800e104:	3b01      	subs	r3, #1
 800e106:	ece0 7a01 	vstmia	r0!, {s15}
 800e10a:	d1f9      	bne.n	800e100 <arm_fir_decimate_f32+0x250>
 800e10c:	00ad      	lsls	r5, r5, #2
 800e10e:	9b00      	ldr	r3, [sp, #0]
 800e110:	4429      	add	r1, r5
 800e112:	44ab      	add	fp, r5
 800e114:	2b00      	cmp	r3, #0
 800e116:	d07c      	beq.n	800e212 <arm_fir_decimate_f32+0x362>
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	f106 0210 	add.w	r2, r6, #16
 800e11e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800e21c <arm_fir_decimate_f32+0x36c>
 800e122:	ed13 7a04 	vldr	s14, [r3, #-16]
 800e126:	3310      	adds	r3, #16
 800e128:	ed52 6a04 	vldr	s13, [r2, #-16]
 800e12c:	3210      	adds	r2, #16
 800e12e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800e132:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e136:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800e13a:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800e13e:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e142:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800e146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e14a:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800e14e:	ee26 7a85 	vmul.f32	s14, s13, s10
 800e152:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800e156:	429c      	cmp	r4, r3
 800e158:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e15c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800e160:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e168:	d1db      	bne.n	800e122 <arm_fir_decimate_f32+0x272>
 800e16a:	eb06 000c 	add.w	r0, r6, ip
 800e16e:	464a      	mov	r2, r9
 800e170:	b157      	cbz	r7, 800e188 <arm_fir_decimate_f32+0x2d8>
 800e172:	463b      	mov	r3, r7
 800e174:	ecb2 7a01 	vldmia	r2!, {s14}
 800e178:	3b01      	subs	r3, #1
 800e17a:	ecf0 6a01 	vldmia	r0!, {s13}
 800e17e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e182:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e186:	d1f5      	bne.n	800e174 <arm_fir_decimate_f32+0x2c4>
 800e188:	f89e 3000 	ldrb.w	r3, [lr]
 800e18c:	ecea 7a01 	vstmia	sl!, {s15}
 800e190:	45c2      	cmp	sl, r8
 800e192:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800e196:	d1ae      	bne.n	800e0f6 <arm_fir_decimate_f32+0x246>
 800e198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19a:	1e5c      	subs	r4, r3, #1
 800e19c:	9b01      	ldr	r3, [sp, #4]
 800e19e:	08a5      	lsrs	r5, r4, #2
 800e1a0:	689f      	ldr	r7, [r3, #8]
 800e1a2:	d01d      	beq.n	800e1e0 <arm_fir_decimate_f32+0x330>
 800e1a4:	f106 0210 	add.w	r2, r6, #16
 800e1a8:	f107 0310 	add.w	r3, r7, #16
 800e1ac:	4629      	mov	r1, r5
 800e1ae:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800e1b2:	3901      	subs	r1, #1
 800e1b4:	f102 0210 	add.w	r2, r2, #16
 800e1b8:	f103 0310 	add.w	r3, r3, #16
 800e1bc:	f843 0c20 	str.w	r0, [r3, #-32]
 800e1c0:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800e1c4:	f843 0c1c 	str.w	r0, [r3, #-28]
 800e1c8:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800e1cc:	f843 0c18 	str.w	r0, [r3, #-24]
 800e1d0:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800e1d4:	f843 0c14 	str.w	r0, [r3, #-20]
 800e1d8:	d1e9      	bne.n	800e1ae <arm_fir_decimate_f32+0x2fe>
 800e1da:	012d      	lsls	r5, r5, #4
 800e1dc:	442e      	add	r6, r5
 800e1de:	442f      	add	r7, r5
 800e1e0:	f014 0403 	ands.w	r4, r4, #3
 800e1e4:	d009      	beq.n	800e1fa <arm_fir_decimate_f32+0x34a>
 800e1e6:	6833      	ldr	r3, [r6, #0]
 800e1e8:	3c01      	subs	r4, #1
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	d005      	beq.n	800e1fa <arm_fir_decimate_f32+0x34a>
 800e1ee:	6873      	ldr	r3, [r6, #4]
 800e1f0:	2c01      	cmp	r4, #1
 800e1f2:	607b      	str	r3, [r7, #4]
 800e1f4:	d001      	beq.n	800e1fa <arm_fir_decimate_f32+0x34a>
 800e1f6:	68b3      	ldr	r3, [r6, #8]
 800e1f8:	60bb      	str	r3, [r7, #8]
 800e1fa:	b00d      	add	sp, #52	; 0x34
 800e1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e200:	4650      	mov	r0, sl
 800e202:	9a08      	ldr	r2, [sp, #32]
 800e204:	eef0 4a60 	vmov.f32	s9, s1
 800e208:	eef0 7a60 	vmov.f32	s15, s1
 800e20c:	eeb0 7a60 	vmov.f32	s14, s1
 800e210:	e71f      	b.n	800e052 <arm_fir_decimate_f32+0x1a2>
 800e212:	9a08      	ldr	r2, [sp, #32]
 800e214:	4630      	mov	r0, r6
 800e216:	eddf 7a01 	vldr	s15, [pc, #4]	; 800e21c <arm_fir_decimate_f32+0x36c>
 800e21a:	e7a9      	b.n	800e170 <arm_fir_decimate_f32+0x2c0>
 800e21c:	00000000 	.word	0x00000000

0800e220 <arm_cmplx_mult_cmplx_f32>:
 800e220:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800e224:	b4f0      	push	{r4, r5, r6, r7}
 800e226:	d073      	beq.n	800e310 <arm_cmplx_mult_cmplx_f32+0xf0>
 800e228:	f100 0620 	add.w	r6, r0, #32
 800e22c:	f101 0520 	add.w	r5, r1, #32
 800e230:	f102 0420 	add.w	r4, r2, #32
 800e234:	4667      	mov	r7, ip
 800e236:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800e23a:	3f01      	subs	r7, #1
 800e23c:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800e240:	f105 0520 	add.w	r5, r5, #32
 800e244:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800e248:	f106 0620 	add.w	r6, r6, #32
 800e24c:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800e250:	f104 0420 	add.w	r4, r4, #32
 800e254:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e258:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e25c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e260:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e264:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e268:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e26c:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800e270:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800e274:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800e278:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800e27c:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800e280:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800e284:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e288:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e28c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e290:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e294:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e298:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e29c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800e2a0:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800e2a4:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800e2a8:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800e2ac:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800e2b0:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800e2b4:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e2b8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e2bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e2c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e2c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2c8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e2cc:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800e2d0:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800e2d4:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800e2d8:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800e2dc:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800e2e0:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800e2e4:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e2e8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e2ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e2f0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e2f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2f8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e2fc:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800e300:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800e304:	d197      	bne.n	800e236 <arm_cmplx_mult_cmplx_f32+0x16>
 800e306:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800e30a:	4420      	add	r0, r4
 800e30c:	4421      	add	r1, r4
 800e30e:	4422      	add	r2, r4
 800e310:	f013 0303 	ands.w	r3, r3, #3
 800e314:	d04b      	beq.n	800e3ae <arm_cmplx_mult_cmplx_f32+0x18e>
 800e316:	edd0 5a00 	vldr	s11, [r0]
 800e31a:	3b01      	subs	r3, #1
 800e31c:	edd1 7a00 	vldr	s15, [r1]
 800e320:	edd0 6a01 	vldr	s13, [r0, #4]
 800e324:	ed91 7a01 	vldr	s14, [r1, #4]
 800e328:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800e32c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e330:	ee67 6a26 	vmul.f32	s13, s14, s13
 800e334:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e338:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e33c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e340:	edc2 6a00 	vstr	s13, [r2]
 800e344:	edc2 7a01 	vstr	s15, [r2, #4]
 800e348:	d031      	beq.n	800e3ae <arm_cmplx_mult_cmplx_f32+0x18e>
 800e34a:	edd0 7a02 	vldr	s15, [r0, #8]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	ed91 7a02 	vldr	s14, [r1, #8]
 800e354:	edd0 6a03 	vldr	s13, [r0, #12]
 800e358:	edd1 5a03 	vldr	s11, [r1, #12]
 800e35c:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e360:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e364:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e368:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e36c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e370:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e374:	edc2 7a03 	vstr	s15, [r2, #12]
 800e378:	edc2 6a02 	vstr	s13, [r2, #8]
 800e37c:	d017      	beq.n	800e3ae <arm_cmplx_mult_cmplx_f32+0x18e>
 800e37e:	edd0 7a04 	vldr	s15, [r0, #16]
 800e382:	ed91 7a04 	vldr	s14, [r1, #16]
 800e386:	edd0 6a05 	vldr	s13, [r0, #20]
 800e38a:	edd1 5a05 	vldr	s11, [r1, #20]
 800e38e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800e392:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e396:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e39a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e39e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3a2:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e3a6:	edc2 7a05 	vstr	s15, [r2, #20]
 800e3aa:	edc2 6a04 	vstr	s13, [r2, #16]
 800e3ae:	bcf0      	pop	{r4, r5, r6, r7}
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop

0800e3b4 <arm_radix8_butterfly_f32>:
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	ed2d 8b10 	vpush	{d8-d15}
 800e3bc:	b095      	sub	sp, #84	; 0x54
 800e3be:	468a      	mov	sl, r1
 800e3c0:	468b      	mov	fp, r1
 800e3c2:	eddf 8abb 	vldr	s17, [pc, #748]	; 800e6b0 <arm_radix8_butterfly_f32+0x2fc>
 800e3c6:	9012      	str	r0, [sp, #72]	; 0x48
 800e3c8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e3d2:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800e3d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e3d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e3dc:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800e3e0:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800e3e4:	920f      	str	r2, [sp, #60]	; 0x3c
 800e3e6:	9303      	str	r3, [sp, #12]
 800e3e8:	0153      	lsls	r3, r2, #5
 800e3ea:	0114      	lsls	r4, r2, #4
 800e3ec:	eba9 0002 	sub.w	r0, r9, r2
 800e3f0:	18ce      	adds	r6, r1, r3
 800e3f2:	9302      	str	r3, [sp, #8]
 800e3f4:	0097      	lsls	r7, r2, #2
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	eb06 0509 	add.w	r5, r6, r9
 800e3fc:	9004      	str	r0, [sp, #16]
 800e3fe:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800e402:	1bd2      	subs	r2, r2, r7
 800e404:	eb05 0109 	add.w	r1, r5, r9
 800e408:	441f      	add	r7, r3
 800e40a:	9405      	str	r4, [sp, #20]
 800e40c:	f109 0004 	add.w	r0, r9, #4
 800e410:	9101      	str	r1, [sp, #4]
 800e412:	1d21      	adds	r1, r4, #4
 800e414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e416:	f04f 0e00 	mov.w	lr, #0
 800e41a:	9c01      	ldr	r4, [sp, #4]
 800e41c:	4418      	add	r0, r3
 800e41e:	4419      	add	r1, r3
 800e420:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800e424:	9b02      	ldr	r3, [sp, #8]
 800e426:	00fc      	lsls	r4, r7, #3
 800e428:	18d7      	adds	r7, r2, r3
 800e42a:	9b04      	ldr	r3, [sp, #16]
 800e42c:	9406      	str	r4, [sp, #24]
 800e42e:	00db      	lsls	r3, r3, #3
 800e430:	9c01      	ldr	r4, [sp, #4]
 800e432:	9307      	str	r3, [sp, #28]
 800e434:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800e438:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800e43c:	9304      	str	r3, [sp, #16]
 800e43e:	9b03      	ldr	r3, [sp, #12]
 800e440:	edd6 6a00 	vldr	s13, [r6]
 800e444:	44de      	add	lr, fp
 800e446:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800e44a:	ed94 7a00 	vldr	s14, [r4]
 800e44e:	45f2      	cmp	sl, lr
 800e450:	ed10 6a01 	vldr	s12, [r0, #-4]
 800e454:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800e458:	edd5 2a00 	vldr	s5, [r5]
 800e45c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e460:	edd7 3a00 	vldr	s7, [r7]
 800e464:	ed11 5a01 	vldr	s10, [r1, #-4]
 800e468:	ee36 3a22 	vadd.f32	s6, s12, s5
 800e46c:	edd2 6a00 	vldr	s13, [r2]
 800e470:	ee75 5a07 	vadd.f32	s11, s10, s14
 800e474:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800e478:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800e47c:	ee72 4a25 	vadd.f32	s9, s4, s11
 800e480:	ee73 3a04 	vadd.f32	s7, s6, s8
 800e484:	ee35 5a47 	vsub.f32	s10, s10, s14
 800e488:	ee36 7a62 	vsub.f32	s14, s12, s5
 800e48c:	ee32 2a65 	vsub.f32	s4, s4, s11
 800e490:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800e494:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800e498:	ee37 6a66 	vsub.f32	s12, s14, s13
 800e49c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800e4a0:	ee33 3a44 	vsub.f32	s6, s6, s8
 800e4a4:	edc6 4a00 	vstr	s9, [r6]
 800e4a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e4ac:	ed97 4a01 	vldr	s8, [r7, #4]
 800e4b0:	ee66 6a28 	vmul.f32	s13, s12, s17
 800e4b4:	edd0 5a00 	vldr	s11, [r0]
 800e4b8:	ed95 6a01 	vldr	s12, [r5, #4]
 800e4bc:	ee27 7a28 	vmul.f32	s14, s14, s17
 800e4c0:	edd2 3a01 	vldr	s7, [r2, #4]
 800e4c4:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800e4c8:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800e4cc:	ed96 1a01 	vldr	s2, [r6, #4]
 800e4d0:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800e4d4:	edd4 0a01 	vldr	s1, [r4, #4]
 800e4d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e4dc:	eddc 6a00 	vldr	s13, [ip]
 800e4e0:	ee75 5a86 	vadd.f32	s11, s11, s12
 800e4e4:	ed91 6a00 	vldr	s12, [r1]
 800e4e8:	ee73 3a84 	vadd.f32	s7, s7, s8
 800e4ec:	ee74 1a80 	vadd.f32	s3, s9, s0
 800e4f0:	ee36 4a81 	vadd.f32	s8, s13, s2
 800e4f4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e4f8:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800e4fc:	ee36 1a20 	vadd.f32	s2, s12, s1
 800e500:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800e504:	ee36 6a60 	vsub.f32	s12, s12, s1
 800e508:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800e50c:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800e510:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800e514:	ee74 3a01 	vadd.f32	s7, s8, s2
 800e518:	ee34 4a41 	vsub.f32	s8, s8, s2
 800e51c:	ee36 1a21 	vadd.f32	s2, s12, s3
 800e520:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800e524:	ee36 6a61 	vsub.f32	s12, s12, s3
 800e528:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800e52c:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800e530:	ed8c 0a00 	vstr	s0, [ip]
 800e534:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800e538:	449c      	add	ip, r3
 800e53a:	ee75 4a07 	vadd.f32	s9, s10, s14
 800e53e:	edc6 3a01 	vstr	s7, [r6, #4]
 800e542:	ee35 7a47 	vsub.f32	s14, s10, s14
 800e546:	441e      	add	r6, r3
 800e548:	ee32 5a25 	vadd.f32	s10, s4, s11
 800e54c:	ee72 5a65 	vsub.f32	s11, s4, s11
 800e550:	ee72 3a81 	vadd.f32	s7, s5, s2
 800e554:	ed01 5a01 	vstr	s10, [r1, #-4]
 800e558:	ee34 2a43 	vsub.f32	s4, s8, s6
 800e55c:	edc4 5a00 	vstr	s11, [r4]
 800e560:	ee37 5a86 	vadd.f32	s10, s15, s12
 800e564:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800e568:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e56c:	ed81 2a00 	vstr	s4, [r1]
 800e570:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800e574:	4419      	add	r1, r3
 800e576:	ee33 4a04 	vadd.f32	s8, s6, s8
 800e57a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800e57e:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800e582:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e586:	ed84 4a01 	vstr	s8, [r4, #4]
 800e58a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800e58e:	441c      	add	r4, r3
 800e590:	edc7 2a00 	vstr	s5, [r7]
 800e594:	ed85 5a00 	vstr	s10, [r5]
 800e598:	edc2 7a00 	vstr	s15, [r2]
 800e59c:	edc0 5a00 	vstr	s11, [r0]
 800e5a0:	4418      	add	r0, r3
 800e5a2:	edc7 4a01 	vstr	s9, [r7, #4]
 800e5a6:	441f      	add	r7, r3
 800e5a8:	ed85 6a01 	vstr	s12, [r5, #4]
 800e5ac:	441d      	add	r5, r3
 800e5ae:	ed82 7a01 	vstr	s14, [r2, #4]
 800e5b2:	441a      	add	r2, r3
 800e5b4:	f63f af44 	bhi.w	800e440 <arm_radix8_butterfly_f32+0x8c>
 800e5b8:	469c      	mov	ip, r3
 800e5ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5bc:	2b07      	cmp	r3, #7
 800e5be:	f240 81b6 	bls.w	800e92e <arm_radix8_butterfly_f32+0x57a>
 800e5c2:	9a02      	ldr	r2, [sp, #8]
 800e5c4:	f109 0608 	add.w	r6, r9, #8
 800e5c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e5ca:	f108 0408 	add.w	r4, r8, #8
 800e5ce:	3208      	adds	r2, #8
 800e5d0:	9f06      	ldr	r7, [sp, #24]
 800e5d2:	9d04      	ldr	r5, [sp, #16]
 800e5d4:	189a      	adds	r2, r3, r2
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	3508      	adds	r5, #8
 800e5da:	9807      	ldr	r0, [sp, #28]
 800e5dc:	920c      	str	r2, [sp, #48]	; 0x30
 800e5de:	199a      	adds	r2, r3, r6
 800e5e0:	9905      	ldr	r1, [sp, #20]
 800e5e2:	3008      	adds	r0, #8
 800e5e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e5e6:	19da      	adds	r2, r3, r7
 800e5e8:	310c      	adds	r1, #12
 800e5ea:	920a      	str	r2, [sp, #40]	; 0x28
 800e5ec:	195a      	adds	r2, r3, r5
 800e5ee:	9209      	str	r2, [sp, #36]	; 0x24
 800e5f0:	191a      	adds	r2, r3, r4
 800e5f2:	9208      	str	r2, [sp, #32]
 800e5f4:	181a      	adds	r2, r3, r0
 800e5f6:	9207      	str	r2, [sp, #28]
 800e5f8:	185a      	adds	r2, r3, r1
 800e5fa:	330c      	adds	r3, #12
 800e5fc:	9205      	str	r2, [sp, #20]
 800e5fe:	9306      	str	r3, [sp, #24]
 800e600:	2301      	movs	r3, #1
 800e602:	9304      	str	r3, [sp, #16]
 800e604:	2300      	movs	r3, #0
 800e606:	930d      	str	r3, [sp, #52]	; 0x34
 800e608:	4663      	mov	r3, ip
 800e60a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e60c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e60e:	f8dd c014 	ldr.w	ip, [sp, #20]
 800e612:	440a      	add	r2, r1
 800e614:	9f06      	ldr	r7, [sp, #24]
 800e616:	9e07      	ldr	r6, [sp, #28]
 800e618:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800e61c:	920d      	str	r2, [sp, #52]	; 0x34
 800e61e:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800e622:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e624:	9d08      	ldr	r5, [sp, #32]
 800e626:	4442      	add	r2, r8
 800e628:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e62a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e62c:	eb02 0108 	add.w	r1, r2, r8
 800e630:	ed92 ea00 	vldr	s28, [r2]
 800e634:	eb01 0208 	add.w	r2, r1, r8
 800e638:	edd1 da00 	vldr	s27, [r1]
 800e63c:	eb02 0108 	add.w	r1, r2, r8
 800e640:	ed92 da00 	vldr	s26, [r2]
 800e644:	eb01 0208 	add.w	r2, r1, r8
 800e648:	edd1 ca00 	vldr	s25, [r1]
 800e64c:	eb02 0108 	add.w	r1, r2, r8
 800e650:	ed92 ca00 	vldr	s24, [r2]
 800e654:	eb01 0208 	add.w	r2, r1, r8
 800e658:	edd1 ba00 	vldr	s23, [r1]
 800e65c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e65e:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800e662:	ed92 ba00 	vldr	s22, [r2]
 800e666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e668:	eb0e 0908 	add.w	r9, lr, r8
 800e66c:	910e      	str	r1, [sp, #56]	; 0x38
 800e66e:	9201      	str	r2, [sp, #4]
 800e670:	eb09 0208 	add.w	r2, r9, r8
 800e674:	ed99 aa01 	vldr	s20, [r9, #4]
 800e678:	edde aa01 	vldr	s21, [lr, #4]
 800e67c:	eb02 0908 	add.w	r9, r2, r8
 800e680:	edd2 9a01 	vldr	s19, [r2, #4]
 800e684:	f8dd e010 	ldr.w	lr, [sp, #16]
 800e688:	eb09 0208 	add.w	r2, r9, r8
 800e68c:	ed99 9a01 	vldr	s18, [r9, #4]
 800e690:	eb02 0908 	add.w	r9, r2, r8
 800e694:	ed92 8a01 	vldr	s16, [r2, #4]
 800e698:	9a01      	ldr	r2, [sp, #4]
 800e69a:	edd9 7a01 	vldr	s15, [r9, #4]
 800e69e:	44c8      	add	r8, r9
 800e6a0:	edcd 7a02 	vstr	s15, [sp, #8]
 800e6a4:	edd8 7a01 	vldr	s15, [r8, #4]
 800e6a8:	edcd 7a03 	vstr	s15, [sp, #12]
 800e6ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e6ae:	e001      	b.n	800e6b4 <arm_radix8_butterfly_f32+0x300>
 800e6b0:	3f3504f3 	.word	0x3f3504f3
 800e6b4:	ed92 7a00 	vldr	s14, [r2]
 800e6b8:	44de      	add	lr, fp
 800e6ba:	ed17 1a01 	vldr	s2, [r7, #-4]
 800e6be:	ed90 5a00 	vldr	s10, [r0]
 800e6c2:	45f2      	cmp	sl, lr
 800e6c4:	ed1c fa01 	vldr	s30, [ip, #-4]
 800e6c8:	ee31 3a07 	vadd.f32	s6, s2, s14
 800e6cc:	edd6 5a00 	vldr	s11, [r6]
 800e6d0:	ee31 1a47 	vsub.f32	s2, s2, s14
 800e6d4:	edd4 7a00 	vldr	s15, [r4]
 800e6d8:	ed95 7a00 	vldr	s14, [r5]
 800e6dc:	ed91 4a00 	vldr	s8, [r1]
 800e6e0:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800e6e4:	ee77 6a25 	vadd.f32	s13, s14, s11
 800e6e8:	edd7 ea00 	vldr	s29, [r7]
 800e6ec:	ee74 fa05 	vadd.f32	s31, s8, s10
 800e6f0:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e6f4:	ee34 4a45 	vsub.f32	s8, s8, s10
 800e6f8:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800e6fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e700:	ee33 3a46 	vsub.f32	s6, s6, s12
 800e704:	ee31 6a85 	vadd.f32	s12, s3, s10
 800e708:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800e70c:	ee34 fa07 	vadd.f32	s30, s8, s14
 800e710:	ed07 6a01 	vstr	s12, [r7, #-4]
 800e714:	ee34 4a47 	vsub.f32	s8, s8, s14
 800e718:	edd5 3a01 	vldr	s7, [r5, #4]
 800e71c:	ee7f fae6 	vsub.f32	s31, s31, s13
 800e720:	ed90 7a01 	vldr	s14, [r0, #4]
 800e724:	ee2f fa28 	vmul.f32	s30, s30, s17
 800e728:	edd1 5a01 	vldr	s11, [r1, #4]
 800e72c:	ee24 4a28 	vmul.f32	s8, s8, s17
 800e730:	ed96 6a01 	vldr	s12, [r6, #4]
 800e734:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800e738:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800e73c:	edd2 6a01 	vldr	s13, [r2, #4]
 800e740:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800e744:	edd4 4a01 	vldr	s9, [r4, #4]
 800e748:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e74c:	ed9c 7a00 	vldr	s14, [ip]
 800e750:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800e754:	ee33 6a86 	vadd.f32	s12, s7, s12
 800e758:	ee37 facf 	vsub.f32	s30, s15, s30
 800e75c:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800e760:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800e764:	ee7e eae6 	vsub.f32	s29, s29, s13
 800e768:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800e76c:	ee77 6a24 	vadd.f32	s13, s14, s9
 800e770:	ee75 0a86 	vadd.f32	s1, s11, s12
 800e774:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e778:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800e77c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e780:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800e784:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800e788:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800e78c:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800e790:	ee77 4a22 	vadd.f32	s9, s14, s5
 800e794:	ee7e eae7 	vsub.f32	s29, s29, s15
 800e798:	ee77 7a62 	vsub.f32	s15, s14, s5
 800e79c:	ee71 2a04 	vadd.f32	s5, s2, s8
 800e7a0:	ee31 7a44 	vsub.f32	s14, s2, s8
 800e7a4:	ee30 1a60 	vsub.f32	s2, s0, s1
 800e7a8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e7ac:	ee33 6a46 	vsub.f32	s12, s6, s12
 800e7b0:	ee33 3aef 	vsub.f32	s6, s7, s31
 800e7b4:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800e7b8:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800e7bc:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800e7c0:	ee72 5a25 	vadd.f32	s11, s4, s11
 800e7c4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800e7c8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800e7cc:	ee77 2a27 	vadd.f32	s5, s14, s15
 800e7d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e7d4:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800e7d8:	ee2c fa85 	vmul.f32	s30, s25, s10
 800e7dc:	ee69 ea01 	vmul.f32	s29, s18, s2
 800e7e0:	ee29 5a05 	vmul.f32	s10, s18, s10
 800e7e4:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800e7e8:	ee6d faa1 	vmul.f32	s31, s27, s3
 800e7ec:	ee70 0a20 	vadd.f32	s1, s0, s1
 800e7f0:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800e7f4:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800e7f8:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800e7fc:	edc7 0a00 	vstr	s1, [r7]
 800e800:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800e804:	441f      	add	r7, r3
 800e806:	ee2a faa3 	vmul.f32	s30, s21, s7
 800e80a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800e80e:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800e812:	edc2 ea00 	vstr	s29, [r2]
 800e816:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800e81a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e81e:	ed82 5a01 	vstr	s10, [r2, #4]
 800e822:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800e826:	edcd 3a01 	vstr	s7, [sp, #4]
 800e82a:	ed9d 5a03 	vldr	s10, [sp, #12]
 800e82e:	ee6b ea86 	vmul.f32	s29, s23, s12
 800e832:	eddd 3a02 	vldr	s7, [sp, #8]
 800e836:	ee6b fa24 	vmul.f32	s31, s22, s9
 800e83a:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800e83e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e842:	ed8c 3a00 	vstr	s6, [ip]
 800e846:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800e84a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e84e:	eddd 3a01 	vldr	s7, [sp, #4]
 800e852:	ee25 5a25 	vmul.f32	s10, s10, s11
 800e856:	441a      	add	r2, r3
 800e858:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800e85c:	449c      	add	ip, r3
 800e85e:	ee68 1a04 	vmul.f32	s3, s16, s8
 800e862:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800e866:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800e86a:	ee29 faa7 	vmul.f32	s30, s19, s15
 800e86e:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800e872:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800e876:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800e87a:	ee68 2a22 	vmul.f32	s5, s16, s5
 800e87e:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800e882:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e886:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e88a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e88e:	ee7e ea81 	vadd.f32	s29, s29, s2
 800e892:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e896:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800e89a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e89e:	edc4 ea00 	vstr	s29, [r4]
 800e8a2:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e8a6:	ed84 6a01 	vstr	s12, [r4, #4]
 800e8aa:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e8ae:	edc1 0a00 	vstr	s1, [r1]
 800e8b2:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800e8b6:	edc1 3a01 	vstr	s7, [r1, #4]
 800e8ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e8be:	ed86 5a00 	vstr	s10, [r6]
 800e8c2:	edc6 4a01 	vstr	s9, [r6, #4]
 800e8c6:	4419      	add	r1, r3
 800e8c8:	ed80 0a00 	vstr	s0, [r0]
 800e8cc:	441c      	add	r4, r3
 800e8ce:	edc0 2a01 	vstr	s5, [r0, #4]
 800e8d2:	441e      	add	r6, r3
 800e8d4:	ed85 3a00 	vstr	s6, [r5]
 800e8d8:	4418      	add	r0, r3
 800e8da:	ed85 7a01 	vstr	s14, [r5, #4]
 800e8de:	441d      	add	r5, r3
 800e8e0:	f63f aee8 	bhi.w	800e6b4 <arm_radix8_butterfly_f32+0x300>
 800e8e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e8e6:	9a04      	ldr	r2, [sp, #16]
 800e8e8:	3108      	adds	r1, #8
 800e8ea:	3201      	adds	r2, #1
 800e8ec:	910c      	str	r1, [sp, #48]	; 0x30
 800e8ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8f0:	9204      	str	r2, [sp, #16]
 800e8f2:	3108      	adds	r1, #8
 800e8f4:	910b      	str	r1, [sp, #44]	; 0x2c
 800e8f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e8f8:	3108      	adds	r1, #8
 800e8fa:	910a      	str	r1, [sp, #40]	; 0x28
 800e8fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8fe:	3108      	adds	r1, #8
 800e900:	9109      	str	r1, [sp, #36]	; 0x24
 800e902:	9908      	ldr	r1, [sp, #32]
 800e904:	3108      	adds	r1, #8
 800e906:	9108      	str	r1, [sp, #32]
 800e908:	9907      	ldr	r1, [sp, #28]
 800e90a:	3108      	adds	r1, #8
 800e90c:	9107      	str	r1, [sp, #28]
 800e90e:	9906      	ldr	r1, [sp, #24]
 800e910:	3108      	adds	r1, #8
 800e912:	9106      	str	r1, [sp, #24]
 800e914:	9905      	ldr	r1, [sp, #20]
 800e916:	3108      	adds	r1, #8
 800e918:	9105      	str	r1, [sp, #20]
 800e91a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e91c:	4291      	cmp	r1, r2
 800e91e:	f47f ae74 	bne.w	800e60a <arm_radix8_butterfly_f32+0x256>
 800e922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e924:	468b      	mov	fp, r1
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	b29b      	uxth	r3, r3
 800e92a:	9310      	str	r3, [sp, #64]	; 0x40
 800e92c:	e551      	b.n	800e3d2 <arm_radix8_butterfly_f32+0x1e>
 800e92e:	b015      	add	sp, #84	; 0x54
 800e930:	ecbd 8b10 	vpop	{d8-d15}
 800e934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e938 <__errno>:
 800e938:	4b01      	ldr	r3, [pc, #4]	; (800e940 <__errno+0x8>)
 800e93a:	6818      	ldr	r0, [r3, #0]
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	24000498 	.word	0x24000498

0800e944 <__libc_init_array>:
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	4d0d      	ldr	r5, [pc, #52]	; (800e97c <__libc_init_array+0x38>)
 800e948:	4c0d      	ldr	r4, [pc, #52]	; (800e980 <__libc_init_array+0x3c>)
 800e94a:	1b64      	subs	r4, r4, r5
 800e94c:	10a4      	asrs	r4, r4, #2
 800e94e:	2600      	movs	r6, #0
 800e950:	42a6      	cmp	r6, r4
 800e952:	d109      	bne.n	800e968 <__libc_init_array+0x24>
 800e954:	4d0b      	ldr	r5, [pc, #44]	; (800e984 <__libc_init_array+0x40>)
 800e956:	4c0c      	ldr	r4, [pc, #48]	; (800e988 <__libc_init_array+0x44>)
 800e958:	f003 ffa8 	bl	80128ac <_init>
 800e95c:	1b64      	subs	r4, r4, r5
 800e95e:	10a4      	asrs	r4, r4, #2
 800e960:	2600      	movs	r6, #0
 800e962:	42a6      	cmp	r6, r4
 800e964:	d105      	bne.n	800e972 <__libc_init_array+0x2e>
 800e966:	bd70      	pop	{r4, r5, r6, pc}
 800e968:	f855 3b04 	ldr.w	r3, [r5], #4
 800e96c:	4798      	blx	r3
 800e96e:	3601      	adds	r6, #1
 800e970:	e7ee      	b.n	800e950 <__libc_init_array+0xc>
 800e972:	f855 3b04 	ldr.w	r3, [r5], #4
 800e976:	4798      	blx	r3
 800e978:	3601      	adds	r6, #1
 800e97a:	e7f2      	b.n	800e962 <__libc_init_array+0x1e>
 800e97c:	0801d070 	.word	0x0801d070
 800e980:	0801d070 	.word	0x0801d070
 800e984:	0801d070 	.word	0x0801d070
 800e988:	0801d074 	.word	0x0801d074

0800e98c <memcpy>:
 800e98c:	440a      	add	r2, r1
 800e98e:	4291      	cmp	r1, r2
 800e990:	f100 33ff 	add.w	r3, r0, #4294967295
 800e994:	d100      	bne.n	800e998 <memcpy+0xc>
 800e996:	4770      	bx	lr
 800e998:	b510      	push	{r4, lr}
 800e99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	d1f9      	bne.n	800e99a <memcpy+0xe>
 800e9a6:	bd10      	pop	{r4, pc}

0800e9a8 <memset>:
 800e9a8:	4402      	add	r2, r0
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d100      	bne.n	800e9b2 <memset+0xa>
 800e9b0:	4770      	bx	lr
 800e9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e9b6:	e7f9      	b.n	800e9ac <memset+0x4>

0800e9b8 <__cvt>:
 800e9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ba:	ed2d 8b02 	vpush	{d8}
 800e9be:	eeb0 8b40 	vmov.f64	d8, d0
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	4617      	mov	r7, r2
 800e9c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e9c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e9ca:	ee18 2a90 	vmov	r2, s17
 800e9ce:	f025 0520 	bic.w	r5, r5, #32
 800e9d2:	2a00      	cmp	r2, #0
 800e9d4:	bfb6      	itet	lt
 800e9d6:	222d      	movlt	r2, #45	; 0x2d
 800e9d8:	2200      	movge	r2, #0
 800e9da:	eeb1 8b40 	vneglt.f64	d8, d0
 800e9de:	2d46      	cmp	r5, #70	; 0x46
 800e9e0:	460c      	mov	r4, r1
 800e9e2:	701a      	strb	r2, [r3, #0]
 800e9e4:	d004      	beq.n	800e9f0 <__cvt+0x38>
 800e9e6:	2d45      	cmp	r5, #69	; 0x45
 800e9e8:	d100      	bne.n	800e9ec <__cvt+0x34>
 800e9ea:	3401      	adds	r4, #1
 800e9ec:	2102      	movs	r1, #2
 800e9ee:	e000      	b.n	800e9f2 <__cvt+0x3a>
 800e9f0:	2103      	movs	r1, #3
 800e9f2:	ab03      	add	r3, sp, #12
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	ab02      	add	r3, sp, #8
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4622      	mov	r2, r4
 800e9fc:	4633      	mov	r3, r6
 800e9fe:	eeb0 0b48 	vmov.f64	d0, d8
 800ea02:	f000 fce9 	bl	800f3d8 <_dtoa_r>
 800ea06:	2d47      	cmp	r5, #71	; 0x47
 800ea08:	d101      	bne.n	800ea0e <__cvt+0x56>
 800ea0a:	07fb      	lsls	r3, r7, #31
 800ea0c:	d51a      	bpl.n	800ea44 <__cvt+0x8c>
 800ea0e:	2d46      	cmp	r5, #70	; 0x46
 800ea10:	eb00 0204 	add.w	r2, r0, r4
 800ea14:	d10c      	bne.n	800ea30 <__cvt+0x78>
 800ea16:	7803      	ldrb	r3, [r0, #0]
 800ea18:	2b30      	cmp	r3, #48	; 0x30
 800ea1a:	d107      	bne.n	800ea2c <__cvt+0x74>
 800ea1c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ea20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea24:	bf1c      	itt	ne
 800ea26:	f1c4 0401 	rsbne	r4, r4, #1
 800ea2a:	6034      	strne	r4, [r6, #0]
 800ea2c:	6833      	ldr	r3, [r6, #0]
 800ea2e:	441a      	add	r2, r3
 800ea30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ea34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea38:	bf08      	it	eq
 800ea3a:	9203      	streq	r2, [sp, #12]
 800ea3c:	2130      	movs	r1, #48	; 0x30
 800ea3e:	9b03      	ldr	r3, [sp, #12]
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d307      	bcc.n	800ea54 <__cvt+0x9c>
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea48:	1a1b      	subs	r3, r3, r0
 800ea4a:	6013      	str	r3, [r2, #0]
 800ea4c:	b005      	add	sp, #20
 800ea4e:	ecbd 8b02 	vpop	{d8}
 800ea52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea54:	1c5c      	adds	r4, r3, #1
 800ea56:	9403      	str	r4, [sp, #12]
 800ea58:	7019      	strb	r1, [r3, #0]
 800ea5a:	e7f0      	b.n	800ea3e <__cvt+0x86>

0800ea5c <__exponent>:
 800ea5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2900      	cmp	r1, #0
 800ea62:	bfb8      	it	lt
 800ea64:	4249      	neglt	r1, r1
 800ea66:	f803 2b02 	strb.w	r2, [r3], #2
 800ea6a:	bfb4      	ite	lt
 800ea6c:	222d      	movlt	r2, #45	; 0x2d
 800ea6e:	222b      	movge	r2, #43	; 0x2b
 800ea70:	2909      	cmp	r1, #9
 800ea72:	7042      	strb	r2, [r0, #1]
 800ea74:	dd2a      	ble.n	800eacc <__exponent+0x70>
 800ea76:	f10d 0407 	add.w	r4, sp, #7
 800ea7a:	46a4      	mov	ip, r4
 800ea7c:	270a      	movs	r7, #10
 800ea7e:	46a6      	mov	lr, r4
 800ea80:	460a      	mov	r2, r1
 800ea82:	fb91 f6f7 	sdiv	r6, r1, r7
 800ea86:	fb07 1516 	mls	r5, r7, r6, r1
 800ea8a:	3530      	adds	r5, #48	; 0x30
 800ea8c:	2a63      	cmp	r2, #99	; 0x63
 800ea8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ea92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ea96:	4631      	mov	r1, r6
 800ea98:	dcf1      	bgt.n	800ea7e <__exponent+0x22>
 800ea9a:	3130      	adds	r1, #48	; 0x30
 800ea9c:	f1ae 0502 	sub.w	r5, lr, #2
 800eaa0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eaa4:	1c44      	adds	r4, r0, #1
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	4561      	cmp	r1, ip
 800eaaa:	d30a      	bcc.n	800eac2 <__exponent+0x66>
 800eaac:	f10d 0209 	add.w	r2, sp, #9
 800eab0:	eba2 020e 	sub.w	r2, r2, lr
 800eab4:	4565      	cmp	r5, ip
 800eab6:	bf88      	it	hi
 800eab8:	2200      	movhi	r2, #0
 800eaba:	4413      	add	r3, r2
 800eabc:	1a18      	subs	r0, r3, r0
 800eabe:	b003      	add	sp, #12
 800eac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eac6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eaca:	e7ed      	b.n	800eaa8 <__exponent+0x4c>
 800eacc:	2330      	movs	r3, #48	; 0x30
 800eace:	3130      	adds	r1, #48	; 0x30
 800ead0:	7083      	strb	r3, [r0, #2]
 800ead2:	70c1      	strb	r1, [r0, #3]
 800ead4:	1d03      	adds	r3, r0, #4
 800ead6:	e7f1      	b.n	800eabc <__exponent+0x60>

0800ead8 <_printf_float>:
 800ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eadc:	b08b      	sub	sp, #44	; 0x2c
 800eade:	460c      	mov	r4, r1
 800eae0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800eae4:	4616      	mov	r6, r2
 800eae6:	461f      	mov	r7, r3
 800eae8:	4605      	mov	r5, r0
 800eaea:	f001 f9e3 	bl	800feb4 <_localeconv_r>
 800eaee:	f8d0 b000 	ldr.w	fp, [r0]
 800eaf2:	4658      	mov	r0, fp
 800eaf4:	f7f1 fbf4 	bl	80002e0 <strlen>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	9308      	str	r3, [sp, #32]
 800eafc:	f8d8 3000 	ldr.w	r3, [r8]
 800eb00:	f894 9018 	ldrb.w	r9, [r4, #24]
 800eb04:	6822      	ldr	r2, [r4, #0]
 800eb06:	3307      	adds	r3, #7
 800eb08:	f023 0307 	bic.w	r3, r3, #7
 800eb0c:	f103 0108 	add.w	r1, r3, #8
 800eb10:	f8c8 1000 	str.w	r1, [r8]
 800eb14:	4682      	mov	sl, r0
 800eb16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800eb1e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ed80 <_printf_float+0x2a8>
 800eb22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800eb26:	eeb0 6bc0 	vabs.f64	d6, d0
 800eb2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800eb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb32:	dd24      	ble.n	800eb7e <_printf_float+0xa6>
 800eb34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3c:	d502      	bpl.n	800eb44 <_printf_float+0x6c>
 800eb3e:	232d      	movs	r3, #45	; 0x2d
 800eb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb44:	4b90      	ldr	r3, [pc, #576]	; (800ed88 <_printf_float+0x2b0>)
 800eb46:	4891      	ldr	r0, [pc, #580]	; (800ed8c <_printf_float+0x2b4>)
 800eb48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800eb4c:	bf94      	ite	ls
 800eb4e:	4698      	movls	r8, r3
 800eb50:	4680      	movhi	r8, r0
 800eb52:	2303      	movs	r3, #3
 800eb54:	6123      	str	r3, [r4, #16]
 800eb56:	f022 0204 	bic.w	r2, r2, #4
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	6022      	str	r2, [r4, #0]
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	9700      	str	r7, [sp, #0]
 800eb62:	4633      	mov	r3, r6
 800eb64:	aa09      	add	r2, sp, #36	; 0x24
 800eb66:	4621      	mov	r1, r4
 800eb68:	4628      	mov	r0, r5
 800eb6a:	f000 f9d3 	bl	800ef14 <_printf_common>
 800eb6e:	3001      	adds	r0, #1
 800eb70:	f040 808a 	bne.w	800ec88 <_printf_float+0x1b0>
 800eb74:	f04f 30ff 	mov.w	r0, #4294967295
 800eb78:	b00b      	add	sp, #44	; 0x2c
 800eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7e:	eeb4 0b40 	vcmp.f64	d0, d0
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	d709      	bvc.n	800eb9c <_printf_float+0xc4>
 800eb88:	ee10 3a90 	vmov	r3, s1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	bfbc      	itt	lt
 800eb90:	232d      	movlt	r3, #45	; 0x2d
 800eb92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb96:	487e      	ldr	r0, [pc, #504]	; (800ed90 <_printf_float+0x2b8>)
 800eb98:	4b7e      	ldr	r3, [pc, #504]	; (800ed94 <_printf_float+0x2bc>)
 800eb9a:	e7d5      	b.n	800eb48 <_printf_float+0x70>
 800eb9c:	6863      	ldr	r3, [r4, #4]
 800eb9e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800eba2:	9104      	str	r1, [sp, #16]
 800eba4:	1c59      	adds	r1, r3, #1
 800eba6:	d13c      	bne.n	800ec22 <_printf_float+0x14a>
 800eba8:	2306      	movs	r3, #6
 800ebaa:	6063      	str	r3, [r4, #4]
 800ebac:	2300      	movs	r3, #0
 800ebae:	9303      	str	r3, [sp, #12]
 800ebb0:	ab08      	add	r3, sp, #32
 800ebb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ebb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ebba:	ab07      	add	r3, sp, #28
 800ebbc:	6861      	ldr	r1, [r4, #4]
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	6022      	str	r2, [r4, #0]
 800ebc2:	f10d 031b 	add.w	r3, sp, #27
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f7ff fef6 	bl	800e9b8 <__cvt>
 800ebcc:	9b04      	ldr	r3, [sp, #16]
 800ebce:	9907      	ldr	r1, [sp, #28]
 800ebd0:	2b47      	cmp	r3, #71	; 0x47
 800ebd2:	4680      	mov	r8, r0
 800ebd4:	d108      	bne.n	800ebe8 <_printf_float+0x110>
 800ebd6:	1cc8      	adds	r0, r1, #3
 800ebd8:	db02      	blt.n	800ebe0 <_printf_float+0x108>
 800ebda:	6863      	ldr	r3, [r4, #4]
 800ebdc:	4299      	cmp	r1, r3
 800ebde:	dd41      	ble.n	800ec64 <_printf_float+0x18c>
 800ebe0:	f1a9 0902 	sub.w	r9, r9, #2
 800ebe4:	fa5f f989 	uxtb.w	r9, r9
 800ebe8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ebec:	d820      	bhi.n	800ec30 <_printf_float+0x158>
 800ebee:	3901      	subs	r1, #1
 800ebf0:	464a      	mov	r2, r9
 800ebf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ebf6:	9107      	str	r1, [sp, #28]
 800ebf8:	f7ff ff30 	bl	800ea5c <__exponent>
 800ebfc:	9a08      	ldr	r2, [sp, #32]
 800ebfe:	9004      	str	r0, [sp, #16]
 800ec00:	1813      	adds	r3, r2, r0
 800ec02:	2a01      	cmp	r2, #1
 800ec04:	6123      	str	r3, [r4, #16]
 800ec06:	dc02      	bgt.n	800ec0e <_printf_float+0x136>
 800ec08:	6822      	ldr	r2, [r4, #0]
 800ec0a:	07d2      	lsls	r2, r2, #31
 800ec0c:	d501      	bpl.n	800ec12 <_printf_float+0x13a>
 800ec0e:	3301      	adds	r3, #1
 800ec10:	6123      	str	r3, [r4, #16]
 800ec12:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0a2      	beq.n	800eb60 <_printf_float+0x88>
 800ec1a:	232d      	movs	r3, #45	; 0x2d
 800ec1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec20:	e79e      	b.n	800eb60 <_printf_float+0x88>
 800ec22:	9904      	ldr	r1, [sp, #16]
 800ec24:	2947      	cmp	r1, #71	; 0x47
 800ec26:	d1c1      	bne.n	800ebac <_printf_float+0xd4>
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1bf      	bne.n	800ebac <_printf_float+0xd4>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e7bc      	b.n	800ebaa <_printf_float+0xd2>
 800ec30:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ec34:	d118      	bne.n	800ec68 <_printf_float+0x190>
 800ec36:	2900      	cmp	r1, #0
 800ec38:	6863      	ldr	r3, [r4, #4]
 800ec3a:	dd0b      	ble.n	800ec54 <_printf_float+0x17c>
 800ec3c:	6121      	str	r1, [r4, #16]
 800ec3e:	b913      	cbnz	r3, 800ec46 <_printf_float+0x16e>
 800ec40:	6822      	ldr	r2, [r4, #0]
 800ec42:	07d0      	lsls	r0, r2, #31
 800ec44:	d502      	bpl.n	800ec4c <_printf_float+0x174>
 800ec46:	3301      	adds	r3, #1
 800ec48:	440b      	add	r3, r1
 800ec4a:	6123      	str	r3, [r4, #16]
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ec50:	9304      	str	r3, [sp, #16]
 800ec52:	e7de      	b.n	800ec12 <_printf_float+0x13a>
 800ec54:	b913      	cbnz	r3, 800ec5c <_printf_float+0x184>
 800ec56:	6822      	ldr	r2, [r4, #0]
 800ec58:	07d2      	lsls	r2, r2, #31
 800ec5a:	d501      	bpl.n	800ec60 <_printf_float+0x188>
 800ec5c:	3302      	adds	r3, #2
 800ec5e:	e7f4      	b.n	800ec4a <_printf_float+0x172>
 800ec60:	2301      	movs	r3, #1
 800ec62:	e7f2      	b.n	800ec4a <_printf_float+0x172>
 800ec64:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ec68:	9b08      	ldr	r3, [sp, #32]
 800ec6a:	4299      	cmp	r1, r3
 800ec6c:	db05      	blt.n	800ec7a <_printf_float+0x1a2>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	6121      	str	r1, [r4, #16]
 800ec72:	07d8      	lsls	r0, r3, #31
 800ec74:	d5ea      	bpl.n	800ec4c <_printf_float+0x174>
 800ec76:	1c4b      	adds	r3, r1, #1
 800ec78:	e7e7      	b.n	800ec4a <_printf_float+0x172>
 800ec7a:	2900      	cmp	r1, #0
 800ec7c:	bfd4      	ite	le
 800ec7e:	f1c1 0202 	rsble	r2, r1, #2
 800ec82:	2201      	movgt	r2, #1
 800ec84:	4413      	add	r3, r2
 800ec86:	e7e0      	b.n	800ec4a <_printf_float+0x172>
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	055a      	lsls	r2, r3, #21
 800ec8c:	d407      	bmi.n	800ec9e <_printf_float+0x1c6>
 800ec8e:	6923      	ldr	r3, [r4, #16]
 800ec90:	4642      	mov	r2, r8
 800ec92:	4631      	mov	r1, r6
 800ec94:	4628      	mov	r0, r5
 800ec96:	47b8      	blx	r7
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d12a      	bne.n	800ecf2 <_printf_float+0x21a>
 800ec9c:	e76a      	b.n	800eb74 <_printf_float+0x9c>
 800ec9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eca2:	f240 80e2 	bls.w	800ee6a <_printf_float+0x392>
 800eca6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ecaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ecae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb2:	d133      	bne.n	800ed1c <_printf_float+0x244>
 800ecb4:	4a38      	ldr	r2, [pc, #224]	; (800ed98 <_printf_float+0x2c0>)
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4631      	mov	r1, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	47b8      	blx	r7
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	f43f af58 	beq.w	800eb74 <_printf_float+0x9c>
 800ecc4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	db02      	blt.n	800ecd2 <_printf_float+0x1fa>
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	07d8      	lsls	r0, r3, #31
 800ecd0:	d50f      	bpl.n	800ecf2 <_printf_float+0x21a>
 800ecd2:	4653      	mov	r3, sl
 800ecd4:	465a      	mov	r2, fp
 800ecd6:	4631      	mov	r1, r6
 800ecd8:	4628      	mov	r0, r5
 800ecda:	47b8      	blx	r7
 800ecdc:	3001      	adds	r0, #1
 800ecde:	f43f af49 	beq.w	800eb74 <_printf_float+0x9c>
 800ece2:	f04f 0800 	mov.w	r8, #0
 800ece6:	f104 091a 	add.w	r9, r4, #26
 800ecea:	9b08      	ldr	r3, [sp, #32]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	4543      	cmp	r3, r8
 800ecf0:	dc09      	bgt.n	800ed06 <_printf_float+0x22e>
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	079b      	lsls	r3, r3, #30
 800ecf6:	f100 8108 	bmi.w	800ef0a <_printf_float+0x432>
 800ecfa:	68e0      	ldr	r0, [r4, #12]
 800ecfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfe:	4298      	cmp	r0, r3
 800ed00:	bfb8      	it	lt
 800ed02:	4618      	movlt	r0, r3
 800ed04:	e738      	b.n	800eb78 <_printf_float+0xa0>
 800ed06:	2301      	movs	r3, #1
 800ed08:	464a      	mov	r2, r9
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	47b8      	blx	r7
 800ed10:	3001      	adds	r0, #1
 800ed12:	f43f af2f 	beq.w	800eb74 <_printf_float+0x9c>
 800ed16:	f108 0801 	add.w	r8, r8, #1
 800ed1a:	e7e6      	b.n	800ecea <_printf_float+0x212>
 800ed1c:	9b07      	ldr	r3, [sp, #28]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	dc3c      	bgt.n	800ed9c <_printf_float+0x2c4>
 800ed22:	4a1d      	ldr	r2, [pc, #116]	; (800ed98 <_printf_float+0x2c0>)
 800ed24:	2301      	movs	r3, #1
 800ed26:	4631      	mov	r1, r6
 800ed28:	4628      	mov	r0, r5
 800ed2a:	47b8      	blx	r7
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	f43f af21 	beq.w	800eb74 <_printf_float+0x9c>
 800ed32:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	d102      	bne.n	800ed40 <_printf_float+0x268>
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	07d9      	lsls	r1, r3, #31
 800ed3e:	d5d8      	bpl.n	800ecf2 <_printf_float+0x21a>
 800ed40:	4653      	mov	r3, sl
 800ed42:	465a      	mov	r2, fp
 800ed44:	4631      	mov	r1, r6
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b8      	blx	r7
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	f43f af12 	beq.w	800eb74 <_printf_float+0x9c>
 800ed50:	f04f 0900 	mov.w	r9, #0
 800ed54:	f104 0a1a 	add.w	sl, r4, #26
 800ed58:	9b07      	ldr	r3, [sp, #28]
 800ed5a:	425b      	negs	r3, r3
 800ed5c:	454b      	cmp	r3, r9
 800ed5e:	dc01      	bgt.n	800ed64 <_printf_float+0x28c>
 800ed60:	9b08      	ldr	r3, [sp, #32]
 800ed62:	e795      	b.n	800ec90 <_printf_float+0x1b8>
 800ed64:	2301      	movs	r3, #1
 800ed66:	4652      	mov	r2, sl
 800ed68:	4631      	mov	r1, r6
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	47b8      	blx	r7
 800ed6e:	3001      	adds	r0, #1
 800ed70:	f43f af00 	beq.w	800eb74 <_printf_float+0x9c>
 800ed74:	f109 0901 	add.w	r9, r9, #1
 800ed78:	e7ee      	b.n	800ed58 <_printf_float+0x280>
 800ed7a:	bf00      	nop
 800ed7c:	f3af 8000 	nop.w
 800ed80:	ffffffff 	.word	0xffffffff
 800ed84:	7fefffff 	.word	0x7fefffff
 800ed88:	0801b9b8 	.word	0x0801b9b8
 800ed8c:	0801b9bc 	.word	0x0801b9bc
 800ed90:	0801b9c4 	.word	0x0801b9c4
 800ed94:	0801b9c0 	.word	0x0801b9c0
 800ed98:	0801b9c8 	.word	0x0801b9c8
 800ed9c:	9a08      	ldr	r2, [sp, #32]
 800ed9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eda0:	429a      	cmp	r2, r3
 800eda2:	bfa8      	it	ge
 800eda4:	461a      	movge	r2, r3
 800eda6:	2a00      	cmp	r2, #0
 800eda8:	4691      	mov	r9, r2
 800edaa:	dc38      	bgt.n	800ee1e <_printf_float+0x346>
 800edac:	2300      	movs	r3, #0
 800edae:	9305      	str	r3, [sp, #20]
 800edb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edb4:	f104 021a 	add.w	r2, r4, #26
 800edb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edba:	9905      	ldr	r1, [sp, #20]
 800edbc:	9304      	str	r3, [sp, #16]
 800edbe:	eba3 0309 	sub.w	r3, r3, r9
 800edc2:	428b      	cmp	r3, r1
 800edc4:	dc33      	bgt.n	800ee2e <_printf_float+0x356>
 800edc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800edca:	429a      	cmp	r2, r3
 800edcc:	db3c      	blt.n	800ee48 <_printf_float+0x370>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	07da      	lsls	r2, r3, #31
 800edd2:	d439      	bmi.n	800ee48 <_printf_float+0x370>
 800edd4:	9b08      	ldr	r3, [sp, #32]
 800edd6:	9a04      	ldr	r2, [sp, #16]
 800edd8:	9907      	ldr	r1, [sp, #28]
 800edda:	1a9a      	subs	r2, r3, r2
 800eddc:	eba3 0901 	sub.w	r9, r3, r1
 800ede0:	4591      	cmp	r9, r2
 800ede2:	bfa8      	it	ge
 800ede4:	4691      	movge	r9, r2
 800ede6:	f1b9 0f00 	cmp.w	r9, #0
 800edea:	dc35      	bgt.n	800ee58 <_printf_float+0x380>
 800edec:	f04f 0800 	mov.w	r8, #0
 800edf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edf4:	f104 0a1a 	add.w	sl, r4, #26
 800edf8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800edfc:	1a9b      	subs	r3, r3, r2
 800edfe:	eba3 0309 	sub.w	r3, r3, r9
 800ee02:	4543      	cmp	r3, r8
 800ee04:	f77f af75 	ble.w	800ecf2 <_printf_float+0x21a>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	4652      	mov	r2, sl
 800ee0c:	4631      	mov	r1, r6
 800ee0e:	4628      	mov	r0, r5
 800ee10:	47b8      	blx	r7
 800ee12:	3001      	adds	r0, #1
 800ee14:	f43f aeae 	beq.w	800eb74 <_printf_float+0x9c>
 800ee18:	f108 0801 	add.w	r8, r8, #1
 800ee1c:	e7ec      	b.n	800edf8 <_printf_float+0x320>
 800ee1e:	4613      	mov	r3, r2
 800ee20:	4631      	mov	r1, r6
 800ee22:	4642      	mov	r2, r8
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	d1bf      	bne.n	800edac <_printf_float+0x2d4>
 800ee2c:	e6a2      	b.n	800eb74 <_printf_float+0x9c>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	4631      	mov	r1, r6
 800ee32:	4628      	mov	r0, r5
 800ee34:	9204      	str	r2, [sp, #16]
 800ee36:	47b8      	blx	r7
 800ee38:	3001      	adds	r0, #1
 800ee3a:	f43f ae9b 	beq.w	800eb74 <_printf_float+0x9c>
 800ee3e:	9b05      	ldr	r3, [sp, #20]
 800ee40:	9a04      	ldr	r2, [sp, #16]
 800ee42:	3301      	adds	r3, #1
 800ee44:	9305      	str	r3, [sp, #20]
 800ee46:	e7b7      	b.n	800edb8 <_printf_float+0x2e0>
 800ee48:	4653      	mov	r3, sl
 800ee4a:	465a      	mov	r2, fp
 800ee4c:	4631      	mov	r1, r6
 800ee4e:	4628      	mov	r0, r5
 800ee50:	47b8      	blx	r7
 800ee52:	3001      	adds	r0, #1
 800ee54:	d1be      	bne.n	800edd4 <_printf_float+0x2fc>
 800ee56:	e68d      	b.n	800eb74 <_printf_float+0x9c>
 800ee58:	9a04      	ldr	r2, [sp, #16]
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	4442      	add	r2, r8
 800ee5e:	4631      	mov	r1, r6
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b8      	blx	r7
 800ee64:	3001      	adds	r0, #1
 800ee66:	d1c1      	bne.n	800edec <_printf_float+0x314>
 800ee68:	e684      	b.n	800eb74 <_printf_float+0x9c>
 800ee6a:	9a08      	ldr	r2, [sp, #32]
 800ee6c:	2a01      	cmp	r2, #1
 800ee6e:	dc01      	bgt.n	800ee74 <_printf_float+0x39c>
 800ee70:	07db      	lsls	r3, r3, #31
 800ee72:	d537      	bpl.n	800eee4 <_printf_float+0x40c>
 800ee74:	2301      	movs	r3, #1
 800ee76:	4642      	mov	r2, r8
 800ee78:	4631      	mov	r1, r6
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	47b8      	blx	r7
 800ee7e:	3001      	adds	r0, #1
 800ee80:	f43f ae78 	beq.w	800eb74 <_printf_float+0x9c>
 800ee84:	4653      	mov	r3, sl
 800ee86:	465a      	mov	r2, fp
 800ee88:	4631      	mov	r1, r6
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	47b8      	blx	r7
 800ee8e:	3001      	adds	r0, #1
 800ee90:	f43f ae70 	beq.w	800eb74 <_printf_float+0x9c>
 800ee94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ee98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea0:	d01b      	beq.n	800eeda <_printf_float+0x402>
 800eea2:	9b08      	ldr	r3, [sp, #32]
 800eea4:	f108 0201 	add.w	r2, r8, #1
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	4631      	mov	r1, r6
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b8      	blx	r7
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d10e      	bne.n	800eed2 <_printf_float+0x3fa>
 800eeb4:	e65e      	b.n	800eb74 <_printf_float+0x9c>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	464a      	mov	r2, r9
 800eeba:	4631      	mov	r1, r6
 800eebc:	4628      	mov	r0, r5
 800eebe:	47b8      	blx	r7
 800eec0:	3001      	adds	r0, #1
 800eec2:	f43f ae57 	beq.w	800eb74 <_printf_float+0x9c>
 800eec6:	f108 0801 	add.w	r8, r8, #1
 800eeca:	9b08      	ldr	r3, [sp, #32]
 800eecc:	3b01      	subs	r3, #1
 800eece:	4543      	cmp	r3, r8
 800eed0:	dcf1      	bgt.n	800eeb6 <_printf_float+0x3de>
 800eed2:	9b04      	ldr	r3, [sp, #16]
 800eed4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eed8:	e6db      	b.n	800ec92 <_printf_float+0x1ba>
 800eeda:	f04f 0800 	mov.w	r8, #0
 800eede:	f104 091a 	add.w	r9, r4, #26
 800eee2:	e7f2      	b.n	800eeca <_printf_float+0x3f2>
 800eee4:	2301      	movs	r3, #1
 800eee6:	4642      	mov	r2, r8
 800eee8:	e7df      	b.n	800eeaa <_printf_float+0x3d2>
 800eeea:	2301      	movs	r3, #1
 800eeec:	464a      	mov	r2, r9
 800eeee:	4631      	mov	r1, r6
 800eef0:	4628      	mov	r0, r5
 800eef2:	47b8      	blx	r7
 800eef4:	3001      	adds	r0, #1
 800eef6:	f43f ae3d 	beq.w	800eb74 <_printf_float+0x9c>
 800eefa:	f108 0801 	add.w	r8, r8, #1
 800eefe:	68e3      	ldr	r3, [r4, #12]
 800ef00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef02:	1a5b      	subs	r3, r3, r1
 800ef04:	4543      	cmp	r3, r8
 800ef06:	dcf0      	bgt.n	800eeea <_printf_float+0x412>
 800ef08:	e6f7      	b.n	800ecfa <_printf_float+0x222>
 800ef0a:	f04f 0800 	mov.w	r8, #0
 800ef0e:	f104 0919 	add.w	r9, r4, #25
 800ef12:	e7f4      	b.n	800eefe <_printf_float+0x426>

0800ef14 <_printf_common>:
 800ef14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef18:	4616      	mov	r6, r2
 800ef1a:	4699      	mov	r9, r3
 800ef1c:	688a      	ldr	r2, [r1, #8]
 800ef1e:	690b      	ldr	r3, [r1, #16]
 800ef20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef24:	4293      	cmp	r3, r2
 800ef26:	bfb8      	it	lt
 800ef28:	4613      	movlt	r3, r2
 800ef2a:	6033      	str	r3, [r6, #0]
 800ef2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef30:	4607      	mov	r7, r0
 800ef32:	460c      	mov	r4, r1
 800ef34:	b10a      	cbz	r2, 800ef3a <_printf_common+0x26>
 800ef36:	3301      	adds	r3, #1
 800ef38:	6033      	str	r3, [r6, #0]
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	0699      	lsls	r1, r3, #26
 800ef3e:	bf42      	ittt	mi
 800ef40:	6833      	ldrmi	r3, [r6, #0]
 800ef42:	3302      	addmi	r3, #2
 800ef44:	6033      	strmi	r3, [r6, #0]
 800ef46:	6825      	ldr	r5, [r4, #0]
 800ef48:	f015 0506 	ands.w	r5, r5, #6
 800ef4c:	d106      	bne.n	800ef5c <_printf_common+0x48>
 800ef4e:	f104 0a19 	add.w	sl, r4, #25
 800ef52:	68e3      	ldr	r3, [r4, #12]
 800ef54:	6832      	ldr	r2, [r6, #0]
 800ef56:	1a9b      	subs	r3, r3, r2
 800ef58:	42ab      	cmp	r3, r5
 800ef5a:	dc26      	bgt.n	800efaa <_printf_common+0x96>
 800ef5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef60:	1e13      	subs	r3, r2, #0
 800ef62:	6822      	ldr	r2, [r4, #0]
 800ef64:	bf18      	it	ne
 800ef66:	2301      	movne	r3, #1
 800ef68:	0692      	lsls	r2, r2, #26
 800ef6a:	d42b      	bmi.n	800efc4 <_printf_common+0xb0>
 800ef6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef70:	4649      	mov	r1, r9
 800ef72:	4638      	mov	r0, r7
 800ef74:	47c0      	blx	r8
 800ef76:	3001      	adds	r0, #1
 800ef78:	d01e      	beq.n	800efb8 <_printf_common+0xa4>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	68e5      	ldr	r5, [r4, #12]
 800ef7e:	6832      	ldr	r2, [r6, #0]
 800ef80:	f003 0306 	and.w	r3, r3, #6
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	bf08      	it	eq
 800ef88:	1aad      	subeq	r5, r5, r2
 800ef8a:	68a3      	ldr	r3, [r4, #8]
 800ef8c:	6922      	ldr	r2, [r4, #16]
 800ef8e:	bf0c      	ite	eq
 800ef90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef94:	2500      	movne	r5, #0
 800ef96:	4293      	cmp	r3, r2
 800ef98:	bfc4      	itt	gt
 800ef9a:	1a9b      	subgt	r3, r3, r2
 800ef9c:	18ed      	addgt	r5, r5, r3
 800ef9e:	2600      	movs	r6, #0
 800efa0:	341a      	adds	r4, #26
 800efa2:	42b5      	cmp	r5, r6
 800efa4:	d11a      	bne.n	800efdc <_printf_common+0xc8>
 800efa6:	2000      	movs	r0, #0
 800efa8:	e008      	b.n	800efbc <_printf_common+0xa8>
 800efaa:	2301      	movs	r3, #1
 800efac:	4652      	mov	r2, sl
 800efae:	4649      	mov	r1, r9
 800efb0:	4638      	mov	r0, r7
 800efb2:	47c0      	blx	r8
 800efb4:	3001      	adds	r0, #1
 800efb6:	d103      	bne.n	800efc0 <_printf_common+0xac>
 800efb8:	f04f 30ff 	mov.w	r0, #4294967295
 800efbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc0:	3501      	adds	r5, #1
 800efc2:	e7c6      	b.n	800ef52 <_printf_common+0x3e>
 800efc4:	18e1      	adds	r1, r4, r3
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	2030      	movs	r0, #48	; 0x30
 800efca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efce:	4422      	add	r2, r4
 800efd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efd8:	3302      	adds	r3, #2
 800efda:	e7c7      	b.n	800ef6c <_printf_common+0x58>
 800efdc:	2301      	movs	r3, #1
 800efde:	4622      	mov	r2, r4
 800efe0:	4649      	mov	r1, r9
 800efe2:	4638      	mov	r0, r7
 800efe4:	47c0      	blx	r8
 800efe6:	3001      	adds	r0, #1
 800efe8:	d0e6      	beq.n	800efb8 <_printf_common+0xa4>
 800efea:	3601      	adds	r6, #1
 800efec:	e7d9      	b.n	800efa2 <_printf_common+0x8e>
	...

0800eff0 <_printf_i>:
 800eff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eff4:	7e0f      	ldrb	r7, [r1, #24]
 800eff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eff8:	2f78      	cmp	r7, #120	; 0x78
 800effa:	4691      	mov	r9, r2
 800effc:	4680      	mov	r8, r0
 800effe:	460c      	mov	r4, r1
 800f000:	469a      	mov	sl, r3
 800f002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f006:	d807      	bhi.n	800f018 <_printf_i+0x28>
 800f008:	2f62      	cmp	r7, #98	; 0x62
 800f00a:	d80a      	bhi.n	800f022 <_printf_i+0x32>
 800f00c:	2f00      	cmp	r7, #0
 800f00e:	f000 80d8 	beq.w	800f1c2 <_printf_i+0x1d2>
 800f012:	2f58      	cmp	r7, #88	; 0x58
 800f014:	f000 80a3 	beq.w	800f15e <_printf_i+0x16e>
 800f018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f01c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f020:	e03a      	b.n	800f098 <_printf_i+0xa8>
 800f022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f026:	2b15      	cmp	r3, #21
 800f028:	d8f6      	bhi.n	800f018 <_printf_i+0x28>
 800f02a:	a101      	add	r1, pc, #4	; (adr r1, 800f030 <_printf_i+0x40>)
 800f02c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f030:	0800f089 	.word	0x0800f089
 800f034:	0800f09d 	.word	0x0800f09d
 800f038:	0800f019 	.word	0x0800f019
 800f03c:	0800f019 	.word	0x0800f019
 800f040:	0800f019 	.word	0x0800f019
 800f044:	0800f019 	.word	0x0800f019
 800f048:	0800f09d 	.word	0x0800f09d
 800f04c:	0800f019 	.word	0x0800f019
 800f050:	0800f019 	.word	0x0800f019
 800f054:	0800f019 	.word	0x0800f019
 800f058:	0800f019 	.word	0x0800f019
 800f05c:	0800f1a9 	.word	0x0800f1a9
 800f060:	0800f0cd 	.word	0x0800f0cd
 800f064:	0800f18b 	.word	0x0800f18b
 800f068:	0800f019 	.word	0x0800f019
 800f06c:	0800f019 	.word	0x0800f019
 800f070:	0800f1cb 	.word	0x0800f1cb
 800f074:	0800f019 	.word	0x0800f019
 800f078:	0800f0cd 	.word	0x0800f0cd
 800f07c:	0800f019 	.word	0x0800f019
 800f080:	0800f019 	.word	0x0800f019
 800f084:	0800f193 	.word	0x0800f193
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	1d1a      	adds	r2, r3, #4
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	602a      	str	r2, [r5, #0]
 800f090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f098:	2301      	movs	r3, #1
 800f09a:	e0a3      	b.n	800f1e4 <_printf_i+0x1f4>
 800f09c:	6820      	ldr	r0, [r4, #0]
 800f09e:	6829      	ldr	r1, [r5, #0]
 800f0a0:	0606      	lsls	r6, r0, #24
 800f0a2:	f101 0304 	add.w	r3, r1, #4
 800f0a6:	d50a      	bpl.n	800f0be <_printf_i+0xce>
 800f0a8:	680e      	ldr	r6, [r1, #0]
 800f0aa:	602b      	str	r3, [r5, #0]
 800f0ac:	2e00      	cmp	r6, #0
 800f0ae:	da03      	bge.n	800f0b8 <_printf_i+0xc8>
 800f0b0:	232d      	movs	r3, #45	; 0x2d
 800f0b2:	4276      	negs	r6, r6
 800f0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b8:	485e      	ldr	r0, [pc, #376]	; (800f234 <_printf_i+0x244>)
 800f0ba:	230a      	movs	r3, #10
 800f0bc:	e019      	b.n	800f0f2 <_printf_i+0x102>
 800f0be:	680e      	ldr	r6, [r1, #0]
 800f0c0:	602b      	str	r3, [r5, #0]
 800f0c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0c6:	bf18      	it	ne
 800f0c8:	b236      	sxthne	r6, r6
 800f0ca:	e7ef      	b.n	800f0ac <_printf_i+0xbc>
 800f0cc:	682b      	ldr	r3, [r5, #0]
 800f0ce:	6820      	ldr	r0, [r4, #0]
 800f0d0:	1d19      	adds	r1, r3, #4
 800f0d2:	6029      	str	r1, [r5, #0]
 800f0d4:	0601      	lsls	r1, r0, #24
 800f0d6:	d501      	bpl.n	800f0dc <_printf_i+0xec>
 800f0d8:	681e      	ldr	r6, [r3, #0]
 800f0da:	e002      	b.n	800f0e2 <_printf_i+0xf2>
 800f0dc:	0646      	lsls	r6, r0, #25
 800f0de:	d5fb      	bpl.n	800f0d8 <_printf_i+0xe8>
 800f0e0:	881e      	ldrh	r6, [r3, #0]
 800f0e2:	4854      	ldr	r0, [pc, #336]	; (800f234 <_printf_i+0x244>)
 800f0e4:	2f6f      	cmp	r7, #111	; 0x6f
 800f0e6:	bf0c      	ite	eq
 800f0e8:	2308      	moveq	r3, #8
 800f0ea:	230a      	movne	r3, #10
 800f0ec:	2100      	movs	r1, #0
 800f0ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0f2:	6865      	ldr	r5, [r4, #4]
 800f0f4:	60a5      	str	r5, [r4, #8]
 800f0f6:	2d00      	cmp	r5, #0
 800f0f8:	bfa2      	ittt	ge
 800f0fa:	6821      	ldrge	r1, [r4, #0]
 800f0fc:	f021 0104 	bicge.w	r1, r1, #4
 800f100:	6021      	strge	r1, [r4, #0]
 800f102:	b90e      	cbnz	r6, 800f108 <_printf_i+0x118>
 800f104:	2d00      	cmp	r5, #0
 800f106:	d04d      	beq.n	800f1a4 <_printf_i+0x1b4>
 800f108:	4615      	mov	r5, r2
 800f10a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f10e:	fb03 6711 	mls	r7, r3, r1, r6
 800f112:	5dc7      	ldrb	r7, [r0, r7]
 800f114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f118:	4637      	mov	r7, r6
 800f11a:	42bb      	cmp	r3, r7
 800f11c:	460e      	mov	r6, r1
 800f11e:	d9f4      	bls.n	800f10a <_printf_i+0x11a>
 800f120:	2b08      	cmp	r3, #8
 800f122:	d10b      	bne.n	800f13c <_printf_i+0x14c>
 800f124:	6823      	ldr	r3, [r4, #0]
 800f126:	07de      	lsls	r6, r3, #31
 800f128:	d508      	bpl.n	800f13c <_printf_i+0x14c>
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	6861      	ldr	r1, [r4, #4]
 800f12e:	4299      	cmp	r1, r3
 800f130:	bfde      	ittt	le
 800f132:	2330      	movle	r3, #48	; 0x30
 800f134:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f138:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f13c:	1b52      	subs	r2, r2, r5
 800f13e:	6122      	str	r2, [r4, #16]
 800f140:	f8cd a000 	str.w	sl, [sp]
 800f144:	464b      	mov	r3, r9
 800f146:	aa03      	add	r2, sp, #12
 800f148:	4621      	mov	r1, r4
 800f14a:	4640      	mov	r0, r8
 800f14c:	f7ff fee2 	bl	800ef14 <_printf_common>
 800f150:	3001      	adds	r0, #1
 800f152:	d14c      	bne.n	800f1ee <_printf_i+0x1fe>
 800f154:	f04f 30ff 	mov.w	r0, #4294967295
 800f158:	b004      	add	sp, #16
 800f15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f15e:	4835      	ldr	r0, [pc, #212]	; (800f234 <_printf_i+0x244>)
 800f160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f164:	6829      	ldr	r1, [r5, #0]
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	f851 6b04 	ldr.w	r6, [r1], #4
 800f16c:	6029      	str	r1, [r5, #0]
 800f16e:	061d      	lsls	r5, r3, #24
 800f170:	d514      	bpl.n	800f19c <_printf_i+0x1ac>
 800f172:	07df      	lsls	r7, r3, #31
 800f174:	bf44      	itt	mi
 800f176:	f043 0320 	orrmi.w	r3, r3, #32
 800f17a:	6023      	strmi	r3, [r4, #0]
 800f17c:	b91e      	cbnz	r6, 800f186 <_printf_i+0x196>
 800f17e:	6823      	ldr	r3, [r4, #0]
 800f180:	f023 0320 	bic.w	r3, r3, #32
 800f184:	6023      	str	r3, [r4, #0]
 800f186:	2310      	movs	r3, #16
 800f188:	e7b0      	b.n	800f0ec <_printf_i+0xfc>
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	f043 0320 	orr.w	r3, r3, #32
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	2378      	movs	r3, #120	; 0x78
 800f194:	4828      	ldr	r0, [pc, #160]	; (800f238 <_printf_i+0x248>)
 800f196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f19a:	e7e3      	b.n	800f164 <_printf_i+0x174>
 800f19c:	0659      	lsls	r1, r3, #25
 800f19e:	bf48      	it	mi
 800f1a0:	b2b6      	uxthmi	r6, r6
 800f1a2:	e7e6      	b.n	800f172 <_printf_i+0x182>
 800f1a4:	4615      	mov	r5, r2
 800f1a6:	e7bb      	b.n	800f120 <_printf_i+0x130>
 800f1a8:	682b      	ldr	r3, [r5, #0]
 800f1aa:	6826      	ldr	r6, [r4, #0]
 800f1ac:	6961      	ldr	r1, [r4, #20]
 800f1ae:	1d18      	adds	r0, r3, #4
 800f1b0:	6028      	str	r0, [r5, #0]
 800f1b2:	0635      	lsls	r5, r6, #24
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	d501      	bpl.n	800f1bc <_printf_i+0x1cc>
 800f1b8:	6019      	str	r1, [r3, #0]
 800f1ba:	e002      	b.n	800f1c2 <_printf_i+0x1d2>
 800f1bc:	0670      	lsls	r0, r6, #25
 800f1be:	d5fb      	bpl.n	800f1b8 <_printf_i+0x1c8>
 800f1c0:	8019      	strh	r1, [r3, #0]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	6123      	str	r3, [r4, #16]
 800f1c6:	4615      	mov	r5, r2
 800f1c8:	e7ba      	b.n	800f140 <_printf_i+0x150>
 800f1ca:	682b      	ldr	r3, [r5, #0]
 800f1cc:	1d1a      	adds	r2, r3, #4
 800f1ce:	602a      	str	r2, [r5, #0]
 800f1d0:	681d      	ldr	r5, [r3, #0]
 800f1d2:	6862      	ldr	r2, [r4, #4]
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f7f1 f88a 	bl	80002f0 <memchr>
 800f1dc:	b108      	cbz	r0, 800f1e2 <_printf_i+0x1f2>
 800f1de:	1b40      	subs	r0, r0, r5
 800f1e0:	6060      	str	r0, [r4, #4]
 800f1e2:	6863      	ldr	r3, [r4, #4]
 800f1e4:	6123      	str	r3, [r4, #16]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1ec:	e7a8      	b.n	800f140 <_printf_i+0x150>
 800f1ee:	6923      	ldr	r3, [r4, #16]
 800f1f0:	462a      	mov	r2, r5
 800f1f2:	4649      	mov	r1, r9
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	47d0      	blx	sl
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	d0ab      	beq.n	800f154 <_printf_i+0x164>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	079b      	lsls	r3, r3, #30
 800f200:	d413      	bmi.n	800f22a <_printf_i+0x23a>
 800f202:	68e0      	ldr	r0, [r4, #12]
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	4298      	cmp	r0, r3
 800f208:	bfb8      	it	lt
 800f20a:	4618      	movlt	r0, r3
 800f20c:	e7a4      	b.n	800f158 <_printf_i+0x168>
 800f20e:	2301      	movs	r3, #1
 800f210:	4632      	mov	r2, r6
 800f212:	4649      	mov	r1, r9
 800f214:	4640      	mov	r0, r8
 800f216:	47d0      	blx	sl
 800f218:	3001      	adds	r0, #1
 800f21a:	d09b      	beq.n	800f154 <_printf_i+0x164>
 800f21c:	3501      	adds	r5, #1
 800f21e:	68e3      	ldr	r3, [r4, #12]
 800f220:	9903      	ldr	r1, [sp, #12]
 800f222:	1a5b      	subs	r3, r3, r1
 800f224:	42ab      	cmp	r3, r5
 800f226:	dcf2      	bgt.n	800f20e <_printf_i+0x21e>
 800f228:	e7eb      	b.n	800f202 <_printf_i+0x212>
 800f22a:	2500      	movs	r5, #0
 800f22c:	f104 0619 	add.w	r6, r4, #25
 800f230:	e7f5      	b.n	800f21e <_printf_i+0x22e>
 800f232:	bf00      	nop
 800f234:	0801b9ca 	.word	0x0801b9ca
 800f238:	0801b9db 	.word	0x0801b9db

0800f23c <siprintf>:
 800f23c:	b40e      	push	{r1, r2, r3}
 800f23e:	b500      	push	{lr}
 800f240:	b09c      	sub	sp, #112	; 0x70
 800f242:	ab1d      	add	r3, sp, #116	; 0x74
 800f244:	9002      	str	r0, [sp, #8]
 800f246:	9006      	str	r0, [sp, #24]
 800f248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f24c:	4809      	ldr	r0, [pc, #36]	; (800f274 <siprintf+0x38>)
 800f24e:	9107      	str	r1, [sp, #28]
 800f250:	9104      	str	r1, [sp, #16]
 800f252:	4909      	ldr	r1, [pc, #36]	; (800f278 <siprintf+0x3c>)
 800f254:	f853 2b04 	ldr.w	r2, [r3], #4
 800f258:	9105      	str	r1, [sp, #20]
 800f25a:	6800      	ldr	r0, [r0, #0]
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	a902      	add	r1, sp, #8
 800f260:	f001 fb0a 	bl	8010878 <_svfiprintf_r>
 800f264:	9b02      	ldr	r3, [sp, #8]
 800f266:	2200      	movs	r2, #0
 800f268:	701a      	strb	r2, [r3, #0]
 800f26a:	b01c      	add	sp, #112	; 0x70
 800f26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f270:	b003      	add	sp, #12
 800f272:	4770      	bx	lr
 800f274:	24000498 	.word	0x24000498
 800f278:	ffff0208 	.word	0xffff0208

0800f27c <stpcpy>:
 800f27c:	4603      	mov	r3, r0
 800f27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f282:	4618      	mov	r0, r3
 800f284:	f803 2b01 	strb.w	r2, [r3], #1
 800f288:	2a00      	cmp	r2, #0
 800f28a:	d1f8      	bne.n	800f27e <stpcpy+0x2>
 800f28c:	4770      	bx	lr

0800f28e <strcat>:
 800f28e:	b510      	push	{r4, lr}
 800f290:	4602      	mov	r2, r0
 800f292:	7814      	ldrb	r4, [r2, #0]
 800f294:	4613      	mov	r3, r2
 800f296:	3201      	adds	r2, #1
 800f298:	2c00      	cmp	r4, #0
 800f29a:	d1fa      	bne.n	800f292 <strcat+0x4>
 800f29c:	3b01      	subs	r3, #1
 800f29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2a6:	2a00      	cmp	r2, #0
 800f2a8:	d1f9      	bne.n	800f29e <strcat+0x10>
 800f2aa:	bd10      	pop	{r4, pc}

0800f2ac <strcpy>:
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2b2:	f803 2b01 	strb.w	r2, [r3], #1
 800f2b6:	2a00      	cmp	r2, #0
 800f2b8:	d1f9      	bne.n	800f2ae <strcpy+0x2>
 800f2ba:	4770      	bx	lr

0800f2bc <quorem>:
 800f2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c0:	6903      	ldr	r3, [r0, #16]
 800f2c2:	690c      	ldr	r4, [r1, #16]
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	4607      	mov	r7, r0
 800f2c8:	f2c0 8081 	blt.w	800f3ce <quorem+0x112>
 800f2cc:	3c01      	subs	r4, #1
 800f2ce:	f101 0814 	add.w	r8, r1, #20
 800f2d2:	f100 0514 	add.w	r5, r0, #20
 800f2d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2da:	9301      	str	r3, [sp, #4]
 800f2dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f2e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f2ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f2f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2f4:	d331      	bcc.n	800f35a <quorem+0x9e>
 800f2f6:	f04f 0e00 	mov.w	lr, #0
 800f2fa:	4640      	mov	r0, r8
 800f2fc:	46ac      	mov	ip, r5
 800f2fe:	46f2      	mov	sl, lr
 800f300:	f850 2b04 	ldr.w	r2, [r0], #4
 800f304:	b293      	uxth	r3, r2
 800f306:	fb06 e303 	mla	r3, r6, r3, lr
 800f30a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f30e:	b29b      	uxth	r3, r3
 800f310:	ebaa 0303 	sub.w	r3, sl, r3
 800f314:	f8dc a000 	ldr.w	sl, [ip]
 800f318:	0c12      	lsrs	r2, r2, #16
 800f31a:	fa13 f38a 	uxtah	r3, r3, sl
 800f31e:	fb06 e202 	mla	r2, r6, r2, lr
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	9b00      	ldr	r3, [sp, #0]
 800f326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f32a:	b292      	uxth	r2, r2
 800f32c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f334:	f8bd 3000 	ldrh.w	r3, [sp]
 800f338:	4581      	cmp	r9, r0
 800f33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f33e:	f84c 3b04 	str.w	r3, [ip], #4
 800f342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f346:	d2db      	bcs.n	800f300 <quorem+0x44>
 800f348:	f855 300b 	ldr.w	r3, [r5, fp]
 800f34c:	b92b      	cbnz	r3, 800f35a <quorem+0x9e>
 800f34e:	9b01      	ldr	r3, [sp, #4]
 800f350:	3b04      	subs	r3, #4
 800f352:	429d      	cmp	r5, r3
 800f354:	461a      	mov	r2, r3
 800f356:	d32e      	bcc.n	800f3b6 <quorem+0xfa>
 800f358:	613c      	str	r4, [r7, #16]
 800f35a:	4638      	mov	r0, r7
 800f35c:	f001 f838 	bl	80103d0 <__mcmp>
 800f360:	2800      	cmp	r0, #0
 800f362:	db24      	blt.n	800f3ae <quorem+0xf2>
 800f364:	3601      	adds	r6, #1
 800f366:	4628      	mov	r0, r5
 800f368:	f04f 0c00 	mov.w	ip, #0
 800f36c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f370:	f8d0 e000 	ldr.w	lr, [r0]
 800f374:	b293      	uxth	r3, r2
 800f376:	ebac 0303 	sub.w	r3, ip, r3
 800f37a:	0c12      	lsrs	r2, r2, #16
 800f37c:	fa13 f38e 	uxtah	r3, r3, lr
 800f380:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f388:	b29b      	uxth	r3, r3
 800f38a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f38e:	45c1      	cmp	r9, r8
 800f390:	f840 3b04 	str.w	r3, [r0], #4
 800f394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f398:	d2e8      	bcs.n	800f36c <quorem+0xb0>
 800f39a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f39e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3a2:	b922      	cbnz	r2, 800f3ae <quorem+0xf2>
 800f3a4:	3b04      	subs	r3, #4
 800f3a6:	429d      	cmp	r5, r3
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	d30a      	bcc.n	800f3c2 <quorem+0x106>
 800f3ac:	613c      	str	r4, [r7, #16]
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	b003      	add	sp, #12
 800f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b6:	6812      	ldr	r2, [r2, #0]
 800f3b8:	3b04      	subs	r3, #4
 800f3ba:	2a00      	cmp	r2, #0
 800f3bc:	d1cc      	bne.n	800f358 <quorem+0x9c>
 800f3be:	3c01      	subs	r4, #1
 800f3c0:	e7c7      	b.n	800f352 <quorem+0x96>
 800f3c2:	6812      	ldr	r2, [r2, #0]
 800f3c4:	3b04      	subs	r3, #4
 800f3c6:	2a00      	cmp	r2, #0
 800f3c8:	d1f0      	bne.n	800f3ac <quorem+0xf0>
 800f3ca:	3c01      	subs	r4, #1
 800f3cc:	e7eb      	b.n	800f3a6 <quorem+0xea>
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	e7ee      	b.n	800f3b0 <quorem+0xf4>
 800f3d2:	0000      	movs	r0, r0
 800f3d4:	0000      	movs	r0, r0
	...

0800f3d8 <_dtoa_r>:
 800f3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3dc:	ed2d 8b02 	vpush	{d8}
 800f3e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f3e2:	b091      	sub	sp, #68	; 0x44
 800f3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f3e8:	ec59 8b10 	vmov	r8, r9, d0
 800f3ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f3ee:	9106      	str	r1, [sp, #24]
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	9208      	str	r2, [sp, #32]
 800f3f4:	930c      	str	r3, [sp, #48]	; 0x30
 800f3f6:	b975      	cbnz	r5, 800f416 <_dtoa_r+0x3e>
 800f3f8:	2010      	movs	r0, #16
 800f3fa:	f000 fd5f 	bl	800febc <malloc>
 800f3fe:	4602      	mov	r2, r0
 800f400:	6270      	str	r0, [r6, #36]	; 0x24
 800f402:	b920      	cbnz	r0, 800f40e <_dtoa_r+0x36>
 800f404:	4baa      	ldr	r3, [pc, #680]	; (800f6b0 <_dtoa_r+0x2d8>)
 800f406:	21ea      	movs	r1, #234	; 0xea
 800f408:	48aa      	ldr	r0, [pc, #680]	; (800f6b4 <_dtoa_r+0x2dc>)
 800f40a:	f001 fb45 	bl	8010a98 <__assert_func>
 800f40e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f412:	6005      	str	r5, [r0, #0]
 800f414:	60c5      	str	r5, [r0, #12]
 800f416:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f418:	6819      	ldr	r1, [r3, #0]
 800f41a:	b151      	cbz	r1, 800f432 <_dtoa_r+0x5a>
 800f41c:	685a      	ldr	r2, [r3, #4]
 800f41e:	604a      	str	r2, [r1, #4]
 800f420:	2301      	movs	r3, #1
 800f422:	4093      	lsls	r3, r2
 800f424:	608b      	str	r3, [r1, #8]
 800f426:	4630      	mov	r0, r6
 800f428:	f000 fd90 	bl	800ff4c <_Bfree>
 800f42c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f42e:	2200      	movs	r2, #0
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	f1b9 0300 	subs.w	r3, r9, #0
 800f436:	bfbb      	ittet	lt
 800f438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f43c:	9303      	strlt	r3, [sp, #12]
 800f43e:	2300      	movge	r3, #0
 800f440:	2201      	movlt	r2, #1
 800f442:	bfac      	ite	ge
 800f444:	6023      	strge	r3, [r4, #0]
 800f446:	6022      	strlt	r2, [r4, #0]
 800f448:	4b9b      	ldr	r3, [pc, #620]	; (800f6b8 <_dtoa_r+0x2e0>)
 800f44a:	9c03      	ldr	r4, [sp, #12]
 800f44c:	43a3      	bics	r3, r4
 800f44e:	d11c      	bne.n	800f48a <_dtoa_r+0xb2>
 800f450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f452:	f242 730f 	movw	r3, #9999	; 0x270f
 800f456:	6013      	str	r3, [r2, #0]
 800f458:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f45c:	ea53 0308 	orrs.w	r3, r3, r8
 800f460:	f000 84fd 	beq.w	800fe5e <_dtoa_r+0xa86>
 800f464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f466:	b963      	cbnz	r3, 800f482 <_dtoa_r+0xaa>
 800f468:	4b94      	ldr	r3, [pc, #592]	; (800f6bc <_dtoa_r+0x2e4>)
 800f46a:	e01f      	b.n	800f4ac <_dtoa_r+0xd4>
 800f46c:	4b94      	ldr	r3, [pc, #592]	; (800f6c0 <_dtoa_r+0x2e8>)
 800f46e:	9301      	str	r3, [sp, #4]
 800f470:	3308      	adds	r3, #8
 800f472:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f474:	6013      	str	r3, [r2, #0]
 800f476:	9801      	ldr	r0, [sp, #4]
 800f478:	b011      	add	sp, #68	; 0x44
 800f47a:	ecbd 8b02 	vpop	{d8}
 800f47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f482:	4b8e      	ldr	r3, [pc, #568]	; (800f6bc <_dtoa_r+0x2e4>)
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	3303      	adds	r3, #3
 800f488:	e7f3      	b.n	800f472 <_dtoa_r+0x9a>
 800f48a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f48e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f496:	d10b      	bne.n	800f4b0 <_dtoa_r+0xd8>
 800f498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f49a:	2301      	movs	r3, #1
 800f49c:	6013      	str	r3, [r2, #0]
 800f49e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f000 84d9 	beq.w	800fe58 <_dtoa_r+0xa80>
 800f4a6:	4887      	ldr	r0, [pc, #540]	; (800f6c4 <_dtoa_r+0x2ec>)
 800f4a8:	6018      	str	r0, [r3, #0]
 800f4aa:	1e43      	subs	r3, r0, #1
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	e7e2      	b.n	800f476 <_dtoa_r+0x9e>
 800f4b0:	a90f      	add	r1, sp, #60	; 0x3c
 800f4b2:	aa0e      	add	r2, sp, #56	; 0x38
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	eeb0 0b48 	vmov.f64	d0, d8
 800f4ba:	f001 f82f 	bl	801051c <__d2b>
 800f4be:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f4c2:	4605      	mov	r5, r0
 800f4c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f4c6:	2900      	cmp	r1, #0
 800f4c8:	d046      	beq.n	800f558 <_dtoa_r+0x180>
 800f4ca:	ee18 4a90 	vmov	r4, s17
 800f4ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f4d2:	ec53 2b18 	vmov	r2, r3, d8
 800f4d6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f4da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f4de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f4e2:	2400      	movs	r4, #0
 800f4e4:	ec43 2b16 	vmov	d6, r2, r3
 800f4e8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f4ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f698 <_dtoa_r+0x2c0>
 800f4f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f4f4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f6a0 <_dtoa_r+0x2c8>
 800f4f8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f4fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f6a8 <_dtoa_r+0x2d0>
 800f500:	ee07 1a90 	vmov	s15, r1
 800f504:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f508:	eeb0 7b46 	vmov.f64	d7, d6
 800f50c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f510:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f514:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51c:	ee16 ba90 	vmov	fp, s13
 800f520:	940a      	str	r4, [sp, #40]	; 0x28
 800f522:	d508      	bpl.n	800f536 <_dtoa_r+0x15e>
 800f524:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f528:	eeb4 6b47 	vcmp.f64	d6, d7
 800f52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f530:	bf18      	it	ne
 800f532:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f536:	f1bb 0f16 	cmp.w	fp, #22
 800f53a:	d82f      	bhi.n	800f59c <_dtoa_r+0x1c4>
 800f53c:	4b62      	ldr	r3, [pc, #392]	; (800f6c8 <_dtoa_r+0x2f0>)
 800f53e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f542:	ed93 7b00 	vldr	d7, [r3]
 800f546:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54e:	d501      	bpl.n	800f554 <_dtoa_r+0x17c>
 800f550:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f554:	2300      	movs	r3, #0
 800f556:	e022      	b.n	800f59e <_dtoa_r+0x1c6>
 800f558:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f55a:	4401      	add	r1, r0
 800f55c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f560:	2b20      	cmp	r3, #32
 800f562:	bfc1      	itttt	gt
 800f564:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f568:	fa04 f303 	lslgt.w	r3, r4, r3
 800f56c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f570:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f574:	bfd6      	itet	le
 800f576:	f1c3 0320 	rsble	r3, r3, #32
 800f57a:	ea43 0808 	orrgt.w	r8, r3, r8
 800f57e:	fa08 f803 	lslle.w	r8, r8, r3
 800f582:	ee07 8a90 	vmov	s15, r8
 800f586:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f58a:	3901      	subs	r1, #1
 800f58c:	ee17 4a90 	vmov	r4, s15
 800f590:	ec53 2b17 	vmov	r2, r3, d7
 800f594:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f598:	2401      	movs	r4, #1
 800f59a:	e7a3      	b.n	800f4e4 <_dtoa_r+0x10c>
 800f59c:	2301      	movs	r3, #1
 800f59e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5a0:	1a43      	subs	r3, r0, r1
 800f5a2:	1e5a      	subs	r2, r3, #1
 800f5a4:	bf45      	ittet	mi
 800f5a6:	f1c3 0301 	rsbmi	r3, r3, #1
 800f5aa:	9304      	strmi	r3, [sp, #16]
 800f5ac:	2300      	movpl	r3, #0
 800f5ae:	2300      	movmi	r3, #0
 800f5b0:	9205      	str	r2, [sp, #20]
 800f5b2:	bf54      	ite	pl
 800f5b4:	9304      	strpl	r3, [sp, #16]
 800f5b6:	9305      	strmi	r3, [sp, #20]
 800f5b8:	f1bb 0f00 	cmp.w	fp, #0
 800f5bc:	db18      	blt.n	800f5f0 <_dtoa_r+0x218>
 800f5be:	9b05      	ldr	r3, [sp, #20]
 800f5c0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f5c4:	445b      	add	r3, fp
 800f5c6:	9305      	str	r3, [sp, #20]
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	9a06      	ldr	r2, [sp, #24]
 800f5cc:	2a09      	cmp	r2, #9
 800f5ce:	d849      	bhi.n	800f664 <_dtoa_r+0x28c>
 800f5d0:	2a05      	cmp	r2, #5
 800f5d2:	bfc4      	itt	gt
 800f5d4:	3a04      	subgt	r2, #4
 800f5d6:	9206      	strgt	r2, [sp, #24]
 800f5d8:	9a06      	ldr	r2, [sp, #24]
 800f5da:	f1a2 0202 	sub.w	r2, r2, #2
 800f5de:	bfcc      	ite	gt
 800f5e0:	2400      	movgt	r4, #0
 800f5e2:	2401      	movle	r4, #1
 800f5e4:	2a03      	cmp	r2, #3
 800f5e6:	d848      	bhi.n	800f67a <_dtoa_r+0x2a2>
 800f5e8:	e8df f002 	tbb	[pc, r2]
 800f5ec:	3a2c2e0b 	.word	0x3a2c2e0b
 800f5f0:	9b04      	ldr	r3, [sp, #16]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	eba3 030b 	sub.w	r3, r3, fp
 800f5f8:	9304      	str	r3, [sp, #16]
 800f5fa:	9209      	str	r2, [sp, #36]	; 0x24
 800f5fc:	f1cb 0300 	rsb	r3, fp, #0
 800f600:	e7e3      	b.n	800f5ca <_dtoa_r+0x1f2>
 800f602:	2200      	movs	r2, #0
 800f604:	9207      	str	r2, [sp, #28]
 800f606:	9a08      	ldr	r2, [sp, #32]
 800f608:	2a00      	cmp	r2, #0
 800f60a:	dc39      	bgt.n	800f680 <_dtoa_r+0x2a8>
 800f60c:	f04f 0a01 	mov.w	sl, #1
 800f610:	46d1      	mov	r9, sl
 800f612:	4652      	mov	r2, sl
 800f614:	f8cd a020 	str.w	sl, [sp, #32]
 800f618:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f61a:	2100      	movs	r1, #0
 800f61c:	6079      	str	r1, [r7, #4]
 800f61e:	2004      	movs	r0, #4
 800f620:	f100 0c14 	add.w	ip, r0, #20
 800f624:	4594      	cmp	ip, r2
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	d92f      	bls.n	800f68a <_dtoa_r+0x2b2>
 800f62a:	4630      	mov	r0, r6
 800f62c:	930d      	str	r3, [sp, #52]	; 0x34
 800f62e:	f000 fc4d 	bl	800fecc <_Balloc>
 800f632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f634:	9001      	str	r0, [sp, #4]
 800f636:	4602      	mov	r2, r0
 800f638:	2800      	cmp	r0, #0
 800f63a:	d149      	bne.n	800f6d0 <_dtoa_r+0x2f8>
 800f63c:	4b23      	ldr	r3, [pc, #140]	; (800f6cc <_dtoa_r+0x2f4>)
 800f63e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f642:	e6e1      	b.n	800f408 <_dtoa_r+0x30>
 800f644:	2201      	movs	r2, #1
 800f646:	e7dd      	b.n	800f604 <_dtoa_r+0x22c>
 800f648:	2200      	movs	r2, #0
 800f64a:	9207      	str	r2, [sp, #28]
 800f64c:	9a08      	ldr	r2, [sp, #32]
 800f64e:	eb0b 0a02 	add.w	sl, fp, r2
 800f652:	f10a 0901 	add.w	r9, sl, #1
 800f656:	464a      	mov	r2, r9
 800f658:	2a01      	cmp	r2, #1
 800f65a:	bfb8      	it	lt
 800f65c:	2201      	movlt	r2, #1
 800f65e:	e7db      	b.n	800f618 <_dtoa_r+0x240>
 800f660:	2201      	movs	r2, #1
 800f662:	e7f2      	b.n	800f64a <_dtoa_r+0x272>
 800f664:	2401      	movs	r4, #1
 800f666:	2200      	movs	r2, #0
 800f668:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f66c:	f04f 3aff 	mov.w	sl, #4294967295
 800f670:	2100      	movs	r1, #0
 800f672:	46d1      	mov	r9, sl
 800f674:	2212      	movs	r2, #18
 800f676:	9108      	str	r1, [sp, #32]
 800f678:	e7ce      	b.n	800f618 <_dtoa_r+0x240>
 800f67a:	2201      	movs	r2, #1
 800f67c:	9207      	str	r2, [sp, #28]
 800f67e:	e7f5      	b.n	800f66c <_dtoa_r+0x294>
 800f680:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f684:	46d1      	mov	r9, sl
 800f686:	4652      	mov	r2, sl
 800f688:	e7c6      	b.n	800f618 <_dtoa_r+0x240>
 800f68a:	3101      	adds	r1, #1
 800f68c:	6079      	str	r1, [r7, #4]
 800f68e:	0040      	lsls	r0, r0, #1
 800f690:	e7c6      	b.n	800f620 <_dtoa_r+0x248>
 800f692:	bf00      	nop
 800f694:	f3af 8000 	nop.w
 800f698:	636f4361 	.word	0x636f4361
 800f69c:	3fd287a7 	.word	0x3fd287a7
 800f6a0:	8b60c8b3 	.word	0x8b60c8b3
 800f6a4:	3fc68a28 	.word	0x3fc68a28
 800f6a8:	509f79fb 	.word	0x509f79fb
 800f6ac:	3fd34413 	.word	0x3fd34413
 800f6b0:	0801b9f9 	.word	0x0801b9f9
 800f6b4:	0801ba10 	.word	0x0801ba10
 800f6b8:	7ff00000 	.word	0x7ff00000
 800f6bc:	0801b9f5 	.word	0x0801b9f5
 800f6c0:	0801b9ec 	.word	0x0801b9ec
 800f6c4:	0801b9c9 	.word	0x0801b9c9
 800f6c8:	0801bb00 	.word	0x0801bb00
 800f6cc:	0801ba6b 	.word	0x0801ba6b
 800f6d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f6d2:	9901      	ldr	r1, [sp, #4]
 800f6d4:	6011      	str	r1, [r2, #0]
 800f6d6:	f1b9 0f0e 	cmp.w	r9, #14
 800f6da:	d86c      	bhi.n	800f7b6 <_dtoa_r+0x3de>
 800f6dc:	2c00      	cmp	r4, #0
 800f6de:	d06a      	beq.n	800f7b6 <_dtoa_r+0x3de>
 800f6e0:	f1bb 0f00 	cmp.w	fp, #0
 800f6e4:	f340 80a0 	ble.w	800f828 <_dtoa_r+0x450>
 800f6e8:	49c1      	ldr	r1, [pc, #772]	; (800f9f0 <_dtoa_r+0x618>)
 800f6ea:	f00b 020f 	and.w	r2, fp, #15
 800f6ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f6f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f6f6:	ed92 7b00 	vldr	d7, [r2]
 800f6fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f6fe:	f000 8087 	beq.w	800f810 <_dtoa_r+0x438>
 800f702:	4abc      	ldr	r2, [pc, #752]	; (800f9f4 <_dtoa_r+0x61c>)
 800f704:	ed92 6b08 	vldr	d6, [r2, #32]
 800f708:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f70c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f710:	f001 010f 	and.w	r1, r1, #15
 800f714:	2203      	movs	r2, #3
 800f716:	48b7      	ldr	r0, [pc, #732]	; (800f9f4 <_dtoa_r+0x61c>)
 800f718:	2900      	cmp	r1, #0
 800f71a:	d17b      	bne.n	800f814 <_dtoa_r+0x43c>
 800f71c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f720:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f724:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f72a:	2900      	cmp	r1, #0
 800f72c:	f000 80a2 	beq.w	800f874 <_dtoa_r+0x49c>
 800f730:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f734:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f738:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f740:	f140 8098 	bpl.w	800f874 <_dtoa_r+0x49c>
 800f744:	f1b9 0f00 	cmp.w	r9, #0
 800f748:	f000 8094 	beq.w	800f874 <_dtoa_r+0x49c>
 800f74c:	f1ba 0f00 	cmp.w	sl, #0
 800f750:	dd2f      	ble.n	800f7b2 <_dtoa_r+0x3da>
 800f752:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f75a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f75e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f762:	3201      	adds	r2, #1
 800f764:	4650      	mov	r0, sl
 800f766:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f76a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f76e:	ee07 2a90 	vmov	s15, r2
 800f772:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f776:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f77a:	ee15 4a90 	vmov	r4, s11
 800f77e:	ec52 1b15 	vmov	r1, r2, d5
 800f782:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f786:	2800      	cmp	r0, #0
 800f788:	d177      	bne.n	800f87a <_dtoa_r+0x4a2>
 800f78a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f78e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f792:	ec42 1b17 	vmov	d7, r1, r2
 800f796:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79e:	f300 8263 	bgt.w	800fc68 <_dtoa_r+0x890>
 800f7a2:	eeb1 7b47 	vneg.f64	d7, d7
 800f7a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ae:	f100 8258 	bmi.w	800fc62 <_dtoa_r+0x88a>
 800f7b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f7b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7b8:	2a00      	cmp	r2, #0
 800f7ba:	f2c0 811d 	blt.w	800f9f8 <_dtoa_r+0x620>
 800f7be:	f1bb 0f0e 	cmp.w	fp, #14
 800f7c2:	f300 8119 	bgt.w	800f9f8 <_dtoa_r+0x620>
 800f7c6:	4b8a      	ldr	r3, [pc, #552]	; (800f9f0 <_dtoa_r+0x618>)
 800f7c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f7cc:	ed93 6b00 	vldr	d6, [r3]
 800f7d0:	9b08      	ldr	r3, [sp, #32]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f280 80b7 	bge.w	800f946 <_dtoa_r+0x56e>
 800f7d8:	f1b9 0f00 	cmp.w	r9, #0
 800f7dc:	f300 80b3 	bgt.w	800f946 <_dtoa_r+0x56e>
 800f7e0:	f040 823f 	bne.w	800fc62 <_dtoa_r+0x88a>
 800f7e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f7e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f7ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f8:	464c      	mov	r4, r9
 800f7fa:	464f      	mov	r7, r9
 800f7fc:	f280 8215 	bge.w	800fc2a <_dtoa_r+0x852>
 800f800:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f804:	2331      	movs	r3, #49	; 0x31
 800f806:	f808 3b01 	strb.w	r3, [r8], #1
 800f80a:	f10b 0b01 	add.w	fp, fp, #1
 800f80e:	e211      	b.n	800fc34 <_dtoa_r+0x85c>
 800f810:	2202      	movs	r2, #2
 800f812:	e780      	b.n	800f716 <_dtoa_r+0x33e>
 800f814:	07cc      	lsls	r4, r1, #31
 800f816:	d504      	bpl.n	800f822 <_dtoa_r+0x44a>
 800f818:	ed90 6b00 	vldr	d6, [r0]
 800f81c:	3201      	adds	r2, #1
 800f81e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f822:	1049      	asrs	r1, r1, #1
 800f824:	3008      	adds	r0, #8
 800f826:	e777      	b.n	800f718 <_dtoa_r+0x340>
 800f828:	d022      	beq.n	800f870 <_dtoa_r+0x498>
 800f82a:	f1cb 0100 	rsb	r1, fp, #0
 800f82e:	4a70      	ldr	r2, [pc, #448]	; (800f9f0 <_dtoa_r+0x618>)
 800f830:	f001 000f 	and.w	r0, r1, #15
 800f834:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f838:	ed92 7b00 	vldr	d7, [r2]
 800f83c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f840:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f844:	486b      	ldr	r0, [pc, #428]	; (800f9f4 <_dtoa_r+0x61c>)
 800f846:	1109      	asrs	r1, r1, #4
 800f848:	2400      	movs	r4, #0
 800f84a:	2202      	movs	r2, #2
 800f84c:	b929      	cbnz	r1, 800f85a <_dtoa_r+0x482>
 800f84e:	2c00      	cmp	r4, #0
 800f850:	f43f af6a 	beq.w	800f728 <_dtoa_r+0x350>
 800f854:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f858:	e766      	b.n	800f728 <_dtoa_r+0x350>
 800f85a:	07cf      	lsls	r7, r1, #31
 800f85c:	d505      	bpl.n	800f86a <_dtoa_r+0x492>
 800f85e:	ed90 6b00 	vldr	d6, [r0]
 800f862:	3201      	adds	r2, #1
 800f864:	2401      	movs	r4, #1
 800f866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f86a:	1049      	asrs	r1, r1, #1
 800f86c:	3008      	adds	r0, #8
 800f86e:	e7ed      	b.n	800f84c <_dtoa_r+0x474>
 800f870:	2202      	movs	r2, #2
 800f872:	e759      	b.n	800f728 <_dtoa_r+0x350>
 800f874:	465f      	mov	r7, fp
 800f876:	4648      	mov	r0, r9
 800f878:	e775      	b.n	800f766 <_dtoa_r+0x38e>
 800f87a:	ec42 1b17 	vmov	d7, r1, r2
 800f87e:	4a5c      	ldr	r2, [pc, #368]	; (800f9f0 <_dtoa_r+0x618>)
 800f880:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f884:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f888:	9a01      	ldr	r2, [sp, #4]
 800f88a:	1814      	adds	r4, r2, r0
 800f88c:	9a07      	ldr	r2, [sp, #28]
 800f88e:	b352      	cbz	r2, 800f8e6 <_dtoa_r+0x50e>
 800f890:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f894:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f898:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f89c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f8a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f8a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f8a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f8ac:	ee14 2a90 	vmov	r2, s9
 800f8b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f8b4:	3230      	adds	r2, #48	; 0x30
 800f8b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f8ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c2:	f808 2b01 	strb.w	r2, [r8], #1
 800f8c6:	d439      	bmi.n	800f93c <_dtoa_r+0x564>
 800f8c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f8cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d4:	d472      	bmi.n	800f9bc <_dtoa_r+0x5e4>
 800f8d6:	45a0      	cmp	r8, r4
 800f8d8:	f43f af6b 	beq.w	800f7b2 <_dtoa_r+0x3da>
 800f8dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f8e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8e4:	e7e0      	b.n	800f8a8 <_dtoa_r+0x4d0>
 800f8e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f8ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f8f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f8f8:	ee14 2a90 	vmov	r2, s9
 800f8fc:	3230      	adds	r2, #48	; 0x30
 800f8fe:	f808 2b01 	strb.w	r2, [r8], #1
 800f902:	45a0      	cmp	r8, r4
 800f904:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f908:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f90c:	d118      	bne.n	800f940 <_dtoa_r+0x568>
 800f90e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f912:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f916:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91e:	dc4d      	bgt.n	800f9bc <_dtoa_r+0x5e4>
 800f920:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f924:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92c:	f57f af41 	bpl.w	800f7b2 <_dtoa_r+0x3da>
 800f930:	4688      	mov	r8, r1
 800f932:	3901      	subs	r1, #1
 800f934:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f938:	2b30      	cmp	r3, #48	; 0x30
 800f93a:	d0f9      	beq.n	800f930 <_dtoa_r+0x558>
 800f93c:	46bb      	mov	fp, r7
 800f93e:	e02a      	b.n	800f996 <_dtoa_r+0x5be>
 800f940:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f944:	e7d6      	b.n	800f8f4 <_dtoa_r+0x51c>
 800f946:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f94a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f94e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f952:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f956:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f95a:	ee15 3a10 	vmov	r3, s10
 800f95e:	3330      	adds	r3, #48	; 0x30
 800f960:	f808 3b01 	strb.w	r3, [r8], #1
 800f964:	9b01      	ldr	r3, [sp, #4]
 800f966:	eba8 0303 	sub.w	r3, r8, r3
 800f96a:	4599      	cmp	r9, r3
 800f96c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f970:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f974:	d133      	bne.n	800f9de <_dtoa_r+0x606>
 800f976:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f97a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f982:	dc1a      	bgt.n	800f9ba <_dtoa_r+0x5e2>
 800f984:	eeb4 7b46 	vcmp.f64	d7, d6
 800f988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98c:	d103      	bne.n	800f996 <_dtoa_r+0x5be>
 800f98e:	ee15 3a10 	vmov	r3, s10
 800f992:	07d9      	lsls	r1, r3, #31
 800f994:	d411      	bmi.n	800f9ba <_dtoa_r+0x5e2>
 800f996:	4629      	mov	r1, r5
 800f998:	4630      	mov	r0, r6
 800f99a:	f000 fad7 	bl	800ff4c <_Bfree>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9a2:	f888 3000 	strb.w	r3, [r8]
 800f9a6:	f10b 0301 	add.w	r3, fp, #1
 800f9aa:	6013      	str	r3, [r2, #0]
 800f9ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f43f ad61 	beq.w	800f476 <_dtoa_r+0x9e>
 800f9b4:	f8c3 8000 	str.w	r8, [r3]
 800f9b8:	e55d      	b.n	800f476 <_dtoa_r+0x9e>
 800f9ba:	465f      	mov	r7, fp
 800f9bc:	4643      	mov	r3, r8
 800f9be:	4698      	mov	r8, r3
 800f9c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f9c4:	2a39      	cmp	r2, #57	; 0x39
 800f9c6:	d106      	bne.n	800f9d6 <_dtoa_r+0x5fe>
 800f9c8:	9a01      	ldr	r2, [sp, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d1f7      	bne.n	800f9be <_dtoa_r+0x5e6>
 800f9ce:	9901      	ldr	r1, [sp, #4]
 800f9d0:	2230      	movs	r2, #48	; 0x30
 800f9d2:	3701      	adds	r7, #1
 800f9d4:	700a      	strb	r2, [r1, #0]
 800f9d6:	781a      	ldrb	r2, [r3, #0]
 800f9d8:	3201      	adds	r2, #1
 800f9da:	701a      	strb	r2, [r3, #0]
 800f9dc:	e7ae      	b.n	800f93c <_dtoa_r+0x564>
 800f9de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ea:	d1b2      	bne.n	800f952 <_dtoa_r+0x57a>
 800f9ec:	e7d3      	b.n	800f996 <_dtoa_r+0x5be>
 800f9ee:	bf00      	nop
 800f9f0:	0801bb00 	.word	0x0801bb00
 800f9f4:	0801bad8 	.word	0x0801bad8
 800f9f8:	9907      	ldr	r1, [sp, #28]
 800f9fa:	2900      	cmp	r1, #0
 800f9fc:	f000 80d0 	beq.w	800fba0 <_dtoa_r+0x7c8>
 800fa00:	9906      	ldr	r1, [sp, #24]
 800fa02:	2901      	cmp	r1, #1
 800fa04:	f300 80b4 	bgt.w	800fb70 <_dtoa_r+0x798>
 800fa08:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fa0a:	2900      	cmp	r1, #0
 800fa0c:	f000 80ac 	beq.w	800fb68 <_dtoa_r+0x790>
 800fa10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fa14:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fa18:	461c      	mov	r4, r3
 800fa1a:	930a      	str	r3, [sp, #40]	; 0x28
 800fa1c:	9b04      	ldr	r3, [sp, #16]
 800fa1e:	4413      	add	r3, r2
 800fa20:	9304      	str	r3, [sp, #16]
 800fa22:	9b05      	ldr	r3, [sp, #20]
 800fa24:	2101      	movs	r1, #1
 800fa26:	4413      	add	r3, r2
 800fa28:	4630      	mov	r0, r6
 800fa2a:	9305      	str	r3, [sp, #20]
 800fa2c:	f000 fb46 	bl	80100bc <__i2b>
 800fa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa32:	4607      	mov	r7, r0
 800fa34:	f1b8 0f00 	cmp.w	r8, #0
 800fa38:	dd0d      	ble.n	800fa56 <_dtoa_r+0x67e>
 800fa3a:	9a05      	ldr	r2, [sp, #20]
 800fa3c:	2a00      	cmp	r2, #0
 800fa3e:	dd0a      	ble.n	800fa56 <_dtoa_r+0x67e>
 800fa40:	4542      	cmp	r2, r8
 800fa42:	9904      	ldr	r1, [sp, #16]
 800fa44:	bfa8      	it	ge
 800fa46:	4642      	movge	r2, r8
 800fa48:	1a89      	subs	r1, r1, r2
 800fa4a:	9104      	str	r1, [sp, #16]
 800fa4c:	9905      	ldr	r1, [sp, #20]
 800fa4e:	eba8 0802 	sub.w	r8, r8, r2
 800fa52:	1a8a      	subs	r2, r1, r2
 800fa54:	9205      	str	r2, [sp, #20]
 800fa56:	b303      	cbz	r3, 800fa9a <_dtoa_r+0x6c2>
 800fa58:	9a07      	ldr	r2, [sp, #28]
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	f000 80a5 	beq.w	800fbaa <_dtoa_r+0x7d2>
 800fa60:	2c00      	cmp	r4, #0
 800fa62:	dd13      	ble.n	800fa8c <_dtoa_r+0x6b4>
 800fa64:	4639      	mov	r1, r7
 800fa66:	4622      	mov	r2, r4
 800fa68:	4630      	mov	r0, r6
 800fa6a:	930d      	str	r3, [sp, #52]	; 0x34
 800fa6c:	f000 fbe6 	bl	801023c <__pow5mult>
 800fa70:	462a      	mov	r2, r5
 800fa72:	4601      	mov	r1, r0
 800fa74:	4607      	mov	r7, r0
 800fa76:	4630      	mov	r0, r6
 800fa78:	f000 fb36 	bl	80100e8 <__multiply>
 800fa7c:	4629      	mov	r1, r5
 800fa7e:	900a      	str	r0, [sp, #40]	; 0x28
 800fa80:	4630      	mov	r0, r6
 800fa82:	f000 fa63 	bl	800ff4c <_Bfree>
 800fa86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa8a:	4615      	mov	r5, r2
 800fa8c:	1b1a      	subs	r2, r3, r4
 800fa8e:	d004      	beq.n	800fa9a <_dtoa_r+0x6c2>
 800fa90:	4629      	mov	r1, r5
 800fa92:	4630      	mov	r0, r6
 800fa94:	f000 fbd2 	bl	801023c <__pow5mult>
 800fa98:	4605      	mov	r5, r0
 800fa9a:	2101      	movs	r1, #1
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f000 fb0d 	bl	80100bc <__i2b>
 800faa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	4604      	mov	r4, r0
 800faa8:	f340 8081 	ble.w	800fbae <_dtoa_r+0x7d6>
 800faac:	461a      	mov	r2, r3
 800faae:	4601      	mov	r1, r0
 800fab0:	4630      	mov	r0, r6
 800fab2:	f000 fbc3 	bl	801023c <__pow5mult>
 800fab6:	9b06      	ldr	r3, [sp, #24]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	4604      	mov	r4, r0
 800fabc:	dd7a      	ble.n	800fbb4 <_dtoa_r+0x7dc>
 800fabe:	2300      	movs	r3, #0
 800fac0:	930a      	str	r3, [sp, #40]	; 0x28
 800fac2:	6922      	ldr	r2, [r4, #16]
 800fac4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fac8:	6910      	ldr	r0, [r2, #16]
 800faca:	f000 faa7 	bl	801001c <__hi0bits>
 800face:	f1c0 0020 	rsb	r0, r0, #32
 800fad2:	9b05      	ldr	r3, [sp, #20]
 800fad4:	4418      	add	r0, r3
 800fad6:	f010 001f 	ands.w	r0, r0, #31
 800fada:	f000 808c 	beq.w	800fbf6 <_dtoa_r+0x81e>
 800fade:	f1c0 0220 	rsb	r2, r0, #32
 800fae2:	2a04      	cmp	r2, #4
 800fae4:	f340 8085 	ble.w	800fbf2 <_dtoa_r+0x81a>
 800fae8:	f1c0 001c 	rsb	r0, r0, #28
 800faec:	9b04      	ldr	r3, [sp, #16]
 800faee:	4403      	add	r3, r0
 800faf0:	9304      	str	r3, [sp, #16]
 800faf2:	9b05      	ldr	r3, [sp, #20]
 800faf4:	4403      	add	r3, r0
 800faf6:	4480      	add	r8, r0
 800faf8:	9305      	str	r3, [sp, #20]
 800fafa:	9b04      	ldr	r3, [sp, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	dd05      	ble.n	800fb0c <_dtoa_r+0x734>
 800fb00:	4629      	mov	r1, r5
 800fb02:	461a      	mov	r2, r3
 800fb04:	4630      	mov	r0, r6
 800fb06:	f000 fbf3 	bl	80102f0 <__lshift>
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	9b05      	ldr	r3, [sp, #20]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	dd05      	ble.n	800fb1e <_dtoa_r+0x746>
 800fb12:	4621      	mov	r1, r4
 800fb14:	461a      	mov	r2, r3
 800fb16:	4630      	mov	r0, r6
 800fb18:	f000 fbea 	bl	80102f0 <__lshift>
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d06a      	beq.n	800fbfa <_dtoa_r+0x822>
 800fb24:	4621      	mov	r1, r4
 800fb26:	4628      	mov	r0, r5
 800fb28:	f000 fc52 	bl	80103d0 <__mcmp>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	da64      	bge.n	800fbfa <_dtoa_r+0x822>
 800fb30:	2300      	movs	r3, #0
 800fb32:	4629      	mov	r1, r5
 800fb34:	220a      	movs	r2, #10
 800fb36:	4630      	mov	r0, r6
 800fb38:	f000 fa2a 	bl	800ff90 <__multadd>
 800fb3c:	9b07      	ldr	r3, [sp, #28]
 800fb3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb42:	4605      	mov	r5, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 8191 	beq.w	800fe6c <_dtoa_r+0xa94>
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	220a      	movs	r2, #10
 800fb50:	4630      	mov	r0, r6
 800fb52:	f000 fa1d 	bl	800ff90 <__multadd>
 800fb56:	f1ba 0f00 	cmp.w	sl, #0
 800fb5a:	4607      	mov	r7, r0
 800fb5c:	f300 808d 	bgt.w	800fc7a <_dtoa_r+0x8a2>
 800fb60:	9b06      	ldr	r3, [sp, #24]
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	dc50      	bgt.n	800fc08 <_dtoa_r+0x830>
 800fb66:	e088      	b.n	800fc7a <_dtoa_r+0x8a2>
 800fb68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fb6e:	e751      	b.n	800fa14 <_dtoa_r+0x63c>
 800fb70:	f109 34ff 	add.w	r4, r9, #4294967295
 800fb74:	42a3      	cmp	r3, r4
 800fb76:	bfbf      	itttt	lt
 800fb78:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800fb7a:	1ae3      	sublt	r3, r4, r3
 800fb7c:	18d2      	addlt	r2, r2, r3
 800fb7e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800fb80:	bfb6      	itet	lt
 800fb82:	4623      	movlt	r3, r4
 800fb84:	1b1c      	subge	r4, r3, r4
 800fb86:	2400      	movlt	r4, #0
 800fb88:	f1b9 0f00 	cmp.w	r9, #0
 800fb8c:	bfb5      	itete	lt
 800fb8e:	9a04      	ldrlt	r2, [sp, #16]
 800fb90:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800fb94:	eba2 0809 	sublt.w	r8, r2, r9
 800fb98:	464a      	movge	r2, r9
 800fb9a:	bfb8      	it	lt
 800fb9c:	2200      	movlt	r2, #0
 800fb9e:	e73c      	b.n	800fa1a <_dtoa_r+0x642>
 800fba0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fba4:	9f07      	ldr	r7, [sp, #28]
 800fba6:	461c      	mov	r4, r3
 800fba8:	e744      	b.n	800fa34 <_dtoa_r+0x65c>
 800fbaa:	461a      	mov	r2, r3
 800fbac:	e770      	b.n	800fa90 <_dtoa_r+0x6b8>
 800fbae:	9b06      	ldr	r3, [sp, #24]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	dc18      	bgt.n	800fbe6 <_dtoa_r+0x80e>
 800fbb4:	9b02      	ldr	r3, [sp, #8]
 800fbb6:	b9b3      	cbnz	r3, 800fbe6 <_dtoa_r+0x80e>
 800fbb8:	9b03      	ldr	r3, [sp, #12]
 800fbba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fbbe:	b9a2      	cbnz	r2, 800fbea <_dtoa_r+0x812>
 800fbc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fbc4:	0d12      	lsrs	r2, r2, #20
 800fbc6:	0512      	lsls	r2, r2, #20
 800fbc8:	b18a      	cbz	r2, 800fbee <_dtoa_r+0x816>
 800fbca:	9b04      	ldr	r3, [sp, #16]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	9304      	str	r3, [sp, #16]
 800fbd0:	9b05      	ldr	r3, [sp, #20]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	9305      	str	r3, [sp, #20]
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	930a      	str	r3, [sp, #40]	; 0x28
 800fbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f47f af70 	bne.w	800fac2 <_dtoa_r+0x6ea>
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	e775      	b.n	800fad2 <_dtoa_r+0x6fa>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	e7f6      	b.n	800fbd8 <_dtoa_r+0x800>
 800fbea:	9b02      	ldr	r3, [sp, #8]
 800fbec:	e7f4      	b.n	800fbd8 <_dtoa_r+0x800>
 800fbee:	920a      	str	r2, [sp, #40]	; 0x28
 800fbf0:	e7f3      	b.n	800fbda <_dtoa_r+0x802>
 800fbf2:	d082      	beq.n	800fafa <_dtoa_r+0x722>
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	301c      	adds	r0, #28
 800fbf8:	e778      	b.n	800faec <_dtoa_r+0x714>
 800fbfa:	f1b9 0f00 	cmp.w	r9, #0
 800fbfe:	dc37      	bgt.n	800fc70 <_dtoa_r+0x898>
 800fc00:	9b06      	ldr	r3, [sp, #24]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	dd34      	ble.n	800fc70 <_dtoa_r+0x898>
 800fc06:	46ca      	mov	sl, r9
 800fc08:	f1ba 0f00 	cmp.w	sl, #0
 800fc0c:	d10d      	bne.n	800fc2a <_dtoa_r+0x852>
 800fc0e:	4621      	mov	r1, r4
 800fc10:	4653      	mov	r3, sl
 800fc12:	2205      	movs	r2, #5
 800fc14:	4630      	mov	r0, r6
 800fc16:	f000 f9bb 	bl	800ff90 <__multadd>
 800fc1a:	4601      	mov	r1, r0
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f000 fbd6 	bl	80103d0 <__mcmp>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	f73f adeb 	bgt.w	800f800 <_dtoa_r+0x428>
 800fc2a:	9b08      	ldr	r3, [sp, #32]
 800fc2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc30:	ea6f 0b03 	mvn.w	fp, r3
 800fc34:	f04f 0900 	mov.w	r9, #0
 800fc38:	4621      	mov	r1, r4
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	f000 f986 	bl	800ff4c <_Bfree>
 800fc40:	2f00      	cmp	r7, #0
 800fc42:	f43f aea8 	beq.w	800f996 <_dtoa_r+0x5be>
 800fc46:	f1b9 0f00 	cmp.w	r9, #0
 800fc4a:	d005      	beq.n	800fc58 <_dtoa_r+0x880>
 800fc4c:	45b9      	cmp	r9, r7
 800fc4e:	d003      	beq.n	800fc58 <_dtoa_r+0x880>
 800fc50:	4649      	mov	r1, r9
 800fc52:	4630      	mov	r0, r6
 800fc54:	f000 f97a 	bl	800ff4c <_Bfree>
 800fc58:	4639      	mov	r1, r7
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f000 f976 	bl	800ff4c <_Bfree>
 800fc60:	e699      	b.n	800f996 <_dtoa_r+0x5be>
 800fc62:	2400      	movs	r4, #0
 800fc64:	4627      	mov	r7, r4
 800fc66:	e7e0      	b.n	800fc2a <_dtoa_r+0x852>
 800fc68:	46bb      	mov	fp, r7
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	4607      	mov	r7, r0
 800fc6e:	e5c7      	b.n	800f800 <_dtoa_r+0x428>
 800fc70:	9b07      	ldr	r3, [sp, #28]
 800fc72:	46ca      	mov	sl, r9
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 8100 	beq.w	800fe7a <_dtoa_r+0xaa2>
 800fc7a:	f1b8 0f00 	cmp.w	r8, #0
 800fc7e:	dd05      	ble.n	800fc8c <_dtoa_r+0x8b4>
 800fc80:	4639      	mov	r1, r7
 800fc82:	4642      	mov	r2, r8
 800fc84:	4630      	mov	r0, r6
 800fc86:	f000 fb33 	bl	80102f0 <__lshift>
 800fc8a:	4607      	mov	r7, r0
 800fc8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d05d      	beq.n	800fd4e <_dtoa_r+0x976>
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	4630      	mov	r0, r6
 800fc96:	f000 f919 	bl	800fecc <_Balloc>
 800fc9a:	4680      	mov	r8, r0
 800fc9c:	b928      	cbnz	r0, 800fcaa <_dtoa_r+0x8d2>
 800fc9e:	4b82      	ldr	r3, [pc, #520]	; (800fea8 <_dtoa_r+0xad0>)
 800fca0:	4602      	mov	r2, r0
 800fca2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fca6:	f7ff bbaf 	b.w	800f408 <_dtoa_r+0x30>
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	3202      	adds	r2, #2
 800fcae:	0092      	lsls	r2, r2, #2
 800fcb0:	f107 010c 	add.w	r1, r7, #12
 800fcb4:	300c      	adds	r0, #12
 800fcb6:	f7fe fe69 	bl	800e98c <memcpy>
 800fcba:	2201      	movs	r2, #1
 800fcbc:	4641      	mov	r1, r8
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f000 fb16 	bl	80102f0 <__lshift>
 800fcc4:	9b01      	ldr	r3, [sp, #4]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	9304      	str	r3, [sp, #16]
 800fcca:	9b01      	ldr	r3, [sp, #4]
 800fccc:	4453      	add	r3, sl
 800fcce:	9308      	str	r3, [sp, #32]
 800fcd0:	9b02      	ldr	r3, [sp, #8]
 800fcd2:	f003 0301 	and.w	r3, r3, #1
 800fcd6:	46b9      	mov	r9, r7
 800fcd8:	9307      	str	r3, [sp, #28]
 800fcda:	4607      	mov	r7, r0
 800fcdc:	9b04      	ldr	r3, [sp, #16]
 800fcde:	4621      	mov	r1, r4
 800fce0:	3b01      	subs	r3, #1
 800fce2:	4628      	mov	r0, r5
 800fce4:	9302      	str	r3, [sp, #8]
 800fce6:	f7ff fae9 	bl	800f2bc <quorem>
 800fcea:	4603      	mov	r3, r0
 800fcec:	3330      	adds	r3, #48	; 0x30
 800fcee:	9005      	str	r0, [sp, #20]
 800fcf0:	4649      	mov	r1, r9
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf6:	f000 fb6b 	bl	80103d0 <__mcmp>
 800fcfa:	463a      	mov	r2, r7
 800fcfc:	4682      	mov	sl, r0
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4630      	mov	r0, r6
 800fd02:	f000 fb81 	bl	8010408 <__mdiff>
 800fd06:	68c2      	ldr	r2, [r0, #12]
 800fd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0a:	4680      	mov	r8, r0
 800fd0c:	bb0a      	cbnz	r2, 800fd52 <_dtoa_r+0x97a>
 800fd0e:	4601      	mov	r1, r0
 800fd10:	4628      	mov	r0, r5
 800fd12:	f000 fb5d 	bl	80103d0 <__mcmp>
 800fd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd18:	4602      	mov	r2, r0
 800fd1a:	4641      	mov	r1, r8
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800fd22:	f000 f913 	bl	800ff4c <_Bfree>
 800fd26:	9b06      	ldr	r3, [sp, #24]
 800fd28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd2a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fd2e:	ea43 0102 	orr.w	r1, r3, r2
 800fd32:	9b07      	ldr	r3, [sp, #28]
 800fd34:	430b      	orrs	r3, r1
 800fd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd38:	d10d      	bne.n	800fd56 <_dtoa_r+0x97e>
 800fd3a:	2b39      	cmp	r3, #57	; 0x39
 800fd3c:	d029      	beq.n	800fd92 <_dtoa_r+0x9ba>
 800fd3e:	f1ba 0f00 	cmp.w	sl, #0
 800fd42:	dd01      	ble.n	800fd48 <_dtoa_r+0x970>
 800fd44:	9b05      	ldr	r3, [sp, #20]
 800fd46:	3331      	adds	r3, #49	; 0x31
 800fd48:	9a02      	ldr	r2, [sp, #8]
 800fd4a:	7013      	strb	r3, [r2, #0]
 800fd4c:	e774      	b.n	800fc38 <_dtoa_r+0x860>
 800fd4e:	4638      	mov	r0, r7
 800fd50:	e7b8      	b.n	800fcc4 <_dtoa_r+0x8ec>
 800fd52:	2201      	movs	r2, #1
 800fd54:	e7e1      	b.n	800fd1a <_dtoa_r+0x942>
 800fd56:	f1ba 0f00 	cmp.w	sl, #0
 800fd5a:	db06      	blt.n	800fd6a <_dtoa_r+0x992>
 800fd5c:	9906      	ldr	r1, [sp, #24]
 800fd5e:	ea41 0a0a 	orr.w	sl, r1, sl
 800fd62:	9907      	ldr	r1, [sp, #28]
 800fd64:	ea5a 0101 	orrs.w	r1, sl, r1
 800fd68:	d120      	bne.n	800fdac <_dtoa_r+0x9d4>
 800fd6a:	2a00      	cmp	r2, #0
 800fd6c:	ddec      	ble.n	800fd48 <_dtoa_r+0x970>
 800fd6e:	4629      	mov	r1, r5
 800fd70:	2201      	movs	r2, #1
 800fd72:	4630      	mov	r0, r6
 800fd74:	9304      	str	r3, [sp, #16]
 800fd76:	f000 fabb 	bl	80102f0 <__lshift>
 800fd7a:	4621      	mov	r1, r4
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	f000 fb27 	bl	80103d0 <__mcmp>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	dc02      	bgt.n	800fd8e <_dtoa_r+0x9b6>
 800fd88:	d1de      	bne.n	800fd48 <_dtoa_r+0x970>
 800fd8a:	07da      	lsls	r2, r3, #31
 800fd8c:	d5dc      	bpl.n	800fd48 <_dtoa_r+0x970>
 800fd8e:	2b39      	cmp	r3, #57	; 0x39
 800fd90:	d1d8      	bne.n	800fd44 <_dtoa_r+0x96c>
 800fd92:	9a02      	ldr	r2, [sp, #8]
 800fd94:	2339      	movs	r3, #57	; 0x39
 800fd96:	7013      	strb	r3, [r2, #0]
 800fd98:	4643      	mov	r3, r8
 800fd9a:	4698      	mov	r8, r3
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fda2:	2a39      	cmp	r2, #57	; 0x39
 800fda4:	d051      	beq.n	800fe4a <_dtoa_r+0xa72>
 800fda6:	3201      	adds	r2, #1
 800fda8:	701a      	strb	r2, [r3, #0]
 800fdaa:	e745      	b.n	800fc38 <_dtoa_r+0x860>
 800fdac:	2a00      	cmp	r2, #0
 800fdae:	dd03      	ble.n	800fdb8 <_dtoa_r+0x9e0>
 800fdb0:	2b39      	cmp	r3, #57	; 0x39
 800fdb2:	d0ee      	beq.n	800fd92 <_dtoa_r+0x9ba>
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	e7c7      	b.n	800fd48 <_dtoa_r+0x970>
 800fdb8:	9a04      	ldr	r2, [sp, #16]
 800fdba:	9908      	ldr	r1, [sp, #32]
 800fdbc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fdc0:	428a      	cmp	r2, r1
 800fdc2:	d02b      	beq.n	800fe1c <_dtoa_r+0xa44>
 800fdc4:	4629      	mov	r1, r5
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	220a      	movs	r2, #10
 800fdca:	4630      	mov	r0, r6
 800fdcc:	f000 f8e0 	bl	800ff90 <__multadd>
 800fdd0:	45b9      	cmp	r9, r7
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	f04f 0300 	mov.w	r3, #0
 800fdd8:	f04f 020a 	mov.w	r2, #10
 800fddc:	4649      	mov	r1, r9
 800fdde:	4630      	mov	r0, r6
 800fde0:	d107      	bne.n	800fdf2 <_dtoa_r+0xa1a>
 800fde2:	f000 f8d5 	bl	800ff90 <__multadd>
 800fde6:	4681      	mov	r9, r0
 800fde8:	4607      	mov	r7, r0
 800fdea:	9b04      	ldr	r3, [sp, #16]
 800fdec:	3301      	adds	r3, #1
 800fdee:	9304      	str	r3, [sp, #16]
 800fdf0:	e774      	b.n	800fcdc <_dtoa_r+0x904>
 800fdf2:	f000 f8cd 	bl	800ff90 <__multadd>
 800fdf6:	4639      	mov	r1, r7
 800fdf8:	4681      	mov	r9, r0
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	220a      	movs	r2, #10
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f000 f8c6 	bl	800ff90 <__multadd>
 800fe04:	4607      	mov	r7, r0
 800fe06:	e7f0      	b.n	800fdea <_dtoa_r+0xa12>
 800fe08:	f1ba 0f00 	cmp.w	sl, #0
 800fe0c:	9a01      	ldr	r2, [sp, #4]
 800fe0e:	bfcc      	ite	gt
 800fe10:	46d0      	movgt	r8, sl
 800fe12:	f04f 0801 	movle.w	r8, #1
 800fe16:	4490      	add	r8, r2
 800fe18:	f04f 0900 	mov.w	r9, #0
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	2201      	movs	r2, #1
 800fe20:	4630      	mov	r0, r6
 800fe22:	9302      	str	r3, [sp, #8]
 800fe24:	f000 fa64 	bl	80102f0 <__lshift>
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4605      	mov	r5, r0
 800fe2c:	f000 fad0 	bl	80103d0 <__mcmp>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	dcb1      	bgt.n	800fd98 <_dtoa_r+0x9c0>
 800fe34:	d102      	bne.n	800fe3c <_dtoa_r+0xa64>
 800fe36:	9b02      	ldr	r3, [sp, #8]
 800fe38:	07db      	lsls	r3, r3, #31
 800fe3a:	d4ad      	bmi.n	800fd98 <_dtoa_r+0x9c0>
 800fe3c:	4643      	mov	r3, r8
 800fe3e:	4698      	mov	r8, r3
 800fe40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe44:	2a30      	cmp	r2, #48	; 0x30
 800fe46:	d0fa      	beq.n	800fe3e <_dtoa_r+0xa66>
 800fe48:	e6f6      	b.n	800fc38 <_dtoa_r+0x860>
 800fe4a:	9a01      	ldr	r2, [sp, #4]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d1a4      	bne.n	800fd9a <_dtoa_r+0x9c2>
 800fe50:	f10b 0b01 	add.w	fp, fp, #1
 800fe54:	2331      	movs	r3, #49	; 0x31
 800fe56:	e778      	b.n	800fd4a <_dtoa_r+0x972>
 800fe58:	4b14      	ldr	r3, [pc, #80]	; (800feac <_dtoa_r+0xad4>)
 800fe5a:	f7ff bb27 	b.w	800f4ac <_dtoa_r+0xd4>
 800fe5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f47f ab03 	bne.w	800f46c <_dtoa_r+0x94>
 800fe66:	4b12      	ldr	r3, [pc, #72]	; (800feb0 <_dtoa_r+0xad8>)
 800fe68:	f7ff bb20 	b.w	800f4ac <_dtoa_r+0xd4>
 800fe6c:	f1ba 0f00 	cmp.w	sl, #0
 800fe70:	dc03      	bgt.n	800fe7a <_dtoa_r+0xaa2>
 800fe72:	9b06      	ldr	r3, [sp, #24]
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	f73f aec7 	bgt.w	800fc08 <_dtoa_r+0x830>
 800fe7a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fe7e:	4621      	mov	r1, r4
 800fe80:	4628      	mov	r0, r5
 800fe82:	f7ff fa1b 	bl	800f2bc <quorem>
 800fe86:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fe8a:	f808 3b01 	strb.w	r3, [r8], #1
 800fe8e:	9a01      	ldr	r2, [sp, #4]
 800fe90:	eba8 0202 	sub.w	r2, r8, r2
 800fe94:	4592      	cmp	sl, r2
 800fe96:	ddb7      	ble.n	800fe08 <_dtoa_r+0xa30>
 800fe98:	4629      	mov	r1, r5
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	220a      	movs	r2, #10
 800fe9e:	4630      	mov	r0, r6
 800fea0:	f000 f876 	bl	800ff90 <__multadd>
 800fea4:	4605      	mov	r5, r0
 800fea6:	e7ea      	b.n	800fe7e <_dtoa_r+0xaa6>
 800fea8:	0801ba6b 	.word	0x0801ba6b
 800feac:	0801b9c8 	.word	0x0801b9c8
 800feb0:	0801b9ec 	.word	0x0801b9ec

0800feb4 <_localeconv_r>:
 800feb4:	4800      	ldr	r0, [pc, #0]	; (800feb8 <_localeconv_r+0x4>)
 800feb6:	4770      	bx	lr
 800feb8:	240005ec 	.word	0x240005ec

0800febc <malloc>:
 800febc:	4b02      	ldr	r3, [pc, #8]	; (800fec8 <malloc+0xc>)
 800febe:	4601      	mov	r1, r0
 800fec0:	6818      	ldr	r0, [r3, #0]
 800fec2:	f000 bc09 	b.w	80106d8 <_malloc_r>
 800fec6:	bf00      	nop
 800fec8:	24000498 	.word	0x24000498

0800fecc <_Balloc>:
 800fecc:	b570      	push	{r4, r5, r6, lr}
 800fece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fed0:	4604      	mov	r4, r0
 800fed2:	460d      	mov	r5, r1
 800fed4:	b976      	cbnz	r6, 800fef4 <_Balloc+0x28>
 800fed6:	2010      	movs	r0, #16
 800fed8:	f7ff fff0 	bl	800febc <malloc>
 800fedc:	4602      	mov	r2, r0
 800fede:	6260      	str	r0, [r4, #36]	; 0x24
 800fee0:	b920      	cbnz	r0, 800feec <_Balloc+0x20>
 800fee2:	4b18      	ldr	r3, [pc, #96]	; (800ff44 <_Balloc+0x78>)
 800fee4:	4818      	ldr	r0, [pc, #96]	; (800ff48 <_Balloc+0x7c>)
 800fee6:	2166      	movs	r1, #102	; 0x66
 800fee8:	f000 fdd6 	bl	8010a98 <__assert_func>
 800feec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fef0:	6006      	str	r6, [r0, #0]
 800fef2:	60c6      	str	r6, [r0, #12]
 800fef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fef6:	68f3      	ldr	r3, [r6, #12]
 800fef8:	b183      	cbz	r3, 800ff1c <_Balloc+0x50>
 800fefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff02:	b9b8      	cbnz	r0, 800ff34 <_Balloc+0x68>
 800ff04:	2101      	movs	r1, #1
 800ff06:	fa01 f605 	lsl.w	r6, r1, r5
 800ff0a:	1d72      	adds	r2, r6, #5
 800ff0c:	0092      	lsls	r2, r2, #2
 800ff0e:	4620      	mov	r0, r4
 800ff10:	f000 fb60 	bl	80105d4 <_calloc_r>
 800ff14:	b160      	cbz	r0, 800ff30 <_Balloc+0x64>
 800ff16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff1a:	e00e      	b.n	800ff3a <_Balloc+0x6e>
 800ff1c:	2221      	movs	r2, #33	; 0x21
 800ff1e:	2104      	movs	r1, #4
 800ff20:	4620      	mov	r0, r4
 800ff22:	f000 fb57 	bl	80105d4 <_calloc_r>
 800ff26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff28:	60f0      	str	r0, [r6, #12]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1e4      	bne.n	800fefa <_Balloc+0x2e>
 800ff30:	2000      	movs	r0, #0
 800ff32:	bd70      	pop	{r4, r5, r6, pc}
 800ff34:	6802      	ldr	r2, [r0, #0]
 800ff36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff40:	e7f7      	b.n	800ff32 <_Balloc+0x66>
 800ff42:	bf00      	nop
 800ff44:	0801b9f9 	.word	0x0801b9f9
 800ff48:	0801ba7c 	.word	0x0801ba7c

0800ff4c <_Bfree>:
 800ff4c:	b570      	push	{r4, r5, r6, lr}
 800ff4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff50:	4605      	mov	r5, r0
 800ff52:	460c      	mov	r4, r1
 800ff54:	b976      	cbnz	r6, 800ff74 <_Bfree+0x28>
 800ff56:	2010      	movs	r0, #16
 800ff58:	f7ff ffb0 	bl	800febc <malloc>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	6268      	str	r0, [r5, #36]	; 0x24
 800ff60:	b920      	cbnz	r0, 800ff6c <_Bfree+0x20>
 800ff62:	4b09      	ldr	r3, [pc, #36]	; (800ff88 <_Bfree+0x3c>)
 800ff64:	4809      	ldr	r0, [pc, #36]	; (800ff8c <_Bfree+0x40>)
 800ff66:	218a      	movs	r1, #138	; 0x8a
 800ff68:	f000 fd96 	bl	8010a98 <__assert_func>
 800ff6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff70:	6006      	str	r6, [r0, #0]
 800ff72:	60c6      	str	r6, [r0, #12]
 800ff74:	b13c      	cbz	r4, 800ff86 <_Bfree+0x3a>
 800ff76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff78:	6862      	ldr	r2, [r4, #4]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff80:	6021      	str	r1, [r4, #0]
 800ff82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	0801b9f9 	.word	0x0801b9f9
 800ff8c:	0801ba7c 	.word	0x0801ba7c

0800ff90 <__multadd>:
 800ff90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff94:	690d      	ldr	r5, [r1, #16]
 800ff96:	4607      	mov	r7, r0
 800ff98:	460c      	mov	r4, r1
 800ff9a:	461e      	mov	r6, r3
 800ff9c:	f101 0c14 	add.w	ip, r1, #20
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	f8dc 3000 	ldr.w	r3, [ip]
 800ffa6:	b299      	uxth	r1, r3
 800ffa8:	fb02 6101 	mla	r1, r2, r1, r6
 800ffac:	0c1e      	lsrs	r6, r3, #16
 800ffae:	0c0b      	lsrs	r3, r1, #16
 800ffb0:	fb02 3306 	mla	r3, r2, r6, r3
 800ffb4:	b289      	uxth	r1, r1
 800ffb6:	3001      	adds	r0, #1
 800ffb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ffbc:	4285      	cmp	r5, r0
 800ffbe:	f84c 1b04 	str.w	r1, [ip], #4
 800ffc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ffc6:	dcec      	bgt.n	800ffa2 <__multadd+0x12>
 800ffc8:	b30e      	cbz	r6, 801000e <__multadd+0x7e>
 800ffca:	68a3      	ldr	r3, [r4, #8]
 800ffcc:	42ab      	cmp	r3, r5
 800ffce:	dc19      	bgt.n	8010004 <__multadd+0x74>
 800ffd0:	6861      	ldr	r1, [r4, #4]
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	3101      	adds	r1, #1
 800ffd6:	f7ff ff79 	bl	800fecc <_Balloc>
 800ffda:	4680      	mov	r8, r0
 800ffdc:	b928      	cbnz	r0, 800ffea <__multadd+0x5a>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	4b0c      	ldr	r3, [pc, #48]	; (8010014 <__multadd+0x84>)
 800ffe2:	480d      	ldr	r0, [pc, #52]	; (8010018 <__multadd+0x88>)
 800ffe4:	21b5      	movs	r1, #181	; 0xb5
 800ffe6:	f000 fd57 	bl	8010a98 <__assert_func>
 800ffea:	6922      	ldr	r2, [r4, #16]
 800ffec:	3202      	adds	r2, #2
 800ffee:	f104 010c 	add.w	r1, r4, #12
 800fff2:	0092      	lsls	r2, r2, #2
 800fff4:	300c      	adds	r0, #12
 800fff6:	f7fe fcc9 	bl	800e98c <memcpy>
 800fffa:	4621      	mov	r1, r4
 800fffc:	4638      	mov	r0, r7
 800fffe:	f7ff ffa5 	bl	800ff4c <_Bfree>
 8010002:	4644      	mov	r4, r8
 8010004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010008:	3501      	adds	r5, #1
 801000a:	615e      	str	r6, [r3, #20]
 801000c:	6125      	str	r5, [r4, #16]
 801000e:	4620      	mov	r0, r4
 8010010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010014:	0801ba6b 	.word	0x0801ba6b
 8010018:	0801ba7c 	.word	0x0801ba7c

0801001c <__hi0bits>:
 801001c:	0c03      	lsrs	r3, r0, #16
 801001e:	041b      	lsls	r3, r3, #16
 8010020:	b9d3      	cbnz	r3, 8010058 <__hi0bits+0x3c>
 8010022:	0400      	lsls	r0, r0, #16
 8010024:	2310      	movs	r3, #16
 8010026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801002a:	bf04      	itt	eq
 801002c:	0200      	lsleq	r0, r0, #8
 801002e:	3308      	addeq	r3, #8
 8010030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010034:	bf04      	itt	eq
 8010036:	0100      	lsleq	r0, r0, #4
 8010038:	3304      	addeq	r3, #4
 801003a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801003e:	bf04      	itt	eq
 8010040:	0080      	lsleq	r0, r0, #2
 8010042:	3302      	addeq	r3, #2
 8010044:	2800      	cmp	r0, #0
 8010046:	db05      	blt.n	8010054 <__hi0bits+0x38>
 8010048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801004c:	f103 0301 	add.w	r3, r3, #1
 8010050:	bf08      	it	eq
 8010052:	2320      	moveq	r3, #32
 8010054:	4618      	mov	r0, r3
 8010056:	4770      	bx	lr
 8010058:	2300      	movs	r3, #0
 801005a:	e7e4      	b.n	8010026 <__hi0bits+0xa>

0801005c <__lo0bits>:
 801005c:	6803      	ldr	r3, [r0, #0]
 801005e:	f013 0207 	ands.w	r2, r3, #7
 8010062:	4601      	mov	r1, r0
 8010064:	d00b      	beq.n	801007e <__lo0bits+0x22>
 8010066:	07da      	lsls	r2, r3, #31
 8010068:	d423      	bmi.n	80100b2 <__lo0bits+0x56>
 801006a:	0798      	lsls	r0, r3, #30
 801006c:	bf49      	itett	mi
 801006e:	085b      	lsrmi	r3, r3, #1
 8010070:	089b      	lsrpl	r3, r3, #2
 8010072:	2001      	movmi	r0, #1
 8010074:	600b      	strmi	r3, [r1, #0]
 8010076:	bf5c      	itt	pl
 8010078:	600b      	strpl	r3, [r1, #0]
 801007a:	2002      	movpl	r0, #2
 801007c:	4770      	bx	lr
 801007e:	b298      	uxth	r0, r3
 8010080:	b9a8      	cbnz	r0, 80100ae <__lo0bits+0x52>
 8010082:	0c1b      	lsrs	r3, r3, #16
 8010084:	2010      	movs	r0, #16
 8010086:	b2da      	uxtb	r2, r3
 8010088:	b90a      	cbnz	r2, 801008e <__lo0bits+0x32>
 801008a:	3008      	adds	r0, #8
 801008c:	0a1b      	lsrs	r3, r3, #8
 801008e:	071a      	lsls	r2, r3, #28
 8010090:	bf04      	itt	eq
 8010092:	091b      	lsreq	r3, r3, #4
 8010094:	3004      	addeq	r0, #4
 8010096:	079a      	lsls	r2, r3, #30
 8010098:	bf04      	itt	eq
 801009a:	089b      	lsreq	r3, r3, #2
 801009c:	3002      	addeq	r0, #2
 801009e:	07da      	lsls	r2, r3, #31
 80100a0:	d403      	bmi.n	80100aa <__lo0bits+0x4e>
 80100a2:	085b      	lsrs	r3, r3, #1
 80100a4:	f100 0001 	add.w	r0, r0, #1
 80100a8:	d005      	beq.n	80100b6 <__lo0bits+0x5a>
 80100aa:	600b      	str	r3, [r1, #0]
 80100ac:	4770      	bx	lr
 80100ae:	4610      	mov	r0, r2
 80100b0:	e7e9      	b.n	8010086 <__lo0bits+0x2a>
 80100b2:	2000      	movs	r0, #0
 80100b4:	4770      	bx	lr
 80100b6:	2020      	movs	r0, #32
 80100b8:	4770      	bx	lr
	...

080100bc <__i2b>:
 80100bc:	b510      	push	{r4, lr}
 80100be:	460c      	mov	r4, r1
 80100c0:	2101      	movs	r1, #1
 80100c2:	f7ff ff03 	bl	800fecc <_Balloc>
 80100c6:	4602      	mov	r2, r0
 80100c8:	b928      	cbnz	r0, 80100d6 <__i2b+0x1a>
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <__i2b+0x24>)
 80100cc:	4805      	ldr	r0, [pc, #20]	; (80100e4 <__i2b+0x28>)
 80100ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80100d2:	f000 fce1 	bl	8010a98 <__assert_func>
 80100d6:	2301      	movs	r3, #1
 80100d8:	6144      	str	r4, [r0, #20]
 80100da:	6103      	str	r3, [r0, #16]
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	0801ba6b 	.word	0x0801ba6b
 80100e4:	0801ba7c 	.word	0x0801ba7c

080100e8 <__multiply>:
 80100e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ec:	4691      	mov	r9, r2
 80100ee:	690a      	ldr	r2, [r1, #16]
 80100f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	bfb8      	it	lt
 80100f8:	460b      	movlt	r3, r1
 80100fa:	460c      	mov	r4, r1
 80100fc:	bfbc      	itt	lt
 80100fe:	464c      	movlt	r4, r9
 8010100:	4699      	movlt	r9, r3
 8010102:	6927      	ldr	r7, [r4, #16]
 8010104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010108:	68a3      	ldr	r3, [r4, #8]
 801010a:	6861      	ldr	r1, [r4, #4]
 801010c:	eb07 060a 	add.w	r6, r7, sl
 8010110:	42b3      	cmp	r3, r6
 8010112:	b085      	sub	sp, #20
 8010114:	bfb8      	it	lt
 8010116:	3101      	addlt	r1, #1
 8010118:	f7ff fed8 	bl	800fecc <_Balloc>
 801011c:	b930      	cbnz	r0, 801012c <__multiply+0x44>
 801011e:	4602      	mov	r2, r0
 8010120:	4b44      	ldr	r3, [pc, #272]	; (8010234 <__multiply+0x14c>)
 8010122:	4845      	ldr	r0, [pc, #276]	; (8010238 <__multiply+0x150>)
 8010124:	f240 115d 	movw	r1, #349	; 0x15d
 8010128:	f000 fcb6 	bl	8010a98 <__assert_func>
 801012c:	f100 0514 	add.w	r5, r0, #20
 8010130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010134:	462b      	mov	r3, r5
 8010136:	2200      	movs	r2, #0
 8010138:	4543      	cmp	r3, r8
 801013a:	d321      	bcc.n	8010180 <__multiply+0x98>
 801013c:	f104 0314 	add.w	r3, r4, #20
 8010140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010144:	f109 0314 	add.w	r3, r9, #20
 8010148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801014c:	9202      	str	r2, [sp, #8]
 801014e:	1b3a      	subs	r2, r7, r4
 8010150:	3a15      	subs	r2, #21
 8010152:	f022 0203 	bic.w	r2, r2, #3
 8010156:	3204      	adds	r2, #4
 8010158:	f104 0115 	add.w	r1, r4, #21
 801015c:	428f      	cmp	r7, r1
 801015e:	bf38      	it	cc
 8010160:	2204      	movcc	r2, #4
 8010162:	9201      	str	r2, [sp, #4]
 8010164:	9a02      	ldr	r2, [sp, #8]
 8010166:	9303      	str	r3, [sp, #12]
 8010168:	429a      	cmp	r2, r3
 801016a:	d80c      	bhi.n	8010186 <__multiply+0x9e>
 801016c:	2e00      	cmp	r6, #0
 801016e:	dd03      	ble.n	8010178 <__multiply+0x90>
 8010170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010174:	2b00      	cmp	r3, #0
 8010176:	d05a      	beq.n	801022e <__multiply+0x146>
 8010178:	6106      	str	r6, [r0, #16]
 801017a:	b005      	add	sp, #20
 801017c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010180:	f843 2b04 	str.w	r2, [r3], #4
 8010184:	e7d8      	b.n	8010138 <__multiply+0x50>
 8010186:	f8b3 a000 	ldrh.w	sl, [r3]
 801018a:	f1ba 0f00 	cmp.w	sl, #0
 801018e:	d024      	beq.n	80101da <__multiply+0xf2>
 8010190:	f104 0e14 	add.w	lr, r4, #20
 8010194:	46a9      	mov	r9, r5
 8010196:	f04f 0c00 	mov.w	ip, #0
 801019a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801019e:	f8d9 1000 	ldr.w	r1, [r9]
 80101a2:	fa1f fb82 	uxth.w	fp, r2
 80101a6:	b289      	uxth	r1, r1
 80101a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80101ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80101b0:	f8d9 2000 	ldr.w	r2, [r9]
 80101b4:	4461      	add	r1, ip
 80101b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80101be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80101c2:	b289      	uxth	r1, r1
 80101c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80101c8:	4577      	cmp	r7, lr
 80101ca:	f849 1b04 	str.w	r1, [r9], #4
 80101ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101d2:	d8e2      	bhi.n	801019a <__multiply+0xb2>
 80101d4:	9a01      	ldr	r2, [sp, #4]
 80101d6:	f845 c002 	str.w	ip, [r5, r2]
 80101da:	9a03      	ldr	r2, [sp, #12]
 80101dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80101e0:	3304      	adds	r3, #4
 80101e2:	f1b9 0f00 	cmp.w	r9, #0
 80101e6:	d020      	beq.n	801022a <__multiply+0x142>
 80101e8:	6829      	ldr	r1, [r5, #0]
 80101ea:	f104 0c14 	add.w	ip, r4, #20
 80101ee:	46ae      	mov	lr, r5
 80101f0:	f04f 0a00 	mov.w	sl, #0
 80101f4:	f8bc b000 	ldrh.w	fp, [ip]
 80101f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80101fc:	fb09 220b 	mla	r2, r9, fp, r2
 8010200:	4492      	add	sl, r2
 8010202:	b289      	uxth	r1, r1
 8010204:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010208:	f84e 1b04 	str.w	r1, [lr], #4
 801020c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010210:	f8be 1000 	ldrh.w	r1, [lr]
 8010214:	0c12      	lsrs	r2, r2, #16
 8010216:	fb09 1102 	mla	r1, r9, r2, r1
 801021a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801021e:	4567      	cmp	r7, ip
 8010220:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010224:	d8e6      	bhi.n	80101f4 <__multiply+0x10c>
 8010226:	9a01      	ldr	r2, [sp, #4]
 8010228:	50a9      	str	r1, [r5, r2]
 801022a:	3504      	adds	r5, #4
 801022c:	e79a      	b.n	8010164 <__multiply+0x7c>
 801022e:	3e01      	subs	r6, #1
 8010230:	e79c      	b.n	801016c <__multiply+0x84>
 8010232:	bf00      	nop
 8010234:	0801ba6b 	.word	0x0801ba6b
 8010238:	0801ba7c 	.word	0x0801ba7c

0801023c <__pow5mult>:
 801023c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010240:	4615      	mov	r5, r2
 8010242:	f012 0203 	ands.w	r2, r2, #3
 8010246:	4606      	mov	r6, r0
 8010248:	460f      	mov	r7, r1
 801024a:	d007      	beq.n	801025c <__pow5mult+0x20>
 801024c:	4c25      	ldr	r4, [pc, #148]	; (80102e4 <__pow5mult+0xa8>)
 801024e:	3a01      	subs	r2, #1
 8010250:	2300      	movs	r3, #0
 8010252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010256:	f7ff fe9b 	bl	800ff90 <__multadd>
 801025a:	4607      	mov	r7, r0
 801025c:	10ad      	asrs	r5, r5, #2
 801025e:	d03d      	beq.n	80102dc <__pow5mult+0xa0>
 8010260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010262:	b97c      	cbnz	r4, 8010284 <__pow5mult+0x48>
 8010264:	2010      	movs	r0, #16
 8010266:	f7ff fe29 	bl	800febc <malloc>
 801026a:	4602      	mov	r2, r0
 801026c:	6270      	str	r0, [r6, #36]	; 0x24
 801026e:	b928      	cbnz	r0, 801027c <__pow5mult+0x40>
 8010270:	4b1d      	ldr	r3, [pc, #116]	; (80102e8 <__pow5mult+0xac>)
 8010272:	481e      	ldr	r0, [pc, #120]	; (80102ec <__pow5mult+0xb0>)
 8010274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010278:	f000 fc0e 	bl	8010a98 <__assert_func>
 801027c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010280:	6004      	str	r4, [r0, #0]
 8010282:	60c4      	str	r4, [r0, #12]
 8010284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801028c:	b94c      	cbnz	r4, 80102a2 <__pow5mult+0x66>
 801028e:	f240 2171 	movw	r1, #625	; 0x271
 8010292:	4630      	mov	r0, r6
 8010294:	f7ff ff12 	bl	80100bc <__i2b>
 8010298:	2300      	movs	r3, #0
 801029a:	f8c8 0008 	str.w	r0, [r8, #8]
 801029e:	4604      	mov	r4, r0
 80102a0:	6003      	str	r3, [r0, #0]
 80102a2:	f04f 0900 	mov.w	r9, #0
 80102a6:	07eb      	lsls	r3, r5, #31
 80102a8:	d50a      	bpl.n	80102c0 <__pow5mult+0x84>
 80102aa:	4639      	mov	r1, r7
 80102ac:	4622      	mov	r2, r4
 80102ae:	4630      	mov	r0, r6
 80102b0:	f7ff ff1a 	bl	80100e8 <__multiply>
 80102b4:	4639      	mov	r1, r7
 80102b6:	4680      	mov	r8, r0
 80102b8:	4630      	mov	r0, r6
 80102ba:	f7ff fe47 	bl	800ff4c <_Bfree>
 80102be:	4647      	mov	r7, r8
 80102c0:	106d      	asrs	r5, r5, #1
 80102c2:	d00b      	beq.n	80102dc <__pow5mult+0xa0>
 80102c4:	6820      	ldr	r0, [r4, #0]
 80102c6:	b938      	cbnz	r0, 80102d8 <__pow5mult+0x9c>
 80102c8:	4622      	mov	r2, r4
 80102ca:	4621      	mov	r1, r4
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7ff ff0b 	bl	80100e8 <__multiply>
 80102d2:	6020      	str	r0, [r4, #0]
 80102d4:	f8c0 9000 	str.w	r9, [r0]
 80102d8:	4604      	mov	r4, r0
 80102da:	e7e4      	b.n	80102a6 <__pow5mult+0x6a>
 80102dc:	4638      	mov	r0, r7
 80102de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102e2:	bf00      	nop
 80102e4:	0801bbc8 	.word	0x0801bbc8
 80102e8:	0801b9f9 	.word	0x0801b9f9
 80102ec:	0801ba7c 	.word	0x0801ba7c

080102f0 <__lshift>:
 80102f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f4:	460c      	mov	r4, r1
 80102f6:	6849      	ldr	r1, [r1, #4]
 80102f8:	6923      	ldr	r3, [r4, #16]
 80102fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102fe:	68a3      	ldr	r3, [r4, #8]
 8010300:	4607      	mov	r7, r0
 8010302:	4691      	mov	r9, r2
 8010304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010308:	f108 0601 	add.w	r6, r8, #1
 801030c:	42b3      	cmp	r3, r6
 801030e:	db0b      	blt.n	8010328 <__lshift+0x38>
 8010310:	4638      	mov	r0, r7
 8010312:	f7ff fddb 	bl	800fecc <_Balloc>
 8010316:	4605      	mov	r5, r0
 8010318:	b948      	cbnz	r0, 801032e <__lshift+0x3e>
 801031a:	4602      	mov	r2, r0
 801031c:	4b2a      	ldr	r3, [pc, #168]	; (80103c8 <__lshift+0xd8>)
 801031e:	482b      	ldr	r0, [pc, #172]	; (80103cc <__lshift+0xdc>)
 8010320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010324:	f000 fbb8 	bl	8010a98 <__assert_func>
 8010328:	3101      	adds	r1, #1
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	e7ee      	b.n	801030c <__lshift+0x1c>
 801032e:	2300      	movs	r3, #0
 8010330:	f100 0114 	add.w	r1, r0, #20
 8010334:	f100 0210 	add.w	r2, r0, #16
 8010338:	4618      	mov	r0, r3
 801033a:	4553      	cmp	r3, sl
 801033c:	db37      	blt.n	80103ae <__lshift+0xbe>
 801033e:	6920      	ldr	r0, [r4, #16]
 8010340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010344:	f104 0314 	add.w	r3, r4, #20
 8010348:	f019 091f 	ands.w	r9, r9, #31
 801034c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010354:	d02f      	beq.n	80103b6 <__lshift+0xc6>
 8010356:	f1c9 0e20 	rsb	lr, r9, #32
 801035a:	468a      	mov	sl, r1
 801035c:	f04f 0c00 	mov.w	ip, #0
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	fa02 f209 	lsl.w	r2, r2, r9
 8010366:	ea42 020c 	orr.w	r2, r2, ip
 801036a:	f84a 2b04 	str.w	r2, [sl], #4
 801036e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010372:	4298      	cmp	r0, r3
 8010374:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010378:	d8f2      	bhi.n	8010360 <__lshift+0x70>
 801037a:	1b03      	subs	r3, r0, r4
 801037c:	3b15      	subs	r3, #21
 801037e:	f023 0303 	bic.w	r3, r3, #3
 8010382:	3304      	adds	r3, #4
 8010384:	f104 0215 	add.w	r2, r4, #21
 8010388:	4290      	cmp	r0, r2
 801038a:	bf38      	it	cc
 801038c:	2304      	movcc	r3, #4
 801038e:	f841 c003 	str.w	ip, [r1, r3]
 8010392:	f1bc 0f00 	cmp.w	ip, #0
 8010396:	d001      	beq.n	801039c <__lshift+0xac>
 8010398:	f108 0602 	add.w	r6, r8, #2
 801039c:	3e01      	subs	r6, #1
 801039e:	4638      	mov	r0, r7
 80103a0:	612e      	str	r6, [r5, #16]
 80103a2:	4621      	mov	r1, r4
 80103a4:	f7ff fdd2 	bl	800ff4c <_Bfree>
 80103a8:	4628      	mov	r0, r5
 80103aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80103b2:	3301      	adds	r3, #1
 80103b4:	e7c1      	b.n	801033a <__lshift+0x4a>
 80103b6:	3904      	subs	r1, #4
 80103b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80103bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80103c0:	4298      	cmp	r0, r3
 80103c2:	d8f9      	bhi.n	80103b8 <__lshift+0xc8>
 80103c4:	e7ea      	b.n	801039c <__lshift+0xac>
 80103c6:	bf00      	nop
 80103c8:	0801ba6b 	.word	0x0801ba6b
 80103cc:	0801ba7c 	.word	0x0801ba7c

080103d0 <__mcmp>:
 80103d0:	b530      	push	{r4, r5, lr}
 80103d2:	6902      	ldr	r2, [r0, #16]
 80103d4:	690c      	ldr	r4, [r1, #16]
 80103d6:	1b12      	subs	r2, r2, r4
 80103d8:	d10e      	bne.n	80103f8 <__mcmp+0x28>
 80103da:	f100 0314 	add.w	r3, r0, #20
 80103de:	3114      	adds	r1, #20
 80103e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80103e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80103e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80103ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80103f0:	42a5      	cmp	r5, r4
 80103f2:	d003      	beq.n	80103fc <__mcmp+0x2c>
 80103f4:	d305      	bcc.n	8010402 <__mcmp+0x32>
 80103f6:	2201      	movs	r2, #1
 80103f8:	4610      	mov	r0, r2
 80103fa:	bd30      	pop	{r4, r5, pc}
 80103fc:	4283      	cmp	r3, r0
 80103fe:	d3f3      	bcc.n	80103e8 <__mcmp+0x18>
 8010400:	e7fa      	b.n	80103f8 <__mcmp+0x28>
 8010402:	f04f 32ff 	mov.w	r2, #4294967295
 8010406:	e7f7      	b.n	80103f8 <__mcmp+0x28>

08010408 <__mdiff>:
 8010408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040c:	460c      	mov	r4, r1
 801040e:	4606      	mov	r6, r0
 8010410:	4611      	mov	r1, r2
 8010412:	4620      	mov	r0, r4
 8010414:	4690      	mov	r8, r2
 8010416:	f7ff ffdb 	bl	80103d0 <__mcmp>
 801041a:	1e05      	subs	r5, r0, #0
 801041c:	d110      	bne.n	8010440 <__mdiff+0x38>
 801041e:	4629      	mov	r1, r5
 8010420:	4630      	mov	r0, r6
 8010422:	f7ff fd53 	bl	800fecc <_Balloc>
 8010426:	b930      	cbnz	r0, 8010436 <__mdiff+0x2e>
 8010428:	4b3a      	ldr	r3, [pc, #232]	; (8010514 <__mdiff+0x10c>)
 801042a:	4602      	mov	r2, r0
 801042c:	f240 2132 	movw	r1, #562	; 0x232
 8010430:	4839      	ldr	r0, [pc, #228]	; (8010518 <__mdiff+0x110>)
 8010432:	f000 fb31 	bl	8010a98 <__assert_func>
 8010436:	2301      	movs	r3, #1
 8010438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801043c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010440:	bfa4      	itt	ge
 8010442:	4643      	movge	r3, r8
 8010444:	46a0      	movge	r8, r4
 8010446:	4630      	mov	r0, r6
 8010448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801044c:	bfa6      	itte	ge
 801044e:	461c      	movge	r4, r3
 8010450:	2500      	movge	r5, #0
 8010452:	2501      	movlt	r5, #1
 8010454:	f7ff fd3a 	bl	800fecc <_Balloc>
 8010458:	b920      	cbnz	r0, 8010464 <__mdiff+0x5c>
 801045a:	4b2e      	ldr	r3, [pc, #184]	; (8010514 <__mdiff+0x10c>)
 801045c:	4602      	mov	r2, r0
 801045e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010462:	e7e5      	b.n	8010430 <__mdiff+0x28>
 8010464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010468:	6926      	ldr	r6, [r4, #16]
 801046a:	60c5      	str	r5, [r0, #12]
 801046c:	f104 0914 	add.w	r9, r4, #20
 8010470:	f108 0514 	add.w	r5, r8, #20
 8010474:	f100 0e14 	add.w	lr, r0, #20
 8010478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801047c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010480:	f108 0210 	add.w	r2, r8, #16
 8010484:	46f2      	mov	sl, lr
 8010486:	2100      	movs	r1, #0
 8010488:	f859 3b04 	ldr.w	r3, [r9], #4
 801048c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010490:	fa1f f883 	uxth.w	r8, r3
 8010494:	fa11 f18b 	uxtah	r1, r1, fp
 8010498:	0c1b      	lsrs	r3, r3, #16
 801049a:	eba1 0808 	sub.w	r8, r1, r8
 801049e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80104a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80104a6:	fa1f f888 	uxth.w	r8, r8
 80104aa:	1419      	asrs	r1, r3, #16
 80104ac:	454e      	cmp	r6, r9
 80104ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80104b2:	f84a 3b04 	str.w	r3, [sl], #4
 80104b6:	d8e7      	bhi.n	8010488 <__mdiff+0x80>
 80104b8:	1b33      	subs	r3, r6, r4
 80104ba:	3b15      	subs	r3, #21
 80104bc:	f023 0303 	bic.w	r3, r3, #3
 80104c0:	3304      	adds	r3, #4
 80104c2:	3415      	adds	r4, #21
 80104c4:	42a6      	cmp	r6, r4
 80104c6:	bf38      	it	cc
 80104c8:	2304      	movcc	r3, #4
 80104ca:	441d      	add	r5, r3
 80104cc:	4473      	add	r3, lr
 80104ce:	469e      	mov	lr, r3
 80104d0:	462e      	mov	r6, r5
 80104d2:	4566      	cmp	r6, ip
 80104d4:	d30e      	bcc.n	80104f4 <__mdiff+0xec>
 80104d6:	f10c 0203 	add.w	r2, ip, #3
 80104da:	1b52      	subs	r2, r2, r5
 80104dc:	f022 0203 	bic.w	r2, r2, #3
 80104e0:	3d03      	subs	r5, #3
 80104e2:	45ac      	cmp	ip, r5
 80104e4:	bf38      	it	cc
 80104e6:	2200      	movcc	r2, #0
 80104e8:	441a      	add	r2, r3
 80104ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80104ee:	b17b      	cbz	r3, 8010510 <__mdiff+0x108>
 80104f0:	6107      	str	r7, [r0, #16]
 80104f2:	e7a3      	b.n	801043c <__mdiff+0x34>
 80104f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80104f8:	fa11 f288 	uxtah	r2, r1, r8
 80104fc:	1414      	asrs	r4, r2, #16
 80104fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010502:	b292      	uxth	r2, r2
 8010504:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010508:	f84e 2b04 	str.w	r2, [lr], #4
 801050c:	1421      	asrs	r1, r4, #16
 801050e:	e7e0      	b.n	80104d2 <__mdiff+0xca>
 8010510:	3f01      	subs	r7, #1
 8010512:	e7ea      	b.n	80104ea <__mdiff+0xe2>
 8010514:	0801ba6b 	.word	0x0801ba6b
 8010518:	0801ba7c 	.word	0x0801ba7c

0801051c <__d2b>:
 801051c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010520:	4689      	mov	r9, r1
 8010522:	2101      	movs	r1, #1
 8010524:	ec57 6b10 	vmov	r6, r7, d0
 8010528:	4690      	mov	r8, r2
 801052a:	f7ff fccf 	bl	800fecc <_Balloc>
 801052e:	4604      	mov	r4, r0
 8010530:	b930      	cbnz	r0, 8010540 <__d2b+0x24>
 8010532:	4602      	mov	r2, r0
 8010534:	4b25      	ldr	r3, [pc, #148]	; (80105cc <__d2b+0xb0>)
 8010536:	4826      	ldr	r0, [pc, #152]	; (80105d0 <__d2b+0xb4>)
 8010538:	f240 310a 	movw	r1, #778	; 0x30a
 801053c:	f000 faac 	bl	8010a98 <__assert_func>
 8010540:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010544:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010548:	bb35      	cbnz	r5, 8010598 <__d2b+0x7c>
 801054a:	2e00      	cmp	r6, #0
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	d028      	beq.n	80105a2 <__d2b+0x86>
 8010550:	4668      	mov	r0, sp
 8010552:	9600      	str	r6, [sp, #0]
 8010554:	f7ff fd82 	bl	801005c <__lo0bits>
 8010558:	9900      	ldr	r1, [sp, #0]
 801055a:	b300      	cbz	r0, 801059e <__d2b+0x82>
 801055c:	9a01      	ldr	r2, [sp, #4]
 801055e:	f1c0 0320 	rsb	r3, r0, #32
 8010562:	fa02 f303 	lsl.w	r3, r2, r3
 8010566:	430b      	orrs	r3, r1
 8010568:	40c2      	lsrs	r2, r0
 801056a:	6163      	str	r3, [r4, #20]
 801056c:	9201      	str	r2, [sp, #4]
 801056e:	9b01      	ldr	r3, [sp, #4]
 8010570:	61a3      	str	r3, [r4, #24]
 8010572:	2b00      	cmp	r3, #0
 8010574:	bf14      	ite	ne
 8010576:	2202      	movne	r2, #2
 8010578:	2201      	moveq	r2, #1
 801057a:	6122      	str	r2, [r4, #16]
 801057c:	b1d5      	cbz	r5, 80105b4 <__d2b+0x98>
 801057e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010582:	4405      	add	r5, r0
 8010584:	f8c9 5000 	str.w	r5, [r9]
 8010588:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801058c:	f8c8 0000 	str.w	r0, [r8]
 8010590:	4620      	mov	r0, r4
 8010592:	b003      	add	sp, #12
 8010594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801059c:	e7d5      	b.n	801054a <__d2b+0x2e>
 801059e:	6161      	str	r1, [r4, #20]
 80105a0:	e7e5      	b.n	801056e <__d2b+0x52>
 80105a2:	a801      	add	r0, sp, #4
 80105a4:	f7ff fd5a 	bl	801005c <__lo0bits>
 80105a8:	9b01      	ldr	r3, [sp, #4]
 80105aa:	6163      	str	r3, [r4, #20]
 80105ac:	2201      	movs	r2, #1
 80105ae:	6122      	str	r2, [r4, #16]
 80105b0:	3020      	adds	r0, #32
 80105b2:	e7e3      	b.n	801057c <__d2b+0x60>
 80105b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105bc:	f8c9 0000 	str.w	r0, [r9]
 80105c0:	6918      	ldr	r0, [r3, #16]
 80105c2:	f7ff fd2b 	bl	801001c <__hi0bits>
 80105c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80105ca:	e7df      	b.n	801058c <__d2b+0x70>
 80105cc:	0801ba6b 	.word	0x0801ba6b
 80105d0:	0801ba7c 	.word	0x0801ba7c

080105d4 <_calloc_r>:
 80105d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105d6:	fba1 2402 	umull	r2, r4, r1, r2
 80105da:	b94c      	cbnz	r4, 80105f0 <_calloc_r+0x1c>
 80105dc:	4611      	mov	r1, r2
 80105de:	9201      	str	r2, [sp, #4]
 80105e0:	f000 f87a 	bl	80106d8 <_malloc_r>
 80105e4:	9a01      	ldr	r2, [sp, #4]
 80105e6:	4605      	mov	r5, r0
 80105e8:	b930      	cbnz	r0, 80105f8 <_calloc_r+0x24>
 80105ea:	4628      	mov	r0, r5
 80105ec:	b003      	add	sp, #12
 80105ee:	bd30      	pop	{r4, r5, pc}
 80105f0:	220c      	movs	r2, #12
 80105f2:	6002      	str	r2, [r0, #0]
 80105f4:	2500      	movs	r5, #0
 80105f6:	e7f8      	b.n	80105ea <_calloc_r+0x16>
 80105f8:	4621      	mov	r1, r4
 80105fa:	f7fe f9d5 	bl	800e9a8 <memset>
 80105fe:	e7f4      	b.n	80105ea <_calloc_r+0x16>

08010600 <_free_r>:
 8010600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010602:	2900      	cmp	r1, #0
 8010604:	d044      	beq.n	8010690 <_free_r+0x90>
 8010606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801060a:	9001      	str	r0, [sp, #4]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f1a1 0404 	sub.w	r4, r1, #4
 8010612:	bfb8      	it	lt
 8010614:	18e4      	addlt	r4, r4, r3
 8010616:	f000 fa9b 	bl	8010b50 <__malloc_lock>
 801061a:	4a1e      	ldr	r2, [pc, #120]	; (8010694 <_free_r+0x94>)
 801061c:	9801      	ldr	r0, [sp, #4]
 801061e:	6813      	ldr	r3, [r2, #0]
 8010620:	b933      	cbnz	r3, 8010630 <_free_r+0x30>
 8010622:	6063      	str	r3, [r4, #4]
 8010624:	6014      	str	r4, [r2, #0]
 8010626:	b003      	add	sp, #12
 8010628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801062c:	f000 ba96 	b.w	8010b5c <__malloc_unlock>
 8010630:	42a3      	cmp	r3, r4
 8010632:	d908      	bls.n	8010646 <_free_r+0x46>
 8010634:	6825      	ldr	r5, [r4, #0]
 8010636:	1961      	adds	r1, r4, r5
 8010638:	428b      	cmp	r3, r1
 801063a:	bf01      	itttt	eq
 801063c:	6819      	ldreq	r1, [r3, #0]
 801063e:	685b      	ldreq	r3, [r3, #4]
 8010640:	1949      	addeq	r1, r1, r5
 8010642:	6021      	streq	r1, [r4, #0]
 8010644:	e7ed      	b.n	8010622 <_free_r+0x22>
 8010646:	461a      	mov	r2, r3
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	b10b      	cbz	r3, 8010650 <_free_r+0x50>
 801064c:	42a3      	cmp	r3, r4
 801064e:	d9fa      	bls.n	8010646 <_free_r+0x46>
 8010650:	6811      	ldr	r1, [r2, #0]
 8010652:	1855      	adds	r5, r2, r1
 8010654:	42a5      	cmp	r5, r4
 8010656:	d10b      	bne.n	8010670 <_free_r+0x70>
 8010658:	6824      	ldr	r4, [r4, #0]
 801065a:	4421      	add	r1, r4
 801065c:	1854      	adds	r4, r2, r1
 801065e:	42a3      	cmp	r3, r4
 8010660:	6011      	str	r1, [r2, #0]
 8010662:	d1e0      	bne.n	8010626 <_free_r+0x26>
 8010664:	681c      	ldr	r4, [r3, #0]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	6053      	str	r3, [r2, #4]
 801066a:	4421      	add	r1, r4
 801066c:	6011      	str	r1, [r2, #0]
 801066e:	e7da      	b.n	8010626 <_free_r+0x26>
 8010670:	d902      	bls.n	8010678 <_free_r+0x78>
 8010672:	230c      	movs	r3, #12
 8010674:	6003      	str	r3, [r0, #0]
 8010676:	e7d6      	b.n	8010626 <_free_r+0x26>
 8010678:	6825      	ldr	r5, [r4, #0]
 801067a:	1961      	adds	r1, r4, r5
 801067c:	428b      	cmp	r3, r1
 801067e:	bf04      	itt	eq
 8010680:	6819      	ldreq	r1, [r3, #0]
 8010682:	685b      	ldreq	r3, [r3, #4]
 8010684:	6063      	str	r3, [r4, #4]
 8010686:	bf04      	itt	eq
 8010688:	1949      	addeq	r1, r1, r5
 801068a:	6021      	streq	r1, [r4, #0]
 801068c:	6054      	str	r4, [r2, #4]
 801068e:	e7ca      	b.n	8010626 <_free_r+0x26>
 8010690:	b003      	add	sp, #12
 8010692:	bd30      	pop	{r4, r5, pc}
 8010694:	2400f418 	.word	0x2400f418

08010698 <sbrk_aligned>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	4e0e      	ldr	r6, [pc, #56]	; (80106d4 <sbrk_aligned+0x3c>)
 801069c:	460c      	mov	r4, r1
 801069e:	6831      	ldr	r1, [r6, #0]
 80106a0:	4605      	mov	r5, r0
 80106a2:	b911      	cbnz	r1, 80106aa <sbrk_aligned+0x12>
 80106a4:	f000 f9e8 	bl	8010a78 <_sbrk_r>
 80106a8:	6030      	str	r0, [r6, #0]
 80106aa:	4621      	mov	r1, r4
 80106ac:	4628      	mov	r0, r5
 80106ae:	f000 f9e3 	bl	8010a78 <_sbrk_r>
 80106b2:	1c43      	adds	r3, r0, #1
 80106b4:	d00a      	beq.n	80106cc <sbrk_aligned+0x34>
 80106b6:	1cc4      	adds	r4, r0, #3
 80106b8:	f024 0403 	bic.w	r4, r4, #3
 80106bc:	42a0      	cmp	r0, r4
 80106be:	d007      	beq.n	80106d0 <sbrk_aligned+0x38>
 80106c0:	1a21      	subs	r1, r4, r0
 80106c2:	4628      	mov	r0, r5
 80106c4:	f000 f9d8 	bl	8010a78 <_sbrk_r>
 80106c8:	3001      	adds	r0, #1
 80106ca:	d101      	bne.n	80106d0 <sbrk_aligned+0x38>
 80106cc:	f04f 34ff 	mov.w	r4, #4294967295
 80106d0:	4620      	mov	r0, r4
 80106d2:	bd70      	pop	{r4, r5, r6, pc}
 80106d4:	2400f41c 	.word	0x2400f41c

080106d8 <_malloc_r>:
 80106d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106dc:	1ccd      	adds	r5, r1, #3
 80106de:	f025 0503 	bic.w	r5, r5, #3
 80106e2:	3508      	adds	r5, #8
 80106e4:	2d0c      	cmp	r5, #12
 80106e6:	bf38      	it	cc
 80106e8:	250c      	movcc	r5, #12
 80106ea:	2d00      	cmp	r5, #0
 80106ec:	4607      	mov	r7, r0
 80106ee:	db01      	blt.n	80106f4 <_malloc_r+0x1c>
 80106f0:	42a9      	cmp	r1, r5
 80106f2:	d905      	bls.n	8010700 <_malloc_r+0x28>
 80106f4:	230c      	movs	r3, #12
 80106f6:	603b      	str	r3, [r7, #0]
 80106f8:	2600      	movs	r6, #0
 80106fa:	4630      	mov	r0, r6
 80106fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010700:	4e2e      	ldr	r6, [pc, #184]	; (80107bc <_malloc_r+0xe4>)
 8010702:	f000 fa25 	bl	8010b50 <__malloc_lock>
 8010706:	6833      	ldr	r3, [r6, #0]
 8010708:	461c      	mov	r4, r3
 801070a:	bb34      	cbnz	r4, 801075a <_malloc_r+0x82>
 801070c:	4629      	mov	r1, r5
 801070e:	4638      	mov	r0, r7
 8010710:	f7ff ffc2 	bl	8010698 <sbrk_aligned>
 8010714:	1c43      	adds	r3, r0, #1
 8010716:	4604      	mov	r4, r0
 8010718:	d14d      	bne.n	80107b6 <_malloc_r+0xde>
 801071a:	6834      	ldr	r4, [r6, #0]
 801071c:	4626      	mov	r6, r4
 801071e:	2e00      	cmp	r6, #0
 8010720:	d140      	bne.n	80107a4 <_malloc_r+0xcc>
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	4631      	mov	r1, r6
 8010726:	4638      	mov	r0, r7
 8010728:	eb04 0803 	add.w	r8, r4, r3
 801072c:	f000 f9a4 	bl	8010a78 <_sbrk_r>
 8010730:	4580      	cmp	r8, r0
 8010732:	d13a      	bne.n	80107aa <_malloc_r+0xd2>
 8010734:	6821      	ldr	r1, [r4, #0]
 8010736:	3503      	adds	r5, #3
 8010738:	1a6d      	subs	r5, r5, r1
 801073a:	f025 0503 	bic.w	r5, r5, #3
 801073e:	3508      	adds	r5, #8
 8010740:	2d0c      	cmp	r5, #12
 8010742:	bf38      	it	cc
 8010744:	250c      	movcc	r5, #12
 8010746:	4629      	mov	r1, r5
 8010748:	4638      	mov	r0, r7
 801074a:	f7ff ffa5 	bl	8010698 <sbrk_aligned>
 801074e:	3001      	adds	r0, #1
 8010750:	d02b      	beq.n	80107aa <_malloc_r+0xd2>
 8010752:	6823      	ldr	r3, [r4, #0]
 8010754:	442b      	add	r3, r5
 8010756:	6023      	str	r3, [r4, #0]
 8010758:	e00e      	b.n	8010778 <_malloc_r+0xa0>
 801075a:	6822      	ldr	r2, [r4, #0]
 801075c:	1b52      	subs	r2, r2, r5
 801075e:	d41e      	bmi.n	801079e <_malloc_r+0xc6>
 8010760:	2a0b      	cmp	r2, #11
 8010762:	d916      	bls.n	8010792 <_malloc_r+0xba>
 8010764:	1961      	adds	r1, r4, r5
 8010766:	42a3      	cmp	r3, r4
 8010768:	6025      	str	r5, [r4, #0]
 801076a:	bf18      	it	ne
 801076c:	6059      	strne	r1, [r3, #4]
 801076e:	6863      	ldr	r3, [r4, #4]
 8010770:	bf08      	it	eq
 8010772:	6031      	streq	r1, [r6, #0]
 8010774:	5162      	str	r2, [r4, r5]
 8010776:	604b      	str	r3, [r1, #4]
 8010778:	4638      	mov	r0, r7
 801077a:	f104 060b 	add.w	r6, r4, #11
 801077e:	f000 f9ed 	bl	8010b5c <__malloc_unlock>
 8010782:	f026 0607 	bic.w	r6, r6, #7
 8010786:	1d23      	adds	r3, r4, #4
 8010788:	1af2      	subs	r2, r6, r3
 801078a:	d0b6      	beq.n	80106fa <_malloc_r+0x22>
 801078c:	1b9b      	subs	r3, r3, r6
 801078e:	50a3      	str	r3, [r4, r2]
 8010790:	e7b3      	b.n	80106fa <_malloc_r+0x22>
 8010792:	6862      	ldr	r2, [r4, #4]
 8010794:	42a3      	cmp	r3, r4
 8010796:	bf0c      	ite	eq
 8010798:	6032      	streq	r2, [r6, #0]
 801079a:	605a      	strne	r2, [r3, #4]
 801079c:	e7ec      	b.n	8010778 <_malloc_r+0xa0>
 801079e:	4623      	mov	r3, r4
 80107a0:	6864      	ldr	r4, [r4, #4]
 80107a2:	e7b2      	b.n	801070a <_malloc_r+0x32>
 80107a4:	4634      	mov	r4, r6
 80107a6:	6876      	ldr	r6, [r6, #4]
 80107a8:	e7b9      	b.n	801071e <_malloc_r+0x46>
 80107aa:	230c      	movs	r3, #12
 80107ac:	603b      	str	r3, [r7, #0]
 80107ae:	4638      	mov	r0, r7
 80107b0:	f000 f9d4 	bl	8010b5c <__malloc_unlock>
 80107b4:	e7a1      	b.n	80106fa <_malloc_r+0x22>
 80107b6:	6025      	str	r5, [r4, #0]
 80107b8:	e7de      	b.n	8010778 <_malloc_r+0xa0>
 80107ba:	bf00      	nop
 80107bc:	2400f418 	.word	0x2400f418

080107c0 <__ssputs_r>:
 80107c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107c4:	688e      	ldr	r6, [r1, #8]
 80107c6:	429e      	cmp	r6, r3
 80107c8:	4682      	mov	sl, r0
 80107ca:	460c      	mov	r4, r1
 80107cc:	4690      	mov	r8, r2
 80107ce:	461f      	mov	r7, r3
 80107d0:	d838      	bhi.n	8010844 <__ssputs_r+0x84>
 80107d2:	898a      	ldrh	r2, [r1, #12]
 80107d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80107d8:	d032      	beq.n	8010840 <__ssputs_r+0x80>
 80107da:	6825      	ldr	r5, [r4, #0]
 80107dc:	6909      	ldr	r1, [r1, #16]
 80107de:	eba5 0901 	sub.w	r9, r5, r1
 80107e2:	6965      	ldr	r5, [r4, #20]
 80107e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107ec:	3301      	adds	r3, #1
 80107ee:	444b      	add	r3, r9
 80107f0:	106d      	asrs	r5, r5, #1
 80107f2:	429d      	cmp	r5, r3
 80107f4:	bf38      	it	cc
 80107f6:	461d      	movcc	r5, r3
 80107f8:	0553      	lsls	r3, r2, #21
 80107fa:	d531      	bpl.n	8010860 <__ssputs_r+0xa0>
 80107fc:	4629      	mov	r1, r5
 80107fe:	f7ff ff6b 	bl	80106d8 <_malloc_r>
 8010802:	4606      	mov	r6, r0
 8010804:	b950      	cbnz	r0, 801081c <__ssputs_r+0x5c>
 8010806:	230c      	movs	r3, #12
 8010808:	f8ca 3000 	str.w	r3, [sl]
 801080c:	89a3      	ldrh	r3, [r4, #12]
 801080e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010812:	81a3      	strh	r3, [r4, #12]
 8010814:	f04f 30ff 	mov.w	r0, #4294967295
 8010818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801081c:	6921      	ldr	r1, [r4, #16]
 801081e:	464a      	mov	r2, r9
 8010820:	f7fe f8b4 	bl	800e98c <memcpy>
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801082e:	81a3      	strh	r3, [r4, #12]
 8010830:	6126      	str	r6, [r4, #16]
 8010832:	6165      	str	r5, [r4, #20]
 8010834:	444e      	add	r6, r9
 8010836:	eba5 0509 	sub.w	r5, r5, r9
 801083a:	6026      	str	r6, [r4, #0]
 801083c:	60a5      	str	r5, [r4, #8]
 801083e:	463e      	mov	r6, r7
 8010840:	42be      	cmp	r6, r7
 8010842:	d900      	bls.n	8010846 <__ssputs_r+0x86>
 8010844:	463e      	mov	r6, r7
 8010846:	6820      	ldr	r0, [r4, #0]
 8010848:	4632      	mov	r2, r6
 801084a:	4641      	mov	r1, r8
 801084c:	f000 f966 	bl	8010b1c <memmove>
 8010850:	68a3      	ldr	r3, [r4, #8]
 8010852:	1b9b      	subs	r3, r3, r6
 8010854:	60a3      	str	r3, [r4, #8]
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	4433      	add	r3, r6
 801085a:	6023      	str	r3, [r4, #0]
 801085c:	2000      	movs	r0, #0
 801085e:	e7db      	b.n	8010818 <__ssputs_r+0x58>
 8010860:	462a      	mov	r2, r5
 8010862:	f000 f981 	bl	8010b68 <_realloc_r>
 8010866:	4606      	mov	r6, r0
 8010868:	2800      	cmp	r0, #0
 801086a:	d1e1      	bne.n	8010830 <__ssputs_r+0x70>
 801086c:	6921      	ldr	r1, [r4, #16]
 801086e:	4650      	mov	r0, sl
 8010870:	f7ff fec6 	bl	8010600 <_free_r>
 8010874:	e7c7      	b.n	8010806 <__ssputs_r+0x46>
	...

08010878 <_svfiprintf_r>:
 8010878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	4698      	mov	r8, r3
 801087e:	898b      	ldrh	r3, [r1, #12]
 8010880:	061b      	lsls	r3, r3, #24
 8010882:	b09d      	sub	sp, #116	; 0x74
 8010884:	4607      	mov	r7, r0
 8010886:	460d      	mov	r5, r1
 8010888:	4614      	mov	r4, r2
 801088a:	d50e      	bpl.n	80108aa <_svfiprintf_r+0x32>
 801088c:	690b      	ldr	r3, [r1, #16]
 801088e:	b963      	cbnz	r3, 80108aa <_svfiprintf_r+0x32>
 8010890:	2140      	movs	r1, #64	; 0x40
 8010892:	f7ff ff21 	bl	80106d8 <_malloc_r>
 8010896:	6028      	str	r0, [r5, #0]
 8010898:	6128      	str	r0, [r5, #16]
 801089a:	b920      	cbnz	r0, 80108a6 <_svfiprintf_r+0x2e>
 801089c:	230c      	movs	r3, #12
 801089e:	603b      	str	r3, [r7, #0]
 80108a0:	f04f 30ff 	mov.w	r0, #4294967295
 80108a4:	e0d1      	b.n	8010a4a <_svfiprintf_r+0x1d2>
 80108a6:	2340      	movs	r3, #64	; 0x40
 80108a8:	616b      	str	r3, [r5, #20]
 80108aa:	2300      	movs	r3, #0
 80108ac:	9309      	str	r3, [sp, #36]	; 0x24
 80108ae:	2320      	movs	r3, #32
 80108b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80108b8:	2330      	movs	r3, #48	; 0x30
 80108ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010a64 <_svfiprintf_r+0x1ec>
 80108be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108c2:	f04f 0901 	mov.w	r9, #1
 80108c6:	4623      	mov	r3, r4
 80108c8:	469a      	mov	sl, r3
 80108ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108ce:	b10a      	cbz	r2, 80108d4 <_svfiprintf_r+0x5c>
 80108d0:	2a25      	cmp	r2, #37	; 0x25
 80108d2:	d1f9      	bne.n	80108c8 <_svfiprintf_r+0x50>
 80108d4:	ebba 0b04 	subs.w	fp, sl, r4
 80108d8:	d00b      	beq.n	80108f2 <_svfiprintf_r+0x7a>
 80108da:	465b      	mov	r3, fp
 80108dc:	4622      	mov	r2, r4
 80108de:	4629      	mov	r1, r5
 80108e0:	4638      	mov	r0, r7
 80108e2:	f7ff ff6d 	bl	80107c0 <__ssputs_r>
 80108e6:	3001      	adds	r0, #1
 80108e8:	f000 80aa 	beq.w	8010a40 <_svfiprintf_r+0x1c8>
 80108ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108ee:	445a      	add	r2, fp
 80108f0:	9209      	str	r2, [sp, #36]	; 0x24
 80108f2:	f89a 3000 	ldrb.w	r3, [sl]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	f000 80a2 	beq.w	8010a40 <_svfiprintf_r+0x1c8>
 80108fc:	2300      	movs	r3, #0
 80108fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010906:	f10a 0a01 	add.w	sl, sl, #1
 801090a:	9304      	str	r3, [sp, #16]
 801090c:	9307      	str	r3, [sp, #28]
 801090e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010912:	931a      	str	r3, [sp, #104]	; 0x68
 8010914:	4654      	mov	r4, sl
 8010916:	2205      	movs	r2, #5
 8010918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801091c:	4851      	ldr	r0, [pc, #324]	; (8010a64 <_svfiprintf_r+0x1ec>)
 801091e:	f7ef fce7 	bl	80002f0 <memchr>
 8010922:	9a04      	ldr	r2, [sp, #16]
 8010924:	b9d8      	cbnz	r0, 801095e <_svfiprintf_r+0xe6>
 8010926:	06d0      	lsls	r0, r2, #27
 8010928:	bf44      	itt	mi
 801092a:	2320      	movmi	r3, #32
 801092c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010930:	0711      	lsls	r1, r2, #28
 8010932:	bf44      	itt	mi
 8010934:	232b      	movmi	r3, #43	; 0x2b
 8010936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801093a:	f89a 3000 	ldrb.w	r3, [sl]
 801093e:	2b2a      	cmp	r3, #42	; 0x2a
 8010940:	d015      	beq.n	801096e <_svfiprintf_r+0xf6>
 8010942:	9a07      	ldr	r2, [sp, #28]
 8010944:	4654      	mov	r4, sl
 8010946:	2000      	movs	r0, #0
 8010948:	f04f 0c0a 	mov.w	ip, #10
 801094c:	4621      	mov	r1, r4
 801094e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010952:	3b30      	subs	r3, #48	; 0x30
 8010954:	2b09      	cmp	r3, #9
 8010956:	d94e      	bls.n	80109f6 <_svfiprintf_r+0x17e>
 8010958:	b1b0      	cbz	r0, 8010988 <_svfiprintf_r+0x110>
 801095a:	9207      	str	r2, [sp, #28]
 801095c:	e014      	b.n	8010988 <_svfiprintf_r+0x110>
 801095e:	eba0 0308 	sub.w	r3, r0, r8
 8010962:	fa09 f303 	lsl.w	r3, r9, r3
 8010966:	4313      	orrs	r3, r2
 8010968:	9304      	str	r3, [sp, #16]
 801096a:	46a2      	mov	sl, r4
 801096c:	e7d2      	b.n	8010914 <_svfiprintf_r+0x9c>
 801096e:	9b03      	ldr	r3, [sp, #12]
 8010970:	1d19      	adds	r1, r3, #4
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	9103      	str	r1, [sp, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	bfbb      	ittet	lt
 801097a:	425b      	neglt	r3, r3
 801097c:	f042 0202 	orrlt.w	r2, r2, #2
 8010980:	9307      	strge	r3, [sp, #28]
 8010982:	9307      	strlt	r3, [sp, #28]
 8010984:	bfb8      	it	lt
 8010986:	9204      	strlt	r2, [sp, #16]
 8010988:	7823      	ldrb	r3, [r4, #0]
 801098a:	2b2e      	cmp	r3, #46	; 0x2e
 801098c:	d10c      	bne.n	80109a8 <_svfiprintf_r+0x130>
 801098e:	7863      	ldrb	r3, [r4, #1]
 8010990:	2b2a      	cmp	r3, #42	; 0x2a
 8010992:	d135      	bne.n	8010a00 <_svfiprintf_r+0x188>
 8010994:	9b03      	ldr	r3, [sp, #12]
 8010996:	1d1a      	adds	r2, r3, #4
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	9203      	str	r2, [sp, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	bfb8      	it	lt
 80109a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80109a4:	3402      	adds	r4, #2
 80109a6:	9305      	str	r3, [sp, #20]
 80109a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a74 <_svfiprintf_r+0x1fc>
 80109ac:	7821      	ldrb	r1, [r4, #0]
 80109ae:	2203      	movs	r2, #3
 80109b0:	4650      	mov	r0, sl
 80109b2:	f7ef fc9d 	bl	80002f0 <memchr>
 80109b6:	b140      	cbz	r0, 80109ca <_svfiprintf_r+0x152>
 80109b8:	2340      	movs	r3, #64	; 0x40
 80109ba:	eba0 000a 	sub.w	r0, r0, sl
 80109be:	fa03 f000 	lsl.w	r0, r3, r0
 80109c2:	9b04      	ldr	r3, [sp, #16]
 80109c4:	4303      	orrs	r3, r0
 80109c6:	3401      	adds	r4, #1
 80109c8:	9304      	str	r3, [sp, #16]
 80109ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ce:	4826      	ldr	r0, [pc, #152]	; (8010a68 <_svfiprintf_r+0x1f0>)
 80109d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109d4:	2206      	movs	r2, #6
 80109d6:	f7ef fc8b 	bl	80002f0 <memchr>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d038      	beq.n	8010a50 <_svfiprintf_r+0x1d8>
 80109de:	4b23      	ldr	r3, [pc, #140]	; (8010a6c <_svfiprintf_r+0x1f4>)
 80109e0:	bb1b      	cbnz	r3, 8010a2a <_svfiprintf_r+0x1b2>
 80109e2:	9b03      	ldr	r3, [sp, #12]
 80109e4:	3307      	adds	r3, #7
 80109e6:	f023 0307 	bic.w	r3, r3, #7
 80109ea:	3308      	adds	r3, #8
 80109ec:	9303      	str	r3, [sp, #12]
 80109ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f0:	4433      	add	r3, r6
 80109f2:	9309      	str	r3, [sp, #36]	; 0x24
 80109f4:	e767      	b.n	80108c6 <_svfiprintf_r+0x4e>
 80109f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80109fa:	460c      	mov	r4, r1
 80109fc:	2001      	movs	r0, #1
 80109fe:	e7a5      	b.n	801094c <_svfiprintf_r+0xd4>
 8010a00:	2300      	movs	r3, #0
 8010a02:	3401      	adds	r4, #1
 8010a04:	9305      	str	r3, [sp, #20]
 8010a06:	4619      	mov	r1, r3
 8010a08:	f04f 0c0a 	mov.w	ip, #10
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a12:	3a30      	subs	r2, #48	; 0x30
 8010a14:	2a09      	cmp	r2, #9
 8010a16:	d903      	bls.n	8010a20 <_svfiprintf_r+0x1a8>
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d0c5      	beq.n	80109a8 <_svfiprintf_r+0x130>
 8010a1c:	9105      	str	r1, [sp, #20]
 8010a1e:	e7c3      	b.n	80109a8 <_svfiprintf_r+0x130>
 8010a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a24:	4604      	mov	r4, r0
 8010a26:	2301      	movs	r3, #1
 8010a28:	e7f0      	b.n	8010a0c <_svfiprintf_r+0x194>
 8010a2a:	ab03      	add	r3, sp, #12
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	462a      	mov	r2, r5
 8010a30:	4b0f      	ldr	r3, [pc, #60]	; (8010a70 <_svfiprintf_r+0x1f8>)
 8010a32:	a904      	add	r1, sp, #16
 8010a34:	4638      	mov	r0, r7
 8010a36:	f7fe f84f 	bl	800ead8 <_printf_float>
 8010a3a:	1c42      	adds	r2, r0, #1
 8010a3c:	4606      	mov	r6, r0
 8010a3e:	d1d6      	bne.n	80109ee <_svfiprintf_r+0x176>
 8010a40:	89ab      	ldrh	r3, [r5, #12]
 8010a42:	065b      	lsls	r3, r3, #25
 8010a44:	f53f af2c 	bmi.w	80108a0 <_svfiprintf_r+0x28>
 8010a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a4a:	b01d      	add	sp, #116	; 0x74
 8010a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a50:	ab03      	add	r3, sp, #12
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	462a      	mov	r2, r5
 8010a56:	4b06      	ldr	r3, [pc, #24]	; (8010a70 <_svfiprintf_r+0x1f8>)
 8010a58:	a904      	add	r1, sp, #16
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	f7fe fac8 	bl	800eff0 <_printf_i>
 8010a60:	e7eb      	b.n	8010a3a <_svfiprintf_r+0x1c2>
 8010a62:	bf00      	nop
 8010a64:	0801bbd4 	.word	0x0801bbd4
 8010a68:	0801bbde 	.word	0x0801bbde
 8010a6c:	0800ead9 	.word	0x0800ead9
 8010a70:	080107c1 	.word	0x080107c1
 8010a74:	0801bbda 	.word	0x0801bbda

08010a78 <_sbrk_r>:
 8010a78:	b538      	push	{r3, r4, r5, lr}
 8010a7a:	4d06      	ldr	r5, [pc, #24]	; (8010a94 <_sbrk_r+0x1c>)
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	4604      	mov	r4, r0
 8010a80:	4608      	mov	r0, r1
 8010a82:	602b      	str	r3, [r5, #0]
 8010a84:	f7f3 fc90 	bl	80043a8 <_sbrk>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_sbrk_r+0x1a>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_sbrk_r+0x1a>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	2400f420 	.word	0x2400f420

08010a98 <__assert_func>:
 8010a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a9a:	4614      	mov	r4, r2
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	4b09      	ldr	r3, [pc, #36]	; (8010ac4 <__assert_func+0x2c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	68d8      	ldr	r0, [r3, #12]
 8010aa6:	b14c      	cbz	r4, 8010abc <__assert_func+0x24>
 8010aa8:	4b07      	ldr	r3, [pc, #28]	; (8010ac8 <__assert_func+0x30>)
 8010aaa:	9100      	str	r1, [sp, #0]
 8010aac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ab0:	4906      	ldr	r1, [pc, #24]	; (8010acc <__assert_func+0x34>)
 8010ab2:	462b      	mov	r3, r5
 8010ab4:	f000 f80e 	bl	8010ad4 <fiprintf>
 8010ab8:	f000 faac 	bl	8011014 <abort>
 8010abc:	4b04      	ldr	r3, [pc, #16]	; (8010ad0 <__assert_func+0x38>)
 8010abe:	461c      	mov	r4, r3
 8010ac0:	e7f3      	b.n	8010aaa <__assert_func+0x12>
 8010ac2:	bf00      	nop
 8010ac4:	24000498 	.word	0x24000498
 8010ac8:	0801bbe5 	.word	0x0801bbe5
 8010acc:	0801bbf2 	.word	0x0801bbf2
 8010ad0:	0801bc20 	.word	0x0801bc20

08010ad4 <fiprintf>:
 8010ad4:	b40e      	push	{r1, r2, r3}
 8010ad6:	b503      	push	{r0, r1, lr}
 8010ad8:	4601      	mov	r1, r0
 8010ada:	ab03      	add	r3, sp, #12
 8010adc:	4805      	ldr	r0, [pc, #20]	; (8010af4 <fiprintf+0x20>)
 8010ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ae2:	6800      	ldr	r0, [r0, #0]
 8010ae4:	9301      	str	r3, [sp, #4]
 8010ae6:	f000 f897 	bl	8010c18 <_vfiprintf_r>
 8010aea:	b002      	add	sp, #8
 8010aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8010af0:	b003      	add	sp, #12
 8010af2:	4770      	bx	lr
 8010af4:	24000498 	.word	0x24000498

08010af8 <__ascii_mbtowc>:
 8010af8:	b082      	sub	sp, #8
 8010afa:	b901      	cbnz	r1, 8010afe <__ascii_mbtowc+0x6>
 8010afc:	a901      	add	r1, sp, #4
 8010afe:	b142      	cbz	r2, 8010b12 <__ascii_mbtowc+0x1a>
 8010b00:	b14b      	cbz	r3, 8010b16 <__ascii_mbtowc+0x1e>
 8010b02:	7813      	ldrb	r3, [r2, #0]
 8010b04:	600b      	str	r3, [r1, #0]
 8010b06:	7812      	ldrb	r2, [r2, #0]
 8010b08:	1e10      	subs	r0, r2, #0
 8010b0a:	bf18      	it	ne
 8010b0c:	2001      	movne	r0, #1
 8010b0e:	b002      	add	sp, #8
 8010b10:	4770      	bx	lr
 8010b12:	4610      	mov	r0, r2
 8010b14:	e7fb      	b.n	8010b0e <__ascii_mbtowc+0x16>
 8010b16:	f06f 0001 	mvn.w	r0, #1
 8010b1a:	e7f8      	b.n	8010b0e <__ascii_mbtowc+0x16>

08010b1c <memmove>:
 8010b1c:	4288      	cmp	r0, r1
 8010b1e:	b510      	push	{r4, lr}
 8010b20:	eb01 0402 	add.w	r4, r1, r2
 8010b24:	d902      	bls.n	8010b2c <memmove+0x10>
 8010b26:	4284      	cmp	r4, r0
 8010b28:	4623      	mov	r3, r4
 8010b2a:	d807      	bhi.n	8010b3c <memmove+0x20>
 8010b2c:	1e43      	subs	r3, r0, #1
 8010b2e:	42a1      	cmp	r1, r4
 8010b30:	d008      	beq.n	8010b44 <memmove+0x28>
 8010b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b3a:	e7f8      	b.n	8010b2e <memmove+0x12>
 8010b3c:	4402      	add	r2, r0
 8010b3e:	4601      	mov	r1, r0
 8010b40:	428a      	cmp	r2, r1
 8010b42:	d100      	bne.n	8010b46 <memmove+0x2a>
 8010b44:	bd10      	pop	{r4, pc}
 8010b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b4e:	e7f7      	b.n	8010b40 <memmove+0x24>

08010b50 <__malloc_lock>:
 8010b50:	4801      	ldr	r0, [pc, #4]	; (8010b58 <__malloc_lock+0x8>)
 8010b52:	f000 bc1f 	b.w	8011394 <__retarget_lock_acquire_recursive>
 8010b56:	bf00      	nop
 8010b58:	2400f424 	.word	0x2400f424

08010b5c <__malloc_unlock>:
 8010b5c:	4801      	ldr	r0, [pc, #4]	; (8010b64 <__malloc_unlock+0x8>)
 8010b5e:	f000 bc1a 	b.w	8011396 <__retarget_lock_release_recursive>
 8010b62:	bf00      	nop
 8010b64:	2400f424 	.word	0x2400f424

08010b68 <_realloc_r>:
 8010b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	4614      	mov	r4, r2
 8010b70:	460e      	mov	r6, r1
 8010b72:	b921      	cbnz	r1, 8010b7e <_realloc_r+0x16>
 8010b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b78:	4611      	mov	r1, r2
 8010b7a:	f7ff bdad 	b.w	80106d8 <_malloc_r>
 8010b7e:	b92a      	cbnz	r2, 8010b8c <_realloc_r+0x24>
 8010b80:	f7ff fd3e 	bl	8010600 <_free_r>
 8010b84:	4625      	mov	r5, r4
 8010b86:	4628      	mov	r0, r5
 8010b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b8c:	f000 fc6a 	bl	8011464 <_malloc_usable_size_r>
 8010b90:	4284      	cmp	r4, r0
 8010b92:	4607      	mov	r7, r0
 8010b94:	d802      	bhi.n	8010b9c <_realloc_r+0x34>
 8010b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b9a:	d812      	bhi.n	8010bc2 <_realloc_r+0x5a>
 8010b9c:	4621      	mov	r1, r4
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	f7ff fd9a 	bl	80106d8 <_malloc_r>
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d0ed      	beq.n	8010b86 <_realloc_r+0x1e>
 8010baa:	42bc      	cmp	r4, r7
 8010bac:	4622      	mov	r2, r4
 8010bae:	4631      	mov	r1, r6
 8010bb0:	bf28      	it	cs
 8010bb2:	463a      	movcs	r2, r7
 8010bb4:	f7fd feea 	bl	800e98c <memcpy>
 8010bb8:	4631      	mov	r1, r6
 8010bba:	4640      	mov	r0, r8
 8010bbc:	f7ff fd20 	bl	8010600 <_free_r>
 8010bc0:	e7e1      	b.n	8010b86 <_realloc_r+0x1e>
 8010bc2:	4635      	mov	r5, r6
 8010bc4:	e7df      	b.n	8010b86 <_realloc_r+0x1e>

08010bc6 <__sfputc_r>:
 8010bc6:	6893      	ldr	r3, [r2, #8]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	b410      	push	{r4}
 8010bce:	6093      	str	r3, [r2, #8]
 8010bd0:	da08      	bge.n	8010be4 <__sfputc_r+0x1e>
 8010bd2:	6994      	ldr	r4, [r2, #24]
 8010bd4:	42a3      	cmp	r3, r4
 8010bd6:	db01      	blt.n	8010bdc <__sfputc_r+0x16>
 8010bd8:	290a      	cmp	r1, #10
 8010bda:	d103      	bne.n	8010be4 <__sfputc_r+0x1e>
 8010bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010be0:	f000 b94a 	b.w	8010e78 <__swbuf_r>
 8010be4:	6813      	ldr	r3, [r2, #0]
 8010be6:	1c58      	adds	r0, r3, #1
 8010be8:	6010      	str	r0, [r2, #0]
 8010bea:	7019      	strb	r1, [r3, #0]
 8010bec:	4608      	mov	r0, r1
 8010bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <__sfputs_r>:
 8010bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	460f      	mov	r7, r1
 8010bfa:	4614      	mov	r4, r2
 8010bfc:	18d5      	adds	r5, r2, r3
 8010bfe:	42ac      	cmp	r4, r5
 8010c00:	d101      	bne.n	8010c06 <__sfputs_r+0x12>
 8010c02:	2000      	movs	r0, #0
 8010c04:	e007      	b.n	8010c16 <__sfputs_r+0x22>
 8010c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c0a:	463a      	mov	r2, r7
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f7ff ffda 	bl	8010bc6 <__sfputc_r>
 8010c12:	1c43      	adds	r3, r0, #1
 8010c14:	d1f3      	bne.n	8010bfe <__sfputs_r+0xa>
 8010c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c18 <_vfiprintf_r>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	460d      	mov	r5, r1
 8010c1e:	b09d      	sub	sp, #116	; 0x74
 8010c20:	4614      	mov	r4, r2
 8010c22:	4698      	mov	r8, r3
 8010c24:	4606      	mov	r6, r0
 8010c26:	b118      	cbz	r0, 8010c30 <_vfiprintf_r+0x18>
 8010c28:	6983      	ldr	r3, [r0, #24]
 8010c2a:	b90b      	cbnz	r3, 8010c30 <_vfiprintf_r+0x18>
 8010c2c:	f000 fb14 	bl	8011258 <__sinit>
 8010c30:	4b89      	ldr	r3, [pc, #548]	; (8010e58 <_vfiprintf_r+0x240>)
 8010c32:	429d      	cmp	r5, r3
 8010c34:	d11b      	bne.n	8010c6e <_vfiprintf_r+0x56>
 8010c36:	6875      	ldr	r5, [r6, #4]
 8010c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c3a:	07d9      	lsls	r1, r3, #31
 8010c3c:	d405      	bmi.n	8010c4a <_vfiprintf_r+0x32>
 8010c3e:	89ab      	ldrh	r3, [r5, #12]
 8010c40:	059a      	lsls	r2, r3, #22
 8010c42:	d402      	bmi.n	8010c4a <_vfiprintf_r+0x32>
 8010c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c46:	f000 fba5 	bl	8011394 <__retarget_lock_acquire_recursive>
 8010c4a:	89ab      	ldrh	r3, [r5, #12]
 8010c4c:	071b      	lsls	r3, r3, #28
 8010c4e:	d501      	bpl.n	8010c54 <_vfiprintf_r+0x3c>
 8010c50:	692b      	ldr	r3, [r5, #16]
 8010c52:	b9eb      	cbnz	r3, 8010c90 <_vfiprintf_r+0x78>
 8010c54:	4629      	mov	r1, r5
 8010c56:	4630      	mov	r0, r6
 8010c58:	f000 f96e 	bl	8010f38 <__swsetup_r>
 8010c5c:	b1c0      	cbz	r0, 8010c90 <_vfiprintf_r+0x78>
 8010c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c60:	07dc      	lsls	r4, r3, #31
 8010c62:	d50e      	bpl.n	8010c82 <_vfiprintf_r+0x6a>
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	b01d      	add	sp, #116	; 0x74
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	4b7b      	ldr	r3, [pc, #492]	; (8010e5c <_vfiprintf_r+0x244>)
 8010c70:	429d      	cmp	r5, r3
 8010c72:	d101      	bne.n	8010c78 <_vfiprintf_r+0x60>
 8010c74:	68b5      	ldr	r5, [r6, #8]
 8010c76:	e7df      	b.n	8010c38 <_vfiprintf_r+0x20>
 8010c78:	4b79      	ldr	r3, [pc, #484]	; (8010e60 <_vfiprintf_r+0x248>)
 8010c7a:	429d      	cmp	r5, r3
 8010c7c:	bf08      	it	eq
 8010c7e:	68f5      	ldreq	r5, [r6, #12]
 8010c80:	e7da      	b.n	8010c38 <_vfiprintf_r+0x20>
 8010c82:	89ab      	ldrh	r3, [r5, #12]
 8010c84:	0598      	lsls	r0, r3, #22
 8010c86:	d4ed      	bmi.n	8010c64 <_vfiprintf_r+0x4c>
 8010c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c8a:	f000 fb84 	bl	8011396 <__retarget_lock_release_recursive>
 8010c8e:	e7e9      	b.n	8010c64 <_vfiprintf_r+0x4c>
 8010c90:	2300      	movs	r3, #0
 8010c92:	9309      	str	r3, [sp, #36]	; 0x24
 8010c94:	2320      	movs	r3, #32
 8010c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c9e:	2330      	movs	r3, #48	; 0x30
 8010ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e64 <_vfiprintf_r+0x24c>
 8010ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ca8:	f04f 0901 	mov.w	r9, #1
 8010cac:	4623      	mov	r3, r4
 8010cae:	469a      	mov	sl, r3
 8010cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb4:	b10a      	cbz	r2, 8010cba <_vfiprintf_r+0xa2>
 8010cb6:	2a25      	cmp	r2, #37	; 0x25
 8010cb8:	d1f9      	bne.n	8010cae <_vfiprintf_r+0x96>
 8010cba:	ebba 0b04 	subs.w	fp, sl, r4
 8010cbe:	d00b      	beq.n	8010cd8 <_vfiprintf_r+0xc0>
 8010cc0:	465b      	mov	r3, fp
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	f7ff ff94 	bl	8010bf4 <__sfputs_r>
 8010ccc:	3001      	adds	r0, #1
 8010cce:	f000 80aa 	beq.w	8010e26 <_vfiprintf_r+0x20e>
 8010cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cd4:	445a      	add	r2, fp
 8010cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8010cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 80a2 	beq.w	8010e26 <_vfiprintf_r+0x20e>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cec:	f10a 0a01 	add.w	sl, sl, #1
 8010cf0:	9304      	str	r3, [sp, #16]
 8010cf2:	9307      	str	r3, [sp, #28]
 8010cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8010cfa:	4654      	mov	r4, sl
 8010cfc:	2205      	movs	r2, #5
 8010cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d02:	4858      	ldr	r0, [pc, #352]	; (8010e64 <_vfiprintf_r+0x24c>)
 8010d04:	f7ef faf4 	bl	80002f0 <memchr>
 8010d08:	9a04      	ldr	r2, [sp, #16]
 8010d0a:	b9d8      	cbnz	r0, 8010d44 <_vfiprintf_r+0x12c>
 8010d0c:	06d1      	lsls	r1, r2, #27
 8010d0e:	bf44      	itt	mi
 8010d10:	2320      	movmi	r3, #32
 8010d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d16:	0713      	lsls	r3, r2, #28
 8010d18:	bf44      	itt	mi
 8010d1a:	232b      	movmi	r3, #43	; 0x2b
 8010d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d20:	f89a 3000 	ldrb.w	r3, [sl]
 8010d24:	2b2a      	cmp	r3, #42	; 0x2a
 8010d26:	d015      	beq.n	8010d54 <_vfiprintf_r+0x13c>
 8010d28:	9a07      	ldr	r2, [sp, #28]
 8010d2a:	4654      	mov	r4, sl
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	f04f 0c0a 	mov.w	ip, #10
 8010d32:	4621      	mov	r1, r4
 8010d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d38:	3b30      	subs	r3, #48	; 0x30
 8010d3a:	2b09      	cmp	r3, #9
 8010d3c:	d94e      	bls.n	8010ddc <_vfiprintf_r+0x1c4>
 8010d3e:	b1b0      	cbz	r0, 8010d6e <_vfiprintf_r+0x156>
 8010d40:	9207      	str	r2, [sp, #28]
 8010d42:	e014      	b.n	8010d6e <_vfiprintf_r+0x156>
 8010d44:	eba0 0308 	sub.w	r3, r0, r8
 8010d48:	fa09 f303 	lsl.w	r3, r9, r3
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	9304      	str	r3, [sp, #16]
 8010d50:	46a2      	mov	sl, r4
 8010d52:	e7d2      	b.n	8010cfa <_vfiprintf_r+0xe2>
 8010d54:	9b03      	ldr	r3, [sp, #12]
 8010d56:	1d19      	adds	r1, r3, #4
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	9103      	str	r1, [sp, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	bfbb      	ittet	lt
 8010d60:	425b      	neglt	r3, r3
 8010d62:	f042 0202 	orrlt.w	r2, r2, #2
 8010d66:	9307      	strge	r3, [sp, #28]
 8010d68:	9307      	strlt	r3, [sp, #28]
 8010d6a:	bfb8      	it	lt
 8010d6c:	9204      	strlt	r2, [sp, #16]
 8010d6e:	7823      	ldrb	r3, [r4, #0]
 8010d70:	2b2e      	cmp	r3, #46	; 0x2e
 8010d72:	d10c      	bne.n	8010d8e <_vfiprintf_r+0x176>
 8010d74:	7863      	ldrb	r3, [r4, #1]
 8010d76:	2b2a      	cmp	r3, #42	; 0x2a
 8010d78:	d135      	bne.n	8010de6 <_vfiprintf_r+0x1ce>
 8010d7a:	9b03      	ldr	r3, [sp, #12]
 8010d7c:	1d1a      	adds	r2, r3, #4
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	9203      	str	r2, [sp, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bfb8      	it	lt
 8010d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d8a:	3402      	adds	r4, #2
 8010d8c:	9305      	str	r3, [sp, #20]
 8010d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e74 <_vfiprintf_r+0x25c>
 8010d92:	7821      	ldrb	r1, [r4, #0]
 8010d94:	2203      	movs	r2, #3
 8010d96:	4650      	mov	r0, sl
 8010d98:	f7ef faaa 	bl	80002f0 <memchr>
 8010d9c:	b140      	cbz	r0, 8010db0 <_vfiprintf_r+0x198>
 8010d9e:	2340      	movs	r3, #64	; 0x40
 8010da0:	eba0 000a 	sub.w	r0, r0, sl
 8010da4:	fa03 f000 	lsl.w	r0, r3, r0
 8010da8:	9b04      	ldr	r3, [sp, #16]
 8010daa:	4303      	orrs	r3, r0
 8010dac:	3401      	adds	r4, #1
 8010dae:	9304      	str	r3, [sp, #16]
 8010db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010db4:	482c      	ldr	r0, [pc, #176]	; (8010e68 <_vfiprintf_r+0x250>)
 8010db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dba:	2206      	movs	r2, #6
 8010dbc:	f7ef fa98 	bl	80002f0 <memchr>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d03f      	beq.n	8010e44 <_vfiprintf_r+0x22c>
 8010dc4:	4b29      	ldr	r3, [pc, #164]	; (8010e6c <_vfiprintf_r+0x254>)
 8010dc6:	bb1b      	cbnz	r3, 8010e10 <_vfiprintf_r+0x1f8>
 8010dc8:	9b03      	ldr	r3, [sp, #12]
 8010dca:	3307      	adds	r3, #7
 8010dcc:	f023 0307 	bic.w	r3, r3, #7
 8010dd0:	3308      	adds	r3, #8
 8010dd2:	9303      	str	r3, [sp, #12]
 8010dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd6:	443b      	add	r3, r7
 8010dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dda:	e767      	b.n	8010cac <_vfiprintf_r+0x94>
 8010ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010de0:	460c      	mov	r4, r1
 8010de2:	2001      	movs	r0, #1
 8010de4:	e7a5      	b.n	8010d32 <_vfiprintf_r+0x11a>
 8010de6:	2300      	movs	r3, #0
 8010de8:	3401      	adds	r4, #1
 8010dea:	9305      	str	r3, [sp, #20]
 8010dec:	4619      	mov	r1, r3
 8010dee:	f04f 0c0a 	mov.w	ip, #10
 8010df2:	4620      	mov	r0, r4
 8010df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010df8:	3a30      	subs	r2, #48	; 0x30
 8010dfa:	2a09      	cmp	r2, #9
 8010dfc:	d903      	bls.n	8010e06 <_vfiprintf_r+0x1ee>
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d0c5      	beq.n	8010d8e <_vfiprintf_r+0x176>
 8010e02:	9105      	str	r1, [sp, #20]
 8010e04:	e7c3      	b.n	8010d8e <_vfiprintf_r+0x176>
 8010e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e7f0      	b.n	8010df2 <_vfiprintf_r+0x1da>
 8010e10:	ab03      	add	r3, sp, #12
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	462a      	mov	r2, r5
 8010e16:	4b16      	ldr	r3, [pc, #88]	; (8010e70 <_vfiprintf_r+0x258>)
 8010e18:	a904      	add	r1, sp, #16
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	f7fd fe5c 	bl	800ead8 <_printf_float>
 8010e20:	4607      	mov	r7, r0
 8010e22:	1c78      	adds	r0, r7, #1
 8010e24:	d1d6      	bne.n	8010dd4 <_vfiprintf_r+0x1bc>
 8010e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e28:	07d9      	lsls	r1, r3, #31
 8010e2a:	d405      	bmi.n	8010e38 <_vfiprintf_r+0x220>
 8010e2c:	89ab      	ldrh	r3, [r5, #12]
 8010e2e:	059a      	lsls	r2, r3, #22
 8010e30:	d402      	bmi.n	8010e38 <_vfiprintf_r+0x220>
 8010e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e34:	f000 faaf 	bl	8011396 <__retarget_lock_release_recursive>
 8010e38:	89ab      	ldrh	r3, [r5, #12]
 8010e3a:	065b      	lsls	r3, r3, #25
 8010e3c:	f53f af12 	bmi.w	8010c64 <_vfiprintf_r+0x4c>
 8010e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e42:	e711      	b.n	8010c68 <_vfiprintf_r+0x50>
 8010e44:	ab03      	add	r3, sp, #12
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	462a      	mov	r2, r5
 8010e4a:	4b09      	ldr	r3, [pc, #36]	; (8010e70 <_vfiprintf_r+0x258>)
 8010e4c:	a904      	add	r1, sp, #16
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7fe f8ce 	bl	800eff0 <_printf_i>
 8010e54:	e7e4      	b.n	8010e20 <_vfiprintf_r+0x208>
 8010e56:	bf00      	nop
 8010e58:	0801bd4c 	.word	0x0801bd4c
 8010e5c:	0801bd6c 	.word	0x0801bd6c
 8010e60:	0801bd2c 	.word	0x0801bd2c
 8010e64:	0801bbd4 	.word	0x0801bbd4
 8010e68:	0801bbde 	.word	0x0801bbde
 8010e6c:	0800ead9 	.word	0x0800ead9
 8010e70:	08010bf5 	.word	0x08010bf5
 8010e74:	0801bbda 	.word	0x0801bbda

08010e78 <__swbuf_r>:
 8010e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7a:	460e      	mov	r6, r1
 8010e7c:	4614      	mov	r4, r2
 8010e7e:	4605      	mov	r5, r0
 8010e80:	b118      	cbz	r0, 8010e8a <__swbuf_r+0x12>
 8010e82:	6983      	ldr	r3, [r0, #24]
 8010e84:	b90b      	cbnz	r3, 8010e8a <__swbuf_r+0x12>
 8010e86:	f000 f9e7 	bl	8011258 <__sinit>
 8010e8a:	4b21      	ldr	r3, [pc, #132]	; (8010f10 <__swbuf_r+0x98>)
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	d12b      	bne.n	8010ee8 <__swbuf_r+0x70>
 8010e90:	686c      	ldr	r4, [r5, #4]
 8010e92:	69a3      	ldr	r3, [r4, #24]
 8010e94:	60a3      	str	r3, [r4, #8]
 8010e96:	89a3      	ldrh	r3, [r4, #12]
 8010e98:	071a      	lsls	r2, r3, #28
 8010e9a:	d52f      	bpl.n	8010efc <__swbuf_r+0x84>
 8010e9c:	6923      	ldr	r3, [r4, #16]
 8010e9e:	b36b      	cbz	r3, 8010efc <__swbuf_r+0x84>
 8010ea0:	6923      	ldr	r3, [r4, #16]
 8010ea2:	6820      	ldr	r0, [r4, #0]
 8010ea4:	1ac0      	subs	r0, r0, r3
 8010ea6:	6963      	ldr	r3, [r4, #20]
 8010ea8:	b2f6      	uxtb	r6, r6
 8010eaa:	4283      	cmp	r3, r0
 8010eac:	4637      	mov	r7, r6
 8010eae:	dc04      	bgt.n	8010eba <__swbuf_r+0x42>
 8010eb0:	4621      	mov	r1, r4
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f000 f93c 	bl	8011130 <_fflush_r>
 8010eb8:	bb30      	cbnz	r0, 8010f08 <__swbuf_r+0x90>
 8010eba:	68a3      	ldr	r3, [r4, #8]
 8010ebc:	3b01      	subs	r3, #1
 8010ebe:	60a3      	str	r3, [r4, #8]
 8010ec0:	6823      	ldr	r3, [r4, #0]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	6022      	str	r2, [r4, #0]
 8010ec6:	701e      	strb	r6, [r3, #0]
 8010ec8:	6963      	ldr	r3, [r4, #20]
 8010eca:	3001      	adds	r0, #1
 8010ecc:	4283      	cmp	r3, r0
 8010ece:	d004      	beq.n	8010eda <__swbuf_r+0x62>
 8010ed0:	89a3      	ldrh	r3, [r4, #12]
 8010ed2:	07db      	lsls	r3, r3, #31
 8010ed4:	d506      	bpl.n	8010ee4 <__swbuf_r+0x6c>
 8010ed6:	2e0a      	cmp	r6, #10
 8010ed8:	d104      	bne.n	8010ee4 <__swbuf_r+0x6c>
 8010eda:	4621      	mov	r1, r4
 8010edc:	4628      	mov	r0, r5
 8010ede:	f000 f927 	bl	8011130 <_fflush_r>
 8010ee2:	b988      	cbnz	r0, 8010f08 <__swbuf_r+0x90>
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee8:	4b0a      	ldr	r3, [pc, #40]	; (8010f14 <__swbuf_r+0x9c>)
 8010eea:	429c      	cmp	r4, r3
 8010eec:	d101      	bne.n	8010ef2 <__swbuf_r+0x7a>
 8010eee:	68ac      	ldr	r4, [r5, #8]
 8010ef0:	e7cf      	b.n	8010e92 <__swbuf_r+0x1a>
 8010ef2:	4b09      	ldr	r3, [pc, #36]	; (8010f18 <__swbuf_r+0xa0>)
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	bf08      	it	eq
 8010ef8:	68ec      	ldreq	r4, [r5, #12]
 8010efa:	e7ca      	b.n	8010e92 <__swbuf_r+0x1a>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	f000 f81a 	bl	8010f38 <__swsetup_r>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d0cb      	beq.n	8010ea0 <__swbuf_r+0x28>
 8010f08:	f04f 37ff 	mov.w	r7, #4294967295
 8010f0c:	e7ea      	b.n	8010ee4 <__swbuf_r+0x6c>
 8010f0e:	bf00      	nop
 8010f10:	0801bd4c 	.word	0x0801bd4c
 8010f14:	0801bd6c 	.word	0x0801bd6c
 8010f18:	0801bd2c 	.word	0x0801bd2c

08010f1c <__ascii_wctomb>:
 8010f1c:	b149      	cbz	r1, 8010f32 <__ascii_wctomb+0x16>
 8010f1e:	2aff      	cmp	r2, #255	; 0xff
 8010f20:	bf85      	ittet	hi
 8010f22:	238a      	movhi	r3, #138	; 0x8a
 8010f24:	6003      	strhi	r3, [r0, #0]
 8010f26:	700a      	strbls	r2, [r1, #0]
 8010f28:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f2c:	bf98      	it	ls
 8010f2e:	2001      	movls	r0, #1
 8010f30:	4770      	bx	lr
 8010f32:	4608      	mov	r0, r1
 8010f34:	4770      	bx	lr
	...

08010f38 <__swsetup_r>:
 8010f38:	4b32      	ldr	r3, [pc, #200]	; (8011004 <__swsetup_r+0xcc>)
 8010f3a:	b570      	push	{r4, r5, r6, lr}
 8010f3c:	681d      	ldr	r5, [r3, #0]
 8010f3e:	4606      	mov	r6, r0
 8010f40:	460c      	mov	r4, r1
 8010f42:	b125      	cbz	r5, 8010f4e <__swsetup_r+0x16>
 8010f44:	69ab      	ldr	r3, [r5, #24]
 8010f46:	b913      	cbnz	r3, 8010f4e <__swsetup_r+0x16>
 8010f48:	4628      	mov	r0, r5
 8010f4a:	f000 f985 	bl	8011258 <__sinit>
 8010f4e:	4b2e      	ldr	r3, [pc, #184]	; (8011008 <__swsetup_r+0xd0>)
 8010f50:	429c      	cmp	r4, r3
 8010f52:	d10f      	bne.n	8010f74 <__swsetup_r+0x3c>
 8010f54:	686c      	ldr	r4, [r5, #4]
 8010f56:	89a3      	ldrh	r3, [r4, #12]
 8010f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f5c:	0719      	lsls	r1, r3, #28
 8010f5e:	d42c      	bmi.n	8010fba <__swsetup_r+0x82>
 8010f60:	06dd      	lsls	r5, r3, #27
 8010f62:	d411      	bmi.n	8010f88 <__swsetup_r+0x50>
 8010f64:	2309      	movs	r3, #9
 8010f66:	6033      	str	r3, [r6, #0]
 8010f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f6c:	81a3      	strh	r3, [r4, #12]
 8010f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f72:	e03e      	b.n	8010ff2 <__swsetup_r+0xba>
 8010f74:	4b25      	ldr	r3, [pc, #148]	; (801100c <__swsetup_r+0xd4>)
 8010f76:	429c      	cmp	r4, r3
 8010f78:	d101      	bne.n	8010f7e <__swsetup_r+0x46>
 8010f7a:	68ac      	ldr	r4, [r5, #8]
 8010f7c:	e7eb      	b.n	8010f56 <__swsetup_r+0x1e>
 8010f7e:	4b24      	ldr	r3, [pc, #144]	; (8011010 <__swsetup_r+0xd8>)
 8010f80:	429c      	cmp	r4, r3
 8010f82:	bf08      	it	eq
 8010f84:	68ec      	ldreq	r4, [r5, #12]
 8010f86:	e7e6      	b.n	8010f56 <__swsetup_r+0x1e>
 8010f88:	0758      	lsls	r0, r3, #29
 8010f8a:	d512      	bpl.n	8010fb2 <__swsetup_r+0x7a>
 8010f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f8e:	b141      	cbz	r1, 8010fa2 <__swsetup_r+0x6a>
 8010f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f94:	4299      	cmp	r1, r3
 8010f96:	d002      	beq.n	8010f9e <__swsetup_r+0x66>
 8010f98:	4630      	mov	r0, r6
 8010f9a:	f7ff fb31 	bl	8010600 <_free_r>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fa8:	81a3      	strh	r3, [r4, #12]
 8010faa:	2300      	movs	r3, #0
 8010fac:	6063      	str	r3, [r4, #4]
 8010fae:	6923      	ldr	r3, [r4, #16]
 8010fb0:	6023      	str	r3, [r4, #0]
 8010fb2:	89a3      	ldrh	r3, [r4, #12]
 8010fb4:	f043 0308 	orr.w	r3, r3, #8
 8010fb8:	81a3      	strh	r3, [r4, #12]
 8010fba:	6923      	ldr	r3, [r4, #16]
 8010fbc:	b94b      	cbnz	r3, 8010fd2 <__swsetup_r+0x9a>
 8010fbe:	89a3      	ldrh	r3, [r4, #12]
 8010fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fc8:	d003      	beq.n	8010fd2 <__swsetup_r+0x9a>
 8010fca:	4621      	mov	r1, r4
 8010fcc:	4630      	mov	r0, r6
 8010fce:	f000 fa09 	bl	80113e4 <__smakebuf_r>
 8010fd2:	89a0      	ldrh	r0, [r4, #12]
 8010fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fd8:	f010 0301 	ands.w	r3, r0, #1
 8010fdc:	d00a      	beq.n	8010ff4 <__swsetup_r+0xbc>
 8010fde:	2300      	movs	r3, #0
 8010fe0:	60a3      	str	r3, [r4, #8]
 8010fe2:	6963      	ldr	r3, [r4, #20]
 8010fe4:	425b      	negs	r3, r3
 8010fe6:	61a3      	str	r3, [r4, #24]
 8010fe8:	6923      	ldr	r3, [r4, #16]
 8010fea:	b943      	cbnz	r3, 8010ffe <__swsetup_r+0xc6>
 8010fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ff0:	d1ba      	bne.n	8010f68 <__swsetup_r+0x30>
 8010ff2:	bd70      	pop	{r4, r5, r6, pc}
 8010ff4:	0781      	lsls	r1, r0, #30
 8010ff6:	bf58      	it	pl
 8010ff8:	6963      	ldrpl	r3, [r4, #20]
 8010ffa:	60a3      	str	r3, [r4, #8]
 8010ffc:	e7f4      	b.n	8010fe8 <__swsetup_r+0xb0>
 8010ffe:	2000      	movs	r0, #0
 8011000:	e7f7      	b.n	8010ff2 <__swsetup_r+0xba>
 8011002:	bf00      	nop
 8011004:	24000498 	.word	0x24000498
 8011008:	0801bd4c 	.word	0x0801bd4c
 801100c:	0801bd6c 	.word	0x0801bd6c
 8011010:	0801bd2c 	.word	0x0801bd2c

08011014 <abort>:
 8011014:	b508      	push	{r3, lr}
 8011016:	2006      	movs	r0, #6
 8011018:	f000 fa54 	bl	80114c4 <raise>
 801101c:	2001      	movs	r0, #1
 801101e:	f7f3 f993 	bl	8004348 <_exit>
	...

08011024 <__sflush_r>:
 8011024:	898a      	ldrh	r2, [r1, #12]
 8011026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801102a:	4605      	mov	r5, r0
 801102c:	0710      	lsls	r0, r2, #28
 801102e:	460c      	mov	r4, r1
 8011030:	d458      	bmi.n	80110e4 <__sflush_r+0xc0>
 8011032:	684b      	ldr	r3, [r1, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	dc05      	bgt.n	8011044 <__sflush_r+0x20>
 8011038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801103a:	2b00      	cmp	r3, #0
 801103c:	dc02      	bgt.n	8011044 <__sflush_r+0x20>
 801103e:	2000      	movs	r0, #0
 8011040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011046:	2e00      	cmp	r6, #0
 8011048:	d0f9      	beq.n	801103e <__sflush_r+0x1a>
 801104a:	2300      	movs	r3, #0
 801104c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011050:	682f      	ldr	r7, [r5, #0]
 8011052:	602b      	str	r3, [r5, #0]
 8011054:	d032      	beq.n	80110bc <__sflush_r+0x98>
 8011056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011058:	89a3      	ldrh	r3, [r4, #12]
 801105a:	075a      	lsls	r2, r3, #29
 801105c:	d505      	bpl.n	801106a <__sflush_r+0x46>
 801105e:	6863      	ldr	r3, [r4, #4]
 8011060:	1ac0      	subs	r0, r0, r3
 8011062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011064:	b10b      	cbz	r3, 801106a <__sflush_r+0x46>
 8011066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011068:	1ac0      	subs	r0, r0, r3
 801106a:	2300      	movs	r3, #0
 801106c:	4602      	mov	r2, r0
 801106e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011070:	6a21      	ldr	r1, [r4, #32]
 8011072:	4628      	mov	r0, r5
 8011074:	47b0      	blx	r6
 8011076:	1c43      	adds	r3, r0, #1
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	d106      	bne.n	801108a <__sflush_r+0x66>
 801107c:	6829      	ldr	r1, [r5, #0]
 801107e:	291d      	cmp	r1, #29
 8011080:	d82c      	bhi.n	80110dc <__sflush_r+0xb8>
 8011082:	4a2a      	ldr	r2, [pc, #168]	; (801112c <__sflush_r+0x108>)
 8011084:	40ca      	lsrs	r2, r1
 8011086:	07d6      	lsls	r6, r2, #31
 8011088:	d528      	bpl.n	80110dc <__sflush_r+0xb8>
 801108a:	2200      	movs	r2, #0
 801108c:	6062      	str	r2, [r4, #4]
 801108e:	04d9      	lsls	r1, r3, #19
 8011090:	6922      	ldr	r2, [r4, #16]
 8011092:	6022      	str	r2, [r4, #0]
 8011094:	d504      	bpl.n	80110a0 <__sflush_r+0x7c>
 8011096:	1c42      	adds	r2, r0, #1
 8011098:	d101      	bne.n	801109e <__sflush_r+0x7a>
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	b903      	cbnz	r3, 80110a0 <__sflush_r+0x7c>
 801109e:	6560      	str	r0, [r4, #84]	; 0x54
 80110a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110a2:	602f      	str	r7, [r5, #0]
 80110a4:	2900      	cmp	r1, #0
 80110a6:	d0ca      	beq.n	801103e <__sflush_r+0x1a>
 80110a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ac:	4299      	cmp	r1, r3
 80110ae:	d002      	beq.n	80110b6 <__sflush_r+0x92>
 80110b0:	4628      	mov	r0, r5
 80110b2:	f7ff faa5 	bl	8010600 <_free_r>
 80110b6:	2000      	movs	r0, #0
 80110b8:	6360      	str	r0, [r4, #52]	; 0x34
 80110ba:	e7c1      	b.n	8011040 <__sflush_r+0x1c>
 80110bc:	6a21      	ldr	r1, [r4, #32]
 80110be:	2301      	movs	r3, #1
 80110c0:	4628      	mov	r0, r5
 80110c2:	47b0      	blx	r6
 80110c4:	1c41      	adds	r1, r0, #1
 80110c6:	d1c7      	bne.n	8011058 <__sflush_r+0x34>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d0c4      	beq.n	8011058 <__sflush_r+0x34>
 80110ce:	2b1d      	cmp	r3, #29
 80110d0:	d001      	beq.n	80110d6 <__sflush_r+0xb2>
 80110d2:	2b16      	cmp	r3, #22
 80110d4:	d101      	bne.n	80110da <__sflush_r+0xb6>
 80110d6:	602f      	str	r7, [r5, #0]
 80110d8:	e7b1      	b.n	801103e <__sflush_r+0x1a>
 80110da:	89a3      	ldrh	r3, [r4, #12]
 80110dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e0:	81a3      	strh	r3, [r4, #12]
 80110e2:	e7ad      	b.n	8011040 <__sflush_r+0x1c>
 80110e4:	690f      	ldr	r7, [r1, #16]
 80110e6:	2f00      	cmp	r7, #0
 80110e8:	d0a9      	beq.n	801103e <__sflush_r+0x1a>
 80110ea:	0793      	lsls	r3, r2, #30
 80110ec:	680e      	ldr	r6, [r1, #0]
 80110ee:	bf08      	it	eq
 80110f0:	694b      	ldreq	r3, [r1, #20]
 80110f2:	600f      	str	r7, [r1, #0]
 80110f4:	bf18      	it	ne
 80110f6:	2300      	movne	r3, #0
 80110f8:	eba6 0807 	sub.w	r8, r6, r7
 80110fc:	608b      	str	r3, [r1, #8]
 80110fe:	f1b8 0f00 	cmp.w	r8, #0
 8011102:	dd9c      	ble.n	801103e <__sflush_r+0x1a>
 8011104:	6a21      	ldr	r1, [r4, #32]
 8011106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011108:	4643      	mov	r3, r8
 801110a:	463a      	mov	r2, r7
 801110c:	4628      	mov	r0, r5
 801110e:	47b0      	blx	r6
 8011110:	2800      	cmp	r0, #0
 8011112:	dc06      	bgt.n	8011122 <__sflush_r+0xfe>
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801111a:	81a3      	strh	r3, [r4, #12]
 801111c:	f04f 30ff 	mov.w	r0, #4294967295
 8011120:	e78e      	b.n	8011040 <__sflush_r+0x1c>
 8011122:	4407      	add	r7, r0
 8011124:	eba8 0800 	sub.w	r8, r8, r0
 8011128:	e7e9      	b.n	80110fe <__sflush_r+0xda>
 801112a:	bf00      	nop
 801112c:	20400001 	.word	0x20400001

08011130 <_fflush_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	690b      	ldr	r3, [r1, #16]
 8011134:	4605      	mov	r5, r0
 8011136:	460c      	mov	r4, r1
 8011138:	b913      	cbnz	r3, 8011140 <_fflush_r+0x10>
 801113a:	2500      	movs	r5, #0
 801113c:	4628      	mov	r0, r5
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	b118      	cbz	r0, 801114a <_fflush_r+0x1a>
 8011142:	6983      	ldr	r3, [r0, #24]
 8011144:	b90b      	cbnz	r3, 801114a <_fflush_r+0x1a>
 8011146:	f000 f887 	bl	8011258 <__sinit>
 801114a:	4b14      	ldr	r3, [pc, #80]	; (801119c <_fflush_r+0x6c>)
 801114c:	429c      	cmp	r4, r3
 801114e:	d11b      	bne.n	8011188 <_fflush_r+0x58>
 8011150:	686c      	ldr	r4, [r5, #4]
 8011152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d0ef      	beq.n	801113a <_fflush_r+0xa>
 801115a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801115c:	07d0      	lsls	r0, r2, #31
 801115e:	d404      	bmi.n	801116a <_fflush_r+0x3a>
 8011160:	0599      	lsls	r1, r3, #22
 8011162:	d402      	bmi.n	801116a <_fflush_r+0x3a>
 8011164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011166:	f000 f915 	bl	8011394 <__retarget_lock_acquire_recursive>
 801116a:	4628      	mov	r0, r5
 801116c:	4621      	mov	r1, r4
 801116e:	f7ff ff59 	bl	8011024 <__sflush_r>
 8011172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011174:	07da      	lsls	r2, r3, #31
 8011176:	4605      	mov	r5, r0
 8011178:	d4e0      	bmi.n	801113c <_fflush_r+0xc>
 801117a:	89a3      	ldrh	r3, [r4, #12]
 801117c:	059b      	lsls	r3, r3, #22
 801117e:	d4dd      	bmi.n	801113c <_fflush_r+0xc>
 8011180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011182:	f000 f908 	bl	8011396 <__retarget_lock_release_recursive>
 8011186:	e7d9      	b.n	801113c <_fflush_r+0xc>
 8011188:	4b05      	ldr	r3, [pc, #20]	; (80111a0 <_fflush_r+0x70>)
 801118a:	429c      	cmp	r4, r3
 801118c:	d101      	bne.n	8011192 <_fflush_r+0x62>
 801118e:	68ac      	ldr	r4, [r5, #8]
 8011190:	e7df      	b.n	8011152 <_fflush_r+0x22>
 8011192:	4b04      	ldr	r3, [pc, #16]	; (80111a4 <_fflush_r+0x74>)
 8011194:	429c      	cmp	r4, r3
 8011196:	bf08      	it	eq
 8011198:	68ec      	ldreq	r4, [r5, #12]
 801119a:	e7da      	b.n	8011152 <_fflush_r+0x22>
 801119c:	0801bd4c 	.word	0x0801bd4c
 80111a0:	0801bd6c 	.word	0x0801bd6c
 80111a4:	0801bd2c 	.word	0x0801bd2c

080111a8 <std>:
 80111a8:	2300      	movs	r3, #0
 80111aa:	b510      	push	{r4, lr}
 80111ac:	4604      	mov	r4, r0
 80111ae:	e9c0 3300 	strd	r3, r3, [r0]
 80111b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111b6:	6083      	str	r3, [r0, #8]
 80111b8:	8181      	strh	r1, [r0, #12]
 80111ba:	6643      	str	r3, [r0, #100]	; 0x64
 80111bc:	81c2      	strh	r2, [r0, #14]
 80111be:	6183      	str	r3, [r0, #24]
 80111c0:	4619      	mov	r1, r3
 80111c2:	2208      	movs	r2, #8
 80111c4:	305c      	adds	r0, #92	; 0x5c
 80111c6:	f7fd fbef 	bl	800e9a8 <memset>
 80111ca:	4b05      	ldr	r3, [pc, #20]	; (80111e0 <std+0x38>)
 80111cc:	6263      	str	r3, [r4, #36]	; 0x24
 80111ce:	4b05      	ldr	r3, [pc, #20]	; (80111e4 <std+0x3c>)
 80111d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80111d2:	4b05      	ldr	r3, [pc, #20]	; (80111e8 <std+0x40>)
 80111d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111d6:	4b05      	ldr	r3, [pc, #20]	; (80111ec <std+0x44>)
 80111d8:	6224      	str	r4, [r4, #32]
 80111da:	6323      	str	r3, [r4, #48]	; 0x30
 80111dc:	bd10      	pop	{r4, pc}
 80111de:	bf00      	nop
 80111e0:	080114fd 	.word	0x080114fd
 80111e4:	0801151f 	.word	0x0801151f
 80111e8:	08011557 	.word	0x08011557
 80111ec:	0801157b 	.word	0x0801157b

080111f0 <_cleanup_r>:
 80111f0:	4901      	ldr	r1, [pc, #4]	; (80111f8 <_cleanup_r+0x8>)
 80111f2:	f000 b8af 	b.w	8011354 <_fwalk_reent>
 80111f6:	bf00      	nop
 80111f8:	08011131 	.word	0x08011131

080111fc <__sfmoreglue>:
 80111fc:	b570      	push	{r4, r5, r6, lr}
 80111fe:	2268      	movs	r2, #104	; 0x68
 8011200:	1e4d      	subs	r5, r1, #1
 8011202:	4355      	muls	r5, r2
 8011204:	460e      	mov	r6, r1
 8011206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801120a:	f7ff fa65 	bl	80106d8 <_malloc_r>
 801120e:	4604      	mov	r4, r0
 8011210:	b140      	cbz	r0, 8011224 <__sfmoreglue+0x28>
 8011212:	2100      	movs	r1, #0
 8011214:	e9c0 1600 	strd	r1, r6, [r0]
 8011218:	300c      	adds	r0, #12
 801121a:	60a0      	str	r0, [r4, #8]
 801121c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011220:	f7fd fbc2 	bl	800e9a8 <memset>
 8011224:	4620      	mov	r0, r4
 8011226:	bd70      	pop	{r4, r5, r6, pc}

08011228 <__sfp_lock_acquire>:
 8011228:	4801      	ldr	r0, [pc, #4]	; (8011230 <__sfp_lock_acquire+0x8>)
 801122a:	f000 b8b3 	b.w	8011394 <__retarget_lock_acquire_recursive>
 801122e:	bf00      	nop
 8011230:	2400f425 	.word	0x2400f425

08011234 <__sfp_lock_release>:
 8011234:	4801      	ldr	r0, [pc, #4]	; (801123c <__sfp_lock_release+0x8>)
 8011236:	f000 b8ae 	b.w	8011396 <__retarget_lock_release_recursive>
 801123a:	bf00      	nop
 801123c:	2400f425 	.word	0x2400f425

08011240 <__sinit_lock_acquire>:
 8011240:	4801      	ldr	r0, [pc, #4]	; (8011248 <__sinit_lock_acquire+0x8>)
 8011242:	f000 b8a7 	b.w	8011394 <__retarget_lock_acquire_recursive>
 8011246:	bf00      	nop
 8011248:	2400f426 	.word	0x2400f426

0801124c <__sinit_lock_release>:
 801124c:	4801      	ldr	r0, [pc, #4]	; (8011254 <__sinit_lock_release+0x8>)
 801124e:	f000 b8a2 	b.w	8011396 <__retarget_lock_release_recursive>
 8011252:	bf00      	nop
 8011254:	2400f426 	.word	0x2400f426

08011258 <__sinit>:
 8011258:	b510      	push	{r4, lr}
 801125a:	4604      	mov	r4, r0
 801125c:	f7ff fff0 	bl	8011240 <__sinit_lock_acquire>
 8011260:	69a3      	ldr	r3, [r4, #24]
 8011262:	b11b      	cbz	r3, 801126c <__sinit+0x14>
 8011264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011268:	f7ff bff0 	b.w	801124c <__sinit_lock_release>
 801126c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011270:	6523      	str	r3, [r4, #80]	; 0x50
 8011272:	4b13      	ldr	r3, [pc, #76]	; (80112c0 <__sinit+0x68>)
 8011274:	4a13      	ldr	r2, [pc, #76]	; (80112c4 <__sinit+0x6c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	62a2      	str	r2, [r4, #40]	; 0x28
 801127a:	42a3      	cmp	r3, r4
 801127c:	bf04      	itt	eq
 801127e:	2301      	moveq	r3, #1
 8011280:	61a3      	streq	r3, [r4, #24]
 8011282:	4620      	mov	r0, r4
 8011284:	f000 f820 	bl	80112c8 <__sfp>
 8011288:	6060      	str	r0, [r4, #4]
 801128a:	4620      	mov	r0, r4
 801128c:	f000 f81c 	bl	80112c8 <__sfp>
 8011290:	60a0      	str	r0, [r4, #8]
 8011292:	4620      	mov	r0, r4
 8011294:	f000 f818 	bl	80112c8 <__sfp>
 8011298:	2200      	movs	r2, #0
 801129a:	60e0      	str	r0, [r4, #12]
 801129c:	2104      	movs	r1, #4
 801129e:	6860      	ldr	r0, [r4, #4]
 80112a0:	f7ff ff82 	bl	80111a8 <std>
 80112a4:	68a0      	ldr	r0, [r4, #8]
 80112a6:	2201      	movs	r2, #1
 80112a8:	2109      	movs	r1, #9
 80112aa:	f7ff ff7d 	bl	80111a8 <std>
 80112ae:	68e0      	ldr	r0, [r4, #12]
 80112b0:	2202      	movs	r2, #2
 80112b2:	2112      	movs	r1, #18
 80112b4:	f7ff ff78 	bl	80111a8 <std>
 80112b8:	2301      	movs	r3, #1
 80112ba:	61a3      	str	r3, [r4, #24]
 80112bc:	e7d2      	b.n	8011264 <__sinit+0xc>
 80112be:	bf00      	nop
 80112c0:	0801b9b4 	.word	0x0801b9b4
 80112c4:	080111f1 	.word	0x080111f1

080112c8 <__sfp>:
 80112c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ca:	4607      	mov	r7, r0
 80112cc:	f7ff ffac 	bl	8011228 <__sfp_lock_acquire>
 80112d0:	4b1e      	ldr	r3, [pc, #120]	; (801134c <__sfp+0x84>)
 80112d2:	681e      	ldr	r6, [r3, #0]
 80112d4:	69b3      	ldr	r3, [r6, #24]
 80112d6:	b913      	cbnz	r3, 80112de <__sfp+0x16>
 80112d8:	4630      	mov	r0, r6
 80112da:	f7ff ffbd 	bl	8011258 <__sinit>
 80112de:	3648      	adds	r6, #72	; 0x48
 80112e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	d503      	bpl.n	80112f0 <__sfp+0x28>
 80112e8:	6833      	ldr	r3, [r6, #0]
 80112ea:	b30b      	cbz	r3, 8011330 <__sfp+0x68>
 80112ec:	6836      	ldr	r6, [r6, #0]
 80112ee:	e7f7      	b.n	80112e0 <__sfp+0x18>
 80112f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80112f4:	b9d5      	cbnz	r5, 801132c <__sfp+0x64>
 80112f6:	4b16      	ldr	r3, [pc, #88]	; (8011350 <__sfp+0x88>)
 80112f8:	60e3      	str	r3, [r4, #12]
 80112fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80112fe:	6665      	str	r5, [r4, #100]	; 0x64
 8011300:	f000 f847 	bl	8011392 <__retarget_lock_init_recursive>
 8011304:	f7ff ff96 	bl	8011234 <__sfp_lock_release>
 8011308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801130c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011310:	6025      	str	r5, [r4, #0]
 8011312:	61a5      	str	r5, [r4, #24]
 8011314:	2208      	movs	r2, #8
 8011316:	4629      	mov	r1, r5
 8011318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801131c:	f7fd fb44 	bl	800e9a8 <memset>
 8011320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011328:	4620      	mov	r0, r4
 801132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801132c:	3468      	adds	r4, #104	; 0x68
 801132e:	e7d9      	b.n	80112e4 <__sfp+0x1c>
 8011330:	2104      	movs	r1, #4
 8011332:	4638      	mov	r0, r7
 8011334:	f7ff ff62 	bl	80111fc <__sfmoreglue>
 8011338:	4604      	mov	r4, r0
 801133a:	6030      	str	r0, [r6, #0]
 801133c:	2800      	cmp	r0, #0
 801133e:	d1d5      	bne.n	80112ec <__sfp+0x24>
 8011340:	f7ff ff78 	bl	8011234 <__sfp_lock_release>
 8011344:	230c      	movs	r3, #12
 8011346:	603b      	str	r3, [r7, #0]
 8011348:	e7ee      	b.n	8011328 <__sfp+0x60>
 801134a:	bf00      	nop
 801134c:	0801b9b4 	.word	0x0801b9b4
 8011350:	ffff0001 	.word	0xffff0001

08011354 <_fwalk_reent>:
 8011354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011358:	4606      	mov	r6, r0
 801135a:	4688      	mov	r8, r1
 801135c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011360:	2700      	movs	r7, #0
 8011362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011366:	f1b9 0901 	subs.w	r9, r9, #1
 801136a:	d505      	bpl.n	8011378 <_fwalk_reent+0x24>
 801136c:	6824      	ldr	r4, [r4, #0]
 801136e:	2c00      	cmp	r4, #0
 8011370:	d1f7      	bne.n	8011362 <_fwalk_reent+0xe>
 8011372:	4638      	mov	r0, r7
 8011374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011378:	89ab      	ldrh	r3, [r5, #12]
 801137a:	2b01      	cmp	r3, #1
 801137c:	d907      	bls.n	801138e <_fwalk_reent+0x3a>
 801137e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011382:	3301      	adds	r3, #1
 8011384:	d003      	beq.n	801138e <_fwalk_reent+0x3a>
 8011386:	4629      	mov	r1, r5
 8011388:	4630      	mov	r0, r6
 801138a:	47c0      	blx	r8
 801138c:	4307      	orrs	r7, r0
 801138e:	3568      	adds	r5, #104	; 0x68
 8011390:	e7e9      	b.n	8011366 <_fwalk_reent+0x12>

08011392 <__retarget_lock_init_recursive>:
 8011392:	4770      	bx	lr

08011394 <__retarget_lock_acquire_recursive>:
 8011394:	4770      	bx	lr

08011396 <__retarget_lock_release_recursive>:
 8011396:	4770      	bx	lr

08011398 <__swhatbuf_r>:
 8011398:	b570      	push	{r4, r5, r6, lr}
 801139a:	460e      	mov	r6, r1
 801139c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a0:	2900      	cmp	r1, #0
 80113a2:	b096      	sub	sp, #88	; 0x58
 80113a4:	4614      	mov	r4, r2
 80113a6:	461d      	mov	r5, r3
 80113a8:	da08      	bge.n	80113bc <__swhatbuf_r+0x24>
 80113aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	602a      	str	r2, [r5, #0]
 80113b2:	061a      	lsls	r2, r3, #24
 80113b4:	d410      	bmi.n	80113d8 <__swhatbuf_r+0x40>
 80113b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ba:	e00e      	b.n	80113da <__swhatbuf_r+0x42>
 80113bc:	466a      	mov	r2, sp
 80113be:	f000 f903 	bl	80115c8 <_fstat_r>
 80113c2:	2800      	cmp	r0, #0
 80113c4:	dbf1      	blt.n	80113aa <__swhatbuf_r+0x12>
 80113c6:	9a01      	ldr	r2, [sp, #4]
 80113c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113d0:	425a      	negs	r2, r3
 80113d2:	415a      	adcs	r2, r3
 80113d4:	602a      	str	r2, [r5, #0]
 80113d6:	e7ee      	b.n	80113b6 <__swhatbuf_r+0x1e>
 80113d8:	2340      	movs	r3, #64	; 0x40
 80113da:	2000      	movs	r0, #0
 80113dc:	6023      	str	r3, [r4, #0]
 80113de:	b016      	add	sp, #88	; 0x58
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080113e4 <__smakebuf_r>:
 80113e4:	898b      	ldrh	r3, [r1, #12]
 80113e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113e8:	079d      	lsls	r5, r3, #30
 80113ea:	4606      	mov	r6, r0
 80113ec:	460c      	mov	r4, r1
 80113ee:	d507      	bpl.n	8011400 <__smakebuf_r+0x1c>
 80113f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	6123      	str	r3, [r4, #16]
 80113f8:	2301      	movs	r3, #1
 80113fa:	6163      	str	r3, [r4, #20]
 80113fc:	b002      	add	sp, #8
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	ab01      	add	r3, sp, #4
 8011402:	466a      	mov	r2, sp
 8011404:	f7ff ffc8 	bl	8011398 <__swhatbuf_r>
 8011408:	9900      	ldr	r1, [sp, #0]
 801140a:	4605      	mov	r5, r0
 801140c:	4630      	mov	r0, r6
 801140e:	f7ff f963 	bl	80106d8 <_malloc_r>
 8011412:	b948      	cbnz	r0, 8011428 <__smakebuf_r+0x44>
 8011414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011418:	059a      	lsls	r2, r3, #22
 801141a:	d4ef      	bmi.n	80113fc <__smakebuf_r+0x18>
 801141c:	f023 0303 	bic.w	r3, r3, #3
 8011420:	f043 0302 	orr.w	r3, r3, #2
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	e7e3      	b.n	80113f0 <__smakebuf_r+0xc>
 8011428:	4b0d      	ldr	r3, [pc, #52]	; (8011460 <__smakebuf_r+0x7c>)
 801142a:	62b3      	str	r3, [r6, #40]	; 0x28
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	6020      	str	r0, [r4, #0]
 8011430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011434:	81a3      	strh	r3, [r4, #12]
 8011436:	9b00      	ldr	r3, [sp, #0]
 8011438:	6163      	str	r3, [r4, #20]
 801143a:	9b01      	ldr	r3, [sp, #4]
 801143c:	6120      	str	r0, [r4, #16]
 801143e:	b15b      	cbz	r3, 8011458 <__smakebuf_r+0x74>
 8011440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011444:	4630      	mov	r0, r6
 8011446:	f000 f8d1 	bl	80115ec <_isatty_r>
 801144a:	b128      	cbz	r0, 8011458 <__smakebuf_r+0x74>
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	f023 0303 	bic.w	r3, r3, #3
 8011452:	f043 0301 	orr.w	r3, r3, #1
 8011456:	81a3      	strh	r3, [r4, #12]
 8011458:	89a0      	ldrh	r0, [r4, #12]
 801145a:	4305      	orrs	r5, r0
 801145c:	81a5      	strh	r5, [r4, #12]
 801145e:	e7cd      	b.n	80113fc <__smakebuf_r+0x18>
 8011460:	080111f1 	.word	0x080111f1

08011464 <_malloc_usable_size_r>:
 8011464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011468:	1f18      	subs	r0, r3, #4
 801146a:	2b00      	cmp	r3, #0
 801146c:	bfbc      	itt	lt
 801146e:	580b      	ldrlt	r3, [r1, r0]
 8011470:	18c0      	addlt	r0, r0, r3
 8011472:	4770      	bx	lr

08011474 <_raise_r>:
 8011474:	291f      	cmp	r1, #31
 8011476:	b538      	push	{r3, r4, r5, lr}
 8011478:	4604      	mov	r4, r0
 801147a:	460d      	mov	r5, r1
 801147c:	d904      	bls.n	8011488 <_raise_r+0x14>
 801147e:	2316      	movs	r3, #22
 8011480:	6003      	str	r3, [r0, #0]
 8011482:	f04f 30ff 	mov.w	r0, #4294967295
 8011486:	bd38      	pop	{r3, r4, r5, pc}
 8011488:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801148a:	b112      	cbz	r2, 8011492 <_raise_r+0x1e>
 801148c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011490:	b94b      	cbnz	r3, 80114a6 <_raise_r+0x32>
 8011492:	4620      	mov	r0, r4
 8011494:	f000 f830 	bl	80114f8 <_getpid_r>
 8011498:	462a      	mov	r2, r5
 801149a:	4601      	mov	r1, r0
 801149c:	4620      	mov	r0, r4
 801149e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114a2:	f000 b817 	b.w	80114d4 <_kill_r>
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d00a      	beq.n	80114c0 <_raise_r+0x4c>
 80114aa:	1c59      	adds	r1, r3, #1
 80114ac:	d103      	bne.n	80114b6 <_raise_r+0x42>
 80114ae:	2316      	movs	r3, #22
 80114b0:	6003      	str	r3, [r0, #0]
 80114b2:	2001      	movs	r0, #1
 80114b4:	e7e7      	b.n	8011486 <_raise_r+0x12>
 80114b6:	2400      	movs	r4, #0
 80114b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114bc:	4628      	mov	r0, r5
 80114be:	4798      	blx	r3
 80114c0:	2000      	movs	r0, #0
 80114c2:	e7e0      	b.n	8011486 <_raise_r+0x12>

080114c4 <raise>:
 80114c4:	4b02      	ldr	r3, [pc, #8]	; (80114d0 <raise+0xc>)
 80114c6:	4601      	mov	r1, r0
 80114c8:	6818      	ldr	r0, [r3, #0]
 80114ca:	f7ff bfd3 	b.w	8011474 <_raise_r>
 80114ce:	bf00      	nop
 80114d0:	24000498 	.word	0x24000498

080114d4 <_kill_r>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4d07      	ldr	r5, [pc, #28]	; (80114f4 <_kill_r+0x20>)
 80114d8:	2300      	movs	r3, #0
 80114da:	4604      	mov	r4, r0
 80114dc:	4608      	mov	r0, r1
 80114de:	4611      	mov	r1, r2
 80114e0:	602b      	str	r3, [r5, #0]
 80114e2:	f7f2 ff27 	bl	8004334 <_kill>
 80114e6:	1c43      	adds	r3, r0, #1
 80114e8:	d102      	bne.n	80114f0 <_kill_r+0x1c>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	b103      	cbz	r3, 80114f0 <_kill_r+0x1c>
 80114ee:	6023      	str	r3, [r4, #0]
 80114f0:	bd38      	pop	{r3, r4, r5, pc}
 80114f2:	bf00      	nop
 80114f4:	2400f420 	.word	0x2400f420

080114f8 <_getpid_r>:
 80114f8:	f7f2 bf1a 	b.w	8004330 <_getpid>

080114fc <__sread>:
 80114fc:	b510      	push	{r4, lr}
 80114fe:	460c      	mov	r4, r1
 8011500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011504:	f000 f894 	bl	8011630 <_read_r>
 8011508:	2800      	cmp	r0, #0
 801150a:	bfab      	itete	ge
 801150c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801150e:	89a3      	ldrhlt	r3, [r4, #12]
 8011510:	181b      	addge	r3, r3, r0
 8011512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011516:	bfac      	ite	ge
 8011518:	6563      	strge	r3, [r4, #84]	; 0x54
 801151a:	81a3      	strhlt	r3, [r4, #12]
 801151c:	bd10      	pop	{r4, pc}

0801151e <__swrite>:
 801151e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011522:	461f      	mov	r7, r3
 8011524:	898b      	ldrh	r3, [r1, #12]
 8011526:	05db      	lsls	r3, r3, #23
 8011528:	4605      	mov	r5, r0
 801152a:	460c      	mov	r4, r1
 801152c:	4616      	mov	r6, r2
 801152e:	d505      	bpl.n	801153c <__swrite+0x1e>
 8011530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011534:	2302      	movs	r3, #2
 8011536:	2200      	movs	r2, #0
 8011538:	f000 f868 	bl	801160c <_lseek_r>
 801153c:	89a3      	ldrh	r3, [r4, #12]
 801153e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011546:	81a3      	strh	r3, [r4, #12]
 8011548:	4632      	mov	r2, r6
 801154a:	463b      	mov	r3, r7
 801154c:	4628      	mov	r0, r5
 801154e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011552:	f000 b817 	b.w	8011584 <_write_r>

08011556 <__sseek>:
 8011556:	b510      	push	{r4, lr}
 8011558:	460c      	mov	r4, r1
 801155a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801155e:	f000 f855 	bl	801160c <_lseek_r>
 8011562:	1c43      	adds	r3, r0, #1
 8011564:	89a3      	ldrh	r3, [r4, #12]
 8011566:	bf15      	itete	ne
 8011568:	6560      	strne	r0, [r4, #84]	; 0x54
 801156a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801156e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011572:	81a3      	strheq	r3, [r4, #12]
 8011574:	bf18      	it	ne
 8011576:	81a3      	strhne	r3, [r4, #12]
 8011578:	bd10      	pop	{r4, pc}

0801157a <__sclose>:
 801157a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157e:	f000 b813 	b.w	80115a8 <_close_r>
	...

08011584 <_write_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	4d07      	ldr	r5, [pc, #28]	; (80115a4 <_write_r+0x20>)
 8011588:	4604      	mov	r4, r0
 801158a:	4608      	mov	r0, r1
 801158c:	4611      	mov	r1, r2
 801158e:	2200      	movs	r2, #0
 8011590:	602a      	str	r2, [r5, #0]
 8011592:	461a      	mov	r2, r3
 8011594:	f7f2 feec 	bl	8004370 <_write>
 8011598:	1c43      	adds	r3, r0, #1
 801159a:	d102      	bne.n	80115a2 <_write_r+0x1e>
 801159c:	682b      	ldr	r3, [r5, #0]
 801159e:	b103      	cbz	r3, 80115a2 <_write_r+0x1e>
 80115a0:	6023      	str	r3, [r4, #0]
 80115a2:	bd38      	pop	{r3, r4, r5, pc}
 80115a4:	2400f420 	.word	0x2400f420

080115a8 <_close_r>:
 80115a8:	b538      	push	{r3, r4, r5, lr}
 80115aa:	4d06      	ldr	r5, [pc, #24]	; (80115c4 <_close_r+0x1c>)
 80115ac:	2300      	movs	r3, #0
 80115ae:	4604      	mov	r4, r0
 80115b0:	4608      	mov	r0, r1
 80115b2:	602b      	str	r3, [r5, #0]
 80115b4:	f7f2 feea 	bl	800438c <_close>
 80115b8:	1c43      	adds	r3, r0, #1
 80115ba:	d102      	bne.n	80115c2 <_close_r+0x1a>
 80115bc:	682b      	ldr	r3, [r5, #0]
 80115be:	b103      	cbz	r3, 80115c2 <_close_r+0x1a>
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	2400f420 	.word	0x2400f420

080115c8 <_fstat_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	4d07      	ldr	r5, [pc, #28]	; (80115e8 <_fstat_r+0x20>)
 80115cc:	2300      	movs	r3, #0
 80115ce:	4604      	mov	r4, r0
 80115d0:	4608      	mov	r0, r1
 80115d2:	4611      	mov	r1, r2
 80115d4:	602b      	str	r3, [r5, #0]
 80115d6:	f7f2 fedd 	bl	8004394 <_fstat>
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	d102      	bne.n	80115e4 <_fstat_r+0x1c>
 80115de:	682b      	ldr	r3, [r5, #0]
 80115e0:	b103      	cbz	r3, 80115e4 <_fstat_r+0x1c>
 80115e2:	6023      	str	r3, [r4, #0]
 80115e4:	bd38      	pop	{r3, r4, r5, pc}
 80115e6:	bf00      	nop
 80115e8:	2400f420 	.word	0x2400f420

080115ec <_isatty_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4d06      	ldr	r5, [pc, #24]	; (8011608 <_isatty_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4604      	mov	r4, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f7f2 fed2 	bl	80043a0 <_isatty>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_isatty_r+0x1a>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_isatty_r+0x1a>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	2400f420 	.word	0x2400f420

0801160c <_lseek_r>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4d07      	ldr	r5, [pc, #28]	; (801162c <_lseek_r+0x20>)
 8011610:	4604      	mov	r4, r0
 8011612:	4608      	mov	r0, r1
 8011614:	4611      	mov	r1, r2
 8011616:	2200      	movs	r2, #0
 8011618:	602a      	str	r2, [r5, #0]
 801161a:	461a      	mov	r2, r3
 801161c:	f7f2 fec2 	bl	80043a4 <_lseek>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	d102      	bne.n	801162a <_lseek_r+0x1e>
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	b103      	cbz	r3, 801162a <_lseek_r+0x1e>
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	bd38      	pop	{r3, r4, r5, pc}
 801162c:	2400f420 	.word	0x2400f420

08011630 <_read_r>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	4d07      	ldr	r5, [pc, #28]	; (8011650 <_read_r+0x20>)
 8011634:	4604      	mov	r4, r0
 8011636:	4608      	mov	r0, r1
 8011638:	4611      	mov	r1, r2
 801163a:	2200      	movs	r2, #0
 801163c:	602a      	str	r2, [r5, #0]
 801163e:	461a      	mov	r2, r3
 8011640:	f7f2 fe88 	bl	8004354 <_read>
 8011644:	1c43      	adds	r3, r0, #1
 8011646:	d102      	bne.n	801164e <_read_r+0x1e>
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	b103      	cbz	r3, 801164e <_read_r+0x1e>
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	2400f420 	.word	0x2400f420
 8011654:	00000000 	.word	0x00000000

08011658 <exp>:
 8011658:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801165a:	ee10 3a90 	vmov	r3, s1
 801165e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011662:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8011666:	18a2      	adds	r2, r4, r2
 8011668:	2a3e      	cmp	r2, #62	; 0x3e
 801166a:	ee10 1a10 	vmov	r1, s0
 801166e:	d922      	bls.n	80116b6 <exp+0x5e>
 8011670:	2a00      	cmp	r2, #0
 8011672:	da06      	bge.n	8011682 <exp+0x2a>
 8011674:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011678:	ee30 0b07 	vadd.f64	d0, d0, d7
 801167c:	b004      	add	sp, #16
 801167e:	bcf0      	pop	{r4, r5, r6, r7}
 8011680:	4770      	bx	lr
 8011682:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8011686:	f04f 0000 	mov.w	r0, #0
 801168a:	d913      	bls.n	80116b4 <exp+0x5c>
 801168c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8011690:	bf08      	it	eq
 8011692:	4281      	cmpeq	r1, r0
 8011694:	f000 80a0 	beq.w	80117d8 <exp+0x180>
 8011698:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801169c:	4294      	cmp	r4, r2
 801169e:	d0e9      	beq.n	8011674 <exp+0x1c>
 80116a0:	4283      	cmp	r3, r0
 80116a2:	da03      	bge.n	80116ac <exp+0x54>
 80116a4:	b004      	add	sp, #16
 80116a6:	bcf0      	pop	{r4, r5, r6, r7}
 80116a8:	f000 b9be 	b.w	8011a28 <__math_uflow>
 80116ac:	b004      	add	sp, #16
 80116ae:	bcf0      	pop	{r4, r5, r6, r7}
 80116b0:	f000 b9c2 	b.w	8011a38 <__math_oflow>
 80116b4:	4604      	mov	r4, r0
 80116b6:	4950      	ldr	r1, [pc, #320]	; (80117f8 <exp+0x1a0>)
 80116b8:	ed91 6b02 	vldr	d6, [r1, #8]
 80116bc:	ed91 5b00 	vldr	d5, [r1]
 80116c0:	eeb0 7b46 	vmov.f64	d7, d6
 80116c4:	eea5 7b00 	vfma.f64	d7, d5, d0
 80116c8:	ee17 5a10 	vmov	r5, s14
 80116cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80116d0:	ed91 6b04 	vldr	d6, [r1, #16]
 80116d4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80116d8:	eea6 0b07 	vfma.f64	d0, d6, d7
 80116dc:	ed91 6b06 	vldr	d6, [r1, #24]
 80116e0:	18d8      	adds	r0, r3, r3
 80116e2:	f100 030f 	add.w	r3, r0, #15
 80116e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80116ea:	eea6 0b07 	vfma.f64	d0, d6, d7
 80116ee:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80116f2:	ee20 7b00 	vmul.f64	d7, d0, d0
 80116f6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 80116fa:	ed91 5b08 	vldr	d5, [r1, #32]
 80116fe:	ee30 6b06 	vadd.f64	d6, d0, d6
 8011702:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8011706:	eea4 5b00 	vfma.f64	d5, d4, d0
 801170a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801170e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011712:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011716:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801171a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801171e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8011722:	eea4 5b00 	vfma.f64	d5, d4, d0
 8011726:	2600      	movs	r6, #0
 8011728:	19f2      	adds	r2, r6, r7
 801172a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801172e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011732:	2c00      	cmp	r4, #0
 8011734:	d14b      	bne.n	80117ce <exp+0x176>
 8011736:	42b5      	cmp	r5, r6
 8011738:	db10      	blt.n	801175c <exp+0x104>
 801173a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801173e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80117e0 <exp+0x188>
 8011742:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8011746:	4610      	mov	r0, r2
 8011748:	ec41 0b10 	vmov	d0, r0, r1
 801174c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8011750:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011754:	b004      	add	sp, #16
 8011756:	bcf0      	pop	{r4, r5, r6, r7}
 8011758:	f000 b9a6 	b.w	8011aa8 <__math_check_oflow>
 801175c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011760:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011764:	4610      	mov	r0, r2
 8011766:	ec41 0b17 	vmov	d7, r0, r1
 801176a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801176e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011772:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011776:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801177e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80117e8 <exp+0x190>
 8011782:	d51e      	bpl.n	80117c2 <exp+0x16a>
 8011784:	ee35 3b04 	vadd.f64	d3, d5, d4
 8011788:	ee37 7b45 	vsub.f64	d7, d7, d5
 801178c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011790:	ee34 6b43 	vsub.f64	d6, d4, d3
 8011794:	ee36 5b05 	vadd.f64	d5, d6, d5
 8011798:	ee35 5b07 	vadd.f64	d5, d5, d7
 801179c:	ee35 5b03 	vadd.f64	d5, d5, d3
 80117a0:	ee35 5b44 	vsub.f64	d5, d5, d4
 80117a4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80117a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ac:	d101      	bne.n	80117b2 <exp+0x15a>
 80117ae:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80117f0 <exp+0x198>
 80117b2:	ed8d 0b00 	vstr	d0, [sp]
 80117b6:	ed9d 7b00 	vldr	d7, [sp]
 80117ba:	ee27 7b00 	vmul.f64	d7, d7, d0
 80117be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80117c2:	ee25 0b00 	vmul.f64	d0, d5, d0
 80117c6:	b004      	add	sp, #16
 80117c8:	bcf0      	pop	{r4, r5, r6, r7}
 80117ca:	f000 b964 	b.w	8011a96 <__math_check_uflow>
 80117ce:	ec43 2b10 	vmov	d0, r2, r3
 80117d2:	eea6 0b00 	vfma.f64	d0, d6, d0
 80117d6:	e751      	b.n	801167c <exp+0x24>
 80117d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80117f0 <exp+0x198>
 80117dc:	e74e      	b.n	801167c <exp+0x24>
 80117de:	bf00      	nop
 80117e0:	00000000 	.word	0x00000000
 80117e4:	7f000000 	.word	0x7f000000
 80117e8:	00000000 	.word	0x00000000
 80117ec:	00100000 	.word	0x00100000
	...
 80117f8:	0801bd90 	.word	0x0801bd90
 80117fc:	00000000 	.word	0x00000000

08011800 <log>:
 8011800:	b470      	push	{r4, r5, r6}
 8011802:	ee10 1a90 	vmov	r1, s1
 8011806:	ee10 2a10 	vmov	r2, s0
 801180a:	f04f 34ff 	mov.w	r4, #4294967295
 801180e:	4294      	cmp	r4, r2
 8011810:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 8011814:	4c72      	ldr	r4, [pc, #456]	; (80119e0 <log+0x1e0>)
 8011816:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 801181a:	eb74 0000 	sbcs.w	r0, r4, r0
 801181e:	ed2d 8b02 	vpush	{d8}
 8011822:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011826:	d35c      	bcc.n	80118e2 <log+0xe2>
 8011828:	4b6e      	ldr	r3, [pc, #440]	; (80119e4 <log+0x1e4>)
 801182a:	4299      	cmp	r1, r3
 801182c:	bf08      	it	eq
 801182e:	2a00      	cmpeq	r2, #0
 8011830:	f000 80c6 	beq.w	80119c0 <log+0x1c0>
 8011834:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011838:	ee30 0b47 	vsub.f64	d0, d0, d7
 801183c:	4b6a      	ldr	r3, [pc, #424]	; (80119e8 <log+0x1e8>)
 801183e:	ee20 2b00 	vmul.f64	d2, d0, d0
 8011842:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8011846:	ee20 4b02 	vmul.f64	d4, d0, d2
 801184a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 801184e:	eea6 7b00 	vfma.f64	d7, d6, d0
 8011852:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8011856:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 801185a:	eea6 7b02 	vfma.f64	d7, d6, d2
 801185e:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8011862:	eea5 6b00 	vfma.f64	d6, d5, d0
 8011866:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 801186a:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 801186e:	eea5 6b02 	vfma.f64	d6, d5, d2
 8011872:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 8011876:	eea3 5b00 	vfma.f64	d5, d3, d0
 801187a:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 801187e:	eea3 5b02 	vfma.f64	d5, d3, d2
 8011882:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 8011886:	eeb0 2b40 	vmov.f64	d2, d0
 801188a:	eea3 5b04 	vfma.f64	d5, d3, d4
 801188e:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011892:	eea5 6b04 	vfma.f64	d6, d5, d4
 8011896:	eea6 7b04 	vfma.f64	d7, d6, d4
 801189a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80119c8 <log+0x1c8>
 801189e:	eeb0 1b47 	vmov.f64	d1, d7
 80118a2:	eeb0 5b40 	vmov.f64	d5, d0
 80118a6:	eea0 5b06 	vfma.f64	d5, d0, d6
 80118aa:	eea0 5b46 	vfms.f64	d5, d0, d6
 80118ae:	ee30 8b45 	vsub.f64	d8, d0, d5
 80118b2:	ee25 7b05 	vmul.f64	d7, d5, d5
 80118b6:	ee30 5b05 	vadd.f64	d5, d0, d5
 80118ba:	eea7 2b03 	vfma.f64	d2, d7, d3
 80118be:	ee30 6b42 	vsub.f64	d6, d0, d2
 80118c2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80118c6:	ee23 3b08 	vmul.f64	d3, d3, d8
 80118ca:	eea3 6b05 	vfma.f64	d6, d3, d5
 80118ce:	eeb0 0b46 	vmov.f64	d0, d6
 80118d2:	eea1 0b04 	vfma.f64	d0, d1, d4
 80118d6:	ee32 0b00 	vadd.f64	d0, d2, d0
 80118da:	ecbd 8b02 	vpop	{d8}
 80118de:	bc70      	pop	{r4, r5, r6}
 80118e0:	4770      	bx	lr
 80118e2:	f1a3 0410 	sub.w	r4, r3, #16
 80118e6:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80118ea:	4284      	cmp	r4, r0
 80118ec:	d923      	bls.n	8011936 <log+0x136>
 80118ee:	1894      	adds	r4, r2, r2
 80118f0:	eb41 0001 	adc.w	r0, r1, r1
 80118f4:	4320      	orrs	r0, r4
 80118f6:	d105      	bne.n	8011904 <log+0x104>
 80118f8:	ecbd 8b02 	vpop	{d8}
 80118fc:	2001      	movs	r0, #1
 80118fe:	bc70      	pop	{r4, r5, r6}
 8011900:	f000 b8a2 	b.w	8011a48 <__math_divzero>
 8011904:	4839      	ldr	r0, [pc, #228]	; (80119ec <log+0x1ec>)
 8011906:	4281      	cmp	r1, r0
 8011908:	bf08      	it	eq
 801190a:	2a00      	cmpeq	r2, #0
 801190c:	d0e5      	beq.n	80118da <log+0xda>
 801190e:	041a      	lsls	r2, r3, #16
 8011910:	d404      	bmi.n	801191c <log+0x11c>
 8011912:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 8011916:	ea32 0303 	bics.w	r3, r2, r3
 801191a:	d104      	bne.n	8011926 <log+0x126>
 801191c:	ecbd 8b02 	vpop	{d8}
 8011920:	bc70      	pop	{r4, r5, r6}
 8011922:	f000 b8a9 	b.w	8011a78 <__math_invalid>
 8011926:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80119d0 <log+0x1d0>
 801192a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801192e:	ec53 2b17 	vmov	r2, r3, d7
 8011932:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 8011936:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801193a:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 801193e:	0d1e      	lsrs	r6, r3, #20
 8011940:	1e14      	subs	r4, r2, #0
 8011942:	4a29      	ldr	r2, [pc, #164]	; (80119e8 <log+0x1e8>)
 8011944:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8011948:	f3c3 3046 	ubfx	r0, r3, #13, #7
 801194c:	0536      	lsls	r6, r6, #20
 801194e:	1b8d      	subs	r5, r1, r6
 8011950:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 8011954:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8011958:	ec45 4b16 	vmov	d6, r4, r5
 801195c:	151b      	asrs	r3, r3, #20
 801195e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011962:	ee07 3a90 	vmov	s15, r3
 8011966:	ee25 2b05 	vmul.f64	d2, d5, d5
 801196a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801196e:	ed92 4b00 	vldr	d4, [r2]
 8011972:	ee25 1b02 	vmul.f64	d1, d5, d2
 8011976:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 801197a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801197e:	ee35 4b07 	vadd.f64	d4, d5, d7
 8011982:	ee37 0b44 	vsub.f64	d0, d7, d4
 8011986:	ed92 7b02 	vldr	d7, [r2, #8]
 801198a:	ee30 0b05 	vadd.f64	d0, d0, d5
 801198e:	eea7 0b06 	vfma.f64	d0, d7, d6
 8011992:	ed92 7b04 	vldr	d7, [r2, #16]
 8011996:	ed92 6b08 	vldr	d6, [r2, #32]
 801199a:	eea7 0b02 	vfma.f64	d0, d7, d2
 801199e:	ed92 7b06 	vldr	d7, [r2, #24]
 80119a2:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 80119a6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80119aa:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 80119ae:	eea3 6b05 	vfma.f64	d6, d3, d5
 80119b2:	eea6 7b02 	vfma.f64	d7, d6, d2
 80119b6:	eea1 0b07 	vfma.f64	d0, d1, d7
 80119ba:	ee30 0b04 	vadd.f64	d0, d0, d4
 80119be:	e78c      	b.n	80118da <log+0xda>
 80119c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80119d8 <log+0x1d8>
 80119c4:	e789      	b.n	80118da <log+0xda>
 80119c6:	bf00      	nop
 80119c8:	00000000 	.word	0x00000000
 80119cc:	41a00000 	.word	0x41a00000
 80119d0:	00000000 	.word	0x00000000
 80119d4:	43300000 	.word	0x43300000
	...
 80119e0:	000308ff 	.word	0x000308ff
 80119e4:	3ff00000 	.word	0x3ff00000
 80119e8:	0801c600 	.word	0x0801c600
 80119ec:	7ff00000 	.word	0x7ff00000

080119f0 <with_errno>:
 80119f0:	b513      	push	{r0, r1, r4, lr}
 80119f2:	4604      	mov	r4, r0
 80119f4:	ed8d 0b00 	vstr	d0, [sp]
 80119f8:	f7fc ff9e 	bl	800e938 <__errno>
 80119fc:	ed9d 0b00 	vldr	d0, [sp]
 8011a00:	6004      	str	r4, [r0, #0]
 8011a02:	b002      	add	sp, #8
 8011a04:	bd10      	pop	{r4, pc}

08011a06 <xflow>:
 8011a06:	b082      	sub	sp, #8
 8011a08:	b158      	cbz	r0, 8011a22 <xflow+0x1c>
 8011a0a:	eeb1 7b40 	vneg.f64	d7, d0
 8011a0e:	ed8d 7b00 	vstr	d7, [sp]
 8011a12:	ed9d 7b00 	vldr	d7, [sp]
 8011a16:	2022      	movs	r0, #34	; 0x22
 8011a18:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a1c:	b002      	add	sp, #8
 8011a1e:	f7ff bfe7 	b.w	80119f0 <with_errno>
 8011a22:	eeb0 7b40 	vmov.f64	d7, d0
 8011a26:	e7f2      	b.n	8011a0e <xflow+0x8>

08011a28 <__math_uflow>:
 8011a28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a30 <__math_uflow+0x8>
 8011a2c:	f7ff bfeb 	b.w	8011a06 <xflow>
 8011a30:	00000000 	.word	0x00000000
 8011a34:	10000000 	.word	0x10000000

08011a38 <__math_oflow>:
 8011a38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a40 <__math_oflow+0x8>
 8011a3c:	f7ff bfe3 	b.w	8011a06 <xflow>
 8011a40:	00000000 	.word	0x00000000
 8011a44:	70000000 	.word	0x70000000

08011a48 <__math_divzero>:
 8011a48:	b082      	sub	sp, #8
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a50:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011a54:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011a58:	ed8d 7b00 	vstr	d7, [sp]
 8011a5c:	ed9d 0b00 	vldr	d0, [sp]
 8011a60:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011a70 <__math_divzero+0x28>
 8011a64:	2022      	movs	r0, #34	; 0x22
 8011a66:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011a6a:	b002      	add	sp, #8
 8011a6c:	f7ff bfc0 	b.w	80119f0 <with_errno>
	...

08011a78 <__math_invalid>:
 8011a78:	eeb0 7b40 	vmov.f64	d7, d0
 8011a7c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a84:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011a88:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011a8c:	d602      	bvs.n	8011a94 <__math_invalid+0x1c>
 8011a8e:	2021      	movs	r0, #33	; 0x21
 8011a90:	f7ff bfae 	b.w	80119f0 <with_errno>
 8011a94:	4770      	bx	lr

08011a96 <__math_check_uflow>:
 8011a96:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	d102      	bne.n	8011aa6 <__math_check_uflow+0x10>
 8011aa0:	2022      	movs	r0, #34	; 0x22
 8011aa2:	f7ff bfa5 	b.w	80119f0 <with_errno>
 8011aa6:	4770      	bx	lr

08011aa8 <__math_check_oflow>:
 8011aa8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011ac8 <__math_check_oflow+0x20>
 8011aac:	eeb0 7bc0 	vabs.f64	d7, d0
 8011ab0:	eeb4 7b46 	vcmp.f64	d7, d6
 8011ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab8:	dd02      	ble.n	8011ac0 <__math_check_oflow+0x18>
 8011aba:	2022      	movs	r0, #34	; 0x22
 8011abc:	f7ff bf98 	b.w	80119f0 <with_errno>
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop
 8011ac4:	f3af 8000 	nop.w
 8011ac8:	ffffffff 	.word	0xffffffff
 8011acc:	7fefffff 	.word	0x7fefffff

08011ad0 <cos>:
 8011ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8011ad6:	ee17 3a90 	vmov	r3, s15
 8011ada:	4a21      	ldr	r2, [pc, #132]	; (8011b60 <cos+0x90>)
 8011adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	dc06      	bgt.n	8011af2 <cos+0x22>
 8011ae4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011b58 <cos+0x88>
 8011ae8:	b005      	add	sp, #20
 8011aea:	f85d eb04 	ldr.w	lr, [sp], #4
 8011aee:	f000 ba6f 	b.w	8011fd0 <__kernel_cos>
 8011af2:	4a1c      	ldr	r2, [pc, #112]	; (8011b64 <cos+0x94>)
 8011af4:	4293      	cmp	r3, r2
 8011af6:	dd04      	ble.n	8011b02 <cos+0x32>
 8011af8:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011afc:	b005      	add	sp, #20
 8011afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b02:	4668      	mov	r0, sp
 8011b04:	f000 f920 	bl	8011d48 <__ieee754_rem_pio2>
 8011b08:	f000 0003 	and.w	r0, r0, #3
 8011b0c:	2801      	cmp	r0, #1
 8011b0e:	d009      	beq.n	8011b24 <cos+0x54>
 8011b10:	2802      	cmp	r0, #2
 8011b12:	d010      	beq.n	8011b36 <cos+0x66>
 8011b14:	b9b0      	cbnz	r0, 8011b44 <cos+0x74>
 8011b16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b1a:	ed9d 0b00 	vldr	d0, [sp]
 8011b1e:	f000 fa57 	bl	8011fd0 <__kernel_cos>
 8011b22:	e7eb      	b.n	8011afc <cos+0x2c>
 8011b24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b28:	ed9d 0b00 	vldr	d0, [sp]
 8011b2c:	f000 fd54 	bl	80125d8 <__kernel_sin>
 8011b30:	eeb1 0b40 	vneg.f64	d0, d0
 8011b34:	e7e2      	b.n	8011afc <cos+0x2c>
 8011b36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b3a:	ed9d 0b00 	vldr	d0, [sp]
 8011b3e:	f000 fa47 	bl	8011fd0 <__kernel_cos>
 8011b42:	e7f5      	b.n	8011b30 <cos+0x60>
 8011b44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b48:	ed9d 0b00 	vldr	d0, [sp]
 8011b4c:	2001      	movs	r0, #1
 8011b4e:	f000 fd43 	bl	80125d8 <__kernel_sin>
 8011b52:	e7d3      	b.n	8011afc <cos+0x2c>
 8011b54:	f3af 8000 	nop.w
	...
 8011b60:	3fe921fb 	.word	0x3fe921fb
 8011b64:	7fefffff 	.word	0x7fefffff

08011b68 <sin>:
 8011b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8011b6e:	ee17 3a90 	vmov	r3, s15
 8011b72:	4a21      	ldr	r2, [pc, #132]	; (8011bf8 <sin+0x90>)
 8011b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b78:	4293      	cmp	r3, r2
 8011b7a:	dc07      	bgt.n	8011b8c <sin+0x24>
 8011b7c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011bf0 <sin+0x88>
 8011b80:	2000      	movs	r0, #0
 8011b82:	b005      	add	sp, #20
 8011b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b88:	f000 bd26 	b.w	80125d8 <__kernel_sin>
 8011b8c:	4a1b      	ldr	r2, [pc, #108]	; (8011bfc <sin+0x94>)
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	dd04      	ble.n	8011b9c <sin+0x34>
 8011b92:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011b96:	b005      	add	sp, #20
 8011b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b9c:	4668      	mov	r0, sp
 8011b9e:	f000 f8d3 	bl	8011d48 <__ieee754_rem_pio2>
 8011ba2:	f000 0003 	and.w	r0, r0, #3
 8011ba6:	2801      	cmp	r0, #1
 8011ba8:	d00a      	beq.n	8011bc0 <sin+0x58>
 8011baa:	2802      	cmp	r0, #2
 8011bac:	d00f      	beq.n	8011bce <sin+0x66>
 8011bae:	b9c0      	cbnz	r0, 8011be2 <sin+0x7a>
 8011bb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bb4:	ed9d 0b00 	vldr	d0, [sp]
 8011bb8:	2001      	movs	r0, #1
 8011bba:	f000 fd0d 	bl	80125d8 <__kernel_sin>
 8011bbe:	e7ea      	b.n	8011b96 <sin+0x2e>
 8011bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bc4:	ed9d 0b00 	vldr	d0, [sp]
 8011bc8:	f000 fa02 	bl	8011fd0 <__kernel_cos>
 8011bcc:	e7e3      	b.n	8011b96 <sin+0x2e>
 8011bce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bd2:	ed9d 0b00 	vldr	d0, [sp]
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	f000 fcfe 	bl	80125d8 <__kernel_sin>
 8011bdc:	eeb1 0b40 	vneg.f64	d0, d0
 8011be0:	e7d9      	b.n	8011b96 <sin+0x2e>
 8011be2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011be6:	ed9d 0b00 	vldr	d0, [sp]
 8011bea:	f000 f9f1 	bl	8011fd0 <__kernel_cos>
 8011bee:	e7f5      	b.n	8011bdc <sin+0x74>
	...
 8011bf8:	3fe921fb 	.word	0x3fe921fb
 8011bfc:	7fefffff 	.word	0x7fefffff

08011c00 <log10>:
 8011c00:	b508      	push	{r3, lr}
 8011c02:	ed2d 8b02 	vpush	{d8}
 8011c06:	eeb0 8b40 	vmov.f64	d8, d0
 8011c0a:	f000 f82d 	bl	8011c68 <__ieee754_log10>
 8011c0e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c16:	d60f      	bvs.n	8011c38 <log10+0x38>
 8011c18:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8011c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c20:	d80a      	bhi.n	8011c38 <log10+0x38>
 8011c22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2a:	d108      	bne.n	8011c3e <log10+0x3e>
 8011c2c:	f7fc fe84 	bl	800e938 <__errno>
 8011c30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011c58 <log10+0x58>
 8011c34:	2322      	movs	r3, #34	; 0x22
 8011c36:	6003      	str	r3, [r0, #0]
 8011c38:	ecbd 8b02 	vpop	{d8}
 8011c3c:	bd08      	pop	{r3, pc}
 8011c3e:	f7fc fe7b 	bl	800e938 <__errno>
 8011c42:	ecbd 8b02 	vpop	{d8}
 8011c46:	2321      	movs	r3, #33	; 0x21
 8011c48:	6003      	str	r3, [r0, #0]
 8011c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011c4e:	4804      	ldr	r0, [pc, #16]	; (8011c60 <log10+0x60>)
 8011c50:	f000 bd9a 	b.w	8012788 <nan>
 8011c54:	f3af 8000 	nop.w
 8011c58:	00000000 	.word	0x00000000
 8011c5c:	fff00000 	.word	0xfff00000
 8011c60:	0801bc20 	.word	0x0801bc20
 8011c64:	00000000 	.word	0x00000000

08011c68 <__ieee754_log10>:
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	ee10 3a90 	vmov	r3, s1
 8011c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c72:	ed2d 8b02 	vpush	{d8}
 8011c76:	da21      	bge.n	8011cbc <__ieee754_log10+0x54>
 8011c78:	ee10 1a10 	vmov	r1, s0
 8011c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011c80:	430a      	orrs	r2, r1
 8011c82:	d108      	bne.n	8011c96 <__ieee754_log10+0x2e>
 8011c84:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8011d10 <__ieee754_log10+0xa8>
 8011c88:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8011d18 <__ieee754_log10+0xb0>
 8011c8c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8011c90:	ecbd 8b02 	vpop	{d8}
 8011c94:	bd10      	pop	{r4, pc}
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	da02      	bge.n	8011ca0 <__ieee754_log10+0x38>
 8011c9a:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011c9e:	e7f3      	b.n	8011c88 <__ieee754_log10+0x20>
 8011ca0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011d20 <__ieee754_log10+0xb8>
 8011ca4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011ca8:	ee10 3a90 	vmov	r3, s1
 8011cac:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011cb0:	4923      	ldr	r1, [pc, #140]	; (8011d40 <__ieee754_log10+0xd8>)
 8011cb2:	428b      	cmp	r3, r1
 8011cb4:	dd04      	ble.n	8011cc0 <__ieee754_log10+0x58>
 8011cb6:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011cba:	e7e9      	b.n	8011c90 <__ieee754_log10+0x28>
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	e7f7      	b.n	8011cb0 <__ieee754_log10+0x48>
 8011cc0:	1518      	asrs	r0, r3, #20
 8011cc2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011cc6:	4410      	add	r0, r2
 8011cc8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8011ccc:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8011cd0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8011cd4:	ee08 3a10 	vmov	s16, r3
 8011cd8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8011cdc:	ec53 2b10 	vmov	r2, r3, d0
 8011ce0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8011ce4:	ec43 2b10 	vmov	d0, r2, r3
 8011ce8:	f7ff fd8a 	bl	8011800 <log>
 8011cec:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011d28 <__ieee754_log10+0xc0>
 8011cf0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011cf4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011d30 <__ieee754_log10+0xc8>
 8011cf8:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8011cfc:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011d00:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011d38 <__ieee754_log10+0xd0>
 8011d04:	eea8 0b07 	vfma.f64	d0, d8, d7
 8011d08:	e7c2      	b.n	8011c90 <__ieee754_log10+0x28>
 8011d0a:	bf00      	nop
 8011d0c:	f3af 8000 	nop.w
 8011d10:	00000000 	.word	0x00000000
 8011d14:	c3500000 	.word	0xc3500000
	...
 8011d24:	43500000 	.word	0x43500000
 8011d28:	1526e50e 	.word	0x1526e50e
 8011d2c:	3fdbcb7b 	.word	0x3fdbcb7b
 8011d30:	11f12b36 	.word	0x11f12b36
 8011d34:	3d59fef3 	.word	0x3d59fef3
 8011d38:	509f6000 	.word	0x509f6000
 8011d3c:	3fd34413 	.word	0x3fd34413
 8011d40:	7fefffff 	.word	0x7fefffff
 8011d44:	00000000 	.word	0x00000000

08011d48 <__ieee754_rem_pio2>:
 8011d48:	b570      	push	{r4, r5, r6, lr}
 8011d4a:	eeb0 7b40 	vmov.f64	d7, d0
 8011d4e:	ee17 5a90 	vmov	r5, s15
 8011d52:	4b99      	ldr	r3, [pc, #612]	; (8011fb8 <__ieee754_rem_pio2+0x270>)
 8011d54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011d58:	429e      	cmp	r6, r3
 8011d5a:	b088      	sub	sp, #32
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	dc07      	bgt.n	8011d70 <__ieee754_rem_pio2+0x28>
 8011d60:	2200      	movs	r2, #0
 8011d62:	2300      	movs	r3, #0
 8011d64:	ed84 0b00 	vstr	d0, [r4]
 8011d68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011d6c:	2000      	movs	r0, #0
 8011d6e:	e01b      	b.n	8011da8 <__ieee754_rem_pio2+0x60>
 8011d70:	4b92      	ldr	r3, [pc, #584]	; (8011fbc <__ieee754_rem_pio2+0x274>)
 8011d72:	429e      	cmp	r6, r3
 8011d74:	dc3b      	bgt.n	8011dee <__ieee754_rem_pio2+0xa6>
 8011d76:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011d7a:	2d00      	cmp	r5, #0
 8011d7c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8011f78 <__ieee754_rem_pio2+0x230>
 8011d80:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011d84:	dd19      	ble.n	8011dba <__ieee754_rem_pio2+0x72>
 8011d86:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011d8a:	429e      	cmp	r6, r3
 8011d8c:	d00e      	beq.n	8011dac <__ieee754_rem_pio2+0x64>
 8011d8e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011f80 <__ieee754_rem_pio2+0x238>
 8011d92:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011d96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011d9a:	ed84 5b00 	vstr	d5, [r4]
 8011d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011da2:	ed84 7b02 	vstr	d7, [r4, #8]
 8011da6:	2001      	movs	r0, #1
 8011da8:	b008      	add	sp, #32
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011f88 <__ieee754_rem_pio2+0x240>
 8011db0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011db4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011f90 <__ieee754_rem_pio2+0x248>
 8011db8:	e7eb      	b.n	8011d92 <__ieee754_rem_pio2+0x4a>
 8011dba:	429e      	cmp	r6, r3
 8011dbc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011dc0:	d00e      	beq.n	8011de0 <__ieee754_rem_pio2+0x98>
 8011dc2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8011f80 <__ieee754_rem_pio2+0x238>
 8011dc6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011dca:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011dce:	ed84 5b00 	vstr	d5, [r4]
 8011dd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8011dda:	ed84 7b02 	vstr	d7, [r4, #8]
 8011dde:	e7e3      	b.n	8011da8 <__ieee754_rem_pio2+0x60>
 8011de0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011f88 <__ieee754_rem_pio2+0x240>
 8011de4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011de8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011f90 <__ieee754_rem_pio2+0x248>
 8011dec:	e7eb      	b.n	8011dc6 <__ieee754_rem_pio2+0x7e>
 8011dee:	4b74      	ldr	r3, [pc, #464]	; (8011fc0 <__ieee754_rem_pio2+0x278>)
 8011df0:	429e      	cmp	r6, r3
 8011df2:	dc70      	bgt.n	8011ed6 <__ieee754_rem_pio2+0x18e>
 8011df4:	f000 fc48 	bl	8012688 <fabs>
 8011df8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011dfc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011f98 <__ieee754_rem_pio2+0x250>
 8011e00:	eea0 7b06 	vfma.f64	d7, d0, d6
 8011e04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011e08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011e0c:	ee17 0a90 	vmov	r0, s15
 8011e10:	eeb1 4b45 	vneg.f64	d4, d5
 8011e14:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011f78 <__ieee754_rem_pio2+0x230>
 8011e18:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011e1c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8011f80 <__ieee754_rem_pio2+0x238>
 8011e20:	281f      	cmp	r0, #31
 8011e22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011e26:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011e2a:	dc08      	bgt.n	8011e3e <__ieee754_rem_pio2+0xf6>
 8011e2c:	4b65      	ldr	r3, [pc, #404]	; (8011fc4 <__ieee754_rem_pio2+0x27c>)
 8011e2e:	1e42      	subs	r2, r0, #1
 8011e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e34:	42b3      	cmp	r3, r6
 8011e36:	d002      	beq.n	8011e3e <__ieee754_rem_pio2+0xf6>
 8011e38:	ed84 6b00 	vstr	d6, [r4]
 8011e3c:	e026      	b.n	8011e8c <__ieee754_rem_pio2+0x144>
 8011e3e:	ee16 3a90 	vmov	r3, s13
 8011e42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011e46:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011e4a:	2b10      	cmp	r3, #16
 8011e4c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011e50:	ddf2      	ble.n	8011e38 <__ieee754_rem_pio2+0xf0>
 8011e52:	eeb0 6b40 	vmov.f64	d6, d0
 8011e56:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011f88 <__ieee754_rem_pio2+0x240>
 8011e5a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011f90 <__ieee754_rem_pio2+0x248>
 8011e5e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8011e62:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011e66:	eea4 0b07 	vfma.f64	d0, d4, d7
 8011e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8011e6e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011e72:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011e76:	ee13 3a90 	vmov	r3, s7
 8011e7a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011e7e:	1ad3      	subs	r3, r2, r3
 8011e80:	2b31      	cmp	r3, #49	; 0x31
 8011e82:	dc17      	bgt.n	8011eb4 <__ieee754_rem_pio2+0x16c>
 8011e84:	eeb0 0b46 	vmov.f64	d0, d6
 8011e88:	ed84 3b00 	vstr	d3, [r4]
 8011e8c:	ed94 6b00 	vldr	d6, [r4]
 8011e90:	2d00      	cmp	r5, #0
 8011e92:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011e96:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011e9a:	ed84 0b02 	vstr	d0, [r4, #8]
 8011e9e:	da83      	bge.n	8011da8 <__ieee754_rem_pio2+0x60>
 8011ea0:	eeb1 6b46 	vneg.f64	d6, d6
 8011ea4:	eeb1 0b40 	vneg.f64	d0, d0
 8011ea8:	ed84 6b00 	vstr	d6, [r4]
 8011eac:	ed84 0b02 	vstr	d0, [r4, #8]
 8011eb0:	4240      	negs	r0, r0
 8011eb2:	e779      	b.n	8011da8 <__ieee754_rem_pio2+0x60>
 8011eb4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011fa0 <__ieee754_rem_pio2+0x258>
 8011eb8:	eeb0 0b46 	vmov.f64	d0, d6
 8011ebc:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011ec0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011ec4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011fa8 <__ieee754_rem_pio2+0x260>
 8011ec8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011ecc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011ed0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011ed4:	e7b0      	b.n	8011e38 <__ieee754_rem_pio2+0xf0>
 8011ed6:	4b3c      	ldr	r3, [pc, #240]	; (8011fc8 <__ieee754_rem_pio2+0x280>)
 8011ed8:	429e      	cmp	r6, r3
 8011eda:	dd06      	ble.n	8011eea <__ieee754_rem_pio2+0x1a2>
 8011edc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011ee0:	ed80 7b02 	vstr	d7, [r0, #8]
 8011ee4:	ed80 7b00 	vstr	d7, [r0]
 8011ee8:	e740      	b.n	8011d6c <__ieee754_rem_pio2+0x24>
 8011eea:	1532      	asrs	r2, r6, #20
 8011eec:	ee10 0a10 	vmov	r0, s0
 8011ef0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011ef4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011ef8:	ec41 0b17 	vmov	d7, r0, r1
 8011efc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011f00:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011fb0 <__ieee754_rem_pio2+0x268>
 8011f04:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011f08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011f10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011f14:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011f18:	a902      	add	r1, sp, #8
 8011f1a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011f1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f22:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011f26:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011f2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f2e:	2603      	movs	r6, #3
 8011f30:	4608      	mov	r0, r1
 8011f32:	ed91 7b04 	vldr	d7, [r1, #16]
 8011f36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f3e:	4633      	mov	r3, r6
 8011f40:	f1a1 0108 	sub.w	r1, r1, #8
 8011f44:	f106 36ff 	add.w	r6, r6, #4294967295
 8011f48:	d0f3      	beq.n	8011f32 <__ieee754_rem_pio2+0x1ea>
 8011f4a:	4920      	ldr	r1, [pc, #128]	; (8011fcc <__ieee754_rem_pio2+0x284>)
 8011f4c:	9101      	str	r1, [sp, #4]
 8011f4e:	2102      	movs	r1, #2
 8011f50:	9100      	str	r1, [sp, #0]
 8011f52:	4621      	mov	r1, r4
 8011f54:	f000 f8a8 	bl	80120a8 <__kernel_rem_pio2>
 8011f58:	2d00      	cmp	r5, #0
 8011f5a:	f6bf af25 	bge.w	8011da8 <__ieee754_rem_pio2+0x60>
 8011f5e:	ed94 7b00 	vldr	d7, [r4]
 8011f62:	eeb1 7b47 	vneg.f64	d7, d7
 8011f66:	ed84 7b00 	vstr	d7, [r4]
 8011f6a:	ed94 7b02 	vldr	d7, [r4, #8]
 8011f6e:	eeb1 7b47 	vneg.f64	d7, d7
 8011f72:	ed84 7b02 	vstr	d7, [r4, #8]
 8011f76:	e79b      	b.n	8011eb0 <__ieee754_rem_pio2+0x168>
 8011f78:	54400000 	.word	0x54400000
 8011f7c:	3ff921fb 	.word	0x3ff921fb
 8011f80:	1a626331 	.word	0x1a626331
 8011f84:	3dd0b461 	.word	0x3dd0b461
 8011f88:	1a600000 	.word	0x1a600000
 8011f8c:	3dd0b461 	.word	0x3dd0b461
 8011f90:	2e037073 	.word	0x2e037073
 8011f94:	3ba3198a 	.word	0x3ba3198a
 8011f98:	6dc9c883 	.word	0x6dc9c883
 8011f9c:	3fe45f30 	.word	0x3fe45f30
 8011fa0:	2e000000 	.word	0x2e000000
 8011fa4:	3ba3198a 	.word	0x3ba3198a
 8011fa8:	252049c1 	.word	0x252049c1
 8011fac:	397b839a 	.word	0x397b839a
 8011fb0:	00000000 	.word	0x00000000
 8011fb4:	41700000 	.word	0x41700000
 8011fb8:	3fe921fb 	.word	0x3fe921fb
 8011fbc:	4002d97b 	.word	0x4002d97b
 8011fc0:	413921fb 	.word	0x413921fb
 8011fc4:	0801ce90 	.word	0x0801ce90
 8011fc8:	7fefffff 	.word	0x7fefffff
 8011fcc:	0801cf10 	.word	0x0801cf10

08011fd0 <__kernel_cos>:
 8011fd0:	ee10 1a90 	vmov	r1, s1
 8011fd4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011fd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011fdc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011fe0:	da05      	bge.n	8011fee <__kernel_cos+0x1e>
 8011fe2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011fe6:	ee17 3a90 	vmov	r3, s15
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d03d      	beq.n	801206a <__kernel_cos+0x9a>
 8011fee:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011ff2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012070 <__kernel_cos+0xa0>
 8011ff6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012078 <__kernel_cos+0xa8>
 8011ffa:	eea3 6b07 	vfma.f64	d6, d3, d7
 8011ffe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012080 <__kernel_cos+0xb0>
 8012002:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012006:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012088 <__kernel_cos+0xb8>
 801200a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801200e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012090 <__kernel_cos+0xc0>
 8012012:	4b23      	ldr	r3, [pc, #140]	; (80120a0 <__kernel_cos+0xd0>)
 8012014:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012018:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8012098 <__kernel_cos+0xc8>
 801201c:	4299      	cmp	r1, r3
 801201e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012022:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012026:	ee26 5b03 	vmul.f64	d5, d6, d3
 801202a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801202e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8012032:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012036:	dc04      	bgt.n	8012042 <__kernel_cos+0x72>
 8012038:	ee37 6b46 	vsub.f64	d6, d7, d6
 801203c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8012040:	4770      	bx	lr
 8012042:	4b18      	ldr	r3, [pc, #96]	; (80120a4 <__kernel_cos+0xd4>)
 8012044:	4299      	cmp	r1, r3
 8012046:	dc0d      	bgt.n	8012064 <__kernel_cos+0x94>
 8012048:	2200      	movs	r2, #0
 801204a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801204e:	ec43 2b15 	vmov	d5, r2, r3
 8012052:	ee34 0b45 	vsub.f64	d0, d4, d5
 8012056:	ee37 7b45 	vsub.f64	d7, d7, d5
 801205a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801205e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012062:	4770      	bx	lr
 8012064:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012068:	e7f3      	b.n	8012052 <__kernel_cos+0x82>
 801206a:	eeb0 0b44 	vmov.f64	d0, d4
 801206e:	4770      	bx	lr
 8012070:	be8838d4 	.word	0xbe8838d4
 8012074:	bda8fae9 	.word	0xbda8fae9
 8012078:	bdb4b1c4 	.word	0xbdb4b1c4
 801207c:	3e21ee9e 	.word	0x3e21ee9e
 8012080:	809c52ad 	.word	0x809c52ad
 8012084:	be927e4f 	.word	0xbe927e4f
 8012088:	19cb1590 	.word	0x19cb1590
 801208c:	3efa01a0 	.word	0x3efa01a0
 8012090:	16c15177 	.word	0x16c15177
 8012094:	bf56c16c 	.word	0xbf56c16c
 8012098:	5555554c 	.word	0x5555554c
 801209c:	3fa55555 	.word	0x3fa55555
 80120a0:	3fd33332 	.word	0x3fd33332
 80120a4:	3fe90000 	.word	0x3fe90000

080120a8 <__kernel_rem_pio2>:
 80120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	ed2d 8b06 	vpush	{d8-d10}
 80120b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80120b4:	460f      	mov	r7, r1
 80120b6:	9002      	str	r0, [sp, #8]
 80120b8:	49c5      	ldr	r1, [pc, #788]	; (80123d0 <__kernel_rem_pio2+0x328>)
 80120ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80120bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80120c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80120c4:	9301      	str	r3, [sp, #4]
 80120c6:	f112 0f14 	cmn.w	r2, #20
 80120ca:	bfa8      	it	ge
 80120cc:	2018      	movge	r0, #24
 80120ce:	f103 31ff 	add.w	r1, r3, #4294967295
 80120d2:	bfb8      	it	lt
 80120d4:	2000      	movlt	r0, #0
 80120d6:	f06f 0417 	mvn.w	r4, #23
 80120da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80123b8 <__kernel_rem_pio2+0x310>
 80120de:	bfa4      	itt	ge
 80120e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80120e4:	fb9a f0f0 	sdivge	r0, sl, r0
 80120e8:	fb00 4404 	mla	r4, r0, r4, r4
 80120ec:	1a46      	subs	r6, r0, r1
 80120ee:	4414      	add	r4, r2
 80120f0:	eb09 0c01 	add.w	ip, r9, r1
 80120f4:	ad1a      	add	r5, sp, #104	; 0x68
 80120f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80120fa:	2200      	movs	r2, #0
 80120fc:	4562      	cmp	r2, ip
 80120fe:	dd10      	ble.n	8012122 <__kernel_rem_pio2+0x7a>
 8012100:	9a01      	ldr	r2, [sp, #4]
 8012102:	ab1a      	add	r3, sp, #104	; 0x68
 8012104:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012108:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801210c:	f04f 0c00 	mov.w	ip, #0
 8012110:	45cc      	cmp	ip, r9
 8012112:	dc26      	bgt.n	8012162 <__kernel_rem_pio2+0xba>
 8012114:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80123b8 <__kernel_rem_pio2+0x310>
 8012118:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801211c:	4616      	mov	r6, r2
 801211e:	2500      	movs	r5, #0
 8012120:	e015      	b.n	801214e <__kernel_rem_pio2+0xa6>
 8012122:	42d6      	cmn	r6, r2
 8012124:	d409      	bmi.n	801213a <__kernel_rem_pio2+0x92>
 8012126:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801212a:	ee07 3a90 	vmov	s15, r3
 801212e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012132:	eca5 7b02 	vstmia	r5!, {d7}
 8012136:	3201      	adds	r2, #1
 8012138:	e7e0      	b.n	80120fc <__kernel_rem_pio2+0x54>
 801213a:	eeb0 7b46 	vmov.f64	d7, d6
 801213e:	e7f8      	b.n	8012132 <__kernel_rem_pio2+0x8a>
 8012140:	ecb8 5b02 	vldmia	r8!, {d5}
 8012144:	ed96 6b00 	vldr	d6, [r6]
 8012148:	3501      	adds	r5, #1
 801214a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801214e:	428d      	cmp	r5, r1
 8012150:	f1a6 0608 	sub.w	r6, r6, #8
 8012154:	ddf4      	ble.n	8012140 <__kernel_rem_pio2+0x98>
 8012156:	ecaa 7b02 	vstmia	sl!, {d7}
 801215a:	f10c 0c01 	add.w	ip, ip, #1
 801215e:	3208      	adds	r2, #8
 8012160:	e7d6      	b.n	8012110 <__kernel_rem_pio2+0x68>
 8012162:	ab06      	add	r3, sp, #24
 8012164:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80123c0 <__kernel_rem_pio2+0x318>
 8012168:	ed9f ab97 	vldr	d10, [pc, #604]	; 80123c8 <__kernel_rem_pio2+0x320>
 801216c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012170:	9303      	str	r3, [sp, #12]
 8012172:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8012176:	464d      	mov	r5, r9
 8012178:	00eb      	lsls	r3, r5, #3
 801217a:	9304      	str	r3, [sp, #16]
 801217c:	ab92      	add	r3, sp, #584	; 0x248
 801217e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012182:	f10d 0b18 	add.w	fp, sp, #24
 8012186:	ab6a      	add	r3, sp, #424	; 0x1a8
 8012188:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801218c:	465e      	mov	r6, fp
 801218e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012192:	4628      	mov	r0, r5
 8012194:	2800      	cmp	r0, #0
 8012196:	f1a2 0208 	sub.w	r2, r2, #8
 801219a:	dc4c      	bgt.n	8012236 <__kernel_rem_pio2+0x18e>
 801219c:	4620      	mov	r0, r4
 801219e:	9105      	str	r1, [sp, #20]
 80121a0:	f000 fafa 	bl	8012798 <scalbn>
 80121a4:	eeb0 8b40 	vmov.f64	d8, d0
 80121a8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80121ac:	ee28 0b00 	vmul.f64	d0, d8, d0
 80121b0:	f000 fa76 	bl	80126a0 <floor>
 80121b4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80121b8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80121bc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80121c0:	2c00      	cmp	r4, #0
 80121c2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80121c6:	ee17 8a90 	vmov	r8, s15
 80121ca:	ee38 8b40 	vsub.f64	d8, d8, d0
 80121ce:	9905      	ldr	r1, [sp, #20]
 80121d0:	dd43      	ble.n	801225a <__kernel_rem_pio2+0x1b2>
 80121d2:	1e68      	subs	r0, r5, #1
 80121d4:	ab06      	add	r3, sp, #24
 80121d6:	f1c4 0c18 	rsb	ip, r4, #24
 80121da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80121de:	fa46 f20c 	asr.w	r2, r6, ip
 80121e2:	4490      	add	r8, r2
 80121e4:	fa02 f20c 	lsl.w	r2, r2, ip
 80121e8:	1ab6      	subs	r6, r6, r2
 80121ea:	f1c4 0217 	rsb	r2, r4, #23
 80121ee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80121f2:	4116      	asrs	r6, r2
 80121f4:	2e00      	cmp	r6, #0
 80121f6:	dd3f      	ble.n	8012278 <__kernel_rem_pio2+0x1d0>
 80121f8:	f04f 0c00 	mov.w	ip, #0
 80121fc:	f108 0801 	add.w	r8, r8, #1
 8012200:	4660      	mov	r0, ip
 8012202:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8012206:	4565      	cmp	r5, ip
 8012208:	dc6e      	bgt.n	80122e8 <__kernel_rem_pio2+0x240>
 801220a:	2c00      	cmp	r4, #0
 801220c:	dd04      	ble.n	8012218 <__kernel_rem_pio2+0x170>
 801220e:	2c01      	cmp	r4, #1
 8012210:	d07f      	beq.n	8012312 <__kernel_rem_pio2+0x26a>
 8012212:	2c02      	cmp	r4, #2
 8012214:	f000 8087 	beq.w	8012326 <__kernel_rem_pio2+0x27e>
 8012218:	2e02      	cmp	r6, #2
 801221a:	d12d      	bne.n	8012278 <__kernel_rem_pio2+0x1d0>
 801221c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012220:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012224:	b340      	cbz	r0, 8012278 <__kernel_rem_pio2+0x1d0>
 8012226:	4620      	mov	r0, r4
 8012228:	9105      	str	r1, [sp, #20]
 801222a:	f000 fab5 	bl	8012798 <scalbn>
 801222e:	9905      	ldr	r1, [sp, #20]
 8012230:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012234:	e020      	b.n	8012278 <__kernel_rem_pio2+0x1d0>
 8012236:	ee20 7b09 	vmul.f64	d7, d0, d9
 801223a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801223e:	3801      	subs	r0, #1
 8012240:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012244:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012248:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801224c:	eca6 0a01 	vstmia	r6!, {s0}
 8012250:	ed92 0b00 	vldr	d0, [r2]
 8012254:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012258:	e79c      	b.n	8012194 <__kernel_rem_pio2+0xec>
 801225a:	d105      	bne.n	8012268 <__kernel_rem_pio2+0x1c0>
 801225c:	1e6a      	subs	r2, r5, #1
 801225e:	ab06      	add	r3, sp, #24
 8012260:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012264:	15f6      	asrs	r6, r6, #23
 8012266:	e7c5      	b.n	80121f4 <__kernel_rem_pio2+0x14c>
 8012268:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801226c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	da36      	bge.n	80122e4 <__kernel_rem_pio2+0x23c>
 8012276:	2600      	movs	r6, #0
 8012278:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012280:	f040 80aa 	bne.w	80123d8 <__kernel_rem_pio2+0x330>
 8012284:	f105 3bff 	add.w	fp, r5, #4294967295
 8012288:	4658      	mov	r0, fp
 801228a:	2200      	movs	r2, #0
 801228c:	4548      	cmp	r0, r9
 801228e:	da52      	bge.n	8012336 <__kernel_rem_pio2+0x28e>
 8012290:	2a00      	cmp	r2, #0
 8012292:	f000 8081 	beq.w	8012398 <__kernel_rem_pio2+0x2f0>
 8012296:	ab06      	add	r3, sp, #24
 8012298:	3c18      	subs	r4, #24
 801229a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f000 8087 	beq.w	80123b2 <__kernel_rem_pio2+0x30a>
 80122a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80122a8:	4620      	mov	r0, r4
 80122aa:	f000 fa75 	bl	8012798 <scalbn>
 80122ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80122b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80123c0 <__kernel_rem_pio2+0x318>
 80122b6:	a96a      	add	r1, sp, #424	; 0x1a8
 80122b8:	f103 0208 	add.w	r2, r3, #8
 80122bc:	1888      	adds	r0, r1, r2
 80122be:	4659      	mov	r1, fp
 80122c0:	2900      	cmp	r1, #0
 80122c2:	f280 80b7 	bge.w	8012434 <__kernel_rem_pio2+0x38c>
 80122c6:	4659      	mov	r1, fp
 80122c8:	2900      	cmp	r1, #0
 80122ca:	f2c0 80d5 	blt.w	8012478 <__kernel_rem_pio2+0x3d0>
 80122ce:	a86a      	add	r0, sp, #424	; 0x1a8
 80122d0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80122d4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80123b8 <__kernel_rem_pio2+0x310>
 80122d8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80123d4 <__kernel_rem_pio2+0x32c>
 80122dc:	2400      	movs	r4, #0
 80122de:	ebab 0001 	sub.w	r0, fp, r1
 80122e2:	e0be      	b.n	8012462 <__kernel_rem_pio2+0x3ba>
 80122e4:	2602      	movs	r6, #2
 80122e6:	e787      	b.n	80121f8 <__kernel_rem_pio2+0x150>
 80122e8:	f8db 2000 	ldr.w	r2, [fp]
 80122ec:	b958      	cbnz	r0, 8012306 <__kernel_rem_pio2+0x25e>
 80122ee:	b122      	cbz	r2, 80122fa <__kernel_rem_pio2+0x252>
 80122f0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80122f4:	f8cb 2000 	str.w	r2, [fp]
 80122f8:	2201      	movs	r2, #1
 80122fa:	f10c 0c01 	add.w	ip, ip, #1
 80122fe:	f10b 0b04 	add.w	fp, fp, #4
 8012302:	4610      	mov	r0, r2
 8012304:	e77f      	b.n	8012206 <__kernel_rem_pio2+0x15e>
 8012306:	ebae 0202 	sub.w	r2, lr, r2
 801230a:	f8cb 2000 	str.w	r2, [fp]
 801230e:	4602      	mov	r2, r0
 8012310:	e7f3      	b.n	80122fa <__kernel_rem_pio2+0x252>
 8012312:	f105 3cff 	add.w	ip, r5, #4294967295
 8012316:	ab06      	add	r3, sp, #24
 8012318:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801231c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012320:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8012324:	e778      	b.n	8012218 <__kernel_rem_pio2+0x170>
 8012326:	f105 3cff 	add.w	ip, r5, #4294967295
 801232a:	ab06      	add	r3, sp, #24
 801232c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012330:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8012334:	e7f4      	b.n	8012320 <__kernel_rem_pio2+0x278>
 8012336:	ab06      	add	r3, sp, #24
 8012338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801233c:	3801      	subs	r0, #1
 801233e:	431a      	orrs	r2, r3
 8012340:	e7a4      	b.n	801228c <__kernel_rem_pio2+0x1e4>
 8012342:	f10c 0c01 	add.w	ip, ip, #1
 8012346:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801234a:	2800      	cmp	r0, #0
 801234c:	d0f9      	beq.n	8012342 <__kernel_rem_pio2+0x29a>
 801234e:	9b04      	ldr	r3, [sp, #16]
 8012350:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012354:	eb0d 0203 	add.w	r2, sp, r3
 8012358:	9b01      	ldr	r3, [sp, #4]
 801235a:	18e8      	adds	r0, r5, r3
 801235c:	ab1a      	add	r3, sp, #104	; 0x68
 801235e:	1c6e      	adds	r6, r5, #1
 8012360:	3a98      	subs	r2, #152	; 0x98
 8012362:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012366:	4465      	add	r5, ip
 8012368:	42b5      	cmp	r5, r6
 801236a:	f6ff af05 	blt.w	8012178 <__kernel_rem_pio2+0xd0>
 801236e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8012372:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012376:	ee07 3a90 	vmov	s15, r3
 801237a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801237e:	f04f 0c00 	mov.w	ip, #0
 8012382:	eca0 7b02 	vstmia	r0!, {d7}
 8012386:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80123b8 <__kernel_rem_pio2+0x310>
 801238a:	4680      	mov	r8, r0
 801238c:	458c      	cmp	ip, r1
 801238e:	dd07      	ble.n	80123a0 <__kernel_rem_pio2+0x2f8>
 8012390:	eca2 7b02 	vstmia	r2!, {d7}
 8012394:	3601      	adds	r6, #1
 8012396:	e7e7      	b.n	8012368 <__kernel_rem_pio2+0x2c0>
 8012398:	9a03      	ldr	r2, [sp, #12]
 801239a:	f04f 0c01 	mov.w	ip, #1
 801239e:	e7d2      	b.n	8012346 <__kernel_rem_pio2+0x29e>
 80123a0:	ecbe 5b02 	vldmia	lr!, {d5}
 80123a4:	ed38 6b02 	vldmdb	r8!, {d6}
 80123a8:	f10c 0c01 	add.w	ip, ip, #1
 80123ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 80123b0:	e7ec      	b.n	801238c <__kernel_rem_pio2+0x2e4>
 80123b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80123b6:	e76e      	b.n	8012296 <__kernel_rem_pio2+0x1ee>
	...
 80123c4:	3e700000 	.word	0x3e700000
 80123c8:	00000000 	.word	0x00000000
 80123cc:	41700000 	.word	0x41700000
 80123d0:	0801d058 	.word	0x0801d058
 80123d4:	0801d018 	.word	0x0801d018
 80123d8:	4260      	negs	r0, r4
 80123da:	eeb0 0b48 	vmov.f64	d0, d8
 80123de:	f000 f9db 	bl	8012798 <scalbn>
 80123e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80125c0 <__kernel_rem_pio2+0x518>
 80123e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80123ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ee:	db18      	blt.n	8012422 <__kernel_rem_pio2+0x37a>
 80123f0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80125c8 <__kernel_rem_pio2+0x520>
 80123f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80123f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80123fc:	aa06      	add	r2, sp, #24
 80123fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012402:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012406:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801240a:	f105 0b01 	add.w	fp, r5, #1
 801240e:	ee10 3a10 	vmov	r3, s0
 8012412:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012416:	ee17 3a10 	vmov	r3, s14
 801241a:	3418      	adds	r4, #24
 801241c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012420:	e740      	b.n	80122a4 <__kernel_rem_pio2+0x1fc>
 8012422:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012426:	aa06      	add	r2, sp, #24
 8012428:	ee10 3a10 	vmov	r3, s0
 801242c:	46ab      	mov	fp, r5
 801242e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012432:	e737      	b.n	80122a4 <__kernel_rem_pio2+0x1fc>
 8012434:	ac06      	add	r4, sp, #24
 8012436:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801243a:	9401      	str	r4, [sp, #4]
 801243c:	ee07 4a90 	vmov	s15, r4
 8012440:	3901      	subs	r1, #1
 8012442:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012446:	ee27 7b00 	vmul.f64	d7, d7, d0
 801244a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801244e:	ed20 7b02 	vstmdb	r0!, {d7}
 8012452:	e735      	b.n	80122c0 <__kernel_rem_pio2+0x218>
 8012454:	ecbc 5b02 	vldmia	ip!, {d5}
 8012458:	ecb5 6b02 	vldmia	r5!, {d6}
 801245c:	3401      	adds	r4, #1
 801245e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012462:	454c      	cmp	r4, r9
 8012464:	dc01      	bgt.n	801246a <__kernel_rem_pio2+0x3c2>
 8012466:	4284      	cmp	r4, r0
 8012468:	ddf4      	ble.n	8012454 <__kernel_rem_pio2+0x3ac>
 801246a:	ac42      	add	r4, sp, #264	; 0x108
 801246c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012470:	ed80 7b00 	vstr	d7, [r0]
 8012474:	3901      	subs	r1, #1
 8012476:	e727      	b.n	80122c8 <__kernel_rem_pio2+0x220>
 8012478:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801247a:	2902      	cmp	r1, #2
 801247c:	dc0a      	bgt.n	8012494 <__kernel_rem_pio2+0x3ec>
 801247e:	2900      	cmp	r1, #0
 8012480:	dc2c      	bgt.n	80124dc <__kernel_rem_pio2+0x434>
 8012482:	d045      	beq.n	8012510 <__kernel_rem_pio2+0x468>
 8012484:	f008 0007 	and.w	r0, r8, #7
 8012488:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801248c:	ecbd 8b06 	vpop	{d8-d10}
 8012490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012494:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012496:	2a03      	cmp	r2, #3
 8012498:	d1f4      	bne.n	8012484 <__kernel_rem_pio2+0x3dc>
 801249a:	aa42      	add	r2, sp, #264	; 0x108
 801249c:	4413      	add	r3, r2
 801249e:	461a      	mov	r2, r3
 80124a0:	4619      	mov	r1, r3
 80124a2:	4658      	mov	r0, fp
 80124a4:	2800      	cmp	r0, #0
 80124a6:	f1a1 0108 	sub.w	r1, r1, #8
 80124aa:	dc54      	bgt.n	8012556 <__kernel_rem_pio2+0x4ae>
 80124ac:	4659      	mov	r1, fp
 80124ae:	2901      	cmp	r1, #1
 80124b0:	f1a2 0208 	sub.w	r2, r2, #8
 80124b4:	dc5f      	bgt.n	8012576 <__kernel_rem_pio2+0x4ce>
 80124b6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80125d0 <__kernel_rem_pio2+0x528>
 80124ba:	3308      	adds	r3, #8
 80124bc:	f1bb 0f01 	cmp.w	fp, #1
 80124c0:	dc69      	bgt.n	8012596 <__kernel_rem_pio2+0x4ee>
 80124c2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80124c6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80124ca:	2e00      	cmp	r6, #0
 80124cc:	d16a      	bne.n	80125a4 <__kernel_rem_pio2+0x4fc>
 80124ce:	ed87 5b00 	vstr	d5, [r7]
 80124d2:	ed87 6b02 	vstr	d6, [r7, #8]
 80124d6:	ed87 7b04 	vstr	d7, [r7, #16]
 80124da:	e7d3      	b.n	8012484 <__kernel_rem_pio2+0x3dc>
 80124dc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80125d0 <__kernel_rem_pio2+0x528>
 80124e0:	ab42      	add	r3, sp, #264	; 0x108
 80124e2:	441a      	add	r2, r3
 80124e4:	465b      	mov	r3, fp
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	da26      	bge.n	8012538 <__kernel_rem_pio2+0x490>
 80124ea:	b35e      	cbz	r6, 8012544 <__kernel_rem_pio2+0x49c>
 80124ec:	eeb1 7b46 	vneg.f64	d7, d6
 80124f0:	ed87 7b00 	vstr	d7, [r7]
 80124f4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80124f8:	aa44      	add	r2, sp, #272	; 0x110
 80124fa:	2301      	movs	r3, #1
 80124fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012500:	459b      	cmp	fp, r3
 8012502:	da22      	bge.n	801254a <__kernel_rem_pio2+0x4a2>
 8012504:	b10e      	cbz	r6, 801250a <__kernel_rem_pio2+0x462>
 8012506:	eeb1 7b47 	vneg.f64	d7, d7
 801250a:	ed87 7b02 	vstr	d7, [r7, #8]
 801250e:	e7b9      	b.n	8012484 <__kernel_rem_pio2+0x3dc>
 8012510:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80125d0 <__kernel_rem_pio2+0x528>
 8012514:	ab42      	add	r3, sp, #264	; 0x108
 8012516:	441a      	add	r2, r3
 8012518:	f1bb 0f00 	cmp.w	fp, #0
 801251c:	da05      	bge.n	801252a <__kernel_rem_pio2+0x482>
 801251e:	b10e      	cbz	r6, 8012524 <__kernel_rem_pio2+0x47c>
 8012520:	eeb1 7b47 	vneg.f64	d7, d7
 8012524:	ed87 7b00 	vstr	d7, [r7]
 8012528:	e7ac      	b.n	8012484 <__kernel_rem_pio2+0x3dc>
 801252a:	ed32 6b02 	vldmdb	r2!, {d6}
 801252e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012532:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012536:	e7ef      	b.n	8012518 <__kernel_rem_pio2+0x470>
 8012538:	ed32 7b02 	vldmdb	r2!, {d7}
 801253c:	3b01      	subs	r3, #1
 801253e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012542:	e7d0      	b.n	80124e6 <__kernel_rem_pio2+0x43e>
 8012544:	eeb0 7b46 	vmov.f64	d7, d6
 8012548:	e7d2      	b.n	80124f0 <__kernel_rem_pio2+0x448>
 801254a:	ecb2 6b02 	vldmia	r2!, {d6}
 801254e:	3301      	adds	r3, #1
 8012550:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012554:	e7d4      	b.n	8012500 <__kernel_rem_pio2+0x458>
 8012556:	ed91 7b00 	vldr	d7, [r1]
 801255a:	ed91 5b02 	vldr	d5, [r1, #8]
 801255e:	3801      	subs	r0, #1
 8012560:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012564:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012568:	ed81 6b00 	vstr	d6, [r1]
 801256c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012570:	ed81 7b02 	vstr	d7, [r1, #8]
 8012574:	e796      	b.n	80124a4 <__kernel_rem_pio2+0x3fc>
 8012576:	ed92 7b00 	vldr	d7, [r2]
 801257a:	ed92 5b02 	vldr	d5, [r2, #8]
 801257e:	3901      	subs	r1, #1
 8012580:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012584:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012588:	ed82 6b00 	vstr	d6, [r2]
 801258c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012590:	ed82 7b02 	vstr	d7, [r2, #8]
 8012594:	e78b      	b.n	80124ae <__kernel_rem_pio2+0x406>
 8012596:	ed33 6b02 	vldmdb	r3!, {d6}
 801259a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801259e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80125a2:	e78b      	b.n	80124bc <__kernel_rem_pio2+0x414>
 80125a4:	eeb1 5b45 	vneg.f64	d5, d5
 80125a8:	eeb1 6b46 	vneg.f64	d6, d6
 80125ac:	ed87 5b00 	vstr	d5, [r7]
 80125b0:	eeb1 7b47 	vneg.f64	d7, d7
 80125b4:	ed87 6b02 	vstr	d6, [r7, #8]
 80125b8:	e78d      	b.n	80124d6 <__kernel_rem_pio2+0x42e>
 80125ba:	bf00      	nop
 80125bc:	f3af 8000 	nop.w
 80125c0:	00000000 	.word	0x00000000
 80125c4:	41700000 	.word	0x41700000
 80125c8:	00000000 	.word	0x00000000
 80125cc:	3e700000 	.word	0x3e700000
	...

080125d8 <__kernel_sin>:
 80125d8:	ee10 3a90 	vmov	r3, s1
 80125dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80125e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80125e4:	da04      	bge.n	80125f0 <__kernel_sin+0x18>
 80125e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80125ea:	ee17 3a90 	vmov	r3, s15
 80125ee:	b35b      	cbz	r3, 8012648 <__kernel_sin+0x70>
 80125f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80125f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80125f8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012650 <__kernel_sin+0x78>
 80125fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012658 <__kernel_sin+0x80>
 8012600:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012604:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012660 <__kernel_sin+0x88>
 8012608:	eea4 7b06 	vfma.f64	d7, d4, d6
 801260c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012668 <__kernel_sin+0x90>
 8012610:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012614:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012670 <__kernel_sin+0x98>
 8012618:	eea4 7b06 	vfma.f64	d7, d4, d6
 801261c:	b930      	cbnz	r0, 801262c <__kernel_sin+0x54>
 801261e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012678 <__kernel_sin+0xa0>
 8012622:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012626:	eea4 0b05 	vfma.f64	d0, d4, d5
 801262a:	4770      	bx	lr
 801262c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012630:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012634:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012638:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801263c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012680 <__kernel_sin+0xa8>
 8012640:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012644:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	f3af 8000 	nop.w
 8012650:	5acfd57c 	.word	0x5acfd57c
 8012654:	3de5d93a 	.word	0x3de5d93a
 8012658:	8a2b9ceb 	.word	0x8a2b9ceb
 801265c:	be5ae5e6 	.word	0xbe5ae5e6
 8012660:	57b1fe7d 	.word	0x57b1fe7d
 8012664:	3ec71de3 	.word	0x3ec71de3
 8012668:	19c161d5 	.word	0x19c161d5
 801266c:	bf2a01a0 	.word	0xbf2a01a0
 8012670:	1110f8a6 	.word	0x1110f8a6
 8012674:	3f811111 	.word	0x3f811111
 8012678:	55555549 	.word	0x55555549
 801267c:	bfc55555 	.word	0xbfc55555
 8012680:	55555549 	.word	0x55555549
 8012684:	3fc55555 	.word	0x3fc55555

08012688 <fabs>:
 8012688:	ec51 0b10 	vmov	r0, r1, d0
 801268c:	ee10 2a10 	vmov	r2, s0
 8012690:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012694:	ec43 2b10 	vmov	d0, r2, r3
 8012698:	4770      	bx	lr
 801269a:	0000      	movs	r0, r0
 801269c:	0000      	movs	r0, r0
	...

080126a0 <floor>:
 80126a0:	ee10 1a90 	vmov	r1, s1
 80126a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80126a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80126ac:	2b13      	cmp	r3, #19
 80126ae:	b530      	push	{r4, r5, lr}
 80126b0:	ee10 0a10 	vmov	r0, s0
 80126b4:	ee10 5a10 	vmov	r5, s0
 80126b8:	dc31      	bgt.n	801271e <floor+0x7e>
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	da15      	bge.n	80126ea <floor+0x4a>
 80126be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012778 <floor+0xd8>
 80126c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80126c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80126ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ce:	dd07      	ble.n	80126e0 <floor+0x40>
 80126d0:	2900      	cmp	r1, #0
 80126d2:	da4e      	bge.n	8012772 <floor+0xd2>
 80126d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80126d8:	4318      	orrs	r0, r3
 80126da:	d001      	beq.n	80126e0 <floor+0x40>
 80126dc:	4928      	ldr	r1, [pc, #160]	; (8012780 <floor+0xe0>)
 80126de:	2000      	movs	r0, #0
 80126e0:	460b      	mov	r3, r1
 80126e2:	4602      	mov	r2, r0
 80126e4:	ec43 2b10 	vmov	d0, r2, r3
 80126e8:	e020      	b.n	801272c <floor+0x8c>
 80126ea:	4a26      	ldr	r2, [pc, #152]	; (8012784 <floor+0xe4>)
 80126ec:	411a      	asrs	r2, r3
 80126ee:	ea01 0402 	and.w	r4, r1, r2
 80126f2:	4304      	orrs	r4, r0
 80126f4:	d01a      	beq.n	801272c <floor+0x8c>
 80126f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012778 <floor+0xd8>
 80126fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80126fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012706:	ddeb      	ble.n	80126e0 <floor+0x40>
 8012708:	2900      	cmp	r1, #0
 801270a:	bfbe      	ittt	lt
 801270c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012710:	fa40 f303 	asrlt.w	r3, r0, r3
 8012714:	18c9      	addlt	r1, r1, r3
 8012716:	ea21 0102 	bic.w	r1, r1, r2
 801271a:	2000      	movs	r0, #0
 801271c:	e7e0      	b.n	80126e0 <floor+0x40>
 801271e:	2b33      	cmp	r3, #51	; 0x33
 8012720:	dd05      	ble.n	801272e <floor+0x8e>
 8012722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012726:	d101      	bne.n	801272c <floor+0x8c>
 8012728:	ee30 0b00 	vadd.f64	d0, d0, d0
 801272c:	bd30      	pop	{r4, r5, pc}
 801272e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012732:	f04f 32ff 	mov.w	r2, #4294967295
 8012736:	40e2      	lsrs	r2, r4
 8012738:	4202      	tst	r2, r0
 801273a:	d0f7      	beq.n	801272c <floor+0x8c>
 801273c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012778 <floor+0xd8>
 8012740:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012744:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274c:	ddc8      	ble.n	80126e0 <floor+0x40>
 801274e:	2900      	cmp	r1, #0
 8012750:	da02      	bge.n	8012758 <floor+0xb8>
 8012752:	2b14      	cmp	r3, #20
 8012754:	d103      	bne.n	801275e <floor+0xbe>
 8012756:	3101      	adds	r1, #1
 8012758:	ea20 0002 	bic.w	r0, r0, r2
 801275c:	e7c0      	b.n	80126e0 <floor+0x40>
 801275e:	2401      	movs	r4, #1
 8012760:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012764:	fa04 f303 	lsl.w	r3, r4, r3
 8012768:	4418      	add	r0, r3
 801276a:	42a8      	cmp	r0, r5
 801276c:	bf38      	it	cc
 801276e:	1909      	addcc	r1, r1, r4
 8012770:	e7f2      	b.n	8012758 <floor+0xb8>
 8012772:	2000      	movs	r0, #0
 8012774:	4601      	mov	r1, r0
 8012776:	e7b3      	b.n	80126e0 <floor+0x40>
 8012778:	8800759c 	.word	0x8800759c
 801277c:	7e37e43c 	.word	0x7e37e43c
 8012780:	bff00000 	.word	0xbff00000
 8012784:	000fffff 	.word	0x000fffff

08012788 <nan>:
 8012788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012790 <nan+0x8>
 801278c:	4770      	bx	lr
 801278e:	bf00      	nop
 8012790:	00000000 	.word	0x00000000
 8012794:	7ff80000 	.word	0x7ff80000

08012798 <scalbn>:
 8012798:	ee10 1a90 	vmov	r1, s1
 801279c:	b510      	push	{r4, lr}
 801279e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80127a2:	b98c      	cbnz	r4, 80127c8 <scalbn+0x30>
 80127a4:	ee10 3a10 	vmov	r3, s0
 80127a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80127ac:	430b      	orrs	r3, r1
 80127ae:	d011      	beq.n	80127d4 <scalbn+0x3c>
 80127b0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012878 <scalbn+0xe0>
 80127b4:	4b3c      	ldr	r3, [pc, #240]	; (80128a8 <scalbn+0x110>)
 80127b6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80127ba:	4298      	cmp	r0, r3
 80127bc:	da0b      	bge.n	80127d6 <scalbn+0x3e>
 80127be:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012880 <scalbn+0xe8>
 80127c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80127c6:	e005      	b.n	80127d4 <scalbn+0x3c>
 80127c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80127cc:	429c      	cmp	r4, r3
 80127ce:	d107      	bne.n	80127e0 <scalbn+0x48>
 80127d0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80127d4:	bd10      	pop	{r4, pc}
 80127d6:	ee10 1a90 	vmov	r1, s1
 80127da:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80127de:	3c36      	subs	r4, #54	; 0x36
 80127e0:	4404      	add	r4, r0
 80127e2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80127e6:	429c      	cmp	r4, r3
 80127e8:	dd0d      	ble.n	8012806 <scalbn+0x6e>
 80127ea:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012888 <scalbn+0xf0>
 80127ee:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012890 <scalbn+0xf8>
 80127f2:	eeb0 6b47 	vmov.f64	d6, d7
 80127f6:	ee10 3a90 	vmov	r3, s1
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012800:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012804:	e7e6      	b.n	80127d4 <scalbn+0x3c>
 8012806:	2c00      	cmp	r4, #0
 8012808:	dd0a      	ble.n	8012820 <scalbn+0x88>
 801280a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801280e:	ec53 2b10 	vmov	r2, r3, d0
 8012812:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012816:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801281a:	ec43 2b10 	vmov	d0, r2, r3
 801281e:	e7d9      	b.n	80127d4 <scalbn+0x3c>
 8012820:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012824:	da19      	bge.n	801285a <scalbn+0xc2>
 8012826:	f24c 3350 	movw	r3, #50000	; 0xc350
 801282a:	4298      	cmp	r0, r3
 801282c:	ee10 3a90 	vmov	r3, s1
 8012830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012834:	dd09      	ble.n	801284a <scalbn+0xb2>
 8012836:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012888 <scalbn+0xf0>
 801283a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012890 <scalbn+0xf8>
 801283e:	eeb0 7b40 	vmov.f64	d7, d0
 8012842:	2b00      	cmp	r3, #0
 8012844:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012848:	e7bb      	b.n	80127c2 <scalbn+0x2a>
 801284a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012880 <scalbn+0xe8>
 801284e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012898 <scalbn+0x100>
 8012852:	eeb0 7b40 	vmov.f64	d7, d0
 8012856:	2b00      	cmp	r3, #0
 8012858:	e7f4      	b.n	8012844 <scalbn+0xac>
 801285a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801285e:	ec53 2b10 	vmov	r2, r3, d0
 8012862:	3436      	adds	r4, #54	; 0x36
 8012864:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012868:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801286c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80128a0 <scalbn+0x108>
 8012870:	ec43 2b10 	vmov	d0, r2, r3
 8012874:	e7a5      	b.n	80127c2 <scalbn+0x2a>
 8012876:	bf00      	nop
 8012878:	00000000 	.word	0x00000000
 801287c:	43500000 	.word	0x43500000
 8012880:	c2f8f359 	.word	0xc2f8f359
 8012884:	01a56e1f 	.word	0x01a56e1f
 8012888:	8800759c 	.word	0x8800759c
 801288c:	7e37e43c 	.word	0x7e37e43c
 8012890:	8800759c 	.word	0x8800759c
 8012894:	fe37e43c 	.word	0xfe37e43c
 8012898:	c2f8f359 	.word	0xc2f8f359
 801289c:	81a56e1f 	.word	0x81a56e1f
 80128a0:	00000000 	.word	0x00000000
 80128a4:	3c900000 	.word	0x3c900000
 80128a8:	ffff3cb0 	.word	0xffff3cb0

080128ac <_init>:
 80128ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ae:	bf00      	nop
 80128b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128b2:	bc08      	pop	{r3}
 80128b4:	469e      	mov	lr, r3
 80128b6:	4770      	bx	lr

080128b8 <_fini>:
 80128b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ba:	bf00      	nop
 80128bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128be:	bc08      	pop	{r3}
 80128c0:	469e      	mov	lr, r3
 80128c2:	4770      	bx	lr
