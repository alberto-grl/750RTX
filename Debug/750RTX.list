
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011db4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a778  08012058  08012058  00022058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c7d0  0801c7d0  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  0801c7d0  0801c7d0  0002c7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7d8  0801c7d8  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7d8  0801c7d8  0002c7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c7dc  0801c7dc  0002c7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e0  24000000  0801c7e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010550  240005e0  0801cdc0  000305e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  24010b30  0801cdc0  00030b30  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005bf08  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009810  00000000  00000000  000aaf36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b20  00000000  00000000  000b4748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000046b8  00000000  00000000  000b6268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040229  00000000  00000000  000ba920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003dd61  00000000  00000000  000fab49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00183f45  00000000  00000000  001388aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c8  00000000  00000000  002bc7ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072d8  00000000  00000000  002bc8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00028b66  00000000  00000000  002c3b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240005e0 	.word	0x240005e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801203c 	.word	0x0801203c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240005e4 	.word	0x240005e4
 80002dc:	0801203c 	.word	0x0801203c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <shiftBits>:
void shiftBits() {
	// we know we've got a dit or a dah, let's find out which
	// then we will shift the bits in myNum and then add 1 or not add 1

	//	if (downTime < dit / 3) return;  // ignore my keybounce //TODO serve? blocca l'autoregolazione
	if (downTime < 10) return;
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <shiftBits+0x108>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	2a09      	cmp	r2, #9
 800068e:	dd5e      	ble.n	800074e <shiftBits+0xc6>

	myNum = myNum << 1;   // shift bits left
 8000690:	4940      	ldr	r1, [pc, #256]	; (8000794 <shiftBits+0x10c>)
	ditOrDah = true;        // we will know which one in two lines


	// If it is a dit we add 1. If it is a dah we do nothing!
	if (downTime < dit) {
 8000692:	4841      	ldr	r0, [pc, #260]	; (8000798 <shiftBits+0x110>)
	myNum = myNum << 1;   // shift bits left
 8000694:	680b      	ldr	r3, [r1, #0]
void shiftBits() {
 8000696:	b470      	push	{r4, r5, r6}
	ditOrDah = true;        // we will know which one in two lines
 8000698:	2601      	movs	r6, #1
	if (downTime < dit) {
 800069a:	6804      	ldr	r4, [r0, #0]
	ditOrDah = true;        // we will know which one in two lines
 800069c:	4d3f      	ldr	r5, [pc, #252]	; (800079c <shiftBits+0x114>)
	myNum = myNum << 1;   // shift bits left
 800069e:	40b3      	lsls	r3, r6
	if (downTime < dit) {
 80006a0:	42a2      	cmp	r2, r4
	ditOrDah = true;        // we will know which one in two lines
 80006a2:	702e      	strb	r6, [r5, #0]
	myNum = myNum << 1;   // shift bits left
 80006a4:	600b      	str	r3, [r1, #0]
	if (downTime < dit) {
 80006a6:	da01      	bge.n	80006ac <shiftBits+0x24>
		myNum++;           // add one because it is a dit
 80006a8:	4433      	add	r3, r6
 80006aa:	600b      	str	r3, [r1, #0]
	}
	LastPulsesRatio =  (float)downTime/ LastDownTime;
 80006ac:	ee07 2a90 	vmov	s15, r2
 80006b0:	493b      	ldr	r1, [pc, #236]	; (80007a0 <shiftBits+0x118>)
	if (((LastPulsesRatio > 1.8) && (LastPulsesRatio < 5.0)) || ((LastPulsesRatio > (1/1.8)) && (LastPulsesRatio < (1 / 5.0))))
 80006b2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
	LastPulsesRatio =  (float)downTime/ LastDownTime;
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <shiftBits+0x11c>)
 80006b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006bc:	edd1 7a00 	vldr	s15, [r1]
 80006c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	if (((LastPulsesRatio > 1.8) && (LastPulsesRatio < 5.0)) || ((LastPulsesRatio > (1/1.8)) && (LastPulsesRatio < (1 / 5.0))))
 80006c4:	eeb4 7a46 	vcmp.f32	s14, s12
	LastPulsesRatio =  (float)downTime/ LastDownTime;
 80006c8:	ed83 7a00 	vstr	s14, [r3]
	if (((LastPulsesRatio > 1.8) && (LastPulsesRatio < 5.0)) || ((LastPulsesRatio > (1/1.8)) && (LastPulsesRatio < (1 / 5.0))))
 80006cc:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 80006d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d4:	d506      	bpl.n	80006e4 <shiftBits+0x5c>
 80006d6:	ed9f 4b28 	vldr	d4, [pc, #160]	; 8000778 <shiftBits+0xf0>
 80006da:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80006de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e2:	dc11      	bgt.n	8000708 <shiftBits+0x80>
 80006e4:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8000780 <shiftBits+0xf8>
 80006e8:	eeb4 5b44 	vcmp.f64	d5, d4
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	d506      	bpl.n	8000700 <shiftBits+0x78>
 80006f2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8000788 <shiftBits+0x100>
 80006f6:	eeb4 5b44 	vcmp.f64	d5, d4
 80006fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fe:	dc03      	bgt.n	8000708 <shiftBits+0x80>
		if (averageDah < 50)
			averageDah = 50;
		dit = averageDah / 3;                    // normal dit would be this
		dit = dit * 2;    // double it to get the threshold between dits and dahs
	}
	LastDownTime = downTime;
 8000700:	edc1 6a00 	vstr	s13, [r1]
}
 8000704:	bc70      	pop	{r4, r5, r6}
 8000706:	4770      	bx	lr
		if (LastPulsesRatio > 1)
 8000708:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800070c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8000710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000714:	dd1c      	ble.n	8000750 <shiftBits+0xc8>
 8000716:	4613      	mov	r3, r2
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000718:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		if (averageDah > 400)
 800071c:	f640 4587 	movw	r5, #3207	; 0xc87
		CurrentAverageDah = averageDah;
 8000720:	4e21      	ldr	r6, [pc, #132]	; (80007a8 <shiftBits+0x120>)
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000722:	4413      	add	r3, r2
 8000724:	4c21      	ldr	r4, [pc, #132]	; (80007ac <shiftBits+0x124>)
 8000726:	2b00      	cmp	r3, #0
 8000728:	461a      	mov	r2, r3
 800072a:	bfb8      	it	lt
 800072c:	1dda      	addlt	r2, r3, #7
		if (averageDah > 400)
 800072e:	42ab      	cmp	r3, r5
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000730:	ea4f 02e2 	mov.w	r2, r2, asr #3
		CurrentAverageDah = averageDah;
 8000734:	6032      	str	r2, [r6, #0]
		averageDah = (downTime + 7 * averageDah) / 8;  // running average of dahs
 8000736:	6022      	str	r2, [r4, #0]
		if (averageDah > 400)
 8000738:	dd0f      	ble.n	800075a <shiftBits+0xd2>
			averageDah = 400;
 800073a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800073e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8000742:	6022      	str	r2, [r4, #0]
		dit = dit * 2;    // double it to get the threshold between dits and dahs
 8000744:	6003      	str	r3, [r0, #0]
	LastDownTime = downTime;
 8000746:	edc1 6a00 	vstr	s13, [r1]
}
 800074a:	bc70      	pop	{r4, r5, r6}
 800074c:	4770      	bx	lr
 800074e:	4770      	bx	lr
			averageDah = LastDownTime;
 8000750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000754:	ee17 3a90 	vmov	r3, s15
 8000758:	e7de      	b.n	8000718 <shiftBits+0x90>
		if (averageDah < 50)
 800075a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800075e:	da03      	bge.n	8000768 <shiftBits+0xe0>
			averageDah = 50;
 8000760:	2232      	movs	r2, #50	; 0x32
 8000762:	2320      	movs	r3, #32
 8000764:	6022      	str	r2, [r4, #0]
 8000766:	e7ed      	b.n	8000744 <shiftBits+0xbc>
 8000768:	2218      	movs	r2, #24
 800076a:	fb93 f3f2 	sdiv	r3, r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	e7e8      	b.n	8000744 <shiftBits+0xbc>
 8000772:	bf00      	nop
 8000774:	f3af 8000 	nop.w
 8000778:	cccccccd 	.word	0xcccccccd
 800077c:	3ffccccc 	.word	0x3ffccccc
 8000780:	9999999a 	.word	0x9999999a
 8000784:	3fc99999 	.word	0x3fc99999
 8000788:	71c71c72 	.word	0x71c71c72
 800078c:	3fe1c71c 	.word	0x3fe1c71c
 8000790:	240005fc 	.word	0x240005fc
 8000794:	2400060c 	.word	0x2400060c
 8000798:	24000024 	.word	0x24000024
 800079c:	24000028 	.word	0x24000028
 80007a0:	24009cdc 	.word	0x24009cdc
 80007a4:	24003e80 	.word	0x24003e80
 80007a8:	2400ee40 	.word	0x2400ee40
 80007ac:	24000000 	.word	0x24000000

080007b0 <printPunctuation>:
	// marks. Then as I was copying code off of web sites I added
	// characters we don't normally see on the air and the list got
	// a little long. Using 'switch' to handle them is much better.


	switch (myNum) {
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <printPunctuation+0xac>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b7a      	cmp	r3, #122	; 0x7a
 80007b6:	dc20      	bgt.n	80007fa <printPunctuation+0x4a>
 80007b8:	2b46      	cmp	r3, #70	; 0x46
 80007ba:	dd2a      	ble.n	8000812 <printPunctuation+0x62>
 80007bc:	3b47      	subs	r3, #71	; 0x47
 80007be:	2b33      	cmp	r3, #51	; 0x33
 80007c0:	d827      	bhi.n	8000812 <printPunctuation+0x62>
 80007c2:	e8df f003 	tbb	[pc, r3]
 80007c6:	262b      	.short	0x262b
 80007c8:	2f262626 	.word	0x2f262626
 80007cc:	26262626 	.word	0x26262626
 80007d0:	33262626 	.word	0x33262626
 80007d4:	26262626 	.word	0x26262626
 80007d8:	26262626 	.word	0x26262626
 80007dc:	26263726 	.word	0x26263726
 80007e0:	2626263b 	.word	0x2626263b
 80007e4:	2626263f 	.word	0x2626263f
 80007e8:	26264326 	.word	0x26264326
 80007ec:	26262626 	.word	0x26262626
 80007f0:	26472626 	.word	0x26472626
 80007f4:	26262626 	.word	0x26262626
 80007f8:	2226      	.short	0x2226
 80007fa:	2bf6      	cmp	r3, #246	; 0xf6
 80007fc:	d109      	bne.n	8000812 <printPunctuation+0x62>
		break;
	case 115:
		lcdGuy = '?';
		break;
	case 246:
		lcdGuy = '$';
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <printPunctuation+0xb0>)
 8000800:	2324      	movs	r3, #36	; 0x24
 8000802:	7013      	strb	r3, [r2, #0]
	sendToLCD();    // go figure out where to put it on the display
}

void sendToLCD(){

	DecodedCWChar = lcdGuy;
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <printPunctuation+0xb4>)
 8000806:	7013      	strb	r3, [r2, #0]
}
 8000808:	4770      	bx	lr
		lcdGuy = 'k';
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <printPunctuation+0xb0>)
 800080c:	236b      	movs	r3, #107	; 0x6b
 800080e:	7013      	strb	r3, [r2, #0]
		break;
 8000810:	e7f8      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '#';    // Should not get here
 8000812:	2223      	movs	r2, #35	; 0x23
 8000814:	4912      	ldr	r1, [pc, #72]	; (8000860 <printPunctuation+0xb0>)
		break;
 8000816:	4613      	mov	r3, r2
		lcdGuy = '#';    // Should not get here
 8000818:	700a      	strb	r2, [r1, #0]
		break;
 800081a:	e7f3      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = ':';
 800081c:	4a10      	ldr	r2, [pc, #64]	; (8000860 <printPunctuation+0xb0>)
 800081e:	233a      	movs	r3, #58	; 0x3a
 8000820:	7013      	strb	r3, [r2, #0]
		break;
 8000822:	e7ef      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = ',';
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <printPunctuation+0xb0>)
 8000826:	232c      	movs	r3, #44	; 0x2c
 8000828:	7013      	strb	r3, [r2, #0]
		break;
 800082a:	e7eb      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '!';
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <printPunctuation+0xb0>)
 800082e:	2321      	movs	r3, #33	; 0x21
 8000830:	7013      	strb	r3, [r2, #0]
		break;
 8000832:	e7e7      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '-';
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <printPunctuation+0xb0>)
 8000836:	232d      	movs	r3, #45	; 0x2d
 8000838:	7013      	strb	r3, [r2, #0]
		break;
 800083a:	e7e3      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = 39;    // Apostrophe
 800083c:	4a08      	ldr	r2, [pc, #32]	; (8000860 <printPunctuation+0xb0>)
 800083e:	2327      	movs	r3, #39	; 0x27
 8000840:	7013      	strb	r3, [r2, #0]
		break;
 8000842:	e7df      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '@';
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <printPunctuation+0xb0>)
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	7013      	strb	r3, [r2, #0]
		break;
 800084a:	e7db      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '.';
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <printPunctuation+0xb0>)
 800084e:	232e      	movs	r3, #46	; 0x2e
 8000850:	7013      	strb	r3, [r2, #0]
		break;
 8000852:	e7d7      	b.n	8000804 <printPunctuation+0x54>
		lcdGuy = '?';
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <printPunctuation+0xb0>)
 8000856:	233f      	movs	r3, #63	; 0x3f
 8000858:	7013      	strb	r3, [r2, #0]
		break;
 800085a:	e7d3      	b.n	8000804 <printPunctuation+0x54>
 800085c:	2400060c 	.word	0x2400060c
 8000860:	24000041 	.word	0x24000041
 8000864:	2400acec 	.word	0x2400acec

08000868 <keyIsUp>:
void keyIsUp() {
 8000868:	b570      	push	{r4, r5, r6, lr}
	if (startUpTime == 0){startUpTime = HAL_GetTick();}
 800086a:	4c3d      	ldr	r4, [pc, #244]	; (8000960 <keyIsUp+0xf8>)
	LED_GREEN_OFF;
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	483c      	ldr	r0, [pc, #240]	; (8000964 <keyIsUp+0xfc>)
 8000874:	f006 fc54 	bl	8007120 <HAL_GPIO_WritePin>
	if (startUpTime == 0){startUpTime = HAL_GetTick();}
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d069      	beq.n	8000952 <keyIsUp+0xea>
	upTime = HAL_GetTick() - startUpTime;
 800087e:	f003 fc85 	bl	800418c <HAL_GetTick>
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	4c38      	ldr	r4, [pc, #224]	; (8000968 <keyIsUp+0x100>)
 8000886:	1ac0      	subs	r0, r0, r3
	if (upTime<10)return;
 8000888:	2809      	cmp	r0, #9
	upTime = HAL_GetTick() - startUpTime;
 800088a:	6020      	str	r0, [r4, #0]
	if (upTime<10)return;
 800088c:	dd4d      	ble.n	800092a <keyIsUp+0xc2>
	if (upTime > (averageDah*2)) {
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <keyIsUp+0x104>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8000896:	dd26      	ble.n	80008e6 <keyIsUp+0x7e>
	if (justDid) return;  // only one space, no matter how long the gap
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <keyIsUp+0x108>)
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	bb1a      	cbnz	r2, 80008e6 <keyIsUp+0x7e>
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 800089e:	4a35      	ldr	r2, [pc, #212]	; (8000974 <keyIsUp+0x10c>)
	justDid = true;       // so we don't do this twice
 80008a0:	2501      	movs	r5, #1
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008a2:	4e35      	ldr	r6, [pc, #212]	; (8000978 <keyIsUp+0x110>)
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008a4:	6811      	ldr	r1, [r2, #0]
	justDid = true;       // so we don't do this twice
 80008a6:	701d      	strb	r5, [r3, #0]
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008a8:	1840      	adds	r0, r0, r1
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <keyIsUp+0x114>)
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008ac:	bf48      	it	mi
 80008ae:	1940      	addmi	r0, r0, r5
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008b0:	6819      	ldr	r1, [r3, #0]
	lastSpace=letterCount;         // keep track of this, our last, space
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <keyIsUp+0x118>)
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008b4:	2520      	movs	r5, #32
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008b6:	1040      	asrs	r0, r0, #1
	if (letterCount < 20) {
 80008b8:	2913      	cmp	r1, #19
	lastSpace=letterCount;         // keep track of this, our last, space
 80008ba:	6019      	str	r1, [r3, #0]
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008bc:	f100 0014 	add.w	r0, r0, #20
	lastWordCount=0;      // start counting length of word again
 80008c0:	4b30      	ldr	r3, [pc, #192]	; (8000984 <keyIsUp+0x11c>)
	currentLine[letterCount]=' ';  // and a space to the variable that stores the current line
 80008c2:	5475      	strb	r5, [r6, r1]
	averageWordGap = ((averageWordGap + upTime) / 2) + 20;
 80008c4:	6010      	str	r0, [r2, #0]
	lastWordCount=0;      // start counting length of word again
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lcdGuy=' ';         // this is going to go to the LCD
 80008ce:	4e2e      	ldr	r6, [pc, #184]	; (8000988 <keyIsUp+0x120>)
	lastWordCount=0;      // start counting length of word again
 80008d0:	6018      	str	r0, [r3, #0]
	for (int i=0; i<20; i++) {
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <keyIsUp+0x124>)
	lcdGuy=' ';         // this is going to go to the LCD
 80008d4:	7035      	strb	r5, [r6, #0]
 80008d6:	611a      	str	r2, [r3, #16]
	if (letterCount < 20) {
 80008d8:	e9c3 2200 	strd	r2, r2, [r3]
 80008dc:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80008e0:	dc01      	bgt.n	80008e6 <keyIsUp+0x7e>
	DecodedCWChar = lcdGuy;
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <keyIsUp+0x128>)
 80008e4:	701d      	strb	r5, [r3, #0]
	if (startDownTime > 0){
 80008e6:	4d2b      	ldr	r5, [pc, #172]	; (8000994 <keyIsUp+0x12c>)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dc1e      	bgt.n	800092c <keyIsUp+0xc4>
	if (!ditOrDah) {
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <keyIsUp+0x130>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b33b      	cbz	r3, 8000944 <keyIsUp+0xdc>
	if (!characterDone) {
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <keyIsUp+0x134>)
 80008f6:	7803      	ldrb	r3, [r0, #0]
 80008f8:	b9bb      	cbnz	r3, 800092a <keyIsUp+0xc2>
		if (upTime > dit) {
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <keyIsUp+0x138>)
 80008fc:	6821      	ldr	r1, [r4, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	4291      	cmp	r1, r2
 8000902:	dd0f      	ble.n	8000924 <keyIsUp+0xbc>
	if (myNum > 63) {
 8000904:	4c27      	ldr	r4, [pc, #156]	; (80009a4 <keyIsUp+0x13c>)
	justDid = false;         // OK to print a space again after this
 8000906:	491a      	ldr	r1, [pc, #104]	; (8000970 <keyIsUp+0x108>)
	if (myNum > 63) {
 8000908:	6822      	ldr	r2, [r4, #0]
	justDid = false;         // OK to print a space again after this
 800090a:	700b      	strb	r3, [r1, #0]
	if (myNum > 63) {
 800090c:	2a3f      	cmp	r2, #63	; 0x3f
 800090e:	dc24      	bgt.n	800095a <keyIsUp+0xf2>
	lcdGuy = mySet[myNum]; // Find the letter in the character set
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <keyIsUp+0x140>)
 8000912:	491d      	ldr	r1, [pc, #116]	; (8000988 <keyIsUp+0x120>)
 8000914:	5c9b      	ldrb	r3, [r3, r2]
	DecodedCWChar = lcdGuy;
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <keyIsUp+0x128>)
	lcdGuy = mySet[myNum]; // Find the letter in the character set
 8000918:	700b      	strb	r3, [r1, #0]
	DecodedCWChar = lcdGuy;
 800091a:	7013      	strb	r3, [r2, #0]
			characterDone=true;     // We got him, we're done here
 800091c:	2201      	movs	r2, #1
			myNum=0;                // This sets us up for getting the next start bit
 800091e:	2300      	movs	r3, #0
			characterDone=true;     // We got him, we're done here
 8000920:	7002      	strb	r2, [r0, #0]
			myNum=0;                // This sets us up for getting the next start bit
 8000922:	6023      	str	r3, [r4, #0]
		downTime=0;               // Reset our keyDown counter
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <keyIsUp+0x144>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bd70      	pop	{r4, r5, r6, pc}
		downTime = HAL_GetTick() - startDownTime;  // how long was the tone on?
 800092c:	f003 fc2e 	bl	800418c <HAL_GetTick>
 8000930:	6829      	ldr	r1, [r5, #0]
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <keyIsUp+0x144>)
		startDownTime=0;      // clear the 'Key Down' timer
 8000934:	2200      	movs	r2, #0
		downTime = HAL_GetTick() - startDownTime;  // how long was the tone on?
 8000936:	1a40      	subs	r0, r0, r1
		startDownTime=0;      // clear the 'Key Down' timer
 8000938:	602a      	str	r2, [r5, #0]
		downTime = HAL_GetTick() - startDownTime;  // how long was the tone on?
 800093a:	6018      	str	r0, [r3, #0]
	if (!ditOrDah) {
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <keyIsUp+0x130>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1d7      	bne.n	80008f4 <keyIsUp+0x8c>
		shiftBits();    // let's go find out! And do our Magic with the bits
 8000944:	f7ff fea0 	bl	8000688 <shiftBits>
	if (!characterDone) {
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <keyIsUp+0x134>)
 800094a:	7803      	ldrb	r3, [r0, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1ec      	bne.n	800092a <keyIsUp+0xc2>
 8000950:	e7d3      	b.n	80008fa <keyIsUp+0x92>
	if (startUpTime == 0){startUpTime = HAL_GetTick();}
 8000952:	f003 fc1b 	bl	800418c <HAL_GetTick>
 8000956:	6020      	str	r0, [r4, #0]
 8000958:	e791      	b.n	800087e <keyIsUp+0x16>
		printPunctuation();  // The value we parsed is bigger than our character array
 800095a:	f7ff ff29 	bl	80007b0 <printPunctuation>
		return;              // Go back to the main loop(), we're done here.
 800095e:	e7dd      	b.n	800091c <keyIsUp+0xb4>
 8000960:	24000614 	.word	0x24000614
 8000964:	58020000 	.word	0x58020000
 8000968:	24000618 	.word	0x24000618
 800096c:	24000000 	.word	0x24000000
 8000970:	24000029 	.word	0x24000029
 8000974:	24000004 	.word	0x24000004
 8000978:	2400000c 	.word	0x2400000c
 800097c:	24000608 	.word	0x24000608
 8000980:	24000600 	.word	0x24000600
 8000984:	24000604 	.word	0x24000604
 8000988:	24000041 	.word	0x24000041
 800098c:	2400002c 	.word	0x2400002c
 8000990:	2400acec 	.word	0x2400acec
 8000994:	24000610 	.word	0x24000610
 8000998:	24000028 	.word	0x24000028
 800099c:	24000008 	.word	0x24000008
 80009a0:	24000024 	.word	0x24000024
 80009a4:	2400060c 	.word	0x2400060c
 80009a8:	24000044 	.word	0x24000044
 80009ac:	240005fc 	.word	0x240005fc

080009b0 <DecodeCW>:
	if (CWIn > 1) keyIsDown();       // tone is being decoded
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <DecodeCW+0x4c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d91a      	bls.n	80009ee <DecodeCW+0x3e>
	LED_GREEN_ON;
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009be:	4810      	ldr	r0, [pc, #64]	; (8000a00 <DecodeCW+0x50>)
{
 80009c0:	b510      	push	{r4, lr}
	LED_GREEN_ON;
 80009c2:	f006 fbad 	bl	8007120 <HAL_GPIO_WritePin>
	if (startUpTime>0){
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <DecodeCW+0x54>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	dd01      	ble.n	80009d2 <DecodeCW+0x22>
		startUpTime=0;    // clear the 'Key Up' timer
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
	if (startDownTime == 0){
 80009d2:	4c0d      	ldr	r4, [pc, #52]	; (8000a08 <DecodeCW+0x58>)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	b163      	cbz	r3, 80009f2 <DecodeCW+0x42>
	if (myNum == 0) {      // myNum will equal zero at the beginning of a character
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <DecodeCW+0x5c>)
	characterDone=false; // we're still building a character
 80009da:	2300      	movs	r3, #0
 80009dc:	4c0c      	ldr	r4, [pc, #48]	; (8000a10 <DecodeCW+0x60>)
	ditOrDah=false;      // the key is still down we're not done with the tone
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <DecodeCW+0x64>)
	if (myNum == 0) {      // myNum will equal zero at the beginning of a character
 80009e0:	6811      	ldr	r1, [r2, #0]
	characterDone=false; // we're still building a character
 80009e2:	7023      	strb	r3, [r4, #0]
	ditOrDah=false;      // the key is still down we're not done with the tone
 80009e4:	7003      	strb	r3, [r0, #0]
	if (myNum == 0) {      // myNum will equal zero at the beginning of a character
 80009e6:	b909      	cbnz	r1, 80009ec <DecodeCW+0x3c>
		myNum = 1;          // This is our start bit  - it only does this once per letter
 80009e8:	2301      	movs	r3, #1
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bd10      	pop	{r4, pc}
	else keyIsUp();          //  no tone is there
 80009ee:	f7ff bf3b 	b.w	8000868 <keyIsUp>
		startDownTime = HAL_GetTick();  // get Arduino's current clock time
 80009f2:	f003 fbcb 	bl	800418c <HAL_GetTick>
 80009f6:	6020      	str	r0, [r4, #0]
 80009f8:	e7ee      	b.n	80009d8 <DecodeCW+0x28>
 80009fa:	bf00      	nop
 80009fc:	24008a4c 	.word	0x24008a4c
 8000a00:	58020000 	.word	0x58020000
 8000a04:	24000614 	.word	0x24000614
 8000a08:	24000610 	.word	0x24000610
 8000a0c:	2400060c 	.word	0x2400060c
 8000a10:	24000008 	.word	0x24000008
 8000a14:	24000028 	.word	0x24000028

08000a18 <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <Load_Presets+0x40>)
{
 8000a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1e:	4c0f      	ldr	r4, [pc, #60]	; (8000a5c <Load_Presets+0x44>)
 8000a20:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8000a24:	4f0e      	ldr	r7, [pc, #56]	; (8000a60 <Load_Presets+0x48>)
 8000a26:	4e0f      	ldr	r6, [pc, #60]	; (8000a64 <Load_Presets+0x4c>)
 8000a28:	4d0f      	ldr	r5, [pc, #60]	; (8000a68 <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8000a2a:	4621      	mov	r1, r4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00e f80d 	bl	800ea4c <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 8000a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 8000a36:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000a38:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 8000a3c:	f857 0b04 	ldr.w	r0, [r7], #4
 8000a40:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 8000a42:	7519      	strb	r1, [r3, #20]
 8000a44:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 8000a46:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000a4a:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000a4e:	4543      	cmp	r3, r8
 8000a50:	d1eb      	bne.n	8000a2a <Load_Presets+0x12>
	}
}
 8000a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a56:	bf00      	nop
 8000a58:	24009b38 	.word	0x24009b38
 8000a5c:	24000088 	.word	0x24000088
 8000a60:	08018068 	.word	0x08018068
 8000a64:	0801809f 	.word	0x0801809f
 8000a68:	08018057 	.word	0x08018057

08000a6c <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <SetBW+0x8c>)
	CurrentBW = newbw;
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <SetBW+0x90>)
{
 8000a70:	b470      	push	{r4, r5, r6}
 8000a72:	781b      	ldrb	r3, [r3, #0]
	CurrentBW = newbw;
 8000a74:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d83c      	bhi.n	8000af4 <SetBW+0x88>
 8000a7a:	e8df f003 	tbb	[pc, r3]
 8000a7e:	1c0f      	.short	0x1c0f
 8000a80:	022f      	.short	0x022f

		break;

	case CW  :

		bw[CW] = newbw;
 8000a82:	491f      	ldr	r1, [pc, #124]	; (8000b00 <SetBW+0x94>)
		CWindex = (newbw == Narrow) ? 0 : 1;
		CWindex = 0; // TODO toglimi
 8000a84:	2500      	movs	r5, #0
 8000a86:	4c1f      	ldr	r4, [pc, #124]	; (8000b04 <SetBW+0x98>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8000a8c:	70c8      	strb	r0, [r1, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8000a90:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a92:	491e      	ldr	r1, [pc, #120]	; (8000b0c <SetBW+0xa0>)
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <SetBW+0xa4>)
		break;

	default :
		break;
	}
}	
 8000a96:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000a98:	f001 b944 	b.w	8001d24 <SDR_2R_toC_f32>
		bw[AM] = newbw;
 8000a9c:	4918      	ldr	r1, [pc, #96]	; (8000b00 <SetBW+0x94>)
		AMindex = 0; // TODO toglimi
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	4c1c      	ldr	r4, [pc, #112]	; (8000b14 <SetBW+0xa8>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8000aa6:	7008      	strb	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8000aaa:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000aac:	491a      	ldr	r1, [pc, #104]	; (8000b18 <SetBW+0xac>)
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <SetBW+0xb0>)
}	
 8000ab0:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ab2:	f001 b937 	b.w	8001d24 <SDR_2R_toC_f32>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000ab6:	1e06      	subs	r6, r0, #0
		bw[LSB] = newbw;
 8000ab8:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <SetBW+0x94>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000aba:	4916      	ldr	r1, [pc, #88]	; (8000b14 <SetBW+0xa8>)
		LSBindex = 0; // TODO toglimi
 8000abc:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000ac0:	bf18      	it	ne
 8000ac2:	2601      	movne	r6, #1
		LSBindex = 0; // TODO toglimi
 8000ac4:	4c16      	ldr	r4, [pc, #88]	; (8000b20 <SetBW+0xb4>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex],
 8000ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[LSB] = newbw;
 8000aca:	7050      	strb	r0, [r2, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000acc:	800e      	strh	r6, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <SetBW+0x9c>)
		USBindex = 0; // TODO toglimi
 8000ad0:	8025      	strh	r5, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ad2:	4914      	ldr	r1, [pc, #80]	; (8000b24 <SetBW+0xb8>)
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <SetBW+0xbc>)
}	
 8000ad6:	bc70      	pop	{r4, r5, r6}
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000ad8:	f001 b924 	b.w	8001d24 <SDR_2R_toC_f32>
		bw[USB] = newbw;
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <SetBW+0x94>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000ade:	1e06      	subs	r6, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <SetBW+0xa8>)
		USBindex = 0; // TODO toglimi
 8000ae2:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000ae6:	bf18      	it	ne
 8000ae8:	2601      	movne	r6, #1
		USBindex = 0; // TODO toglimi
 8000aea:	4c10      	ldr	r4, [pc, #64]	; (8000b2c <SetBW+0xc0>)
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[USB] = newbw;
 8000af0:	7090      	strb	r0, [r2, #2]
 8000af2:	e7eb      	b.n	8000acc <SetBW+0x60>
}	
 8000af4:	bc70      	pop	{r4, r5, r6}
 8000af6:	4770      	bx	lr
 8000af8:	2400de20 	.word	0x2400de20
 8000afc:	24001e74 	.word	0x24001e74
 8000b00:	24009ce8 	.word	0x24009ce8
 8000b04:	24009ce4 	.word	0x24009ce4
 8000b08:	20004000 	.word	0x20004000
 8000b0c:	08014058 	.word	0x08014058
 8000b10:	08015058 	.word	0x08015058
 8000b14:	2400f246 	.word	0x2400f246
 8000b18:	08012058 	.word	0x08012058
 8000b1c:	08013058 	.word	0x08013058
 8000b20:	2400f244 	.word	0x2400f244
 8000b24:	08016058 	.word	0x08016058
 8000b28:	08017058 	.word	0x08017058
 8000b2c:	240092a8 	.word	0x240092a8

08000b30 <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <SetAGC+0x94>)
{
 8000b34:	b430      	push	{r4, r5}
 8000b36:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8000b38:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d810      	bhi.n	8000b60 <SetAGC+0x30>
 8000b3e:	e8df f003 	tbb	[pc, r3]
 8000b42:	2011      	.short	0x2011
 8000b44:	022f      	.short	0x022f
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b4e:	4c20      	ldr	r4, [pc, #128]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b50:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000b54:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b5a:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b5c:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 8000b5e:	70d8      	strb	r0, [r3, #3]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8000b60:	bc30      	pop	{r4, r5}
 8000b62:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b68:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b6c:	4c18      	ldr	r4, [pc, #96]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b6e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000b72:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b78:	6025      	str	r5, [r4, #0]
	case AM :       agc[AM] = newAGC;
 8000b7a:	7018      	strb	r0, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b7c:	8011      	strh	r1, [r2, #0]
}	
 8000b7e:	bc30      	pop	{r4, r5}
 8000b80:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b8a:	4c11      	ldr	r4, [pc, #68]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b8c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b90:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b96:	6065      	str	r5, [r4, #4]
	case LSB :      agc[LSB] = newAGC;
 8000b98:	7058      	strb	r0, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b9a:	8051      	strh	r1, [r2, #2]
}	
 8000b9c:	bc30      	pop	{r4, r5}
 8000b9e:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000ba4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000ba8:	4c09      	ldr	r4, [pc, #36]	; (8000bd0 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000baa:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000bae:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8000bb4:	60a5      	str	r5, [r4, #8]
	case USB :      agc[USB] = newAGC;
 8000bb6:	7098      	strb	r0, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000bb8:	8091      	strh	r1, [r2, #4]
}	
 8000bba:	bc30      	pop	{r4, r5}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2400de20 	.word	0x2400de20
 8000bc4:	24001a60 	.word	0x24001a60
 8000bc8:	2400de10 	.word	0x2400de10
 8000bcc:	2400acf8 	.word	0x2400acf8
 8000bd0:	24003e84 	.word	0x24003e84
 8000bd4:	24009290 	.word	0x24009290
 8000bd8:	24008a48 	.word	0x24008a48

08000bdc <Tune_Preset>:
{
 8000bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq = psets[Idx].freq;
 8000be0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000be4:	4e48      	ldr	r6, [pc, #288]	; (8000d08 <Tune_Preset+0x12c>)
 8000be6:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <Tune_Preset+0x130>)
{
 8000be8:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8000bea:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000bee:	4f48      	ldr	r7, [pc, #288]	; (8000d10 <Tune_Preset+0x134>)
	LOfreq = psets[Idx].freq;
 8000bf0:	0045      	lsls	r5, r0, #1
 8000bf2:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8000bf4:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8000bf6:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 8000bf8:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d87d      	bhi.n	8000cfa <Tune_Preset+0x11e>
 8000bfe:	e8df f003 	tbb	[pc, r3]
 8000c02:	6458      	.short	0x6458
 8000c04:	0270      	.short	0x0270
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c06:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000d4c <Tune_Preset+0x170>
 8000c0a:	f898 0003 	ldrb.w	r0, [r8, #3]
 8000c0e:	f7ff ff2d 	bl	8000a6c <SetBW>
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <Tune_Preset+0x138>)
 8000c14:	78d8      	ldrb	r0, [r3, #3]
 8000c16:	f7ff ff8b 	bl	8000b30 <SetAGC>
		break;
 8000c1a:	783b      	ldrb	r3, [r7, #0]
	SetBW( psets[Idx].bw);
 8000c1c:	4425      	add	r5, r4
	CurrentBW = newbw;
 8000c1e:	493e      	ldr	r1, [pc, #248]	; (8000d18 <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000c20:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8000c24:	7d6a      	ldrb	r2, [r5, #21]
	CurrentBW = newbw;
 8000c26:	700a      	strb	r2, [r1, #0]
	switch(CurrentMode)
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d80f      	bhi.n	8000c4c <Tune_Preset+0x70>
 8000c2c:	e8df f003 	tbb	[pc, r3]
 8000c30:	0217372a 	.word	0x0217372a
		CWindex = 0; // TODO toglimi
 8000c34:	4839      	ldr	r0, [pc, #228]	; (8000d1c <Tune_Preset+0x140>)
 8000c36:	2500      	movs	r5, #0
		bw[CW] = newbw;
 8000c38:	f888 2003 	strb.w	r2, [r8, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 8000c40:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8000c42:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <Tune_Preset+0x144>)
 8000c44:	4937      	ldr	r1, [pc, #220]	; (8000d24 <Tune_Preset+0x148>)
 8000c46:	4838      	ldr	r0, [pc, #224]	; (8000d28 <Tune_Preset+0x14c>)
 8000c48:	f001 f86c 	bl	8001d24 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000c4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000c50:	4836      	ldr	r0, [pc, #216]	; (8000d2c <Tune_Preset+0x150>)
 8000c52:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000c5a:	f00d bef7 	b.w	800ea4c <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c5e:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	4933      	ldr	r1, [pc, #204]	; (8000d30 <Tune_Preset+0x154>)
		USBindex = 0; // TODO toglimi
 8000c62:	4834      	ldr	r0, [pc, #208]	; (8000d34 <Tune_Preset+0x158>)
 8000c64:	f04f 0500 	mov.w	r5, #0
		USBindex = (newbw == Narrow) ? 0 : 1;
 8000c68:	bf18      	it	ne
 8000c6a:	2701      	movne	r7, #1
		bw[USB] = newbw;
 8000c6c:	f888 2002 	strb.w	r2, [r8, #2]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000c70:	800f      	strh	r7, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8000c76:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <Tune_Preset+0x144>)
 8000c7a:	492f      	ldr	r1, [pc, #188]	; (8000d38 <Tune_Preset+0x15c>)
 8000c7c:	482f      	ldr	r0, [pc, #188]	; (8000d3c <Tune_Preset+0x160>)
 8000c7e:	f001 f851 	bl	8001d24 <SDR_2R_toC_f32>
		break;
 8000c82:	e7e3      	b.n	8000c4c <Tune_Preset+0x70>
		AMindex = 0; // TODO toglimi
 8000c84:	482a      	ldr	r0, [pc, #168]	; (8000d30 <Tune_Preset+0x154>)
 8000c86:	2500      	movs	r5, #0
		bw[AM] = newbw;
 8000c88:	f888 2000 	strb.w	r2, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000c90:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <Tune_Preset+0x144>)
 8000c94:	492a      	ldr	r1, [pc, #168]	; (8000d40 <Tune_Preset+0x164>)
 8000c96:	482b      	ldr	r0, [pc, #172]	; (8000d44 <Tune_Preset+0x168>)
 8000c98:	f001 f844 	bl	8001d24 <SDR_2R_toC_f32>
		break;
 8000c9c:	e7d6      	b.n	8000c4c <Tune_Preset+0x70>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c9e:	1e17      	subs	r7, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000ca0:	4923      	ldr	r1, [pc, #140]	; (8000d30 <Tune_Preset+0x154>)
		LSBindex = 0; // TODO toglimi
 8000ca2:	4829      	ldr	r0, [pc, #164]	; (8000d48 <Tune_Preset+0x16c>)
 8000ca4:	f04f 0500 	mov.w	r5, #0
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8000ca8:	bf18      	it	ne
 8000caa:	2701      	movne	r7, #1
		bw[LSB] = newbw;
 8000cac:	f888 2001 	strb.w	r2, [r8, #1]
		AMindex = (newbw == Narrow) ? 0 : 1;
 8000cb0:	e7de      	b.n	8000c70 <Tune_Preset+0x94>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000cb2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000d4c <Tune_Preset+0x170>
 8000cb6:	f898 0000 	ldrb.w	r0, [r8]
 8000cba:	f7ff fed7 	bl	8000a6c <SetBW>
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <Tune_Preset+0x138>)
 8000cc0:	7818      	ldrb	r0, [r3, #0]
 8000cc2:	f7ff ff35 	bl	8000b30 <SetAGC>
		break;
 8000cc6:	783b      	ldrb	r3, [r7, #0]

	default :
		break;
	}
}	
 8000cc8:	e7a8      	b.n	8000c1c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000cca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8000d4c <Tune_Preset+0x170>
 8000cce:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000cd2:	f7ff fecb 	bl	8000a6c <SetBW>
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <Tune_Preset+0x138>)
 8000cd8:	7858      	ldrb	r0, [r3, #1]
 8000cda:	f7ff ff29 	bl	8000b30 <SetAGC>
		break;
 8000cde:	783b      	ldrb	r3, [r7, #0]
 8000ce0:	e79c      	b.n	8000c1c <Tune_Preset+0x40>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ce2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000d4c <Tune_Preset+0x170>
 8000ce6:	f898 0002 	ldrb.w	r0, [r8, #2]
 8000cea:	f7ff febf 	bl	8000a6c <SetBW>
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <Tune_Preset+0x138>)
 8000cf0:	7898      	ldrb	r0, [r3, #2]
 8000cf2:	f7ff ff1d 	bl	8000b30 <SetAGC>
		break;
 8000cf6:	783b      	ldrb	r3, [r7, #0]
 8000cf8:	e790      	b.n	8000c1c <Tune_Preset+0x40>
	SetBW( psets[Idx].bw);
 8000cfa:	2318      	movs	r3, #24
	CurrentBW = newbw;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <Tune_Preset+0x13c>)
	SetBW( psets[Idx].bw);
 8000cfe:	fb03 6300 	mla	r3, r3, r0, r6
	CurrentBW = newbw;
 8000d02:	7d5b      	ldrb	r3, [r3, #21]
 8000d04:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8000d06:	e7a1      	b.n	8000c4c <Tune_Preset+0x70>
 8000d08:	24009b38 	.word	0x24009b38
 8000d0c:	2400acfc 	.word	0x2400acfc
 8000d10:	2400de20 	.word	0x2400de20
 8000d14:	24008a48 	.word	0x24008a48
 8000d18:	24001e74 	.word	0x24001e74
 8000d1c:	24009ce4 	.word	0x24009ce4
 8000d20:	20004000 	.word	0x20004000
 8000d24:	08014058 	.word	0x08014058
 8000d28:	08015058 	.word	0x08015058
 8000d2c:	2400589c 	.word	0x2400589c
 8000d30:	2400f246 	.word	0x2400f246
 8000d34:	240092a8 	.word	0x240092a8
 8000d38:	08016058 	.word	0x08016058
 8000d3c:	08017058 	.word	0x08017058
 8000d40:	08012058 	.word	0x08012058
 8000d44:	08013058 	.word	0x08013058
 8000d48:	2400f244 	.word	0x2400f244
 8000d4c:	24009ce8 	.word	0x24009ce8

08000d50 <SetMode>:
{
 8000d50:	b508      	push	{r3, lr}
	CurrentMode = newmode;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <SetMode+0x64>)
 8000d54:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8000d56:	2803      	cmp	r0, #3
 8000d58:	d82b      	bhi.n	8000db2 <SetMode+0x62>
 8000d5a:	e8df f000 	tbb	[pc, r0]
 8000d5e:	160c      	.short	0x160c
 8000d60:	0220      	.short	0x0220
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <SetMode+0x68>)
 8000d64:	78d8      	ldrb	r0, [r3, #3]
 8000d66:	f7ff fe81 	bl	8000a6c <SetBW>
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <SetMode+0x6c>)
 8000d6c:	78d8      	ldrb	r0, [r3, #3]
}	
 8000d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000d72:	f7ff bedd 	b.w	8000b30 <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <SetMode+0x68>)
 8000d78:	7818      	ldrb	r0, [r3, #0]
 8000d7a:	f7ff fe77 	bl	8000a6c <SetBW>
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <SetMode+0x6c>)
 8000d80:	7818      	ldrb	r0, [r3, #0]
}	
 8000d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000d86:	f7ff bed3 	b.w	8000b30 <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <SetMode+0x68>)
 8000d8c:	7858      	ldrb	r0, [r3, #1]
 8000d8e:	f7ff fe6d 	bl	8000a6c <SetBW>
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <SetMode+0x6c>)
 8000d94:	7858      	ldrb	r0, [r3, #1]
}	
 8000d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000d9a:	f7ff bec9 	b.w	8000b30 <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SetMode+0x68>)
 8000da0:	7898      	ldrb	r0, [r3, #2]
 8000da2:	f7ff fe63 	bl	8000a6c <SetBW>
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SetMode+0x6c>)
 8000da8:	7898      	ldrb	r0, [r3, #2]
}	
 8000daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000dae:	f7ff bebf 	b.w	8000b30 <SetAGC>
}	
 8000db2:	bd08      	pop	{r3, pc}
 8000db4:	2400de20 	.word	0x2400de20
 8000db8:	24009ce8 	.word	0x24009ce8
 8000dbc:	24008a48 	.word	0x24008a48

08000dc0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 8000dc0:	2809      	cmp	r0, #9
{
 8000dc2:	b508      	push	{r3, lr}
	if (idx == 9)
 8000dc4:	d012      	beq.n	8000dec <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 8000dc6:	f1c0 0005 	rsb	r0, r0, #5
 8000dca:	ee06 0a90 	vmov	s13, r0
 8000dce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000df8 <SetFstep+0x38>
 8000dd2:	eeb8 0be6 	vcvt.f64.s32	d0, s13
 8000dd6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000dda:	f00f ffd5 	bl	8010d88 <exp>
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <SetFstep+0x40>)
 8000de0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 8000de4:	ee17 3a90 	vmov	r3, s15
 8000de8:	6013      	str	r3, [r2, #0]
}	
 8000dea:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 8000dec:	f242 3328 	movw	r3, #9000	; 0x2328
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <SetFstep+0x40>)
 8000df2:	6013      	str	r3, [r2, #0]
}	
 8000df4:	bd08      	pop	{r3, pc}
 8000df6:	bf00      	nop
 8000df8:	bbb55516 	.word	0xbbb55516
 8000dfc:	40026bb1 	.word	0x40026bb1
 8000e00:	2400de18 	.word	0x2400de18

08000e04 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <FplusClicked+0xb4>)
 8000e06:	ee07 0a90 	vmov	s15, r0
 8000e0a:	4a2c      	ldr	r2, [pc, #176]	; (8000ebc <FplusClicked+0xb8>)
 8000e0c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000e10:	ed93 6a00 	vldr	s12, [r3]
 8000e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e18:	ed92 7a00 	vldr	s14, [r2]
 8000e1c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <FplusClicked+0xbc>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000e22:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000e26:	4927      	ldr	r1, [pc, #156]	; (8000ec4 <FplusClicked+0xc0>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000e28:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000ec8 <FplusClicked+0xc4>
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000e2c:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000e30:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000e32:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4c24      	ldr	r4, [pc, #144]	; (8000ecc <FplusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000e3a:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000e3c:	eea6 7b04 	vfma.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e40:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000e42:	7560      	strb	r0, [r4, #21]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8000e44:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8000e48:	fe87 7a65 	vminnm.f32	s14, s14, s11
 8000e4c:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000e50:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d80b      	bhi.n	8000e70 <FplusClicked+0x6c>
 8000e58:	e8df f003 	tbb	[pc, r3]
 8000e5c:	02241b12 	.word	0x02241b12
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e60:	78c8      	ldrb	r0, [r1, #3]
 8000e62:	f7ff fe03 	bl	8000a6c <SetBW>
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <FplusClicked+0xcc>)
 8000e68:	78d8      	ldrb	r0, [r3, #3]
 8000e6a:	f7ff fe61 	bl	8000b30 <SetAGC>
		break;
 8000e6e:	7d60      	ldrb	r0, [r4, #21]
	SetBW( psets[Idx].bw);
 8000e70:	f7ff fdfc 	bl	8000a6c <SetBW>
	strcpy(msg, psets[Idx].name);
 8000e74:	4915      	ldr	r1, [pc, #84]	; (8000ecc <FplusClicked+0xc8>)
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <FplusClicked+0xd0>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000e7c:	f00d bde6 	b.w	800ea4c <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e80:	7808      	ldrb	r0, [r1, #0]
 8000e82:	f7ff fdf3 	bl	8000a6c <SetBW>
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <FplusClicked+0xcc>)
 8000e88:	7818      	ldrb	r0, [r3, #0]
 8000e8a:	f7ff fe51 	bl	8000b30 <SetAGC>
		break;
 8000e8e:	7d60      	ldrb	r0, [r4, #21]
}	
 8000e90:	e7ee      	b.n	8000e70 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e92:	7848      	ldrb	r0, [r1, #1]
 8000e94:	f7ff fdea 	bl	8000a6c <SetBW>
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <FplusClicked+0xcc>)
 8000e9a:	7858      	ldrb	r0, [r3, #1]
 8000e9c:	f7ff fe48 	bl	8000b30 <SetAGC>
		break;
 8000ea0:	7d60      	ldrb	r0, [r4, #21]
 8000ea2:	e7e5      	b.n	8000e70 <FplusClicked+0x6c>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000ea4:	7888      	ldrb	r0, [r1, #2]
 8000ea6:	f7ff fde1 	bl	8000a6c <SetBW>
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <FplusClicked+0xcc>)
 8000eac:	7898      	ldrb	r0, [r3, #2]
 8000eae:	f7ff fe3f 	bl	8000b30 <SetAGC>
		break;
 8000eb2:	7d60      	ldrb	r0, [r4, #21]
 8000eb4:	e7dc      	b.n	8000e70 <FplusClicked+0x6c>
 8000eb6:	bf00      	nop
 8000eb8:	2400de18 	.word	0x2400de18
 8000ebc:	2400acfc 	.word	0x2400acfc
 8000ec0:	2400de20 	.word	0x2400de20
 8000ec4:	24009ce8 	.word	0x24009ce8
 8000ec8:	4c3ebc20 	.word	0x4c3ebc20
 8000ecc:	24009b38 	.word	0x24009b38
 8000ed0:	24008a48 	.word	0x24008a48
 8000ed4:	2400589c 	.word	0x2400589c

08000ed8 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <FminusClicked+0xb4>)
 8000eda:	ee07 0a90 	vmov	s15, r0
 8000ede:	4a2c      	ldr	r2, [pc, #176]	; (8000f90 <FminusClicked+0xb8>)
 8000ee0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8000ee4:	ed93 6a00 	vldr	s12, [r3]
 8000ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eec:	ed92 7a00 	vldr	s14, [r2]
 8000ef0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <FminusClicked+0xbc>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000ef6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	psets[0].bw = bw[CurrentMode];
 8000efa:	4927      	ldr	r1, [pc, #156]	; (8000f98 <FminusClicked+0xc0>)
	LOfreq  = max(LOfreq, 8000.f);
 8000efc:	eddf 5a27 	vldr	s11, [pc, #156]	; 8000f9c <FminusClicked+0xc4>
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000f00:	ee26 6a26 	vmul.f32	s12, s12, s13
{	
 8000f04:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000f06:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4c24      	ldr	r4, [pc, #144]	; (8000fa0 <FminusClicked+0xc8>)
	psets[0].bw = bw[CurrentMode];
 8000f0e:	5cc8      	ldrb	r0, [r1, r3]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000f10:	eea6 7b44 	vfms.f64	d7, d6, d4
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f14:	7523      	strb	r3, [r4, #20]
	psets[0].bw = bw[CurrentMode];
 8000f16:	7560      	strb	r0, [r4, #21]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8000f18:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8000f1c:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 8000f20:	ed82 7a00 	vstr	s14, [r2]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000f24:	ed84 7a04 	vstr	s14, [r4, #16]
	switch(CurrentMode)
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d80b      	bhi.n	8000f44 <FminusClicked+0x6c>
 8000f2c:	e8df f003 	tbb	[pc, r3]
 8000f30:	02241b12 	.word	0x02241b12
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000f34:	78c8      	ldrb	r0, [r1, #3]
 8000f36:	f7ff fd99 	bl	8000a6c <SetBW>
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <FminusClicked+0xcc>)
 8000f3c:	78d8      	ldrb	r0, [r3, #3]
 8000f3e:	f7ff fdf7 	bl	8000b30 <SetAGC>
		break;
 8000f42:	7d60      	ldrb	r0, [r4, #21]
	SetBW( psets[Idx].bw);
 8000f44:	f7ff fd92 	bl	8000a6c <SetBW>
	strcpy(msg, psets[Idx].name);
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <FminusClicked+0xc8>)
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <FminusClicked+0xd0>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8000f50:	f00d bd7c 	b.w	800ea4c <strcpy>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000f54:	7808      	ldrb	r0, [r1, #0]
 8000f56:	f7ff fd89 	bl	8000a6c <SetBW>
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <FminusClicked+0xcc>)
 8000f5c:	7818      	ldrb	r0, [r3, #0]
 8000f5e:	f7ff fde7 	bl	8000b30 <SetAGC>
		break;
 8000f62:	7d60      	ldrb	r0, [r4, #21]
}	
 8000f64:	e7ee      	b.n	8000f44 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000f66:	7848      	ldrb	r0, [r1, #1]
 8000f68:	f7ff fd80 	bl	8000a6c <SetBW>
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <FminusClicked+0xcc>)
 8000f6e:	7858      	ldrb	r0, [r3, #1]
 8000f70:	f7ff fdde 	bl	8000b30 <SetAGC>
		break;
 8000f74:	7d60      	ldrb	r0, [r4, #21]
 8000f76:	e7e5      	b.n	8000f44 <FminusClicked+0x6c>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000f78:	7888      	ldrb	r0, [r1, #2]
 8000f7a:	f7ff fd77 	bl	8000a6c <SetBW>
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <FminusClicked+0xcc>)
 8000f80:	7898      	ldrb	r0, [r3, #2]
 8000f82:	f7ff fdd5 	bl	8000b30 <SetAGC>
		break;
 8000f86:	7d60      	ldrb	r0, [r4, #21]
 8000f88:	e7dc      	b.n	8000f44 <FminusClicked+0x6c>
 8000f8a:	bf00      	nop
 8000f8c:	2400de18 	.word	0x2400de18
 8000f90:	2400acfc 	.word	0x2400acfc
 8000f94:	2400de20 	.word	0x2400de20
 8000f98:	24009ce8 	.word	0x24009ce8
 8000f9c:	45fa0000 	.word	0x45fa0000
 8000fa0:	24009b38 	.word	0x24009b38
 8000fa4:	24008a48 	.word	0x24008a48
 8000fa8:	2400589c 	.word	0x2400589c

08000fac <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_GPIO_EXTI_Callback>:
	volatile float tmp;
	float BinValue;
	int16_t i;


	if (TransmissionEnabled && SW01_IN)
 8000fb0:	4bc1      	ldr	r3, [pc, #772]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x308>)
{
 8000fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (TransmissionEnabled && SW01_IN)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
{
 8000fb6:	b083      	sub	sp, #12
	if (TransmissionEnabled && SW01_IN)
 8000fb8:	b13b      	cbz	r3, 8000fca <HAL_GPIO_EXTI_Callback+0x1a>
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	48bf      	ldr	r0, [pc, #764]	; (80012bc <HAL_GPIO_EXTI_Callback+0x30c>)
 8000fc0:	f006 f8a8 	bl	8007114 <HAL_GPIO_ReadPin>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	f000 8161 	beq.w	800128c <HAL_GPIO_EXTI_Callback+0x2dc>
	{
		CarrierEnable(1);
	}
	else
	{
		CarrierEnable(0);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f002 f814 	bl	8002ff8 <CarrierEnable>

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd4:	49ba      	ldr	r1, [pc, #744]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x310>)
 8000fd6:	48bb      	ldr	r0, [pc, #748]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x314>)
 8000fd8:	f000 ffb2 	bl	8001f40 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8000fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe0:	49b9      	ldr	r1, [pc, #740]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x318>)
 8000fe2:	48ba      	ldr	r0, [pc, #744]	; (80012cc <HAL_GPIO_EXTI_Callback+0x31c>)
 8000fe4:	f000 ffac 	bl	8001f40 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8000fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fec:	4ab8      	ldr	r2, [pc, #736]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x320>)
 8000fee:	49b5      	ldr	r1, [pc, #724]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x314>)
 8000ff0:	48b8      	ldr	r0, [pc, #736]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x324>)
 8000ff2:	f00c fb2d 	bl	800d650 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8000ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ffa:	4ab7      	ldr	r2, [pc, #732]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x328>)
 8000ffc:	49b3      	ldr	r1, [pc, #716]	; (80012cc <HAL_GPIO_EXTI_Callback+0x31c>)
 8000ffe:	48b7      	ldr	r0, [pc, #732]	; (80012dc <HAL_GPIO_EXTI_Callback+0x32c>)
 8001000:	f00c fb26 	bl	800d650 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001004:	49b6      	ldr	r1, [pc, #728]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x330>)
 8001006:	f44f 6280 	mov.w	r2, #1024	; 0x400
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);



	// copy into the (in place...) FFT buffer
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 800100a:	4cb6      	ldr	r4, [pc, #728]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x334>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800100c:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
*/

// TODO: check why with the original code above LSB and USB are swapped

 //if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001010:	4db5      	ldr	r5, [pc, #724]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x338>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001012:	f000 ff95 	bl	8001f40 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8001016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101a:	4ab1      	ldr	r2, [pc, #708]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x330>)
 800101c:	49ae      	ldr	r1, [pc, #696]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x328>)
 800101e:	48ac      	ldr	r0, [pc, #688]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x320>)
 8001020:	f000 fe80 	bl	8001d24 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8001024:	4620      	mov	r0, r4
 8001026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800102a:	49b0      	ldr	r1, [pc, #704]	; (80012ec <HAL_GPIO_EXTI_Callback+0x33c>)
 800102c:	f000 ff88 	bl	8001f40 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8001030:	2301      	movs	r3, #1
 8001032:	4621      	mov	r1, r4
 8001034:	2200      	movs	r2, #0
 8001036:	48ae      	ldr	r0, [pc, #696]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x340>)
 8001038:	f00c fa4c 	bl	800d4d4 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800103c:	782b      	ldrb	r3, [r5, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	f000 811e 	beq.w	8001280 <HAL_GPIO_EXTI_Callback+0x2d0>

#ifdef TEST_WF
	if (ShowWF) {
 8001044:	4bab      	ldr	r3, [pc, #684]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x344>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d04a      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0x132>
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 800104c:	2300      	movs	r3, #0
 800104e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001052:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001056:	b29b      	uxth	r3, r3
 8001058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800105c:	d241      	bcs.n	80010e2 <HAL_GPIO_EXTI_Callback+0x132>
 800105e:	4ea6      	ldr	r6, [pc, #664]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x348>)
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001060:	2700      	movs	r7, #0
		{
			tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 8001062:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001066:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800106a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800106e:	b292      	uxth	r2, r2
 8001070:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8001074:	b29b      	uxth	r3, r3
 8001076:	b280      	uxth	r0, r0
 8001078:	b289      	uxth	r1, r1
 800107a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800107e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001082:	edd0 7a01 	vldr	s15, [r0, #4]
 8001086:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800108a:	ed91 7a01 	vldr	s14, [r1, #4]
 800108e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001092:	edd2 6a00 	vldr	s13, [r2]
 8001096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80010a2:	edcd 7a01 	vstr	s15, [sp, #4]
			arm_sqrt_f32(tmp, &WFBuffer[WFSample >> 1]);
 80010a6:	eddd 7a01 	vldr	s15, [sp, #4]
 80010aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80010ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80010be:	f2c0 8143 	blt.w	8001348 <HAL_GPIO_EXTI_Callback+0x398>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80010c2:	eeb1 7ae7 	vsqrt.f32	s14, s15
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 80010c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80010ca:	3302      	adds	r3, #2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 80010d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010dc:	ed82 7a00 	vstr	s14, [r2]
 80010e0:	d3bf      	bcc.n	8001062 <HAL_GPIO_EXTI_Callback+0xb2>

#ifdef CW_DECODER

	CWLevel = 0;
	BaseNoiseLevel = 9999.f;
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010e2:	2330      	movs	r3, #48	; 0x30
	CWLevel = 0;
 80010e4:	4e85      	ldr	r6, [pc, #532]	; (80012fc <HAL_GPIO_EXTI_Callback+0x34c>)
 80010e6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001300 <HAL_GPIO_EXTI_Callback+0x350>
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 80010ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	BaseNoiseLevel = 9999.f;
 80010f2:	4884      	ldr	r0, [pc, #528]	; (8001304 <HAL_GPIO_EXTI_Callback+0x354>)
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010f4:	b29b      	uxth	r3, r3
	BaseNoiseLevel = 9999.f;
 80010f6:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8001308 <HAL_GPIO_EXTI_Callback+0x358>
	CWLevel = 0;
 80010fa:	ed86 7a00 	vstr	s14, [r6]
	for (WFSample=48; WFSample<68; WFSample += 2)
 80010fe:	2b43      	cmp	r3, #67	; 0x43
	BaseNoiseLevel = 9999.f;
 8001100:	ed80 6a00 	vstr	s12, [r0]
	for (WFSample=48; WFSample<68; WFSample += 2)
 8001104:	f200 80c6 	bhi.w	8001294 <HAL_GPIO_EXTI_Callback+0x2e4>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001108:	eeb0 5a47 	vmov.f32	s10, s14
		//	for (WFSample=64; WFSample<84; WFSample += 2)
		//		for (WFSample=2*FFTLEN -50; WFSample<(2*FFTLEN - 40); WFSample += 2)
		//for (WFSample=46; WFSample<52; WFSample += 2)
	{
		tmp = FFTbuf[WFSample] * FFTbuf[WFSample] + FFTbuf[WFSample+1] * FFTbuf[WFSample+1];
 800110c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001110:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001114:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8001118:	b292      	uxth	r2, r2
 800111a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800111e:	b29b      	uxth	r3, r3
 8001120:	b2bf      	uxth	r7, r7
 8001122:	b289      	uxth	r1, r1
 8001124:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8001128:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800112c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001130:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001134:	edd1 5a01 	vldr	s11, [r1, #4]
 8001138:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800113c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001140:	edd2 6a00 	vldr	s13, [r2]
 8001144:	edd3 5a00 	vldr	s11, [r3]
 8001148:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800114c:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &BinValue);
 8001150:	eddd 6a01 	vldr	s13, [sp, #4]
	for (WFSample=48; WFSample<68; WFSample += 2)
 8001154:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    if (in >= 0.0f)
 8001158:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800115c:	3302      	adds	r3, #2
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	b29b      	uxth	r3, r3
 8001164:	f8ad 3002 	strh.w	r3, [sp, #2]
      *pOut = sqrtf(in);
 8001168:	bfa8      	it	ge
 800116a:	eef1 7ae6 	vsqrtge.f32	s15, s13
 800116e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001172:	b29b      	uxth	r3, r3
      *pOut = 0.0f;
 8001174:	bfb8      	it	lt
 8001176:	eef0 7a45 	vmovlt.f32	s15, s10
 800117a:	2b43      	cmp	r3, #67	; 0x43
 800117c:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
		if (CWLevel < BinValue)
			CWLevel = BinValue;
		if (BaseNoiseLevel > BinValue)
 8001180:	fe86 6a67 	vminnm.f32	s12, s12, s15
	for (WFSample=48; WFSample<68; WFSample += 2)
 8001184:	d9c2      	bls.n	800110c <HAL_GPIO_EXTI_Callback+0x15c>
 8001186:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 800118a:	ed86 7a00 	vstr	s14, [r6]
 800118e:	ed80 6a00 	vstr	s12, [r0]
 8001192:	ee37 7a46 	vsub.f32	s14, s14, s12
 8001196:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80012a0 <HAL_GPIO_EXTI_Callback+0x2f0>
 800119a:	ee25 6b06 	vmul.f64	d6, d5, d6
			BaseNoiseLevel = BinValue;
	}
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <HAL_GPIO_EXTI_Callback+0x35c>)
	//We shorten the pulse by filtering out the first sample at attack.
	// This gives a 50% duty cycle for a square wave.
	// Without filter a square wave would have an higher on time than off time.

	//		if (CWLevel > (SignalAverage * CWThreshold))
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 80011a0:	495b      	ldr	r1, [pc, #364]	; (8001310 <HAL_GPIO_EXTI_Callback+0x360>)
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 80011a2:	ed93 5a00 	vldr	s10, [r3]
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 80011a6:	edd1 7a00 	vldr	s15, [r1]
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 80011aa:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80011ae:	4a59      	ldr	r2, [pc, #356]	; (8001314 <HAL_GPIO_EXTI_Callback+0x364>)
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 80011b0:	eef4 7ac7 	vcmpe.f32	s15, s14
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 80011b4:	ed9f 4b3c 	vldr	d4, [pc, #240]	; 80012a8 <HAL_GPIO_EXTI_Callback+0x2f8>
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 80011bc:	eea5 6b04 	vfma.f64	d6, d5, d4
 80011c0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	OldSignalAverage = SignalAverage;
 80011c4:	ed83 6a00 	vstr	s12, [r3]
	SignalAverage = SIGNAL_AVERAGE_T_CONST * CWLevel + (1 - SIGNAL_AVERAGE_T_CONST) * OldSignalAverage;
 80011c8:	ed82 6a00 	vstr	s12, [r2]
	if (CWLevel - BaseNoiseLevel > (CWThreshold))
 80011cc:	d550      	bpl.n	8001270 <HAL_GPIO_EXTI_Callback+0x2c0>
		//			if (CWLevel / BaseNoiseLevel > (CWThreshold))
		//			if (!SW01_IN)
		CWIn += 1; //TODO limit CW increase
 80011ce:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_EXTI_Callback+0x368>)
 80011d0:	7813      	ldrb	r3, [r2, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	7013      	strb	r3, [r2, #0]
	else
		CWIn = 0;

	DecodeCW();
 80011d8:	f7ff fbea 	bl	80009b0 <DecodeCW>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	4a4e      	ldr	r2, [pc, #312]	; (800131c <HAL_GPIO_EXTI_Callback+0x36c>)
 80011e2:	494f      	ldr	r1, [pc, #316]	; (8001320 <HAL_GPIO_EXTI_Callback+0x370>)
 80011e4:	483f      	ldr	r0, [pc, #252]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x334>)
 80011e6:	f00c fbeb 	bl	800d9c0 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80011ea:	2301      	movs	r3, #1
 80011ec:	494b      	ldr	r1, [pc, #300]	; (800131c <HAL_GPIO_EXTI_Callback+0x36c>)
 80011ee:	461a      	mov	r2, r3
 80011f0:	483f      	ldr	r0, [pc, #252]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x340>)
 80011f2:	f00c f96f 	bl	800d4d4 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	494a      	ldr	r1, [pc, #296]	; (8001324 <HAL_GPIO_EXTI_Callback+0x374>)
 80011fc:	484a      	ldr	r0, [pc, #296]	; (8001328 <HAL_GPIO_EXTI_Callback+0x378>)
 80011fe:	f000 fe9f 	bl	8001f40 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001202:	782b      	ldrb	r3, [r5, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d823      	bhi.n	8001250 <HAL_GPIO_EXTI_Callback+0x2a0>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d134      	bne.n	8001276 <HAL_GPIO_EXTI_Callback+0x2c6>
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 800120c:	4947      	ldr	r1, [pc, #284]	; (800132c <HAL_GPIO_EXTI_Callback+0x37c>)
 800120e:	4846      	ldr	r0, [pc, #280]	; (8001328 <HAL_GPIO_EXTI_Callback+0x378>)
 8001210:	f000 ffec 	bl	80021ec <SDR_demodAM_AGC>
#endif


	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <HAL_GPIO_EXTI_Callback+0x380>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b183      	cbz	r3, 800123c <HAL_GPIO_EXTI_Callback+0x28c>
 800121a:	4a44      	ldr	r2, [pc, #272]	; (800132c <HAL_GPIO_EXTI_Callback+0x37c>)
 800121c:	2300      	movs	r3, #0
		for (i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = 0.1; //Volume
			else
				fAudio[i] = -0.1;
 800121e:	4845      	ldr	r0, [pc, #276]	; (8001334 <HAL_GPIO_EXTI_Callback+0x384>)
				fAudio[i] = 0.1; //Volume
 8001220:	4945      	ldr	r1, [pc, #276]	; (8001338 <HAL_GPIO_EXTI_Callback+0x388>)
			if (i % 64 > 31)
 8001222:	069c      	lsls	r4, r3, #26
 8001224:	f103 0301 	add.w	r3, r3, #1
 8001228:	f102 0204 	add.w	r2, r2, #4
				fAudio[i] = 0.1; //Volume
 800122c:	bf4c      	ite	mi
 800122e:	f842 1c04 	strmi.w	r1, [r2, #-4]
				fAudio[i] = -0.1;
 8001232:	f842 0c04 	strpl.w	r0, [r2, #-4]
		for (i=0; i<BSIZE; i++)
 8001236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123a:	d1f2      	bne.n	8001222 <HAL_GPIO_EXTI_Callback+0x272>


	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800123c:	4b3f      	ldr	r3, [pc, #252]	; (800133c <HAL_GPIO_EXTI_Callback+0x38c>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	483a      	ldr	r0, [pc, #232]	; (800132c <HAL_GPIO_EXTI_Callback+0x37c>)
 8001244:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001246:	b003      	add	sp, #12
 8001248:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800124c:	f000 be0e 	b.w	8001e6c <SDR_float_to_DAC_audio>
	switch(CurrentMode)
 8001250:	2b03      	cmp	r3, #3
 8001252:	d1df      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x264>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001254:	4935      	ldr	r1, [pc, #212]	; (800132c <HAL_GPIO_EXTI_Callback+0x37c>)
 8001256:	4834      	ldr	r0, [pc, #208]	; (8001328 <HAL_GPIO_EXTI_Callback+0x378>)
 8001258:	f001 f844 	bl	80022e4 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <HAL_GPIO_EXTI_Callback+0x390>)
 800125e:	78db      	ldrb	r3, [r3, #3]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1d7      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x264>
			SDR_CWPeak(fAudio, BSIZE);
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	4830      	ldr	r0, [pc, #192]	; (800132c <HAL_GPIO_EXTI_Callback+0x37c>)
 800126a:	f000 ff2f 	bl	80020cc <SDR_CWPeak>
 800126e:	e7d1      	b.n	8001214 <HAL_GPIO_EXTI_Callback+0x264>
		CWIn = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_GPIO_EXTI_Callback+0x368>)
 8001274:	e7af      	b.n	80011d6 <HAL_GPIO_EXTI_Callback+0x226>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 8001276:	492d      	ldr	r1, [pc, #180]	; (800132c <HAL_GPIO_EXTI_Callback+0x37c>)
 8001278:	482b      	ldr	r0, [pc, #172]	; (8001328 <HAL_GPIO_EXTI_Callback+0x378>)
 800127a:	f001 f833 	bl	80022e4 <SDR_demodSSB_CW_AGC>
 800127e:	e7c9      	b.n	8001214 <HAL_GPIO_EXTI_Callback+0x264>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001284:	4620      	mov	r0, r4
 8001286:	f000 fe77 	bl	8001f78 <SDR_mirror_LSB>
 800128a:	e6db      	b.n	8001044 <HAL_GPIO_EXTI_Callback+0x94>
		CarrierEnable(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f001 feb3 	bl	8002ff8 <CarrierEnable>
 8001292:	e69d      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x20>
	for (WFSample=48; WFSample<68; WFSample += 2)
 8001294:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80012b0 <HAL_GPIO_EXTI_Callback+0x300>
 8001298:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001344 <HAL_GPIO_EXTI_Callback+0x394>
 800129c:	e77f      	b.n	800119e <HAL_GPIO_EXTI_Callback+0x1ee>
 800129e:	bf00      	nop
 80012a0:	9999999a 	.word	0x9999999a
 80012a4:	3fc99999 	.word	0x3fc99999
 80012a8:	9999999a 	.word	0x9999999a
 80012ac:	3fe99999 	.word	0x3fe99999
	...
 80012b8:	24009c88 	.word	0x24009c88
 80012bc:	58020800 	.word	0x58020800
 80012c0:	2000d000 	.word	0x2000d000
 80012c4:	20009000 	.word	0x20009000
 80012c8:	2000b000 	.word	0x2000b000
 80012cc:	20007000 	.word	0x20007000
 80012d0:	20006800 	.word	0x20006800
 80012d4:	24001a64 	.word	0x24001a64
 80012d8:	20006000 	.word	0x20006000
 80012dc:	24009b28 	.word	0x24009b28
 80012e0:	24002e80 	.word	0x24002e80
 80012e4:	20002000 	.word	0x20002000
 80012e8:	2400de20 	.word	0x2400de20
 80012ec:	24001e80 	.word	0x24001e80
 80012f0:	080182f0 	.word	0x080182f0
 80012f4:	24009b34 	.word	0x24009b34
 80012f8:	2400ce10 	.word	0x2400ce10
 80012fc:	240060d0 	.word	0x240060d0
 8001300:	00000000 	.word	0x00000000
 8001304:	240060d4 	.word	0x240060d4
 8001308:	461c3c00 	.word	0x461c3c00
 800130c:	2400ce04 	.word	0x2400ce04
 8001310:	2400929c 	.word	0x2400929c
 8001314:	240058c4 	.word	0x240058c4
 8001318:	24008a4c 	.word	0x24008a4c
 800131c:	20000000 	.word	0x20000000
 8001320:	20004000 	.word	0x20004000
 8001324:	20001000 	.word	0x20001000
 8001328:	24003fec 	.word	0x24003fec
 800132c:	2400de24 	.word	0x2400de24
 8001330:	240089e0 	.word	0x240089e0
 8001334:	bdcccccd 	.word	0xbdcccccd
 8001338:	3dcccccd 	.word	0x3dcccccd
 800133c:	240058cc 	.word	0x240058cc
 8001340:	24009ce8 	.word	0x24009ce8
 8001344:	c61c3c00 	.word	0xc61c3c00
		for (WFSample=0; WFSample<(FFTLEN * 2); WFSample += 2)
 8001348:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800134c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001350:	3202      	adds	r2, #2
 8001352:	601f      	str	r7, [r3, #0]
 8001354:	b293      	uxth	r3, r2
 8001356:	f8ad 3002 	strh.w	r3, [sp, #2]
 800135a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800135e:	b29b      	uxth	r3, r3
 8001360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001364:	f4ff ae7d 	bcc.w	8001062 <HAL_GPIO_EXTI_Callback+0xb2>
 8001368:	e6bb      	b.n	80010e2 <HAL_GPIO_EXTI_Callback+0x132>
 800136a:	bf00      	nop

0800136c <ADC_Stream0_Handler>:
// by DMA2 Stream when a new ADC buffer is just filled
// Frequency is FADC / bitsPerSampleADC / BSIZE/2
// 150000000 /16 /512 = 18310,54688

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 800136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 8001370:	4a79      	ldr	r2, [pc, #484]	; (8001558 <ADC_Stream0_Handler+0x1ec>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001372:	4e7a      	ldr	r6, [pc, #488]	; (800155c <ADC_Stream0_Handler+0x1f0>)
{
 8001374:	ed2d 8b10 	vpush	{d8-d15}
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001378:	f5a6 6180 	sub.w	r1, r6, #1024	; 0x400
	if(CurrentMode == CW)
 800137c:	7812      	ldrb	r2, [r2, #0]
{
 800137e:	b097      	sub	sp, #92	; 0x5c
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8001380:	2800      	cmp	r0, #0
 8001382:	bf08      	it	eq
 8001384:	460e      	moveq	r6, r1
	if(CurrentMode == CW)
 8001386:	2a03      	cmp	r2, #3
 8001388:	f000 83ff 	beq.w	8001b8a <ADC_Stream0_Handler+0x81e>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800138c:	4b74      	ldr	r3, [pc, #464]	; (8001560 <ADC_Stream0_Handler+0x1f4>)
 800138e:	ed93 0a00 	vldr	s0, [r3]
 8001392:	f000 fc0b 	bl	8001bac <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 8001396:	f206 32fe 	addw	r2, r6, #1022	; 0x3fe
 800139a:	1eb5      	subs	r5, r6, #2
	sum = 0; k = BSIZE;
 800139c:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8001564 <ADC_Stream0_Handler+0x1f8>
	{
		sum += pR[k-1];
 80013a0:	8811      	ldrh	r1, [r2, #0]
 80013a2:	3a08      	subs	r2, #8
		sum += pR[k-2];
 80013a4:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 80013a6:	b289      	uxth	r1, r1
		sum += pR[k-3];
 80013a8:	8890      	ldrh	r0, [r2, #4]
		sum += pR[k-2];
 80013aa:	b29b      	uxth	r3, r3
		sum += pR[k-1];
 80013ac:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-3];
 80013b0:	b280      	uxth	r0, r0
		sum += pR[k-4];
 80013b2:	8851      	ldrh	r1, [r2, #2]
	while(k)
 80013b4:	4295      	cmp	r5, r2
		sum += pR[k-1];
 80013b6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-2];
 80013ba:	ee07 3a90 	vmov	s15, r3
		sum += pR[k-4];
 80013be:	b289      	uxth	r1, r1
		sum += pR[k-2];
 80013c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		sum += pR[k-3];
 80013c4:	ee07 0a90 	vmov	s15, r0
		sum += pR[k-4];
 80013c8:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		sum += pR[k-4];
 80013d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80013d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80013dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013e0:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80013e4:	d1dc      	bne.n	80013a0 <ADC_Stream0_Handler+0x34>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80013e6:	f8b6 3200 	ldrh.w	r3, [r6, #512]	; 0x200

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80013ea:	4630      	mov	r0, r6
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013ec:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001568 <ADC_Stream0_Handler+0x1fc>
 80013f0:	2400      	movs	r4, #0
	TestSampledValue=pR[BSIZE/2];
 80013f2:	b29b      	uxth	r3, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80013f4:	4d5d      	ldr	r5, [pc, #372]	; (800156c <ADC_Stream0_Handler+0x200>)
 80013f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80013fa:	4e5d      	ldr	r6, [pc, #372]	; (8001570 <ADC_Stream0_Handler+0x204>)
	TestSampledValue=pR[BSIZE/2];
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	4f5c      	ldr	r7, [pc, #368]	; (8001574 <ADC_Stream0_Handler+0x208>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001402:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <ADC_Stream0_Handler+0x20c>)
	TestSampledValue=pR[BSIZE/2];
 8001404:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001408:	495c      	ldr	r1, [pc, #368]	; (800157c <ADC_Stream0_Handler+0x210>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800140a:	ed85 0a00 	vstr	s0, [r5]
 800140e:	8034      	strh	r4, [r6, #0]
	TestSampledValue=pR[BSIZE/2];
 8001410:	edc7 7a00 	vstr	s15, [r7]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001414:	f000 fcb8 	bl	8001d88 <SDR_downconvert_f32>
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8001418:	21ff      	movs	r1, #255	; 0xff
 800141a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8001604 <ADC_Stream0_Handler+0x298>
 800141e:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8001608 <ADC_Stream0_Handler+0x29c>
 8001422:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8001426:	8031      	strh	r1, [r6, #0]
 8001428:	460b      	mov	r3, r1
 800142a:	4955      	ldr	r1, [pc, #340]	; (8001580 <ADC_Stream0_Handler+0x214>)
 800142c:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8001430:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800160c <ADC_Stream0_Handler+0x2a0>
 8001434:	edd1 0a00 	vldr	s1, [r1]
 8001438:	4952      	ldr	r1, [pc, #328]	; (8001584 <ADC_Stream0_Handler+0x218>)
 800143a:	ed98 0a00 	vldr	s0, [r8]
 800143e:	ed91 7a00 	vldr	s14, [r1]
 8001442:	4951      	ldr	r1, [pc, #324]	; (8001588 <ADC_Stream0_Handler+0x21c>)
 8001444:	edde 7a00 	vldr	s15, [lr]
 8001448:	edd1 1a00 	vldr	s3, [r1]
 800144c:	494f      	ldr	r1, [pc, #316]	; (800158c <ADC_Stream0_Handler+0x220>)
 800144e:	ed9c 1a00 	vldr	s2, [ip]
 8001452:	edd1 aa00 	vldr	s21, [r1]
 8001456:	494e      	ldr	r1, [pc, #312]	; (8001590 <ADC_Stream0_Handler+0x224>)
 8001458:	484e      	ldr	r0, [pc, #312]	; (8001594 <ADC_Stream0_Handler+0x228>)
 800145a:	ed91 5a00 	vldr	s10, [r1]
 800145e:	494e      	ldr	r1, [pc, #312]	; (8001598 <ADC_Stream0_Handler+0x22c>)
 8001460:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8001610 <ADC_Stream0_Handler+0x2a4>
 8001464:	edd1 9a00 	vldr	s19, [r1]
 8001468:	494c      	ldr	r1, [pc, #304]	; (800159c <ADC_Stream0_Handler+0x230>)
 800146a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001614 <ADC_Stream0_Handler+0x2a8>
 800146e:	ed91 aa00 	vldr	s20, [r1]
 8001472:	494b      	ldr	r1, [pc, #300]	; (80015a0 <ADC_Stream0_Handler+0x234>)
 8001474:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8001618 <ADC_Stream0_Handler+0x2ac>
 8001478:	edd1 5a00 	vldr	s11, [r1]
 800147c:	4949      	ldr	r1, [pc, #292]	; (80015a4 <ADC_Stream0_Handler+0x238>)
 800147e:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <ADC_Stream0_Handler+0x23c>)
 8001480:	ed91 9a00 	vldr	s18, [r1]
 8001484:	4949      	ldr	r1, [pc, #292]	; (80015ac <ADC_Stream0_Handler+0x240>)
 8001486:	f502 6400 	add.w	r4, r2, #2048	; 0x800
 800148a:	edd1 da00 	vldr	s27, [r1]
 800148e:	4948      	ldr	r1, [pc, #288]	; (80015b0 <ADC_Stream0_Handler+0x244>)
 8001490:	ed91 3a00 	vldr	s6, [r1]
 8001494:	4947      	ldr	r1, [pc, #284]	; (80015b4 <ADC_Stream0_Handler+0x248>)
 8001496:	edd1 ba00 	vldr	s23, [r1]
 800149a:	4947      	ldr	r1, [pc, #284]	; (80015b8 <ADC_Stream0_Handler+0x24c>)
 800149c:	ed91 da00 	vldr	s26, [r1]
 80014a0:	4946      	ldr	r1, [pc, #280]	; (80015bc <ADC_Stream0_Handler+0x250>)
 80014a2:	edd1 3a00 	vldr	s7, [r1]
 80014a6:	4946      	ldr	r1, [pc, #280]	; (80015c0 <ADC_Stream0_Handler+0x254>)
 80014a8:	ed91 ba00 	vldr	s22, [r1]
 80014ac:	4945      	ldr	r1, [pc, #276]	; (80015c4 <ADC_Stream0_Handler+0x258>)
 80014ae:	edd1 fa00 	vldr	s31, [r1]
 80014b2:	4945      	ldr	r1, [pc, #276]	; (80015c8 <ADC_Stream0_Handler+0x25c>)
 80014b4:	edd1 6a00 	vldr	s13, [r1]
 80014b8:	4944      	ldr	r1, [pc, #272]	; (80015cc <ADC_Stream0_Handler+0x260>)
 80014ba:	edcd 6a04 	vstr	s13, [sp, #16]
 80014be:	edd1 ea00 	vldr	s29, [r1]
 80014c2:	4943      	ldr	r1, [pc, #268]	; (80015d0 <ADC_Stream0_Handler+0x264>)
 80014c4:	ed91 fa00 	vldr	s30, [r1]
 80014c8:	4942      	ldr	r1, [pc, #264]	; (80015d4 <ADC_Stream0_Handler+0x268>)
 80014ca:	edd1 6a00 	vldr	s13, [r1]
 80014ce:	4942      	ldr	r1, [pc, #264]	; (80015d8 <ADC_Stream0_Handler+0x26c>)
 80014d0:	edcd 6a03 	vstr	s13, [sp, #12]
 80014d4:	ed91 ea00 	vldr	s28, [r1]
 80014d8:	4940      	ldr	r1, [pc, #256]	; (80015dc <ADC_Stream0_Handler+0x270>)
 80014da:	edd1 6a00 	vldr	s13, [r1]
 80014de:	4940      	ldr	r1, [pc, #256]	; (80015e0 <ADC_Stream0_Handler+0x274>)
 80014e0:	edcd 6a02 	vstr	s13, [sp, #8]
 80014e4:	edd1 6a00 	vldr	s13, [r1]
 80014e8:	493e      	ldr	r1, [pc, #248]	; (80015e4 <ADC_Stream0_Handler+0x278>)
 80014ea:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 80014ee:	edd1 6a00 	vldr	s13, [r1]
 80014f2:	493d      	ldr	r1, [pc, #244]	; (80015e8 <ADC_Stream0_Handler+0x27c>)
 80014f4:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 80014f8:	edd1 6a00 	vldr	s13, [r1]
 80014fc:	493b      	ldr	r1, [pc, #236]	; (80015ec <ADC_Stream0_Handler+0x280>)
 80014fe:	edcd 6a05 	vstr	s13, [sp, #20]
 8001502:	edd1 6a00 	vldr	s13, [r1]
 8001506:	493a      	ldr	r1, [pc, #232]	; (80015f0 <ADC_Stream0_Handler+0x284>)
 8001508:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 800150c:	edd1 6a00 	vldr	s13, [r1]
 8001510:	4938      	ldr	r1, [pc, #224]	; (80015f4 <ADC_Stream0_Handler+0x288>)
 8001512:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8001516:	edd1 6a00 	vldr	s13, [r1]
 800151a:	4937      	ldr	r1, [pc, #220]	; (80015f8 <ADC_Stream0_Handler+0x28c>)
 800151c:	edcd 6a08 	vstr	s13, [sp, #32]
 8001520:	edd0 6a00 	vldr	s13, [r0]
 8001524:	4835      	ldr	r0, [pc, #212]	; (80015fc <ADC_Stream0_Handler+0x290>)
 8001526:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800152a:	edd0 6a00 	vldr	s13, [r0]
 800152e:	4834      	ldr	r0, [pc, #208]	; (8001600 <ADC_Stream0_Handler+0x294>)
 8001530:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8001534:	edd0 6a00 	vldr	s13, [r0]
 8001538:	f9ba 0000 	ldrsh.w	r0, [sl]
 800153c:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8001540:	eddb 6a00 	vldr	s13, [fp]
 8001544:	4605      	mov	r5, r0
 8001546:	4608      	mov	r0, r1
 8001548:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 800154c:	edd9 6a00 	vldr	s13, [r9]
 8001550:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8001554:	e165      	b.n	8001822 <ADC_Stream0_Handler+0x4b6>
 8001556:	bf00      	nop
 8001558:	2400de20 	.word	0x2400de20
 800155c:	2400ea40 	.word	0x2400ea40
 8001560:	2400acfc 	.word	0x2400acfc
 8001564:	00000000 	.word	0x00000000
 8001568:	3b000000 	.word	0x3b000000
 800156c:	2400ce00 	.word	0x2400ce00
 8001570:	240006b0 	.word	0x240006b0
 8001574:	2400de1c 	.word	0x2400de1c
 8001578:	240092ac 	.word	0x240092ac
 800157c:	24008a90 	.word	0x24008a90
 8001580:	24000650 	.word	0x24000650
 8001584:	24000654 	.word	0x24000654
 8001588:	24000620 	.word	0x24000620
 800158c:	24000668 	.word	0x24000668
 8001590:	2400066c 	.word	0x2400066c
 8001594:	240006ac 	.word	0x240006ac
 8001598:	2400062c 	.word	0x2400062c
 800159c:	24000660 	.word	0x24000660
 80015a0:	24000664 	.word	0x24000664
 80015a4:	24000628 	.word	0x24000628
 80015a8:	24008a98 	.word	0x24008a98
 80015ac:	24000678 	.word	0x24000678
 80015b0:	2400067c 	.word	0x2400067c
 80015b4:	24000634 	.word	0x24000634
 80015b8:	24000670 	.word	0x24000670
 80015bc:	24000674 	.word	0x24000674
 80015c0:	24000630 	.word	0x24000630
 80015c4:	24000688 	.word	0x24000688
 80015c8:	2400068c 	.word	0x2400068c
 80015cc:	2400063c 	.word	0x2400063c
 80015d0:	24000680 	.word	0x24000680
 80015d4:	24000684 	.word	0x24000684
 80015d8:	24000638 	.word	0x24000638
 80015dc:	24000698 	.word	0x24000698
 80015e0:	2400069c 	.word	0x2400069c
 80015e4:	24000644 	.word	0x24000644
 80015e8:	24000690 	.word	0x24000690
 80015ec:	24000694 	.word	0x24000694
 80015f0:	24000640 	.word	0x24000640
 80015f4:	240006a8 	.word	0x240006a8
 80015f8:	240092b4 	.word	0x240092b4
 80015fc:	2400064c 	.word	0x2400064c
 8001600:	240006a0 	.word	0x240006a0
 8001604:	24000658 	.word	0x24000658
 8001608:	2400065c 	.word	0x2400065c
 800160c:	24000624 	.word	0x24000624
 8001610:	240006a4 	.word	0x240006a4
 8001614:	24000648 	.word	0x24000648
 8001618:	2400061c 	.word	0x2400061c
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800161c:	eeaa 5a84 	vfma.f32	s10, s21, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8001620:	0799      	lsls	r1, r3, #30
 8001622:	eeea 5a04 	vfma.f32	s11, s20, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001626:	ee79 9aac 	vadd.f32	s19, s19, s25
 800162a:	ee39 9a0c 	vadd.f32	s18, s18, s24
 800162e:	eea9 5aa4 	vfma.f32	s10, s19, s9
 8001632:	eee9 5a24 	vfma.f32	s11, s18, s9
 8001636:	ee75 2a26 	vadd.f32	s5, s10, s13
 800163a:	ee75 7a86 	vadd.f32	s15, s11, s12
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800163e:	f100 8118 	bmi.w	8001872 <ADC_Stream0_Handler+0x506>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001642:	eead 3a84 	vfma.f32	s6, s27, s8
 8001646:	ed9d 7a01 	vldr	s14, [sp, #4]
 800164a:	eeed 3a04 	vfma.f32	s7, s26, s8
 800164e:	eddd 5a00 	vldr	s11, [sp]
 8001652:	ee7b ba87 	vadd.f32	s23, s23, s14

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001656:	075f      	lsls	r7, r3, #29
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001658:	ee3b ba25 	vadd.f32	s22, s22, s11
 800165c:	eeab 3aa4 	vfma.f32	s6, s23, s9
 8001660:	eeeb 3a24 	vfma.f32	s7, s22, s9
 8001664:	ee33 7a22 	vadd.f32	s14, s6, s5
 8001668:	ee33 2aa7 	vadd.f32	s4, s7, s15
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800166c:	f100 8112 	bmi.w	8001894 <ADC_Stream0_Handler+0x528>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001670:	ed9d 9a04 	vldr	s18, [sp, #16]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001674:	0719      	lsls	r1, r3, #28
 8001676:	eddd 9a03 	vldr	s19, [sp, #12]
 800167a:	eeaf 9a84 	vfma.f32	s18, s31, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800167e:	ed9d 5a07 	vldr	s10, [sp, #28]
 8001682:	eeef 9a04 	vfma.f32	s19, s30, s8
 8001686:	eddd 3a06 	vldr	s7, [sp, #24]
 800168a:	ee7e ea85 	vadd.f32	s29, s29, s10
 800168e:	ee3e ea23 	vadd.f32	s28, s28, s7
 8001692:	eeae 9aa4 	vfma.f32	s18, s29, s9
 8001696:	eeee 9a24 	vfma.f32	s19, s28, s9
 800169a:	ee37 9a09 	vadd.f32	s18, s14, s18
 800169e:	ee79 9a82 	vadd.f32	s19, s19, s4
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80016a2:	f100 81a1 	bmi.w	80019e8 <ADC_Stream0_Handler+0x67c>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80016a6:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28

		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016aa:	f013 0110 	ands.w	r1, r3, #16
 80016ae:	ed9d ea02 	vldr	s28, [sp, #8]
 80016b2:	eddd ba0c 	vldr	s23, [sp, #48]	; 0x30
 80016b6:	eddd ea05 	vldr	s29, [sp, #20]
 80016ba:	eeae ba04 	vfma.f32	s22, s28, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80016be:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
 80016c2:	ed9d 5a0b 	vldr	s10, [sp, #44]	; 0x2c
 80016c6:	eeee ba84 	vfma.f32	s23, s29, s8
 80016ca:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 80016ce:	ee33 5a05 	vadd.f32	s10, s6, s10
 80016d2:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016d6:	910b      	str	r1, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80016d8:	ee73 5a23 	vadd.f32	s11, s6, s7
 80016dc:	eea5 ba24 	vfma.f32	s22, s10, s9
 80016e0:	eee5 baa4 	vfma.f32	s23, s11, s9
 80016e4:	ee39 ba0b 	vadd.f32	s22, s18, s22
 80016e8:	ee79 baab 	vadd.f32	s23, s19, s23
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80016ec:	f040 81a5 	bne.w	8001a3a <ADC_Stream0_Handler+0x6ce>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80016f0:	eddd 3a08 	vldr	s7, [sp, #32]
 80016f4:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 80016f8:	ed9d 3a09 	vldr	s6, [sp, #36]	; 0x24
 80016fc:	eea3 5a84 	vfma.f32	s10, s7, s8
 8001700:	eddd 3a10 	vldr	s7, [sp, #64]	; 0x40
 8001704:	ed9d ea11 	vldr	s28, [sp, #68]	; 0x44
 8001708:	eee3 3a04 	vfma.f32	s7, s6, s8
 800170c:	ed9d 3a0f 	vldr	s6, [sp, #60]	; 0x3c
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001710:	49df      	ldr	r1, [pc, #892]	; (8001a90 <ADC_Stream0_Handler+0x724>)
 8001712:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8001716:	00a9      	lsls	r1, r5, #2
 8001718:	3501      	adds	r5, #1
 800171a:	9703      	str	r7, [sp, #12]
 800171c:	eef0 5a63 	vmov.f32	s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001720:	eddd 3a14 	vldr	s7, [sp, #80]	; 0x50
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001724:	4fdb      	ldr	r7, [pc, #876]	; (8001a94 <ADC_Stream0_Handler+0x728>)
 8001726:	b22d      	sxth	r5, r5
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001728:	ee33 3a83 	vadd.f32	s6, s7, s6
 800172c:	eddd 3a15 	vldr	s7, [sp, #84]	; 0x54
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001730:	4439      	add	r1, r7
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8001732:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001736:	ee73 3a8e 	vadd.f32	s7, s7, s28
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800173a:	9f03      	ldr	r7, [sp, #12]
 800173c:	eea3 5a24 	vfma.f32	s10, s6, s9
 8001740:	eee3 5aa4 	vfma.f32	s11, s7, s9
 8001744:	eddf 3ad4 	vldr	s7, [pc, #848]	; 8001a98 <ADC_Stream0_Handler+0x72c>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001748:	ee35 5a0b 	vadd.f32	s10, s10, s22
 800174c:	ee75 5aab 	vadd.f32	s11, s11, s23
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001750:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001754:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8001758:	ed87 5a00 	vstr	s10, [r7]
 800175c:	edc1 5a00 	vstr	s11, [r1]
		if(idx < BSIZE*4)
 8001760:	f2c0 81da 	blt.w	8001b18 <ADC_Stream0_Handler+0x7ac>

#endif

			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8001764:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001768:	eddd 3a08 	vldr	s7, [sp, #32]
 800176c:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001770:	eef0 5a4a 	vmov.f32	s11, s20
			EXTI->SWIER1 |= GPIO_PIN_14;
 8001774:	68b9      	ldr	r1, [r7, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001776:	eeb0 aa46 	vmov.f32	s20, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800177a:	ed9d 3a02 	vldr	s6, [sp, #8]
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800177e:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001782:	eef0 3a4d 	vmov.f32	s7, s26
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001786:	ed8d fa03 	vstr	s30, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800178a:	eeb0 da67 	vmov.f32	s26, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 800178e:	edcd fa04 	vstr	s31, [sp, #16]
 8001792:	eeb0 fa42 	vmov.f32	s30, s4
 8001796:	eef0 fa47 	vmov.f32	s31, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 800179a:	ed8d 5a10 	vstr	s10, [sp, #64]	; 0x40
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800179e:	ed8d 3a0a 	vstr	s6, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017a2:	eeb0 5a6a 	vmov.f32	s10, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017a6:	eeb0 3a6d 	vmov.f32	s6, s27
			EXTI->SWIER1 |= GPIO_PIN_14;
 80017aa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017ae:	eef0 da62 	vmov.f32	s27, s5
		inE6Rold = inER;                           inE6Iold = inEI;
 80017b2:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017b6:	eef0 aa66 	vmov.f32	s21, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 80017ba:	eddd 2a15 	vldr	s5, [sp, #84]	; 0x54
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017be:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		idx = 0;
 80017c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80017c4:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80017c8:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 80017cc:	ed8d ba08 	vstr	s22, [sp, #32]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80017d0:	edcd 9a05 	vstr	s19, [sp, #20]
 80017d4:	ed8d 9a02 	vstr	s18, [sp, #8]
			EXTI->SWIER1 |= GPIO_PIN_14;
 80017d8:	60b9      	str	r1, [r7, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 80017da:	edcd 2a11 	vstr	s5, [sp, #68]	; 0x44
 80017de:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017e2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE2Rold = inER;                           inE2Iold = inEI;
 80017e6:	eeb0 9a4c 	vmov.f32	s18, s24
		inE5Rold  = inER;                          inE5Iold  = inEI;
 80017ea:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inE2Rold = inER;                           inE2Iold = inEI;
 80017ee:	eef0 9a6c 	vmov.f32	s19, s25
		inE4Rold = inER;                           inE4Iold = inEI;
 80017f2:	ed9d ea06 	vldr	s28, [sp, #24]
 80017f6:	eddd ea07 	vldr	s29, [sp, #28]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 80017fa:	ed9d ba00 	vldr	s22, [sp]
 80017fe:	eddd ba01 	vldr	s23, [sp, #4]
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001802:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	while(k--)
 8001806:	3208      	adds	r2, #8
 8001808:	3b01      	subs	r3, #1
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	3008      	adds	r0, #8
 8001810:	4294      	cmp	r4, r2
 8001812:	eeb0 7a60 	vmov.f32	s14, s1
 8001816:	b29b      	uxth	r3, r3
 8001818:	d059      	beq.n	80018ce <ADC_Stream0_Handler+0x562>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800181a:	eef0 0a48 	vmov.f32	s1, s16
 800181e:	eeb0 0a68 	vmov.f32	s0, s17
 8001822:	ed52 8a01 	vldr	s17, [r2, #-4]
 8001826:	eeb0 2a41 	vmov.f32	s4, s2
 800182a:	ed10 8a01 	vldr	s16, [r0, #-4]
 800182e:	eef0 2a61 	vmov.f32	s5, s3
 8001832:	eef0 6a68 	vmov.f32	s13, s17
 8001836:	ed12 1a02 	vldr	s2, [r2, #-8]
 800183a:	eeb0 6a48 	vmov.f32	s12, s16
 800183e:	ed50 1a02 	vldr	s3, [r0, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001842:	ee31 2a02 	vadd.f32	s4, s2, s4
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001846:	07df      	lsls	r7, r3, #31
 8001848:	eee0 6a04 	vfma.f32	s13, s0, s8
 800184c:	eea0 6a84 	vfma.f32	s12, s1, s8
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001850:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8001854:	eee2 6a24 	vfma.f32	s13, s4, s9
 8001858:	eea2 6aa4 	vfma.f32	s12, s5, s9
 800185c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001860:	ee37 6a06 	vadd.f32	s12, s14, s12
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8001864:	f57f aeda 	bpl.w	800161c <ADC_Stream0_Handler+0x2b0>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001868:	eeb0 ca46 	vmov.f32	s24, s12
 800186c:	eef0 ca66 	vmov.f32	s25, s13
 8001870:	e7c9      	b.n	8001806 <ADC_Stream0_Handler+0x49a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001872:	eef0 5a4a 	vmov.f32	s11, s20
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001876:	edcd 7a00 	vstr	s15, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800187a:	eeb0 5a6a 	vmov.f32	s10, s21
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 800187e:	edcd 2a01 	vstr	s5, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001882:	eeb0 aa46 	vmov.f32	s20, s12
 8001886:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 800188a:	eeb0 9a4c 	vmov.f32	s18, s24
 800188e:	eef0 9a6c 	vmov.f32	s19, s25
 8001892:	e7b8      	b.n	8001806 <ADC_Stream0_Handler+0x49a>
 8001894:	eeb0 ba65 	vmov.f32	s22, s11
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001898:	eddd ba01 	vldr	s23, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800189c:	eef0 3a4d 	vmov.f32	s7, s26
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80018a0:	ed8d 2a06 	vstr	s4, [sp, #24]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018a4:	eeb0 3a6d 	vmov.f32	s6, s27
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 80018a8:	ed8d 7a07 	vstr	s14, [sp, #28]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018ac:	eef0 5a4a 	vmov.f32	s11, s20
 80018b0:	eeb0 5a6a 	vmov.f32	s10, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80018b4:	eeb0 da67 	vmov.f32	s26, s15
 80018b8:	eef0 da62 	vmov.f32	s27, s5
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018bc:	eeb0 aa46 	vmov.f32	s20, s12
 80018c0:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 80018c4:	eeb0 9a4c 	vmov.f32	s18, s24
 80018c8:	eef0 9a6c 	vmov.f32	s19, s25
 80018cc:	e79b      	b.n	8001806 <ADC_Stream0_Handler+0x49a>
 80018ce:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <ADC_Stream0_Handler+0x730>)
 80018d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d4:	eddd 7a04 	vldr	s15, [sp, #16]
 80018d8:	ed82 8a00 	vstr	s16, [r2]
 80018dc:	4a70      	ldr	r2, [pc, #448]	; (8001aa0 <ADC_Stream0_Handler+0x734>)
 80018de:	edc8 8a00 	vstr	s17, [r8]
 80018e2:	edc2 0a00 	vstr	s1, [r2]
 80018e6:	4a6f      	ldr	r2, [pc, #444]	; (8001aa4 <ADC_Stream0_Handler+0x738>)
 80018e8:	ed8e 0a00 	vstr	s0, [lr]
 80018ec:	edc2 1a00 	vstr	s3, [r2]
 80018f0:	4a6d      	ldr	r2, [pc, #436]	; (8001aa8 <ADC_Stream0_Handler+0x73c>)
 80018f2:	ed8c 1a00 	vstr	s2, [ip]
 80018f6:	edc2 aa00 	vstr	s21, [r2]
 80018fa:	4a6c      	ldr	r2, [pc, #432]	; (8001aac <ADC_Stream0_Handler+0x740>)
 80018fc:	ed82 5a00 	vstr	s10, [r2]
 8001900:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <ADC_Stream0_Handler+0x744>)
 8001902:	edc2 9a00 	vstr	s19, [r2]
 8001906:	4a6b      	ldr	r2, [pc, #428]	; (8001ab4 <ADC_Stream0_Handler+0x748>)
 8001908:	ed82 aa00 	vstr	s20, [r2]
 800190c:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <ADC_Stream0_Handler+0x74c>)
 800190e:	edc2 5a00 	vstr	s11, [r2]
 8001912:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <ADC_Stream0_Handler+0x750>)
 8001914:	ed82 9a00 	vstr	s18, [r2]
 8001918:	4a69      	ldr	r2, [pc, #420]	; (8001ac0 <ADC_Stream0_Handler+0x754>)
 800191a:	edc2 da00 	vstr	s27, [r2]
 800191e:	4a69      	ldr	r2, [pc, #420]	; (8001ac4 <ADC_Stream0_Handler+0x758>)
 8001920:	ed82 3a00 	vstr	s6, [r2]
 8001924:	4a68      	ldr	r2, [pc, #416]	; (8001ac8 <ADC_Stream0_Handler+0x75c>)
 8001926:	edc2 ba00 	vstr	s23, [r2]
 800192a:	4a68      	ldr	r2, [pc, #416]	; (8001acc <ADC_Stream0_Handler+0x760>)
 800192c:	ed82 da00 	vstr	s26, [r2]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <ADC_Stream0_Handler+0x764>)
 8001932:	edc2 3a00 	vstr	s7, [r2]
 8001936:	4a67      	ldr	r2, [pc, #412]	; (8001ad4 <ADC_Stream0_Handler+0x768>)
 8001938:	ed82 ba00 	vstr	s22, [r2]
 800193c:	4a66      	ldr	r2, [pc, #408]	; (8001ad8 <ADC_Stream0_Handler+0x76c>)
 800193e:	edc2 fa00 	vstr	s31, [r2]
 8001942:	4a66      	ldr	r2, [pc, #408]	; (8001adc <ADC_Stream0_Handler+0x770>)
 8001944:	edc2 7a00 	vstr	s15, [r2]
 8001948:	4a65      	ldr	r2, [pc, #404]	; (8001ae0 <ADC_Stream0_Handler+0x774>)
 800194a:	eddd 7a03 	vldr	s15, [sp, #12]
 800194e:	edc2 ea00 	vstr	s29, [r2]
 8001952:	4a64      	ldr	r2, [pc, #400]	; (8001ae4 <ADC_Stream0_Handler+0x778>)
 8001954:	ed82 fa00 	vstr	s30, [r2]
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <ADC_Stream0_Handler+0x77c>)
 800195a:	edc2 7a00 	vstr	s15, [r2]
 800195e:	4a63      	ldr	r2, [pc, #396]	; (8001aec <ADC_Stream0_Handler+0x780>)
 8001960:	eddd 7a02 	vldr	s15, [sp, #8]
 8001964:	ed82 ea00 	vstr	s28, [r2]
 8001968:	4a61      	ldr	r2, [pc, #388]	; (8001af0 <ADC_Stream0_Handler+0x784>)
 800196a:	edc2 7a00 	vstr	s15, [r2]
 800196e:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8001972:	4a60      	ldr	r2, [pc, #384]	; (8001af4 <ADC_Stream0_Handler+0x788>)
 8001974:	edc2 7a00 	vstr	s15, [r2]
 8001978:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800197c:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <ADC_Stream0_Handler+0x78c>)
 800197e:	edc2 7a00 	vstr	s15, [r2]
 8001982:	eddd 7a05 	vldr	s15, [sp, #20]
 8001986:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <ADC_Stream0_Handler+0x790>)
 8001988:	f8aa 5000 	strh.w	r5, [sl]
 800198c:	edc2 7a00 	vstr	s15, [r2]
 8001990:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001994:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <ADC_Stream0_Handler+0x794>)
 8001996:	8033      	strh	r3, [r6, #0]
 8001998:	edc2 7a00 	vstr	s15, [r2]
 800199c:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <ADC_Stream0_Handler+0x798>)
 80019a2:	edc2 7a00 	vstr	s15, [r2]
 80019a6:	eddd 7a08 	vldr	s15, [sp, #32]
 80019aa:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <ADC_Stream0_Handler+0x79c>)
 80019ac:	edc2 7a00 	vstr	s15, [r2]
 80019b0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80019b4:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <ADC_Stream0_Handler+0x7a0>)
 80019b6:	edc2 7a00 	vstr	s15, [r2]
 80019ba:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <ADC_Stream0_Handler+0x7a4>)
 80019c0:	edc2 7a00 	vstr	s15, [r2]
 80019c4:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <ADC_Stream0_Handler+0x7a8>)
 80019ca:	edc2 7a00 	vstr	s15, [r2]
 80019ce:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80019d2:	edcb 7a00 	vstr	s15, [fp]
 80019d6:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 80019da:	edc9 7a00 	vstr	s15, [r9]
		}

		// LED_YELLOW_OFF;

	}
 80019de:	b017      	add	sp, #92	; 0x5c
 80019e0:	ecbd 8b10 	vpop	{d8-d15}
 80019e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e8:	eeb0 ea63 	vmov.f32	s28, s7
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80019ec:	ed8d fa03 	vstr	s30, [sp, #12]
 80019f0:	eef0 ea45 	vmov.f32	s29, s10
 80019f4:	edcd fa04 	vstr	s31, [sp, #16]
 80019f8:	eeb0 ba65 	vmov.f32	s22, s11
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 80019fc:	edcd 9a12 	vstr	s19, [sp, #72]	; 0x48
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a00:	eef0 3a4d 	vmov.f32	s7, s26
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001a04:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a08:	eeb0 3a6d 	vmov.f32	s6, s27
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8001a0c:	eddd ba01 	vldr	s23, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a10:	eef0 5a4a 	vmov.f32	s11, s20
 8001a14:	eeb0 5a6a 	vmov.f32	s10, s21
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a18:	eeb0 fa42 	vmov.f32	s30, s4
 8001a1c:	eef0 fa47 	vmov.f32	s31, s14
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a20:	eeb0 da67 	vmov.f32	s26, s15
 8001a24:	eef0 da62 	vmov.f32	s27, s5
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a28:	eeb0 aa46 	vmov.f32	s20, s12
 8001a2c:	eef0 aa66 	vmov.f32	s21, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8001a30:	eeb0 9a4c 	vmov.f32	s18, s24
 8001a34:	eef0 9a6c 	vmov.f32	s19, s25
 8001a38:	e6e5      	b.n	8001806 <ADC_Stream0_Handler+0x49a>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a3a:	eddd 5a02 	vldr	s11, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a3e:	eef0 3a4d 	vmov.f32	s7, s26
 8001a42:	eeb0 3a6d 	vmov.f32	s6, s27
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a46:	ed8d fa03 	vstr	s30, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a4a:	eeb0 5a6a 	vmov.f32	s10, s21
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a4e:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a52:	edcd fa04 	vstr	s31, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a56:	eef0 5a4a 	vmov.f32	s11, s20
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a5a:	eeb0 fa42 	vmov.f32	s30, s4
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a5e:	edcd ea0c 	vstr	s29, [sp, #48]	; 0x30
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a62:	eef0 fa47 	vmov.f32	s31, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a66:	edcd 9a05 	vstr	s19, [sp, #20]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a6a:	eeb0 da67 	vmov.f32	s26, s15
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a6e:	ed8d 9a02 	vstr	s18, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a72:	eef0 da62 	vmov.f32	s27, s5
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a76:	edcd ba15 	vstr	s23, [sp, #84]	; 0x54
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a7a:	eeb0 aa46 	vmov.f32	s20, s12
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001a7e:	ed8d ba14 	vstr	s22, [sp, #80]	; 0x50
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a82:	eef0 aa66 	vmov.f32	s21, s13
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a86:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001a8a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001a8e:	e6aa      	b.n	80017e6 <ADC_Stream0_Handler+0x47a>
 8001a90:	2000d000 	.word	0x2000d000
 8001a94:	2000b000 	.word	0x2000b000
 8001a98:	34000000 	.word	0x34000000
 8001a9c:	24000650 	.word	0x24000650
 8001aa0:	24000654 	.word	0x24000654
 8001aa4:	24000620 	.word	0x24000620
 8001aa8:	24000668 	.word	0x24000668
 8001aac:	2400066c 	.word	0x2400066c
 8001ab0:	2400062c 	.word	0x2400062c
 8001ab4:	24000660 	.word	0x24000660
 8001ab8:	24000664 	.word	0x24000664
 8001abc:	24000628 	.word	0x24000628
 8001ac0:	24000678 	.word	0x24000678
 8001ac4:	2400067c 	.word	0x2400067c
 8001ac8:	24000634 	.word	0x24000634
 8001acc:	24000670 	.word	0x24000670
 8001ad0:	24000674 	.word	0x24000674
 8001ad4:	24000630 	.word	0x24000630
 8001ad8:	24000688 	.word	0x24000688
 8001adc:	2400068c 	.word	0x2400068c
 8001ae0:	2400063c 	.word	0x2400063c
 8001ae4:	24000680 	.word	0x24000680
 8001ae8:	24000684 	.word	0x24000684
 8001aec:	24000638 	.word	0x24000638
 8001af0:	24000698 	.word	0x24000698
 8001af4:	2400069c 	.word	0x2400069c
 8001af8:	24000644 	.word	0x24000644
 8001afc:	24000690 	.word	0x24000690
 8001b00:	24000694 	.word	0x24000694
 8001b04:	24000640 	.word	0x24000640
 8001b08:	240006a8 	.word	0x240006a8
 8001b0c:	240006ac 	.word	0x240006ac
 8001b10:	2400064c 	.word	0x2400064c
 8001b14:	240006a0 	.word	0x240006a0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b18:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b1c:	eef0 3a4d 	vmov.f32	s7, s26
 8001b20:	eeb0 da67 	vmov.f32	s26, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b24:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b28:	edcd 5a10 	vstr	s11, [sp, #64]	; 0x40
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b2c:	eeb0 3a6d 	vmov.f32	s6, s27
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b30:	eddd 5a08 	vldr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b34:	eeb0 5a6a 	vmov.f32	s10, s21
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b38:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001b3c:	eef0 da62 	vmov.f32	s27, s5
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b40:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b44:	eef0 aa66 	vmov.f32	s21, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b48:	eddd 5a05 	vldr	s11, [sp, #20]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b4c:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b50:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
 8001b54:	eddd 5a02 	vldr	s11, [sp, #8]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b58:	ed8d fa03 	vstr	s30, [sp, #12]
 8001b5c:	eeb0 fa42 	vmov.f32	s30, s4
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b60:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b64:	eef0 5a4a 	vmov.f32	s11, s20
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b68:	edcd fa04 	vstr	s31, [sp, #16]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b6c:	eeb0 aa46 	vmov.f32	s20, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001b70:	eef0 fa47 	vmov.f32	s31, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001b74:	edcd ba09 	vstr	s23, [sp, #36]	; 0x24
 8001b78:	ed8d ba08 	vstr	s22, [sp, #32]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001b7c:	edcd 9a05 	vstr	s19, [sp, #20]
 8001b80:	ed8d 9a02 	vstr	s18, [sp, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001b84:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001b88:	e77d      	b.n	8001a86 <ADC_Stream0_Handler+0x71a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <ADC_Stream0_Handler+0x838>)
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <ADC_Stream0_Handler+0x83c>)
 8001b8e:	ed92 0a00 	vldr	s0, [r2]
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b9a:	f000 f807 	bl	8001bac <SDR_ComputeLO>
 8001b9e:	f7ff bbfa 	b.w	8001396 <ADC_Stream0_Handler+0x2a>
 8001ba2:	bf00      	nop
 8001ba4:	2400acfc 	.word	0x2400acfc
 8001ba8:	2400acf4 	.word	0x2400acf4

08001bac <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001bac:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001bae:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <SDR_ComputeLO+0x140>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001bb8:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d171      	bne.n	8001ca6 <SDR_ComputeLO+0xfa>
 8001bc2:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <SDR_ComputeLO+0x144>)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <SDR_ComputeLO+0x148>)
 8001bc6:	ed92 8a00 	vldr	s16, [r2]
 8001bca:	ed93 6a00 	vldr	s12, [r3]
 8001bce:	4d4a      	ldr	r5, [pc, #296]	; (8001cf8 <SDR_ComputeLO+0x14c>)
 8001bd0:	4c4a      	ldr	r4, [pc, #296]	; (8001cfc <SDR_ComputeLO+0x150>)
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bd2:	484b      	ldr	r0, [pc, #300]	; (8001d00 <SDR_ComputeLO+0x154>)
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <SDR_ComputeLO+0x158>)
 8001bd6:	ed95 5a00 	vldr	s10, [r5]
 8001bda:	edd4 7a00 	vldr	s15, [r4]
 8001bde:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001be2:	edd0 5a00 	vldr	s11, [r0]
 8001be6:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001be8:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001bec:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bee:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001bf2:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bf4:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001bf8:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001bfc:	ee25 7a87 	vmul.f32	s14, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c00:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c04:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c08:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c0c:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c10:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c14:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c18:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c20:	ee25 7a87 	vmul.f32	s14, s11, s14
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c24:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c28:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c2c:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c30:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c34:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c38:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c3c:	ee25 7aa6 	vmul.f32	s14, s11, s13
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c40:	ee65 7aa7 	vmul.f32	s15, s11, s15
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c44:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c48:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c4c:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c50:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c54:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c58:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c5c:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c60:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001c64:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001c68:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001c6a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001c6e:	d1bb      	bne.n	8001be8 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c70:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001c74:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001d0c <SDR_ComputeLO+0x160>
 8001c78:	edc4 7a00 	vstr	s15, [r4]
 8001c7c:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001d10 <SDR_ComputeLO+0x164>
 8001c80:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <SDR_ComputeLO+0x168>)
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <SDR_ComputeLO+0x16c>)
 8001c88:	ed85 5a00 	vstr	s10, [r5]
 8001c8c:	edc2 6a00 	vstr	s13, [r2]
 8001c90:	ed83 7a00 	vstr	s14, [r3]
 8001c94:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001c98:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001c9c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001ca0:	edc0 7a00 	vstr	s15, [r0]
}	
 8001ca4:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001ca6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001d1c <SDR_ComputeLO+0x170>
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <SDR_ComputeLO+0x174>)
 8001cac:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001cb0:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001cb4:	ed92 7a00 	vldr	s14, [r2]
 8001cb8:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001cbc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001cc0:	eeb0 0b49 	vmov.f64	d0, d9
 8001cc4:	f00f fadc 	bl	8011280 <cos>
 8001cc8:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001cce:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001cd2:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001cd6:	f00f fb1b 	bl	8011310 <sin>
 8001cda:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SDR_ComputeLO+0x148>)
 8001ce0:	eeb1 6a46 	vneg.f32	s12, s12
 8001ce4:	ed83 6a00 	vstr	s12, [r3]
 8001ce8:	e771      	b.n	8001bce <SDR_ComputeLO+0x22>
 8001cea:	bf00      	nop
 8001cec:	2400016c 	.word	0x2400016c
 8001cf0:	240006b4 	.word	0x240006b4
 8001cf4:	240006c4 	.word	0x240006c4
 8001cf8:	24000178 	.word	0x24000178
 8001cfc:	240006dc 	.word	0x240006dc
 8001d00:	24000168 	.word	0x24000168
 8001d04:	2400502c 	.word	0x2400502c
 8001d08:	240058e0 	.word	0x240058e0
 8001d0c:	46000200 	.word	0x46000200
 8001d10:	39000000 	.word	0x39000000
 8001d14:	240006e0 	.word	0x240006e0
 8001d18:	240006e4 	.word	0x240006e4
 8001d1c:	40c90fdb 	.word	0x40c90fdb
 8001d20:	240058c8 	.word	0x240058c8

08001d24 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	d02e      	beq.n	8001d86 <SDR_2R_toC_f32+0x62>
 8001d28:	3010      	adds	r0, #16
 8001d2a:	3110      	adds	r1, #16
 8001d2c:	3220      	adds	r2, #32
{
 8001d2e:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d30:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001d34:	3b01      	subs	r3, #1
 8001d36:	f100 0010 	add.w	r0, r0, #16
 8001d3a:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d3e:	f842 4c20 	str.w	r4, [r2, #-32]
 8001d42:	f102 0220 	add.w	r2, r2, #32
 8001d46:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001d4a:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d4e:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001d52:	f842 4c38 	str.w	r4, [r2, #-56]
 8001d56:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001d5a:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d5e:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001d62:	f842 4c30 	str.w	r4, [r2, #-48]
 8001d66:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001d6a:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001d6e:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8001d72:	f842 4c28 	str.w	r4, [r2, #-40]
 8001d76:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001d7a:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 8001d7e:	d1d7      	bne.n	8001d30 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8001d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	4770      	bx	lr

08001d88 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <SDR_downconvert_f32+0xd8>)
 8001d8a:	3008      	adds	r0, #8
 8001d8c:	3110      	adds	r1, #16
 8001d8e:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
	tmp1 = tmp2;
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3 = tmp4;
#else
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001d90:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001e64 <SDR_downconvert_f32+0xdc>
{
 8001d94:	b430      	push	{r4, r5}
 8001d96:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001d9a:	4c33      	ldr	r4, [pc, #204]	; (8001e68 <SDR_downconvert_f32+0xe0>)
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001d9c:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8001da0:	3310      	adds	r3, #16
	tmp4=((*(pt+3)-offset)) / 2048.f;
	tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001da2:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8001da6:	3008      	adds	r0, #8
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001da8:	ee06 ca10 	vmov	s12, ip
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001dac:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8001db0:	3110      	adds	r1, #16
 8001db2:	3410      	adds	r4, #16
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001db4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001db8:	ee06 ca90 	vmov	s13, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dbc:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8001dc0:	3210      	adds	r2, #16
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001dc2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001dc6:	ee36 6a40 	vsub.f32	s12, s12, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dca:	ee07 ca90 	vmov	s15, ip
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dce:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001dd2:	ee76 6ac0 	vsub.f32	s13, s13, s0
    tmp1=((*(pt)  -offset)) / 2048.f;
 8001dd6:	ee26 6a25 	vmul.f32	s12, s12, s11
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dda:	ee07 ca10 	vmov	s14, ip
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tmp2=((*(pt+1)-offset)) / 2048.f;
 8001de2:	ee66 6aa5 	vmul.f32	s13, s13, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001de6:	ee25 5a06 	vmul.f32	s10, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dee:	ee77 7ac0 	vsub.f32	s15, s15, s0
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001df2:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001df6:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001dfa:	ee37 7a40 	vsub.f32	s14, s14, s0
	tmp4=((*(pt+3)-offset)) / 2048.f;
 8001dfe:	ee67 7aa5 	vmul.f32	s15, s15, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e02:	ee25 6a06 	vmul.f32	s12, s10, s12
	tmp3=((*(pt+2)-offset)) / 2048.f;
 8001e06:	ee27 7a25 	vmul.f32	s14, s14, s11
		 *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001e0a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001e0e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001e12:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001e16:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001e1a:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001e1e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001e22:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001e26:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001e2a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001e2e:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001e32:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001e36:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001e3a:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001e3e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001e42:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e48:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001e4c:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001e58:	d1a0      	bne.n	8001d9c <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001e5a:	bc30      	pop	{r4, r5}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	240058e0 	.word	0x240058e0
 8001e64:	3a000000 	.word	0x3a000000
 8001e68:	2400502c 	.word	0x2400502c

08001e6c <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001e6c:	b430      	push	{r4, r5}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001e6e:	0895      	lsrs	r5, r2, #2
  while(blkCnt--)
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	d05b      	beq.n	8001f2c <SDR_float_to_DAC_audio+0xc0>
 8001e74:	1e6c      	subs	r4, r5, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e76:	4d30      	ldr	r5, [pc, #192]	; (8001f38 <SDR_float_to_DAC_audio+0xcc>)
 8001e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e7c:	b2a3      	uxth	r3, r4
 8001e7e:	f100 0420 	add.w	r4, r0, #32
 8001e82:	edd5 7a00 	vldr	s15, [r5]
 8001e86:	3010      	adds	r0, #16
 8001e88:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8001e8c:	f101 0308 	add.w	r3, r1, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e90:	eef0 4a47 	vmov.f32	s9, s14
 8001e94:	ed50 5a03 	vldr	s11, [r0, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e98:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001e9c:	eeb0 5a47 	vmov.f32	s10, s14
 8001ea0:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001ea4:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ea6:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8001eaa:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eac:	eea6 5aa7 	vfma.f32	s10, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eb0:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
  while(blkCnt--)
 8001eb4:	4284      	cmp	r4, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eb6:	eef0 5a64 	vmov.f32	s11, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eba:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ebe:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ec2:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ec6:	eee7 4a86 	vfma.f32	s9, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eca:	ee15 5a10 	vmov	r5, s10
 8001ece:	f823 5c10 	strh.w	r5, [r3, #-16]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ed2:	ee15 5a90 	vmov	r5, s11
 8001ed6:	f823 5c0e 	strh.w	r5, [r3, #-14]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eda:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ede:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ee2:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ee6:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001eea:	ee16 5a10 	vmov	r5, s12
 8001eee:	f823 5c0c 	strh.w	r5, [r3, #-12]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ef2:	eef0 6a64 	vmov.f32	s13, s9
 8001ef6:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
 8001efa:	ee16 5a90 	vmov	r5, s13
 8001efe:	f823 5c0a 	strh.w	r5, [r3, #-10]
  while(blkCnt--)
 8001f02:	d1c5      	bne.n	8001e90 <SDR_float_to_DAC_audio+0x24>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001f04:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001f06:	f001 021f 	and.w	r2, r1, #31
 8001f0a:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f0c:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f10:	480a      	ldr	r0, [pc, #40]	; (8001f3c <SDR_float_to_DAC_audio+0xd0>)
 8001f12:	440a      	add	r2, r1
 8001f14:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001f18:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001f1a:	1a53      	subs	r3, r2, r1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	dcf9      	bgt.n	8001f14 <SDR_float_to_DAC_audio+0xa8>
 8001f20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f24:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001f28:	bc30      	pop	{r4, r5}
 8001f2a:	4770      	bx	lr
    if ( dsize > 0 ) { 
 8001f2c:	0093      	lsls	r3, r2, #2
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d1e9      	bne.n	8001f06 <SDR_float_to_DAC_audio+0x9a>
 8001f32:	bc30      	pop	{r4, r5}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2400581c 	.word	0x2400581c
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001f40:	0892      	lsrs	r2, r2, #2
 8001f42:	d017      	beq.n	8001f74 <SDR_memcpy_f32+0x34>
 8001f44:	3110      	adds	r1, #16
 8001f46:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001f48:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	f101 0110 	add.w	r1, r1, #16
 8001f52:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001f56:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001f5a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001f5e:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001f62:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001f66:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001f6a:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001f6e:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001f72:	d1e9      	bne.n	8001f48 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001f78:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f7a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001f7e:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001f80:	440b      	add	r3, r1
	while(blkCnt--)
 8001f82:	d037      	beq.n	8001ff4 <SDR_mirror_LSB+0x7c>
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	1e91      	subs	r1, r2, #2
{
 8001f88:	b410      	push	{r4}
 8001f8a:	f1a3 0220 	sub.w	r2, r3, #32
 8001f8e:	f1a3 041c 	sub.w	r4, r3, #28
 8001f92:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001f96:	4402      	add	r2, r0
 8001f98:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001f9a:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8001f9c:	3901      	subs	r1, #1
 8001f9e:	3a20      	subs	r2, #32
 8001fa0:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fa2:	f843 4c20 	str.w	r4, [r3, #-32]
 8001fa6:	3320      	adds	r3, #32
 8001fa8:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8001fac:	eef1 7a67 	vneg.f32	s15, s15
 8001fb0:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fb4:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8001fb6:	f843 4c38 	str.w	r4, [r3, #-56]
 8001fba:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001fbe:	eef1 7a67 	vneg.f32	s15, s15
 8001fc2:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fc6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001fc8:	f843 4c30 	str.w	r4, [r3, #-48]
 8001fcc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001fd0:	eef1 7a67 	vneg.f32	s15, s15
 8001fd4:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fd8:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001fda:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8001fde:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001fe0:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001fe4:	eef1 7a67 	vneg.f32	s15, s15
 8001fe8:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001fec:	d1d5      	bne.n	8001f9a <SDR_mirror_LSB+0x22>
	}
}
 8001fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8001ff8:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <SDR_compute_IIR_parms+0xb0>)
 8001ffc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80020ac <SDR_compute_IIR_parms+0xb4>
 8002000:	edd3 7a00 	vldr	s15, [r3]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <SDR_compute_IIR_parms+0xb8>)
   wr = 2.f * cwpitch / rate * myPI;
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
   r = Qfactor;
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <SDR_compute_IIR_parms+0xbc>)
   wr = 2.f * cwpitch / rate * myPI;
 800200c:	ed92 7a00 	vldr	s14, [r2]
 8002010:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80020b8 <SDR_compute_IIR_parms+0xc0>
{
 8002014:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8002018:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 800201c:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002020:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8002024:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002028:	ee39 aaa9 	vadd.f32	s20, s19, s19
 800202c:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002030:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8002034:	ee68 8a80 	vmul.f32	s17, s17, s0
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002038:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 800203c:	f00f f920 	bl	8011280 <cos>
 8002040:	ee8a 5a09 	vdiv.f32	s10, s20, s18
   a1 = -2.f * r * cosw0;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <SDR_compute_IIR_parms+0xc8>)
 8002048:	edc2 aa00 	vstr	s21, [r2]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800204c:	eeb0 6b40 	vmov.f64	d6, d0
   a1 = -2.f * r * cosw0;
 8002050:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002054:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8002058:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 800205c:	ee69 7aa7 	vmul.f32	s15, s19, s15
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002060:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002064:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8002068:	ee25 6b06 	vmul.f64	d6, d5, d6
 800206c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002070:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002074:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002078:	f00f f902 	bl	8011280 <cos>
 800207c:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002080:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80020c4 <SDR_compute_IIR_parms+0xcc>
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <SDR_compute_IIR_parms+0xd0>)
 8002086:	ee28 7a07 	vmul.f32	s14, s16, s14
 800208a:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800208e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8002092:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002096:	eeb1 5bc6 	vsqrt.f64	d5, d6
 800209a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800209e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80020a2:	ed83 7a00 	vstr	s14, [r3]
}
 80020a6:	bd08      	pop	{r3, pc}
 80020a8:	2400acf4 	.word	0x2400acf4
 80020ac:	44000000 	.word	0x44000000
 80020b0:	240058c8 	.word	0x240058c8
 80020b4:	24009ce0 	.word	0x24009ce0
 80020b8:	40490fdb 	.word	0x40490fdb
 80020bc:	24005820 	.word	0x24005820
 80020c0:	24009cd8 	.word	0x24009cd8
 80020c4:	3f99999a 	.word	0x3f99999a
 80020c8:	2400ce0c 	.word	0x2400ce0c

080020cc <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 80020cc:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 80020ce:	2900      	cmp	r1, #0
 80020d0:	d07c      	beq.n	80021cc <SDR_CWPeak+0x100>
 80020d2:	1e4b      	subs	r3, r1, #1
 80020d4:	f8df c110 	ldr.w	ip, [pc, #272]	; 80021e8 <SDR_CWPeak+0x11c>
 80020d8:	493d      	ldr	r1, [pc, #244]	; (80021d0 <SDR_CWPeak+0x104>)
 80020da:	3010      	adds	r0, #16
 80020dc:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <SDR_CWPeak+0x108>)
 80020de:	eddc 2a00 	vldr	s5, [ip]
 80020e2:	edd1 6a00 	vldr	s13, [r1]
 80020e6:	ed92 5a00 	vldr	s10, [r2]
{
 80020ea:	b4f0      	push	{r4, r5, r6, r7}
 80020ec:	4c3a      	ldr	r4, [pc, #232]	; (80021d8 <SDR_CWPeak+0x10c>)
 80020ee:	4f3b      	ldr	r7, [pc, #236]	; (80021dc <SDR_CWPeak+0x110>)
 80020f0:	edd4 4a00 	vldr	s9, [r4]
 80020f4:	4e3a      	ldr	r6, [pc, #232]	; (80021e0 <SDR_CWPeak+0x114>)
 80020f6:	4d3b      	ldr	r5, [pc, #236]	; (80021e4 <SDR_CWPeak+0x118>)
 80020f8:	eeb1 2a64 	vneg.f32	s4, s9
 80020fc:	edd7 7a00 	vldr	s15, [r7]
 8002100:	edd6 5a00 	vldr	s11, [r6]
 8002104:	ed95 7a00 	vldr	s14, [r5]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002108:	ee66 3ae7 	vnmul.f32	s7, s13, s15
 800210c:	ed50 7a04 	vldr	s15, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002110:	ee26 4ac7 	vnmul.f32	s8, s13, s14
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002114:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002118:	ed10 7a02 	vldr	s14, [r0, #-8]
	 while(blkCnt--)
 800211c:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800211e:	eee2 3a22 	vfma.f32	s7, s4, s5
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002122:	ed10 3a01 	vldr	s6, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002126:	eea2 4a25 	vfma.f32	s8, s4, s11
	 while(blkCnt--)
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002132:	eee7 3a85 	vfma.f32	s7, s15, s10
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002136:	eea3 4a85 	vfma.f32	s8, s7, s10
	   *buf++ = y0;
 800213a:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800213e:	ed92 5a00 	vldr	s10, [r2]
 8002142:	edd1 6a00 	vldr	s13, [r1]
 8002146:	ee25 6a06 	vmul.f32	s12, s10, s12
 800214a:	edd4 4a00 	vldr	s9, [r4]
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800214e:	ee65 7a07 	vmul.f32	s15, s10, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002152:	ee25 3a03 	vmul.f32	s6, s10, s6
 8002156:	eeb0 7a46 	vmov.f32	s14, s12
 800215a:	eee6 7ae3 	vfms.f32	s15, s13, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800215e:	eeb1 2a64 	vneg.f32	s4, s9
 8002162:	eea6 7ae2 	vfms.f32	s14, s13, s5
 8002166:	eea4 7ae3 	vfms.f32	s14, s9, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800216a:	eef0 3a43 	vmov.f32	s7, s6
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800216e:	eee4 7ac7 	vfms.f32	s15, s9, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002172:	ee25 6a07 	vmul.f32	s12, s10, s14
 8002176:	eee6 3ac7 	vfms.f32	s7, s13, s14
 800217a:	eea4 6ac4 	vfms.f32	s12, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800217e:	ee25 7a27 	vmul.f32	s14, s10, s15
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002182:	eee4 3ae7 	vfms.f32	s7, s9, s15
 8002186:	eea6 7ac4 	vfms.f32	s14, s13, s8
 800218a:	eeb0 4a46 	vmov.f32	s8, s12
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800218e:	eea6 6ae5 	vfms.f32	s12, s13, s11
	   *buf++ = y0;
 8002192:	ee96 4aa5 	vfnms.f32	s8, s13, s11
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002196:	ee65 5a23 	vmul.f32	s11, s10, s7
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800219a:	eef0 2a63 	vmov.f32	s5, s7
 800219e:	eee6 5ac6 	vfms.f32	s11, s13, s12
	   *buf++ = y0;
 80021a2:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021a6:	eea4 7a84 	vfma.f32	s14, s9, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80021aa:	eee4 5ac7 	vfms.f32	s11, s9, s14
	   *buf++ = y0;
 80021ae:	ed00 7a06 	vstr	s14, [r0, #-24]	; 0xffffffe8
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 80021b2:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 80021b6:	d1a7      	bne.n	8002108 <SDR_CWPeak+0x3c>
 80021b8:	edc7 7a00 	vstr	s15, [r7]
 80021bc:	edc6 5a00 	vstr	s11, [r6]
 80021c0:	ed85 7a00 	vstr	s14, [r5]
 80021c4:	edcc 3a00 	vstr	s7, [ip]
   }
}
 80021c8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ca:	4770      	bx	lr
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	24009cd8 	.word	0x24009cd8
 80021d4:	2400ce0c 	.word	0x2400ce0c
 80021d8:	24005820 	.word	0x24005820
 80021dc:	240006d4 	.word	0x240006d4
 80021e0:	240006d0 	.word	0x240006d0
 80021e4:	240006d8 	.word	0x240006d8
 80021e8:	240006cc 	.word	0x240006cc

080021ec <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <SDR_demodAM_AGC+0xd0>)
{
 80021f2:	b082      	sub	sp, #8
 80021f4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80022d8 <SDR_demodAM_AGC+0xec>
 80021f8:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 80021fc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80022dc <SDR_demodAM_AGC+0xf0>
 8002200:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 80022e0 <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 8002204:	881f      	ldrh	r7, [r3, #0]
 8002206:	ed98 7a00 	vldr	s14, [r8]
 800220a:	f8dc 3000 	ldr.w	r3, [ip]
 800220e:	ed9e 6a00 	vldr	s12, [lr]
 8002212:	4c2b      	ldr	r4, [pc, #172]	; (80022c0 <SDR_demodAM_AGC+0xd4>)
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <SDR_demodAM_AGC+0xd8>)
 8002216:	eddf 4a2c 	vldr	s9, [pc, #176]	; 80022c8 <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 800221a:	4e2c      	ldr	r6, [pc, #176]	; (80022cc <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800221c:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 80022d0 <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002220:	edd0 7a01 	vldr	s15, [r0, #4]
 8002224:	3008      	adds	r0, #8
 8002226:	ed50 6a02 	vldr	s13, [r0, #-8]
 800222a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800222e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8002232:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8002236:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 800223a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8002242:	bfa8      	it	ge
 8002244:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 8002248:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 800224c:	bfb8      	it	lt
 800224e:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 8002252:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	d502      	bpl.n	8002262 <SDR_demodAM_AGC+0x76>
 800225c:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 8002260:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 8002262:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002266:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 800226a:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 800226e:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002272:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 8002276:	b91b      	cbnz	r3, 8002280 <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 8002278:	edd6 6a00 	vldr	s13, [r6]
 800227c:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002280:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002284:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002286:	eddd 7a00 	vldr	s15, [sp]
 800228a:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 800228e:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002292:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8002296:	d1c3      	bne.n	8002220 <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 800229a:	2b00      	cmp	r3, #0
 800229c:	ed88 7a00 	vstr	s14, [r8]
 80022a0:	f8cc 3000 	str.w	r3, [ip]
 80022a4:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 80022a8:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 80022ac:	dd02      	ble.n	80022b4 <SDR_demodAM_AGC+0xc8>
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f8cc 3000 	str.w	r3, [ip]
}
 80022b4:	b002      	add	sp, #8
 80022b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ba:	bf00      	nop
 80022bc:	24009290 	.word	0x24009290
 80022c0:	2400acf0 	.word	0x2400acf0
 80022c4:	24001e78 	.word	0x24001e78
 80022c8:	00000000 	.word	0x00000000
 80022cc:	24003e84 	.word	0x24003e84
 80022d0:	3f75c28f 	.word	0x3f75c28f
 80022d4:	24009b24 	.word	0x24009b24
 80022d8:	24000170 	.word	0x24000170
 80022dc:	240006b8 	.word	0x240006b8
 80022e0:	240006c8 	.word	0x240006c8

080022e4 <SDR_demodSSB_CW_AGC>:
	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022e4:	4b5d      	ldr	r3, [pc, #372]	; (800245c <SDR_demodSSB_CW_AGC+0x178>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022e6:	4a5e      	ldr	r2, [pc, #376]	; (8002460 <SDR_demodSSB_CW_AGC+0x17c>)
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022e8:	f8b3 c004 	ldrh.w	ip, [r3, #4]
{
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80022ee:	7814      	ldrb	r4, [r2, #0]
{
 80022f0:	460a      	mov	r2, r1
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80022f2:	8859      	ldrh	r1, [r3, #2]
 80022f4:	f241 0504 	movw	r5, #4100	; 0x1004
 80022f8:	4f5a      	ldr	r7, [pc, #360]	; (8002464 <SDR_demodSSB_CW_AGC+0x180>)
 80022fa:	2c01      	cmp	r4, #1
 80022fc:	bf08      	it	eq
 80022fe:	468c      	moveq	ip, r1
 8002300:	4e59      	ldr	r6, [pc, #356]	; (8002468 <SDR_demodSSB_CW_AGC+0x184>)
 8002302:	2c03      	cmp	r4, #3
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002304:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8002308:	ed97 7a00 	vldr	s14, [r7]
 800230c:	f100 0304 	add.w	r3, r0, #4
 8002310:	6831      	ldr	r1, [r6, #0]
 8002312:	d06f      	beq.n	80023f4 <SDR_demodSSB_CW_AGC+0x110>
 8002314:	2c01      	cmp	r4, #1
 8002316:	4405      	add	r5, r0
 8002318:	4c54      	ldr	r4, [pc, #336]	; (800246c <SDR_demodSSB_CW_AGC+0x188>)
 800231a:	4855      	ldr	r0, [pc, #340]	; (8002470 <SDR_demodSSB_CW_AGC+0x18c>)
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 800231c:	f8df e15c 	ldr.w	lr, [pc, #348]	; 800247c <SDR_demodSSB_CW_AGC+0x198>
 8002320:	d03a      	beq.n	8002398 <SDR_demodSSB_CW_AGC+0xb4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ed13 6a01 	vldr	s12, [r3, #-4]
 800232a:	ee67 6aa7 	vmul.f32	s13, s15, s15
	  if ((sav) > CWLevel)
 800232e:	edd4 5a00 	vldr	s11, [r4]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002332:	eee6 6a06 	vfma.f32	s13, s12, s12
      *pOut = sqrtf(in);
 8002336:	eef1 7ae6 	vsqrt.f32	s15, s13
	  if ((sav) > CWLevel)
 800233a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	dd03      	ble.n	800234c <SDR_demodSSB_CW_AGC+0x68>
		  CWLevel= (sav);
 8002344:	edc4 7a00 	vstr	s15, [r4]
 8002348:	ed13 6a01 	vldr	s12, [r3, #-4]
	  if(pk < sav)
 800234c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002350:	3308      	adds	r3, #8
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	d502      	bpl.n	800235e <SDR_demodSSB_CW_AGC+0x7a>
 8002358:	eeb0 7a67 	vmov.f32	s14, s15
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800235c:	4661      	mov	r1, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800235e:	edd0 6a00 	vldr	s13, [r0]
 8002362:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8002366:	eec6 5a26 	vdiv.f32	s11, s12, s13
 800236a:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 800236e:	b919      	cbnz	r1, 8002378 <SDR_demodSSB_CW_AGC+0x94>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002370:	edde 6a02 	vldr	s13, [lr, #8]
 8002374:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(k=j=0; k<BSIZE*2; k+=2)
 8002378:	429d      	cmp	r5, r3
 800237a:	d1d2      	bne.n	8002322 <SDR_demodSSB_CW_AGC+0x3e>
 800237c:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <SDR_demodSSB_CW_AGC+0x190>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 800237e:	2900      	cmp	r1, #0
	PeakAudioValue=pk;
 8002380:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <SDR_demodSSB_CW_AGC+0x194>)
 8002382:	ed87 7a00 	vstr	s14, [r7]
 8002386:	6031      	str	r1, [r6, #0]
 8002388:	edc2 7a00 	vstr	s15, [r2]
 800238c:	ed83 7a00 	vstr	s14, [r3]
	if(hangcnt > 0)  hangcnt--;
 8002390:	dd01      	ble.n	8002396 <SDR_demodSSB_CW_AGC+0xb2>
 8002392:	3901      	subs	r1, #1
 8002394:	6031      	str	r1, [r6, #0]
}
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ed13 6a01 	vldr	s12, [r3, #-4]
 80023a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
	  if ((sav) > CWLevel)
 80023a4:	edd4 5a00 	vldr	s11, [r4]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80023a8:	eee6 6a06 	vfma.f32	s13, s12, s12
 80023ac:	eef1 7ae6 	vsqrt.f32	s15, s13
	  if ((sav) > CWLevel)
 80023b0:	eef4 7ae5 	vcmpe.f32	s15, s11
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	dd03      	ble.n	80023c2 <SDR_demodSSB_CW_AGC+0xde>
		  CWLevel= (sav);
 80023ba:	edc4 7a00 	vstr	s15, [r4]
 80023be:	ed13 6a01 	vldr	s12, [r3, #-4]
	  if(pk < sav)
 80023c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c6:	3308      	adds	r3, #8
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	d502      	bpl.n	80023d4 <SDR_demodSSB_CW_AGC+0xf0>
 80023ce:	eeb0 7a67 	vmov.f32	s14, s15
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80023d2:	4661      	mov	r1, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80023d4:	edd0 6a00 	vldr	s13, [r0]
 80023d8:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 80023dc:	eec6 5a26 	vdiv.f32	s11, s12, s13
 80023e0:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 80023e4:	b919      	cbnz	r1, 80023ee <SDR_demodSSB_CW_AGC+0x10a>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80023e6:	edde 6a01 	vldr	s13, [lr, #4]
 80023ea:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(k=j=0; k<BSIZE*2; k+=2)
 80023ee:	42ab      	cmp	r3, r5
 80023f0:	d1d2      	bne.n	8002398 <SDR_demodSSB_CW_AGC+0xb4>
 80023f2:	e7c3      	b.n	800237c <SDR_demodSSB_CW_AGC+0x98>
 80023f4:	4405      	add	r5, r0
 80023f6:	4c1d      	ldr	r4, [pc, #116]	; (800246c <SDR_demodSSB_CW_AGC+0x188>)
 80023f8:	481d      	ldr	r0, [pc, #116]	; (8002470 <SDR_demodSSB_CW_AGC+0x18c>)
      if(CurrentMode == CW) pk  *= Decay[CW];
 80023fa:	f8df c080 	ldr.w	ip, [pc, #128]	; 800247c <SDR_demodSSB_CW_AGC+0x198>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002406:	ee67 6aa7 	vmul.f32	s13, s15, s15
	  if ((sav) > CWLevel)
 800240a:	edd4 5a00 	vldr	s11, [r4]
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800240e:	eee6 6a06 	vfma.f32	s13, s12, s12
 8002412:	eef1 7ae6 	vsqrt.f32	s15, s13
	  if ((sav) > CWLevel)
 8002416:	eef4 7ae5 	vcmpe.f32	s15, s11
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	dd03      	ble.n	8002428 <SDR_demodSSB_CW_AGC+0x144>
		  CWLevel= (sav);
 8002420:	edc4 7a00 	vstr	s15, [r4]
 8002424:	ed13 6a01 	vldr	s12, [r3, #-4]
	  if(pk < sav)
 8002428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242c:	3308      	adds	r3, #8
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d502      	bpl.n	800243a <SDR_demodSSB_CW_AGC+0x156>
 8002434:	eeb0 7a67 	vmov.f32	s14, s15
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002438:	4671      	mov	r1, lr
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800243a:	edd0 6a00 	vldr	s13, [r0]
 800243e:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8002442:	eec6 5a26 	vdiv.f32	s11, s12, s13
 8002446:	ece2 5a01 	vstmia	r2!, {s11}
	  if(hangcnt == 0)
 800244a:	b919      	cbnz	r1, 8002454 <SDR_demodSSB_CW_AGC+0x170>
      if(CurrentMode == CW) pk  *= Decay[CW];
 800244c:	eddc 6a03 	vldr	s13, [ip, #12]
 8002450:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(k=j=0; k<BSIZE*2; k+=2)
 8002454:	42ab      	cmp	r3, r5
 8002456:	d1d2      	bne.n	80023fe <SDR_demodSSB_CW_AGC+0x11a>
 8002458:	e790      	b.n	800237c <SDR_demodSSB_CW_AGC+0x98>
 800245a:	bf00      	nop
 800245c:	24009290 	.word	0x24009290
 8002460:	2400de20 	.word	0x2400de20
 8002464:	24000174 	.word	0x24000174
 8002468:	240006bc 	.word	0x240006bc
 800246c:	240060d0 	.word	0x240060d0
 8002470:	2400acf0 	.word	0x2400acf0
 8002474:	240006c0 	.word	0x240006c0
 8002478:	24009b24 	.word	0x24009b24
 800247c:	24003e84 	.word	0x24003e84

08002480 <DisplayCW.part.0>:
	HAL_Delay(1);
#endif
}

#ifdef CW_DECODER
void DisplayCW(void)
 8002480:	b530      	push	{r4, r5, lr}
{
	static uint8_t PosColumn;
	static uint8_t PosRow = 13;
	if ((uint8_t)DecodedCWChar == 0)
		return;
	NCharReceived++;
 8002482:	4921      	ldr	r1, [pc, #132]	; (8002508 <DisplayCW.part.0+0x88>)
void DisplayCW(void)
 8002484:	b083      	sub	sp, #12

	if (PosColumn++ >= 40)
 8002486:	4c21      	ldr	r4, [pc, #132]	; (800250c <DisplayCW.part.0+0x8c>)
	NCharReceived++;
 8002488:	680a      	ldr	r2, [r1, #0]
	if (PosColumn++ >= 40)
 800248a:	7823      	ldrb	r3, [r4, #0]
	NCharReceived++;
 800248c:	3201      	adds	r2, #1
	if (PosColumn++ >= 40)
 800248e:	2b27      	cmp	r3, #39	; 0x27
	NCharReceived++;
 8002490:	600a      	str	r2, [r1, #0]
	if (PosColumn++ >= 40)
 8002492:	d81a      	bhi.n	80024ca <DisplayCW.part.0+0x4a>
 8002494:	3301      	adds	r3, #1
 8002496:	4d1e      	ldr	r5, [pc, #120]	; (8002510 <DisplayCW.part.0+0x90>)
 8002498:	b2db      	uxtb	r3, r3
 800249a:	7023      	strb	r3, [r4, #0]
		//Clear line
		sprintf((char*)UartTXString, "\e[%d;%dH                                                         ", PosRow, PosColumn);
		PrintUI(UartTXString);
	}

	sprintf((char*)UartTXString, "\e[%d;%dH%c", PosRow, PosColumn, DecodedCWChar);
 800249c:	4c1d      	ldr	r4, [pc, #116]	; (8002514 <DisplayCW.part.0+0x94>)
 800249e:	782a      	ldrb	r2, [r5, #0]
 80024a0:	7820      	ldrb	r0, [r4, #0]
 80024a2:	491d      	ldr	r1, [pc, #116]	; (8002518 <DisplayCW.part.0+0x98>)
 80024a4:	9000      	str	r0, [sp, #0]
 80024a6:	481d      	ldr	r0, [pc, #116]	; (800251c <DisplayCW.part.0+0x9c>)
 80024a8:	f00c fa98 	bl	800e9dc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80024ac:	481b      	ldr	r0, [pc, #108]	; (800251c <DisplayCW.part.0+0x9c>)
 80024ae:	f7fd ff17 	bl	80002e0 <strlen>
 80024b2:	4601      	mov	r1, r0
 80024b4:	4819      	ldr	r0, [pc, #100]	; (800251c <DisplayCW.part.0+0x9c>)
 80024b6:	b289      	uxth	r1, r1
 80024b8:	f00a fa76 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80024bc:	2001      	movs	r0, #1
 80024be:	f001 fe6b 	bl	8004198 <HAL_Delay>
	PrintUI(UartTXString);

	DecodedCWChar = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	7023      	strb	r3, [r4, #0]
}
 80024c6:	b003      	add	sp, #12
 80024c8:	bd30      	pop	{r4, r5, pc}
		PosRow++;
 80024ca:	4d11      	ldr	r5, [pc, #68]	; (8002510 <DisplayCW.part.0+0x90>)
		PosColumn = 1;
 80024cc:	2301      	movs	r3, #1
		PosRow++;
 80024ce:	782a      	ldrb	r2, [r5, #0]
		PosColumn = 1;
 80024d0:	7023      	strb	r3, [r4, #0]
		PosRow++;
 80024d2:	441a      	add	r2, r3
 80024d4:	b2d2      	uxtb	r2, r2
		if (PosRow >= 13 + 4)
 80024d6:	2a10      	cmp	r2, #16
 80024d8:	d812      	bhi.n	8002500 <DisplayCW.part.0+0x80>
		PosRow++;
 80024da:	702a      	strb	r2, [r5, #0]
		sprintf((char*)UartTXString, "\e[%d;%dH                                                         ", PosRow, PosColumn);
 80024dc:	2301      	movs	r3, #1
 80024de:	4910      	ldr	r1, [pc, #64]	; (8002520 <DisplayCW.part.0+0xa0>)
 80024e0:	480e      	ldr	r0, [pc, #56]	; (800251c <DisplayCW.part.0+0x9c>)
 80024e2:	f00c fa7b 	bl	800e9dc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <DisplayCW.part.0+0x9c>)
 80024e8:	f7fd fefa 	bl	80002e0 <strlen>
 80024ec:	4601      	mov	r1, r0
 80024ee:	480b      	ldr	r0, [pc, #44]	; (800251c <DisplayCW.part.0+0x9c>)
 80024f0:	b289      	uxth	r1, r1
 80024f2:	f00a fa59 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f001 fe4e 	bl	8004198 <HAL_Delay>
 80024fc:	7823      	ldrb	r3, [r4, #0]
}
 80024fe:	e7cd      	b.n	800249c <DisplayCW.part.0+0x1c>
			PosRow = 13;
 8002500:	230d      	movs	r3, #13
 8002502:	461a      	mov	r2, r3
 8002504:	702b      	strb	r3, [r5, #0]
 8002506:	e7e9      	b.n	80024dc <DisplayCW.part.0+0x5c>
 8002508:	24003e94 	.word	0x24003e94
 800250c:	240006ec 	.word	0x240006ec
 8002510:	2400027c 	.word	0x2400027c
 8002514:	2400acec 	.word	0x2400acec
 8002518:	080180f4 	.word	0x080180f4
 800251c:	24000a4c 	.word	0x24000a4c
 8002520:	080180b0 	.word	0x080180b0

08002524 <HAL_ADC_ConvCpltCallback>:
{
 8002524:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002528:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800252c:	490a      	ldr	r1, [pc, #40]	; (8002558 <HAL_ADC_ConvCpltCallback+0x34>)
 800252e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002532:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002536:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002538:	4293      	cmp	r3, r2
 800253a:	d1fa      	bne.n	8002532 <HAL_ADC_ConvCpltCallback+0xe>
 800253c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002540:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f7fe ff11 	bl	800136c <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_ADC_ConvCpltCallback+0x38>)
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
}
 8002550:	bd08      	pop	{r3, pc}
 8002552:	bf00      	nop
 8002554:	2400ea40 	.word	0x2400ea40
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	24000711 	.word	0x24000711

08002560 <HAL_ADC_ConvHalfCpltCallback>:
{
 8002560:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002564:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002568:	490a      	ldr	r1, [pc, #40]	; (8002594 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800256a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800256e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002572:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8002574:	4293      	cmp	r3, r2
 8002576:	d1fa      	bne.n	800256e <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800257c:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8002580:	2000      	movs	r0, #0
 8002582:	f7fe fef3 	bl	800136c <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
}
 800258c:	bd08      	pop	{r3, pc}
 800258e:	bf00      	nop
 8002590:	2400e640 	.word	0x2400e640
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	24000711 	.word	0x24000711

0800259c <HAL_DAC_ConvCpltCallbackCh1>:
{
 800259c:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 80025a0:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 80025a2:	4c05      	ldr	r4, [pc, #20]	; (80025b8 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 80025a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80025aa:	601c      	str	r4, [r3, #0]
}
 80025ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80025b0:	f004 bdb6 	b.w	8007120 <HAL_GPIO_WritePin>
 80025b4:	240058cc 	.word	0x240058cc
 80025b8:	240085e0 	.word	0x240085e0
 80025bc:	58020400 	.word	0x58020400

080025c0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
{
 80025c0:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80025c4:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80025c6:	4c05      	ldr	r4, [pc, #20]	; (80025dc <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80025c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80025ce:	601c      	str	r4, [r3, #0]
}
 80025d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 80025d4:	f004 bda4 	b.w	8007120 <HAL_GPIO_WritePin>
 80025d8:	240058cc 	.word	0x240058cc
 80025dc:	240081e0 	.word	0x240081e0
 80025e0:	58020400 	.word	0x58020400

080025e4 <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80025e4:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_ADC_LevelOutOfWindowCallback+0x2c>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80025e8:	6811      	ldr	r1, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80025ea:	681a      	ldr	r2, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80025ec:	684b      	ldr	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 80025ee:	4809      	ldr	r0, [pc, #36]	; (8002614 <HAL_ADC_LevelOutOfWindowCallback+0x30>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80025f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 80025f4:	b410      	push	{r4}
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 80025f6:	604b      	str	r3, [r1, #4]
	OVFDetected = OVF_TIMEOUT;
 80025f8:	2402      	movs	r4, #2
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80025fa:	6853      	ldr	r3, [r2, #4]
	OVFDetected = OVF_TIMEOUT;
 80025fc:	8004      	strh	r4, [r0, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 80025fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 8002602:	f85d 4b04 	ldr.w	r4, [sp], #4
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002606:	6053      	str	r3, [r2, #4]
}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	240089e4 	.word	0x240089e4
 8002610:	24003f88 	.word	0x24003f88
 8002614:	24001e7c 	.word	0x24001e7c

08002618 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <DisplayStatus+0x188>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
{
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	b088      	sub	sp, #32
	switch(Fstep)
 8002624:	f000 80a5 	beq.w	8002772 <DisplayStatus+0x15a>
 8002628:	d81c      	bhi.n	8002664 <DisplayStatus+0x4c>
 800262a:	2b0a      	cmp	r3, #10
 800262c:	f000 80a8 	beq.w	8002780 <DisplayStatus+0x168>
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d10e      	bne.n	8002652 <DisplayStatus+0x3a>
	{
	case 1: strcpy(StringStep,"   1"); break;
	case 10: strcpy(StringStep,"  10"); break;
	case 100: strcpy(StringStep," 100"); break;
 8002634:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <DisplayStatus+0x18c>)
 8002636:	4c5c      	ldr	r4, [pc, #368]	; (80027a8 <DisplayStatus+0x190>)
 8002638:	e893 0003 	ldmia.w	r3, {r0, r1}
 800263c:	6020      	str	r0, [r4, #0]
 800263e:	7121      	strb	r1, [r4, #4]
	case 9000: strcpy(StringStep,"   9K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 8002640:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <DisplayStatus+0x194>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	f200 80a9 	bhi.w	800279c <DisplayStatus+0x184>
 800264a:	e8df f003 	tbb	[pc, r3]
 800264e:	716f      	.short	0x716f
 8002650:	278a      	.short	0x278a
	switch(Fstep)
 8002652:	2b01      	cmp	r3, #1
 8002654:	d120      	bne.n	8002698 <DisplayStatus+0x80>
	case 1: strcpy(StringStep,"   1"); break;
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <DisplayStatus+0x198>)
 8002658:	4c53      	ldr	r4, [pc, #332]	; (80027a8 <DisplayStatus+0x190>)
 800265a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800265e:	6020      	str	r0, [r4, #0]
 8002660:	7121      	strb	r1, [r4, #4]
 8002662:	e7ed      	b.n	8002640 <DisplayStatus+0x28>
	switch(Fstep)
 8002664:	f242 7210 	movw	r2, #10000	; 0x2710
 8002668:	4293      	cmp	r3, r2
 800266a:	f000 8090 	beq.w	800278e <DisplayStatus+0x176>
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <DisplayStatus+0x19c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d106      	bne.n	8002682 <DisplayStatus+0x6a>
	case 100000: strcpy(StringStep,"100K"); break;
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <DisplayStatus+0x1a0>)
 8002676:	4c4c      	ldr	r4, [pc, #304]	; (80027a8 <DisplayStatus+0x190>)
 8002678:	e893 0003 	ldmia.w	r3, {r0, r1}
 800267c:	6020      	str	r0, [r4, #0]
 800267e:	7121      	strb	r1, [r4, #4]
 8002680:	e7de      	b.n	8002640 <DisplayStatus+0x28>
	switch(Fstep)
 8002682:	f242 3228 	movw	r2, #9000	; 0x2328
 8002686:	4293      	cmp	r3, r2
 8002688:	d106      	bne.n	8002698 <DisplayStatus+0x80>
	case 9000: strcpy(StringStep,"   9K"); break;
 800268a:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <DisplayStatus+0x1a4>)
 800268c:	4c46      	ldr	r4, [pc, #280]	; (80027a8 <DisplayStatus+0x190>)
 800268e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002692:	6020      	str	r0, [r4, #0]
 8002694:	80a1      	strh	r1, [r4, #4]
 8002696:	e7d3      	b.n	8002640 <DisplayStatus+0x28>
 8002698:	4c43      	ldr	r4, [pc, #268]	; (80027a8 <DisplayStatus+0x190>)
 800269a:	e7d1      	b.n	8002640 <DisplayStatus+0x28>
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <DisplayStatus+0x1a8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4d48      	ldr	r5, [pc, #288]	; (80027c4 <DisplayStatus+0x1ac>)
 80026a2:	0c1a      	lsrs	r2, r3, #16
 80026a4:	802b      	strh	r3, [r5, #0]
 80026a6:	70aa      	strb	r2, [r5, #2]
	}
	switch (CurrentAGC)
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <DisplayStatus+0x1b0>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d046      	beq.n	800273e <DisplayStatus+0x126>
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d15a      	bne.n	800276a <DisplayStatus+0x152>
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <DisplayStatus+0x1b4>)
 80026b6:	4a46      	ldr	r2, [pc, #280]	; (80027d0 <DisplayStatus+0x1b8>)
 80026b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026bc:	6010      	str	r0, [r2, #0]
 80026be:	7111      	strb	r1, [r2, #4]
	}
	switch (CurrentBW)
 80026c0:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <DisplayStatus+0x1bc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d044      	beq.n	8002752 <DisplayStatus+0x13a>
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d150      	bne.n	800276e <DisplayStatus+0x156>
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
 80026cc:	4942      	ldr	r1, [pc, #264]	; (80027d8 <DisplayStatus+0x1c0>)
 80026ce:	4b43      	ldr	r3, [pc, #268]	; (80027dc <DisplayStatus+0x1c4>)
 80026d0:	c903      	ldmia	r1, {r0, r1}
 80026d2:	6018      	str	r0, [r3, #0]
 80026d4:	7119      	strb	r1, [r3, #4]
	}
	sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, volume);
 80026d6:	4842      	ldr	r0, [pc, #264]	; (80027e0 <DisplayStatus+0x1c8>)
 80026d8:	eddf 7a42 	vldr	s15, [pc, #264]	; 80027e4 <DisplayStatus+0x1cc>
 80026dc:	edd0 6a00 	vldr	s13, [r0]
 80026e0:	4941      	ldr	r1, [pc, #260]	; (80027e8 <DisplayStatus+0x1d0>)
 80026e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026e6:	4841      	ldr	r0, [pc, #260]	; (80027ec <DisplayStatus+0x1d4>)
 80026e8:	ed91 7a00 	vldr	s14, [r1]
 80026ec:	4940      	ldr	r1, [pc, #256]	; (80027f0 <DisplayStatus+0x1d8>)
 80026ee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80026f2:	9203      	str	r2, [sp, #12]
 80026f4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80026f8:	6809      	ldr	r1, [r1, #0]
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	9104      	str	r1, [sp, #16]
 80026fe:	493d      	ldr	r1, [pc, #244]	; (80027f4 <DisplayStatus+0x1dc>)
 8002700:	ec53 2b16 	vmov	r2, r3, d6
 8002704:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002708:	e9cd 4500 	strd	r4, r5, [sp]
 800270c:	f00c f966 	bl	800e9dc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002710:	4836      	ldr	r0, [pc, #216]	; (80027ec <DisplayStatus+0x1d4>)
 8002712:	f7fd fde5 	bl	80002e0 <strlen>
 8002716:	4601      	mov	r1, r0
 8002718:	4834      	ldr	r0, [pc, #208]	; (80027ec <DisplayStatus+0x1d4>)
 800271a:	b289      	uxth	r1, r1
 800271c:	f00a f944 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002720:	2001      	movs	r0, #1
	PrintUI(UartTXString);
}
 8002722:	b008      	add	sp, #32
 8002724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8002728:	f001 bd36 	b.w	8004198 <HAL_Delay>
	case AM: strcpy(StringMode,"AM"); break;
 800272c:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <DisplayStatus+0x1e0>)
 800272e:	e7b6      	b.n	800269e <DisplayStatus+0x86>
	case LSB: strcpy(StringMode,"LSB"); break;
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <DisplayStatus+0x1e4>)
 8002732:	4d24      	ldr	r5, [pc, #144]	; (80027c4 <DisplayStatus+0x1ac>)
 8002734:	602b      	str	r3, [r5, #0]
	switch (CurrentAGC)
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <DisplayStatus+0x1b0>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1b8      	bne.n	80026b0 <DisplayStatus+0x98>
	case Fast: strcpy(StringAGC,"Fast"); break;
 800273e:	4b30      	ldr	r3, [pc, #192]	; (8002800 <DisplayStatus+0x1e8>)
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <DisplayStatus+0x1b8>)
 8002742:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <DisplayStatus+0x1bc>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002748:	6010      	str	r0, [r2, #0]
	switch (CurrentBW)
 800274a:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 800274c:	7111      	strb	r1, [r2, #4]
	switch (CurrentBW)
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ba      	bne.n	80026c8 <DisplayStatus+0xb0>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 8002752:	492c      	ldr	r1, [pc, #176]	; (8002804 <DisplayStatus+0x1ec>)
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <DisplayStatus+0x1c4>)
 8002756:	c903      	ldmia	r1, {r0, r1}
 8002758:	0c0e      	lsrs	r6, r1, #16
 800275a:	6018      	str	r0, [r3, #0]
 800275c:	8099      	strh	r1, [r3, #4]
 800275e:	719e      	strb	r6, [r3, #6]
 8002760:	e7b9      	b.n	80026d6 <DisplayStatus+0xbe>
	case USB: strcpy(StringMode,"USB"); break;
 8002762:	4d18      	ldr	r5, [pc, #96]	; (80027c4 <DisplayStatus+0x1ac>)
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <DisplayStatus+0x1f0>)
 8002766:	602b      	str	r3, [r5, #0]
 8002768:	e79e      	b.n	80026a8 <DisplayStatus+0x90>
 800276a:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <DisplayStatus+0x1b8>)
 800276c:	e7a8      	b.n	80026c0 <DisplayStatus+0xa8>
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <DisplayStatus+0x1c4>)
 8002770:	e7b1      	b.n	80026d6 <DisplayStatus+0xbe>
	case 1000: strcpy(StringStep,"  1K"); break;
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <DisplayStatus+0x1f4>)
 8002774:	4c0c      	ldr	r4, [pc, #48]	; (80027a8 <DisplayStatus+0x190>)
 8002776:	e893 0003 	ldmia.w	r3, {r0, r1}
 800277a:	6020      	str	r0, [r4, #0]
 800277c:	7121      	strb	r1, [r4, #4]
 800277e:	e75f      	b.n	8002640 <DisplayStatus+0x28>
	case 10: strcpy(StringStep,"  10"); break;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <DisplayStatus+0x1f8>)
 8002782:	4c09      	ldr	r4, [pc, #36]	; (80027a8 <DisplayStatus+0x190>)
 8002784:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002788:	6020      	str	r0, [r4, #0]
 800278a:	7121      	strb	r1, [r4, #4]
 800278c:	e758      	b.n	8002640 <DisplayStatus+0x28>
	case 10000: strcpy(StringStep," 10K"); break;
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <DisplayStatus+0x1fc>)
 8002790:	4c05      	ldr	r4, [pc, #20]	; (80027a8 <DisplayStatus+0x190>)
 8002792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002796:	6020      	str	r0, [r4, #0]
 8002798:	7121      	strb	r1, [r4, #4]
 800279a:	e751      	b.n	8002640 <DisplayStatus+0x28>
 800279c:	4d09      	ldr	r5, [pc, #36]	; (80027c4 <DisplayStatus+0x1ac>)
 800279e:	e783      	b.n	80026a8 <DisplayStatus+0x90>
 80027a0:	2400de18 	.word	0x2400de18
 80027a4:	08018110 	.word	0x08018110
 80027a8:	24000700 	.word	0x24000700
 80027ac:	2400de20 	.word	0x2400de20
 80027b0:	08018100 	.word	0x08018100
 80027b4:	000186a0 	.word	0x000186a0
 80027b8:	08018130 	.word	0x08018130
 80027bc:	08018120 	.word	0x08018120
 80027c0:	0801813c 	.word	0x0801813c
 80027c4:	240006f8 	.word	0x240006f8
 80027c8:	24001a60 	.word	0x24001a60
 80027cc:	08018148 	.word	0x08018148
 80027d0:	240006f0 	.word	0x240006f0
 80027d4:	24001e74 	.word	0x24001e74
 80027d8:	08018158 	.word	0x08018158
 80027dc:	24000708 	.word	0x24000708
 80027e0:	2400acfc 	.word	0x2400acfc
 80027e4:	3a83126f 	.word	0x3a83126f
 80027e8:	2400581c 	.word	0x2400581c
 80027ec:	24000a4c 	.word	0x24000a4c
 80027f0:	24001e70 	.word	0x24001e70
 80027f4:	08018160 	.word	0x08018160
 80027f8:	08018138 	.word	0x08018138
 80027fc:	0042534c 	.word	0x0042534c
 8002800:	08018140 	.word	0x08018140
 8002804:	08018150 	.word	0x08018150
 8002808:	00425355 	.word	0x00425355
 800280c:	08018118 	.word	0x08018118
 8002810:	08018108 	.word	0x08018108
 8002814:	08018128 	.word	0x08018128

08002818 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <SetTXPLL+0xec>)
 800281a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	MinDiff = 999999999;
 800281e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002908 <SetTXPLL+0xf0>
				OutF = XTalFreq * n / m / p / od;
 8002822:	edd3 4a00 	vldr	s9, [r3]
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002826:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800290c <SetTXPLL+0xf4>
 800282a:	eddf 3a39 	vldr	s7, [pc, #228]	; 8002910 <SetTXPLL+0xf8>
{
 800282e:	b4f0      	push	{r4, r5, r6, r7}
	for (m = 2; m <= 25; m++) //was 64
 8002830:	2502      	movs	r5, #2
		for (n = 2; n <= 512; n++) //was 1
 8002832:	f240 2601 	movw	r6, #513	; 0x201
				OutF = XTalFreq * n / m / p / od;
 8002836:	ee07 5a90 	vmov	s15, r5
		for (n = 2; n <= 512; n++) //was 1
 800283a:	2202      	movs	r2, #2
				OutF = XTalFreq * n / m / p / od;
 800283c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002840:	ee83 4a25 	vdiv.f32	s8, s6, s11
 8002844:	e002      	b.n	800284c <SetTXPLL+0x34>
		for (n = 2; n <= 512; n++) //was 1
 8002846:	3201      	adds	r2, #1
 8002848:	42b2      	cmp	r2, r6
 800284a:	d037      	beq.n	80028bc <SetTXPLL+0xa4>
				OutF = XTalFreq * n / m / p / od;
 800284c:	ee07 2a90 	vmov	s15, r2
 8002850:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002854:	ee26 6a24 	vmul.f32	s12, s12, s9
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002858:	ee66 7a04 	vmul.f32	s15, s12, s8
 800285c:	eef4 7a45 	vcmp.f32	s15, s10
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	ddef      	ble.n	8002846 <SetTXPLL+0x2e>
 8002866:	eef4 7ae3 	vcmpe.f32	s15, s7
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d5ea      	bpl.n	8002846 <SetTXPLL+0x2e>
			for (p = 2; p <= 128; p+=2)
 8002870:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800287a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800287e:	eec6 7a07 	vdiv.f32	s15, s12, s14
				if ((abs(OutF - TF) < MinDiff) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8002882:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288a:	ee17 7a90 	vmov	r7, s15
 800288e:	2f00      	cmp	r7, #0
 8002890:	bfb8      	it	lt
 8002892:	427f      	neglt	r7, r7
 8002894:	ee07 7a90 	vmov	s15, r7
 8002898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289c:	eef4 7ae6 	vcmpe.f32	s15, s13
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d504      	bpl.n	80028b0 <SetTXPLL+0x98>
 80028a6:	eef0 6a67 	vmov.f32	s13, s15
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	462c      	mov	r4, r5
			for (p = 2; p <= 128; p+=2)
 80028b0:	3302      	adds	r3, #2
 80028b2:	2b82      	cmp	r3, #130	; 0x82
 80028b4:	d1dd      	bne.n	8002872 <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 80028b6:	3201      	adds	r2, #1
 80028b8:	42b2      	cmp	r2, r6
 80028ba:	d1c7      	bne.n	800284c <SetTXPLL+0x34>
	for (m = 2; m <= 25; m++) //was 64
 80028bc:	3501      	adds	r5, #1
 80028be:	2d1a      	cmp	r5, #26
 80028c0:	d1b9      	bne.n	8002836 <SetTXPLL+0x1e>
				}
			}
		}
	}
	TXFreqError = MinDiff;
	__HAL_RCC_PLL2_DISABLE();
 80028c2:	4d14      	ldr	r5, [pc, #80]	; (8002914 <SetTXPLL+0xfc>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80028c4:	1e4b      	subs	r3, r1, #1
 80028c6:	1e42      	subs	r2, r0, #1
	TXFreqError = MinDiff;
 80028c8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	__HAL_RCC_PLL2_DISABLE();
 80028cc:	6829      	ldr	r1, [r5, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80028ce:	025b      	lsls	r3, r3, #9
	TXFreqError = MinDiff;
 80028d0:	4e11      	ldr	r6, [pc, #68]	; (8002918 <SetTXPLL+0x100>)
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80028d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d6:	b29b      	uxth	r3, r3
	__HAL_RCC_PLL2_DISABLE();
 80028d8:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
	TXFreqError = MinDiff;
 80028dc:	edc6 6a00 	vstr	s13, [r6]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80028e0:	4313      	orrs	r3, r2
	__HAL_RCC_PLL2_DISABLE();
 80028e2:	6029      	str	r1, [r5, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 80028e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ea:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 80028ee:	ea42 3404 	orr.w	r4, r2, r4, lsl #12
 80028f2:	62ac      	str	r4, [r5, #40]	; 0x28
 80028f4:	63ab      	str	r3, [r5, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 80028f6:	682b      	ldr	r3, [r5, #0]
 80028f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fc:	602b      	str	r3, [r5, #0]

}
 80028fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	24009298 	.word	0x24009298
 8002908:	4e6e6b28 	.word	0x4e6e6b28
 800290c:	4d0f0d18 	.word	0x4d0f0d18
 8002910:	4e64e1c0 	.word	0x4e64e1c0
 8002914:	58024400 	.word	0x58024400
 8002918:	24001e70 	.word	0x24001e70
 800291c:	00000000 	.word	0x00000000

08002920 <UserInput>:
	if (USBRXLength)
 8002920:	4ba9      	ldr	r3, [pc, #676]	; (8002bc8 <UserInput+0x2a8>)
 8002922:	681a      	ldr	r2, [r3, #0]
{
 8002924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002928:	ed2d 8b04 	vpush	{d8-d9}
 800292c:	b090      	sub	sp, #64	; 0x40
	if (USBRXLength)
 800292e:	2a00      	cmp	r2, #0
 8002930:	f000 8182 	beq.w	8002c38 <UserInput+0x318>
		result = HAL_OK;
 8002934:	2200      	movs	r2, #0
 8002936:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		USBRXLength = 0;
 800293a:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 800293c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8002940:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002944:	2b00      	cmp	r3, #0
 8002946:	f040 8083 	bne.w	8002a50 <UserInput+0x130>
		switch (UartRXString[0])
 800294a:	4ba0      	ldr	r3, [pc, #640]	; (8002bcc <UserInput+0x2ac>)
		UartRXDataReady = RESET;
 800294c:	49a0      	ldr	r1, [pc, #640]	; (8002bd0 <UserInput+0x2b0>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 8002952:	3b2b      	subs	r3, #43	; 0x2b
 8002954:	2b4c      	cmp	r3, #76	; 0x4c
 8002956:	d879      	bhi.n	8002a4c <UserInput+0x12c>
 8002958:	e8df f013 	tbh	[pc, r3, lsl #1]
 800295c:	00780289 	.word	0x00780289
 8002960:	00780274 	.word	0x00780274
 8002964:	00780078 	.word	0x00780078
 8002968:	02a302a7 	.word	0x02a302a7
 800296c:	029b029f 	.word	0x029b029f
 8002970:	02c502c9 	.word	0x02c502c9
 8002974:	02bd02c1 	.word	0x02bd02c1
 8002978:	007802b9 	.word	0x007802b9
 800297c:	00780078 	.word	0x00780078
 8002980:	00780078 	.word	0x00780078
 8002984:	00780078 	.word	0x00780078
 8002988:	00780078 	.word	0x00780078
 800298c:	00780078 	.word	0x00780078
 8002990:	00780078 	.word	0x00780078
 8002994:	00780078 	.word	0x00780078
 8002998:	00780078 	.word	0x00780078
 800299c:	00780078 	.word	0x00780078
 80029a0:	00780078 	.word	0x00780078
 80029a4:	00780078 	.word	0x00780078
 80029a8:	00780078 	.word	0x00780078
 80029ac:	00780078 	.word	0x00780078
 80029b0:	00780078 	.word	0x00780078
 80029b4:	007802b3 	.word	0x007802b3
 80029b8:	00780078 	.word	0x00780078
 80029bc:	00780078 	.word	0x00780078
 80029c0:	00780078 	.word	0x00780078
 80029c4:	00780078 	.word	0x00780078
 80029c8:	007802af 	.word	0x007802af
 80029cc:	007802ab 	.word	0x007802ab
 80029d0:	02700078 	.word	0x02700078
 80029d4:	00780078 	.word	0x00780078
 80029d8:	00780078 	.word	0x00780078
 80029dc:	026c0078 	.word	0x026c0078
 80029e0:	02680078 	.word	0x02680078
 80029e4:	00780078 	.word	0x00780078
 80029e8:	02500078 	.word	0x02500078
 80029ec:	004d024c 	.word	0x004d024c
 80029f0:	00780248 	.word	0x00780248
 80029f4:	0244      	.short	0x0244
{
	static float LastTXFreq;
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	if (Status)
	{
		if (LastTXFreq != LOfreq)
 80029f6:	4e77      	ldr	r6, [pc, #476]	; (8002bd4 <UserInput+0x2b4>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 80029fa:	4c77      	ldr	r4, [pc, #476]	; (8002bd8 <UserInput+0x2b8>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	ad0a      	add	r5, sp, #40	; 0x28
		if (LastTXFreq != LOfreq)
 80029fe:	ed96 0a00 	vldr	s0, [r6]
 8002a02:	edd4 7a00 	vldr	s15, [r4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a06:	930a      	str	r3, [sp, #40]	; 0x28
		if (LastTXFreq != LOfreq)
 8002a08:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	606b      	str	r3, [r5, #4]
 8002a0e:	612b      	str	r3, [r5, #16]
		if (LastTXFreq != LOfreq)
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	e9c5 3302 	strd	r3, r3, [r5, #8]
		if (LastTXFreq != LOfreq)
 8002a18:	f040 826d 	bne.w	8002ef6 <UserInput+0x5d6>
		{
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002a24:	2702      	movs	r7, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a26:	2400      	movs	r4, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a28:	4629      	mov	r1, r5
 8002a2a:	486c      	ldr	r0, [pc, #432]	; (8002bdc <UserInput+0x2bc>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a2c:	940e      	str	r4, [sp, #56]	; 0x38
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a2e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002a32:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a36:	f004 fa4f 	bl	8006ed8 <HAL_GPIO_Init>

		RELAY_TX_ON;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a40:	4867      	ldr	r0, [pc, #412]	; (8002be0 <UserInput+0x2c0>)
 8002a42:	f004 fb6d 	bl	8007120 <HAL_GPIO_WritePin>
		TransmissionEnabled = 1;
 8002a46:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <UserInput+0x2c4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		DisplayStatus();
 8002a4c:	f7ff fde4 	bl	8002618 <DisplayStatus>
	EncVal = TIM4->CNT;
 8002a50:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <UserInput+0x2c8>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a52:	4c66      	ldr	r4, [pc, #408]	; (8002bec <UserInput+0x2cc>)
	EncVal = TIM4->CNT;
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a56:	8821      	ldrh	r1, [r4, #0]
	EncVal = TIM4->CNT;
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4d65      	ldr	r5, [pc, #404]	; (8002bf0 <UserInput+0x2d0>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a5c:	1a5a      	subs	r2, r3, r1
	EncVal = TIM4->CNT;
 8002a5e:	802b      	strh	r3, [r5, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8002a60:	b216      	sxth	r6, r2
 8002a62:	b290      	uxth	r0, r2
	if (DiffEncVal > 0)
 8002a64:	2e00      	cmp	r6, #0
 8002a66:	f300 80f4 	bgt.w	8002c52 <UserInput+0x332>
	if (DiffEncVal < 0)
 8002a6a:	f040 80e9 	bne.w	8002c40 <UserInput+0x320>
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a6e:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <UserInput+0x2d4>)
 8002a70:	4c61      	ldr	r4, [pc, #388]	; (8002bf8 <UserInput+0x2d8>)
 8002a72:	ed93 7a00 	vldr	s14, [r3]
 8002a76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8002bb8 <UserInput+0x298>
 8002a7a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002a7e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8002a82:	f00e fc8d 	bl	80113a0 <log10>
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a86:	495d      	ldr	r1, [pc, #372]	; (8002bfc <UserInput+0x2dc>)
 8002a88:	485d      	ldr	r0, [pc, #372]	; (8002c00 <UserInput+0x2e0>)
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a8a:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 8002a8e:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8002bc0 <UserInput+0x2a0>
 8002a92:	eea0 7b06 	vfma.f64	d7, d0, d6
 8002a96:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002a9a:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
	SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002a9e:	ed84 7a00 	vstr	s14, [r4]
	sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     \r", SValue);
 8002aa2:	ec53 2b16 	vmov	r2, r3, d6
 8002aa6:	f00b ff99 	bl	800e9dc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002aaa:	4855      	ldr	r0, [pc, #340]	; (8002c00 <UserInput+0x2e0>)
 8002aac:	f7fd fc18 	bl	80002e0 <strlen>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	4853      	ldr	r0, [pc, #332]	; (8002c00 <UserInput+0x2e0>)
 8002ab4:	b289      	uxth	r1, r1
 8002ab6:	f009 ff77 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f001 fb6c 	bl	8004198 <HAL_Delay>
	sprintf((char*)UartTXString, "\e[7;1HS %-4.1f, %-4.1f, %-4.1f, %d      ", CWLevel*100, SignalAverage*100, (CWLevel - BaseNoiseLevel)*100, CurrentAverageDah);
 8002ac0:	4a50      	ldr	r2, [pc, #320]	; (8002c04 <UserInput+0x2e4>)
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <UserInput+0x2e8>)
 8002ac4:	edd2 7a00 	vldr	s15, [r2]
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <UserInput+0x2ec>)
 8002ace:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ad2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002c10 <UserInput+0x2f0>
 8002ad6:	ed93 6a00 	vldr	s12, [r3]
 8002ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ade:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <UserInput+0x2f4>)
 8002ae0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ae4:	494c      	ldr	r1, [pc, #304]	; (8002c18 <UserInput+0x2f8>)
 8002ae6:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002aea:	681c      	ldr	r4, [r3, #0]
 8002aec:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002af0:	4843      	ldr	r0, [pc, #268]	; (8002c00 <UserInput+0x2e0>)
 8002af2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002af6:	9404      	str	r4, [sp, #16]
 8002af8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002afc:	ec53 2b15 	vmov	r2, r3, d5
 8002b00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b04:	ed8d 6b00 	vstr	d6, [sp]
 8002b08:	f00b ff68 	bl	800e9dc <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002b0c:	483c      	ldr	r0, [pc, #240]	; (8002c00 <UserInput+0x2e0>)
 8002b0e:	f7fd fbe7 	bl	80002e0 <strlen>
 8002b12:	4601      	mov	r1, r0
 8002b14:	483a      	ldr	r0, [pc, #232]	; (8002c00 <UserInput+0x2e0>)
 8002b16:	b289      	uxth	r1, r1
 8002b18:	f009 ff46 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f001 fb3b 	bl	8004198 <HAL_Delay>
	if ((uint8_t)DecodedCWChar == 0)
 8002b22:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <UserInput+0x2fc>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b10b      	cbz	r3, 8002b2c <UserInput+0x20c>
 8002b28:	f7ff fcaa 	bl	8002480 <DisplayCW.part.0>
	if (ShowWF) {
 8002b2c:	4b3c      	ldr	r3, [pc, #240]	; (8002c20 <UserInput+0x300>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 8095 	bne.w	8002c60 <UserInput+0x340>
 8002b36:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002c00 <UserInput+0x2e0>
	if (OVFDetected)
 8002b3a:	493a      	ldr	r1, [pc, #232]	; (8002c24 <UserInput+0x304>)
 8002b3c:	880b      	ldrh	r3, [r1, #0]
 8002b3e:	b363      	cbz	r3, 8002b9a <UserInput+0x27a>
		OVFDetected--;
 8002b40:	3b01      	subs	r3, #1
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002b42:	4d39      	ldr	r5, [pc, #228]	; (8002c28 <UserInput+0x308>)
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002b44:	4839      	ldr	r0, [pc, #228]	; (8002c2c <UserInput+0x30c>)
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002b46:	2480      	movs	r4, #128	; 0x80
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <UserInput+0x310>)
		OVFDetected--;
 8002b4a:	b29b      	uxth	r3, r3
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002b4c:	682e      	ldr	r6, [r5, #0]
		OVFDetected--;
 8002b4e:	800b      	strh	r3, [r1, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002b50:	6805      	ldr	r5, [r0, #0]
		sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 8002b52:	ca03      	ldmia	r2!, {r0, r1}
 8002b54:	f8c8 1004 	str.w	r1, [r8, #4]
 8002b58:	8811      	ldrh	r1, [r2, #0]
 8002b5a:	7892      	ldrb	r2, [r2, #2]
 8002b5c:	f8c8 0000 	str.w	r0, [r8]
 8002b60:	f8a8 1008 	strh.w	r1, [r8, #8]
 8002b64:	f888 200a 	strb.w	r2, [r8, #10]
		__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8002b68:	6034      	str	r4, [r6, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 8002b6a:	602c      	str	r4, [r5, #0]
		if (!OVFDetected)
 8002b6c:	b92b      	cbnz	r3, 8002b7a <UserInput+0x25a>
			__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 8002b6e:	6873      	ldr	r3, [r6, #4]
 8002b70:	4323      	orrs	r3, r4
 8002b72:	6073      	str	r3, [r6, #4]
			__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 8002b74:	686b      	ldr	r3, [r5, #4]
 8002b76:	4323      	orrs	r3, r4
 8002b78:	606b      	str	r3, [r5, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002b7a:	4821      	ldr	r0, [pc, #132]	; (8002c00 <UserInput+0x2e0>)
 8002b7c:	f7fd fbb0 	bl	80002e0 <strlen>
 8002b80:	4601      	mov	r1, r0
 8002b82:	481f      	ldr	r0, [pc, #124]	; (8002c00 <UserInput+0x2e0>)
 8002b84:	b289      	uxth	r1, r1
 8002b86:	f009 ff0f 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 fb04 	bl	8004198 <HAL_Delay>
}
 8002b90:	b010      	add	sp, #64	; 0x40
 8002b92:	ecbd 8b04 	vpop	{d8-d9}
 8002b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sprintf((char*)UartTXString, "\e[4;1H   \r");
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <UserInput+0x314>)
 8002b9c:	cb03      	ldmia	r3!, {r0, r1}
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	789b      	ldrb	r3, [r3, #2]
 8002ba2:	f8c8 0000 	str.w	r0, [r8]
 8002ba6:	f8c8 1004 	str.w	r1, [r8, #4]
 8002baa:	f8a8 2008 	strh.w	r2, [r8, #8]
 8002bae:	f888 300a 	strb.w	r3, [r8, #10]
 8002bb2:	e7e2      	b.n	8002b7a <UserInput+0x25a>
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	409f4000 	.word	0x409f4000
 8002bc0:	9916f6a6 	.word	0x9916f6a6
 8002bc4:	400a93fc 	.word	0x400a93fc
 8002bc8:	24000a48 	.word	0x24000a48
 8002bcc:	24000948 	.word	0x24000948
 8002bd0:	24000710 	.word	0x24000710
 8002bd4:	2400acfc 	.word	0x2400acfc
 8002bd8:	240006e8 	.word	0x240006e8
 8002bdc:	58020800 	.word	0x58020800
 8002be0:	58020c00 	.word	0x58020c00
 8002be4:	24009c88 	.word	0x24009c88
 8002be8:	40000800 	.word	0x40000800
 8002bec:	24008a8c 	.word	0x24008a8c
 8002bf0:	240092a0 	.word	0x240092a0
 8002bf4:	24009b24 	.word	0x24009b24
 8002bf8:	240058bc 	.word	0x240058bc
 8002bfc:	080181ac 	.word	0x080181ac
 8002c00:	24000a4c 	.word	0x24000a4c
 8002c04:	240060d0 	.word	0x240060d0
 8002c08:	240060d4 	.word	0x240060d4
 8002c0c:	240058c4 	.word	0x240058c4
 8002c10:	42c80000 	.word	0x42c80000
 8002c14:	2400ee40 	.word	0x2400ee40
 8002c18:	080181c4 	.word	0x080181c4
 8002c1c:	2400acec 	.word	0x2400acec
 8002c20:	24009b34 	.word	0x24009b34
 8002c24:	24001e7c 	.word	0x24001e7c
 8002c28:	240089e4 	.word	0x240089e4
 8002c2c:	24003f88 	.word	0x24003f88
 8002c30:	08018204 	.word	0x08018204
 8002c34:	08018210 	.word	0x08018210
		result = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8002c3e:	e67d      	b.n	800293c <UserInput+0x1c>
		FminusClicked(-DiffEncVal); // One encoder click is two counts
 8002c40:	1acb      	subs	r3, r1, r3
 8002c42:	b298      	uxth	r0, r3
 8002c44:	f7fe f948 	bl	8000ed8 <FminusClicked>
		DisplayStatus();
 8002c48:	f7ff fce6 	bl	8002618 <DisplayStatus>
		LastEncVal = EncVal;
 8002c4c:	882b      	ldrh	r3, [r5, #0]
 8002c4e:	8023      	strh	r3, [r4, #0]
 8002c50:	e70d      	b.n	8002a6e <UserInput+0x14e>
		FplusClicked(DiffEncVal); // One encoder click is two counts
 8002c52:	f7fe f8d7 	bl	8000e04 <FplusClicked>
		DisplayStatus();
 8002c56:	f7ff fcdf 	bl	8002618 <DisplayStatus>
		LastEncVal = EncVal;
 8002c5a:	882b      	ldrh	r3, [r5, #0]
 8002c5c:	8023      	strh	r3, [r4, #0]
	if (DiffEncVal < 0)
 8002c5e:	e706      	b.n	8002a6e <UserInput+0x14e>
		sprintf((char*)UartTXString, "\e[11;1H");
 8002c60:	4bad      	ldr	r3, [pc, #692]	; (8002f18 <UserInput+0x5f8>)
 8002c62:	ad0a      	add	r5, sp, #40	; 0x28
 8002c64:	4cad      	ldr	r4, [pc, #692]	; (8002f1c <UserInput+0x5fc>)
 8002c66:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8002f24 <UserInput+0x604>
 8002c6a:	f5a4 6780 	sub.w	r7, r4, #1024	; 0x400
 8002c6e:	ed9f 9aac 	vldr	s18, [pc, #688]	; 8002f20 <UserInput+0x600>
 8002c72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8002f48 <UserInput+0x628>
			sprintf((char*)WFString, "%c", BucketColor);
 8002c76:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8002f2c <UserInput+0x60c>
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002c7a:	ed9f 8ba3 	vldr	d8, [pc, #652]	; 8002f08 <UserInput+0x5e8>
		sprintf((char*)UartTXString, "\e[11;1H");
 8002c7e:	cb03      	ldmia	r3!, {r0, r1}
 8002c80:	f8c8 0000 	str.w	r0, [r8]
 8002c84:	f8c8 1004 	str.w	r1, [r8, #4]
				if (StrongestSignal < WFBuffer[i + j])
 8002c88:	edd4 6a01 	vldr	s13, [r4, #4]
 8002c8c:	ed94 7a02 	vldr	s14, [r4, #8]
 8002c90:	edd4 7a00 	vldr	s15, [r4]
 8002c94:	ed94 0a03 	vldr	s0, [r4, #12]
 8002c98:	ed94 6a04 	vldr	s12, [r4, #16]
 8002c9c:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8002ca0:	edd4 6a05 	vldr	s13, [r4, #20]
 8002ca4:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
 8002ca8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002cac:	ed94 7a06 	vldr	s14, [r4, #24]
 8002cb0:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002cb4:	edd4 7a07 	vldr	s15, [r4, #28]
 8002cb8:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
				if (StrongestSignal < WFBuffer[i + j])
 8002cbc:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8002cc0:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002cc4:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8002cc8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002ccc:	ee30 0b08 	vadd.f64	d0, d0, d8
 8002cd0:	f00e f94a 	bl	8010f68 <log>
 8002cd4:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002cd8:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
			sprintf((char*)WFString, "%c", BucketColor);
 8002cdc:	4651      	mov	r1, sl
 8002cde:	4628      	mov	r0, r5
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002ce0:	ee20 0b06 	vmul.f64	d0, d0, d6
 8002ce4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002ce8:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002cec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002cf0:	edcd 7a07 	vstr	s15, [sp, #28]
 8002cf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
			sprintf((char*)WFString, "%c", BucketColor);
 8002cf8:	f819 2003 	ldrb.w	r2, [r9, r3]
 8002cfc:	f00b fe6e 	bl	800e9dc <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002d00:	4629      	mov	r1, r5
 8002d02:	4888      	ldr	r0, [pc, #544]	; (8002f24 <UserInput+0x604>)
 8002d04:	f00b fe93 	bl	800ea2e <strcat>
		for (i = 256; i >= 0; i -= 8)
 8002d08:	42a7      	cmp	r7, r4
 8002d0a:	f1a4 0420 	sub.w	r4, r4, #32
 8002d0e:	d1bb      	bne.n	8002c88 <UserInput+0x368>
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002d10:	ed9f 8b7d 	vldr	d8, [pc, #500]	; 8002f08 <UserInput+0x5e8>
 8002d14:	f507 673e 	add.w	r7, r7, #3040	; 0xbe0
 8002d18:	4c83      	ldr	r4, [pc, #524]	; (8002f28 <UserInput+0x608>)
 8002d1a:	ed9f 9a81 	vldr	s18, [pc, #516]	; 8002f20 <UserInput+0x600>
			sprintf((char*)WFString, "%c", BucketColor);
 8002d1e:	4e83      	ldr	r6, [pc, #524]	; (8002f2c <UserInput+0x60c>)
				if (StrongestSignal < WFBuffer[i - j])
 8002d20:	edd4 6a07 	vldr	s13, [r4, #28]
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002d24:	4623      	mov	r3, r4
 8002d26:	ed94 7a05 	vldr	s14, [r4, #20]
 8002d2a:	3c20      	subs	r4, #32
 8002d2c:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8002d30:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8002d34:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8002d38:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8002d3c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8002d40:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
				if (StrongestSignal < WFBuffer[i - j])
 8002d44:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8002d48:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8002d4c:	fe87 0a80 	vmaxnm.f32	s0, s15, s0
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
				if (StrongestSignal < WFBuffer[i - j])
 8002d58:	fe80 0a26 	vmaxnm.f32	s0, s0, s13
 8002d5c:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002d60:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8002d64:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002d68:	ee30 0b08 	vadd.f64	d0, d0, d8
 8002d6c:	f00e f8fc 	bl	8010f68 <log>
 8002d70:	eeb3 6b02 	vmov.f64	d6, #50	; 0x41900000  18.0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002d74:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
			sprintf((char*)WFString, "%c", BucketColor);
 8002d78:	4631      	mov	r1, r6
 8002d7a:	4628      	mov	r0, r5
			BigBucketValue = 18 * log(StrongestSignal + 1.01);
 8002d7c:	ee20 0b06 	vmul.f64	d0, d0, d6
 8002d80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			BucketColor = WFColorLookup[(uint8_t)BigBucketValue];
 8002d84:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8002d88:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002d8c:	edcd 7a07 	vstr	s15, [sp, #28]
 8002d90:	f89d 301c 	ldrb.w	r3, [sp, #28]
			sprintf((char*)WFString, "%c", BucketColor);
 8002d94:	f819 2003 	ldrb.w	r2, [r9, r3]
 8002d98:	f00b fe20 	bl	800e9dc <siprintf>
			strcat(UartTXString, (int8_t *)WFString);
 8002d9c:	4861      	ldr	r0, [pc, #388]	; (8002f24 <UserInput+0x604>)
 8002d9e:	f7fd fa9f 	bl	80002e0 <strlen>
 8002da2:	4629      	mov	r1, r5
 8002da4:	4440      	add	r0, r8
 8002da6:	f00b fe39 	bl	800ea1c <stpcpy>
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002daa:	42bc      	cmp	r4, r7
			strcat(UartTXString, (int8_t *)WFString);
 8002dac:	4603      	mov	r3, r0
		for (i=FFTLEN-1; i>(FFTLEN-256); i -= 8)
 8002dae:	d1b7      	bne.n	8002d20 <UserInput+0x400>
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002db0:	4a5f      	ldr	r2, [pc, #380]	; (8002f30 <UserInput+0x610>)
		strcat(UartTXString, (int8_t *)WFString);
 8002db2:	462c      	mov	r4, r5
 8002db4:	f1c8 060a 	rsb	r6, r8, #10
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dba:	c503      	stmia	r5!, {r0, r1}
 8002dbc:	0c11      	lsrs	r1, r2, #16
 8002dbe:	f825 2b02 	strh.w	r2, [r5], #2
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002dc2:	441e      	add	r6, r3
		sprintf((char*)WFString, "\e[48;5;16m"); // set black background
 8002dc4:	7029      	strb	r1, [r5, #0]
		strcat(UartTXString, (int8_t *)WFString);
 8002dc6:	cc03      	ldmia	r4!, {r0, r1}
 8002dc8:	6018      	str	r0, [r3, #0]
 8002dca:	6059      	str	r1, [r3, #4]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002dcc:	b2b1      	uxth	r1, r6
		strcat(UartTXString, (int8_t *)WFString);
 8002dce:	8825      	ldrh	r5, [r4, #0]
 8002dd0:	78a2      	ldrb	r2, [r4, #2]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002dd2:	4854      	ldr	r0, [pc, #336]	; (8002f24 <UserInput+0x604>)
		strcat(UartTXString, (int8_t *)WFString);
 8002dd4:	811d      	strh	r5, [r3, #8]
 8002dd6:	729a      	strb	r2, [r3, #10]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8002dd8:	f009 fde6 	bl	800c9a8 <CDC_Transmit_FS>
	HAL_Delay(1);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f001 f9db 	bl	8004198 <HAL_Delay>
}
 8002de2:	e6aa      	b.n	8002b3a <UserInput+0x21a>
			SetBW((Bwidth)Wide);  break;
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fd fe41 	bl	8000a6c <SetBW>
 8002dea:	e62f      	b.n	8002a4c <UserInput+0x12c>
			SetMode((Mode)USB); break;
 8002dec:	2002      	movs	r0, #2
 8002dee:	f7fd ffaf 	bl	8000d50 <SetMode>
 8002df2:	e62b      	b.n	8002a4c <UserInput+0x12c>
			SetAGC((Agctype)Slow);  break;
 8002df4:	2001      	movs	r0, #1
 8002df6:	f7fd fe9b 	bl	8000b30 <SetAGC>
 8002dfa:	e627      	b.n	8002a4c <UserInput+0x12c>
	}
	else
	{
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dfc:	2300      	movs	r3, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfe:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e00:	2202      	movs	r2, #2
 8002e02:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002e06:	2701      	movs	r7, #1
		GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e08:	a90a      	add	r1, sp, #40	; 0x28
 8002e0a:	484a      	ldr	r0, [pc, #296]	; (8002f34 <UserInput+0x614>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	940e      	str	r4, [sp, #56]	; 0x38
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002e12:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f004 f85f 	bl	8006ed8 <HAL_GPIO_Init>

		RELAY_TX_OFF;
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e20:	4845      	ldr	r0, [pc, #276]	; (8002f38 <UserInput+0x618>)
 8002e22:	f004 f97d 	bl	8007120 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002e26:	4b45      	ldr	r3, [pc, #276]	; (8002f3c <UserInput+0x61c>)
 8002e28:	701c      	strb	r4, [r3, #0]

	}
}
 8002e2a:	e60f      	b.n	8002a4c <UserInput+0x12c>
			SetBW((Bwidth)Narrow);  break;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fe1d 	bl	8000a6c <SetBW>
 8002e32:	e60b      	b.n	8002a4c <UserInput+0x12c>
			SetMode((Mode)LSB); break;
 8002e34:	2001      	movs	r0, #1
 8002e36:	f7fd ff8b 	bl	8000d50 <SetMode>
 8002e3a:	e607      	b.n	8002a4c <UserInput+0x12c>
			SetAGC((Agctype)Fast);  break;
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fd fe77 	bl	8000b30 <SetAGC>
 8002e42:	e603      	b.n	8002a4c <UserInput+0x12c>
			volume -= 0.1;
 8002e44:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <UserInput+0x620>)
			if (volume < 0)
 8002e46:	2200      	movs	r2, #0
			volume -= 0.1;
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8002f10 <UserInput+0x5f0>
 8002e50:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002e54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e58:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002e5c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 8002e64:	bf54      	ite	pl
 8002e66:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8002e6a:	601a      	strmi	r2, [r3, #0]
 8002e6c:	e5ee      	b.n	8002a4c <UserInput+0x12c>
			volume += 0.1;
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <UserInput+0x620>)
			if (volume > 1.0)
 8002e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8002f10 <UserInput+0x5f0>
 8002e7c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002e80:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002e84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e88:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8002e8c:	edc3 7a00 	vstr	s15, [r3]
 8002e90:	e5dc      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(4);  break;
 8002e92:	2004      	movs	r0, #4
 8002e94:	f7fd ff94 	bl	8000dc0 <SetFstep>
 8002e98:	e5d8      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(5);  break;
 8002e9a:	2005      	movs	r0, #5
 8002e9c:	f7fd ff90 	bl	8000dc0 <SetFstep>
 8002ea0:	e5d4      	b.n	8002a4c <UserInput+0x12c>
			FplusClicked(2); break;
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f7fd ffae 	bl	8000e04 <FplusClicked>
 8002ea8:	e5d0      	b.n	8002a4c <UserInput+0x12c>
			FminusClicked(2); break;
 8002eaa:	2002      	movs	r0, #2
 8002eac:	f7fe f814 	bl	8000ed8 <FminusClicked>
 8002eb0:	e5cc      	b.n	8002a4c <UserInput+0x12c>
			SetMode((Mode)CW); break;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	f7fd ff4c 	bl	8000d50 <SetMode>
 8002eb8:	e5c8      	b.n	8002a4c <UserInput+0x12c>
			SetMode((Mode)AM); break;
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd ff48 	bl	8000d50 <SetMode>
 8002ec0:	e5c4      	b.n	8002a4c <UserInput+0x12c>
					if (ShowWF)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <UserInput+0x624>)
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	b1da      	cbz	r2, 8002f00 <UserInput+0x5e0>
						ShowWF=0;
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e5be      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(9); break;
 8002ece:	2009      	movs	r0, #9
 8002ed0:	f7fd ff76 	bl	8000dc0 <SetFstep>
 8002ed4:	e5ba      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(0); break;
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7fd ff72 	bl	8000dc0 <SetFstep>
 8002edc:	e5b6      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(1); break;
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fd ff6e 	bl	8000dc0 <SetFstep>
 8002ee4:	e5b2      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(2);  break;
 8002ee6:	2002      	movs	r0, #2
 8002ee8:	f7fd ff6a 	bl	8000dc0 <SetFstep>
 8002eec:	e5ae      	b.n	8002a4c <UserInput+0x12c>
			SetFstep(3);  break;
 8002eee:	2003      	movs	r0, #3
 8002ef0:	f7fd ff66 	bl	8000dc0 <SetFstep>
 8002ef4:	e5aa      	b.n	8002a4c <UserInput+0x12c>
			SetTXPLL(LOfreq);
 8002ef6:	f7ff fc8f 	bl	8002818 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002efa:	6833      	ldr	r3, [r6, #0]
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	e58d      	b.n	8002a1c <UserInput+0xfc>
						ShowWF=1;
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e5a2      	b.n	8002a4c <UserInput+0x12c>
 8002f06:	bf00      	nop
 8002f08:	c28f5c29 	.word	0xc28f5c29
 8002f0c:	3ff028f5 	.word	0x3ff028f5
 8002f10:	9999999a 	.word	0x9999999a
 8002f14:	3fb99999 	.word	0x3fb99999
 8002f18:	080181f0 	.word	0x080181f0
 8002f1c:	2400d210 	.word	0x2400d210
 8002f20:	00000000 	.word	0x00000000
 8002f24:	24000a4c 	.word	0x24000a4c
 8002f28:	2400ddf0 	.word	0x2400ddf0
 8002f2c:	080180fc 	.word	0x080180fc
 8002f30:	080181f8 	.word	0x080181f8
 8002f34:	58020800 	.word	0x58020800
 8002f38:	58020c00 	.word	0x58020c00
 8002f3c:	24009c88 	.word	0x24009c88
 8002f40:	2400581c 	.word	0x2400581c
 8002f44:	24009b34 	.word	0x24009b34
 8002f48:	0801821c 	.word	0x0801821c

08002f4c <TXSwitch>:
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4e:	2300      	movs	r3, #0
{
 8002f50:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f52:	e9cd 3300 	strd	r3, r3, [sp]
 8002f56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002f5a:	9304      	str	r3, [sp, #16]
	if (Status)
 8002f5c:	b348      	cbz	r0, 8002fb2 <TXSwitch+0x66>
		if (LastTXFreq != LOfreq)
 8002f5e:	4d21      	ldr	r5, [pc, #132]	; (8002fe4 <TXSwitch+0x98>)
 8002f60:	4c21      	ldr	r4, [pc, #132]	; (8002fe8 <TXSwitch+0x9c>)
 8002f62:	ed95 0a00 	vldr	s0, [r5]
 8002f66:	edd4 7a00 	vldr	s15, [r4]
 8002f6a:	eef4 7a40 	vcmp.f32	s15, s0
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d119      	bne.n	8002fa8 <TXSwitch+0x5c>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f74:	2303      	movs	r3, #3
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 7400 	mov.w	r4, #512	; 0x200
 8002f7c:	2502      	movs	r5, #2
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f7e:	2600      	movs	r6, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f80:	4669      	mov	r1, sp
 8002f82:	481a      	ldr	r0, [pc, #104]	; (8002fec <TXSwitch+0xa0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f84:	9604      	str	r6, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f8a:	e9cd 4500 	strd	r4, r5, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8e:	f003 ffa3 	bl	8006ed8 <HAL_GPIO_Init>
		RELAY_TX_ON;
 8002f92:	2201      	movs	r2, #1
 8002f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f98:	4815      	ldr	r0, [pc, #84]	; (8002ff0 <TXSwitch+0xa4>)
 8002f9a:	f004 f8c1 	bl	8007120 <HAL_GPIO_WritePin>
		TransmissionEnabled = 1;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <TXSwitch+0xa8>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
}
 8002fa4:	b007      	add	sp, #28
 8002fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SetTXPLL(LOfreq);
 8002fa8:	f7ff fc36 	bl	8002818 <SetTXPLL>
			LastTXFreq = LOfreq;
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	e7e0      	b.n	8002f74 <TXSwitch+0x28>
 8002fb2:	4604      	mov	r4, r0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002fbc:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fbe:	4669      	mov	r1, sp
 8002fc0:	480a      	ldr	r0, [pc, #40]	; (8002fec <TXSwitch+0xa0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fc6:	e9cd 6700 	strd	r6, r7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fca:	f003 ff85 	bl	8006ed8 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8002fce:	4622      	mov	r2, r4
 8002fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fd4:	4806      	ldr	r0, [pc, #24]	; (8002ff0 <TXSwitch+0xa4>)
 8002fd6:	f004 f8a3 	bl	8007120 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <TXSwitch+0xa8>)
 8002fdc:	701c      	strb	r4, [r3, #0]
}
 8002fde:	b007      	add	sp, #28
 8002fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2400acfc 	.word	0x2400acfc
 8002fe8:	240006e8 	.word	0x240006e8
 8002fec:	58020800 	.word	0x58020800
 8002ff0:	58020c00 	.word	0x58020c00
 8002ff4:	24009c88 	.word	0x24009c88

08002ff8 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 8002ff8:	b510      	push	{r4, lr}

	if (Status)
 8002ffa:	b148      	cbz	r0, 8003010 <CarrierEnable+0x18>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003002:	4808      	ldr	r0, [pc, #32]	; (8003024 <CarrierEnable+0x2c>)
 8003004:	f004 f88c 	bl	8007120 <HAL_GPIO_WritePin>
		TXCarrierEnabled = 1;
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <CarrierEnable+0x30>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		TXCarrierEnabled = 0;

	}
}
 800300e:	bd10      	pop	{r4, pc}
 8003010:	4604      	mov	r4, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003012:	2201      	movs	r2, #1
 8003014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <CarrierEnable+0x2c>)
 800301a:	f004 f881 	bl	8007120 <HAL_GPIO_WritePin>
		TXCarrierEnabled = 0;
 800301e:	4b02      	ldr	r3, [pc, #8]	; (8003028 <CarrierEnable+0x30>)
 8003020:	701c      	strb	r4, [r3, #0]
}
 8003022:	bd10      	pop	{r4, pc}
 8003024:	58020c00 	.word	0x58020c00
 8003028:	240089e0 	.word	0x240089e0

0800302c <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800302c:	4e09      	ldr	r6, [pc, #36]	; (8003054 <Error_Handler+0x28>)
{
 800302e:	4d0a      	ldr	r5, [pc, #40]	; (8003058 <Error_Handler+0x2c>)
 8003030:	4c0a      	ldr	r4, [pc, #40]	; (800305c <Error_Handler+0x30>)
 8003032:	b508      	push	{r3, lr}
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	fb05 f303 	mul.w	r3, r5, r3
 800303a:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 800303e:	d200      	bcs.n	8003042 <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8003040:	e7fe      	b.n	8003040 <Error_Handler+0x14>
			LED_switch();
 8003042:	f7fd ffb3 	bl	8000fac <LED_switch>
 8003046:	6833      	ldr	r3, [r6, #0]
 8003048:	fb05 f303 	mul.w	r3, r5, r3
 800304c:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8003050:	d2f7      	bcs.n	8003042 <Error_Handler+0x16>
 8003052:	e7f5      	b.n	8003040 <Error_Handler+0x14>
 8003054:	2400ad00 	.word	0x2400ad00
 8003058:	c28f5c29 	.word	0xc28f5c29
 800305c:	051eb851 	.word	0x051eb851

08003060 <SystemClock_Config_For_OC>:
{
 8003060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003064:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003066:	224c      	movs	r2, #76	; 0x4c
 8003068:	2100      	movs	r1, #0
 800306a:	a80a      	add	r0, sp, #40	; 0x28
 800306c:	f00b f86c 	bl	800e148 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003070:	2220      	movs	r2, #32
 8003072:	2100      	movs	r1, #0
 8003074:	a802      	add	r0, sp, #8
 8003076:	f00b f867 	bl	800e148 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800307a:	22bc      	movs	r2, #188	; 0xbc
 800307c:	2100      	movs	r1, #0
 800307e:	a81e      	add	r0, sp, #120	; 0x78
 8003080:	f00b f862 	bl	800e148 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003084:	2002      	movs	r0, #2
 8003086:	f004 fe4f 	bl	8007d28 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800308a:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <SystemClock_Config_For_OC+0x15c>)
 800308c:	2200      	movs	r2, #0
 800308e:	494c      	ldr	r1, [pc, #304]	; (80031c0 <SystemClock_Config_For_OC+0x160>)
 8003090:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003092:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003094:	6998      	ldr	r0, [r3, #24]
 8003096:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800309a:	6198      	str	r0, [r3, #24]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030b6:	6993      	ldr	r3, [r2, #24]
 80030b8:	049b      	lsls	r3, r3, #18
 80030ba:	d5fc      	bpl.n	80030b6 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80030bc:	4841      	ldr	r0, [pc, #260]	; (80031c4 <SystemClock_Config_For_OC+0x164>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030be:	2202      	movs	r2, #2
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80030c0:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030c2:	2501      	movs	r5, #1
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80030c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 480;
 80030c6:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80030ca:	2100      	movs	r1, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80030cc:	2621      	movs	r6, #33	; 0x21
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80030ce:	f023 0303 	bic.w	r3, r3, #3
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80030d2:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80030d6:	4313      	orrs	r3, r2
 80030d8:	6283      	str	r3, [r0, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 10;
 80030da:	230a      	movs	r3, #10
	RCC_OscInitStruct.PLL.PLLP = 2;
 80030dc:	9217      	str	r2, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030de:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLR = 2;
 80030e0:	9219      	str	r2, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 10;
 80030e2:	9315      	str	r3, [sp, #84]	; 0x54
	XTalFreq = 25000000;
 80030e4:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <SystemClock_Config_For_OC+0x168>)
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030e6:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 480;
 80030e8:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80030ec:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80030ee:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f0:	e9cd 2213 	strd	r2, r2, [sp, #76]	; 0x4c
	XTalFreq = 25000000;
 80030f4:	4a35      	ldr	r2, [pc, #212]	; (80031cc <SystemClock_Config_For_OC+0x16c>)
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80030f6:	e9cd 111b 	strd	r1, r1, [sp, #108]	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80030fa:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	XTalFreq = 25000000;
 80030fe:	601a      	str	r2, [r3, #0]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003100:	f004 fec4 	bl	8007e8c <HAL_RCC_OscConfig>
 8003104:	2800      	cmp	r0, #0
 8003106:	d157      	bne.n	80031b8 <SystemClock_Config_For_OC+0x158>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003108:	263f      	movs	r6, #63	; 0x3f
 800310a:	2703      	movs	r7, #3
 800310c:	2200      	movs	r2, #0
 800310e:	2308      	movs	r3, #8
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003110:	4621      	mov	r1, r4
 8003112:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003114:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003118:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800311c:	2640      	movs	r6, #64	; 0x40
 800311e:	2340      	movs	r3, #64	; 0x40
 8003120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003124:	2740      	movs	r7, #64	; 0x40
 8003126:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800312a:	e9cd 6706 	strd	r6, r7, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800312e:	f005 fa9f 	bl	8008670 <HAL_RCC_ClockConfig>
 8003132:	4603      	mov	r3, r0
 8003134:	2800      	cmp	r0, #0
 8003136:	d13f      	bne.n	80031b8 <SystemClock_Config_For_OC+0x158>
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003138:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800313c:	932e      	str	r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800313e:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003140:	2318      	movs	r3, #24
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003142:	923f      	str	r2, [sp, #252]	; 0xfc
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003144:	2226      	movs	r2, #38	; 0x26
 8003146:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80031d0 <SystemClock_Config_For_OC+0x170>
 800314a:	f04f 0904 	mov.w	r9, #4
 800314e:	2602      	movs	r6, #2
 8003150:	2702      	movs	r7, #2
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8003152:	f44f 6480 	mov.w	r4, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003156:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800315a:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 800315c:	9444      	str	r4, [sp, #272]	; 0x110
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800315e:	9146      	str	r1, [sp, #280]	; 0x118
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8003160:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	2300      	movs	r3, #0
 8003168:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800316c:	2296      	movs	r2, #150	; 0x96
 800316e:	2302      	movs	r3, #2
 8003170:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8003174:	e9cd 6722 	strd	r6, r7, [sp, #136]	; 0x88
 8003178:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 800317c:	f04f 0800 	mov.w	r8, #0
 8003180:	f04f 0905 	mov.w	r9, #5
 8003184:	2608      	movs	r6, #8
 8003186:	2705      	movs	r7, #5
 8003188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318c:	2300      	movs	r3, #0
 800318e:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
 8003192:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8003196:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800319a:	f005 fd5b 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 800319e:	b958      	cbnz	r0, 80031b8 <SystemClock_Config_For_OC+0x158>
	HAL_PWREx_EnableUSBVoltageDetector();
 80031a0:	f004 fde8 	bl	8007d74 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80031a4:	4628      	mov	r0, r5
 80031a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80031ae:	f005 f963 	bl	8008478 <HAL_RCC_MCOConfig>
}
 80031b2:	b04f      	add	sp, #316	; 0x13c
 80031b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Error_Handler();
 80031b8:	f7ff ff38 	bl	800302c <Error_Handler>
 80031bc:	58024800 	.word	0x58024800
 80031c0:	58000400 	.word	0x58000400
 80031c4:	58024400 	.word	0x58024400
 80031c8:	24009298 	.word	0x24009298
 80031cc:	4bbebc20 	.word	0x4bbebc20
 80031d0:	000c0042 	.word	0x000c0042

080031d4 <MX_TIM6_Init_Custom_Rate>:
{
 80031d4:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 80031d6:	4810      	ldr	r0, [pc, #64]	; (8003218 <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d8:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 80031da:	4c10      	ldr	r4, [pc, #64]	; (800321c <MX_TIM6_Init_Custom_Rate+0x48>)
{
 80031dc:	b084      	sub	sp, #16
	htim6.Init.Period = 8191; //was 8191
 80031de:	f641 71ff 	movw	r1, #8191	; 0x1fff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031e2:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 80031e4:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031e6:	4620      	mov	r0, r4
	htim6.Init.Period = 8191; //was 8191
 80031e8:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031ea:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 80031ec:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ee:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f0:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031f6:	f006 fe1b 	bl	8009e30 <HAL_TIM_Base_Init>
 80031fa:	b950      	cbnz	r0, 8003212 <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031fc:	4603      	mov	r3, r0
 80031fe:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003200:	a901      	add	r1, sp, #4
 8003202:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003204:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003206:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003208:	f007 f914 	bl	800a434 <HAL_TIMEx_MasterConfigSynchronization>
 800320c:	b908      	cbnz	r0, 8003212 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 800320e:	b004      	add	sp, #16
 8003210:	bd10      	pop	{r4, pc}
		Error_Handler();
 8003212:	f7ff ff0b 	bl	800302c <Error_Handler>
 8003216:	bf00      	nop
 8003218:	40001000 	.word	0x40001000
 800321c:	24009c8c 	.word	0x24009c8c

08003220 <main>:
{
 8003220:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003224:	b0c1      	sub	sp, #260	; 0x104
  HAL_Init();
 8003226:	f000 ff75 	bl	8004114 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800322a:	4bcf      	ldr	r3, [pc, #828]	; (8003568 <main+0x348>)
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8003232:	d111      	bne.n	8003258 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8003234:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003238:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800323c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003244:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800324e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003250:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003254:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800325a:	4ec4      	ldr	r6, [pc, #784]	; (800356c <main+0x34c>)
	SystemClock_Config_For_OC();
 800325c:	f7ff ff00 	bl	8003060 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB somentimes (and almost always oh an Android phone) does not initialize
 8003260:	2014      	movs	r0, #20
 8003262:	f000 ff99 	bl	8004198 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003266:	9438      	str	r4, [sp, #224]	; 0xe0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003268:	2701      	movs	r7, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800326a:	f04f 0b08 	mov.w	fp, #8
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 800326e:	4622      	mov	r2, r4
 8003270:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003274:	48be      	ldr	r0, [pc, #760]	; (8003570 <main+0x350>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8003276:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 800327a:	f04f 0901 	mov.w	r9, #1
  hadc1.Instance = ADC1;
 800327e:	4dbd      	ldr	r5, [pc, #756]	; (8003574 <main+0x354>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003280:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	e9cd 4436 	strd	r4, r4, [sp, #216]	; 0xd8
 8003288:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800328c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8003298:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	9305      	str	r3, [sp, #20]
 80032a2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032a4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ac:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80032b0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	9306      	str	r3, [sp, #24]
 80032ba:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032bc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032c0:	433b      	orrs	r3, r7
 80032c2:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80032c6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032ca:	403b      	ands	r3, r7
 80032cc:	9307      	str	r3, [sp, #28]
 80032ce:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80032dc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	9308      	str	r3, [sp, #32]
 80032e6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032ec:	ea43 030b 	orr.w	r3, r3, fp
 80032f0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80032f4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 80032f8:	ea03 030b 	and.w	r3, r3, fp
 80032fc:	9309      	str	r3, [sp, #36]	; 0x24
 80032fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8003300:	f003 ff0e 	bl	8007120 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003304:	4622      	mov	r2, r4
 8003306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800330a:	489b      	ldr	r0, [pc, #620]	; (8003578 <main+0x358>)
 800330c:	f003 ff08 	bl	8007120 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8003310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003314:	2300      	movs	r3, #0
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8003316:	a936      	add	r1, sp, #216	; 0xd8
 8003318:	4898      	ldr	r0, [pc, #608]	; (800357c <main+0x35c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800331a:	9738      	str	r7, [sp, #224]	; 0xe0
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 800331c:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8003320:	f003 fdda 	bl	8006ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8003324:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003328:	4b95      	ldr	r3, [pc, #596]	; (8003580 <main+0x360>)
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 800332a:	a936      	add	r1, sp, #216	; 0xd8
 800332c:	4893      	ldr	r0, [pc, #588]	; (800357c <main+0x35c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332e:	9738      	str	r7, [sp, #224]	; 0xe0
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8003330:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8003334:	f003 fdd0 	bl	8006ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8003338:	2202      	movs	r2, #2
 800333a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333c:	a936      	add	r1, sp, #216	; 0xd8
 800333e:	488c      	ldr	r0, [pc, #560]	; (8003570 <main+0x350>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8003340:	e9cd 8936 	strd	r8, r9, [sp, #216]	; 0xd8
 8003344:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003348:	f44f 7800 	mov.w	r8, #512	; 0x200
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800334c:	f003 fdc4 	bl	8006ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003350:	f04f 0902 	mov.w	r9, #2
 8003354:	2200      	movs	r2, #0
 8003356:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003358:	a936      	add	r1, sp, #216	; 0xd8
 800335a:	4888      	ldr	r0, [pc, #544]	; (800357c <main+0x35c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800335c:	943a      	str	r4, [sp, #232]	; 0xe8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800335e:	e9cd 8936 	strd	r8, r9, [sp, #216]	; 0xd8
 8003362:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003366:	f44f 7880 	mov.w	r8, #256	; 0x100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336a:	f003 fdb5 	bl	8006ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800336e:	f04f 0901 	mov.w	r9, #1
 8003372:	2300      	movs	r3, #0
 8003374:	2200      	movs	r2, #0
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003376:	a936      	add	r1, sp, #216	; 0xd8
 8003378:	487f      	ldr	r0, [pc, #508]	; (8003578 <main+0x358>)
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800337a:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
 800337e:	e9cd 8936 	strd	r8, r9, [sp, #216]	; 0xd8
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003382:	f003 fda9 	bl	8006ed8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8003386:	4622      	mov	r2, r4
 8003388:	2104      	movs	r1, #4
 800338a:	2028      	movs	r0, #40	; 0x28
 800338c:	f002 f884 	bl	8005498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003390:	2028      	movs	r0, #40	; 0x28
 8003392:	f002 f8bb 	bl	800550c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003396:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800339a:	4622      	mov	r2, r4
 800339c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800339e:	433b      	orrs	r3, r7
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033a0:	200b      	movs	r0, #11
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033a2:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80033a6:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033aa:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
 80033ae:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033b2:	f44f 7680 	mov.w	r6, #256	; 0x100
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033b6:	403b      	ands	r3, r7
 80033b8:	9304      	str	r3, [sp, #16]
 80033ba:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033bc:	f002 f86c 	bl	8005498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80033c0:	200b      	movs	r0, #11
 80033c2:	f002 f8a3 	bl	800550c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 80033c6:	4622      	mov	r2, r4
 80033c8:	2102      	movs	r1, #2
 80033ca:	200c      	movs	r0, #12
 80033cc:	f002 f864 	bl	8005498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80033d0:	200c      	movs	r0, #12
 80033d2:	f002 f89b 	bl	800550c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80033d6:	4a6b      	ldr	r2, [pc, #428]	; (8003584 <main+0x364>)
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80033d8:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033da:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033dc:	82ae      	strh	r6, [r5, #20]
  ADC_MultiModeTypeDef multimode = {0};
 80033de:	940a      	str	r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80033e0:	9416      	str	r4, [sp, #88]	; 0x58
  ADC_ChannelConfTypeDef sConfig = {0};
 80033e2:	9424      	str	r4, [sp, #144]	; 0x90
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80033e4:	941b      	str	r4, [sp, #108]	; 0x6c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033e6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80033e8:	61af      	str	r7, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033ea:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80033ec:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80033ee:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Instance = ADC1;
 80033f2:	602a      	str	r2, [r5, #0]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80033f4:	62eb      	str	r3, [r5, #44]	; 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033f6:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80033fa:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 80033fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003402:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 8003406:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 800340a:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
 800340e:	e9cd 4427 	strd	r4, r4, [sp, #156]	; 0x9c
 8003412:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003416:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800341a:	e9c5 ab01 	strd	sl, fp, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800341e:	f001 fdd9 	bl	8004fd4 <HAL_ADC_Init>
 8003422:	2800      	cmp	r0, #0
 8003424:	f040 8222 	bne.w	800386c <main+0x64c>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8003428:	2207      	movs	r2, #7
 800342a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800342e:	a90a      	add	r1, sp, #40	; 0x28
 8003430:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8003432:	960c      	str	r6, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 8003434:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003438:	f001 ffb2 	bl	80053a0 <HAL_ADCEx_MultiModeConfigChannel>
 800343c:	2800      	cmp	r0, #0
 800343e:	f040 8215 	bne.w	800386c <main+0x64c>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003442:	4a51      	ldr	r2, [pc, #324]	; (8003588 <main+0x368>)
 8003444:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003448:	4c50      	ldr	r4, [pc, #320]	; (800358c <main+0x36c>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800344a:	a916      	add	r1, sp, #88	; 0x58
 800344c:	4628      	mov	r0, r5
  AnalogWDGConfig.ITMode = ENABLE;
 800344e:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8003452:	9418      	str	r4, [sp, #96]	; 0x60
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003454:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  AnalogWDGConfig.HighThreshold = 4094;
 8003458:	2301      	movs	r3, #1
 800345a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800345e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8003462:	f001 fa95 	bl	8004990 <HAL_ADC_AnalogWDGConfig>
 8003466:	4603      	mov	r3, r0
 8003468:	2800      	cmp	r0, #0
 800346a:	f040 81ff 	bne.w	800386c <main+0x64c>
  sConfig.Channel = ADC_CHANNEL_5;
 800346e:	2200      	movs	r2, #0
  sConfig.OffsetSignedSaturation = DISABLE;
 8003470:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
  sConfig.Channel = ADC_CHANNEL_5;
 8003474:	f240 73ff 	movw	r3, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003478:	a924      	add	r1, sp, #144	; 0x90
 800347a:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 800347c:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 8003480:	a337      	add	r3, pc, #220	; (adr r3, 8003560 <main+0x340>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 800348a:	2300      	movs	r3, #0
 800348c:	2204      	movs	r2, #4
 800348e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003492:	f001 f84d 	bl	8004530 <HAL_ADC_ConfigChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	2800      	cmp	r0, #0
 800349a:	f040 81e7 	bne.w	800386c <main+0x64c>
  hadc2.Instance = ADC2;
 800349e:	4d3c      	ldr	r5, [pc, #240]	; (8003590 <main+0x370>)
 80034a0:	4a3c      	ldr	r2, [pc, #240]	; (8003594 <main+0x374>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80034a2:	9010      	str	r0, [sp, #64]	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 80034a4:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034a6:	4628      	mov	r0, r5
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80034a8:	82ae      	strh	r6, [r5, #20]
  hadc2.Init.NbrOfConversion = 1;
 80034aa:	61af      	str	r7, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80034ac:	772b      	strb	r3, [r5, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80034ae:	636b      	str	r3, [r5, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80034b0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hadc2.Instance = ADC2;
 80034b4:	602a      	str	r2, [r5, #0]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80034b6:	9315      	str	r3, [sp, #84]	; 0x54
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80034b8:	e9c5 ab01 	strd	sl, fp, [r5, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034bc:	e9c5 3903 	strd	r3, r9, [r5, #12]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80034c0:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80034c4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80034c8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  ADC_ChannelConfTypeDef sConfig = {0};
 80034cc:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 80034d0:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
 80034d4:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80034d8:	f001 fd7c 	bl	8004fd4 <HAL_ADC_Init>
 80034dc:	2800      	cmp	r0, #0
 80034de:	f040 81c5 	bne.w	800386c <main+0x64c>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80034e2:	4a29      	ldr	r2, [pc, #164]	; (8003588 <main+0x368>)
 80034e4:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80034e8:	a910      	add	r1, sp, #64	; 0x40
 80034ea:	4628      	mov	r0, r5
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80034ec:	9412      	str	r4, [sp, #72]	; 0x48
  AnalogWDGConfig.ITMode = ENABLE;
 80034ee:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80034f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  AnalogWDGConfig.HighThreshold = 4094;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80034fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003500:	f001 fa46 	bl	8004990 <HAL_ADC_AnalogWDGConfig>
 8003504:	4603      	mov	r3, r0
 8003506:	2800      	cmp	r0, #0
 8003508:	f040 81b0 	bne.w	800386c <main+0x64c>
  sConfig.OffsetSignedSaturation = DISABLE;
 800350c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
  sConfig.Channel = ADC_CHANNEL_5;
 8003510:	2200      	movs	r2, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003512:	a91c      	add	r1, sp, #112	; 0x70
 8003514:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8003516:	a412      	add	r4, pc, #72	; (adr r4, 8003560 <main+0x340>)
 8003518:	e9d4 3400 	ldrd	r3, r4, [r4]
 800351c:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
 8003520:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003524:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8003528:	2204      	movs	r2, #4
 800352a:	2300      	movs	r3, #0
 800352c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003530:	f000 fffe 	bl	8004530 <HAL_ADC_ConfigChannel>
 8003534:	4601      	mov	r1, r0
 8003536:	2800      	cmp	r0, #0
 8003538:	f040 8198 	bne.w	800386c <main+0x64c>
  DAC_ChannelConfTypeDef sConfig = {0};
 800353c:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 800353e:	4c16      	ldr	r4, [pc, #88]	; (8003598 <main+0x378>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8003540:	a836      	add	r0, sp, #216	; 0xd8
 8003542:	f00a fe01 	bl	800e148 <memset>
  hdac1.Instance = DAC1;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <main+0x37c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003548:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 800354a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800354c:	f002 f804 	bl	8005558 <HAL_DAC_Init>
 8003550:	4602      	mov	r2, r0
 8003552:	2800      	cmp	r0, #0
 8003554:	f040 818a 	bne.w	800386c <main+0x64c>
 8003558:	e022      	b.n	80035a0 <main+0x380>
 800355a:	bf00      	nop
 800355c:	f3af 8000 	nop.w
 8003560:	14f00020 	.word	0x14f00020
 8003564:	00000006 	.word	0x00000006
 8003568:	e000ed00 	.word	0xe000ed00
 800356c:	58024400 	.word	0x58024400
 8003570:	58020c00 	.word	0x58020c00
 8003574:	240089e4 	.word	0x240089e4
 8003578:	58020000 	.word	0x58020000
 800357c:	58020800 	.word	0x58020800
 8003580:	11110000 	.word	0x11110000
 8003584:	40022000 	.word	0x40022000
 8003588:	7dc00000 	.word	0x7dc00000
 800358c:	14f00020 	.word	0x14f00020
 8003590:	24003f88 	.word	0x24003f88
 8003594:	40022100 	.word	0x40022100
 8003598:	24003ee4 	.word	0x24003ee4
 800359c:	40007400 	.word	0x40007400
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80035a0:	2000      	movs	r0, #0
 80035a2:	2116      	movs	r1, #22
 80035a4:	2600      	movs	r6, #0
 80035a6:	2701      	movs	r7, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80035a8:	923a      	str	r2, [sp, #232]	; 0xe8
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80035aa:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80035ae:	a936      	add	r1, sp, #216	; 0xd8
 80035b0:	4620      	mov	r0, r4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80035b2:	e9cd 6738 	strd	r6, r7, [sp, #224]	; 0xe0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80035b6:	f002 f90b 	bl	80057d0 <HAL_DAC_ConfigChannel>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2800      	cmp	r0, #0
 80035be:	f040 8155 	bne.w	800386c <main+0x64c>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80035c2:	a936      	add	r1, sp, #216	; 0xd8
 80035c4:	4620      	mov	r0, r4
 80035c6:	2210      	movs	r2, #16
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80035c8:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80035ca:	f002 f901 	bl	80057d0 <HAL_DAC_ConfigChannel>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	f040 814c 	bne.w	800386c <main+0x64c>
  hlptim2.Instance = LPTIM2;
 80035d4:	48b8      	ldr	r0, [pc, #736]	; (80038b8 <main+0x698>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80035d6:	2300      	movs	r3, #0
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80035d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  hlptim2.Instance = LPTIM2;
 80035dc:	49b7      	ldr	r1, [pc, #732]	; (80038bc <main+0x69c>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80035de:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Instance = LPTIM2;
 80035e2:	6001      	str	r1, [r0, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80035e4:	6282      	str	r2, [r0, #40]	; 0x28
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80035e6:	6146      	str	r6, [r0, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80035e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80035ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80035f0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80035f4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80035f8:	f003 fda4 	bl	8007144 <HAL_LPTIM_Init>
 80035fc:	4605      	mov	r5, r0
 80035fe:	2800      	cmp	r0, #0
 8003600:	f040 8134 	bne.w	800386c <main+0x64c>
  huart3.Instance = USART3;
 8003604:	4cae      	ldr	r4, [pc, #696]	; (80038c0 <main+0x6a0>)
  MX_TIM6_Init();
 8003606:	f7ff fde5 	bl	80031d4 <MX_TIM6_Init_Custom_Rate>
  huart3.Instance = USART3;
 800360a:	49ae      	ldr	r1, [pc, #696]	; (80038c4 <main+0x6a4>)
  huart3.Init.BaudRate = 115200;
 800360c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003610:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003612:	4620      	mov	r0, r4
  huart3.Init.Parity = UART_PARITY_NONE;
 8003614:	6125      	str	r5, [r4, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003616:	62a5      	str	r5, [r4, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003618:	6163      	str	r3, [r4, #20]
  huart3.Init.BaudRate = 115200;
 800361a:	e9c4 1200 	strd	r1, r2, [r4]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800361e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003622:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003626:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800362a:	f007 f98d 	bl	800a948 <HAL_UART_Init>
 800362e:	4601      	mov	r1, r0
 8003630:	2800      	cmp	r0, #0
 8003632:	f040 811b 	bne.w	800386c <main+0x64c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003636:	4620      	mov	r0, r4
 8003638:	f007 fc8a 	bl	800af50 <HAL_UARTEx_SetTxFifoThreshold>
 800363c:	4601      	mov	r1, r0
 800363e:	2800      	cmp	r0, #0
 8003640:	f040 8114 	bne.w	800386c <main+0x64c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003644:	4620      	mov	r0, r4
 8003646:	f007 fcc1 	bl	800afcc <HAL_UARTEx_SetRxFifoThreshold>
 800364a:	2800      	cmp	r0, #0
 800364c:	f040 810e 	bne.w	800386c <main+0x64c>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003650:	4620      	mov	r0, r4
 8003652:	f007 fc5f 	bl	800af14 <HAL_UARTEx_DisableFifoMode>
 8003656:	4604      	mov	r4, r0
 8003658:	2800      	cmp	r0, #0
 800365a:	f040 8107 	bne.w	800386c <main+0x64c>
  MX_USB_DEVICE_Init();
 800365e:	f009 f917 	bl	800c890 <MX_USB_DEVICE_Init>
  htim4.Instance = TIM4;
 8003662:	4d99      	ldr	r5, [pc, #612]	; (80038c8 <main+0x6a8>)
 8003664:	4b99      	ldr	r3, [pc, #612]	; (80038cc <main+0x6ac>)
  sConfig.IC2Filter = 8;
 8003666:	2108      	movs	r1, #8
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003668:	2201      	movs	r2, #1
  htim4.Init.Period = 65535;
 800366a:	60ee      	str	r6, [r5, #12]
  htim4.Instance = TIM4;
 800366c:	602b      	str	r3, [r5, #0]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800366e:	f04f 0801 	mov.w	r8, #1
 8003672:	2300      	movs	r3, #0
 8003674:	f04f 0902 	mov.w	r9, #2
 8003678:	2608      	movs	r6, #8
 800367a:	2702      	movs	r7, #2
  sConfig.IC2Filter = 8;
 800367c:	9134      	str	r1, [sp, #208]	; 0xd0
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800367e:	4628      	mov	r0, r5
 8003680:	a92c      	add	r1, sp, #176	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003682:	940d      	str	r4, [sp, #52]	; 0x34
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003684:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003686:	61ac      	str	r4, [r5, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003688:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 800368c:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003690:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003694:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003698:	e9cd 892c 	strd	r8, r9, [sp, #176]	; 0xb0
 800369c:	e9cd 6730 	strd	r6, r7, [sp, #192]	; 0xc0
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80036a0:	f006 fcc6 	bl	800a030 <HAL_TIM_Encoder_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2800      	cmp	r0, #0
 80036a8:	f040 80e0 	bne.w	800386c <main+0x64c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036ac:	a90d      	add	r1, sp, #52	; 0x34
 80036ae:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b0:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036b4:	f006 febe 	bl	800a434 <HAL_TIMEx_MasterConfigSynchronization>
 80036b8:	2800      	cmp	r0, #0
 80036ba:	f040 80d7 	bne.w	800386c <main+0x64c>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80036be:	4984      	ldr	r1, [pc, #528]	; (80038d0 <main+0x6b0>)
 80036c0:	694b      	ldr	r3, [r1, #20]
 80036c2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80036c6:	d124      	bne.n	8003712 <main+0x4f2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80036c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80036cc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80036d0:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036d4:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80036d8:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80036dc:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80036e0:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036e2:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80036e6:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036e8:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
      } while (ways-- != 0U);
 80036ec:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036ee:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	d1f8      	bne.n	80036e8 <main+0x4c8>
    } while(sets-- != 0U);
 80036f6:	3c20      	subs	r4, #32
 80036f8:	f114 0f20 	cmn.w	r4, #32
 80036fc:	d1f1      	bne.n	80036e2 <main+0x4c2>
 80036fe:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003702:	694b      	ldr	r3, [r1, #20]
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	614b      	str	r3, [r1, #20]
 800370a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800370e:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8003712:	f7ff fd5f 	bl	80031d4 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8003716:	2100      	movs	r1, #0
 8003718:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800371c:	486d      	ldr	r0, [pc, #436]	; (80038d4 <main+0x6b4>)
 800371e:	f001 fd65 	bl	80051ec <HAL_ADCEx_Calibration_Start>
 8003722:	4601      	mov	r1, r0
 8003724:	2800      	cmp	r0, #0
 8003726:	f040 80a1 	bne.w	800386c <main+0x64c>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800372a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800372e:	486a      	ldr	r0, [pc, #424]	; (80038d8 <main+0x6b8>)
 8003730:	f001 fd5c 	bl	80051ec <HAL_ADCEx_Calibration_Start>
 8003734:	4604      	mov	r4, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	f040 8098 	bne.w	800386c <main+0x64c>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 800373c:	4601      	mov	r1, r0
 800373e:	4862      	ldr	r0, [pc, #392]	; (80038c8 <main+0x6a8>)
 8003740:	f006 fd5c 	bl	800a1fc <HAL_TIM_Encoder_Start>
	volume= 0.1;
 8003744:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8003980 <main+0x760>
 8003748:	4b64      	ldr	r3, [pc, #400]	; (80038dc <main+0x6bc>)
	SetFstep(2);
 800374a:	2002      	movs	r0, #2
	AMindex  = LSBindex = 1;
 800374c:	2501      	movs	r5, #1
 800374e:	4e64      	ldr	r6, [pc, #400]	; (80038e0 <main+0x6c0>)
	volume= 0.1;
 8003750:	f8c3 9000 	str.w	r9, [r3]
	SetFstep(2);
 8003754:	f7fd fb34 	bl	8000dc0 <SetFstep>
	AMindex  = LSBindex = 1;
 8003758:	4b62      	ldr	r3, [pc, #392]	; (80038e4 <main+0x6c4>)
	bw[AM]   = bw[LSB]  = Wide;
 800375a:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
	AMindex  = LSBindex = 1;
 800375e:	8035      	strh	r5, [r6, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003760:	f44f 6100 	mov.w	r1, #2048	; 0x800
	AMindex  = LSBindex = 1;
 8003764:	801d      	strh	r5, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8003766:	462a      	mov	r2, r5
	USBindex = CWindex  = 1;
 8003768:	4b5f      	ldr	r3, [pc, #380]	; (80038e8 <main+0x6c8>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 800376a:	460f      	mov	r7, r1
	USBindex = CWindex  = 1;
 800376c:	4e5f      	ldr	r6, [pc, #380]	; (80038ec <main+0x6cc>)
 800376e:	801d      	strh	r5, [r3, #0]
 8003770:	8035      	strh	r5, [r6, #0]
	cwpitch = CWPITCH;
 8003772:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <main+0x6d0>)
 8003774:	4e5f      	ldr	r6, [pc, #380]	; (80038f4 <main+0x6d4>)
	SamplingRate = ((150000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8003776:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8003984 <main+0x764>
	cwpitch = CWPITCH;
 800377a:	601e      	str	r6, [r3, #0]
	os_time = 0;
 800377c:	4e5e      	ldr	r6, [pc, #376]	; (80038f8 <main+0x6d8>)
	meanavg = 0.f;
 800377e:	4b5f      	ldr	r3, [pc, #380]	; (80038fc <main+0x6dc>)
	os_time = 0;
 8003780:	6034      	str	r4, [r6, #0]
	meanavg = 0.f;
 8003782:	2600      	movs	r6, #0
 8003784:	601e      	str	r6, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8003786:	4b5e      	ldr	r3, [pc, #376]	; (8003900 <main+0x6e0>)
 8003788:	4e5e      	ldr	r6, [pc, #376]	; (8003904 <main+0x6e4>)
 800378a:	601e      	str	r6, [r3, #0]
	Muted   = false;
 800378c:	4e5e      	ldr	r6, [pc, #376]	; (8003908 <main+0x6e8>)
	bw[AM]   = bw[LSB]  = Wide;
 800378e:	4b5f      	ldr	r3, [pc, #380]	; (800390c <main+0x6ec>)
	Muted   = false;
 8003790:	7034      	strb	r4, [r6, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8003792:	6018      	str	r0, [r3, #0]
	agc[AM]  = agc[LSB] = Slow;
 8003794:	4e5e      	ldr	r6, [pc, #376]	; (8003910 <main+0x6f0>)
 8003796:	485f      	ldr	r0, [pc, #380]	; (8003914 <main+0x6f4>)
	AGC_decay[Fast] = 0.9995f;
 8003798:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <main+0x6f8>)
	agc[AM]  = agc[LSB] = Slow;
 800379a:	6006      	str	r6, [r0, #0]
	AGC_decay[Fast] = 0.9995f;
 800379c:	4e5f      	ldr	r6, [pc, #380]	; (800391c <main+0x6fc>)
	AGC_decay[Slow] = 0.99995f;
 800379e:	4860      	ldr	r0, [pc, #384]	; (8003920 <main+0x700>)
	AGC_decay[Fast] = 0.9995f;
 80037a0:	601e      	str	r6, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 80037a2:	6058      	str	r0, [r3, #4]
	Hangcount[Fast] = 2;
 80037a4:	4e5f      	ldr	r6, [pc, #380]	; (8003924 <main+0x704>)
 80037a6:	4b60      	ldr	r3, [pc, #384]	; (8003928 <main+0x708>)
	AgcThreshold    = 1.92e-4f;
 80037a8:	4860      	ldr	r0, [pc, #384]	; (800392c <main+0x70c>)
	Hangcount[Fast] = 2;
 80037aa:	601e      	str	r6, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 80037ac:	4e60      	ldr	r6, [pc, #384]	; (8003930 <main+0x710>)
	SamplingRate = ((150000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80037ae:	4b61      	ldr	r3, [pc, #388]	; (8003934 <main+0x714>)
	AgcThreshold    = 1.92e-4f;
 80037b0:	6006      	str	r6, [r0, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80037b2:	4861      	ldr	r0, [pc, #388]	; (8003938 <main+0x718>)
	SamplingRate = ((150000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 80037b4:	f8c8 3000 	str.w	r3, [r8]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80037b8:	f003 fcb2 	bl	8007120 <HAL_GPIO_WritePin>
		TXCarrierEnabled = 0;
 80037bc:	4b5f      	ldr	r3, [pc, #380]	; (800393c <main+0x71c>)
	TXSwitch(0);
 80037be:	4620      	mov	r0, r4
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 80037c0:	4e5f      	ldr	r6, [pc, #380]	; (8003940 <main+0x720>)
		TXCarrierEnabled = 0;
 80037c2:	701c      	strb	r4, [r3, #0]
	TXSwitch(0);
 80037c4:	f7ff fbc2 	bl	8002f4c <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 80037c8:	4b5e      	ldr	r3, [pc, #376]	; (8003944 <main+0x724>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 80037ca:	221a      	movs	r2, #26
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80037cc:	495e      	ldr	r1, [pc, #376]	; (8003948 <main+0x728>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 80037ce:	9203      	str	r2, [sp, #12]
	__HAL_RCC_PLL2_DISABLE();
 80037d0:	681a      	ldr	r2, [r3, #0]
	SamplingRate = SamplingRate * (7300000.f / (7300000.f + (150.f / 2.0f))); // Correct Xtal error. One half of the tuning error since sampling is twice
 80037d2:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800394c <main+0x72c>
	__HAL_RCC_PLL2_DISABLE();
 80037d6:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
	SamplingRate = SamplingRate * (7300000.f / (7300000.f + (150.f / 2.0f))); // Correct Xtal error. One half of the tuning error since sampling is twice
 80037da:	edd8 7a00 	vldr	s15, [r8]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80037de:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003950 <main+0x730>
	__HAL_RCC_PLL2_DISABLE();
 80037e2:	601a      	str	r2, [r3, #0]
	SamplingRate = SamplingRate * (7300000.f / (7300000.f + (150.f / 2.0f))); // Correct Xtal error. One half of the tuning error since sampling is twice
 80037e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80037e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	CWThreshold = 0.1;
 80037ea:	485a      	ldr	r0, [pc, #360]	; (8003954 <main+0x734>)
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80037ec:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 80037f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037f4:	4c58      	ldr	r4, [pc, #352]	; (8003958 <main+0x738>)
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 80037f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
 80037fc:	9a03      	ldr	r2, [sp, #12]
 80037fe:	3a01      	subs	r2, #1
 8003800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003804:	4311      	orrs	r1, r2
 8003806:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800380e:	601a      	str	r2, [r3, #0]
	CWThreshold = 0.1;
 8003810:	f8c0 9000 	str.w	r9, [r0]
	SamplingRate = SamplingRate * (7300000.f / (7300000.f + (150.f / 2.0f))); // Correct Xtal error. One half of the tuning error since sampling is twice
 8003814:	edc8 7a00 	vstr	s15, [r8]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003818:	ed84 7a00 	vstr	s14, [r4]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 800381c:	f7fe fbec 	bl	8001ff8 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003820:	4b4e      	ldr	r3, [pc, #312]	; (800395c <main+0x73c>)
 8003822:	2204      	movs	r2, #4
 8003824:	2140      	movs	r1, #64	; 0x40
 8003826:	484e      	ldr	r0, [pc, #312]	; (8003960 <main+0x740>)
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	9701      	str	r7, [sp, #4]
 800382c:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <main+0x744>)
 800382e:	f009 feef 	bl	800d610 <arm_fir_decimate_init_f32>
 8003832:	7030      	strb	r0, [r6, #0]
	while(arc != ARM_MATH_SUCCESS)
 8003834:	b100      	cbz	r0, 8003838 <main+0x618>
 8003836:	e7fe      	b.n	8003836 <main+0x616>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8003838:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <main+0x748>)
 800383a:	2204      	movs	r2, #4
 800383c:	2140      	movs	r1, #64	; 0x40
 800383e:	484b      	ldr	r0, [pc, #300]	; (800396c <main+0x74c>)
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	9701      	str	r7, [sp, #4]
 8003844:	4b47      	ldr	r3, [pc, #284]	; (8003964 <main+0x744>)
 8003846:	f009 fee3 	bl	800d610 <arm_fir_decimate_init_f32>
 800384a:	7030      	strb	r0, [r6, #0]
	while(arc != ARM_MATH_SUCCESS)
 800384c:	b980      	cbnz	r0, 8003870 <main+0x650>
	Load_Presets();
 800384e:	f7fd f8e3 	bl	8000a18 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8003852:	4628      	mov	r0, r5
 8003854:	f7fd f9c2 	bl	8000bdc <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8003858:	f7fe fede 	bl	8002618 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	4943      	ldr	r1, [pc, #268]	; (8003970 <main+0x750>)
 8003862:	481c      	ldr	r0, [pc, #112]	; (80038d4 <main+0x6b4>)
 8003864:	f001 fd14 	bl	8005290 <HAL_ADCEx_MultiModeStart_DMA>
 8003868:	4604      	mov	r4, r0
 800386a:	b110      	cbz	r0, 8003872 <main+0x652>
    Error_Handler();
 800386c:	f7ff fbde 	bl	800302c <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8003870:	e7fe      	b.n	8003870 <main+0x650>
	HAL_TIM_Base_Start(&htim6);
 8003872:	4840      	ldr	r0, [pc, #256]	; (8003974 <main+0x754>)
 8003874:	f006 fb8a 	bl	8009f8c <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003878:	4621      	mov	r1, r4
 800387a:	483f      	ldr	r0, [pc, #252]	; (8003978 <main+0x758>)
 800387c:	f001 fe82 	bl	8005584 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8003880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003884:	4a3d      	ldr	r2, [pc, #244]	; (800397c <main+0x75c>)
 8003886:	4621      	mov	r1, r4
 8003888:	483b      	ldr	r0, [pc, #236]	; (8003978 <main+0x758>)
 800388a:	9400      	str	r4, [sp, #0]
 800388c:	f001 fea6 	bl	80055dc <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8003890:	4620      	mov	r0, r4
 8003892:	f000 fc99 	bl	80041c8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8003896:	2110      	movs	r1, #16
 8003898:	4837      	ldr	r0, [pc, #220]	; (8003978 <main+0x758>)
 800389a:	f001 fe73 	bl	8005584 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 800389e:	4622      	mov	r2, r4
 80038a0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80038a4:	2110      	movs	r1, #16
 80038a6:	4834      	ldr	r0, [pc, #208]	; (8003978 <main+0x758>)
 80038a8:	f001 ff28 	bl	80056fc <HAL_DAC_SetValue>
		UserInput();
 80038ac:	f7ff f838 	bl	8002920 <UserInput>
		HAL_Delay(100);
 80038b0:	2064      	movs	r0, #100	; 0x64
 80038b2:	f000 fc71 	bl	8004198 <HAL_Delay>
		if (ubADCDualConversionComplete == RESET)
 80038b6:	e7f9      	b.n	80038ac <main+0x68c>
 80038b8:	24008a54 	.word	0x24008a54
 80038bc:	58002400 	.word	0x58002400
 80038c0:	24003ef8 	.word	0x24003ef8
 80038c4:	40004800 	.word	0x40004800
 80038c8:	24003e98 	.word	0x24003e98
 80038cc:	40000800 	.word	0x40000800
 80038d0:	e000ed00 	.word	0xe000ed00
 80038d4:	240089e4 	.word	0x240089e4
 80038d8:	24003f88 	.word	0x24003f88
 80038dc:	2400581c 	.word	0x2400581c
 80038e0:	2400f246 	.word	0x2400f246
 80038e4:	2400f244 	.word	0x2400f244
 80038e8:	24009ce4 	.word	0x24009ce4
 80038ec:	240092a8 	.word	0x240092a8
 80038f0:	2400acf4 	.word	0x2400acf4
 80038f4:	44228000 	.word	0x44228000
 80038f8:	2400ad00 	.word	0x2400ad00
 80038fc:	2400ce00 	.word	0x2400ce00
 8003900:	24009ce0 	.word	0x24009ce0
 8003904:	3f7cac08 	.word	0x3f7cac08
 8003908:	240089e1 	.word	0x240089e1
 800390c:	24009ce8 	.word	0x24009ce8
 8003910:	00010101 	.word	0x00010101
 8003914:	24008a48 	.word	0x24008a48
 8003918:	2400de10 	.word	0x2400de10
 800391c:	3f7fdf3b 	.word	0x3f7fdf3b
 8003920:	3f7ffcb9 	.word	0x3f7ffcb9
 8003924:	001e0002 	.word	0x001e0002
 8003928:	2400acf8 	.word	0x2400acf8
 800392c:	2400acf0 	.word	0x2400acf0
 8003930:	3949539c 	.word	0x3949539c
 8003934:	4b0f0d18 	.word	0x4b0f0d18
 8003938:	58020c00 	.word	0x58020c00
 800393c:	240089e0 	.word	0x240089e0
 8003940:	2400ce08 	.word	0x2400ce08
 8003944:	58024400 	.word	0x58024400
 8003948:	01012e00 	.word	0x01012e00
 800394c:	3f7fff54 	.word	0x3f7fff54
 8003950:	3b800000 	.word	0x3b800000
 8003954:	2400929c 	.word	0x2400929c
 8003958:	240092a4 	.word	0x240092a4
 800395c:	240060d8 	.word	0x240060d8
 8003960:	24001a64 	.word	0x24001a64
 8003964:	2400017c 	.word	0x2400017c
 8003968:	2400ad04 	.word	0x2400ad04
 800396c:	24009b28 	.word	0x24009b28
 8003970:	2400e640 	.word	0x2400e640
 8003974:	24009c8c 	.word	0x24009c8c
 8003978:	24003ee4 	.word	0x24003ee4
 800397c:	240081e0 	.word	0x240081e0
 8003980:	3dcccccd 	.word	0x3dcccccd
 8003984:	240058c8 	.word	0x240058c8

08003988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003988:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	4c14      	ldr	r4, [pc, #80]	; (80039dc <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800398c:	2102      	movs	r1, #2
{
 800398e:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003990:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003992:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003996:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80039a0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80039a4:	400b      	ands	r3, r1
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80039aa:	f001 fd75 	bl	8005498 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80039ae:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80039b2:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 80039b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80039bc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80039c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80039c8:	f000 fbfe 	bl	80041c8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80039cc:	f000 fc10 	bl	80041f0 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80039d0:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d2:	b002      	add	sp, #8
 80039d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80039d8:	f000 bc00 	b.w	80041dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 80039dc:	58024400 	.word	0x58024400

080039e0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80039e0:	4951      	ldr	r1, [pc, #324]	; (8003b28 <HAL_ADC_MspInit+0x148>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e2:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80039e4:	6802      	ldr	r2, [r0, #0]
{
 80039e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hadc->Instance==ADC1)
 80039ea:	428a      	cmp	r2, r1
{
 80039ec:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ee:	9305      	str	r3, [sp, #20]
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	9308      	str	r3, [sp, #32]
 80039f4:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 80039f8:	d02d      	beq.n	8003a56 <HAL_ADC_MspInit+0x76>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80039fa:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_ADC_MspInit+0x14c>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d002      	beq.n	8003a06 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a00:	b00b      	add	sp, #44	; 0x2c
 8003a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a06:	4a4a      	ldr	r2, [pc, #296]	; (8003b30 <HAL_ADC_MspInit+0x150>)
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a0c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a10:	d079      	beq.n	8003b06 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a12:	4b48      	ldr	r3, [pc, #288]	; (8003b34 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a16:	2602      	movs	r6, #2
 8003a18:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1e:	a904      	add	r1, sp, #16
 8003a20:	4845      	ldr	r0, [pc, #276]	; (8003b38 <HAL_ADC_MspInit+0x158>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	f044 0402 	orr.w	r4, r4, #2
 8003a26:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8003a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	9303      	str	r3, [sp, #12]
 8003a36:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a38:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3c:	f003 fa4c 	bl	8006ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003a40:	462a      	mov	r2, r5
 8003a42:	4629      	mov	r1, r5
 8003a44:	2012      	movs	r0, #18
 8003a46:	f001 fd27 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003a4a:	2012      	movs	r0, #18
 8003a4c:	f001 fd5e 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 8003a50:	b00b      	add	sp, #44	; 0x2c
 8003a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a56:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_ADC_MspInit+0x150>)
 8003a58:	4604      	mov	r4, r0
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a5e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a62:	d042      	beq.n	8003aea <HAL_ADC_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a64:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_ADC_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a68:	f04f 0802 	mov.w	r8, #2
 8003a6c:	f04f 0903 	mov.w	r9, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	4830      	ldr	r0, [pc, #192]	; (8003b38 <HAL_ADC_MspInit+0x158>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a78:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7c:	f042 0202 	orr.w	r2, r2, #2
    hdma_adc1.Instance = DMA1_Stream0;
 8003a80:	4d2e      	ldr	r5, [pc, #184]	; (8003b3c <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a94:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a98:	f003 fa1e 	bl	8006ed8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_ADC_MspInit+0x160>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003aa2:	f04f 0c09 	mov.w	ip, #9
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Stream0;
 8003aae:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ab4:	6128      	str	r0, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ab6:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ab8:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aba:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003abc:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003abe:	f8c5 c004 	str.w	ip, [r5, #4]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ac2:	e9c5 7105 	strd	r7, r1, [r5, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ac6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003aca:	f002 f835 	bl	8005b38 <HAL_DMA_Init>
 8003ace:	bb40      	cbnz	r0, 8003b22 <HAL_ADC_MspInit+0x142>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ad4:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ad6:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ad8:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ada:	f001 fcdd 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ade:	2012      	movs	r0, #18
 8003ae0:	f001 fd14 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 8003ae4:	b00b      	add	sp, #44	; 0x2c
 8003ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_ADC_MspInit+0x154>)
 8003aec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003af0:	f042 0220 	orr.w	r2, r2, #32
 8003af4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	9b00      	ldr	r3, [sp, #0]
 8003b04:	e7ae      	b.n	8003a64 <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_ADC_MspInit+0x154>)
 8003b08:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003b0c:	f042 0220 	orr.w	r2, r2, #32
 8003b10:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	9302      	str	r3, [sp, #8]
 8003b1e:	9b02      	ldr	r3, [sp, #8]
 8003b20:	e777      	b.n	8003a12 <HAL_ADC_MspInit+0x32>
      Error_Handler();
 8003b22:	f7ff fa83 	bl	800302c <Error_Handler>
 8003b26:	e7d3      	b.n	8003ad0 <HAL_ADC_MspInit+0xf0>
 8003b28:	40022000 	.word	0x40022000
 8003b2c:	40022100 	.word	0x40022100
 8003b30:	24000714 	.word	0x24000714
 8003b34:	58024400 	.word	0x58024400
 8003b38:	58020400 	.word	0x58020400
 8003b3c:	24009aac 	.word	0x24009aac
 8003b40:	40020010 	.word	0x40020010

08003b44 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003b44:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_DAC_MspInit+0xc4>)
 8003b46:	6802      	ldr	r2, [r0, #0]
{
 8003b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hdac->Instance==DAC1)
 8003b4c:	429a      	cmp	r2, r3
{
 8003b4e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	9403      	str	r4, [sp, #12]
 8003b56:	9402      	str	r4, [sp, #8]
 8003b58:	9406      	str	r4, [sp, #24]
 8003b5a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hdac->Instance==DAC1)
 8003b5e:	d002      	beq.n	8003b66 <HAL_DAC_MspInit+0x22>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003b60:	b009      	add	sp, #36	; 0x24
 8003b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003b66:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_DAC_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b68:	f04f 0830 	mov.w	r8, #48	; 0x30
 8003b6c:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b70:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003b72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003b76:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b78:	4825      	ldr	r0, [pc, #148]	; (8003c10 <HAL_DAC_MspInit+0xcc>)
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b7a:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003b7e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003b82:	4e24      	ldr	r6, [pc, #144]	; (8003c14 <HAL_DAC_MspInit+0xd0>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003b84:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003b88:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003b8c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003b90:	9200      	str	r2, [sp, #0]
 8003b92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003b98:	f042 0201 	orr.w	r2, r2, #1
 8003b9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bae:	e9cd 8902 	strd	r8, r9, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb2:	f003 f991 	bl	8006ed8 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_DAC_MspInit+0xd4>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bb8:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003bba:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003bc6:	6033      	str	r3, [r6, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bcc:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003bce:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bd0:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bd2:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003bd6:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bd8:	e9c6 7104 	strd	r7, r1, [r6, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003bdc:	e9c6 2306 	strd	r2, r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003be0:	f001 ffaa 	bl	8005b38 <HAL_DMA_Init>
 8003be4:	b960      	cbnz	r0, 8003c00 <HAL_DAC_MspInit+0xbc>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003bea:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003bec:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003bee:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003bf0:	f001 fc52 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bf4:	2036      	movs	r0, #54	; 0x36
 8003bf6:	f001 fc89 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 8003bfa:	b009      	add	sp, #36	; 0x24
 8003bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8003c00:	f7ff fa14 	bl	800302c <Error_Handler>
 8003c04:	e7ef      	b.n	8003be6 <HAL_DAC_MspInit+0xa2>
 8003c06:	bf00      	nop
 8003c08:	40007400 	.word	0x40007400
 8003c0c:	58024400 	.word	0x58024400
 8003c10:	58020000 	.word	0x58020000
 8003c14:	24005824 	.word	0x24005824
 8003c18:	40020028 	.word	0x40020028

08003c1c <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1e:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 8003c20:	6801      	ldr	r1, [r0, #0]
{
 8003c22:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlptim->Instance==LPTIM2)
 8003c24:	4291      	cmp	r1, r2
{
 8003c26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c2c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c30:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 8003c32:	d001      	beq.n	8003c38 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8003c34:	b009      	add	sp, #36	; 0x24
 8003c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003c3a:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003c40:	2502      	movs	r5, #2
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003c42:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c46:	a902      	add	r1, sp, #8
 8003c48:	4812      	ldr	r0, [pc, #72]	; (8003c94 <HAL_LPTIM_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c4a:	2700      	movs	r7, #0
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c50:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003c54:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003c58:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003c5c:	9200      	str	r2, [sp, #0]
 8003c5e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c64:	f042 0202 	orr.w	r2, r2, #2
 8003c68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003c70:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c72:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c80:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	f003 f928 	bl	8006ed8 <HAL_GPIO_Init>
}
 8003c88:	b009      	add	sp, #36	; 0x24
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8c:	58002400 	.word	0x58002400
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58020400 	.word	0x58020400

08003c98 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_TIM_Encoder_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9a:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003c9c:	6801      	ldr	r1, [r0, #0]
{
 8003c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_encoder->Instance==TIM4)
 8003ca0:	4291      	cmp	r1, r2
{
 8003ca2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ca8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003cac:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003cb0:	b009      	add	sp, #36	; 0x24
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_TIM_Encoder_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cb6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003cb8:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8003cbc:	2502      	movs	r5, #2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cbe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cc2:	a902      	add	r1, sp, #8
 8003cc4:	4812      	ldr	r0, [pc, #72]	; (8003d10 <HAL_TIM_Encoder_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003cc6:	2700      	movs	r7, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cc8:	f042 0204 	orr.w	r2, r2, #4
 8003ccc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003cd0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003cd4:	f002 0204 	and.w	r2, r2, #4
 8003cd8:	9200      	str	r2, [sp, #0]
 8003cda:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cec:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003cee:	2601      	movs	r6, #1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003cf8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003cfc:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d00:	f003 f8ea 	bl	8006ed8 <HAL_GPIO_Init>
}
 8003d04:	b009      	add	sp, #36	; 0x24
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	58020c00 	.word	0x58020c00

08003d14 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_TIM_Base_MspInit+0x40>)
 8003d16:	6802      	ldr	r2, [r0, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d000      	beq.n	8003d1e <HAL_TIM_Base_MspInit+0xa>
 8003d1c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003d20:	2200      	movs	r2, #0
 8003d22:	2101      	movs	r1, #1
 8003d24:	2036      	movs	r0, #54	; 0x36
{
 8003d26:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d28:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003d2c:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d2e:	f044 0410 	orr.w	r4, r4, #16
 8003d32:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003d42:	f001 fba9 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d46:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003d48:	b002      	add	sp, #8
 8003d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d4e:	f001 bbdd 	b.w	800550c <HAL_NVIC_EnableIRQ>
 8003d52:	bf00      	nop
 8003d54:	40001000 	.word	0x40001000
 8003d58:	58024400 	.word	0x58024400

08003d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	2400      	movs	r4, #0
{
 8003d62:	b0b8      	sub	sp, #224	; 0xe0
 8003d64:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d66:	22bc      	movs	r2, #188	; 0xbc
 8003d68:	4621      	mov	r1, r4
 8003d6a:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6c:	9408      	str	r4, [sp, #32]
 8003d6e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003d72:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d76:	f00a f9e7 	bl	800e148 <memset>
  if(huart->Instance==USART3)
 8003d7a:	682a      	ldr	r2, [r5, #0]
 8003d7c:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_UART_MspInit+0xe0>)
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_MspInit+0x2c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d82:	b038      	add	sp, #224	; 0xe0
 8003d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d88:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d8a:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d8c:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d8e:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d90:	f004 ff60 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d14d      	bne.n	8003e34 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d98:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d9a:	2400      	movs	r4, #0
 8003d9c:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d9e:	f04f 0807 	mov.w	r8, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8003da2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003da6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003daa:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dac:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003dae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db2:	4824      	ldr	r0, [pc, #144]	; (8003e44 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003db4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003db8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003dbc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003dc0:	9201      	str	r2, [sp, #4]
 8003dc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dc8:	f042 0202 	orr.w	r2, r2, #2
 8003dcc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003dd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dd4:	f002 0202 	and.w	r2, r2, #2
 8003dd8:	9202      	str	r2, [sp, #8]
 8003dda:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ddc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003de0:	f042 0208 	orr.w	r2, r2, #8
 8003de4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dec:	f8cd 8020 	str.w	r8, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	9303      	str	r3, [sp, #12]
 8003df6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003df8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dfc:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e00:	f003 f86a 	bl	8006ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e04:	2302      	movs	r3, #2
 8003e06:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0a:	a904      	add	r1, sp, #16
 8003e0c:	480e      	ldr	r0, [pc, #56]	; (8003e48 <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e0e:	f8cd 8020 	str.w	r8, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e16:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e1a:	f003 f85d 	bl	8006ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2101      	movs	r1, #1
 8003e22:	2027      	movs	r0, #39	; 0x27
 8003e24:	f001 fb38 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e28:	2027      	movs	r0, #39	; 0x27
 8003e2a:	f001 fb6f 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 8003e2e:	b038      	add	sp, #224	; 0xe0
 8003e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8003e34:	f7ff f8fa 	bl	800302c <Error_Handler>
 8003e38:	e7ae      	b.n	8003d98 <HAL_UART_MspInit+0x3c>
 8003e3a:	bf00      	nop
 8003e3c:	40004800 	.word	0x40004800
 8003e40:	58024400 	.word	0x58024400
 8003e44:	58020400 	.word	0x58020400
 8003e48:	58020c00 	.word	0x58020c00

08003e4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e50:	e7fe      	b.n	8003e50 <HardFault_Handler>
 8003e52:	bf00      	nop

08003e54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <MemManage_Handler>
 8003e56:	bf00      	nop

08003e58 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e58:	e7fe      	b.n	8003e58 <BusFault_Handler>
 8003e5a:	bf00      	nop

08003e5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <UsageFault_Handler>
 8003e5e:	bf00      	nop

08003e60 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003e60:	f000 b930 	b.w	80040c4 <ADC3_IRQHandler>

08003e64 <DebugMon_Handler>:
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <PendSV_Handler>:
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e6c:	f000 b982 	b.w	8004174 <HAL_IncTick>

08003e70 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e70:	4801      	ldr	r0, [pc, #4]	; (8003e78 <DMA1_Stream0_IRQHandler+0x8>)
 8003e72:	f002 bcd3 	b.w	800681c <HAL_DMA_IRQHandler>
 8003e76:	bf00      	nop
 8003e78:	24009aac 	.word	0x24009aac

08003e7c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <DMA1_Stream1_IRQHandler+0x8>)
 8003e7e:	f002 bccd 	b.w	800681c <HAL_DMA_IRQHandler>
 8003e82:	bf00      	nop
 8003e84:	24005824 	.word	0x24005824

08003e88 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e88:	4804      	ldr	r0, [pc, #16]	; (8003e9c <ADC_IRQHandler+0x14>)
{
 8003e8a:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8003e8c:	f000 f9d2 	bl	8004234 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003e90:	4803      	ldr	r0, [pc, #12]	; (8003ea0 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8003e96:	f000 b9cd 	b.w	8004234 <HAL_ADC_IRQHandler>
 8003e9a:	bf00      	nop
 8003e9c:	240089e4 	.word	0x240089e4
 8003ea0:	24003f88 	.word	0x24003f88

08003ea4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <USART3_IRQHandler+0x8>)
 8003ea6:	f006 bb2f 	b.w	800a508 <HAL_UART_IRQHandler>
 8003eaa:	bf00      	nop
 8003eac:	24003ef8 	.word	0x24003ef8

08003eb0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003eb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003eb4:	f003 b938 	b.w	8007128 <HAL_GPIO_EXTI_IRQHandler>

08003eb8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003eb8:	4804      	ldr	r0, [pc, #16]	; (8003ecc <TIM6_DAC_IRQHandler+0x14>)
{
 8003eba:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8003ebc:	f001 fc54 	bl	8005768 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003ec0:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003ec6:	f006 b9fd 	b.w	800a2c4 <HAL_TIM_IRQHandler>
 8003eca:	bf00      	nop
 8003ecc:	24003ee4 	.word	0x24003ee4
 8003ed0:	24009c8c 	.word	0x24009c8c

08003ed4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <OTG_FS_IRQHandler+0x8>)
 8003ed6:	f003 ba61 	b.w	800739c <HAL_PCD_IRQHandler>
 8003eda:	bf00      	nop
 8003edc:	24010718 	.word	0x24010718

08003ee0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	4770      	bx	lr

08003ee4 <_kill>:

int _kill(int pid, int sig)
{
 8003ee4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003ee6:	f00a f8f7 	bl	800e0d8 <__errno>
 8003eea:	2216      	movs	r2, #22
 8003eec:	4603      	mov	r3, r0
	return -1;
}
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bd08      	pop	{r3, pc}
 8003ef6:	bf00      	nop

08003ef8 <_exit>:

void _exit (int status)
{
 8003ef8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003efa:	f00a f8ed 	bl	800e0d8 <__errno>
 8003efe:	2316      	movs	r3, #22
 8003f00:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003f02:	e7fe      	b.n	8003f02 <_exit+0xa>

08003f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f04:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	1e16      	subs	r6, r2, #0
 8003f08:	dd07      	ble.n	8003f1a <_read+0x16>
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003f0e:	f3af 8000 	nop.w
 8003f12:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	42a5      	cmp	r5, r4
 8003f18:	d1f9      	bne.n	8003f0e <_read+0xa>
	}

return len;
}
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	bd70      	pop	{r4, r5, r6, pc}
 8003f1e:	bf00      	nop

08003f20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f20:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f22:	1e16      	subs	r6, r2, #0
 8003f24:	dd07      	ble.n	8003f36 <_write+0x16>
 8003f26:	460c      	mov	r4, r1
 8003f28:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003f2a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003f2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f32:	42ac      	cmp	r4, r5
 8003f34:	d1f9      	bne.n	8003f2a <_write+0xa>
	}
	return len;
}
 8003f36:	4630      	mov	r0, r6
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	bf00      	nop

08003f3c <_close>:

int _close(int file)
{
	return -1;
}
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop

08003f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003f48:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003f4a:	604b      	str	r3, [r1, #4]
}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003f50:	2001      	movs	r0, #1
 8003f52:	4770      	bx	lr

08003f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003f54:	2000      	movs	r0, #0
 8003f56:	4770      	bx	lr

08003f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f58:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f5a:	4c0d      	ldr	r4, [pc, #52]	; (8003f90 <_sbrk+0x38>)
{
 8003f5c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f5e:	490d      	ldr	r1, [pc, #52]	; (8003f94 <_sbrk+0x3c>)
 8003f60:	480d      	ldr	r0, [pc, #52]	; (8003f98 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8003f62:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f64:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 8003f66:	b12a      	cbz	r2, 8003f74 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f68:	4413      	add	r3, r2
 8003f6a:	428b      	cmp	r3, r1
 8003f6c:	d808      	bhi.n	8003f80 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003f6e:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8003f70:	6023      	str	r3, [r4, #0]
}
 8003f72:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003f74:	4809      	ldr	r0, [pc, #36]	; (8003f9c <_sbrk+0x44>)
 8003f76:	4602      	mov	r2, r0
 8003f78:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	d9f6      	bls.n	8003f6e <_sbrk+0x16>
    errno = ENOMEM;
 8003f80:	f00a f8aa 	bl	800e0d8 <__errno>
 8003f84:	230c      	movs	r3, #12
    return (void *)-1;
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003f8a:	6003      	str	r3, [r0, #0]
}
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	bd10      	pop	{r4, pc}
 8003f90:	24000718 	.word	0x24000718
 8003f94:	24080000 	.word	0x24080000
 8003f98:	00000400 	.word	0x00000400
 8003f9c:	24010b30 	.word	0x24010b30

08003fa0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa0:	4929      	ldr	r1, [pc, #164]	; (8004048 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fa2:	4a2a      	ldr	r2, [pc, #168]	; (800404c <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fa4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8003fac:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d805      	bhi.n	8003fc8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fbc:	6813      	ldr	r3, [r2, #0]
 8003fbe:	f023 030f 	bic.w	r3, r3, #15
 8003fc2:	f043 0307 	orr.w	r3, r3, #7
 8003fc6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fc8:	4b21      	ldr	r3, [pc, #132]	; (8004050 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fca:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fcc:	4a21      	ldr	r2, [pc, #132]	; (8004054 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8003fce:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fd0:	481e      	ldr	r0, [pc, #120]	; (800404c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003fd2:	f041 0101 	orr.w	r1, r1, #1
 8003fd6:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003fd8:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	400a      	ands	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fe0:	6803      	ldr	r3, [r0, #0]
 8003fe2:	071b      	lsls	r3, r3, #28
 8003fe4:	d505      	bpl.n	8003ff2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fe6:	6803      	ldr	r3, [r0, #0]
 8003fe8:	f023 030f 	bic.w	r3, r3, #15
 8003fec:	f043 0307 	orr.w	r3, r3, #7
 8003ff0:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <SystemInit+0xb0>)
 8003ff4:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ff6:	4918      	ldr	r1, [pc, #96]	; (8004058 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8003ff8:	4c18      	ldr	r4, [pc, #96]	; (800405c <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8003ffa:	4819      	ldr	r0, [pc, #100]	; (8004060 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8003ffc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003ffe:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8004000:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8004002:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8004004:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8004006:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800400a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800400e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004010:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004012:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004014:	4c13      	ldr	r4, [pc, #76]	; (8004064 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8004016:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800401a:	4913      	ldr	r1, [pc, #76]	; (8004068 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 800401c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800401e:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	4019      	ands	r1, r3
 8004024:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004028:	d202      	bcs.n	8004030 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <SystemInit+0xcc>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004030:	490f      	ldr	r1, [pc, #60]	; (8004070 <SystemInit+0xd0>)
 8004032:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <SystemInit+0xa8>)
 8004038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800403c:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800403e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000ed00 	.word	0xe000ed00
 800404c:	52002000 	.word	0x52002000
 8004050:	58024400 	.word	0x58024400
 8004054:	eaf6ed7f 	.word	0xeaf6ed7f
 8004058:	01010280 	.word	0x01010280
 800405c:	02020200 	.word	0x02020200
 8004060:	01ff0000 	.word	0x01ff0000
 8004064:	5c001000 	.word	0x5c001000
 8004068:	ffff0000 	.word	0xffff0000
 800406c:	51008108 	.word	0x51008108
 8004070:	52004000 	.word	0x52004000

08004074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040ac <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004078:	f7ff ff92 	bl	8003fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800407c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800407e:	e003      	b.n	8004088 <LoopCopyDataInit>

08004080 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004082:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004084:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004086:	3104      	adds	r1, #4

08004088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004088:	480a      	ldr	r0, [pc, #40]	; (80040b4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800408c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800408e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004090:	d3f6      	bcc.n	8004080 <CopyDataInit>
  ldr  r2, =_sbss
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004094:	e002      	b.n	800409c <LoopFillZerobss>

08004096 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004096:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004098:	f842 3b04 	str.w	r3, [r2], #4

0800409c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800409e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040a0:	d3f9      	bcc.n	8004096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040a2:	f00a f81f 	bl	800e0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040a6:	f7ff f8bb 	bl	8003220 <main>
  bx  lr    
 80040aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040ac:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80040b0:	0801c7e0 	.word	0x0801c7e0
  ldr  r0, =_sdata
 80040b4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80040b8:	240005e0 	.word	0x240005e0
  ldr  r2, =_sbss
 80040bc:	240005e0 	.word	0x240005e0
  ldr  r3, = _ebss
 80040c0:	24010b30 	.word	0x24010b30

080040c4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c4:	e7fe      	b.n	80040c4 <ADC3_IRQHandler>
	...

080040c8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_InitTick+0x40>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b90b      	cbnz	r3, 80040d2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80040d0:	4770      	bx	lr
{
 80040d2:	b510      	push	{r4, lr}
 80040d4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040da:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_InitTick+0x44>)
 80040dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e0:	6810      	ldr	r0, [r2, #0]
 80040e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80040e6:	f001 fa1f 	bl	8005528 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ea:	2c0f      	cmp	r4, #15
 80040ec:	d800      	bhi.n	80040f0 <HAL_InitTick+0x28>
 80040ee:	b108      	cbz	r0, 80040f4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80040f0:	2001      	movs	r0, #1
}
 80040f2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f4:	2200      	movs	r2, #0
 80040f6:	4621      	mov	r1, r4
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
 80040fc:	f001 f9cc 	bl	8005498 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_InitTick+0x48>)
 8004102:	2000      	movs	r0, #0
 8004104:	601c      	str	r4, [r3, #0]
}
 8004106:	bd10      	pop	{r4, pc}
 8004108:	24000288 	.word	0x24000288
 800410c:	24000280 	.word	0x24000280
 8004110:	2400028c 	.word	0x2400028c

08004114 <HAL_Init>:
{
 8004114:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004116:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004118:	4c12      	ldr	r4, [pc, #72]	; (8004164 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800411a:	f001 f9a9 	bl	8005470 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800411e:	4d12      	ldr	r5, [pc, #72]	; (8004168 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004120:	f004 fa06 	bl	8008530 <HAL_RCC_GetSysClockFreq>
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_Init+0x58>)
 8004126:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004128:	2000      	movs	r0, #0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800412a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800412c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800412e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004132:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004136:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004138:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800413a:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 800413e:	4c0c      	ldr	r4, [pc, #48]	; (8004170 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004140:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004144:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800414a:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800414c:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800414e:	f7ff ffbb 	bl	80040c8 <HAL_InitTick>
 8004152:	b110      	cbz	r0, 800415a <HAL_Init+0x46>
    return HAL_ERROR;
 8004154:	2401      	movs	r4, #1
}
 8004156:	4620      	mov	r0, r4
 8004158:	bd38      	pop	{r3, r4, r5, pc}
 800415a:	4604      	mov	r4, r0
  HAL_MspInit();
 800415c:	f7ff fc14 	bl	8003988 <HAL_MspInit>
}
 8004160:	4620      	mov	r0, r4
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	08018228 	.word	0x08018228
 8004168:	24000284 	.word	0x24000284
 800416c:	58024400 	.word	0x58024400
 8004170:	24000280 	.word	0x24000280

08004174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <HAL_IncTick+0x10>)
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_IncTick+0x14>)
 8004178:	6811      	ldr	r1, [r2, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	440b      	add	r3, r1
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	240058c0 	.word	0x240058c0
 8004188:	24000288 	.word	0x24000288

0800418c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800418c:	4b01      	ldr	r3, [pc, #4]	; (8004194 <HAL_GetTick+0x8>)
 800418e:	6818      	ldr	r0, [r3, #0]
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	240058c0 	.word	0x240058c0

08004198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7ff fff6 	bl	800418c <HAL_GetTick>
 80041a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041a2:	1c63      	adds	r3, r4, #1
 80041a4:	d002      	beq.n	80041ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_Delay+0x20>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	1b43      	subs	r3, r0, r5
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	d3fa      	bcc.n	80041ac <HAL_Delay+0x14>
  {
  }
}
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	24000288 	.word	0x24000288

080041bc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <HAL_GetREVID+0x8>)
 80041be:	6818      	ldr	r0, [r3, #0]
}
 80041c0:	0c00      	lsrs	r0, r0, #16
 80041c2:	4770      	bx	lr
 80041c4:	5c001000 	.word	0x5c001000

080041c8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80041c8:	4a03      	ldr	r2, [pc, #12]	; (80041d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	4318      	orrs	r0, r3
 80041d2:	6010      	str	r0, [r2, #0]
}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58003c00 	.word	0x58003c00

080041dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80041dc:	4a03      	ldr	r2, [pc, #12]	; (80041ec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	f023 0302 	bic.w	r3, r3, #2
 80041e4:	4318      	orrs	r0, r3
 80041e6:	6010      	str	r0, [r2, #0]
}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	58003c00 	.word	0x58003c00

080041f0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80041f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_SYSCFG_EnableVREFBUF+0x30>)
 80041f4:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80041f6:	461d      	mov	r5, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80041fe:	f7ff ffc5 	bl	800418c <HAL_GetTick>
 8004202:	4604      	mov	r4, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8004204:	e004      	b.n	8004210 <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8004206:	f7ff ffc1 	bl	800418c <HAL_GetTick>
 800420a:	1b00      	subs	r0, r0, r4
 800420c:	280a      	cmp	r0, #10
 800420e:	d804      	bhi.n	800421a <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	071b      	lsls	r3, r3, #28
 8004214:	d5f7      	bpl.n	8004206 <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004216:	2000      	movs	r0, #0
}
 8004218:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800421a:	2003      	movs	r0, #3
}
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	58003c00 	.word	0x58003c00

08004224 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004224:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004226:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004228:	f7fe f99a 	bl	8002560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800422c:	bd08      	pop	{r3, pc}
 800422e:	bf00      	nop

08004230 <HAL_ADC_ErrorCallback>:
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop

08004234 <HAL_ADC_IRQHandler>:
{
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004236:	4a97      	ldr	r2, [pc, #604]	; (8004494 <HAL_ADC_IRQHandler+0x260>)
{
 8004238:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800423a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800423c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800423e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004240:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004242:	f000 8098 	beq.w	8004376 <HAL_ADC_IRQHandler+0x142>
 8004246:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800424a:	4293      	cmp	r3, r2
 800424c:	f000 8093 	beq.w	8004376 <HAL_ADC_IRQHandler+0x142>
 8004250:	4a91      	ldr	r2, [pc, #580]	; (8004498 <HAL_ADC_IRQHandler+0x264>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004252:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004254:	07a9      	lsls	r1, r5, #30
 8004256:	f007 071f 	and.w	r7, r7, #31
 800425a:	d502      	bpl.n	8004262 <HAL_ADC_IRQHandler+0x2e>
 800425c:	07b2      	lsls	r2, r6, #30
 800425e:	f100 80ac 	bmi.w	80043ba <HAL_ADC_IRQHandler+0x186>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004262:	0769      	lsls	r1, r5, #29
 8004264:	d57c      	bpl.n	8004360 <HAL_ADC_IRQHandler+0x12c>
 8004266:	0772      	lsls	r2, r6, #29
 8004268:	d57a      	bpl.n	8004360 <HAL_ADC_IRQHandler+0x12c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800426a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800426c:	06d2      	lsls	r2, r2, #27
 800426e:	d403      	bmi.n	8004278 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004270:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800427e:	d11c      	bne.n	80042ba <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004280:	4a86      	ldr	r2, [pc, #536]	; (800449c <HAL_ADC_IRQHandler+0x268>)
 8004282:	4293      	cmp	r3, r2
 8004284:	f000 80e2 	beq.w	800444c <HAL_ADC_IRQHandler+0x218>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004288:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800428a:	0490      	lsls	r0, r2, #18
 800428c:	d415      	bmi.n	80042ba <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	0711      	lsls	r1, r2, #28
 8004292:	d512      	bpl.n	80042ba <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	0752      	lsls	r2, r2, #29
 8004298:	f100 80f1 	bmi.w	800447e <HAL_ADC_IRQHandler+0x24a>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	f022 020c 	bic.w	r2, r2, #12
 80042a2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042aa:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042ae:	04db      	lsls	r3, r3, #19
 80042b0:	d403      	bmi.n	80042ba <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7fe f932 	bl	8002524 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	220c      	movs	r2, #12
 80042c4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80042c6:	06a8      	lsls	r0, r5, #26
 80042c8:	d550      	bpl.n	800436c <HAL_ADC_IRQHandler+0x138>
 80042ca:	06b1      	lsls	r1, r6, #26
 80042cc:	d54e      	bpl.n	800436c <HAL_ADC_IRQHandler+0x138>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80042d0:	06d1      	lsls	r1, r2, #27
 80042d2:	d403      	bmi.n	80042dc <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80042d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80042d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042da:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042dc:	486f      	ldr	r0, [pc, #444]	; (800449c <HAL_ADC_IRQHandler+0x268>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80042de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e0:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042e2:	68d9      	ldr	r1, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80042e4:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80042e8:	d075      	beq.n	80043d6 <HAL_ADC_IRQHandler+0x1a2>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80042ea:	68d8      	ldr	r0, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80042ec:	b12a      	cbz	r2, 80042fa <HAL_ADC_IRQHandler+0xc6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80042ee:	4a6c      	ldr	r2, [pc, #432]	; (80044a0 <HAL_ADC_IRQHandler+0x26c>)
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042f0:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80042f4:	4002      	ands	r2, r0
 80042f6:	430a      	orrs	r2, r1
 80042f8:	d117      	bne.n	800432a <HAL_ADC_IRQHandler+0xf6>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	0652      	lsls	r2, r2, #25
 80042fe:	d514      	bpl.n	800432a <HAL_ADC_IRQHandler+0xf6>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004300:	0281      	lsls	r1, r0, #10
 8004302:	d412      	bmi.n	800432a <HAL_ADC_IRQHandler+0xf6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	0712      	lsls	r2, r2, #28
 8004308:	f100 80b0 	bmi.w	800446c <HAL_ADC_IRQHandler+0x238>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004312:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004314:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800431a:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800431c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800431e:	05d8      	lsls	r0, r3, #23
 8004320:	d403      	bmi.n	800432a <HAL_ADC_IRQHandler+0xf6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004322:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800432a:	4620      	mov	r0, r4
 800432c:	f001 f82e 	bl	800538c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	2260      	movs	r2, #96	; 0x60
 8004334:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004336:	0629      	lsls	r1, r5, #24
 8004338:	d501      	bpl.n	800433e <HAL_ADC_IRQHandler+0x10a>
 800433a:	0632      	lsls	r2, r6, #24
 800433c:	d45f      	bmi.n	80043fe <HAL_ADC_IRQHandler+0x1ca>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800433e:	05e8      	lsls	r0, r5, #23
 8004340:	d501      	bpl.n	8004346 <HAL_ADC_IRQHandler+0x112>
 8004342:	05f1      	lsls	r1, r6, #23
 8004344:	d466      	bmi.n	8004414 <HAL_ADC_IRQHandler+0x1e0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004346:	05aa      	lsls	r2, r5, #22
 8004348:	d501      	bpl.n	800434e <HAL_ADC_IRQHandler+0x11a>
 800434a:	05b0      	lsls	r0, r6, #22
 800434c:	d44b      	bmi.n	80043e6 <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800434e:	06e9      	lsls	r1, r5, #27
 8004350:	d501      	bpl.n	8004356 <HAL_ADC_IRQHandler+0x122>
 8004352:	06f2      	lsls	r2, r6, #27
 8004354:	d411      	bmi.n	800437a <HAL_ADC_IRQHandler+0x146>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004356:	0568      	lsls	r0, r5, #21
 8004358:	d501      	bpl.n	800435e <HAL_ADC_IRQHandler+0x12a>
 800435a:	0571      	lsls	r1, r6, #21
 800435c:	d466      	bmi.n	800442c <HAL_ADC_IRQHandler+0x1f8>
}
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004360:	0728      	lsls	r0, r5, #28
 8004362:	d5b0      	bpl.n	80042c6 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004364:	0731      	lsls	r1, r6, #28
 8004366:	d480      	bmi.n	800426a <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004368:	06a8      	lsls	r0, r5, #26
 800436a:	d4ae      	bmi.n	80042ca <HAL_ADC_IRQHandler+0x96>
 800436c:	066a      	lsls	r2, r5, #25
 800436e:	d5e2      	bpl.n	8004336 <HAL_ADC_IRQHandler+0x102>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004370:	0670      	lsls	r0, r6, #25
 8004372:	d5e0      	bpl.n	8004336 <HAL_ADC_IRQHandler+0x102>
 8004374:	e7ab      	b.n	80042ce <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004376:	4a4b      	ldr	r2, [pc, #300]	; (80044a4 <HAL_ADC_IRQHandler+0x270>)
 8004378:	e76b      	b.n	8004252 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800437a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800437c:	b172      	cbz	r2, 800439c <HAL_ADC_IRQHandler+0x168>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800437e:	2f00      	cmp	r7, #0
 8004380:	d069      	beq.n	8004456 <HAL_ADC_IRQHandler+0x222>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004382:	4a44      	ldr	r2, [pc, #272]	; (8004494 <HAL_ADC_IRQHandler+0x260>)
 8004384:	4293      	cmp	r3, r2
 8004386:	f000 8083 	beq.w	8004490 <HAL_ADC_IRQHandler+0x25c>
 800438a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800438e:	4293      	cmp	r3, r2
 8004390:	d07e      	beq.n	8004490 <HAL_ADC_IRQHandler+0x25c>
 8004392:	4a41      	ldr	r2, [pc, #260]	; (8004498 <HAL_ADC_IRQHandler+0x264>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 800439a:	d00b      	beq.n	80043b4 <HAL_ADC_IRQHandler+0x180>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800439c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 800439e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80043a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a4:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 80043ae:	f7ff ff3f 	bl	8004230 <HAL_ADC_ErrorCallback>
 80043b2:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043b4:	2210      	movs	r2, #16
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e7cd      	b.n	8004356 <HAL_ADC_IRQHandler+0x122>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043bc:	06d8      	lsls	r0, r3, #27
 80043be:	d403      	bmi.n	80043c8 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80043c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043c6:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043c8:	4620      	mov	r0, r4
 80043ca:	f000 ffe7 	bl	800539c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	2202      	movs	r2, #2
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e745      	b.n	8004262 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80043d6:	1fb8      	subs	r0, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80043d8:	2801      	cmp	r0, #1
 80043da:	d986      	bls.n	80042ea <HAL_ADC_IRQHandler+0xb6>
 80043dc:	2f00      	cmp	r7, #0
 80043de:	d084      	beq.n	80042ea <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043e0:	482c      	ldr	r0, [pc, #176]	; (8004494 <HAL_ADC_IRQHandler+0x260>)
 80043e2:	68c0      	ldr	r0, [r0, #12]
 80043e4:	e782      	b.n	80042ec <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80043e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80043e8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80043ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ee:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80043f0:	f000 ffd2 	bl	8005398 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e7a7      	b.n	800434e <HAL_ADC_IRQHandler+0x11a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004400:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004406:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004408:	f7fe f8ec 	bl	80025e4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e794      	b.n	800433e <HAL_ADC_IRQHandler+0x10a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004414:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004416:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800441e:	f000 ffb9 	bl	8005394 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e78c      	b.n	8004346 <HAL_ADC_IRQHandler+0x112>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800442c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800442e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004432:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004438:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800443a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800443c:	f042 0208 	orr.w	r2, r2, #8
 8004440:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004442:	6019      	str	r1, [r3, #0]
}
 8004444:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004448:	f000 bfa2 	b.w	8005390 <HAL_ADCEx_InjectedQueueOverflowCallback>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800444c:	2f09      	cmp	r7, #9
 800444e:	d906      	bls.n	800445e <HAL_ADC_IRQHandler+0x22a>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004450:	4a10      	ldr	r2, [pc, #64]	; (8004494 <HAL_ADC_IRQHandler+0x260>)
 8004452:	68d2      	ldr	r2, [r2, #12]
 8004454:	e719      	b.n	800428a <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	0797      	lsls	r7, r2, #30
 800445a:	d0ab      	beq.n	80043b4 <HAL_ADC_IRQHandler+0x180>
 800445c:	e79e      	b.n	800439c <HAL_ADC_IRQHandler+0x168>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800445e:	f240 2221 	movw	r2, #545	; 0x221
 8004462:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004464:	07d2      	lsls	r2, r2, #31
 8004466:	f53f af0f 	bmi.w	8004288 <HAL_ADC_IRQHandler+0x54>
 800446a:	e7f1      	b.n	8004450 <HAL_ADC_IRQHandler+0x21c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800446e:	f043 0310 	orr.w	r3, r3, #16
 8004472:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	65a3      	str	r3, [r4, #88]	; 0x58
 800447c:	e755      	b.n	800432a <HAL_ADC_IRQHandler+0xf6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004480:	f043 0310 	orr.w	r3, r3, #16
 8004484:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	65a3      	str	r3, [r4, #88]	; 0x58
 800448e:	e714      	b.n	80042ba <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <HAL_ADC_IRQHandler+0x270>)
 8004492:	e77f      	b.n	8004394 <HAL_ADC_IRQHandler+0x160>
 8004494:	40022000 	.word	0x40022000
 8004498:	58026300 	.word	0x58026300
 800449c:	40022100 	.word	0x40022100
 80044a0:	02002000 	.word	0x02002000
 80044a4:	40022300 	.word	0x40022300

080044a8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ac:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80044b2:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044b4:	d11d      	bne.n	80044f2 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044b6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044bc:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044be:	680a      	ldr	r2, [r1, #0]
 80044c0:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044c4:	68ca      	ldr	r2, [r1, #12]
 80044c6:	d01b      	beq.n	8004500 <ADC_DMAConvCplt+0x58>
 80044c8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80044cc:	d10d      	bne.n	80044ea <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044ce:	68ca      	ldr	r2, [r1, #12]
 80044d0:	0494      	lsls	r4, r2, #18
 80044d2:	d40a      	bmi.n	80044ea <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044de:	04d1      	lsls	r1, r2, #19
 80044e0:	d403      	bmi.n	80044ea <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f81a 	bl	8002524 <HAL_ADC_ConvCpltCallback>
}
 80044f0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044f2:	06d2      	lsls	r2, r2, #27
 80044f4:	d40a      	bmi.n	800450c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004500:	0790      	lsls	r0, r2, #30
 8004502:	d0e7      	beq.n	80044d4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe f80d 	bl	8002524 <HAL_ADC_ConvCpltCallback>
 800450a:	e7f1      	b.n	80044f0 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fe8f 	bl	8004230 <HAL_ADC_ErrorCallback>
}
 8004512:	bd10      	pop	{r4, pc}

08004514 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004514:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004516:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004518:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800451a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004520:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004528:	f7ff fe82 	bl	8004230 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800452c:	bd08      	pop	{r3, pc}
 800452e:	bf00      	nop

08004530 <HAL_ADC_ConfigChannel>:
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8004532:	2200      	movs	r2, #0
{
 8004534:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8004536:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004538:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 800453c:	2a01      	cmp	r2, #1
 800453e:	f000 813a 	beq.w	80047b6 <HAL_ADC_ConfigChannel+0x286>
 8004542:	4603      	mov	r3, r0
 8004544:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004546:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8004548:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800454c:	6894      	ldr	r4, [r2, #8]
 800454e:	0766      	lsls	r6, r4, #29
 8004550:	f100 8099 	bmi.w	8004686 <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004554:	680c      	ldr	r4, [r1, #0]
 8004556:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800455a:	2d00      	cmp	r5, #0
 800455c:	f040 809e 	bne.w	800469c <HAL_ADC_ConfigChannel+0x16c>
 8004560:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8004564:	fa00 f00c 	lsl.w	r0, r0, ip
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004568:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800456a:	261f      	movs	r6, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800456c:	69d5      	ldr	r5, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800456e:	09a7      	lsrs	r7, r4, #6
  MODIFY_REG(*preg,
 8004570:	4034      	ands	r4, r6
 8004572:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004574:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8004578:	f007 070c 	and.w	r7, r7, #12
  MODIFY_REG(*preg,
 800457c:	40a6      	lsls	r6, r4
 800457e:	61d0      	str	r0, [r2, #28]
 8004580:	fa0c f404 	lsl.w	r4, ip, r4
 8004584:	5978      	ldr	r0, [r7, r5]
 8004586:	ea20 0006 	bic.w	r0, r0, r6
 800458a:	4320      	orrs	r0, r4
 800458c:	5178      	str	r0, [r7, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800458e:	6890      	ldr	r0, [r2, #8]
 8004590:	0745      	lsls	r5, r0, #29
 8004592:	f100 8081 	bmi.w	8004698 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004596:	6895      	ldr	r5, [r2, #8]
 8004598:	f015 0508 	ands.w	r5, r5, #8
 800459c:	d157      	bne.n	800464e <HAL_ADC_ConfigChannel+0x11e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800459e:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045a0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80045a4:	2007      	movs	r0, #7
 80045a6:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045a8:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80045ac:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045b0:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80045b4:	fa00 fe04 	lsl.w	lr, r0, r4
 80045b8:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045bc:	4fc4      	ldr	r7, [pc, #784]	; (80048d0 <HAL_ADC_ConfigChannel+0x3a0>)
 80045be:	f85c 0006 	ldr.w	r0, [ip, r6]
 80045c2:	ea20 000e 	bic.w	r0, r0, lr
 80045c6:	4320      	orrs	r0, r4
 80045c8:	f84c 0006 	str.w	r0, [ip, r6]
 80045cc:	6838      	ldr	r0, [r7, #0]
 80045ce:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80045d2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80045d6:	f000 8098 	beq.w	800470a <HAL_ADC_ConfigChannel+0x1da>
 80045da:	68d0      	ldr	r0, [r2, #12]
 80045dc:	68d6      	ldr	r6, [r2, #12]
 80045de:	f010 0f10 	tst.w	r0, #16
 80045e2:	6948      	ldr	r0, [r1, #20]
 80045e4:	f040 8107 	bne.w	80047f6 <HAL_ADC_ConfigChannel+0x2c6>
 80045e8:	f3c6 0682 	ubfx	r6, r6, #2, #3
 80045ec:	0076      	lsls	r6, r6, #1
 80045ee:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045f2:	690f      	ldr	r7, [r1, #16]
 80045f4:	2f04      	cmp	r7, #4
 80045f6:	f000 80e1 	beq.w	80047bc <HAL_ADC_ConfigChannel+0x28c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045fa:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 80045fe:	6808      	ldr	r0, [r1, #0]
 8004600:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8004604:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004608:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800460c:	ea40 000c 	orr.w	r0, r0, ip
 8004610:	4330      	orrs	r0, r6
 8004612:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004616:	7e4f      	ldrb	r7, [r1, #25]
 8004618:	690e      	ldr	r6, [r1, #16]
 800461a:	2f01      	cmp	r7, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800461c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004620:	bf0c      	ite	eq
 8004622:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 8004626:	2700      	movne	r7, #0
 8004628:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800462c:	4338      	orrs	r0, r7
 800462e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004632:	7e0c      	ldrb	r4, [r1, #24]
 8004634:	6908      	ldr	r0, [r1, #16]
 8004636:	2c01      	cmp	r4, #1
 8004638:	d104      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x114>
 800463a:	f000 001f 	and.w	r0, r0, #31
 800463e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004642:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004644:	6910      	ldr	r0, [r2, #16]
 8004646:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 800464a:	4305      	orrs	r5, r0
 800464c:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800464e:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004650:	07c4      	lsls	r4, r0, #31
 8004652:	d416      	bmi.n	8004682 <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004654:	68ce      	ldr	r6, [r1, #12]
 8004656:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8004658:	f006 0718 	and.w	r7, r6, #24
 800465c:	4c9d      	ldr	r4, [pc, #628]	; (80048d4 <HAL_ADC_ConfigChannel+0x3a4>)
 800465e:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 8004662:	40fc      	lsrs	r4, r7
 8004664:	f3c0 0713 	ubfx	r7, r0, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004668:	f8df c28c 	ldr.w	ip, [pc, #652]	; 80048f8 <HAL_ADC_ConfigChannel+0x3c8>
 800466c:	4004      	ands	r4, r0
 800466e:	ea25 0507 	bic.w	r5, r5, r7
 8004672:	4566      	cmp	r6, ip
 8004674:	ea44 0405 	orr.w	r4, r4, r5
 8004678:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
 800467c:	d04d      	beq.n	800471a <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800467e:	2800      	cmp	r0, #0
 8004680:	db15      	blt.n	80046ae <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004682:	2000      	movs	r0, #0
 8004684:	e003      	b.n	800468e <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004688:	f042 0220 	orr.w	r2, r2, #32
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004694:	b003      	add	sp, #12
 8004696:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004698:	6890      	ldr	r0, [r2, #8]
 800469a:	e7d8      	b.n	800464e <HAL_ADC_ConfigChannel+0x11e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046a0:	b115      	cbz	r5, 80046a8 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80046a2:	fab5 f585 	clz	r5, r5
 80046a6:	40a8      	lsls	r0, r5
 80046a8:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80046ac:	e75c      	b.n	8004568 <HAL_ADC_ConfigChannel+0x38>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ae:	498a      	ldr	r1, [pc, #552]	; (80048d8 <HAL_ADC_ConfigChannel+0x3a8>)
 80046b0:	428a      	cmp	r2, r1
 80046b2:	f000 80c6 	beq.w	8004842 <HAL_ADC_ConfigChannel+0x312>
 80046b6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80046ba:	428a      	cmp	r2, r1
 80046bc:	f000 80c1 	beq.w	8004842 <HAL_ADC_ConfigChannel+0x312>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046c0:	4e86      	ldr	r6, [pc, #536]	; (80048dc <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046c2:	4d87      	ldr	r5, [pc, #540]	; (80048e0 <HAL_ADC_ConfigChannel+0x3b0>)
 80046c4:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046c6:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046c8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046cc:	43e4      	mvns	r4, r4
 80046ce:	f004 0401 	and.w	r4, r4, #1
 80046d2:	2c00      	cmp	r4, #0
 80046d4:	f000 80c3 	beq.w	800485e <HAL_ADC_ConfigChannel+0x32e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046d8:	4c82      	ldr	r4, [pc, #520]	; (80048e4 <HAL_ADC_ConfigChannel+0x3b4>)
 80046da:	42a0      	cmp	r0, r4
 80046dc:	f000 810e 	beq.w	80048fc <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046e0:	4c81      	ldr	r4, [pc, #516]	; (80048e8 <HAL_ADC_ConfigChannel+0x3b8>)
 80046e2:	42a0      	cmp	r0, r4
 80046e4:	f000 812d 	beq.w	8004942 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046e8:	4c80      	ldr	r4, [pc, #512]	; (80048ec <HAL_ADC_ConfigChannel+0x3bc>)
 80046ea:	42a0      	cmp	r0, r4
 80046ec:	d1c9      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 80046ee:	0249      	lsls	r1, r1, #9
 80046f0:	d4c7      	bmi.n	8004682 <HAL_ADC_ConfigChannel+0x152>
 80046f2:	497a      	ldr	r1, [pc, #488]	; (80048dc <HAL_ADC_ConfigChannel+0x3ac>)
 80046f4:	428a      	cmp	r2, r1
 80046f6:	d1c4      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046f8:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fa:	2000      	movs	r0, #0
 80046fc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004700:	4332      	orrs	r2, r6
 8004702:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004706:	60aa      	str	r2, [r5, #8]
}
 8004708:	e7c1      	b.n	800468e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800470a:	68d6      	ldr	r6, [r2, #12]
 800470c:	6948      	ldr	r0, [r1, #20]
 800470e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004712:	0076      	lsls	r6, r6, #1
 8004714:	fa00 f606 	lsl.w	r6, r0, r6
 8004718:	e76b      	b.n	80045f2 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800471a:	2f00      	cmp	r7, #0
 800471c:	d071      	beq.n	8004802 <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004722:	2c00      	cmp	r4, #0
 8004724:	f000 80af 	beq.w	8004886 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004728:	fab4 f484 	clz	r4, r4
 800472c:	3401      	adds	r4, #1
 800472e:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004732:	2c09      	cmp	r4, #9
 8004734:	f240 80a7 	bls.w	8004886 <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800473c:	2d00      	cmp	r5, #0
 800473e:	f000 8114 	beq.w	800496a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004742:	fab5 f585 	clz	r5, r5
 8004746:	3501      	adds	r5, #1
 8004748:	06ad      	lsls	r5, r5, #26
 800474a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004752:	2c00      	cmp	r4, #0
 8004754:	f000 8107 	beq.w	8004966 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8004758:	2601      	movs	r6, #1
 800475a:	fab4 f484 	clz	r4, r4
 800475e:	4434      	add	r4, r6
 8004760:	f004 041f 	and.w	r4, r4, #31
 8004764:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004768:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800476e:	2800      	cmp	r0, #0
 8004770:	f000 80f7 	beq.w	8004962 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 8004774:	fab0 f480 	clz	r4, r0
 8004778:	3401      	adds	r4, #1
 800477a:	f004 041f 	and.w	r4, r4, #31
 800477e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004782:	f1a4 001e 	sub.w	r0, r4, #30
 8004786:	0500      	lsls	r0, r0, #20
 8004788:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800478c:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 800478e:	f04f 0c07 	mov.w	ip, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004792:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004796:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004798:	0dc7      	lsrs	r7, r0, #23
  MODIFY_REG(*preg,
 800479a:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800479e:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 80047a2:	fa0c fc00 	lsl.w	ip, ip, r0
 80047a6:	4086      	lsls	r6, r0
 80047a8:	597c      	ldr	r4, [r7, r5]
 80047aa:	ea24 000c 	bic.w	r0, r4, ip
 80047ae:	4330      	orrs	r0, r6
 80047b0:	5178      	str	r0, [r7, r5]
 80047b2:	6808      	ldr	r0, [r1, #0]
}
 80047b4:	e763      	b.n	800467e <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 80047b6:	2002      	movs	r0, #2
}
 80047b8:	b003      	add	sp, #12
 80047ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047bc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80047be:	680d      	ldr	r5, [r1, #0]
 80047c0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80047c4:	06ac      	lsls	r4, r5, #26
 80047c6:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80047ca:	d030      	beq.n	800482e <HAL_ADC_ConfigChannel+0x2fe>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047cc:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80047ce:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80047d2:	4284      	cmp	r4, r0
 80047d4:	d026      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x2f4>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047d6:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80047d8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80047dc:	4284      	cmp	r4, r0
 80047de:	d02b      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x308>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047e0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80047e2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80047e6:	4284      	cmp	r4, r0
 80047e8:	f47f af31 	bne.w	800464e <HAL_ADC_ConfigChannel+0x11e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80047ec:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80047ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80047f2:	66d0      	str	r0, [r2, #108]	; 0x6c
 80047f4:	e72b      	b.n	800464e <HAL_ADC_ConfigChannel+0x11e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047f6:	0876      	lsrs	r6, r6, #1
 80047f8:	f006 0608 	and.w	r6, r6, #8
 80047fc:	fa00 f606 	lsl.w	r6, r0, r6
 8004800:	e6f7      	b.n	80045f2 <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004802:	0e80      	lsrs	r0, r0, #26
 8004804:	1c44      	adds	r4, r0, #1
 8004806:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800480a:	2e09      	cmp	r6, #9
 800480c:	d82d      	bhi.n	800486a <HAL_ADC_ConfigChannel+0x33a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800480e:	06a5      	lsls	r5, r4, #26
 8004810:	2401      	movs	r4, #1
 8004812:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004816:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800481a:	fa04 f606 	lsl.w	r6, r4, r6
 800481e:	0500      	lsls	r0, r0, #20
 8004820:	4335      	orrs	r5, r6
 8004822:	e7b3      	b.n	800478c <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004824:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004826:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800482a:	6650      	str	r0, [r2, #100]	; 0x64
 800482c:	e7d3      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800482e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004830:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004834:	6610      	str	r0, [r2, #96]	; 0x60
 8004836:	e7c9      	b.n	80047cc <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004838:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800483a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800483e:	6690      	str	r0, [r2, #104]	; 0x68
 8004840:	e7ce      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x2b0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004842:	492b      	ldr	r1, [pc, #172]	; (80048f0 <HAL_ADC_ConfigChannel+0x3c0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004844:	4e24      	ldr	r6, [pc, #144]	; (80048d8 <HAL_ADC_ConfigChannel+0x3a8>)
 8004846:	4c2b      	ldr	r4, [pc, #172]	; (80048f4 <HAL_ADC_ConfigChannel+0x3c4>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004848:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800484a:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800484c:	68b7      	ldr	r7, [r6, #8]
 800484e:	68a4      	ldr	r4, [r4, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004850:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004854:	433c      	orrs	r4, r7
 8004856:	43e4      	mvns	r4, r4
 8004858:	f004 0401 	and.w	r4, r4, #1
 800485c:	e739      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800485e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004860:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004862:	f042 0220 	orr.w	r2, r2, #32
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8004868:	e711      	b.n	800468e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800486a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800486e:	2701      	movs	r7, #1
 8004870:	06a5      	lsls	r5, r4, #26
 8004872:	381e      	subs	r0, #30
 8004874:	fa07 f606 	lsl.w	r6, r7, r6
 8004878:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800487c:	0500      	lsls	r0, r0, #20
 800487e:	4335      	orrs	r5, r6
 8004880:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004884:	e782      	b.n	800478c <HAL_ADC_ConfigChannel+0x25c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800488a:	2d00      	cmp	r5, #0
 800488c:	d075      	beq.n	800497a <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 800488e:	fab5 f585 	clz	r5, r5
 8004892:	3501      	adds	r5, #1
 8004894:	06ad      	lsls	r5, r5, #26
 8004896:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800489e:	2c00      	cmp	r4, #0
 80048a0:	d069      	beq.n	8004976 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80048a2:	2601      	movs	r6, #1
 80048a4:	fab4 f484 	clz	r4, r4
 80048a8:	4434      	add	r4, r6
 80048aa:	f004 041f 	and.w	r4, r4, #31
 80048ae:	fa06 f404 	lsl.w	r4, r6, r4
 80048b2:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d059      	beq.n	8004970 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 80048bc:	fab0 f480 	clz	r4, r0
 80048c0:	3401      	adds	r4, #1
 80048c2:	f004 041f 	and.w	r4, r4, #31
 80048c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80048ca:	0520      	lsls	r0, r4, #20
 80048cc:	e75e      	b.n	800478c <HAL_ADC_ConfigChannel+0x25c>
 80048ce:	bf00      	nop
 80048d0:	5c001000 	.word	0x5c001000
 80048d4:	000fffff 	.word	0x000fffff
 80048d8:	40022000 	.word	0x40022000
 80048dc:	58026000 	.word	0x58026000
 80048e0:	58026300 	.word	0x58026300
 80048e4:	cb840000 	.word	0xcb840000
 80048e8:	c7520000 	.word	0xc7520000
 80048ec:	cfb80000 	.word	0xcfb80000
 80048f0:	40022300 	.word	0x40022300
 80048f4:	40022100 	.word	0x40022100
 80048f8:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048fc:	0208      	lsls	r0, r1, #8
 80048fe:	f53f aec0 	bmi.w	8004682 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004902:	491f      	ldr	r1, [pc, #124]	; (8004980 <HAL_ADC_ConfigChannel+0x450>)
 8004904:	428a      	cmp	r2, r1
 8004906:	f47f aebc 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800490a:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <HAL_ADC_ConfigChannel+0x454>)
 800490c:	481e      	ldr	r0, [pc, #120]	; (8004988 <HAL_ADC_ConfigChannel+0x458>)
 800490e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004910:	68a9      	ldr	r1, [r5, #8]
 8004912:	0992      	lsrs	r2, r2, #6
 8004914:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004918:	fba0 0202 	umull	r0, r2, r0, r2
 800491c:	4331      	orrs	r1, r6
 800491e:	0992      	lsrs	r2, r2, #6
 8004920:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8004924:	3201      	adds	r2, #1
 8004926:	60a9      	str	r1, [r5, #8]
 8004928:	0052      	lsls	r2, r2, #1
 800492a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800492c:	9a01      	ldr	r2, [sp, #4]
 800492e:	2a00      	cmp	r2, #0
 8004930:	f43f aea7 	beq.w	8004682 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 8004934:	9a01      	ldr	r2, [sp, #4]
 8004936:	3a01      	subs	r2, #1
 8004938:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800493a:	9a01      	ldr	r2, [sp, #4]
 800493c:	2a00      	cmp	r2, #0
 800493e:	d1f9      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x404>
 8004940:	e69f      	b.n	8004682 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004942:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 8004946:	f47f ae9c 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800494a:	490d      	ldr	r1, [pc, #52]	; (8004980 <HAL_ADC_ConfigChannel+0x450>)
 800494c:	428a      	cmp	r2, r1
 800494e:	f47f ae98 	bne.w	8004682 <HAL_ADC_ConfigChannel+0x152>
 8004952:	68aa      	ldr	r2, [r5, #8]
 8004954:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004958:	4332      	orrs	r2, r6
 800495a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800495e:	60aa      	str	r2, [r5, #8]
}
 8004960:	e695      	b.n	800468e <HAL_ADC_ConfigChannel+0x15e>
 8004962:	480a      	ldr	r0, [pc, #40]	; (800498c <HAL_ADC_ConfigChannel+0x45c>)
 8004964:	e712      	b.n	800478c <HAL_ADC_ConfigChannel+0x25c>
 8004966:	2402      	movs	r4, #2
 8004968:	e6fe      	b.n	8004768 <HAL_ADC_ConfigChannel+0x238>
 800496a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800496e:	e6ee      	b.n	800474e <HAL_ADC_ConfigChannel+0x21e>
 8004970:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004974:	e70a      	b.n	800478c <HAL_ADC_ConfigChannel+0x25c>
 8004976:	2402      	movs	r4, #2
 8004978:	e79b      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x382>
 800497a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800497e:	e78c      	b.n	800489a <HAL_ADC_ConfigChannel+0x36a>
 8004980:	58026000 	.word	0x58026000
 8004984:	24000280 	.word	0x24000280
 8004988:	053e2d63 	.word	0x053e2d63
 800498c:	fe500000 	.word	0xfe500000

08004990 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8004990:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8004994:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004996:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8004998:	2a01      	cmp	r2, #1
 800499a:	f000 80e8 	beq.w	8004b6e <HAL_ADC_AnalogWDGConfig+0x1de>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800499e:	681a      	ldr	r2, [r3, #0]
{
 80049a0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80049a2:	2401      	movs	r4, #1
 80049a4:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049a8:	6894      	ldr	r4, [r2, #8]
 80049aa:	0765      	lsls	r5, r4, #29
 80049ac:	d42a      	bmi.n	8004a04 <HAL_ADC_AnalogWDGConfig+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049ae:	6894      	ldr	r4, [r2, #8]
 80049b0:	0724      	lsls	r4, r4, #28
 80049b2:	d428      	bmi.n	8004a06 <HAL_ADC_AnalogWDGConfig+0x76>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80049b4:	680c      	ldr	r4, [r1, #0]
 80049b6:	4dc5      	ldr	r5, [pc, #788]	; (8004ccc <HAL_ADC_AnalogWDGConfig+0x33c>)
 80049b8:	42ac      	cmp	r4, r5
 80049ba:	f000 8094 	beq.w	8004ae6 <HAL_ADC_AnalogWDGConfig+0x156>
      switch (AnalogWDGConfig->WatchdogMode)
 80049be:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 80049c2:	d030      	beq.n	8004a26 <HAL_ADC_AnalogWDGConfig+0x96>
 80049c4:	d829      	bhi.n	8004a1a <HAL_ADC_AnalogWDGConfig+0x8a>
 80049c6:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 80049ca:	d02c      	beq.n	8004a26 <HAL_ADC_AnalogWDGConfig+0x96>
 80049cc:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80049d0:	d029      	beq.n	8004a26 <HAL_ADC_AnalogWDGConfig+0x96>
 80049d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80049d6:	d026      	beq.n	8004a26 <HAL_ADC_AnalogWDGConfig+0x96>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80049d8:	f004 0c01 	and.w	ip, r4, #1
  MODIFY_REG(*preg,
 80049dc:	4ebc      	ldr	r6, [pc, #752]	; (8004cd0 <HAL_ADC_AnalogWDGConfig+0x340>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80049de:	f3c4 5501 	ubfx	r5, r4, #20, #2
 80049e2:	f102 000c 	add.w	r0, r2, #12
 80049e6:	ea4f 07cc 	mov.w	r7, ip, lsl #3
  MODIFY_REG(*preg,
 80049ea:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80049ec:	eb07 040c 	add.w	r4, r7, ip
 80049f0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  MODIFY_REG(*preg,
 80049f4:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80049f8:	ea25 0506 	bic.w	r5, r5, r6
 80049fc:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8004a00:	680c      	ldr	r4, [r1, #0]
}
 8004a02:	e023      	b.n	8004a4c <HAL_ADC_AnalogWDGConfig+0xbc>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a04:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0a:	f042 0220 	orr.w	r2, r2, #32
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004a16:	bcf0      	pop	{r4, r5, r6, r7}
 8004a18:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004a1a:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004a1e:	d002      	beq.n	8004a26 <HAL_ADC_AnalogWDGConfig+0x96>
 8004a20:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004a24:	d1d8      	bne.n	80049d8 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004a26:	48ab      	ldr	r0, [pc, #684]	; (8004cd4 <HAL_ADC_AnalogWDGConfig+0x344>)
 8004a28:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004a2a:	6888      	ldr	r0, [r1, #8]
 8004a2c:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004a30:	f000 80d7 	beq.w	8004be2 <HAL_ADC_AnalogWDGConfig+0x252>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	f040 80eb 	bne.w	8004c10 <HAL_ADC_AnalogWDGConfig+0x280>
 8004a3a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004a3e:	2501      	movs	r5, #1
 8004a40:	4085      	lsls	r5, r0
 8004a42:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 8004a46:	4328      	orrs	r0, r5
 8004a48:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004a4c:	48a2      	ldr	r0, [pc, #648]	; (8004cd8 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004a4e:	6800      	ldr	r0, [r0, #0]
 8004a50:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004a54:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004a58:	68d0      	ldr	r0, [r2, #12]
 8004a5a:	f000 80b0 	beq.w	8004bbe <HAL_ADC_AnalogWDGConfig+0x22e>
 8004a5e:	f010 0f10 	tst.w	r0, #16
 8004a62:	690d      	ldr	r5, [r1, #16]
 8004a64:	68d0      	ldr	r0, [r2, #12]
 8004a66:	f040 80b1 	bne.w	8004bcc <HAL_ADC_AnalogWDGConfig+0x23c>
 8004a6a:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004a6e:	0040      	lsls	r0, r0, #1
 8004a70:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004a74:	4d98      	ldr	r5, [pc, #608]	; (8004cd8 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004a76:	682d      	ldr	r5, [r5, #0]
 8004a78:	f005 4570 	and.w	r5, r5, #4026531840	; 0xf0000000
 8004a7c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8004a80:	f000 8096 	beq.w	8004bb0 <HAL_ADC_AnalogWDGConfig+0x220>
 8004a84:	68d5      	ldr	r5, [r2, #12]
 8004a86:	68d6      	ldr	r6, [r2, #12]
 8004a88:	f015 0f10 	tst.w	r5, #16
 8004a8c:	694d      	ldr	r5, [r1, #20]
 8004a8e:	f040 80a3 	bne.w	8004bd8 <HAL_ADC_AnalogWDGConfig+0x248>
 8004a92:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004a96:	0076      	lsls	r6, r6, #1
 8004a98:	40b5      	lsls	r5, r6
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004a9a:	4e8e      	ldr	r6, [pc, #568]	; (8004cd4 <HAL_ADC_AnalogWDGConfig+0x344>)
 8004a9c:	42b4      	cmp	r4, r6
 8004a9e:	d068      	beq.n	8004b72 <HAL_ADC_AnalogWDGConfig+0x1e2>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004aa0:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004aa4:	f44f 7600 	mov.w	r6, #512	; 0x200
 8004aa8:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004aac:	4325      	orrs	r5, r4
 8004aae:	f8c2 50b8 	str.w	r5, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004ab2:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8004ab6:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004aba:	4320      	orrs	r0, r4
 8004abc:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004ac0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004ac2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004ac6:	6558      	str	r0, [r3, #84]	; 0x54
 8004ac8:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004aca:	7b09      	ldrb	r1, [r1, #12]
 8004acc:	2901      	cmp	r1, #1
 8004ace:	f000 8099 	beq.w	8004c04 <HAL_ADC_AnalogWDGConfig+0x274>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004ad2:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004ada:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004ae2:	bcf0      	pop	{r4, r5, r6, r7}
 8004ae4:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 8004ae6:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 8004aea:	f000 8109 	beq.w	8004d00 <HAL_ADC_AnalogWDGConfig+0x370>
 8004aee:	d82b      	bhi.n	8004b48 <HAL_ADC_AnalogWDGConfig+0x1b8>
 8004af0:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8004af4:	f000 80f9 	beq.w	8004cea <HAL_ADC_AnalogWDGConfig+0x35a>
 8004af8:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004afc:	d119      	bne.n	8004b32 <HAL_ADC_AnalogWDGConfig+0x1a2>
  MODIFY_REG(*preg,
 8004afe:	68d4      	ldr	r4, [r2, #12]
 8004b00:	4876      	ldr	r0, [pc, #472]	; (8004cdc <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004b02:	4020      	ands	r0, r4
 8004b04:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8004b08:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004b0a:	4873      	ldr	r0, [pc, #460]	; (8004cd8 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004b0c:	6800      	ldr	r0, [r0, #0]
 8004b0e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004b12:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004b16:	68d0      	ldr	r0, [r2, #12]
 8004b18:	f000 8083 	beq.w	8004c22 <HAL_ADC_AnalogWDGConfig+0x292>
 8004b1c:	f010 0f10 	tst.w	r0, #16
 8004b20:	690d      	ldr	r5, [r1, #16]
 8004b22:	68d0      	ldr	r0, [r2, #12]
 8004b24:	f040 80b9 	bne.w	8004c9a <HAL_ADC_AnalogWDGConfig+0x30a>
 8004b28:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004b2c:	0040      	lsls	r0, r0, #1
 8004b2e:	4085      	lsls	r5, r0
 8004b30:	e07c      	b.n	8004c2c <HAL_ADC_AnalogWDGConfig+0x29c>
      switch (AnalogWDGConfig->WatchdogMode)
 8004b32:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004b36:	f040 80d3 	bne.w	8004ce0 <HAL_ADC_AnalogWDGConfig+0x350>
 8004b3a:	68d4      	ldr	r4, [r2, #12]
 8004b3c:	4867      	ldr	r0, [pc, #412]	; (8004cdc <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004b3e:	4020      	ands	r0, r4
 8004b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004b44:	60d0      	str	r0, [r2, #12]
}
 8004b46:	e7e0      	b.n	8004b0a <HAL_ADC_AnalogWDGConfig+0x17a>
 8004b48:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004b4c:	f000 80e3 	beq.w	8004d16 <HAL_ADC_AnalogWDGConfig+0x386>
 8004b50:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 8004b54:	f040 80c4 	bne.w	8004ce0 <HAL_ADC_AnalogWDGConfig+0x350>
  MODIFY_REG(*preg,
 8004b58:	68d5      	ldr	r5, [r2, #12]
 8004b5a:	6888      	ldr	r0, [r1, #8]
 8004b5c:	4c5f      	ldr	r4, [pc, #380]	; (8004cdc <HAL_ADC_AnalogWDGConfig+0x34c>)
 8004b5e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004b62:	402c      	ands	r4, r5
 8004b64:	4320      	orrs	r0, r4
 8004b66:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8004b6a:	60d0      	str	r0, [r2, #12]
}
 8004b6c:	e7cd      	b.n	8004b0a <HAL_ADC_AnalogWDGConfig+0x17a>
  __HAL_LOCK(hadc);
 8004b6e:	2002      	movs	r0, #2
}
 8004b70:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004b72:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004b76:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004b7a:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004b7e:	4325      	orrs	r5, r4
 8004b80:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004b84:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8004b88:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004b8c:	4320      	orrs	r0, r4
 8004b8e:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b92:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004b94:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8004b98:	6558      	str	r0, [r3, #84]	; 0x54
 8004b9a:	6016      	str	r6, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 8004b9c:	7b09      	ldrb	r1, [r1, #12]
 8004b9e:	2901      	cmp	r1, #1
 8004ba0:	f000 808d 	beq.w	8004cbe <HAL_ADC_AnalogWDGConfig+0x32e>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004ba4:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004bac:	6051      	str	r1, [r2, #4]
}
 8004bae:	e72f      	b.n	8004a10 <HAL_ADC_AnalogWDGConfig+0x80>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004bb0:	68d6      	ldr	r6, [r2, #12]
 8004bb2:	694d      	ldr	r5, [r1, #20]
 8004bb4:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8004bb8:	0076      	lsls	r6, r6, #1
 8004bba:	40b5      	lsls	r5, r6
 8004bbc:	e76d      	b.n	8004a9a <HAL_ADC_AnalogWDGConfig+0x10a>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004bbe:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004bc2:	690d      	ldr	r5, [r1, #16]
 8004bc4:	0040      	lsls	r0, r0, #1
 8004bc6:	fa05 f000 	lsl.w	r0, r5, r0
 8004bca:	e753      	b.n	8004a74 <HAL_ADC_AnalogWDGConfig+0xe4>
 8004bcc:	0840      	lsrs	r0, r0, #1
 8004bce:	f000 0008 	and.w	r0, r0, #8
 8004bd2:	fa05 f000 	lsl.w	r0, r5, r0
 8004bd6:	e74d      	b.n	8004a74 <HAL_ADC_AnalogWDGConfig+0xe4>
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004bd8:	0876      	lsrs	r6, r6, #1
 8004bda:	f006 0608 	and.w	r6, r6, #8
 8004bde:	40b5      	lsls	r5, r6
 8004be0:	e75b      	b.n	8004a9a <HAL_ADC_AnalogWDGConfig+0x10a>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	d064      	beq.n	8004cb0 <HAL_ADC_AnalogWDGConfig+0x320>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f000 809a 	beq.w	8004d24 <HAL_ADC_AnalogWDGConfig+0x394>
  return __builtin_clz(value);
 8004bf0:	fab0 f080 	clz	r0, r0
 8004bf4:	2501      	movs	r5, #1
 8004bf6:	4085      	lsls	r5, r0
 8004bf8:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8004bfc:	4328      	orrs	r0, r5
 8004bfe:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 8004c02:	e723      	b.n	8004a4c <HAL_ADC_AnalogWDGConfig+0xbc>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c04:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c06:	2000      	movs	r0, #0
 8004c08:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004c0c:	6051      	str	r1, [r2, #4]
}
 8004c0e:	e6ff      	b.n	8004a10 <HAL_ADC_AnalogWDGConfig+0x80>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d050      	beq.n	8004cba <HAL_ADC_AnalogWDGConfig+0x32a>
  return __builtin_clz(value);
 8004c18:	fab0 f080 	clz	r0, r0
 8004c1c:	2501      	movs	r5, #1
 8004c1e:	4085      	lsls	r5, r0
 8004c20:	e70f      	b.n	8004a42 <HAL_ADC_AnalogWDGConfig+0xb2>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c22:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004c26:	690d      	ldr	r5, [r1, #16]
 8004c28:	0040      	lsls	r0, r0, #1
 8004c2a:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004c2c:	482a      	ldr	r0, [pc, #168]	; (8004cd8 <HAL_ADC_AnalogWDGConfig+0x348>)
 8004c2e:	6800      	ldr	r0, [r0, #0]
 8004c30:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8004c34:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8004c38:	68d0      	ldr	r0, [r2, #12]
 8004c3a:	d00a      	beq.n	8004c52 <HAL_ADC_AnalogWDGConfig+0x2c2>
 8004c3c:	f010 0f10 	tst.w	r0, #16
 8004c40:	694c      	ldr	r4, [r1, #20]
 8004c42:	68d0      	ldr	r0, [r2, #12]
 8004c44:	d12e      	bne.n	8004ca4 <HAL_ADC_AnalogWDGConfig+0x314>
 8004c46:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004c4a:	0040      	lsls	r0, r0, #1
 8004c4c:	fa04 f000 	lsl.w	r0, r4, r0
 8004c50:	e005      	b.n	8004c5e <HAL_ADC_AnalogWDGConfig+0x2ce>
 8004c52:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8004c56:	694c      	ldr	r4, [r1, #20]
 8004c58:	0040      	lsls	r0, r0, #1
 8004c5a:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8004c5e:	6a14      	ldr	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004c60:	2680      	movs	r6, #128	; 0x80
 8004c62:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8004c66:	4304      	orrs	r4, r0
 8004c68:	6214      	str	r4, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8004c6a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004c6c:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 8004c70:	4328      	orrs	r0, r5
 8004c72:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004c76:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8004c7a:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	6016      	str	r6, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 8004c80:	7b09      	ldrb	r1, [r1, #12]
 8004c82:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c84:	6851      	ldr	r1, [r2, #4]
 8004c86:	bf0c      	ite	eq
 8004c88:	4331      	orreq	r1, r6
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c8a:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 8004c8e:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004c96:	bcf0      	pop	{r4, r5, r6, r7}
 8004c98:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8004c9a:	0840      	lsrs	r0, r0, #1
 8004c9c:	f000 0008 	and.w	r0, r0, #8
 8004ca0:	4085      	lsls	r5, r0
 8004ca2:	e7c3      	b.n	8004c2c <HAL_ADC_AnalogWDGConfig+0x29c>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8004ca4:	0840      	lsrs	r0, r0, #1
 8004ca6:	f000 0008 	and.w	r0, r0, #8
 8004caa:	fa04 f000 	lsl.w	r0, r4, r0
 8004cae:	e7d6      	b.n	8004c5e <HAL_ADC_AnalogWDGConfig+0x2ce>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8004cb0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004cb4:	2501      	movs	r5, #1
 8004cb6:	4085      	lsls	r5, r0
 8004cb8:	e79e      	b.n	8004bf8 <HAL_ADC_AnalogWDGConfig+0x268>
 8004cba:	2501      	movs	r5, #1
 8004cbc:	e6c1      	b.n	8004a42 <HAL_ADC_AnalogWDGConfig+0xb2>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004cbe:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004cc6:	6051      	str	r1, [r2, #4]
}
 8004cc8:	e6a2      	b.n	8004a10 <HAL_ADC_AnalogWDGConfig+0x80>
 8004cca:	bf00      	nop
 8004ccc:	7dc00000 	.word	0x7dc00000
 8004cd0:	7dcfffff 	.word	0x7dcfffff
 8004cd4:	001fffff 	.word	0x001fffff
 8004cd8:	5c001000 	.word	0x5c001000
 8004cdc:	823fffff 	.word	0x823fffff
  MODIFY_REG(*preg,
 8004ce0:	68d4      	ldr	r4, [r2, #12]
 8004ce2:	4811      	ldr	r0, [pc, #68]	; (8004d28 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004ce4:	4020      	ands	r0, r4
 8004ce6:	60d0      	str	r0, [r2, #12]
}
 8004ce8:	e70f      	b.n	8004b0a <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004cea:	68d5      	ldr	r5, [r2, #12]
 8004cec:	6888      	ldr	r0, [r1, #8]
 8004cee:	4c0e      	ldr	r4, [pc, #56]	; (8004d28 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004cf0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004cf4:	402c      	ands	r4, r5
 8004cf6:	4320      	orrs	r0, r4
 8004cf8:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8004cfc:	60d0      	str	r0, [r2, #12]
}
 8004cfe:	e704      	b.n	8004b0a <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004d00:	68d5      	ldr	r5, [r2, #12]
 8004d02:	6888      	ldr	r0, [r1, #8]
 8004d04:	4c08      	ldr	r4, [pc, #32]	; (8004d28 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004d06:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004d0a:	402c      	ands	r4, r5
 8004d0c:	4320      	orrs	r0, r4
 8004d0e:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8004d12:	60d0      	str	r0, [r2, #12]
}
 8004d14:	e6f9      	b.n	8004b0a <HAL_ADC_AnalogWDGConfig+0x17a>
  MODIFY_REG(*preg,
 8004d16:	68d4      	ldr	r4, [r2, #12]
 8004d18:	4803      	ldr	r0, [pc, #12]	; (8004d28 <HAL_ADC_AnalogWDGConfig+0x398>)
 8004d1a:	4020      	ands	r0, r4
 8004d1c:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8004d20:	60d0      	str	r0, [r2, #12]
}
 8004d22:	e6f2      	b.n	8004b0a <HAL_ADC_AnalogWDGConfig+0x17a>
 8004d24:	2501      	movs	r5, #1
 8004d26:	e767      	b.n	8004bf8 <HAL_ADC_AnalogWDGConfig+0x268>
 8004d28:	823fffff 	.word	0x823fffff

08004d2c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d2c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	07d1      	lsls	r1, r2, #31
 8004d32:	d501      	bpl.n	8004d38 <ADC_Enable+0xc>
  return HAL_OK;
 8004d34:	2000      	movs	r0, #0
}
 8004d36:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d38:	6899      	ldr	r1, [r3, #8]
 8004d3a:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <ADC_Enable+0x94>)
 8004d3c:	4211      	tst	r1, r2
{
 8004d3e:	b570      	push	{r4, r5, r6, lr}
 8004d40:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d42:	d008      	beq.n	8004d56 <ADC_Enable+0x2a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d44:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 8004d46:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d48:	f043 0310 	orr.w	r3, r3, #16
 8004d4c:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d50:	4303      	orrs	r3, r0
 8004d52:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8004d56:	6899      	ldr	r1, [r3, #8]
 8004d58:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <ADC_Enable+0x98>)
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004d62:	f7ff fa13 	bl	800418c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8004d6a:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d01f      	beq.n	8004db0 <ADC_Enable+0x84>
 8004d70:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01b      	beq.n	8004db0 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004d78:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <ADC_Enable+0xa0>)
 8004d7a:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	07d6      	lsls	r6, r2, #31
 8004d80:	d414      	bmi.n	8004dac <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 8004d82:	4e10      	ldr	r6, [pc, #64]	; (8004dc4 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d84:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d86:	07d0      	lsls	r0, r2, #31
 8004d88:	d404      	bmi.n	8004d94 <ADC_Enable+0x68>
  MODIFY_REG(ADCx->CR,
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	4032      	ands	r2, r6
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d94:	f7ff f9fa 	bl	800418c <HAL_GetTick>
 8004d98:	1b43      	subs	r3, r0, r5
 8004d9a:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d9c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d9e:	d902      	bls.n	8004da6 <ADC_Enable+0x7a>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	07d1      	lsls	r1, r2, #31
 8004da4:	d5ce      	bpl.n	8004d44 <ADC_Enable+0x18>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	07d2      	lsls	r2, r2, #31
 8004daa:	d5eb      	bpl.n	8004d84 <ADC_Enable+0x58>
  return HAL_OK;
 8004dac:	2000      	movs	r0, #0
}
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004db0:	4a07      	ldr	r2, [pc, #28]	; (8004dd0 <ADC_Enable+0xa4>)
 8004db2:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004db4:	06d2      	lsls	r2, r2, #27
 8004db6:	d0e1      	beq.n	8004d7c <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004db8:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d1de      	bne.n	8004d7c <ADC_Enable+0x50>
 8004dbe:	e7f5      	b.n	8004dac <ADC_Enable+0x80>
 8004dc0:	8000003f 	.word	0x8000003f
 8004dc4:	7fffffc0 	.word	0x7fffffc0
 8004dc8:	40022000 	.word	0x40022000
 8004dcc:	58026300 	.word	0x58026300
 8004dd0:	40022300 	.word	0x40022300
 8004dd4:	40022100 	.word	0x40022100

08004dd8 <ADC_Disable>:
{
 8004dd8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004dda:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	0795      	lsls	r5, r2, #30
 8004de0:	d502      	bpl.n	8004de8 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004de2:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8004de4:	2000      	movs	r0, #0
}
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004dea:	07d4      	lsls	r4, r2, #31
 8004dec:	d529      	bpl.n	8004e42 <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	4604      	mov	r4, r0
 8004df2:	f002 020d 	and.w	r2, r2, #13
 8004df6:	2a01      	cmp	r2, #1
 8004df8:	d008      	beq.n	8004e0c <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8004dfc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfe:	f043 0310 	orr.w	r3, r3, #16
 8004e02:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e06:	4303      	orrs	r3, r0
 8004e08:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8004e0c:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e0e:	2103      	movs	r1, #3
 8004e10:	4a0d      	ldr	r2, [pc, #52]	; (8004e48 <ADC_Disable+0x70>)
 8004e12:	4002      	ands	r2, r0
 8004e14:	f042 0202 	orr.w	r2, r2, #2
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004e1c:	f7ff f9b6 	bl	800418c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e20:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004e22:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	07d9      	lsls	r1, r3, #31
 8004e28:	d50b      	bpl.n	8004e42 <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e2a:	f7ff f9af 	bl	800418c <HAL_GetTick>
 8004e2e:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e30:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e32:	2802      	cmp	r0, #2
 8004e34:	d902      	bls.n	8004e3c <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	07d2      	lsls	r2, r2, #31
 8004e3a:	d4de      	bmi.n	8004dfa <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	07db      	lsls	r3, r3, #31
 8004e40:	d4f3      	bmi.n	8004e2a <ADC_Disable+0x52>
  return HAL_OK;
 8004e42:	2000      	movs	r0, #0
}
 8004e44:	bd38      	pop	{r3, r4, r5, pc}
 8004e46:	bf00      	nop
 8004e48:	7fffffc0 	.word	0x7fffffc0

08004e4c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e4e:	4a5a      	ldr	r2, [pc, #360]	; (8004fb8 <ADC_ConfigureBoostMode+0x16c>)
{
 8004e50:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e52:	6803      	ldr	r3, [r0, #0]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d029      	beq.n	8004eac <ADC_ConfigureBoostMode+0x60>
 8004e58:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d025      	beq.n	8004eac <ADC_ConfigureBoostMode+0x60>
 8004e60:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <ADC_ConfigureBoostMode+0x170>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b333      	cbz	r3, 8004ebe <ADC_ConfigureBoostMode+0x72>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e70:	f003 fd28 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8004e74:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8004e76:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8004e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e7c:	f000 808b 	beq.w	8004f96 <ADC_ConfigureBoostMode+0x14a>
 8004e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e84:	d06f      	beq.n	8004f66 <ADC_ConfigureBoostMode+0x11a>
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	f000 8084 	beq.w	8004f96 <ADC_ConfigureBoostMode+0x14a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004e8e:	f7ff f995 	bl	80041bc <HAL_GetREVID>
 8004e92:	f241 0303 	movw	r3, #4099	; 0x1003
 8004e96:	4298      	cmp	r0, r3
 8004e98:	d84e      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0xec>
  {
    if (freq > 20000000UL)
 8004e9a:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <ADC_ConfigureBoostMode+0x174>)
 8004e9c:	429d      	cmp	r5, r3
 8004e9e:	d92d      	bls.n	8004efc <ADC_ConfigureBoostMode+0xb0>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ea0:	6822      	ldr	r2, [r4, #0]
 8004ea2:	6893      	ldr	r3, [r2, #8]
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea8:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004eac:	4b45      	ldr	r3, [pc, #276]	; (8004fc4 <ADC_ConfigureBoostMode+0x178>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1d8      	bne.n	8004e70 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ebe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ec2:	f004 fe33 	bl	8009b2c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8004ec6:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ec8:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8004eca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ece:	d06c      	beq.n	8004faa <ADC_ConfigureBoostMode+0x15e>
 8004ed0:	d808      	bhi.n	8004ee4 <ADC_ConfigureBoostMode+0x98>
 8004ed2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ed6:	d050      	beq.n	8004f7a <ADC_ConfigureBoostMode+0x12e>
 8004ed8:	d916      	bls.n	8004f08 <ADC_ConfigureBoostMode+0xbc>
 8004eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ede:	d1d6      	bne.n	8004e8e <ADC_ConfigureBoostMode+0x42>
        freq /= 32UL;
 8004ee0:	0945      	lsrs	r5, r0, #5
        break;
 8004ee2:	e7d4      	b.n	8004e8e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8004ee4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ee8:	d045      	beq.n	8004f76 <ADC_ConfigureBoostMode+0x12a>
 8004eea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004eee:	d1ce      	bne.n	8004e8e <ADC_ConfigureBoostMode+0x42>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004ef0:	f7ff f964 	bl	80041bc <HAL_GetREVID>
 8004ef4:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ef8:	4298      	cmp	r0, r3
 8004efa:	d840      	bhi.n	8004f7e <ADC_ConfigureBoostMode+0x132>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6893      	ldr	r3, [r2, #8]
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	6093      	str	r3, [r2, #8]
}
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8004f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0c:	d006      	beq.n	8004f1c <ADC_ConfigureBoostMode+0xd0>
 8004f0e:	d90a      	bls.n	8004f26 <ADC_ConfigureBoostMode+0xda>
 8004f10:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f14:	d002      	beq.n	8004f1c <ADC_ConfigureBoostMode+0xd0>
 8004f16:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f1a:	d1b8      	bne.n	8004e8e <ADC_ConfigureBoostMode+0x42>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f1c:	0c9b      	lsrs	r3, r3, #18
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8004f24:	e7b3      	b.n	8004e8e <ADC_ConfigureBoostMode+0x42>
    switch (hadc->Init.ClockPrescaler)
 8004f26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f2a:	d0f7      	beq.n	8004f1c <ADC_ConfigureBoostMode+0xd0>
 8004f2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f30:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8004f34:	d0f2      	beq.n	8004f1c <ADC_ConfigureBoostMode+0xd0>
 8004f36:	e7aa      	b.n	8004e8e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <ADC_ConfigureBoostMode+0x17c>)
 8004f3a:	429d      	cmp	r5, r3
 8004f3c:	d805      	bhi.n	8004f4a <ADC_ConfigureBoostMode+0xfe>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	6893      	ldr	r3, [r2, #8]
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	6093      	str	r3, [r2, #8]
}
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8004f4a:	4b20      	ldr	r3, [pc, #128]	; (8004fcc <ADC_ConfigureBoostMode+0x180>)
 8004f4c:	429d      	cmp	r5, r3
 8004f4e:	d91a      	bls.n	8004f86 <ADC_ConfigureBoostMode+0x13a>
    else if (freq <= 25000000UL)
 8004f50:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <ADC_ConfigureBoostMode+0x184>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f52:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8004f54:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f56:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8004f58:	d829      	bhi.n	8004fae <ADC_ConfigureBoostMode+0x162>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f62:	6093      	str	r3, [r2, #8]
}
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8004f66:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f68:	f7ff f928 	bl	80041bc <HAL_GetREVID>
 8004f6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f70:	4298      	cmp	r0, r3
 8004f72:	d8e1      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0xec>
 8004f74:	e791      	b.n	8004e9a <ADC_ConfigureBoostMode+0x4e>
        freq /= 128UL;
 8004f76:	09c5      	lsrs	r5, r0, #7
        break;
 8004f78:	e789      	b.n	8004e8e <ADC_ConfigureBoostMode+0x42>
        freq /= 16UL;
 8004f7a:	0905      	lsrs	r5, r0, #4
        break;
 8004f7c:	e787      	b.n	8004e8e <ADC_ConfigureBoostMode+0x42>
    if (freq <= 6250000UL)
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <ADC_ConfigureBoostMode+0x17c>)
 8004f80:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8004f84:	d2db      	bcs.n	8004f3e <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	6893      	ldr	r3, [r2, #8]
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	6093      	str	r3, [r2, #8]
}
 8004f94:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f9c:	f7ff f90e 	bl	80041bc <HAL_GetREVID>
 8004fa0:	f241 0303 	movw	r3, #4099	; 0x1003
 8004fa4:	4298      	cmp	r0, r3
 8004fa6:	d8c7      	bhi.n	8004f38 <ADC_ConfigureBoostMode+0xec>
 8004fa8:	e777      	b.n	8004e9a <ADC_ConfigureBoostMode+0x4e>
        freq /= 64UL;
 8004faa:	0985      	lsrs	r5, r0, #6
        break;
 8004fac:	e76f      	b.n	8004e8e <ADC_ConfigureBoostMode+0x42>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004fae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004fb2:	6093      	str	r3, [r2, #8]
}
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40022000 	.word	0x40022000
 8004fbc:	58026300 	.word	0x58026300
 8004fc0:	01312d00 	.word	0x01312d00
 8004fc4:	40022300 	.word	0x40022300
 8004fc8:	00bebc21 	.word	0x00bebc21
 8004fcc:	017d7841 	.word	0x017d7841
 8004fd0:	02faf081 	.word	0x02faf081

08004fd4 <HAL_ADC_Init>:
{
 8004fd4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8004fd6:	2300      	movs	r3, #0
{
 8004fd8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8004fda:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f000 80d0 	beq.w	8005182 <HAL_ADC_Init+0x1ae>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fe2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	2d00      	cmp	r5, #0
 8004fe8:	f000 80ba 	beq.w	8005160 <HAL_ADC_Init+0x18c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004fec:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004fee:	6893      	ldr	r3, [r2, #8]
 8004ff0:	009d      	lsls	r5, r3, #2
 8004ff2:	d503      	bpl.n	8004ffc <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ff4:	6891      	ldr	r1, [r2, #8]
 8004ff6:	4b71      	ldr	r3, [pc, #452]	; (80051bc <HAL_ADC_Init+0x1e8>)
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004ffc:	6893      	ldr	r3, [r2, #8]
 8004ffe:	00d8      	lsls	r0, r3, #3
 8005000:	d416      	bmi.n	8005030 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005002:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <HAL_ADC_Init+0x1ec>)
 8005004:	4d6f      	ldr	r5, [pc, #444]	; (80051c4 <HAL_ADC_Init+0x1f0>)
 8005006:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005008:	6890      	ldr	r0, [r2, #8]
 800500a:	099b      	lsrs	r3, r3, #6
 800500c:	496e      	ldr	r1, [pc, #440]	; (80051c8 <HAL_ADC_Init+0x1f4>)
 800500e:	fba5 5303 	umull	r5, r3, r5, r3
 8005012:	4001      	ands	r1, r0
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800501a:	3301      	adds	r3, #1
 800501c:	6091      	str	r1, [r2, #8]
 800501e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005020:	9b01      	ldr	r3, [sp, #4]
 8005022:	b12b      	cbz	r3, 8005030 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	3b01      	subs	r3, #1
 8005028:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800502a:	9b01      	ldr	r3, [sp, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f9      	bne.n	8005024 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005030:	6893      	ldr	r3, [r2, #8]
 8005032:	00d9      	lsls	r1, r3, #3
 8005034:	d424      	bmi.n	8005080 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005036:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8005038:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800503a:	f043 0310 	orr.w	r3, r3, #16
 800503e:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005042:	432b      	orrs	r3, r5
 8005044:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005046:	6893      	ldr	r3, [r2, #8]
 8005048:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800504c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800504e:	d11d      	bne.n	800508c <HAL_ADC_Init+0xb8>
 8005050:	06db      	lsls	r3, r3, #27
 8005052:	d41b      	bmi.n	800508c <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8005054:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005056:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800505a:	f043 0302 	orr.w	r3, r3, #2
 800505e:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005060:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005062:	07de      	lsls	r6, r3, #31
 8005064:	d428      	bmi.n	80050b8 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005066:	4b59      	ldr	r3, [pc, #356]	; (80051cc <HAL_ADC_Init+0x1f8>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d017      	beq.n	800509c <HAL_ADC_Init+0xc8>
 800506c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005070:	429a      	cmp	r2, r3
 8005072:	d013      	beq.n	800509c <HAL_ADC_Init+0xc8>
 8005074:	4b56      	ldr	r3, [pc, #344]	; (80051d0 <HAL_ADC_Init+0x1fc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	07d9      	lsls	r1, r3, #31
 800507a:	d41d      	bmi.n	80050b8 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800507c:	4a55      	ldr	r2, [pc, #340]	; (80051d4 <HAL_ADC_Init+0x200>)
 800507e:	e015      	b.n	80050ac <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005080:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005082:	2500      	movs	r5, #0
 8005084:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005088:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800508a:	d0e1      	beq.n	8005050 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800508c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800508e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005090:	f043 0310 	orr.w	r3, r3, #16
}
 8005094:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005096:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005098:	b002      	add	sp, #8
 800509a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800509c:	4a4b      	ldr	r2, [pc, #300]	; (80051cc <HAL_ADC_Init+0x1f8>)
 800509e:	4b4e      	ldr	r3, [pc, #312]	; (80051d8 <HAL_ADC_Init+0x204>)
 80050a0:	6892      	ldr	r2, [r2, #8]
 80050a2:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	07d8      	lsls	r0, r3, #31
 80050a8:	d406      	bmi.n	80050b8 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80050aa:	4a4c      	ldr	r2, [pc, #304]	; (80051dc <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80050ac:	6893      	ldr	r3, [r2, #8]
 80050ae:	6861      	ldr	r1, [r4, #4]
 80050b0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80050b8:	f7ff f880 	bl	80041bc <HAL_GetREVID>
 80050bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80050c0:	68a1      	ldr	r1, [r4, #8]
 80050c2:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80050c4:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80050c6:	d851      	bhi.n	800516c <HAL_ADC_Init+0x198>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80050c8:	7d66      	ldrb	r6, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80050ca:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80050cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80050ce:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 80050d2:	4302      	orrs	r2, r0
 80050d4:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d103      	bne.n	80050e2 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050da:	6a23      	ldr	r3, [r4, #32]
 80050dc:	3b01      	subs	r3, #1
 80050de:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050e4:	b123      	cbz	r3, 80050f0 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050e6:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80050ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80050ec:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050ee:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	493b      	ldr	r1, [pc, #236]	; (80051e0 <HAL_ADC_Init+0x20c>)
 80050f4:	68d8      	ldr	r0, [r3, #12]
 80050f6:	4001      	ands	r1, r0
 80050f8:	430a      	orrs	r2, r1
 80050fa:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005102:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005104:	d11c      	bne.n	8005140 <HAL_ADC_Init+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005106:	0712      	lsls	r2, r2, #28
 8005108:	d41a      	bmi.n	8005140 <HAL_ADC_Init+0x16c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800510a:	68d9      	ldr	r1, [r3, #12]
 800510c:	4a35      	ldr	r2, [pc, #212]	; (80051e4 <HAL_ADC_Init+0x210>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800510e:	7d20      	ldrb	r0, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005110:	400a      	ands	r2, r1
 8005112:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005114:	ea42 3280 	orr.w	r2, r2, r0, lsl #14
 8005118:	430a      	orrs	r2, r1
 800511a:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800511c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8005120:	2a01      	cmp	r2, #1
 8005122:	d03a      	beq.n	800519a <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800512c:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800512e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005132:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005136:	430a      	orrs	r2, r1
 8005138:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800513a:	f7ff fe87 	bl	8004e4c <ADC_ConfigureBoostMode>
 800513e:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005140:	68e2      	ldr	r2, [r4, #12]
 8005142:	2a01      	cmp	r2, #1
 8005144:	d021      	beq.n	800518a <HAL_ADC_Init+0x1b6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005148:	f022 020f 	bic.w	r2, r2, #15
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800514e:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8005150:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800515c:	b002      	add	sp, #8
 800515e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8005160:	f7fe fc3e 	bl	80039e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005164:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8005166:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800516a:	e73f      	b.n	8004fec <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800516c:	2910      	cmp	r1, #16
 800516e:	d1ab      	bne.n	80050c8 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005170:	7d60      	ldrb	r0, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005172:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005174:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005176:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 800517a:	430a      	orrs	r2, r1
 800517c:	f042 021c 	orr.w	r2, r2, #28
 8005180:	e7a9      	b.n	80050d6 <HAL_ADC_Init+0x102>
    return HAL_ERROR;
 8005182:	2501      	movs	r5, #1
}
 8005184:	4628      	mov	r0, r5
 8005186:	b002      	add	sp, #8
 8005188:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800518a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800518c:	69a2      	ldr	r2, [r4, #24]
 800518e:	f021 010f 	bic.w	r1, r1, #15
 8005192:	3a01      	subs	r2, #1
 8005194:	430a      	orrs	r2, r1
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
 8005198:	e7d9      	b.n	800514e <HAL_ADC_Init+0x17a>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800519a:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800519e:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80051a0:	3901      	subs	r1, #1
 80051a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80051a4:	4332      	orrs	r2, r6
 80051a6:	691e      	ldr	r6, [r3, #16]
 80051a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80051ac:	490e      	ldr	r1, [pc, #56]	; (80051e8 <HAL_ADC_Init+0x214>)
 80051ae:	4302      	orrs	r2, r0
 80051b0:	4031      	ands	r1, r6
 80051b2:	430a      	orrs	r2, r1
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e7b7      	b.n	800512c <HAL_ADC_Init+0x158>
 80051bc:	5fffffc0 	.word	0x5fffffc0
 80051c0:	24000280 	.word	0x24000280
 80051c4:	053e2d63 	.word	0x053e2d63
 80051c8:	6fffffc0 	.word	0x6fffffc0
 80051cc:	40022000 	.word	0x40022000
 80051d0:	58026000 	.word	0x58026000
 80051d4:	58026300 	.word	0x58026300
 80051d8:	40022100 	.word	0x40022100
 80051dc:	40022300 	.word	0x40022300
 80051e0:	fff0c003 	.word	0xfff0c003
 80051e4:	ffffbffc 	.word	0xffffbffc
 80051e8:	fc00f81e 	.word	0xfc00f81e

080051ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80051ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ee:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051f0:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
{
 80051f4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80051f6:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 80051f8:	2901      	cmp	r1, #1
  __IO uint32_t wait_loop_index = 0UL;
 80051fa:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 80051fc:	d03e      	beq.n	800527c <HAL_ADCEx_Calibration_Start+0x90>
 80051fe:	2301      	movs	r3, #1
 8005200:	4604      	mov	r4, r0
 8005202:	4617      	mov	r7, r2
 8005204:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005208:	f7ff fde6 	bl	8004dd8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800520c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 800520e:	b9e0      	cbnz	r0, 800524a <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 8005210:	4e1c      	ldr	r6, [pc, #112]	; (8005284 <HAL_ADCEx_Calibration_Start+0x98>)
  MODIFY_REG(ADCx->CR,
 8005212:	f007 4280 	and.w	r2, r7, #1073741824	; 0x40000000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005216:	6821      	ldr	r1, [r4, #0]
 8005218:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
    ADC_STATE_CLR_SET(hadc->State,
 800521c:	401e      	ands	r6, r3
 800521e:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <HAL_ADCEx_Calibration_Start+0x9c>)

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005220:	4f1a      	ldr	r7, [pc, #104]	; (800528c <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8005222:	f046 0602 	orr.w	r6, r6, #2
 8005226:	6566      	str	r6, [r4, #84]	; 0x54
 8005228:	688e      	ldr	r6, [r1, #8]
 800522a:	4033      	ands	r3, r6
 800522c:	4313      	orrs	r3, r2
 800522e:	432b      	orrs	r3, r5
 8005230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005234:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005236:	688b      	ldr	r3, [r1, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	db0e      	blt.n	800525a <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800523c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6563      	str	r3, [r4, #84]	; 0x54
 8005248:	e002      	b.n	8005250 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800524a:	f043 0310 	orr.w	r3, r3, #16
 800524e:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005250:	2300      	movs	r3, #0
 8005252:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8005256:	b003      	add	sp, #12
 8005258:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	3301      	adds	r3, #1
 800525e:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005260:	9b01      	ldr	r3, [sp, #4]
 8005262:	42bb      	cmp	r3, r7
 8005264:	d3e7      	bcc.n	8005236 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8005266:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005268:	2200      	movs	r2, #0
        return HAL_ERROR;
 800526a:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800526c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8005270:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8005274:	f043 0310 	orr.w	r3, r3, #16
 8005278:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800527a:	e7ec      	b.n	8005256 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 800527c:	2002      	movs	r0, #2
}
 800527e:	b003      	add	sp, #12
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005282:	bf00      	nop
 8005284:	ffffeefd 	.word	0xffffeefd
 8005288:	3ffeffc0 	.word	0x3ffeffc0
 800528c:	25c3f800 	.word	0x25c3f800

08005290 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005294:	f8d0 9000 	ldr.w	r9, [r0]
{
 8005298:	b09b      	sub	sp, #108	; 0x6c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800529a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800529e:	f015 0504 	ands.w	r5, r5, #4
 80052a2:	d116      	bne.n	80052d2 <HAL_ADCEx_MultiModeStart_DMA+0x42>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80052a4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80052a8:	4604      	mov	r4, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d011      	beq.n	80052d2 <HAL_ADCEx_MultiModeStart_DMA+0x42>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052ae:	4b2e      	ldr	r3, [pc, #184]	; (8005368 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
    __HAL_LOCK(hadc);
 80052b0:	2601      	movs	r6, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80052b2:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052b4:	4599      	cmp	r9, r3
    __HAL_LOCK(hadc);
 80052b6:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80052ba:	9517      	str	r5, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052bc:	d00d      	beq.n	80052da <HAL_ADCEx_MultiModeStart_DMA+0x4a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052be:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80052c0:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 80052c2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80052cc:	b01b      	add	sp, #108	; 0x6c
 80052ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80052d2:	2002      	movs	r0, #2
}
 80052d4:	b01b      	add	sp, #108	; 0x6c
 80052d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052da:	4d24      	ldr	r5, [pc, #144]	; (800536c <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
 80052dc:	460f      	mov	r7, r1
 80052de:	4690      	mov	r8, r2
 80052e0:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80052e2:	f7ff fd23 	bl	8004d2c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80052e6:	b128      	cbz	r0, 80052f4 <HAL_ADCEx_MultiModeStart_DMA+0x64>
      __HAL_UNLOCK(hadc);
 80052e8:	2300      	movs	r3, #0
 80052ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80052ee:	b01b      	add	sp, #108	; 0x6c
 80052f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80052f4:	a801      	add	r0, sp, #4
 80052f6:	f7ff fd19 	bl	8004d2c <ADC_Enable>
 80052fa:	4603      	mov	r3, r0
    if (tmp_hal_status == HAL_OK)
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d1f3      	bne.n	80052e8 <HAL_ADCEx_MultiModeStart_DMA+0x58>
      ADC_STATE_CLR_SET(hadc->State,
 8005300:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005304:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 8005306:	400a      	ands	r2, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005308:	4e1a      	ldr	r6, [pc, #104]	; (8005374 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800530a:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005380 <HAL_ADCEx_MultiModeStart_DMA+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 800530e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8005312:	4919      	ldr	r1, [pc, #100]	; (8005378 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      ADC_STATE_CLR_SET(hadc->State,
 8005314:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8005316:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005318:	63c6      	str	r6, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800531a:	6826      	ldr	r6, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800531c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005320:	454e      	cmp	r6, r9
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8005322:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005324:	d01c      	beq.n	8005360 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8005326:	42ae      	cmp	r6, r5
 8005328:	d01a      	beq.n	8005360 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 800532a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8005384 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800532e:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 8005330:	2500      	movs	r5, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8005332:	4643      	mov	r3, r8
 8005334:	463a      	mov	r2, r7
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005336:	6031      	str	r1, [r6, #0]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8005338:	f10c 010c 	add.w	r1, ip, #12
      __HAL_UNLOCK(hadc);
 800533c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005340:	6875      	ldr	r5, [r6, #4]
 8005342:	f045 0510 	orr.w	r5, r5, #16
 8005346:	6075      	str	r5, [r6, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8005348:	f000 fe70 	bl	800602c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800534c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8005350:	6891      	ldr	r1, [r2, #8]
 8005352:	400b      	ands	r3, r1
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	6093      	str	r3, [r2, #8]
}
 800535a:	b01b      	add	sp, #108	; 0x6c
 800535c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005360:	f8df c024 	ldr.w	ip, [pc, #36]	; 8005388 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8005364:	e7e3      	b.n	800532e <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8005366:	bf00      	nop
 8005368:	40022000 	.word	0x40022000
 800536c:	40022100 	.word	0x40022100
 8005370:	fffff0fe 	.word	0xfffff0fe
 8005374:	080044a9 	.word	0x080044a9
 8005378:	08004515 	.word	0x08004515
 800537c:	7fffffc0 	.word	0x7fffffc0
 8005380:	08004225 	.word	0x08004225
 8005384:	58026300 	.word	0x58026300
 8005388:	40022300 	.word	0x40022300

0800538c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop

08005390 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop

08005394 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop

08005398 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <HAL_ADCEx_EndOfSamplingCallback>:
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80053a0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053a2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 80053a6:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053a8:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80053aa:	2a01      	cmp	r2, #1
 80053ac:	d04d      	beq.n	800544a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80053ae:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053b0:	4c2b      	ldr	r4, [pc, #172]	; (8005460 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80053b2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80053b4:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053b6:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80053b8:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053ba:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 80053bc:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80053c0:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053c2:	d008      	beq.n	80053d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053c4:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053ca:	f041 0120 	orr.w	r1, r1, #32
 80053ce:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80053d0:	b01a      	add	sp, #104	; 0x68
 80053d2:	bcf0      	pop	{r4, r5, r6, r7}
 80053d4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053d6:	4c23      	ldr	r4, [pc, #140]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80053d8:	68a2      	ldr	r2, [r4, #8]
 80053da:	0752      	lsls	r2, r2, #29
 80053dc:	d50b      	bpl.n	80053f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80053de:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80053e2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053e4:	f042 0220 	orr.w	r2, r2, #32
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80053f0:	b01a      	add	sp, #104	; 0x68
 80053f2:	bcf0      	pop	{r4, r5, r6, r7}
 80053f4:	4770      	bx	lr
 80053f6:	68a8      	ldr	r0, [r5, #8]
 80053f8:	f010 0004 	ands.w	r0, r0, #4
 80053fc:	d1f0      	bne.n	80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053fe:	b1c6      	cbz	r6, 8005432 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005400:	f8df c068 	ldr.w	ip, [pc, #104]	; 800546c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8005404:	684f      	ldr	r7, [r1, #4]
 8005406:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800540a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800540e:	433a      	orrs	r2, r7
 8005410:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005414:	68ad      	ldr	r5, [r5, #8]
 8005416:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005418:	432a      	orrs	r2, r5
 800541a:	07d4      	lsls	r4, r2, #31
 800541c:	d413      	bmi.n	8005446 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 800541e:	688a      	ldr	r2, [r1, #8]
 8005420:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8005424:	4910      	ldr	r1, [pc, #64]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005426:	4316      	orrs	r6, r2
 8005428:	4021      	ands	r1, r4
 800542a:	430e      	orrs	r6, r1
 800542c:	f8cc 6008 	str.w	r6, [ip, #8]
 8005430:	e7db      	b.n	80053ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005432:	490e      	ldr	r1, [pc, #56]	; (800546c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 8005434:	688a      	ldr	r2, [r1, #8]
 8005436:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800543a:	608a      	str	r2, [r1, #8]
 800543c:	68a8      	ldr	r0, [r5, #8]
 800543e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005440:	4302      	orrs	r2, r0
 8005442:	07d0      	lsls	r0, r2, #31
 8005444:	d505      	bpl.n	8005452 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005446:	2000      	movs	r0, #0
 8005448:	e7cf      	b.n	80053ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 800544a:	2002      	movs	r0, #2
}
 800544c:	b01a      	add	sp, #104	; 0x68
 800544e:	bcf0      	pop	{r4, r5, r6, r7}
 8005450:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005452:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005454:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005456:	4a04      	ldr	r2, [pc, #16]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005458:	4022      	ands	r2, r4
 800545a:	608a      	str	r2, [r1, #8]
 800545c:	e7c5      	b.n	80053ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800545e:	bf00      	nop
 8005460:	40022000 	.word	0x40022000
 8005464:	40022100 	.word	0x40022100
 8005468:	fffff0e0 	.word	0xfffff0e0
 800546c:	40022300 	.word	0x40022300

08005470 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005470:	4907      	ldr	r1, [pc, #28]	; (8005490 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005472:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005476:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005478:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800547e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8005482:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005484:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005488:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800548a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800548c:	60cb      	str	r3, [r1, #12]
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00
 8005494:	05fa0000 	.word	0x05fa0000

08005498 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_NVIC_SetPriority+0x68>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a0:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a2:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054a6:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a8:	2d04      	cmp	r5, #4
 80054aa:	bf28      	it	cs
 80054ac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ae:	2c06      	cmp	r4, #6
 80054b0:	d919      	bls.n	80054e6 <HAL_NVIC_SetPriority+0x4e>
 80054b2:	3b03      	subs	r3, #3
 80054b4:	f04f 34ff 	mov.w	r4, #4294967295
 80054b8:	409c      	lsls	r4, r3
 80054ba:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054be:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80054c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	fa04 f405 	lsl.w	r4, r4, r5
 80054c8:	ea21 0104 	bic.w	r1, r1, r4
 80054cc:	fa01 f103 	lsl.w	r1, r1, r3
 80054d0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80054d4:	db0a      	blt.n	80054ec <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d6:	0109      	lsls	r1, r1, #4
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_NVIC_SetPriority+0x6c>)
 80054da:	b2c9      	uxtb	r1, r1
 80054dc:	4403      	add	r3, r0
 80054de:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80054e2:	bc30      	pop	{r4, r5}
 80054e4:	4770      	bx	lr
 80054e6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054e8:	4613      	mov	r3, r2
 80054ea:	e7e8      	b.n	80054be <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ec:	f000 000f 	and.w	r0, r0, #15
 80054f0:	0109      	lsls	r1, r1, #4
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_NVIC_SetPriority+0x70>)
 80054f4:	b2c9      	uxtb	r1, r1
 80054f6:	4403      	add	r3, r0
 80054f8:	7619      	strb	r1, [r3, #24]
 80054fa:	bc30      	pop	{r4, r5}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000ed00 	.word	0xe000ed00
 8005504:	e000e100 	.word	0xe000e100
 8005508:	e000ecfc 	.word	0xe000ecfc

0800550c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800550c:	2800      	cmp	r0, #0
 800550e:	db07      	blt.n	8005520 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005510:	2301      	movs	r3, #1
 8005512:	f000 011f 	and.w	r1, r0, #31
 8005516:	4a03      	ldr	r2, [pc, #12]	; (8005524 <HAL_NVIC_EnableIRQ+0x18>)
 8005518:	0940      	lsrs	r0, r0, #5
 800551a:	408b      	lsls	r3, r1
 800551c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	e000e100 	.word	0xe000e100

08005528 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005528:	3801      	subs	r0, #1
 800552a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800552e:	d20d      	bcs.n	800554c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005532:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005534:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005536:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005538:	25f0      	movs	r5, #240	; 0xf0
 800553a:	4c06      	ldr	r4, [pc, #24]	; (8005554 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800553c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800553e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005540:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005546:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8005548:	bc30      	pop	{r4, r5}
 800554a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800554c:	2001      	movs	r0, #1
 800554e:	4770      	bx	lr
 8005550:	e000e010 	.word	0xe000e010
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005558:	b188      	cbz	r0, 800557e <HAL_DAC_Init+0x26>
{
 800555a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800555c:	7903      	ldrb	r3, [r0, #4]
 800555e:	4604      	mov	r4, r0
 8005560:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005564:	b13b      	cbz	r3, 8005576 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005568:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800556a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800556c:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800556e:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005570:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005572:	7122      	strb	r2, [r4, #4]
}
 8005574:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005576:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005578:	f7fe fae4 	bl	8003b44 <HAL_DAC_MspInit>
 800557c:	e7f3      	b.n	8005566 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800557e:	2001      	movs	r0, #1
}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop

08005584 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005584:	7942      	ldrb	r2, [r0, #5]
 8005586:	2a01      	cmp	r2, #1
 8005588:	d026      	beq.n	80055d8 <HAL_DAC_Start+0x54>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800558a:	4603      	mov	r3, r0

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800558c:	2201      	movs	r2, #1
 800558e:	6800      	ldr	r0, [r0, #0]
{
 8005590:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8005592:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8005594:	f001 0510 	and.w	r5, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8005598:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800559a:	40aa      	lsls	r2, r5
 800559c:	6806      	ldr	r6, [r0, #0]
 800559e:	4332      	orrs	r2, r6
 80055a0:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80055a2:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 80055a4:	b971      	cbnz	r1, 80055c4 <HAL_DAC_Start+0x40>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80055a6:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 80055aa:	42a2      	cmp	r2, r4
 80055ac:	d103      	bne.n	80055b6 <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80055ae:	6842      	ldr	r2, [r0, #4]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80055b6:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80055b8:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80055ba:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80055bc:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80055be:	715a      	strb	r2, [r3, #5]
}
 80055c0:	bc70      	pop	{r4, r5, r6}
 80055c2:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80055c4:	40ac      	lsls	r4, r5
 80055c6:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80055ca:	42a2      	cmp	r2, r4
 80055cc:	d1f3      	bne.n	80055b6 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80055ce:	6842      	ldr	r2, [r0, #4]
 80055d0:	f042 0202 	orr.w	r2, r2, #2
 80055d4:	6042      	str	r2, [r0, #4]
 80055d6:	e7ee      	b.n	80055b6 <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 80055d8:	2002      	movs	r0, #2
}
 80055da:	4770      	bx	lr

080055dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055e0:	7940      	ldrb	r0, [r0, #5]
{
 80055e2:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 80055e4:	2801      	cmp	r0, #1
 80055e6:	d057      	beq.n	8005698 <HAL_DAC_Start_DMA+0xbc>
 80055e8:	460d      	mov	r5, r1
 80055ea:	2001      	movs	r0, #1
 80055ec:	4611      	mov	r1, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055ee:	2202      	movs	r2, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80055f0:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hdac);
 80055f2:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80055f4:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 80055f6:	bb4d      	cbnz	r5, 800564c <HAL_DAC_Start_DMA+0x70>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80055f8:	683a      	ldr	r2, [r7, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80055fa:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80055fc:	68a0      	ldr	r0, [r4, #8]
 80055fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80056e4 <HAL_DAC_Start_DMA+0x108>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005602:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005606:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 80056e8 <HAL_DAC_Start_DMA+0x10c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800560a:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800560e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80056ec <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005612:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005616:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800561a:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 800561c:	d044      	beq.n	80056a8 <HAL_DAC_Start_DMA+0xcc>
 800561e:	2e08      	cmp	r6, #8
 8005620:	d03f      	beq.n	80056a2 <HAL_DAC_Start_DMA+0xc6>
 8005622:	2e00      	cmp	r6, #0
 8005624:	d03a      	beq.n	800569c <HAL_DAC_Start_DMA+0xc0>
 8005626:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005628:	683e      	ldr	r6, [r7, #0]
 800562a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800562e:	603e      	str	r6, [r7, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005630:	f000 fcfc 	bl	800602c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005634:	2300      	movs	r3, #0
 8005636:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8005638:	bb48      	cbnz	r0, 800568e <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f005 0110 	and.w	r1, r5, #16
 8005640:	2501      	movs	r5, #1
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	408d      	lsls	r5, r1
 8005646:	4315      	orrs	r5, r2
 8005648:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 800564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800564c:	683a      	ldr	r2, [r7, #0]
    switch (Alignment)
 800564e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005650:	68e0      	ldr	r0, [r4, #12]
 8005652:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80056f0 <HAL_DAC_Start_DMA+0x114>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800565a:	f8df e098 	ldr.w	lr, [pc, #152]	; 80056f4 <HAL_DAC_Start_DMA+0x118>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800565e:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005662:	f8df c094 	ldr.w	ip, [pc, #148]	; 80056f8 <HAL_DAC_Start_DMA+0x11c>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005666:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800566a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800566e:	603a      	str	r2, [r7, #0]
    switch (Alignment)
 8005670:	d02f      	beq.n	80056d2 <HAL_DAC_Start_DMA+0xf6>
 8005672:	2e08      	cmp	r6, #8
 8005674:	d024      	beq.n	80056c0 <HAL_DAC_Start_DMA+0xe4>
 8005676:	b1d6      	cbz	r6, 80056ae <HAL_DAC_Start_DMA+0xd2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005678:	683e      	ldr	r6, [r7, #0]
    switch (Alignment)
 800567a:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800567c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8005680:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005682:	f000 fcd3 	bl	800602c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8005686:	2300      	movs	r3, #0
 8005688:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800568a:	2800      	cmp	r0, #0
 800568c:	d0d5      	beq.n	800563a <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	f043 0304 	orr.w	r3, r3, #4
 8005694:	6123      	str	r3, [r4, #16]
}
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 8005698:	2002      	movs	r0, #2
}
 800569a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800569c:	f107 0208 	add.w	r2, r7, #8
        break;
 80056a0:	e7c2      	b.n	8005628 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80056a2:	f107 0210 	add.w	r2, r7, #16
        break;
 80056a6:	e7bf      	b.n	8005628 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80056a8:	f107 020c 	add.w	r2, r7, #12
        break;
 80056ac:	e7bc      	b.n	8005628 <HAL_DAC_Start_DMA+0x4c>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056ae:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80056b0:	f107 0214 	add.w	r2, r7, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056b4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80056b8:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80056ba:	f000 fcb7 	bl	800602c <HAL_DMA_Start_IT>
 80056be:	e7e2      	b.n	8005686 <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056c0:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80056c2:	f107 021c 	add.w	r2, r7, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056c6:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80056ca:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80056cc:	f000 fcae 	bl	800602c <HAL_DMA_Start_IT>
 80056d0:	e7d9      	b.n	8005686 <HAL_DAC_Start_DMA+0xaa>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056d2:	683e      	ldr	r6, [r7, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80056d4:	f107 0218 	add.w	r2, r7, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056d8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80056dc:	603e      	str	r6, [r7, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80056de:	f000 fca5 	bl	800602c <HAL_DMA_Start_IT>
 80056e2:	e7d0      	b.n	8005686 <HAL_DAC_Start_DMA+0xaa>
 80056e4:	0800572d 	.word	0x0800572d
 80056e8:	0800573d 	.word	0x0800573d
 80056ec:	0800574d 	.word	0x0800574d
 80056f0:	08005929 	.word	0x08005929
 80056f4:	0800593d 	.word	0x0800593d
 80056f8:	0800594d 	.word	0x0800594d

080056fc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80056fc:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80056fe:	6800      	ldr	r0, [r0, #0]
{
 8005700:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
 8005702:	2400      	movs	r4, #0
 8005704:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8005706:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005708:	b951      	cbnz	r1, 8005720 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800570a:	9901      	ldr	r1, [sp, #4]
 800570c:	3108      	adds	r1, #8
 800570e:	440a      	add	r2, r1
 8005710:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005712:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8005714:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8005716:	6013      	str	r3, [r2, #0]
}
 8005718:	b003      	add	sp, #12
 800571a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800571e:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005720:	9901      	ldr	r1, [sp, #4]
 8005722:	3114      	adds	r1, #20
 8005724:	440a      	add	r2, r1
 8005726:	9201      	str	r2, [sp, #4]
 8005728:	e7f3      	b.n	8005712 <HAL_DAC_SetValue+0x16>
 800572a:	bf00      	nop

0800572c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800572c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005730:	4620      	mov	r0, r4
 8005732:	f7fc ff33 	bl	800259c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005736:	2301      	movs	r3, #1
 8005738:	7123      	strb	r3, [r4, #4]
}
 800573a:	bd10      	pop	{r4, pc}

0800573c <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800573c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800573e:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005740:	f7fc ff3e 	bl	80025c0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005744:	bd08      	pop	{r3, pc}
 8005746:	bf00      	nop

08005748 <HAL_DAC_ErrorCallbackCh1>:
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop

0800574c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800574c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005750:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005752:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800575a:	f7ff fff5 	bl	8005748 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800575e:	2301      	movs	r3, #1
 8005760:	7123      	strb	r3, [r4, #4]
}
 8005762:	bd10      	pop	{r4, pc}

08005764 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop

08005768 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005768:	6803      	ldr	r3, [r0, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	0491      	lsls	r1, r2, #18
{
 800576e:	b510      	push	{r4, lr}
 8005770:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005772:	d502      	bpl.n	800577a <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005776:	0492      	lsls	r2, r2, #18
 8005778:	d418      	bmi.n	80057ac <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	0091      	lsls	r1, r2, #2
 800577e:	d502      	bpl.n	8005786 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	d400      	bmi.n	8005788 <HAL_DAC_IRQHandler+0x20>
}
 8005786:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8005788:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800578a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800578e:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8005790:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005792:	6922      	ldr	r2, [r4, #16]
 8005794:	f042 0202 	orr.w	r2, r2, #2
 8005798:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800579a:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80057a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80057a6:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80057a8:	f000 b8dc 	b.w	8005964 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 80057ac:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80057ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 80057b2:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80057b4:	6902      	ldr	r2, [r0, #16]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80057bc:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057c4:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80057c6:	f7ff ffcd 	bl	8005764 <HAL_DAC_DMAUnderrunCallbackCh1>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	e7d5      	b.n	800577a <HAL_DAC_IRQHandler+0x12>
 80057ce:	bf00      	nop

080057d0 <HAL_DAC_ConfigChannel>:
{
 80057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 80057d4:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80057d6:	680f      	ldr	r7, [r1, #0]
  __HAL_LOCK(hdac);
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f000 8095 	beq.w	8005908 <HAL_DAC_ConfigChannel+0x138>
 80057de:	4615      	mov	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 80057e0:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 80057e2:	2201      	movs	r2, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057e4:	2f04      	cmp	r7, #4
 80057e6:	4606      	mov	r6, r0
 80057e8:	460c      	mov	r4, r1
  __HAL_LOCK(hdac);
 80057ea:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80057ec:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80057ee:	d04a      	beq.n	8005886 <HAL_DAC_ConfigChannel+0xb6>
 80057f0:	f005 0210 	and.w	r2, r5, #16
 80057f4:	6801      	ldr	r1, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d108      	bne.n	800580e <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80057fc:	251f      	movs	r5, #31
    tmpreg1 = hdac->Instance->CCR;
 80057fe:	6b88      	ldr	r0, [r1, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005800:	6963      	ldr	r3, [r4, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005802:	4095      	lsls	r5, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005804:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005806:	ea20 0005 	bic.w	r0, r0, r5
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800580a:	4303      	orrs	r3, r0
    hdac->Instance->CCR = tmpreg1;
 800580c:	638b      	str	r3, [r1, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800580e:	2007      	movs	r0, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005810:	68e5      	ldr	r5, [r4, #12]
  tmpreg1 = hdac->Instance->MCR;
 8005812:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005814:	4090      	lsls	r0, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005816:	2d01      	cmp	r5, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005818:	ea23 0000 	bic.w	r0, r3, r0
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800581c:	d02e      	beq.n	800587c <HAL_DAC_ConfigChannel+0xac>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800581e:	2d02      	cmp	r5, #2
 8005820:	68a5      	ldr	r5, [r4, #8]
 8005822:	d02e      	beq.n	8005882 <HAL_DAC_ConfigChannel+0xb2>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005824:	fab5 f385 	clz	r3, r5
 8005828:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800582a:	432b      	orrs	r3, r5
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800582c:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005830:	6865      	ldr	r5, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005832:	f640 74fe 	movw	r4, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005836:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005838:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800583c:	fa04 f702 	lsl.w	r7, r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005840:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005842:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005844:	24c0      	movs	r4, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 8005846:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 800584a:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800584e:	4303      	orrs	r3, r0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005850:	4094      	lsls	r4, r2
  return HAL_OK;
 8005852:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 8005854:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005856:	680b      	ldr	r3, [r1, #0]
 8005858:	ea23 0308 	bic.w	r3, r3, r8
 800585c:	600b      	str	r3, [r1, #0]
  tmpreg1 = hdac->Instance->CR;
 800585e:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005860:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005864:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8005866:	600b      	str	r3, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005868:	680a      	ldr	r2, [r1, #0]
 800586a:	ea22 0204 	bic.w	r2, r2, r4
 800586e:	600a      	str	r2, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005870:	f886 e004 	strb.w	lr, [r6, #4]
  __HAL_UNLOCK(hdac);
 8005874:	f886 c005 	strb.w	ip, [r6, #5]
}
 8005878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587c:	68a5      	ldr	r5, [r4, #8]
    connectOnChip = 0x00000000UL;
 800587e:	2300      	movs	r3, #0
 8005880:	e7d3      	b.n	800582a <HAL_DAC_ConfigChannel+0x5a>
    connectOnChip = DAC_MCR_MODE1_0;
 8005882:	2301      	movs	r3, #1
 8005884:	e7d1      	b.n	800582a <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 8005886:	f7fe fc81 	bl	800418c <HAL_GetTick>
 800588a:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800588c:	b9c5      	cbnz	r5, 80058c0 <HAL_DAC_ConfigChannel+0xf0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800588e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005920 <HAL_DAC_ConfigChannel+0x150>
 8005892:	e004      	b.n	800589e <HAL_DAC_ConfigChannel+0xce>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005894:	f7fe fc7a 	bl	800418c <HAL_GetTick>
 8005898:	1bc3      	subs	r3, r0, r7
 800589a:	2b01      	cmp	r3, #1
 800589c:	d837      	bhi.n	800590e <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800589e:	6833      	ldr	r3, [r6, #0]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	ea13 0f08 	tst.w	r3, r8
 80058a6:	d1f5      	bne.n	8005894 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 80058a8:	2001      	movs	r0, #1
 80058aa:	f7fe fc75 	bl	8004198 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058ae:	6831      	ldr	r1, [r6, #0]
 80058b0:	69a3      	ldr	r3, [r4, #24]
 80058b2:	640b      	str	r3, [r1, #64]	; 0x40
 80058b4:	e00e      	b.n	80058d4 <HAL_DAC_ConfigChannel+0x104>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80058b6:	f7fe fc69 	bl	800418c <HAL_GetTick>
 80058ba:	1bc3      	subs	r3, r0, r7
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d826      	bhi.n	800590e <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058c0:	6833      	ldr	r3, [r6, #0]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dbf6      	blt.n	80058b6 <HAL_DAC_ConfigChannel+0xe6>
      HAL_Delay(1U);
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7fe fc65 	bl	8004198 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	69a3      	ldr	r3, [r4, #24]
 80058d2:	644b      	str	r3, [r1, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058d4:	f005 0210 	and.w	r2, r5, #16
 80058d8:	f240 3cff 	movw	ip, #1023	; 0x3ff
 80058dc:	6c88      	ldr	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058de:	23ff      	movs	r3, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058e0:	69e7      	ldr	r7, [r4, #28]
 80058e2:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058e6:	fa03 f502 	lsl.w	r5, r3, r2
 80058ea:	6a23      	ldr	r3, [r4, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058ec:	4097      	lsls	r7, r2
 80058ee:	ea20 000c 	bic.w	r0, r0, ip
 80058f2:	4338      	orrs	r0, r7
 80058f4:	6827      	ldr	r7, [r4, #0]
 80058f6:	6488      	str	r0, [r1, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058f8:	fa03 f002 	lsl.w	r0, r3, r2
 80058fc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80058fe:	ea23 0305 	bic.w	r3, r3, r5
 8005902:	4303      	orrs	r3, r0
 8005904:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005906:	e776      	b.n	80057f6 <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8005908:	2002      	movs	r0, #2
}
 800590a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800590e:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005910:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005912:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 8005916:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005918:	6133      	str	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800591a:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 800591c:	e7ac      	b.n	8005878 <HAL_DAC_ConfigChannel+0xa8>
 800591e:	bf00      	nop
 8005920:	20008000 	.word	0x20008000

08005924 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop

08005928 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005928:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800592a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800592c:	4620      	mov	r0, r4
 800592e:	f7ff fff9 	bl	8005924 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005932:	2301      	movs	r3, #1
 8005934:	7123      	strb	r3, [r4, #4]
}
 8005936:	bd10      	pop	{r4, pc}

08005938 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop

0800593c <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800593c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800593e:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005940:	f7ff fffa 	bl	8005938 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005944:	bd08      	pop	{r3, pc}
 8005946:	bf00      	nop

08005948 <HAL_DACEx_ErrorCallbackCh2>:
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop

0800594c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800594c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800594e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005950:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005952:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005954:	f043 0304 	orr.w	r3, r3, #4
 8005958:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800595a:	f7ff fff5 	bl	8005948 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800595e:	2301      	movs	r3, #1
 8005960:	7123      	strb	r3, [r4, #4]
}
 8005962:	bd10      	pop	{r4, pc}

08005964 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop

08005968 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005968:	6802      	ldr	r2, [r0, #0]
 800596a:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <DMA_CalcBaseAndBitshift+0xd8>)
 800596c:	4935      	ldr	r1, [pc, #212]	; (8005a44 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800596e:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005970:	4c35      	ldr	r4, [pc, #212]	; (8005a48 <DMA_CalcBaseAndBitshift+0xe0>)
 8005972:	4d36      	ldr	r5, [pc, #216]	; (8005a4c <DMA_CalcBaseAndBitshift+0xe4>)
 8005974:	42a2      	cmp	r2, r4
 8005976:	bf18      	it	ne
 8005978:	429a      	cmpne	r2, r3
 800597a:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	428a      	cmp	r2, r1
 8005986:	bf08      	it	eq
 8005988:	f043 0301 	orreq.w	r3, r3, #1
 800598c:	3148      	adds	r1, #72	; 0x48
 800598e:	42aa      	cmp	r2, r5
 8005990:	bf08      	it	eq
 8005992:	f043 0301 	orreq.w	r3, r3, #1
 8005996:	3548      	adds	r5, #72	; 0x48
 8005998:	42a2      	cmp	r2, r4
 800599a:	bf08      	it	eq
 800599c:	f043 0301 	orreq.w	r3, r3, #1
 80059a0:	3448      	adds	r4, #72	; 0x48
 80059a2:	428a      	cmp	r2, r1
 80059a4:	bf08      	it	eq
 80059a6:	f043 0301 	orreq.w	r3, r3, #1
 80059aa:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80059ae:	42aa      	cmp	r2, r5
 80059b0:	bf08      	it	eq
 80059b2:	f043 0301 	orreq.w	r3, r3, #1
 80059b6:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80059ba:	42a2      	cmp	r2, r4
 80059bc:	bf08      	it	eq
 80059be:	f043 0301 	orreq.w	r3, r3, #1
 80059c2:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80059c6:	428a      	cmp	r2, r1
 80059c8:	bf08      	it	eq
 80059ca:	f043 0301 	orreq.w	r3, r3, #1
 80059ce:	3148      	adds	r1, #72	; 0x48
 80059d0:	42aa      	cmp	r2, r5
 80059d2:	bf08      	it	eq
 80059d4:	f043 0301 	orreq.w	r3, r3, #1
 80059d8:	3548      	adds	r5, #72	; 0x48
 80059da:	42a2      	cmp	r2, r4
 80059dc:	bf08      	it	eq
 80059de:	f043 0301 	orreq.w	r3, r3, #1
 80059e2:	3448      	adds	r4, #72	; 0x48
 80059e4:	428a      	cmp	r2, r1
 80059e6:	bf08      	it	eq
 80059e8:	f043 0301 	orreq.w	r3, r3, #1
 80059ec:	3148      	adds	r1, #72	; 0x48
 80059ee:	42aa      	cmp	r2, r5
 80059f0:	bf08      	it	eq
 80059f2:	f043 0301 	orreq.w	r3, r3, #1
 80059f6:	42a2      	cmp	r2, r4
 80059f8:	bf08      	it	eq
 80059fa:	f043 0301 	orreq.w	r3, r3, #1
 80059fe:	428a      	cmp	r2, r1
 8005a00:	bf08      	it	eq
 8005a02:	f043 0301 	orreq.w	r3, r3, #1
 8005a06:	b913      	cbnz	r3, 8005a0e <DMA_CalcBaseAndBitshift+0xa6>
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <DMA_CalcBaseAndBitshift+0xe8>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d113      	bne.n	8005a36 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a0e:	b2d3      	uxtb	r3, r2
 8005a10:	4910      	ldr	r1, [pc, #64]	; (8005a54 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a12:	4c11      	ldr	r4, [pc, #68]	; (8005a58 <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a14:	3b10      	subs	r3, #16
 8005a16:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8005a1a:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a1c:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a1e:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a22:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a26:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a28:	bf88      	it	hi
 8005a2a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a2c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a2e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bc30      	pop	{r4, r5}
 8005a34:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a36:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8005a3a:	6583      	str	r3, [r0, #88]	; 0x58
 8005a3c:	e7f8      	b.n	8005a30 <DMA_CalcBaseAndBitshift+0xc8>
 8005a3e:	bf00      	nop
 8005a40:	40020010 	.word	0x40020010
 8005a44:	40020040 	.word	0x40020040
 8005a48:	40020028 	.word	0x40020028
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	400204b8 	.word	0x400204b8
 8005a54:	aaaaaaab 	.word	0xaaaaaaab
 8005a58:	08018238 	.word	0x08018238
 8005a5c:	fffffc00 	.word	0xfffffc00

08005a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a60:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a62:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8005a64:	4929      	ldr	r1, [pc, #164]	; (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8005a66:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a68:	4d29      	ldr	r5, [pc, #164]	; (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8005a6a:	4c2a      	ldr	r4, [pc, #168]	; (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	bf18      	it	ne
 8005a70:	4293      	cmpne	r3, r2
 8005a72:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8005a76:	bf0c      	ite	eq
 8005a78:	2201      	moveq	r2, #1
 8005a7a:	2200      	movne	r2, #0
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	bf08      	it	eq
 8005a80:	f042 0201 	orreq.w	r2, r2, #1
 8005a84:	343c      	adds	r4, #60	; 0x3c
 8005a86:	428b      	cmp	r3, r1
 8005a88:	bf08      	it	eq
 8005a8a:	f042 0201 	orreq.w	r2, r2, #1
 8005a8e:	313c      	adds	r1, #60	; 0x3c
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	bf08      	it	eq
 8005a94:	f042 0201 	orreq.w	r2, r2, #1
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	bf08      	it	eq
 8005a9c:	f042 0201 	orreq.w	r2, r2, #1
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf08      	it	eq
 8005aa4:	f042 0201 	orreq.w	r2, r2, #1
 8005aa8:	b912      	cbnz	r2, 8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8005aaa:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d113      	bne.n	8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	4d1a      	ldr	r5, [pc, #104]	; (8005b1c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ab6:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ab8:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005aba:	4c1a      	ldr	r4, [pc, #104]	; (8005b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005abc:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ac0:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ac2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ac6:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005aca:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ad0:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ad2:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ad4:	bc30      	pop	{r4, r5}
 8005ad6:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ad8:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ada:	4913      	ldr	r1, [pc, #76]	; (8005b28 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005adc:	4c13      	ldr	r4, [pc, #76]	; (8005b2c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ade:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ae0:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ae2:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ae4:	fba4 2302 	umull	r2, r3, r4, r2
 8005ae8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005aec:	d800      	bhi.n	8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 8005aee:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005af0:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005af2:	f003 051f 	and.w	r5, r3, #31
 8005af6:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005af8:	4c0e      	ldr	r4, [pc, #56]	; (8005b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005afa:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005afc:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005afe:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b00:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b02:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b04:	6602      	str	r2, [r0, #96]	; 0x60
}
 8005b06:	e7e5      	b.n	8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 8005b08:	58025408 	.word	0x58025408
 8005b0c:	58025444 	.word	0x58025444
 8005b10:	5802541c 	.word	0x5802541c
 8005b14:	58025430 	.word	0x58025430
 8005b18:	58025494 	.word	0x58025494
 8005b1c:	cccccccd 	.word	0xcccccccd
 8005b20:	16009600 	.word	0x16009600
 8005b24:	58025880 	.word	0x58025880
 8005b28:	bffdfbf0 	.word	0xbffdfbf0
 8005b2c:	aaaaaaab 	.word	0xaaaaaaab
 8005b30:	10008200 	.word	0x10008200
 8005b34:	40020880 	.word	0x40020880

08005b38 <HAL_DMA_Init>:
{
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005b3c:	f7fe fb26 	bl	800418c <HAL_GetTick>
  if(hdma == NULL)
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	f000 818a 	beq.w	8005e5a <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	4605      	mov	r5, r0
 8005b4a:	4a95      	ldr	r2, [pc, #596]	; (8005da0 <HAL_DMA_Init+0x268>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d049      	beq.n	8005be4 <HAL_DMA_Init+0xac>
 8005b50:	3218      	adds	r2, #24
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d046      	beq.n	8005be4 <HAL_DMA_Init+0xac>
 8005b56:	3230      	adds	r2, #48	; 0x30
 8005b58:	4892      	ldr	r0, [pc, #584]	; (8005da4 <HAL_DMA_Init+0x26c>)
 8005b5a:	4993      	ldr	r1, [pc, #588]	; (8005da8 <HAL_DMA_Init+0x270>)
 8005b5c:	4283      	cmp	r3, r0
 8005b5e:	bf18      	it	ne
 8005b60:	4293      	cmpne	r3, r2
 8005b62:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005b66:	bf0c      	ite	eq
 8005b68:	2201      	moveq	r2, #1
 8005b6a:	2200      	movne	r2, #0
 8005b6c:	428b      	cmp	r3, r1
 8005b6e:	bf08      	it	eq
 8005b70:	f042 0201 	orreq.w	r2, r2, #1
 8005b74:	3130      	adds	r1, #48	; 0x30
 8005b76:	4283      	cmp	r3, r0
 8005b78:	bf08      	it	eq
 8005b7a:	f042 0201 	orreq.w	r2, r2, #1
 8005b7e:	3030      	adds	r0, #48	; 0x30
 8005b80:	428b      	cmp	r3, r1
 8005b82:	bf08      	it	eq
 8005b84:	f042 0201 	orreq.w	r2, r2, #1
 8005b88:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005b8c:	4283      	cmp	r3, r0
 8005b8e:	bf08      	it	eq
 8005b90:	f042 0201 	orreq.w	r2, r2, #1
 8005b94:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf08      	it	eq
 8005b9c:	f042 0201 	orreq.w	r2, r2, #1
 8005ba0:	3130      	adds	r1, #48	; 0x30
 8005ba2:	4283      	cmp	r3, r0
 8005ba4:	bf08      	it	eq
 8005ba6:	f042 0201 	orreq.w	r2, r2, #1
 8005baa:	3030      	adds	r0, #48	; 0x30
 8005bac:	428b      	cmp	r3, r1
 8005bae:	bf08      	it	eq
 8005bb0:	f042 0201 	orreq.w	r2, r2, #1
 8005bb4:	3130      	adds	r1, #48	; 0x30
 8005bb6:	4283      	cmp	r3, r0
 8005bb8:	bf08      	it	eq
 8005bba:	f042 0201 	orreq.w	r2, r2, #1
 8005bbe:	3030      	adds	r0, #48	; 0x30
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	bf08      	it	eq
 8005bc4:	f042 0201 	orreq.w	r2, r2, #1
 8005bc8:	3130      	adds	r1, #48	; 0x30
 8005bca:	4283      	cmp	r3, r0
 8005bcc:	bf08      	it	eq
 8005bce:	f042 0201 	orreq.w	r2, r2, #1
 8005bd2:	428b      	cmp	r3, r1
 8005bd4:	bf08      	it	eq
 8005bd6:	f042 0201 	orreq.w	r2, r2, #1
 8005bda:	b91a      	cbnz	r2, 8005be4 <HAL_DMA_Init+0xac>
 8005bdc:	4a73      	ldr	r2, [pc, #460]	; (8005dac <HAL_DMA_Init+0x274>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f040 81a1 	bne.w	8005f26 <HAL_DMA_Init+0x3ee>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005be4:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005be6:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005be8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005bec:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e006      	b.n	8005c08 <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bfa:	f7fe fac7 	bl	800418c <HAL_GetTick>
 8005bfe:	1b43      	subs	r3, r0, r5
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	f200 8111 	bhi.w	8005e28 <HAL_DMA_Init+0x2f0>
 8005c06:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	07d0      	lsls	r0, r2, #31
 8005c0c:	d4f5      	bmi.n	8005bfa <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 8005c0e:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c12:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8005c14:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c16:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c18:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c20:	4e63      	ldr	r6, [pc, #396]	; (8005db0 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c22:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c26:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c28:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2a:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c2e:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c30:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c32:	4960      	ldr	r1, [pc, #384]	; (8005db4 <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 8005c34:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c38:	4e5f      	ldr	r6, [pc, #380]	; (8005db8 <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c3a:	f000 8110 	beq.w	8005e5e <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c3e:	6836      	ldr	r6, [r6, #0]
 8005c40:	4031      	ands	r1, r6
 8005c42:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005c46:	f080 80c3 	bcs.w	8005dd0 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c4a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c4c:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c4e:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005c52:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c54:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7ff fe86 	bl	8005968 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c5e:	233f      	movs	r3, #63	; 0x3f
 8005c60:	f002 021f 	and.w	r2, r2, #31
 8005c64:	4093      	lsls	r3, r2
 8005c66:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c68:	6822      	ldr	r2, [r4, #0]
 8005c6a:	4b4d      	ldr	r3, [pc, #308]	; (8005da0 <HAL_DMA_Init+0x268>)
 8005c6c:	4953      	ldr	r1, [pc, #332]	; (8005dbc <HAL_DMA_Init+0x284>)
 8005c6e:	4d4d      	ldr	r5, [pc, #308]	; (8005da4 <HAL_DMA_Init+0x26c>)
 8005c70:	428a      	cmp	r2, r1
 8005c72:	bf18      	it	ne
 8005c74:	429a      	cmpne	r2, r3
 8005c76:	4852      	ldr	r0, [pc, #328]	; (8005dc0 <HAL_DMA_Init+0x288>)
 8005c78:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8005c7c:	bf0c      	ite	eq
 8005c7e:	2301      	moveq	r3, #1
 8005c80:	2300      	movne	r3, #0
 8005c82:	42aa      	cmp	r2, r5
 8005c84:	bf08      	it	eq
 8005c86:	f043 0301 	orreq.w	r3, r3, #1
 8005c8a:	3548      	adds	r5, #72	; 0x48
 8005c8c:	4282      	cmp	r2, r0
 8005c8e:	bf08      	it	eq
 8005c90:	f043 0301 	orreq.w	r3, r3, #1
 8005c94:	3048      	adds	r0, #72	; 0x48
 8005c96:	428a      	cmp	r2, r1
 8005c98:	bf08      	it	eq
 8005c9a:	f043 0301 	orreq.w	r3, r3, #1
 8005c9e:	3148      	adds	r1, #72	; 0x48
 8005ca0:	42aa      	cmp	r2, r5
 8005ca2:	bf08      	it	eq
 8005ca4:	f043 0301 	orreq.w	r3, r3, #1
 8005ca8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005cac:	4282      	cmp	r2, r0
 8005cae:	bf08      	it	eq
 8005cb0:	f043 0301 	orreq.w	r3, r3, #1
 8005cb4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8005cb8:	428a      	cmp	r2, r1
 8005cba:	bf08      	it	eq
 8005cbc:	f043 0301 	orreq.w	r3, r3, #1
 8005cc0:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8005cc4:	42aa      	cmp	r2, r5
 8005cc6:	bf08      	it	eq
 8005cc8:	f043 0301 	orreq.w	r3, r3, #1
 8005ccc:	3548      	adds	r5, #72	; 0x48
 8005cce:	4282      	cmp	r2, r0
 8005cd0:	bf08      	it	eq
 8005cd2:	f043 0301 	orreq.w	r3, r3, #1
 8005cd6:	3048      	adds	r0, #72	; 0x48
 8005cd8:	428a      	cmp	r2, r1
 8005cda:	bf08      	it	eq
 8005cdc:	f043 0301 	orreq.w	r3, r3, #1
 8005ce0:	3148      	adds	r1, #72	; 0x48
 8005ce2:	42aa      	cmp	r2, r5
 8005ce4:	bf08      	it	eq
 8005ce6:	f043 0301 	orreq.w	r3, r3, #1
 8005cea:	3548      	adds	r5, #72	; 0x48
 8005cec:	4282      	cmp	r2, r0
 8005cee:	bf08      	it	eq
 8005cf0:	f043 0301 	orreq.w	r3, r3, #1
 8005cf4:	3048      	adds	r0, #72	; 0x48
 8005cf6:	428a      	cmp	r2, r1
 8005cf8:	bf08      	it	eq
 8005cfa:	f043 0301 	orreq.w	r3, r3, #1
 8005cfe:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8005d02:	42aa      	cmp	r2, r5
 8005d04:	bf08      	it	eq
 8005d06:	f043 0301 	orreq.w	r3, r3, #1
 8005d0a:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 8005d0e:	4d2d      	ldr	r5, [pc, #180]	; (8005dc4 <HAL_DMA_Init+0x28c>)
 8005d10:	4282      	cmp	r2, r0
 8005d12:	bf08      	it	eq
 8005d14:	f043 0301 	orreq.w	r3, r3, #1
 8005d18:	482b      	ldr	r0, [pc, #172]	; (8005dc8 <HAL_DMA_Init+0x290>)
 8005d1a:	428a      	cmp	r2, r1
 8005d1c:	bf08      	it	eq
 8005d1e:	f043 0301 	orreq.w	r3, r3, #1
 8005d22:	313c      	adds	r1, #60	; 0x3c
 8005d24:	42aa      	cmp	r2, r5
 8005d26:	bf08      	it	eq
 8005d28:	f043 0301 	orreq.w	r3, r3, #1
 8005d2c:	353c      	adds	r5, #60	; 0x3c
 8005d2e:	4282      	cmp	r2, r0
 8005d30:	bf08      	it	eq
 8005d32:	f043 0301 	orreq.w	r3, r3, #1
 8005d36:	303c      	adds	r0, #60	; 0x3c
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	bf08      	it	eq
 8005d3c:	f043 0301 	orreq.w	r3, r3, #1
 8005d40:	313c      	adds	r1, #60	; 0x3c
 8005d42:	42aa      	cmp	r2, r5
 8005d44:	bf08      	it	eq
 8005d46:	f043 0301 	orreq.w	r3, r3, #1
 8005d4a:	4282      	cmp	r2, r0
 8005d4c:	bf08      	it	eq
 8005d4e:	f043 0301 	orreq.w	r3, r3, #1
 8005d52:	428a      	cmp	r2, r1
 8005d54:	bf08      	it	eq
 8005d56:	f043 0301 	orreq.w	r3, r3, #1
 8005d5a:	b913      	cbnz	r3, 8005d62 <HAL_DMA_Init+0x22a>
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_DMA_Init+0x294>)
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d118      	bne.n	8005d94 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7ff fe7c 	bl	8005a60 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d069      	beq.n	8005e42 <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005d72:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d74:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d76:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d7a:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d7c:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d7e:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005d80:	d866      	bhi.n	8005e50 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d82:	1e50      	subs	r0, r2, #1
 8005d84:	2807      	cmp	r0, #7
 8005d86:	d97c      	bls.n	8005e82 <HAL_DMA_Init+0x34a>
 8005d88:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005d8a:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d8e:	2000      	movs	r0, #0
 8005d90:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d92:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d94:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005d96:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d98:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005d9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da0:	40020010 	.word	0x40020010
 8005da4:	40020040 	.word	0x40020040
 8005da8:	40020070 	.word	0x40020070
 8005dac:	400204b8 	.word	0x400204b8
 8005db0:	fe10803f 	.word	0xfe10803f
 8005db4:	ffff0000 	.word	0xffff0000
 8005db8:	5c001000 	.word	0x5c001000
 8005dbc:	40020028 	.word	0x40020028
 8005dc0:	40020058 	.word	0x40020058
 8005dc4:	5802541c 	.word	0x5802541c
 8005dc8:	58025430 	.word	0x58025430
 8005dcc:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005dd0:	6861      	ldr	r1, [r4, #4]
 8005dd2:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 8005dd6:	2e1f      	cmp	r6, #31
 8005dd8:	d92d      	bls.n	8005e36 <HAL_DMA_Init+0x2fe>
 8005dda:	394f      	subs	r1, #79	; 0x4f
 8005ddc:	2903      	cmp	r1, #3
 8005dde:	d801      	bhi.n	8005de4 <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 8005de0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005de4:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005de6:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005de8:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005dea:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005dee:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005df2:	f47f af2f 	bne.w	8005c54 <HAL_DMA_Init+0x11c>
 8005df6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8005df8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005dfa:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	f43f af29 	beq.w	8005c54 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d173      	bne.n	8005eee <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 8005e06:	2a01      	cmp	r2, #1
 8005e08:	f000 8088 	beq.w	8005f1c <HAL_DMA_Init+0x3e4>
 8005e0c:	f032 0202 	bics.w	r2, r2, #2
 8005e10:	f47f af20 	bne.w	8005c54 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e14:	01f2      	lsls	r2, r6, #7
 8005e16:	f57f af1d 	bpl.w	8005c54 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 8005e1a:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e1c:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8005e1e:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e20:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8005e22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e28:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e2a:	2303      	movs	r3, #3
        return HAL_ERROR;
 8005e2c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e2e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e36:	4970      	ldr	r1, [pc, #448]	; (8005ff8 <HAL_DMA_Init+0x4c0>)
 8005e38:	fa21 f606 	lsr.w	r6, r1, r6
 8005e3c:	07f1      	lsls	r1, r6, #31
 8005e3e:	d5d1      	bpl.n	8005de4 <HAL_DMA_Init+0x2ac>
 8005e40:	e7ce      	b.n	8005de0 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e42:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e44:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005e46:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e4a:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e4c:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e4e:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8005e50:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e52:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e56:	6763      	str	r3, [r4, #116]	; 0x74
 8005e58:	e79c      	b.n	8005d94 <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 8005e5a:	2001      	movs	r0, #1
}
 8005e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005e5e:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005e62:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e64:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005e66:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e6a:	ea46 0707 	orr.w	r7, r6, r7
 8005e6e:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005e72:	d2ad      	bcs.n	8005dd0 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005e74:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005e76:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e78:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 8005e7c:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e80:	e7ba      	b.n	8005df8 <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e82:	6821      	ldr	r1, [r4, #0]
 8005e84:	4b5d      	ldr	r3, [pc, #372]	; (8005ffc <HAL_DMA_Init+0x4c4>)
 8005e86:	4e5e      	ldr	r6, [pc, #376]	; (8006000 <HAL_DMA_Init+0x4c8>)
 8005e88:	4d5e      	ldr	r5, [pc, #376]	; (8006004 <HAL_DMA_Init+0x4cc>)
 8005e8a:	42b1      	cmp	r1, r6
 8005e8c:	bf18      	it	ne
 8005e8e:	4299      	cmpne	r1, r3
 8005e90:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	42a9      	cmp	r1, r5
 8005e9c:	bf08      	it	eq
 8005e9e:	f043 0301 	orreq.w	r3, r3, #1
 8005ea2:	3528      	adds	r5, #40	; 0x28
 8005ea4:	42b1      	cmp	r1, r6
 8005ea6:	bf08      	it	eq
 8005ea8:	f043 0301 	orreq.w	r3, r3, #1
 8005eac:	3628      	adds	r6, #40	; 0x28
 8005eae:	42a9      	cmp	r1, r5
 8005eb0:	bf08      	it	eq
 8005eb2:	f043 0301 	orreq.w	r3, r3, #1
 8005eb6:	3528      	adds	r5, #40	; 0x28
 8005eb8:	42b1      	cmp	r1, r6
 8005eba:	bf08      	it	eq
 8005ebc:	f043 0301 	orreq.w	r3, r3, #1
 8005ec0:	42a9      	cmp	r1, r5
 8005ec2:	bf08      	it	eq
 8005ec4:	f043 0301 	orreq.w	r3, r3, #1
 8005ec8:	b93b      	cbnz	r3, 8005eda <HAL_DMA_Init+0x3a2>
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <HAL_DMA_Init+0x4d0>)
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	d004      	beq.n	8005eda <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ed0:	4b4e      	ldr	r3, [pc, #312]	; (800600c <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ed2:	494f      	ldr	r1, [pc, #316]	; (8006010 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ed8:	e003      	b.n	8005ee2 <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eda:	4b4e      	ldr	r3, [pc, #312]	; (8006014 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005edc:	494e      	ldr	r1, [pc, #312]	; (8006018 <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4082      	lsls	r2, r0
 8005ee6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8005eea:	6762      	str	r2, [r4, #116]	; 0x74
 8005eec:	e74f      	b.n	8005d8e <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005eee:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005ef2:	d004      	beq.n	8005efe <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 8005ef4:	2a02      	cmp	r2, #2
 8005ef6:	d990      	bls.n	8005e1a <HAL_DMA_Init+0x2e2>
 8005ef8:	2a03      	cmp	r2, #3
 8005efa:	d08b      	beq.n	8005e14 <HAL_DMA_Init+0x2dc>
 8005efc:	e6aa      	b.n	8005c54 <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 8005efe:	2a03      	cmp	r2, #3
 8005f00:	f63f aea8 	bhi.w	8005c54 <HAL_DMA_Init+0x11c>
 8005f04:	a001      	add	r0, pc, #4	; (adr r0, 8005f0c <HAL_DMA_Init+0x3d4>)
 8005f06:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005e1b 	.word	0x08005e1b
 8005f10:	08005e15 	.word	0x08005e15
 8005f14:	08005e1b 	.word	0x08005e1b
 8005f18:	08005f1d 	.word	0x08005f1d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f1c:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8005f20:	f47f ae98 	bne.w	8005c54 <HAL_DMA_Init+0x11c>
 8005f24:	e779      	b.n	8005e1a <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f26:	4a35      	ldr	r2, [pc, #212]	; (8005ffc <HAL_DMA_Init+0x4c4>)
 8005f28:	4935      	ldr	r1, [pc, #212]	; (8006000 <HAL_DMA_Init+0x4c8>)
 8005f2a:	4836      	ldr	r0, [pc, #216]	; (8006004 <HAL_DMA_Init+0x4cc>)
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf18      	it	ne
 8005f30:	4293      	cmpne	r3, r2
 8005f32:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8005f36:	4d39      	ldr	r5, [pc, #228]	; (800601c <HAL_DMA_Init+0x4e4>)
 8005f38:	bf0c      	ite	eq
 8005f3a:	2201      	moveq	r2, #1
 8005f3c:	2200      	movne	r2, #0
 8005f3e:	4283      	cmp	r3, r0
 8005f40:	bf08      	it	eq
 8005f42:	f042 0201 	orreq.w	r2, r2, #1
 8005f46:	303c      	adds	r0, #60	; 0x3c
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf08      	it	eq
 8005f4c:	f042 0201 	orreq.w	r2, r2, #1
 8005f50:	313c      	adds	r1, #60	; 0x3c
 8005f52:	42ab      	cmp	r3, r5
 8005f54:	bf08      	it	eq
 8005f56:	f042 0201 	orreq.w	r2, r2, #1
 8005f5a:	4283      	cmp	r3, r0
 8005f5c:	bf08      	it	eq
 8005f5e:	f042 0201 	orreq.w	r2, r2, #1
 8005f62:	428b      	cmp	r3, r1
 8005f64:	bf08      	it	eq
 8005f66:	f042 0201 	orreq.w	r2, r2, #1
 8005f6a:	b912      	cbnz	r2, 8005f72 <HAL_DMA_Init+0x43a>
 8005f6c:	4a26      	ldr	r2, [pc, #152]	; (8006008 <HAL_DMA_Init+0x4d0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d13a      	bne.n	8005fe8 <HAL_DMA_Init+0x4b0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f72:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8005f74:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005f76:	4f2a      	ldr	r7, [pc, #168]	; (8006020 <HAL_DMA_Init+0x4e8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f78:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f7c:	68a2      	ldr	r2, [r4, #8]
    __HAL_UNLOCK(hdma);
 8005f7e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f82:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005f84:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005f86:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f8a:	d02b      	beq.n	8005fe4 <HAL_DMA_Init+0x4ac>
 8005f8c:	2a80      	cmp	r2, #128	; 0x80
 8005f8e:	bf0c      	ite	eq
 8005f90:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 8005f94:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f96:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f98:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f9a:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f9c:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f9e:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005fa0:	f8df c084 	ldr.w	ip, [pc, #132]	; 8006028 <HAL_DMA_Init+0x4f0>
 8005fa4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005fa8:	69a6      	ldr	r6, [r4, #24]
 8005faa:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005fae:	69e5      	ldr	r5, [r4, #28]
 8005fb0:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005fb4:	4e1b      	ldr	r6, [pc, #108]	; (8006024 <HAL_DMA_Init+0x4ec>)
 8005fb6:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8005fba:	441e      	add	r6, r3
 8005fbc:	6a25      	ldr	r5, [r4, #32]
 8005fbe:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8005fc2:	fbac 6506 	umull	r6, r5, ip, r6
 8005fc6:	433a      	orrs	r2, r7
 8005fc8:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005fca:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005fcc:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005fce:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005fd0:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fd2:	f7ff fcc9 	bl	8005968 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f002 021f 	and.w	r2, r2, #31
 8005fde:	4093      	lsls	r3, r2
 8005fe0:	6043      	str	r3, [r0, #4]
 8005fe2:	e641      	b.n	8005c68 <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005fe4:	2110      	movs	r1, #16
 8005fe6:	e7d6      	b.n	8005f96 <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fe8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005fea:	2303      	movs	r3, #3
    return HAL_ERROR;
 8005fec:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fee:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005ff0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	c3c0003f 	.word	0xc3c0003f
 8005ffc:	58025408 	.word	0x58025408
 8006000:	5802541c 	.word	0x5802541c
 8006004:	58025430 	.word	0x58025430
 8006008:	58025494 	.word	0x58025494
 800600c:	1000823f 	.word	0x1000823f
 8006010:	40020940 	.word	0x40020940
 8006014:	1600963f 	.word	0x1600963f
 8006018:	58025940 	.word	0x58025940
 800601c:	58025458 	.word	0x58025458
 8006020:	fffe000f 	.word	0xfffe000f
 8006024:	a7fdabf8 	.word	0xa7fdabf8
 8006028:	cccccccd 	.word	0xcccccccd

0800602c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800602c:	2800      	cmp	r0, #0
 800602e:	f000 818a 	beq.w	8006346 <HAL_DMA_Start_IT+0x31a>
{
 8006032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006036:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006038:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800603c:	2801      	cmp	r0, #1
 800603e:	f000 8184 	beq.w	800634a <HAL_DMA_Start_IT+0x31e>
 8006042:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006044:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 8006048:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 800604a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800604e:	d007      	beq.n	8006060 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8006050:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006052:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8006056:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800605a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8006060:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8006062:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 8006066:	4858      	ldr	r0, [pc, #352]	; (80061c8 <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006068:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 800606a:	4e58      	ldr	r6, [pc, #352]	; (80061cc <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800606c:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006070:	42b5      	cmp	r5, r6
 8006072:	bf18      	it	ne
 8006074:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 8006076:	f8df c15c 	ldr.w	ip, [pc, #348]	; 80061d4 <HAL_DMA_Start_IT+0x1a8>
 800607a:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800607e:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8006080:	bf0c      	ite	eq
 8006082:	2001      	moveq	r0, #1
 8006084:	2000      	movne	r0, #0
 8006086:	4f52      	ldr	r7, [pc, #328]	; (80061d0 <HAL_DMA_Start_IT+0x1a4>)
 8006088:	4565      	cmp	r5, ip
 800608a:	bf08      	it	eq
 800608c:	f040 0001 	orreq.w	r0, r0, #1
 8006090:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006094:	42b5      	cmp	r5, r6
 8006096:	bf08      	it	eq
 8006098:	f040 0001 	orreq.w	r0, r0, #1
 800609c:	f506 7662 	add.w	r6, r6, #904	; 0x388
 80060a0:	4565      	cmp	r5, ip
 80060a2:	bf08      	it	eq
 80060a4:	f040 0001 	orreq.w	r0, r0, #1
 80060a8:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 80060ac:	42bd      	cmp	r5, r7
 80060ae:	bf08      	it	eq
 80060b0:	f040 0001 	orreq.w	r0, r0, #1
 80060b4:	f507 7762 	add.w	r7, r7, #904	; 0x388
 80060b8:	42b5      	cmp	r5, r6
 80060ba:	bf08      	it	eq
 80060bc:	f040 0001 	orreq.w	r0, r0, #1
 80060c0:	3648      	adds	r6, #72	; 0x48
 80060c2:	4565      	cmp	r5, ip
 80060c4:	bf08      	it	eq
 80060c6:	f040 0001 	orreq.w	r0, r0, #1
 80060ca:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 80060ce:	42bd      	cmp	r5, r7
 80060d0:	bf08      	it	eq
 80060d2:	f040 0001 	orreq.w	r0, r0, #1
 80060d6:	3748      	adds	r7, #72	; 0x48
 80060d8:	42b5      	cmp	r5, r6
 80060da:	bf08      	it	eq
 80060dc:	f040 0001 	orreq.w	r0, r0, #1
 80060e0:	3648      	adds	r6, #72	; 0x48
 80060e2:	4565      	cmp	r5, ip
 80060e4:	bf08      	it	eq
 80060e6:	f040 0001 	orreq.w	r0, r0, #1
 80060ea:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 80060ee:	42bd      	cmp	r5, r7
 80060f0:	bf08      	it	eq
 80060f2:	f040 0001 	orreq.w	r0, r0, #1
 80060f6:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 80060fa:	42b5      	cmp	r5, r6
 80060fc:	bf08      	it	eq
 80060fe:	f040 0001 	orreq.w	r0, r0, #1
 8006102:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 8006106:	4565      	cmp	r5, ip
 8006108:	bf14      	ite	ne
 800610a:	4682      	movne	sl, r0
 800610c:	f040 0a01 	orreq.w	sl, r0, #1
 8006110:	42b5      	cmp	r5, r6
 8006112:	bf18      	it	ne
 8006114:	42bd      	cmpne	r5, r7
 8006116:	bf0c      	ite	eq
 8006118:	2601      	moveq	r6, #1
 800611a:	2600      	movne	r6, #0
 800611c:	d002      	beq.n	8006124 <HAL_DMA_Start_IT+0xf8>
 800611e:	f1ba 0f00 	cmp.w	sl, #0
 8006122:	d059      	beq.n	80061d8 <HAL_DMA_Start_IT+0x1ac>
 8006124:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006126:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800612a:	f027 0701 	bic.w	r7, r7, #1
 800612e:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006130:	2e00      	cmp	r6, #0
 8006132:	f000 8084 	beq.w	800623e <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006136:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8006138:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 800613c:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800613e:	f1be 0f00 	cmp.w	lr, #0
 8006142:	d002      	beq.n	800614a <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006144:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 8006148:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800614a:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800614c:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006150:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006154:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006158:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800615c:	fa09 f707 	lsl.w	r7, r9, r7
 8006160:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006164:	682f      	ldr	r7, [r5, #0]
 8006166:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800616a:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800616c:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800616e:	f000 80ef 	beq.w	8006350 <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006172:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006174:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006176:	b91e      	cbnz	r6, 8006180 <HAL_DMA_Start_IT+0x154>
 8006178:	f1ba 0f00 	cmp.w	sl, #0
 800617c:	f000 80ee 	beq.w	800635c <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006180:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8006182:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006184:	f023 031e 	bic.w	r3, r3, #30
 8006188:	f043 0316 	orr.w	r3, r3, #22
 800618c:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800618e:	b11a      	cbz	r2, 8006198 <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	f043 0308 	orr.w	r3, r3, #8
 8006196:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006198:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	03d2      	lsls	r2, r2, #15
 800619e:	d503      	bpl.n	80061a8 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061a6:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80061a8:	f1be 0f00 	cmp.w	lr, #0
 80061ac:	d005      	beq.n	80061ba <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061ae:	f8de 3000 	ldr.w	r3, [lr]
 80061b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b6:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 80061ba:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	602b      	str	r3, [r5, #0]
}
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	40020040 	.word	0x40020040
 80061cc:	40020058 	.word	0x40020058
 80061d0:	400200b8 	.word	0x400200b8
 80061d4:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061d8:	4f65      	ldr	r7, [pc, #404]	; (8006370 <HAL_DMA_Start_IT+0x344>)
 80061da:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8006378 <HAL_DMA_Start_IT+0x34c>
 80061de:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800637c <HAL_DMA_Start_IT+0x350>
 80061e2:	4575      	cmp	r5, lr
 80061e4:	bf18      	it	ne
 80061e6:	42bd      	cmpne	r5, r7
 80061e8:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 80061ec:	bf0c      	ite	eq
 80061ee:	2701      	moveq	r7, #1
 80061f0:	2700      	movne	r7, #0
 80061f2:	4565      	cmp	r5, ip
 80061f4:	bf08      	it	eq
 80061f6:	f047 0701 	orreq.w	r7, r7, #1
 80061fa:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 80061fe:	4575      	cmp	r5, lr
 8006200:	bf08      	it	eq
 8006202:	f047 0701 	orreq.w	r7, r7, #1
 8006206:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800620a:	4565      	cmp	r5, ip
 800620c:	bf08      	it	eq
 800620e:	f047 0701 	orreq.w	r7, r7, #1
 8006212:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 8006216:	4575      	cmp	r5, lr
 8006218:	bf08      	it	eq
 800621a:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800621e:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006222:	4565      	cmp	r5, ip
 8006224:	bf08      	it	eq
 8006226:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800622a:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622e:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8006232:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006236:	b917      	cbnz	r7, 800623e <HAL_DMA_Start_IT+0x212>
 8006238:	4f4e      	ldr	r7, [pc, #312]	; (8006374 <HAL_DMA_Start_IT+0x348>)
 800623a:	42bd      	cmp	r5, r7
 800623c:	d10d      	bne.n	800625a <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800623e:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8006240:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 8006244:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8006246:	f1be 0f00 	cmp.w	lr, #0
 800624a:	d002      	beq.n	8006252 <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800624c:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 8006250:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006252:	f1ba 0f00 	cmp.w	sl, #0
 8006256:	f47f af78 	bne.w	800614a <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800625a:	4f47      	ldr	r7, [pc, #284]	; (8006378 <HAL_DMA_Start_IT+0x34c>)
 800625c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8006370 <HAL_DMA_Start_IT+0x344>
 8006260:	f8df e118 	ldr.w	lr, [pc, #280]	; 800637c <HAL_DMA_Start_IT+0x350>
 8006264:	4545      	cmp	r5, r8
 8006266:	bf18      	it	ne
 8006268:	42bd      	cmpne	r5, r7
 800626a:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800626e:	bf0c      	ite	eq
 8006270:	2701      	moveq	r7, #1
 8006272:	2700      	movne	r7, #0
 8006274:	4575      	cmp	r5, lr
 8006276:	bf08      	it	eq
 8006278:	f047 0701 	orreq.w	r7, r7, #1
 800627c:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8006280:	4545      	cmp	r5, r8
 8006282:	bf08      	it	eq
 8006284:	f047 0701 	orreq.w	r7, r7, #1
 8006288:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800628c:	4575      	cmp	r5, lr
 800628e:	bf08      	it	eq
 8006290:	f047 0701 	orreq.w	r7, r7, #1
 8006294:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8006298:	4545      	cmp	r5, r8
 800629a:	bf08      	it	eq
 800629c:	f047 0701 	orreq.w	r7, r7, #1
 80062a0:	4575      	cmp	r5, lr
 80062a2:	bf08      	it	eq
 80062a4:	f047 0701 	orreq.w	r7, r7, #1
 80062a8:	b917      	cbnz	r7, 80062b0 <HAL_DMA_Start_IT+0x284>
 80062aa:	4f32      	ldr	r7, [pc, #200]	; (8006374 <HAL_DMA_Start_IT+0x348>)
 80062ac:	42bd      	cmp	r5, r7
 80062ae:	d155      	bne.n	800635c <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062b0:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 80062b2:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062b6:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062ba:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062be:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062c2:	fa0e f707 	lsl.w	r7, lr, r7
 80062c6:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062ca:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062cc:	d043      	beq.n	8006356 <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062ce:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062d0:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062d2:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80062d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062d6:	f023 030e 	bic.w	r3, r3, #14
 80062da:	f043 030a 	orr.w	r3, r3, #10
 80062de:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80062e0:	2a00      	cmp	r2, #0
 80062e2:	d02d      	beq.n	8006340 <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	f043 0304 	orr.w	r3, r3, #4
 80062ea:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ec:	4b20      	ldr	r3, [pc, #128]	; (8006370 <HAL_DMA_Start_IT+0x344>)
 80062ee:	4a22      	ldr	r2, [pc, #136]	; (8006378 <HAL_DMA_Start_IT+0x34c>)
 80062f0:	4922      	ldr	r1, [pc, #136]	; (800637c <HAL_DMA_Start_IT+0x350>)
 80062f2:	4295      	cmp	r5, r2
 80062f4:	bf18      	it	ne
 80062f6:	429d      	cmpne	r5, r3
 80062f8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80062fc:	bf0c      	ite	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	2300      	movne	r3, #0
 8006302:	428d      	cmp	r5, r1
 8006304:	bf08      	it	eq
 8006306:	f043 0301 	orreq.w	r3, r3, #1
 800630a:	3128      	adds	r1, #40	; 0x28
 800630c:	4295      	cmp	r5, r2
 800630e:	bf08      	it	eq
 8006310:	f043 0301 	orreq.w	r3, r3, #1
 8006314:	3228      	adds	r2, #40	; 0x28
 8006316:	428d      	cmp	r5, r1
 8006318:	bf08      	it	eq
 800631a:	f043 0301 	orreq.w	r3, r3, #1
 800631e:	3128      	adds	r1, #40	; 0x28
 8006320:	4295      	cmp	r5, r2
 8006322:	bf08      	it	eq
 8006324:	f043 0301 	orreq.w	r3, r3, #1
 8006328:	3228      	adds	r2, #40	; 0x28
 800632a:	428d      	cmp	r5, r1
 800632c:	bf08      	it	eq
 800632e:	f043 0301 	orreq.w	r3, r3, #1
 8006332:	4295      	cmp	r5, r2
 8006334:	bf08      	it	eq
 8006336:	f043 0301 	orreq.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	f43f af3d 	beq.w	80061ba <HAL_DMA_Start_IT+0x18e>
 8006340:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 8006344:	e728      	b.n	8006198 <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 8006346:	2001      	movs	r0, #1
}
 8006348:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800634a:	2002      	movs	r0, #2
}
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006350:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006352:	60e9      	str	r1, [r5, #12]
 8006354:	e70f      	b.n	8006176 <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006356:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006358:	60e9      	str	r1, [r5, #12]
 800635a:	e7ba      	b.n	80062d2 <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800635c:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800635e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006360:	f023 030e 	bic.w	r3, r3, #14
 8006364:	f043 030a 	orr.w	r3, r3, #10
 8006368:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800636a:	2a00      	cmp	r2, #0
 800636c:	d1ba      	bne.n	80062e4 <HAL_DMA_Start_IT+0x2b8>
 800636e:	e7bd      	b.n	80062ec <HAL_DMA_Start_IT+0x2c0>
 8006370:	5802541c 	.word	0x5802541c
 8006374:	58025494 	.word	0x58025494
 8006378:	58025408 	.word	0x58025408
 800637c:	58025430 	.word	0x58025430

08006380 <HAL_DMA_Abort>:
{
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006384:	f7fd ff02 	bl	800418c <HAL_GetTick>
  if(hdma == NULL)
 8006388:	2d00      	cmp	r5, #0
 800638a:	f000 8128 	beq.w	80065de <HAL_DMA_Abort+0x25e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800638e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8006392:	2b02      	cmp	r3, #2
 8006394:	f040 80e1 	bne.w	800655a <HAL_DMA_Abort+0x1da>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006398:	682c      	ldr	r4, [r5, #0]
 800639a:	4606      	mov	r6, r0
 800639c:	4b91      	ldr	r3, [pc, #580]	; (80065e4 <HAL_DMA_Abort+0x264>)
 800639e:	4992      	ldr	r1, [pc, #584]	; (80065e8 <HAL_DMA_Abort+0x268>)
 80063a0:	4a92      	ldr	r2, [pc, #584]	; (80065ec <HAL_DMA_Abort+0x26c>)
 80063a2:	428c      	cmp	r4, r1
 80063a4:	bf18      	it	ne
 80063a6:	429c      	cmpne	r4, r3
 80063a8:	f101 0148 	add.w	r1, r1, #72	; 0x48
 80063ac:	4890      	ldr	r0, [pc, #576]	; (80065f0 <HAL_DMA_Abort+0x270>)
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	4294      	cmp	r4, r2
 80063b6:	bf08      	it	eq
 80063b8:	f043 0301 	orreq.w	r3, r3, #1
 80063bc:	3248      	adds	r2, #72	; 0x48
 80063be:	428c      	cmp	r4, r1
 80063c0:	bf08      	it	eq
 80063c2:	f043 0301 	orreq.w	r3, r3, #1
 80063c6:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80063ca:	4284      	cmp	r4, r0
 80063cc:	bf08      	it	eq
 80063ce:	f043 0301 	orreq.w	r3, r3, #1
 80063d2:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80063d6:	4294      	cmp	r4, r2
 80063d8:	bf08      	it	eq
 80063da:	f043 0301 	orreq.w	r3, r3, #1
 80063de:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80063e2:	428c      	cmp	r4, r1
 80063e4:	bf08      	it	eq
 80063e6:	f043 0301 	orreq.w	r3, r3, #1
 80063ea:	3148      	adds	r1, #72	; 0x48
 80063ec:	4284      	cmp	r4, r0
 80063ee:	bf08      	it	eq
 80063f0:	f043 0301 	orreq.w	r3, r3, #1
 80063f4:	3048      	adds	r0, #72	; 0x48
 80063f6:	4294      	cmp	r4, r2
 80063f8:	bf08      	it	eq
 80063fa:	f043 0301 	orreq.w	r3, r3, #1
 80063fe:	3248      	adds	r2, #72	; 0x48
 8006400:	428c      	cmp	r4, r1
 8006402:	bf08      	it	eq
 8006404:	f043 0301 	orreq.w	r3, r3, #1
 8006408:	3148      	adds	r1, #72	; 0x48
 800640a:	4284      	cmp	r4, r0
 800640c:	bf08      	it	eq
 800640e:	f043 0301 	orreq.w	r3, r3, #1
 8006412:	3048      	adds	r0, #72	; 0x48
 8006414:	4294      	cmp	r4, r2
 8006416:	bf08      	it	eq
 8006418:	f043 0301 	orreq.w	r3, r3, #1
 800641c:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8006420:	428c      	cmp	r4, r1
 8006422:	bf08      	it	eq
 8006424:	f043 0301 	orreq.w	r3, r3, #1
 8006428:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800642c:	4284      	cmp	r4, r0
 800642e:	bf08      	it	eq
 8006430:	f043 0301 	orreq.w	r3, r3, #1
 8006434:	428c      	cmp	r4, r1
 8006436:	bf18      	it	ne
 8006438:	4294      	cmpne	r4, r2
 800643a:	bf0c      	ite	eq
 800643c:	2201      	moveq	r2, #1
 800643e:	2200      	movne	r2, #0
 8006440:	d002      	beq.n	8006448 <HAL_DMA_Abort+0xc8>
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8090 	beq.w	8006568 <HAL_DMA_Abort+0x1e8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006448:	6821      	ldr	r1, [r4, #0]
 800644a:	f021 011e 	bic.w	r1, r1, #30
 800644e:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006450:	6961      	ldr	r1, [r4, #20]
 8006452:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006456:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006458:	2a00      	cmp	r2, #0
 800645a:	f000 80b0 	beq.w	80065be <HAL_DMA_Abort+0x23e>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800645e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006466:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	e005      	b.n	800647e <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006472:	f7fd fe8b 	bl	800418c <HAL_GetTick>
 8006476:	1b83      	subs	r3, r0, r6
 8006478:	2b05      	cmp	r3, #5
 800647a:	f200 80a6 	bhi.w	80065ca <HAL_DMA_Abort+0x24a>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	07db      	lsls	r3, r3, #31
 8006482:	d4f6      	bmi.n	8006472 <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006484:	682a      	ldr	r2, [r5, #0]
 8006486:	4b57      	ldr	r3, [pc, #348]	; (80065e4 <HAL_DMA_Abort+0x264>)
 8006488:	4957      	ldr	r1, [pc, #348]	; (80065e8 <HAL_DMA_Abort+0x268>)
 800648a:	4c58      	ldr	r4, [pc, #352]	; (80065ec <HAL_DMA_Abort+0x26c>)
 800648c:	428a      	cmp	r2, r1
 800648e:	bf18      	it	ne
 8006490:	429a      	cmpne	r2, r3
 8006492:	4858      	ldr	r0, [pc, #352]	; (80065f4 <HAL_DMA_Abort+0x274>)
 8006494:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8006498:	bf0c      	ite	eq
 800649a:	2301      	moveq	r3, #1
 800649c:	2300      	movne	r3, #0
 800649e:	42a2      	cmp	r2, r4
 80064a0:	bf08      	it	eq
 80064a2:	f043 0301 	orreq.w	r3, r3, #1
 80064a6:	3448      	adds	r4, #72	; 0x48
 80064a8:	4282      	cmp	r2, r0
 80064aa:	bf08      	it	eq
 80064ac:	f043 0301 	orreq.w	r3, r3, #1
 80064b0:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80064b4:	428a      	cmp	r2, r1
 80064b6:	bf08      	it	eq
 80064b8:	f043 0301 	orreq.w	r3, r3, #1
 80064bc:	f501 7162 	add.w	r1, r1, #904	; 0x388
 80064c0:	42a2      	cmp	r2, r4
 80064c2:	bf08      	it	eq
 80064c4:	f043 0301 	orreq.w	r3, r3, #1
 80064c8:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80064cc:	4282      	cmp	r2, r0
 80064ce:	bf08      	it	eq
 80064d0:	f043 0301 	orreq.w	r3, r3, #1
 80064d4:	3048      	adds	r0, #72	; 0x48
 80064d6:	428a      	cmp	r2, r1
 80064d8:	bf08      	it	eq
 80064da:	f043 0301 	orreq.w	r3, r3, #1
 80064de:	3148      	adds	r1, #72	; 0x48
 80064e0:	42a2      	cmp	r2, r4
 80064e2:	bf08      	it	eq
 80064e4:	f043 0301 	orreq.w	r3, r3, #1
 80064e8:	3448      	adds	r4, #72	; 0x48
 80064ea:	4282      	cmp	r2, r0
 80064ec:	bf08      	it	eq
 80064ee:	f043 0301 	orreq.w	r3, r3, #1
 80064f2:	3048      	adds	r0, #72	; 0x48
 80064f4:	428a      	cmp	r2, r1
 80064f6:	bf08      	it	eq
 80064f8:	f043 0301 	orreq.w	r3, r3, #1
 80064fc:	3148      	adds	r1, #72	; 0x48
 80064fe:	42a2      	cmp	r2, r4
 8006500:	bf08      	it	eq
 8006502:	f043 0301 	orreq.w	r3, r3, #1
 8006506:	4282      	cmp	r2, r0
 8006508:	bf08      	it	eq
 800650a:	f043 0301 	orreq.w	r3, r3, #1
 800650e:	428a      	cmp	r2, r1
 8006510:	bf08      	it	eq
 8006512:	f043 0301 	orreq.w	r3, r3, #1
 8006516:	b933      	cbnz	r3, 8006526 <HAL_DMA_Abort+0x1a6>
 8006518:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800651c:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <HAL_DMA_Abort+0x278>)
 800651e:	429a      	cmp	r2, r3
 8006520:	bf18      	it	ne
 8006522:	428a      	cmpne	r2, r1
 8006524:	d172      	bne.n	800660c <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006526:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8006528:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800652a:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800652c:	f002 021f 	and.w	r2, r2, #31
 8006530:	4093      	lsls	r3, r2
 8006532:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8006534:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006536:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800653a:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800653c:	b133      	cbz	r3, 800654c <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800653e:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006540:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8006542:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006548:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800654a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800654c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800654e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8006550:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8006554:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 8006558:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800655a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800655c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800655e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006560:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8006562:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8006566:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006568:	4a24      	ldr	r2, [pc, #144]	; (80065fc <HAL_DMA_Abort+0x27c>)
 800656a:	4925      	ldr	r1, [pc, #148]	; (8006600 <HAL_DMA_Abort+0x280>)
 800656c:	4825      	ldr	r0, [pc, #148]	; (8006604 <HAL_DMA_Abort+0x284>)
 800656e:	428c      	cmp	r4, r1
 8006570:	bf18      	it	ne
 8006572:	4294      	cmpne	r4, r2
 8006574:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 8006578:	bf0c      	ite	eq
 800657a:	2201      	moveq	r2, #1
 800657c:	2200      	movne	r2, #0
 800657e:	4284      	cmp	r4, r0
 8006580:	bf08      	it	eq
 8006582:	f042 0201 	orreq.w	r2, r2, #1
 8006586:	3028      	adds	r0, #40	; 0x28
 8006588:	428c      	cmp	r4, r1
 800658a:	bf08      	it	eq
 800658c:	f042 0201 	orreq.w	r2, r2, #1
 8006590:	3128      	adds	r1, #40	; 0x28
 8006592:	4284      	cmp	r4, r0
 8006594:	bf08      	it	eq
 8006596:	f042 0201 	orreq.w	r2, r2, #1
 800659a:	3028      	adds	r0, #40	; 0x28
 800659c:	428c      	cmp	r4, r1
 800659e:	bf08      	it	eq
 80065a0:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065a4:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065a6:	4284      	cmp	r4, r0
 80065a8:	bf08      	it	eq
 80065aa:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065ae:	f021 010e 	bic.w	r1, r1, #14
 80065b2:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065b4:	b91a      	cbnz	r2, 80065be <HAL_DMA_Abort+0x23e>
 80065b6:	4a14      	ldr	r2, [pc, #80]	; (8006608 <HAL_DMA_Abort+0x288>)
 80065b8:	4294      	cmp	r4, r2
 80065ba:	f47f af55 	bne.w	8006468 <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065be:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80065c0:	680a      	ldr	r2, [r1, #0]
 80065c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c6:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80065c8:	e74e      	b.n	8006468 <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065ca:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 80065cc:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 80065ce:	2303      	movs	r3, #3
        return HAL_ERROR;
 80065d0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065d2:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80065d4:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80065d8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80065de:	2001      	movs	r0, #1
}
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	bf00      	nop
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020040 	.word	0x40020040
 80065ec:	40020070 	.word	0x40020070
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	40020088 	.word	0x40020088
 80065f8:	40020028 	.word	0x40020028
 80065fc:	5802541c 	.word	0x5802541c
 8006600:	58025408 	.word	0x58025408
 8006604:	58025430 	.word	0x58025430
 8006608:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800660c:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8006610:	4b18      	ldr	r3, [pc, #96]	; (8006674 <HAL_DMA_Abort+0x2f4>)
 8006612:	4819      	ldr	r0, [pc, #100]	; (8006678 <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006614:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006616:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800661a:	42a2      	cmp	r2, r4
 800661c:	bf18      	it	ne
 800661e:	429a      	cmpne	r2, r3
 8006620:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 8006624:	bf0c      	ite	eq
 8006626:	2301      	moveq	r3, #1
 8006628:	2300      	movne	r3, #0
 800662a:	4282      	cmp	r2, r0
 800662c:	bf08      	it	eq
 800662e:	f043 0301 	orreq.w	r3, r3, #1
 8006632:	3028      	adds	r0, #40	; 0x28
 8006634:	42a2      	cmp	r2, r4
 8006636:	bf08      	it	eq
 8006638:	f043 0301 	orreq.w	r3, r3, #1
 800663c:	3428      	adds	r4, #40	; 0x28
 800663e:	4282      	cmp	r2, r0
 8006640:	bf08      	it	eq
 8006642:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006646:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006648:	42a2      	cmp	r2, r4
 800664a:	bf08      	it	eq
 800664c:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006650:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006654:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006656:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006658:	42a2      	cmp	r2, r4
 800665a:	bf08      	it	eq
 800665c:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006660:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006662:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006664:	2b00      	cmp	r3, #0
 8006666:	f47f af65 	bne.w	8006534 <HAL_DMA_Abort+0x1b4>
 800666a:	4b04      	ldr	r3, [pc, #16]	; (800667c <HAL_DMA_Abort+0x2fc>)
 800666c:	429a      	cmp	r2, r3
 800666e:	f43f af61 	beq.w	8006534 <HAL_DMA_Abort+0x1b4>
 8006672:	e76b      	b.n	800654c <HAL_DMA_Abort+0x1cc>
 8006674:	5802541c 	.word	0x5802541c
 8006678:	58025430 	.word	0x58025430
 800667c:	58025494 	.word	0x58025494

08006680 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8006680:	2800      	cmp	r0, #0
 8006682:	d060      	beq.n	8006746 <HAL_DMA_Abort_IT+0xc6>
{
 8006684:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006686:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800668a:	4603      	mov	r3, r0
 800668c:	2a02      	cmp	r2, #2
 800668e:	d156      	bne.n	800673e <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006690:	6801      	ldr	r1, [r0, #0]
 8006692:	4a59      	ldr	r2, [pc, #356]	; (80067f8 <HAL_DMA_Abort_IT+0x178>)
 8006694:	4291      	cmp	r1, r2
 8006696:	d049      	beq.n	800672c <HAL_DMA_Abort_IT+0xac>
 8006698:	3218      	adds	r2, #24
 800669a:	4291      	cmp	r1, r2
 800669c:	d046      	beq.n	800672c <HAL_DMA_Abort_IT+0xac>
 800669e:	3230      	adds	r2, #48	; 0x30
 80066a0:	4856      	ldr	r0, [pc, #344]	; (80067fc <HAL_DMA_Abort_IT+0x17c>)
 80066a2:	4c57      	ldr	r4, [pc, #348]	; (8006800 <HAL_DMA_Abort_IT+0x180>)
 80066a4:	4281      	cmp	r1, r0
 80066a6:	bf18      	it	ne
 80066a8:	4291      	cmpne	r1, r2
 80066aa:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80066ae:	4d55      	ldr	r5, [pc, #340]	; (8006804 <HAL_DMA_Abort_IT+0x184>)
 80066b0:	bf0c      	ite	eq
 80066b2:	2201      	moveq	r2, #1
 80066b4:	2200      	movne	r2, #0
 80066b6:	42a1      	cmp	r1, r4
 80066b8:	bf08      	it	eq
 80066ba:	f042 0201 	orreq.w	r2, r2, #1
 80066be:	3448      	adds	r4, #72	; 0x48
 80066c0:	4281      	cmp	r1, r0
 80066c2:	bf08      	it	eq
 80066c4:	f042 0201 	orreq.w	r2, r2, #1
 80066c8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80066cc:	42a9      	cmp	r1, r5
 80066ce:	bf08      	it	eq
 80066d0:	f042 0201 	orreq.w	r2, r2, #1
 80066d4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 80066d8:	42a1      	cmp	r1, r4
 80066da:	bf08      	it	eq
 80066dc:	f042 0201 	orreq.w	r2, r2, #1
 80066e0:	f504 7462 	add.w	r4, r4, #904	; 0x388
 80066e4:	4281      	cmp	r1, r0
 80066e6:	bf08      	it	eq
 80066e8:	f042 0201 	orreq.w	r2, r2, #1
 80066ec:	3048      	adds	r0, #72	; 0x48
 80066ee:	42a9      	cmp	r1, r5
 80066f0:	bf08      	it	eq
 80066f2:	f042 0201 	orreq.w	r2, r2, #1
 80066f6:	3548      	adds	r5, #72	; 0x48
 80066f8:	42a1      	cmp	r1, r4
 80066fa:	bf08      	it	eq
 80066fc:	f042 0201 	orreq.w	r2, r2, #1
 8006700:	3448      	adds	r4, #72	; 0x48
 8006702:	4281      	cmp	r1, r0
 8006704:	bf08      	it	eq
 8006706:	f042 0201 	orreq.w	r2, r2, #1
 800670a:	3048      	adds	r0, #72	; 0x48
 800670c:	42a9      	cmp	r1, r5
 800670e:	bf08      	it	eq
 8006710:	f042 0201 	orreq.w	r2, r2, #1
 8006714:	42a1      	cmp	r1, r4
 8006716:	bf08      	it	eq
 8006718:	f042 0201 	orreq.w	r2, r2, #1
 800671c:	4281      	cmp	r1, r0
 800671e:	bf08      	it	eq
 8006720:	f042 0201 	orreq.w	r2, r2, #1
 8006724:	b912      	cbnz	r2, 800672c <HAL_DMA_Abort_IT+0xac>
 8006726:	4a38      	ldr	r2, [pc, #224]	; (8006808 <HAL_DMA_Abort_IT+0x188>)
 8006728:	4291      	cmp	r1, r2
 800672a:	d10e      	bne.n	800674a <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800672c:	2204      	movs	r2, #4
  return HAL_OK;
 800672e:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8006730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006734:	680b      	ldr	r3, [r1, #0]
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	600b      	str	r3, [r1, #0]
}
 800673c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800673e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8006740:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006742:	655a      	str	r2, [r3, #84]	; 0x54
}
 8006744:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006746:	2001      	movs	r0, #1
}
 8006748:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800674a:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800674e:	4a2f      	ldr	r2, [pc, #188]	; (800680c <HAL_DMA_Abort_IT+0x18c>)
 8006750:	482f      	ldr	r0, [pc, #188]	; (8006810 <HAL_DMA_Abort_IT+0x190>)
 8006752:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 8006756:	4d2f      	ldr	r5, [pc, #188]	; (8006814 <HAL_DMA_Abort_IT+0x194>)
 8006758:	42a1      	cmp	r1, r4
 800675a:	bf18      	it	ne
 800675c:	4291      	cmpne	r1, r2
 800675e:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8006762:	bf0c      	ite	eq
 8006764:	2201      	moveq	r2, #1
 8006766:	2200      	movne	r2, #0
 8006768:	4281      	cmp	r1, r0
 800676a:	bf08      	it	eq
 800676c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006770:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006772:	42a9      	cmp	r1, r5
 8006774:	bf08      	it	eq
 8006776:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800677a:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800677e:	3528      	adds	r5, #40	; 0x28
 8006780:	42a1      	cmp	r1, r4
 8006782:	bf08      	it	eq
 8006784:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006788:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800678a:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800678c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800678e:	42a9      	cmp	r1, r5
 8006790:	bf08      	it	eq
 8006792:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8006796:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800679a:	42a1      	cmp	r1, r4
 800679c:	bf08      	it	eq
 800679e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80067a2:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067a4:	b912      	cbnz	r2, 80067ac <HAL_DMA_Abort_IT+0x12c>
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_DMA_Abort_IT+0x198>)
 80067a8:	4291      	cmp	r1, r2
 80067aa:	d117      	bne.n	80067dc <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067ac:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067ae:	2101      	movs	r1, #1
 80067b0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067b2:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067b4:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067b8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067be:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c0:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067c2:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 80067c4:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067c8:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ca:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80067cc:	b132      	cbz	r2, 80067dc <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067ce:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067d0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80067d2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80067d8:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067da:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 80067dc:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80067de:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 80067e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80067e2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80067e6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80067ea:	b11a      	cbz	r2, 80067f4 <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 80067ec:	4618      	mov	r0, r3
 80067ee:	4790      	blx	r2
  return HAL_OK;
 80067f0:	4620      	mov	r0, r4
}
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80067f4:	4610      	mov	r0, r2
}
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	40020010 	.word	0x40020010
 80067fc:	40020040 	.word	0x40020040
 8006800:	40020070 	.word	0x40020070
 8006804:	400200a0 	.word	0x400200a0
 8006808:	400204b8 	.word	0x400204b8
 800680c:	5802541c 	.word	0x5802541c
 8006810:	58025430 	.word	0x58025430
 8006814:	58025444 	.word	0x58025444
 8006818:	58025494 	.word	0x58025494

0800681c <HAL_DMA_IRQHandler>:
{
 800681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006820:	4a9f      	ldr	r2, [pc, #636]	; (8006aa0 <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 8006822:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006824:	4e9f      	ldr	r6, [pc, #636]	; (8006aa4 <HAL_DMA_IRQHandler+0x288>)
{
 8006826:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006828:	6803      	ldr	r3, [r0, #0]
{
 800682a:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800682c:	499e      	ldr	r1, [pc, #632]	; (8006aa8 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800682e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006830:	4293      	cmp	r3, r2
 8006832:	bf18      	it	ne
 8006834:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 8006836:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006838:	bf08      	it	eq
 800683a:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800683c:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 800683e:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006840:	bf18      	it	ne
 8006842:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 8006844:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006846:	d04a      	beq.n	80068de <HAL_DMA_IRQHandler+0xc2>
 8006848:	3230      	adds	r2, #48	; 0x30
 800684a:	f8df e26c 	ldr.w	lr, [pc, #620]	; 8006ab8 <HAL_DMA_IRQHandler+0x29c>
 800684e:	4897      	ldr	r0, [pc, #604]	; (8006aac <HAL_DMA_IRQHandler+0x290>)
 8006850:	4573      	cmp	r3, lr
 8006852:	bf18      	it	ne
 8006854:	4293      	cmpne	r3, r2
 8006856:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800685a:	bf0c      	ite	eq
 800685c:	2201      	moveq	r2, #1
 800685e:	2200      	movne	r2, #0
 8006860:	4283      	cmp	r3, r0
 8006862:	bf08      	it	eq
 8006864:	f042 0201 	orreq.w	r2, r2, #1
 8006868:	3030      	adds	r0, #48	; 0x30
 800686a:	4573      	cmp	r3, lr
 800686c:	bf08      	it	eq
 800686e:	f042 0201 	orreq.w	r2, r2, #1
 8006872:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8006876:	4283      	cmp	r3, r0
 8006878:	bf08      	it	eq
 800687a:	f042 0201 	orreq.w	r2, r2, #1
 800687e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006882:	4573      	cmp	r3, lr
 8006884:	bf08      	it	eq
 8006886:	f042 0201 	orreq.w	r2, r2, #1
 800688a:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800688e:	4283      	cmp	r3, r0
 8006890:	bf08      	it	eq
 8006892:	f042 0201 	orreq.w	r2, r2, #1
 8006896:	3030      	adds	r0, #48	; 0x30
 8006898:	4573      	cmp	r3, lr
 800689a:	bf08      	it	eq
 800689c:	f042 0201 	orreq.w	r2, r2, #1
 80068a0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80068a4:	4283      	cmp	r3, r0
 80068a6:	bf08      	it	eq
 80068a8:	f042 0201 	orreq.w	r2, r2, #1
 80068ac:	3030      	adds	r0, #48	; 0x30
 80068ae:	4573      	cmp	r3, lr
 80068b0:	bf08      	it	eq
 80068b2:	f042 0201 	orreq.w	r2, r2, #1
 80068b6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 80068ba:	4283      	cmp	r3, r0
 80068bc:	bf08      	it	eq
 80068be:	f042 0201 	orreq.w	r2, r2, #1
 80068c2:	3030      	adds	r0, #48	; 0x30
 80068c4:	4573      	cmp	r3, lr
 80068c6:	bf08      	it	eq
 80068c8:	f042 0201 	orreq.w	r2, r2, #1
 80068cc:	4283      	cmp	r3, r0
 80068ce:	bf08      	it	eq
 80068d0:	f042 0201 	orreq.w	r2, r2, #1
 80068d4:	b91a      	cbnz	r2, 80068de <HAL_DMA_IRQHandler+0xc2>
 80068d6:	4a76      	ldr	r2, [pc, #472]	; (8006ab0 <HAL_DMA_IRQHandler+0x294>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	f040 820b 	bne.w	8006cf4 <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068de:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 80068e2:	2208      	movs	r2, #8
 80068e4:	f001 0c1f 	and.w	ip, r1, #31
 80068e8:	fa02 f20c 	lsl.w	r2, r2, ip
 80068ec:	4217      	tst	r7, r2
 80068ee:	f040 818d 	bne.w	8006c0c <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068f2:	fa27 f20c 	lsr.w	r2, r7, ip
 80068f6:	07d2      	lsls	r2, r2, #31
 80068f8:	d50c      	bpl.n	8006914 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	0610      	lsls	r0, r2, #24
 80068fe:	d509      	bpl.n	8006914 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006900:	2201      	movs	r2, #1
 8006902:	fa02 f20c 	lsl.w	r2, r2, ip
 8006906:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006908:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800690c:	f042 0202 	orr.w	r2, r2, #2
 8006910:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006914:	f04f 0e04 	mov.w	lr, #4
 8006918:	fa0e f00c 	lsl.w	r0, lr, ip
 800691c:	4238      	tst	r0, r7
 800691e:	d05b      	beq.n	80069d8 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006920:	2e00      	cmp	r6, #0
 8006922:	d14f      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x1a8>
 8006924:	4a63      	ldr	r2, [pc, #396]	; (8006ab4 <HAL_DMA_IRQHandler+0x298>)
 8006926:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8006ab8 <HAL_DMA_IRQHandler+0x29c>
 800692a:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8006aac <HAL_DMA_IRQHandler+0x290>
 800692e:	454b      	cmp	r3, r9
 8006930:	bf18      	it	ne
 8006932:	4293      	cmpne	r3, r2
 8006934:	f109 0948 	add.w	r9, r9, #72	; 0x48
 8006938:	bf0c      	ite	eq
 800693a:	2201      	moveq	r2, #1
 800693c:	2200      	movne	r2, #0
 800693e:	4543      	cmp	r3, r8
 8006940:	bf08      	it	eq
 8006942:	f042 0201 	orreq.w	r2, r2, #1
 8006946:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800694a:	454b      	cmp	r3, r9
 800694c:	bf08      	it	eq
 800694e:	f042 0201 	orreq.w	r2, r2, #1
 8006952:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006956:	4543      	cmp	r3, r8
 8006958:	bf08      	it	eq
 800695a:	f042 0201 	orreq.w	r2, r2, #1
 800695e:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8006962:	454b      	cmp	r3, r9
 8006964:	bf08      	it	eq
 8006966:	f042 0201 	orreq.w	r2, r2, #1
 800696a:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800696e:	4543      	cmp	r3, r8
 8006970:	bf08      	it	eq
 8006972:	f042 0201 	orreq.w	r2, r2, #1
 8006976:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800697a:	454b      	cmp	r3, r9
 800697c:	bf08      	it	eq
 800697e:	f042 0201 	orreq.w	r2, r2, #1
 8006982:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8006986:	4543      	cmp	r3, r8
 8006988:	bf08      	it	eq
 800698a:	f042 0201 	orreq.w	r2, r2, #1
 800698e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006992:	454b      	cmp	r3, r9
 8006994:	bf08      	it	eq
 8006996:	f042 0201 	orreq.w	r2, r2, #1
 800699a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800699e:	4543      	cmp	r3, r8
 80069a0:	bf08      	it	eq
 80069a2:	f042 0201 	orreq.w	r2, r2, #1
 80069a6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80069aa:	454b      	cmp	r3, r9
 80069ac:	bf08      	it	eq
 80069ae:	f042 0201 	orreq.w	r2, r2, #1
 80069b2:	4543      	cmp	r3, r8
 80069b4:	bf08      	it	eq
 80069b6:	f042 0201 	orreq.w	r2, r2, #1
 80069ba:	b91a      	cbnz	r2, 80069c4 <HAL_DMA_IRQHandler+0x1a8>
 80069bc:	4a3c      	ldr	r2, [pc, #240]	; (8006ab0 <HAL_DMA_IRQHandler+0x294>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	f040 822f 	bne.w	8006e22 <HAL_DMA_IRQHandler+0x606>
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	0792      	lsls	r2, r2, #30
 80069c8:	d506      	bpl.n	80069d8 <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069ca:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069cc:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 80069d0:	f042 0204 	orr.w	r2, r2, #4
 80069d4:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069d8:	2210      	movs	r2, #16
 80069da:	fa02 fc0c 	lsl.w	ip, r2, ip
 80069de:	ea1c 0f07 	tst.w	ip, r7
 80069e2:	d06f      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	d146      	bne.n	8006a76 <HAL_DMA_IRQHandler+0x25a>
 80069e8:	4a32      	ldr	r2, [pc, #200]	; (8006ab4 <HAL_DMA_IRQHandler+0x298>)
 80069ea:	4833      	ldr	r0, [pc, #204]	; (8006ab8 <HAL_DMA_IRQHandler+0x29c>)
 80069ec:	4e2f      	ldr	r6, [pc, #188]	; (8006aac <HAL_DMA_IRQHandler+0x290>)
 80069ee:	4283      	cmp	r3, r0
 80069f0:	bf18      	it	ne
 80069f2:	4293      	cmpne	r3, r2
 80069f4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80069f8:	bf0c      	ite	eq
 80069fa:	2201      	moveq	r2, #1
 80069fc:	2200      	movne	r2, #0
 80069fe:	42b3      	cmp	r3, r6
 8006a00:	bf08      	it	eq
 8006a02:	f042 0201 	orreq.w	r2, r2, #1
 8006a06:	3630      	adds	r6, #48	; 0x30
 8006a08:	4283      	cmp	r3, r0
 8006a0a:	bf08      	it	eq
 8006a0c:	f042 0201 	orreq.w	r2, r2, #1
 8006a10:	3030      	adds	r0, #48	; 0x30
 8006a12:	42b3      	cmp	r3, r6
 8006a14:	bf08      	it	eq
 8006a16:	f042 0201 	orreq.w	r2, r2, #1
 8006a1a:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8006a1e:	4283      	cmp	r3, r0
 8006a20:	bf08      	it	eq
 8006a22:	f042 0201 	orreq.w	r2, r2, #1
 8006a26:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006a2a:	42b3      	cmp	r3, r6
 8006a2c:	bf08      	it	eq
 8006a2e:	f042 0201 	orreq.w	r2, r2, #1
 8006a32:	3630      	adds	r6, #48	; 0x30
 8006a34:	4283      	cmp	r3, r0
 8006a36:	bf08      	it	eq
 8006a38:	f042 0201 	orreq.w	r2, r2, #1
 8006a3c:	3030      	adds	r0, #48	; 0x30
 8006a3e:	42b3      	cmp	r3, r6
 8006a40:	bf08      	it	eq
 8006a42:	f042 0201 	orreq.w	r2, r2, #1
 8006a46:	3630      	adds	r6, #48	; 0x30
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	bf08      	it	eq
 8006a4c:	f042 0201 	orreq.w	r2, r2, #1
 8006a50:	3030      	adds	r0, #48	; 0x30
 8006a52:	42b3      	cmp	r3, r6
 8006a54:	bf08      	it	eq
 8006a56:	f042 0201 	orreq.w	r2, r2, #1
 8006a5a:	3630      	adds	r6, #48	; 0x30
 8006a5c:	4283      	cmp	r3, r0
 8006a5e:	bf08      	it	eq
 8006a60:	f042 0201 	orreq.w	r2, r2, #1
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	bf08      	it	eq
 8006a68:	f042 0201 	orreq.w	r2, r2, #1
 8006a6c:	b91a      	cbnz	r2, 8006a76 <HAL_DMA_IRQHandler+0x25a>
 8006a6e:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <HAL_DMA_IRQHandler+0x294>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	f040 81de 	bne.w	8006e32 <HAL_DMA_IRQHandler+0x616>
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8006a7c:	b312      	cbz	r2, 8006ac4 <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a7e:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	0352      	lsls	r2, r2, #13
 8006a86:	f100 818b 	bmi.w	8006da0 <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	05d6      	lsls	r6, r2, #23
 8006a8e:	d403      	bmi.n	8006a98 <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	f022 0208 	bic.w	r2, r2, #8
 8006a96:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8006a98:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006a9c:	b193      	cbz	r3, 8006ac4 <HAL_DMA_IRQHandler+0x2a8>
 8006a9e:	e00d      	b.n	8006abc <HAL_DMA_IRQHandler+0x2a0>
 8006aa0:	40020028 	.word	0x40020028
 8006aa4:	40020010 	.word	0x40020010
 8006aa8:	24000280 	.word	0x24000280
 8006aac:	40020070 	.word	0x40020070
 8006ab0:	400204b8 	.word	0x400204b8
 8006ab4:	40020058 	.word	0x40020058
 8006ab8:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 8006abc:	4650      	mov	r0, sl
 8006abe:	4798      	blx	r3
 8006ac0:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac4:	f001 011f 	and.w	r1, r1, #31
 8006ac8:	2620      	movs	r6, #32
 8006aca:	408e      	lsls	r6, r1
 8006acc:	423e      	tst	r6, r7
 8006ace:	d06a      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ad0:	f8da 2000 	ldr.w	r2, [sl]
 8006ad4:	4ba7      	ldr	r3, [pc, #668]	; (8006d74 <HAL_DMA_IRQHandler+0x558>)
 8006ad6:	48a8      	ldr	r0, [pc, #672]	; (8006d78 <HAL_DMA_IRQHandler+0x55c>)
 8006ad8:	4fa8      	ldr	r7, [pc, #672]	; (8006d7c <HAL_DMA_IRQHandler+0x560>)
 8006ada:	4282      	cmp	r2, r0
 8006adc:	bf18      	it	ne
 8006ade:	429a      	cmpne	r2, r3
 8006ae0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006ae4:	bf0c      	ite	eq
 8006ae6:	2301      	moveq	r3, #1
 8006ae8:	2300      	movne	r3, #0
 8006aea:	42ba      	cmp	r2, r7
 8006aec:	bf08      	it	eq
 8006aee:	f043 0301 	orreq.w	r3, r3, #1
 8006af2:	3730      	adds	r7, #48	; 0x30
 8006af4:	4282      	cmp	r2, r0
 8006af6:	bf08      	it	eq
 8006af8:	f043 0301 	orreq.w	r3, r3, #1
 8006afc:	3030      	adds	r0, #48	; 0x30
 8006afe:	42ba      	cmp	r2, r7
 8006b00:	bf08      	it	eq
 8006b02:	f043 0301 	orreq.w	r3, r3, #1
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	4282      	cmp	r2, r0
 8006b0a:	bf08      	it	eq
 8006b0c:	f043 0301 	orreq.w	r3, r3, #1
 8006b10:	3030      	adds	r0, #48	; 0x30
 8006b12:	42ba      	cmp	r2, r7
 8006b14:	bf08      	it	eq
 8006b16:	f043 0301 	orreq.w	r3, r3, #1
 8006b1a:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8006b1e:	4282      	cmp	r2, r0
 8006b20:	bf08      	it	eq
 8006b22:	f043 0301 	orreq.w	r3, r3, #1
 8006b26:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006b2a:	42ba      	cmp	r2, r7
 8006b2c:	bf08      	it	eq
 8006b2e:	f043 0301 	orreq.w	r3, r3, #1
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	4282      	cmp	r2, r0
 8006b36:	bf08      	it	eq
 8006b38:	f043 0301 	orreq.w	r3, r3, #1
 8006b3c:	3030      	adds	r0, #48	; 0x30
 8006b3e:	42ba      	cmp	r2, r7
 8006b40:	bf08      	it	eq
 8006b42:	f043 0301 	orreq.w	r3, r3, #1
 8006b46:	3730      	adds	r7, #48	; 0x30
 8006b48:	4282      	cmp	r2, r0
 8006b4a:	bf08      	it	eq
 8006b4c:	f043 0301 	orreq.w	r3, r3, #1
 8006b50:	3030      	adds	r0, #48	; 0x30
 8006b52:	42ba      	cmp	r2, r7
 8006b54:	bf08      	it	eq
 8006b56:	f043 0301 	orreq.w	r3, r3, #1
 8006b5a:	3730      	adds	r7, #48	; 0x30
 8006b5c:	4282      	cmp	r2, r0
 8006b5e:	bf08      	it	eq
 8006b60:	f043 0301 	orreq.w	r3, r3, #1
 8006b64:	42ba      	cmp	r2, r7
 8006b66:	bf08      	it	eq
 8006b68:	f043 0301 	orreq.w	r3, r3, #1
 8006b6c:	b91b      	cbnz	r3, 8006b76 <HAL_DMA_IRQHandler+0x35a>
 8006b6e:	4b84      	ldr	r3, [pc, #528]	; (8006d80 <HAL_DMA_IRQHandler+0x564>)
 8006b70:	429a      	cmp	r2, r3
 8006b72:	f040 8173 	bne.w	8006e5c <HAL_DMA_IRQHandler+0x640>
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b7c:	b19b      	cbz	r3, 8006ba6 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b7e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b80:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 8006b84:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b86:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b88:	f000 8114 	beq.w	8006db4 <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b8c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b90:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b92:	f000 812d 	beq.w	8006df0 <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b96:	031c      	lsls	r4, r3, #12
 8006b98:	f140 8138 	bpl.w	8006e0c <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 8006b9c:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006ba0:	b10b      	cbz	r3, 8006ba6 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ba6:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80df 	beq.w	8006d6e <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bb0:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 8006bb4:	07d8      	lsls	r0, r3, #31
 8006bb6:	d51f      	bpl.n	8006bf8 <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 8006bb8:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bbc:	2404      	movs	r4, #4
 8006bbe:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bca:	4b6e      	ldr	r3, [pc, #440]	; (8006d84 <HAL_DMA_IRQHandler+0x568>)
 8006bcc:	fba3 3505 	umull	r3, r5, r3, r5
 8006bd0:	0aad      	lsrs	r5, r5, #10
 8006bd2:	e002      	b.n	8006bda <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bd4:	6813      	ldr	r3, [r2, #0]
 8006bd6:	07d9      	lsls	r1, r3, #31
 8006bd8:	d504      	bpl.n	8006be4 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 8006bda:	9b01      	ldr	r3, [sp, #4]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	42ab      	cmp	r3, r5
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	d9f7      	bls.n	8006bd4 <HAL_DMA_IRQHandler+0x3b8>
        __HAL_UNLOCK(hdma);
 8006be4:	2300      	movs	r3, #0
 8006be6:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bee:	bf4c      	ite	mi
 8006bf0:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8006bf2:	2301      	movpl	r3, #1
 8006bf4:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8006bf8:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80b6 	beq.w	8006d6e <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 8006c02:	4650      	mov	r0, sl
}
 8006c04:	b002      	add	sp, #8
 8006c06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 8006c0a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	0740      	lsls	r0, r0, #29
 8006c10:	d50a      	bpl.n	8006c28 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	f020 0004 	bic.w	r0, r0, #4
 8006c18:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c1a:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c1c:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c28:	fa27 f20c 	lsr.w	r2, r7, ip
 8006c2c:	07d2      	lsls	r2, r2, #31
 8006c2e:	f57f ae71 	bpl.w	8006914 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c32:	4a55      	ldr	r2, [pc, #340]	; (8006d88 <HAL_DMA_IRQHandler+0x56c>)
 8006c34:	4851      	ldr	r0, [pc, #324]	; (8006d7c <HAL_DMA_IRQHandler+0x560>)
 8006c36:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8006d9c <HAL_DMA_IRQHandler+0x580>
 8006c3a:	4283      	cmp	r3, r0
 8006c3c:	bf18      	it	ne
 8006c3e:	4293      	cmpne	r3, r2
 8006c40:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006c44:	bf0c      	ite	eq
 8006c46:	2201      	moveq	r2, #1
 8006c48:	2200      	movne	r2, #0
 8006c4a:	4543      	cmp	r3, r8
 8006c4c:	bf08      	it	eq
 8006c4e:	f042 0201 	orreq.w	r2, r2, #1
 8006c52:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006c56:	4283      	cmp	r3, r0
 8006c58:	bf08      	it	eq
 8006c5a:	f042 0201 	orreq.w	r2, r2, #1
 8006c5e:	3030      	adds	r0, #48	; 0x30
 8006c60:	4543      	cmp	r3, r8
 8006c62:	bf08      	it	eq
 8006c64:	f042 0201 	orreq.w	r2, r2, #1
 8006c68:	f508 785c 	add.w	r8, r8, #880	; 0x370
 8006c6c:	4283      	cmp	r3, r0
 8006c6e:	bf08      	it	eq
 8006c70:	f042 0201 	orreq.w	r2, r2, #1
 8006c74:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8006c78:	4543      	cmp	r3, r8
 8006c7a:	bf08      	it	eq
 8006c7c:	f042 0201 	orreq.w	r2, r2, #1
 8006c80:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006c84:	4283      	cmp	r3, r0
 8006c86:	bf08      	it	eq
 8006c88:	f042 0201 	orreq.w	r2, r2, #1
 8006c8c:	3030      	adds	r0, #48	; 0x30
 8006c8e:	4543      	cmp	r3, r8
 8006c90:	bf08      	it	eq
 8006c92:	f042 0201 	orreq.w	r2, r2, #1
 8006c96:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006c9a:	4283      	cmp	r3, r0
 8006c9c:	bf08      	it	eq
 8006c9e:	f042 0201 	orreq.w	r2, r2, #1
 8006ca2:	3030      	adds	r0, #48	; 0x30
 8006ca4:	4543      	cmp	r3, r8
 8006ca6:	bf08      	it	eq
 8006ca8:	f042 0201 	orreq.w	r2, r2, #1
 8006cac:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006cb0:	4283      	cmp	r3, r0
 8006cb2:	bf08      	it	eq
 8006cb4:	f042 0201 	orreq.w	r2, r2, #1
 8006cb8:	3030      	adds	r0, #48	; 0x30
 8006cba:	4543      	cmp	r3, r8
 8006cbc:	bf08      	it	eq
 8006cbe:	f042 0201 	orreq.w	r2, r2, #1
 8006cc2:	4283      	cmp	r3, r0
 8006cc4:	bf08      	it	eq
 8006cc6:	f042 0201 	orreq.w	r2, r2, #1
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f47f ae15 	bne.w	80068fa <HAL_DMA_IRQHandler+0xde>
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	f47f ae12 	bne.w	80068fa <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cd6:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006cd8:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cda:	fa02 f20c 	lsl.w	r2, r2, ip
 8006cde:	423a      	tst	r2, r7
 8006ce0:	f040 809f 	bne.w	8006e22 <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006cea:	ea17 0f0c 	tst.w	r7, ip
 8006cee:	f43f aee9 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x2a8>
 8006cf2:	e679      	b.n	80069e8 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cf4:	4a25      	ldr	r2, [pc, #148]	; (8006d8c <HAL_DMA_IRQHandler+0x570>)
 8006cf6:	4e26      	ldr	r6, [pc, #152]	; (8006d90 <HAL_DMA_IRQHandler+0x574>)
 8006cf8:	4d26      	ldr	r5, [pc, #152]	; (8006d94 <HAL_DMA_IRQHandler+0x578>)
 8006cfa:	42b3      	cmp	r3, r6
 8006cfc:	bf18      	it	ne
 8006cfe:	4293      	cmpne	r3, r2
 8006d00:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8006d04:	bf0c      	ite	eq
 8006d06:	2201      	moveq	r2, #1
 8006d08:	2200      	movne	r2, #0
 8006d0a:	42ab      	cmp	r3, r5
 8006d0c:	bf08      	it	eq
 8006d0e:	f042 0201 	orreq.w	r2, r2, #1
 8006d12:	3528      	adds	r5, #40	; 0x28
 8006d14:	42b3      	cmp	r3, r6
 8006d16:	bf08      	it	eq
 8006d18:	f042 0201 	orreq.w	r2, r2, #1
 8006d1c:	3628      	adds	r6, #40	; 0x28
 8006d1e:	42ab      	cmp	r3, r5
 8006d20:	bf08      	it	eq
 8006d22:	f042 0201 	orreq.w	r2, r2, #1
 8006d26:	3528      	adds	r5, #40	; 0x28
 8006d28:	42b3      	cmp	r3, r6
 8006d2a:	bf08      	it	eq
 8006d2c:	f042 0201 	orreq.w	r2, r2, #1
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	bf08      	it	eq
 8006d34:	f042 0201 	orreq.w	r2, r2, #1
 8006d38:	b912      	cbnz	r2, 8006d40 <HAL_DMA_IRQHandler+0x524>
 8006d3a:	4a17      	ldr	r2, [pc, #92]	; (8006d98 <HAL_DMA_IRQHandler+0x57c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d116      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d40:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 8006d44:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d46:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d48:	f005 051f 	and.w	r5, r5, #31
 8006d4c:	40ae      	lsls	r6, r5
 8006d4e:	420e      	tst	r6, r1
 8006d50:	d073      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x61e>
 8006d52:	0757      	lsls	r7, r2, #29
 8006d54:	d571      	bpl.n	8006e3a <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d56:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d58:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d5a:	f140 809f 	bpl.w	8006e9c <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d5e:	03d1      	lsls	r1, r2, #15
 8006d60:	f100 80a2 	bmi.w	8006ea8 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d64:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f47f af4a 	bne.w	8006c02 <HAL_DMA_IRQHandler+0x3e6>
}
 8006d6e:	b002      	add	sp, #8
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	40020010 	.word	0x40020010
 8006d78:	40020028 	.word	0x40020028
 8006d7c:	40020040 	.word	0x40020040
 8006d80:	400204b8 	.word	0x400204b8
 8006d84:	1b4e81b5 	.word	0x1b4e81b5
 8006d88:	40020058 	.word	0x40020058
 8006d8c:	58025408 	.word	0x58025408
 8006d90:	5802541c 	.word	0x5802541c
 8006d94:	58025430 	.word	0x58025430
 8006d98:	58025494 	.word	0x58025494
 8006d9c:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	031b      	lsls	r3, r3, #12
 8006da4:	f57f ae78 	bpl.w	8006a98 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006da8:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f47f ae85 	bne.w	8006abc <HAL_DMA_IRQHandler+0x2a0>
 8006db2:	e687      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006db4:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006db8:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dbc:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006dbe:	6953      	ldr	r3, [r2, #20]
 8006dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dc6:	b33d      	cbz	r5, 8006e18 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	f023 0308 	bic.w	r3, r3, #8
 8006dce:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dd0:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8006dd2:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 8006dd4:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dd6:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8006dda:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006dde:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 8006de0:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006de4:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f af0a 	bne.w	8006c02 <HAL_DMA_IRQHandler+0x3e6>
 8006dee:	e7be      	b.n	8006d6e <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006df0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8006df4:	f47f aed2 	bne.w	8006b9c <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006df8:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8006dfa:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006dfc:	f021 0110 	bic.w	r1, r1, #16
 8006e00:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 8006e02:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8006e06:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 8006e0a:	e6c7      	b.n	8006b9c <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 8006e0c:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f aec6 	bne.w	8006ba2 <HAL_DMA_IRQHandler+0x386>
 8006e16:	e6c6      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e18:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1d3      	bne.n	8006dc8 <HAL_DMA_IRQHandler+0x5ac>
 8006e20:	e7d6      	b.n	8006dd0 <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e22:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e24:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e26:	fa02 fc0c 	lsl.w	ip, r2, ip
 8006e2a:	ea17 0f0c 	tst.w	r7, ip
 8006e2e:	f43f ae49 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8006e38:	e620      	b.n	8006a7c <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e3a:	2602      	movs	r6, #2
 8006e3c:	40ae      	lsls	r6, r5
 8006e3e:	420e      	tst	r6, r1
 8006e40:	d010      	beq.n	8006e64 <HAL_DMA_IRQHandler+0x648>
 8006e42:	0797      	lsls	r7, r2, #30
 8006e44:	d50e      	bpl.n	8006e64 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e46:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e48:	0414      	lsls	r4, r2, #16
 8006e4a:	d533      	bpl.n	8006eb4 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e4c:	03d0      	lsls	r0, r2, #15
 8006e4e:	d43d      	bmi.n	8006ecc <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 8006e50:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f47f aed4 	bne.w	8006c02 <HAL_DMA_IRQHandler+0x3e6>
 8006e5a:	e788      	b.n	8006d6e <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006e62:	e68b      	b.n	8006b7c <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e64:	2608      	movs	r6, #8
 8006e66:	40ae      	lsls	r6, r5
 8006e68:	420e      	tst	r6, r1
 8006e6a:	d080      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x552>
 8006e6c:	0711      	lsls	r1, r2, #28
 8006e6e:	f57f af7e 	bpl.w	8006d6e <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e72:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e74:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8006e76:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e78:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e7c:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e80:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8006e82:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e86:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e88:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8006e8c:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8006e90:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f47f aeb4 	bne.w	8006c02 <HAL_DMA_IRQHandler+0x3e6>
 8006e9a:	e768      	b.n	8006d6e <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e9c:	0692      	lsls	r2, r2, #26
 8006e9e:	d403      	bmi.n	8006ea8 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	f022 0204 	bic.w	r2, r2, #4
 8006ea6:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8006ea8:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f47f aea8 	bne.w	8006c02 <HAL_DMA_IRQHandler+0x3e6>
 8006eb2:	e75c      	b.n	8006d6e <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eb4:	f012 0220 	ands.w	r2, r2, #32
 8006eb8:	d108      	bne.n	8006ecc <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eba:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006ebc:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ebe:	f021 010a 	bic.w	r1, r1, #10
 8006ec2:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8006ec4:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8006ec8:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8006ecc:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f47f ae96 	bne.w	8006c02 <HAL_DMA_IRQHandler+0x3e6>
 8006ed6:	e74a      	b.n	8006d6e <HAL_DMA_IRQHandler+0x552>

08006ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006edc:	680e      	ldr	r6, [r1, #0]
{
 8006ede:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	f000 80d3 	beq.w	800708c <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8006ee6:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee8:	f8df a220 	ldr.w	sl, [pc, #544]	; 800710c <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006eec:	f8df b220 	ldr.w	fp, [pc, #544]	; 8007110 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ef0:	46b1      	mov	r9, r6
 8006ef2:	e020      	b.n	8006f36 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8006ef4:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ef6:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006efa:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006efe:	f04f 0e0f 	mov.w	lr, #15
 8006f02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f06:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f0c:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8006f10:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f12:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f16:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f1a:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f1e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8006f22:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8006f24:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f26:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f28:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8006f2a:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8006f2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f2e:	fa39 f203 	lsrs.w	r2, r9, r3
 8006f32:	f000 80ab 	beq.w	800708c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f36:	2201      	movs	r2, #1
 8006f38:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8006f3a:	ea12 0809 	ands.w	r8, r2, r9
 8006f3e:	d0f5      	beq.n	8006f2c <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006f40:	684c      	ldr	r4, [r1, #4]
 8006f42:	005f      	lsls	r7, r3, #1
 8006f44:	f024 0c10 	bic.w	ip, r4, #16
 8006f48:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f4c:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f4e:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f52:	f200 809e 	bhi.w	8007092 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f56:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8006f5a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f5e:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f60:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f62:	ea2e 0e05 	bic.w	lr, lr, r5
 8006f66:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f68:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f6a:	68ce      	ldr	r6, [r1, #12]
 8006f6c:	40be      	lsls	r6, r7
 8006f6e:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f72:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8006f74:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8006f78:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f7c:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f80:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8006f82:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8006f84:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f86:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f8a:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f8c:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f90:	fa02 f207 	lsl.w	r2, r2, r7
 8006f94:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8006f98:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f9a:	d0ab      	beq.n	8006ef4 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8006f9c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f9e:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fa2:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fa4:	fa02 f707 	lsl.w	r7, r2, r7
 8006fa8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8006faa:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fac:	00e6      	lsls	r6, r4, #3
 8006fae:	d5bd      	bpl.n	8006f2c <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fb0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8006fb4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fb8:	f003 0203 	and.w	r2, r3, #3
 8006fbc:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbe:	f046 0602 	orr.w	r6, r6, #2
 8006fc2:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fc6:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc8:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 8006fcc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006fd0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fd4:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fd8:	f006 0602 	and.w	r6, r6, #2
 8006fdc:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fde:	4e42      	ldr	r6, [pc, #264]	; (80070e8 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe0:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fe2:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fe4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fe6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fea:	d020      	beq.n	800702e <HAL_GPIO_Init+0x156>
 8006fec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006ff0:	42b0      	cmp	r0, r6
 8006ff2:	d056      	beq.n	80070a2 <HAL_GPIO_Init+0x1ca>
 8006ff4:	4e3d      	ldr	r6, [pc, #244]	; (80070ec <HAL_GPIO_Init+0x214>)
 8006ff6:	42b0      	cmp	r0, r6
 8006ff8:	d058      	beq.n	80070ac <HAL_GPIO_Init+0x1d4>
 8006ffa:	4e3d      	ldr	r6, [pc, #244]	; (80070f0 <HAL_GPIO_Init+0x218>)
 8006ffc:	42b0      	cmp	r0, r6
 8006ffe:	d04b      	beq.n	8007098 <HAL_GPIO_Init+0x1c0>
 8007000:	4e3c      	ldr	r6, [pc, #240]	; (80070f4 <HAL_GPIO_Init+0x21c>)
 8007002:	42b0      	cmp	r0, r6
 8007004:	d05c      	beq.n	80070c0 <HAL_GPIO_Init+0x1e8>
 8007006:	4e3c      	ldr	r6, [pc, #240]	; (80070f8 <HAL_GPIO_Init+0x220>)
 8007008:	42b0      	cmp	r0, r6
 800700a:	d05e      	beq.n	80070ca <HAL_GPIO_Init+0x1f2>
 800700c:	4e3b      	ldr	r6, [pc, #236]	; (80070fc <HAL_GPIO_Init+0x224>)
 800700e:	42b0      	cmp	r0, r6
 8007010:	d051      	beq.n	80070b6 <HAL_GPIO_Init+0x1de>
 8007012:	4e3b      	ldr	r6, [pc, #236]	; (8007100 <HAL_GPIO_Init+0x228>)
 8007014:	42b0      	cmp	r0, r6
 8007016:	d05d      	beq.n	80070d4 <HAL_GPIO_Init+0x1fc>
 8007018:	4e3a      	ldr	r6, [pc, #232]	; (8007104 <HAL_GPIO_Init+0x22c>)
 800701a:	42b0      	cmp	r0, r6
 800701c:	d05f      	beq.n	80070de <HAL_GPIO_Init+0x206>
 800701e:	4e3a      	ldr	r6, [pc, #232]	; (8007108 <HAL_GPIO_Init+0x230>)
 8007020:	42b0      	cmp	r0, r6
 8007022:	bf0c      	ite	eq
 8007024:	2609      	moveq	r6, #9
 8007026:	260a      	movne	r6, #10
 8007028:	fa06 f202 	lsl.w	r2, r6, r2
 800702c:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800702e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007030:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8007034:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007038:	03e5      	lsls	r5, r4, #15
    position++;
 800703a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800703e:	bf54      	ite	pl
 8007040:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8007042:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007046:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800704a:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800704c:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007054:	bf54      	ite	pl
 8007056:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8007058:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800705c:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800705e:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8007062:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8007064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8007068:	bf54      	ite	pl
 800706a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800706c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007070:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8007072:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8007076:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8007078:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800707a:	bf54      	ite	pl
 800707c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800707e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8007082:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007084:	fa39 f203 	lsrs.w	r2, r9, r3
 8007088:	f47f af55 	bne.w	8006f36 <HAL_GPIO_Init+0x5e>
  }
}
 800708c:	b005      	add	sp, #20
 800708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	40bd      	lsls	r5, r7
 8007094:	43ed      	mvns	r5, r5
 8007096:	e775      	b.n	8006f84 <HAL_GPIO_Init+0xac>
 8007098:	2603      	movs	r6, #3
 800709a:	fa06 f202 	lsl.w	r2, r6, r2
 800709e:	4315      	orrs	r5, r2
 80070a0:	e7c5      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070a2:	2601      	movs	r6, #1
 80070a4:	fa06 f202 	lsl.w	r2, r6, r2
 80070a8:	4315      	orrs	r5, r2
 80070aa:	e7c0      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070ac:	2602      	movs	r6, #2
 80070ae:	fa06 f202 	lsl.w	r2, r6, r2
 80070b2:	4315      	orrs	r5, r2
 80070b4:	e7bb      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070b6:	2606      	movs	r6, #6
 80070b8:	fa06 f202 	lsl.w	r2, r6, r2
 80070bc:	4315      	orrs	r5, r2
 80070be:	e7b6      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070c0:	2604      	movs	r6, #4
 80070c2:	fa06 f202 	lsl.w	r2, r6, r2
 80070c6:	4315      	orrs	r5, r2
 80070c8:	e7b1      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070ca:	2605      	movs	r6, #5
 80070cc:	fa06 f202 	lsl.w	r2, r6, r2
 80070d0:	4315      	orrs	r5, r2
 80070d2:	e7ac      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070d4:	2607      	movs	r6, #7
 80070d6:	fa06 f202 	lsl.w	r2, r6, r2
 80070da:	4315      	orrs	r5, r2
 80070dc:	e7a7      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070de:	2608      	movs	r6, #8
 80070e0:	fa06 f202 	lsl.w	r2, r6, r2
 80070e4:	4315      	orrs	r5, r2
 80070e6:	e7a2      	b.n	800702e <HAL_GPIO_Init+0x156>
 80070e8:	58020000 	.word	0x58020000
 80070ec:	58020800 	.word	0x58020800
 80070f0:	58020c00 	.word	0x58020c00
 80070f4:	58021000 	.word	0x58021000
 80070f8:	58021400 	.word	0x58021400
 80070fc:	58021800 	.word	0x58021800
 8007100:	58021c00 	.word	0x58021c00
 8007104:	58022000 	.word	0x58022000
 8007108:	58022400 	.word	0x58022400
 800710c:	58024400 	.word	0x58024400
 8007110:	58000080 	.word	0x58000080

08007114 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007114:	6903      	ldr	r3, [r0, #16]
 8007116:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007118:	bf14      	ite	ne
 800711a:	2001      	movne	r0, #1
 800711c:	2000      	moveq	r0, #0
 800711e:	4770      	bx	lr

08007120 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007120:	b902      	cbnz	r2, 8007124 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007122:	0409      	lsls	r1, r1, #16
 8007124:	6181      	str	r1, [r0, #24]
  }
}
 8007126:	4770      	bx	lr

08007128 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800712c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8007130:	4201      	tst	r1, r0
 8007132:	d100      	bne.n	8007136 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8007134:	4770      	bx	lr
{
 8007136:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007138:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800713c:	f7f9 ff38 	bl	8000fb0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007140:	bd08      	pop	{r3, pc}
 8007142:	bf00      	nop

08007144 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007144:	2800      	cmp	r0, #0
 8007146:	d061      	beq.n	800720c <HAL_LPTIM_Init+0xc8>
{
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800714a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800714e:	4604      	mov	r4, r0
 8007150:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007154:	2b00      	cmp	r3, #0
 8007156:	d054      	beq.n	8007202 <HAL_LPTIM_Init+0xbe>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007158:	2302      	movs	r3, #2
 800715a:	6aa5      	ldr	r5, [r4, #40]	; 0x28

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800715c:	e9d4 1700 	ldrd	r1, r7, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007160:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8007164:	2f01      	cmp	r7, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8007166:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8007168:	d03f      	beq.n	80071ea <HAL_LPTIM_Init+0xa6>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800716a:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 800716e:	d03c      	beq.n	80071ea <HAL_LPTIM_Init+0xa6>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007170:	6962      	ldr	r2, [r4, #20]
 8007172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007176:	429a      	cmp	r2, r3
 8007178:	d003      	beq.n	8007182 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800717a:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 800717e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007182:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8007184:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007186:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007188:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800722c <HAL_LPTIM_Init+0xe8>
              hlptim->Init.Clock.Prescaler |
 800718c:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 800718e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007190:	ea0c 0c00 	and.w	ip, ip, r0
              hlptim->Init.OutputPolarity  |
 8007194:	4333      	orrs	r3, r6
              hlptim->Init.UpdateMode      |
 8007196:	432b      	orrs	r3, r5
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007198:	ea43 030c 	orr.w	r3, r3, ip
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800719c:	b1ef      	cbz	r7, 80071da <HAL_LPTIM_Init+0x96>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800719e:	2f01      	cmp	r7, #1
 80071a0:	d11f      	bne.n	80071e2 <HAL_LPTIM_Init+0x9e>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80071a2:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 80071a6:	4328      	orrs	r0, r5
 80071a8:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80071aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80071ae:	4282      	cmp	r2, r0
 80071b0:	d004      	beq.n	80071bc <HAL_LPTIM_Init+0x78>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
                hlptim->Init.Trigger.ActiveEdge |
 80071b2:	e9d4 5006 	ldrd	r5, r0, [r4, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80071b6:	432a      	orrs	r2, r5
                hlptim->Init.Trigger.ActiveEdge |
 80071b8:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80071ba:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80071bc:	4a18      	ldr	r2, [pc, #96]	; (8007220 <HAL_LPTIM_Init+0xdc>)
  hlptim->Instance->CFGR = tmpcfgr;
 80071be:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80071c0:	4291      	cmp	r1, r2
 80071c2:	d015      	beq.n	80071f0 <HAL_LPTIM_Init+0xac>
 80071c4:	4b17      	ldr	r3, [pc, #92]	; (8007224 <HAL_LPTIM_Init+0xe0>)
 80071c6:	4299      	cmp	r1, r3
 80071c8:	d012      	beq.n	80071f0 <HAL_LPTIM_Init+0xac>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80071ca:	4b17      	ldr	r3, [pc, #92]	; (8007228 <HAL_LPTIM_Init+0xe4>)
 80071cc:	4299      	cmp	r1, r3
 80071ce:	d01f      	beq.n	8007210 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80071d0:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80071d2:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 80071d4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 80071d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80071da:	69e0      	ldr	r0, [r4, #28]
 80071dc:	6926      	ldr	r6, [r4, #16]
 80071de:	4330      	orrs	r0, r6
 80071e0:	4303      	orrs	r3, r0
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80071e2:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
 80071e6:	d1e0      	bne.n	80071aa <HAL_LPTIM_Init+0x66>
 80071e8:	e7db      	b.n	80071a2 <HAL_LPTIM_Init+0x5e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80071ea:	f020 001e 	bic.w	r0, r0, #30
 80071ee:	e7bf      	b.n	8007170 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80071f0:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 80071f4:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80071f6:	4313      	orrs	r3, r2
 80071f8:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8007200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8007202:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8007206:	f7fc fd09 	bl	8003c1c <HAL_LPTIM_MspInit>
 800720a:	e7a5      	b.n	8007158 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 800720c:	2001      	movs	r0, #1
}
 800720e:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8007212:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007214:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007216:	2301      	movs	r3, #1
 8007218:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721e:	bf00      	nop
 8007220:	40002400 	.word	0x40002400
 8007224:	58002400 	.word	0x58002400
 8007228:	58002800 	.word	0x58002800
 800722c:	ff19f1fe 	.word	0xff19f1fe

08007230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007234:	2800      	cmp	r0, #0
 8007236:	f000 8088 	beq.w	800734a <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800723a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800723e:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8007240:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007246:	2b00      	cmp	r3, #0
 8007248:	d079      	beq.n	800733e <HAL_PCD_Init+0x10e>
 800724a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800724c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800724e:	462e      	mov	r6, r5
 8007250:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8007252:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007258:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800725a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800725e:	bf08      	it	eq
 8007260:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007262:	f003 ffe9 	bl	800b238 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007266:	f856 eb10 	ldr.w	lr, [r6], #16
 800726a:	46b4      	mov	ip, r6
 800726c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007272:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007278:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800727c:	e884 0003 	stmia.w	r4, {r0, r1}
 8007280:	4670      	mov	r0, lr
 8007282:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007286:	f003 fedf 	bl	800b048 <USB_CoreInit>
 800728a:	4604      	mov	r4, r0
 800728c:	b130      	cbz	r0, 800729c <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800728e:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007290:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8007292:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007294:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 8007298:	b00b      	add	sp, #44	; 0x2c
 800729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800729c:	4601      	mov	r1, r0
 800729e:	6828      	ldr	r0, [r5, #0]
 80072a0:	f003 ffd2 	bl	800b248 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a4:	6868      	ldr	r0, [r5, #4]
 80072a6:	b358      	cbz	r0, 8007300 <HAL_PCD_Init+0xd0>
 80072a8:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 80072aa:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072ae:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 80072b0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072b4:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 80072b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072c0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072c4:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 80072c8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072cc:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072ce:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 80072d2:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 80072d4:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072d8:	d3ea      	bcc.n	80072b0 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 80072da:	2200      	movs	r2, #0
 80072dc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072e0:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80072e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 80072e6:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ea:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 80072ec:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072f0:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072f2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 80072f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80072fa:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072fe:	d3ed      	bcc.n	80072dc <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007300:	466c      	mov	r4, sp
 8007302:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007306:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800730a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800730e:	e884 0003 	stmia.w	r4, {r0, r1}
 8007312:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8007316:	6828      	ldr	r0, [r5, #0]
 8007318:	f003 ffae 	bl	800b278 <USB_DevInit>
 800731c:	4604      	mov	r4, r0
 800731e:	2800      	cmp	r0, #0
 8007320:	d1b5      	bne.n	800728e <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8007322:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8007324:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8007326:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800732a:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800732c:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8007330:	d00f      	beq.n	8007352 <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007332:	6828      	ldr	r0, [r5, #0]
 8007334:	f004 fbc0 	bl	800bab8 <USB_DevDisconnect>
}
 8007338:	4620      	mov	r0, r4
 800733a:	b00b      	add	sp, #44	; 0x2c
 800733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800733e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8007342:	f005 fc19 	bl	800cb78 <HAL_PCD_MspInit>
 8007346:	6828      	ldr	r0, [r5, #0]
 8007348:	e780      	b.n	800724c <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 800734a:	2401      	movs	r4, #1
}
 800734c:	4620      	mov	r0, r4
 800734e:	b00b      	add	sp, #44	; 0x2c
 8007350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007352:	4628      	mov	r0, r5
 8007354:	f000 fcd0 	bl	8007cf8 <HAL_PCDEx_ActivateLPM>
 8007358:	e7eb      	b.n	8007332 <HAL_PCD_Init+0x102>
 800735a:	bf00      	nop

0800735c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800735c:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 800735e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8007362:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007364:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007366:	2b01      	cmp	r3, #1
 8007368:	d016      	beq.n	8007398 <HAL_PCD_Start+0x3c>
 800736a:	2201      	movs	r2, #1

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800736c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800736e:	4293      	cmp	r3, r2
  __HAL_LOCK(hpcd);
 8007370:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007374:	d008      	beq.n	8007388 <HAL_PCD_Start+0x2c>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8007376:	f003 ff57 	bl	800b228 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800737a:	6820      	ldr	r0, [r4, #0]
 800737c:	f004 fb8c 	bl	800ba98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007380:	2000      	movs	r0, #0
 8007382:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8007386:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007388:	69a3      	ldr	r3, [r4, #24]
 800738a:	4293      	cmp	r3, r2
 800738c:	d0f3      	beq.n	8007376 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800738e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007394:	6383      	str	r3, [r0, #56]	; 0x38
 8007396:	e7ee      	b.n	8007376 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8007398:	2002      	movs	r0, #2
}
 800739a:	bd10      	pop	{r4, pc}

0800739c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073a0:	6806      	ldr	r6, [r0, #0]
{
 80073a2:	b087      	sub	sp, #28
 80073a4:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80073a6:	4630      	mov	r0, r6
 80073a8:	f004 fbc6 	bl	800bb38 <USB_GetMode>
 80073ac:	b110      	cbz	r0, 80073b4 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 80073ae:	b007      	add	sp, #28
 80073b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80073b4:	4683      	mov	fp, r0
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	f004 fb8e 	bl	800bad8 <USB_ReadInterrupts>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d0f6      	beq.n	80073ae <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	f004 fb89 	bl	800bad8 <USB_ReadInterrupts>
 80073c6:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073ca:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073cc:	d003      	beq.n	80073d6 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073ce:	6943      	ldr	r3, [r0, #20]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073d6:	f004 fb7f 	bl	800bad8 <USB_ReadInterrupts>
 80073da:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073de:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073e0:	d012      	beq.n	8007408 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073e2:	6983      	ldr	r3, [r0, #24]
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 80073ea:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80073ec:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80073f0:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	f000 826c 	beq.w	80078d2 <HAL_PCD_IRQHandler+0x536>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80073fa:	2b06      	cmp	r3, #6
 80073fc:	f000 81cb 	beq.w	8007796 <HAL_PCD_IRQHandler+0x3fa>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007400:	6983      	ldr	r3, [r0, #24]
 8007402:	f043 0310 	orr.w	r3, r3, #16
 8007406:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007408:	f004 fb66 	bl	800bad8 <USB_ReadInterrupts>
 800740c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007410:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007412:	f040 80df 	bne.w	80075d4 <HAL_PCD_IRQHandler+0x238>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007416:	f004 fb5f 	bl	800bad8 <USB_ReadInterrupts>
 800741a:	0342      	lsls	r2, r0, #13
 800741c:	d478      	bmi.n	8007510 <HAL_PCD_IRQHandler+0x174>
 800741e:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007422:	4640      	mov	r0, r8
 8007424:	f004 fb58 	bl	800bad8 <USB_ReadInterrupts>
 8007428:	2800      	cmp	r0, #0
 800742a:	db5d      	blt.n	80074e8 <HAL_PCD_IRQHandler+0x14c>
 800742c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800742e:	f004 fb53 	bl	800bad8 <USB_ReadInterrupts>
 8007432:	0500      	lsls	r0, r0, #20
 8007434:	d44d      	bmi.n	80074d2 <HAL_PCD_IRQHandler+0x136>
 8007436:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007438:	f004 fb4e 	bl	800bad8 <USB_ReadInterrupts>
 800743c:	0102      	lsls	r2, r0, #4
 800743e:	d514      	bpl.n	800746a <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	6953      	ldr	r3, [r2, #20]
 8007444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007448:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800744a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 818b 	bne.w	800776a <HAL_PCD_IRQHandler+0x3ce>
        hpcd->LPM_State = LPM_L1;
 8007454:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007456:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8007458:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800745c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800745e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007462:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007466:	f000 fc5d 	bl	8007d24 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	f004 fb34 	bl	800bad8 <USB_ReadInterrupts>
 8007470:	04c3      	lsls	r3, r0, #19
 8007472:	f100 8129 	bmi.w	80076c8 <HAL_PCD_IRQHandler+0x32c>
 8007476:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007478:	f004 fb2e 	bl	800bad8 <USB_ReadInterrupts>
 800747c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8007480:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007482:	f040 810a 	bne.w	800769a <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007486:	f004 fb27 	bl	800bad8 <USB_ReadInterrupts>
 800748a:	0707      	lsls	r7, r0, #28
 800748c:	f100 80fc 	bmi.w	8007688 <HAL_PCD_IRQHandler+0x2ec>
 8007490:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007492:	f004 fb21 	bl	800bad8 <USB_ReadInterrupts>
 8007496:	02c6      	lsls	r6, r0, #11
 8007498:	f100 80ec 	bmi.w	8007674 <HAL_PCD_IRQHandler+0x2d8>
 800749c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800749e:	f004 fb1b 	bl	800bad8 <USB_ReadInterrupts>
 80074a2:	0285      	lsls	r5, r0, #10
 80074a4:	f100 80dc 	bmi.w	8007660 <HAL_PCD_IRQHandler+0x2c4>
 80074a8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80074aa:	f004 fb15 	bl	800bad8 <USB_ReadInterrupts>
 80074ae:	0040      	lsls	r0, r0, #1
 80074b0:	f100 80cd 	bmi.w	800764e <HAL_PCD_IRQHandler+0x2b2>
 80074b4:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80074b6:	f004 fb0f 	bl	800bad8 <USB_ReadInterrupts>
 80074ba:	0741      	lsls	r1, r0, #29
 80074bc:	f57f af77 	bpl.w	80073ae <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80074c4:	076a      	lsls	r2, r5, #29
 80074c6:	f100 8225 	bmi.w	8007914 <HAL_PCD_IRQHandler+0x578>
      hpcd->Instance->GOTGINT |= temp;
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	432a      	orrs	r2, r5
 80074ce:	605a      	str	r2, [r3, #4]
 80074d0:	e76d      	b.n	80073ae <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80074d2:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80074d6:	07d9      	lsls	r1, r3, #31
 80074d8:	f100 8218 	bmi.w	800790c <HAL_PCD_IRQHandler+0x570>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	6943      	ldr	r3, [r0, #20]
 80074e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074e4:	6143      	str	r3, [r0, #20]
 80074e6:	e7a7      	b.n	8007438 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074e8:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 80074f4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f000 8145 	beq.w	8007788 <HAL_PCD_IRQHandler+0x3ec>
        HAL_PCD_ResumeCallback(hpcd);
 80074fe:	4620      	mov	r0, r4
 8007500:	f005 fbe6 	bl	800ccd0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	6943      	ldr	r3, [r0, #20]
 8007508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800750c:	6143      	str	r3, [r0, #20]
 800750e:	e78e      	b.n	800742e <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	f004 faed 	bl	800baf0 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 8007516:	f8d4 8000 	ldr.w	r8, [r4]
 800751a:	4681      	mov	r9, r0
 800751c:	2800      	cmp	r0, #0
 800751e:	d080      	beq.n	8007422 <HAL_PCD_IRQHandler+0x86>
 8007520:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 8007524:	4625      	mov	r5, r4
      epnum = 0U;
 8007526:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800752a:	f8cd b010 	str.w	fp, [sp, #16]
 800752e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8007532:	e007      	b.n	8007544 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 8007534:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8007538:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800753c:	f105 051c 	add.w	r5, r5, #28
 8007540:	f000 813e 	beq.w	80077c0 <HAL_PCD_IRQHandler+0x424>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007544:	f019 0f01 	tst.w	r9, #1
 8007548:	d0f4      	beq.n	8007534 <HAL_PCD_IRQHandler+0x198>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800754a:	fa5f f78a 	uxtb.w	r7, sl
 800754e:	4640      	mov	r0, r8
 8007550:	4639      	mov	r1, r7
 8007552:	f004 fadf 	bl	800bb14 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007556:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007558:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800755a:	d519      	bpl.n	8007590 <HAL_PCD_IRQHandler+0x1f4>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800755c:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007560:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007562:	f00a 010f 	and.w	r1, sl, #15
 8007566:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007568:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800756c:	fa0c f101 	lsl.w	r1, ip, r1
 8007570:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007574:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8007578:	6921      	ldr	r1, [r4, #16]
 800757a:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800757c:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007580:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 8007584:	f000 81cb 	beq.w	800791e <HAL_PCD_IRQHandler+0x582>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007588:	4639      	mov	r1, r7
 800758a:	4620      	mov	r0, r4
 800758c:	f005 fb64 	bl	800cc58 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007590:	0730      	lsls	r0, r6, #28
 8007592:	d504      	bpl.n	800759e <HAL_PCD_IRQHandler+0x202>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	2208      	movs	r2, #8
 8007598:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800759c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800759e:	06f1      	lsls	r1, r6, #27
 80075a0:	d504      	bpl.n	80075ac <HAL_PCD_IRQHandler+0x210>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075a2:	9b02      	ldr	r3, [sp, #8]
 80075a4:	2210      	movs	r2, #16
 80075a6:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80075aa:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075ac:	0672      	lsls	r2, r6, #25
 80075ae:	d504      	bpl.n	80075ba <HAL_PCD_IRQHandler+0x21e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80075b8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075ba:	07b3      	lsls	r3, r6, #30
 80075bc:	d504      	bpl.n	80075c8 <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	2202      	movs	r2, #2
 80075c2:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 80075c6:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80075c8:	0636      	lsls	r6, r6, #24
 80075ca:	f100 80fc 	bmi.w	80077c6 <HAL_PCD_IRQHandler+0x42a>
 80075ce:	f8d4 8000 	ldr.w	r8, [r4]
 80075d2:	e7af      	b.n	8007534 <HAL_PCD_IRQHandler+0x198>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80075d4:	f004 fa84 	bl	800bae0 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 80075d8:	4605      	mov	r5, r0
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	2d00      	cmp	r5, #0
 80075de:	f43f af1a 	beq.w	8007416 <HAL_PCD_IRQHandler+0x7a>
 80075e2:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 80075e6:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 80075ea:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80075ec:	9602      	str	r6, [sp, #8]
 80075ee:	469a      	mov	sl, r3
 80075f0:	e006      	b.n	8007600 <HAL_PCD_IRQHandler+0x264>
      while (ep_intr != 0U)
 80075f2:	086d      	lsrs	r5, r5, #1
        epnum++;
 80075f4:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 80075f8:	f109 091c 	add.w	r9, r9, #28
 80075fc:	f000 80de 	beq.w	80077bc <HAL_PCD_IRQHandler+0x420>
        if ((ep_intr & 0x1U) != 0U)
 8007600:	07ee      	lsls	r6, r5, #31
 8007602:	d5f6      	bpl.n	80075f2 <HAL_PCD_IRQHandler+0x256>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007604:	b2fe      	uxtb	r6, r7
 8007606:	4631      	mov	r1, r6
 8007608:	f004 fa7a 	bl	800bb00 <USB_ReadDevOutEPInterrupt>
 800760c:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800760e:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007610:	f018 0f01 	tst.w	r8, #1
 8007614:	f040 813e 	bne.w	8007894 <HAL_PCD_IRQHandler+0x4f8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007618:	f018 0f08 	tst.w	r8, #8
 800761c:	f040 8120 	bne.w	8007860 <HAL_PCD_IRQHandler+0x4c4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007620:	f018 0f10 	tst.w	r8, #16
 8007624:	d003      	beq.n	800762e <HAL_PCD_IRQHandler+0x292>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007626:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800762a:	2210      	movs	r2, #16
 800762c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800762e:	f018 0f20 	tst.w	r8, #32
 8007632:	d003      	beq.n	800763c <HAL_PCD_IRQHandler+0x2a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007634:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8007638:	2220      	movs	r2, #32
 800763a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800763c:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8007640:	d0d7      	beq.n	80075f2 <HAL_PCD_IRQHandler+0x256>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007642:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 8007646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800764a:	609a      	str	r2, [r3, #8]
 800764c:	e7d1      	b.n	80075f2 <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ConnectCallback(hpcd);
 800764e:	4620      	mov	r0, r4
 8007650:	f005 fb4a 	bl	800cce8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	6943      	ldr	r3, [r0, #20]
 8007658:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800765c:	6143      	str	r3, [r0, #20]
 800765e:	e72a      	b.n	80074b6 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007660:	4620      	mov	r0, r4
 8007662:	2100      	movs	r1, #0
 8007664:	f005 fb38 	bl	800ccd8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	6943      	ldr	r3, [r0, #20]
 800766c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007670:	6143      	str	r3, [r0, #20]
 8007672:	e71a      	b.n	80074aa <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007674:	4620      	mov	r0, r4
 8007676:	2100      	movs	r1, #0
 8007678:	f005 fb32 	bl	800cce0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	6943      	ldr	r3, [r0, #20]
 8007680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007684:	6143      	str	r3, [r0, #20]
 8007686:	e70a      	b.n	800749e <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 8007688:	4620      	mov	r0, r4
 800768a:	f005 faef 	bl	800cc6c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	6943      	ldr	r3, [r0, #20]
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	6143      	str	r3, [r0, #20]
 8007698:	e6fb      	b.n	8007492 <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 800769a:	f004 fa51 	bl	800bb40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	f003 fedc 	bl	800b45c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80076a4:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80076a6:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80076a8:	f001 f90c 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 80076ac:	7b22      	ldrb	r2, [r4, #12]
 80076ae:	4601      	mov	r1, r0
 80076b0:	4628      	mov	r0, r5
 80076b2:	f003 fd3d 	bl	800b130 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80076b6:	4620      	mov	r0, r4
 80076b8:	f005 fadc 	bl	800cc74 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80076bc:	6820      	ldr	r0, [r4, #0]
 80076be:	6943      	ldr	r3, [r0, #20]
 80076c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076c4:	6143      	str	r3, [r0, #20]
 80076c6:	e6de      	b.n	8007486 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076c8:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80076cc:	2110      	movs	r1, #16
 80076ce:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076d0:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80076da:	f003 fead 	bl	800b438 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076de:	6860      	ldr	r0, [r4, #4]
 80076e0:	b310      	cbz	r0, 8007728 <HAL_PCD_IRQHandler+0x38c>
 80076e2:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80076e6:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 80076ea:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076ec:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076f4:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076f6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80076fa:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076fe:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8007702:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007706:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800770a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800770e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8007712:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007716:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800771a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800771e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007722:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007726:	d1e0      	bne.n	80076ea <HAL_PCD_IRQHandler+0x34e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007728:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800772a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800772c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007730:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007732:	b9f2      	cbnz	r2, 8007772 <HAL_PCD_IRQHandler+0x3d6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007734:	696a      	ldr	r2, [r5, #20]
 8007736:	f242 032b 	movw	r3, #8235	; 0x202b
 800773a:	4313      	orrs	r3, r2
 800773c:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800773e:	692b      	ldr	r3, [r5, #16]
 8007740:	f043 030b 	orr.w	r3, r3, #11
 8007744:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007746:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800774a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800774e:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007750:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007754:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007756:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800775a:	f004 fa07 	bl	800bb6c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800775e:	6820      	ldr	r0, [r4, #0]
 8007760:	6943      	ldr	r3, [r0, #20]
 8007762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007766:	6143      	str	r3, [r0, #20]
 8007768:	e686      	b.n	8007478 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 800776a:	4620      	mov	r0, r4
 800776c:	f005 fa98 	bl	800cca0 <HAL_PCD_SuspendCallback>
 8007770:	e67b      	b.n	800746a <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007772:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8007776:	f043 030b 	orr.w	r3, r3, #11
 800777a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800777e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007780:	f043 030b 	orr.w	r3, r3, #11
 8007784:	646b      	str	r3, [r5, #68]	; 0x44
 8007786:	e7de      	b.n	8007746 <HAL_PCD_IRQHandler+0x3aa>
        hpcd->LPM_State = LPM_L0;
 8007788:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800778a:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800778c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007790:	f000 fac8 	bl	8007d24 <HAL_PCDEx_LPM_Callback>
 8007794:	e6b6      	b.n	8007504 <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007796:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800779a:	2208      	movs	r2, #8
 800779c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80077a0:	4630      	mov	r0, r6
 80077a2:	f004 f8e3 	bl	800b96c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077a6:	f3c5 130a 	ubfx	r3, r5, #4, #11
 80077aa:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 80077ae:	6820      	ldr	r0, [r4, #0]
 80077b0:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80077b4:	440b      	add	r3, r1
 80077b6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80077ba:	e621      	b.n	8007400 <HAL_PCD_IRQHandler+0x64>
 80077bc:	9e02      	ldr	r6, [sp, #8]
 80077be:	e62a      	b.n	8007416 <HAL_PCD_IRQHandler+0x7a>
 80077c0:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 80077c4:	e62d      	b.n	8007422 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 80077c6:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077ca:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 80077ce:	428b      	cmp	r3, r1
 80077d0:	f63f aeb0 	bhi.w	8007534 <HAL_PCD_IRQHandler+0x198>
  len = ep->xfer_len - ep->xfer_count;
 80077d4:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 80077d6:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077d8:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077dc:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 80077e0:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077e2:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len32b = (len + 3U) / 4U;
 80077e6:	bf28      	it	cs
 80077e8:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077ea:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 80077ee:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077f0:	b280      	uxth	r0, r0
 80077f2:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 80077f6:	d21b      	bcs.n	8007830 <HAL_PCD_IRQHandler+0x494>
 80077f8:	e022      	b.n	8007840 <HAL_PCD_IRQHandler+0x4a4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80077fa:	b1f9      	cbz	r1, 800783c <HAL_PCD_IRQHandler+0x4a0>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80077fc:	f894 c010 	ldrb.w	ip, [r4, #16]
 8007800:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 8007804:	f8cd c000 	str.w	ip, [sp]
 8007808:	429e      	cmp	r6, r3
 800780a:	bf28      	it	cs
 800780c:	461e      	movcs	r6, r3
 800780e:	b2b3      	uxth	r3, r6
 8007810:	f004 f896 	bl	800b940 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007814:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 8007818:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800781a:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 800781c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800781e:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8007820:	4431      	add	r1, r6
    ep->xfer_count += len;
 8007822:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007824:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8007828:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800782a:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800782c:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800782e:	d305      	bcc.n	800783c <HAL_PCD_IRQHandler+0x4a0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007830:	4299      	cmp	r1, r3
    len = ep->xfer_len - ep->xfer_count;
 8007832:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007836:	463a      	mov	r2, r7
 8007838:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800783a:	d8de      	bhi.n	80077fa <HAL_PCD_IRQHandler+0x45e>
 800783c:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 8007840:	4299      	cmp	r1, r3
 8007842:	f63f ae77 	bhi.w	8007534 <HAL_PCD_IRQHandler+0x198>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007846:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007848:	f00a 010f 	and.w	r1, sl, #15
 800784c:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800784e:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007852:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007856:	ea22 0201 	bic.w	r2, r2, r1
 800785a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800785e:	e669      	b.n	8007534 <HAL_PCD_IRQHandler+0x198>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007860:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 8007864:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007866:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800786a:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800786c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007872:	485e      	ldr	r0, [pc, #376]	; (80079ec <HAL_PCD_IRQHandler+0x650>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007874:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007876:	4282      	cmp	r2, r0
 8007878:	d963      	bls.n	8007942 <HAL_PCD_IRQHandler+0x5a6>
 800787a:	0409      	lsls	r1, r1, #16
 800787c:	d502      	bpl.n	8007884 <HAL_PCD_IRQHandler+0x4e8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800787e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007882:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007884:	4620      	mov	r0, r4
 8007886:	f005 f9d7 	bl	800cc38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800788a:	6921      	ldr	r1, [r4, #16]
 800788c:	2901      	cmp	r1, #1
 800788e:	d07b      	beq.n	8007988 <HAL_PCD_IRQHandler+0x5ec>
 8007890:	6820      	ldr	r0, [r4, #0]
 8007892:	e6c5      	b.n	8007620 <HAL_PCD_IRQHandler+0x284>
  if (hpcd->Init.dma_enable == 1U)
 8007894:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007898:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800789c:	2301      	movs	r3, #1
 800789e:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078a2:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 80078a6:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80078aa:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078ae:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 80078b2:	d04b      	beq.n	800794c <HAL_PCD_IRQHandler+0x5b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078b4:	494e      	ldr	r1, [pc, #312]	; (80079f0 <HAL_PCD_IRQHandler+0x654>)
 80078b6:	428b      	cmp	r3, r1
 80078b8:	d057      	beq.n	800796a <HAL_PCD_IRQHandler+0x5ce>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078ba:	b927      	cbnz	r7, 80078c6 <HAL_PCD_IRQHandler+0x52a>
 80078bc:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	f000 808c 	beq.w	80079de <HAL_PCD_IRQHandler+0x642>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078c6:	4620      	mov	r0, r4
 80078c8:	4631      	mov	r1, r6
 80078ca:	f005 f9bb 	bl	800cc44 <HAL_PCD_DataOutStageCallback>
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	e6a2      	b.n	8007618 <HAL_PCD_IRQHandler+0x27c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80078d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80078d6:	421d      	tst	r5, r3
 80078d8:	f43f ad92 	beq.w	8007400 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078dc:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80078e0:	f3c5 120a 	ubfx	r2, r5, #4, #11
 80078e4:	4630      	mov	r0, r6
 80078e6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80078ea:	4615      	mov	r5, r2
 80078ec:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 80078f0:	f004 f83c 	bl	800b96c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078f4:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078fc:	442a      	add	r2, r5
 80078fe:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007900:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007902:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007906:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800790a:	e579      	b.n	8007400 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800790c:	4620      	mov	r0, r4
 800790e:	f005 f9c7 	bl	800cca0 <HAL_PCD_SuspendCallback>
 8007912:	e5e3      	b.n	80074dc <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 8007914:	4620      	mov	r0, r4
 8007916:	f005 f9eb 	bl	800ccf0 <HAL_PCD_DisconnectCallback>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	e5d5      	b.n	80074ca <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800791e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8007922:	4413      	add	r3, r2
 8007924:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007926:	f1ba 0f00 	cmp.w	sl, #0
 800792a:	f47f ae2d 	bne.w	8007588 <HAL_PCD_IRQHandler+0x1ec>
 800792e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007930:	2b00      	cmp	r3, #0
 8007932:	f47f ae29 	bne.w	8007588 <HAL_PCD_IRQHandler+0x1ec>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007936:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800793a:	6820      	ldr	r0, [r4, #0]
 800793c:	f004 f916 	bl	800bb6c <USB_EP0_OutStart>
 8007940:	e622      	b.n	8007588 <HAL_PCD_IRQHandler+0x1ec>
  HAL_PCD_SetupStageCallback(hpcd);
 8007942:	4620      	mov	r0, r4
 8007944:	f005 f978 	bl	800cc38 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	e669      	b.n	8007620 <HAL_PCD_IRQHandler+0x284>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800794c:	f01e 0f08 	tst.w	lr, #8
 8007950:	d014      	beq.n	800797c <HAL_PCD_IRQHandler+0x5e0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007952:	4926      	ldr	r1, [pc, #152]	; (80079ec <HAL_PCD_IRQHandler+0x650>)
 8007954:	428b      	cmp	r3, r1
 8007956:	f67f ae5f 	bls.w	8007618 <HAL_PCD_IRQHandler+0x27c>
 800795a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800795e:	f43f ae5b 	beq.w	8007618 <HAL_PCD_IRQHandler+0x27c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007966:	6093      	str	r3, [r2, #8]
 8007968:	e656      	b.n	8007618 <HAL_PCD_IRQHandler+0x27c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800796a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800796e:	d1f8      	bne.n	8007962 <HAL_PCD_IRQHandler+0x5c6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007970:	f01e 0f20 	tst.w	lr, #32
 8007974:	d0a7      	beq.n	80078c6 <HAL_PCD_IRQHandler+0x52a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007976:	2120      	movs	r1, #32
 8007978:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800797a:	e7a4      	b.n	80078c6 <HAL_PCD_IRQHandler+0x52a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800797c:	f01e 0f20 	tst.w	lr, #32
 8007980:	d008      	beq.n	8007994 <HAL_PCD_IRQHandler+0x5f8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007982:	2320      	movs	r3, #32
 8007984:	6093      	str	r3, [r2, #8]
 8007986:	e647      	b.n	8007618 <HAL_PCD_IRQHandler+0x27c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007988:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	f004 f8ed 	bl	800bb6c <USB_EP0_OutStart>
 8007992:	e77d      	b.n	8007890 <HAL_PCD_IRQHandler+0x4f4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007994:	f01e 0f28 	tst.w	lr, #40	; 0x28
 8007998:	f47f ae3e 	bne.w	8007618 <HAL_PCD_IRQHandler+0x27c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800799c:	4913      	ldr	r1, [pc, #76]	; (80079ec <HAL_PCD_IRQHandler+0x650>)
 800799e:	428b      	cmp	r3, r1
 80079a0:	d902      	bls.n	80079a8 <HAL_PCD_IRQHandler+0x60c>
 80079a2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 80079a6:	d1dc      	bne.n	8007962 <HAL_PCD_IRQHandler+0x5c6>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80079a8:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 80079aa:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80079b2:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079b6:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 80079b8:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079ba:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 80079be:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80079c2:	2f00      	cmp	r7, #0
 80079c4:	f47f af7f 	bne.w	80078c6 <HAL_PCD_IRQHandler+0x52a>
 80079c8:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	f47f af7a 	bne.w	80078c6 <HAL_PCD_IRQHandler+0x52a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079d2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80079d6:	2101      	movs	r1, #1
 80079d8:	f004 f8c8 	bl	800bb6c <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079dc:	e773      	b.n	80078c6 <HAL_PCD_IRQHandler+0x52a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80079de:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80079e2:	4639      	mov	r1, r7
 80079e4:	f004 f8c2 	bl	800bb6c <USB_EP0_OutStart>
 80079e8:	e76d      	b.n	80078c6 <HAL_PCD_IRQHandler+0x52a>
 80079ea:	bf00      	nop
 80079ec:	4f54300a 	.word	0x4f54300a
 80079f0:	4f54310a 	.word	0x4f54310a

080079f4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80079f4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80079f8:	2a01      	cmp	r2, #1
 80079fa:	d00d      	beq.n	8007a18 <HAL_PCD_SetAddress+0x24>
 80079fc:	2201      	movs	r2, #1
{
 80079fe:	b510      	push	{r4, lr}
 8007a00:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8007a02:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a06:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8007a08:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a0c:	f004 f832 	bl	800ba74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a10:	2000      	movs	r0, #0
 8007a12:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007a16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007a18:	2002      	movs	r0, #2
}
 8007a1a:	4770      	bx	lr

08007a1c <HAL_PCD_EP_Open>:
{
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8007a22:	0609      	lsls	r1, r1, #24
{
 8007a24:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a26:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8007a2a:	d422      	bmi.n	8007a72 <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 8007a2c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a30:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 8007a34:	2700      	movs	r7, #0
 8007a36:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a3a:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8007a3e:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 8007a42:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a44:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8007a46:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007a48:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007a4a:	b100      	cbz	r0, 8007a4e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8007a4c:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d101      	bne.n	8007a56 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8007a56:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d015      	beq.n	8007a8a <HAL_PCD_EP_Open+0x6e>
 8007a5e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a60:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 8007a62:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a66:	f003 fd05 	bl	800b474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8007a72:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 8007a76:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a78:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 8007a7c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a80:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8007a84:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 8007a88:	e7db      	b.n	8007a42 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8007a8a:	2002      	movs	r0, #2
}
 8007a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a8e:	bf00      	nop

08007a90 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007a90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a94:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a98:	f04f 011c 	mov.w	r1, #28
{
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8007aa0:	d119      	bne.n	8007ad6 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007aa2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007aa6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007aaa:	2000      	movs	r0, #0
 8007aac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ab0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007ab4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007ab8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007aba:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d018      	beq.n	8007af4 <HAL_PCD_EP_Close+0x64>
 8007ac2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ac4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007ac6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007aca:	f003 fd1b 	bl	800b504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007ad4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad6:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007ada:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007ade:	2001      	movs	r0, #1
 8007ae0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ae4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007ae6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007aea:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007aec:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d1e6      	bne.n	8007ac2 <HAL_PCD_EP_Close+0x32>
 8007af4:	2002      	movs	r0, #2
}
 8007af6:	bd10      	pop	{r4, pc}

08007af8 <HAL_PCD_EP_Receive>:
{
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 8007afe:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b00:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007b02:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b06:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007b0a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b0e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8007b12:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8007b16:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b1a:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 8007b1e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8007b22:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 8007b26:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b28:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007b2a:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8007b2c:	bf08      	it	eq
 8007b2e:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b32:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b34:	b91d      	cbnz	r5, 8007b3e <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b36:	f003 fe5b 	bl	800b7f0 <USB_EP0StartXfer>
}
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b3e:	f003 fd43 	bl	800b5c8 <USB_EPStartXfer>
}
 8007b42:	2000      	movs	r0, #0
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	bf00      	nop

08007b48 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007b48:	f001 010f 	and.w	r1, r1, #15
 8007b4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007b54:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop

08007b5c <HAL_PCD_EP_Transmit>:
{
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8007b62:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8007b64:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b66:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8007b68:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b6c:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8007b70:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b74:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8007b76:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8007b78:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b7a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8007b7e:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8007b80:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8007b84:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b86:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8007b88:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 8007b8a:	bf08      	it	eq
 8007b8c:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b8e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b90:	b91d      	cbnz	r5, 8007b9a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b92:	f003 fe2d 	bl	800b7f0 <USB_EP0StartXfer>
}
 8007b96:	2000      	movs	r0, #0
 8007b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b9a:	f003 fd15 	bl	800b5c8 <USB_EPStartXfer>
}
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <HAL_PCD_EP_SetStall>:
{
 8007ba4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ba6:	6843      	ldr	r3, [r0, #4]
 8007ba8:	f001 050f 	and.w	r5, r1, #15
 8007bac:	429d      	cmp	r5, r3
 8007bae:	d833      	bhi.n	8007c18 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 8007bb0:	060b      	lsls	r3, r1, #24
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	d41c      	bmi.n	8007bf0 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8007bb6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8007bba:	201c      	movs	r0, #28
    ep->is_in = 0U;
 8007bbc:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007bbe:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 8007bc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8007bc6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007bca:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007bce:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bd0:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007bd2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007bd4:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d01b      	beq.n	8007c14 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007bdc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007bde:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007be2:	f003 fee7 	bl	800b9b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007be6:	b1cd      	cbz	r5, 8007c1c <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8007be8:	2000      	movs	r0, #0
 8007bea:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bf0:	211c      	movs	r1, #28
    ep->is_in = 1U;
 8007bf2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007bf6:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bf8:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 8007bfc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c00:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8007c06:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c08:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007c0a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007c0c:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d1e3      	bne.n	8007bdc <HAL_PCD_EP_SetStall+0x38>
 8007c14:	2002      	movs	r0, #2
}
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007c18:	2001      	movs	r0, #1
}
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c1c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8007c20:	7c21      	ldrb	r1, [r4, #16]
 8007c22:	6820      	ldr	r0, [r4, #0]
 8007c24:	f003 ffa2 	bl	800bb6c <USB_EP0_OutStart>
 8007c28:	e7de      	b.n	8007be8 <HAL_PCD_EP_SetStall+0x44>
 8007c2a:	bf00      	nop

08007c2c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c2c:	6842      	ldr	r2, [r0, #4]
{
 8007c2e:	b538      	push	{r3, r4, r5, lr}
 8007c30:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d832      	bhi.n	8007c9e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8007c38:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007c3c:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c3e:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 8007c42:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 8007c46:	d119      	bne.n	8007c7c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c48:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007c52:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c54:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8007c58:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c5c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007c5e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007c60:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d018      	beq.n	8007c9a <HAL_PCD_EP_ClrStall+0x6e>
 8007c68:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c6a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8007c6c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c70:	f003 fed4 	bl	800ba1c <USB_EPClearStall>
  return HAL_OK;
 8007c74:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007c76:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c7c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 8007c80:	2001      	movs	r0, #1
 8007c82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 8007c86:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c88:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8007c8a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c8e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007c90:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007c92:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d1e6      	bne.n	8007c68 <HAL_PCD_EP_ClrStall+0x3c>
 8007c9a:	2002      	movs	r0, #2
}
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007c9e:	2001      	movs	r0, #1
}
 8007ca0:	bd38      	pop	{r3, r4, r5, pc}
 8007ca2:	bf00      	nop

08007ca4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007ca4:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ca6:	6805      	ldr	r5, [r0, #0]
 8007ca8:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 8007caa:	b929      	cbnz	r1, 8007cb8 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007cb0:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007cb2:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8007cb4:	bc30      	pop	{r4, r5}
 8007cb6:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007cb8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8007cba:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007cbc:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007cc0:	d00b      	beq.n	8007cda <HAL_PCDEx_SetTxFiFo+0x36>
 8007cc2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cc4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 8007cc8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cca:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8007cce:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cd0:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8007cd2:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cd4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007cd8:	d3f4      	bcc.n	8007cc4 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007cda:	3440      	adds	r4, #64	; 0x40
 8007cdc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007ce0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007ce4:	6060      	str	r0, [r4, #4]
}
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	bc30      	pop	{r4, r5}
 8007cea:	4770      	bx	lr

08007cec <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007cec:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 8007cee:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6259      	str	r1, [r3, #36]	; 0x24
}
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop

08007cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007cf8:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007cfa:	4909      	ldr	r1, [pc, #36]	; (8007d20 <HAL_PCDEx_ActivateLPM+0x28>)
{
 8007cfc:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cfe:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 8007d00:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 8007d02:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 8007d04:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 8007d08:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007d0a:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 8007d0c:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007d10:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8007d14:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007d16:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d18:	4319      	orrs	r1, r3
}
 8007d1a:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007d1c:	6551      	str	r1, [r2, #84]	; 0x54
}
 8007d1e:	4770      	bx	lr
 8007d20:	10000003 	.word	0x10000003

08007d24 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop

08007d28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d28:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d2a:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <HAL_PWREx_ConfigSupply+0x48>)
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	0752      	lsls	r2, r2, #29
 8007d30:	d406      	bmi.n	8007d40 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d38:	1a18      	subs	r0, r3, r0
 8007d3a:	bf18      	it	ne
 8007d3c:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d40:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d42:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d44:	f022 0207 	bic.w	r2, r2, #7
 8007d48:	4310      	orrs	r0, r2
 8007d4a:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8007d4c:	f7fc fa1e 	bl	800418c <HAL_GetTick>
 8007d50:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d52:	e005      	b.n	8007d60 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d54:	f7fc fa1a 	bl	800418c <HAL_GetTick>
 8007d58:	1b00      	subs	r0, r0, r4
 8007d5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007d5e:	d804      	bhi.n	8007d6a <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d60:	686b      	ldr	r3, [r5, #4]
 8007d62:	049b      	lsls	r3, r3, #18
 8007d64:	d5f6      	bpl.n	8007d54 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8007d66:	2000      	movs	r0, #0
}
 8007d68:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007d6a:	2001      	movs	r0, #1
}
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	58024800 	.word	0x58024800

08007d74 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007d74:	4a02      	ldr	r2, [pc, #8]	; (8007d80 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8007d76:	68d3      	ldr	r3, [r2, #12]
 8007d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d7c:	60d3      	str	r3, [r2, #12]
}
 8007d7e:	4770      	bx	lr
 8007d80:	58024800 	.word	0x58024800

08007d84 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d84:	4b3b      	ldr	r3, [pc, #236]	; (8007e74 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8007d86:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007d8a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8007d8e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007d92:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d96:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 8007d98:	d038      	beq.n	8007e0c <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d9a:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007d9e:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007da2:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007da6:	fb01 f105 	mul.w	r1, r1, r5
 8007daa:	2a01      	cmp	r2, #1
 8007dac:	ee07 1a90 	vmov	s15, r1
 8007db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8007db4:	d002      	beq.n	8007dbc <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8007db6:	2a02      	cmp	r2, #2
 8007db8:	d04e      	beq.n	8007e58 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8007dba:	b34a      	cbz	r2, 8007e10 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dbc:	ee07 0a90 	vmov	s15, r0
 8007dc0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007e78 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8007dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8007dce:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007e7c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8007dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd6:	ee06 3a90 	vmov	s13, r3
 8007dda:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8007dde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007de2:	ee76 6a85 	vadd.f32	s13, s13, s10
 8007de6:	eee7 6a25 	vfma.f32	s13, s14, s11
 8007dea:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007dee:	4b21      	ldr	r3, [pc, #132]	; (8007e74 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007df6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007df8:	ee07 3a90 	vmov	s15, r3
 8007dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e08:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8007e0c:	bc30      	pop	{r4, r5}
 8007e0e:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	0692      	lsls	r2, r2, #26
 8007e14:	d527      	bpl.n	8007e66 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e16:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e18:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e1c:	4a18      	ldr	r2, [pc, #96]	; (8007e80 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e1e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e22:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e2c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e2e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8007e7c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8007e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e36:	ee06 2a10 	vmov	s12, r2
 8007e3a:	ee06 3a90 	vmov	s13, r3
 8007e3e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8007e42:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007e46:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8007e4a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007e4e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8007e52:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007e56:	e7ca      	b.n	8007dee <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e58:	ee07 0a90 	vmov	s15, r0
 8007e5c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007e84 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8007e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e64:	e7b0      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e66:	ee07 0a90 	vmov	s15, r0
 8007e6a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007e88 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8007e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e72:	e7a9      	b.n	8007dc8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8007e74:	58024400 	.word	0x58024400
 8007e78:	4a742400 	.word	0x4a742400
 8007e7c:	39000000 	.word	0x39000000
 8007e80:	03d09000 	.word	0x03d09000
 8007e84:	4bbebc20 	.word	0x4bbebc20
 8007e88:	4c742400 	.word	0x4c742400

08007e8c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f000 81f7 	beq.w	8008280 <HAL_RCC_OscConfig+0x3f4>
{
 8007e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e94:	6803      	ldr	r3, [r0, #0]
 8007e96:	4604      	mov	r4, r0
 8007e98:	07d9      	lsls	r1, r3, #31
 8007e9a:	d52e      	bpl.n	8007efa <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e9c:	49b4      	ldr	r1, [pc, #720]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007e9e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ea0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ea2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ea6:	2a10      	cmp	r2, #16
 8007ea8:	f000 812c 	beq.w	8008104 <HAL_RCC_OscConfig+0x278>
 8007eac:	2a18      	cmp	r2, #24
 8007eae:	f000 8124 	beq.w	80080fa <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb8:	f000 8167 	beq.w	800818a <HAL_RCC_OscConfig+0x2fe>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 817f 	beq.w	80081c0 <HAL_RCC_OscConfig+0x334>
 8007ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ec6:	4baa      	ldr	r3, [pc, #680]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	f000 8278 	beq.w	80083be <HAL_RCC_OscConfig+0x532>
 8007ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007edc:	f7fc f956 	bl	800418c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ee0:	4ea3      	ldr	r6, [pc, #652]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8007ee2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ee4:	e005      	b.n	8007ef2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ee6:	f7fc f951 	bl	800418c <HAL_GetTick>
 8007eea:	1b40      	subs	r0, r0, r5
 8007eec:	2864      	cmp	r0, #100	; 0x64
 8007eee:	f200 8165 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ef2:	6833      	ldr	r3, [r6, #0]
 8007ef4:	039f      	lsls	r7, r3, #14
 8007ef6:	d5f6      	bpl.n	8007ee6 <HAL_RCC_OscConfig+0x5a>
 8007ef8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007efa:	0799      	lsls	r1, r3, #30
 8007efc:	d521      	bpl.n	8007f42 <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007efe:	4a9c      	ldr	r2, [pc, #624]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007f00:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f02:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f04:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8007f08:	f040 80a8 	bne.w	800805c <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f0c:	4b98      	ldr	r3, [pc, #608]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	075b      	lsls	r3, r3, #29
 8007f12:	d503      	bpl.n	8007f1c <HAL_RCC_OscConfig+0x90>
 8007f14:	68e3      	ldr	r3, [r4, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 80ed 	beq.w	80080f6 <HAL_RCC_OscConfig+0x26a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1c:	f7fc f94e 	bl	80041bc <HAL_GetREVID>
 8007f20:	f241 0303 	movw	r3, #4099	; 0x1003
 8007f24:	4298      	cmp	r0, r3
 8007f26:	f200 8189 	bhi.w	800823c <HAL_RCC_OscConfig+0x3b0>
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	2a40      	cmp	r2, #64	; 0x40
 8007f2e:	f000 824e 	beq.w	80083ce <HAL_RCC_OscConfig+0x542>
 8007f32:	498f      	ldr	r1, [pc, #572]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007f34:	684b      	ldr	r3, [r1, #4]
 8007f36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007f3e:	604b      	str	r3, [r1, #4]
 8007f40:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f42:	06d9      	lsls	r1, r3, #27
 8007f44:	d456      	bmi.n	8007ff4 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f46:	071d      	lsls	r5, r3, #28
 8007f48:	d517      	bpl.n	8007f7a <HAL_RCC_OscConfig+0xee>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80b4 	beq.w	80080ba <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_ENABLE();
 8007f52:	4b87      	ldr	r3, [pc, #540]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007f54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f56:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8007f5e:	f7fc f915 	bl	800418c <HAL_GetTick>
 8007f62:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f64:	e005      	b.n	8007f72 <HAL_RCC_OscConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f66:	f7fc f911 	bl	800418c <HAL_GetTick>
 8007f6a:	1b40      	subs	r0, r0, r5
 8007f6c:	2802      	cmp	r0, #2
 8007f6e:	f200 8125 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f72:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007f74:	0798      	lsls	r0, r3, #30
 8007f76:	d5f6      	bpl.n	8007f66 <HAL_RCC_OscConfig+0xda>
 8007f78:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f7a:	069a      	lsls	r2, r3, #26
 8007f7c:	d517      	bpl.n	8007fae <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007f7e:	69a3      	ldr	r3, [r4, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8134 	beq.w	80081ee <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8007f86:	4b7a      	ldr	r3, [pc, #488]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007f88:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f8a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8007f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007f92:	f7fc f8fb 	bl	800418c <HAL_GetTick>
 8007f96:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f98:	e005      	b.n	8007fa6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f9a:	f7fc f8f7 	bl	800418c <HAL_GetTick>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	2802      	cmp	r0, #2
 8007fa2:	f200 810b 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fa6:	6833      	ldr	r3, [r6, #0]
 8007fa8:	049f      	lsls	r7, r3, #18
 8007faa:	d5f6      	bpl.n	8007f9a <HAL_RCC_OscConfig+0x10e>
 8007fac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fae:	0759      	lsls	r1, r3, #29
 8007fb0:	f100 80b2 	bmi.w	8008118 <HAL_RCC_OscConfig+0x28c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fb6:	b1d8      	cbz	r0, 8007ff0 <HAL_RCC_OscConfig+0x164>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007fb8:	4b6d      	ldr	r3, [pc, #436]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007fc0:	2a18      	cmp	r2, #24
 8007fc2:	f000 81ce 	beq.w	8008362 <HAL_RCC_OscConfig+0x4d6>
        __HAL_RCC_PLL_DISABLE();
 8007fc6:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fc8:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fca:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8007fcc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007fd0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fd2:	f000 8161 	beq.w	8008298 <HAL_RCC_OscConfig+0x40c>
        tickstart = HAL_GetTick();
 8007fd6:	f7fc f8d9 	bl	800418c <HAL_GetTick>
 8007fda:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fdc:	e005      	b.n	8007fea <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fde:	f7fc f8d5 	bl	800418c <HAL_GetTick>
 8007fe2:	1b00      	subs	r0, r0, r4
 8007fe4:	2802      	cmp	r0, #2
 8007fe6:	f200 80e9 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fea:	682b      	ldr	r3, [r5, #0]
 8007fec:	019b      	lsls	r3, r3, #6
 8007fee:	d4f6      	bmi.n	8007fde <HAL_RCC_OscConfig+0x152>
  return HAL_OK;
 8007ff0:	2000      	movs	r0, #0
}
 8007ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ff4:	4a5e      	ldr	r2, [pc, #376]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8007ff6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ff8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d072      	beq.n	80080e8 <HAL_RCC_OscConfig+0x25c>
 8008002:	2b18      	cmp	r3, #24
 8008004:	d06c      	beq.n	80080e0 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008006:	69e3      	ldr	r3, [r4, #28]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8103 	beq.w	8008214 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 800800e:	4b58      	ldr	r3, [pc, #352]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8008010:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008012:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8008014:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008018:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800801a:	f7fc f8b7 	bl	800418c <HAL_GetTick>
 800801e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008020:	e005      	b.n	800802e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008022:	f7fc f8b3 	bl	800418c <HAL_GetTick>
 8008026:	1b40      	subs	r0, r0, r5
 8008028:	2802      	cmp	r0, #2
 800802a:	f200 80c7 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800802e:	6833      	ldr	r3, [r6, #0]
 8008030:	05db      	lsls	r3, r3, #23
 8008032:	d5f6      	bpl.n	8008022 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008034:	f7fc f8c2 	bl	80041bc <HAL_GetREVID>
 8008038:	f241 0303 	movw	r3, #4099	; 0x1003
 800803c:	4298      	cmp	r0, r3
 800803e:	f200 81e9 	bhi.w	8008414 <HAL_RCC_OscConfig+0x588>
 8008042:	6a22      	ldr	r2, [r4, #32]
 8008044:	6873      	ldr	r3, [r6, #4]
 8008046:	2a20      	cmp	r2, #32
 8008048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800804c:	bf0c      	ite	eq
 800804e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008052:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008056:	6073      	str	r3, [r6, #4]
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	e774      	b.n	8007f46 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800805c:	2b18      	cmp	r3, #24
 800805e:	f000 810b 	beq.w	8008278 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008062:	68e2      	ldr	r2, [r4, #12]
 8008064:	2a00      	cmp	r2, #0
 8008066:	f000 80f3 	beq.w	8008250 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800806a:	4941      	ldr	r1, [pc, #260]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 800806c:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800806e:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008070:	f023 0319 	bic.w	r3, r3, #25
 8008074:	4313      	orrs	r3, r2
 8008076:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8008078:	f7fc f888 	bl	800418c <HAL_GetTick>
 800807c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800807e:	e005      	b.n	800808c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008080:	f7fc f884 	bl	800418c <HAL_GetTick>
 8008084:	1b40      	subs	r0, r0, r5
 8008086:	2802      	cmp	r0, #2
 8008088:	f200 8098 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800808c:	6833      	ldr	r3, [r6, #0]
 800808e:	075f      	lsls	r7, r3, #29
 8008090:	d5f6      	bpl.n	8008080 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008092:	f7fc f893 	bl	80041bc <HAL_GetREVID>
 8008096:	f241 0303 	movw	r3, #4099	; 0x1003
 800809a:	4298      	cmp	r0, r3
 800809c:	f200 81c3 	bhi.w	8008426 <HAL_RCC_OscConfig+0x59a>
 80080a0:	6922      	ldr	r2, [r4, #16]
 80080a2:	6873      	ldr	r3, [r6, #4]
 80080a4:	2a40      	cmp	r2, #64	; 0x40
 80080a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080aa:	bf0c      	ite	eq
 80080ac:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80080b0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80080b4:	6073      	str	r3, [r6, #4]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	e743      	b.n	8007f42 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 80080ba:	4b2d      	ldr	r3, [pc, #180]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 80080bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080be:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80080c6:	f7fc f861 	bl	800418c <HAL_GetTick>
 80080ca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080cc:	e004      	b.n	80080d8 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080ce:	f7fc f85d 	bl	800418c <HAL_GetTick>
 80080d2:	1b40      	subs	r0, r0, r5
 80080d4:	2802      	cmp	r0, #2
 80080d6:	d871      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080d8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80080da:	0799      	lsls	r1, r3, #30
 80080dc:	d4f7      	bmi.n	80080ce <HAL_RCC_OscConfig+0x242>
 80080de:	e74b      	b.n	8007f78 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080e0:	f002 0203 	and.w	r2, r2, #3
 80080e4:	2a01      	cmp	r2, #1
 80080e6:	d18e      	bne.n	8008006 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080e8:	4b21      	ldr	r3, [pc, #132]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	05da      	lsls	r2, r3, #23
 80080ee:	d552      	bpl.n	8008196 <HAL_RCC_OscConfig+0x30a>
 80080f0:	69e3      	ldr	r3, [r4, #28]
 80080f2:	2b80      	cmp	r3, #128	; 0x80
 80080f4:	d04f      	beq.n	8008196 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
}
 80080f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080fa:	f001 0103 	and.w	r1, r1, #3
 80080fe:	2902      	cmp	r1, #2
 8008100:	f47f aed7 	bne.w	8007eb2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	0392      	lsls	r2, r2, #14
 800810a:	f57f aef6 	bpl.w	8007efa <HAL_RCC_OscConfig+0x6e>
 800810e:	6862      	ldr	r2, [r4, #4]
 8008110:	2a00      	cmp	r2, #0
 8008112:	f47f aef2 	bne.w	8007efa <HAL_RCC_OscConfig+0x6e>
 8008116:	e7ee      	b.n	80080f6 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8008118:	4b16      	ldr	r3, [pc, #88]	; (8008174 <HAL_RCC_OscConfig+0x2e8>)
 800811a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800811c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800811e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008122:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008124:	f7fc f832 	bl	800418c <HAL_GetTick>
 8008128:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800812a:	e004      	b.n	8008136 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800812c:	f7fc f82e 	bl	800418c <HAL_GetTick>
 8008130:	1b40      	subs	r0, r0, r5
 8008132:	2864      	cmp	r0, #100	; 0x64
 8008134:	d842      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008136:	6833      	ldr	r3, [r6, #0]
 8008138:	05da      	lsls	r2, r3, #23
 800813a:	d5f7      	bpl.n	800812c <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	2b01      	cmp	r3, #1
 8008140:	f000 817a 	beq.w	8008438 <HAL_RCC_OscConfig+0x5ac>
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 814b 	beq.w	80083e0 <HAL_RCC_OscConfig+0x554>
 800814a:	2b05      	cmp	r3, #5
 800814c:	4b08      	ldr	r3, [pc, #32]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
 800814e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008150:	f000 8187 	beq.w	8008462 <HAL_RCC_OscConfig+0x5d6>
 8008154:	f022 0201 	bic.w	r2, r2, #1
 8008158:	671a      	str	r2, [r3, #112]	; 0x70
 800815a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800815c:	f022 0204 	bic.w	r2, r2, #4
 8008160:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008162:	f7fc f813 	bl	800418c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008166:	4e02      	ldr	r6, [pc, #8]	; (8008170 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008168:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800816c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0x2f6>
 8008170:	58024400 	.word	0x58024400
 8008174:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008178:	f7fc f808 	bl	800418c <HAL_GetTick>
 800817c:	1b40      	subs	r0, r0, r5
 800817e:	42b8      	cmp	r0, r7
 8008180:	d81c      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008182:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008184:	079b      	lsls	r3, r3, #30
 8008186:	d5f7      	bpl.n	8008178 <HAL_RCC_OscConfig+0x2ec>
 8008188:	e714      	b.n	8007fb4 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800818a:	4aae      	ldr	r2, [pc, #696]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 800818c:	6813      	ldr	r3, [r2, #0]
 800818e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008192:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008194:	e6a2      	b.n	8007edc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008196:	f7fc f811 	bl	80041bc <HAL_GetREVID>
 800819a:	f241 0303 	movw	r3, #4099	; 0x1003
 800819e:	4298      	cmp	r0, r3
 80081a0:	d870      	bhi.n	8008284 <HAL_RCC_OscConfig+0x3f8>
 80081a2:	6a22      	ldr	r2, [r4, #32]
 80081a4:	2a20      	cmp	r2, #32
 80081a6:	f000 8153 	beq.w	8008450 <HAL_RCC_OscConfig+0x5c4>
 80081aa:	49a6      	ldr	r1, [pc, #664]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 80081ac:	684b      	ldr	r3, [r1, #4]
 80081ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80081b2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80081b6:	604b      	str	r3, [r1, #4]
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	e6c4      	b.n	8007f46 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80081bc:	2003      	movs	r0, #3
}
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081c0:	4ba0      	ldr	r3, [pc, #640]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 80081c2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081c4:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80081d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80081d4:	f7fb ffda 	bl	800418c <HAL_GetTick>
 80081d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081da:	e004      	b.n	80081e6 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081dc:	f7fb ffd6 	bl	800418c <HAL_GetTick>
 80081e0:	1b40      	subs	r0, r0, r5
 80081e2:	2864      	cmp	r0, #100	; 0x64
 80081e4:	d8ea      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081e6:	6833      	ldr	r3, [r6, #0]
 80081e8:	0398      	lsls	r0, r3, #14
 80081ea:	d4f7      	bmi.n	80081dc <HAL_RCC_OscConfig+0x350>
 80081ec:	e684      	b.n	8007ef8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80081ee:	4b95      	ldr	r3, [pc, #596]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 80081f0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081f2:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 80081f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80081fa:	f7fb ffc7 	bl	800418c <HAL_GetTick>
 80081fe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008200:	e004      	b.n	800820c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008202:	f7fb ffc3 	bl	800418c <HAL_GetTick>
 8008206:	1b40      	subs	r0, r0, r5
 8008208:	2802      	cmp	r0, #2
 800820a:	d8d7      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800820c:	6833      	ldr	r3, [r6, #0]
 800820e:	0498      	lsls	r0, r3, #18
 8008210:	d4f7      	bmi.n	8008202 <HAL_RCC_OscConfig+0x376>
 8008212:	e6cb      	b.n	8007fac <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8008214:	4b8b      	ldr	r3, [pc, #556]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 8008216:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008218:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800821a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800821e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008220:	f7fb ffb4 	bl	800418c <HAL_GetTick>
 8008224:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008226:	e004      	b.n	8008232 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008228:	f7fb ffb0 	bl	800418c <HAL_GetTick>
 800822c:	1b40      	subs	r0, r0, r5
 800822e:	2802      	cmp	r0, #2
 8008230:	d8c4      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008232:	6833      	ldr	r3, [r6, #0]
 8008234:	05df      	lsls	r7, r3, #23
 8008236:	d4f7      	bmi.n	8008228 <HAL_RCC_OscConfig+0x39c>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	e684      	b.n	8007f46 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823c:	4a81      	ldr	r2, [pc, #516]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 800823e:	6921      	ldr	r1, [r4, #16]
 8008240:	6853      	ldr	r3, [r2, #4]
 8008242:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008246:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800824a:	6053      	str	r3, [r2, #4]
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	e678      	b.n	8007f42 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8008250:	4b7c      	ldr	r3, [pc, #496]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 8008252:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008254:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8008256:	f022 0201 	bic.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800825c:	f7fb ff96 	bl	800418c <HAL_GetTick>
 8008260:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008262:	e004      	b.n	800826e <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008264:	f7fb ff92 	bl	800418c <HAL_GetTick>
 8008268:	1b40      	subs	r0, r0, r5
 800826a:	2802      	cmp	r0, #2
 800826c:	d8a6      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800826e:	6833      	ldr	r3, [r6, #0]
 8008270:	0758      	lsls	r0, r3, #29
 8008272:	d4f7      	bmi.n	8008264 <HAL_RCC_OscConfig+0x3d8>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	e664      	b.n	8007f42 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008278:	0792      	lsls	r2, r2, #30
 800827a:	f47f aef2 	bne.w	8008062 <HAL_RCC_OscConfig+0x1d6>
 800827e:	e645      	b.n	8007f0c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8008280:	2001      	movs	r0, #1
}
 8008282:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008284:	4a6f      	ldr	r2, [pc, #444]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 8008286:	6a21      	ldr	r1, [r4, #32]
 8008288:	68d3      	ldr	r3, [r2, #12]
 800828a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800828e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008292:	60d3      	str	r3, [r2, #12]
 8008294:	6823      	ldr	r3, [r4, #0]
 8008296:	e656      	b.n	8007f46 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8008298:	f7fb ff78 	bl	800418c <HAL_GetTick>
 800829c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800829e:	e004      	b.n	80082aa <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082a0:	f7fb ff74 	bl	800418c <HAL_GetTick>
 80082a4:	1b80      	subs	r0, r0, r6
 80082a6:	2802      	cmp	r0, #2
 80082a8:	d888      	bhi.n	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082aa:	682b      	ldr	r3, [r5, #0]
 80082ac:	0199      	lsls	r1, r3, #6
 80082ae:	d4f7      	bmi.n	80082a0 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80082b2:	4b65      	ldr	r3, [pc, #404]	; (8008448 <HAL_RCC_OscConfig+0x5bc>)
 80082b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80082b6:	4013      	ands	r3, r2
 80082b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082ba:	4964      	ldr	r1, [pc, #400]	; (800844c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082bc:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082be:	4e61      	ldr	r6, [pc, #388]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80082c4:	62ab      	str	r3, [r5, #40]	; 0x28
 80082c6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80082c8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80082cc:	3f01      	subs	r7, #1
 80082ce:	1e50      	subs	r0, r2, #1
 80082d0:	3b01      	subs	r3, #1
 80082d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80082d4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80082d8:	025b      	lsls	r3, r3, #9
 80082da:	0400      	lsls	r0, r0, #16
 80082dc:	3a01      	subs	r2, #1
 80082de:	b29b      	uxth	r3, r3
 80082e0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 80082e4:	0612      	lsls	r2, r2, #24
 80082e6:	4303      	orrs	r3, r0
 80082e8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80082ec:	433b      	orrs	r3, r7
 80082ee:	4313      	orrs	r3, r2
 80082f0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80082f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80082fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80082fe:	4011      	ands	r1, r2
 8008300:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008304:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008306:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008308:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800830a:	f023 030c 	bic.w	r3, r3, #12
 800830e:	4313      	orrs	r3, r2
 8008310:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008312:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008314:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008316:	f023 0302 	bic.w	r3, r3, #2
 800831a:	4313      	orrs	r3, r2
 800831c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800831e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008324:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008326:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800832c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800832e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008334:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008336:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008338:	f043 0301 	orr.w	r3, r3, #1
 800833c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008344:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008346:	f7fb ff21 	bl	800418c <HAL_GetTick>
 800834a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800834c:	e005      	b.n	800835a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800834e:	f7fb ff1d 	bl	800418c <HAL_GetTick>
 8008352:	1b00      	subs	r0, r0, r4
 8008354:	2802      	cmp	r0, #2
 8008356:	f63f af31 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800835a:	6833      	ldr	r3, [r6, #0]
 800835c:	019a      	lsls	r2, r3, #6
 800835e:	d5f6      	bpl.n	800834e <HAL_RCC_OscConfig+0x4c2>
 8008360:	e646      	b.n	8007ff0 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008362:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008366:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008368:	f43f ae43 	beq.w	8007ff2 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800836c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008370:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008372:	428b      	cmp	r3, r1
 8008374:	f47f aebf 	bne.w	80080f6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008378:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800837c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800837e:	429a      	cmp	r2, r3
 8008380:	f47f aeb9 	bne.w	80080f6 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008384:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008386:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800838a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	f47f aeb2 	bne.w	80080f6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008394:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8008398:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800839a:	429a      	cmp	r2, r3
 800839c:	f47f aeab 	bne.w	80080f6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083a2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80083a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083a8:	429a      	cmp	r2, r3
 80083aa:	f47f aea4 	bne.w	80080f6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80083ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80083b0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80083b4:	3801      	subs	r0, #1
  return HAL_OK;
 80083b6:	1a28      	subs	r0, r5, r0
 80083b8:	bf18      	it	ne
 80083ba:	2001      	movne	r0, #1
}
 80083bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	e586      	b.n	8007edc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ce:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 80083d0:	6853      	ldr	r3, [r2, #4]
 80083d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80083d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083da:	6053      	str	r3, [r2, #4]
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	e5b0      	b.n	8007f42 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083e0:	4b18      	ldr	r3, [pc, #96]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083e8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083ea:	f022 0201 	bic.w	r2, r2, #1
 80083ee:	671a      	str	r2, [r3, #112]	; 0x70
 80083f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083f2:	f022 0204 	bic.w	r2, r2, #4
 80083f6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80083f8:	f7fb fec8 	bl	800418c <HAL_GetTick>
 80083fc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083fe:	e005      	b.n	800840c <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008400:	f7fb fec4 	bl	800418c <HAL_GetTick>
 8008404:	1b40      	subs	r0, r0, r5
 8008406:	42b8      	cmp	r0, r7
 8008408:	f63f aed8 	bhi.w	80081bc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800840c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800840e:	0798      	lsls	r0, r3, #30
 8008410:	d4f6      	bmi.n	8008400 <HAL_RCC_OscConfig+0x574>
 8008412:	e5cf      	b.n	8007fb4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008414:	68f3      	ldr	r3, [r6, #12]
 8008416:	6a22      	ldr	r2, [r4, #32]
 8008418:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800841c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008420:	60f3      	str	r3, [r6, #12]
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	e58f      	b.n	8007f46 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008426:	6873      	ldr	r3, [r6, #4]
 8008428:	6922      	ldr	r2, [r4, #16]
 800842a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800842e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008432:	6073      	str	r3, [r6, #4]
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	e584      	b.n	8007f42 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008438:	4a02      	ldr	r2, [pc, #8]	; (8008444 <HAL_RCC_OscConfig+0x5b8>)
 800843a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008442:	e68e      	b.n	8008162 <HAL_RCC_OscConfig+0x2d6>
 8008444:	58024400 	.word	0x58024400
 8008448:	fffffc0c 	.word	0xfffffc0c
 800844c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008450:	4a08      	ldr	r2, [pc, #32]	; (8008474 <HAL_RCC_OscConfig+0x5e8>)
 8008452:	6853      	ldr	r3, [r2, #4]
 8008454:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800845c:	6053      	str	r3, [r2, #4]
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	e571      	b.n	8007f46 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008462:	f042 0204 	orr.w	r2, r2, #4
 8008466:	671a      	str	r2, [r3, #112]	; 0x70
 8008468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	671a      	str	r2, [r3, #112]	; 0x70
 8008470:	e677      	b.n	8008162 <HAL_RCC_OscConfig+0x2d6>
 8008472:	bf00      	nop
 8008474:	58024400 	.word	0x58024400

08008478 <HAL_RCC_MCOConfig>:
{
 8008478:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800847c:	460d      	mov	r5, r1
 800847e:	b088      	sub	sp, #32
 8008480:	4614      	mov	r4, r2
  if(RCC_MCOx == RCC_MCO1)
 8008482:	bb28      	cbnz	r0, 80084d0 <HAL_RCC_MCOConfig+0x58>
    MCO1_CLK_ENABLE();
 8008484:	4e27      	ldr	r6, [pc, #156]	; (8008524 <HAL_RCC_MCOConfig+0xac>)
 8008486:	4603      	mov	r3, r0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008488:	f44f 7880 	mov.w	r8, #256	; 0x100
 800848c:	f04f 0902 	mov.w	r9, #2
    MCO1_CLK_ENABLE();
 8008490:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008494:	a902      	add	r1, sp, #8
 8008496:	4824      	ldr	r0, [pc, #144]	; (8008528 <HAL_RCC_MCOConfig+0xb0>)
    MCO1_CLK_ENABLE();
 8008498:	f042 0201 	orr.w	r2, r2, #1
 800849c:	f8c6 20e0 	str.w	r2, [r6, #224]	; 0xe0
 80084a0:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80084a4:	9306      	str	r3, [sp, #24]
    MCO1_CLK_ENABLE();
 80084a6:	f002 0201 	and.w	r2, r2, #1
 80084aa:	9200      	str	r2, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 80084ac:	2200      	movs	r2, #0
    MCO1_CLK_ENABLE();
 80084ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80084b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80084ba:	f7fe fd0d 	bl	8006ed8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80084be:	6932      	ldr	r2, [r6, #16]
 80084c0:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 80084c4:	432a      	orrs	r2, r5
 80084c6:	4322      	orrs	r2, r4
 80084c8:	6132      	str	r2, [r6, #16]
}
 80084ca:	b008      	add	sp, #32
 80084cc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MCO2_CLK_ENABLE();
 80084d0:	4e14      	ldr	r6, [pc, #80]	; (8008524 <HAL_RCC_MCOConfig+0xac>)
    GPIO_InitStruct.Pin = MCO2_PIN;
 80084d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80084d6:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80084d8:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 80084da:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO2_PIN;
 80084de:	f04f 0800 	mov.w	r8, #0
 80084e2:	f04f 0903 	mov.w	r9, #3
    MCO2_CLK_ENABLE();
 80084e6:	f043 0304 	orr.w	r3, r3, #4
 80084ea:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 80084ee:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80084f2:	9206      	str	r2, [sp, #24]
    MCO2_CLK_ENABLE();
 80084f4:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80084f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    MCO2_CLK_ENABLE();
 80084fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80084fe:	a902      	add	r1, sp, #8
 8008500:	480a      	ldr	r0, [pc, #40]	; (800852c <HAL_RCC_MCOConfig+0xb4>)
    MCO2_CLK_ENABLE();
 8008502:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008504:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008508:	f7fe fce6 	bl	8006ed8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800850c:	6933      	ldr	r3, [r6, #16]
 800850e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008512:	ea43 0105 	orr.w	r1, r3, r5
 8008516:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800851a:	6131      	str	r1, [r6, #16]
}
 800851c:	b008      	add	sp, #32
 800851e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400
 8008528:	58020000 	.word	0x58020000
 800852c:	58020800 	.word	0x58020800

08008530 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008530:	4a47      	ldr	r2, [pc, #284]	; (8008650 <HAL_RCC_GetSysClockFreq+0x120>)
 8008532:	6913      	ldr	r3, [r2, #16]
 8008534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008538:	2b10      	cmp	r3, #16
 800853a:	d004      	beq.n	8008546 <HAL_RCC_GetSysClockFreq+0x16>
 800853c:	2b18      	cmp	r3, #24
 800853e:	d00d      	beq.n	800855c <HAL_RCC_GetSysClockFreq+0x2c>
 8008540:	b11b      	cbz	r3, 800854a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8008542:	4844      	ldr	r0, [pc, #272]	; (8008654 <HAL_RCC_GetSysClockFreq+0x124>)
 8008544:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008546:	4844      	ldr	r0, [pc, #272]	; (8008658 <HAL_RCC_GetSysClockFreq+0x128>)
 8008548:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800854a:	6813      	ldr	r3, [r2, #0]
 800854c:	0699      	lsls	r1, r3, #26
 800854e:	d54a      	bpl.n	80085e6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008550:	6813      	ldr	r3, [r2, #0]
 8008552:	4842      	ldr	r0, [pc, #264]	; (800865c <HAL_RCC_GetSysClockFreq+0x12c>)
 8008554:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008558:	40d8      	lsrs	r0, r3
 800855a:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800855c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800855e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008560:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008562:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8008564:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008568:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800856c:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 800856e:	d038      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008570:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008574:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008578:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800857c:	fb01 f105 	mul.w	r1, r1, r5
 8008580:	2b01      	cmp	r3, #1
 8008582:	ee07 1a90 	vmov	s15, r1
 8008586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800858a:	d002      	beq.n	8008592 <HAL_RCC_GetSysClockFreq+0x62>
 800858c:	2b02      	cmp	r3, #2
 800858e:	d02c      	beq.n	80085ea <HAL_RCC_GetSysClockFreq+0xba>
 8008590:	b393      	cbz	r3, 80085f8 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008592:	ee07 0a90 	vmov	s15, r0
 8008596:	eddf 6a32 	vldr	s13, [pc, #200]	; 8008660 <HAL_RCC_GetSysClockFreq+0x130>
 800859a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800859e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80085a0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80085a4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8008664 <HAL_RCC_GetSysClockFreq+0x134>
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee06 3a90 	vmov	s13, r3
 80085b0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80085b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80085b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80085bc:	eee7 6a25 	vfma.f32	s13, s14, s11
 80085c0:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80085c4:	4b22      	ldr	r3, [pc, #136]	; (8008650 <HAL_RCC_GetSysClockFreq+0x120>)
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80085cc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085de:	ee17 0a90 	vmov	r0, s15
}
 80085e2:	bc30      	pop	{r4, r5}
 80085e4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085e6:	481d      	ldr	r0, [pc, #116]	; (800865c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80085e8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085ea:	ee07 0a90 	vmov	s15, r0
 80085ee:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008668 <HAL_RCC_GetSysClockFreq+0x138>
 80085f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085f6:	e7d2      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f8:	6813      	ldr	r3, [r2, #0]
 80085fa:	069b      	lsls	r3, r3, #26
 80085fc:	d520      	bpl.n	8008640 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085fe:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008600:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008604:	4915      	ldr	r1, [pc, #84]	; (800865c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008606:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800860a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800860e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008612:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008614:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008616:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8008664 <HAL_RCC_GetSysClockFreq+0x134>
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee06 1a10 	vmov	s12, r1
 8008622:	ee06 3a90 	vmov	s13, r3
 8008626:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800862a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800862e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008632:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008636:	eee7 6a05 	vfma.f32	s13, s14, s10
 800863a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800863e:	e7c1      	b.n	80085c4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008640:	ee07 0a90 	vmov	s15, r0
 8008644:	eddf 6a09 	vldr	s13, [pc, #36]	; 800866c <HAL_RCC_GetSysClockFreq+0x13c>
 8008648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800864c:	e7a7      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x6e>
 800864e:	bf00      	nop
 8008650:	58024400 	.word	0x58024400
 8008654:	003d0900 	.word	0x003d0900
 8008658:	017d7840 	.word	0x017d7840
 800865c:	03d09000 	.word	0x03d09000
 8008660:	4a742400 	.word	0x4a742400
 8008664:	39000000 	.word	0x39000000
 8008668:	4bbebc20 	.word	0x4bbebc20
 800866c:	4c742400 	.word	0x4c742400

08008670 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008670:	2800      	cmp	r0, #0
 8008672:	f000 810e 	beq.w	8008892 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008676:	4a8d      	ldr	r2, [pc, #564]	; (80088ac <HAL_RCC_ClockConfig+0x23c>)
 8008678:	6813      	ldr	r3, [r2, #0]
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	428b      	cmp	r3, r1
{
 8008680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008688:	d20c      	bcs.n	80086a4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	f023 030f 	bic.w	r3, r3, #15
 8008690:	430b      	orrs	r3, r1
 8008692:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	f003 030f 	and.w	r3, r3, #15
 800869a:	428b      	cmp	r3, r1
 800869c:	d002      	beq.n	80086a4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800869e:	2001      	movs	r0, #1
}
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	075f      	lsls	r7, r3, #29
 80086a8:	d50b      	bpl.n	80086c2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086aa:	4981      	ldr	r1, [pc, #516]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 80086ac:	6920      	ldr	r0, [r4, #16]
 80086ae:	698a      	ldr	r2, [r1, #24]
 80086b0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80086b4:	4290      	cmp	r0, r2
 80086b6:	d904      	bls.n	80086c2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086b8:	698a      	ldr	r2, [r1, #24]
 80086ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086be:	4302      	orrs	r2, r0
 80086c0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086c2:	071e      	lsls	r6, r3, #28
 80086c4:	d50b      	bpl.n	80086de <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086c6:	497a      	ldr	r1, [pc, #488]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 80086c8:	6960      	ldr	r0, [r4, #20]
 80086ca:	69ca      	ldr	r2, [r1, #28]
 80086cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80086d0:	4290      	cmp	r0, r2
 80086d2:	d904      	bls.n	80086de <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086d4:	69ca      	ldr	r2, [r1, #28]
 80086d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086da:	4302      	orrs	r2, r0
 80086dc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086de:	06d8      	lsls	r0, r3, #27
 80086e0:	d50b      	bpl.n	80086fa <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086e2:	4973      	ldr	r1, [pc, #460]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 80086e4:	69a0      	ldr	r0, [r4, #24]
 80086e6:	69ca      	ldr	r2, [r1, #28]
 80086e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80086ec:	4290      	cmp	r0, r2
 80086ee:	d904      	bls.n	80086fa <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086f0:	69ca      	ldr	r2, [r1, #28]
 80086f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086f6:	4302      	orrs	r2, r0
 80086f8:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086fa:	0699      	lsls	r1, r3, #26
 80086fc:	d50b      	bpl.n	8008716 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086fe:	496c      	ldr	r1, [pc, #432]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 8008700:	69e0      	ldr	r0, [r4, #28]
 8008702:	6a0a      	ldr	r2, [r1, #32]
 8008704:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008708:	4290      	cmp	r0, r2
 800870a:	d904      	bls.n	8008716 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800870c:	6a0a      	ldr	r2, [r1, #32]
 800870e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008712:	4302      	orrs	r2, r0
 8008714:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008716:	079a      	lsls	r2, r3, #30
 8008718:	f140 80ad 	bpl.w	8008876 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800871c:	4864      	ldr	r0, [pc, #400]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 800871e:	68e1      	ldr	r1, [r4, #12]
 8008720:	6982      	ldr	r2, [r0, #24]
 8008722:	f002 020f 	and.w	r2, r2, #15
 8008726:	4291      	cmp	r1, r2
 8008728:	d904      	bls.n	8008734 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800872a:	6982      	ldr	r2, [r0, #24]
 800872c:	f022 020f 	bic.w	r2, r2, #15
 8008730:	430a      	orrs	r2, r1
 8008732:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008734:	07d8      	lsls	r0, r3, #31
 8008736:	d531      	bpl.n	800879c <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008738:	4a5d      	ldr	r2, [pc, #372]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 800873a:	68a1      	ldr	r1, [r4, #8]
 800873c:	6993      	ldr	r3, [r2, #24]
 800873e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008742:	430b      	orrs	r3, r1
 8008744:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008746:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008748:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800874a:	2902      	cmp	r1, #2
 800874c:	f000 80a3 	beq.w	8008896 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008750:	2903      	cmp	r1, #3
 8008752:	f000 809a 	beq.w	800888a <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008756:	2901      	cmp	r1, #1
 8008758:	f000 80a3 	beq.w	80088a2 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800875c:	0758      	lsls	r0, r3, #29
 800875e:	d59e      	bpl.n	800869e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008760:	4a53      	ldr	r2, [pc, #332]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008762:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008766:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008768:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	430b      	orrs	r3, r1
 8008770:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8008772:	f7fb fd0b 	bl	800418c <HAL_GetTick>
 8008776:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008778:	e005      	b.n	8008786 <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800877a:	f7fb fd07 	bl	800418c <HAL_GetTick>
 800877e:	1b80      	subs	r0, r0, r6
 8008780:	4540      	cmp	r0, r8
 8008782:	f200 808c 	bhi.w	800889e <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6862      	ldr	r2, [r4, #4]
 800878a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800878e:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008792:	d1f2      	bne.n	800877a <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	0799      	lsls	r1, r3, #30
 8008798:	d506      	bpl.n	80087a8 <HAL_RCC_ClockConfig+0x138>
 800879a:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800879c:	4844      	ldr	r0, [pc, #272]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 800879e:	6982      	ldr	r2, [r0, #24]
 80087a0:	f002 020f 	and.w	r2, r2, #15
 80087a4:	428a      	cmp	r2, r1
 80087a6:	d86a      	bhi.n	800887e <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087a8:	4940      	ldr	r1, [pc, #256]	; (80088ac <HAL_RCC_ClockConfig+0x23c>)
 80087aa:	680a      	ldr	r2, [r1, #0]
 80087ac:	f002 020f 	and.w	r2, r2, #15
 80087b0:	42aa      	cmp	r2, r5
 80087b2:	d90a      	bls.n	80087ca <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b4:	680a      	ldr	r2, [r1, #0]
 80087b6:	f022 020f 	bic.w	r2, r2, #15
 80087ba:	432a      	orrs	r2, r5
 80087bc:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087be:	680a      	ldr	r2, [r1, #0]
 80087c0:	f002 020f 	and.w	r2, r2, #15
 80087c4:	42aa      	cmp	r2, r5
 80087c6:	f47f af6a 	bne.w	800869e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087ca:	075a      	lsls	r2, r3, #29
 80087cc:	d50b      	bpl.n	80087e6 <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087ce:	4938      	ldr	r1, [pc, #224]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 80087d0:	6920      	ldr	r0, [r4, #16]
 80087d2:	698a      	ldr	r2, [r1, #24]
 80087d4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087d8:	4290      	cmp	r0, r2
 80087da:	d204      	bcs.n	80087e6 <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087dc:	698a      	ldr	r2, [r1, #24]
 80087de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087e2:	4302      	orrs	r2, r0
 80087e4:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087e6:	071f      	lsls	r7, r3, #28
 80087e8:	d50b      	bpl.n	8008802 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087ea:	4931      	ldr	r1, [pc, #196]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 80087ec:	6960      	ldr	r0, [r4, #20]
 80087ee:	69ca      	ldr	r2, [r1, #28]
 80087f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80087f4:	4290      	cmp	r0, r2
 80087f6:	d204      	bcs.n	8008802 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087f8:	69ca      	ldr	r2, [r1, #28]
 80087fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80087fe:	4302      	orrs	r2, r0
 8008800:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008802:	06de      	lsls	r6, r3, #27
 8008804:	d50b      	bpl.n	800881e <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008806:	492a      	ldr	r1, [pc, #168]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 8008808:	69a0      	ldr	r0, [r4, #24]
 800880a:	69ca      	ldr	r2, [r1, #28]
 800880c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008810:	4290      	cmp	r0, r2
 8008812:	d204      	bcs.n	800881e <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008814:	69ca      	ldr	r2, [r1, #28]
 8008816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800881a:	4302      	orrs	r2, r0
 800881c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800881e:	069d      	lsls	r5, r3, #26
 8008820:	d50b      	bpl.n	800883a <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008822:	4a23      	ldr	r2, [pc, #140]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 8008824:	69e1      	ldr	r1, [r4, #28]
 8008826:	6a13      	ldr	r3, [r2, #32]
 8008828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800882c:	4299      	cmp	r1, r3
 800882e:	d204      	bcs.n	800883a <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008830:	6a13      	ldr	r3, [r2, #32]
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	430b      	orrs	r3, r1
 8008838:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800883a:	f7ff fe79 	bl	8008530 <HAL_RCC_GetSysClockFreq>
 800883e:	4b1c      	ldr	r3, [pc, #112]	; (80088b0 <HAL_RCC_ClockConfig+0x240>)
 8008840:	4602      	mov	r2, r0
 8008842:	481c      	ldr	r0, [pc, #112]	; (80088b4 <HAL_RCC_ClockConfig+0x244>)
 8008844:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008846:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008848:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800884c:	4d1a      	ldr	r5, [pc, #104]	; (80088b8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	4c1a      	ldr	r4, [pc, #104]	; (80088bc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008854:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008856:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008858:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800885c:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800885e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8008862:	4d17      	ldr	r5, [pc, #92]	; (80088c0 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008864:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008866:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800886a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800886c:	6023      	str	r3, [r4, #0]
}
 800886e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8008872:	f7fb bc29 	b.w	80040c8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008876:	07da      	lsls	r2, r3, #31
 8008878:	f53f af5e 	bmi.w	8008738 <HAL_RCC_ClockConfig+0xc8>
 800887c:	e794      	b.n	80087a8 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800887e:	6982      	ldr	r2, [r0, #24]
 8008880:	f022 020f 	bic.w	r2, r2, #15
 8008884:	4311      	orrs	r1, r2
 8008886:	6181      	str	r1, [r0, #24]
 8008888:	e78e      	b.n	80087a8 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800888a:	019f      	lsls	r7, r3, #6
 800888c:	f53f af68 	bmi.w	8008760 <HAL_RCC_ClockConfig+0xf0>
 8008890:	e705      	b.n	800869e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8008892:	2001      	movs	r0, #1
}
 8008894:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008896:	039b      	lsls	r3, r3, #14
 8008898:	f53f af62 	bmi.w	8008760 <HAL_RCC_ClockConfig+0xf0>
 800889c:	e6ff      	b.n	800869e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800889e:	2003      	movs	r0, #3
 80088a0:	e6fe      	b.n	80086a0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80088a2:	05de      	lsls	r6, r3, #23
 80088a4:	f53f af5c 	bmi.w	8008760 <HAL_RCC_ClockConfig+0xf0>
 80088a8:	e6f9      	b.n	800869e <HAL_RCC_ClockConfig+0x2e>
 80088aa:	bf00      	nop
 80088ac:	52002000 	.word	0x52002000
 80088b0:	58024400 	.word	0x58024400
 80088b4:	08018228 	.word	0x08018228
 80088b8:	2400028c 	.word	0x2400028c
 80088bc:	24000284 	.word	0x24000284
 80088c0:	24000280 	.word	0x24000280

080088c4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088c4:	4a18      	ldr	r2, [pc, #96]	; (8008928 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088c6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088c8:	6913      	ldr	r3, [r2, #16]
 80088ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ce:	2b10      	cmp	r3, #16
 80088d0:	d01a      	beq.n	8008908 <HAL_RCC_GetHCLKFreq+0x44>
 80088d2:	2b18      	cmp	r3, #24
 80088d4:	d023      	beq.n	800891e <HAL_RCC_GetHCLKFreq+0x5a>
 80088d6:	b1cb      	cbz	r3, 800890c <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 80088d8:	4814      	ldr	r0, [pc, #80]	; (800892c <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088da:	4b13      	ldr	r3, [pc, #76]	; (8008928 <HAL_RCC_GetHCLKFreq+0x64>)
 80088dc:	4914      	ldr	r1, [pc, #80]	; (8008930 <HAL_RCC_GetHCLKFreq+0x6c>)
 80088de:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088e0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088e2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088e6:	4c13      	ldr	r4, [pc, #76]	; (8008934 <HAL_RCC_GetHCLKFreq+0x70>)
 80088e8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088ec:	4d12      	ldr	r5, [pc, #72]	; (8008938 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088ee:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088f2:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f6:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088fa:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088fe:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 8008902:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008904:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008906:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008908:	480c      	ldr	r0, [pc, #48]	; (800893c <HAL_RCC_GetHCLKFreq+0x78>)
 800890a:	e7e6      	b.n	80088da <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800890c:	6813      	ldr	r3, [r2, #0]
 800890e:	069b      	lsls	r3, r3, #26
 8008910:	d508      	bpl.n	8008924 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	480a      	ldr	r0, [pc, #40]	; (8008940 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008916:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800891a:	40d0      	lsrs	r0, r2
 800891c:	e7dd      	b.n	80088da <HAL_RCC_GetHCLKFreq+0x16>
 800891e:	f7ff fa31 	bl	8007d84 <HAL_RCC_GetSysClockFreq.part.0>
 8008922:	e7da      	b.n	80088da <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008924:	4806      	ldr	r0, [pc, #24]	; (8008940 <HAL_RCC_GetHCLKFreq+0x7c>)
 8008926:	e7d8      	b.n	80088da <HAL_RCC_GetHCLKFreq+0x16>
 8008928:	58024400 	.word	0x58024400
 800892c:	003d0900 	.word	0x003d0900
 8008930:	08018228 	.word	0x08018228
 8008934:	24000284 	.word	0x24000284
 8008938:	24000280 	.word	0x24000280
 800893c:	017d7840 	.word	0x017d7840
 8008940:	03d09000 	.word	0x03d09000

08008944 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008944:	4a1c      	ldr	r2, [pc, #112]	; (80089b8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008946:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008948:	6913      	ldr	r3, [r2, #16]
 800894a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800894e:	2b10      	cmp	r3, #16
 8008950:	d021      	beq.n	8008996 <HAL_RCC_GetPCLK1Freq+0x52>
 8008952:	2b18      	cmp	r3, #24
 8008954:	d02a      	beq.n	80089ac <HAL_RCC_GetPCLK1Freq+0x68>
 8008956:	b303      	cbz	r3, 800899a <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 8008958:	4818      	ldr	r0, [pc, #96]	; (80089bc <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800895a:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <HAL_RCC_GetPCLK1Freq+0x74>)
 800895c:	4918      	ldr	r1, [pc, #96]	; (80089c0 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800895e:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008960:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008962:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8008966:	4d17      	ldr	r5, [pc, #92]	; (80089c4 <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008968:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800896c:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800896e:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008970:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008974:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008978:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800897a:	4c13      	ldr	r4, [pc, #76]	; (80089c8 <HAL_RCC_GetPCLK1Freq+0x84>)
 800897c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008980:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008982:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008984:	69d2      	ldr	r2, [r2, #28]
 8008986:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800898a:	5c88      	ldrb	r0, [r1, r2]
 800898c:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008990:	fa23 f000 	lsr.w	r0, r3, r0
 8008994:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008996:	480d      	ldr	r0, [pc, #52]	; (80089cc <HAL_RCC_GetPCLK1Freq+0x88>)
 8008998:	e7df      	b.n	800895a <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	069b      	lsls	r3, r3, #26
 800899e:	d508      	bpl.n	80089b2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a0:	6813      	ldr	r3, [r2, #0]
 80089a2:	480b      	ldr	r0, [pc, #44]	; (80089d0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80089a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089a8:	40d8      	lsrs	r0, r3
 80089aa:	e7d6      	b.n	800895a <HAL_RCC_GetPCLK1Freq+0x16>
 80089ac:	f7ff f9ea 	bl	8007d84 <HAL_RCC_GetSysClockFreq.part.0>
 80089b0:	e7d3      	b.n	800895a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089b2:	4807      	ldr	r0, [pc, #28]	; (80089d0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 80089b4:	e7d1      	b.n	800895a <HAL_RCC_GetPCLK1Freq+0x16>
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	003d0900 	.word	0x003d0900
 80089c0:	08018228 	.word	0x08018228
 80089c4:	24000280 	.word	0x24000280
 80089c8:	24000284 	.word	0x24000284
 80089cc:	017d7840 	.word	0x017d7840
 80089d0:	03d09000 	.word	0x03d09000

080089d4 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089d4:	4a1c      	ldr	r2, [pc, #112]	; (8008a48 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089d6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089d8:	6913      	ldr	r3, [r2, #16]
 80089da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d021      	beq.n	8008a26 <HAL_RCC_GetPCLK2Freq+0x52>
 80089e2:	2b18      	cmp	r3, #24
 80089e4:	d02a      	beq.n	8008a3c <HAL_RCC_GetPCLK2Freq+0x68>
 80089e6:	b303      	cbz	r3, 8008a2a <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 80089e8:	4818      	ldr	r0, [pc, #96]	; (8008a4c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089ea:	4a17      	ldr	r2, [pc, #92]	; (8008a48 <HAL_RCC_GetPCLK2Freq+0x74>)
 80089ec:	4918      	ldr	r1, [pc, #96]	; (8008a50 <HAL_RCC_GetPCLK2Freq+0x7c>)
 80089ee:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f0:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089f2:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80089f6:	4d17      	ldr	r5, [pc, #92]	; (8008a54 <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089fc:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089fe:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a00:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a04:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a08:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a0a:	4c13      	ldr	r4, [pc, #76]	; (8008a58 <HAL_RCC_GetPCLK2Freq+0x84>)
 8008a0c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008a10:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a12:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a14:	69d2      	ldr	r2, [r2, #28]
 8008a16:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8008a1a:	5c88      	ldrb	r0, [r1, r2]
 8008a1c:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a20:	fa23 f000 	lsr.w	r0, r3, r0
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a26:	480d      	ldr	r0, [pc, #52]	; (8008a5c <HAL_RCC_GetPCLK2Freq+0x88>)
 8008a28:	e7df      	b.n	80089ea <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a2a:	6813      	ldr	r3, [r2, #0]
 8008a2c:	069b      	lsls	r3, r3, #26
 8008a2e:	d508      	bpl.n	8008a42 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a30:	6813      	ldr	r3, [r2, #0]
 8008a32:	480b      	ldr	r0, [pc, #44]	; (8008a60 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008a34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a38:	40d8      	lsrs	r0, r3
 8008a3a:	e7d6      	b.n	80089ea <HAL_RCC_GetPCLK2Freq+0x16>
 8008a3c:	f7ff f9a2 	bl	8007d84 <HAL_RCC_GetSysClockFreq.part.0>
 8008a40:	e7d3      	b.n	80089ea <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a42:	4807      	ldr	r0, [pc, #28]	; (8008a60 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8008a44:	e7d1      	b.n	80089ea <HAL_RCC_GetPCLK2Freq+0x16>
 8008a46:	bf00      	nop
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	003d0900 	.word	0x003d0900
 8008a50:	08018228 	.word	0x08018228
 8008a54:	24000280 	.word	0x24000280
 8008a58:	24000284 	.word	0x24000284
 8008a5c:	017d7840 	.word	0x017d7840
 8008a60:	03d09000 	.word	0x03d09000

08008a64 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a64:	4a3b      	ldr	r2, [pc, #236]	; (8008b54 <RCCEx_PLL2_Config+0xf0>)
{
 8008a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a68:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d069      	beq.n	8008b46 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a78:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8008a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008a80:	f7fb fb84 	bl	800418c <HAL_GetTick>
 8008a84:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a86:	e004      	b.n	8008a92 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a88:	f7fb fb80 	bl	800418c <HAL_GetTick>
 8008a8c:	1b43      	subs	r3, r0, r5
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d857      	bhi.n	8008b42 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	011a      	lsls	r2, r3, #4
 8008a96:	d4f7      	bmi.n	8008a88 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a9a:	6832      	ldr	r2, [r6, #0]
 8008a9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008aa0:	492d      	ldr	r1, [pc, #180]	; (8008b58 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008aa2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008aa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa8:	6875      	ldr	r5, [r6, #4]
 8008aaa:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008aae:	3d01      	subs	r5, #1
 8008ab0:	1e50      	subs	r0, r2, #1
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	6932      	ldr	r2, [r6, #16]
 8008ab6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008aba:	025b      	lsls	r3, r3, #9
 8008abc:	0400      	lsls	r0, r0, #16
 8008abe:	3a01      	subs	r2, #1
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008ac6:	0612      	lsls	r2, r2, #24
 8008ac8:	4303      	orrs	r3, r0
 8008aca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008ace:	432b      	orrs	r3, r5
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ad4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ad6:	6972      	ldr	r2, [r6, #20]
 8008ad8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008adc:	4313      	orrs	r3, r2
 8008ade:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ae2:	69b2      	ldr	r2, [r6, #24]
 8008ae4:	f023 0320 	bic.w	r3, r3, #32
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008aec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008aee:	f023 0310 	bic.w	r3, r3, #16
 8008af2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008af4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008af6:	69f3      	ldr	r3, [r6, #28]
 8008af8:	4011      	ands	r1, r2
 8008afa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008afe:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b02:	f043 0310 	orr.w	r3, r3, #16
 8008b06:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008b0a:	b1f7      	cbz	r7, 8008b4a <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b0c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b0e:	bf0c      	ite	eq
 8008b10:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b14:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008b18:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b1a:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <RCCEx_PLL2_Config+0xf0>)
 8008b1c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b1e:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 8008b20:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008b24:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008b26:	f7fb fb31 	bl	800418c <HAL_GetTick>
 8008b2a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b2c:	e004      	b.n	8008b38 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b2e:	f7fb fb2d 	bl	800418c <HAL_GetTick>
 8008b32:	1b00      	subs	r0, r0, r4
 8008b34:	2802      	cmp	r0, #2
 8008b36:	d804      	bhi.n	8008b42 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	d5f7      	bpl.n	8008b2e <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8008b3e:	2000      	movs	r0, #0
}
 8008b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008b42:	2003      	movs	r0, #3
}
 8008b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008b46:	2001      	movs	r0, #1
}
 8008b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b50:	e7e3      	b.n	8008b1a <RCCEx_PLL2_Config+0xb6>
 8008b52:	bf00      	nop
 8008b54:	58024400 	.word	0x58024400
 8008b58:	ffff0007 	.word	0xffff0007

08008b5c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b5c:	4a3b      	ldr	r2, [pc, #236]	; (8008c4c <RCCEx_PLL3_Config+0xf0>)
{
 8008b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b60:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d069      	beq.n	8008c3e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b70:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8008b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008b78:	f7fb fb08 	bl	800418c <HAL_GetTick>
 8008b7c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b7e:	e004      	b.n	8008b8a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b80:	f7fb fb04 	bl	800418c <HAL_GetTick>
 8008b84:	1b43      	subs	r3, r0, r5
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d857      	bhi.n	8008c3a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	009a      	lsls	r2, r3, #2
 8008b8e:	d4f7      	bmi.n	8008b80 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b92:	6832      	ldr	r2, [r6, #0]
 8008b94:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b98:	492d      	ldr	r1, [pc, #180]	; (8008c50 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b9a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008b9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ba0:	6875      	ldr	r5, [r6, #4]
 8008ba2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008ba6:	3d01      	subs	r5, #1
 8008ba8:	1e50      	subs	r0, r2, #1
 8008baa:	3b01      	subs	r3, #1
 8008bac:	6932      	ldr	r2, [r6, #16]
 8008bae:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8008bb2:	025b      	lsls	r3, r3, #9
 8008bb4:	0400      	lsls	r0, r0, #16
 8008bb6:	3a01      	subs	r2, #1
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8008bbe:	0612      	lsls	r2, r2, #24
 8008bc0:	4303      	orrs	r3, r0
 8008bc2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008bc6:	432b      	orrs	r3, r5
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bce:	6972      	ldr	r2, [r6, #20]
 8008bd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bda:	69b2      	ldr	r2, [r6, #24]
 8008bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008be0:	4313      	orrs	r3, r2
 8008be2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bea:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008bee:	69f3      	ldr	r3, [r6, #28]
 8008bf0:	4011      	ands	r1, r2
 8008bf2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8008bf6:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008bf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bfe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8008c02:	b1f7      	cbz	r7, 8008c42 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c04:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c06:	bf0c      	ite	eq
 8008c08:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c0c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8008c10:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c12:	4b0e      	ldr	r3, [pc, #56]	; (8008c4c <RCCEx_PLL3_Config+0xf0>)
 8008c14:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c16:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 8008c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008c1c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8008c1e:	f7fb fab5 	bl	800418c <HAL_GetTick>
 8008c22:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c24:	e004      	b.n	8008c30 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c26:	f7fb fab1 	bl	800418c <HAL_GetTick>
 8008c2a:	1b00      	subs	r0, r0, r4
 8008c2c:	2802      	cmp	r0, #2
 8008c2e:	d804      	bhi.n	8008c3a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	d5f7      	bpl.n	8008c26 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8008c36:	2000      	movs	r0, #0
}
 8008c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8008c3a:	2003      	movs	r0, #3
}
 8008c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8008c3e:	2001      	movs	r0, #1
}
 8008c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c48:	e7e3      	b.n	8008c12 <RCCEx_PLL3_Config+0xb6>
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	ffff0007 	.word	0xffff0007

08008c54 <HAL_RCCEx_PeriphCLKConfig>:
{
 8008c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c58:	6803      	ldr	r3, [r0, #0]
{
 8008c5a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c5c:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8008c60:	d01c      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c62:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8008c64:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008c68:	f000 84ba 	beq.w	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008c6c:	d823      	bhi.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	f000 83dc 	beq.w	800942c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8008c74:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008c78:	d120      	bne.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c7a:	2102      	movs	r1, #2
 8008c7c:	3004      	adds	r0, #4
 8008c7e:	f7ff fef1 	bl	8008a64 <RCCEx_PLL2_Config>
 8008c82:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008c84:	2e00      	cmp	r6, #0
 8008c86:	f040 849f 	bne.w	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8008c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c8c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c8e:	48ab      	ldr	r0, [pc, #684]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008c90:	2600      	movs	r6, #0
 8008c92:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008c94:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c9c:	05dd      	lsls	r5, r3, #23
 8008c9e:	d511      	bpl.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ca0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008ca2:	2a04      	cmp	r2, #4
 8008ca4:	f200 851c 	bhi.w	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8008ca8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008cac:	0476046f 	.word	0x0476046f
 8008cb0:	02d40486 	.word	0x02d40486
 8008cb4:	02d4      	.short	0x02d4
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008cb6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8008cba:	d0e8      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cbc:	05dd      	lsls	r5, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8008cbe:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cc2:	d4ed      	bmi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008cc4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008cc6:	0598      	lsls	r0, r3, #22
 8008cc8:	d51b      	bpl.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008cca:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008ccc:	2a80      	cmp	r2, #128	; 0x80
 8008cce:	f000 8453 	beq.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008cd2:	f200 80ec 	bhi.w	8008eae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	f000 83a2 	beq.w	8009420 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8008cdc:	2a40      	cmp	r2, #64	; 0x40
 8008cde:	f040 80ed 	bne.w	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x268>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	1d20      	adds	r0, r4, #4
 8008ce6:	f7ff febd 	bl	8008a64 <RCCEx_PLL2_Config>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	f040 8386 	bne.w	8009400 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cf4:	4991      	ldr	r1, [pc, #580]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008cf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008cfa:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8008cfe:	4302      	orrs	r2, r0
 8008d00:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d02:	0559      	lsls	r1, r3, #21
 8008d04:	d51f      	bpl.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d06:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8008d0a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008d0e:	f000 844a 	beq.w	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008d12:	f200 80d6 	bhi.w	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	f000 837c 	beq.w	8009414 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008d1c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8008d20:	f040 80d7 	bne.w	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d24:	2100      	movs	r1, #0
 8008d26:	1d20      	adds	r0, r4, #4
 8008d28:	f7ff fe9c 	bl	8008a64 <RCCEx_PLL2_Config>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	f040 8367 	bne.w	8009404 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d36:	4981      	ldr	r1, [pc, #516]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008d38:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8008d3c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008d3e:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8008d42:	4302      	orrs	r2, r0
 8008d44:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d46:	051a      	lsls	r2, r3, #20
 8008d48:	d51f      	bpl.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d4a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8008d4e:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8008d52:	f000 843c 	beq.w	80095ce <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008d56:	f200 80bf 	bhi.w	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	f000 836c 	beq.w	8009438 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008d60:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008d64:	f040 80c0 	bne.w	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d68:	2100      	movs	r1, #0
 8008d6a:	1d20      	adds	r0, r4, #4
 8008d6c:	f7ff fe7a 	bl	8008a64 <RCCEx_PLL2_Config>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	f040 833f 	bne.w	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d7a:	4970      	ldr	r1, [pc, #448]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008d7c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8008d80:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008d82:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8008d86:	4302      	orrs	r2, r0
 8008d88:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d8a:	019f      	lsls	r7, r3, #6
 8008d8c:	d518      	bpl.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8008d8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008d90:	2a20      	cmp	r2, #32
 8008d92:	f000 8392 	beq.w	80094ba <HAL_RCCEx_PeriphCLKConfig+0x866>
 8008d96:	f200 80aa 	bhi.w	8008eee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8008d9a:	b13a      	cbz	r2, 8008dac <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008d9c:	2a10      	cmp	r2, #16
 8008d9e:	f040 80a9 	bne.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da2:	4966      	ldr	r1, [pc, #408]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008da4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008da6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008daa:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	f040 8366 	bne.w	800947e <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008db2:	4962      	ldr	r1, [pc, #392]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008db4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008db6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8008db8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008dbc:	4302      	orrs	r2, r0
 8008dbe:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008dc0:	04d8      	lsls	r0, r3, #19
 8008dc2:	d51d      	bpl.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008dc4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008dc6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008dca:	f000 83cd 	beq.w	8009568 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8008dce:	f200 8094 	bhi.w	8008efa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	f000 8318 	beq.w	8009408 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8008dd8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008ddc:	f040 8095 	bne.w	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008de0:	2100      	movs	r1, #0
 8008de2:	1d20      	adds	r0, r4, #4
 8008de4:	f7ff fe3e 	bl	8008a64 <RCCEx_PLL2_Config>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	f040 8305 	bne.w	80093fc <HAL_RCCEx_PeriphCLKConfig+0x7a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008df2:	4952      	ldr	r1, [pc, #328]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008df4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8008df6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008df8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008dfc:	4302      	orrs	r2, r0
 8008dfe:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e00:	0499      	lsls	r1, r3, #18
 8008e02:	d51a      	bpl.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e04:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008e06:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8008e0a:	f000 8398 	beq.w	800953e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8008e0e:	d87f      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008e10:	b14a      	cbz	r2, 8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8008e12:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e16:	f040 8083 	bne.w	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	1d20      	adds	r0, r4, #4
 8008e1e:	f7ff fe21 	bl	8008a64 <RCCEx_PLL2_Config>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e26:	2d00      	cmp	r5, #0
 8008e28:	f040 832b 	bne.w	8009482 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e2c:	4943      	ldr	r1, [pc, #268]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008e30:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008e32:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8008e36:	4302      	orrs	r2, r0
 8008e38:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e3a:	045a      	lsls	r2, r3, #17
 8008e3c:	d51b      	bpl.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008e3e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8008e42:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008e46:	f000 834a 	beq.w	80094de <HAL_RCCEx_PeriphCLKConfig+0x88a>
 8008e4a:	d86c      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e4c:	b142      	cbz	r2, 8008e60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008e4e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008e52:	d170      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e54:	2101      	movs	r1, #1
 8008e56:	1d20      	adds	r0, r4, #4
 8008e58:	f7ff fe04 	bl	8008a64 <RCCEx_PLL2_Config>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008e60:	2d00      	cmp	r5, #0
 8008e62:	f040 8302 	bne.w	800946a <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e66:	4935      	ldr	r1, [pc, #212]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e68:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8008e6c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008e6e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8008e72:	4302      	orrs	r2, r0
 8008e74:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e76:	041f      	lsls	r7, r3, #16
 8008e78:	d50d      	bpl.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->FdcanClockSelection)
 8008e7a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008e7c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008e80:	f000 834b 	beq.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8008e84:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008e88:	f000 81f0 	beq.w	800926c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	f000 81f3 	beq.w	8009278 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008e92:	2601      	movs	r6, #1
 8008e94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e96:	01d8      	lsls	r0, r3, #7
 8008e98:	d55c      	bpl.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 8008e9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008e9c:	2a03      	cmp	r2, #3
 8008e9e:	f200 8425 	bhi.w	80096ec <HAL_RCCEx_PeriphCLKConfig+0xa98>
 8008ea2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008ea6:	0053      	.short	0x0053
 8008ea8:	004d0313 	.word	0x004d0313
 8008eac:	0053      	.short	0x0053
    switch(PeriphClkInit->Sai23ClockSelection)
 8008eae:	2ac0      	cmp	r2, #192	; 0xc0
 8008eb0:	f43f af1d 	beq.w	8008cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008eb4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008eb8:	f43f af19 	beq.w	8008cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008ebc:	2601      	movs	r6, #1
 8008ebe:	4635      	mov	r5, r6
 8008ec0:	e71f      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ec2:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008ec6:	f43f af33 	beq.w	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008eca:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008ece:	f43f af2f 	beq.w	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8008ed2:	2601      	movs	r6, #1
 8008ed4:	4635      	mov	r5, r6
 8008ed6:	e736      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008ed8:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008edc:	f43f af4a 	beq.w	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008ee0:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008ee4:	f43f af46 	beq.w	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008ee8:	2601      	movs	r6, #1
 8008eea:	4635      	mov	r5, r6
 8008eec:	e74d      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8008eee:	2a30      	cmp	r2, #48	; 0x30
 8008ef0:	f43f af5c 	beq.w	8008dac <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008ef4:	2601      	movs	r6, #1
 8008ef6:	4635      	mov	r5, r6
 8008ef8:	e762      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008efa:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8008efe:	f43f af75 	beq.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008f02:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008f06:	f43f af71 	beq.w	8008dec <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008f0a:	2601      	movs	r6, #1
 8008f0c:	4635      	mov	r5, r6
 8008f0e:	e777      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f10:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8008f14:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8008f18:	d085      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8008f1a:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8008f1e:	d082      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8008f20:	2601      	movs	r6, #1
 8008f22:	4635      	mov	r5, r6
 8008f24:	e789      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f26:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8008f2a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008f2e:	d097      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008f30:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008f34:	d094      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008f36:	2601      	movs	r6, #1
 8008f38:	4635      	mov	r5, r6
 8008f3a:	e79c      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008f3c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f40:	2102      	movs	r1, #2
 8008f42:	1d20      	adds	r0, r4, #4
 8008f44:	f7ff fd8e 	bl	8008a64 <RCCEx_PLL2_Config>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	f000 828e 	beq.w	800946e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008f52:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f54:	0259      	lsls	r1, r3, #9
 8008f56:	f100 8208 	bmi.w	800936a <HAL_RCCEx_PeriphCLKConfig+0x716>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008f5a:	07df      	lsls	r7, r3, #31
 8008f5c:	d539      	bpl.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008f5e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8008f60:	2a28      	cmp	r2, #40	; 0x28
 8008f62:	f200 8174 	bhi.w	800924e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 8008f66:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f6a:	0030      	.short	0x0030
 8008f6c:	01720172 	.word	0x01720172
 8008f70:	01720172 	.word	0x01720172
 8008f74:	01720172 	.word	0x01720172
 8008f78:	03580172 	.word	0x03580172
 8008f7c:	01720172 	.word	0x01720172
 8008f80:	01720172 	.word	0x01720172
 8008f84:	01720172 	.word	0x01720172
 8008f88:	00290172 	.word	0x00290172
 8008f8c:	01720172 	.word	0x01720172
 8008f90:	01720172 	.word	0x01720172
 8008f94:	01720172 	.word	0x01720172
 8008f98:	00300172 	.word	0x00300172
 8008f9c:	01720172 	.word	0x01720172
 8008fa0:	01720172 	.word	0x01720172
 8008fa4:	01720172 	.word	0x01720172
 8008fa8:	00300172 	.word	0x00300172
 8008fac:	01720172 	.word	0x01720172
 8008fb0:	01720172 	.word	0x01720172
 8008fb4:	01720172 	.word	0x01720172
 8008fb8:	00300172 	.word	0x00300172
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008fc2:	f7ff fdcb 	bl	8008b5c <RCCEx_PLL3_Config>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	f000 826b 	beq.w	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008fd0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008fd2:	0798      	lsls	r0, r3, #30
 8008fd4:	d516      	bpl.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008fd6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8008fd8:	2a05      	cmp	r2, #5
 8008fda:	f200 8384 	bhi.w	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008fde:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008fe2:	000d      	.short	0x000d
 8008fe4:	00060308 	.word	0x00060308
 8008fe8:	000d000d 	.word	0x000d000d
 8008fec:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ff4:	f7ff fdb2 	bl	8008b5c <RCCEx_PLL3_Config>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	f000 822c 	beq.w	800945a <HAL_RCCEx_PeriphCLKConfig+0x806>
 8009002:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009004:	0759      	lsls	r1, r3, #29
 8009006:	d517      	bpl.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009008:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800900c:	2a05      	cmp	r2, #5
 800900e:	f200 8370 	bhi.w	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 8009012:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009016:	000d      	.short	0x000d
 8009018:	000602f8 	.word	0x000602f8
 800901c:	000d000d 	.word	0x000d000d
 8009020:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009022:	2101      	movs	r1, #1
 8009024:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009028:	f7ff fd98 	bl	8008b5c <RCCEx_PLL3_Config>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009030:	2d00      	cmp	r5, #0
 8009032:	f000 8209 	beq.w	8009448 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8009036:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009038:	069a      	lsls	r2, r3, #26
 800903a:	d51d      	bpl.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800903c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009040:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8009044:	f000 8271 	beq.w	800952a <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8009048:	f200 8121 	bhi.w	800928e <HAL_RCCEx_PeriphCLKConfig+0x63a>
 800904c:	b14a      	cbz	r2, 8009062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800904e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8009052:	f040 8126 	bne.w	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009056:	2100      	movs	r1, #0
 8009058:	1d20      	adds	r0, r4, #4
 800905a:	f7ff fd03 	bl	8008a64 <RCCEx_PLL2_Config>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009062:	2d00      	cmp	r5, #0
 8009064:	f040 8213 	bne.w	800948e <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009068:	49b9      	ldr	r1, [pc, #740]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800906a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800906e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009070:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8009074:	4302      	orrs	r2, r0
 8009076:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009078:	065f      	lsls	r7, r3, #25
 800907a:	d51d      	bpl.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800907c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8009080:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009084:	f000 823f 	beq.w	8009506 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8009088:	f200 8129 	bhi.w	80092de <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800908c:	b14a      	cbz	r2, 80090a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800908e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009092:	f040 812e 	bne.w	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009096:	2100      	movs	r1, #0
 8009098:	1d20      	adds	r0, r4, #4
 800909a:	f7ff fce3 	bl	8008a64 <RCCEx_PLL2_Config>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	f040 81ef 	bne.w	8009486 <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090a8:	49a9      	ldr	r1, [pc, #676]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80090aa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80090ae:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80090b0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80090b4:	4302      	orrs	r2, r0
 80090b6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80090b8:	0618      	lsls	r0, r3, #24
 80090ba:	d51d      	bpl.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80090bc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80090c0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80090c4:	f000 8215 	beq.w	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80090c8:	f200 80fc 	bhi.w	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
 80090cc:	b14a      	cbz	r2, 80090e2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80090ce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80090d2:	f040 8101 	bne.w	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090d6:	2100      	movs	r1, #0
 80090d8:	1d20      	adds	r0, r4, #4
 80090da:	f7ff fcc3 	bl	8008a64 <RCCEx_PLL2_Config>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	f040 81d1 	bne.w	800948a <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80090e8:	4999      	ldr	r1, [pc, #612]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80090ea:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80090ee:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80090f0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80090f4:	4302      	orrs	r2, r0
 80090f6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80090f8:	0719      	lsls	r1, r3, #28
 80090fa:	d50b      	bpl.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80090fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009100:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009104:	f000 8225 	beq.w	8009552 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009108:	4891      	ldr	r0, [pc, #580]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800910a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800910c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009110:	430a      	orrs	r2, r1
 8009112:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009114:	06da      	lsls	r2, r3, #27
 8009116:	d50b      	bpl.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009118:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800911c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009120:	f000 82b2 	beq.w	8009688 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009124:	488a      	ldr	r0, [pc, #552]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009126:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8009128:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800912c:	430a      	orrs	r2, r1
 800912e:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009130:	031f      	lsls	r7, r3, #12
 8009132:	d50e      	bpl.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    switch(PeriphClkInit->AdcClockSelection)
 8009134:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8009138:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800913c:	f000 80f2 	beq.w	8009324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8009140:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009144:	f000 80f5 	beq.w	8009332 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8009148:	2900      	cmp	r1, #0
 800914a:	f000 828b 	beq.w	8009664 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 800914e:	2601      	movs	r6, #1
 8009150:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009152:	0358      	lsls	r0, r3, #13
 8009154:	d50f      	bpl.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->UsbClockSelection)
 8009156:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800915a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800915e:	f000 80cb 	beq.w	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8009162:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8009166:	f000 80ce 	beq.w	8009306 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800916a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800916e:	f000 8282 	beq.w	8009676 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8009172:	2601      	movs	r6, #1
 8009174:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009176:	03d9      	lsls	r1, r3, #15
 8009178:	d517      	bpl.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->SdmmcClockSelection)
 800917a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800917c:	2a00      	cmp	r2, #0
 800917e:	f000 825f 	beq.w	8009640 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8009182:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009186:	f040 8132 	bne.w	80093ee <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800918a:	2102      	movs	r1, #2
 800918c:	1d20      	adds	r0, r4, #4
 800918e:	f7ff fc69 	bl	8008a64 <RCCEx_PLL2_Config>
 8009192:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	2d00      	cmp	r5, #0
 8009198:	f040 818d 	bne.w	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800919c:	496c      	ldr	r1, [pc, #432]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800919e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80091a0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80091a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80091a6:	4302      	orrs	r2, r0
 80091a8:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091aa:	009a      	lsls	r2, r3, #2
 80091ac:	f100 80d2 	bmi.w	8009354 <HAL_RCCEx_PeriphCLKConfig+0x700>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091b0:	039f      	lsls	r7, r3, #14
 80091b2:	d43f      	bmi.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 80091b4:	1e30      	subs	r0, r6, #0
 80091b6:	bf18      	it	ne
 80091b8:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091ba:	02de      	lsls	r6, r3, #11
 80091bc:	d506      	bpl.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091be:	4964      	ldr	r1, [pc, #400]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80091c0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80091c2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80091c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80091c8:	432a      	orrs	r2, r5
 80091ca:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091cc:	00dd      	lsls	r5, r3, #3
 80091ce:	d507      	bpl.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80091d0:	495f      	ldr	r1, [pc, #380]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80091d2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80091d6:	690a      	ldr	r2, [r1, #16]
 80091d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091dc:	432a      	orrs	r2, r5
 80091de:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091e0:	0299      	lsls	r1, r3, #10
 80091e2:	d506      	bpl.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80091e4:	495a      	ldr	r1, [pc, #360]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80091e6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80091e8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80091ea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80091ee:	432a      	orrs	r2, r5
 80091f0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80091f2:	005a      	lsls	r2, r3, #1
 80091f4:	d509      	bpl.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091f6:	4a56      	ldr	r2, [pc, #344]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80091f8:	6911      	ldr	r1, [r2, #16]
 80091fa:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80091fe:	6111      	str	r1, [r2, #16]
 8009200:	6911      	ldr	r1, [r2, #16]
 8009202:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8009206:	4329      	orrs	r1, r5
 8009208:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800920a:	2b00      	cmp	r3, #0
 800920c:	da06      	bge.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800920e:	4950      	ldr	r1, [pc, #320]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009210:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8009212:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009214:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009218:	432a      	orrs	r2, r5
 800921a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	d507      	bpl.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009220:	4a4b      	ldr	r2, [pc, #300]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009222:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8009226:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009228:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800922c:	430b      	orrs	r3, r1
 800922e:	6553      	str	r3, [r2, #84]	; 0x54
}
 8009230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009234:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009236:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800923a:	f000 820a 	beq.w	8009652 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 800923e:	d933      	bls.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8009240:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8009244:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009248:	d030      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x658>
 800924a:	2001      	movs	r0, #1
 800924c:	e7b5      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Usart16ClockSelection)
 800924e:	2601      	movs	r6, #1
 8009250:	4635      	mov	r5, r6
 8009252:	e6be      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009254:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8009256:	2d00      	cmp	r5, #0
 8009258:	f040 80cc 	bne.w	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800925c:	493c      	ldr	r1, [pc, #240]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800925e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009260:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009262:	f022 0207 	bic.w	r2, r2, #7
 8009266:	4302      	orrs	r2, r0
 8009268:	650a      	str	r2, [r1, #80]	; 0x50
 800926a:	e52c      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800926c:	2101      	movs	r1, #1
 800926e:	1d20      	adds	r0, r4, #4
 8009270:	f7ff fbf8 	bl	8008a64 <RCCEx_PLL2_Config>
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009278:	2d00      	cmp	r5, #0
 800927a:	f040 80e3 	bne.w	8009444 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800927e:	4934      	ldr	r1, [pc, #208]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 8009280:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009282:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009288:	4302      	orrs	r2, r0
 800928a:	650a      	str	r2, [r1, #80]	; 0x50
 800928c:	e603      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x242>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800928e:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8009292:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009296:	f43f aee4 	beq.w	8009062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800929a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800929e:	f43f aee0 	beq.w	8009062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80092a2:	2601      	movs	r6, #1
 80092a4:	4635      	mov	r5, r6
 80092a6:	e6e7      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch(PeriphClkInit->RngClockSelection)
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d1ce      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if(ret == HAL_OK)
 80092ac:	2d00      	cmp	r5, #0
 80092ae:	d1cc      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092b0:	4d27      	ldr	r5, [pc, #156]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 80092b2:	1e30      	subs	r0, r6, #0
 80092b4:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80092b6:	bf18      	it	ne
 80092b8:	2001      	movne	r0, #1
 80092ba:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80092be:	430a      	orrs	r2, r1
 80092c0:	656a      	str	r2, [r5, #84]	; 0x54
 80092c2:	e77a      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x566>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80092c4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80092c8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092cc:	f43f af09 	beq.w	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80092d0:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80092d4:	f43f af05 	beq.w	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80092d8:	2601      	movs	r6, #1
 80092da:	4635      	mov	r5, r6
 80092dc:	e70c      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80092de:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80092e2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80092e6:	f43f aedc 	beq.w	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80092ea:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80092ee:	f43f aed8 	beq.w	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80092f2:	2601      	movs	r6, #1
 80092f4:	4635      	mov	r5, r6
 80092f6:	e6df      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092f8:	2101      	movs	r1, #1
 80092fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092fe:	f7ff fc2d 	bl	8008b5c <RCCEx_PLL3_Config>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009306:	2d00      	cmp	r5, #0
 8009308:	f040 80c8 	bne.w	800949c <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800930c:	4910      	ldr	r1, [pc, #64]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800930e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8009312:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009314:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8009318:	4302      	orrs	r2, r0
 800931a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800931c:	03d9      	lsls	r1, r3, #15
 800931e:	f57f af44 	bpl.w	80091aa <HAL_RCCEx_PeriphCLKConfig+0x556>
 8009322:	e72a      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x526>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009324:	2102      	movs	r1, #2
 8009326:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800932a:	f7ff fc17 	bl	8008b5c <RCCEx_PLL3_Config>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009332:	2d00      	cmp	r5, #0
 8009334:	f040 80ad 	bne.w	8009492 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009338:	4905      	ldr	r1, [pc, #20]	; (8009350 <HAL_RCCEx_PeriphCLKConfig+0x6fc>)
 800933a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800933e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009340:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8009344:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009346:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009348:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800934a:	f57f af14 	bpl.w	8009176 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800934e:	e702      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009350:	58024400 	.word	0x58024400
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009354:	2102      	movs	r1, #2
 8009356:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800935a:	f7ff fbff 	bl	8008b5c <RCCEx_PLL3_Config>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	2800      	cmp	r0, #0
 8009362:	f43f af25 	beq.w	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      status=HAL_ERROR;
 8009366:	2601      	movs	r6, #1
 8009368:	e722      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800936a:	4bb3      	ldr	r3, [pc, #716]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800936c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800936e:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009374:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8009376:	f7fa ff09 	bl	800418c <HAL_GetTick>
 800937a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800937c:	e005      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x736>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800937e:	f7fa ff05 	bl	800418c <HAL_GetTick>
 8009382:	1bc0      	subs	r0, r0, r7
 8009384:	2864      	cmp	r0, #100	; 0x64
 8009386:	f200 8152 	bhi.w	800962e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800938a:	f8d8 3000 	ldr.w	r3, [r8]
 800938e:	05da      	lsls	r2, r3, #23
 8009390:	d5f5      	bpl.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x72a>
    if(ret == HAL_OK)
 8009392:	2d00      	cmp	r5, #0
 8009394:	f040 81a1 	bne.w	80096da <HAL_RCCEx_PeriphCLKConfig+0xa86>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009398:	4aa8      	ldr	r2, [pc, #672]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800939a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800939e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80093a0:	4059      	eors	r1, r3
 80093a2:	f411 7f40 	tst.w	r1, #768	; 0x300
 80093a6:	d00b      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093a8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80093aa:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093ac:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80093b0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80093b4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093b6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80093b8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80093bc:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80093be:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c4:	f000 816b 	beq.w	800969e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80093cc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80093d0:	f000 8179 	beq.w	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 80093d4:	4999      	ldr	r1, [pc, #612]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80093d6:	690a      	ldr	r2, [r1, #16]
 80093d8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80093dc:	610a      	str	r2, [r1, #16]
 80093de:	4a97      	ldr	r2, [pc, #604]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80093e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80093e6:	430b      	orrs	r3, r1
 80093e8:	6713      	str	r3, [r2, #112]	; 0x70
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	e5b5      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SdmmcClockSelection)
 80093ee:	2601      	movs	r6, #1
 80093f0:	4635      	mov	r5, r6
 80093f2:	e6da      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x556>
 80093f4:	462e      	mov	r6, r5
 80093f6:	e466      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80093f8:	462e      	mov	r6, r5
 80093fa:	e4c6      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093fc:	462e      	mov	r6, r5
 80093fe:	e4ff      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8009400:	462e      	mov	r6, r5
 8009402:	e47e      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8009404:	462e      	mov	r6, r5
 8009406:	e49e      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009408:	498c      	ldr	r1, [pc, #560]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800940a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800940c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009410:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009412:	e4eb      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009414:	4989      	ldr	r1, [pc, #548]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009416:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009418:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800941c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800941e:	e487      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009420:	4986      	ldr	r1, [pc, #536]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009422:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009424:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009428:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800942a:	e460      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800942c:	4883      	ldr	r0, [pc, #524]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800942e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009430:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8009434:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8009436:	e42a      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009438:	4980      	ldr	r1, [pc, #512]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800943a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800943c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009440:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009442:	e497      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009444:	462e      	mov	r6, r5
 8009446:	e526      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009448:	497c      	ldr	r1, [pc, #496]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800944a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800944e:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009450:	f022 0207 	bic.w	r2, r2, #7
 8009454:	4302      	orrs	r2, r0
 8009456:	658a      	str	r2, [r1, #88]	; 0x58
 8009458:	e5ee      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800945a:	4978      	ldr	r1, [pc, #480]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800945c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800945e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009460:	f022 0207 	bic.w	r2, r2, #7
 8009464:	4302      	orrs	r2, r0
 8009466:	654a      	str	r2, [r1, #84]	; 0x54
 8009468:	e5cc      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800946a:	462e      	mov	r6, r5
 800946c:	e503      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800946e:	4973      	ldr	r1, [pc, #460]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8009470:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009472:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8009474:	f022 0203 	bic.w	r2, r2, #3
 8009478:	4302      	orrs	r2, r0
 800947a:	64ca      	str	r2, [r1, #76]	; 0x4c
 800947c:	e56a      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800947e:	462e      	mov	r6, r5
 8009480:	e49e      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009482:	462e      	mov	r6, r5
 8009484:	e4d9      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8009486:	462e      	mov	r6, r5
 8009488:	e616      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800948a:	462e      	mov	r6, r5
 800948c:	e634      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800948e:	462e      	mov	r6, r5
 8009490:	e5f2      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009492:	0358      	lsls	r0, r3, #13
 8009494:	462e      	mov	r6, r5
 8009496:	f57f ae6e 	bpl.w	8009176 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800949a:	e65c      	b.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x502>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800949c:	03d9      	lsls	r1, r3, #15
 800949e:	462e      	mov	r6, r5
 80094a0:	f57f ae83 	bpl.w	80091aa <HAL_RCCEx_PeriphCLKConfig+0x556>
 80094a4:	e669      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094a6:	4965      	ldr	r1, [pc, #404]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094a8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80094aa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80094ac:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80094b0:	4302      	orrs	r2, r0
 80094b2:	654a      	str	r2, [r1, #84]	; 0x54
 80094b4:	e58d      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80094b6:	462e      	mov	r6, r5
 80094b8:	e677      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x556>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094ba:	2102      	movs	r1, #2
 80094bc:	1d20      	adds	r0, r4, #4
 80094be:	f7ff fad1 	bl	8008a64 <RCCEx_PLL2_Config>
 80094c2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	d1d9      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x82a>
 80094ca:	e472      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094cc:	495b      	ldr	r1, [pc, #364]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80094ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80094d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80094d4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	f47f ad3b 	bne.w	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80094dc:	e7c7      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094de:	2101      	movs	r1, #1
 80094e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094e4:	f7ff fb3a 	bl	8008b5c <RCCEx_PLL3_Config>
 80094e8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	2d00      	cmp	r5, #0
 80094ee:	d1bc      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x816>
 80094f0:	e4b9      	b.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x212>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094f2:	2102      	movs	r1, #2
 80094f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094f8:	f7ff fb30 	bl	8008b5c <RCCEx_PLL3_Config>
 80094fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	2d00      	cmp	r5, #0
 8009502:	d1c2      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x836>
 8009504:	e5f0      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009506:	2102      	movs	r1, #2
 8009508:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800950c:	f7ff fb26 	bl	8008b5c <RCCEx_PLL3_Config>
 8009510:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	2d00      	cmp	r5, #0
 8009516:	d1b6      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8009518:	e5c6      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800951a:	4948      	ldr	r1, [pc, #288]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800951c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800951e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009522:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009524:	2d00      	cmp	r5, #0
 8009526:	d18d      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
 8009528:	e6a9      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x62a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800952a:	2102      	movs	r1, #2
 800952c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009530:	f7ff fb14 	bl	8008b5c <RCCEx_PLL3_Config>
 8009534:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	2d00      	cmp	r5, #0
 800953a:	d1a8      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800953c:	e594      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x414>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800953e:	2101      	movs	r1, #1
 8009540:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009544:	f7ff fb0a 	bl	8008b5c <RCCEx_PLL3_Config>
 8009548:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	2d00      	cmp	r5, #0
 800954e:	d198      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8009550:	e46c      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009552:	2102      	movs	r1, #2
 8009554:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009558:	f7ff fb00 	bl	8008b5c <RCCEx_PLL3_Config>
 800955c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8009560:	b100      	cbz	r0, 8009564 <HAL_RCCEx_PeriphCLKConfig+0x910>
          status = HAL_ERROR;
 8009562:	2601      	movs	r6, #1
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	e5cf      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009568:	2100      	movs	r1, #0
 800956a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800956e:	f7ff faf5 	bl	8008b5c <RCCEx_PLL3_Config>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	4605      	mov	r5, r0
      break;
 8009576:	e439      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009578:	2100      	movs	r1, #0
 800957a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800957e:	f7ff faed 	bl	8008b5c <RCCEx_PLL3_Config>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4605      	mov	r5, r0
      break;
 8009586:	f7ff bbb2 	b.w	8008cee <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958a:	492c      	ldr	r1, [pc, #176]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
      break;
 800958c:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009590:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009594:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8009596:	e65e      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009598:	2100      	movs	r1, #0
 800959a:	1d20      	adds	r0, r4, #4
 800959c:	f7ff fa62 	bl	8008a64 <RCCEx_PLL2_Config>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	4605      	mov	r5, r0
      break;
 80095a4:	e657      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x602>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095a6:	2100      	movs	r1, #0
 80095a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095ac:	f7ff fad6 	bl	8008b5c <RCCEx_PLL3_Config>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	4605      	mov	r5, r0
      break;
 80095b4:	f7ff bbbc 	b.w	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80095b8:	2100      	movs	r1, #0
 80095ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095be:	f7ff facd 	bl	8008b5c <RCCEx_PLL3_Config>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	4605      	mov	r5, r0
      break;
 80095c6:	e646      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	f7ff bb67 	b.w	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095ce:	2100      	movs	r1, #0
 80095d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80095d4:	f7ff fac2 	bl	8008b5c <RCCEx_PLL3_Config>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	4605      	mov	r5, r0
      break;
 80095dc:	f7ff bbca 	b.w	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e0:	2102      	movs	r1, #2
 80095e2:	3024      	adds	r0, #36	; 0x24
 80095e4:	f7ff faba 	bl	8008b5c <RCCEx_PLL3_Config>
 80095e8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	f43f ab4d 	beq.w	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x36>
 80095f0:	e7ea      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095f2:	2101      	movs	r1, #1
 80095f4:	1d20      	adds	r0, r4, #4
 80095f6:	f7ff fa35 	bl	8008a64 <RCCEx_PLL2_Config>
 80095fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	2d00      	cmp	r5, #0
 8009600:	f47f acff 	bne.w	8009002 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009604:	e729      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x806>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009606:	2101      	movs	r1, #1
 8009608:	1d20      	adds	r0, r4, #4
 800960a:	f7ff fa2b 	bl	8008a64 <RCCEx_PLL2_Config>
 800960e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	2d00      	cmp	r5, #0
 8009614:	f47f ad0f 	bne.w	8009036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8009618:	e716      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800961a:	2101      	movs	r1, #1
 800961c:	1d20      	adds	r0, r4, #4
 800961e:	f7ff fa21 	bl	8008a64 <RCCEx_PLL2_Config>
 8009622:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	2d00      	cmp	r5, #0
 8009628:	f47f acd2 	bne.w	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800962c:	e73b      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
            ret = HAL_TIMEOUT;
 800962e:	2603      	movs	r6, #3
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	4635      	mov	r5, r6
 8009634:	e491      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8009636:	bf00      	nop
 8009638:	58024800 	.word	0x58024800
 800963c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009640:	492d      	ldr	r1, [pc, #180]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009642:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8009644:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009648:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800964a:	2d00      	cmp	r5, #0
 800964c:	f47f af33 	bne.w	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x862>
 8009650:	e5a4      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x548>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009652:	4829      	ldr	r0, [pc, #164]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009654:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009656:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800965a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800965c:	2d00      	cmp	r5, #0
 800965e:	f47f adf4 	bne.w	800924a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8009662:	e625      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009664:	1d20      	adds	r0, r4, #4
 8009666:	f7ff f9fd 	bl	8008a64 <RCCEx_PLL2_Config>
 800966a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	2d00      	cmp	r5, #0
 8009670:	f47f af0f 	bne.w	8009492 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8009674:	e660      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009676:	4920      	ldr	r1, [pc, #128]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009678:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800967a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800967e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8009680:	2d00      	cmp	r5, #0
 8009682:	f47f af0b 	bne.w	800949c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8009686:	e641      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009688:	2102      	movs	r1, #2
 800968a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800968e:	f7ff fa65 	bl	8008b5c <RCCEx_PLL3_Config>
 8009692:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009696:	b100      	cbz	r0, 800969a <HAL_RCCEx_PeriphCLKConfig+0xa46>
        status = HAL_ERROR;
 8009698:	2601      	movs	r6, #1
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	e542      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        tickstart = HAL_GetTick();
 800969e:	f7fa fd75 	bl	800418c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096a2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80096f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096a6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80096aa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ac:	e004      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ae:	f7fa fd6d 	bl	800418c <HAL_GetTick>
 80096b2:	1bc0      	subs	r0, r0, r7
 80096b4:	4548      	cmp	r0, r9
 80096b6:	d8ba      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x9da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096b8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80096bc:	079b      	lsls	r3, r3, #30
 80096be:	d5f6      	bpl.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xa5a>
 80096c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80096c4:	e680      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x774>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096c6:	480c      	ldr	r0, [pc, #48]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096c8:	4a0c      	ldr	r2, [pc, #48]	; (80096fc <HAL_RCCEx_PeriphCLKConfig+0xaa8>)
 80096ca:	6901      	ldr	r1, [r0, #16]
 80096cc:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80096d0:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80096d4:	430a      	orrs	r2, r1
 80096d6:	6102      	str	r2, [r0, #16]
 80096d8:	e681      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80096da:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80096dc:	462e      	mov	r6, r5
 80096de:	e43c      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Sai1ClockSelection)
 80096e0:	2601      	movs	r6, #1
 80096e2:	f7ff baef 	b.w	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80096e6:	2601      	movs	r6, #1
 80096e8:	4635      	mov	r5, r6
 80096ea:	e48b      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 80096ec:	2601      	movs	r6, #1
 80096ee:	4635      	mov	r5, r6
 80096f0:	e430      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80096f2:	2601      	movs	r6, #1
 80096f4:	4635      	mov	r5, r6
 80096f6:	e49f      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096f8:	58024400 	.word	0x58024400
 80096fc:	00ffffcf 	.word	0x00ffffcf

08009700 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009700:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009702:	f7ff f8df 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 8009706:	4b05      	ldr	r3, [pc, #20]	; (800971c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009708:	4a05      	ldr	r2, [pc, #20]	; (8009720 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009710:	5cd3      	ldrb	r3, [r2, r3]
 8009712:	f003 031f 	and.w	r3, r3, #31
}
 8009716:	40d8      	lsrs	r0, r3
 8009718:	bd08      	pop	{r3, pc}
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
 8009720:	08018228 	.word	0x08018228

08009724 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009724:	4b4f      	ldr	r3, [pc, #316]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8009726:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009728:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800972a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800972c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800972e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009732:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009736:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8009738:	d05c      	beq.n	80097f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800973a:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800973e:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009742:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009746:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 800974a:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800974c:	ee07 4a90 	vmov	s15, r4
 8009750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009754:	d003      	beq.n	800975e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8009756:	2902      	cmp	r1, #2
 8009758:	d075      	beq.n	8009846 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800975a:	2900      	cmp	r1, #0
 800975c:	d04f      	beq.n	80097fe <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800975e:	ee07 2a90 	vmov	s15, r2
 8009762:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009770:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009778:	ee06 3a90 	vmov	s13, r3
 800977c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009780:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009784:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009788:	eee7 6a25 	vfma.f32	s13, s14, s11
 800978c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009790:	4a34      	ldr	r2, [pc, #208]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8009792:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009796:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8009798:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800979c:	ee07 3a10 	vmov	s14, r3
 80097a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80097a4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097a6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80097aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b2:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80097b8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80097bc:	ee07 3a10 	vmov	s14, r3
 80097c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80097c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80097c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097d0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80097d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80097d6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80097e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80097ee:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80097f2:	4770      	bx	lr
 80097f4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80097f6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80097fa:	6082      	str	r2, [r0, #8]
}
 80097fc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fe:	6819      	ldr	r1, [r3, #0]
 8009800:	0689      	lsls	r1, r1, #26
 8009802:	d527      	bpl.n	8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009804:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009806:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800980a:	4a19      	ldr	r2, [pc, #100]	; (8009870 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800980c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009810:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800981a:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800981c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8009820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009824:	ee06 2a10 	vmov	s12, r2
 8009828:	ee06 3a90 	vmov	s13, r3
 800982c:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009830:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009834:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009838:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800983c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009840:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009844:	e7a4      	b.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009846:	ee07 2a90 	vmov	s15, r2
 800984a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800984e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009852:	e78a      	b.n	800976a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009854:	ee07 2a90 	vmov	s15, r2
 8009858:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009878 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800985c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009860:	e783      	b.n	800976a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8009862:	bf00      	nop
 8009864:	58024400 	.word	0x58024400
 8009868:	4a742400 	.word	0x4a742400
 800986c:	39000000 	.word	0x39000000
 8009870:	03d09000 	.word	0x03d09000
 8009874:	4bbebc20 	.word	0x4bbebc20
 8009878:	4c742400 	.word	0x4c742400

0800987c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800987c:	4b4f      	ldr	r3, [pc, #316]	; (80099bc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800987e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009880:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009882:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009884:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8009886:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800988a:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800988e:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8009890:	d05c      	beq.n	800994c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009892:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009896:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800989a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800989e:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80098a2:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098a4:	ee07 4a90 	vmov	s15, r4
 80098a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80098ac:	d003      	beq.n	80098b6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80098ae:	2902      	cmp	r1, #2
 80098b0:	d075      	beq.n	800999e <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d04f      	beq.n	8009956 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098b6:	ee07 2a90 	vmov	s15, r2
 80098ba:	eddf 6a41 	vldr	s13, [pc, #260]	; 80099c0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80098be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80098c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80099c4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80098cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d0:	ee06 3a90 	vmov	s13, r3
 80098d4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80098d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80098dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80098e0:	eee7 6a25 	vfma.f32	s13, s14, s11
 80098e4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80098e8:	4a34      	ldr	r2, [pc, #208]	; (80099bc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 80098ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80098ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80098f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80098f4:	ee07 3a10 	vmov	s14, r3
 80098f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80098fc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80098fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800990a:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800990e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009910:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009914:	ee07 3a10 	vmov	s14, r3
 8009918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800991c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009928:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800992c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800992e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800993a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800993e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009942:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009946:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800994a:	4770      	bx	lr
 800994c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800994e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009952:	6082      	str	r2, [r0, #8]
}
 8009954:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009956:	6819      	ldr	r1, [r3, #0]
 8009958:	0689      	lsls	r1, r1, #26
 800995a:	d527      	bpl.n	80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800995c:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800995e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009962:	4a19      	ldr	r2, [pc, #100]	; (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009964:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009968:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800996c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009972:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009974:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80099c4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8009978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997c:	ee06 2a10 	vmov	s12, r2
 8009980:	ee06 3a90 	vmov	s13, r3
 8009984:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009988:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800998c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009990:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009994:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009998:	ee66 6a26 	vmul.f32	s13, s12, s13
 800999c:	e7a4      	b.n	80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800999e:	ee07 2a90 	vmov	s15, r2
 80099a2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80099cc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80099a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099aa:	e78a      	b.n	80098c2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099ac:	ee07 2a90 	vmov	s15, r2
 80099b0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80099d0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80099b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099b8:	e783      	b.n	80098c2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80099ba:	bf00      	nop
 80099bc:	58024400 	.word	0x58024400
 80099c0:	4a742400 	.word	0x4a742400
 80099c4:	39000000 	.word	0x39000000
 80099c8:	03d09000 	.word	0x03d09000
 80099cc:	4bbebc20 	.word	0x4bbebc20
 80099d0:	4c742400 	.word	0x4c742400

080099d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099d4:	4b4f      	ldr	r3, [pc, #316]	; (8009b14 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 80099d6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80099da:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80099dc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 80099de:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80099e2:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80099e6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 80099e8:	d05c      	beq.n	8009aa4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80099ea:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80099ee:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099f2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80099f6:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 80099fa:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80099fc:	ee07 4a90 	vmov	s15, r4
 8009a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8009a04:	d07e      	beq.n	8009b04 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8009a06:	2902      	cmp	r1, #2
 8009a08:	d075      	beq.n	8009af6 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d04f      	beq.n	8009aae <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a0e:	ee07 2a90 	vmov	s15, r2
 8009a12:	eddf 6a41 	vldr	s13, [pc, #260]	; 8009b18 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009a20:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009b1c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a28:	ee06 3a90 	vmov	s13, r3
 8009a2c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009a30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009a34:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009a38:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009a3c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009a40:	4a34      	ldr	r2, [pc, #208]	; (8009b14 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8009a42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009a46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009a48:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009a4c:	ee07 3a10 	vmov	s14, r3
 8009a50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8009a54:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009a56:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a62:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009a66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009a68:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009a6c:	ee07 3a10 	vmov	s14, r3
 8009a70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009a74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a80:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009a84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009a86:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a92:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a9a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009a9e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8009aa2:	4770      	bx	lr
 8009aa4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009aa6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009aaa:	6082      	str	r2, [r0, #8]
}
 8009aac:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aae:	6819      	ldr	r1, [r3, #0]
 8009ab0:	0689      	lsls	r1, r1, #26
 8009ab2:	d5ac      	bpl.n	8009a0e <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ab4:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ab6:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009aba:	4a19      	ldr	r2, [pc, #100]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009abc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ac0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009aca:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009acc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009b1c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8009ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad4:	ee06 2a10 	vmov	s12, r2
 8009ad8:	ee06 3a90 	vmov	s13, r3
 8009adc:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8009ae0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009ae4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009ae8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009aec:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009af0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009af4:	e7a4      	b.n	8009a40 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af6:	ee07 2a90 	vmov	s15, r2
 8009afa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8009b24 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8009afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b02:	e78a      	b.n	8009a1a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b04:	ee07 2a90 	vmov	s15, r2
 8009b08:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009b28 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8009b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b10:	e783      	b.n	8009a1a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8009b12:	bf00      	nop
 8009b14:	58024400 	.word	0x58024400
 8009b18:	4c742400 	.word	0x4c742400
 8009b1c:	39000000 	.word	0x39000000
 8009b20:	03d09000 	.word	0x03d09000
 8009b24:	4bbebc20 	.word	0x4bbebc20
 8009b28:	4a742400 	.word	0x4a742400

08009b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b2c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8009b30:	b500      	push	{lr}
 8009b32:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b34:	d077      	beq.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009b36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009b3a:	d02e      	beq.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009b3c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009b40:	f000 80cf 	beq.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b44:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8009b48:	f000 8080 	beq.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009b4c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8009b50:	d05a      	beq.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009b52:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8009b56:	f000 8105 	beq.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009b5a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009b5e:	f000 8110 	beq.w	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009b62:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009b66:	f000 80e2 	beq.w	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009b6e:	d13a      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009b70:	4ba9      	ldr	r3, [pc, #676]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8009b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b7c:	f000 808e 	beq.w	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b84:	f000 812e 	beq.w	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009b88:	bb6b      	cbnz	r3, 8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b8a:	4aa3      	ldr	r2, [pc, #652]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = HSE_VALUE;
 8009b8c:	4ba3      	ldr	r3, [pc, #652]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b8e:	6810      	ldr	r0, [r2, #0]
            frequency = HSE_VALUE;
 8009b90:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009b94:	bf18      	it	ne
 8009b96:	4618      	movne	r0, r3
 8009b98:	e042      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009b9a:	4a9f      	ldr	r2, [pc, #636]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009b9c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b9e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8009ba2:	2b80      	cmp	r3, #128	; 0x80
 8009ba4:	f000 8098 	beq.w	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009ba8:	d921      	bls.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8009baa:	2bc0      	cmp	r3, #192	; 0xc0
 8009bac:	d037      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb2:	d118      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bb4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bb6:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bbc:	0749      	lsls	r1, r1, #29
 8009bbe:	d502      	bpl.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 80ae 	beq.w	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bc6:	4a94      	ldr	r2, [pc, #592]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	05d0      	lsls	r0, r2, #23
 8009bcc:	d503      	bpl.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bd2:	f000 80fb 	beq.w	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bd6:	4a90      	ldr	r2, [pc, #576]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	0391      	lsls	r1, r2, #14
 8009bdc:	d503      	bpl.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009be2:	f000 80bd 	beq.w	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      switch (srcclk)
 8009be6:	2000      	movs	r0, #0
}
 8009be8:	b005      	add	sp, #20
 8009bea:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d04b      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009bf2:	2b40      	cmp	r3, #64	; 0x40
 8009bf4:	d1f7      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bf6:	6810      	ldr	r0, [r2, #0]
 8009bf8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009bfc:	d010      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfe:	a801      	add	r0, sp, #4
 8009c00:	f7ff fd90 	bl	8009724 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c04:	9801      	ldr	r0, [sp, #4]
 8009c06:	e00b      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c08:	4a83      	ldr	r2, [pc, #524]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c0a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009c0c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c14:	d060      	beq.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009c16:	d936      	bls.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8009c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c1c:	d178      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c1e:	4880      	ldr	r0, [pc, #512]	; (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
}
 8009c20:	b005      	add	sp, #20
 8009c22:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009c26:	4b7c      	ldr	r3, [pc, #496]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2a:	f003 0307 	and.w	r3, r3, #7
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d8d9      	bhi.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c9d 	.word	0x08009c9d
 8009c3c:	08009cc1 	.word	0x08009cc1
 8009c40:	08009cad 	.word	0x08009cad
 8009c44:	08009c1f 	.word	0x08009c1f
 8009c48:	08009ca9 	.word	0x08009ca9
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009c4c:	4a72      	ldr	r2, [pc, #456]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009c50:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8009c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c58:	d03e      	beq.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009c5a:	d937      	bls.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8009c5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c60:	d0dd      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c66:	d1be      	bne.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c6a:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c70:	0752      	lsls	r2, r2, #29
 8009c72:	d5a8      	bpl.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1a6      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c78:	4b67      	ldr	r3, [pc, #412]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c7a:	486a      	ldr	r0, [pc, #424]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c82:	40d8      	lsrs	r0, r3
 8009c84:	e7cc      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d146      	bne.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c8a:	6810      	ldr	r0, [r2, #0]
 8009c8c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009c90:	d0c6      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c92:	a801      	add	r0, sp, #4
 8009c94:	f7ff fe9e 	bl	80099d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c98:	9802      	ldr	r0, [sp, #8]
 8009c9a:	e7c1      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c9c:	4b5e      	ldr	r3, [pc, #376]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009c9e:	6818      	ldr	r0, [r3, #0]
 8009ca0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009ca4:	d0bc      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009ca6:	e7f4      	b.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009ca8:	4a5b      	ldr	r2, [pc, #364]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009caa:	e783      	b.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cac:	4b5a      	ldr	r3, [pc, #360]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009cb4:	d0b4      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb6:	a801      	add	r0, sp, #4
 8009cb8:	f7ff fde0 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cbc:	9801      	ldr	r0, [sp, #4]
 8009cbe:	e7af      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cc0:	4b55      	ldr	r3, [pc, #340]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009cc8:	d0aa      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009cca:	e798      	b.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      switch (saiclocksource)
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d0dc      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cd4:	d08f      	beq.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009cd6:	e786      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cd8:	6810      	ldr	r0, [r2, #0]
 8009cda:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009cde:	d09f      	beq.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009ce0:	e7e9      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009ce2:	4a4d      	ldr	r2, [pc, #308]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009ce4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009ce6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cee:	d0f3      	beq.n	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009cf0:	d806      	bhi.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0c9      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8009cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cfa:	f43f af7c 	beq.w	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009cfe:	e772      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009d00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d04:	d08b      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8009d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d0a:	f43f af53 	beq.w	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
 8009d0e:	e76a      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      switch (srcclk)
 8009d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d14:	d0a8      	beq.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009d16:	e766      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1c:	f43f af6b 	beq.w	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8009d20:	e761      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	483f      	ldr	r0, [pc, #252]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8009d26:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009d2a:	40d8      	lsrs	r0, r3
 8009d2c:	e778      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009d2e:	4a3a      	ldr	r2, [pc, #232]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d30:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8009d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d3a:	d066      	beq.n	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009d3c:	d82f      	bhi.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d42:	d04f      	beq.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8009d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d48:	d131      	bne.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d4a:	4b33      	ldr	r3, [pc, #204]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009d52:	f43f af65 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d56:	a801      	add	r0, sp, #4
 8009d58:	f7ff fd90 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d5c:	9802      	ldr	r0, [sp, #8]
 8009d5e:	e75f      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = HSE_VALUE;
 8009d60:	482e      	ldr	r0, [pc, #184]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009d62:	e75d      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009d64:	4a2c      	ldr	r2, [pc, #176]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d66:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8009d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d70:	d02e      	beq.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8009d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d76:	f43f af77 	beq.w	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f47f af33 	bne.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009d80:	e739      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009d82:	4b25      	ldr	r3, [pc, #148]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009d84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 8009d86:	03d2      	lsls	r2, r2, #15
 8009d88:	d589      	bpl.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009d90:	f43f af46 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d94:	a801      	add	r0, sp, #4
 8009d96:	f7ff fcc5 	bl	8009724 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009d9a:	9803      	ldr	r0, [sp, #12]
 8009d9c:	e740      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
      switch (srcclk)
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d02a      	beq.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 8009da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009da8:	f43f aeef 	beq.w	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8009dac:	e71b      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f47f af19 	bne.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009db4:	f7fe fd86 	bl	80088c4 <HAL_RCC_GetHCLKFreq>
 8009db8:	4b17      	ldr	r3, [pc, #92]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009dba:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009dc2:	5cd3      	ldrb	r3, [r2, r3]
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	40d8      	lsrs	r0, r3
          break;
 8009dca:	e729      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
            frequency = CSI_VALUE;
 8009dcc:	4817      	ldr	r0, [pc, #92]	; (8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009dce:	e727      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dd0:	6810      	ldr	r0, [r2, #0]
 8009dd2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009dd6:	f43f af23 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dda:	a801      	add	r0, sp, #4
 8009ddc:	f7ff fd4e 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009de0:	9803      	ldr	r0, [sp, #12]
 8009de2:	e71d      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009de4:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009dec:	f43f af18 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df0:	a801      	add	r0, sp, #4
 8009df2:	f7ff fc97 	bl	8009724 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009df6:	9802      	ldr	r0, [sp, #8]
 8009df8:	e712      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009dfa:	4a07      	ldr	r2, [pc, #28]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
            frequency = CSI_VALUE;
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009dfe:	6810      	ldr	r0, [r2, #0]
            frequency = CSI_VALUE;
 8009e00:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8009e04:	bf18      	it	ne
 8009e06:	4618      	movne	r0, r3
 8009e08:	e70a      	b.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e0a:	6810      	ldr	r0, [r2, #0]
 8009e0c:	f010 0004 	ands.w	r0, r0, #4
 8009e10:	f43f af06 	beq.w	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009e14:	e730      	b.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009e16:	bf00      	nop
 8009e18:	58024400 	.word	0x58024400
 8009e1c:	017d7840 	.word	0x017d7840
 8009e20:	00bb8000 	.word	0x00bb8000
 8009e24:	03d09000 	.word	0x03d09000
 8009e28:	08018228 	.word	0x08018228
 8009e2c:	003d0900 	.word	0x003d0900

08009e30 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f000 809c 	beq.w	8009f6e <HAL_TIM_Base_Init+0x13e>
{
 8009e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d075      	beq.n	8009f32 <HAL_TIM_Base_Init+0x102>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e46:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009e48:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e4a:	494a      	ldr	r1, [pc, #296]	; (8009f74 <HAL_TIM_Base_Init+0x144>)
 8009e4c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8009e50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e54:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8009e58:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e5a:	fab1 f181 	clz	r1, r1
 8009e5e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8009e62:	d026      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x82>
 8009e64:	bb29      	cbnz	r1, 8009eb2 <HAL_TIM_Base_Init+0x82>
 8009e66:	4844      	ldr	r0, [pc, #272]	; (8009f78 <HAL_TIM_Base_Init+0x148>)
 8009e68:	4282      	cmp	r2, r0
 8009e6a:	d022      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x82>
 8009e6c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009e70:	4282      	cmp	r2, r0
 8009e72:	d01e      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x82>
 8009e74:	4f41      	ldr	r7, [pc, #260]	; (8009f7c <HAL_TIM_Base_Init+0x14c>)
 8009e76:	4d42      	ldr	r5, [pc, #264]	; (8009f80 <HAL_TIM_Base_Init+0x150>)
 8009e78:	1bd7      	subs	r7, r2, r7
 8009e7a:	42aa      	cmp	r2, r5
 8009e7c:	fab7 f787 	clz	r7, r7
 8009e80:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8009e84:	d05a      	beq.n	8009f3c <HAL_TIM_Base_Init+0x10c>
 8009e86:	2f00      	cmp	r7, #0
 8009e88:	d158      	bne.n	8009f3c <HAL_TIM_Base_Init+0x10c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e8a:	483e      	ldr	r0, [pc, #248]	; (8009f84 <HAL_TIM_Base_Init+0x154>)
 8009e8c:	493e      	ldr	r1, [pc, #248]	; (8009f88 <HAL_TIM_Base_Init+0x158>)
 8009e8e:	428a      	cmp	r2, r1
 8009e90:	bf18      	it	ne
 8009e92:	4282      	cmpne	r2, r0
 8009e94:	d05d      	beq.n	8009f52 <HAL_TIM_Base_Init+0x122>
 8009e96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e9a:	428a      	cmp	r2, r1
 8009e9c:	d059      	beq.n	8009f52 <HAL_TIM_Base_Init+0x122>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e9e:	69a1      	ldr	r1, [r4, #24]
 8009ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ea4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ea6:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ea8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8009eaa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009eac:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009eae:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eb0:	e023      	b.n	8009efa <HAL_TIM_Base_Init+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009eb2:	4f32      	ldr	r7, [pc, #200]	; (8009f7c <HAL_TIM_Base_Init+0x14c>)
 8009eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009eb8:	68a5      	ldr	r5, [r4, #8]
 8009eba:	1bd7      	subs	r7, r2, r7
 8009ebc:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ebe:	fab7 f787 	clz	r7, r7
 8009ec2:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ec4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eca:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ecc:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ece:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009ed0:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009ed8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009eda:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009edc:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ede:	b951      	cbnz	r1, 8009ef6 <HAL_TIM_Base_Init+0xc6>
 8009ee0:	b94f      	cbnz	r7, 8009ef6 <HAL_TIM_Base_Init+0xc6>
 8009ee2:	4928      	ldr	r1, [pc, #160]	; (8009f84 <HAL_TIM_Base_Init+0x154>)
 8009ee4:	4b28      	ldr	r3, [pc, #160]	; (8009f88 <HAL_TIM_Base_Init+0x158>)
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	bf18      	it	ne
 8009eea:	428a      	cmpne	r2, r1
 8009eec:	d003      	beq.n	8009ef6 <HAL_TIM_Base_Init+0xc6>
 8009eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d101      	bne.n	8009efa <HAL_TIM_Base_Init+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ef6:	6963      	ldr	r3, [r4, #20]
 8009ef8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009efa:	2301      	movs	r3, #1
  return HAL_OK;
 8009efc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8009efe:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f00:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009f08:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009f0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009f10:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009f20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f24:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009f28:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009f2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8009f32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009f36:	f7f9 feed 	bl	8003d14 <HAL_TIM_Base_MspInit>
 8009f3a:	e784      	b.n	8009e46 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f3c:	4810      	ldr	r0, [pc, #64]	; (8009f80 <HAL_TIM_Base_Init+0x150>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f42:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f44:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8009f46:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f4a:	d0bb      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x94>
 8009f4c:	2f00      	cmp	r7, #0
 8009f4e:	d1b9      	bne.n	8009ec4 <HAL_TIM_Base_Init+0x94>
 8009f50:	e79b      	b.n	8009e8a <HAL_TIM_Base_Init+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f52:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f58:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f5a:	430b      	orrs	r3, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f5c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8009f5e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f64:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009f66:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f68:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f6a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f6c:	e7b9      	b.n	8009ee2 <HAL_TIM_Base_Init+0xb2>
    return HAL_ERROR;
 8009f6e:	2001      	movs	r0, #1
}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40010000 	.word	0x40010000
 8009f78:	40000400 	.word	0x40000400
 8009f7c:	40010400 	.word	0x40010400
 8009f80:	40000c00 	.word	0x40000c00
 8009f84:	40014000 	.word	0x40014000
 8009f88:	40014400 	.word	0x40014400

08009f8c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009f8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d138      	bne.n	800a006 <HAL_TIM_Base_Start+0x7a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f94:	6802      	ldr	r2, [r0, #0]
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <HAL_TIM_Base_Start+0x90>)
 8009f98:	4921      	ldr	r1, [pc, #132]	; (800a020 <HAL_TIM_Base_Start+0x94>)
 8009f9a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009f9e:	bf18      	it	ne
 8009fa0:	429a      	cmpne	r2, r3
 8009fa2:	bf0c      	ite	eq
 8009fa4:	2301      	moveq	r3, #1
 8009fa6:	2300      	movne	r3, #0
{
 8009fa8:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009faa:	428a      	cmp	r2, r1
 8009fac:	bf08      	it	eq
 8009fae:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb2:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb4:	4c1b      	ldr	r4, [pc, #108]	; (800a024 <HAL_TIM_Base_Start+0x98>)
 8009fb6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  htim->State = HAL_TIM_STATE_BUSY;
 8009fba:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fbe:	42a2      	cmp	r2, r4
 8009fc0:	bf08      	it	eq
 8009fc2:	f043 0301 	orreq.w	r3, r3, #1
 8009fc6:	4818      	ldr	r0, [pc, #96]	; (800a028 <HAL_TIM_Base_Start+0x9c>)
 8009fc8:	4282      	cmp	r2, r0
 8009fca:	bf08      	it	eq
 8009fcc:	f043 0301 	orreq.w	r3, r3, #1
 8009fd0:	428a      	cmp	r2, r1
 8009fd2:	bf08      	it	eq
 8009fd4:	f043 0301 	orreq.w	r3, r3, #1
 8009fd8:	b933      	cbnz	r3, 8009fe8 <HAL_TIM_Base_Start+0x5c>
 8009fda:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8009fde:	1a10      	subs	r0, r2, r0
 8009fe0:	fab0 f080 	clz	r0, r0
 8009fe4:	0940      	lsrs	r0, r0, #5
 8009fe6:	b198      	cbz	r0, 800a010 <HAL_TIM_Base_Start+0x84>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe8:	6891      	ldr	r1, [r2, #8]
 8009fea:	4b10      	ldr	r3, [pc, #64]	; (800a02c <HAL_TIM_Base_Start+0xa0>)
 8009fec:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fee:	2b06      	cmp	r3, #6
 8009ff0:	d00b      	beq.n	800a00a <HAL_TIM_Base_Start+0x7e>
 8009ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff6:	d008      	beq.n	800a00a <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8009ff8:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8009ffa:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8009ffc:	f043 0301 	orr.w	r3, r3, #1
 800a000:	6013      	str	r3, [r2, #0]
}
 800a002:	bc30      	pop	{r4, r5}
 800a004:	4770      	bx	lr
    return HAL_ERROR;
 800a006:	2001      	movs	r0, #1
}
 800a008:	4770      	bx	lr
  return HAL_OK;
 800a00a:	2000      	movs	r0, #0
}
 800a00c:	bc30      	pop	{r4, r5}
 800a00e:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800a010:	6813      	ldr	r3, [r2, #0]
 800a012:	f043 0301 	orr.w	r3, r3, #1
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	e7f3      	b.n	800a002 <HAL_TIM_Base_Start+0x76>
 800a01a:	bf00      	nop
 800a01c:	40010000 	.word	0x40010000
 800a020:	40000400 	.word	0x40000400
 800a024:	40000800 	.word	0x40000800
 800a028:	40000c00 	.word	0x40000c00
 800a02c:	00010007 	.word	0x00010007

0800a030 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800a030:	2800      	cmp	r0, #0
 800a032:	f000 80cf 	beq.w	800a1d4 <HAL_TIM_Encoder_Init+0x1a4>
{
 800a036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a03a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a03e:	460d      	mov	r5, r1
 800a040:	4604      	mov	r4, r0
 800a042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 80a5 	beq.w	800a196 <HAL_TIM_Encoder_Init+0x166>
  htim->State = HAL_TIM_STATE_BUSY;
 800a04c:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	4a61      	ldr	r2, [pc, #388]	; (800a1d8 <HAL_TIM_Encoder_Init+0x1a8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a052:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05a:	4960      	ldr	r1, [pc, #384]	; (800a1dc <HAL_TIM_Encoder_Init+0x1ac>)
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a05c:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a05e:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a062:	ea02 0200 	and.w	r2, r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a066:	fab1 f181 	clz	r1, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a06a:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a06c:	ea4f 1151 	mov.w	r1, r1, lsr #5
  tmpcr1 = TIMx->CR1;
 800a070:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a072:	d02b      	beq.n	800a0cc <HAL_TIM_Encoder_Init+0x9c>
 800a074:	bb51      	cbnz	r1, 800a0cc <HAL_TIM_Encoder_Init+0x9c>
 800a076:	485a      	ldr	r0, [pc, #360]	; (800a1e0 <HAL_TIM_Encoder_Init+0x1b0>)
 800a078:	4283      	cmp	r3, r0
 800a07a:	d027      	beq.n	800a0cc <HAL_TIM_Encoder_Init+0x9c>
 800a07c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a080:	4283      	cmp	r3, r0
 800a082:	d023      	beq.n	800a0cc <HAL_TIM_Encoder_Init+0x9c>
 800a084:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800a088:	4e56      	ldr	r6, [pc, #344]	; (800a1e4 <HAL_TIM_Encoder_Init+0x1b4>)
 800a08a:	eba3 0c00 	sub.w	ip, r3, r0
 800a08e:	42b3      	cmp	r3, r6
 800a090:	fabc fc8c 	clz	ip, ip
 800a094:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800a098:	f000 8082 	beq.w	800a1a0 <HAL_TIM_Encoder_Init+0x170>
 800a09c:	f1bc 0f00 	cmp.w	ip, #0
 800a0a0:	d17e      	bne.n	800a1a0 <HAL_TIM_Encoder_Init+0x170>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0a2:	4851      	ldr	r0, [pc, #324]	; (800a1e8 <HAL_TIM_Encoder_Init+0x1b8>)
 800a0a4:	4951      	ldr	r1, [pc, #324]	; (800a1ec <HAL_TIM_Encoder_Init+0x1bc>)
 800a0a6:	428b      	cmp	r3, r1
 800a0a8:	bf18      	it	ne
 800a0aa:	4283      	cmpne	r3, r0
 800a0ac:	f000 8084 	beq.w	800a1b8 <HAL_TIM_Encoder_Init+0x188>
 800a0b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0b4:	428b      	cmp	r3, r1
 800a0b6:	d07f      	beq.n	800a1b8 <HAL_TIM_Encoder_Init+0x188>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0b8:	69a1      	ldr	r1, [r4, #24]
 800a0ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0be:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0c0:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800a0c2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800a0c4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0c6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a0c8:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0ca:	e027      	b.n	800a11c <HAL_TIM_Encoder_Init+0xec>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0cc:	4848      	ldr	r0, [pc, #288]	; (800a1f0 <HAL_TIM_Encoder_Init+0x1c0>)
 800a0ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a0d2:	68a6      	ldr	r6, [r4, #8]
 800a0d4:	eba3 0c00 	sub.w	ip, r3, r0
 800a0d8:	4332      	orrs	r2, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0da:	fabc fc8c 	clz	ip, ip
 800a0de:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0e2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0e8:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0ea:	4332      	orrs	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0ec:	68e7      	ldr	r7, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a0ee:	6866      	ldr	r6, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0f4:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a0f6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f8:	62df      	str	r7, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a0fa:	629e      	str	r6, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0fc:	b961      	cbnz	r1, 800a118 <HAL_TIM_Encoder_Init+0xe8>
 800a0fe:	f1bc 0f00 	cmp.w	ip, #0
 800a102:	d109      	bne.n	800a118 <HAL_TIM_Encoder_Init+0xe8>
 800a104:	4938      	ldr	r1, [pc, #224]	; (800a1e8 <HAL_TIM_Encoder_Init+0x1b8>)
 800a106:	4a39      	ldr	r2, [pc, #228]	; (800a1ec <HAL_TIM_Encoder_Init+0x1bc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	bf18      	it	ne
 800a10c:	428b      	cmpne	r3, r1
 800a10e:	d003      	beq.n	800a118 <HAL_TIM_Encoder_Init+0xe8>
 800a110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a114:	4293      	cmp	r3, r2
 800a116:	d101      	bne.n	800a11c <HAL_TIM_Encoder_Init+0xec>
    TIMx->RCR = Structure->RepetitionCounter;
 800a118:	6962      	ldr	r2, [r4, #20]
 800a11a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a11c:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800a11e:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a120:	69af      	ldr	r7, [r5, #24]
  return HAL_OK;
 800a122:	2000      	movs	r0, #0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a124:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a128:	68aa      	ldr	r2, [r5, #8]
  TIMx->EGR = TIM_EGR_UG;
 800a12a:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a12c:	ea42 2907 	orr.w	r9, r2, r7, lsl #8
  tmpsmcr = htim->Instance->SMCR;
 800a130:	f8d3 c008 	ldr.w	ip, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a134:	69ea      	ldr	r2, [r5, #28]
  tmpccmr1 = htim->Instance->CCMR1;
 800a136:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a138:	4f2e      	ldr	r7, [pc, #184]	; (800a1f4 <HAL_TIM_Encoder_Init+0x1c4>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a13a:	ea4e 2202 	orr.w	r2, lr, r2, lsl #8
 800a13e:	f8d5 a020 	ldr.w	sl, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a142:	400f      	ands	r7, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a144:	68e9      	ldr	r1, [r5, #12]
  tmpsmcr |= sConfig->EncoderMode;
 800a146:	f8d5 e000 	ldr.w	lr, [r5]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a14a:	4311      	orrs	r1, r2
  tmpccer = htim->Instance->CCER;
 800a14c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a14e:	ea49 0707 	orr.w	r7, r9, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a152:	f8d5 9014 	ldr.w	r9, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a156:	f022 08aa 	bic.w	r8, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a15a:	686a      	ldr	r2, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a15c:	4d26      	ldr	r5, [pc, #152]	; (800a1f8 <HAL_TIM_Encoder_Init+0x1c8>)
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a15e:	ea41 310a 	orr.w	r1, r1, sl, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a162:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800a166:	ea4c 0c0e 	orr.w	ip, ip, lr
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a16a:	403d      	ands	r5, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a16c:	ea42 0208 	orr.w	r2, r2, r8
  htim->Instance->SMCR = tmpsmcr;
 800a170:	f8c3 c008 	str.w	ip, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a174:	4329      	orrs	r1, r5
  htim->Instance->CCMR1 = tmpccmr1;
 800a176:	6199      	str	r1, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800a178:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a17a:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a17e:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a182:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a186:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a18a:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800a18e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    htim->Lock = HAL_UNLOCKED;
 800a196:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800a19a:	f7f9 fd7d 	bl	8003c98 <HAL_TIM_Encoder_MspInit>
 800a19e:	e755      	b.n	800a04c <HAL_TIM_Encoder_Init+0x1c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1a0:	4810      	ldr	r0, [pc, #64]	; (800a1e4 <HAL_TIM_Encoder_Init+0x1b4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a1a6:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1a8:	4283      	cmp	r3, r0
    tmpcr1 |= Structure->CounterMode;
 800a1aa:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1ae:	d098      	beq.n	800a0e2 <HAL_TIM_Encoder_Init+0xb2>
 800a1b0:	f1bc 0f00 	cmp.w	ip, #0
 800a1b4:	d195      	bne.n	800a0e2 <HAL_TIM_Encoder_Init+0xb2>
 800a1b6:	e774      	b.n	800a0a2 <HAL_TIM_Encoder_Init+0x72>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1b8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1be:	69a0      	ldr	r0, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1c0:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1c2:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800a1c4:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1ca:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800a1cc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1ce:	62de      	str	r6, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a1d0:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1d2:	e797      	b.n	800a104 <HAL_TIM_Encoder_Init+0xd4>
    return HAL_ERROR;
 800a1d4:	2001      	movs	r0, #1
}
 800a1d6:	4770      	bx	lr
 800a1d8:	fffebff8 	.word	0xfffebff8
 800a1dc:	40010000 	.word	0x40010000
 800a1e0:	40000400 	.word	0x40000400
 800a1e4:	40000c00 	.word	0x40000c00
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40010400 	.word	0x40010400
 800a1f4:	fffffcfc 	.word	0xfffffcfc
 800a1f8:	ffff0303 	.word	0xffff0303

0800a1fc <HAL_TIM_Encoder_Start>:
{
 800a1fc:	b430      	push	{r4, r5}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a1fe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a202:	f890 403f 	ldrb.w	r4, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a206:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a20a:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a20c:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a210:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800a212:	b9c1      	cbnz	r1, 800a246 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a214:	2b01      	cmp	r3, #1
 800a216:	d13d      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
 800a218:	2a01      	cmp	r2, #1
 800a21a:	d13b      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a21c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a21e:	2302      	movs	r3, #2
 800a220:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a224:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a228:	6a13      	ldr	r3, [r2, #32]
 800a22a:	f023 0301 	bic.w	r3, r3, #1
 800a22e:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a230:	6a13      	ldr	r3, [r2, #32]
 800a232:	f043 0301 	orr.w	r3, r3, #1
 800a236:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800a238:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800a23a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800a23c:	f043 0301 	orr.w	r3, r3, #1
}
 800a240:	bc30      	pop	{r4, r5}
  __HAL_TIM_ENABLE(htim);
 800a242:	6013      	str	r3, [r2, #0]
}
 800a244:	4770      	bx	lr
  else if (Channel == TIM_CHANNEL_2)
 800a246:	2904      	cmp	r1, #4
 800a248:	b2e4      	uxtb	r4, r4
 800a24a:	b2ed      	uxtb	r5, r5
 800a24c:	d025      	beq.n	800a29a <HAL_TIM_Encoder_Start+0x9e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d120      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
 800a252:	2c01      	cmp	r4, #1
 800a254:	d11e      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a256:	2a01      	cmp	r2, #1
 800a258:	d11c      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
 800a25a:	2d01      	cmp	r5, #1
 800a25c:	d11a      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a25e:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a260:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a262:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a266:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a26a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a26e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a272:	6a13      	ldr	r3, [r2, #32]
 800a274:	f023 0301 	bic.w	r3, r3, #1
 800a278:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a27a:	6a13      	ldr	r3, [r2, #32]
 800a27c:	f043 0301 	orr.w	r3, r3, #1
 800a280:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800a282:	6a13      	ldr	r3, [r2, #32]
 800a284:	f023 0310 	bic.w	r3, r3, #16
 800a288:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a28a:	6a13      	ldr	r3, [r2, #32]
 800a28c:	f043 0310 	orr.w	r3, r3, #16
 800a290:	6213      	str	r3, [r2, #32]
}
 800a292:	e7d1      	b.n	800a238 <HAL_TIM_Encoder_Start+0x3c>
      return HAL_ERROR;
 800a294:	2001      	movs	r0, #1
}
 800a296:	bc30      	pop	{r4, r5}
 800a298:	4770      	bx	lr
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a29a:	2c01      	cmp	r4, #1
 800a29c:	d1fa      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
 800a29e:	2d01      	cmp	r5, #1
 800a2a0:	d1f8      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x98>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a2:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a2a4:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2aa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800a2ae:	e7e8      	b.n	800a282 <HAL_TIM_Encoder_Start+0x86>

0800a2b0 <HAL_TIM_PeriodElapsedCallback>:
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop

0800a2b4 <HAL_TIM_OC_DelayElapsedCallback>:
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop

0800a2b8 <HAL_TIM_IC_CaptureCallback>:
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop

0800a2bc <HAL_TIM_PWM_PulseFinishedCallback>:
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop

0800a2c0 <HAL_TIM_TriggerCallback>:
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop

0800a2c4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2c4:	6803      	ldr	r3, [r0, #0]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	0791      	lsls	r1, r2, #30
{
 800a2ca:	b510      	push	{r4, lr}
 800a2cc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2ce:	d502      	bpl.n	800a2d6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2d0:	68da      	ldr	r2, [r3, #12]
 800a2d2:	0792      	lsls	r2, r2, #30
 800a2d4:	d468      	bmi.n	800a3a8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	0752      	lsls	r2, r2, #29
 800a2da:	d502      	bpl.n	800a2e2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	0750      	lsls	r0, r2, #29
 800a2e0:	d44f      	bmi.n	800a382 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	0711      	lsls	r1, r2, #28
 800a2e6:	d502      	bpl.n	800a2ee <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	0712      	lsls	r2, r2, #28
 800a2ec:	d437      	bmi.n	800a35e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	06d0      	lsls	r0, r2, #27
 800a2f2:	d502      	bpl.n	800a2fa <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	06d1      	lsls	r1, r2, #27
 800a2f8:	d41e      	bmi.n	800a338 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	07d2      	lsls	r2, r2, #31
 800a2fe:	d502      	bpl.n	800a306 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	07d0      	lsls	r0, r2, #31
 800a304:	d469      	bmi.n	800a3da <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	0611      	lsls	r1, r2, #24
 800a30a:	d502      	bpl.n	800a312 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	0612      	lsls	r2, r2, #24
 800a310:	d46b      	bmi.n	800a3ea <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a312:	691a      	ldr	r2, [r3, #16]
 800a314:	05d0      	lsls	r0, r2, #23
 800a316:	d502      	bpl.n	800a31e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	0611      	lsls	r1, r2, #24
 800a31c:	d46d      	bmi.n	800a3fa <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a31e:	691a      	ldr	r2, [r3, #16]
 800a320:	0652      	lsls	r2, r2, #25
 800a322:	d502      	bpl.n	800a32a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	0650      	lsls	r0, r2, #25
 800a328:	d46f      	bmi.n	800a40a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	0691      	lsls	r1, r2, #26
 800a32e:	d502      	bpl.n	800a336 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	0692      	lsls	r2, r2, #26
 800a334:	d449      	bmi.n	800a3ca <HAL_TIM_IRQHandler+0x106>
}
 800a336:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a338:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a33c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a33e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a340:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a342:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a34a:	d16f      	bne.n	800a42c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34c:	f7ff ffb2 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a350:	4620      	mov	r0, r4
 800a352:	f7ff ffb3 	bl	800a2bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a356:	2200      	movs	r2, #0
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	7722      	strb	r2, [r4, #28]
 800a35c:	e7cd      	b.n	800a2fa <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a35e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a362:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a364:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a366:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a368:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	079b      	lsls	r3, r3, #30
 800a36e:	d15a      	bne.n	800a426 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a370:	f7ff ffa0 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a374:	4620      	mov	r0, r4
 800a376:	f7ff ffa1 	bl	800a2bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37a:	2200      	movs	r2, #0
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	7722      	strb	r2, [r4, #28]
 800a380:	e7b5      	b.n	800a2ee <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a382:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a386:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a388:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a38a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a38c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a394:	d144      	bne.n	800a420 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a396:	f7ff ff8d 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a39a:	4620      	mov	r0, r4
 800a39c:	f7ff ff8e 	bl	800a2bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	7722      	strb	r2, [r4, #28]
 800a3a6:	e79c      	b.n	800a2e2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3a8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3ac:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3ae:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3b0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	0799      	lsls	r1, r3, #30
 800a3b6:	d130      	bne.n	800a41a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b8:	f7ff ff7c 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f7ff ff7d 	bl	800a2bc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	7722      	strb	r2, [r4, #28]
 800a3c8:	e785      	b.n	800a2d6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a3ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3d0:	611a      	str	r2, [r3, #16]
}
 800a3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a3d6:	f000 b881 	b.w	800a4dc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3da:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3e2:	f7ff ff65 	bl	800a2b0 <HAL_TIM_PeriodElapsedCallback>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	e78d      	b.n	800a306 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a3ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a3f2:	f000 f875 	bl	800a4e0 <HAL_TIMEx_BreakCallback>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	e78b      	b.n	800a312 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a3fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a400:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a402:	f000 f86f 	bl	800a4e4 <HAL_TIMEx_Break2Callback>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	e789      	b.n	800a31e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a40a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a40e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a410:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a412:	f7ff ff55 	bl	800a2c0 <HAL_TIM_TriggerCallback>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	e787      	b.n	800a32a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800a41a:	f7ff ff4d 	bl	800a2b8 <HAL_TIM_IC_CaptureCallback>
 800a41e:	e7d0      	b.n	800a3c2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800a420:	f7ff ff4a 	bl	800a2b8 <HAL_TIM_IC_CaptureCallback>
 800a424:	e7bc      	b.n	800a3a0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800a426:	f7ff ff47 	bl	800a2b8 <HAL_TIM_IC_CaptureCallback>
 800a42a:	e7a6      	b.n	800a37a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a42c:	f7ff ff44 	bl	800a2b8 <HAL_TIM_IC_CaptureCallback>
 800a430:	e791      	b.n	800a356 <HAL_TIM_IRQHandler+0x92>
 800a432:	bf00      	nop

0800a434 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a434:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d042      	beq.n	800a4c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a43c:	4602      	mov	r2, r0
 800a43e:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a440:	6813      	ldr	r3, [r2, #0]
{
 800a442:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a444:	4d20      	ldr	r5, [pc, #128]	; (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a446:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a44a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800a44c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a44e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a450:	d020      	beq.n	800a494 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a456:	42ab      	cmp	r3, r5
 800a458:	d01c      	beq.n	800a494 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a45a:	4d1c      	ldr	r5, [pc, #112]	; (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a45c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a460:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a462:	42ab      	cmp	r3, r5
 800a464:	bf18      	it	ne
 800a466:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800a46a:	4f19      	ldr	r7, [pc, #100]	; (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a46c:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a470:	4e18      	ldr	r6, [pc, #96]	; (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800a472:	bf0c      	ite	eq
 800a474:	2501      	moveq	r5, #1
 800a476:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 800a478:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a47a:	42bb      	cmp	r3, r7
 800a47c:	bf08      	it	eq
 800a47e:	f045 0501 	orreq.w	r5, r5, #1
 800a482:	42b3      	cmp	r3, r6
 800a484:	bf08      	it	eq
 800a486:	f045 0501 	orreq.w	r5, r5, #1
 800a48a:	b965      	cbnz	r5, 800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a48c:	4812      	ldr	r0, [pc, #72]	; (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800a48e:	4283      	cmp	r3, r0
 800a490:	d009      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800a492:	e00d      	b.n	800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a494:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a498:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a49c:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800a49e:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4a2:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800a4a4:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4a6:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4a8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ac:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4ae:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a4b0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a4b2:	2101      	movs	r1, #1

  return HAL_OK;
 800a4b4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800a4b6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a4ba:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800a4be:	bcf0      	pop	{r4, r5, r6, r7}
 800a4c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a4c2:	2002      	movs	r0, #2
}
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	40010000 	.word	0x40010000
 800a4cc:	40000400 	.word	0x40000400
 800a4d0:	40000800 	.word	0x40000800
 800a4d4:	40000c00 	.word	0x40000c00
 800a4d8:	40001800 	.word	0x40001800

0800a4dc <HAL_TIMEx_CommutCallback>:
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop

0800a4e0 <HAL_TIMEx_BreakCallback>:
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop

0800a4e4 <HAL_TIMEx_Break2Callback>:
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop

0800a4e8 <HAL_UART_TxCpltCallback>:
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop

0800a4ec <HAL_UART_ErrorCallback>:
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop

0800a4f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4fa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4fe:	f7ff fff5 	bl	800a4ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a502:	bd08      	pop	{r3, pc}

0800a504 <HAL_UARTEx_RxEventCallback>:
}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop

0800a508 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a508:	6802      	ldr	r2, [r0, #0]
{
 800a50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a50e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a510:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a514:	6815      	ldr	r5, [r2, #0]
{
 800a516:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800a518:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a51a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a51c:	d027      	beq.n	800a56e <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a51e:	48a8      	ldr	r0, [pc, #672]	; (800a7c0 <HAL_UART_IRQHandler+0x2b8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a520:	4ea8      	ldr	r6, [pc, #672]	; (800a7c4 <HAL_UART_IRQHandler+0x2bc>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a522:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a524:	402e      	ands	r6, r5
 800a526:	4306      	orrs	r6, r0
 800a528:	d16b      	bne.n	800a602 <HAL_UART_IRQHandler+0xfa>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a52c:	2801      	cmp	r0, #1
 800a52e:	d02c      	beq.n	800a58a <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a530:	02de      	lsls	r6, r3, #11
 800a532:	d502      	bpl.n	800a53a <HAL_UART_IRQHandler+0x32>
 800a534:	0248      	lsls	r0, r1, #9
 800a536:	f100 80ee 	bmi.w	800a716 <HAL_UART_IRQHandler+0x20e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a53a:	061f      	lsls	r7, r3, #24
 800a53c:	d506      	bpl.n	800a54c <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a53e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a542:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a546:	4301      	orrs	r1, r0
 800a548:	f040 80dd 	bne.w	800a706 <HAL_UART_IRQHandler+0x1fe>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a54c:	065e      	lsls	r6, r3, #25
 800a54e:	d502      	bpl.n	800a556 <HAL_UART_IRQHandler+0x4e>
 800a550:	0668      	lsls	r0, r5, #25
 800a552:	f100 80ec 	bmi.w	800a72e <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a556:	0219      	lsls	r1, r3, #8
 800a558:	d502      	bpl.n	800a560 <HAL_UART_IRQHandler+0x58>
 800a55a:	006a      	lsls	r2, r5, #1
 800a55c:	f100 80f4 	bmi.w	800a748 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a560:	01db      	lsls	r3, r3, #7
 800a562:	d502      	bpl.n	800a56a <HAL_UART_IRQHandler+0x62>
 800a564:	2d00      	cmp	r5, #0
 800a566:	f2c0 811f 	blt.w	800a7a8 <HAL_UART_IRQHandler+0x2a0>
}
 800a56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a56e:	069e      	lsls	r6, r3, #26
 800a570:	d5db      	bpl.n	800a52a <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a572:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a576:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800a57a:	433e      	orrs	r6, r7
 800a57c:	d0d5      	beq.n	800a52a <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 800a57e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0f2      	beq.n	800a56a <HAL_UART_IRQHandler+0x62>
}
 800a584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a588:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a58a:	06d8      	lsls	r0, r3, #27
 800a58c:	d5d0      	bpl.n	800a530 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a58e:	06ef      	lsls	r7, r5, #27
 800a590:	d5ce      	bpl.n	800a530 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a592:	2310      	movs	r3, #16
 800a594:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a596:	6893      	ldr	r3, [r2, #8]
 800a598:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a59c:	f000 80e0 	beq.w	800a760 <HAL_UART_IRQHandler+0x258>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a5a2:	6801      	ldr	r1, [r0, #0]
 800a5a4:	684b      	ldr	r3, [r1, #4]
 800a5a6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d0de      	beq.n	800a56a <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5ac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	d9da      	bls.n	800a56a <HAL_UART_IRQHandler+0x62>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a5b4:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800a5b6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a5ba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a5be:	d018      	beq.n	800a5f2 <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5c0:	6813      	ldr	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c2:	2100      	movs	r1, #0
          huart->RxState = HAL_UART_STATE_READY;
 800a5c4:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5ca:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5cc:	6893      	ldr	r3, [r2, #8]
 800a5ce:	f023 0301 	bic.w	r3, r3, #1
 800a5d2:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5d4:	6893      	ldr	r3, [r2, #8]
 800a5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5da:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800a5dc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e0:	66e1      	str	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e2:	6813      	ldr	r3, [r2, #0]
 800a5e4:	f023 0310 	bic.w	r3, r3, #16
 800a5e8:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5ea:	f7fb fec9 	bl	8006380 <HAL_DMA_Abort>
 800a5ee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5f2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	1ac9      	subs	r1, r1, r3
 800a5fa:	b289      	uxth	r1, r1
 800a5fc:	f7ff ff82 	bl	800a504 <HAL_UARTEx_RxEventCallback>
 800a600:	e7b3      	b.n	800a56a <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a602:	07df      	lsls	r7, r3, #31
 800a604:	d509      	bpl.n	800a61a <HAL_UART_IRQHandler+0x112>
 800a606:	05ee      	lsls	r6, r5, #23
 800a608:	d507      	bpl.n	800a61a <HAL_UART_IRQHandler+0x112>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a60a:	2601      	movs	r6, #1
 800a60c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a60e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a612:	f046 0601 	orr.w	r6, r6, #1
 800a616:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a61a:	079f      	lsls	r7, r3, #30
 800a61c:	d566      	bpl.n	800a6ec <HAL_UART_IRQHandler+0x1e4>
 800a61e:	07ce      	lsls	r6, r1, #31
 800a620:	d509      	bpl.n	800a636 <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a622:	2602      	movs	r6, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a624:	075f      	lsls	r7, r3, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a626:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a628:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a62c:	f046 0604 	orr.w	r6, r6, #4
 800a630:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a634:	d45e      	bmi.n	800a6f4 <HAL_UART_IRQHandler+0x1ec>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a636:	071e      	lsls	r6, r3, #28
 800a638:	d50b      	bpl.n	800a652 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a63a:	f005 0620 	and.w	r6, r5, #32
 800a63e:	4330      	orrs	r0, r6
 800a640:	d007      	beq.n	800a652 <HAL_UART_IRQHandler+0x14a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a642:	2008      	movs	r0, #8
 800a644:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a646:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a64a:	f040 0008 	orr.w	r0, r0, #8
 800a64e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a652:	0518      	lsls	r0, r3, #20
 800a654:	d50a      	bpl.n	800a66c <HAL_UART_IRQHandler+0x164>
 800a656:	016f      	lsls	r7, r5, #5
 800a658:	d508      	bpl.n	800a66c <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a65a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a65e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a660:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a664:	f040 0020 	orr.w	r0, r0, #32
 800a668:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a66c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a670:	2800      	cmp	r0, #0
 800a672:	f43f af7a 	beq.w	800a56a <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a676:	069e      	lsls	r6, r3, #26
 800a678:	d506      	bpl.n	800a688 <HAL_UART_IRQHandler+0x180>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a67a:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a67e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800a682:	ea55 0301 	orrs.w	r3, r5, r1
 800a686:	d164      	bne.n	800a752 <HAL_UART_IRQHandler+0x24a>
      errorcode = huart->ErrorCode;
 800a688:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a68c:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a68e:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a696:	431d      	orrs	r5, r3
 800a698:	f000 808b 	beq.w	800a7b2 <HAL_UART_IRQHandler+0x2aa>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a69c:	6811      	ldr	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a69e:	4b4a      	ldr	r3, [pc, #296]	; (800a7c8 <HAL_UART_IRQHandler+0x2c0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6a0:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800a6a4:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6a6:	6891      	ldr	r1, [r2, #8]
 800a6a8:	400b      	ands	r3, r1
 800a6aa:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d103      	bne.n	800a6ba <HAL_UART_IRQHandler+0x1b2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6b2:	6813      	ldr	r3, [r2, #0]
 800a6b4:	f023 0310 	bic.w	r3, r3, #16
 800a6b8:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800a6ba:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6bc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a6be:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c2:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c4:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 800a6c6:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	064d      	lsls	r5, r1, #25
 800a6ca:	d52c      	bpl.n	800a726 <HAL_UART_IRQHandler+0x21e>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6cc:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800a6ce:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6d4:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800a6d6:	b330      	cbz	r0, 800a726 <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6d8:	4b3c      	ldr	r3, [pc, #240]	; (800a7cc <HAL_UART_IRQHandler+0x2c4>)
 800a6da:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6dc:	f7fb ffd0 	bl	8006680 <HAL_DMA_Abort_IT>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	f43f af42 	beq.w	800a56a <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6e6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a6e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a6ea:	e74b      	b.n	800a584 <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6ec:	075e      	lsls	r6, r3, #29
 800a6ee:	d5a2      	bpl.n	800a636 <HAL_UART_IRQHandler+0x12e>
 800a6f0:	07cf      	lsls	r7, r1, #31
 800a6f2:	d5a0      	bpl.n	800a636 <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6f4:	2604      	movs	r6, #4
 800a6f6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6f8:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800a6fc:	f046 0602 	orr.w	r6, r6, #2
 800a700:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800a704:	e797      	b.n	800a636 <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 800a706:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f43f af2e 	beq.w	800a56a <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 800a70e:	4620      	mov	r0, r4
}
 800a710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800a714:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a71a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a71c:	6213      	str	r3, [r2, #32]
}
 800a71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800a722:	f000 bbf1 	b.w	800af08 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800a726:	4620      	mov	r0, r4
 800a728:	f7ff fee0 	bl	800a4ec <HAL_UART_ErrorCallback>
 800a72c:	e71d      	b.n	800a56a <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a72e:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a730:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a732:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a734:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a73a:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a73c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800a740:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800a742:	f7ff fed1 	bl	800a4e8 <HAL_UART_TxCpltCallback>
    return;
 800a746:	e710      	b.n	800a56a <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a748:	4620      	mov	r0, r4
}
 800a74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a74e:	f000 bbdf 	b.w	800af10 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800a752:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a754:	2b00      	cmp	r3, #0
 800a756:	d097      	beq.n	800a688 <HAL_UART_IRQHandler+0x180>
          huart->RxISR(huart);
 800a758:	4620      	mov	r0, r4
 800a75a:	4798      	blx	r3
 800a75c:	6822      	ldr	r2, [r4, #0]
 800a75e:	e793      	b.n	800a688 <HAL_UART_IRQHandler+0x180>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a760:	f8b4 505e 	ldrh.w	r5, [r4, #94]	; 0x5e
 800a764:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800a768:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a76c:	1b49      	subs	r1, r1, r5
      if ((huart->RxXferCount > 0U)
 800a76e:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a770:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a772:	2800      	cmp	r0, #0
 800a774:	f43f aef9 	beq.w	800a56a <HAL_UART_IRQHandler+0x62>
 800a778:	2900      	cmp	r1, #0
 800a77a:	f43f aef6 	beq.w	800a56a <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a77e:	6816      	ldr	r6, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800a780:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a782:	4d11      	ldr	r5, [pc, #68]	; (800a7c8 <HAL_UART_IRQHandler+0x2c0>)
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a784:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a786:	f426 7690 	bic.w	r6, r6, #288	; 0x120
 800a78a:	6016      	str	r6, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a78c:	6896      	ldr	r6, [r2, #8]
 800a78e:	4035      	ands	r5, r6
 800a790:	6095      	str	r5, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a792:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a796:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a798:	6815      	ldr	r5, [r2, #0]
        huart->RxISR = NULL;
 800a79a:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79c:	f025 0510 	bic.w	r5, r5, #16
 800a7a0:	6015      	str	r5, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7a2:	f7ff feaf 	bl	800a504 <HAL_UARTEx_RxEventCallback>
 800a7a6:	e6e0      	b.n	800a56a <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7a8:	4620      	mov	r0, r4
}
 800a7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7ae:	f000 bbad 	b.w	800af0c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff fe9a 	bl	800a4ec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b8:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800a7bc:	e6d5      	b.n	800a56a <HAL_UART_IRQHandler+0x62>
 800a7be:	bf00      	nop
 800a7c0:	10000001 	.word	0x10000001
 800a7c4:	04000120 	.word	0x04000120
 800a7c8:	effffffe 	.word	0xeffffffe
 800a7cc:	0800a4f1 	.word	0x0800a4f1

0800a7d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a7d2:	07da      	lsls	r2, r3, #31
{
 800a7d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7d6:	d506      	bpl.n	800a7e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7d8:	6801      	ldr	r1, [r0, #0]
 800a7da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a7dc:	684a      	ldr	r2, [r1, #4]
 800a7de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a7e2:	4322      	orrs	r2, r4
 800a7e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7e6:	079c      	lsls	r4, r3, #30
 800a7e8:	d506      	bpl.n	800a7f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7ea:	6801      	ldr	r1, [r0, #0]
 800a7ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a7ee:	684a      	ldr	r2, [r1, #4]
 800a7f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a7f4:	4322      	orrs	r2, r4
 800a7f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7f8:	0759      	lsls	r1, r3, #29
 800a7fa:	d506      	bpl.n	800a80a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7fc:	6801      	ldr	r1, [r0, #0]
 800a7fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a800:	684a      	ldr	r2, [r1, #4]
 800a802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a806:	4322      	orrs	r2, r4
 800a808:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a80a:	071a      	lsls	r2, r3, #28
 800a80c:	d506      	bpl.n	800a81c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a80e:	6801      	ldr	r1, [r0, #0]
 800a810:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a812:	684a      	ldr	r2, [r1, #4]
 800a814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a818:	4322      	orrs	r2, r4
 800a81a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a81c:	06dc      	lsls	r4, r3, #27
 800a81e:	d506      	bpl.n	800a82e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a820:	6801      	ldr	r1, [r0, #0]
 800a822:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a824:	688a      	ldr	r2, [r1, #8]
 800a826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a82a:	4322      	orrs	r2, r4
 800a82c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a82e:	0699      	lsls	r1, r3, #26
 800a830:	d506      	bpl.n	800a840 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a832:	6801      	ldr	r1, [r0, #0]
 800a834:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a836:	688a      	ldr	r2, [r1, #8]
 800a838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a83c:	4322      	orrs	r2, r4
 800a83e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a840:	065a      	lsls	r2, r3, #25
 800a842:	d50a      	bpl.n	800a85a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a844:	6801      	ldr	r1, [r0, #0]
 800a846:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a848:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a84a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a84e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a852:	ea42 0204 	orr.w	r2, r2, r4
 800a856:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a858:	d00b      	beq.n	800a872 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a85a:	061b      	lsls	r3, r3, #24
 800a85c:	d506      	bpl.n	800a86c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a85e:	6802      	ldr	r2, [r0, #0]
 800a860:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a862:	6853      	ldr	r3, [r2, #4]
 800a864:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a868:	430b      	orrs	r3, r1
 800a86a:	6053      	str	r3, [r2, #4]
}
 800a86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a870:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a872:	684a      	ldr	r2, [r1, #4]
 800a874:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a876:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a87a:	4322      	orrs	r2, r4
 800a87c:	604a      	str	r2, [r1, #4]
 800a87e:	e7ec      	b.n	800a85a <UART_AdvFeatureConfig+0x8a>

0800a880 <UART_CheckIdleState>:
{
 800a880:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a882:	2300      	movs	r3, #0
{
 800a884:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a886:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a88a:	f7f9 fc7f 	bl	800418c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a88e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a890:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	0711      	lsls	r1, r2, #28
 800a896:	d40d      	bmi.n	800a8b4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	0752      	lsls	r2, r2, #29
 800a89c:	d431      	bmi.n	800a902 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a89e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a8a0:	2220      	movs	r2, #32
  return HAL_OK;
 800a8a2:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800a8a4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a8a8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a8ac:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b4:	69da      	ldr	r2, [r3, #28]
 800a8b6:	0292      	lsls	r2, r2, #10
 800a8b8:	d4ee      	bmi.n	800a898 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ba:	f7f9 fc67 	bl	800418c <HAL_GetTick>
 800a8be:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8c0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8c2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800a8c6:	d22d      	bcs.n	800a924 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	0750      	lsls	r0, r2, #29
 800a8cc:	d5f2      	bpl.n	800a8b4 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8ce:	69da      	ldr	r2, [r3, #28]
 800a8d0:	0511      	lsls	r1, r2, #20
 800a8d2:	d5ef      	bpl.n	800a8b4 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800a8d8:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 800a8da:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800a8dc:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8de:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a8e0:	6819      	ldr	r1, [r3, #0]
 800a8e2:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800a8e6:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8e8:	6899      	ldr	r1, [r3, #8]
 800a8ea:	f021 0101 	bic.w	r1, r1, #1
 800a8ee:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800a8f0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a8f4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a8f8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8fc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 800a900:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	0258      	lsls	r0, r3, #9
 800a906:	d4ca      	bmi.n	800a89e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a908:	f7f9 fc40 	bl	800418c <HAL_GetTick>
 800a90c:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a90e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a910:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800a914:	d206      	bcs.n	800a924 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	0751      	lsls	r1, r2, #29
 800a91a:	d5f2      	bpl.n	800a902 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a91c:	69da      	ldr	r2, [r3, #28]
 800a91e:	0512      	lsls	r2, r2, #20
 800a920:	d5ef      	bpl.n	800a902 <UART_CheckIdleState+0x82>
 800a922:	e7d7      	b.n	800a8d4 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a924:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800a926:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800a928:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 800a92a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a92c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a930:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a932:	689a      	ldr	r2, [r3, #8]
 800a934:	f022 0201 	bic.w	r2, r2, #1
 800a938:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800a93a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a93e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a942:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 800a946:	bd38      	pop	{r3, r4, r5, pc}

0800a948 <HAL_UART_Init>:
  if (huart == NULL)
 800a948:	2800      	cmp	r0, #0
 800a94a:	f000 8198 	beq.w	800ac7e <HAL_UART_Init+0x336>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a94e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800a952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a956:	4604      	mov	r4, r0
 800a958:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d05f      	beq.n	800aa1e <HAL_UART_Init+0xd6>
  __HAL_UART_DISABLE(huart);
 800a95e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a960:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a962:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800a964:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a968:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800a96a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a96c:	432a      	orrs	r2, r5
 800a96e:	6965      	ldr	r5, [r4, #20]
  __HAL_UART_DISABLE(huart);
 800a970:	f020 0001 	bic.w	r0, r0, #1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a974:	49cb      	ldr	r1, [pc, #812]	; (800aca4 <HAL_UART_Init+0x35c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a976:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a978:	68e6      	ldr	r6, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800a97a:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a97c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a97e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a980:	4302      	orrs	r2, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a982:	69a7      	ldr	r7, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a984:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a986:	4dc8      	ldr	r5, [pc, #800]	; (800aca8 <HAL_UART_Init+0x360>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a988:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a98a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a98c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a994:	ea42 0206 	orr.w	r2, r2, r6
 800a998:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a99a:	d045      	beq.n	800aa28 <HAL_UART_Init+0xe0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a99c:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800a99e:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9a0:	49c2      	ldr	r1, [pc, #776]	; (800acac <HAL_UART_Init+0x364>)
    tmpreg |= huart->Init.OneBitSampling;
 800a9a2:	433a      	orrs	r2, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9a4:	4ec2      	ldr	r6, [pc, #776]	; (800acb0 <HAL_UART_Init+0x368>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9a6:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a9a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9aa:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9ac:	ea42 0201 	orr.w	r2, r2, r1
 800a9b0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b4:	f022 020f 	bic.w	r2, r2, #15
 800a9b8:	ea42 0205 	orr.w	r2, r2, r5
 800a9bc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9be:	d025      	beq.n	800aa0c <HAL_UART_Init+0xc4>
 800a9c0:	4abc      	ldr	r2, [pc, #752]	; (800acb4 <HAL_UART_Init+0x36c>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	f000 808c 	beq.w	800aae0 <HAL_UART_Init+0x198>
 800a9c8:	4abb      	ldr	r2, [pc, #748]	; (800acb8 <HAL_UART_Init+0x370>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	f000 8159 	beq.w	800ac82 <HAL_UART_Init+0x33a>
 800a9d0:	4aba      	ldr	r2, [pc, #744]	; (800acbc <HAL_UART_Init+0x374>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	f000 813f 	beq.w	800ac56 <HAL_UART_Init+0x30e>
 800a9d8:	4ab9      	ldr	r2, [pc, #740]	; (800acc0 <HAL_UART_Init+0x378>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	f000 81fa 	beq.w	800add4 <HAL_UART_Init+0x48c>
 800a9e0:	4ab8      	ldr	r2, [pc, #736]	; (800acc4 <HAL_UART_Init+0x37c>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	f000 8265 	beq.w	800aeb2 <HAL_UART_Init+0x56a>
 800a9e8:	4ab7      	ldr	r2, [pc, #732]	; (800acc8 <HAL_UART_Init+0x380>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f000 826b 	beq.w	800aec6 <HAL_UART_Init+0x57e>
 800a9f0:	4ab6      	ldr	r2, [pc, #728]	; (800accc <HAL_UART_Init+0x384>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	f000 8251 	beq.w	800ae9a <HAL_UART_Init+0x552>
  huart->NbRxDataToProcess = 1;
 800a9f8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800a9fc:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a9fe:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800aa00:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800aa02:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 800aa06:	b006      	add	sp, #24
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa0c:	4bb0      	ldr	r3, [pc, #704]	; (800acd0 <HAL_UART_Init+0x388>)
 800aa0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa14:	2b28      	cmp	r3, #40	; 0x28
 800aa16:	d8ef      	bhi.n	800a9f8 <HAL_UART_Init+0xb0>
 800aa18:	4aae      	ldr	r2, [pc, #696]	; (800acd4 <HAL_UART_Init+0x38c>)
 800aa1a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa1c:	e068      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
    huart->Lock = HAL_UNLOCKED;
 800aa1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800aa22:	f7f9 f99b 	bl	8003d5c <HAL_UART_MspInit>
 800aa26:	e79a      	b.n	800a95e <HAL_UART_Init+0x16>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa28:	6899      	ldr	r1, [r3, #8]
 800aa2a:	4aa0      	ldr	r2, [pc, #640]	; (800acac <HAL_UART_Init+0x364>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa2c:	48a8      	ldr	r0, [pc, #672]	; (800acd0 <HAL_UART_Init+0x388>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa2e:	400a      	ands	r2, r1
 800aa30:	433a      	orrs	r2, r7
 800aa32:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa38:	f022 020f 	bic.w	r2, r2, #15
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa40:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800aa42:	f003 0307 	and.w	r3, r3, #7
 800aa46:	2b05      	cmp	r3, #5
 800aa48:	d8d6      	bhi.n	800a9f8 <HAL_UART_Init+0xb0>
 800aa4a:	4aa3      	ldr	r2, [pc, #652]	; (800acd8 <HAL_UART_Init+0x390>)
 800aa4c:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800aa4e:	2b20      	cmp	r3, #32
 800aa50:	f200 8121 	bhi.w	800ac96 <HAL_UART_Init+0x34e>
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d9cf      	bls.n	800a9f8 <HAL_UART_Init+0xb0>
 800aa58:	3b02      	subs	r3, #2
 800aa5a:	2b1e      	cmp	r3, #30
 800aa5c:	d8cc      	bhi.n	800a9f8 <HAL_UART_Init+0xb0>
 800aa5e:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <HAL_UART_Init+0x11c>)
 800aa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa64:	0800ae5b 	.word	0x0800ae5b
 800aa68:	0800a9f9 	.word	0x0800a9f9
 800aa6c:	0800ae51 	.word	0x0800ae51
 800aa70:	0800a9f9 	.word	0x0800a9f9
 800aa74:	0800a9f9 	.word	0x0800a9f9
 800aa78:	0800a9f9 	.word	0x0800a9f9
 800aa7c:	0800ae41 	.word	0x0800ae41
 800aa80:	0800a9f9 	.word	0x0800a9f9
 800aa84:	0800a9f9 	.word	0x0800a9f9
 800aa88:	0800a9f9 	.word	0x0800a9f9
 800aa8c:	0800a9f9 	.word	0x0800a9f9
 800aa90:	0800a9f9 	.word	0x0800a9f9
 800aa94:	0800a9f9 	.word	0x0800a9f9
 800aa98:	0800a9f9 	.word	0x0800a9f9
 800aa9c:	0800ae2d 	.word	0x0800ae2d
 800aaa0:	0800a9f9 	.word	0x0800a9f9
 800aaa4:	0800a9f9 	.word	0x0800a9f9
 800aaa8:	0800a9f9 	.word	0x0800a9f9
 800aaac:	0800a9f9 	.word	0x0800a9f9
 800aab0:	0800a9f9 	.word	0x0800a9f9
 800aab4:	0800a9f9 	.word	0x0800a9f9
 800aab8:	0800a9f9 	.word	0x0800a9f9
 800aabc:	0800a9f9 	.word	0x0800a9f9
 800aac0:	0800a9f9 	.word	0x0800a9f9
 800aac4:	0800a9f9 	.word	0x0800a9f9
 800aac8:	0800a9f9 	.word	0x0800a9f9
 800aacc:	0800a9f9 	.word	0x0800a9f9
 800aad0:	0800a9f9 	.word	0x0800a9f9
 800aad4:	0800a9f9 	.word	0x0800a9f9
 800aad8:	0800a9f9 	.word	0x0800a9f9
 800aadc:	0800abf3 	.word	0x0800abf3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aae0:	4b7b      	ldr	r3, [pc, #492]	; (800acd0 <HAL_UART_Init+0x388>)
 800aae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	2b05      	cmp	r3, #5
 800aaea:	d885      	bhi.n	800a9f8 <HAL_UART_Init+0xb0>
 800aaec:	4a7b      	ldr	r2, [pc, #492]	; (800acdc <HAL_UART_Init+0x394>)
 800aaee:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaf0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800aaf4:	f000 80fe 	beq.w	800acf4 <HAL_UART_Init+0x3ac>
    switch (clocksource)
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	f200 80ba 	bhi.w	800ac72 <HAL_UART_Init+0x32a>
 800aafe:	2b20      	cmp	r3, #32
 800ab00:	f63f af7a 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800ab04:	a201      	add	r2, pc, #4	; (adr r2, 800ab0c <HAL_UART_Init+0x1c4>)
 800ab06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0a:	bf00      	nop
 800ab0c:	0800ae27 	.word	0x0800ae27
 800ab10:	0800ae21 	.word	0x0800ae21
 800ab14:	0800a9f9 	.word	0x0800a9f9
 800ab18:	0800a9f9 	.word	0x0800a9f9
 800ab1c:	0800ae17 	.word	0x0800ae17
 800ab20:	0800a9f9 	.word	0x0800a9f9
 800ab24:	0800a9f9 	.word	0x0800a9f9
 800ab28:	0800a9f9 	.word	0x0800a9f9
 800ab2c:	0800adfd 	.word	0x0800adfd
 800ab30:	0800a9f9 	.word	0x0800a9f9
 800ab34:	0800a9f9 	.word	0x0800a9f9
 800ab38:	0800a9f9 	.word	0x0800a9f9
 800ab3c:	0800a9f9 	.word	0x0800a9f9
 800ab40:	0800a9f9 	.word	0x0800a9f9
 800ab44:	0800a9f9 	.word	0x0800a9f9
 800ab48:	0800a9f9 	.word	0x0800a9f9
 800ab4c:	0800ade9 	.word	0x0800ade9
 800ab50:	0800a9f9 	.word	0x0800a9f9
 800ab54:	0800a9f9 	.word	0x0800a9f9
 800ab58:	0800a9f9 	.word	0x0800a9f9
 800ab5c:	0800a9f9 	.word	0x0800a9f9
 800ab60:	0800a9f9 	.word	0x0800a9f9
 800ab64:	0800a9f9 	.word	0x0800a9f9
 800ab68:	0800a9f9 	.word	0x0800a9f9
 800ab6c:	0800a9f9 	.word	0x0800a9f9
 800ab70:	0800a9f9 	.word	0x0800a9f9
 800ab74:	0800a9f9 	.word	0x0800a9f9
 800ab78:	0800a9f9 	.word	0x0800a9f9
 800ab7c:	0800a9f9 	.word	0x0800a9f9
 800ab80:	0800a9f9 	.word	0x0800a9f9
 800ab84:	0800a9f9 	.word	0x0800a9f9
 800ab88:	0800a9f9 	.word	0x0800a9f9
 800ab8c:	0800ab91 	.word	0x0800ab91
        pclk = (uint32_t) CSI_VALUE;
 800ab90:	4853      	ldr	r0, [pc, #332]	; (800ace0 <HAL_UART_Init+0x398>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab92:	4b54      	ldr	r3, [pc, #336]	; (800ace4 <HAL_UART_Init+0x39c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab94:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab98:	6862      	ldr	r2, [r4, #4]
 800ab9a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800ab9e:	fbb0 f3f3 	udiv	r3, r0, r3
 800aba2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800aba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800abaa:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abac:	f1a3 0210 	sub.w	r2, r3, #16
 800abb0:	428a      	cmp	r2, r1
 800abb2:	f63f af21 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
        huart->Instance->BRR = usartdiv;
 800abb6:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800abb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 800abbc:	2200      	movs	r2, #0
        huart->Instance->BRR = usartdiv;
 800abbe:	60c3      	str	r3, [r0, #12]
  huart->NbRxDataToProcess = 1;
 800abc0:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800abc2:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d14e      	bne.n	800ac6a <HAL_UART_Init+0x322>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abcc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800abce:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abd8:	689a      	ldr	r2, [r3, #8]
 800abda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abde:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	f042 0201 	orr.w	r2, r2, #1
 800abe6:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800abe8:	f7ff fe4a 	bl	800a880 <UART_CheckIdleState>
}
 800abec:	b006      	add	sp, #24
 800abee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = (uint32_t) CSI_VALUE;
 800abf2:	483b      	ldr	r0, [pc, #236]	; (800ace0 <HAL_UART_Init+0x398>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abf4:	4b3b      	ldr	r3, [pc, #236]	; (800ace4 <HAL_UART_Init+0x39c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abf6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abf8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abfc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac00:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac04:	428b      	cmp	r3, r1
 800ac06:	f4ff aef7 	bcc.w	800a9f8 <HAL_UART_Init+0xb0>
 800ac0a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800ac0e:	f63f aef3 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	4641      	mov	r1, r8
 800ac1a:	f7f5 fbb9 	bl	8000390 <__aeabi_uldivmod>
 800ac1e:	462a      	mov	r2, r5
 800ac20:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800ac24:	4643      	mov	r3, r8
 800ac26:	020f      	lsls	r7, r1, #8
 800ac28:	0206      	lsls	r6, r0, #8
 800ac2a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800ac2e:	eb16 000c 	adds.w	r0, r6, ip
 800ac32:	f147 0100 	adc.w	r1, r7, #0
 800ac36:	f7f5 fbab 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac3a:	4b2b      	ldr	r3, [pc, #172]	; (800ace8 <HAL_UART_Init+0x3a0>)
 800ac3c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800ac40:	429a      	cmp	r2, r3
 800ac42:	f63f aed9 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
          huart->Instance->BRR = usartdiv;
 800ac46:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800ac48:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800ac4c:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800ac4e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ac50:	e9c4 881c 	strd	r8, r8, [r4, #112]	; 0x70
 800ac54:	e7b7      	b.n	800abc6 <HAL_UART_Init+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac56:	4b1e      	ldr	r3, [pc, #120]	; (800acd0 <HAL_UART_Init+0x388>)
 800ac58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5a:	f003 0307 	and.w	r3, r3, #7
 800ac5e:	2b05      	cmp	r3, #5
 800ac60:	f63f aeca 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800ac64:	4a21      	ldr	r2, [pc, #132]	; (800acec <HAL_UART_Init+0x3a4>)
 800ac66:	5cd3      	ldrb	r3, [r2, r3]
 800ac68:	e742      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
    UART_AdvFeatureConfig(huart);
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7ff fdb0 	bl	800a7d0 <UART_AdvFeatureConfig>
 800ac70:	e7ac      	b.n	800abcc <HAL_UART_Init+0x284>
    switch (clocksource)
 800ac72:	2b40      	cmp	r3, #64	; 0x40
 800ac74:	f47f aec0 	bne.w	800a9f8 <HAL_UART_Init+0xb0>
 800ac78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ac7c:	e789      	b.n	800ab92 <HAL_UART_Init+0x24a>
    return HAL_ERROR;
 800ac7e:	2001      	movs	r0, #1
}
 800ac80:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac82:	4b13      	ldr	r3, [pc, #76]	; (800acd0 <HAL_UART_Init+0x388>)
 800ac84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac86:	f003 0307 	and.w	r3, r3, #7
 800ac8a:	2b05      	cmp	r3, #5
 800ac8c:	f63f aeb4 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800ac90:	4a17      	ldr	r2, [pc, #92]	; (800acf0 <HAL_UART_Init+0x3a8>)
 800ac92:	5cd3      	ldrb	r3, [r2, r3]
 800ac94:	e72c      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
    switch (clocksource)
 800ac96:	2b40      	cmp	r3, #64	; 0x40
 800ac98:	f47f aeae 	bne.w	800a9f8 <HAL_UART_Init+0xb0>
 800ac9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aca0:	e7a8      	b.n	800abf4 <HAL_UART_Init+0x2ac>
 800aca2:	bf00      	nop
 800aca4:	cfff69f3 	.word	0xcfff69f3
 800aca8:	58000c00 	.word	0x58000c00
 800acac:	11fff4ff 	.word	0x11fff4ff
 800acb0:	40011000 	.word	0x40011000
 800acb4:	40004400 	.word	0x40004400
 800acb8:	40004800 	.word	0x40004800
 800acbc:	40004c00 	.word	0x40004c00
 800acc0:	40005000 	.word	0x40005000
 800acc4:	40011400 	.word	0x40011400
 800acc8:	40007800 	.word	0x40007800
 800accc:	40007c00 	.word	0x40007c00
 800acd0:	58024400 	.word	0x58024400
 800acd4:	08018240 	.word	0x08018240
 800acd8:	08018274 	.word	0x08018274
 800acdc:	0801826c 	.word	0x0801826c
 800ace0:	003d0900 	.word	0x003d0900
 800ace4:	0801827c 	.word	0x0801827c
 800ace8:	000ffcff 	.word	0x000ffcff
 800acec:	0801826c 	.word	0x0801826c
 800acf0:	0801826c 	.word	0x0801826c
    switch (clocksource)
 800acf4:	2b20      	cmp	r3, #32
 800acf6:	d86a      	bhi.n	800adce <HAL_UART_Init+0x486>
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	f63f ae7d 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800acfe:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <HAL_UART_Init+0x3bc>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ae6d 	.word	0x0800ae6d
 800ad08:	0800ae61 	.word	0x0800ae61
 800ad0c:	0800a9f9 	.word	0x0800a9f9
 800ad10:	0800a9f9 	.word	0x0800a9f9
 800ad14:	0800ae91 	.word	0x0800ae91
 800ad18:	0800a9f9 	.word	0x0800a9f9
 800ad1c:	0800a9f9 	.word	0x0800a9f9
 800ad20:	0800a9f9 	.word	0x0800a9f9
 800ad24:	0800ae87 	.word	0x0800ae87
 800ad28:	0800a9f9 	.word	0x0800a9f9
 800ad2c:	0800a9f9 	.word	0x0800a9f9
 800ad30:	0800a9f9 	.word	0x0800a9f9
 800ad34:	0800a9f9 	.word	0x0800a9f9
 800ad38:	0800a9f9 	.word	0x0800a9f9
 800ad3c:	0800a9f9 	.word	0x0800a9f9
 800ad40:	0800a9f9 	.word	0x0800a9f9
 800ad44:	0800ae73 	.word	0x0800ae73
 800ad48:	0800a9f9 	.word	0x0800a9f9
 800ad4c:	0800a9f9 	.word	0x0800a9f9
 800ad50:	0800a9f9 	.word	0x0800a9f9
 800ad54:	0800a9f9 	.word	0x0800a9f9
 800ad58:	0800a9f9 	.word	0x0800a9f9
 800ad5c:	0800a9f9 	.word	0x0800a9f9
 800ad60:	0800a9f9 	.word	0x0800a9f9
 800ad64:	0800a9f9 	.word	0x0800a9f9
 800ad68:	0800a9f9 	.word	0x0800a9f9
 800ad6c:	0800a9f9 	.word	0x0800a9f9
 800ad70:	0800a9f9 	.word	0x0800a9f9
 800ad74:	0800a9f9 	.word	0x0800a9f9
 800ad78:	0800a9f9 	.word	0x0800a9f9
 800ad7c:	0800a9f9 	.word	0x0800a9f9
 800ad80:	0800a9f9 	.word	0x0800a9f9
 800ad84:	0800ad89 	.word	0x0800ad89
        pclk = (uint32_t) CSI_VALUE;
 800ad88:	4857      	ldr	r0, [pc, #348]	; (800aee8 <HAL_UART_Init+0x5a0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad8a:	4b58      	ldr	r3, [pc, #352]	; (800aeec <HAL_UART_Init+0x5a4>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad8c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad90:	6862      	ldr	r2, [r4, #4]
 800ad92:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 800ad96:	0853      	lsrs	r3, r2, #1
 800ad98:	fbb0 f0f5 	udiv	r0, r0, r5
 800ad9c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ada0:	fbb0 f0f2 	udiv	r0, r0, r2
 800ada4:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ada6:	f1a2 0310 	sub.w	r3, r2, #16
 800adaa:	428b      	cmp	r3, r1
 800adac:	f63f ae24 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adb0:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adb4:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800adb8:	6825      	ldr	r5, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800adba:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adbe:	b29b      	uxth	r3, r3
  huart->RxISR = NULL;
 800adc0:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60eb      	str	r3, [r5, #12]
  huart->NbRxDataToProcess = 1;
 800adc6:	66a0      	str	r0, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800adc8:	e9c4 111c 	strd	r1, r1, [r4, #112]	; 0x70
  return ret;
 800adcc:	e6fb      	b.n	800abc6 <HAL_UART_Init+0x27e>
    switch (clocksource)
 800adce:	2b40      	cmp	r3, #64	; 0x40
 800add0:	d0db      	beq.n	800ad8a <HAL_UART_Init+0x442>
 800add2:	e611      	b.n	800a9f8 <HAL_UART_Init+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800add4:	4b46      	ldr	r3, [pc, #280]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800add6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	2b05      	cmp	r3, #5
 800adde:	f63f ae0b 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800ade2:	4a44      	ldr	r2, [pc, #272]	; (800aef4 <HAL_UART_Init+0x5ac>)
 800ade4:	5cd3      	ldrb	r3, [r2, r3]
 800ade6:	e683      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ade8:	4b41      	ldr	r3, [pc, #260]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	0692      	lsls	r2, r2, #26
 800adee:	d574      	bpl.n	800aeda <HAL_UART_Init+0x592>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4841      	ldr	r0, [pc, #260]	; (800aef8 <HAL_UART_Init+0x5b0>)
 800adf4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800adf8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800adfa:	e6ca      	b.n	800ab92 <HAL_UART_Init+0x24a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adfc:	a803      	add	r0, sp, #12
 800adfe:	f7fe fd3d 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae02:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d152      	bne.n	800aeae <HAL_UART_Init+0x566>
  huart->NbRxDataToProcess = 1;
 800ae08:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800ae0c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800ae0e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800ae10:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  return ret;
 800ae14:	e6d7      	b.n	800abc6 <HAL_UART_Init+0x27e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae16:	4668      	mov	r0, sp
 800ae18:	f7fe fc84 	bl	8009724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae1c:	9801      	ldr	r0, [sp, #4]
        break;
 800ae1e:	e7f1      	b.n	800ae04 <HAL_UART_Init+0x4bc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae20:	f7fd fdd8 	bl	80089d4 <HAL_RCC_GetPCLK2Freq>
        break;
 800ae24:	e7ee      	b.n	800ae04 <HAL_UART_Init+0x4bc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae26:	f7fd fd8d 	bl	8008944 <HAL_RCC_GetPCLK1Freq>
        break;
 800ae2a:	e7eb      	b.n	800ae04 <HAL_UART_Init+0x4bc>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae2c:	4b30      	ldr	r3, [pc, #192]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	0690      	lsls	r0, r2, #26
 800ae32:	d554      	bpl.n	800aede <HAL_UART_Init+0x596>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4830      	ldr	r0, [pc, #192]	; (800aef8 <HAL_UART_Init+0x5b0>)
 800ae38:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae3c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800ae3e:	e6d9      	b.n	800abf4 <HAL_UART_Init+0x2ac>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae40:	a803      	add	r0, sp, #12
 800ae42:	f7fe fd1b 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae46:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d0dd      	beq.n	800ae08 <HAL_UART_Init+0x4c0>
 800ae4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae4e:	e6d1      	b.n	800abf4 <HAL_UART_Init+0x2ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae50:	4668      	mov	r0, sp
 800ae52:	f7fe fc67 	bl	8009724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae56:	9801      	ldr	r0, [sp, #4]
        break;
 800ae58:	e7f6      	b.n	800ae48 <HAL_UART_Init+0x500>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae5a:	f7fe fc51 	bl	8009700 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800ae5e:	e7f3      	b.n	800ae48 <HAL_UART_Init+0x500>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae60:	f7fd fdb8 	bl	80089d4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d0cf      	beq.n	800ae08 <HAL_UART_Init+0x4c0>
 800ae68:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ae6a:	e78e      	b.n	800ad8a <HAL_UART_Init+0x442>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae6c:	f7fd fd6a 	bl	8008944 <HAL_RCC_GetPCLK1Freq>
        break;
 800ae70:	e7f8      	b.n	800ae64 <HAL_UART_Init+0x51c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae72:	4b1f      	ldr	r3, [pc, #124]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	0691      	lsls	r1, r2, #26
 800ae78:	d533      	bpl.n	800aee2 <HAL_UART_Init+0x59a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	481e      	ldr	r0, [pc, #120]	; (800aef8 <HAL_UART_Init+0x5b0>)
 800ae7e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae82:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800ae84:	e781      	b.n	800ad8a <HAL_UART_Init+0x442>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae86:	a803      	add	r0, sp, #12
 800ae88:	f7fe fcf8 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae8c:	9804      	ldr	r0, [sp, #16]
        break;
 800ae8e:	e7e9      	b.n	800ae64 <HAL_UART_Init+0x51c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae90:	4668      	mov	r0, sp
 800ae92:	f7fe fc47 	bl	8009724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae96:	9801      	ldr	r0, [sp, #4]
        break;
 800ae98:	e7e4      	b.n	800ae64 <HAL_UART_Init+0x51c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae9a:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9e:	f003 0307 	and.w	r3, r3, #7
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	f63f ada8 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800aea8:	4a14      	ldr	r2, [pc, #80]	; (800aefc <HAL_UART_Init+0x5b4>)
 800aeaa:	5cd3      	ldrb	r3, [r2, r3]
 800aeac:	e620      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
 800aeae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aeb0:	e66f      	b.n	800ab92 <HAL_UART_Init+0x24a>
 800aeb2:	4b0f      	ldr	r3, [pc, #60]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeba:	2b28      	cmp	r3, #40	; 0x28
 800aebc:	f63f ad9c 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800aec0:	4a0f      	ldr	r2, [pc, #60]	; (800af00 <HAL_UART_Init+0x5b8>)
 800aec2:	5cd3      	ldrb	r3, [r2, r3]
 800aec4:	e614      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
 800aec6:	4b0a      	ldr	r3, [pc, #40]	; (800aef0 <HAL_UART_Init+0x5a8>)
 800aec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeca:	f003 0307 	and.w	r3, r3, #7
 800aece:	2b05      	cmp	r3, #5
 800aed0:	f63f ad92 	bhi.w	800a9f8 <HAL_UART_Init+0xb0>
 800aed4:	4a0b      	ldr	r2, [pc, #44]	; (800af04 <HAL_UART_Init+0x5bc>)
 800aed6:	5cd3      	ldrb	r3, [r2, r3]
 800aed8:	e60a      	b.n	800aaf0 <HAL_UART_Init+0x1a8>
          pclk = (uint32_t) HSI_VALUE;
 800aeda:	4807      	ldr	r0, [pc, #28]	; (800aef8 <HAL_UART_Init+0x5b0>)
 800aedc:	e659      	b.n	800ab92 <HAL_UART_Init+0x24a>
          pclk = (uint32_t) HSI_VALUE;
 800aede:	4806      	ldr	r0, [pc, #24]	; (800aef8 <HAL_UART_Init+0x5b0>)
 800aee0:	e688      	b.n	800abf4 <HAL_UART_Init+0x2ac>
          pclk = (uint32_t) HSI_VALUE;
 800aee2:	4805      	ldr	r0, [pc, #20]	; (800aef8 <HAL_UART_Init+0x5b0>)
 800aee4:	e751      	b.n	800ad8a <HAL_UART_Init+0x442>
 800aee6:	bf00      	nop
 800aee8:	003d0900 	.word	0x003d0900
 800aeec:	0801827c 	.word	0x0801827c
 800aef0:	58024400 	.word	0x58024400
 800aef4:	0801826c 	.word	0x0801826c
 800aef8:	03d09000 	.word	0x03d09000
 800aefc:	0801826c 	.word	0x0801826c
 800af00:	08018240 	.word	0x08018240
 800af04:	0801826c 	.word	0x0801826c

0800af08 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop

0800af0c <HAL_UARTEx_RxFifoFullCallback>:
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop

0800af10 <HAL_UARTEx_TxFifoEmptyCallback>:
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop

0800af14 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af14:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800af18:	2a01      	cmp	r2, #1
 800af1a:	d017      	beq.n	800af4c <HAL_UARTEx_DisableFifoMode+0x38>
 800af1c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800af1e:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af20:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af22:	681a      	ldr	r2, [r3, #0]
{
 800af24:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 800af26:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800af2a:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af2c:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800af2e:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 800af30:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af32:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800af36:	f025 0501 	bic.w	r5, r5, #1
 800af3a:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af3c:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af3e:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800af40:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800af44:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
}
 800af48:	bc70      	pop	{r4, r5, r6}
 800af4a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800af4c:	2002      	movs	r0, #2
}
 800af4e:	4770      	bx	lr

0800af50 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af50:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800af54:	2a01      	cmp	r2, #1
 800af56:	d033      	beq.n	800afc0 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 800af58:	4603      	mov	r3, r0
 800af5a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af5c:	681a      	ldr	r2, [r3, #0]
{
 800af5e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800af60:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af64:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af66:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af68:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800af6a:	f020 0001 	bic.w	r0, r0, #1
 800af6e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af70:	6890      	ldr	r0, [r2, #8]
 800af72:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800af76:	4301      	orrs	r1, r0
 800af78:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af7a:	b1f5      	cbz	r5, 800afba <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af7c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af7e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af80:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af84:	480f      	ldr	r0, [pc, #60]	; (800afc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af86:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800af88:	4f0f      	ldr	r7, [pc, #60]	; (800afc8 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af8a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af8c:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af8e:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800af90:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af92:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800af94:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af96:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af9a:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800af9e:	2520      	movs	r5, #32
 800afa0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800afa4:	2100      	movs	r1, #0
 800afa6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afaa:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800afac:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800afae:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800afb2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800afb6:	bcf0      	pop	{r4, r5, r6, r7}
 800afb8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800afba:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800afbc:	4608      	mov	r0, r1
 800afbe:	e7ee      	b.n	800af9e <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800afc0:	2002      	movs	r0, #2
}
 800afc2:	4770      	bx	lr
 800afc4:	0801829c 	.word	0x0801829c
 800afc8:	08018294 	.word	0x08018294

0800afcc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800afcc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800afd0:	2a01      	cmp	r2, #1
 800afd2:	d033      	beq.n	800b03c <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 800afd4:	4603      	mov	r3, r0
 800afd6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afd8:	681a      	ldr	r2, [r3, #0]
{
 800afda:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800afdc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afe0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800afe2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afe4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800afe6:	f020 0001 	bic.w	r0, r0, #1
 800afea:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afec:	6890      	ldr	r0, [r2, #8]
 800afee:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800aff2:	4301      	orrs	r1, r0
 800aff4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aff6:	b1f5      	cbz	r5, 800b036 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aff8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800affa:	6895      	ldr	r5, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800affc:	f3c6 6642 	ubfx	r6, r6, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b000:	480f      	ldr	r0, [pc, #60]	; (800b040 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b002:	0f6d      	lsrs	r5, r5, #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800b004:	4f0f      	ldr	r7, [pc, #60]	; (800b044 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b006:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b008:	5d40      	ldrb	r0, [r0, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b00a:	0109      	lsls	r1, r1, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800b00c:	5dbe      	ldrb	r6, [r7, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b00e:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800b010:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b012:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b016:	fbb0 f0f5 	udiv	r0, r0, r5
  huart->gState = HAL_UART_STATE_READY;
 800b01a:	2520      	movs	r5, #32
 800b01c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b020:	2100      	movs	r1, #0
 800b022:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b026:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800b028:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b02a:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b02e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
}
 800b032:	bcf0      	pop	{r4, r5, r6, r7}
 800b034:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800b036:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b038:	4608      	mov	r0, r1
 800b03a:	e7ee      	b.n	800b01a <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800b03c:	2002      	movs	r0, #2
}
 800b03e:	4770      	bx	lr
 800b040:	0801829c 	.word	0x0801829c
 800b044:	08018294 	.word	0x08018294

0800b048 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b048:	b084      	sub	sp, #16
 800b04a:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b04c:	9e09      	ldr	r6, [sp, #36]	; 0x24
{
 800b04e:	ad04      	add	r5, sp, #16
 800b050:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b052:	2e01      	cmp	r6, #1
{
 800b054:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b058:	d137      	bne.n	800b0ca <USB_CoreInit+0x82>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b05a:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b05c:	4b31      	ldr	r3, [pc, #196]	; (800b124 <USB_CoreInit+0xdc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b05e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800b062:	9910      	ldr	r1, [sp, #64]	; 0x40
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b064:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800b066:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b068:	68c2      	ldr	r2, [r0, #12]
 800b06a:	ea03 0302 	and.w	r3, r3, r2
 800b06e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b070:	68c3      	ldr	r3, [r0, #12]
 800b072:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b076:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800b078:	d04a      	beq.n	800b110 <USB_CoreInit+0xc8>
{
 800b07a:	4b2b      	ldr	r3, [pc, #172]	; (800b128 <USB_CoreInit+0xe0>)
 800b07c:	e001      	b.n	800b082 <USB_CoreInit+0x3a>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b07e:	3b01      	subs	r3, #1
 800b080:	d04b      	beq.n	800b11a <USB_CoreInit+0xd2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b082:	6922      	ldr	r2, [r4, #16]
 800b084:	2a00      	cmp	r2, #0
 800b086:	dafa      	bge.n	800b07e <USB_CoreInit+0x36>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b088:	6922      	ldr	r2, [r4, #16]
 800b08a:	4b27      	ldr	r3, [pc, #156]	; (800b128 <USB_CoreInit+0xe0>)
 800b08c:	f042 0201 	orr.w	r2, r2, #1
 800b090:	6122      	str	r2, [r4, #16]

  do
  {
    if (++count > 200000U)
 800b092:	e001      	b.n	800b098 <USB_CoreInit+0x50>
 800b094:	3b01      	subs	r3, #1
 800b096:	d040      	beq.n	800b11a <USB_CoreInit+0xd2>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b098:	6920      	ldr	r0, [r4, #16]
 800b09a:	f010 0001 	ands.w	r0, r0, #1
 800b09e:	d1f9      	bne.n	800b094 <USB_CoreInit+0x4c>
  if (cfg.dma_enable == 1U)
 800b0a0:	9b07      	ldr	r3, [sp, #28]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d10e      	bne.n	800b0c4 <USB_CoreInit+0x7c>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b0a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b0a8:	4b20      	ldr	r3, [pc, #128]	; (800b12c <USB_CoreInit+0xe4>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	65e2      	str	r2, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b0ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b0b4:	68a3      	ldr	r3, [r4, #8]
 800b0b6:	f043 0306 	orr.w	r3, r3, #6
 800b0ba:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b0bc:	68a3      	ldr	r3, [r4, #8]
 800b0be:	f043 0320 	orr.w	r3, r3, #32
 800b0c2:	60a3      	str	r3, [r4, #8]
}
 800b0c4:	bc70      	pop	{r4, r5, r6}
 800b0c6:	b004      	add	sp, #16
 800b0c8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0ca:	68c2      	ldr	r2, [r0, #12]
 800b0cc:	4b16      	ldr	r3, [pc, #88]	; (800b128 <USB_CoreInit+0xe0>)
 800b0ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0d2:	60c2      	str	r2, [r0, #12]
    if (++count > 200000U)
 800b0d4:	e001      	b.n	800b0da <USB_CoreInit+0x92>
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	d021      	beq.n	800b11e <USB_CoreInit+0xd6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0da:	6922      	ldr	r2, [r4, #16]
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	dafa      	bge.n	800b0d6 <USB_CoreInit+0x8e>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0e0:	6922      	ldr	r2, [r4, #16]
 800b0e2:	4b11      	ldr	r3, [pc, #68]	; (800b128 <USB_CoreInit+0xe0>)
 800b0e4:	f042 0201 	orr.w	r2, r2, #1
 800b0e8:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800b0ea:	e001      	b.n	800b0f0 <USB_CoreInit+0xa8>
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	d016      	beq.n	800b11e <USB_CoreInit+0xd6>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0f0:	6920      	ldr	r0, [r4, #16]
 800b0f2:	f010 0001 	ands.w	r0, r0, #1
 800b0f6:	d1f9      	bne.n	800b0ec <USB_CoreInit+0xa4>
    if (cfg.battery_charging_enable == 0U)
 800b0f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0fa:	b923      	cbnz	r3, 800b106 <USB_CoreInit+0xbe>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b102:	63a3      	str	r3, [r4, #56]	; 0x38
 800b104:	e7cc      	b.n	800b0a0 <USB_CoreInit+0x58>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b10c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b10e:	e7c7      	b.n	800b0a0 <USB_CoreInit+0x58>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b110:	68c3      	ldr	r3, [r0, #12]
 800b112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b116:	60c3      	str	r3, [r0, #12]
 800b118:	e7af      	b.n	800b07a <USB_CoreInit+0x32>
      return HAL_TIMEOUT;
 800b11a:	2003      	movs	r0, #3
 800b11c:	e7c0      	b.n	800b0a0 <USB_CoreInit+0x58>
 800b11e:	2003      	movs	r0, #3
 800b120:	e7ea      	b.n	800b0f8 <USB_CoreInit+0xb0>
 800b122:	bf00      	nop
 800b124:	ffbdffbf 	.word	0xffbdffbf
 800b128:	00030d40 	.word	0x00030d40
 800b12c:	03ee0000 	.word	0x03ee0000

0800b130 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800b130:	2a02      	cmp	r2, #2
{
 800b132:	4603      	mov	r3, r0
 800b134:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800b136:	d00c      	beq.n	800b152 <USB_SetTurnaroundTime+0x22>
 800b138:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b13c:	68d9      	ldr	r1, [r3, #12]
}
 800b13e:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b140:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800b144:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b146:	68da      	ldr	r2, [r3, #12]
 800b148:	4322      	orrs	r2, r4
}
 800b14a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b14e:	60da      	str	r2, [r3, #12]
}
 800b150:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b152:	4a23      	ldr	r2, [pc, #140]	; (800b1e0 <USB_SetTurnaroundTime+0xb0>)
 800b154:	4823      	ldr	r0, [pc, #140]	; (800b1e4 <USB_SetTurnaroundTime+0xb4>)
 800b156:	440a      	add	r2, r1
 800b158:	4282      	cmp	r2, r0
 800b15a:	d92c      	bls.n	800b1b6 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b15c:	4a22      	ldr	r2, [pc, #136]	; (800b1e8 <USB_SetTurnaroundTime+0xb8>)
 800b15e:	4823      	ldr	r0, [pc, #140]	; (800b1ec <USB_SetTurnaroundTime+0xbc>)
 800b160:	440a      	add	r2, r1
 800b162:	4282      	cmp	r2, r0
 800b164:	d92a      	bls.n	800b1bc <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b166:	4a22      	ldr	r2, [pc, #136]	; (800b1f0 <USB_SetTurnaroundTime+0xc0>)
 800b168:	4822      	ldr	r0, [pc, #136]	; (800b1f4 <USB_SetTurnaroundTime+0xc4>)
 800b16a:	440a      	add	r2, r1
 800b16c:	4282      	cmp	r2, r0
 800b16e:	d928      	bls.n	800b1c2 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b170:	4a21      	ldr	r2, [pc, #132]	; (800b1f8 <USB_SetTurnaroundTime+0xc8>)
 800b172:	4822      	ldr	r0, [pc, #136]	; (800b1fc <USB_SetTurnaroundTime+0xcc>)
 800b174:	440a      	add	r2, r1
 800b176:	4282      	cmp	r2, r0
 800b178:	d326      	bcc.n	800b1c8 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b17a:	4a21      	ldr	r2, [pc, #132]	; (800b200 <USB_SetTurnaroundTime+0xd0>)
 800b17c:	4821      	ldr	r0, [pc, #132]	; (800b204 <USB_SetTurnaroundTime+0xd4>)
 800b17e:	440a      	add	r2, r1
 800b180:	4282      	cmp	r2, r0
 800b182:	d924      	bls.n	800b1ce <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b184:	4a20      	ldr	r2, [pc, #128]	; (800b208 <USB_SetTurnaroundTime+0xd8>)
 800b186:	4821      	ldr	r0, [pc, #132]	; (800b20c <USB_SetTurnaroundTime+0xdc>)
 800b188:	440a      	add	r2, r1
 800b18a:	4282      	cmp	r2, r0
 800b18c:	d322      	bcc.n	800b1d4 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b18e:	4a20      	ldr	r2, [pc, #128]	; (800b210 <USB_SetTurnaroundTime+0xe0>)
 800b190:	4820      	ldr	r0, [pc, #128]	; (800b214 <USB_SetTurnaroundTime+0xe4>)
 800b192:	440a      	add	r2, r1
 800b194:	4282      	cmp	r2, r0
 800b196:	d3cf      	bcc.n	800b138 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b198:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <USB_SetTurnaroundTime+0xe8>)
 800b19a:	4820      	ldr	r0, [pc, #128]	; (800b21c <USB_SetTurnaroundTime+0xec>)
 800b19c:	440a      	add	r2, r1
 800b19e:	4282      	cmp	r2, r0
 800b1a0:	d31b      	bcc.n	800b1da <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b1a2:	4a1f      	ldr	r2, [pc, #124]	; (800b220 <USB_SetTurnaroundTime+0xf0>)
 800b1a4:	4c1f      	ldr	r4, [pc, #124]	; (800b224 <USB_SetTurnaroundTime+0xf4>)
 800b1a6:	440a      	add	r2, r1
 800b1a8:	42a2      	cmp	r2, r4
 800b1aa:	bf34      	ite	cc
 800b1ac:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 800b1b0:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 800b1b4:	e7c2      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1b6:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 800b1ba:	e7bf      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1bc:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 800b1c0:	e7bc      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1c2:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 800b1c6:	e7b9      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1c8:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 800b1cc:	e7b6      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1ce:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 800b1d2:	e7b3      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1d4:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800b1d8:	e7b0      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1da:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800b1de:	e7ad      	b.n	800b13c <USB_SetTurnaroundTime+0xc>
 800b1e0:	ff275340 	.word	0xff275340
 800b1e4:	000c34ff 	.word	0x000c34ff
 800b1e8:	ff1b1e40 	.word	0xff1b1e40
 800b1ec:	000f423f 	.word	0x000f423f
 800b1f0:	ff0bdc00 	.word	0xff0bdc00
 800b1f4:	00124f7f 	.word	0x00124f7f
 800b1f8:	fef98c80 	.word	0xfef98c80
 800b1fc:	0013d620 	.word	0x0013d620
 800b200:	fee5b660 	.word	0xfee5b660
 800b204:	0016e35f 	.word	0x0016e35f
 800b208:	feced300 	.word	0xfeced300
 800b20c:	001b7740 	.word	0x001b7740
 800b210:	feb35bc0 	.word	0xfeb35bc0
 800b214:	002191c0 	.word	0x002191c0
 800b218:	fe91ca00 	.word	0xfe91ca00
 800b21c:	00387520 	.word	0x00387520
 800b220:	fe5954e0 	.word	0xfe5954e0
 800b224:	00419ce0 	.word	0x00419ce0

0800b228 <USB_EnableGlobalInt>:
{
 800b228:	4603      	mov	r3, r0
}
 800b22a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	f042 0201 	orr.w	r2, r2, #1
 800b232:	609a      	str	r2, [r3, #8]
}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <USB_DisableGlobalInt>:
{
 800b238:	4603      	mov	r3, r0
}
 800b23a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	f022 0201 	bic.w	r2, r2, #1
 800b242:	609a      	str	r2, [r3, #8]
}
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop

0800b248 <USB_SetCurrentMode>:
{
 800b248:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b24a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b24c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b24e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b252:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800b254:	d00b      	beq.n	800b26e <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 800b256:	b941      	cbnz	r1, 800b26a <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b258:	68c3      	ldr	r3, [r0, #12]
 800b25a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b25e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800b260:	2032      	movs	r0, #50	; 0x32
 800b262:	f7f8 ff99 	bl	8004198 <HAL_Delay>
  return HAL_OK;
 800b266:	2000      	movs	r0, #0
}
 800b268:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 800b26a:	2001      	movs	r0, #1
}
 800b26c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b26e:	68c3      	ldr	r3, [r0, #12]
 800b270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b274:	60c3      	str	r3, [r0, #12]
 800b276:	e7f3      	b.n	800b260 <USB_SetCurrentMode+0x18>

0800b278 <USB_DevInit>:
{
 800b278:	b084      	sub	sp, #16
 800b27a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b27e:	9d12      	ldr	r5, [sp, #72]	; 0x48
    USBx->DIEPTXF[i] = 0U;
 800b280:	2600      	movs	r6, #0
{
 800b282:	af08      	add	r7, sp, #32
 800b284:	4604      	mov	r4, r0
    USBx->DIEPTXF[i] = 0U;
 800b286:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
 800b28a:	f8c0 6108 	str.w	r6, [r0, #264]	; 0x108
 800b28e:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
 800b292:	f8c0 6110 	str.w	r6, [r0, #272]	; 0x110
 800b296:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
 800b29a:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
 800b29e:	f8c0 611c 	str.w	r6, [r0, #284]	; 0x11c
 800b2a2:	f8c0 6120 	str.w	r6, [r0, #288]	; 0x120
 800b2a6:	f8c0 6124 	str.w	r6, [r0, #292]	; 0x124
 800b2aa:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
 800b2ae:	f8c0 612c 	str.w	r6, [r0, #300]	; 0x12c
 800b2b2:	f8c0 6130 	str.w	r6, [r0, #304]	; 0x130
 800b2b6:	f8c0 6134 	str.w	r6, [r0, #308]	; 0x134
 800b2ba:	f8c0 6138 	str.w	r6, [r0, #312]	; 0x138
 800b2be:	f8c0 613c 	str.w	r6, [r0, #316]	; 0x13c
{
 800b2c2:	e887 000e 	stmia.w	r7, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 800b2c6:	2d00      	cmp	r5, #0
 800b2c8:	f040 809a 	bne.w	800b400 <USB_DevInit+0x188>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2cc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800b2d0:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 800b2d4:	f043 0302 	orr.w	r3, r3, #2
 800b2d8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b2dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b2e0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2e2:	6803      	ldr	r3, [r0, #0]
 800b2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e8:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2ea:	6803      	ldr	r3, [r0, #0]
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800b2f2:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 800b2f6:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2fa:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b2fc:	6832      	ldr	r2, [r6, #0]
 800b2fe:	6032      	str	r2, [r6, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b300:	f000 8085 	beq.w	800b40e <USB_DevInit+0x196>
  USBx_DEVICE->DCFG |= speed;
 800b304:	6833      	ldr	r3, [r6, #0]
 800b306:	f043 0303 	orr.w	r3, r3, #3
 800b30a:	6033      	str	r3, [r6, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b30c:	f44f 6284 	mov.w	r2, #1056	; 0x420
 800b310:	4b46      	ldr	r3, [pc, #280]	; (800b42c <USB_DevInit+0x1b4>)
 800b312:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800b314:	e002      	b.n	800b31c <USB_DevInit+0xa4>
 800b316:	3b01      	subs	r3, #1
 800b318:	f000 8083 	beq.w	800b422 <USB_DevInit+0x1aa>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b31c:	6920      	ldr	r0, [r4, #16]
 800b31e:	f010 0020 	ands.w	r0, r0, #32
 800b322:	d1f8      	bne.n	800b316 <USB_DevInit+0x9e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b324:	2210      	movs	r2, #16
 800b326:	4b41      	ldr	r3, [pc, #260]	; (800b42c <USB_DevInit+0x1b4>)
 800b328:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 800b32a:	e001      	b.n	800b330 <USB_DevInit+0xb8>
 800b32c:	3b01      	subs	r3, #1
 800b32e:	d07a      	beq.n	800b426 <USB_DevInit+0x1ae>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b330:	6922      	ldr	r2, [r4, #16]
 800b332:	06d2      	lsls	r2, r2, #27
 800b334:	d4fa      	bmi.n	800b32c <USB_DevInit+0xb4>
  USBx_DEVICE->DIEPMSK = 0U;
 800b336:	2200      	movs	r2, #0
 800b338:	6132      	str	r2, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b33a:	6172      	str	r2, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b33c:	61f2      	str	r2, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b33e:	b1e9      	cbz	r1, 800b37c <USB_DevInit+0x104>
 800b340:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b344:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b348:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800b34c:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b34e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800b352:	e009      	b.n	800b368 <USB_DevInit+0xf0>
      USBx_INEP(i)->DIEPCTL = 0U;
 800b354:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b358:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b35a:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b35e:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b362:	3320      	adds	r3, #32
 800b364:	428a      	cmp	r2, r1
 800b366:	d02c      	beq.n	800b3c2 <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b368:	681f      	ldr	r7, [r3, #0]
 800b36a:	2f00      	cmp	r7, #0
 800b36c:	daf2      	bge.n	800b354 <USB_DevInit+0xdc>
      if (i == 0U)
 800b36e:	b112      	cbz	r2, 800b376 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b370:	f8c3 8000 	str.w	r8, [r3]
 800b374:	e7f0      	b.n	800b358 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b376:	f8c3 9000 	str.w	r9, [r3]
 800b37a:	e7ed      	b.n	800b358 <USB_DevInit+0xe0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b37c:	6933      	ldr	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800b37e:	2700      	movs	r7, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b380:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 800b384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b38a:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800b38c:	61a7      	str	r7, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b38e:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 800b390:	b91a      	cbnz	r2, 800b39a <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	f043 0310 	orr.w	r3, r3, #16
 800b398:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b39a:	69a1      	ldr	r1, [r4, #24]
 800b39c:	4b24      	ldr	r3, [pc, #144]	; (800b430 <USB_DevInit+0x1b8>)
  if (cfg.Sof_enable != 0U)
 800b39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800b3a4:	b11a      	cbz	r2, 800b3ae <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3a6:	69a3      	ldr	r3, [r4, #24]
 800b3a8:	f043 0308 	orr.w	r3, r3, #8
 800b3ac:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800b3ae:	2d01      	cmp	r5, #1
 800b3b0:	d103      	bne.n	800b3ba <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3b2:	69a2      	ldr	r2, [r4, #24]
 800b3b4:	4b1f      	ldr	r3, [pc, #124]	; (800b434 <USB_DevInit+0x1bc>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	61a3      	str	r3, [r4, #24]
}
 800b3ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3be:	b004      	add	sp, #16
 800b3c0:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3c8:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3cc:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3d0:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3d2:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800b3d6:	e009      	b.n	800b3ec <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3d8:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3dc:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3de:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3e2:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3e6:	3320      	adds	r3, #32
 800b3e8:	428a      	cmp	r2, r1
 800b3ea:	d0c7      	beq.n	800b37c <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3ec:	681f      	ldr	r7, [r3, #0]
 800b3ee:	2f00      	cmp	r7, #0
 800b3f0:	daf2      	bge.n	800b3d8 <USB_DevInit+0x160>
      if (i == 0U)
 800b3f2:	b112      	cbz	r2, 800b3fa <USB_DevInit+0x182>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3f4:	f8c3 8000 	str.w	r8, [r3]
 800b3f8:	e7f0      	b.n	800b3dc <USB_DevInit+0x164>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3fa:	f8c3 9000 	str.w	r9, [r3]
 800b3fe:	e7ed      	b.n	800b3dc <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b400:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b402:	f500 6600 	add.w	r6, r0, #2048	; 0x800
 800b406:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b40a:	6383      	str	r3, [r0, #56]	; 0x38
 800b40c:	e771      	b.n	800b2f2 <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 800b40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b410:	b913      	cbnz	r3, 800b418 <USB_DevInit+0x1a0>
  USBx_DEVICE->DCFG |= speed;
 800b412:	6833      	ldr	r3, [r6, #0]
 800b414:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 800b416:	e779      	b.n	800b30c <USB_DevInit+0x94>
  USBx_DEVICE->DCFG |= speed;
 800b418:	6833      	ldr	r3, [r6, #0]
 800b41a:	f043 0301 	orr.w	r3, r3, #1
 800b41e:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 800b420:	e774      	b.n	800b30c <USB_DevInit+0x94>
    ret = HAL_ERROR;
 800b422:	2001      	movs	r0, #1
 800b424:	e77e      	b.n	800b324 <USB_DevInit+0xac>
    ret = HAL_ERROR;
 800b426:	2001      	movs	r0, #1
 800b428:	e785      	b.n	800b336 <USB_DevInit+0xbe>
 800b42a:	bf00      	nop
 800b42c:	00030d40 	.word	0x00030d40
 800b430:	803c3800 	.word	0x803c3800
 800b434:	40000004 	.word	0x40000004

0800b438 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b438:	0189      	lsls	r1, r1, #6
 800b43a:	4a07      	ldr	r2, [pc, #28]	; (800b458 <USB_FlushTxFifo+0x20>)
 800b43c:	f041 0120 	orr.w	r1, r1, #32
 800b440:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800b442:	e001      	b.n	800b448 <USB_FlushTxFifo+0x10>
 800b444:	3a01      	subs	r2, #1
 800b446:	d005      	beq.n	800b454 <USB_FlushTxFifo+0x1c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b448:	6903      	ldr	r3, [r0, #16]
 800b44a:	f013 0320 	ands.w	r3, r3, #32
 800b44e:	d1f9      	bne.n	800b444 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 800b450:	4618      	mov	r0, r3
 800b452:	4770      	bx	lr
      return HAL_TIMEOUT;
 800b454:	2003      	movs	r0, #3
}
 800b456:	4770      	bx	lr
 800b458:	00030d40 	.word	0x00030d40

0800b45c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b45c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b460:	f013 0006 	ands.w	r0, r3, #6
 800b464:	d004      	beq.n	800b470 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b466:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 800b46a:	bf14      	ite	ne
 800b46c:	2002      	movne	r0, #2
 800b46e:	200f      	moveq	r0, #15
}
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop

0800b474 <USB_ActivateEndpoint>:
{
 800b474:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 800b476:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b478:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d01f      	beq.n	800b4be <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b47e:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800b482:	f002 050f 	and.w	r5, r2, #15
 800b486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b48a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b48e:	69e2      	ldr	r2, [r4, #28]
 800b490:	40ab      	lsls	r3, r5
 800b492:	4313      	orrs	r3, r2
 800b494:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b496:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800b49a:	041b      	lsls	r3, r3, #16
 800b49c:	d40c      	bmi.n	800b4b8 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b49e:	688b      	ldr	r3, [r1, #8]
 800b4a0:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800b4a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b4a8:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4aa:	4a15      	ldr	r2, [pc, #84]	; (800b500 <USB_ActivateEndpoint+0x8c>)
 800b4ac:	4323      	orrs	r3, r4
 800b4ae:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800b4b2:	431a      	orrs	r2, r3
 800b4b4:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	bc70      	pop	{r4, r5, r6}
 800b4bc:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b4be:	f002 040f 	and.w	r4, r2, #15
 800b4c2:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800b4c6:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b4ca:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b4ce:	40a3      	lsls	r3, r4
 800b4d0:	4333      	orrs	r3, r6
 800b4d2:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b4d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800b4d8:	041c      	lsls	r4, r3, #16
 800b4da:	d4ed      	bmi.n	800b4b8 <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4dc:	688b      	ldr	r3, [r1, #8]
 800b4de:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800b4e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4e6:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4e8:	4905      	ldr	r1, [pc, #20]	; (800b500 <USB_ActivateEndpoint+0x8c>)
 800b4ea:	432b      	orrs	r3, r5
 800b4ec:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b4f0:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800b4f4:	4311      	orrs	r1, r2
}
 800b4f6:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4f8:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	4770      	bx	lr
 800b500:	10008000 	.word	0x10008000

0800b504 <USB_DeactivateEndpoint>:
{
 800b504:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800b506:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b508:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800b50a:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b50c:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800b510:	d02b      	beq.n	800b56a <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b512:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800b516:	2a00      	cmp	r2, #0
 800b518:	db1a      	blt.n	800b550 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b51a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b51e:	f003 030f 	and.w	r3, r3, #15
 800b522:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800b526:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b52a:	4925      	ldr	r1, [pc, #148]	; (800b5c0 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b52c:	ea24 0403 	bic.w	r4, r4, r3
 800b530:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b534:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800b538:	ea22 0303 	bic.w	r3, r2, r3
 800b53c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800b540:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b542:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800b546:	4019      	ands	r1, r3
 800b548:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 800b54c:	bc30      	pop	{r4, r5}
 800b54e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b550:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800b554:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b558:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b55c:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 800b560:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b564:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 800b568:	e7d7      	b.n	800b51a <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b56a:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800b56e:	2a00      	cmp	r2, #0
 800b570:	da0b      	bge.n	800b58a <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b572:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800b576:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b57a:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b57e:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 800b582:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b586:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b58a:	2201      	movs	r2, #1
 800b58c:	f003 030f 	and.w	r3, r3, #15
 800b590:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800b594:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b598:	490a      	ldr	r1, [pc, #40]	; (800b5c4 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b59a:	ea24 0403 	bic.w	r4, r4, r3
 800b59e:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b5a2:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800b5a6:	ea22 0303 	bic.w	r3, r2, r3
 800b5aa:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800b5ae:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b5b0:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800b5b4:	4019      	ands	r1, r3
 800b5b6:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 800b5ba:	bc30      	pop	{r4, r5}
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	eff37800 	.word	0xeff37800
 800b5c4:	ec337800 	.word	0xec337800

0800b5c8 <USB_EPStartXfer>:
{
 800b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800b5cc:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b5ce:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800b5d0:	2d01      	cmp	r5, #1
 800b5d2:	d054      	beq.n	800b67e <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5d4:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 800b5d8:	4f82      	ldr	r7, [pc, #520]	; (800b7e4 <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 800b5da:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5dc:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 800b5e0:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5e4:	4e80      	ldr	r6, [pc, #512]	; (800b7e8 <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5e6:	ea0c 0707 	and.w	r7, ip, r7
 800b5ea:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5ec:	691f      	ldr	r7, [r3, #16]
 800b5ee:	403e      	ands	r6, r7
 800b5f0:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 800b5f2:	b395      	cbz	r5, 800b65a <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b5f4:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 800b5f6:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b5f8:	4f7c      	ldr	r7, [pc, #496]	; (800b7ec <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b5fa:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b5fc:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b600:	f105 35ff 	add.w	r5, r5, #4294967295
 800b604:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b608:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b60c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b610:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b614:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b618:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b61c:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b61e:	691d      	ldr	r5, [r3, #16]
 800b620:	ea46 0605 	orr.w	r6, r6, r5
 800b624:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800b626:	d025      	beq.n	800b674 <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 800b628:	78cb      	ldrb	r3, [r1, #3]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d10c      	bne.n	800b648 <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b62e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800b632:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b636:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800b63a:	bf0c      	ite	eq
 800b63c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b640:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800b644:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b648:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800b64c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b650:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800b654:	2000      	movs	r0, #0
 800b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b65a:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800b65c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b65e:	691e      	ldr	r6, [r3, #16]
 800b660:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800b664:	ea45 0506 	orr.w	r5, r5, r6
 800b668:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b66a:	691d      	ldr	r5, [r3, #16]
 800b66c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800b670:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800b672:	d1d9      	bne.n	800b628 <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 800b674:	68ca      	ldr	r2, [r1, #12]
 800b676:	2a00      	cmp	r2, #0
 800b678:	d0d6      	beq.n	800b628 <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b67a:	615a      	str	r2, [r3, #20]
 800b67c:	e7d4      	b.n	800b628 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 800b67e:	694e      	ldr	r6, [r1, #20]
 800b680:	2e00      	cmp	r6, #0
 800b682:	d040      	beq.n	800b706 <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b684:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b688:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b68c:	f8df a154 	ldr.w	sl, [pc, #340]	; 800b7e4 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b690:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b694:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b698:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b69c:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 800b6a0:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b6a4:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6a8:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800b7e8 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6ac:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6b0:	f8d3 a010 	ldr.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b6b4:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6b8:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b6bc:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800b7ec <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6c0:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b6c4:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 800b6c8:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b6cc:	ea4c 0c08 	orr.w	ip, ip, r8
 800b6d0:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b6d4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800b6d8:	ea47 070c 	orr.w	r7, r7, ip
 800b6dc:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 800b6de:	78cf      	ldrb	r7, [r1, #3]
 800b6e0:	2f01      	cmp	r7, #1
 800b6e2:	d04e      	beq.n	800b782 <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 800b6e4:	2a01      	cmp	r2, #1
 800b6e6:	d068      	beq.n	800b7ba <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6e8:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b6ec:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b6f4:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b6f6:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b6fa:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 800b6fe:	4325      	orrs	r5, r4
 800b700:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 800b704:	e7a6      	b.n	800b654 <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b706:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 800b70a:	4f37      	ldr	r7, [pc, #220]	; (800b7e8 <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b70c:	4d35      	ldr	r5, [pc, #212]	; (800b7e4 <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 800b70e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b710:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 800b714:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 800b718:	ea0e 0707 	and.w	r7, lr, r7
 800b71c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b71e:	691f      	ldr	r7, [r3, #16]
 800b720:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800b724:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b726:	691f      	ldr	r7, [r3, #16]
 800b728:	ea05 0507 	and.w	r5, r5, r7
 800b72c:	611d      	str	r5, [r3, #16]
 800b72e:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 800b730:	d038      	beq.n	800b7a4 <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b732:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800b736:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b738:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800b73c:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800b740:	d188      	bne.n	800b654 <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b742:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 800b746:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b74a:	681d      	ldr	r5, [r3, #0]
 800b74c:	bf0c      	ite	eq
 800b74e:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b752:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 800b756:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 800b758:	2a00      	cmp	r2, #0
 800b75a:	f47f af7b 	bne.w	800b654 <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800b75e:	b2b6      	uxth	r6, r6
 800b760:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 800b762:	08b6      	lsrs	r6, r6, #2
 800b764:	f43f af76 	beq.w	800b654 <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b768:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b76a:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800b76e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800b772:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800b776:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800b77a:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b77c:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800b77e:	d1fa      	bne.n	800b776 <USB_EPStartXfer+0x1ae>
 800b780:	e768      	b.n	800b654 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b782:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 800b784:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b786:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800b78a:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b78c:	691d      	ldr	r5, [r3, #16]
 800b78e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b792:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 800b794:	d016      	beq.n	800b7c4 <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b796:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 800b79a:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800b79e:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800b7a2:	e7ce      	b.n	800b742 <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 800b7a4:	690a      	ldr	r2, [r1, #16]
 800b7a6:	b95a      	cbnz	r2, 800b7c0 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 800b7a8:	2f01      	cmp	r7, #1
 800b7aa:	d00e      	beq.n	800b7ca <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7ac:	681a      	ldr	r2, [r3, #0]
}
 800b7ae:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7b0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800b7b4:	601a      	str	r2, [r3, #0]
}
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800b7ba:	690a      	ldr	r2, [r1, #16]
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	d0f5      	beq.n	800b7ac <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7c0:	615a      	str	r2, [r3, #20]
 800b7c2:	e7f1      	b.n	800b7a8 <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 800b7c4:	690a      	ldr	r2, [r1, #16]
 800b7c6:	2a00      	cmp	r2, #0
 800b7c8:	d1fa      	bne.n	800b7c0 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7ca:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800b7ce:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	bf0c      	ite	eq
 800b7d6:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b7da:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	e7e4      	b.n	800b7ac <USB_EPStartXfer+0x1e4>
 800b7e2:	bf00      	nop
 800b7e4:	fff80000 	.word	0xfff80000
 800b7e8:	e007ffff 	.word	0xe007ffff
 800b7ec:	1ff80000 	.word	0x1ff80000

0800b7f0 <USB_EP0StartXfer>:
{
 800b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800b7f4:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b7f6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800b7f8:	2c01      	cmp	r4, #1
 800b7fa:	d02a      	beq.n	800b852 <USB_EP0StartXfer+0x62>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b7fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800b800:	4d4d      	ldr	r5, [pc, #308]	; (800b938 <USB_EP0StartXfer+0x148>)
    if (ep->xfer_len > 0U)
 800b802:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b804:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 800b808:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b80c:	4c4b      	ldr	r4, [pc, #300]	; (800b93c <USB_EP0StartXfer+0x14c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b80e:	403d      	ands	r5, r7
 800b810:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b812:	691d      	ldr	r5, [r3, #16]
 800b814:	402c      	ands	r4, r5
 800b816:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 800b818:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 800b81a:	b106      	cbz	r6, 800b81e <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800b81c:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b81e:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b820:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800b824:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b826:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800b82a:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b82c:	691d      	ldr	r5, [r3, #16]
 800b82e:	ea44 0405 	orr.w	r4, r4, r5
 800b832:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800b834:	d008      	beq.n	800b848 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b836:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800b83a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b83e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800b842:	2000      	movs	r0, #0
 800b844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800b848:	68ca      	ldr	r2, [r1, #12]
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d0f3      	beq.n	800b836 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b84e:	615a      	str	r2, [r3, #20]
 800b850:	e7f1      	b.n	800b836 <USB_EP0StartXfer+0x46>
    if (ep->xfer_len == 0U)
 800b852:	694d      	ldr	r5, [r1, #20]
 800b854:	b3ad      	cbz	r5, 800b8c2 <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b856:	eb00 1e43 	add.w	lr, r0, r3, lsl #5
 800b85a:	4f37      	ldr	r7, [pc, #220]	; (800b938 <USB_EP0StartXfer+0x148>)
      if (ep->xfer_len > ep->maxpacket)
 800b85c:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b860:	f8de 8910 	ldr.w	r8, [lr, #2320]	; 0x910
 800b864:	f50e 6410 	add.w	r4, lr, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b868:	4e34      	ldr	r6, [pc, #208]	; (800b93c <USB_EP0StartXfer+0x14c>)
      if (ep->xfer_len > ep->maxpacket)
 800b86a:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b86c:	ea08 0707 	and.w	r7, r8, r7
 800b870:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b872:	6927      	ldr	r7, [r4, #16]
 800b874:	ea06 0607 	and.w	r6, r6, r7
 800b878:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b87a:	6926      	ldr	r6, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 800b87c:	d94a      	bls.n	800b914 <USB_EP0StartXfer+0x124>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b87e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 800b882:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b886:	f3cc 0512 	ubfx	r5, ip, #0, #19
    if (dma == 1U)
 800b88a:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b88c:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b88e:	6926      	ldr	r6, [r4, #16]
 800b890:	ea45 0506 	orr.w	r5, r5, r6
 800b894:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800b896:	d033      	beq.n	800b900 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b898:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800b89c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800b8a0:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800b8a4:	f1bc 0f00 	cmp.w	ip, #0
 800b8a8:	d0cb      	beq.n	800b842 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8aa:	f003 010f 	and.w	r1, r3, #15
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800b8b4:	408b      	lsls	r3, r1
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800b8bc:	2000      	movs	r0, #0
 800b8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8c2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800b8c6:	4e1d      	ldr	r6, [pc, #116]	; (800b93c <USB_EP0StartXfer+0x14c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8c8:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
    if (dma == 1U)
 800b8cc:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8ce:	f8d0 3910 	ldr.w	r3, [r0, #2320]	; 0x910
 800b8d2:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 800b8d6:	ea06 0603 	and.w	r6, r6, r3
 800b8da:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8dc:	6926      	ldr	r6, [r4, #16]
 800b8de:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800b8e2:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	ea05 0503 	and.w	r5, r5, r3
 800b8ea:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800b8ec:	d008      	beq.n	800b900 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8ee:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800b8f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8f6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800b900:	690b      	ldr	r3, [r1, #16]
 800b902:	b103      	cbz	r3, 800b906 <USB_EP0StartXfer+0x116>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b904:	6163      	str	r3, [r4, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b906:	6823      	ldr	r3, [r4, #0]
}
 800b908:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b90a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b90e:	6023      	str	r3, [r4, #0]
}
 800b910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b914:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b918:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 800b91c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b91e:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b920:	6926      	ldr	r6, [r4, #16]
 800b922:	ea45 0506 	orr.w	r5, r5, r6
 800b926:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 800b928:	d0ea      	beq.n	800b900 <USB_EP0StartXfer+0x110>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b92a:	f8de 2900 	ldr.w	r2, [lr, #2304]	; 0x900
 800b92e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800b932:	f8ce 2900 	str.w	r2, [lr, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800b936:	e7b8      	b.n	800b8aa <USB_EP0StartXfer+0xba>
 800b938:	fff80000 	.word	0xfff80000
 800b93c:	e007ffff 	.word	0xe007ffff

0800b940 <USB_WritePacket>:
{
 800b940:	b410      	push	{r4}
 800b942:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800b946:	b964      	cbnz	r4, 800b962 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800b948:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800b94a:	089b      	lsrs	r3, r3, #2
 800b94c:	d009      	beq.n	800b962 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b94e:	3201      	adds	r2, #1
 800b950:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b954:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800b958:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800b95c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b95e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800b960:	d1fa      	bne.n	800b958 <USB_WritePacket+0x18>
}
 800b962:	2000      	movs	r0, #0
 800b964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop

0800b96c <USB_ReadPacket>:
{
 800b96c:	b4f0      	push	{r4, r5, r6, r7}
  for (i = 0U; i < count32b; i++)
 800b96e:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 800b970:	f002 0703 	and.w	r7, r2, #3
  for (i = 0U; i < count32b; i++)
 800b974:	d00b      	beq.n	800b98e <USB_ReadPacket+0x22>
 800b976:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800b97a:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800b97c:	2300      	movs	r3, #0
 800b97e:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b980:	6834      	ldr	r4, [r6, #0]
  for (i = 0U; i < count32b; i++)
 800b982:	429d      	cmp	r5, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b984:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800b988:	d1f9      	bne.n	800b97e <USB_ReadPacket+0x12>
 800b98a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  if (remaining_bytes != 0U)
 800b98e:	b177      	cbz	r7, 800b9ae <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b990:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
      remaining_bytes--;
 800b994:	3f01      	subs	r7, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b996:	6803      	ldr	r3, [r0, #0]
      remaining_bytes--;
 800b998:	b2bf      	uxth	r7, r7
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b99a:	700b      	strb	r3, [r1, #0]
    } while (remaining_bytes != 0U);
 800b99c:	b12f      	cbz	r7, 800b9aa <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b99e:	0a1a      	lsrs	r2, r3, #8
    } while (remaining_bytes != 0U);
 800b9a0:	2f01      	cmp	r7, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b9a2:	704a      	strb	r2, [r1, #1]
    } while (remaining_bytes != 0U);
 800b9a4:	d001      	beq.n	800b9aa <USB_ReadPacket+0x3e>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b9a6:	0c1b      	lsrs	r3, r3, #16
 800b9a8:	708b      	strb	r3, [r1, #2]
    } while (remaining_bytes != 0U);
 800b9aa:	3701      	adds	r7, #1
 800b9ac:	4439      	add	r1, r7
}
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	bcf0      	pop	{r4, r5, r6, r7}
 800b9b2:	4770      	bx	lr

0800b9b4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800b9b4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800b9b6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800b9b8:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9ba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800b9be:	d00c      	beq.n	800b9da <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9c0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800b9c4:	b10b      	cbz	r3, 800b9ca <USB_EPSetStall+0x16>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	da14      	bge.n	800b9f4 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b9ca:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800b9ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9d2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9da:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800b9de:	2a00      	cmp	r2, #0
 800b9e0:	db00      	blt.n	800b9e4 <USB_EPSetStall+0x30>
 800b9e2:	b973      	cbnz	r3, 800ba02 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9e4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800b9e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9ec:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800b9f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800ba00:	e7e3      	b.n	800b9ca <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba02:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba0a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba0e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba16:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800ba1a:	e7e9      	b.n	800b9f0 <USB_EPSetStall+0x3c>

0800ba1c <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800ba1c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ba1e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ba20:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba22:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800ba26:	d013      	beq.n	800ba50 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ba2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba30:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba34:	78cb      	ldrb	r3, [r1, #3]
 800ba36:	3b02      	subs	r3, #2
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d901      	bls.n	800ba40 <USB_EPClearStall+0x24>
}
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba40:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ba44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba48:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba50:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba58:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba5c:	78cb      	ldrb	r3, [r1, #3]
 800ba5e:	3b02      	subs	r3, #2
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d8eb      	bhi.n	800ba3c <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba64:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ba68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba6c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800ba70:	2000      	movs	r0, #0
 800ba72:	4770      	bx	lr

0800ba74 <USB_SetDevAddress>:
{
 800ba74:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba76:	0109      	lsls	r1, r1, #4
}
 800ba78:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba7a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba7e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba82:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800ba86:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba8a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800ba8e:	4311      	orrs	r1, r2
 800ba90:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop

0800ba98 <USB_DevConnect>:
{
 800ba98:	4603      	mov	r3, r0
}
 800ba9a:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba9c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800baa0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800baa4:	f022 0203 	bic.w	r2, r2, #3
 800baa8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800baac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800bab0:	f023 0302 	bic.w	r3, r3, #2
 800bab4:	604b      	str	r3, [r1, #4]
}
 800bab6:	4770      	bx	lr

0800bab8 <USB_DevDisconnect>:
{
 800bab8:	4603      	mov	r3, r0
}
 800baba:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800babc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bac0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bac4:	f022 0203 	bic.w	r2, r2, #3
 800bac8:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bacc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800bad0:	f043 0302 	orr.w	r3, r3, #2
 800bad4:	604b      	str	r3, [r1, #4]
}
 800bad6:	4770      	bx	lr

0800bad8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800bad8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800bada:	6980      	ldr	r0, [r0, #24]
}
 800badc:	4010      	ands	r0, r2
 800bade:	4770      	bx	lr

0800bae0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800bae0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800bae4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bae8:	69c0      	ldr	r0, [r0, #28]
 800baea:	4018      	ands	r0, r3
}
 800baec:	0c00      	lsrs	r0, r0, #16
 800baee:	4770      	bx	lr

0800baf0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800baf0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800baf4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800baf8:	69c0      	ldr	r0, [r0, #28]
 800bafa:	4018      	ands	r0, r3
}
 800bafc:	b280      	uxth	r0, r0
 800bafe:	4770      	bx	lr

0800bb00 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb00:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb08:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb0c:	6940      	ldr	r0, [r0, #20]
}
 800bb0e:	4010      	ands	r0, r2
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop

0800bb14 <USB_ReadDevInEPInterrupt>:
{
 800bb14:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 800bb16:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb1a:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb1e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb22:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb26:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb28:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bb2c:	01db      	lsls	r3, r3, #7
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	4323      	orrs	r3, r4
}
 800bb32:	bc30      	pop	{r4, r5}
 800bb34:	4018      	ands	r0, r3
 800bb36:	4770      	bx	lr

0800bb38 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800bb38:	6940      	ldr	r0, [r0, #20]
}
 800bb3a:	f000 0001 	and.w	r0, r0, #1
 800bb3e:	4770      	bx	lr

0800bb40 <USB_ActivateSetup>:
{
 800bb40:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb42:	4a09      	ldr	r2, [pc, #36]	; (800bb68 <USB_ActivateSetup+0x28>)
}
 800bb44:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb46:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800bb4a:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb4c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800bb50:	4022      	ands	r2, r4
}
 800bb52:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb56:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb5a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800bb5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb62:	604b      	str	r3, [r1, #4]
}
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	fffff800 	.word	0xfffff800

0800bb6c <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb6c:	4b14      	ldr	r3, [pc, #80]	; (800bbc0 <USB_EP0_OutStart+0x54>)
{
 800bb6e:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb70:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb72:	429c      	cmp	r4, r3
 800bb74:	d81a      	bhi.n	800bbac <USB_EP0_OutStart+0x40>
 800bb76:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb7a:	2300      	movs	r3, #0
  if (dma == 1U)
 800bb7c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb7e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb80:	6903      	ldr	r3, [r0, #16]
 800bb82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb86:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb88:	6903      	ldr	r3, [r0, #16]
 800bb8a:	f043 0318 	orr.w	r3, r3, #24
 800bb8e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb90:	6903      	ldr	r3, [r0, #16]
 800bb92:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bb96:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800bb98:	d104      	bne.n	800bba4 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb9a:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb9c:	6803      	ldr	r3, [r0, #0]
 800bb9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bba2:	6003      	str	r3, [r0, #0]
}
 800bba4:	2000      	movs	r0, #0
 800bba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbaa:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800bbb0:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dae0      	bge.n	800bb7a <USB_EP0_OutStart+0xe>
}
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	4f54300a 	.word	0x4f54300a

0800bbc4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bbc4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbc6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bbca:	b194      	cbz	r4, 800bbf2 <USBD_CDC_EP0_RxReady+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bbcc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800bbd0:	b16b      	cbz	r3, 800bbee <USBD_CDC_EP0_RxReady+0x2a>
 800bbd2:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bbd6:	28ff      	cmp	r0, #255	; 0xff
 800bbd8:	d009      	beq.n	800bbee <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	4621      	mov	r1, r4
 800bbde:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800bbe2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800bbe4:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800bbe6:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800bbe8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800bbec:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800bbee:	2000      	movs	r0, #0
}
 800bbf0:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bbf2:	2003      	movs	r0, #3
}
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop

0800bbf8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bbf8:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbfa:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bbfe:	801a      	strh	r2, [r3, #0]
}
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	240002c8 	.word	0x240002c8

0800bc08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bc08:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bc0a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bc0e:	801a      	strh	r2, [r3, #0]
}
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	2400030c 	.word	0x2400030c

0800bc18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc18:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc1a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bc1e:	801a      	strh	r2, [r3, #0]
}
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	2400035c 	.word	0x2400035c

0800bc28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bc28:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc2a:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800bc2c:	4801      	ldr	r0, [pc, #4]	; (800bc34 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bc2e:	801a      	strh	r2, [r3, #0]
}
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	24000350 	.word	0x24000350

0800bc38 <USBD_CDC_DataOut>:
{
 800bc38:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc3a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800bc3e:	b175      	cbz	r5, 800bc5e <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc40:	4604      	mov	r4, r0
 800bc42:	f001 f915 	bl	800ce70 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc46:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800bc4a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc4e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800bc58:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bc5a:	2000      	movs	r0, #0
}
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800bc5e:	2003      	movs	r0, #3
}
 800bc60:	bd38      	pop	{r3, r4, r5, pc}
 800bc62:	bf00      	nop

0800bc64 <USBD_CDC_DataIn>:
{
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800bc66:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800bc6a:	b367      	cbz	r7, 800bcc6 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc6c:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 800bc70:	4605      	mov	r5, r0
 800bc72:	460a      	mov	r2, r1
 800bc74:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800bc78:	69b3      	ldr	r3, [r6, #24]
 800bc7a:	b96b      	cbnz	r3, 800bc98 <USBD_CDC_DataIn+0x34>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc7c:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800bc80:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc82:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800bc84:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc88:	b1db      	cbz	r3, 800bcc2 <USBD_CDC_DataIn+0x5e>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc8a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800bc8e:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800bc92:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800bc94:	4620      	mov	r0, r4
}
 800bc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bc98:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800bc9c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800bca0:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800bca4:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800bca8:	fbb3 f4fc 	udiv	r4, r3, ip
 800bcac:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bcb0:	2c00      	cmp	r4, #0
 800bcb2:	d1e3      	bne.n	800bc7c <USBD_CDC_DataIn+0x18>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bcb4:	4623      	mov	r3, r4
 800bcb6:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800bcb8:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bcba:	f001 f8bd 	bl	800ce38 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800bcbe:	4620      	mov	r0, r4
}
 800bcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (uint8_t)USBD_OK;
 800bcc2:	4618      	mov	r0, r3
}
 800bcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800bcc6:	2003      	movs	r0, #3
}
 800bcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcca:	bf00      	nop

0800bccc <USBD_CDC_Setup>:
{
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800bcd0:	2300      	movs	r3, #0
{
 800bcd2:	b082      	sub	sp, #8
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcd4:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800bcd8:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800bcdc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (hcdc == NULL)
 800bce0:	2f00      	cmp	r7, #0
 800bce2:	d067      	beq.n	800bdb4 <USBD_CDC_Setup+0xe8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bce4:	780e      	ldrb	r6, [r1, #0]
 800bce6:	4680      	mov	r8, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	f016 0560 	ands.w	r5, r6, #96	; 0x60
 800bcee:	d01e      	beq.n	800bd2e <USBD_CDC_Setup+0x62>
 800bcf0:	2d20      	cmp	r5, #32
 800bcf2:	d008      	beq.n	800bd06 <USBD_CDC_Setup+0x3a>
          ret = USBD_FAIL;
 800bcf4:	2503      	movs	r5, #3
          USBD_CtlError(pdev, req);
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	f000 fd4f 	bl	800c79c <USBD_CtlError>
}
 800bcfe:	4628      	mov	r0, r5
 800bd00:	b002      	add	sp, #8
 800bd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (req->wLength != 0U)
 800bd06:	88ca      	ldrh	r2, [r1, #6]
 800bd08:	b382      	cbz	r2, 800bd6c <USBD_CDC_Setup+0xa0>
        if ((req->bmRequest & 0x80U) != 0U)
 800bd0a:	0631      	lsls	r1, r6, #24
 800bd0c:	d557      	bpl.n	800bdbe <USBD_CDC_Setup+0xf2>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd0e:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
 800bd12:	4639      	mov	r1, r7
 800bd14:	7860      	ldrb	r0, [r4, #1]
 800bd16:	68ae      	ldr	r6, [r5, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd18:	461d      	mov	r5, r3
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd1a:	47b0      	blx	r6
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd1c:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd1e:	4639      	mov	r1, r7
 800bd20:	4640      	mov	r0, r8
 800bd22:	2a07      	cmp	r2, #7
 800bd24:	bf28      	it	cs
 800bd26:	2207      	movcs	r2, #7
 800bd28:	f000 fd6a 	bl	800c800 <USBD_CtlSendData>
 800bd2c:	e7e7      	b.n	800bcfe <USBD_CDC_Setup+0x32>
      switch (req->bRequest)
 800bd2e:	784b      	ldrb	r3, [r1, #1]
 800bd30:	2b0b      	cmp	r3, #11
 800bd32:	d8df      	bhi.n	800bcf4 <USBD_CDC_Setup+0x28>
 800bd34:	a201      	add	r2, pc, #4	; (adr r2, 800bd3c <USBD_CDC_Setup+0x70>)
 800bd36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3a:	bf00      	nop
 800bd3c:	0800bd9f 	.word	0x0800bd9f
 800bd40:	0800bcff 	.word	0x0800bcff
 800bd44:	0800bcf5 	.word	0x0800bcf5
 800bd48:	0800bcf5 	.word	0x0800bcf5
 800bd4c:	0800bcf5 	.word	0x0800bcf5
 800bd50:	0800bcf5 	.word	0x0800bcf5
 800bd54:	0800bcf5 	.word	0x0800bcf5
 800bd58:	0800bcf5 	.word	0x0800bcf5
 800bd5c:	0800bcf5 	.word	0x0800bcf5
 800bd60:	0800bcf5 	.word	0x0800bcf5
 800bd64:	0800bd8b 	.word	0x0800bd8b
 800bd68:	0800bd81 	.word	0x0800bd81
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd6c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 800bd70:	4615      	mov	r5, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd72:	7848      	ldrb	r0, [r1, #1]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	4798      	blx	r3
}
 800bd78:	4628      	mov	r0, r5
 800bd7a:	b002      	add	sp, #8
 800bd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd80:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bd84:	2b03      	cmp	r3, #3
 800bd86:	d0ba      	beq.n	800bcfe <USBD_CDC_Setup+0x32>
 800bd88:	e7b4      	b.n	800bcf4 <USBD_CDC_Setup+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	d1b0      	bne.n	800bcf4 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bd92:	2201      	movs	r2, #1
 800bd94:	f10d 0105 	add.w	r1, sp, #5
 800bd98:	f000 fd32 	bl	800c800 <USBD_CtlSendData>
 800bd9c:	e7af      	b.n	800bcfe <USBD_CDC_Setup+0x32>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd9e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800bda2:	2a03      	cmp	r2, #3
 800bda4:	d1a6      	bne.n	800bcf4 <USBD_CDC_Setup+0x28>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bda6:	2202      	movs	r2, #2
 800bda8:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 800bdac:	461d      	mov	r5, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdae:	f000 fd27 	bl	800c800 <USBD_CtlSendData>
 800bdb2:	e7a4      	b.n	800bcfe <USBD_CDC_Setup+0x32>
    return (uint8_t)USBD_FAIL;
 800bdb4:	2503      	movs	r5, #3
}
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	b002      	add	sp, #8
 800bdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          hcdc->CmdOpCode = req->bRequest;
 800bdbe:	7864      	ldrb	r4, [r4, #1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bdc0:	4639      	mov	r1, r7
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bdc2:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800bdc6:	461d      	mov	r5, r3
          hcdc->CmdOpCode = req->bRequest;
 800bdc8:	f887 4200 	strb.w	r4, [r7, #512]	; 0x200
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bdcc:	f000 fd30 	bl	800c830 <USBD_CtlPrepareRx>
 800bdd0:	e795      	b.n	800bcfe <USBD_CDC_Setup+0x32>
 800bdd2:	bf00      	nop

0800bdd4 <USBD_CDC_DeInit>:
{
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bdd8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bdda:	2181      	movs	r1, #129	; 0x81
 800bddc:	f000 ffe0 	bl	800cda0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bde0:	2101      	movs	r1, #1
 800bde2:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bde4:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bde6:	f000 ffdb 	bl	800cda0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bdea:	4620      	mov	r0, r4
 800bdec:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bdee:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bdf2:	f000 ffd5 	bl	800cda0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800bdf6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bdfa:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800bdfc:	b14b      	cbz	r3, 800be12 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bdfe:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800be06:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800be0a:	f001 f839 	bl	800ce80 <USBD_static_free>
    pdev->pClassData = NULL;
 800be0e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800be12:	2000      	movs	r0, #0
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	bf00      	nop

0800be18 <USBD_CDC_Init>:
{
 800be18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be1e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be22:	f001 f829 	bl	800ce78 <USBD_static_malloc>
  if (hcdc == NULL)
 800be26:	4605      	mov	r5, r0
 800be28:	2800      	cmp	r0, #0
 800be2a:	d04d      	beq.n	800bec8 <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be2c:	7c23      	ldrb	r3, [r4, #16]
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be2e:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800be30:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be34:	b38b      	cbz	r3, 800be9a <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be36:	2340      	movs	r3, #64	; 0x40
 800be38:	2181      	movs	r1, #129	; 0x81
 800be3a:	2202      	movs	r2, #2
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 ff9d 	bl	800cd7c <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be42:	4631      	mov	r1, r6
 800be44:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be46:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be48:	2202      	movs	r2, #2
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 ff96 	bl	800cd7c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be50:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be52:	2203      	movs	r2, #3
 800be54:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be56:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be5a:	4620      	mov	r0, r4
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be5c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be60:	2308      	movs	r3, #8
 800be62:	f000 ff8b 	bl	800cd7c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be66:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be6a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800be6e:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be70:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4798      	blx	r3
  hcdc->TxState = 0U;
 800be78:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800be7c:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be80:	7c26      	ldrb	r6, [r4, #16]
 800be82:	b9b6      	cbnz	r6, 800beb2 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be84:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800be88:	4641      	mov	r1, r8
 800be8a:	4620      	mov	r0, r4
 800be8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be90:	f000 ffe0 	bl	800ce54 <USBD_LL_PrepareReceive>
}
 800be94:	4630      	mov	r0, r6
 800be96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be9e:	2181      	movs	r1, #129	; 0x81
 800bea0:	2202      	movs	r2, #2
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 ff6a 	bl	800cd7c <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bea8:	4631      	mov	r1, r6
 800beaa:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800beae:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800beb0:	e7ca      	b.n	800be48 <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 800beb2:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800beb4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800beb8:	4641      	mov	r1, r8
 800beba:	4620      	mov	r0, r4
 800bebc:	2340      	movs	r3, #64	; 0x40
 800bebe:	f000 ffc9 	bl	800ce54 <USBD_LL_PrepareReceive>
}
 800bec2:	4630      	mov	r0, r6
 800bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800bec8:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 800beca:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
}
 800bece:	4630      	mov	r0, r6
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bed4 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800bed4:	b119      	cbz	r1, 800bede <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800bed6:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800beda:	2000      	movs	r0, #0
 800bedc:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bede:	2003      	movs	r0, #3
}
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop

0800bee4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bee4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bee8:	b12b      	cbz	r3, 800bef6 <USBD_CDC_SetTxBuffer+0x12>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800beea:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800beec:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bef0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800bef4:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bef6:	2003      	movs	r0, #3
}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop

0800befc <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800befc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bf00:	b11b      	cbz	r3, 800bf0a <USBD_CDC_SetRxBuffer+0xe>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800bf02:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800bf04:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800bf08:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bf0a:	2003      	movs	r0, #3
}
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop

0800bf10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf10:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf12:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800bf16:	b18d      	cbz	r5, 800bf3c <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800bf18:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800bf1c:	b10c      	cbz	r4, 800bf22 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bf1e:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800bf20:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf22:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    hcdc->TxState = 1U;
 800bf26:	2101      	movs	r1, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bf28:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
    hcdc->TxState = 1U;
 800bf2c:	f8c5 1214 	str.w	r1, [r5, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bf30:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf32:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bf34:	f000 ff80 	bl	800ce38 <USBD_LL_Transmit>
    ret = USBD_OK;
 800bf38:	4620      	mov	r0, r4
}
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800bf3c:	2003      	movs	r0, #3
}
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}

0800bf40 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf40:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800bf44:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800bf46:	b18a      	cbz	r2, 800bf6c <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf48:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf4a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf4e:	b134      	cbz	r4, 800bf5e <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf50:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf52:	2340      	movs	r3, #64	; 0x40
 800bf54:	2101      	movs	r1, #1
 800bf56:	f000 ff7d 	bl	800ce54 <USBD_LL_PrepareReceive>
}
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf62:	2101      	movs	r1, #1
 800bf64:	f000 ff76 	bl	800ce54 <USBD_LL_PrepareReceive>
}
 800bf68:	4620      	mov	r0, r4
 800bf6a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800bf6c:	2403      	movs	r4, #3
}
 800bf6e:	4620      	mov	r0, r4
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	bf00      	nop

0800bf74 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf74:	b178      	cbz	r0, 800bf96 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bf7c:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bf80:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf84:	b109      	cbz	r1, 800bf8a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800bf86:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf8a:	2301      	movs	r3, #1
  pdev->id = id;
 800bf8c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf8e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf92:	f000 beb1 	b.w	800ccf8 <USBD_LL_Init>

  return ret;
}
 800bf96:	2003      	movs	r0, #3
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop

0800bf9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf9c:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800bf9e:	2400      	movs	r4, #0
{
 800bfa0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800bfa2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800bfa6:	b181      	cbz	r1, 800bfca <USBD_RegisterClass+0x2e>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bfa8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800bfaa:	4605      	mov	r5, r0
  pdev->pClass = pclass;
 800bfac:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bfb0:	b143      	cbz	r3, 800bfc4 <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bfb2:	f10d 0006 	add.w	r0, sp, #6
 800bfb6:	4798      	blx	r3
 800bfb8:	4603      	mov	r3, r0
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bfba:	4620      	mov	r0, r4
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bfbc:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
}
 800bfc0:	b003      	add	sp, #12
 800bfc2:	bd30      	pop	{r4, r5, pc}
  return USBD_OK;
 800bfc4:	4618      	mov	r0, r3
}
 800bfc6:	b003      	add	sp, #12
 800bfc8:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800bfca:	2003      	movs	r0, #3
}
 800bfcc:	b003      	add	sp, #12
 800bfce:	bd30      	pop	{r4, r5, pc}

0800bfd0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bfd0:	f000 bec6 	b.w	800cd60 <USBD_LL_Start>

0800bfd4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800bfd4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bfd8:	b10b      	cbz	r3, 800bfde <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4718      	bx	r3
  }

  return ret;
}
 800bfde:	2003      	movs	r0, #3
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop

0800bfe4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfe4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bfe6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bfea:	b10b      	cbz	r3, 800bff0 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	4798      	blx	r3
  }

  return USBD_OK;
}
 800bff0:	2000      	movs	r0, #0
 800bff2:	bd08      	pop	{r3, pc}

0800bff4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bff4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bff6:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800bffa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bffc:	4628      	mov	r0, r5
 800bffe:	f000 fbb9 	bl	800c774 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800c002:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800c006:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800c008:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 800c00c:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800c010:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800c014:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800c016:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800c01a:	d009      	beq.n	800c030 <USBD_LL_SetupStage+0x3c>
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d013      	beq.n	800c048 <USBD_LL_SetupStage+0x54>
 800c020:	b163      	cbz	r3, 800c03c <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c022:	4620      	mov	r0, r4
 800c024:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800c028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c02c:	f000 bec6 	b.w	800cdbc <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c030:	4629      	mov	r1, r5
 800c032:	4620      	mov	r0, r4
}
 800c034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c038:	f000 bac8 	b.w	800c5cc <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c03c:	4629      	mov	r1, r5
 800c03e:	4620      	mov	r0, r4
}
 800c040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c044:	f000 b924 	b.w	800c290 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c048:	4629      	mov	r1, r5
 800c04a:	4620      	mov	r0, r4
}
 800c04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c050:	f000 baf4 	b.w	800c63c <USBD_StdEPReq>

0800c054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c058:	b929      	cbnz	r1, 800c066 <USBD_LL_DataOutStage+0x12>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c05a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c05e:	2b03      	cmp	r3, #3
 800c060:	d00d      	beq.n	800c07e <USBD_LL_DataOutStage+0x2a>
      }
    }
  }

  return USBD_OK;
}
 800c062:	2000      	movs	r0, #0
 800c064:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c066:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d1f9      	bne.n	800c062 <USBD_LL_DataOutStage+0xe>
      if (pdev->pClass->DataOut != NULL)
 800c06e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0f4      	beq.n	800c062 <USBD_LL_DataOutStage+0xe>
}
 800c078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c07c:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c07e:	e9d0 3557 	ldrd	r3, r5, [r0, #348]	; 0x15c
 800c082:	42ab      	cmp	r3, r5
 800c084:	d808      	bhi.n	800c098 <USBD_LL_DataOutStage+0x44>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c086:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d00f      	beq.n	800c0ae <USBD_LL_DataOutStage+0x5a>
        (void)USBD_CtlSendStatus(pdev);
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fbe6 	bl	800c860 <USBD_CtlSendStatus>
}
 800c094:	2000      	movs	r0, #0
 800c096:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c098:	1b5b      	subs	r3, r3, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c09a:	4611      	mov	r1, r2
 800c09c:	462a      	mov	r2, r5
 800c09e:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800c0a0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c0a4:	bf28      	it	cs
 800c0a6:	461a      	movcs	r2, r3
 800c0a8:	f000 fbd0 	bl	800c84c <USBD_CtlContinueRx>
 800c0ac:	e7d9      	b.n	800c062 <USBD_LL_DataOutStage+0xe>
          if (pdev->pClass->EP0_RxReady != NULL)
 800c0ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0ea      	beq.n	800c08e <USBD_LL_DataOutStage+0x3a>
            pdev->pClass->EP0_RxReady(pdev);
 800c0b8:	4798      	blx	r3
 800c0ba:	e7e8      	b.n	800c08e <USBD_LL_DataOutStage+0x3a>

0800c0bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0c0:	b949      	cbnz	r1, 800c0d6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c0c2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d011      	beq.n	800c0ee <USBD_LL_DataInStage+0x32>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c0ca:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d022      	beq.n	800c118 <USBD_LL_DataInStage+0x5c>
      }
    }
  }

  return USBD_OK;
}
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d1f9      	bne.n	800c0d2 <USBD_LL_DataInStage+0x16>
      if (pdev->pClass->DataIn != NULL)
 800c0de:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d0f4      	beq.n	800c0d2 <USBD_LL_DataInStage+0x16>
}
 800c0e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c0ec:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800c0ee:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800c0f2:	460d      	mov	r5, r1
 800c0f4:	42b3      	cmp	r3, r6
 800c0f6:	d814      	bhi.n	800c122 <USBD_LL_DataInStage+0x66>
        if ((pep->maxpacket == pep->rem_length) &&
 800c0f8:	d020      	beq.n	800c13c <USBD_LL_DataInStage+0x80>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0fa:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d029      	beq.n	800c156 <USBD_LL_DataInStage+0x9a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c102:	2180      	movs	r1, #128	; 0x80
 800c104:	4620      	mov	r0, r4
 800c106:	f000 fe59 	bl	800cdbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 fbb4 	bl	800c878 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800c110:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800c114:	2b01      	cmp	r3, #1
 800c116:	d1dc      	bne.n	800c0d2 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	2000      	movs	r0, #0
      pdev->dev_test_mode = 0U;
 800c11c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 800c120:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800c122:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c124:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c126:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c128:	461a      	mov	r2, r3
 800c12a:	f000 fb77 	bl	800c81c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c12e:	462b      	mov	r3, r5
 800c130:	462a      	mov	r2, r5
 800c132:	4629      	mov	r1, r5
 800c134:	4620      	mov	r0, r4
 800c136:	f000 fe8d 	bl	800ce54 <USBD_LL_PrepareReceive>
 800c13a:	e7c6      	b.n	800c0ca <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800c13c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800c13e:	4293      	cmp	r3, r2
 800c140:	d8db      	bhi.n	800c0fa <USBD_LL_DataInStage+0x3e>
            (pep->total_length >= pep->maxpacket) &&
 800c142:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800c146:	429a      	cmp	r2, r3
 800c148:	d2d7      	bcs.n	800c0fa <USBD_LL_DataInStage+0x3e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c14a:	460a      	mov	r2, r1
 800c14c:	f000 fb66 	bl	800c81c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c150:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800c154:	e7eb      	b.n	800c12e <USBD_LL_DataInStage+0x72>
            if (pdev->pClass->EP0_TxSent != NULL)
 800c156:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d0d0      	beq.n	800c102 <USBD_LL_DataInStage+0x46>
              pdev->pClass->EP0_TxSent(pdev);
 800c160:	4620      	mov	r0, r4
 800c162:	4798      	blx	r3
 800c164:	e7cd      	b.n	800c102 <USBD_LL_DataInStage+0x46>
 800c166:	bf00      	nop

0800c168 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c168:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c16a:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 800c16c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c170:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800c174:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c176:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800c17a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 800c17e:	b1eb      	cbz	r3, 800c1bc <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800c180:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	4604      	mov	r4, r0
  if (pdev->pClassData != NULL)
 800c188:	b112      	cbz	r2, 800c190 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	b103      	cbz	r3, 800c190 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c18e:	4798      	blx	r3

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c190:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c192:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c194:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c196:	4620      	mov	r0, r4
 800c198:	462b      	mov	r3, r5
 800c19a:	4611      	mov	r1, r2
 800c19c:	f000 fdee 	bl	800cd7c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1a0:	462b      	mov	r3, r5
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2180      	movs	r1, #128	; 0x80
 800c1a6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c1a8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1ac:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c1b0:	f000 fde4 	bl	800cd7c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
 800c1b4:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c1b6:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c1b8:	6225      	str	r5, [r4, #32]
}
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c1bc:	2003      	movs	r0, #3
}
 800c1be:	4770      	bx	lr

0800c1c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c1c0:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800c1c2:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c1c4:	7419      	strb	r1, [r3, #16]
}
 800c1c6:	4770      	bx	lr

0800c1c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c1c8:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1ca:	2104      	movs	r1, #4

  return USBD_OK;
}
 800c1cc:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800c1ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c1d2:	b2d2      	uxtb	r2, r2
 800c1d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c1d8:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
}
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop

0800c1e0 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c1e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c1e4:	2b04      	cmp	r3, #4
 800c1e6:	d104      	bne.n	800c1f2 <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c1e8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop

0800c1f8 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800c1f8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c1fc:	b15a      	cbz	r2, 800c216 <USBD_LL_SOF+0x1e>
{
 800c1fe:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c200:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c204:	2b03      	cmp	r3, #3
 800c206:	d001      	beq.n	800c20c <USBD_LL_SOF+0x14>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800c208:	2000      	movs	r0, #0
}
 800c20a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800c20c:	69d3      	ldr	r3, [r2, #28]
 800c20e:	b123      	cbz	r3, 800c21a <USBD_LL_SOF+0x22>
      (void)pdev->pClass->SOF(pdev);
 800c210:	4798      	blx	r3
  return USBD_OK;
 800c212:	2000      	movs	r0, #0
}
 800c214:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c216:	2003      	movs	r0, #3
}
 800c218:	4770      	bx	lr
  return USBD_OK;
 800c21a:	4618      	mov	r0, r3
}
 800c21c:	bd08      	pop	{r3, pc}
 800c21e:	bf00      	nop

0800c220 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c220:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c224:	b15a      	cbz	r2, 800c23e <USBD_LL_IsoINIncomplete+0x1e>
{
 800c226:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c228:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	d001      	beq.n	800c234 <USBD_LL_IsoINIncomplete+0x14>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c230:	2000      	movs	r0, #0
}
 800c232:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c234:	6a13      	ldr	r3, [r2, #32]
 800c236:	b123      	cbz	r3, 800c242 <USBD_LL_IsoINIncomplete+0x22>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c238:	4798      	blx	r3
  return USBD_OK;
 800c23a:	2000      	movs	r0, #0
}
 800c23c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c23e:	2003      	movs	r0, #3
}
 800c240:	4770      	bx	lr
  return USBD_OK;
 800c242:	4618      	mov	r0, r3
}
 800c244:	bd08      	pop	{r3, pc}
 800c246:	bf00      	nop

0800c248 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800c248:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800c24c:	b15a      	cbz	r2, 800c266 <USBD_LL_IsoOUTIncomplete+0x1e>
{
 800c24e:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c250:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c254:	2b03      	cmp	r3, #3
 800c256:	d001      	beq.n	800c25c <USBD_LL_IsoOUTIncomplete+0x14>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800c258:	2000      	movs	r0, #0
}
 800c25a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c25c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c25e:	b123      	cbz	r3, 800c26a <USBD_LL_IsoOUTIncomplete+0x22>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c260:	4798      	blx	r3
  return USBD_OK;
 800c262:	2000      	movs	r0, #0
}
 800c264:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c266:	2003      	movs	r0, #3
}
 800c268:	4770      	bx	lr
  return USBD_OK;
 800c26a:	4618      	mov	r0, r3
}
 800c26c:	bd08      	pop	{r3, pc}
 800c26e:	bf00      	nop

0800c270 <USBD_LL_DevConnected>:
 800c270:	2000      	movs	r0, #0
 800c272:	4770      	bx	lr

0800c274 <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c274:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800c276:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c27a:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800c27e:	b12a      	cbz	r2, 800c28c <USBD_LL_DevDisconnected+0x18>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c280:	6852      	ldr	r2, [r2, #4]
 800c282:	7901      	ldrb	r1, [r0, #4]
{
 800c284:	b508      	push	{r3, lr}
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c286:	4790      	blx	r2
  }

  return USBD_OK;
}
 800c288:	2000      	movs	r0, #0
 800c28a:	bd08      	pop	{r3, pc}
 800c28c:	2000      	movs	r0, #0
 800c28e:	4770      	bx	lr

0800c290 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	780c      	ldrb	r4, [r1, #0]
 800c294:	b082      	sub	sp, #8
 800c296:	460e      	mov	r6, r1
 800c298:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c29e:	2c20      	cmp	r4, #32
 800c2a0:	d00e      	beq.n	800c2c0 <USBD_StdDevReq+0x30>
 800c2a2:	2c40      	cmp	r4, #64	; 0x40
 800c2a4:	d00c      	beq.n	800c2c0 <USBD_StdDevReq+0x30>
 800c2a6:	b1ac      	cbz	r4, 800c2d4 <USBD_StdDevReq+0x44>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2a8:	2180      	movs	r1, #128	; 0x80
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f000 fd86 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c2b4:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2b6:	f000 fd81 	bl	800cdbc <USBD_LL_StallEP>
}
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	b002      	add	sp, #8
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2c0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	4798      	blx	r3
 800c2cc:	4604      	mov	r4, r0
}
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	b002      	add	sp, #8
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800c2d4:	784b      	ldrb	r3, [r1, #1]
 800c2d6:	2b09      	cmp	r3, #9
 800c2d8:	d8e6      	bhi.n	800c2a8 <USBD_StdDevReq+0x18>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <USBD_StdDevReq+0x50>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c341 	.word	0x0800c341
 800c2e4:	0800c36f 	.word	0x0800c36f
 800c2e8:	0800c2a9 	.word	0x0800c2a9
 800c2ec:	0800c38b 	.word	0x0800c38b
 800c2f0:	0800c2a9 	.word	0x0800c2a9
 800c2f4:	0800c39d 	.word	0x0800c39d
 800c2f8:	0800c3d5 	.word	0x0800c3d5
 800c2fc:	0800c2a9 	.word	0x0800c2a9
 800c300:	0800c3f1 	.word	0x0800c3f1
 800c304:	0800c309 	.word	0x0800c309
  cfgidx = (uint8_t)(req->wValue);
 800c308:	7889      	ldrb	r1, [r1, #2]
 800c30a:	4eaf      	ldr	r6, [pc, #700]	; (800c5c8 <USBD_StdDevReq+0x338>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c30c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c30e:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c310:	f200 813d 	bhi.w	800c58e <USBD_StdDevReq+0x2fe>
  switch (pdev->dev_state)
 800c314:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c318:	2b02      	cmp	r3, #2
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	f000 8125 	beq.w	800c56a <USBD_StdDevReq+0x2da>
 800c320:	2a03      	cmp	r2, #3
 800c322:	f000 80ff 	beq.w	800c524 <USBD_StdDevReq+0x294>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c326:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800c328:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c32a:	f000 fd47 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c32e:	2100      	movs	r1, #0
 800c330:	4628      	mov	r0, r5
 800c332:	f000 fd43 	bl	800cdbc <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c336:	7831      	ldrb	r1, [r6, #0]
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff fe53 	bl	800bfe4 <USBD_ClrClassConfig>
      break;
 800c33e:	e7bc      	b.n	800c2ba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c340:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c344:	3a01      	subs	r2, #1
 800c346:	2a02      	cmp	r2, #2
 800c348:	d86a      	bhi.n	800c420 <USBD_StdDevReq+0x190>
      if (req->wLength != 0x2U)
 800c34a:	88ca      	ldrh	r2, [r1, #6]
 800c34c:	2a02      	cmp	r2, #2
 800c34e:	d167      	bne.n	800c420 <USBD_StdDevReq+0x190>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c350:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800c352:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c356:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800c358:	b10a      	cbz	r2, 800c35e <USBD_StdDevReq+0xce>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c35a:	2203      	movs	r2, #3
 800c35c:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c35e:	2202      	movs	r2, #2
 800c360:	f105 010c 	add.w	r1, r5, #12
 800c364:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800c366:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c368:	f000 fa4a 	bl	800c800 <USBD_CtlSendData>
      break;
 800c36c:	e7a5      	b.n	800c2ba <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800c36e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c372:	3b01      	subs	r3, #1
 800c374:	2b02      	cmp	r3, #2
 800c376:	d853      	bhi.n	800c420 <USBD_StdDevReq+0x190>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c378:	884b      	ldrh	r3, [r1, #2]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d19d      	bne.n	800c2ba <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c384:	f000 fa6c 	bl	800c860 <USBD_CtlSendStatus>
 800c388:	e797      	b.n	800c2ba <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c38a:	884b      	ldrh	r3, [r1, #2]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d194      	bne.n	800c2ba <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800c390:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c394:	4628      	mov	r0, r5
 800c396:	f000 fa63 	bl	800c860 <USBD_CtlSendStatus>
 800c39a:	e78e      	b.n	800c2ba <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c39c:	888b      	ldrh	r3, [r1, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d13e      	bne.n	800c420 <USBD_StdDevReq+0x190>
 800c3a2:	88cb      	ldrh	r3, [r1, #6]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d13b      	bne.n	800c420 <USBD_StdDevReq+0x190>
 800c3a8:	884e      	ldrh	r6, [r1, #2]
 800c3aa:	2e7f      	cmp	r6, #127	; 0x7f
 800c3ac:	d838      	bhi.n	800c420 <USBD_StdDevReq+0x190>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d034      	beq.n	800c420 <USBD_StdDevReq+0x190>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3b6:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800c3b8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3bc:	f000 fd2e 	bl	800ce1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f000 fa4d 	bl	800c860 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c3c6:	2e00      	cmp	r6, #0
 800c3c8:	f040 80cb 	bne.w	800c562 <USBD_StdDevReq+0x2d2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c3d2:	e772      	b.n	800c2ba <USBD_StdDevReq+0x2a>
          USBD_GetDescriptor(pdev, req);
 800c3d4:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	0a13      	lsrs	r3, r2, #8
 800c3da:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	2b06      	cmp	r3, #6
 800c3e2:	d81d      	bhi.n	800c420 <USBD_StdDevReq+0x190>
 800c3e4:	e8df f003 	tbb	[pc, r3]
 800c3e8:	1c4d606d 	.word	0x1c4d606d
 800c3ec:	431c      	.short	0x431c
 800c3ee:	27          	.byte	0x27
 800c3ef:	00          	.byte	0x00
  if (req->wLength != 1U)
 800c3f0:	88ca      	ldrh	r2, [r1, #6]
 800c3f2:	2a01      	cmp	r2, #1
 800c3f4:	d114      	bne.n	800c420 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800c3f6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800c3fa:	2902      	cmp	r1, #2
 800c3fc:	b2cb      	uxtb	r3, r1
 800c3fe:	f200 808a 	bhi.w	800c516 <USBD_StdDevReq+0x286>
 800c402:	2b00      	cmp	r3, #0
 800c404:	f43f af50 	beq.w	800c2a8 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800c408:	2300      	movs	r3, #0
 800c40a:	4601      	mov	r1, r0
 800c40c:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c410:	f000 f9f6 	bl	800c800 <USBD_CtlSendData>
        break;
 800c414:	e751      	b.n	800c2ba <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c416:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d15d      	bne.n	800c4dc <USBD_StdDevReq+0x24c>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c420:	2180      	movs	r1, #128	; 0x80
 800c422:	4628      	mov	r0, r5
 800c424:	f000 fcca 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c428:	4628      	mov	r0, r5
 800c42a:	2100      	movs	r1, #0
 800c42c:	f000 fcc6 	bl	800cdbc <USBD_LL_StallEP>
}
 800c430:	4620      	mov	r0, r4
 800c432:	b002      	add	sp, #8
 800c434:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c436:	7c03      	ldrb	r3, [r0, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1f1      	bne.n	800c420 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c43c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c440:	f10d 0006 	add.w	r0, sp, #6
 800c444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c446:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c448:	2307      	movs	r3, #7
 800c44a:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800c44c:	88f2      	ldrh	r2, [r6, #6]
 800c44e:	2a00      	cmp	r2, #0
 800c450:	d0a0      	beq.n	800c394 <USBD_StdDevReq+0x104>
    if (len != 0U)
 800c452:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0e2      	beq.n	800c420 <USBD_StdDevReq+0x190>
      len = MIN(len, req->wLength);
 800c45a:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c45c:	4601      	mov	r1, r0
 800c45e:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800c460:	bf28      	it	cs
 800c462:	461a      	movcs	r2, r3
 800c464:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c468:	f000 f9ca 	bl	800c800 <USBD_CtlSendData>
 800c46c:	e725      	b.n	800c2ba <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c46e:	7c03      	ldrb	r3, [r0, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1d5      	bne.n	800c420 <USBD_StdDevReq+0x190>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c474:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c478:	f10d 0006 	add.w	r0, sp, #6
 800c47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47e:	4798      	blx	r3
  if (err != 0U)
 800c480:	e7e4      	b.n	800c44c <USBD_StdDevReq+0x1bc>
      switch ((uint8_t)(req->wValue))
 800c482:	b2d2      	uxtb	r2, r2
 800c484:	2a05      	cmp	r2, #5
 800c486:	d8cb      	bhi.n	800c420 <USBD_StdDevReq+0x190>
 800c488:	a301      	add	r3, pc, #4	; (adr r3, 800c490 <USBD_StdDevReq+0x200>)
 800c48a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c48e:	bf00      	nop
 800c490:	0800c417 	.word	0x0800c417
 800c494:	0800c50b 	.word	0x0800c50b
 800c498:	0800c4ff 	.word	0x0800c4ff
 800c49c:	0800c4f3 	.word	0x0800c4f3
 800c4a0:	0800c4e7 	.word	0x0800c4e7
 800c4a4:	0800c4d3 	.word	0x0800c4d3
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4a8:	7c03      	ldrb	r3, [r0, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f040 8083 	bne.w	800c5b6 <USBD_StdDevReq+0x326>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c4b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c4b4:	f10d 0006 	add.w	r0, sp, #6
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4bc:	2302      	movs	r3, #2
 800c4be:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c4c0:	e7c4      	b.n	800c44c <USBD_StdDevReq+0x1bc>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4c6:	f10d 0106 	add.w	r1, sp, #6
 800c4ca:	7c00      	ldrb	r0, [r0, #16]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4798      	blx	r3
  if (err != 0U)
 800c4d0:	e7bc      	b.n	800c44c <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0a1      	beq.n	800c420 <USBD_StdDevReq+0x190>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4dc:	f10d 0106 	add.w	r1, sp, #6
 800c4e0:	7c28      	ldrb	r0, [r5, #16]
 800c4e2:	4798      	blx	r3
  if (err != 0U)
 800c4e4:	e7b2      	b.n	800c44c <USBD_StdDevReq+0x1bc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1f5      	bne.n	800c4dc <USBD_StdDevReq+0x24c>
 800c4f0:	e796      	b.n	800c420 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1ef      	bne.n	800c4dc <USBD_StdDevReq+0x24c>
 800c4fc:	e790      	b.n	800c420 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e9      	bne.n	800c4dc <USBD_StdDevReq+0x24c>
 800c508:	e78a      	b.n	800c420 <USBD_StdDevReq+0x190>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c50a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e3      	bne.n	800c4dc <USBD_StdDevReq+0x24c>
 800c514:	e784      	b.n	800c420 <USBD_StdDevReq+0x190>
    switch (pdev->dev_state)
 800c516:	2b03      	cmp	r3, #3
 800c518:	f47f aec6 	bne.w	800c2a8 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c51c:	1d01      	adds	r1, r0, #4
 800c51e:	f000 f96f 	bl	800c800 <USBD_CtlSendData>
        break;
 800c522:	e6ca      	b.n	800c2ba <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800c524:	2900      	cmp	r1, #0
 800c526:	d03b      	beq.n	800c5a0 <USBD_StdDevReq+0x310>
      else if (cfgidx != pdev->dev_config)
 800c528:	6841      	ldr	r1, [r0, #4]
 800c52a:	2901      	cmp	r1, #1
 800c52c:	f43f af32 	beq.w	800c394 <USBD_StdDevReq+0x104>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c530:	b2c9      	uxtb	r1, r1
 800c532:	f7ff fd57 	bl	800bfe4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c536:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c538:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800c53a:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c53c:	f7ff fd4a 	bl	800bfd4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c540:	4606      	mov	r6, r0
 800c542:	2800      	cmp	r0, #0
 800c544:	f43f af26 	beq.w	800c394 <USBD_StdDevReq+0x104>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c548:	2180      	movs	r1, #128	; 0x80
 800c54a:	4628      	mov	r0, r5
 800c54c:	f000 fc36 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c550:	2100      	movs	r1, #0
 800c552:	4628      	mov	r0, r5
 800c554:	4634      	mov	r4, r6
 800c556:	f000 fc31 	bl	800cdbc <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c55a:	7929      	ldrb	r1, [r5, #4]
 800c55c:	4628      	mov	r0, r5
 800c55e:	f7ff fd41 	bl	800bfe4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c562:	2302      	movs	r3, #2
 800c564:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c568:	e6a7      	b.n	800c2ba <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800c56a:	2900      	cmp	r1, #0
 800c56c:	f43f af12 	beq.w	800c394 <USBD_StdDevReq+0x104>
        pdev->dev_config = cfgidx;
 800c570:	2101      	movs	r1, #1
 800c572:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c574:	f7ff fd2e 	bl	800bfd4 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c578:	4604      	mov	r4, r0
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f47f af50 	bne.w	800c420 <USBD_StdDevReq+0x190>
          (void)USBD_CtlSendStatus(pdev);
 800c580:	4628      	mov	r0, r5
 800c582:	f000 f96d 	bl	800c860 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c586:	2303      	movs	r3, #3
 800c588:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800c58c:	e695      	b.n	800c2ba <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c58e:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800c590:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c592:	f000 fc13 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c596:	4628      	mov	r0, r5
 800c598:	2100      	movs	r1, #0
 800c59a:	f000 fc0f 	bl	800cdbc <USBD_LL_StallEP>
    return USBD_FAIL;
 800c59e:	e68c      	b.n	800c2ba <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5a0:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800c5a2:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a4:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5a6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5aa:	f7ff fd1b 	bl	800bfe4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f000 f956 	bl	800c860 <USBD_CtlSendStatus>
 800c5b4:	e681      	b.n	800c2ba <USBD_StdDevReq+0x2a>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c5b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c5ba:	f10d 0006 	add.w	r0, sp, #6
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c5c6:	e741      	b.n	800c44c <USBD_StdDevReq+0x1bc>
 800c5c8:	2400071c 	.word	0x2400071c

0800c5cc <USBD_StdItfReq>:
{
 800c5cc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5ce:	780b      	ldrb	r3, [r1, #0]
{
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c5d8:	2a40      	cmp	r2, #64	; 0x40
 800c5da:	d00b      	beq.n	800c5f4 <USBD_StdItfReq+0x28>
 800c5dc:	065b      	lsls	r3, r3, #25
 800c5de:	d509      	bpl.n	800c5f4 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 800c5e0:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5e2:	2180      	movs	r1, #128	; 0x80
 800c5e4:	f000 fbea 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	f000 fbe6 	bl	800cdbc <USBD_LL_StallEP>
}
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800c5f4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d812      	bhi.n	800c624 <USBD_StdItfReq+0x58>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5fe:	792b      	ldrb	r3, [r5, #4]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d80f      	bhi.n	800c624 <USBD_StdItfReq+0x58>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c604:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c608:	4629      	mov	r1, r5
 800c60a:	4620      	mov	r0, r4
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c610:	88eb      	ldrh	r3, [r5, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c612:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1eb      	bne.n	800c5f0 <USBD_StdItfReq+0x24>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d1e9      	bne.n	800c5f0 <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 f91f 	bl	800c860 <USBD_CtlSendStatus>
 800c622:	e7e5      	b.n	800c5f0 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c624:	2180      	movs	r1, #128	; 0x80
 800c626:	4620      	mov	r0, r4
 800c628:	f000 fbc8 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c62c:	2100      	movs	r1, #0
 800c62e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800c630:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800c632:	f000 fbc3 	bl	800cdbc <USBD_LL_StallEP>
}
 800c636:	4628      	mov	r0, r5
 800c638:	bd38      	pop	{r3, r4, r5, pc}
 800c63a:	bf00      	nop

0800c63c <USBD_StdEPReq>:
{
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	780b      	ldrb	r3, [r1, #0]
 800c640:	460d      	mov	r5, r1
 800c642:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c644:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c648:	2b20      	cmp	r3, #32
 800c64a:	d01b      	beq.n	800c684 <USBD_StdEPReq+0x48>
 800c64c:	2b40      	cmp	r3, #64	; 0x40
 800c64e:	d019      	beq.n	800c684 <USBD_StdEPReq+0x48>
 800c650:	b303      	cbz	r3, 800c694 <USBD_StdEPReq+0x58>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c652:	2180      	movs	r1, #128	; 0x80
 800c654:	4620      	mov	r0, r4
 800c656:	f000 fbb1 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c65a:	4620      	mov	r0, r4
 800c65c:	2100      	movs	r1, #0
 800c65e:	f000 fbad 	bl	800cdbc <USBD_LL_StallEP>
}
 800c662:	2000      	movs	r0, #0
 800c664:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 800c666:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	d04e      	beq.n	800c70e <USBD_StdEPReq+0xd2>
 800c670:	2a03      	cmp	r2, #3
 800c672:	d1ee      	bne.n	800c652 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c674:	886b      	ldrh	r3, [r5, #2]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1f3      	bne.n	800c662 <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c67a:	064e      	lsls	r6, r1, #25
 800c67c:	d172      	bne.n	800c764 <USBD_StdEPReq+0x128>
                (void)USBD_CtlSendStatus(pdev);
 800c67e:	4620      	mov	r0, r4
 800c680:	f000 f8ee 	bl	800c860 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c684:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800c688:	4629      	mov	r1, r5
 800c68a:	4620      	mov	r0, r4
 800c68c:	689b      	ldr	r3, [r3, #8]
}
 800c68e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c692:	4718      	bx	r3
      switch (req->bRequest)
 800c694:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800c696:	888a      	ldrh	r2, [r1, #4]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 800c69c:	d0e3      	beq.n	800c666 <USBD_StdEPReq+0x2a>
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d024      	beq.n	800c6ec <USBD_StdEPReq+0xb0>
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1d5      	bne.n	800c652 <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 800c6a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	b2d8      	uxtb	r0, r3
 800c6ae:	d037      	beq.n	800c720 <USBD_StdEPReq+0xe4>
 800c6b0:	2803      	cmp	r0, #3
 800c6b2:	d1ce      	bne.n	800c652 <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c6b4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800c6b8:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c6ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c6be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800c6c2:	d43e      	bmi.n	800c742 <USBD_StdEPReq+0x106>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6c4:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d0c2      	beq.n	800c652 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6cc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c6d0:	2514      	movs	r5, #20
 800c6d2:	fb05 4503 	mla	r5, r5, r3, r4
 800c6d6:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d13c      	bne.n	800c758 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 800c6de:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	f000 f88b 	bl	800c800 <USBD_CtlSendData>
              break;
 800c6ea:	e7ba      	b.n	800c662 <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800c6ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	d00b      	beq.n	800c70e <USBD_StdEPReq+0xd2>
 800c6f6:	2a03      	cmp	r2, #3
 800c6f8:	d1ab      	bne.n	800c652 <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6fa:	886b      	ldrh	r3, [r5, #2]
 800c6fc:	b91b      	cbnz	r3, 800c706 <USBD_StdEPReq+0xca>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c6fe:	064a      	lsls	r2, r1, #25
 800c700:	d001      	beq.n	800c706 <USBD_StdEPReq+0xca>
 800c702:	88eb      	ldrh	r3, [r5, #6]
 800c704:	b39b      	cbz	r3, 800c76e <USBD_StdEPReq+0x132>
              (void)USBD_CtlSendStatus(pdev);
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f8aa 	bl	800c860 <USBD_CtlSendStatus>
              break;
 800c70c:	e7a9      	b.n	800c662 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c70e:	064b      	lsls	r3, r1, #25
 800c710:	d09f      	beq.n	800c652 <USBD_StdEPReq+0x16>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c712:	f000 fb53 	bl	800cdbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c716:	4620      	mov	r0, r4
 800c718:	2180      	movs	r1, #128	; 0x80
 800c71a:	f000 fb4f 	bl	800cdbc <USBD_LL_StallEP>
 800c71e:	e7a0      	b.n	800c662 <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c720:	0648      	lsls	r0, r1, #25
 800c722:	d196      	bne.n	800c652 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c724:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 800c726:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c72a:	4620      	mov	r0, r4
 800c72c:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c730:	bf4c      	ite	mi
 800c732:	f104 0114 	addmi.w	r1, r4, #20
 800c736:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 800c73a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c73c:	f000 f860 	bl	800c800 <USBD_CtlSendData>
              break;
 800c740:	e78f      	b.n	800c662 <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c744:	2b00      	cmp	r3, #0
 800c746:	d084      	beq.n	800c652 <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c748:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c74c:	1c5d      	adds	r5, r3, #1
 800c74e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c752:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c756:	e7c0      	b.n	800c6da <USBD_StdEPReq+0x9e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fb4b 	bl	800cdf4 <USBD_LL_IsStallEP>
 800c75e:	b120      	cbz	r0, 800c76a <USBD_StdEPReq+0x12e>
                pep->status = 0x0001U;
 800c760:	2301      	movs	r3, #1
 800c762:	e7bc      	b.n	800c6de <USBD_StdEPReq+0xa2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c764:	f000 fb38 	bl	800cdd8 <USBD_LL_ClearStallEP>
 800c768:	e789      	b.n	800c67e <USBD_StdEPReq+0x42>
                pep->status = 0x0000U;
 800c76a:	6028      	str	r0, [r5, #0]
 800c76c:	e7b8      	b.n	800c6e0 <USBD_StdEPReq+0xa4>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c76e:	f000 fb25 	bl	800cdbc <USBD_LL_StallEP>
 800c772:	e7c8      	b.n	800c706 <USBD_StdEPReq+0xca>

0800c774 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800c774:	780b      	ldrb	r3, [r1, #0]
 800c776:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800c778:	784b      	ldrb	r3, [r1, #1]
 800c77a:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c77c:	78ca      	ldrb	r2, [r1, #3]
 800c77e:	788b      	ldrb	r3, [r1, #2]
 800c780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800c784:	8043      	strh	r3, [r0, #2]
 800c786:	794a      	ldrb	r2, [r1, #5]
 800c788:	790b      	ldrb	r3, [r1, #4]
 800c78a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800c78e:	8083      	strh	r3, [r0, #4]
 800c790:	79ca      	ldrb	r2, [r1, #7]
 800c792:	798b      	ldrb	r3, [r1, #6]
 800c794:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800c798:	80c3      	strh	r3, [r0, #6]
}
 800c79a:	4770      	bx	lr

0800c79c <USBD_CtlError>:
{
 800c79c:	b510      	push	{r4, lr}
 800c79e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7a0:	2180      	movs	r1, #128	; 0x80
 800c7a2:	f000 fb0b 	bl	800cdbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4620      	mov	r0, r4
}
 800c7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7ae:	f000 bb05 	b.w	800cdbc <USBD_LL_StallEP>
 800c7b2:	bf00      	nop

0800c7b4 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800c7b4:	b308      	cbz	r0, 800c7fa <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800c7b6:	7803      	ldrb	r3, [r0, #0]
{
 800c7b8:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 800c7ba:	b1fb      	cbz	r3, 800c7fc <USBD_GetString+0x48>
 800c7bc:	4604      	mov	r4, r0
 800c7be:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 800c7c2:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 800c7c4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2d00      	cmp	r5, #0
 800c7cc:	d1f9      	bne.n	800c7c2 <USBD_GetString+0xe>
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7d2:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7d4:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800c7d6:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c7d8:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800c7da:	7804      	ldrb	r4, [r0, #0]
 800c7dc:	b15c      	cbz	r4, 800c7f6 <USBD_GetString+0x42>
  idx++;
 800c7de:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800c7e0:	2500      	movs	r5, #0
    idx++;
 800c7e2:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800c7e4:	54cc      	strb	r4, [r1, r3]
    idx++;
 800c7e6:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800c7e8:	b2d2      	uxtb	r2, r2
    idx++;
 800c7ea:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800c7ec:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800c7ee:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800c7f2:	2c00      	cmp	r4, #0
 800c7f4:	d1f5      	bne.n	800c7e2 <USBD_GetString+0x2e>
}
 800c7f6:	bc70      	pop	{r4, r5, r6}
 800c7f8:	4770      	bx	lr
 800c7fa:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	e7e8      	b.n	800c7d2 <USBD_GetString+0x1e>

0800c800 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c804:	2502      	movs	r5, #2
{
 800c806:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c808:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c80a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 800c80e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c812:	f000 fb11 	bl	800ce38 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c816:	2000      	movs	r0, #0
 800c818:	bd38      	pop	{r3, r4, r5, pc}
 800c81a:	bf00      	nop

0800c81c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c81c:	b510      	push	{r4, lr}
 800c81e:	460c      	mov	r4, r1
 800c820:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c822:	2100      	movs	r1, #0
 800c824:	4622      	mov	r2, r4
 800c826:	f000 fb07 	bl	800ce38 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c82a:	2000      	movs	r0, #0
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	bf00      	nop

0800c830 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c834:	2503      	movs	r5, #3
{
 800c836:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c838:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c83a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 800c83e:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c842:	f000 fb07 	bl	800ce54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c846:	2000      	movs	r0, #0
 800c848:	bd38      	pop	{r3, r4, r5, pc}
 800c84a:	bf00      	nop

0800c84c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c84c:	b510      	push	{r4, lr}
 800c84e:	460c      	mov	r4, r1
 800c850:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c852:	2100      	movs	r1, #0
 800c854:	4622      	mov	r2, r4
 800c856:	f000 fafd 	bl	800ce54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c85a:	2000      	movs	r0, #0
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	bf00      	nop

0800c860 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c860:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c862:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c864:	2504      	movs	r5, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c866:	461a      	mov	r2, r3
 800c868:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c86a:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c86e:	f000 fae3 	bl	800ce38 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c872:	2000      	movs	r0, #0
 800c874:	bd38      	pop	{r3, r4, r5, pc}
 800c876:	bf00      	nop

0800c878 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c878:	b538      	push	{r3, r4, r5, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c87a:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c87c:	2505      	movs	r5, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c87e:	461a      	mov	r2, r3
 800c880:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c882:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c886:	f000 fae5 	bl	800ce54 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c88a:	2000      	movs	r0, #0
 800c88c:	bd38      	pop	{r3, r4, r5, pc}
 800c88e:	bf00      	nop

0800c890 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c890:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c892:	2200      	movs	r2, #0
 800c894:	4919      	ldr	r1, [pc, #100]	; (800c8fc <MX_USB_DEVICE_Init+0x6c>)
 800c896:	481a      	ldr	r0, [pc, #104]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c898:	f7ff fb6c 	bl	800bf74 <USBD_Init>
 800c89c:	b988      	cbnz	r0, 800c8c2 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c89e:	4919      	ldr	r1, [pc, #100]	; (800c904 <MX_USB_DEVICE_Init+0x74>)
 800c8a0:	4817      	ldr	r0, [pc, #92]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c8a2:	f7ff fb7b 	bl	800bf9c <USBD_RegisterClass>
 800c8a6:	b9a0      	cbnz	r0, 800c8d2 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8a8:	4917      	ldr	r1, [pc, #92]	; (800c908 <MX_USB_DEVICE_Init+0x78>)
 800c8aa:	4815      	ldr	r0, [pc, #84]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c8ac:	f7ff fb12 	bl	800bed4 <USBD_CDC_RegisterInterface>
 800c8b0:	b9b8      	cbnz	r0, 800c8e2 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c8b2:	4813      	ldr	r0, [pc, #76]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c8b4:	f7ff fb8c 	bl	800bfd0 <USBD_Start>
 800c8b8:	b9d0      	cbnz	r0, 800c8f0 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c8ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800c8be:	f7fb ba59 	b.w	8007d74 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800c8c2:	f7f6 fbb3 	bl	800302c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c8c6:	490f      	ldr	r1, [pc, #60]	; (800c904 <MX_USB_DEVICE_Init+0x74>)
 800c8c8:	480d      	ldr	r0, [pc, #52]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c8ca:	f7ff fb67 	bl	800bf9c <USBD_RegisterClass>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d0ea      	beq.n	800c8a8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800c8d2:	f7f6 fbab 	bl	800302c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8d6:	490c      	ldr	r1, [pc, #48]	; (800c908 <MX_USB_DEVICE_Init+0x78>)
 800c8d8:	4809      	ldr	r0, [pc, #36]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c8da:	f7ff fafb 	bl	800bed4 <USBD_CDC_RegisterInterface>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d0e7      	beq.n	800c8b2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800c8e2:	f7f6 fba3 	bl	800302c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c8e6:	4806      	ldr	r0, [pc, #24]	; (800c900 <MX_USB_DEVICE_Init+0x70>)
 800c8e8:	f7ff fb72 	bl	800bfd0 <USBD_Start>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d0e4      	beq.n	800c8ba <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800c8f0:	f7f6 fb9c 	bl	800302c <Error_Handler>
}
 800c8f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800c8f8:	f7fb ba3c 	b.w	8007d74 <HAL_PWREx_EnableUSBVoltageDetector>
 800c8fc:	240003bc 	.word	0x240003bc
 800c900:	2400f248 	.word	0x2400f248
 800c904:	24000290 	.word	0x24000290
 800c908:	240003a0 	.word	0x240003a0

0800c90c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800c90c:	2000      	movs	r0, #0
 800c90e:	4770      	bx	lr

0800c910 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800c910:	2000      	movs	r0, #0
 800c912:	4770      	bx	lr

0800c914 <CDC_Receive_FS>:
{
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c918:	4e08      	ldr	r6, [pc, #32]	; (800c93c <CDC_Receive_FS+0x28>)
{
 800c91a:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c91c:	4630      	mov	r0, r6
 800c91e:	4621      	mov	r1, r4
 800c920:	f7ff faec 	bl	800befc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800c924:	4630      	mov	r0, r6
 800c926:	f7ff fb0b 	bl	800bf40 <USBD_CDC_ReceivePacket>
 800c92a:	682a      	ldr	r2, [r5, #0]
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 800c92e:	4621      	mov	r1, r4
 800c930:	4804      	ldr	r0, [pc, #16]	; (800c944 <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 800c932:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 800c934:	f001 fbfa 	bl	800e12c <memcpy>
}
 800c938:	2000      	movs	r0, #0
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
 800c93c:	2400f248 	.word	0x2400f248
 800c940:	24000a48 	.word	0x24000a48
 800c944:	24000948 	.word	0x24000948

0800c948 <CDC_Init_FS>:
{
 800c948:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c94a:	4c06      	ldr	r4, [pc, #24]	; (800c964 <CDC_Init_FS+0x1c>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	4906      	ldr	r1, [pc, #24]	; (800c968 <CDC_Init_FS+0x20>)
 800c950:	4620      	mov	r0, r4
 800c952:	f7ff fac7 	bl	800bee4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c956:	4620      	mov	r0, r4
 800c958:	4904      	ldr	r1, [pc, #16]	; (800c96c <CDC_Init_FS+0x24>)
 800c95a:	f7ff facf 	bl	800befc <USBD_CDC_SetRxBuffer>
}
 800c95e:	2000      	movs	r0, #0
 800c960:	bd10      	pop	{r4, pc}
 800c962:	bf00      	nop
 800c964:	2400f248 	.word	0x2400f248
 800c968:	2400fd18 	.word	0x2400fd18
 800c96c:	2400f518 	.word	0x2400f518

0800c970 <CDC_Control_FS>:
  switch(cmd)
 800c970:	2820      	cmp	r0, #32
 800c972:	d00a      	beq.n	800c98a <CDC_Control_FS+0x1a>
 800c974:	2821      	cmp	r0, #33	; 0x21
 800c976:	d106      	bne.n	800c986 <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <CDC_Control_FS+0x34>)
 800c97a:	6818      	ldr	r0, [r3, #0]
 800c97c:	889a      	ldrh	r2, [r3, #4]
 800c97e:	799b      	ldrb	r3, [r3, #6]
 800c980:	6008      	str	r0, [r1, #0]
 800c982:	808a      	strh	r2, [r1, #4]
 800c984:	718b      	strb	r3, [r1, #6]
}
 800c986:	2000      	movs	r0, #0
 800c988:	4770      	bx	lr
{
 800c98a:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <CDC_Control_FS+0x34>)
 800c98e:	6808      	ldr	r0, [r1, #0]
 800c990:	888c      	ldrh	r4, [r1, #4]
 800c992:	798a      	ldrb	r2, [r1, #6]
 800c994:	6018      	str	r0, [r3, #0]
}
 800c996:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800c998:	809c      	strh	r4, [r3, #4]
 800c99a:	719a      	strb	r2, [r3, #6]
}
 800c99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	240003b4 	.word	0x240003b4

0800c9a8 <CDC_Transmit_FS>:
{
 800c9a8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c9aa:	4c09      	ldr	r4, [pc, #36]	; (800c9d0 <CDC_Transmit_FS+0x28>)
 800c9ac:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800c9b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9b4:	b10b      	cbz	r3, 800c9ba <CDC_Transmit_FS+0x12>
}
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c9ba:	460a      	mov	r2, r1
 800c9bc:	4601      	mov	r1, r0
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f7ff fa90 	bl	800bee4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c9c4:	4620      	mov	r0, r4
}
 800c9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c9ca:	f7ff baa1 	b.w	800bf10 <USBD_CDC_TransmitPacket>
 800c9ce:	bf00      	nop
 800c9d0:	2400f248 	.word	0x2400f248

0800c9d4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9d4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800c9d6:	4801      	ldr	r0, [pc, #4]	; (800c9dc <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9d8:	800b      	strh	r3, [r1, #0]
}
 800c9da:	4770      	bx	lr
 800c9dc:	240003d8 	.word	0x240003d8

0800c9e0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9e0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800c9e2:	4801      	ldr	r0, [pc, #4]	; (800c9e8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800c9e4:	800b      	strh	r3, [r1, #0]
}
 800c9e6:	4770      	bx	lr
 800c9e8:	240003ec 	.word	0x240003ec

0800c9ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9ec:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c9ee:	4c04      	ldr	r4, [pc, #16]	; (800ca00 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800c9f0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c9f2:	4804      	ldr	r0, [pc, #16]	; (800ca04 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	f7ff fedd 	bl	800c7b4 <USBD_GetString>
  return USBD_StrDesc;
}
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	bf00      	nop
 800ca00:	24010518 	.word	0x24010518
 800ca04:	080182a4 	.word	0x080182a4

0800ca08 <USBD_FS_ProductStrDescriptor>:
{
 800ca08:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca0a:	4c04      	ldr	r4, [pc, #16]	; (800ca1c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800ca0c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca0e:	4804      	ldr	r0, [pc, #16]	; (800ca20 <USBD_FS_ProductStrDescriptor+0x18>)
 800ca10:	4621      	mov	r1, r4
 800ca12:	f7ff fecf 	bl	800c7b4 <USBD_GetString>
}
 800ca16:	4620      	mov	r0, r4
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	bf00      	nop
 800ca1c:	24010518 	.word	0x24010518
 800ca20:	080182b8 	.word	0x080182b8

0800ca24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca24:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca26:	4c04      	ldr	r4, [pc, #16]	; (800ca38 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800ca28:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca2a:	4804      	ldr	r0, [pc, #16]	; (800ca3c <USBD_FS_ConfigStrDescriptor+0x18>)
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f7ff fec1 	bl	800c7b4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800ca32:	4620      	mov	r0, r4
 800ca34:	bd10      	pop	{r4, pc}
 800ca36:	bf00      	nop
 800ca38:	24010518 	.word	0x24010518
 800ca3c:	080182d0 	.word	0x080182d0

0800ca40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca40:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca42:	4c04      	ldr	r4, [pc, #16]	; (800ca54 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800ca44:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca46:	4804      	ldr	r0, [pc, #16]	; (800ca58 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800ca48:	4621      	mov	r1, r4
 800ca4a:	f7ff feb3 	bl	800c7b4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800ca4e:	4620      	mov	r0, r4
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	bf00      	nop
 800ca54:	24010518 	.word	0x24010518
 800ca58:	080182dc 	.word	0x080182dc

0800ca5c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca5c:	4a42      	ldr	r2, [pc, #264]	; (800cb68 <USBD_FS_SerialStrDescriptor+0x10c>)
  *length = USB_SIZ_STRING_SERIAL;
 800ca5e:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca60:	4b42      	ldr	r3, [pc, #264]	; (800cb6c <USBD_FS_SerialStrDescriptor+0x110>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca62:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800ca64:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800ca66:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800ca68:	18d3      	adds	r3, r2, r3
 800ca6a:	d101      	bne.n	800ca70 <USBD_FS_SerialStrDescriptor+0x14>
}
 800ca6c:	4840      	ldr	r0, [pc, #256]	; (800cb70 <USBD_FS_SerialStrDescriptor+0x114>)
 800ca6e:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800ca70:	0f1a      	lsrs	r2, r3, #28
 800ca72:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca76:	493f      	ldr	r1, [pc, #252]	; (800cb74 <USBD_FS_SerialStrDescriptor+0x118>)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca78:	bf2c      	ite	cs
 800ca7a:	f102 0037 	addcs.w	r0, r2, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca7e:	f102 0030 	addcc.w	r0, r2, #48	; 0x30
 800ca82:	4a3b      	ldr	r2, [pc, #236]	; (800cb70 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca84:	6809      	ldr	r1, [r1, #0]
{
 800ca86:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca88:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800ca8a:	f3c3 6003 	ubfx	r0, r3, #24, #4
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800ca8e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800ca90:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800ca92:	70d4      	strb	r4, [r2, #3]
 800ca94:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca98:	bf8c      	ite	hi
 800ca9a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca9c:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800ca9e:	7154      	strb	r4, [r2, #5]
 800caa0:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800caa2:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800caa4:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 800caa8:	71d4      	strb	r4, [r2, #7]
 800caaa:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800caac:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800caae:	7254      	strb	r4, [r2, #9]
 800cab0:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cab4:	bf8c      	ite	hi
 800cab6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cab8:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800caba:	72d4      	strb	r4, [r2, #11]
 800cabc:	2400      	movs	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cabe:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800cac0:	f3c3 4003 	ubfx	r0, r3, #16, #4
    pbuf[2 * idx + 1] = 0;
 800cac4:	7354      	strb	r4, [r2, #13]
    if (((value >> 28)) < 0xA)
 800cac6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cac8:	bf8c      	ite	hi
 800caca:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cacc:	3030      	addls	r0, #48	; 0x30
 800cace:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800cad0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800cad4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cad6:	bf8c      	ite	hi
 800cad8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cada:	3030      	addls	r0, #48	; 0x30
 800cadc:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800cade:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800cae2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cae4:	bf8c      	ite	hi
 800cae6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cae8:	3030      	addls	r0, #48	; 0x30
 800caea:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800caec:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800caf0:	f003 030f 	and.w	r3, r3, #15
 800caf4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800caf6:	bf8c      	ite	hi
 800caf8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cafa:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 800cafc:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800cafe:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800cb00:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb04:	bf94      	ite	ls
 800cb06:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb08:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800cb0a:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 800cb0e:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb10:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800cb12:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 800cb16:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb1a:	bf2c      	ite	cs
 800cb1c:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb1e:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800cb20:	7450      	strb	r0, [r2, #17]
 800cb22:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb24:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800cb26:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 800cb2a:	74d0      	strb	r0, [r2, #19]
 800cb2c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800cb2e:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800cb30:	7550      	strb	r0, [r2, #21]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb32:	bf8c      	ite	hi
 800cb34:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb36:	3330      	addls	r3, #48	; 0x30
}
 800cb38:	480d      	ldr	r0, [pc, #52]	; (800cb70 <USBD_FS_SerialStrDescriptor+0x114>)
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb3a:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800cb3c:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800cb40:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb42:	bf8c      	ite	hi
 800cb44:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb46:	3330      	addls	r3, #48	; 0x30
 800cb48:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800cb4a:	f3c1 4303 	ubfx	r3, r1, #16, #4
    pbuf[2 * idx + 1] = 0;
 800cb4e:	2100      	movs	r1, #0
    if (((value >> 28)) < 0xA)
 800cb50:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 800cb52:	75d1      	strb	r1, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb54:	bf94      	ite	ls
 800cb56:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb58:	3337      	addhi	r3, #55	; 0x37
 800cb5a:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	7653      	strb	r3, [r2, #25]
}
 800cb60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	1ff1e800 	.word	0x1ff1e800
 800cb6c:	1ff1e808 	.word	0x1ff1e808
 800cb70:	240003f0 	.word	0x240003f0
 800cb74:	1ff1e804 	.word	0x1ff1e804

0800cb78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cb78:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 800cb7c:	b0b6      	sub	sp, #216	; 0xd8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb7e:	2100      	movs	r1, #0
{
 800cb80:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb82:	22bc      	movs	r2, #188	; 0xbc
 800cb84:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb86:	9106      	str	r1, [sp, #24]
 800cb88:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800cb8c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb90:	f001 fada 	bl	800e148 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cb94:	6822      	ldr	r2, [r4, #0]
 800cb96:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <HAL_PCD_MspInit+0xb4>)
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d002      	beq.n	800cba2 <HAL_PCD_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb9c:	b036      	add	sp, #216	; 0xd8
 800cb9e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cba2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cba6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cbaa:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cbac:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cbae:	9328      	str	r3, [sp, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cbb0:	f7fc f850 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 800cbb4:	bbb0      	cbnz	r0, 800cc24 <HAL_PCD_MspInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbb6:	4c1e      	ldr	r4, [pc, #120]	; (800cc30 <HAL_PCD_MspInit+0xb8>)
    HAL_PWREx_EnableUSBVoltageDetector();
 800cbb8:	f7fb f8dc 	bl	8007d74 <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cbbc:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800cbc0:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbc2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cbc6:	2702      	movs	r7, #2
 800cbc8:	f04f 0800 	mov.w	r8, #0
 800cbcc:	f04f 0900 	mov.w	r9, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbd0:	f043 0301 	orr.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbd4:	a902      	add	r1, sp, #8
 800cbd6:	4817      	ldr	r0, [pc, #92]	; (800cc34 <HAL_PCD_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbd8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cbdc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800cbe0:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cbea:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cbee:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbf2:	f7fa f971 	bl	8006ed8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cbf6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cbfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc02:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cc04:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800cc08:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800cc0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cc14:	f7f8 fc40 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc18:	2065      	movs	r0, #101	; 0x65
 800cc1a:	f7f8 fc77 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 800cc1e:	b036      	add	sp, #216	; 0xd8
 800cc20:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
      Error_Handler();
 800cc24:	f7f6 fa02 	bl	800302c <Error_Handler>
 800cc28:	e7c5      	b.n	800cbb6 <HAL_PCD_MspInit+0x3e>
 800cc2a:	bf00      	nop
 800cc2c:	40080000 	.word	0x40080000
 800cc30:	58024400 	.word	0x58024400
 800cc34:	58020000 	.word	0x58020000

0800cc38 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc38:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800cc3c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cc40:	f7ff b9d8 	b.w	800bff4 <USBD_LL_SetupStage>

0800cc44 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc44:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800cc48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cc4c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cc50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc54:	f7ff b9fe 	b.w	800c054 <USBD_LL_DataOutStage>

0800cc58 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc58:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800cc5c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cc60:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cc64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc66:	f7ff ba29 	b.w	800c0bc <USBD_LL_DataInStage>
 800cc6a:	bf00      	nop

0800cc6c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc6c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cc70:	f7ff bac2 	b.w	800c1f8 <USBD_LL_SOF>

0800cc74 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc74:	68c1      	ldr	r1, [r0, #12]
{
 800cc76:	b510      	push	{r4, lr}
 800cc78:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc7a:	b111      	cbz	r1, 800cc82 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc7c:	2902      	cmp	r1, #2
 800cc7e:	d10a      	bne.n	800cc96 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 800cc80:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc82:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800cc86:	f7ff fa9b 	bl	800c1c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc8a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800cc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc92:	f7ff ba69 	b.w	800c168 <USBD_LL_Reset>
    Error_Handler();
 800cc96:	f7f6 f9c9 	bl	800302c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	e7f1      	b.n	800cc82 <HAL_PCD_ResetCallback+0xe>
 800cc9e:	bf00      	nop

0800cca0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca0:	b510      	push	{r4, lr}
 800cca2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cca4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cca8:	f7ff fa8e 	bl	800c1c8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ccac:	6822      	ldr	r2, [r4, #0]
 800ccae:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800ccb2:	f043 0301 	orr.w	r3, r3, #1
 800ccb6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccba:	6a23      	ldr	r3, [r4, #32]
 800ccbc:	b123      	cbz	r3, 800ccc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ccbe:	4a03      	ldr	r2, [pc, #12]	; (800cccc <HAL_PCD_SuspendCallback+0x2c>)
 800ccc0:	6913      	ldr	r3, [r2, #16]
 800ccc2:	f043 0306 	orr.w	r3, r3, #6
 800ccc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	e000ed00 	.word	0xe000ed00

0800ccd0 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ccd0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ccd4:	f7ff ba84 	b.w	800c1e0 <USBD_LL_Resume>

0800ccd8 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ccd8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ccdc:	f7ff bab4 	b.w	800c248 <USBD_LL_IsoOUTIncomplete>

0800cce0 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cce0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800cce4:	f7ff ba9c 	b.w	800c220 <USBD_LL_IsoINIncomplete>

0800cce8 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cce8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ccec:	f7ff bac0 	b.w	800c270 <USBD_LL_DevConnected>

0800ccf0 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ccf0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800ccf4:	f7ff babe 	b.w	800c274 <USBD_LL_DevDisconnected>

0800ccf8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ccf8:	7802      	ldrb	r2, [r0, #0]
 800ccfa:	b10a      	cbz	r2, 800cd00 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	4770      	bx	lr
{
 800cd00:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800cd02:	4b15      	ldr	r3, [pc, #84]	; (800cd58 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd04:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800cd06:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd08:	4d14      	ldr	r5, [pc, #80]	; (800cd5c <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 800cd0a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cd0e:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cd12:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd16:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd18:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cd1a:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800cd1e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cd22:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800cd26:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cd2a:	f7fa fa81 	bl	8007230 <HAL_PCD_Init>
 800cd2e:	b978      	cbnz	r0, 800cd50 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cd30:	2180      	movs	r1, #128	; 0x80
 800cd32:	4809      	ldr	r0, [pc, #36]	; (800cd58 <USBD_LL_Init+0x60>)
 800cd34:	f7fa ffda 	bl	8007cec <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cd38:	2240      	movs	r2, #64	; 0x40
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	4806      	ldr	r0, [pc, #24]	; (800cd58 <USBD_LL_Init+0x60>)
 800cd3e:	f7fa ffb1 	bl	8007ca4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cd42:	2280      	movs	r2, #128	; 0x80
 800cd44:	2101      	movs	r1, #1
 800cd46:	4804      	ldr	r0, [pc, #16]	; (800cd58 <USBD_LL_Init+0x60>)
 800cd48:	f7fa ffac 	bl	8007ca4 <HAL_PCDEx_SetTxFiFo>
}
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800cd50:	f7f6 f96c 	bl	800302c <Error_Handler>
 800cd54:	e7ec      	b.n	800cd30 <USBD_LL_Init+0x38>
 800cd56:	bf00      	nop
 800cd58:	24010718 	.word	0x24010718
 800cd5c:	40080000 	.word	0x40080000

0800cd60 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd60:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cd64:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800cd66:	f7fa faf9 	bl	800735c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800cd6a:	2803      	cmp	r0, #3
 800cd6c:	d802      	bhi.n	800cd74 <USBD_LL_Start+0x14>
 800cd6e:	4b02      	ldr	r3, [pc, #8]	; (800cd78 <USBD_LL_Start+0x18>)
 800cd70:	5c18      	ldrb	r0, [r3, r0]
}
 800cd72:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800cd74:	2003      	movs	r0, #3
}
 800cd76:	bd08      	pop	{r3, pc}
 800cd78:	080182ec 	.word	0x080182ec

0800cd7c <USBD_LL_OpenEP>:
{
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd80:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cd84:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd86:	4623      	mov	r3, r4
 800cd88:	f7fa fe48 	bl	8007a1c <HAL_PCD_EP_Open>
  switch (hal_status)
 800cd8c:	2803      	cmp	r0, #3
 800cd8e:	d802      	bhi.n	800cd96 <USBD_LL_OpenEP+0x1a>
 800cd90:	4b02      	ldr	r3, [pc, #8]	; (800cd9c <USBD_LL_OpenEP+0x20>)
 800cd92:	5c18      	ldrb	r0, [r3, r0]
}
 800cd94:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd96:	2003      	movs	r0, #3
}
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	080182ec 	.word	0x080182ec

0800cda0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cda0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cda4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cda6:	f7fa fe73 	bl	8007a90 <HAL_PCD_EP_Close>
  switch (hal_status)
 800cdaa:	2803      	cmp	r0, #3
 800cdac:	d802      	bhi.n	800cdb4 <USBD_LL_CloseEP+0x14>
 800cdae:	4b02      	ldr	r3, [pc, #8]	; (800cdb8 <USBD_LL_CloseEP+0x18>)
 800cdb0:	5c18      	ldrb	r0, [r3, r0]
}
 800cdb2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdb4:	2003      	movs	r0, #3
}
 800cdb6:	bd08      	pop	{r3, pc}
 800cdb8:	080182ec 	.word	0x080182ec

0800cdbc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cdbc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cdc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cdc2:	f7fa feef 	bl	8007ba4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800cdc6:	2803      	cmp	r0, #3
 800cdc8:	d802      	bhi.n	800cdd0 <USBD_LL_StallEP+0x14>
 800cdca:	4b02      	ldr	r3, [pc, #8]	; (800cdd4 <USBD_LL_StallEP+0x18>)
 800cdcc:	5c18      	ldrb	r0, [r3, r0]
}
 800cdce:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cdd0:	2003      	movs	r0, #3
}
 800cdd2:	bd08      	pop	{r3, pc}
 800cdd4:	080182ec 	.word	0x080182ec

0800cdd8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdd8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800cddc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdde:	f7fa ff25 	bl	8007c2c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800cde2:	2803      	cmp	r0, #3
 800cde4:	d802      	bhi.n	800cdec <USBD_LL_ClearStallEP+0x14>
 800cde6:	4b02      	ldr	r3, [pc, #8]	; (800cdf0 <USBD_LL_ClearStallEP+0x18>)
 800cde8:	5c18      	ldrb	r0, [r3, r0]
}
 800cdea:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdec:	2003      	movs	r0, #3
}
 800cdee:	bd08      	pop	{r3, pc}
 800cdf0:	080182ec 	.word	0x080182ec

0800cdf4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800cdf4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cdf6:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800cdfa:	d406      	bmi.n	800ce0a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ce00:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce04:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 800ce08:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce0a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ce0e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ce12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce16:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800ce1a:	4770      	bx	lr

0800ce1c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce1c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce22:	f7fa fde7 	bl	80079f4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800ce26:	2803      	cmp	r0, #3
 800ce28:	d802      	bhi.n	800ce30 <USBD_LL_SetUSBAddress+0x14>
 800ce2a:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <USBD_LL_SetUSBAddress+0x18>)
 800ce2c:	5c18      	ldrb	r0, [r3, r0]
}
 800ce2e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce30:	2003      	movs	r0, #3
}
 800ce32:	bd08      	pop	{r3, pc}
 800ce34:	080182ec 	.word	0x080182ec

0800ce38 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce38:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce3e:	f7fa fe8d 	bl	8007b5c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800ce42:	2803      	cmp	r0, #3
 800ce44:	d802      	bhi.n	800ce4c <USBD_LL_Transmit+0x14>
 800ce46:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <USBD_LL_Transmit+0x18>)
 800ce48:	5c18      	ldrb	r0, [r3, r0]
}
 800ce4a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce4c:	2003      	movs	r0, #3
}
 800ce4e:	bd08      	pop	{r3, pc}
 800ce50:	080182ec 	.word	0x080182ec

0800ce54 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce54:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800ce58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce5a:	f7fa fe4d 	bl	8007af8 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800ce5e:	2803      	cmp	r0, #3
 800ce60:	d802      	bhi.n	800ce68 <USBD_LL_PrepareReceive+0x14>
 800ce62:	4b02      	ldr	r3, [pc, #8]	; (800ce6c <USBD_LL_PrepareReceive+0x18>)
 800ce64:	5c18      	ldrb	r0, [r3, r0]
}
 800ce66:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce68:	2003      	movs	r0, #3
}
 800ce6a:	bd08      	pop	{r3, pc}
 800ce6c:	080182ec 	.word	0x080182ec

0800ce70 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce70:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800ce74:	f7fa be68 	b.w	8007b48 <HAL_PCD_EP_GetRxCount>

0800ce78 <USBD_static_malloc>:
}
 800ce78:	4800      	ldr	r0, [pc, #0]	; (800ce7c <USBD_static_malloc+0x4>)
 800ce7a:	4770      	bx	lr
 800ce7c:	24000720 	.word	0x24000720

0800ce80 <USBD_static_free>:
}
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop

0800ce84 <arm_cfft_radix8by2_f32>:
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	4607      	mov	r7, r0
 800ce8a:	4608      	mov	r0, r1
 800ce8c:	ed2d 8b06 	vpush	{d8-d10}
 800ce90:	f8b7 c000 	ldrh.w	ip, [r7]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800ce9a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800ce9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800cea2:	f000 80ac 	beq.w	800cffe <arm_cfft_radix8by2_f32+0x17a>
 800cea6:	008c      	lsls	r4, r1, #2
 800cea8:	f100 0310 	add.w	r3, r0, #16
 800ceac:	3210      	adds	r2, #16
 800ceae:	f108 0610 	add.w	r6, r8, #16
 800ceb2:	3410      	adds	r4, #16
 800ceb4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ceb8:	1905      	adds	r5, r0, r4
 800ceba:	4444      	add	r4, r8
 800cebc:	ed16 7a04 	vldr	s14, [r6, #-16]
 800cec0:	3310      	adds	r3, #16
 800cec2:	ed53 4a08 	vldr	s9, [r3, #-32]	; 0xffffffe0
 800cec6:	3510      	adds	r5, #16
 800cec8:	ed56 0a03 	vldr	s1, [r6, #-12]
 800cecc:	3210      	adds	r2, #16
 800cece:	ee74 9a87 	vadd.f32	s19, s9, s14
 800ced2:	ed56 7a02 	vldr	s15, [r6, #-8]
 800ced6:	ed56 2a01 	vldr	s5, [r6, #-4]
 800ceda:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800cede:	ed54 5a04 	vldr	s11, [r4, #-16]
 800cee2:	3610      	adds	r6, #16
 800cee4:	ed14 5a03 	vldr	s10, [r4, #-12]
 800cee8:	3410      	adds	r4, #16
 800ceea:	ed14 3a06 	vldr	s6, [r4, #-24]	; 0xffffffe8
 800ceee:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 800cef2:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800cef6:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800cefa:	ed15 4a05 	vldr	s8, [r5, #-20]	; 0xffffffec
 800cefe:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800cf02:	ed14 6a05 	vldr	s12, [r4, #-20]	; 0xffffffec
 800cf06:	ee33 8a83 	vadd.f32	s16, s7, s6
 800cf0a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800cf0e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800cf12:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800cf16:	ee34 0a06 	vadd.f32	s0, s8, s12
 800cf1a:	ed15 1a07 	vldr	s2, [r5, #-28]	; 0xffffffe4
 800cf1e:	ee77 aa20 	vadd.f32	s21, s14, s1
 800cf22:	ed43 9a08 	vstr	s19, [r3, #-32]	; 0xffffffe0
 800cf26:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800cf2a:	ee72 9a22 	vadd.f32	s19, s4, s5
 800cf2e:	ee71 8a05 	vadd.f32	s17, s2, s10
 800cf32:	ed43 aa07 	vstr	s21, [r3, #-28]	; 0xffffffe4
 800cf36:	ee37 7a60 	vsub.f32	s14, s14, s1
 800cf3a:	ed03 aa06 	vstr	s20, [r3, #-24]	; 0xffffffe8
 800cf3e:	ee35 5a41 	vsub.f32	s10, s10, s2
 800cf42:	ed43 9a05 	vstr	s19, [r3, #-20]	; 0xffffffec
 800cf46:	ee36 6a44 	vsub.f32	s12, s12, s8
 800cf4a:	ed05 9a08 	vstr	s18, [r5, #-32]	; 0xffffffe0
 800cf4e:	ed45 8a07 	vstr	s17, [r5, #-28]	; 0xffffffe4
 800cf52:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800cf56:	ed05 8a06 	vstr	s16, [r5, #-24]	; 0xffffffe8
 800cf5a:	ee72 7a62 	vsub.f32	s15, s4, s5
 800cf5e:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 800cf62:	ee73 2a63 	vsub.f32	s5, s6, s7
 800cf66:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800cf6a:	4563      	cmp	r3, ip
 800cf6c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800cf70:	ee24 3a84 	vmul.f32	s6, s9, s8
 800cf74:	ee27 2a26 	vmul.f32	s4, s14, s13
 800cf78:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800cf7c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800cf80:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cf84:	ee65 5a84 	vmul.f32	s11, s11, s8
 800cf88:	ee65 6a26 	vmul.f32	s13, s10, s13
 800cf8c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800cf90:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cf94:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cf98:	ee33 4a02 	vadd.f32	s8, s6, s4
 800cf9c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800cfa0:	ed06 7a07 	vstr	s14, [r6, #-28]	; 0xffffffe4
 800cfa4:	ed06 4a08 	vstr	s8, [r6, #-32]	; 0xffffffe0
 800cfa8:	ed04 5a08 	vstr	s10, [r4, #-32]	; 0xffffffe0
 800cfac:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800cfb0:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800cfb4:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800cfb8:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800cfbc:	ee27 4a87 	vmul.f32	s8, s15, s14
 800cfc0:	ee61 5a87 	vmul.f32	s11, s3, s14
 800cfc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cfc8:	ee22 5a87 	vmul.f32	s10, s5, s14
 800cfcc:	ee26 7a07 	vmul.f32	s14, s12, s14
 800cfd0:	ee26 6a26 	vmul.f32	s12, s12, s13
 800cfd4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800cfd8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800cfdc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cfe0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800cfe4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cfe8:	ed46 4a06 	vstr	s9, [r6, #-24]	; 0xffffffe8
 800cfec:	ed46 7a05 	vstr	s15, [r6, #-20]	; 0xffffffec
 800cff0:	ed04 6a06 	vstr	s12, [r4, #-24]	; 0xffffffe8
 800cff4:	ed04 7a05 	vstr	s14, [r4, #-20]	; 0xffffffec
 800cff8:	f47f af60 	bne.w	800cebc <arm_cfft_radix8by2_f32+0x38>
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	b28c      	uxth	r4, r1
 800d000:	2302      	movs	r3, #2
 800d002:	4621      	mov	r1, r4
 800d004:	f000 fda6 	bl	800db54 <arm_radix8_butterfly_f32>
 800d008:	4621      	mov	r1, r4
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4640      	mov	r0, r8
 800d00e:	2302      	movs	r3, #2
 800d010:	ecbd 8b06 	vpop	{d8-d10}
 800d014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d018:	f000 bd9c 	b.w	800db54 <arm_radix8_butterfly_f32>

0800d01c <arm_cfft_radix8by4_f32>:
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	ed2d 8b04 	vpush	{d8-d9}
 800d024:	8804      	ldrh	r4, [r0, #0]
 800d026:	b08d      	sub	sp, #52	; 0x34
 800d028:	6842      	ldr	r2, [r0, #4]
 800d02a:	460d      	mov	r5, r1
 800d02c:	0864      	lsrs	r4, r4, #1
 800d02e:	edd1 7a00 	vldr	s15, [r1]
 800d032:	edd1 5a01 	vldr	s11, [r1, #4]
 800d036:	00a3      	lsls	r3, r4, #2
 800d038:	18ce      	adds	r6, r1, r3
 800d03a:	18f7      	adds	r7, r6, r3
 800d03c:	ed96 7a00 	vldr	s14, [r6]
 800d040:	ed96 4a01 	vldr	s8, [r6, #4]
 800d044:	ed97 6a00 	vldr	s12, [r7]
 800d048:	edd7 4a01 	vldr	s9, [r7, #4]
 800d04c:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d050:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d054:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d058:	ee77 2a26 	vadd.f32	s5, s14, s13
 800d05c:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d060:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d064:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d068:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d06c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d070:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d074:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d078:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d07c:	0860      	lsrs	r0, r4, #1
 800d07e:	f102 0408 	add.w	r4, r2, #8
 800d082:	9405      	str	r4, [sp, #20]
 800d084:	f102 0410 	add.w	r4, r2, #16
 800d088:	9009      	str	r0, [sp, #36]	; 0x24
 800d08a:	f1a0 0902 	sub.w	r9, r0, #2
 800d08e:	9403      	str	r4, [sp, #12]
 800d090:	18fc      	adds	r4, r7, r3
 800d092:	f102 0018 	add.w	r0, r2, #24
 800d096:	ed94 5a00 	vldr	s10, [r4]
 800d09a:	ed94 3a01 	vldr	s6, [r4, #4]
 800d09e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800d0a2:	9004      	str	r0, [sp, #16]
 800d0a4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d0ae:	9408      	str	r4, [sp, #32]
 800d0b0:	ee12 ca90 	vmov	ip, s5
 800d0b4:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d0b8:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d0bc:	f845 cb08 	str.w	ip, [r5], #8
 800d0c0:	ee13 ca90 	vmov	ip, s7
 800d0c4:	ed96 2a01 	vldr	s4, [r6, #4]
 800d0c8:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d0cc:	edd4 2a01 	vldr	s5, [r4, #4]
 800d0d0:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d0d4:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d0d8:	9500      	str	r5, [sp, #0]
 800d0da:	460d      	mov	r5, r1
 800d0dc:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d0e0:	ed81 6a01 	vstr	s12, [r1, #4]
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	f841 cb08 	str.w	ip, [r1], #8
 800d0ea:	ee16 ca90 	vmov	ip, s13
 800d0ee:	9106      	str	r1, [sp, #24]
 800d0f0:	4639      	mov	r1, r7
 800d0f2:	edc6 4a01 	vstr	s9, [r6, #4]
 800d0f6:	f841 cb08 	str.w	ip, [r1], #8
 800d0fa:	9102      	str	r1, [sp, #8]
 800d0fc:	ee17 1a90 	vmov	r1, s15
 800d100:	edc7 5a01 	vstr	s11, [r7, #4]
 800d104:	f840 1b08 	str.w	r1, [r0], #8
 800d108:	ea5f 0159 	movs.w	r1, r9, lsr #1
 800d10c:	9001      	str	r0, [sp, #4]
 800d10e:	ed84 7a01 	vstr	s14, [r4, #4]
 800d112:	9107      	str	r1, [sp, #28]
 800d114:	f000 8135 	beq.w	800d382 <arm_cfft_radix8by4_f32+0x366>
 800d118:	3b0c      	subs	r3, #12
 800d11a:	f102 0920 	add.w	r9, r2, #32
 800d11e:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800d122:	4622      	mov	r2, r4
 800d124:	468b      	mov	fp, r1
 800d126:	f105 0e10 	add.w	lr, r5, #16
 800d12a:	4423      	add	r3, r4
 800d12c:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d130:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800d134:	f106 0010 	add.w	r0, r6, #16
 800d138:	f1a7 010c 	sub.w	r1, r7, #12
 800d13c:	f107 0510 	add.w	r5, r7, #16
 800d140:	3c0c      	subs	r4, #12
 800d142:	3210      	adds	r2, #16
 800d144:	ed15 7a02 	vldr	s14, [r5, #-8]
 800d148:	f1bb 0b01 	subs.w	fp, fp, #1
 800d14c:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d150:	f1ac 0c08 	sub.w	ip, ip, #8
 800d154:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d158:	f10e 0e08 	add.w	lr, lr, #8
 800d15c:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d160:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d164:	ed55 5a01 	vldr	s11, [r5, #-4]
 800d168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d16c:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d170:	f10a 0a08 	add.w	sl, sl, #8
 800d174:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d178:	ed10 3a01 	vldr	s6, [r0, #-4]
 800d17c:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d180:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d184:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d188:	f100 0008 	add.w	r0, r0, #8
 800d18c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d190:	f1a1 0108 	sub.w	r1, r1, #8
 800d194:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d198:	f109 0910 	add.w	r9, r9, #16
 800d19c:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d1a0:	f105 0508 	add.w	r5, r5, #8
 800d1a4:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d1a8:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d1ac:	ed50 5a03 	vldr	s11, [r0, #-12]
 800d1b0:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d1b4:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d1b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d1bc:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d1c0:	f1a4 0408 	sub.w	r4, r4, #8
 800d1c4:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d1c8:	f108 0818 	add.w	r8, r8, #24
 800d1cc:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d1d0:	f102 0208 	add.w	r2, r2, #8
 800d1d4:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d1d8:	f1a3 0308 	sub.w	r3, r3, #8
 800d1dc:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d1e0:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d1e4:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d1e8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d1ec:	ed94 4a04 	vldr	s8, [r4, #16]
 800d1f0:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d1f4:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d1f8:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d1fc:	edd1 7a04 	vldr	s15, [r1, #16]
 800d200:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d204:	ed93 8a04 	vldr	s16, [r3, #16]
 800d208:	edd4 5a03 	vldr	s11, [r4, #12]
 800d20c:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d210:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d214:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d218:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d21c:	ed91 1a03 	vldr	s2, [r1, #12]
 800d220:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d224:	edd3 2a03 	vldr	s5, [r3, #12]
 800d228:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d22c:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d230:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d234:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d238:	edcc 0a04 	vstr	s1, [ip, #16]
 800d23c:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d240:	edd1 6a03 	vldr	s13, [r1, #12]
 800d244:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d248:	ed93 9a03 	vldr	s18, [r3, #12]
 800d24c:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d250:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d254:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d258:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d25c:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d260:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d264:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d268:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d26c:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d270:	ed1a 1a03 	vldr	s2, [sl, #-12]
 800d274:	ed1a 4a04 	vldr	s8, [sl, #-16]
 800d278:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d27c:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d280:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d284:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d288:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d28c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d290:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d294:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d298:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d29c:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d2a0:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d2a4:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d2a8:	ed00 5a03 	vstr	s10, [r0, #-12]
 800d2ac:	ed00 1a04 	vstr	s2, [r0, #-16]
 800d2b0:	ed81 4a04 	vstr	s8, [r1, #16]
 800d2b4:	edc1 5a03 	vstr	s11, [r1, #12]
 800d2b8:	ed19 5a08 	vldr	s10, [r9, #-32]	; 0xffffffe0
 800d2bc:	ed59 5a07 	vldr	s11, [r9, #-28]	; 0xffffffe4
 800d2c0:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d2c4:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d2c8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d2cc:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d2d0:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d2d4:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d2d8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d2dc:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800d2e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d2e4:	ee34 5a22 	vadd.f32	s10, s8, s5
 800d2e8:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d2ec:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800d2f0:	ed05 5a04 	vstr	s10, [r5, #-16]
 800d2f4:	ed05 6a03 	vstr	s12, [r5, #-12]
 800d2f8:	edc4 5a04 	vstr	s11, [r4, #16]
 800d2fc:	edc4 6a03 	vstr	s13, [r4, #12]
 800d300:	ed58 2a0c 	vldr	s5, [r8, #-48]	; 0xffffffd0
 800d304:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
 800d308:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800d30c:	ee67 5a27 	vmul.f32	s11, s14, s15
 800d310:	ee63 6a27 	vmul.f32	s13, s6, s15
 800d314:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800d318:	ee27 7a22 	vmul.f32	s14, s14, s5
 800d31c:	ee62 7a27 	vmul.f32	s15, s4, s15
 800d320:	ee23 3a22 	vmul.f32	s6, s6, s5
 800d324:	ee22 2a22 	vmul.f32	s4, s4, s5
 800d328:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d32c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d330:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800d334:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d338:	ed02 6a04 	vstr	s12, [r2, #-16]
 800d33c:	ed02 7a03 	vstr	s14, [r2, #-12]
 800d340:	ed83 2a04 	vstr	s4, [r3, #16]
 800d344:	edc3 7a03 	vstr	s15, [r3, #12]
 800d348:	f47f aefc 	bne.w	800d144 <arm_cfft_radix8by4_f32+0x128>
 800d34c:	9907      	ldr	r1, [sp, #28]
 800d34e:	9803      	ldr	r0, [sp, #12]
 800d350:	00cb      	lsls	r3, r1, #3
 800d352:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d356:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d35a:	9103      	str	r1, [sp, #12]
 800d35c:	9900      	ldr	r1, [sp, #0]
 800d35e:	4419      	add	r1, r3
 800d360:	9100      	str	r1, [sp, #0]
 800d362:	9905      	ldr	r1, [sp, #20]
 800d364:	4419      	add	r1, r3
 800d366:	9105      	str	r1, [sp, #20]
 800d368:	9906      	ldr	r1, [sp, #24]
 800d36a:	4419      	add	r1, r3
 800d36c:	9106      	str	r1, [sp, #24]
 800d36e:	9902      	ldr	r1, [sp, #8]
 800d370:	4419      	add	r1, r3
 800d372:	9102      	str	r1, [sp, #8]
 800d374:	9901      	ldr	r1, [sp, #4]
 800d376:	4419      	add	r1, r3
 800d378:	9b04      	ldr	r3, [sp, #16]
 800d37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d37e:	9101      	str	r1, [sp, #4]
 800d380:	9304      	str	r3, [sp, #16]
 800d382:	9b00      	ldr	r3, [sp, #0]
 800d384:	9902      	ldr	r1, [sp, #8]
 800d386:	ed93 7a00 	vldr	s14, [r3]
 800d38a:	edd1 7a00 	vldr	s15, [r1]
 800d38e:	9a06      	ldr	r2, [sp, #24]
 800d390:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d394:	9d01      	ldr	r5, [sp, #4]
 800d396:	edd2 6a00 	vldr	s13, [r2]
 800d39a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	ee76 3a86 	vadd.f32	s7, s13, s12
 800d3a4:	ed95 3a00 	vldr	s6, [r5]
 800d3a8:	ed93 5a01 	vldr	s10, [r3, #4]
 800d3ac:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d3b0:	9b00      	ldr	r3, [sp, #0]
 800d3b2:	ee73 3a83 	vadd.f32	s7, s7, s6
 800d3b6:	edd5 2a01 	vldr	s5, [r5, #4]
 800d3ba:	ed93 4a01 	vldr	s8, [r3, #4]
 800d3be:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d3c2:	9b00      	ldr	r3, [sp, #0]
 800d3c4:	ee74 5a05 	vadd.f32	s11, s8, s10
 800d3c8:	edd2 7a01 	vldr	s15, [r2, #4]
 800d3cc:	edc3 3a00 	vstr	s7, [r3]
 800d3d0:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d3d4:	edd2 3a01 	vldr	s7, [r2, #4]
 800d3d8:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d3dc:	ed95 2a01 	vldr	s4, [r5, #4]
 800d3e0:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800d3e4:	9d05      	ldr	r5, [sp, #20]
 800d3e6:	ee34 5a66 	vsub.f32	s10, s8, s13
 800d3ea:	9b00      	ldr	r3, [sp, #0]
 800d3ec:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800d3f0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800d3f4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d3f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d3fa:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d3fe:	4621      	mov	r1, r4
 800d400:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d404:	edc3 3a01 	vstr	s7, [r3, #4]
 800d408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d40c:	edd5 3a00 	vldr	s7, [r5]
 800d410:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d414:	ed95 7a01 	vldr	s14, [r5, #4]
 800d418:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800d41c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800d420:	2304      	movs	r3, #4
 800d422:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d426:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d42a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d42e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800d432:	ee34 7a07 	vadd.f32	s14, s8, s14
 800d436:	ee35 5a64 	vsub.f32	s10, s10, s9
 800d43a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d43e:	ed82 7a00 	vstr	s14, [r2]
 800d442:	ed82 5a01 	vstr	s10, [r2, #4]
 800d446:	9a03      	ldr	r2, [sp, #12]
 800d448:	edd2 4a01 	vldr	s9, [r2, #4]
 800d44c:	ed92 7a00 	vldr	s14, [r2]
 800d450:	9a02      	ldr	r2, [sp, #8]
 800d452:	ee26 5a07 	vmul.f32	s10, s12, s14
 800d456:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d45a:	ee25 7a87 	vmul.f32	s14, s11, s14
 800d45e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d462:	ee37 6a46 	vsub.f32	s12, s14, s12
 800d466:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d46a:	edc2 5a00 	vstr	s11, [r2]
 800d46e:	ed82 6a01 	vstr	s12, [r2, #4]
 800d472:	9a04      	ldr	r2, [sp, #16]
 800d474:	9d01      	ldr	r5, [sp, #4]
 800d476:	edd2 5a01 	vldr	s11, [r2, #4]
 800d47a:	ed92 7a00 	vldr	s14, [r2]
 800d47e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800d482:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d486:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d48a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d492:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d496:	edc5 7a01 	vstr	s15, [r5, #4]
 800d49a:	edc5 6a00 	vstr	s13, [r5]
 800d49e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d4a0:	686a      	ldr	r2, [r5, #4]
 800d4a2:	f000 fb57 	bl	800db54 <arm_radix8_butterfly_f32>
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	686a      	ldr	r2, [r5, #4]
 800d4ac:	2304      	movs	r3, #4
 800d4ae:	f000 fb51 	bl	800db54 <arm_radix8_butterfly_f32>
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	686a      	ldr	r2, [r5, #4]
 800d4b8:	2304      	movs	r3, #4
 800d4ba:	f000 fb4b 	bl	800db54 <arm_radix8_butterfly_f32>
 800d4be:	4621      	mov	r1, r4
 800d4c0:	686a      	ldr	r2, [r5, #4]
 800d4c2:	2304      	movs	r3, #4
 800d4c4:	9808      	ldr	r0, [sp, #32]
 800d4c6:	b00d      	add	sp, #52	; 0x34
 800d4c8:	ecbd 8b04 	vpop	{d8-d9}
 800d4cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	f000 bb40 	b.w	800db54 <arm_radix8_butterfly_f32>

0800d4d4 <arm_cfft_f32>:
 800d4d4:	2a01      	cmp	r2, #1
 800d4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4da:	4606      	mov	r6, r0
 800d4dc:	4617      	mov	r7, r2
 800d4de:	460c      	mov	r4, r1
 800d4e0:	4698      	mov	r8, r3
 800d4e2:	8805      	ldrh	r5, [r0, #0]
 800d4e4:	d055      	beq.n	800d592 <arm_cfft_f32+0xbe>
 800d4e6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800d4ea:	d061      	beq.n	800d5b0 <arm_cfft_f32+0xdc>
 800d4ec:	d916      	bls.n	800d51c <arm_cfft_f32+0x48>
 800d4ee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800d4f2:	d01a      	beq.n	800d52a <arm_cfft_f32+0x56>
 800d4f4:	d946      	bls.n	800d584 <arm_cfft_f32+0xb0>
 800d4f6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800d4fa:	d059      	beq.n	800d5b0 <arm_cfft_f32+0xdc>
 800d4fc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800d500:	d105      	bne.n	800d50e <arm_cfft_f32+0x3a>
 800d502:	2301      	movs	r3, #1
 800d504:	6872      	ldr	r2, [r6, #4]
 800d506:	4629      	mov	r1, r5
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 fb23 	bl	800db54 <arm_radix8_butterfly_f32>
 800d50e:	f1b8 0f00 	cmp.w	r8, #0
 800d512:	d111      	bne.n	800d538 <arm_cfft_f32+0x64>
 800d514:	2f01      	cmp	r7, #1
 800d516:	d016      	beq.n	800d546 <arm_cfft_f32+0x72>
 800d518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d51c:	2d20      	cmp	r5, #32
 800d51e:	d047      	beq.n	800d5b0 <arm_cfft_f32+0xdc>
 800d520:	d934      	bls.n	800d58c <arm_cfft_f32+0xb8>
 800d522:	2d40      	cmp	r5, #64	; 0x40
 800d524:	d0ed      	beq.n	800d502 <arm_cfft_f32+0x2e>
 800d526:	2d80      	cmp	r5, #128	; 0x80
 800d528:	d1f1      	bne.n	800d50e <arm_cfft_f32+0x3a>
 800d52a:	4621      	mov	r1, r4
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7ff fca9 	bl	800ce84 <arm_cfft_radix8by2_f32>
 800d532:	f1b8 0f00 	cmp.w	r8, #0
 800d536:	d0ed      	beq.n	800d514 <arm_cfft_f32+0x40>
 800d538:	68b2      	ldr	r2, [r6, #8]
 800d53a:	4620      	mov	r0, r4
 800d53c:	89b1      	ldrh	r1, [r6, #12]
 800d53e:	f000 f83f 	bl	800d5c0 <arm_bitreversal_32>
 800d542:	2f01      	cmp	r7, #1
 800d544:	d1e8      	bne.n	800d518 <arm_cfft_f32+0x44>
 800d546:	ee07 5a90 	vmov	s15, r5
 800d54a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d552:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d556:	2d00      	cmp	r5, #0
 800d558:	d0de      	beq.n	800d518 <arm_cfft_f32+0x44>
 800d55a:	f104 0108 	add.w	r1, r4, #8
 800d55e:	2300      	movs	r3, #0
 800d560:	ed11 7a02 	vldr	s14, [r1, #-8]
 800d564:	3301      	adds	r3, #1
 800d566:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d56a:	3108      	adds	r1, #8
 800d56c:	429d      	cmp	r5, r3
 800d56e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d572:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d576:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d57a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d57e:	d1ef      	bne.n	800d560 <arm_cfft_f32+0x8c>
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d588:	d0bb      	beq.n	800d502 <arm_cfft_f32+0x2e>
 800d58a:	e7c0      	b.n	800d50e <arm_cfft_f32+0x3a>
 800d58c:	2d10      	cmp	r5, #16
 800d58e:	d0cc      	beq.n	800d52a <arm_cfft_f32+0x56>
 800d590:	e7bd      	b.n	800d50e <arm_cfft_f32+0x3a>
 800d592:	b195      	cbz	r5, 800d5ba <arm_cfft_f32+0xe6>
 800d594:	f101 030c 	add.w	r3, r1, #12
 800d598:	2200      	movs	r2, #0
 800d59a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d59e:	3201      	adds	r2, #1
 800d5a0:	3308      	adds	r3, #8
 800d5a2:	eef1 7a67 	vneg.f32	s15, s15
 800d5a6:	4295      	cmp	r5, r2
 800d5a8:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d5ac:	d1f5      	bne.n	800d59a <arm_cfft_f32+0xc6>
 800d5ae:	e79a      	b.n	800d4e6 <arm_cfft_f32+0x12>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f7ff fd32 	bl	800d01c <arm_cfft_radix8by4_f32>
 800d5b8:	e7a9      	b.n	800d50e <arm_cfft_f32+0x3a>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0ac      	beq.n	800d518 <arm_cfft_f32+0x44>
 800d5be:	e7bb      	b.n	800d538 <arm_cfft_f32+0x64>

0800d5c0 <arm_bitreversal_32>:
 800d5c0:	b321      	cbz	r1, 800d60c <arm_bitreversal_32+0x4c>
 800d5c2:	f102 0c02 	add.w	ip, r2, #2
 800d5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ca:	4690      	mov	r8, r2
 800d5cc:	2500      	movs	r5, #0
 800d5ce:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800d5d2:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800d5d6:	3502      	adds	r5, #2
 800d5d8:	08a4      	lsrs	r4, r4, #2
 800d5da:	089b      	lsrs	r3, r3, #2
 800d5dc:	428d      	cmp	r5, r1
 800d5de:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800d5e2:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800d5e6:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800d5ea:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800d5ee:	f107 0704 	add.w	r7, r7, #4
 800d5f2:	f106 0604 	add.w	r6, r6, #4
 800d5f6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800d5fa:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800d5fe:	59c4      	ldr	r4, [r0, r7]
 800d600:	5983      	ldr	r3, [r0, r6]
 800d602:	51c3      	str	r3, [r0, r7]
 800d604:	5184      	str	r4, [r0, r6]
 800d606:	d3e2      	bcc.n	800d5ce <arm_bitreversal_32+0xe>
 800d608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop

0800d610 <arm_fir_decimate_init_f32>:
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 800d618:	fbbc f4f2 	udiv	r4, ip, r2
 800d61c:	fb02 c414 	mls	r4, r2, r4, ip
 800d620:	b99c      	cbnz	r4, 800d64a <arm_fir_decimate_init_f32+0x3a>
 800d622:	460f      	mov	r7, r1
 800d624:	4616      	mov	r6, r2
 800d626:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800d62a:	4605      	mov	r5, r0
 800d62c:	443a      	add	r2, r7
 800d62e:	8069      	strh	r1, [r5, #2]
 800d630:	6043      	str	r3, [r0, #4]
 800d632:	4621      	mov	r1, r4
 800d634:	4462      	add	r2, ip
 800d636:	4640      	mov	r0, r8
 800d638:	0092      	lsls	r2, r2, #2
 800d63a:	f000 fd85 	bl	800e148 <memset>
 800d63e:	4620      	mov	r0, r4
 800d640:	f8c5 8008 	str.w	r8, [r5, #8]
 800d644:	702e      	strb	r6, [r5, #0]
 800d646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d64a:	f06f 0001 	mvn.w	r0, #1
 800d64e:	e7fa      	b.n	800d646 <arm_fir_decimate_init_f32+0x36>

0800d650 <arm_fir_decimate_f32>:
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	4605      	mov	r5, r0
 800d656:	b08d      	sub	sp, #52	; 0x34
 800d658:	4694      	mov	ip, r2
 800d65a:	782c      	ldrb	r4, [r5, #0]
 800d65c:	886f      	ldrh	r7, [r5, #2]
 800d65e:	9001      	str	r0, [sp, #4]
 800d660:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800d664:	68ae      	ldr	r6, [r5, #8]
 800d666:	4438      	add	r0, r7
 800d668:	686d      	ldr	r5, [r5, #4]
 800d66a:	9207      	str	r2, [sp, #28]
 800d66c:	970a      	str	r7, [sp, #40]	; 0x28
 800d66e:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 800d672:	9508      	str	r5, [sp, #32]
 800d674:	fbb3 f3f4 	udiv	r3, r3, r4
 800d678:	930b      	str	r3, [sp, #44]	; 0x2c
 800d67a:	089b      	lsrs	r3, r3, #2
 800d67c:	9309      	str	r3, [sp, #36]	; 0x24
 800d67e:	f000 80ef 	beq.w	800d860 <arm_fir_decimate_f32+0x210>
 800d682:	08ba      	lsrs	r2, r7, #2
 800d684:	462b      	mov	r3, r5
 800d686:	3510      	adds	r5, #16
 800d688:	f007 0703 	and.w	r7, r7, #3
 800d68c:	9205      	str	r2, [sp, #20]
 800d68e:	0112      	lsls	r2, r2, #4
 800d690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d692:	f10c 0910 	add.w	r9, ip, #16
 800d696:	4413      	add	r3, r2
 800d698:	9100      	str	r1, [sp, #0]
 800d69a:	eb05 0e02 	add.w	lr, r5, r2
 800d69e:	4611      	mov	r1, r2
 800d6a0:	9503      	str	r5, [sp, #12]
 800d6a2:	9704      	str	r7, [sp, #16]
 800d6a4:	9002      	str	r0, [sp, #8]
 800d6a6:	9306      	str	r3, [sp, #24]
 800d6a8:	00a4      	lsls	r4, r4, #2
 800d6aa:	4658      	mov	r0, fp
 800d6ac:	9a00      	ldr	r2, [sp, #0]
 800d6ae:	4623      	mov	r3, r4
 800d6b0:	f852 5b04 	ldr.w	r5, [r2], #4
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	f840 5b04 	str.w	r5, [r0], #4
 800d6ba:	d1f9      	bne.n	800d6b0 <arm_fir_decimate_f32+0x60>
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	00a4      	lsls	r4, r4, #2
 800d6c0:	eddf 0abe 	vldr	s1, [pc, #760]	; 800d9bc <arm_fir_decimate_f32+0x36c>
 800d6c4:	f893 8000 	ldrb.w	r8, [r3]
 800d6c8:	44a3      	add	fp, r4
 800d6ca:	9b00      	ldr	r3, [sp, #0]
 800d6cc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800d6d0:	4423      	add	r3, r4
 800d6d2:	eb06 0708 	add.w	r7, r6, r8
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	eb07 0c08 	add.w	ip, r7, r8
 800d6dc:	9b05      	ldr	r3, [sp, #20]
 800d6de:	eb0c 0a08 	add.w	sl, ip, r8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	f000 815c 	beq.w	800d9a0 <arm_fir_decimate_f32+0x350>
 800d6e8:	eef0 4a60 	vmov.f32	s9, s1
 800d6ec:	9b03      	ldr	r3, [sp, #12]
 800d6ee:	eef0 7a60 	vmov.f32	s15, s1
 800d6f2:	f106 0510 	add.w	r5, r6, #16
 800d6f6:	eeb0 7a60 	vmov.f32	s14, s1
 800d6fa:	f107 0410 	add.w	r4, r7, #16
 800d6fe:	f10c 0010 	add.w	r0, ip, #16
 800d702:	f10a 0210 	add.w	r2, sl, #16
 800d706:	ed53 5a04 	vldr	s11, [r3, #-16]
 800d70a:	3310      	adds	r3, #16
 800d70c:	ed12 5a04 	vldr	s10, [r2, #-16]
 800d710:	3510      	adds	r5, #16
 800d712:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 800d716:	3410      	adds	r4, #16
 800d718:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 800d71c:	3010      	adds	r0, #16
 800d71e:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800d722:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800d726:	ee25 1a81 	vmul.f32	s2, s11, s2
 800d72a:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800d72e:	ee65 3aa3 	vmul.f32	s7, s11, s7
 800d732:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 800d736:	ee65 5a85 	vmul.f32	s11, s11, s10
 800d73a:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 800d73e:	ed12 5a03 	vldr	s10, [r2, #-12]
 800d742:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d746:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800d74a:	ee73 1aa4 	vadd.f32	s3, s7, s9
 800d74e:	ee26 2a02 	vmul.f32	s4, s12, s4
 800d752:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800d756:	ee31 1a27 	vadd.f32	s2, s2, s15
 800d75a:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 800d75e:	ee66 7a22 	vmul.f32	s15, s12, s5
 800d762:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800d766:	ee26 3a03 	vmul.f32	s6, s12, s6
 800d76a:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 800d76e:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800d772:	ed52 0a02 	vldr	s1, [r2, #-8]
 800d776:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d77a:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800d77e:	ee72 2a07 	vadd.f32	s5, s4, s14
 800d782:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800d786:	ee77 7a81 	vadd.f32	s15, s15, s2
 800d78a:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 800d78e:	ee33 3a21 	vadd.f32	s6, s6, s3
 800d792:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 800d796:	ee66 3aa3 	vmul.f32	s7, s13, s7
 800d79a:	ed52 1a01 	vldr	s3, [r2, #-4]
 800d79e:	ee26 4a84 	vmul.f32	s8, s13, s8
 800d7a2:	459e      	cmp	lr, r3
 800d7a4:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800d7a8:	f102 0210 	add.w	r2, r2, #16
 800d7ac:	ee66 6aa0 	vmul.f32	s13, s13, s1
 800d7b0:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d7b4:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d7b8:	ee34 4a27 	vadd.f32	s8, s8, s15
 800d7bc:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d7c0:	ee65 7a01 	vmul.f32	s15, s10, s2
 800d7c4:	ee25 3a02 	vmul.f32	s6, s10, s4
 800d7c8:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800d7cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d7d0:	ee25 5a21 	vmul.f32	s10, s10, s3
 800d7d4:	ee37 7a23 	vadd.f32	s14, s14, s7
 800d7d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d7dc:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d7e0:	ee75 0a26 	vadd.f32	s1, s10, s13
 800d7e4:	d18f      	bne.n	800d706 <arm_fir_decimate_f32+0xb6>
 800d7e6:	440e      	add	r6, r1
 800d7e8:	440f      	add	r7, r1
 800d7ea:	448c      	add	ip, r1
 800d7ec:	eb0a 0001 	add.w	r0, sl, r1
 800d7f0:	9a06      	ldr	r2, [sp, #24]
 800d7f2:	9b04      	ldr	r3, [sp, #16]
 800d7f4:	b1db      	cbz	r3, 800d82e <arm_fir_decimate_f32+0x1de>
 800d7f6:	ecb2 5a01 	vldmia	r2!, {s10}
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	ecf6 2a01 	vldmia	r6!, {s5}
 800d800:	ecf7 3a01 	vldmia	r7!, {s7}
 800d804:	ecbc 4a01 	vldmia	ip!, {s8}
 800d808:	ee65 2a22 	vmul.f32	s5, s10, s5
 800d80c:	ecf0 6a01 	vldmia	r0!, {s13}
 800d810:	ee65 3a23 	vmul.f32	s7, s10, s7
 800d814:	ee25 4a04 	vmul.f32	s8, s10, s8
 800d818:	ee25 5a26 	vmul.f32	s10, s10, s13
 800d81c:	ee37 7a22 	vadd.f32	s14, s14, s5
 800d820:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d824:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d828:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d82c:	d1e3      	bne.n	800d7f6 <arm_fir_decimate_f32+0x1a6>
 800d82e:	9b02      	ldr	r3, [sp, #8]
 800d830:	eb0a 0608 	add.w	r6, sl, r8
 800d834:	ed09 7a04 	vstr	s14, [r9, #-16]
 800d838:	f109 0910 	add.w	r9, r9, #16
 800d83c:	3b01      	subs	r3, #1
 800d83e:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 800d842:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 800d846:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 800d84a:	9302      	str	r3, [sp, #8]
 800d84c:	d002      	beq.n	800d854 <arm_fir_decimate_f32+0x204>
 800d84e:	9b01      	ldr	r3, [sp, #4]
 800d850:	781c      	ldrb	r4, [r3, #0]
 800d852:	e729      	b.n	800d6a8 <arm_fir_decimate_f32+0x58>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d858:	9900      	ldr	r1, [sp, #0]
 800d85a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800d85e:	9307      	str	r3, [sp, #28]
 800d860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d862:	f013 0803 	ands.w	r8, r3, #3
 800d866:	d067      	beq.n	800d938 <arm_fir_decimate_f32+0x2e8>
 800d868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d86a:	9808      	ldr	r0, [sp, #32]
 800d86c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800d870:	9d07      	ldr	r5, [sp, #28]
 800d872:	4602      	mov	r2, r0
 800d874:	f003 0703 	and.w	r7, r3, #3
 800d878:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 800d87c:	f8cd e000 	str.w	lr, [sp]
 800d880:	3210      	adds	r2, #16
 800d882:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800d886:	eb00 090c 	add.w	r9, r0, ip
 800d88a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d88e:	eb02 040c 	add.w	r4, r2, ip
 800d892:	46aa      	mov	sl, r5
 800d894:	9203      	str	r2, [sp, #12]
 800d896:	f89e 5000 	ldrb.w	r5, [lr]
 800d89a:	4658      	mov	r0, fp
 800d89c:	460a      	mov	r2, r1
 800d89e:	462b      	mov	r3, r5
 800d8a0:	ecf2 7a01 	vldmia	r2!, {s15}
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	ece0 7a01 	vstmia	r0!, {s15}
 800d8aa:	d1f9      	bne.n	800d8a0 <arm_fir_decimate_f32+0x250>
 800d8ac:	00ad      	lsls	r5, r5, #2
 800d8ae:	9b00      	ldr	r3, [sp, #0]
 800d8b0:	4429      	add	r1, r5
 800d8b2:	44ab      	add	fp, r5
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d07c      	beq.n	800d9b2 <arm_fir_decimate_f32+0x362>
 800d8b8:	9b03      	ldr	r3, [sp, #12]
 800d8ba:	f106 0210 	add.w	r2, r6, #16
 800d8be:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800d9bc <arm_fir_decimate_f32+0x36c>
 800d8c2:	ed13 7a04 	vldr	s14, [r3, #-16]
 800d8c6:	3310      	adds	r3, #16
 800d8c8:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d8cc:	3210      	adds	r2, #16
 800d8ce:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 800d8d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d8d6:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 800d8da:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800d8de:	ee26 6a25 	vmul.f32	s12, s12, s11
 800d8e2:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 800d8e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ea:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 800d8ee:	ee26 7a85 	vmul.f32	s14, s13, s10
 800d8f2:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d8fc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800d900:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d908:	d1db      	bne.n	800d8c2 <arm_fir_decimate_f32+0x272>
 800d90a:	eb06 000c 	add.w	r0, r6, ip
 800d90e:	464a      	mov	r2, r9
 800d910:	b157      	cbz	r7, 800d928 <arm_fir_decimate_f32+0x2d8>
 800d912:	463b      	mov	r3, r7
 800d914:	ecb2 7a01 	vldmia	r2!, {s14}
 800d918:	3b01      	subs	r3, #1
 800d91a:	ecf0 6a01 	vldmia	r0!, {s13}
 800d91e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d922:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d926:	d1f5      	bne.n	800d914 <arm_fir_decimate_f32+0x2c4>
 800d928:	f89e 3000 	ldrb.w	r3, [lr]
 800d92c:	ecea 7a01 	vstmia	sl!, {s15}
 800d930:	45c2      	cmp	sl, r8
 800d932:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d936:	d1ae      	bne.n	800d896 <arm_fir_decimate_f32+0x246>
 800d938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d93a:	1e5c      	subs	r4, r3, #1
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	08a5      	lsrs	r5, r4, #2
 800d940:	689f      	ldr	r7, [r3, #8]
 800d942:	d01d      	beq.n	800d980 <arm_fir_decimate_f32+0x330>
 800d944:	f106 0210 	add.w	r2, r6, #16
 800d948:	f107 0310 	add.w	r3, r7, #16
 800d94c:	4629      	mov	r1, r5
 800d94e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800d952:	3901      	subs	r1, #1
 800d954:	f102 0210 	add.w	r2, r2, #16
 800d958:	f103 0310 	add.w	r3, r3, #16
 800d95c:	f843 0c20 	str.w	r0, [r3, #-32]
 800d960:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 800d964:	f843 0c1c 	str.w	r0, [r3, #-28]
 800d968:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800d96c:	f843 0c18 	str.w	r0, [r3, #-24]
 800d970:	f852 0c14 	ldr.w	r0, [r2, #-20]
 800d974:	f843 0c14 	str.w	r0, [r3, #-20]
 800d978:	d1e9      	bne.n	800d94e <arm_fir_decimate_f32+0x2fe>
 800d97a:	012d      	lsls	r5, r5, #4
 800d97c:	442e      	add	r6, r5
 800d97e:	442f      	add	r7, r5
 800d980:	f014 0403 	ands.w	r4, r4, #3
 800d984:	d009      	beq.n	800d99a <arm_fir_decimate_f32+0x34a>
 800d986:	6833      	ldr	r3, [r6, #0]
 800d988:	3c01      	subs	r4, #1
 800d98a:	603b      	str	r3, [r7, #0]
 800d98c:	d005      	beq.n	800d99a <arm_fir_decimate_f32+0x34a>
 800d98e:	6873      	ldr	r3, [r6, #4]
 800d990:	2c01      	cmp	r4, #1
 800d992:	607b      	str	r3, [r7, #4]
 800d994:	d001      	beq.n	800d99a <arm_fir_decimate_f32+0x34a>
 800d996:	68b3      	ldr	r3, [r6, #8]
 800d998:	60bb      	str	r3, [r7, #8]
 800d99a:	b00d      	add	sp, #52	; 0x34
 800d99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a0:	4650      	mov	r0, sl
 800d9a2:	9a08      	ldr	r2, [sp, #32]
 800d9a4:	eef0 4a60 	vmov.f32	s9, s1
 800d9a8:	eef0 7a60 	vmov.f32	s15, s1
 800d9ac:	eeb0 7a60 	vmov.f32	s14, s1
 800d9b0:	e71f      	b.n	800d7f2 <arm_fir_decimate_f32+0x1a2>
 800d9b2:	9a08      	ldr	r2, [sp, #32]
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	eddf 7a01 	vldr	s15, [pc, #4]	; 800d9bc <arm_fir_decimate_f32+0x36c>
 800d9ba:	e7a9      	b.n	800d910 <arm_fir_decimate_f32+0x2c0>
 800d9bc:	00000000 	.word	0x00000000

0800d9c0 <arm_cmplx_mult_cmplx_f32>:
 800d9c0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800d9c4:	b4f0      	push	{r4, r5, r6, r7}
 800d9c6:	d073      	beq.n	800dab0 <arm_cmplx_mult_cmplx_f32+0xf0>
 800d9c8:	f100 0620 	add.w	r6, r0, #32
 800d9cc:	f101 0520 	add.w	r5, r1, #32
 800d9d0:	f102 0420 	add.w	r4, r2, #32
 800d9d4:	4667      	mov	r7, ip
 800d9d6:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800d9da:	3f01      	subs	r7, #1
 800d9dc:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 800d9e0:	f105 0520 	add.w	r5, r5, #32
 800d9e4:	ed15 7a10 	vldr	s14, [r5, #-64]	; 0xffffffc0
 800d9e8:	f106 0620 	add.w	r6, r6, #32
 800d9ec:	ed56 6a0f 	vldr	s13, [r6, #-60]	; 0xffffffc4
 800d9f0:	f104 0420 	add.w	r4, r4, #32
 800d9f4:	ee27 6a87 	vmul.f32	s12, s15, s14
 800d9f8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d9fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da00:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da08:	ee76 6a66 	vsub.f32	s13, s12, s13
 800da0c:	ed44 7a0f 	vstr	s15, [r4, #-60]	; 0xffffffc4
 800da10:	ed44 6a10 	vstr	s13, [r4, #-64]	; 0xffffffc0
 800da14:	ed55 5a0d 	vldr	s11, [r5, #-52]	; 0xffffffcc
 800da18:	ed56 7a0e 	vldr	s15, [r6, #-56]	; 0xffffffc8
 800da1c:	ed15 7a0e 	vldr	s14, [r5, #-56]	; 0xffffffc8
 800da20:	ed56 6a0d 	vldr	s13, [r6, #-52]	; 0xffffffcc
 800da24:	ee27 6a87 	vmul.f32	s12, s15, s14
 800da28:	ee26 7a87 	vmul.f32	s14, s13, s14
 800da2c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da30:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da38:	ee76 6a66 	vsub.f32	s13, s12, s13
 800da3c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800da40:	ed44 6a0e 	vstr	s13, [r4, #-56]	; 0xffffffc8
 800da44:	ed55 5a0b 	vldr	s11, [r5, #-44]	; 0xffffffd4
 800da48:	ed56 7a0c 	vldr	s15, [r6, #-48]	; 0xffffffd0
 800da4c:	ed15 7a0c 	vldr	s14, [r5, #-48]	; 0xffffffd0
 800da50:	ed56 6a0b 	vldr	s13, [r6, #-44]	; 0xffffffd4
 800da54:	ee27 6a87 	vmul.f32	s12, s15, s14
 800da58:	ee26 7a87 	vmul.f32	s14, s13, s14
 800da5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da60:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da68:	ee76 6a66 	vsub.f32	s13, s12, s13
 800da6c:	ed44 7a0b 	vstr	s15, [r4, #-44]	; 0xffffffd4
 800da70:	ed44 6a0c 	vstr	s13, [r4, #-48]	; 0xffffffd0
 800da74:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800da78:	ed15 7a0a 	vldr	s14, [r5, #-40]	; 0xffffffd8
 800da7c:	ed56 6a09 	vldr	s13, [r6, #-36]	; 0xffffffdc
 800da80:	ed55 5a09 	vldr	s11, [r5, #-36]	; 0xffffffdc
 800da84:	ee27 6a87 	vmul.f32	s12, s15, s14
 800da88:	ee26 7a87 	vmul.f32	s14, s13, s14
 800da8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da90:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da98:	ee76 6a66 	vsub.f32	s13, s12, s13
 800da9c:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800daa0:	ed44 6a0a 	vstr	s13, [r4, #-40]	; 0xffffffd8
 800daa4:	d197      	bne.n	800d9d6 <arm_cmplx_mult_cmplx_f32+0x16>
 800daa6:	ea4f 144c 	mov.w	r4, ip, lsl #5
 800daaa:	4420      	add	r0, r4
 800daac:	4421      	add	r1, r4
 800daae:	4422      	add	r2, r4
 800dab0:	f013 0303 	ands.w	r3, r3, #3
 800dab4:	d04b      	beq.n	800db4e <arm_cmplx_mult_cmplx_f32+0x18e>
 800dab6:	edd0 5a00 	vldr	s11, [r0]
 800daba:	3b01      	subs	r3, #1
 800dabc:	edd1 7a00 	vldr	s15, [r1]
 800dac0:	edd0 6a01 	vldr	s13, [r0, #4]
 800dac4:	ed91 7a01 	vldr	s14, [r1, #4]
 800dac8:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800dacc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dad0:	ee67 6a26 	vmul.f32	s13, s14, s13
 800dad4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800dad8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dadc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dae0:	edc2 6a00 	vstr	s13, [r2]
 800dae4:	edc2 7a01 	vstr	s15, [r2, #4]
 800dae8:	d031      	beq.n	800db4e <arm_cmplx_mult_cmplx_f32+0x18e>
 800daea:	edd0 7a02 	vldr	s15, [r0, #8]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	ed91 7a02 	vldr	s14, [r1, #8]
 800daf4:	edd0 6a03 	vldr	s13, [r0, #12]
 800daf8:	edd1 5a03 	vldr	s11, [r1, #12]
 800dafc:	ee27 6a87 	vmul.f32	s12, s15, s14
 800db00:	ee26 7a87 	vmul.f32	s14, s13, s14
 800db04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800db08:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800db0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db10:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db14:	edc2 7a03 	vstr	s15, [r2, #12]
 800db18:	edc2 6a02 	vstr	s13, [r2, #8]
 800db1c:	d017      	beq.n	800db4e <arm_cmplx_mult_cmplx_f32+0x18e>
 800db1e:	edd0 7a04 	vldr	s15, [r0, #16]
 800db22:	ed91 7a04 	vldr	s14, [r1, #16]
 800db26:	edd0 6a05 	vldr	s13, [r0, #20]
 800db2a:	edd1 5a05 	vldr	s11, [r1, #20]
 800db2e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800db32:	ee26 7a87 	vmul.f32	s14, s13, s14
 800db36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800db3a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800db3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db42:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db46:	edc2 7a05 	vstr	s15, [r2, #20]
 800db4a:	edc2 6a04 	vstr	s13, [r2, #16]
 800db4e:	bcf0      	pop	{r4, r5, r6, r7}
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop

0800db54 <arm_radix8_butterfly_f32>:
 800db54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db58:	ed2d 8b10 	vpush	{d8-d15}
 800db5c:	b095      	sub	sp, #84	; 0x54
 800db5e:	468a      	mov	sl, r1
 800db60:	468b      	mov	fp, r1
 800db62:	eddf 8abb 	vldr	s17, [pc, #748]	; 800de50 <arm_radix8_butterfly_f32+0x2fc>
 800db66:	9012      	str	r0, [sp, #72]	; 0x48
 800db68:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800db6c:	4603      	mov	r3, r0
 800db6e:	3304      	adds	r3, #4
 800db70:	9313      	str	r3, [sp, #76]	; 0x4c
 800db72:	ea4f 02db 	mov.w	r2, fp, lsr #3
 800db76:	9912      	ldr	r1, [sp, #72]	; 0x48
 800db78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800db7c:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 800db80:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800db84:	920f      	str	r2, [sp, #60]	; 0x3c
 800db86:	9303      	str	r3, [sp, #12]
 800db88:	0153      	lsls	r3, r2, #5
 800db8a:	0114      	lsls	r4, r2, #4
 800db8c:	eba9 0002 	sub.w	r0, r9, r2
 800db90:	18ce      	adds	r6, r1, r3
 800db92:	9302      	str	r3, [sp, #8]
 800db94:	0097      	lsls	r7, r2, #2
 800db96:	4613      	mov	r3, r2
 800db98:	eb06 0509 	add.w	r5, r6, r9
 800db9c:	9004      	str	r0, [sp, #16]
 800db9e:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 800dba2:	1bd2      	subs	r2, r2, r7
 800dba4:	eb05 0109 	add.w	r1, r5, r9
 800dba8:	441f      	add	r7, r3
 800dbaa:	9405      	str	r4, [sp, #20]
 800dbac:	f109 0004 	add.w	r0, r9, #4
 800dbb0:	9101      	str	r1, [sp, #4]
 800dbb2:	1d21      	adds	r1, r4, #4
 800dbb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbb6:	f04f 0e00 	mov.w	lr, #0
 800dbba:	9c01      	ldr	r4, [sp, #4]
 800dbbc:	4418      	add	r0, r3
 800dbbe:	4419      	add	r1, r3
 800dbc0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800dbc4:	9b02      	ldr	r3, [sp, #8]
 800dbc6:	00fc      	lsls	r4, r7, #3
 800dbc8:	18d7      	adds	r7, r2, r3
 800dbca:	9b04      	ldr	r3, [sp, #16]
 800dbcc:	9406      	str	r4, [sp, #24]
 800dbce:	00db      	lsls	r3, r3, #3
 800dbd0:	9c01      	ldr	r4, [sp, #4]
 800dbd2:	9307      	str	r3, [sp, #28]
 800dbd4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800dbd8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	9b03      	ldr	r3, [sp, #12]
 800dbe0:	edd6 6a00 	vldr	s13, [r6]
 800dbe4:	44de      	add	lr, fp
 800dbe6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800dbea:	ed94 7a00 	vldr	s14, [r4]
 800dbee:	45f2      	cmp	sl, lr
 800dbf0:	ed10 6a01 	vldr	s12, [r0, #-4]
 800dbf4:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800dbf8:	edd5 2a00 	vldr	s5, [r5]
 800dbfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc00:	edd7 3a00 	vldr	s7, [r7]
 800dc04:	ed11 5a01 	vldr	s10, [r1, #-4]
 800dc08:	ee36 3a22 	vadd.f32	s6, s12, s5
 800dc0c:	edd2 6a00 	vldr	s13, [r2]
 800dc10:	ee75 5a07 	vadd.f32	s11, s10, s14
 800dc14:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800dc18:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800dc1c:	ee72 4a25 	vadd.f32	s9, s4, s11
 800dc20:	ee73 3a04 	vadd.f32	s7, s6, s8
 800dc24:	ee35 5a47 	vsub.f32	s10, s10, s14
 800dc28:	ee36 7a62 	vsub.f32	s14, s12, s5
 800dc2c:	ee32 2a65 	vsub.f32	s4, s4, s11
 800dc30:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800dc34:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800dc38:	ee37 6a66 	vsub.f32	s12, s14, s13
 800dc3c:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800dc40:	ee33 3a44 	vsub.f32	s6, s6, s8
 800dc44:	edc6 4a00 	vstr	s9, [r6]
 800dc48:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dc4c:	ed97 4a01 	vldr	s8, [r7, #4]
 800dc50:	ee66 6a28 	vmul.f32	s13, s12, s17
 800dc54:	edd0 5a00 	vldr	s11, [r0]
 800dc58:	ed95 6a01 	vldr	s12, [r5, #4]
 800dc5c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800dc60:	edd2 3a01 	vldr	s7, [r2, #4]
 800dc64:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800dc68:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800dc6c:	ed96 1a01 	vldr	s2, [r6, #4]
 800dc70:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800dc74:	edd4 0a01 	vldr	s1, [r4, #4]
 800dc78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc7c:	eddc 6a00 	vldr	s13, [ip]
 800dc80:	ee75 5a86 	vadd.f32	s11, s11, s12
 800dc84:	ed91 6a00 	vldr	s12, [r1]
 800dc88:	ee73 3a84 	vadd.f32	s7, s7, s8
 800dc8c:	ee74 1a80 	vadd.f32	s3, s9, s0
 800dc90:	ee36 4a81 	vadd.f32	s8, s13, s2
 800dc94:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800dc98:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800dc9c:	ee36 1a20 	vadd.f32	s2, s12, s1
 800dca0:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800dca4:	ee36 6a60 	vsub.f32	s12, s12, s1
 800dca8:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800dcac:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800dcb0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800dcb4:	ee74 3a01 	vadd.f32	s7, s8, s2
 800dcb8:	ee34 4a41 	vsub.f32	s8, s8, s2
 800dcbc:	ee36 1a21 	vadd.f32	s2, s12, s3
 800dcc0:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800dcc4:	ee36 6a61 	vsub.f32	s12, s12, s3
 800dcc8:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800dccc:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800dcd0:	ed8c 0a00 	vstr	s0, [ip]
 800dcd4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800dcd8:	449c      	add	ip, r3
 800dcda:	ee75 4a07 	vadd.f32	s9, s10, s14
 800dcde:	edc6 3a01 	vstr	s7, [r6, #4]
 800dce2:	ee35 7a47 	vsub.f32	s14, s10, s14
 800dce6:	441e      	add	r6, r3
 800dce8:	ee32 5a25 	vadd.f32	s10, s4, s11
 800dcec:	ee72 5a65 	vsub.f32	s11, s4, s11
 800dcf0:	ee72 3a81 	vadd.f32	s7, s5, s2
 800dcf4:	ed01 5a01 	vstr	s10, [r1, #-4]
 800dcf8:	ee34 2a43 	vsub.f32	s4, s8, s6
 800dcfc:	edc4 5a00 	vstr	s11, [r4]
 800dd00:	ee37 5a86 	vadd.f32	s10, s15, s12
 800dd04:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800dd08:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dd0c:	ed81 2a00 	vstr	s4, [r1]
 800dd10:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800dd14:	4419      	add	r1, r3
 800dd16:	ee33 4a04 	vadd.f32	s8, s6, s8
 800dd1a:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800dd1e:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800dd22:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dd26:	ed84 4a01 	vstr	s8, [r4, #4]
 800dd2a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800dd2e:	441c      	add	r4, r3
 800dd30:	edc7 2a00 	vstr	s5, [r7]
 800dd34:	ed85 5a00 	vstr	s10, [r5]
 800dd38:	edc2 7a00 	vstr	s15, [r2]
 800dd3c:	edc0 5a00 	vstr	s11, [r0]
 800dd40:	4418      	add	r0, r3
 800dd42:	edc7 4a01 	vstr	s9, [r7, #4]
 800dd46:	441f      	add	r7, r3
 800dd48:	ed85 6a01 	vstr	s12, [r5, #4]
 800dd4c:	441d      	add	r5, r3
 800dd4e:	ed82 7a01 	vstr	s14, [r2, #4]
 800dd52:	441a      	add	r2, r3
 800dd54:	f63f af44 	bhi.w	800dbe0 <arm_radix8_butterfly_f32+0x8c>
 800dd58:	469c      	mov	ip, r3
 800dd5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd5c:	2b07      	cmp	r3, #7
 800dd5e:	f240 81b6 	bls.w	800e0ce <arm_radix8_butterfly_f32+0x57a>
 800dd62:	9a02      	ldr	r2, [sp, #8]
 800dd64:	f109 0608 	add.w	r6, r9, #8
 800dd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd6a:	f108 0408 	add.w	r4, r8, #8
 800dd6e:	3208      	adds	r2, #8
 800dd70:	9f06      	ldr	r7, [sp, #24]
 800dd72:	9d04      	ldr	r5, [sp, #16]
 800dd74:	189a      	adds	r2, r3, r2
 800dd76:	3708      	adds	r7, #8
 800dd78:	3508      	adds	r5, #8
 800dd7a:	9807      	ldr	r0, [sp, #28]
 800dd7c:	920c      	str	r2, [sp, #48]	; 0x30
 800dd7e:	199a      	adds	r2, r3, r6
 800dd80:	9905      	ldr	r1, [sp, #20]
 800dd82:	3008      	adds	r0, #8
 800dd84:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd86:	19da      	adds	r2, r3, r7
 800dd88:	310c      	adds	r1, #12
 800dd8a:	920a      	str	r2, [sp, #40]	; 0x28
 800dd8c:	195a      	adds	r2, r3, r5
 800dd8e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd90:	191a      	adds	r2, r3, r4
 800dd92:	9208      	str	r2, [sp, #32]
 800dd94:	181a      	adds	r2, r3, r0
 800dd96:	9207      	str	r2, [sp, #28]
 800dd98:	185a      	adds	r2, r3, r1
 800dd9a:	330c      	adds	r3, #12
 800dd9c:	9205      	str	r2, [sp, #20]
 800dd9e:	9306      	str	r3, [sp, #24]
 800dda0:	2301      	movs	r3, #1
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	2300      	movs	r3, #0
 800dda6:	930d      	str	r3, [sp, #52]	; 0x34
 800dda8:	4663      	mov	r3, ip
 800ddaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ddac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ddae:	f8dd c014 	ldr.w	ip, [sp, #20]
 800ddb2:	440a      	add	r2, r1
 800ddb4:	9f06      	ldr	r7, [sp, #24]
 800ddb6:	9e07      	ldr	r6, [sp, #28]
 800ddb8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800ddbc:	920d      	str	r2, [sp, #52]	; 0x34
 800ddbe:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 800ddc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ddc4:	9d08      	ldr	r5, [sp, #32]
 800ddc6:	4442      	add	r2, r8
 800ddc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ddca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ddcc:	eb02 0108 	add.w	r1, r2, r8
 800ddd0:	ed92 ea00 	vldr	s28, [r2]
 800ddd4:	eb01 0208 	add.w	r2, r1, r8
 800ddd8:	edd1 da00 	vldr	s27, [r1]
 800dddc:	eb02 0108 	add.w	r1, r2, r8
 800dde0:	ed92 da00 	vldr	s26, [r2]
 800dde4:	eb01 0208 	add.w	r2, r1, r8
 800dde8:	edd1 ca00 	vldr	s25, [r1]
 800ddec:	eb02 0108 	add.w	r1, r2, r8
 800ddf0:	ed92 ca00 	vldr	s24, [r2]
 800ddf4:	eb01 0208 	add.w	r2, r1, r8
 800ddf8:	edd1 ba00 	vldr	s23, [r1]
 800ddfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddfe:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800de02:	ed92 ba00 	vldr	s22, [r2]
 800de06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de08:	eb0e 0908 	add.w	r9, lr, r8
 800de0c:	910e      	str	r1, [sp, #56]	; 0x38
 800de0e:	9201      	str	r2, [sp, #4]
 800de10:	eb09 0208 	add.w	r2, r9, r8
 800de14:	ed99 aa01 	vldr	s20, [r9, #4]
 800de18:	edde aa01 	vldr	s21, [lr, #4]
 800de1c:	eb02 0908 	add.w	r9, r2, r8
 800de20:	edd2 9a01 	vldr	s19, [r2, #4]
 800de24:	f8dd e010 	ldr.w	lr, [sp, #16]
 800de28:	eb09 0208 	add.w	r2, r9, r8
 800de2c:	ed99 9a01 	vldr	s18, [r9, #4]
 800de30:	eb02 0908 	add.w	r9, r2, r8
 800de34:	ed92 8a01 	vldr	s16, [r2, #4]
 800de38:	9a01      	ldr	r2, [sp, #4]
 800de3a:	edd9 7a01 	vldr	s15, [r9, #4]
 800de3e:	44c8      	add	r8, r9
 800de40:	edcd 7a02 	vstr	s15, [sp, #8]
 800de44:	edd8 7a01 	vldr	s15, [r8, #4]
 800de48:	edcd 7a03 	vstr	s15, [sp, #12]
 800de4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800de4e:	e001      	b.n	800de54 <arm_radix8_butterfly_f32+0x300>
 800de50:	3f3504f3 	.word	0x3f3504f3
 800de54:	ed92 7a00 	vldr	s14, [r2]
 800de58:	44de      	add	lr, fp
 800de5a:	ed17 1a01 	vldr	s2, [r7, #-4]
 800de5e:	ed90 5a00 	vldr	s10, [r0]
 800de62:	45f2      	cmp	sl, lr
 800de64:	ed1c fa01 	vldr	s30, [ip, #-4]
 800de68:	ee31 3a07 	vadd.f32	s6, s2, s14
 800de6c:	edd6 5a00 	vldr	s11, [r6]
 800de70:	ee31 1a47 	vsub.f32	s2, s2, s14
 800de74:	edd4 7a00 	vldr	s15, [r4]
 800de78:	ed95 7a00 	vldr	s14, [r5]
 800de7c:	ed91 4a00 	vldr	s8, [r1]
 800de80:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800de84:	ee77 6a25 	vadd.f32	s13, s14, s11
 800de88:	edd7 ea00 	vldr	s29, [r7]
 800de8c:	ee74 fa05 	vadd.f32	s31, s8, s10
 800de90:	ee73 1a06 	vadd.f32	s3, s6, s12
 800de94:	ee34 4a45 	vsub.f32	s8, s8, s10
 800de98:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800de9c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800dea0:	ee33 3a46 	vsub.f32	s6, s6, s12
 800dea4:	ee31 6a85 	vadd.f32	s12, s3, s10
 800dea8:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800deac:	ee34 fa07 	vadd.f32	s30, s8, s14
 800deb0:	ed07 6a01 	vstr	s12, [r7, #-4]
 800deb4:	ee34 4a47 	vsub.f32	s8, s8, s14
 800deb8:	edd5 3a01 	vldr	s7, [r5, #4]
 800debc:	ee7f fae6 	vsub.f32	s31, s31, s13
 800dec0:	ed90 7a01 	vldr	s14, [r0, #4]
 800dec4:	ee2f fa28 	vmul.f32	s30, s30, s17
 800dec8:	edd1 5a01 	vldr	s11, [r1, #4]
 800decc:	ee24 4a28 	vmul.f32	s8, s8, s17
 800ded0:	ed96 6a01 	vldr	s12, [r6, #4]
 800ded4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800ded8:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800dedc:	edd2 6a01 	vldr	s13, [r2, #4]
 800dee0:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800dee4:	edd4 4a01 	vldr	s9, [r4, #4]
 800dee8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800deec:	ed9c 7a00 	vldr	s14, [ip]
 800def0:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800def4:	ee33 6a86 	vadd.f32	s12, s7, s12
 800def8:	ee37 facf 	vsub.f32	s30, s15, s30
 800defc:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800df00:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800df04:	ee7e eae6 	vsub.f32	s29, s29, s13
 800df08:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800df0c:	ee77 6a24 	vadd.f32	s13, s14, s9
 800df10:	ee75 0a86 	vadd.f32	s1, s11, s12
 800df14:	ee37 7a64 	vsub.f32	s14, s14, s9
 800df18:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800df1c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800df20:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800df24:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800df28:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800df2c:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800df30:	ee77 4a22 	vadd.f32	s9, s14, s5
 800df34:	ee7e eae7 	vsub.f32	s29, s29, s15
 800df38:	ee77 7a62 	vsub.f32	s15, s14, s5
 800df3c:	ee71 2a04 	vadd.f32	s5, s2, s8
 800df40:	ee31 7a44 	vsub.f32	s14, s2, s8
 800df44:	ee30 1a60 	vsub.f32	s2, s0, s1
 800df48:	ee73 1a06 	vadd.f32	s3, s6, s12
 800df4c:	ee33 6a46 	vsub.f32	s12, s6, s12
 800df50:	ee33 3aef 	vsub.f32	s6, s7, s31
 800df54:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800df58:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800df5c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800df60:	ee72 5a25 	vadd.f32	s11, s4, s11
 800df64:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800df68:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800df6c:	ee77 2a27 	vadd.f32	s5, s14, s15
 800df70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df74:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800df78:	ee2c fa85 	vmul.f32	s30, s25, s10
 800df7c:	ee69 ea01 	vmul.f32	s29, s18, s2
 800df80:	ee29 5a05 	vmul.f32	s10, s18, s10
 800df84:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800df88:	ee6d faa1 	vmul.f32	s31, s27, s3
 800df8c:	ee70 0a20 	vadd.f32	s1, s0, s1
 800df90:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800df94:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800df98:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800df9c:	edc7 0a00 	vstr	s1, [r7]
 800dfa0:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800dfa4:	441f      	add	r7, r3
 800dfa6:	ee2a faa3 	vmul.f32	s30, s21, s7
 800dfaa:	ee31 5a45 	vsub.f32	s10, s2, s10
 800dfae:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800dfb2:	edc2 ea00 	vstr	s29, [r2]
 800dfb6:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800dfba:	ee33 3a61 	vsub.f32	s6, s6, s3
 800dfbe:	ed82 5a01 	vstr	s10, [r2, #4]
 800dfc2:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800dfc6:	edcd 3a01 	vstr	s7, [sp, #4]
 800dfca:	ed9d 5a03 	vldr	s10, [sp, #12]
 800dfce:	ee6b ea86 	vmul.f32	s29, s23, s12
 800dfd2:	eddd 3a02 	vldr	s7, [sp, #8]
 800dfd6:	ee6b fa24 	vmul.f32	s31, s22, s9
 800dfda:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800dfde:	ee65 4a24 	vmul.f32	s9, s10, s9
 800dfe2:	ed8c 3a00 	vstr	s6, [ip]
 800dfe6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800dfea:	ee23 6a86 	vmul.f32	s12, s7, s12
 800dfee:	eddd 3a01 	vldr	s7, [sp, #4]
 800dff2:	ee25 5a25 	vmul.f32	s10, s10, s11
 800dff6:	441a      	add	r2, r3
 800dff8:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800dffc:	449c      	add	ip, r3
 800dffe:	ee68 1a04 	vmul.f32	s3, s16, s8
 800e002:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800e006:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800e00a:	ee29 faa7 	vmul.f32	s30, s19, s15
 800e00e:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800e012:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800e016:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800e01a:	ee68 2a22 	vmul.f32	s5, s16, s5
 800e01e:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800e022:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e026:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e02a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e02e:	ee7e ea81 	vadd.f32	s29, s29, s2
 800e032:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e036:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800e03a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e03e:	edc4 ea00 	vstr	s29, [r4]
 800e042:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e046:	ed84 6a01 	vstr	s12, [r4, #4]
 800e04a:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e04e:	edc1 0a00 	vstr	s1, [r1]
 800e052:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800e056:	edc1 3a01 	vstr	s7, [r1, #4]
 800e05a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e05e:	ed86 5a00 	vstr	s10, [r6]
 800e062:	edc6 4a01 	vstr	s9, [r6, #4]
 800e066:	4419      	add	r1, r3
 800e068:	ed80 0a00 	vstr	s0, [r0]
 800e06c:	441c      	add	r4, r3
 800e06e:	edc0 2a01 	vstr	s5, [r0, #4]
 800e072:	441e      	add	r6, r3
 800e074:	ed85 3a00 	vstr	s6, [r5]
 800e078:	4418      	add	r0, r3
 800e07a:	ed85 7a01 	vstr	s14, [r5, #4]
 800e07e:	441d      	add	r5, r3
 800e080:	f63f aee8 	bhi.w	800de54 <arm_radix8_butterfly_f32+0x300>
 800e084:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e086:	9a04      	ldr	r2, [sp, #16]
 800e088:	3108      	adds	r1, #8
 800e08a:	3201      	adds	r2, #1
 800e08c:	910c      	str	r1, [sp, #48]	; 0x30
 800e08e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e090:	9204      	str	r2, [sp, #16]
 800e092:	3108      	adds	r1, #8
 800e094:	910b      	str	r1, [sp, #44]	; 0x2c
 800e096:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e098:	3108      	adds	r1, #8
 800e09a:	910a      	str	r1, [sp, #40]	; 0x28
 800e09c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e09e:	3108      	adds	r1, #8
 800e0a0:	9109      	str	r1, [sp, #36]	; 0x24
 800e0a2:	9908      	ldr	r1, [sp, #32]
 800e0a4:	3108      	adds	r1, #8
 800e0a6:	9108      	str	r1, [sp, #32]
 800e0a8:	9907      	ldr	r1, [sp, #28]
 800e0aa:	3108      	adds	r1, #8
 800e0ac:	9107      	str	r1, [sp, #28]
 800e0ae:	9906      	ldr	r1, [sp, #24]
 800e0b0:	3108      	adds	r1, #8
 800e0b2:	9106      	str	r1, [sp, #24]
 800e0b4:	9905      	ldr	r1, [sp, #20]
 800e0b6:	3108      	adds	r1, #8
 800e0b8:	9105      	str	r1, [sp, #20]
 800e0ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0bc:	4291      	cmp	r1, r2
 800e0be:	f47f ae74 	bne.w	800ddaa <arm_radix8_butterfly_f32+0x256>
 800e0c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0c4:	468b      	mov	fp, r1
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	9310      	str	r3, [sp, #64]	; 0x40
 800e0cc:	e551      	b.n	800db72 <arm_radix8_butterfly_f32+0x1e>
 800e0ce:	b015      	add	sp, #84	; 0x54
 800e0d0:	ecbd 8b10 	vpop	{d8-d15}
 800e0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0d8 <__errno>:
 800e0d8:	4b01      	ldr	r3, [pc, #4]	; (800e0e0 <__errno+0x8>)
 800e0da:	6818      	ldr	r0, [r3, #0]
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	2400040c 	.word	0x2400040c

0800e0e4 <__libc_init_array>:
 800e0e4:	b570      	push	{r4, r5, r6, lr}
 800e0e6:	4d0d      	ldr	r5, [pc, #52]	; (800e11c <__libc_init_array+0x38>)
 800e0e8:	4c0d      	ldr	r4, [pc, #52]	; (800e120 <__libc_init_array+0x3c>)
 800e0ea:	1b64      	subs	r4, r4, r5
 800e0ec:	10a4      	asrs	r4, r4, #2
 800e0ee:	2600      	movs	r6, #0
 800e0f0:	42a6      	cmp	r6, r4
 800e0f2:	d109      	bne.n	800e108 <__libc_init_array+0x24>
 800e0f4:	4d0b      	ldr	r5, [pc, #44]	; (800e124 <__libc_init_array+0x40>)
 800e0f6:	4c0c      	ldr	r4, [pc, #48]	; (800e128 <__libc_init_array+0x44>)
 800e0f8:	f003 ffa0 	bl	801203c <_init>
 800e0fc:	1b64      	subs	r4, r4, r5
 800e0fe:	10a4      	asrs	r4, r4, #2
 800e100:	2600      	movs	r6, #0
 800e102:	42a6      	cmp	r6, r4
 800e104:	d105      	bne.n	800e112 <__libc_init_array+0x2e>
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	f855 3b04 	ldr.w	r3, [r5], #4
 800e10c:	4798      	blx	r3
 800e10e:	3601      	adds	r6, #1
 800e110:	e7ee      	b.n	800e0f0 <__libc_init_array+0xc>
 800e112:	f855 3b04 	ldr.w	r3, [r5], #4
 800e116:	4798      	blx	r3
 800e118:	3601      	adds	r6, #1
 800e11a:	e7f2      	b.n	800e102 <__libc_init_array+0x1e>
 800e11c:	0801c7d8 	.word	0x0801c7d8
 800e120:	0801c7d8 	.word	0x0801c7d8
 800e124:	0801c7d8 	.word	0x0801c7d8
 800e128:	0801c7dc 	.word	0x0801c7dc

0800e12c <memcpy>:
 800e12c:	440a      	add	r2, r1
 800e12e:	4291      	cmp	r1, r2
 800e130:	f100 33ff 	add.w	r3, r0, #4294967295
 800e134:	d100      	bne.n	800e138 <memcpy+0xc>
 800e136:	4770      	bx	lr
 800e138:	b510      	push	{r4, lr}
 800e13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e142:	4291      	cmp	r1, r2
 800e144:	d1f9      	bne.n	800e13a <memcpy+0xe>
 800e146:	bd10      	pop	{r4, pc}

0800e148 <memset>:
 800e148:	4402      	add	r2, r0
 800e14a:	4603      	mov	r3, r0
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d100      	bne.n	800e152 <memset+0xa>
 800e150:	4770      	bx	lr
 800e152:	f803 1b01 	strb.w	r1, [r3], #1
 800e156:	e7f9      	b.n	800e14c <memset+0x4>

0800e158 <__cvt>:
 800e158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e15a:	ed2d 8b02 	vpush	{d8}
 800e15e:	eeb0 8b40 	vmov.f64	d8, d0
 800e162:	b085      	sub	sp, #20
 800e164:	4617      	mov	r7, r2
 800e166:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e168:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e16a:	ee18 2a90 	vmov	r2, s17
 800e16e:	f025 0520 	bic.w	r5, r5, #32
 800e172:	2a00      	cmp	r2, #0
 800e174:	bfb6      	itet	lt
 800e176:	222d      	movlt	r2, #45	; 0x2d
 800e178:	2200      	movge	r2, #0
 800e17a:	eeb1 8b40 	vneglt.f64	d8, d0
 800e17e:	2d46      	cmp	r5, #70	; 0x46
 800e180:	460c      	mov	r4, r1
 800e182:	701a      	strb	r2, [r3, #0]
 800e184:	d004      	beq.n	800e190 <__cvt+0x38>
 800e186:	2d45      	cmp	r5, #69	; 0x45
 800e188:	d100      	bne.n	800e18c <__cvt+0x34>
 800e18a:	3401      	adds	r4, #1
 800e18c:	2102      	movs	r1, #2
 800e18e:	e000      	b.n	800e192 <__cvt+0x3a>
 800e190:	2103      	movs	r1, #3
 800e192:	ab03      	add	r3, sp, #12
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	ab02      	add	r3, sp, #8
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	4622      	mov	r2, r4
 800e19c:	4633      	mov	r3, r6
 800e19e:	eeb0 0b48 	vmov.f64	d0, d8
 800e1a2:	f000 fce9 	bl	800eb78 <_dtoa_r>
 800e1a6:	2d47      	cmp	r5, #71	; 0x47
 800e1a8:	d109      	bne.n	800e1be <__cvt+0x66>
 800e1aa:	07fb      	lsls	r3, r7, #31
 800e1ac:	d407      	bmi.n	800e1be <__cvt+0x66>
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1b2:	1a1b      	subs	r3, r3, r0
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	b005      	add	sp, #20
 800e1b8:	ecbd 8b02 	vpop	{d8}
 800e1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1be:	2d46      	cmp	r5, #70	; 0x46
 800e1c0:	eb00 0204 	add.w	r2, r0, r4
 800e1c4:	d10c      	bne.n	800e1e0 <__cvt+0x88>
 800e1c6:	7803      	ldrb	r3, [r0, #0]
 800e1c8:	2b30      	cmp	r3, #48	; 0x30
 800e1ca:	d107      	bne.n	800e1dc <__cvt+0x84>
 800e1cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d4:	bf1c      	itt	ne
 800e1d6:	f1c4 0401 	rsbne	r4, r4, #1
 800e1da:	6034      	strne	r4, [r6, #0]
 800e1dc:	6833      	ldr	r3, [r6, #0]
 800e1de:	441a      	add	r2, r3
 800e1e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e8:	bf08      	it	eq
 800e1ea:	9203      	streq	r2, [sp, #12]
 800e1ec:	2130      	movs	r1, #48	; 0x30
 800e1ee:	9b03      	ldr	r3, [sp, #12]
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d2dc      	bcs.n	800e1ae <__cvt+0x56>
 800e1f4:	1c5c      	adds	r4, r3, #1
 800e1f6:	9403      	str	r4, [sp, #12]
 800e1f8:	7019      	strb	r1, [r3, #0]
 800e1fa:	e7f8      	b.n	800e1ee <__cvt+0x96>

0800e1fc <__exponent>:
 800e1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1fe:	4603      	mov	r3, r0
 800e200:	2900      	cmp	r1, #0
 800e202:	bfb8      	it	lt
 800e204:	4249      	neglt	r1, r1
 800e206:	f803 2b02 	strb.w	r2, [r3], #2
 800e20a:	bfb4      	ite	lt
 800e20c:	222d      	movlt	r2, #45	; 0x2d
 800e20e:	222b      	movge	r2, #43	; 0x2b
 800e210:	2909      	cmp	r1, #9
 800e212:	7042      	strb	r2, [r0, #1]
 800e214:	dd2a      	ble.n	800e26c <__exponent+0x70>
 800e216:	f10d 0407 	add.w	r4, sp, #7
 800e21a:	46a4      	mov	ip, r4
 800e21c:	270a      	movs	r7, #10
 800e21e:	46a6      	mov	lr, r4
 800e220:	460a      	mov	r2, r1
 800e222:	fb91 f6f7 	sdiv	r6, r1, r7
 800e226:	fb07 1516 	mls	r5, r7, r6, r1
 800e22a:	3530      	adds	r5, #48	; 0x30
 800e22c:	2a63      	cmp	r2, #99	; 0x63
 800e22e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e232:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e236:	4631      	mov	r1, r6
 800e238:	dcf1      	bgt.n	800e21e <__exponent+0x22>
 800e23a:	3130      	adds	r1, #48	; 0x30
 800e23c:	f1ae 0502 	sub.w	r5, lr, #2
 800e240:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e244:	1c44      	adds	r4, r0, #1
 800e246:	4629      	mov	r1, r5
 800e248:	4561      	cmp	r1, ip
 800e24a:	d30a      	bcc.n	800e262 <__exponent+0x66>
 800e24c:	f10d 0209 	add.w	r2, sp, #9
 800e250:	eba2 020e 	sub.w	r2, r2, lr
 800e254:	4565      	cmp	r5, ip
 800e256:	bf88      	it	hi
 800e258:	2200      	movhi	r2, #0
 800e25a:	4413      	add	r3, r2
 800e25c:	1a18      	subs	r0, r3, r0
 800e25e:	b003      	add	sp, #12
 800e260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e262:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e266:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e26a:	e7ed      	b.n	800e248 <__exponent+0x4c>
 800e26c:	2330      	movs	r3, #48	; 0x30
 800e26e:	3130      	adds	r1, #48	; 0x30
 800e270:	7083      	strb	r3, [r0, #2]
 800e272:	70c1      	strb	r1, [r0, #3]
 800e274:	1d03      	adds	r3, r0, #4
 800e276:	e7f1      	b.n	800e25c <__exponent+0x60>

0800e278 <_printf_float>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	b08b      	sub	sp, #44	; 0x2c
 800e27e:	460c      	mov	r4, r1
 800e280:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e284:	4616      	mov	r6, r2
 800e286:	461f      	mov	r7, r3
 800e288:	4605      	mov	r5, r0
 800e28a:	f001 f9f7 	bl	800f67c <_localeconv_r>
 800e28e:	f8d0 b000 	ldr.w	fp, [r0]
 800e292:	4658      	mov	r0, fp
 800e294:	f7f2 f824 	bl	80002e0 <strlen>
 800e298:	2300      	movs	r3, #0
 800e29a:	9308      	str	r3, [sp, #32]
 800e29c:	f8d8 3000 	ldr.w	r3, [r8]
 800e2a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e2a4:	6822      	ldr	r2, [r4, #0]
 800e2a6:	3307      	adds	r3, #7
 800e2a8:	f023 0307 	bic.w	r3, r3, #7
 800e2ac:	f103 0108 	add.w	r1, r3, #8
 800e2b0:	f8c8 1000 	str.w	r1, [r8]
 800e2b4:	4682      	mov	sl, r0
 800e2b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e2be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e520 <_printf_float+0x2a8>
 800e2c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e2c6:	eeb0 6bc0 	vabs.f64	d6, d0
 800e2ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800e2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d2:	dd24      	ble.n	800e31e <_printf_float+0xa6>
 800e2d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2dc:	d502      	bpl.n	800e2e4 <_printf_float+0x6c>
 800e2de:	232d      	movs	r3, #45	; 0x2d
 800e2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e4:	4b90      	ldr	r3, [pc, #576]	; (800e528 <_printf_float+0x2b0>)
 800e2e6:	4891      	ldr	r0, [pc, #580]	; (800e52c <_printf_float+0x2b4>)
 800e2e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e2ec:	bf94      	ite	ls
 800e2ee:	4698      	movls	r8, r3
 800e2f0:	4680      	movhi	r8, r0
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	6123      	str	r3, [r4, #16]
 800e2f6:	f022 0204 	bic.w	r2, r2, #4
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	6022      	str	r2, [r4, #0]
 800e2fe:	9304      	str	r3, [sp, #16]
 800e300:	9700      	str	r7, [sp, #0]
 800e302:	4633      	mov	r3, r6
 800e304:	aa09      	add	r2, sp, #36	; 0x24
 800e306:	4621      	mov	r1, r4
 800e308:	4628      	mov	r0, r5
 800e30a:	f000 f9d3 	bl	800e6b4 <_printf_common>
 800e30e:	3001      	adds	r0, #1
 800e310:	f040 808a 	bne.w	800e428 <_printf_float+0x1b0>
 800e314:	f04f 30ff 	mov.w	r0, #4294967295
 800e318:	b00b      	add	sp, #44	; 0x2c
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	eeb4 0b40 	vcmp.f64	d0, d0
 800e322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e326:	d709      	bvc.n	800e33c <_printf_float+0xc4>
 800e328:	ee10 3a90 	vmov	r3, s1
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	bfbc      	itt	lt
 800e330:	232d      	movlt	r3, #45	; 0x2d
 800e332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e336:	487e      	ldr	r0, [pc, #504]	; (800e530 <_printf_float+0x2b8>)
 800e338:	4b7e      	ldr	r3, [pc, #504]	; (800e534 <_printf_float+0x2bc>)
 800e33a:	e7d5      	b.n	800e2e8 <_printf_float+0x70>
 800e33c:	6863      	ldr	r3, [r4, #4]
 800e33e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e342:	9104      	str	r1, [sp, #16]
 800e344:	1c59      	adds	r1, r3, #1
 800e346:	d13c      	bne.n	800e3c2 <_printf_float+0x14a>
 800e348:	2306      	movs	r3, #6
 800e34a:	6063      	str	r3, [r4, #4]
 800e34c:	2300      	movs	r3, #0
 800e34e:	9303      	str	r3, [sp, #12]
 800e350:	ab08      	add	r3, sp, #32
 800e352:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e356:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e35a:	ab07      	add	r3, sp, #28
 800e35c:	6861      	ldr	r1, [r4, #4]
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	6022      	str	r2, [r4, #0]
 800e362:	f10d 031b 	add.w	r3, sp, #27
 800e366:	4628      	mov	r0, r5
 800e368:	f7ff fef6 	bl	800e158 <__cvt>
 800e36c:	9b04      	ldr	r3, [sp, #16]
 800e36e:	9907      	ldr	r1, [sp, #28]
 800e370:	2b47      	cmp	r3, #71	; 0x47
 800e372:	4680      	mov	r8, r0
 800e374:	d108      	bne.n	800e388 <_printf_float+0x110>
 800e376:	1cc8      	adds	r0, r1, #3
 800e378:	db02      	blt.n	800e380 <_printf_float+0x108>
 800e37a:	6863      	ldr	r3, [r4, #4]
 800e37c:	4299      	cmp	r1, r3
 800e37e:	dd41      	ble.n	800e404 <_printf_float+0x18c>
 800e380:	f1a9 0902 	sub.w	r9, r9, #2
 800e384:	fa5f f989 	uxtb.w	r9, r9
 800e388:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e38c:	d820      	bhi.n	800e3d0 <_printf_float+0x158>
 800e38e:	3901      	subs	r1, #1
 800e390:	464a      	mov	r2, r9
 800e392:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e396:	9107      	str	r1, [sp, #28]
 800e398:	f7ff ff30 	bl	800e1fc <__exponent>
 800e39c:	9a08      	ldr	r2, [sp, #32]
 800e39e:	9004      	str	r0, [sp, #16]
 800e3a0:	1813      	adds	r3, r2, r0
 800e3a2:	2a01      	cmp	r2, #1
 800e3a4:	6123      	str	r3, [r4, #16]
 800e3a6:	dc02      	bgt.n	800e3ae <_printf_float+0x136>
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	07d2      	lsls	r2, r2, #31
 800e3ac:	d501      	bpl.n	800e3b2 <_printf_float+0x13a>
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	6123      	str	r3, [r4, #16]
 800e3b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0a2      	beq.n	800e300 <_printf_float+0x88>
 800e3ba:	232d      	movs	r3, #45	; 0x2d
 800e3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3c0:	e79e      	b.n	800e300 <_printf_float+0x88>
 800e3c2:	9904      	ldr	r1, [sp, #16]
 800e3c4:	2947      	cmp	r1, #71	; 0x47
 800e3c6:	d1c1      	bne.n	800e34c <_printf_float+0xd4>
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1bf      	bne.n	800e34c <_printf_float+0xd4>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e7bc      	b.n	800e34a <_printf_float+0xd2>
 800e3d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e3d4:	d118      	bne.n	800e408 <_printf_float+0x190>
 800e3d6:	2900      	cmp	r1, #0
 800e3d8:	6863      	ldr	r3, [r4, #4]
 800e3da:	dd0b      	ble.n	800e3f4 <_printf_float+0x17c>
 800e3dc:	6121      	str	r1, [r4, #16]
 800e3de:	b913      	cbnz	r3, 800e3e6 <_printf_float+0x16e>
 800e3e0:	6822      	ldr	r2, [r4, #0]
 800e3e2:	07d0      	lsls	r0, r2, #31
 800e3e4:	d502      	bpl.n	800e3ec <_printf_float+0x174>
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	440b      	add	r3, r1
 800e3ea:	6123      	str	r3, [r4, #16]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800e3f0:	9304      	str	r3, [sp, #16]
 800e3f2:	e7de      	b.n	800e3b2 <_printf_float+0x13a>
 800e3f4:	b913      	cbnz	r3, 800e3fc <_printf_float+0x184>
 800e3f6:	6822      	ldr	r2, [r4, #0]
 800e3f8:	07d2      	lsls	r2, r2, #31
 800e3fa:	d501      	bpl.n	800e400 <_printf_float+0x188>
 800e3fc:	3302      	adds	r3, #2
 800e3fe:	e7f4      	b.n	800e3ea <_printf_float+0x172>
 800e400:	2301      	movs	r3, #1
 800e402:	e7f2      	b.n	800e3ea <_printf_float+0x172>
 800e404:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e408:	9b08      	ldr	r3, [sp, #32]
 800e40a:	4299      	cmp	r1, r3
 800e40c:	db05      	blt.n	800e41a <_printf_float+0x1a2>
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	6121      	str	r1, [r4, #16]
 800e412:	07d8      	lsls	r0, r3, #31
 800e414:	d5ea      	bpl.n	800e3ec <_printf_float+0x174>
 800e416:	1c4b      	adds	r3, r1, #1
 800e418:	e7e7      	b.n	800e3ea <_printf_float+0x172>
 800e41a:	2900      	cmp	r1, #0
 800e41c:	bfd4      	ite	le
 800e41e:	f1c1 0202 	rsble	r2, r1, #2
 800e422:	2201      	movgt	r2, #1
 800e424:	4413      	add	r3, r2
 800e426:	e7e0      	b.n	800e3ea <_printf_float+0x172>
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	055a      	lsls	r2, r3, #21
 800e42c:	d407      	bmi.n	800e43e <_printf_float+0x1c6>
 800e42e:	6923      	ldr	r3, [r4, #16]
 800e430:	4642      	mov	r2, r8
 800e432:	4631      	mov	r1, r6
 800e434:	4628      	mov	r0, r5
 800e436:	47b8      	blx	r7
 800e438:	3001      	adds	r0, #1
 800e43a:	d12a      	bne.n	800e492 <_printf_float+0x21a>
 800e43c:	e76a      	b.n	800e314 <_printf_float+0x9c>
 800e43e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e442:	f240 80e2 	bls.w	800e60a <_printf_float+0x392>
 800e446:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e44a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e452:	d133      	bne.n	800e4bc <_printf_float+0x244>
 800e454:	4a38      	ldr	r2, [pc, #224]	; (800e538 <_printf_float+0x2c0>)
 800e456:	2301      	movs	r3, #1
 800e458:	4631      	mov	r1, r6
 800e45a:	4628      	mov	r0, r5
 800e45c:	47b8      	blx	r7
 800e45e:	3001      	adds	r0, #1
 800e460:	f43f af58 	beq.w	800e314 <_printf_float+0x9c>
 800e464:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e468:	429a      	cmp	r2, r3
 800e46a:	db02      	blt.n	800e472 <_printf_float+0x1fa>
 800e46c:	6823      	ldr	r3, [r4, #0]
 800e46e:	07d8      	lsls	r0, r3, #31
 800e470:	d50f      	bpl.n	800e492 <_printf_float+0x21a>
 800e472:	4653      	mov	r3, sl
 800e474:	465a      	mov	r2, fp
 800e476:	4631      	mov	r1, r6
 800e478:	4628      	mov	r0, r5
 800e47a:	47b8      	blx	r7
 800e47c:	3001      	adds	r0, #1
 800e47e:	f43f af49 	beq.w	800e314 <_printf_float+0x9c>
 800e482:	f04f 0800 	mov.w	r8, #0
 800e486:	f104 091a 	add.w	r9, r4, #26
 800e48a:	9b08      	ldr	r3, [sp, #32]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	4543      	cmp	r3, r8
 800e490:	dc09      	bgt.n	800e4a6 <_printf_float+0x22e>
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	079b      	lsls	r3, r3, #30
 800e496:	f100 8108 	bmi.w	800e6aa <_printf_float+0x432>
 800e49a:	68e0      	ldr	r0, [r4, #12]
 800e49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e49e:	4298      	cmp	r0, r3
 800e4a0:	bfb8      	it	lt
 800e4a2:	4618      	movlt	r0, r3
 800e4a4:	e738      	b.n	800e318 <_printf_float+0xa0>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	464a      	mov	r2, r9
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	47b8      	blx	r7
 800e4b0:	3001      	adds	r0, #1
 800e4b2:	f43f af2f 	beq.w	800e314 <_printf_float+0x9c>
 800e4b6:	f108 0801 	add.w	r8, r8, #1
 800e4ba:	e7e6      	b.n	800e48a <_printf_float+0x212>
 800e4bc:	9b07      	ldr	r3, [sp, #28]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dc3c      	bgt.n	800e53c <_printf_float+0x2c4>
 800e4c2:	4a1d      	ldr	r2, [pc, #116]	; (800e538 <_printf_float+0x2c0>)
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b8      	blx	r7
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	f43f af21 	beq.w	800e314 <_printf_float+0x9c>
 800e4d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	d102      	bne.n	800e4e0 <_printf_float+0x268>
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	07d9      	lsls	r1, r3, #31
 800e4de:	d5d8      	bpl.n	800e492 <_printf_float+0x21a>
 800e4e0:	4653      	mov	r3, sl
 800e4e2:	465a      	mov	r2, fp
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	47b8      	blx	r7
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	f43f af12 	beq.w	800e314 <_printf_float+0x9c>
 800e4f0:	f04f 0900 	mov.w	r9, #0
 800e4f4:	f104 0a1a 	add.w	sl, r4, #26
 800e4f8:	9b07      	ldr	r3, [sp, #28]
 800e4fa:	425b      	negs	r3, r3
 800e4fc:	454b      	cmp	r3, r9
 800e4fe:	dc01      	bgt.n	800e504 <_printf_float+0x28c>
 800e500:	9b08      	ldr	r3, [sp, #32]
 800e502:	e795      	b.n	800e430 <_printf_float+0x1b8>
 800e504:	2301      	movs	r3, #1
 800e506:	4652      	mov	r2, sl
 800e508:	4631      	mov	r1, r6
 800e50a:	4628      	mov	r0, r5
 800e50c:	47b8      	blx	r7
 800e50e:	3001      	adds	r0, #1
 800e510:	f43f af00 	beq.w	800e314 <_printf_float+0x9c>
 800e514:	f109 0901 	add.w	r9, r9, #1
 800e518:	e7ee      	b.n	800e4f8 <_printf_float+0x280>
 800e51a:	bf00      	nop
 800e51c:	f3af 8000 	nop.w
 800e520:	ffffffff 	.word	0xffffffff
 800e524:	7fefffff 	.word	0x7fefffff
 800e528:	0801b114 	.word	0x0801b114
 800e52c:	0801b118 	.word	0x0801b118
 800e530:	0801b120 	.word	0x0801b120
 800e534:	0801b11c 	.word	0x0801b11c
 800e538:	0801b124 	.word	0x0801b124
 800e53c:	9a08      	ldr	r2, [sp, #32]
 800e53e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e540:	429a      	cmp	r2, r3
 800e542:	bfa8      	it	ge
 800e544:	461a      	movge	r2, r3
 800e546:	2a00      	cmp	r2, #0
 800e548:	4691      	mov	r9, r2
 800e54a:	dc38      	bgt.n	800e5be <_printf_float+0x346>
 800e54c:	2300      	movs	r3, #0
 800e54e:	9305      	str	r3, [sp, #20]
 800e550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e554:	f104 021a 	add.w	r2, r4, #26
 800e558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e55a:	9905      	ldr	r1, [sp, #20]
 800e55c:	9304      	str	r3, [sp, #16]
 800e55e:	eba3 0309 	sub.w	r3, r3, r9
 800e562:	428b      	cmp	r3, r1
 800e564:	dc33      	bgt.n	800e5ce <_printf_float+0x356>
 800e566:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	db3c      	blt.n	800e5e8 <_printf_float+0x370>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	07da      	lsls	r2, r3, #31
 800e572:	d439      	bmi.n	800e5e8 <_printf_float+0x370>
 800e574:	9a08      	ldr	r2, [sp, #32]
 800e576:	9b04      	ldr	r3, [sp, #16]
 800e578:	9907      	ldr	r1, [sp, #28]
 800e57a:	1ad3      	subs	r3, r2, r3
 800e57c:	eba2 0901 	sub.w	r9, r2, r1
 800e580:	4599      	cmp	r9, r3
 800e582:	bfa8      	it	ge
 800e584:	4699      	movge	r9, r3
 800e586:	f1b9 0f00 	cmp.w	r9, #0
 800e58a:	dc35      	bgt.n	800e5f8 <_printf_float+0x380>
 800e58c:	f04f 0800 	mov.w	r8, #0
 800e590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e594:	f104 0a1a 	add.w	sl, r4, #26
 800e598:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e59c:	1a9b      	subs	r3, r3, r2
 800e59e:	eba3 0309 	sub.w	r3, r3, r9
 800e5a2:	4543      	cmp	r3, r8
 800e5a4:	f77f af75 	ble.w	800e492 <_printf_float+0x21a>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	4652      	mov	r2, sl
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	47b8      	blx	r7
 800e5b2:	3001      	adds	r0, #1
 800e5b4:	f43f aeae 	beq.w	800e314 <_printf_float+0x9c>
 800e5b8:	f108 0801 	add.w	r8, r8, #1
 800e5bc:	e7ec      	b.n	800e598 <_printf_float+0x320>
 800e5be:	4613      	mov	r3, r2
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	4642      	mov	r2, r8
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	47b8      	blx	r7
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d1bf      	bne.n	800e54c <_printf_float+0x2d4>
 800e5cc:	e6a2      	b.n	800e314 <_printf_float+0x9c>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	4631      	mov	r1, r6
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	9204      	str	r2, [sp, #16]
 800e5d6:	47b8      	blx	r7
 800e5d8:	3001      	adds	r0, #1
 800e5da:	f43f ae9b 	beq.w	800e314 <_printf_float+0x9c>
 800e5de:	9b05      	ldr	r3, [sp, #20]
 800e5e0:	9a04      	ldr	r2, [sp, #16]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	9305      	str	r3, [sp, #20]
 800e5e6:	e7b7      	b.n	800e558 <_printf_float+0x2e0>
 800e5e8:	4653      	mov	r3, sl
 800e5ea:	465a      	mov	r2, fp
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	47b8      	blx	r7
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	d1be      	bne.n	800e574 <_printf_float+0x2fc>
 800e5f6:	e68d      	b.n	800e314 <_printf_float+0x9c>
 800e5f8:	9a04      	ldr	r2, [sp, #16]
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	4442      	add	r2, r8
 800e5fe:	4631      	mov	r1, r6
 800e600:	4628      	mov	r0, r5
 800e602:	47b8      	blx	r7
 800e604:	3001      	adds	r0, #1
 800e606:	d1c1      	bne.n	800e58c <_printf_float+0x314>
 800e608:	e684      	b.n	800e314 <_printf_float+0x9c>
 800e60a:	9a08      	ldr	r2, [sp, #32]
 800e60c:	2a01      	cmp	r2, #1
 800e60e:	dc01      	bgt.n	800e614 <_printf_float+0x39c>
 800e610:	07db      	lsls	r3, r3, #31
 800e612:	d537      	bpl.n	800e684 <_printf_float+0x40c>
 800e614:	2301      	movs	r3, #1
 800e616:	4642      	mov	r2, r8
 800e618:	4631      	mov	r1, r6
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b8      	blx	r7
 800e61e:	3001      	adds	r0, #1
 800e620:	f43f ae78 	beq.w	800e314 <_printf_float+0x9c>
 800e624:	4653      	mov	r3, sl
 800e626:	465a      	mov	r2, fp
 800e628:	4631      	mov	r1, r6
 800e62a:	4628      	mov	r0, r5
 800e62c:	47b8      	blx	r7
 800e62e:	3001      	adds	r0, #1
 800e630:	f43f ae70 	beq.w	800e314 <_printf_float+0x9c>
 800e634:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e638:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e640:	d01b      	beq.n	800e67a <_printf_float+0x402>
 800e642:	9b08      	ldr	r3, [sp, #32]
 800e644:	f108 0201 	add.w	r2, r8, #1
 800e648:	3b01      	subs	r3, #1
 800e64a:	4631      	mov	r1, r6
 800e64c:	4628      	mov	r0, r5
 800e64e:	47b8      	blx	r7
 800e650:	3001      	adds	r0, #1
 800e652:	d10e      	bne.n	800e672 <_printf_float+0x3fa>
 800e654:	e65e      	b.n	800e314 <_printf_float+0x9c>
 800e656:	2301      	movs	r3, #1
 800e658:	464a      	mov	r2, r9
 800e65a:	4631      	mov	r1, r6
 800e65c:	4628      	mov	r0, r5
 800e65e:	47b8      	blx	r7
 800e660:	3001      	adds	r0, #1
 800e662:	f43f ae57 	beq.w	800e314 <_printf_float+0x9c>
 800e666:	f108 0801 	add.w	r8, r8, #1
 800e66a:	9b08      	ldr	r3, [sp, #32]
 800e66c:	3b01      	subs	r3, #1
 800e66e:	4543      	cmp	r3, r8
 800e670:	dcf1      	bgt.n	800e656 <_printf_float+0x3de>
 800e672:	9b04      	ldr	r3, [sp, #16]
 800e674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e678:	e6db      	b.n	800e432 <_printf_float+0x1ba>
 800e67a:	f04f 0800 	mov.w	r8, #0
 800e67e:	f104 091a 	add.w	r9, r4, #26
 800e682:	e7f2      	b.n	800e66a <_printf_float+0x3f2>
 800e684:	2301      	movs	r3, #1
 800e686:	4642      	mov	r2, r8
 800e688:	e7df      	b.n	800e64a <_printf_float+0x3d2>
 800e68a:	2301      	movs	r3, #1
 800e68c:	464a      	mov	r2, r9
 800e68e:	4631      	mov	r1, r6
 800e690:	4628      	mov	r0, r5
 800e692:	47b8      	blx	r7
 800e694:	3001      	adds	r0, #1
 800e696:	f43f ae3d 	beq.w	800e314 <_printf_float+0x9c>
 800e69a:	f108 0801 	add.w	r8, r8, #1
 800e69e:	68e3      	ldr	r3, [r4, #12]
 800e6a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6a2:	1a5b      	subs	r3, r3, r1
 800e6a4:	4543      	cmp	r3, r8
 800e6a6:	dcf0      	bgt.n	800e68a <_printf_float+0x412>
 800e6a8:	e6f7      	b.n	800e49a <_printf_float+0x222>
 800e6aa:	f04f 0800 	mov.w	r8, #0
 800e6ae:	f104 0919 	add.w	r9, r4, #25
 800e6b2:	e7f4      	b.n	800e69e <_printf_float+0x426>

0800e6b4 <_printf_common>:
 800e6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b8:	4616      	mov	r6, r2
 800e6ba:	4699      	mov	r9, r3
 800e6bc:	688a      	ldr	r2, [r1, #8]
 800e6be:	690b      	ldr	r3, [r1, #16]
 800e6c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	bfb8      	it	lt
 800e6c8:	4613      	movlt	r3, r2
 800e6ca:	6033      	str	r3, [r6, #0]
 800e6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	b10a      	cbz	r2, 800e6da <_printf_common+0x26>
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	6033      	str	r3, [r6, #0]
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	0699      	lsls	r1, r3, #26
 800e6de:	bf42      	ittt	mi
 800e6e0:	6833      	ldrmi	r3, [r6, #0]
 800e6e2:	3302      	addmi	r3, #2
 800e6e4:	6033      	strmi	r3, [r6, #0]
 800e6e6:	6825      	ldr	r5, [r4, #0]
 800e6e8:	f015 0506 	ands.w	r5, r5, #6
 800e6ec:	d106      	bne.n	800e6fc <_printf_common+0x48>
 800e6ee:	f104 0a19 	add.w	sl, r4, #25
 800e6f2:	68e3      	ldr	r3, [r4, #12]
 800e6f4:	6832      	ldr	r2, [r6, #0]
 800e6f6:	1a9b      	subs	r3, r3, r2
 800e6f8:	42ab      	cmp	r3, r5
 800e6fa:	dc26      	bgt.n	800e74a <_printf_common+0x96>
 800e6fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e700:	1e13      	subs	r3, r2, #0
 800e702:	6822      	ldr	r2, [r4, #0]
 800e704:	bf18      	it	ne
 800e706:	2301      	movne	r3, #1
 800e708:	0692      	lsls	r2, r2, #26
 800e70a:	d42b      	bmi.n	800e764 <_printf_common+0xb0>
 800e70c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e710:	4649      	mov	r1, r9
 800e712:	4638      	mov	r0, r7
 800e714:	47c0      	blx	r8
 800e716:	3001      	adds	r0, #1
 800e718:	d01e      	beq.n	800e758 <_printf_common+0xa4>
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	68e5      	ldr	r5, [r4, #12]
 800e71e:	6832      	ldr	r2, [r6, #0]
 800e720:	f003 0306 	and.w	r3, r3, #6
 800e724:	2b04      	cmp	r3, #4
 800e726:	bf08      	it	eq
 800e728:	1aad      	subeq	r5, r5, r2
 800e72a:	68a3      	ldr	r3, [r4, #8]
 800e72c:	6922      	ldr	r2, [r4, #16]
 800e72e:	bf0c      	ite	eq
 800e730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e734:	2500      	movne	r5, #0
 800e736:	4293      	cmp	r3, r2
 800e738:	bfc4      	itt	gt
 800e73a:	1a9b      	subgt	r3, r3, r2
 800e73c:	18ed      	addgt	r5, r5, r3
 800e73e:	2600      	movs	r6, #0
 800e740:	341a      	adds	r4, #26
 800e742:	42b5      	cmp	r5, r6
 800e744:	d11a      	bne.n	800e77c <_printf_common+0xc8>
 800e746:	2000      	movs	r0, #0
 800e748:	e008      	b.n	800e75c <_printf_common+0xa8>
 800e74a:	2301      	movs	r3, #1
 800e74c:	4652      	mov	r2, sl
 800e74e:	4649      	mov	r1, r9
 800e750:	4638      	mov	r0, r7
 800e752:	47c0      	blx	r8
 800e754:	3001      	adds	r0, #1
 800e756:	d103      	bne.n	800e760 <_printf_common+0xac>
 800e758:	f04f 30ff 	mov.w	r0, #4294967295
 800e75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e760:	3501      	adds	r5, #1
 800e762:	e7c6      	b.n	800e6f2 <_printf_common+0x3e>
 800e764:	18e1      	adds	r1, r4, r3
 800e766:	1c5a      	adds	r2, r3, #1
 800e768:	2030      	movs	r0, #48	; 0x30
 800e76a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e76e:	4422      	add	r2, r4
 800e770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e778:	3302      	adds	r3, #2
 800e77a:	e7c7      	b.n	800e70c <_printf_common+0x58>
 800e77c:	2301      	movs	r3, #1
 800e77e:	4622      	mov	r2, r4
 800e780:	4649      	mov	r1, r9
 800e782:	4638      	mov	r0, r7
 800e784:	47c0      	blx	r8
 800e786:	3001      	adds	r0, #1
 800e788:	d0e6      	beq.n	800e758 <_printf_common+0xa4>
 800e78a:	3601      	adds	r6, #1
 800e78c:	e7d9      	b.n	800e742 <_printf_common+0x8e>
	...

0800e790 <_printf_i>:
 800e790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	460c      	mov	r4, r1
 800e796:	4691      	mov	r9, r2
 800e798:	7e27      	ldrb	r7, [r4, #24]
 800e79a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e79c:	2f78      	cmp	r7, #120	; 0x78
 800e79e:	4680      	mov	r8, r0
 800e7a0:	469a      	mov	sl, r3
 800e7a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7a6:	d807      	bhi.n	800e7b8 <_printf_i+0x28>
 800e7a8:	2f62      	cmp	r7, #98	; 0x62
 800e7aa:	d80a      	bhi.n	800e7c2 <_printf_i+0x32>
 800e7ac:	2f00      	cmp	r7, #0
 800e7ae:	f000 80d8 	beq.w	800e962 <_printf_i+0x1d2>
 800e7b2:	2f58      	cmp	r7, #88	; 0x58
 800e7b4:	f000 80a3 	beq.w	800e8fe <_printf_i+0x16e>
 800e7b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e7bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7c0:	e03a      	b.n	800e838 <_printf_i+0xa8>
 800e7c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7c6:	2b15      	cmp	r3, #21
 800e7c8:	d8f6      	bhi.n	800e7b8 <_printf_i+0x28>
 800e7ca:	a001      	add	r0, pc, #4	; (adr r0, 800e7d0 <_printf_i+0x40>)
 800e7cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e7d0:	0800e829 	.word	0x0800e829
 800e7d4:	0800e83d 	.word	0x0800e83d
 800e7d8:	0800e7b9 	.word	0x0800e7b9
 800e7dc:	0800e7b9 	.word	0x0800e7b9
 800e7e0:	0800e7b9 	.word	0x0800e7b9
 800e7e4:	0800e7b9 	.word	0x0800e7b9
 800e7e8:	0800e83d 	.word	0x0800e83d
 800e7ec:	0800e7b9 	.word	0x0800e7b9
 800e7f0:	0800e7b9 	.word	0x0800e7b9
 800e7f4:	0800e7b9 	.word	0x0800e7b9
 800e7f8:	0800e7b9 	.word	0x0800e7b9
 800e7fc:	0800e949 	.word	0x0800e949
 800e800:	0800e86d 	.word	0x0800e86d
 800e804:	0800e92b 	.word	0x0800e92b
 800e808:	0800e7b9 	.word	0x0800e7b9
 800e80c:	0800e7b9 	.word	0x0800e7b9
 800e810:	0800e96b 	.word	0x0800e96b
 800e814:	0800e7b9 	.word	0x0800e7b9
 800e818:	0800e86d 	.word	0x0800e86d
 800e81c:	0800e7b9 	.word	0x0800e7b9
 800e820:	0800e7b9 	.word	0x0800e7b9
 800e824:	0800e933 	.word	0x0800e933
 800e828:	680b      	ldr	r3, [r1, #0]
 800e82a:	1d1a      	adds	r2, r3, #4
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	600a      	str	r2, [r1, #0]
 800e830:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e838:	2301      	movs	r3, #1
 800e83a:	e0a3      	b.n	800e984 <_printf_i+0x1f4>
 800e83c:	6825      	ldr	r5, [r4, #0]
 800e83e:	6808      	ldr	r0, [r1, #0]
 800e840:	062e      	lsls	r6, r5, #24
 800e842:	f100 0304 	add.w	r3, r0, #4
 800e846:	d50a      	bpl.n	800e85e <_printf_i+0xce>
 800e848:	6805      	ldr	r5, [r0, #0]
 800e84a:	600b      	str	r3, [r1, #0]
 800e84c:	2d00      	cmp	r5, #0
 800e84e:	da03      	bge.n	800e858 <_printf_i+0xc8>
 800e850:	232d      	movs	r3, #45	; 0x2d
 800e852:	426d      	negs	r5, r5
 800e854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e858:	485e      	ldr	r0, [pc, #376]	; (800e9d4 <_printf_i+0x244>)
 800e85a:	230a      	movs	r3, #10
 800e85c:	e019      	b.n	800e892 <_printf_i+0x102>
 800e85e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e862:	6805      	ldr	r5, [r0, #0]
 800e864:	600b      	str	r3, [r1, #0]
 800e866:	bf18      	it	ne
 800e868:	b22d      	sxthne	r5, r5
 800e86a:	e7ef      	b.n	800e84c <_printf_i+0xbc>
 800e86c:	680b      	ldr	r3, [r1, #0]
 800e86e:	6825      	ldr	r5, [r4, #0]
 800e870:	1d18      	adds	r0, r3, #4
 800e872:	6008      	str	r0, [r1, #0]
 800e874:	0628      	lsls	r0, r5, #24
 800e876:	d501      	bpl.n	800e87c <_printf_i+0xec>
 800e878:	681d      	ldr	r5, [r3, #0]
 800e87a:	e002      	b.n	800e882 <_printf_i+0xf2>
 800e87c:	0669      	lsls	r1, r5, #25
 800e87e:	d5fb      	bpl.n	800e878 <_printf_i+0xe8>
 800e880:	881d      	ldrh	r5, [r3, #0]
 800e882:	4854      	ldr	r0, [pc, #336]	; (800e9d4 <_printf_i+0x244>)
 800e884:	2f6f      	cmp	r7, #111	; 0x6f
 800e886:	bf0c      	ite	eq
 800e888:	2308      	moveq	r3, #8
 800e88a:	230a      	movne	r3, #10
 800e88c:	2100      	movs	r1, #0
 800e88e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e892:	6866      	ldr	r6, [r4, #4]
 800e894:	60a6      	str	r6, [r4, #8]
 800e896:	2e00      	cmp	r6, #0
 800e898:	bfa2      	ittt	ge
 800e89a:	6821      	ldrge	r1, [r4, #0]
 800e89c:	f021 0104 	bicge.w	r1, r1, #4
 800e8a0:	6021      	strge	r1, [r4, #0]
 800e8a2:	b90d      	cbnz	r5, 800e8a8 <_printf_i+0x118>
 800e8a4:	2e00      	cmp	r6, #0
 800e8a6:	d04d      	beq.n	800e944 <_printf_i+0x1b4>
 800e8a8:	4616      	mov	r6, r2
 800e8aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800e8ae:	fb03 5711 	mls	r7, r3, r1, r5
 800e8b2:	5dc7      	ldrb	r7, [r0, r7]
 800e8b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e8b8:	462f      	mov	r7, r5
 800e8ba:	42bb      	cmp	r3, r7
 800e8bc:	460d      	mov	r5, r1
 800e8be:	d9f4      	bls.n	800e8aa <_printf_i+0x11a>
 800e8c0:	2b08      	cmp	r3, #8
 800e8c2:	d10b      	bne.n	800e8dc <_printf_i+0x14c>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	07df      	lsls	r7, r3, #31
 800e8c8:	d508      	bpl.n	800e8dc <_printf_i+0x14c>
 800e8ca:	6923      	ldr	r3, [r4, #16]
 800e8cc:	6861      	ldr	r1, [r4, #4]
 800e8ce:	4299      	cmp	r1, r3
 800e8d0:	bfde      	ittt	le
 800e8d2:	2330      	movle	r3, #48	; 0x30
 800e8d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e8d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e8dc:	1b92      	subs	r2, r2, r6
 800e8de:	6122      	str	r2, [r4, #16]
 800e8e0:	f8cd a000 	str.w	sl, [sp]
 800e8e4:	464b      	mov	r3, r9
 800e8e6:	aa03      	add	r2, sp, #12
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4640      	mov	r0, r8
 800e8ec:	f7ff fee2 	bl	800e6b4 <_printf_common>
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d14c      	bne.n	800e98e <_printf_i+0x1fe>
 800e8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f8:	b004      	add	sp, #16
 800e8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8fe:	4835      	ldr	r0, [pc, #212]	; (800e9d4 <_printf_i+0x244>)
 800e900:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	680e      	ldr	r6, [r1, #0]
 800e908:	061f      	lsls	r7, r3, #24
 800e90a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e90e:	600e      	str	r6, [r1, #0]
 800e910:	d514      	bpl.n	800e93c <_printf_i+0x1ac>
 800e912:	07d9      	lsls	r1, r3, #31
 800e914:	bf44      	itt	mi
 800e916:	f043 0320 	orrmi.w	r3, r3, #32
 800e91a:	6023      	strmi	r3, [r4, #0]
 800e91c:	b91d      	cbnz	r5, 800e926 <_printf_i+0x196>
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	f023 0320 	bic.w	r3, r3, #32
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	2310      	movs	r3, #16
 800e928:	e7b0      	b.n	800e88c <_printf_i+0xfc>
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	f043 0320 	orr.w	r3, r3, #32
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	2378      	movs	r3, #120	; 0x78
 800e934:	4828      	ldr	r0, [pc, #160]	; (800e9d8 <_printf_i+0x248>)
 800e936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e93a:	e7e3      	b.n	800e904 <_printf_i+0x174>
 800e93c:	065e      	lsls	r6, r3, #25
 800e93e:	bf48      	it	mi
 800e940:	b2ad      	uxthmi	r5, r5
 800e942:	e7e6      	b.n	800e912 <_printf_i+0x182>
 800e944:	4616      	mov	r6, r2
 800e946:	e7bb      	b.n	800e8c0 <_printf_i+0x130>
 800e948:	680b      	ldr	r3, [r1, #0]
 800e94a:	6826      	ldr	r6, [r4, #0]
 800e94c:	6960      	ldr	r0, [r4, #20]
 800e94e:	1d1d      	adds	r5, r3, #4
 800e950:	600d      	str	r5, [r1, #0]
 800e952:	0635      	lsls	r5, r6, #24
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	d501      	bpl.n	800e95c <_printf_i+0x1cc>
 800e958:	6018      	str	r0, [r3, #0]
 800e95a:	e002      	b.n	800e962 <_printf_i+0x1d2>
 800e95c:	0671      	lsls	r1, r6, #25
 800e95e:	d5fb      	bpl.n	800e958 <_printf_i+0x1c8>
 800e960:	8018      	strh	r0, [r3, #0]
 800e962:	2300      	movs	r3, #0
 800e964:	6123      	str	r3, [r4, #16]
 800e966:	4616      	mov	r6, r2
 800e968:	e7ba      	b.n	800e8e0 <_printf_i+0x150>
 800e96a:	680b      	ldr	r3, [r1, #0]
 800e96c:	1d1a      	adds	r2, r3, #4
 800e96e:	600a      	str	r2, [r1, #0]
 800e970:	681e      	ldr	r6, [r3, #0]
 800e972:	6862      	ldr	r2, [r4, #4]
 800e974:	2100      	movs	r1, #0
 800e976:	4630      	mov	r0, r6
 800e978:	f7f1 fcba 	bl	80002f0 <memchr>
 800e97c:	b108      	cbz	r0, 800e982 <_printf_i+0x1f2>
 800e97e:	1b80      	subs	r0, r0, r6
 800e980:	6060      	str	r0, [r4, #4]
 800e982:	6863      	ldr	r3, [r4, #4]
 800e984:	6123      	str	r3, [r4, #16]
 800e986:	2300      	movs	r3, #0
 800e988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e98c:	e7a8      	b.n	800e8e0 <_printf_i+0x150>
 800e98e:	6923      	ldr	r3, [r4, #16]
 800e990:	4632      	mov	r2, r6
 800e992:	4649      	mov	r1, r9
 800e994:	4640      	mov	r0, r8
 800e996:	47d0      	blx	sl
 800e998:	3001      	adds	r0, #1
 800e99a:	d0ab      	beq.n	800e8f4 <_printf_i+0x164>
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	079b      	lsls	r3, r3, #30
 800e9a0:	d413      	bmi.n	800e9ca <_printf_i+0x23a>
 800e9a2:	68e0      	ldr	r0, [r4, #12]
 800e9a4:	9b03      	ldr	r3, [sp, #12]
 800e9a6:	4298      	cmp	r0, r3
 800e9a8:	bfb8      	it	lt
 800e9aa:	4618      	movlt	r0, r3
 800e9ac:	e7a4      	b.n	800e8f8 <_printf_i+0x168>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	4632      	mov	r2, r6
 800e9b2:	4649      	mov	r1, r9
 800e9b4:	4640      	mov	r0, r8
 800e9b6:	47d0      	blx	sl
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d09b      	beq.n	800e8f4 <_printf_i+0x164>
 800e9bc:	3501      	adds	r5, #1
 800e9be:	68e3      	ldr	r3, [r4, #12]
 800e9c0:	9903      	ldr	r1, [sp, #12]
 800e9c2:	1a5b      	subs	r3, r3, r1
 800e9c4:	42ab      	cmp	r3, r5
 800e9c6:	dcf2      	bgt.n	800e9ae <_printf_i+0x21e>
 800e9c8:	e7eb      	b.n	800e9a2 <_printf_i+0x212>
 800e9ca:	2500      	movs	r5, #0
 800e9cc:	f104 0619 	add.w	r6, r4, #25
 800e9d0:	e7f5      	b.n	800e9be <_printf_i+0x22e>
 800e9d2:	bf00      	nop
 800e9d4:	0801b126 	.word	0x0801b126
 800e9d8:	0801b137 	.word	0x0801b137

0800e9dc <siprintf>:
 800e9dc:	b40e      	push	{r1, r2, r3}
 800e9de:	b500      	push	{lr}
 800e9e0:	b09c      	sub	sp, #112	; 0x70
 800e9e2:	ab1d      	add	r3, sp, #116	; 0x74
 800e9e4:	9002      	str	r0, [sp, #8]
 800e9e6:	9006      	str	r0, [sp, #24]
 800e9e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9ec:	4809      	ldr	r0, [pc, #36]	; (800ea14 <siprintf+0x38>)
 800e9ee:	9107      	str	r1, [sp, #28]
 800e9f0:	9104      	str	r1, [sp, #16]
 800e9f2:	4909      	ldr	r1, [pc, #36]	; (800ea18 <siprintf+0x3c>)
 800e9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f8:	9105      	str	r1, [sp, #20]
 800e9fa:	6800      	ldr	r0, [r0, #0]
 800e9fc:	9301      	str	r3, [sp, #4]
 800e9fe:	a902      	add	r1, sp, #8
 800ea00:	f001 fadc 	bl	800ffbc <_svfiprintf_r>
 800ea04:	9b02      	ldr	r3, [sp, #8]
 800ea06:	2200      	movs	r2, #0
 800ea08:	701a      	strb	r2, [r3, #0]
 800ea0a:	b01c      	add	sp, #112	; 0x70
 800ea0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea10:	b003      	add	sp, #12
 800ea12:	4770      	bx	lr
 800ea14:	2400040c 	.word	0x2400040c
 800ea18:	ffff0208 	.word	0xffff0208

0800ea1c <stpcpy>:
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea22:	4618      	mov	r0, r3
 800ea24:	f803 2b01 	strb.w	r2, [r3], #1
 800ea28:	2a00      	cmp	r2, #0
 800ea2a:	d1f8      	bne.n	800ea1e <stpcpy+0x2>
 800ea2c:	4770      	bx	lr

0800ea2e <strcat>:
 800ea2e:	b510      	push	{r4, lr}
 800ea30:	4602      	mov	r2, r0
 800ea32:	7814      	ldrb	r4, [r2, #0]
 800ea34:	4613      	mov	r3, r2
 800ea36:	3201      	adds	r2, #1
 800ea38:	2c00      	cmp	r4, #0
 800ea3a:	d1fa      	bne.n	800ea32 <strcat+0x4>
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea46:	2a00      	cmp	r2, #0
 800ea48:	d1f9      	bne.n	800ea3e <strcat+0x10>
 800ea4a:	bd10      	pop	{r4, pc}

0800ea4c <strcpy>:
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea52:	f803 2b01 	strb.w	r2, [r3], #1
 800ea56:	2a00      	cmp	r2, #0
 800ea58:	d1f9      	bne.n	800ea4e <strcpy+0x2>
 800ea5a:	4770      	bx	lr

0800ea5c <quorem>:
 800ea5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea60:	6903      	ldr	r3, [r0, #16]
 800ea62:	690c      	ldr	r4, [r1, #16]
 800ea64:	42a3      	cmp	r3, r4
 800ea66:	4607      	mov	r7, r0
 800ea68:	f2c0 8081 	blt.w	800eb6e <quorem+0x112>
 800ea6c:	3c01      	subs	r4, #1
 800ea6e:	f101 0814 	add.w	r8, r1, #20
 800ea72:	f100 0514 	add.w	r5, r0, #20
 800ea76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea7a:	9301      	str	r3, [sp, #4]
 800ea7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea84:	3301      	adds	r3, #1
 800ea86:	429a      	cmp	r2, r3
 800ea88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea90:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea94:	d331      	bcc.n	800eafa <quorem+0x9e>
 800ea96:	f04f 0e00 	mov.w	lr, #0
 800ea9a:	4640      	mov	r0, r8
 800ea9c:	46ac      	mov	ip, r5
 800ea9e:	46f2      	mov	sl, lr
 800eaa0:	f850 2b04 	ldr.w	r2, [r0], #4
 800eaa4:	b293      	uxth	r3, r2
 800eaa6:	fb06 e303 	mla	r3, r6, r3, lr
 800eaaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	ebaa 0303 	sub.w	r3, sl, r3
 800eab4:	0c12      	lsrs	r2, r2, #16
 800eab6:	f8dc a000 	ldr.w	sl, [ip]
 800eaba:	fb06 e202 	mla	r2, r6, r2, lr
 800eabe:	fa13 f38a 	uxtah	r3, r3, sl
 800eac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eac6:	fa1f fa82 	uxth.w	sl, r2
 800eaca:	f8dc 2000 	ldr.w	r2, [ip]
 800eace:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ead2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eadc:	4581      	cmp	r9, r0
 800eade:	f84c 3b04 	str.w	r3, [ip], #4
 800eae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eae6:	d2db      	bcs.n	800eaa0 <quorem+0x44>
 800eae8:	f855 300b 	ldr.w	r3, [r5, fp]
 800eaec:	b92b      	cbnz	r3, 800eafa <quorem+0x9e>
 800eaee:	9b01      	ldr	r3, [sp, #4]
 800eaf0:	3b04      	subs	r3, #4
 800eaf2:	429d      	cmp	r5, r3
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	d32e      	bcc.n	800eb56 <quorem+0xfa>
 800eaf8:	613c      	str	r4, [r7, #16]
 800eafa:	4638      	mov	r0, r7
 800eafc:	f001 f848 	bl	800fb90 <__mcmp>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	db24      	blt.n	800eb4e <quorem+0xf2>
 800eb04:	3601      	adds	r6, #1
 800eb06:	4628      	mov	r0, r5
 800eb08:	f04f 0c00 	mov.w	ip, #0
 800eb0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb10:	f8d0 e000 	ldr.w	lr, [r0]
 800eb14:	b293      	uxth	r3, r2
 800eb16:	ebac 0303 	sub.w	r3, ip, r3
 800eb1a:	0c12      	lsrs	r2, r2, #16
 800eb1c:	fa13 f38e 	uxtah	r3, r3, lr
 800eb20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eb24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb2e:	45c1      	cmp	r9, r8
 800eb30:	f840 3b04 	str.w	r3, [r0], #4
 800eb34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eb38:	d2e8      	bcs.n	800eb0c <quorem+0xb0>
 800eb3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb42:	b922      	cbnz	r2, 800eb4e <quorem+0xf2>
 800eb44:	3b04      	subs	r3, #4
 800eb46:	429d      	cmp	r5, r3
 800eb48:	461a      	mov	r2, r3
 800eb4a:	d30a      	bcc.n	800eb62 <quorem+0x106>
 800eb4c:	613c      	str	r4, [r7, #16]
 800eb4e:	4630      	mov	r0, r6
 800eb50:	b003      	add	sp, #12
 800eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb56:	6812      	ldr	r2, [r2, #0]
 800eb58:	3b04      	subs	r3, #4
 800eb5a:	2a00      	cmp	r2, #0
 800eb5c:	d1cc      	bne.n	800eaf8 <quorem+0x9c>
 800eb5e:	3c01      	subs	r4, #1
 800eb60:	e7c7      	b.n	800eaf2 <quorem+0x96>
 800eb62:	6812      	ldr	r2, [r2, #0]
 800eb64:	3b04      	subs	r3, #4
 800eb66:	2a00      	cmp	r2, #0
 800eb68:	d1f0      	bne.n	800eb4c <quorem+0xf0>
 800eb6a:	3c01      	subs	r4, #1
 800eb6c:	e7eb      	b.n	800eb46 <quorem+0xea>
 800eb6e:	2000      	movs	r0, #0
 800eb70:	e7ee      	b.n	800eb50 <quorem+0xf4>
 800eb72:	0000      	movs	r0, r0
 800eb74:	0000      	movs	r0, r0
	...

0800eb78 <_dtoa_r>:
 800eb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7c:	ec59 8b10 	vmov	r8, r9, d0
 800eb80:	b095      	sub	sp, #84	; 0x54
 800eb82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb84:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800eb86:	9107      	str	r1, [sp, #28]
 800eb88:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb90:	9310      	str	r3, [sp, #64]	; 0x40
 800eb92:	b975      	cbnz	r5, 800ebb2 <_dtoa_r+0x3a>
 800eb94:	2010      	movs	r0, #16
 800eb96:	f000 fd75 	bl	800f684 <malloc>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	6270      	str	r0, [r6, #36]	; 0x24
 800eb9e:	b920      	cbnz	r0, 800ebaa <_dtoa_r+0x32>
 800eba0:	4bab      	ldr	r3, [pc, #684]	; (800ee50 <_dtoa_r+0x2d8>)
 800eba2:	21ea      	movs	r1, #234	; 0xea
 800eba4:	48ab      	ldr	r0, [pc, #684]	; (800ee54 <_dtoa_r+0x2dc>)
 800eba6:	f001 fb19 	bl	80101dc <__assert_func>
 800ebaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ebae:	6005      	str	r5, [r0, #0]
 800ebb0:	60c5      	str	r5, [r0, #12]
 800ebb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ebb4:	6819      	ldr	r1, [r3, #0]
 800ebb6:	b151      	cbz	r1, 800ebce <_dtoa_r+0x56>
 800ebb8:	685a      	ldr	r2, [r3, #4]
 800ebba:	604a      	str	r2, [r1, #4]
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	4093      	lsls	r3, r2
 800ebc0:	608b      	str	r3, [r1, #8]
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f000 fda6 	bl	800f714 <_Bfree>
 800ebc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ebca:	2200      	movs	r2, #0
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	f1b9 0300 	subs.w	r3, r9, #0
 800ebd2:	bfbb      	ittet	lt
 800ebd4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ebd8:	9303      	strlt	r3, [sp, #12]
 800ebda:	2300      	movge	r3, #0
 800ebdc:	2201      	movlt	r2, #1
 800ebde:	bfac      	ite	ge
 800ebe0:	6023      	strge	r3, [r4, #0]
 800ebe2:	6022      	strlt	r2, [r4, #0]
 800ebe4:	4b9c      	ldr	r3, [pc, #624]	; (800ee58 <_dtoa_r+0x2e0>)
 800ebe6:	9c03      	ldr	r4, [sp, #12]
 800ebe8:	43a3      	bics	r3, r4
 800ebea:	d11a      	bne.n	800ec22 <_dtoa_r+0xaa>
 800ebec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ebee:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ebf8:	ea53 0308 	orrs.w	r3, r3, r8
 800ebfc:	f000 8512 	beq.w	800f624 <_dtoa_r+0xaac>
 800ec00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec02:	b953      	cbnz	r3, 800ec1a <_dtoa_r+0xa2>
 800ec04:	4b95      	ldr	r3, [pc, #596]	; (800ee5c <_dtoa_r+0x2e4>)
 800ec06:	e01f      	b.n	800ec48 <_dtoa_r+0xd0>
 800ec08:	4b95      	ldr	r3, [pc, #596]	; (800ee60 <_dtoa_r+0x2e8>)
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ec10:	6013      	str	r3, [r2, #0]
 800ec12:	9800      	ldr	r0, [sp, #0]
 800ec14:	b015      	add	sp, #84	; 0x54
 800ec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1a:	4b90      	ldr	r3, [pc, #576]	; (800ee5c <_dtoa_r+0x2e4>)
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	3303      	adds	r3, #3
 800ec20:	e7f5      	b.n	800ec0e <_dtoa_r+0x96>
 800ec22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ec32:	d10b      	bne.n	800ec4c <_dtoa_r+0xd4>
 800ec34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec36:	2301      	movs	r3, #1
 800ec38:	6013      	str	r3, [r2, #0]
 800ec3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f000 84ee 	beq.w	800f61e <_dtoa_r+0xaa6>
 800ec42:	4888      	ldr	r0, [pc, #544]	; (800ee64 <_dtoa_r+0x2ec>)
 800ec44:	6018      	str	r0, [r3, #0]
 800ec46:	1e43      	subs	r3, r0, #1
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	e7e2      	b.n	800ec12 <_dtoa_r+0x9a>
 800ec4c:	a913      	add	r1, sp, #76	; 0x4c
 800ec4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ec52:	aa12      	add	r2, sp, #72	; 0x48
 800ec54:	4630      	mov	r0, r6
 800ec56:	f001 f83f 	bl	800fcd8 <__d2b>
 800ec5a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ec5e:	4605      	mov	r5, r0
 800ec60:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ec62:	2900      	cmp	r1, #0
 800ec64:	d047      	beq.n	800ecf6 <_dtoa_r+0x17e>
 800ec66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ec68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ec6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec70:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ec74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec78:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ec7c:	2400      	movs	r4, #0
 800ec7e:	ec43 2b16 	vmov	d6, r2, r3
 800ec82:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ec86:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ee38 <_dtoa_r+0x2c0>
 800ec8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec8e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800ee40 <_dtoa_r+0x2c8>
 800ec92:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ec96:	eeb0 7b46 	vmov.f64	d7, d6
 800ec9a:	ee06 1a90 	vmov	s13, r1
 800ec9e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800eca2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ee48 <_dtoa_r+0x2d0>
 800eca6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ecaa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ecae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ecb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb6:	ee16 ba90 	vmov	fp, s13
 800ecba:	9411      	str	r4, [sp, #68]	; 0x44
 800ecbc:	d508      	bpl.n	800ecd0 <_dtoa_r+0x158>
 800ecbe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ecc2:	eeb4 6b47 	vcmp.f64	d6, d7
 800ecc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecca:	bf18      	it	ne
 800eccc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ecd0:	f1bb 0f16 	cmp.w	fp, #22
 800ecd4:	d832      	bhi.n	800ed3c <_dtoa_r+0x1c4>
 800ecd6:	4b64      	ldr	r3, [pc, #400]	; (800ee68 <_dtoa_r+0x2f0>)
 800ecd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ecdc:	ed93 7b00 	vldr	d7, [r3]
 800ece0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ece4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	d501      	bpl.n	800ecf2 <_dtoa_r+0x17a>
 800ecee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	e023      	b.n	800ed3e <_dtoa_r+0x1c6>
 800ecf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ecf8:	4401      	add	r1, r0
 800ecfa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ecfe:	2b20      	cmp	r3, #32
 800ed00:	bfc3      	ittte	gt
 800ed02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed06:	fa04 f303 	lslgt.w	r3, r4, r3
 800ed0a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ed0e:	f1c3 0320 	rsble	r3, r3, #32
 800ed12:	bfc6      	itte	gt
 800ed14:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ed18:	ea43 0308 	orrgt.w	r3, r3, r8
 800ed1c:	fa08 f303 	lslle.w	r3, r8, r3
 800ed20:	ee07 3a90 	vmov	s15, r3
 800ed24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ed28:	3901      	subs	r1, #1
 800ed2a:	ed8d 7b00 	vstr	d7, [sp]
 800ed2e:	9c01      	ldr	r4, [sp, #4]
 800ed30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed34:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ed38:	2401      	movs	r4, #1
 800ed3a:	e7a0      	b.n	800ec7e <_dtoa_r+0x106>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed40:	1a43      	subs	r3, r0, r1
 800ed42:	1e5a      	subs	r2, r3, #1
 800ed44:	bf45      	ittet	mi
 800ed46:	f1c3 0301 	rsbmi	r3, r3, #1
 800ed4a:	9305      	strmi	r3, [sp, #20]
 800ed4c:	2300      	movpl	r3, #0
 800ed4e:	2300      	movmi	r3, #0
 800ed50:	9206      	str	r2, [sp, #24]
 800ed52:	bf54      	ite	pl
 800ed54:	9305      	strpl	r3, [sp, #20]
 800ed56:	9306      	strmi	r3, [sp, #24]
 800ed58:	f1bb 0f00 	cmp.w	fp, #0
 800ed5c:	db18      	blt.n	800ed90 <_dtoa_r+0x218>
 800ed5e:	9b06      	ldr	r3, [sp, #24]
 800ed60:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ed64:	445b      	add	r3, fp
 800ed66:	9306      	str	r3, [sp, #24]
 800ed68:	2300      	movs	r3, #0
 800ed6a:	9a07      	ldr	r2, [sp, #28]
 800ed6c:	2a09      	cmp	r2, #9
 800ed6e:	d849      	bhi.n	800ee04 <_dtoa_r+0x28c>
 800ed70:	2a05      	cmp	r2, #5
 800ed72:	bfc4      	itt	gt
 800ed74:	3a04      	subgt	r2, #4
 800ed76:	9207      	strgt	r2, [sp, #28]
 800ed78:	9a07      	ldr	r2, [sp, #28]
 800ed7a:	f1a2 0202 	sub.w	r2, r2, #2
 800ed7e:	bfcc      	ite	gt
 800ed80:	2400      	movgt	r4, #0
 800ed82:	2401      	movle	r4, #1
 800ed84:	2a03      	cmp	r2, #3
 800ed86:	d848      	bhi.n	800ee1a <_dtoa_r+0x2a2>
 800ed88:	e8df f002 	tbb	[pc, r2]
 800ed8c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ed90:	9b05      	ldr	r3, [sp, #20]
 800ed92:	2200      	movs	r2, #0
 800ed94:	eba3 030b 	sub.w	r3, r3, fp
 800ed98:	9305      	str	r3, [sp, #20]
 800ed9a:	920e      	str	r2, [sp, #56]	; 0x38
 800ed9c:	f1cb 0300 	rsb	r3, fp, #0
 800eda0:	e7e3      	b.n	800ed6a <_dtoa_r+0x1f2>
 800eda2:	2200      	movs	r2, #0
 800eda4:	9208      	str	r2, [sp, #32]
 800eda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	dc39      	bgt.n	800ee20 <_dtoa_r+0x2a8>
 800edac:	f04f 0a01 	mov.w	sl, #1
 800edb0:	46d1      	mov	r9, sl
 800edb2:	4652      	mov	r2, sl
 800edb4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800edb8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800edba:	2100      	movs	r1, #0
 800edbc:	6079      	str	r1, [r7, #4]
 800edbe:	2004      	movs	r0, #4
 800edc0:	f100 0c14 	add.w	ip, r0, #20
 800edc4:	4594      	cmp	ip, r2
 800edc6:	6879      	ldr	r1, [r7, #4]
 800edc8:	d92f      	bls.n	800ee2a <_dtoa_r+0x2b2>
 800edca:	4630      	mov	r0, r6
 800edcc:	930c      	str	r3, [sp, #48]	; 0x30
 800edce:	f000 fc61 	bl	800f694 <_Balloc>
 800edd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edd4:	9000      	str	r0, [sp, #0]
 800edd6:	4602      	mov	r2, r0
 800edd8:	2800      	cmp	r0, #0
 800edda:	d149      	bne.n	800ee70 <_dtoa_r+0x2f8>
 800eddc:	4b23      	ldr	r3, [pc, #140]	; (800ee6c <_dtoa_r+0x2f4>)
 800edde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ede2:	e6df      	b.n	800eba4 <_dtoa_r+0x2c>
 800ede4:	2201      	movs	r2, #1
 800ede6:	e7dd      	b.n	800eda4 <_dtoa_r+0x22c>
 800ede8:	2200      	movs	r2, #0
 800edea:	9208      	str	r2, [sp, #32]
 800edec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edee:	eb0b 0a02 	add.w	sl, fp, r2
 800edf2:	f10a 0901 	add.w	r9, sl, #1
 800edf6:	464a      	mov	r2, r9
 800edf8:	2a01      	cmp	r2, #1
 800edfa:	bfb8      	it	lt
 800edfc:	2201      	movlt	r2, #1
 800edfe:	e7db      	b.n	800edb8 <_dtoa_r+0x240>
 800ee00:	2201      	movs	r2, #1
 800ee02:	e7f2      	b.n	800edea <_dtoa_r+0x272>
 800ee04:	2401      	movs	r4, #1
 800ee06:	2200      	movs	r2, #0
 800ee08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ee0c:	f04f 3aff 	mov.w	sl, #4294967295
 800ee10:	2100      	movs	r1, #0
 800ee12:	46d1      	mov	r9, sl
 800ee14:	2212      	movs	r2, #18
 800ee16:	9109      	str	r1, [sp, #36]	; 0x24
 800ee18:	e7ce      	b.n	800edb8 <_dtoa_r+0x240>
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	9208      	str	r2, [sp, #32]
 800ee1e:	e7f5      	b.n	800ee0c <_dtoa_r+0x294>
 800ee20:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ee24:	46d1      	mov	r9, sl
 800ee26:	4652      	mov	r2, sl
 800ee28:	e7c6      	b.n	800edb8 <_dtoa_r+0x240>
 800ee2a:	3101      	adds	r1, #1
 800ee2c:	6079      	str	r1, [r7, #4]
 800ee2e:	0040      	lsls	r0, r0, #1
 800ee30:	e7c6      	b.n	800edc0 <_dtoa_r+0x248>
 800ee32:	bf00      	nop
 800ee34:	f3af 8000 	nop.w
 800ee38:	636f4361 	.word	0x636f4361
 800ee3c:	3fd287a7 	.word	0x3fd287a7
 800ee40:	8b60c8b3 	.word	0x8b60c8b3
 800ee44:	3fc68a28 	.word	0x3fc68a28
 800ee48:	509f79fb 	.word	0x509f79fb
 800ee4c:	3fd34413 	.word	0x3fd34413
 800ee50:	0801b155 	.word	0x0801b155
 800ee54:	0801b16c 	.word	0x0801b16c
 800ee58:	7ff00000 	.word	0x7ff00000
 800ee5c:	0801b151 	.word	0x0801b151
 800ee60:	0801b148 	.word	0x0801b148
 800ee64:	0801b125 	.word	0x0801b125
 800ee68:	0801b268 	.word	0x0801b268
 800ee6c:	0801b1cb 	.word	0x0801b1cb
 800ee70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ee72:	9900      	ldr	r1, [sp, #0]
 800ee74:	6011      	str	r1, [r2, #0]
 800ee76:	f1b9 0f0e 	cmp.w	r9, #14
 800ee7a:	d872      	bhi.n	800ef62 <_dtoa_r+0x3ea>
 800ee7c:	2c00      	cmp	r4, #0
 800ee7e:	d070      	beq.n	800ef62 <_dtoa_r+0x3ea>
 800ee80:	f1bb 0f00 	cmp.w	fp, #0
 800ee84:	f340 80a6 	ble.w	800efd4 <_dtoa_r+0x45c>
 800ee88:	49ca      	ldr	r1, [pc, #808]	; (800f1b4 <_dtoa_r+0x63c>)
 800ee8a:	f00b 020f 	and.w	r2, fp, #15
 800ee8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ee92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ee96:	ed92 7b00 	vldr	d7, [r2]
 800ee9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ee9e:	f000 808d 	beq.w	800efbc <_dtoa_r+0x444>
 800eea2:	4ac5      	ldr	r2, [pc, #788]	; (800f1b8 <_dtoa_r+0x640>)
 800eea4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800eea8:	ed92 6b08 	vldr	d6, [r2, #32]
 800eeac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800eeb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800eeb4:	f001 010f 	and.w	r1, r1, #15
 800eeb8:	2203      	movs	r2, #3
 800eeba:	48bf      	ldr	r0, [pc, #764]	; (800f1b8 <_dtoa_r+0x640>)
 800eebc:	2900      	cmp	r1, #0
 800eebe:	d17f      	bne.n	800efc0 <_dtoa_r+0x448>
 800eec0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800eec4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800eec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eecc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eece:	2900      	cmp	r1, #0
 800eed0:	f000 80b2 	beq.w	800f038 <_dtoa_r+0x4c0>
 800eed4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800eed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eedc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800eee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee4:	f140 80a8 	bpl.w	800f038 <_dtoa_r+0x4c0>
 800eee8:	f1b9 0f00 	cmp.w	r9, #0
 800eeec:	f000 80a4 	beq.w	800f038 <_dtoa_r+0x4c0>
 800eef0:	f1ba 0f00 	cmp.w	sl, #0
 800eef4:	dd31      	ble.n	800ef5a <_dtoa_r+0x3e2>
 800eef6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800eefa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eefe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef02:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef06:	3201      	adds	r2, #1
 800ef08:	4650      	mov	r0, sl
 800ef0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef0e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ef12:	ee07 2a90 	vmov	s15, r2
 800ef16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ef1e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ef22:	9c03      	ldr	r4, [sp, #12]
 800ef24:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ef28:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	f040 8086 	bne.w	800f03e <_dtoa_r+0x4c6>
 800ef32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ef36:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ef3a:	ec42 1b17 	vmov	d7, r1, r2
 800ef3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	f300 8272 	bgt.w	800f42e <_dtoa_r+0x8b6>
 800ef4a:	eeb1 7b47 	vneg.f64	d7, d7
 800ef4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	f100 8267 	bmi.w	800f428 <_dtoa_r+0x8b0>
 800ef5a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800ef5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ef62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	f2c0 8129 	blt.w	800f1bc <_dtoa_r+0x644>
 800ef6a:	f1bb 0f0e 	cmp.w	fp, #14
 800ef6e:	f300 8125 	bgt.w	800f1bc <_dtoa_r+0x644>
 800ef72:	4b90      	ldr	r3, [pc, #576]	; (800f1b4 <_dtoa_r+0x63c>)
 800ef74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef78:	ed93 6b00 	vldr	d6, [r3]
 800ef7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f280 80c3 	bge.w	800f10a <_dtoa_r+0x592>
 800ef84:	f1b9 0f00 	cmp.w	r9, #0
 800ef88:	f300 80bf 	bgt.w	800f10a <_dtoa_r+0x592>
 800ef8c:	f040 824c 	bne.w	800f428 <_dtoa_r+0x8b0>
 800ef90:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ef94:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ef98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800efa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa4:	464c      	mov	r4, r9
 800efa6:	464f      	mov	r7, r9
 800efa8:	f280 8222 	bge.w	800f3f0 <_dtoa_r+0x878>
 800efac:	f8dd 8000 	ldr.w	r8, [sp]
 800efb0:	2331      	movs	r3, #49	; 0x31
 800efb2:	f808 3b01 	strb.w	r3, [r8], #1
 800efb6:	f10b 0b01 	add.w	fp, fp, #1
 800efba:	e21e      	b.n	800f3fa <_dtoa_r+0x882>
 800efbc:	2202      	movs	r2, #2
 800efbe:	e77c      	b.n	800eeba <_dtoa_r+0x342>
 800efc0:	07cc      	lsls	r4, r1, #31
 800efc2:	d504      	bpl.n	800efce <_dtoa_r+0x456>
 800efc4:	ed90 6b00 	vldr	d6, [r0]
 800efc8:	3201      	adds	r2, #1
 800efca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800efce:	1049      	asrs	r1, r1, #1
 800efd0:	3008      	adds	r0, #8
 800efd2:	e773      	b.n	800eebc <_dtoa_r+0x344>
 800efd4:	d02e      	beq.n	800f034 <_dtoa_r+0x4bc>
 800efd6:	f1cb 0100 	rsb	r1, fp, #0
 800efda:	4a76      	ldr	r2, [pc, #472]	; (800f1b4 <_dtoa_r+0x63c>)
 800efdc:	f001 000f 	and.w	r0, r1, #15
 800efe0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800efe4:	ed92 7b00 	vldr	d7, [r2]
 800efe8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800efec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eff0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800eff4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800eff8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800effc:	486e      	ldr	r0, [pc, #440]	; (800f1b8 <_dtoa_r+0x640>)
 800effe:	1109      	asrs	r1, r1, #4
 800f000:	2400      	movs	r4, #0
 800f002:	2202      	movs	r2, #2
 800f004:	b939      	cbnz	r1, 800f016 <_dtoa_r+0x49e>
 800f006:	2c00      	cmp	r4, #0
 800f008:	f43f af60 	beq.w	800eecc <_dtoa_r+0x354>
 800f00c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f014:	e75a      	b.n	800eecc <_dtoa_r+0x354>
 800f016:	07cf      	lsls	r7, r1, #31
 800f018:	d509      	bpl.n	800f02e <_dtoa_r+0x4b6>
 800f01a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f01e:	ed90 7b00 	vldr	d7, [r0]
 800f022:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f026:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f02a:	3201      	adds	r2, #1
 800f02c:	2401      	movs	r4, #1
 800f02e:	1049      	asrs	r1, r1, #1
 800f030:	3008      	adds	r0, #8
 800f032:	e7e7      	b.n	800f004 <_dtoa_r+0x48c>
 800f034:	2202      	movs	r2, #2
 800f036:	e749      	b.n	800eecc <_dtoa_r+0x354>
 800f038:	465f      	mov	r7, fp
 800f03a:	4648      	mov	r0, r9
 800f03c:	e765      	b.n	800ef0a <_dtoa_r+0x392>
 800f03e:	ec42 1b17 	vmov	d7, r1, r2
 800f042:	4a5c      	ldr	r2, [pc, #368]	; (800f1b4 <_dtoa_r+0x63c>)
 800f044:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f048:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f04c:	9a00      	ldr	r2, [sp, #0]
 800f04e:	1814      	adds	r4, r2, r0
 800f050:	9a08      	ldr	r2, [sp, #32]
 800f052:	b352      	cbz	r2, 800f0aa <_dtoa_r+0x532>
 800f054:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f058:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f05c:	f8dd 8000 	ldr.w	r8, [sp]
 800f060:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f064:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f068:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f06c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f070:	ee14 2a90 	vmov	r2, s9
 800f074:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f078:	3230      	adds	r2, #48	; 0x30
 800f07a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f07e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f086:	f808 2b01 	strb.w	r2, [r8], #1
 800f08a:	d439      	bmi.n	800f100 <_dtoa_r+0x588>
 800f08c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f090:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f098:	d472      	bmi.n	800f180 <_dtoa_r+0x608>
 800f09a:	45a0      	cmp	r8, r4
 800f09c:	f43f af5d 	beq.w	800ef5a <_dtoa_r+0x3e2>
 800f0a0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f0a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f0a8:	e7e0      	b.n	800f06c <_dtoa_r+0x4f4>
 800f0aa:	f8dd 8000 	ldr.w	r8, [sp]
 800f0ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f0b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f0bc:	ee14 2a90 	vmov	r2, s9
 800f0c0:	3230      	adds	r2, #48	; 0x30
 800f0c2:	f808 2b01 	strb.w	r2, [r8], #1
 800f0c6:	45a0      	cmp	r8, r4
 800f0c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f0cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f0d0:	d118      	bne.n	800f104 <_dtoa_r+0x58c>
 800f0d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f0d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f0da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e2:	dc4d      	bgt.n	800f180 <_dtoa_r+0x608>
 800f0e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f0:	f57f af33 	bpl.w	800ef5a <_dtoa_r+0x3e2>
 800f0f4:	4688      	mov	r8, r1
 800f0f6:	3901      	subs	r1, #1
 800f0f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f0fc:	2b30      	cmp	r3, #48	; 0x30
 800f0fe:	d0f9      	beq.n	800f0f4 <_dtoa_r+0x57c>
 800f100:	46bb      	mov	fp, r7
 800f102:	e02a      	b.n	800f15a <_dtoa_r+0x5e2>
 800f104:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f108:	e7d6      	b.n	800f0b8 <_dtoa_r+0x540>
 800f10a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f10e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f112:	f8dd 8000 	ldr.w	r8, [sp]
 800f116:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f11a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f11e:	ee15 3a10 	vmov	r3, s10
 800f122:	3330      	adds	r3, #48	; 0x30
 800f124:	f808 3b01 	strb.w	r3, [r8], #1
 800f128:	9b00      	ldr	r3, [sp, #0]
 800f12a:	eba8 0303 	sub.w	r3, r8, r3
 800f12e:	4599      	cmp	r9, r3
 800f130:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f134:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f138:	d133      	bne.n	800f1a2 <_dtoa_r+0x62a>
 800f13a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f13e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f146:	dc1a      	bgt.n	800f17e <_dtoa_r+0x606>
 800f148:	eeb4 7b46 	vcmp.f64	d7, d6
 800f14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f150:	d103      	bne.n	800f15a <_dtoa_r+0x5e2>
 800f152:	ee15 3a10 	vmov	r3, s10
 800f156:	07d9      	lsls	r1, r3, #31
 800f158:	d411      	bmi.n	800f17e <_dtoa_r+0x606>
 800f15a:	4629      	mov	r1, r5
 800f15c:	4630      	mov	r0, r6
 800f15e:	f000 fad9 	bl	800f714 <_Bfree>
 800f162:	2300      	movs	r3, #0
 800f164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f166:	f888 3000 	strb.w	r3, [r8]
 800f16a:	f10b 0301 	add.w	r3, fp, #1
 800f16e:	6013      	str	r3, [r2, #0]
 800f170:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f172:	2b00      	cmp	r3, #0
 800f174:	f43f ad4d 	beq.w	800ec12 <_dtoa_r+0x9a>
 800f178:	f8c3 8000 	str.w	r8, [r3]
 800f17c:	e549      	b.n	800ec12 <_dtoa_r+0x9a>
 800f17e:	465f      	mov	r7, fp
 800f180:	4643      	mov	r3, r8
 800f182:	4698      	mov	r8, r3
 800f184:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f188:	2a39      	cmp	r2, #57	; 0x39
 800f18a:	d106      	bne.n	800f19a <_dtoa_r+0x622>
 800f18c:	9a00      	ldr	r2, [sp, #0]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d1f7      	bne.n	800f182 <_dtoa_r+0x60a>
 800f192:	9900      	ldr	r1, [sp, #0]
 800f194:	2230      	movs	r2, #48	; 0x30
 800f196:	3701      	adds	r7, #1
 800f198:	700a      	strb	r2, [r1, #0]
 800f19a:	781a      	ldrb	r2, [r3, #0]
 800f19c:	3201      	adds	r2, #1
 800f19e:	701a      	strb	r2, [r3, #0]
 800f1a0:	e7ae      	b.n	800f100 <_dtoa_r+0x588>
 800f1a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f1a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	d1b2      	bne.n	800f116 <_dtoa_r+0x59e>
 800f1b0:	e7d3      	b.n	800f15a <_dtoa_r+0x5e2>
 800f1b2:	bf00      	nop
 800f1b4:	0801b268 	.word	0x0801b268
 800f1b8:	0801b240 	.word	0x0801b240
 800f1bc:	9908      	ldr	r1, [sp, #32]
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	f000 80d1 	beq.w	800f366 <_dtoa_r+0x7ee>
 800f1c4:	9907      	ldr	r1, [sp, #28]
 800f1c6:	2901      	cmp	r1, #1
 800f1c8:	f300 80b4 	bgt.w	800f334 <_dtoa_r+0x7bc>
 800f1cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f1ce:	2900      	cmp	r1, #0
 800f1d0:	f000 80ac 	beq.w	800f32c <_dtoa_r+0x7b4>
 800f1d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f1d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f1dc:	461c      	mov	r4, r3
 800f1de:	930a      	str	r3, [sp, #40]	; 0x28
 800f1e0:	9b05      	ldr	r3, [sp, #20]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	9305      	str	r3, [sp, #20]
 800f1e6:	9b06      	ldr	r3, [sp, #24]
 800f1e8:	2101      	movs	r1, #1
 800f1ea:	4413      	add	r3, r2
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	9306      	str	r3, [sp, #24]
 800f1f0:	f000 fb4c 	bl	800f88c <__i2b>
 800f1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f6:	4607      	mov	r7, r0
 800f1f8:	f1b8 0f00 	cmp.w	r8, #0
 800f1fc:	dd0d      	ble.n	800f21a <_dtoa_r+0x6a2>
 800f1fe:	9a06      	ldr	r2, [sp, #24]
 800f200:	2a00      	cmp	r2, #0
 800f202:	dd0a      	ble.n	800f21a <_dtoa_r+0x6a2>
 800f204:	4542      	cmp	r2, r8
 800f206:	9905      	ldr	r1, [sp, #20]
 800f208:	bfa8      	it	ge
 800f20a:	4642      	movge	r2, r8
 800f20c:	1a89      	subs	r1, r1, r2
 800f20e:	9105      	str	r1, [sp, #20]
 800f210:	9906      	ldr	r1, [sp, #24]
 800f212:	eba8 0802 	sub.w	r8, r8, r2
 800f216:	1a8a      	subs	r2, r1, r2
 800f218:	9206      	str	r2, [sp, #24]
 800f21a:	b303      	cbz	r3, 800f25e <_dtoa_r+0x6e6>
 800f21c:	9a08      	ldr	r2, [sp, #32]
 800f21e:	2a00      	cmp	r2, #0
 800f220:	f000 80a6 	beq.w	800f370 <_dtoa_r+0x7f8>
 800f224:	2c00      	cmp	r4, #0
 800f226:	dd13      	ble.n	800f250 <_dtoa_r+0x6d8>
 800f228:	4639      	mov	r1, r7
 800f22a:	4622      	mov	r2, r4
 800f22c:	4630      	mov	r0, r6
 800f22e:	930c      	str	r3, [sp, #48]	; 0x30
 800f230:	f000 fbe8 	bl	800fa04 <__pow5mult>
 800f234:	462a      	mov	r2, r5
 800f236:	4601      	mov	r1, r0
 800f238:	4607      	mov	r7, r0
 800f23a:	4630      	mov	r0, r6
 800f23c:	f000 fb3c 	bl	800f8b8 <__multiply>
 800f240:	4629      	mov	r1, r5
 800f242:	900a      	str	r0, [sp, #40]	; 0x28
 800f244:	4630      	mov	r0, r6
 800f246:	f000 fa65 	bl	800f714 <_Bfree>
 800f24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f24c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f24e:	4615      	mov	r5, r2
 800f250:	1b1a      	subs	r2, r3, r4
 800f252:	d004      	beq.n	800f25e <_dtoa_r+0x6e6>
 800f254:	4629      	mov	r1, r5
 800f256:	4630      	mov	r0, r6
 800f258:	f000 fbd4 	bl	800fa04 <__pow5mult>
 800f25c:	4605      	mov	r5, r0
 800f25e:	2101      	movs	r1, #1
 800f260:	4630      	mov	r0, r6
 800f262:	f000 fb13 	bl	800f88c <__i2b>
 800f266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f268:	2b00      	cmp	r3, #0
 800f26a:	4604      	mov	r4, r0
 800f26c:	f340 8082 	ble.w	800f374 <_dtoa_r+0x7fc>
 800f270:	461a      	mov	r2, r3
 800f272:	4601      	mov	r1, r0
 800f274:	4630      	mov	r0, r6
 800f276:	f000 fbc5 	bl	800fa04 <__pow5mult>
 800f27a:	9b07      	ldr	r3, [sp, #28]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	4604      	mov	r4, r0
 800f280:	dd7b      	ble.n	800f37a <_dtoa_r+0x802>
 800f282:	2300      	movs	r3, #0
 800f284:	930a      	str	r3, [sp, #40]	; 0x28
 800f286:	6922      	ldr	r2, [r4, #16]
 800f288:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f28c:	6910      	ldr	r0, [r2, #16]
 800f28e:	f000 faad 	bl	800f7ec <__hi0bits>
 800f292:	f1c0 0020 	rsb	r0, r0, #32
 800f296:	9b06      	ldr	r3, [sp, #24]
 800f298:	4418      	add	r0, r3
 800f29a:	f010 001f 	ands.w	r0, r0, #31
 800f29e:	f000 808d 	beq.w	800f3bc <_dtoa_r+0x844>
 800f2a2:	f1c0 0220 	rsb	r2, r0, #32
 800f2a6:	2a04      	cmp	r2, #4
 800f2a8:	f340 8086 	ble.w	800f3b8 <_dtoa_r+0x840>
 800f2ac:	f1c0 001c 	rsb	r0, r0, #28
 800f2b0:	9b05      	ldr	r3, [sp, #20]
 800f2b2:	4403      	add	r3, r0
 800f2b4:	9305      	str	r3, [sp, #20]
 800f2b6:	9b06      	ldr	r3, [sp, #24]
 800f2b8:	4403      	add	r3, r0
 800f2ba:	4480      	add	r8, r0
 800f2bc:	9306      	str	r3, [sp, #24]
 800f2be:	9b05      	ldr	r3, [sp, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dd05      	ble.n	800f2d0 <_dtoa_r+0x758>
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f000 fbf5 	bl	800fab8 <__lshift>
 800f2ce:	4605      	mov	r5, r0
 800f2d0:	9b06      	ldr	r3, [sp, #24]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	dd05      	ble.n	800f2e2 <_dtoa_r+0x76a>
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f000 fbec 	bl	800fab8 <__lshift>
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d06b      	beq.n	800f3c0 <_dtoa_r+0x848>
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f000 fc50 	bl	800fb90 <__mcmp>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	da65      	bge.n	800f3c0 <_dtoa_r+0x848>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	220a      	movs	r2, #10
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	f000 fa2c 	bl	800f758 <__multadd>
 800f300:	9b08      	ldr	r3, [sp, #32]
 800f302:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f306:	4605      	mov	r5, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 8192 	beq.w	800f632 <_dtoa_r+0xaba>
 800f30e:	4639      	mov	r1, r7
 800f310:	2300      	movs	r3, #0
 800f312:	220a      	movs	r2, #10
 800f314:	4630      	mov	r0, r6
 800f316:	f000 fa1f 	bl	800f758 <__multadd>
 800f31a:	f1ba 0f00 	cmp.w	sl, #0
 800f31e:	4607      	mov	r7, r0
 800f320:	f300 808e 	bgt.w	800f440 <_dtoa_r+0x8c8>
 800f324:	9b07      	ldr	r3, [sp, #28]
 800f326:	2b02      	cmp	r3, #2
 800f328:	dc51      	bgt.n	800f3ce <_dtoa_r+0x856>
 800f32a:	e089      	b.n	800f440 <_dtoa_r+0x8c8>
 800f32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f32e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f332:	e751      	b.n	800f1d8 <_dtoa_r+0x660>
 800f334:	f109 34ff 	add.w	r4, r9, #4294967295
 800f338:	42a3      	cmp	r3, r4
 800f33a:	bfbf      	itttt	lt
 800f33c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f33e:	1ae3      	sublt	r3, r4, r3
 800f340:	18d2      	addlt	r2, r2, r3
 800f342:	4613      	movlt	r3, r2
 800f344:	bfb7      	itett	lt
 800f346:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f348:	1b1c      	subge	r4, r3, r4
 800f34a:	4623      	movlt	r3, r4
 800f34c:	2400      	movlt	r4, #0
 800f34e:	f1b9 0f00 	cmp.w	r9, #0
 800f352:	bfb5      	itete	lt
 800f354:	9a05      	ldrlt	r2, [sp, #20]
 800f356:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f35a:	eba2 0809 	sublt.w	r8, r2, r9
 800f35e:	464a      	movge	r2, r9
 800f360:	bfb8      	it	lt
 800f362:	2200      	movlt	r2, #0
 800f364:	e73b      	b.n	800f1de <_dtoa_r+0x666>
 800f366:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f36a:	9f08      	ldr	r7, [sp, #32]
 800f36c:	461c      	mov	r4, r3
 800f36e:	e743      	b.n	800f1f8 <_dtoa_r+0x680>
 800f370:	461a      	mov	r2, r3
 800f372:	e76f      	b.n	800f254 <_dtoa_r+0x6dc>
 800f374:	9b07      	ldr	r3, [sp, #28]
 800f376:	2b01      	cmp	r3, #1
 800f378:	dc18      	bgt.n	800f3ac <_dtoa_r+0x834>
 800f37a:	9b02      	ldr	r3, [sp, #8]
 800f37c:	b9b3      	cbnz	r3, 800f3ac <_dtoa_r+0x834>
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f384:	b9a2      	cbnz	r2, 800f3b0 <_dtoa_r+0x838>
 800f386:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f38a:	0d12      	lsrs	r2, r2, #20
 800f38c:	0512      	lsls	r2, r2, #20
 800f38e:	b18a      	cbz	r2, 800f3b4 <_dtoa_r+0x83c>
 800f390:	9b05      	ldr	r3, [sp, #20]
 800f392:	3301      	adds	r3, #1
 800f394:	9305      	str	r3, [sp, #20]
 800f396:	9b06      	ldr	r3, [sp, #24]
 800f398:	3301      	adds	r3, #1
 800f39a:	9306      	str	r3, [sp, #24]
 800f39c:	2301      	movs	r3, #1
 800f39e:	930a      	str	r3, [sp, #40]	; 0x28
 800f3a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f47f af6f 	bne.w	800f286 <_dtoa_r+0x70e>
 800f3a8:	2001      	movs	r0, #1
 800f3aa:	e774      	b.n	800f296 <_dtoa_r+0x71e>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	e7f6      	b.n	800f39e <_dtoa_r+0x826>
 800f3b0:	9b02      	ldr	r3, [sp, #8]
 800f3b2:	e7f4      	b.n	800f39e <_dtoa_r+0x826>
 800f3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800f3b6:	e7f3      	b.n	800f3a0 <_dtoa_r+0x828>
 800f3b8:	d081      	beq.n	800f2be <_dtoa_r+0x746>
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	301c      	adds	r0, #28
 800f3be:	e777      	b.n	800f2b0 <_dtoa_r+0x738>
 800f3c0:	f1b9 0f00 	cmp.w	r9, #0
 800f3c4:	dc37      	bgt.n	800f436 <_dtoa_r+0x8be>
 800f3c6:	9b07      	ldr	r3, [sp, #28]
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	dd34      	ble.n	800f436 <_dtoa_r+0x8be>
 800f3cc:	46ca      	mov	sl, r9
 800f3ce:	f1ba 0f00 	cmp.w	sl, #0
 800f3d2:	d10d      	bne.n	800f3f0 <_dtoa_r+0x878>
 800f3d4:	4621      	mov	r1, r4
 800f3d6:	4653      	mov	r3, sl
 800f3d8:	2205      	movs	r2, #5
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f000 f9bc 	bl	800f758 <__multadd>
 800f3e0:	4601      	mov	r1, r0
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f000 fbd3 	bl	800fb90 <__mcmp>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	f73f adde 	bgt.w	800efac <_dtoa_r+0x434>
 800f3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3f2:	f8dd 8000 	ldr.w	r8, [sp]
 800f3f6:	ea6f 0b03 	mvn.w	fp, r3
 800f3fa:	f04f 0900 	mov.w	r9, #0
 800f3fe:	4621      	mov	r1, r4
 800f400:	4630      	mov	r0, r6
 800f402:	f000 f987 	bl	800f714 <_Bfree>
 800f406:	2f00      	cmp	r7, #0
 800f408:	f43f aea7 	beq.w	800f15a <_dtoa_r+0x5e2>
 800f40c:	f1b9 0f00 	cmp.w	r9, #0
 800f410:	d005      	beq.n	800f41e <_dtoa_r+0x8a6>
 800f412:	45b9      	cmp	r9, r7
 800f414:	d003      	beq.n	800f41e <_dtoa_r+0x8a6>
 800f416:	4649      	mov	r1, r9
 800f418:	4630      	mov	r0, r6
 800f41a:	f000 f97b 	bl	800f714 <_Bfree>
 800f41e:	4639      	mov	r1, r7
 800f420:	4630      	mov	r0, r6
 800f422:	f000 f977 	bl	800f714 <_Bfree>
 800f426:	e698      	b.n	800f15a <_dtoa_r+0x5e2>
 800f428:	2400      	movs	r4, #0
 800f42a:	4627      	mov	r7, r4
 800f42c:	e7e0      	b.n	800f3f0 <_dtoa_r+0x878>
 800f42e:	46bb      	mov	fp, r7
 800f430:	4604      	mov	r4, r0
 800f432:	4607      	mov	r7, r0
 800f434:	e5ba      	b.n	800efac <_dtoa_r+0x434>
 800f436:	9b08      	ldr	r3, [sp, #32]
 800f438:	46ca      	mov	sl, r9
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 8100 	beq.w	800f640 <_dtoa_r+0xac8>
 800f440:	f1b8 0f00 	cmp.w	r8, #0
 800f444:	dd05      	ble.n	800f452 <_dtoa_r+0x8da>
 800f446:	4639      	mov	r1, r7
 800f448:	4642      	mov	r2, r8
 800f44a:	4630      	mov	r0, r6
 800f44c:	f000 fb34 	bl	800fab8 <__lshift>
 800f450:	4607      	mov	r7, r0
 800f452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f454:	2b00      	cmp	r3, #0
 800f456:	d05d      	beq.n	800f514 <_dtoa_r+0x99c>
 800f458:	6879      	ldr	r1, [r7, #4]
 800f45a:	4630      	mov	r0, r6
 800f45c:	f000 f91a 	bl	800f694 <_Balloc>
 800f460:	4680      	mov	r8, r0
 800f462:	b928      	cbnz	r0, 800f470 <_dtoa_r+0x8f8>
 800f464:	4b82      	ldr	r3, [pc, #520]	; (800f670 <_dtoa_r+0xaf8>)
 800f466:	4602      	mov	r2, r0
 800f468:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f46c:	f7ff bb9a 	b.w	800eba4 <_dtoa_r+0x2c>
 800f470:	693a      	ldr	r2, [r7, #16]
 800f472:	3202      	adds	r2, #2
 800f474:	0092      	lsls	r2, r2, #2
 800f476:	f107 010c 	add.w	r1, r7, #12
 800f47a:	300c      	adds	r0, #12
 800f47c:	f7fe fe56 	bl	800e12c <memcpy>
 800f480:	2201      	movs	r2, #1
 800f482:	4641      	mov	r1, r8
 800f484:	4630      	mov	r0, r6
 800f486:	f000 fb17 	bl	800fab8 <__lshift>
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	3301      	adds	r3, #1
 800f48e:	9305      	str	r3, [sp, #20]
 800f490:	9b00      	ldr	r3, [sp, #0]
 800f492:	4453      	add	r3, sl
 800f494:	9309      	str	r3, [sp, #36]	; 0x24
 800f496:	9b02      	ldr	r3, [sp, #8]
 800f498:	f003 0301 	and.w	r3, r3, #1
 800f49c:	46b9      	mov	r9, r7
 800f49e:	9308      	str	r3, [sp, #32]
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	9b05      	ldr	r3, [sp, #20]
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	9302      	str	r3, [sp, #8]
 800f4ac:	f7ff fad6 	bl	800ea5c <quorem>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	3330      	adds	r3, #48	; 0x30
 800f4b4:	9006      	str	r0, [sp, #24]
 800f4b6:	4649      	mov	r1, r9
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	930a      	str	r3, [sp, #40]	; 0x28
 800f4bc:	f000 fb68 	bl	800fb90 <__mcmp>
 800f4c0:	463a      	mov	r2, r7
 800f4c2:	4682      	mov	sl, r0
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f000 fb7e 	bl	800fbc8 <__mdiff>
 800f4cc:	68c2      	ldr	r2, [r0, #12]
 800f4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4d0:	4680      	mov	r8, r0
 800f4d2:	bb0a      	cbnz	r2, 800f518 <_dtoa_r+0x9a0>
 800f4d4:	4601      	mov	r1, r0
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f000 fb5a 	bl	800fb90 <__mcmp>
 800f4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4de:	4602      	mov	r2, r0
 800f4e0:	4641      	mov	r1, r8
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	920e      	str	r2, [sp, #56]	; 0x38
 800f4e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f4e8:	f000 f914 	bl	800f714 <_Bfree>
 800f4ec:	9b07      	ldr	r3, [sp, #28]
 800f4ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f4f4:	ea43 0102 	orr.w	r1, r3, r2
 800f4f8:	9b08      	ldr	r3, [sp, #32]
 800f4fa:	430b      	orrs	r3, r1
 800f4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4fe:	d10d      	bne.n	800f51c <_dtoa_r+0x9a4>
 800f500:	2b39      	cmp	r3, #57	; 0x39
 800f502:	d029      	beq.n	800f558 <_dtoa_r+0x9e0>
 800f504:	f1ba 0f00 	cmp.w	sl, #0
 800f508:	dd01      	ble.n	800f50e <_dtoa_r+0x996>
 800f50a:	9b06      	ldr	r3, [sp, #24]
 800f50c:	3331      	adds	r3, #49	; 0x31
 800f50e:	9a02      	ldr	r2, [sp, #8]
 800f510:	7013      	strb	r3, [r2, #0]
 800f512:	e774      	b.n	800f3fe <_dtoa_r+0x886>
 800f514:	4638      	mov	r0, r7
 800f516:	e7b8      	b.n	800f48a <_dtoa_r+0x912>
 800f518:	2201      	movs	r2, #1
 800f51a:	e7e1      	b.n	800f4e0 <_dtoa_r+0x968>
 800f51c:	f1ba 0f00 	cmp.w	sl, #0
 800f520:	db06      	blt.n	800f530 <_dtoa_r+0x9b8>
 800f522:	9907      	ldr	r1, [sp, #28]
 800f524:	ea41 0a0a 	orr.w	sl, r1, sl
 800f528:	9908      	ldr	r1, [sp, #32]
 800f52a:	ea5a 0101 	orrs.w	r1, sl, r1
 800f52e:	d120      	bne.n	800f572 <_dtoa_r+0x9fa>
 800f530:	2a00      	cmp	r2, #0
 800f532:	ddec      	ble.n	800f50e <_dtoa_r+0x996>
 800f534:	4629      	mov	r1, r5
 800f536:	2201      	movs	r2, #1
 800f538:	4630      	mov	r0, r6
 800f53a:	9305      	str	r3, [sp, #20]
 800f53c:	f000 fabc 	bl	800fab8 <__lshift>
 800f540:	4621      	mov	r1, r4
 800f542:	4605      	mov	r5, r0
 800f544:	f000 fb24 	bl	800fb90 <__mcmp>
 800f548:	2800      	cmp	r0, #0
 800f54a:	9b05      	ldr	r3, [sp, #20]
 800f54c:	dc02      	bgt.n	800f554 <_dtoa_r+0x9dc>
 800f54e:	d1de      	bne.n	800f50e <_dtoa_r+0x996>
 800f550:	07da      	lsls	r2, r3, #31
 800f552:	d5dc      	bpl.n	800f50e <_dtoa_r+0x996>
 800f554:	2b39      	cmp	r3, #57	; 0x39
 800f556:	d1d8      	bne.n	800f50a <_dtoa_r+0x992>
 800f558:	9a02      	ldr	r2, [sp, #8]
 800f55a:	2339      	movs	r3, #57	; 0x39
 800f55c:	7013      	strb	r3, [r2, #0]
 800f55e:	4643      	mov	r3, r8
 800f560:	4698      	mov	r8, r3
 800f562:	3b01      	subs	r3, #1
 800f564:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f568:	2a39      	cmp	r2, #57	; 0x39
 800f56a:	d051      	beq.n	800f610 <_dtoa_r+0xa98>
 800f56c:	3201      	adds	r2, #1
 800f56e:	701a      	strb	r2, [r3, #0]
 800f570:	e745      	b.n	800f3fe <_dtoa_r+0x886>
 800f572:	2a00      	cmp	r2, #0
 800f574:	dd03      	ble.n	800f57e <_dtoa_r+0xa06>
 800f576:	2b39      	cmp	r3, #57	; 0x39
 800f578:	d0ee      	beq.n	800f558 <_dtoa_r+0x9e0>
 800f57a:	3301      	adds	r3, #1
 800f57c:	e7c7      	b.n	800f50e <_dtoa_r+0x996>
 800f57e:	9a05      	ldr	r2, [sp, #20]
 800f580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f582:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f586:	428a      	cmp	r2, r1
 800f588:	d02b      	beq.n	800f5e2 <_dtoa_r+0xa6a>
 800f58a:	4629      	mov	r1, r5
 800f58c:	2300      	movs	r3, #0
 800f58e:	220a      	movs	r2, #10
 800f590:	4630      	mov	r0, r6
 800f592:	f000 f8e1 	bl	800f758 <__multadd>
 800f596:	45b9      	cmp	r9, r7
 800f598:	4605      	mov	r5, r0
 800f59a:	f04f 0300 	mov.w	r3, #0
 800f59e:	f04f 020a 	mov.w	r2, #10
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	d107      	bne.n	800f5b8 <_dtoa_r+0xa40>
 800f5a8:	f000 f8d6 	bl	800f758 <__multadd>
 800f5ac:	4681      	mov	r9, r0
 800f5ae:	4607      	mov	r7, r0
 800f5b0:	9b05      	ldr	r3, [sp, #20]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	9305      	str	r3, [sp, #20]
 800f5b6:	e774      	b.n	800f4a2 <_dtoa_r+0x92a>
 800f5b8:	f000 f8ce 	bl	800f758 <__multadd>
 800f5bc:	4639      	mov	r1, r7
 800f5be:	4681      	mov	r9, r0
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	220a      	movs	r2, #10
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f000 f8c7 	bl	800f758 <__multadd>
 800f5ca:	4607      	mov	r7, r0
 800f5cc:	e7f0      	b.n	800f5b0 <_dtoa_r+0xa38>
 800f5ce:	f1ba 0f00 	cmp.w	sl, #0
 800f5d2:	9a00      	ldr	r2, [sp, #0]
 800f5d4:	bfcc      	ite	gt
 800f5d6:	46d0      	movgt	r8, sl
 800f5d8:	f04f 0801 	movle.w	r8, #1
 800f5dc:	4490      	add	r8, r2
 800f5de:	f04f 0900 	mov.w	r9, #0
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	9302      	str	r3, [sp, #8]
 800f5ea:	f000 fa65 	bl	800fab8 <__lshift>
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	f000 facd 	bl	800fb90 <__mcmp>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	dcb1      	bgt.n	800f55e <_dtoa_r+0x9e6>
 800f5fa:	d102      	bne.n	800f602 <_dtoa_r+0xa8a>
 800f5fc:	9b02      	ldr	r3, [sp, #8]
 800f5fe:	07db      	lsls	r3, r3, #31
 800f600:	d4ad      	bmi.n	800f55e <_dtoa_r+0x9e6>
 800f602:	4643      	mov	r3, r8
 800f604:	4698      	mov	r8, r3
 800f606:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f60a:	2a30      	cmp	r2, #48	; 0x30
 800f60c:	d0fa      	beq.n	800f604 <_dtoa_r+0xa8c>
 800f60e:	e6f6      	b.n	800f3fe <_dtoa_r+0x886>
 800f610:	9a00      	ldr	r2, [sp, #0]
 800f612:	429a      	cmp	r2, r3
 800f614:	d1a4      	bne.n	800f560 <_dtoa_r+0x9e8>
 800f616:	f10b 0b01 	add.w	fp, fp, #1
 800f61a:	2331      	movs	r3, #49	; 0x31
 800f61c:	e778      	b.n	800f510 <_dtoa_r+0x998>
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <_dtoa_r+0xafc>)
 800f620:	f7ff bb12 	b.w	800ec48 <_dtoa_r+0xd0>
 800f624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f626:	2b00      	cmp	r3, #0
 800f628:	f47f aaee 	bne.w	800ec08 <_dtoa_r+0x90>
 800f62c:	4b12      	ldr	r3, [pc, #72]	; (800f678 <_dtoa_r+0xb00>)
 800f62e:	f7ff bb0b 	b.w	800ec48 <_dtoa_r+0xd0>
 800f632:	f1ba 0f00 	cmp.w	sl, #0
 800f636:	dc03      	bgt.n	800f640 <_dtoa_r+0xac8>
 800f638:	9b07      	ldr	r3, [sp, #28]
 800f63a:	2b02      	cmp	r3, #2
 800f63c:	f73f aec7 	bgt.w	800f3ce <_dtoa_r+0x856>
 800f640:	f8dd 8000 	ldr.w	r8, [sp]
 800f644:	4621      	mov	r1, r4
 800f646:	4628      	mov	r0, r5
 800f648:	f7ff fa08 	bl	800ea5c <quorem>
 800f64c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f650:	f808 3b01 	strb.w	r3, [r8], #1
 800f654:	9a00      	ldr	r2, [sp, #0]
 800f656:	eba8 0202 	sub.w	r2, r8, r2
 800f65a:	4592      	cmp	sl, r2
 800f65c:	ddb7      	ble.n	800f5ce <_dtoa_r+0xa56>
 800f65e:	4629      	mov	r1, r5
 800f660:	2300      	movs	r3, #0
 800f662:	220a      	movs	r2, #10
 800f664:	4630      	mov	r0, r6
 800f666:	f000 f877 	bl	800f758 <__multadd>
 800f66a:	4605      	mov	r5, r0
 800f66c:	e7ea      	b.n	800f644 <_dtoa_r+0xacc>
 800f66e:	bf00      	nop
 800f670:	0801b1cb 	.word	0x0801b1cb
 800f674:	0801b124 	.word	0x0801b124
 800f678:	0801b148 	.word	0x0801b148

0800f67c <_localeconv_r>:
 800f67c:	4800      	ldr	r0, [pc, #0]	; (800f680 <_localeconv_r+0x4>)
 800f67e:	4770      	bx	lr
 800f680:	24000560 	.word	0x24000560

0800f684 <malloc>:
 800f684:	4b02      	ldr	r3, [pc, #8]	; (800f690 <malloc+0xc>)
 800f686:	4601      	mov	r1, r0
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	f000 bbe1 	b.w	800fe50 <_malloc_r>
 800f68e:	bf00      	nop
 800f690:	2400040c 	.word	0x2400040c

0800f694 <_Balloc>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	b976      	cbnz	r6, 800f6bc <_Balloc+0x28>
 800f69e:	2010      	movs	r0, #16
 800f6a0:	f7ff fff0 	bl	800f684 <malloc>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	6260      	str	r0, [r4, #36]	; 0x24
 800f6a8:	b920      	cbnz	r0, 800f6b4 <_Balloc+0x20>
 800f6aa:	4b18      	ldr	r3, [pc, #96]	; (800f70c <_Balloc+0x78>)
 800f6ac:	4818      	ldr	r0, [pc, #96]	; (800f710 <_Balloc+0x7c>)
 800f6ae:	2166      	movs	r1, #102	; 0x66
 800f6b0:	f000 fd94 	bl	80101dc <__assert_func>
 800f6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6b8:	6006      	str	r6, [r0, #0]
 800f6ba:	60c6      	str	r6, [r0, #12]
 800f6bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f6be:	68f3      	ldr	r3, [r6, #12]
 800f6c0:	b183      	cbz	r3, 800f6e4 <_Balloc+0x50>
 800f6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f6ca:	b9b8      	cbnz	r0, 800f6fc <_Balloc+0x68>
 800f6cc:	2101      	movs	r1, #1
 800f6ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f6d2:	1d72      	adds	r2, r6, #5
 800f6d4:	0092      	lsls	r2, r2, #2
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 fb5a 	bl	800fd90 <_calloc_r>
 800f6dc:	b160      	cbz	r0, 800f6f8 <_Balloc+0x64>
 800f6de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f6e2:	e00e      	b.n	800f702 <_Balloc+0x6e>
 800f6e4:	2221      	movs	r2, #33	; 0x21
 800f6e6:	2104      	movs	r1, #4
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f000 fb51 	bl	800fd90 <_calloc_r>
 800f6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6f0:	60f0      	str	r0, [r6, #12]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1e4      	bne.n	800f6c2 <_Balloc+0x2e>
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	6802      	ldr	r2, [r0, #0]
 800f6fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f702:	2300      	movs	r3, #0
 800f704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f708:	e7f7      	b.n	800f6fa <_Balloc+0x66>
 800f70a:	bf00      	nop
 800f70c:	0801b155 	.word	0x0801b155
 800f710:	0801b1dc 	.word	0x0801b1dc

0800f714 <_Bfree>:
 800f714:	b570      	push	{r4, r5, r6, lr}
 800f716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f718:	4605      	mov	r5, r0
 800f71a:	460c      	mov	r4, r1
 800f71c:	b976      	cbnz	r6, 800f73c <_Bfree+0x28>
 800f71e:	2010      	movs	r0, #16
 800f720:	f7ff ffb0 	bl	800f684 <malloc>
 800f724:	4602      	mov	r2, r0
 800f726:	6268      	str	r0, [r5, #36]	; 0x24
 800f728:	b920      	cbnz	r0, 800f734 <_Bfree+0x20>
 800f72a:	4b09      	ldr	r3, [pc, #36]	; (800f750 <_Bfree+0x3c>)
 800f72c:	4809      	ldr	r0, [pc, #36]	; (800f754 <_Bfree+0x40>)
 800f72e:	218a      	movs	r1, #138	; 0x8a
 800f730:	f000 fd54 	bl	80101dc <__assert_func>
 800f734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f738:	6006      	str	r6, [r0, #0]
 800f73a:	60c6      	str	r6, [r0, #12]
 800f73c:	b13c      	cbz	r4, 800f74e <_Bfree+0x3a>
 800f73e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f740:	6862      	ldr	r2, [r4, #4]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f748:	6021      	str	r1, [r4, #0]
 800f74a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
 800f750:	0801b155 	.word	0x0801b155
 800f754:	0801b1dc 	.word	0x0801b1dc

0800f758 <__multadd>:
 800f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75c:	690e      	ldr	r6, [r1, #16]
 800f75e:	4607      	mov	r7, r0
 800f760:	4698      	mov	r8, r3
 800f762:	460c      	mov	r4, r1
 800f764:	f101 0014 	add.w	r0, r1, #20
 800f768:	2300      	movs	r3, #0
 800f76a:	6805      	ldr	r5, [r0, #0]
 800f76c:	b2a9      	uxth	r1, r5
 800f76e:	fb02 8101 	mla	r1, r2, r1, r8
 800f772:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f776:	0c2d      	lsrs	r5, r5, #16
 800f778:	fb02 c505 	mla	r5, r2, r5, ip
 800f77c:	b289      	uxth	r1, r1
 800f77e:	3301      	adds	r3, #1
 800f780:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f784:	429e      	cmp	r6, r3
 800f786:	f840 1b04 	str.w	r1, [r0], #4
 800f78a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f78e:	dcec      	bgt.n	800f76a <__multadd+0x12>
 800f790:	f1b8 0f00 	cmp.w	r8, #0
 800f794:	d022      	beq.n	800f7dc <__multadd+0x84>
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	42b3      	cmp	r3, r6
 800f79a:	dc19      	bgt.n	800f7d0 <__multadd+0x78>
 800f79c:	6861      	ldr	r1, [r4, #4]
 800f79e:	4638      	mov	r0, r7
 800f7a0:	3101      	adds	r1, #1
 800f7a2:	f7ff ff77 	bl	800f694 <_Balloc>
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	b928      	cbnz	r0, 800f7b6 <__multadd+0x5e>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <__multadd+0x8c>)
 800f7ae:	480e      	ldr	r0, [pc, #56]	; (800f7e8 <__multadd+0x90>)
 800f7b0:	21b5      	movs	r1, #181	; 0xb5
 800f7b2:	f000 fd13 	bl	80101dc <__assert_func>
 800f7b6:	6922      	ldr	r2, [r4, #16]
 800f7b8:	3202      	adds	r2, #2
 800f7ba:	f104 010c 	add.w	r1, r4, #12
 800f7be:	0092      	lsls	r2, r2, #2
 800f7c0:	300c      	adds	r0, #12
 800f7c2:	f7fe fcb3 	bl	800e12c <memcpy>
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	4638      	mov	r0, r7
 800f7ca:	f7ff ffa3 	bl	800f714 <_Bfree>
 800f7ce:	462c      	mov	r4, r5
 800f7d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f7d4:	3601      	adds	r6, #1
 800f7d6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f7da:	6126      	str	r6, [r4, #16]
 800f7dc:	4620      	mov	r0, r4
 800f7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e2:	bf00      	nop
 800f7e4:	0801b1cb 	.word	0x0801b1cb
 800f7e8:	0801b1dc 	.word	0x0801b1dc

0800f7ec <__hi0bits>:
 800f7ec:	0c03      	lsrs	r3, r0, #16
 800f7ee:	041b      	lsls	r3, r3, #16
 800f7f0:	b9d3      	cbnz	r3, 800f828 <__hi0bits+0x3c>
 800f7f2:	0400      	lsls	r0, r0, #16
 800f7f4:	2310      	movs	r3, #16
 800f7f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f7fa:	bf04      	itt	eq
 800f7fc:	0200      	lsleq	r0, r0, #8
 800f7fe:	3308      	addeq	r3, #8
 800f800:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f804:	bf04      	itt	eq
 800f806:	0100      	lsleq	r0, r0, #4
 800f808:	3304      	addeq	r3, #4
 800f80a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f80e:	bf04      	itt	eq
 800f810:	0080      	lsleq	r0, r0, #2
 800f812:	3302      	addeq	r3, #2
 800f814:	2800      	cmp	r0, #0
 800f816:	db05      	blt.n	800f824 <__hi0bits+0x38>
 800f818:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f81c:	f103 0301 	add.w	r3, r3, #1
 800f820:	bf08      	it	eq
 800f822:	2320      	moveq	r3, #32
 800f824:	4618      	mov	r0, r3
 800f826:	4770      	bx	lr
 800f828:	2300      	movs	r3, #0
 800f82a:	e7e4      	b.n	800f7f6 <__hi0bits+0xa>

0800f82c <__lo0bits>:
 800f82c:	6803      	ldr	r3, [r0, #0]
 800f82e:	f013 0207 	ands.w	r2, r3, #7
 800f832:	4601      	mov	r1, r0
 800f834:	d00b      	beq.n	800f84e <__lo0bits+0x22>
 800f836:	07da      	lsls	r2, r3, #31
 800f838:	d424      	bmi.n	800f884 <__lo0bits+0x58>
 800f83a:	0798      	lsls	r0, r3, #30
 800f83c:	bf49      	itett	mi
 800f83e:	085b      	lsrmi	r3, r3, #1
 800f840:	089b      	lsrpl	r3, r3, #2
 800f842:	2001      	movmi	r0, #1
 800f844:	600b      	strmi	r3, [r1, #0]
 800f846:	bf5c      	itt	pl
 800f848:	600b      	strpl	r3, [r1, #0]
 800f84a:	2002      	movpl	r0, #2
 800f84c:	4770      	bx	lr
 800f84e:	b298      	uxth	r0, r3
 800f850:	b9b0      	cbnz	r0, 800f880 <__lo0bits+0x54>
 800f852:	0c1b      	lsrs	r3, r3, #16
 800f854:	2010      	movs	r0, #16
 800f856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f85a:	bf04      	itt	eq
 800f85c:	0a1b      	lsreq	r3, r3, #8
 800f85e:	3008      	addeq	r0, #8
 800f860:	071a      	lsls	r2, r3, #28
 800f862:	bf04      	itt	eq
 800f864:	091b      	lsreq	r3, r3, #4
 800f866:	3004      	addeq	r0, #4
 800f868:	079a      	lsls	r2, r3, #30
 800f86a:	bf04      	itt	eq
 800f86c:	089b      	lsreq	r3, r3, #2
 800f86e:	3002      	addeq	r0, #2
 800f870:	07da      	lsls	r2, r3, #31
 800f872:	d403      	bmi.n	800f87c <__lo0bits+0x50>
 800f874:	085b      	lsrs	r3, r3, #1
 800f876:	f100 0001 	add.w	r0, r0, #1
 800f87a:	d005      	beq.n	800f888 <__lo0bits+0x5c>
 800f87c:	600b      	str	r3, [r1, #0]
 800f87e:	4770      	bx	lr
 800f880:	4610      	mov	r0, r2
 800f882:	e7e8      	b.n	800f856 <__lo0bits+0x2a>
 800f884:	2000      	movs	r0, #0
 800f886:	4770      	bx	lr
 800f888:	2020      	movs	r0, #32
 800f88a:	4770      	bx	lr

0800f88c <__i2b>:
 800f88c:	b510      	push	{r4, lr}
 800f88e:	460c      	mov	r4, r1
 800f890:	2101      	movs	r1, #1
 800f892:	f7ff feff 	bl	800f694 <_Balloc>
 800f896:	4602      	mov	r2, r0
 800f898:	b928      	cbnz	r0, 800f8a6 <__i2b+0x1a>
 800f89a:	4b05      	ldr	r3, [pc, #20]	; (800f8b0 <__i2b+0x24>)
 800f89c:	4805      	ldr	r0, [pc, #20]	; (800f8b4 <__i2b+0x28>)
 800f89e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f8a2:	f000 fc9b 	bl	80101dc <__assert_func>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	6144      	str	r4, [r0, #20]
 800f8aa:	6103      	str	r3, [r0, #16]
 800f8ac:	bd10      	pop	{r4, pc}
 800f8ae:	bf00      	nop
 800f8b0:	0801b1cb 	.word	0x0801b1cb
 800f8b4:	0801b1dc 	.word	0x0801b1dc

0800f8b8 <__multiply>:
 800f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	4614      	mov	r4, r2
 800f8be:	690a      	ldr	r2, [r1, #16]
 800f8c0:	6923      	ldr	r3, [r4, #16]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	bfb8      	it	lt
 800f8c6:	460b      	movlt	r3, r1
 800f8c8:	460d      	mov	r5, r1
 800f8ca:	bfbc      	itt	lt
 800f8cc:	4625      	movlt	r5, r4
 800f8ce:	461c      	movlt	r4, r3
 800f8d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f8d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f8d8:	68ab      	ldr	r3, [r5, #8]
 800f8da:	6869      	ldr	r1, [r5, #4]
 800f8dc:	eb0a 0709 	add.w	r7, sl, r9
 800f8e0:	42bb      	cmp	r3, r7
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	bfb8      	it	lt
 800f8e6:	3101      	addlt	r1, #1
 800f8e8:	f7ff fed4 	bl	800f694 <_Balloc>
 800f8ec:	b930      	cbnz	r0, 800f8fc <__multiply+0x44>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	4b42      	ldr	r3, [pc, #264]	; (800f9fc <__multiply+0x144>)
 800f8f2:	4843      	ldr	r0, [pc, #268]	; (800fa00 <__multiply+0x148>)
 800f8f4:	f240 115d 	movw	r1, #349	; 0x15d
 800f8f8:	f000 fc70 	bl	80101dc <__assert_func>
 800f8fc:	f100 0614 	add.w	r6, r0, #20
 800f900:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f904:	4633      	mov	r3, r6
 800f906:	2200      	movs	r2, #0
 800f908:	4543      	cmp	r3, r8
 800f90a:	d31e      	bcc.n	800f94a <__multiply+0x92>
 800f90c:	f105 0c14 	add.w	ip, r5, #20
 800f910:	f104 0314 	add.w	r3, r4, #20
 800f914:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f918:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f91c:	9202      	str	r2, [sp, #8]
 800f91e:	ebac 0205 	sub.w	r2, ip, r5
 800f922:	3a15      	subs	r2, #21
 800f924:	f022 0203 	bic.w	r2, r2, #3
 800f928:	3204      	adds	r2, #4
 800f92a:	f105 0115 	add.w	r1, r5, #21
 800f92e:	458c      	cmp	ip, r1
 800f930:	bf38      	it	cc
 800f932:	2204      	movcc	r2, #4
 800f934:	9201      	str	r2, [sp, #4]
 800f936:	9a02      	ldr	r2, [sp, #8]
 800f938:	9303      	str	r3, [sp, #12]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d808      	bhi.n	800f950 <__multiply+0x98>
 800f93e:	2f00      	cmp	r7, #0
 800f940:	dc55      	bgt.n	800f9ee <__multiply+0x136>
 800f942:	6107      	str	r7, [r0, #16]
 800f944:	b005      	add	sp, #20
 800f946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94a:	f843 2b04 	str.w	r2, [r3], #4
 800f94e:	e7db      	b.n	800f908 <__multiply+0x50>
 800f950:	f8b3 a000 	ldrh.w	sl, [r3]
 800f954:	f1ba 0f00 	cmp.w	sl, #0
 800f958:	d020      	beq.n	800f99c <__multiply+0xe4>
 800f95a:	f105 0e14 	add.w	lr, r5, #20
 800f95e:	46b1      	mov	r9, r6
 800f960:	2200      	movs	r2, #0
 800f962:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f966:	f8d9 b000 	ldr.w	fp, [r9]
 800f96a:	b2a1      	uxth	r1, r4
 800f96c:	fa1f fb8b 	uxth.w	fp, fp
 800f970:	fb0a b101 	mla	r1, sl, r1, fp
 800f974:	4411      	add	r1, r2
 800f976:	f8d9 2000 	ldr.w	r2, [r9]
 800f97a:	0c24      	lsrs	r4, r4, #16
 800f97c:	0c12      	lsrs	r2, r2, #16
 800f97e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f982:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f986:	b289      	uxth	r1, r1
 800f988:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f98c:	45f4      	cmp	ip, lr
 800f98e:	f849 1b04 	str.w	r1, [r9], #4
 800f992:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f996:	d8e4      	bhi.n	800f962 <__multiply+0xaa>
 800f998:	9901      	ldr	r1, [sp, #4]
 800f99a:	5072      	str	r2, [r6, r1]
 800f99c:	9a03      	ldr	r2, [sp, #12]
 800f99e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	f1b9 0f00 	cmp.w	r9, #0
 800f9a8:	d01f      	beq.n	800f9ea <__multiply+0x132>
 800f9aa:	6834      	ldr	r4, [r6, #0]
 800f9ac:	f105 0114 	add.w	r1, r5, #20
 800f9b0:	46b6      	mov	lr, r6
 800f9b2:	f04f 0a00 	mov.w	sl, #0
 800f9b6:	880a      	ldrh	r2, [r1, #0]
 800f9b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f9bc:	fb09 b202 	mla	r2, r9, r2, fp
 800f9c0:	4492      	add	sl, r2
 800f9c2:	b2a4      	uxth	r4, r4
 800f9c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f9c8:	f84e 4b04 	str.w	r4, [lr], #4
 800f9cc:	f851 4b04 	ldr.w	r4, [r1], #4
 800f9d0:	f8be 2000 	ldrh.w	r2, [lr]
 800f9d4:	0c24      	lsrs	r4, r4, #16
 800f9d6:	fb09 2404 	mla	r4, r9, r4, r2
 800f9da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f9de:	458c      	cmp	ip, r1
 800f9e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f9e4:	d8e7      	bhi.n	800f9b6 <__multiply+0xfe>
 800f9e6:	9a01      	ldr	r2, [sp, #4]
 800f9e8:	50b4      	str	r4, [r6, r2]
 800f9ea:	3604      	adds	r6, #4
 800f9ec:	e7a3      	b.n	800f936 <__multiply+0x7e>
 800f9ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1a5      	bne.n	800f942 <__multiply+0x8a>
 800f9f6:	3f01      	subs	r7, #1
 800f9f8:	e7a1      	b.n	800f93e <__multiply+0x86>
 800f9fa:	bf00      	nop
 800f9fc:	0801b1cb 	.word	0x0801b1cb
 800fa00:	0801b1dc 	.word	0x0801b1dc

0800fa04 <__pow5mult>:
 800fa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa08:	4615      	mov	r5, r2
 800fa0a:	f012 0203 	ands.w	r2, r2, #3
 800fa0e:	4606      	mov	r6, r0
 800fa10:	460f      	mov	r7, r1
 800fa12:	d007      	beq.n	800fa24 <__pow5mult+0x20>
 800fa14:	4c25      	ldr	r4, [pc, #148]	; (800faac <__pow5mult+0xa8>)
 800fa16:	3a01      	subs	r2, #1
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa1e:	f7ff fe9b 	bl	800f758 <__multadd>
 800fa22:	4607      	mov	r7, r0
 800fa24:	10ad      	asrs	r5, r5, #2
 800fa26:	d03d      	beq.n	800faa4 <__pow5mult+0xa0>
 800fa28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa2a:	b97c      	cbnz	r4, 800fa4c <__pow5mult+0x48>
 800fa2c:	2010      	movs	r0, #16
 800fa2e:	f7ff fe29 	bl	800f684 <malloc>
 800fa32:	4602      	mov	r2, r0
 800fa34:	6270      	str	r0, [r6, #36]	; 0x24
 800fa36:	b928      	cbnz	r0, 800fa44 <__pow5mult+0x40>
 800fa38:	4b1d      	ldr	r3, [pc, #116]	; (800fab0 <__pow5mult+0xac>)
 800fa3a:	481e      	ldr	r0, [pc, #120]	; (800fab4 <__pow5mult+0xb0>)
 800fa3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fa40:	f000 fbcc 	bl	80101dc <__assert_func>
 800fa44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa48:	6004      	str	r4, [r0, #0]
 800fa4a:	60c4      	str	r4, [r0, #12]
 800fa4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa54:	b94c      	cbnz	r4, 800fa6a <__pow5mult+0x66>
 800fa56:	f240 2171 	movw	r1, #625	; 0x271
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7ff ff16 	bl	800f88c <__i2b>
 800fa60:	2300      	movs	r3, #0
 800fa62:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa66:	4604      	mov	r4, r0
 800fa68:	6003      	str	r3, [r0, #0]
 800fa6a:	f04f 0900 	mov.w	r9, #0
 800fa6e:	07eb      	lsls	r3, r5, #31
 800fa70:	d50a      	bpl.n	800fa88 <__pow5mult+0x84>
 800fa72:	4639      	mov	r1, r7
 800fa74:	4622      	mov	r2, r4
 800fa76:	4630      	mov	r0, r6
 800fa78:	f7ff ff1e 	bl	800f8b8 <__multiply>
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	4680      	mov	r8, r0
 800fa80:	4630      	mov	r0, r6
 800fa82:	f7ff fe47 	bl	800f714 <_Bfree>
 800fa86:	4647      	mov	r7, r8
 800fa88:	106d      	asrs	r5, r5, #1
 800fa8a:	d00b      	beq.n	800faa4 <__pow5mult+0xa0>
 800fa8c:	6820      	ldr	r0, [r4, #0]
 800fa8e:	b938      	cbnz	r0, 800faa0 <__pow5mult+0x9c>
 800fa90:	4622      	mov	r2, r4
 800fa92:	4621      	mov	r1, r4
 800fa94:	4630      	mov	r0, r6
 800fa96:	f7ff ff0f 	bl	800f8b8 <__multiply>
 800fa9a:	6020      	str	r0, [r4, #0]
 800fa9c:	f8c0 9000 	str.w	r9, [r0]
 800faa0:	4604      	mov	r4, r0
 800faa2:	e7e4      	b.n	800fa6e <__pow5mult+0x6a>
 800faa4:	4638      	mov	r0, r7
 800faa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faaa:	bf00      	nop
 800faac:	0801b330 	.word	0x0801b330
 800fab0:	0801b155 	.word	0x0801b155
 800fab4:	0801b1dc 	.word	0x0801b1dc

0800fab8 <__lshift>:
 800fab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fabc:	460c      	mov	r4, r1
 800fabe:	6849      	ldr	r1, [r1, #4]
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fac6:	68a3      	ldr	r3, [r4, #8]
 800fac8:	4607      	mov	r7, r0
 800faca:	4691      	mov	r9, r2
 800facc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fad0:	f108 0601 	add.w	r6, r8, #1
 800fad4:	42b3      	cmp	r3, r6
 800fad6:	db0b      	blt.n	800faf0 <__lshift+0x38>
 800fad8:	4638      	mov	r0, r7
 800fada:	f7ff fddb 	bl	800f694 <_Balloc>
 800fade:	4605      	mov	r5, r0
 800fae0:	b948      	cbnz	r0, 800faf6 <__lshift+0x3e>
 800fae2:	4602      	mov	r2, r0
 800fae4:	4b28      	ldr	r3, [pc, #160]	; (800fb88 <__lshift+0xd0>)
 800fae6:	4829      	ldr	r0, [pc, #164]	; (800fb8c <__lshift+0xd4>)
 800fae8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800faec:	f000 fb76 	bl	80101dc <__assert_func>
 800faf0:	3101      	adds	r1, #1
 800faf2:	005b      	lsls	r3, r3, #1
 800faf4:	e7ee      	b.n	800fad4 <__lshift+0x1c>
 800faf6:	2300      	movs	r3, #0
 800faf8:	f100 0114 	add.w	r1, r0, #20
 800fafc:	f100 0210 	add.w	r2, r0, #16
 800fb00:	4618      	mov	r0, r3
 800fb02:	4553      	cmp	r3, sl
 800fb04:	db33      	blt.n	800fb6e <__lshift+0xb6>
 800fb06:	6920      	ldr	r0, [r4, #16]
 800fb08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb0c:	f104 0314 	add.w	r3, r4, #20
 800fb10:	f019 091f 	ands.w	r9, r9, #31
 800fb14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb1c:	d02b      	beq.n	800fb76 <__lshift+0xbe>
 800fb1e:	f1c9 0e20 	rsb	lr, r9, #32
 800fb22:	468a      	mov	sl, r1
 800fb24:	2200      	movs	r2, #0
 800fb26:	6818      	ldr	r0, [r3, #0]
 800fb28:	fa00 f009 	lsl.w	r0, r0, r9
 800fb2c:	4302      	orrs	r2, r0
 800fb2e:	f84a 2b04 	str.w	r2, [sl], #4
 800fb32:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb36:	459c      	cmp	ip, r3
 800fb38:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb3c:	d8f3      	bhi.n	800fb26 <__lshift+0x6e>
 800fb3e:	ebac 0304 	sub.w	r3, ip, r4
 800fb42:	3b15      	subs	r3, #21
 800fb44:	f023 0303 	bic.w	r3, r3, #3
 800fb48:	3304      	adds	r3, #4
 800fb4a:	f104 0015 	add.w	r0, r4, #21
 800fb4e:	4584      	cmp	ip, r0
 800fb50:	bf38      	it	cc
 800fb52:	2304      	movcc	r3, #4
 800fb54:	50ca      	str	r2, [r1, r3]
 800fb56:	b10a      	cbz	r2, 800fb5c <__lshift+0xa4>
 800fb58:	f108 0602 	add.w	r6, r8, #2
 800fb5c:	3e01      	subs	r6, #1
 800fb5e:	4638      	mov	r0, r7
 800fb60:	612e      	str	r6, [r5, #16]
 800fb62:	4621      	mov	r1, r4
 800fb64:	f7ff fdd6 	bl	800f714 <_Bfree>
 800fb68:	4628      	mov	r0, r5
 800fb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb72:	3301      	adds	r3, #1
 800fb74:	e7c5      	b.n	800fb02 <__lshift+0x4a>
 800fb76:	3904      	subs	r1, #4
 800fb78:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb80:	459c      	cmp	ip, r3
 800fb82:	d8f9      	bhi.n	800fb78 <__lshift+0xc0>
 800fb84:	e7ea      	b.n	800fb5c <__lshift+0xa4>
 800fb86:	bf00      	nop
 800fb88:	0801b1cb 	.word	0x0801b1cb
 800fb8c:	0801b1dc 	.word	0x0801b1dc

0800fb90 <__mcmp>:
 800fb90:	b530      	push	{r4, r5, lr}
 800fb92:	6902      	ldr	r2, [r0, #16]
 800fb94:	690c      	ldr	r4, [r1, #16]
 800fb96:	1b12      	subs	r2, r2, r4
 800fb98:	d10e      	bne.n	800fbb8 <__mcmp+0x28>
 800fb9a:	f100 0314 	add.w	r3, r0, #20
 800fb9e:	3114      	adds	r1, #20
 800fba0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fba4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fba8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fbac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fbb0:	42a5      	cmp	r5, r4
 800fbb2:	d003      	beq.n	800fbbc <__mcmp+0x2c>
 800fbb4:	d305      	bcc.n	800fbc2 <__mcmp+0x32>
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	4610      	mov	r0, r2
 800fbba:	bd30      	pop	{r4, r5, pc}
 800fbbc:	4283      	cmp	r3, r0
 800fbbe:	d3f3      	bcc.n	800fba8 <__mcmp+0x18>
 800fbc0:	e7fa      	b.n	800fbb8 <__mcmp+0x28>
 800fbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc6:	e7f7      	b.n	800fbb8 <__mcmp+0x28>

0800fbc8 <__mdiff>:
 800fbc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	460c      	mov	r4, r1
 800fbce:	4606      	mov	r6, r0
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	4617      	mov	r7, r2
 800fbd6:	f7ff ffdb 	bl	800fb90 <__mcmp>
 800fbda:	1e05      	subs	r5, r0, #0
 800fbdc:	d110      	bne.n	800fc00 <__mdiff+0x38>
 800fbde:	4629      	mov	r1, r5
 800fbe0:	4630      	mov	r0, r6
 800fbe2:	f7ff fd57 	bl	800f694 <_Balloc>
 800fbe6:	b930      	cbnz	r0, 800fbf6 <__mdiff+0x2e>
 800fbe8:	4b39      	ldr	r3, [pc, #228]	; (800fcd0 <__mdiff+0x108>)
 800fbea:	4602      	mov	r2, r0
 800fbec:	f240 2132 	movw	r1, #562	; 0x232
 800fbf0:	4838      	ldr	r0, [pc, #224]	; (800fcd4 <__mdiff+0x10c>)
 800fbf2:	f000 faf3 	bl	80101dc <__assert_func>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc00:	bfa4      	itt	ge
 800fc02:	463b      	movge	r3, r7
 800fc04:	4627      	movge	r7, r4
 800fc06:	4630      	mov	r0, r6
 800fc08:	6879      	ldr	r1, [r7, #4]
 800fc0a:	bfa6      	itte	ge
 800fc0c:	461c      	movge	r4, r3
 800fc0e:	2500      	movge	r5, #0
 800fc10:	2501      	movlt	r5, #1
 800fc12:	f7ff fd3f 	bl	800f694 <_Balloc>
 800fc16:	b920      	cbnz	r0, 800fc22 <__mdiff+0x5a>
 800fc18:	4b2d      	ldr	r3, [pc, #180]	; (800fcd0 <__mdiff+0x108>)
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fc20:	e7e6      	b.n	800fbf0 <__mdiff+0x28>
 800fc22:	693e      	ldr	r6, [r7, #16]
 800fc24:	60c5      	str	r5, [r0, #12]
 800fc26:	6925      	ldr	r5, [r4, #16]
 800fc28:	f107 0114 	add.w	r1, r7, #20
 800fc2c:	f104 0914 	add.w	r9, r4, #20
 800fc30:	f100 0e14 	add.w	lr, r0, #20
 800fc34:	f107 0210 	add.w	r2, r7, #16
 800fc38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fc3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fc40:	46f2      	mov	sl, lr
 800fc42:	2700      	movs	r7, #0
 800fc44:	f859 3b04 	ldr.w	r3, [r9], #4
 800fc48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fc4c:	fa1f f883 	uxth.w	r8, r3
 800fc50:	fa17 f78b 	uxtah	r7, r7, fp
 800fc54:	0c1b      	lsrs	r3, r3, #16
 800fc56:	eba7 0808 	sub.w	r8, r7, r8
 800fc5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fc5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fc62:	fa1f f888 	uxth.w	r8, r8
 800fc66:	141f      	asrs	r7, r3, #16
 800fc68:	454d      	cmp	r5, r9
 800fc6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fc6e:	f84a 3b04 	str.w	r3, [sl], #4
 800fc72:	d8e7      	bhi.n	800fc44 <__mdiff+0x7c>
 800fc74:	1b2b      	subs	r3, r5, r4
 800fc76:	3b15      	subs	r3, #21
 800fc78:	f023 0303 	bic.w	r3, r3, #3
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	3415      	adds	r4, #21
 800fc80:	42a5      	cmp	r5, r4
 800fc82:	bf38      	it	cc
 800fc84:	2304      	movcc	r3, #4
 800fc86:	4419      	add	r1, r3
 800fc88:	4473      	add	r3, lr
 800fc8a:	469e      	mov	lr, r3
 800fc8c:	460d      	mov	r5, r1
 800fc8e:	4565      	cmp	r5, ip
 800fc90:	d30e      	bcc.n	800fcb0 <__mdiff+0xe8>
 800fc92:	f10c 0203 	add.w	r2, ip, #3
 800fc96:	1a52      	subs	r2, r2, r1
 800fc98:	f022 0203 	bic.w	r2, r2, #3
 800fc9c:	3903      	subs	r1, #3
 800fc9e:	458c      	cmp	ip, r1
 800fca0:	bf38      	it	cc
 800fca2:	2200      	movcc	r2, #0
 800fca4:	441a      	add	r2, r3
 800fca6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fcaa:	b17b      	cbz	r3, 800fccc <__mdiff+0x104>
 800fcac:	6106      	str	r6, [r0, #16]
 800fcae:	e7a5      	b.n	800fbfc <__mdiff+0x34>
 800fcb0:	f855 8b04 	ldr.w	r8, [r5], #4
 800fcb4:	fa17 f488 	uxtah	r4, r7, r8
 800fcb8:	1422      	asrs	r2, r4, #16
 800fcba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fcbe:	b2a4      	uxth	r4, r4
 800fcc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fcc4:	f84e 4b04 	str.w	r4, [lr], #4
 800fcc8:	1417      	asrs	r7, r2, #16
 800fcca:	e7e0      	b.n	800fc8e <__mdiff+0xc6>
 800fccc:	3e01      	subs	r6, #1
 800fcce:	e7ea      	b.n	800fca6 <__mdiff+0xde>
 800fcd0:	0801b1cb 	.word	0x0801b1cb
 800fcd4:	0801b1dc 	.word	0x0801b1dc

0800fcd8 <__d2b>:
 800fcd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcdc:	4689      	mov	r9, r1
 800fcde:	2101      	movs	r1, #1
 800fce0:	ec57 6b10 	vmov	r6, r7, d0
 800fce4:	4690      	mov	r8, r2
 800fce6:	f7ff fcd5 	bl	800f694 <_Balloc>
 800fcea:	4604      	mov	r4, r0
 800fcec:	b930      	cbnz	r0, 800fcfc <__d2b+0x24>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	4b25      	ldr	r3, [pc, #148]	; (800fd88 <__d2b+0xb0>)
 800fcf2:	4826      	ldr	r0, [pc, #152]	; (800fd8c <__d2b+0xb4>)
 800fcf4:	f240 310a 	movw	r1, #778	; 0x30a
 800fcf8:	f000 fa70 	bl	80101dc <__assert_func>
 800fcfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fd00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd04:	bb35      	cbnz	r5, 800fd54 <__d2b+0x7c>
 800fd06:	2e00      	cmp	r6, #0
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	d028      	beq.n	800fd5e <__d2b+0x86>
 800fd0c:	4668      	mov	r0, sp
 800fd0e:	9600      	str	r6, [sp, #0]
 800fd10:	f7ff fd8c 	bl	800f82c <__lo0bits>
 800fd14:	9900      	ldr	r1, [sp, #0]
 800fd16:	b300      	cbz	r0, 800fd5a <__d2b+0x82>
 800fd18:	9a01      	ldr	r2, [sp, #4]
 800fd1a:	f1c0 0320 	rsb	r3, r0, #32
 800fd1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fd22:	430b      	orrs	r3, r1
 800fd24:	40c2      	lsrs	r2, r0
 800fd26:	6163      	str	r3, [r4, #20]
 800fd28:	9201      	str	r2, [sp, #4]
 800fd2a:	9b01      	ldr	r3, [sp, #4]
 800fd2c:	61a3      	str	r3, [r4, #24]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	bf14      	ite	ne
 800fd32:	2202      	movne	r2, #2
 800fd34:	2201      	moveq	r2, #1
 800fd36:	6122      	str	r2, [r4, #16]
 800fd38:	b1d5      	cbz	r5, 800fd70 <__d2b+0x98>
 800fd3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd3e:	4405      	add	r5, r0
 800fd40:	f8c9 5000 	str.w	r5, [r9]
 800fd44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd48:	f8c8 0000 	str.w	r0, [r8]
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	b003      	add	sp, #12
 800fd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd58:	e7d5      	b.n	800fd06 <__d2b+0x2e>
 800fd5a:	6161      	str	r1, [r4, #20]
 800fd5c:	e7e5      	b.n	800fd2a <__d2b+0x52>
 800fd5e:	a801      	add	r0, sp, #4
 800fd60:	f7ff fd64 	bl	800f82c <__lo0bits>
 800fd64:	9b01      	ldr	r3, [sp, #4]
 800fd66:	6163      	str	r3, [r4, #20]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	6122      	str	r2, [r4, #16]
 800fd6c:	3020      	adds	r0, #32
 800fd6e:	e7e3      	b.n	800fd38 <__d2b+0x60>
 800fd70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd78:	f8c9 0000 	str.w	r0, [r9]
 800fd7c:	6918      	ldr	r0, [r3, #16]
 800fd7e:	f7ff fd35 	bl	800f7ec <__hi0bits>
 800fd82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd86:	e7df      	b.n	800fd48 <__d2b+0x70>
 800fd88:	0801b1cb 	.word	0x0801b1cb
 800fd8c:	0801b1dc 	.word	0x0801b1dc

0800fd90 <_calloc_r>:
 800fd90:	b513      	push	{r0, r1, r4, lr}
 800fd92:	434a      	muls	r2, r1
 800fd94:	4611      	mov	r1, r2
 800fd96:	9201      	str	r2, [sp, #4]
 800fd98:	f000 f85a 	bl	800fe50 <_malloc_r>
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	b118      	cbz	r0, 800fda8 <_calloc_r+0x18>
 800fda0:	9a01      	ldr	r2, [sp, #4]
 800fda2:	2100      	movs	r1, #0
 800fda4:	f7fe f9d0 	bl	800e148 <memset>
 800fda8:	4620      	mov	r0, r4
 800fdaa:	b002      	add	sp, #8
 800fdac:	bd10      	pop	{r4, pc}
	...

0800fdb0 <_free_r>:
 800fdb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdb2:	2900      	cmp	r1, #0
 800fdb4:	d048      	beq.n	800fe48 <_free_r+0x98>
 800fdb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdba:	9001      	str	r0, [sp, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f1a1 0404 	sub.w	r4, r1, #4
 800fdc2:	bfb8      	it	lt
 800fdc4:	18e4      	addlt	r4, r4, r3
 800fdc6:	f000 fa65 	bl	8010294 <__malloc_lock>
 800fdca:	4a20      	ldr	r2, [pc, #128]	; (800fe4c <_free_r+0x9c>)
 800fdcc:	9801      	ldr	r0, [sp, #4]
 800fdce:	6813      	ldr	r3, [r2, #0]
 800fdd0:	4615      	mov	r5, r2
 800fdd2:	b933      	cbnz	r3, 800fde2 <_free_r+0x32>
 800fdd4:	6063      	str	r3, [r4, #4]
 800fdd6:	6014      	str	r4, [r2, #0]
 800fdd8:	b003      	add	sp, #12
 800fdda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fdde:	f000 ba5f 	b.w	80102a0 <__malloc_unlock>
 800fde2:	42a3      	cmp	r3, r4
 800fde4:	d90b      	bls.n	800fdfe <_free_r+0x4e>
 800fde6:	6821      	ldr	r1, [r4, #0]
 800fde8:	1862      	adds	r2, r4, r1
 800fdea:	4293      	cmp	r3, r2
 800fdec:	bf04      	itt	eq
 800fdee:	681a      	ldreq	r2, [r3, #0]
 800fdf0:	685b      	ldreq	r3, [r3, #4]
 800fdf2:	6063      	str	r3, [r4, #4]
 800fdf4:	bf04      	itt	eq
 800fdf6:	1852      	addeq	r2, r2, r1
 800fdf8:	6022      	streq	r2, [r4, #0]
 800fdfa:	602c      	str	r4, [r5, #0]
 800fdfc:	e7ec      	b.n	800fdd8 <_free_r+0x28>
 800fdfe:	461a      	mov	r2, r3
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	b10b      	cbz	r3, 800fe08 <_free_r+0x58>
 800fe04:	42a3      	cmp	r3, r4
 800fe06:	d9fa      	bls.n	800fdfe <_free_r+0x4e>
 800fe08:	6811      	ldr	r1, [r2, #0]
 800fe0a:	1855      	adds	r5, r2, r1
 800fe0c:	42a5      	cmp	r5, r4
 800fe0e:	d10b      	bne.n	800fe28 <_free_r+0x78>
 800fe10:	6824      	ldr	r4, [r4, #0]
 800fe12:	4421      	add	r1, r4
 800fe14:	1854      	adds	r4, r2, r1
 800fe16:	42a3      	cmp	r3, r4
 800fe18:	6011      	str	r1, [r2, #0]
 800fe1a:	d1dd      	bne.n	800fdd8 <_free_r+0x28>
 800fe1c:	681c      	ldr	r4, [r3, #0]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	6053      	str	r3, [r2, #4]
 800fe22:	4421      	add	r1, r4
 800fe24:	6011      	str	r1, [r2, #0]
 800fe26:	e7d7      	b.n	800fdd8 <_free_r+0x28>
 800fe28:	d902      	bls.n	800fe30 <_free_r+0x80>
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	6003      	str	r3, [r0, #0]
 800fe2e:	e7d3      	b.n	800fdd8 <_free_r+0x28>
 800fe30:	6825      	ldr	r5, [r4, #0]
 800fe32:	1961      	adds	r1, r4, r5
 800fe34:	428b      	cmp	r3, r1
 800fe36:	bf04      	itt	eq
 800fe38:	6819      	ldreq	r1, [r3, #0]
 800fe3a:	685b      	ldreq	r3, [r3, #4]
 800fe3c:	6063      	str	r3, [r4, #4]
 800fe3e:	bf04      	itt	eq
 800fe40:	1949      	addeq	r1, r1, r5
 800fe42:	6021      	streq	r1, [r4, #0]
 800fe44:	6054      	str	r4, [r2, #4]
 800fe46:	e7c7      	b.n	800fdd8 <_free_r+0x28>
 800fe48:	b003      	add	sp, #12
 800fe4a:	bd30      	pop	{r4, r5, pc}
 800fe4c:	24000940 	.word	0x24000940

0800fe50 <_malloc_r>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	1ccd      	adds	r5, r1, #3
 800fe54:	f025 0503 	bic.w	r5, r5, #3
 800fe58:	3508      	adds	r5, #8
 800fe5a:	2d0c      	cmp	r5, #12
 800fe5c:	bf38      	it	cc
 800fe5e:	250c      	movcc	r5, #12
 800fe60:	2d00      	cmp	r5, #0
 800fe62:	4606      	mov	r6, r0
 800fe64:	db01      	blt.n	800fe6a <_malloc_r+0x1a>
 800fe66:	42a9      	cmp	r1, r5
 800fe68:	d903      	bls.n	800fe72 <_malloc_r+0x22>
 800fe6a:	230c      	movs	r3, #12
 800fe6c:	6033      	str	r3, [r6, #0]
 800fe6e:	2000      	movs	r0, #0
 800fe70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe72:	f000 fa0f 	bl	8010294 <__malloc_lock>
 800fe76:	4921      	ldr	r1, [pc, #132]	; (800fefc <_malloc_r+0xac>)
 800fe78:	680a      	ldr	r2, [r1, #0]
 800fe7a:	4614      	mov	r4, r2
 800fe7c:	b99c      	cbnz	r4, 800fea6 <_malloc_r+0x56>
 800fe7e:	4f20      	ldr	r7, [pc, #128]	; (800ff00 <_malloc_r+0xb0>)
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	b923      	cbnz	r3, 800fe8e <_malloc_r+0x3e>
 800fe84:	4621      	mov	r1, r4
 800fe86:	4630      	mov	r0, r6
 800fe88:	f000 f998 	bl	80101bc <_sbrk_r>
 800fe8c:	6038      	str	r0, [r7, #0]
 800fe8e:	4629      	mov	r1, r5
 800fe90:	4630      	mov	r0, r6
 800fe92:	f000 f993 	bl	80101bc <_sbrk_r>
 800fe96:	1c43      	adds	r3, r0, #1
 800fe98:	d123      	bne.n	800fee2 <_malloc_r+0x92>
 800fe9a:	230c      	movs	r3, #12
 800fe9c:	6033      	str	r3, [r6, #0]
 800fe9e:	4630      	mov	r0, r6
 800fea0:	f000 f9fe 	bl	80102a0 <__malloc_unlock>
 800fea4:	e7e3      	b.n	800fe6e <_malloc_r+0x1e>
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	1b5b      	subs	r3, r3, r5
 800feaa:	d417      	bmi.n	800fedc <_malloc_r+0x8c>
 800feac:	2b0b      	cmp	r3, #11
 800feae:	d903      	bls.n	800feb8 <_malloc_r+0x68>
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	441c      	add	r4, r3
 800feb4:	6025      	str	r5, [r4, #0]
 800feb6:	e004      	b.n	800fec2 <_malloc_r+0x72>
 800feb8:	6863      	ldr	r3, [r4, #4]
 800feba:	42a2      	cmp	r2, r4
 800febc:	bf0c      	ite	eq
 800febe:	600b      	streq	r3, [r1, #0]
 800fec0:	6053      	strne	r3, [r2, #4]
 800fec2:	4630      	mov	r0, r6
 800fec4:	f000 f9ec 	bl	80102a0 <__malloc_unlock>
 800fec8:	f104 000b 	add.w	r0, r4, #11
 800fecc:	1d23      	adds	r3, r4, #4
 800fece:	f020 0007 	bic.w	r0, r0, #7
 800fed2:	1ac2      	subs	r2, r0, r3
 800fed4:	d0cc      	beq.n	800fe70 <_malloc_r+0x20>
 800fed6:	1a1b      	subs	r3, r3, r0
 800fed8:	50a3      	str	r3, [r4, r2]
 800feda:	e7c9      	b.n	800fe70 <_malloc_r+0x20>
 800fedc:	4622      	mov	r2, r4
 800fede:	6864      	ldr	r4, [r4, #4]
 800fee0:	e7cc      	b.n	800fe7c <_malloc_r+0x2c>
 800fee2:	1cc4      	adds	r4, r0, #3
 800fee4:	f024 0403 	bic.w	r4, r4, #3
 800fee8:	42a0      	cmp	r0, r4
 800feea:	d0e3      	beq.n	800feb4 <_malloc_r+0x64>
 800feec:	1a21      	subs	r1, r4, r0
 800feee:	4630      	mov	r0, r6
 800fef0:	f000 f964 	bl	80101bc <_sbrk_r>
 800fef4:	3001      	adds	r0, #1
 800fef6:	d1dd      	bne.n	800feb4 <_malloc_r+0x64>
 800fef8:	e7cf      	b.n	800fe9a <_malloc_r+0x4a>
 800fefa:	bf00      	nop
 800fefc:	24000940 	.word	0x24000940
 800ff00:	24000944 	.word	0x24000944

0800ff04 <__ssputs_r>:
 800ff04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	688e      	ldr	r6, [r1, #8]
 800ff0a:	429e      	cmp	r6, r3
 800ff0c:	4682      	mov	sl, r0
 800ff0e:	460c      	mov	r4, r1
 800ff10:	4690      	mov	r8, r2
 800ff12:	461f      	mov	r7, r3
 800ff14:	d838      	bhi.n	800ff88 <__ssputs_r+0x84>
 800ff16:	898a      	ldrh	r2, [r1, #12]
 800ff18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff1c:	d032      	beq.n	800ff84 <__ssputs_r+0x80>
 800ff1e:	6825      	ldr	r5, [r4, #0]
 800ff20:	6909      	ldr	r1, [r1, #16]
 800ff22:	eba5 0901 	sub.w	r9, r5, r1
 800ff26:	6965      	ldr	r5, [r4, #20]
 800ff28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff30:	3301      	adds	r3, #1
 800ff32:	444b      	add	r3, r9
 800ff34:	106d      	asrs	r5, r5, #1
 800ff36:	429d      	cmp	r5, r3
 800ff38:	bf38      	it	cc
 800ff3a:	461d      	movcc	r5, r3
 800ff3c:	0553      	lsls	r3, r2, #21
 800ff3e:	d531      	bpl.n	800ffa4 <__ssputs_r+0xa0>
 800ff40:	4629      	mov	r1, r5
 800ff42:	f7ff ff85 	bl	800fe50 <_malloc_r>
 800ff46:	4606      	mov	r6, r0
 800ff48:	b950      	cbnz	r0, 800ff60 <__ssputs_r+0x5c>
 800ff4a:	230c      	movs	r3, #12
 800ff4c:	f8ca 3000 	str.w	r3, [sl]
 800ff50:	89a3      	ldrh	r3, [r4, #12]
 800ff52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff56:	81a3      	strh	r3, [r4, #12]
 800ff58:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff60:	6921      	ldr	r1, [r4, #16]
 800ff62:	464a      	mov	r2, r9
 800ff64:	f7fe f8e2 	bl	800e12c <memcpy>
 800ff68:	89a3      	ldrh	r3, [r4, #12]
 800ff6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	6126      	str	r6, [r4, #16]
 800ff76:	6165      	str	r5, [r4, #20]
 800ff78:	444e      	add	r6, r9
 800ff7a:	eba5 0509 	sub.w	r5, r5, r9
 800ff7e:	6026      	str	r6, [r4, #0]
 800ff80:	60a5      	str	r5, [r4, #8]
 800ff82:	463e      	mov	r6, r7
 800ff84:	42be      	cmp	r6, r7
 800ff86:	d900      	bls.n	800ff8a <__ssputs_r+0x86>
 800ff88:	463e      	mov	r6, r7
 800ff8a:	4632      	mov	r2, r6
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	4641      	mov	r1, r8
 800ff90:	f000 f966 	bl	8010260 <memmove>
 800ff94:	68a3      	ldr	r3, [r4, #8]
 800ff96:	6822      	ldr	r2, [r4, #0]
 800ff98:	1b9b      	subs	r3, r3, r6
 800ff9a:	4432      	add	r2, r6
 800ff9c:	60a3      	str	r3, [r4, #8]
 800ff9e:	6022      	str	r2, [r4, #0]
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e7db      	b.n	800ff5c <__ssputs_r+0x58>
 800ffa4:	462a      	mov	r2, r5
 800ffa6:	f000 f981 	bl	80102ac <_realloc_r>
 800ffaa:	4606      	mov	r6, r0
 800ffac:	2800      	cmp	r0, #0
 800ffae:	d1e1      	bne.n	800ff74 <__ssputs_r+0x70>
 800ffb0:	6921      	ldr	r1, [r4, #16]
 800ffb2:	4650      	mov	r0, sl
 800ffb4:	f7ff fefc 	bl	800fdb0 <_free_r>
 800ffb8:	e7c7      	b.n	800ff4a <__ssputs_r+0x46>
	...

0800ffbc <_svfiprintf_r>:
 800ffbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc0:	4698      	mov	r8, r3
 800ffc2:	898b      	ldrh	r3, [r1, #12]
 800ffc4:	061b      	lsls	r3, r3, #24
 800ffc6:	b09d      	sub	sp, #116	; 0x74
 800ffc8:	4607      	mov	r7, r0
 800ffca:	460d      	mov	r5, r1
 800ffcc:	4614      	mov	r4, r2
 800ffce:	d50e      	bpl.n	800ffee <_svfiprintf_r+0x32>
 800ffd0:	690b      	ldr	r3, [r1, #16]
 800ffd2:	b963      	cbnz	r3, 800ffee <_svfiprintf_r+0x32>
 800ffd4:	2140      	movs	r1, #64	; 0x40
 800ffd6:	f7ff ff3b 	bl	800fe50 <_malloc_r>
 800ffda:	6028      	str	r0, [r5, #0]
 800ffdc:	6128      	str	r0, [r5, #16]
 800ffde:	b920      	cbnz	r0, 800ffea <_svfiprintf_r+0x2e>
 800ffe0:	230c      	movs	r3, #12
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe8:	e0d1      	b.n	801018e <_svfiprintf_r+0x1d2>
 800ffea:	2340      	movs	r3, #64	; 0x40
 800ffec:	616b      	str	r3, [r5, #20]
 800ffee:	2300      	movs	r3, #0
 800fff0:	9309      	str	r3, [sp, #36]	; 0x24
 800fff2:	2320      	movs	r3, #32
 800fff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fff8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fffc:	2330      	movs	r3, #48	; 0x30
 800fffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80101a8 <_svfiprintf_r+0x1ec>
 8010002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010006:	f04f 0901 	mov.w	r9, #1
 801000a:	4623      	mov	r3, r4
 801000c:	469a      	mov	sl, r3
 801000e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010012:	b10a      	cbz	r2, 8010018 <_svfiprintf_r+0x5c>
 8010014:	2a25      	cmp	r2, #37	; 0x25
 8010016:	d1f9      	bne.n	801000c <_svfiprintf_r+0x50>
 8010018:	ebba 0b04 	subs.w	fp, sl, r4
 801001c:	d00b      	beq.n	8010036 <_svfiprintf_r+0x7a>
 801001e:	465b      	mov	r3, fp
 8010020:	4622      	mov	r2, r4
 8010022:	4629      	mov	r1, r5
 8010024:	4638      	mov	r0, r7
 8010026:	f7ff ff6d 	bl	800ff04 <__ssputs_r>
 801002a:	3001      	adds	r0, #1
 801002c:	f000 80aa 	beq.w	8010184 <_svfiprintf_r+0x1c8>
 8010030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010032:	445a      	add	r2, fp
 8010034:	9209      	str	r2, [sp, #36]	; 0x24
 8010036:	f89a 3000 	ldrb.w	r3, [sl]
 801003a:	2b00      	cmp	r3, #0
 801003c:	f000 80a2 	beq.w	8010184 <_svfiprintf_r+0x1c8>
 8010040:	2300      	movs	r3, #0
 8010042:	f04f 32ff 	mov.w	r2, #4294967295
 8010046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801004a:	f10a 0a01 	add.w	sl, sl, #1
 801004e:	9304      	str	r3, [sp, #16]
 8010050:	9307      	str	r3, [sp, #28]
 8010052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010056:	931a      	str	r3, [sp, #104]	; 0x68
 8010058:	4654      	mov	r4, sl
 801005a:	2205      	movs	r2, #5
 801005c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010060:	4851      	ldr	r0, [pc, #324]	; (80101a8 <_svfiprintf_r+0x1ec>)
 8010062:	f7f0 f945 	bl	80002f0 <memchr>
 8010066:	9a04      	ldr	r2, [sp, #16]
 8010068:	b9d8      	cbnz	r0, 80100a2 <_svfiprintf_r+0xe6>
 801006a:	06d0      	lsls	r0, r2, #27
 801006c:	bf44      	itt	mi
 801006e:	2320      	movmi	r3, #32
 8010070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010074:	0711      	lsls	r1, r2, #28
 8010076:	bf44      	itt	mi
 8010078:	232b      	movmi	r3, #43	; 0x2b
 801007a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801007e:	f89a 3000 	ldrb.w	r3, [sl]
 8010082:	2b2a      	cmp	r3, #42	; 0x2a
 8010084:	d015      	beq.n	80100b2 <_svfiprintf_r+0xf6>
 8010086:	9a07      	ldr	r2, [sp, #28]
 8010088:	4654      	mov	r4, sl
 801008a:	2000      	movs	r0, #0
 801008c:	f04f 0c0a 	mov.w	ip, #10
 8010090:	4621      	mov	r1, r4
 8010092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010096:	3b30      	subs	r3, #48	; 0x30
 8010098:	2b09      	cmp	r3, #9
 801009a:	d94e      	bls.n	801013a <_svfiprintf_r+0x17e>
 801009c:	b1b0      	cbz	r0, 80100cc <_svfiprintf_r+0x110>
 801009e:	9207      	str	r2, [sp, #28]
 80100a0:	e014      	b.n	80100cc <_svfiprintf_r+0x110>
 80100a2:	eba0 0308 	sub.w	r3, r0, r8
 80100a6:	fa09 f303 	lsl.w	r3, r9, r3
 80100aa:	4313      	orrs	r3, r2
 80100ac:	9304      	str	r3, [sp, #16]
 80100ae:	46a2      	mov	sl, r4
 80100b0:	e7d2      	b.n	8010058 <_svfiprintf_r+0x9c>
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	1d19      	adds	r1, r3, #4
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	9103      	str	r1, [sp, #12]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	bfbb      	ittet	lt
 80100be:	425b      	neglt	r3, r3
 80100c0:	f042 0202 	orrlt.w	r2, r2, #2
 80100c4:	9307      	strge	r3, [sp, #28]
 80100c6:	9307      	strlt	r3, [sp, #28]
 80100c8:	bfb8      	it	lt
 80100ca:	9204      	strlt	r2, [sp, #16]
 80100cc:	7823      	ldrb	r3, [r4, #0]
 80100ce:	2b2e      	cmp	r3, #46	; 0x2e
 80100d0:	d10c      	bne.n	80100ec <_svfiprintf_r+0x130>
 80100d2:	7863      	ldrb	r3, [r4, #1]
 80100d4:	2b2a      	cmp	r3, #42	; 0x2a
 80100d6:	d135      	bne.n	8010144 <_svfiprintf_r+0x188>
 80100d8:	9b03      	ldr	r3, [sp, #12]
 80100da:	1d1a      	adds	r2, r3, #4
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	9203      	str	r2, [sp, #12]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	bfb8      	it	lt
 80100e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80100e8:	3402      	adds	r4, #2
 80100ea:	9305      	str	r3, [sp, #20]
 80100ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80101b8 <_svfiprintf_r+0x1fc>
 80100f0:	7821      	ldrb	r1, [r4, #0]
 80100f2:	2203      	movs	r2, #3
 80100f4:	4650      	mov	r0, sl
 80100f6:	f7f0 f8fb 	bl	80002f0 <memchr>
 80100fa:	b140      	cbz	r0, 801010e <_svfiprintf_r+0x152>
 80100fc:	2340      	movs	r3, #64	; 0x40
 80100fe:	eba0 000a 	sub.w	r0, r0, sl
 8010102:	fa03 f000 	lsl.w	r0, r3, r0
 8010106:	9b04      	ldr	r3, [sp, #16]
 8010108:	4303      	orrs	r3, r0
 801010a:	3401      	adds	r4, #1
 801010c:	9304      	str	r3, [sp, #16]
 801010e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010112:	4826      	ldr	r0, [pc, #152]	; (80101ac <_svfiprintf_r+0x1f0>)
 8010114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010118:	2206      	movs	r2, #6
 801011a:	f7f0 f8e9 	bl	80002f0 <memchr>
 801011e:	2800      	cmp	r0, #0
 8010120:	d038      	beq.n	8010194 <_svfiprintf_r+0x1d8>
 8010122:	4b23      	ldr	r3, [pc, #140]	; (80101b0 <_svfiprintf_r+0x1f4>)
 8010124:	bb1b      	cbnz	r3, 801016e <_svfiprintf_r+0x1b2>
 8010126:	9b03      	ldr	r3, [sp, #12]
 8010128:	3307      	adds	r3, #7
 801012a:	f023 0307 	bic.w	r3, r3, #7
 801012e:	3308      	adds	r3, #8
 8010130:	9303      	str	r3, [sp, #12]
 8010132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010134:	4433      	add	r3, r6
 8010136:	9309      	str	r3, [sp, #36]	; 0x24
 8010138:	e767      	b.n	801000a <_svfiprintf_r+0x4e>
 801013a:	fb0c 3202 	mla	r2, ip, r2, r3
 801013e:	460c      	mov	r4, r1
 8010140:	2001      	movs	r0, #1
 8010142:	e7a5      	b.n	8010090 <_svfiprintf_r+0xd4>
 8010144:	2300      	movs	r3, #0
 8010146:	3401      	adds	r4, #1
 8010148:	9305      	str	r3, [sp, #20]
 801014a:	4619      	mov	r1, r3
 801014c:	f04f 0c0a 	mov.w	ip, #10
 8010150:	4620      	mov	r0, r4
 8010152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010156:	3a30      	subs	r2, #48	; 0x30
 8010158:	2a09      	cmp	r2, #9
 801015a:	d903      	bls.n	8010164 <_svfiprintf_r+0x1a8>
 801015c:	2b00      	cmp	r3, #0
 801015e:	d0c5      	beq.n	80100ec <_svfiprintf_r+0x130>
 8010160:	9105      	str	r1, [sp, #20]
 8010162:	e7c3      	b.n	80100ec <_svfiprintf_r+0x130>
 8010164:	fb0c 2101 	mla	r1, ip, r1, r2
 8010168:	4604      	mov	r4, r0
 801016a:	2301      	movs	r3, #1
 801016c:	e7f0      	b.n	8010150 <_svfiprintf_r+0x194>
 801016e:	ab03      	add	r3, sp, #12
 8010170:	9300      	str	r3, [sp, #0]
 8010172:	462a      	mov	r2, r5
 8010174:	4b0f      	ldr	r3, [pc, #60]	; (80101b4 <_svfiprintf_r+0x1f8>)
 8010176:	a904      	add	r1, sp, #16
 8010178:	4638      	mov	r0, r7
 801017a:	f7fe f87d 	bl	800e278 <_printf_float>
 801017e:	1c42      	adds	r2, r0, #1
 8010180:	4606      	mov	r6, r0
 8010182:	d1d6      	bne.n	8010132 <_svfiprintf_r+0x176>
 8010184:	89ab      	ldrh	r3, [r5, #12]
 8010186:	065b      	lsls	r3, r3, #25
 8010188:	f53f af2c 	bmi.w	800ffe4 <_svfiprintf_r+0x28>
 801018c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801018e:	b01d      	add	sp, #116	; 0x74
 8010190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010194:	ab03      	add	r3, sp, #12
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	462a      	mov	r2, r5
 801019a:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <_svfiprintf_r+0x1f8>)
 801019c:	a904      	add	r1, sp, #16
 801019e:	4638      	mov	r0, r7
 80101a0:	f7fe faf6 	bl	800e790 <_printf_i>
 80101a4:	e7eb      	b.n	801017e <_svfiprintf_r+0x1c2>
 80101a6:	bf00      	nop
 80101a8:	0801b33c 	.word	0x0801b33c
 80101ac:	0801b346 	.word	0x0801b346
 80101b0:	0800e279 	.word	0x0800e279
 80101b4:	0800ff05 	.word	0x0800ff05
 80101b8:	0801b342 	.word	0x0801b342

080101bc <_sbrk_r>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	4d06      	ldr	r5, [pc, #24]	; (80101d8 <_sbrk_r+0x1c>)
 80101c0:	2300      	movs	r3, #0
 80101c2:	4604      	mov	r4, r0
 80101c4:	4608      	mov	r0, r1
 80101c6:	602b      	str	r3, [r5, #0]
 80101c8:	f7f3 fec6 	bl	8003f58 <_sbrk>
 80101cc:	1c43      	adds	r3, r0, #1
 80101ce:	d102      	bne.n	80101d6 <_sbrk_r+0x1a>
 80101d0:	682b      	ldr	r3, [r5, #0]
 80101d2:	b103      	cbz	r3, 80101d6 <_sbrk_r+0x1a>
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	bd38      	pop	{r3, r4, r5, pc}
 80101d8:	24010b20 	.word	0x24010b20

080101dc <__assert_func>:
 80101dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101de:	4614      	mov	r4, r2
 80101e0:	461a      	mov	r2, r3
 80101e2:	4b09      	ldr	r3, [pc, #36]	; (8010208 <__assert_func+0x2c>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4605      	mov	r5, r0
 80101e8:	68d8      	ldr	r0, [r3, #12]
 80101ea:	b14c      	cbz	r4, 8010200 <__assert_func+0x24>
 80101ec:	4b07      	ldr	r3, [pc, #28]	; (801020c <__assert_func+0x30>)
 80101ee:	9100      	str	r1, [sp, #0]
 80101f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101f4:	4906      	ldr	r1, [pc, #24]	; (8010210 <__assert_func+0x34>)
 80101f6:	462b      	mov	r3, r5
 80101f8:	f000 f80e 	bl	8010218 <fiprintf>
 80101fc:	f000 faa4 	bl	8010748 <abort>
 8010200:	4b04      	ldr	r3, [pc, #16]	; (8010214 <__assert_func+0x38>)
 8010202:	461c      	mov	r4, r3
 8010204:	e7f3      	b.n	80101ee <__assert_func+0x12>
 8010206:	bf00      	nop
 8010208:	2400040c 	.word	0x2400040c
 801020c:	0801b34d 	.word	0x0801b34d
 8010210:	0801b35a 	.word	0x0801b35a
 8010214:	0801b388 	.word	0x0801b388

08010218 <fiprintf>:
 8010218:	b40e      	push	{r1, r2, r3}
 801021a:	b503      	push	{r0, r1, lr}
 801021c:	4601      	mov	r1, r0
 801021e:	ab03      	add	r3, sp, #12
 8010220:	4805      	ldr	r0, [pc, #20]	; (8010238 <fiprintf+0x20>)
 8010222:	f853 2b04 	ldr.w	r2, [r3], #4
 8010226:	6800      	ldr	r0, [r0, #0]
 8010228:	9301      	str	r3, [sp, #4]
 801022a:	f000 f88f 	bl	801034c <_vfiprintf_r>
 801022e:	b002      	add	sp, #8
 8010230:	f85d eb04 	ldr.w	lr, [sp], #4
 8010234:	b003      	add	sp, #12
 8010236:	4770      	bx	lr
 8010238:	2400040c 	.word	0x2400040c

0801023c <__ascii_mbtowc>:
 801023c:	b082      	sub	sp, #8
 801023e:	b901      	cbnz	r1, 8010242 <__ascii_mbtowc+0x6>
 8010240:	a901      	add	r1, sp, #4
 8010242:	b142      	cbz	r2, 8010256 <__ascii_mbtowc+0x1a>
 8010244:	b14b      	cbz	r3, 801025a <__ascii_mbtowc+0x1e>
 8010246:	7813      	ldrb	r3, [r2, #0]
 8010248:	600b      	str	r3, [r1, #0]
 801024a:	7812      	ldrb	r2, [r2, #0]
 801024c:	1e10      	subs	r0, r2, #0
 801024e:	bf18      	it	ne
 8010250:	2001      	movne	r0, #1
 8010252:	b002      	add	sp, #8
 8010254:	4770      	bx	lr
 8010256:	4610      	mov	r0, r2
 8010258:	e7fb      	b.n	8010252 <__ascii_mbtowc+0x16>
 801025a:	f06f 0001 	mvn.w	r0, #1
 801025e:	e7f8      	b.n	8010252 <__ascii_mbtowc+0x16>

08010260 <memmove>:
 8010260:	4288      	cmp	r0, r1
 8010262:	b510      	push	{r4, lr}
 8010264:	eb01 0402 	add.w	r4, r1, r2
 8010268:	d902      	bls.n	8010270 <memmove+0x10>
 801026a:	4284      	cmp	r4, r0
 801026c:	4623      	mov	r3, r4
 801026e:	d807      	bhi.n	8010280 <memmove+0x20>
 8010270:	1e43      	subs	r3, r0, #1
 8010272:	42a1      	cmp	r1, r4
 8010274:	d008      	beq.n	8010288 <memmove+0x28>
 8010276:	f811 2b01 	ldrb.w	r2, [r1], #1
 801027a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801027e:	e7f8      	b.n	8010272 <memmove+0x12>
 8010280:	4402      	add	r2, r0
 8010282:	4601      	mov	r1, r0
 8010284:	428a      	cmp	r2, r1
 8010286:	d100      	bne.n	801028a <memmove+0x2a>
 8010288:	bd10      	pop	{r4, pc}
 801028a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801028e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010292:	e7f7      	b.n	8010284 <memmove+0x24>

08010294 <__malloc_lock>:
 8010294:	4801      	ldr	r0, [pc, #4]	; (801029c <__malloc_lock+0x8>)
 8010296:	f000 bc17 	b.w	8010ac8 <__retarget_lock_acquire_recursive>
 801029a:	bf00      	nop
 801029c:	24010b28 	.word	0x24010b28

080102a0 <__malloc_unlock>:
 80102a0:	4801      	ldr	r0, [pc, #4]	; (80102a8 <__malloc_unlock+0x8>)
 80102a2:	f000 bc12 	b.w	8010aca <__retarget_lock_release_recursive>
 80102a6:	bf00      	nop
 80102a8:	24010b28 	.word	0x24010b28

080102ac <_realloc_r>:
 80102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ae:	4607      	mov	r7, r0
 80102b0:	4614      	mov	r4, r2
 80102b2:	460e      	mov	r6, r1
 80102b4:	b921      	cbnz	r1, 80102c0 <_realloc_r+0x14>
 80102b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80102ba:	4611      	mov	r1, r2
 80102bc:	f7ff bdc8 	b.w	800fe50 <_malloc_r>
 80102c0:	b922      	cbnz	r2, 80102cc <_realloc_r+0x20>
 80102c2:	f7ff fd75 	bl	800fdb0 <_free_r>
 80102c6:	4625      	mov	r5, r4
 80102c8:	4628      	mov	r0, r5
 80102ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102cc:	f000 fc62 	bl	8010b94 <_malloc_usable_size_r>
 80102d0:	42a0      	cmp	r0, r4
 80102d2:	d20f      	bcs.n	80102f4 <_realloc_r+0x48>
 80102d4:	4621      	mov	r1, r4
 80102d6:	4638      	mov	r0, r7
 80102d8:	f7ff fdba 	bl	800fe50 <_malloc_r>
 80102dc:	4605      	mov	r5, r0
 80102de:	2800      	cmp	r0, #0
 80102e0:	d0f2      	beq.n	80102c8 <_realloc_r+0x1c>
 80102e2:	4631      	mov	r1, r6
 80102e4:	4622      	mov	r2, r4
 80102e6:	f7fd ff21 	bl	800e12c <memcpy>
 80102ea:	4631      	mov	r1, r6
 80102ec:	4638      	mov	r0, r7
 80102ee:	f7ff fd5f 	bl	800fdb0 <_free_r>
 80102f2:	e7e9      	b.n	80102c8 <_realloc_r+0x1c>
 80102f4:	4635      	mov	r5, r6
 80102f6:	e7e7      	b.n	80102c8 <_realloc_r+0x1c>

080102f8 <__sfputc_r>:
 80102f8:	6893      	ldr	r3, [r2, #8]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	b410      	push	{r4}
 8010300:	6093      	str	r3, [r2, #8]
 8010302:	da08      	bge.n	8010316 <__sfputc_r+0x1e>
 8010304:	6994      	ldr	r4, [r2, #24]
 8010306:	42a3      	cmp	r3, r4
 8010308:	db01      	blt.n	801030e <__sfputc_r+0x16>
 801030a:	290a      	cmp	r1, #10
 801030c:	d103      	bne.n	8010316 <__sfputc_r+0x1e>
 801030e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010312:	f000 b94b 	b.w	80105ac <__swbuf_r>
 8010316:	6813      	ldr	r3, [r2, #0]
 8010318:	1c58      	adds	r0, r3, #1
 801031a:	6010      	str	r0, [r2, #0]
 801031c:	7019      	strb	r1, [r3, #0]
 801031e:	4608      	mov	r0, r1
 8010320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010324:	4770      	bx	lr

08010326 <__sfputs_r>:
 8010326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010328:	4606      	mov	r6, r0
 801032a:	460f      	mov	r7, r1
 801032c:	4614      	mov	r4, r2
 801032e:	18d5      	adds	r5, r2, r3
 8010330:	42ac      	cmp	r4, r5
 8010332:	d101      	bne.n	8010338 <__sfputs_r+0x12>
 8010334:	2000      	movs	r0, #0
 8010336:	e007      	b.n	8010348 <__sfputs_r+0x22>
 8010338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033c:	463a      	mov	r2, r7
 801033e:	4630      	mov	r0, r6
 8010340:	f7ff ffda 	bl	80102f8 <__sfputc_r>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	d1f3      	bne.n	8010330 <__sfputs_r+0xa>
 8010348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801034c <_vfiprintf_r>:
 801034c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	460d      	mov	r5, r1
 8010352:	b09d      	sub	sp, #116	; 0x74
 8010354:	4614      	mov	r4, r2
 8010356:	4698      	mov	r8, r3
 8010358:	4606      	mov	r6, r0
 801035a:	b118      	cbz	r0, 8010364 <_vfiprintf_r+0x18>
 801035c:	6983      	ldr	r3, [r0, #24]
 801035e:	b90b      	cbnz	r3, 8010364 <_vfiprintf_r+0x18>
 8010360:	f000 fb14 	bl	801098c <__sinit>
 8010364:	4b89      	ldr	r3, [pc, #548]	; (801058c <_vfiprintf_r+0x240>)
 8010366:	429d      	cmp	r5, r3
 8010368:	d11b      	bne.n	80103a2 <_vfiprintf_r+0x56>
 801036a:	6875      	ldr	r5, [r6, #4]
 801036c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801036e:	07d9      	lsls	r1, r3, #31
 8010370:	d405      	bmi.n	801037e <_vfiprintf_r+0x32>
 8010372:	89ab      	ldrh	r3, [r5, #12]
 8010374:	059a      	lsls	r2, r3, #22
 8010376:	d402      	bmi.n	801037e <_vfiprintf_r+0x32>
 8010378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801037a:	f000 fba5 	bl	8010ac8 <__retarget_lock_acquire_recursive>
 801037e:	89ab      	ldrh	r3, [r5, #12]
 8010380:	071b      	lsls	r3, r3, #28
 8010382:	d501      	bpl.n	8010388 <_vfiprintf_r+0x3c>
 8010384:	692b      	ldr	r3, [r5, #16]
 8010386:	b9eb      	cbnz	r3, 80103c4 <_vfiprintf_r+0x78>
 8010388:	4629      	mov	r1, r5
 801038a:	4630      	mov	r0, r6
 801038c:	f000 f96e 	bl	801066c <__swsetup_r>
 8010390:	b1c0      	cbz	r0, 80103c4 <_vfiprintf_r+0x78>
 8010392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010394:	07dc      	lsls	r4, r3, #31
 8010396:	d50e      	bpl.n	80103b6 <_vfiprintf_r+0x6a>
 8010398:	f04f 30ff 	mov.w	r0, #4294967295
 801039c:	b01d      	add	sp, #116	; 0x74
 801039e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a2:	4b7b      	ldr	r3, [pc, #492]	; (8010590 <_vfiprintf_r+0x244>)
 80103a4:	429d      	cmp	r5, r3
 80103a6:	d101      	bne.n	80103ac <_vfiprintf_r+0x60>
 80103a8:	68b5      	ldr	r5, [r6, #8]
 80103aa:	e7df      	b.n	801036c <_vfiprintf_r+0x20>
 80103ac:	4b79      	ldr	r3, [pc, #484]	; (8010594 <_vfiprintf_r+0x248>)
 80103ae:	429d      	cmp	r5, r3
 80103b0:	bf08      	it	eq
 80103b2:	68f5      	ldreq	r5, [r6, #12]
 80103b4:	e7da      	b.n	801036c <_vfiprintf_r+0x20>
 80103b6:	89ab      	ldrh	r3, [r5, #12]
 80103b8:	0598      	lsls	r0, r3, #22
 80103ba:	d4ed      	bmi.n	8010398 <_vfiprintf_r+0x4c>
 80103bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103be:	f000 fb84 	bl	8010aca <__retarget_lock_release_recursive>
 80103c2:	e7e9      	b.n	8010398 <_vfiprintf_r+0x4c>
 80103c4:	2300      	movs	r3, #0
 80103c6:	9309      	str	r3, [sp, #36]	; 0x24
 80103c8:	2320      	movs	r3, #32
 80103ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80103d2:	2330      	movs	r3, #48	; 0x30
 80103d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010598 <_vfiprintf_r+0x24c>
 80103d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103dc:	f04f 0901 	mov.w	r9, #1
 80103e0:	4623      	mov	r3, r4
 80103e2:	469a      	mov	sl, r3
 80103e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e8:	b10a      	cbz	r2, 80103ee <_vfiprintf_r+0xa2>
 80103ea:	2a25      	cmp	r2, #37	; 0x25
 80103ec:	d1f9      	bne.n	80103e2 <_vfiprintf_r+0x96>
 80103ee:	ebba 0b04 	subs.w	fp, sl, r4
 80103f2:	d00b      	beq.n	801040c <_vfiprintf_r+0xc0>
 80103f4:	465b      	mov	r3, fp
 80103f6:	4622      	mov	r2, r4
 80103f8:	4629      	mov	r1, r5
 80103fa:	4630      	mov	r0, r6
 80103fc:	f7ff ff93 	bl	8010326 <__sfputs_r>
 8010400:	3001      	adds	r0, #1
 8010402:	f000 80aa 	beq.w	801055a <_vfiprintf_r+0x20e>
 8010406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010408:	445a      	add	r2, fp
 801040a:	9209      	str	r2, [sp, #36]	; 0x24
 801040c:	f89a 3000 	ldrb.w	r3, [sl]
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 80a2 	beq.w	801055a <_vfiprintf_r+0x20e>
 8010416:	2300      	movs	r3, #0
 8010418:	f04f 32ff 	mov.w	r2, #4294967295
 801041c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010420:	f10a 0a01 	add.w	sl, sl, #1
 8010424:	9304      	str	r3, [sp, #16]
 8010426:	9307      	str	r3, [sp, #28]
 8010428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801042c:	931a      	str	r3, [sp, #104]	; 0x68
 801042e:	4654      	mov	r4, sl
 8010430:	2205      	movs	r2, #5
 8010432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010436:	4858      	ldr	r0, [pc, #352]	; (8010598 <_vfiprintf_r+0x24c>)
 8010438:	f7ef ff5a 	bl	80002f0 <memchr>
 801043c:	9a04      	ldr	r2, [sp, #16]
 801043e:	b9d8      	cbnz	r0, 8010478 <_vfiprintf_r+0x12c>
 8010440:	06d1      	lsls	r1, r2, #27
 8010442:	bf44      	itt	mi
 8010444:	2320      	movmi	r3, #32
 8010446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801044a:	0713      	lsls	r3, r2, #28
 801044c:	bf44      	itt	mi
 801044e:	232b      	movmi	r3, #43	; 0x2b
 8010450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010454:	f89a 3000 	ldrb.w	r3, [sl]
 8010458:	2b2a      	cmp	r3, #42	; 0x2a
 801045a:	d015      	beq.n	8010488 <_vfiprintf_r+0x13c>
 801045c:	9a07      	ldr	r2, [sp, #28]
 801045e:	4654      	mov	r4, sl
 8010460:	2000      	movs	r0, #0
 8010462:	f04f 0c0a 	mov.w	ip, #10
 8010466:	4621      	mov	r1, r4
 8010468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801046c:	3b30      	subs	r3, #48	; 0x30
 801046e:	2b09      	cmp	r3, #9
 8010470:	d94e      	bls.n	8010510 <_vfiprintf_r+0x1c4>
 8010472:	b1b0      	cbz	r0, 80104a2 <_vfiprintf_r+0x156>
 8010474:	9207      	str	r2, [sp, #28]
 8010476:	e014      	b.n	80104a2 <_vfiprintf_r+0x156>
 8010478:	eba0 0308 	sub.w	r3, r0, r8
 801047c:	fa09 f303 	lsl.w	r3, r9, r3
 8010480:	4313      	orrs	r3, r2
 8010482:	9304      	str	r3, [sp, #16]
 8010484:	46a2      	mov	sl, r4
 8010486:	e7d2      	b.n	801042e <_vfiprintf_r+0xe2>
 8010488:	9b03      	ldr	r3, [sp, #12]
 801048a:	1d19      	adds	r1, r3, #4
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	9103      	str	r1, [sp, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	bfbb      	ittet	lt
 8010494:	425b      	neglt	r3, r3
 8010496:	f042 0202 	orrlt.w	r2, r2, #2
 801049a:	9307      	strge	r3, [sp, #28]
 801049c:	9307      	strlt	r3, [sp, #28]
 801049e:	bfb8      	it	lt
 80104a0:	9204      	strlt	r2, [sp, #16]
 80104a2:	7823      	ldrb	r3, [r4, #0]
 80104a4:	2b2e      	cmp	r3, #46	; 0x2e
 80104a6:	d10c      	bne.n	80104c2 <_vfiprintf_r+0x176>
 80104a8:	7863      	ldrb	r3, [r4, #1]
 80104aa:	2b2a      	cmp	r3, #42	; 0x2a
 80104ac:	d135      	bne.n	801051a <_vfiprintf_r+0x1ce>
 80104ae:	9b03      	ldr	r3, [sp, #12]
 80104b0:	1d1a      	adds	r2, r3, #4
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	9203      	str	r2, [sp, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	bfb8      	it	lt
 80104ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80104be:	3402      	adds	r4, #2
 80104c0:	9305      	str	r3, [sp, #20]
 80104c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105a8 <_vfiprintf_r+0x25c>
 80104c6:	7821      	ldrb	r1, [r4, #0]
 80104c8:	2203      	movs	r2, #3
 80104ca:	4650      	mov	r0, sl
 80104cc:	f7ef ff10 	bl	80002f0 <memchr>
 80104d0:	b140      	cbz	r0, 80104e4 <_vfiprintf_r+0x198>
 80104d2:	2340      	movs	r3, #64	; 0x40
 80104d4:	eba0 000a 	sub.w	r0, r0, sl
 80104d8:	fa03 f000 	lsl.w	r0, r3, r0
 80104dc:	9b04      	ldr	r3, [sp, #16]
 80104de:	4303      	orrs	r3, r0
 80104e0:	3401      	adds	r4, #1
 80104e2:	9304      	str	r3, [sp, #16]
 80104e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e8:	482c      	ldr	r0, [pc, #176]	; (801059c <_vfiprintf_r+0x250>)
 80104ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104ee:	2206      	movs	r2, #6
 80104f0:	f7ef fefe 	bl	80002f0 <memchr>
 80104f4:	2800      	cmp	r0, #0
 80104f6:	d03f      	beq.n	8010578 <_vfiprintf_r+0x22c>
 80104f8:	4b29      	ldr	r3, [pc, #164]	; (80105a0 <_vfiprintf_r+0x254>)
 80104fa:	bb1b      	cbnz	r3, 8010544 <_vfiprintf_r+0x1f8>
 80104fc:	9b03      	ldr	r3, [sp, #12]
 80104fe:	3307      	adds	r3, #7
 8010500:	f023 0307 	bic.w	r3, r3, #7
 8010504:	3308      	adds	r3, #8
 8010506:	9303      	str	r3, [sp, #12]
 8010508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801050a:	443b      	add	r3, r7
 801050c:	9309      	str	r3, [sp, #36]	; 0x24
 801050e:	e767      	b.n	80103e0 <_vfiprintf_r+0x94>
 8010510:	fb0c 3202 	mla	r2, ip, r2, r3
 8010514:	460c      	mov	r4, r1
 8010516:	2001      	movs	r0, #1
 8010518:	e7a5      	b.n	8010466 <_vfiprintf_r+0x11a>
 801051a:	2300      	movs	r3, #0
 801051c:	3401      	adds	r4, #1
 801051e:	9305      	str	r3, [sp, #20]
 8010520:	4619      	mov	r1, r3
 8010522:	f04f 0c0a 	mov.w	ip, #10
 8010526:	4620      	mov	r0, r4
 8010528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801052c:	3a30      	subs	r2, #48	; 0x30
 801052e:	2a09      	cmp	r2, #9
 8010530:	d903      	bls.n	801053a <_vfiprintf_r+0x1ee>
 8010532:	2b00      	cmp	r3, #0
 8010534:	d0c5      	beq.n	80104c2 <_vfiprintf_r+0x176>
 8010536:	9105      	str	r1, [sp, #20]
 8010538:	e7c3      	b.n	80104c2 <_vfiprintf_r+0x176>
 801053a:	fb0c 2101 	mla	r1, ip, r1, r2
 801053e:	4604      	mov	r4, r0
 8010540:	2301      	movs	r3, #1
 8010542:	e7f0      	b.n	8010526 <_vfiprintf_r+0x1da>
 8010544:	ab03      	add	r3, sp, #12
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	462a      	mov	r2, r5
 801054a:	4b16      	ldr	r3, [pc, #88]	; (80105a4 <_vfiprintf_r+0x258>)
 801054c:	a904      	add	r1, sp, #16
 801054e:	4630      	mov	r0, r6
 8010550:	f7fd fe92 	bl	800e278 <_printf_float>
 8010554:	4607      	mov	r7, r0
 8010556:	1c78      	adds	r0, r7, #1
 8010558:	d1d6      	bne.n	8010508 <_vfiprintf_r+0x1bc>
 801055a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801055c:	07d9      	lsls	r1, r3, #31
 801055e:	d405      	bmi.n	801056c <_vfiprintf_r+0x220>
 8010560:	89ab      	ldrh	r3, [r5, #12]
 8010562:	059a      	lsls	r2, r3, #22
 8010564:	d402      	bmi.n	801056c <_vfiprintf_r+0x220>
 8010566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010568:	f000 faaf 	bl	8010aca <__retarget_lock_release_recursive>
 801056c:	89ab      	ldrh	r3, [r5, #12]
 801056e:	065b      	lsls	r3, r3, #25
 8010570:	f53f af12 	bmi.w	8010398 <_vfiprintf_r+0x4c>
 8010574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010576:	e711      	b.n	801039c <_vfiprintf_r+0x50>
 8010578:	ab03      	add	r3, sp, #12
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	462a      	mov	r2, r5
 801057e:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <_vfiprintf_r+0x258>)
 8010580:	a904      	add	r1, sp, #16
 8010582:	4630      	mov	r0, r6
 8010584:	f7fe f904 	bl	800e790 <_printf_i>
 8010588:	e7e4      	b.n	8010554 <_vfiprintf_r+0x208>
 801058a:	bf00      	nop
 801058c:	0801b4b4 	.word	0x0801b4b4
 8010590:	0801b4d4 	.word	0x0801b4d4
 8010594:	0801b494 	.word	0x0801b494
 8010598:	0801b33c 	.word	0x0801b33c
 801059c:	0801b346 	.word	0x0801b346
 80105a0:	0800e279 	.word	0x0800e279
 80105a4:	08010327 	.word	0x08010327
 80105a8:	0801b342 	.word	0x0801b342

080105ac <__swbuf_r>:
 80105ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ae:	460e      	mov	r6, r1
 80105b0:	4614      	mov	r4, r2
 80105b2:	4605      	mov	r5, r0
 80105b4:	b118      	cbz	r0, 80105be <__swbuf_r+0x12>
 80105b6:	6983      	ldr	r3, [r0, #24]
 80105b8:	b90b      	cbnz	r3, 80105be <__swbuf_r+0x12>
 80105ba:	f000 f9e7 	bl	801098c <__sinit>
 80105be:	4b21      	ldr	r3, [pc, #132]	; (8010644 <__swbuf_r+0x98>)
 80105c0:	429c      	cmp	r4, r3
 80105c2:	d12b      	bne.n	801061c <__swbuf_r+0x70>
 80105c4:	686c      	ldr	r4, [r5, #4]
 80105c6:	69a3      	ldr	r3, [r4, #24]
 80105c8:	60a3      	str	r3, [r4, #8]
 80105ca:	89a3      	ldrh	r3, [r4, #12]
 80105cc:	071a      	lsls	r2, r3, #28
 80105ce:	d52f      	bpl.n	8010630 <__swbuf_r+0x84>
 80105d0:	6923      	ldr	r3, [r4, #16]
 80105d2:	b36b      	cbz	r3, 8010630 <__swbuf_r+0x84>
 80105d4:	6923      	ldr	r3, [r4, #16]
 80105d6:	6820      	ldr	r0, [r4, #0]
 80105d8:	1ac0      	subs	r0, r0, r3
 80105da:	6963      	ldr	r3, [r4, #20]
 80105dc:	b2f6      	uxtb	r6, r6
 80105de:	4283      	cmp	r3, r0
 80105e0:	4637      	mov	r7, r6
 80105e2:	dc04      	bgt.n	80105ee <__swbuf_r+0x42>
 80105e4:	4621      	mov	r1, r4
 80105e6:	4628      	mov	r0, r5
 80105e8:	f000 f93c 	bl	8010864 <_fflush_r>
 80105ec:	bb30      	cbnz	r0, 801063c <__swbuf_r+0x90>
 80105ee:	68a3      	ldr	r3, [r4, #8]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	60a3      	str	r3, [r4, #8]
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	6022      	str	r2, [r4, #0]
 80105fa:	701e      	strb	r6, [r3, #0]
 80105fc:	6963      	ldr	r3, [r4, #20]
 80105fe:	3001      	adds	r0, #1
 8010600:	4283      	cmp	r3, r0
 8010602:	d004      	beq.n	801060e <__swbuf_r+0x62>
 8010604:	89a3      	ldrh	r3, [r4, #12]
 8010606:	07db      	lsls	r3, r3, #31
 8010608:	d506      	bpl.n	8010618 <__swbuf_r+0x6c>
 801060a:	2e0a      	cmp	r6, #10
 801060c:	d104      	bne.n	8010618 <__swbuf_r+0x6c>
 801060e:	4621      	mov	r1, r4
 8010610:	4628      	mov	r0, r5
 8010612:	f000 f927 	bl	8010864 <_fflush_r>
 8010616:	b988      	cbnz	r0, 801063c <__swbuf_r+0x90>
 8010618:	4638      	mov	r0, r7
 801061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801061c:	4b0a      	ldr	r3, [pc, #40]	; (8010648 <__swbuf_r+0x9c>)
 801061e:	429c      	cmp	r4, r3
 8010620:	d101      	bne.n	8010626 <__swbuf_r+0x7a>
 8010622:	68ac      	ldr	r4, [r5, #8]
 8010624:	e7cf      	b.n	80105c6 <__swbuf_r+0x1a>
 8010626:	4b09      	ldr	r3, [pc, #36]	; (801064c <__swbuf_r+0xa0>)
 8010628:	429c      	cmp	r4, r3
 801062a:	bf08      	it	eq
 801062c:	68ec      	ldreq	r4, [r5, #12]
 801062e:	e7ca      	b.n	80105c6 <__swbuf_r+0x1a>
 8010630:	4621      	mov	r1, r4
 8010632:	4628      	mov	r0, r5
 8010634:	f000 f81a 	bl	801066c <__swsetup_r>
 8010638:	2800      	cmp	r0, #0
 801063a:	d0cb      	beq.n	80105d4 <__swbuf_r+0x28>
 801063c:	f04f 37ff 	mov.w	r7, #4294967295
 8010640:	e7ea      	b.n	8010618 <__swbuf_r+0x6c>
 8010642:	bf00      	nop
 8010644:	0801b4b4 	.word	0x0801b4b4
 8010648:	0801b4d4 	.word	0x0801b4d4
 801064c:	0801b494 	.word	0x0801b494

08010650 <__ascii_wctomb>:
 8010650:	b149      	cbz	r1, 8010666 <__ascii_wctomb+0x16>
 8010652:	2aff      	cmp	r2, #255	; 0xff
 8010654:	bf85      	ittet	hi
 8010656:	238a      	movhi	r3, #138	; 0x8a
 8010658:	6003      	strhi	r3, [r0, #0]
 801065a:	700a      	strbls	r2, [r1, #0]
 801065c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010660:	bf98      	it	ls
 8010662:	2001      	movls	r0, #1
 8010664:	4770      	bx	lr
 8010666:	4608      	mov	r0, r1
 8010668:	4770      	bx	lr
	...

0801066c <__swsetup_r>:
 801066c:	4b32      	ldr	r3, [pc, #200]	; (8010738 <__swsetup_r+0xcc>)
 801066e:	b570      	push	{r4, r5, r6, lr}
 8010670:	681d      	ldr	r5, [r3, #0]
 8010672:	4606      	mov	r6, r0
 8010674:	460c      	mov	r4, r1
 8010676:	b125      	cbz	r5, 8010682 <__swsetup_r+0x16>
 8010678:	69ab      	ldr	r3, [r5, #24]
 801067a:	b913      	cbnz	r3, 8010682 <__swsetup_r+0x16>
 801067c:	4628      	mov	r0, r5
 801067e:	f000 f985 	bl	801098c <__sinit>
 8010682:	4b2e      	ldr	r3, [pc, #184]	; (801073c <__swsetup_r+0xd0>)
 8010684:	429c      	cmp	r4, r3
 8010686:	d10f      	bne.n	80106a8 <__swsetup_r+0x3c>
 8010688:	686c      	ldr	r4, [r5, #4]
 801068a:	89a3      	ldrh	r3, [r4, #12]
 801068c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010690:	0719      	lsls	r1, r3, #28
 8010692:	d42c      	bmi.n	80106ee <__swsetup_r+0x82>
 8010694:	06dd      	lsls	r5, r3, #27
 8010696:	d411      	bmi.n	80106bc <__swsetup_r+0x50>
 8010698:	2309      	movs	r3, #9
 801069a:	6033      	str	r3, [r6, #0]
 801069c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80106a0:	81a3      	strh	r3, [r4, #12]
 80106a2:	f04f 30ff 	mov.w	r0, #4294967295
 80106a6:	e03e      	b.n	8010726 <__swsetup_r+0xba>
 80106a8:	4b25      	ldr	r3, [pc, #148]	; (8010740 <__swsetup_r+0xd4>)
 80106aa:	429c      	cmp	r4, r3
 80106ac:	d101      	bne.n	80106b2 <__swsetup_r+0x46>
 80106ae:	68ac      	ldr	r4, [r5, #8]
 80106b0:	e7eb      	b.n	801068a <__swsetup_r+0x1e>
 80106b2:	4b24      	ldr	r3, [pc, #144]	; (8010744 <__swsetup_r+0xd8>)
 80106b4:	429c      	cmp	r4, r3
 80106b6:	bf08      	it	eq
 80106b8:	68ec      	ldreq	r4, [r5, #12]
 80106ba:	e7e6      	b.n	801068a <__swsetup_r+0x1e>
 80106bc:	0758      	lsls	r0, r3, #29
 80106be:	d512      	bpl.n	80106e6 <__swsetup_r+0x7a>
 80106c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106c2:	b141      	cbz	r1, 80106d6 <__swsetup_r+0x6a>
 80106c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106c8:	4299      	cmp	r1, r3
 80106ca:	d002      	beq.n	80106d2 <__swsetup_r+0x66>
 80106cc:	4630      	mov	r0, r6
 80106ce:	f7ff fb6f 	bl	800fdb0 <_free_r>
 80106d2:	2300      	movs	r3, #0
 80106d4:	6363      	str	r3, [r4, #52]	; 0x34
 80106d6:	89a3      	ldrh	r3, [r4, #12]
 80106d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106dc:	81a3      	strh	r3, [r4, #12]
 80106de:	2300      	movs	r3, #0
 80106e0:	6063      	str	r3, [r4, #4]
 80106e2:	6923      	ldr	r3, [r4, #16]
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	89a3      	ldrh	r3, [r4, #12]
 80106e8:	f043 0308 	orr.w	r3, r3, #8
 80106ec:	81a3      	strh	r3, [r4, #12]
 80106ee:	6923      	ldr	r3, [r4, #16]
 80106f0:	b94b      	cbnz	r3, 8010706 <__swsetup_r+0x9a>
 80106f2:	89a3      	ldrh	r3, [r4, #12]
 80106f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106fc:	d003      	beq.n	8010706 <__swsetup_r+0x9a>
 80106fe:	4621      	mov	r1, r4
 8010700:	4630      	mov	r0, r6
 8010702:	f000 fa07 	bl	8010b14 <__smakebuf_r>
 8010706:	89a0      	ldrh	r0, [r4, #12]
 8010708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801070c:	f010 0301 	ands.w	r3, r0, #1
 8010710:	d00a      	beq.n	8010728 <__swsetup_r+0xbc>
 8010712:	2300      	movs	r3, #0
 8010714:	60a3      	str	r3, [r4, #8]
 8010716:	6963      	ldr	r3, [r4, #20]
 8010718:	425b      	negs	r3, r3
 801071a:	61a3      	str	r3, [r4, #24]
 801071c:	6923      	ldr	r3, [r4, #16]
 801071e:	b943      	cbnz	r3, 8010732 <__swsetup_r+0xc6>
 8010720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010724:	d1ba      	bne.n	801069c <__swsetup_r+0x30>
 8010726:	bd70      	pop	{r4, r5, r6, pc}
 8010728:	0781      	lsls	r1, r0, #30
 801072a:	bf58      	it	pl
 801072c:	6963      	ldrpl	r3, [r4, #20]
 801072e:	60a3      	str	r3, [r4, #8]
 8010730:	e7f4      	b.n	801071c <__swsetup_r+0xb0>
 8010732:	2000      	movs	r0, #0
 8010734:	e7f7      	b.n	8010726 <__swsetup_r+0xba>
 8010736:	bf00      	nop
 8010738:	2400040c 	.word	0x2400040c
 801073c:	0801b4b4 	.word	0x0801b4b4
 8010740:	0801b4d4 	.word	0x0801b4d4
 8010744:	0801b494 	.word	0x0801b494

08010748 <abort>:
 8010748:	b508      	push	{r3, lr}
 801074a:	2006      	movs	r0, #6
 801074c:	f000 fa52 	bl	8010bf4 <raise>
 8010750:	2001      	movs	r0, #1
 8010752:	f7f3 fbd1 	bl	8003ef8 <_exit>
	...

08010758 <__sflush_r>:
 8010758:	898a      	ldrh	r2, [r1, #12]
 801075a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075e:	4605      	mov	r5, r0
 8010760:	0710      	lsls	r0, r2, #28
 8010762:	460c      	mov	r4, r1
 8010764:	d458      	bmi.n	8010818 <__sflush_r+0xc0>
 8010766:	684b      	ldr	r3, [r1, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	dc05      	bgt.n	8010778 <__sflush_r+0x20>
 801076c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801076e:	2b00      	cmp	r3, #0
 8010770:	dc02      	bgt.n	8010778 <__sflush_r+0x20>
 8010772:	2000      	movs	r0, #0
 8010774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801077a:	2e00      	cmp	r6, #0
 801077c:	d0f9      	beq.n	8010772 <__sflush_r+0x1a>
 801077e:	2300      	movs	r3, #0
 8010780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010784:	682f      	ldr	r7, [r5, #0]
 8010786:	602b      	str	r3, [r5, #0]
 8010788:	d032      	beq.n	80107f0 <__sflush_r+0x98>
 801078a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	075a      	lsls	r2, r3, #29
 8010790:	d505      	bpl.n	801079e <__sflush_r+0x46>
 8010792:	6863      	ldr	r3, [r4, #4]
 8010794:	1ac0      	subs	r0, r0, r3
 8010796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010798:	b10b      	cbz	r3, 801079e <__sflush_r+0x46>
 801079a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801079c:	1ac0      	subs	r0, r0, r3
 801079e:	2300      	movs	r3, #0
 80107a0:	4602      	mov	r2, r0
 80107a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107a4:	6a21      	ldr	r1, [r4, #32]
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b0      	blx	r6
 80107aa:	1c43      	adds	r3, r0, #1
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	d106      	bne.n	80107be <__sflush_r+0x66>
 80107b0:	6829      	ldr	r1, [r5, #0]
 80107b2:	291d      	cmp	r1, #29
 80107b4:	d82c      	bhi.n	8010810 <__sflush_r+0xb8>
 80107b6:	4a2a      	ldr	r2, [pc, #168]	; (8010860 <__sflush_r+0x108>)
 80107b8:	40ca      	lsrs	r2, r1
 80107ba:	07d6      	lsls	r6, r2, #31
 80107bc:	d528      	bpl.n	8010810 <__sflush_r+0xb8>
 80107be:	2200      	movs	r2, #0
 80107c0:	6062      	str	r2, [r4, #4]
 80107c2:	04d9      	lsls	r1, r3, #19
 80107c4:	6922      	ldr	r2, [r4, #16]
 80107c6:	6022      	str	r2, [r4, #0]
 80107c8:	d504      	bpl.n	80107d4 <__sflush_r+0x7c>
 80107ca:	1c42      	adds	r2, r0, #1
 80107cc:	d101      	bne.n	80107d2 <__sflush_r+0x7a>
 80107ce:	682b      	ldr	r3, [r5, #0]
 80107d0:	b903      	cbnz	r3, 80107d4 <__sflush_r+0x7c>
 80107d2:	6560      	str	r0, [r4, #84]	; 0x54
 80107d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107d6:	602f      	str	r7, [r5, #0]
 80107d8:	2900      	cmp	r1, #0
 80107da:	d0ca      	beq.n	8010772 <__sflush_r+0x1a>
 80107dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107e0:	4299      	cmp	r1, r3
 80107e2:	d002      	beq.n	80107ea <__sflush_r+0x92>
 80107e4:	4628      	mov	r0, r5
 80107e6:	f7ff fae3 	bl	800fdb0 <_free_r>
 80107ea:	2000      	movs	r0, #0
 80107ec:	6360      	str	r0, [r4, #52]	; 0x34
 80107ee:	e7c1      	b.n	8010774 <__sflush_r+0x1c>
 80107f0:	6a21      	ldr	r1, [r4, #32]
 80107f2:	2301      	movs	r3, #1
 80107f4:	4628      	mov	r0, r5
 80107f6:	47b0      	blx	r6
 80107f8:	1c41      	adds	r1, r0, #1
 80107fa:	d1c7      	bne.n	801078c <__sflush_r+0x34>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d0c4      	beq.n	801078c <__sflush_r+0x34>
 8010802:	2b1d      	cmp	r3, #29
 8010804:	d001      	beq.n	801080a <__sflush_r+0xb2>
 8010806:	2b16      	cmp	r3, #22
 8010808:	d101      	bne.n	801080e <__sflush_r+0xb6>
 801080a:	602f      	str	r7, [r5, #0]
 801080c:	e7b1      	b.n	8010772 <__sflush_r+0x1a>
 801080e:	89a3      	ldrh	r3, [r4, #12]
 8010810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010814:	81a3      	strh	r3, [r4, #12]
 8010816:	e7ad      	b.n	8010774 <__sflush_r+0x1c>
 8010818:	690f      	ldr	r7, [r1, #16]
 801081a:	2f00      	cmp	r7, #0
 801081c:	d0a9      	beq.n	8010772 <__sflush_r+0x1a>
 801081e:	0793      	lsls	r3, r2, #30
 8010820:	680e      	ldr	r6, [r1, #0]
 8010822:	bf08      	it	eq
 8010824:	694b      	ldreq	r3, [r1, #20]
 8010826:	600f      	str	r7, [r1, #0]
 8010828:	bf18      	it	ne
 801082a:	2300      	movne	r3, #0
 801082c:	eba6 0807 	sub.w	r8, r6, r7
 8010830:	608b      	str	r3, [r1, #8]
 8010832:	f1b8 0f00 	cmp.w	r8, #0
 8010836:	dd9c      	ble.n	8010772 <__sflush_r+0x1a>
 8010838:	6a21      	ldr	r1, [r4, #32]
 801083a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801083c:	4643      	mov	r3, r8
 801083e:	463a      	mov	r2, r7
 8010840:	4628      	mov	r0, r5
 8010842:	47b0      	blx	r6
 8010844:	2800      	cmp	r0, #0
 8010846:	dc06      	bgt.n	8010856 <__sflush_r+0xfe>
 8010848:	89a3      	ldrh	r3, [r4, #12]
 801084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801084e:	81a3      	strh	r3, [r4, #12]
 8010850:	f04f 30ff 	mov.w	r0, #4294967295
 8010854:	e78e      	b.n	8010774 <__sflush_r+0x1c>
 8010856:	4407      	add	r7, r0
 8010858:	eba8 0800 	sub.w	r8, r8, r0
 801085c:	e7e9      	b.n	8010832 <__sflush_r+0xda>
 801085e:	bf00      	nop
 8010860:	20400001 	.word	0x20400001

08010864 <_fflush_r>:
 8010864:	b538      	push	{r3, r4, r5, lr}
 8010866:	690b      	ldr	r3, [r1, #16]
 8010868:	4605      	mov	r5, r0
 801086a:	460c      	mov	r4, r1
 801086c:	b913      	cbnz	r3, 8010874 <_fflush_r+0x10>
 801086e:	2500      	movs	r5, #0
 8010870:	4628      	mov	r0, r5
 8010872:	bd38      	pop	{r3, r4, r5, pc}
 8010874:	b118      	cbz	r0, 801087e <_fflush_r+0x1a>
 8010876:	6983      	ldr	r3, [r0, #24]
 8010878:	b90b      	cbnz	r3, 801087e <_fflush_r+0x1a>
 801087a:	f000 f887 	bl	801098c <__sinit>
 801087e:	4b14      	ldr	r3, [pc, #80]	; (80108d0 <_fflush_r+0x6c>)
 8010880:	429c      	cmp	r4, r3
 8010882:	d11b      	bne.n	80108bc <_fflush_r+0x58>
 8010884:	686c      	ldr	r4, [r5, #4]
 8010886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d0ef      	beq.n	801086e <_fflush_r+0xa>
 801088e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010890:	07d0      	lsls	r0, r2, #31
 8010892:	d404      	bmi.n	801089e <_fflush_r+0x3a>
 8010894:	0599      	lsls	r1, r3, #22
 8010896:	d402      	bmi.n	801089e <_fflush_r+0x3a>
 8010898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801089a:	f000 f915 	bl	8010ac8 <__retarget_lock_acquire_recursive>
 801089e:	4628      	mov	r0, r5
 80108a0:	4621      	mov	r1, r4
 80108a2:	f7ff ff59 	bl	8010758 <__sflush_r>
 80108a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108a8:	07da      	lsls	r2, r3, #31
 80108aa:	4605      	mov	r5, r0
 80108ac:	d4e0      	bmi.n	8010870 <_fflush_r+0xc>
 80108ae:	89a3      	ldrh	r3, [r4, #12]
 80108b0:	059b      	lsls	r3, r3, #22
 80108b2:	d4dd      	bmi.n	8010870 <_fflush_r+0xc>
 80108b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108b6:	f000 f908 	bl	8010aca <__retarget_lock_release_recursive>
 80108ba:	e7d9      	b.n	8010870 <_fflush_r+0xc>
 80108bc:	4b05      	ldr	r3, [pc, #20]	; (80108d4 <_fflush_r+0x70>)
 80108be:	429c      	cmp	r4, r3
 80108c0:	d101      	bne.n	80108c6 <_fflush_r+0x62>
 80108c2:	68ac      	ldr	r4, [r5, #8]
 80108c4:	e7df      	b.n	8010886 <_fflush_r+0x22>
 80108c6:	4b04      	ldr	r3, [pc, #16]	; (80108d8 <_fflush_r+0x74>)
 80108c8:	429c      	cmp	r4, r3
 80108ca:	bf08      	it	eq
 80108cc:	68ec      	ldreq	r4, [r5, #12]
 80108ce:	e7da      	b.n	8010886 <_fflush_r+0x22>
 80108d0:	0801b4b4 	.word	0x0801b4b4
 80108d4:	0801b4d4 	.word	0x0801b4d4
 80108d8:	0801b494 	.word	0x0801b494

080108dc <std>:
 80108dc:	2300      	movs	r3, #0
 80108de:	b510      	push	{r4, lr}
 80108e0:	4604      	mov	r4, r0
 80108e2:	e9c0 3300 	strd	r3, r3, [r0]
 80108e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108ea:	6083      	str	r3, [r0, #8]
 80108ec:	8181      	strh	r1, [r0, #12]
 80108ee:	6643      	str	r3, [r0, #100]	; 0x64
 80108f0:	81c2      	strh	r2, [r0, #14]
 80108f2:	6183      	str	r3, [r0, #24]
 80108f4:	4619      	mov	r1, r3
 80108f6:	2208      	movs	r2, #8
 80108f8:	305c      	adds	r0, #92	; 0x5c
 80108fa:	f7fd fc25 	bl	800e148 <memset>
 80108fe:	4b05      	ldr	r3, [pc, #20]	; (8010914 <std+0x38>)
 8010900:	6263      	str	r3, [r4, #36]	; 0x24
 8010902:	4b05      	ldr	r3, [pc, #20]	; (8010918 <std+0x3c>)
 8010904:	62a3      	str	r3, [r4, #40]	; 0x28
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <std+0x40>)
 8010908:	62e3      	str	r3, [r4, #44]	; 0x2c
 801090a:	4b05      	ldr	r3, [pc, #20]	; (8010920 <std+0x44>)
 801090c:	6224      	str	r4, [r4, #32]
 801090e:	6323      	str	r3, [r4, #48]	; 0x30
 8010910:	bd10      	pop	{r4, pc}
 8010912:	bf00      	nop
 8010914:	08010c2d 	.word	0x08010c2d
 8010918:	08010c4f 	.word	0x08010c4f
 801091c:	08010c87 	.word	0x08010c87
 8010920:	08010cab 	.word	0x08010cab

08010924 <_cleanup_r>:
 8010924:	4901      	ldr	r1, [pc, #4]	; (801092c <_cleanup_r+0x8>)
 8010926:	f000 b8af 	b.w	8010a88 <_fwalk_reent>
 801092a:	bf00      	nop
 801092c:	08010865 	.word	0x08010865

08010930 <__sfmoreglue>:
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	1e4a      	subs	r2, r1, #1
 8010934:	2568      	movs	r5, #104	; 0x68
 8010936:	4355      	muls	r5, r2
 8010938:	460e      	mov	r6, r1
 801093a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801093e:	f7ff fa87 	bl	800fe50 <_malloc_r>
 8010942:	4604      	mov	r4, r0
 8010944:	b140      	cbz	r0, 8010958 <__sfmoreglue+0x28>
 8010946:	2100      	movs	r1, #0
 8010948:	e9c0 1600 	strd	r1, r6, [r0]
 801094c:	300c      	adds	r0, #12
 801094e:	60a0      	str	r0, [r4, #8]
 8010950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010954:	f7fd fbf8 	bl	800e148 <memset>
 8010958:	4620      	mov	r0, r4
 801095a:	bd70      	pop	{r4, r5, r6, pc}

0801095c <__sfp_lock_acquire>:
 801095c:	4801      	ldr	r0, [pc, #4]	; (8010964 <__sfp_lock_acquire+0x8>)
 801095e:	f000 b8b3 	b.w	8010ac8 <__retarget_lock_acquire_recursive>
 8010962:	bf00      	nop
 8010964:	24010b2c 	.word	0x24010b2c

08010968 <__sfp_lock_release>:
 8010968:	4801      	ldr	r0, [pc, #4]	; (8010970 <__sfp_lock_release+0x8>)
 801096a:	f000 b8ae 	b.w	8010aca <__retarget_lock_release_recursive>
 801096e:	bf00      	nop
 8010970:	24010b2c 	.word	0x24010b2c

08010974 <__sinit_lock_acquire>:
 8010974:	4801      	ldr	r0, [pc, #4]	; (801097c <__sinit_lock_acquire+0x8>)
 8010976:	f000 b8a7 	b.w	8010ac8 <__retarget_lock_acquire_recursive>
 801097a:	bf00      	nop
 801097c:	24010b27 	.word	0x24010b27

08010980 <__sinit_lock_release>:
 8010980:	4801      	ldr	r0, [pc, #4]	; (8010988 <__sinit_lock_release+0x8>)
 8010982:	f000 b8a2 	b.w	8010aca <__retarget_lock_release_recursive>
 8010986:	bf00      	nop
 8010988:	24010b27 	.word	0x24010b27

0801098c <__sinit>:
 801098c:	b510      	push	{r4, lr}
 801098e:	4604      	mov	r4, r0
 8010990:	f7ff fff0 	bl	8010974 <__sinit_lock_acquire>
 8010994:	69a3      	ldr	r3, [r4, #24]
 8010996:	b11b      	cbz	r3, 80109a0 <__sinit+0x14>
 8010998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801099c:	f7ff bff0 	b.w	8010980 <__sinit_lock_release>
 80109a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109a4:	6523      	str	r3, [r4, #80]	; 0x50
 80109a6:	4b13      	ldr	r3, [pc, #76]	; (80109f4 <__sinit+0x68>)
 80109a8:	4a13      	ldr	r2, [pc, #76]	; (80109f8 <__sinit+0x6c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80109ae:	42a3      	cmp	r3, r4
 80109b0:	bf04      	itt	eq
 80109b2:	2301      	moveq	r3, #1
 80109b4:	61a3      	streq	r3, [r4, #24]
 80109b6:	4620      	mov	r0, r4
 80109b8:	f000 f820 	bl	80109fc <__sfp>
 80109bc:	6060      	str	r0, [r4, #4]
 80109be:	4620      	mov	r0, r4
 80109c0:	f000 f81c 	bl	80109fc <__sfp>
 80109c4:	60a0      	str	r0, [r4, #8]
 80109c6:	4620      	mov	r0, r4
 80109c8:	f000 f818 	bl	80109fc <__sfp>
 80109cc:	2200      	movs	r2, #0
 80109ce:	60e0      	str	r0, [r4, #12]
 80109d0:	2104      	movs	r1, #4
 80109d2:	6860      	ldr	r0, [r4, #4]
 80109d4:	f7ff ff82 	bl	80108dc <std>
 80109d8:	68a0      	ldr	r0, [r4, #8]
 80109da:	2201      	movs	r2, #1
 80109dc:	2109      	movs	r1, #9
 80109de:	f7ff ff7d 	bl	80108dc <std>
 80109e2:	68e0      	ldr	r0, [r4, #12]
 80109e4:	2202      	movs	r2, #2
 80109e6:	2112      	movs	r1, #18
 80109e8:	f7ff ff78 	bl	80108dc <std>
 80109ec:	2301      	movs	r3, #1
 80109ee:	61a3      	str	r3, [r4, #24]
 80109f0:	e7d2      	b.n	8010998 <__sinit+0xc>
 80109f2:	bf00      	nop
 80109f4:	0801b110 	.word	0x0801b110
 80109f8:	08010925 	.word	0x08010925

080109fc <__sfp>:
 80109fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fe:	4607      	mov	r7, r0
 8010a00:	f7ff ffac 	bl	801095c <__sfp_lock_acquire>
 8010a04:	4b1e      	ldr	r3, [pc, #120]	; (8010a80 <__sfp+0x84>)
 8010a06:	681e      	ldr	r6, [r3, #0]
 8010a08:	69b3      	ldr	r3, [r6, #24]
 8010a0a:	b913      	cbnz	r3, 8010a12 <__sfp+0x16>
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	f7ff ffbd 	bl	801098c <__sinit>
 8010a12:	3648      	adds	r6, #72	; 0x48
 8010a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	d503      	bpl.n	8010a24 <__sfp+0x28>
 8010a1c:	6833      	ldr	r3, [r6, #0]
 8010a1e:	b30b      	cbz	r3, 8010a64 <__sfp+0x68>
 8010a20:	6836      	ldr	r6, [r6, #0]
 8010a22:	e7f7      	b.n	8010a14 <__sfp+0x18>
 8010a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a28:	b9d5      	cbnz	r5, 8010a60 <__sfp+0x64>
 8010a2a:	4b16      	ldr	r3, [pc, #88]	; (8010a84 <__sfp+0x88>)
 8010a2c:	60e3      	str	r3, [r4, #12]
 8010a2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a32:	6665      	str	r5, [r4, #100]	; 0x64
 8010a34:	f000 f847 	bl	8010ac6 <__retarget_lock_init_recursive>
 8010a38:	f7ff ff96 	bl	8010968 <__sfp_lock_release>
 8010a3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a44:	6025      	str	r5, [r4, #0]
 8010a46:	61a5      	str	r5, [r4, #24]
 8010a48:	2208      	movs	r2, #8
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a50:	f7fd fb7a 	bl	800e148 <memset>
 8010a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a60:	3468      	adds	r4, #104	; 0x68
 8010a62:	e7d9      	b.n	8010a18 <__sfp+0x1c>
 8010a64:	2104      	movs	r1, #4
 8010a66:	4638      	mov	r0, r7
 8010a68:	f7ff ff62 	bl	8010930 <__sfmoreglue>
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	6030      	str	r0, [r6, #0]
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d1d5      	bne.n	8010a20 <__sfp+0x24>
 8010a74:	f7ff ff78 	bl	8010968 <__sfp_lock_release>
 8010a78:	230c      	movs	r3, #12
 8010a7a:	603b      	str	r3, [r7, #0]
 8010a7c:	e7ee      	b.n	8010a5c <__sfp+0x60>
 8010a7e:	bf00      	nop
 8010a80:	0801b110 	.word	0x0801b110
 8010a84:	ffff0001 	.word	0xffff0001

08010a88 <_fwalk_reent>:
 8010a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a8c:	4606      	mov	r6, r0
 8010a8e:	4688      	mov	r8, r1
 8010a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a94:	2700      	movs	r7, #0
 8010a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8010a9e:	d505      	bpl.n	8010aac <_fwalk_reent+0x24>
 8010aa0:	6824      	ldr	r4, [r4, #0]
 8010aa2:	2c00      	cmp	r4, #0
 8010aa4:	d1f7      	bne.n	8010a96 <_fwalk_reent+0xe>
 8010aa6:	4638      	mov	r0, r7
 8010aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aac:	89ab      	ldrh	r3, [r5, #12]
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d907      	bls.n	8010ac2 <_fwalk_reent+0x3a>
 8010ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	d003      	beq.n	8010ac2 <_fwalk_reent+0x3a>
 8010aba:	4629      	mov	r1, r5
 8010abc:	4630      	mov	r0, r6
 8010abe:	47c0      	blx	r8
 8010ac0:	4307      	orrs	r7, r0
 8010ac2:	3568      	adds	r5, #104	; 0x68
 8010ac4:	e7e9      	b.n	8010a9a <_fwalk_reent+0x12>

08010ac6 <__retarget_lock_init_recursive>:
 8010ac6:	4770      	bx	lr

08010ac8 <__retarget_lock_acquire_recursive>:
 8010ac8:	4770      	bx	lr

08010aca <__retarget_lock_release_recursive>:
 8010aca:	4770      	bx	lr

08010acc <__swhatbuf_r>:
 8010acc:	b570      	push	{r4, r5, r6, lr}
 8010ace:	460e      	mov	r6, r1
 8010ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ad4:	2900      	cmp	r1, #0
 8010ad6:	b096      	sub	sp, #88	; 0x58
 8010ad8:	4614      	mov	r4, r2
 8010ada:	461d      	mov	r5, r3
 8010adc:	da07      	bge.n	8010aee <__swhatbuf_r+0x22>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	602b      	str	r3, [r5, #0]
 8010ae2:	89b3      	ldrh	r3, [r6, #12]
 8010ae4:	061a      	lsls	r2, r3, #24
 8010ae6:	d410      	bmi.n	8010b0a <__swhatbuf_r+0x3e>
 8010ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aec:	e00e      	b.n	8010b0c <__swhatbuf_r+0x40>
 8010aee:	466a      	mov	r2, sp
 8010af0:	f000 f902 	bl	8010cf8 <_fstat_r>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	dbf2      	blt.n	8010ade <__swhatbuf_r+0x12>
 8010af8:	9a01      	ldr	r2, [sp, #4]
 8010afa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010afe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b02:	425a      	negs	r2, r3
 8010b04:	415a      	adcs	r2, r3
 8010b06:	602a      	str	r2, [r5, #0]
 8010b08:	e7ee      	b.n	8010ae8 <__swhatbuf_r+0x1c>
 8010b0a:	2340      	movs	r3, #64	; 0x40
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	6023      	str	r3, [r4, #0]
 8010b10:	b016      	add	sp, #88	; 0x58
 8010b12:	bd70      	pop	{r4, r5, r6, pc}

08010b14 <__smakebuf_r>:
 8010b14:	898b      	ldrh	r3, [r1, #12]
 8010b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b18:	079d      	lsls	r5, r3, #30
 8010b1a:	4606      	mov	r6, r0
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	d507      	bpl.n	8010b30 <__smakebuf_r+0x1c>
 8010b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b24:	6023      	str	r3, [r4, #0]
 8010b26:	6123      	str	r3, [r4, #16]
 8010b28:	2301      	movs	r3, #1
 8010b2a:	6163      	str	r3, [r4, #20]
 8010b2c:	b002      	add	sp, #8
 8010b2e:	bd70      	pop	{r4, r5, r6, pc}
 8010b30:	ab01      	add	r3, sp, #4
 8010b32:	466a      	mov	r2, sp
 8010b34:	f7ff ffca 	bl	8010acc <__swhatbuf_r>
 8010b38:	9900      	ldr	r1, [sp, #0]
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	f7ff f987 	bl	800fe50 <_malloc_r>
 8010b42:	b948      	cbnz	r0, 8010b58 <__smakebuf_r+0x44>
 8010b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b48:	059a      	lsls	r2, r3, #22
 8010b4a:	d4ef      	bmi.n	8010b2c <__smakebuf_r+0x18>
 8010b4c:	f023 0303 	bic.w	r3, r3, #3
 8010b50:	f043 0302 	orr.w	r3, r3, #2
 8010b54:	81a3      	strh	r3, [r4, #12]
 8010b56:	e7e3      	b.n	8010b20 <__smakebuf_r+0xc>
 8010b58:	4b0d      	ldr	r3, [pc, #52]	; (8010b90 <__smakebuf_r+0x7c>)
 8010b5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b5c:	89a3      	ldrh	r3, [r4, #12]
 8010b5e:	6020      	str	r0, [r4, #0]
 8010b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b64:	81a3      	strh	r3, [r4, #12]
 8010b66:	9b00      	ldr	r3, [sp, #0]
 8010b68:	6163      	str	r3, [r4, #20]
 8010b6a:	9b01      	ldr	r3, [sp, #4]
 8010b6c:	6120      	str	r0, [r4, #16]
 8010b6e:	b15b      	cbz	r3, 8010b88 <__smakebuf_r+0x74>
 8010b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b74:	4630      	mov	r0, r6
 8010b76:	f000 f8d1 	bl	8010d1c <_isatty_r>
 8010b7a:	b128      	cbz	r0, 8010b88 <__smakebuf_r+0x74>
 8010b7c:	89a3      	ldrh	r3, [r4, #12]
 8010b7e:	f023 0303 	bic.w	r3, r3, #3
 8010b82:	f043 0301 	orr.w	r3, r3, #1
 8010b86:	81a3      	strh	r3, [r4, #12]
 8010b88:	89a0      	ldrh	r0, [r4, #12]
 8010b8a:	4305      	orrs	r5, r0
 8010b8c:	81a5      	strh	r5, [r4, #12]
 8010b8e:	e7cd      	b.n	8010b2c <__smakebuf_r+0x18>
 8010b90:	08010925 	.word	0x08010925

08010b94 <_malloc_usable_size_r>:
 8010b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b98:	1f18      	subs	r0, r3, #4
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	bfbc      	itt	lt
 8010b9e:	580b      	ldrlt	r3, [r1, r0]
 8010ba0:	18c0      	addlt	r0, r0, r3
 8010ba2:	4770      	bx	lr

08010ba4 <_raise_r>:
 8010ba4:	291f      	cmp	r1, #31
 8010ba6:	b538      	push	{r3, r4, r5, lr}
 8010ba8:	4604      	mov	r4, r0
 8010baa:	460d      	mov	r5, r1
 8010bac:	d904      	bls.n	8010bb8 <_raise_r+0x14>
 8010bae:	2316      	movs	r3, #22
 8010bb0:	6003      	str	r3, [r0, #0]
 8010bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb6:	bd38      	pop	{r3, r4, r5, pc}
 8010bb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010bba:	b112      	cbz	r2, 8010bc2 <_raise_r+0x1e>
 8010bbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bc0:	b94b      	cbnz	r3, 8010bd6 <_raise_r+0x32>
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f000 f830 	bl	8010c28 <_getpid_r>
 8010bc8:	462a      	mov	r2, r5
 8010bca:	4601      	mov	r1, r0
 8010bcc:	4620      	mov	r0, r4
 8010bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bd2:	f000 b817 	b.w	8010c04 <_kill_r>
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d00a      	beq.n	8010bf0 <_raise_r+0x4c>
 8010bda:	1c59      	adds	r1, r3, #1
 8010bdc:	d103      	bne.n	8010be6 <_raise_r+0x42>
 8010bde:	2316      	movs	r3, #22
 8010be0:	6003      	str	r3, [r0, #0]
 8010be2:	2001      	movs	r0, #1
 8010be4:	e7e7      	b.n	8010bb6 <_raise_r+0x12>
 8010be6:	2400      	movs	r4, #0
 8010be8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010bec:	4628      	mov	r0, r5
 8010bee:	4798      	blx	r3
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	e7e0      	b.n	8010bb6 <_raise_r+0x12>

08010bf4 <raise>:
 8010bf4:	4b02      	ldr	r3, [pc, #8]	; (8010c00 <raise+0xc>)
 8010bf6:	4601      	mov	r1, r0
 8010bf8:	6818      	ldr	r0, [r3, #0]
 8010bfa:	f7ff bfd3 	b.w	8010ba4 <_raise_r>
 8010bfe:	bf00      	nop
 8010c00:	2400040c 	.word	0x2400040c

08010c04 <_kill_r>:
 8010c04:	b538      	push	{r3, r4, r5, lr}
 8010c06:	4d07      	ldr	r5, [pc, #28]	; (8010c24 <_kill_r+0x20>)
 8010c08:	2300      	movs	r3, #0
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	4608      	mov	r0, r1
 8010c0e:	4611      	mov	r1, r2
 8010c10:	602b      	str	r3, [r5, #0]
 8010c12:	f7f3 f967 	bl	8003ee4 <_kill>
 8010c16:	1c43      	adds	r3, r0, #1
 8010c18:	d102      	bne.n	8010c20 <_kill_r+0x1c>
 8010c1a:	682b      	ldr	r3, [r5, #0]
 8010c1c:	b103      	cbz	r3, 8010c20 <_kill_r+0x1c>
 8010c1e:	6023      	str	r3, [r4, #0]
 8010c20:	bd38      	pop	{r3, r4, r5, pc}
 8010c22:	bf00      	nop
 8010c24:	24010b20 	.word	0x24010b20

08010c28 <_getpid_r>:
 8010c28:	f7f3 b95a 	b.w	8003ee0 <_getpid>

08010c2c <__sread>:
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	460c      	mov	r4, r1
 8010c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c34:	f000 f894 	bl	8010d60 <_read_r>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	bfab      	itete	ge
 8010c3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8010c40:	181b      	addge	r3, r3, r0
 8010c42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c46:	bfac      	ite	ge
 8010c48:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c4a:	81a3      	strhlt	r3, [r4, #12]
 8010c4c:	bd10      	pop	{r4, pc}

08010c4e <__swrite>:
 8010c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c52:	461f      	mov	r7, r3
 8010c54:	898b      	ldrh	r3, [r1, #12]
 8010c56:	05db      	lsls	r3, r3, #23
 8010c58:	4605      	mov	r5, r0
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	4616      	mov	r6, r2
 8010c5e:	d505      	bpl.n	8010c6c <__swrite+0x1e>
 8010c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c64:	2302      	movs	r3, #2
 8010c66:	2200      	movs	r2, #0
 8010c68:	f000 f868 	bl	8010d3c <_lseek_r>
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c76:	81a3      	strh	r3, [r4, #12]
 8010c78:	4632      	mov	r2, r6
 8010c7a:	463b      	mov	r3, r7
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c82:	f000 b817 	b.w	8010cb4 <_write_r>

08010c86 <__sseek>:
 8010c86:	b510      	push	{r4, lr}
 8010c88:	460c      	mov	r4, r1
 8010c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c8e:	f000 f855 	bl	8010d3c <_lseek_r>
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	89a3      	ldrh	r3, [r4, #12]
 8010c96:	bf15      	itete	ne
 8010c98:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010ca2:	81a3      	strheq	r3, [r4, #12]
 8010ca4:	bf18      	it	ne
 8010ca6:	81a3      	strhne	r3, [r4, #12]
 8010ca8:	bd10      	pop	{r4, pc}

08010caa <__sclose>:
 8010caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cae:	f000 b813 	b.w	8010cd8 <_close_r>
	...

08010cb4 <_write_r>:
 8010cb4:	b538      	push	{r3, r4, r5, lr}
 8010cb6:	4d07      	ldr	r5, [pc, #28]	; (8010cd4 <_write_r+0x20>)
 8010cb8:	4604      	mov	r4, r0
 8010cba:	4608      	mov	r0, r1
 8010cbc:	4611      	mov	r1, r2
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	602a      	str	r2, [r5, #0]
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	f7f3 f92c 	bl	8003f20 <_write>
 8010cc8:	1c43      	adds	r3, r0, #1
 8010cca:	d102      	bne.n	8010cd2 <_write_r+0x1e>
 8010ccc:	682b      	ldr	r3, [r5, #0]
 8010cce:	b103      	cbz	r3, 8010cd2 <_write_r+0x1e>
 8010cd0:	6023      	str	r3, [r4, #0]
 8010cd2:	bd38      	pop	{r3, r4, r5, pc}
 8010cd4:	24010b20 	.word	0x24010b20

08010cd8 <_close_r>:
 8010cd8:	b538      	push	{r3, r4, r5, lr}
 8010cda:	4d06      	ldr	r5, [pc, #24]	; (8010cf4 <_close_r+0x1c>)
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4604      	mov	r4, r0
 8010ce0:	4608      	mov	r0, r1
 8010ce2:	602b      	str	r3, [r5, #0]
 8010ce4:	f7f3 f92a 	bl	8003f3c <_close>
 8010ce8:	1c43      	adds	r3, r0, #1
 8010cea:	d102      	bne.n	8010cf2 <_close_r+0x1a>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	b103      	cbz	r3, 8010cf2 <_close_r+0x1a>
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	bd38      	pop	{r3, r4, r5, pc}
 8010cf4:	24010b20 	.word	0x24010b20

08010cf8 <_fstat_r>:
 8010cf8:	b538      	push	{r3, r4, r5, lr}
 8010cfa:	4d07      	ldr	r5, [pc, #28]	; (8010d18 <_fstat_r+0x20>)
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	4604      	mov	r4, r0
 8010d00:	4608      	mov	r0, r1
 8010d02:	4611      	mov	r1, r2
 8010d04:	602b      	str	r3, [r5, #0]
 8010d06:	f7f3 f91d 	bl	8003f44 <_fstat>
 8010d0a:	1c43      	adds	r3, r0, #1
 8010d0c:	d102      	bne.n	8010d14 <_fstat_r+0x1c>
 8010d0e:	682b      	ldr	r3, [r5, #0]
 8010d10:	b103      	cbz	r3, 8010d14 <_fstat_r+0x1c>
 8010d12:	6023      	str	r3, [r4, #0]
 8010d14:	bd38      	pop	{r3, r4, r5, pc}
 8010d16:	bf00      	nop
 8010d18:	24010b20 	.word	0x24010b20

08010d1c <_isatty_r>:
 8010d1c:	b538      	push	{r3, r4, r5, lr}
 8010d1e:	4d06      	ldr	r5, [pc, #24]	; (8010d38 <_isatty_r+0x1c>)
 8010d20:	2300      	movs	r3, #0
 8010d22:	4604      	mov	r4, r0
 8010d24:	4608      	mov	r0, r1
 8010d26:	602b      	str	r3, [r5, #0]
 8010d28:	f7f3 f912 	bl	8003f50 <_isatty>
 8010d2c:	1c43      	adds	r3, r0, #1
 8010d2e:	d102      	bne.n	8010d36 <_isatty_r+0x1a>
 8010d30:	682b      	ldr	r3, [r5, #0]
 8010d32:	b103      	cbz	r3, 8010d36 <_isatty_r+0x1a>
 8010d34:	6023      	str	r3, [r4, #0]
 8010d36:	bd38      	pop	{r3, r4, r5, pc}
 8010d38:	24010b20 	.word	0x24010b20

08010d3c <_lseek_r>:
 8010d3c:	b538      	push	{r3, r4, r5, lr}
 8010d3e:	4d07      	ldr	r5, [pc, #28]	; (8010d5c <_lseek_r+0x20>)
 8010d40:	4604      	mov	r4, r0
 8010d42:	4608      	mov	r0, r1
 8010d44:	4611      	mov	r1, r2
 8010d46:	2200      	movs	r2, #0
 8010d48:	602a      	str	r2, [r5, #0]
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	f7f3 f902 	bl	8003f54 <_lseek>
 8010d50:	1c43      	adds	r3, r0, #1
 8010d52:	d102      	bne.n	8010d5a <_lseek_r+0x1e>
 8010d54:	682b      	ldr	r3, [r5, #0]
 8010d56:	b103      	cbz	r3, 8010d5a <_lseek_r+0x1e>
 8010d58:	6023      	str	r3, [r4, #0]
 8010d5a:	bd38      	pop	{r3, r4, r5, pc}
 8010d5c:	24010b20 	.word	0x24010b20

08010d60 <_read_r>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	4d07      	ldr	r5, [pc, #28]	; (8010d80 <_read_r+0x20>)
 8010d64:	4604      	mov	r4, r0
 8010d66:	4608      	mov	r0, r1
 8010d68:	4611      	mov	r1, r2
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	602a      	str	r2, [r5, #0]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	f7f3 f8c8 	bl	8003f04 <_read>
 8010d74:	1c43      	adds	r3, r0, #1
 8010d76:	d102      	bne.n	8010d7e <_read_r+0x1e>
 8010d78:	682b      	ldr	r3, [r5, #0]
 8010d7a:	b103      	cbz	r3, 8010d7e <_read_r+0x1e>
 8010d7c:	6023      	str	r3, [r4, #0]
 8010d7e:	bd38      	pop	{r3, r4, r5, pc}
 8010d80:	24010b20 	.word	0x24010b20
 8010d84:	00000000 	.word	0x00000000

08010d88 <exp>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	b087      	sub	sp, #28
 8010d8e:	ed8d 0b00 	vstr	d0, [sp]
 8010d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d96:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 8010d9a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8010d9e:	18f7      	adds	r7, r6, r3
 8010da0:	2f3e      	cmp	r7, #62	; 0x3e
 8010da2:	d929      	bls.n	8010df8 <exp+0x70>
 8010da4:	2f00      	cmp	r7, #0
 8010da6:	da08      	bge.n	8010dba <exp+0x32>
 8010da8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010dac:	ed9d 7b00 	vldr	d7, [sp]
 8010db0:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010db4:	b007      	add	sp, #28
 8010db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dba:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8010dbe:	d91a      	bls.n	8010df6 <exp+0x6e>
 8010dc0:	4b65      	ldr	r3, [pc, #404]	; (8010f58 <exp+0x1d0>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	4299      	cmp	r1, r3
 8010dc6:	bf08      	it	eq
 8010dc8:	4290      	cmpeq	r0, r2
 8010dca:	f000 80b6 	beq.w	8010f3a <exp+0x1b2>
 8010dce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8010dd2:	429e      	cmp	r6, r3
 8010dd4:	d0e8      	beq.n	8010da8 <exp+0x20>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	f171 0300 	sbcs.w	r3, r1, #0
 8010ddc:	f04f 0000 	mov.w	r0, #0
 8010de0:	da04      	bge.n	8010dec <exp+0x64>
 8010de2:	b007      	add	sp, #28
 8010de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	f000 b9f6 	b.w	80111d8 <__math_uflow>
 8010dec:	b007      	add	sp, #28
 8010dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df2:	f000 b9f9 	b.w	80111e8 <__math_oflow>
 8010df6:	2600      	movs	r6, #0
 8010df8:	4858      	ldr	r0, [pc, #352]	; (8010f5c <exp+0x1d4>)
 8010dfa:	ed9d 3b00 	vldr	d3, [sp]
 8010dfe:	ed90 6b02 	vldr	d6, [r0, #8]
 8010e02:	ed90 7b00 	vldr	d7, [r0]
 8010e06:	eeb0 4b46 	vmov.f64	d4, d6
 8010e0a:	eea7 4b03 	vfma.f64	d4, d7, d3
 8010e0e:	ee34 7b46 	vsub.f64	d7, d4, d6
 8010e12:	ed90 6b04 	vldr	d6, [r0, #16]
 8010e16:	ee14 ca10 	vmov	ip, s8
 8010e1a:	eeb0 4b43 	vmov.f64	d4, d3
 8010e1e:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 8010e22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010e26:	eeb0 6b44 	vmov.f64	d6, d4
 8010e2a:	ed90 4b06 	vldr	d4, [r0, #24]
 8010e2e:	1849      	adds	r1, r1, r1
 8010e30:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 8010e34:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010e38:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010e3c:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 8010e40:	ee26 2b06 	vmul.f64	d2, d6, d6
 8010e44:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8010e48:	ed90 4b08 	vldr	d4, [r0, #32]
 8010e4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010e50:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 8010e54:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010e58:	eea4 7b02 	vfma.f64	d7, d4, d2
 8010e5c:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 8010e60:	ee22 2b02 	vmul.f64	d2, d2, d2
 8010e64:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 8010e68:	2700      	movs	r7, #0
 8010e6a:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 8010e6e:	eb17 0a08 	adds.w	sl, r7, r8
 8010e72:	eea3 4b06 	vfma.f64	d4, d3, d6
 8010e76:	eb4e 0b09 	adc.w	fp, lr, r9
 8010e7a:	eea2 7b04 	vfma.f64	d7, d2, d4
 8010e7e:	2e00      	cmp	r6, #0
 8010e80:	d156      	bne.n	8010f30 <exp+0x1a8>
 8010e82:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8010e86:	4631      	mov	r1, r6
 8010e88:	ea50 0301 	orrs.w	r3, r0, r1
 8010e8c:	d113      	bne.n	8010eb6 <exp+0x12e>
 8010e8e:	4a34      	ldr	r2, [pc, #208]	; (8010f60 <exp+0x1d8>)
 8010e90:	eb1a 0407 	adds.w	r4, sl, r7
 8010e94:	eb4b 0502 	adc.w	r5, fp, r2
 8010e98:	ec45 4b10 	vmov	d0, r4, r5
 8010e9c:	ec45 4b16 	vmov	d6, r4, r5
 8010ea0:	eea7 0b06 	vfma.f64	d0, d7, d6
 8010ea4:	ed9f 7b26 	vldr	d7, [pc, #152]	; 8010f40 <exp+0x1b8>
 8010ea8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010eac:	b007      	add	sp, #28
 8010eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb2:	f000 b9d1 	b.w	8011258 <__math_check_oflow>
 8010eb6:	4a2b      	ldr	r2, [pc, #172]	; (8010f64 <exp+0x1dc>)
 8010eb8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	eb1a 0301 	adds.w	r3, sl, r1
 8010ec2:	ee05 3a10 	vmov	s10, r3
 8010ec6:	eb4b 0302 	adc.w	r3, fp, r2
 8010eca:	ee05 3a90 	vmov	s11, r3
 8010ece:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010ed2:	ee35 6b07 	vadd.f64	d6, d5, d7
 8010ed6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ede:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010f48 <exp+0x1c0>
 8010ee2:	d51e      	bpl.n	8010f22 <exp+0x19a>
 8010ee4:	ee35 5b46 	vsub.f64	d5, d5, d6
 8010ee8:	ee36 3b04 	vadd.f64	d3, d6, d4
 8010eec:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010ef0:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010ef4:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010ef8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010efc:	ee36 6b03 	vadd.f64	d6, d6, d3
 8010f00:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010f04:	eeb5 6b40 	vcmp.f64	d6, #0.0
 8010f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0c:	d101      	bne.n	8010f12 <exp+0x18a>
 8010f0e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8010f50 <exp+0x1c8>
 8010f12:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010f16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f1a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010f1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010f22:	ee26 0b00 	vmul.f64	d0, d6, d0
 8010f26:	b007      	add	sp, #28
 8010f28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f2c:	f000 b98b 	b.w	8011246 <__math_check_uflow>
 8010f30:	ec4b ab10 	vmov	d0, sl, fp
 8010f34:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010f38:	e73c      	b.n	8010db4 <exp+0x2c>
 8010f3a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010f50 <exp+0x1c8>
 8010f3e:	e739      	b.n	8010db4 <exp+0x2c>
 8010f40:	00000000 	.word	0x00000000
 8010f44:	7f000000 	.word	0x7f000000
 8010f48:	00000000 	.word	0x00000000
 8010f4c:	00100000 	.word	0x00100000
	...
 8010f58:	fff00000 	.word	0xfff00000
 8010f5c:	0801b4f8 	.word	0x0801b4f8
 8010f60:	c0f00000 	.word	0xc0f00000
 8010f64:	3fe00000 	.word	0x3fe00000

08010f68 <log>:
 8010f68:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8010f6c:	ed2d 8b02 	vpush	{d8}
 8010f70:	b082      	sub	sp, #8
 8010f72:	ed8d 0b00 	vstr	d0, [sp]
 8010f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f7a:	2600      	movs	r6, #0
 8010f7c:	1994      	adds	r4, r2, r6
 8010f7e:	4e80      	ldr	r6, [pc, #512]	; (8011180 <log+0x218>)
 8010f80:	4f80      	ldr	r7, [pc, #512]	; (8011184 <log+0x21c>)
 8010f82:	eb43 0506 	adc.w	r5, r3, r6
 8010f86:	42af      	cmp	r7, r5
 8010f88:	f04f 36ff 	mov.w	r6, #4294967295
 8010f8c:	bf08      	it	eq
 8010f8e:	42a6      	cmpeq	r6, r4
 8010f90:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8010f94:	d363      	bcc.n	801105e <log+0xf6>
 8010f96:	497c      	ldr	r1, [pc, #496]	; (8011188 <log+0x220>)
 8010f98:	2000      	movs	r0, #0
 8010f9a:	428b      	cmp	r3, r1
 8010f9c:	bf08      	it	eq
 8010f9e:	4282      	cmpeq	r2, r0
 8010fa0:	f000 80de 	beq.w	8011160 <log+0x1f8>
 8010fa4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010fa8:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010fac:	4b77      	ldr	r3, [pc, #476]	; (801118c <log+0x224>)
 8010fae:	ee27 1b07 	vmul.f64	d1, d7, d7
 8010fb2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8010fb6:	ee27 3b01 	vmul.f64	d3, d7, d1
 8010fba:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8010fbe:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010fc2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8010fc6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8010fca:	eea6 4b01 	vfma.f64	d4, d6, d1
 8010fce:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8010fd2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010fd6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8010fda:	eea5 6b01 	vfma.f64	d6, d5, d1
 8010fde:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8010fe2:	eeb0 2b46 	vmov.f64	d2, d6
 8010fe6:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8010fea:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010fee:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 8010ff2:	eea5 6b01 	vfma.f64	d6, d5, d1
 8010ff6:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8010ffa:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 8010ffe:	eea5 6b03 	vfma.f64	d6, d5, d3
 8011002:	eea6 2b03 	vfma.f64	d2, d6, d3
 8011006:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8011168 <log+0x200>
 801100a:	eea2 4b03 	vfma.f64	d4, d2, d3
 801100e:	eeb0 2b47 	vmov.f64	d2, d7
 8011012:	eea7 2b06 	vfma.f64	d2, d7, d6
 8011016:	eea7 2b46 	vfms.f64	d2, d7, d6
 801101a:	eeb0 6b47 	vmov.f64	d6, d7
 801101e:	ee37 8b42 	vsub.f64	d8, d7, d2
 8011022:	ee22 0b02 	vmul.f64	d0, d2, d2
 8011026:	eea0 6b01 	vfma.f64	d6, d0, d1
 801102a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801102e:	ee37 7b02 	vadd.f64	d7, d7, d2
 8011032:	eea0 5b01 	vfma.f64	d5, d0, d1
 8011036:	ee21 1b08 	vmul.f64	d1, d1, d8
 801103a:	eea1 5b07 	vfma.f64	d5, d1, d7
 801103e:	eeb0 7b45 	vmov.f64	d7, d5
 8011042:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011046:	ee36 7b07 	vadd.f64	d7, d6, d7
 801104a:	ed8d 7b00 	vstr	d7, [sp]
 801104e:	ed9d 0b00 	vldr	d0, [sp]
 8011052:	b002      	add	sp, #8
 8011054:	ecbd 8b02 	vpop	{d8}
 8011058:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801105c:	4770      	bx	lr
 801105e:	f1ac 0510 	sub.w	r5, ip, #16
 8011062:	f647 74df 	movw	r4, #32735	; 0x7fdf
 8011066:	42a5      	cmp	r5, r4
 8011068:	d930      	bls.n	80110cc <log+0x164>
 801106a:	1890      	adds	r0, r2, r2
 801106c:	eb43 0103 	adc.w	r1, r3, r3
 8011070:	4301      	orrs	r1, r0
 8011072:	d107      	bne.n	8011084 <log+0x11c>
 8011074:	2001      	movs	r0, #1
 8011076:	b002      	add	sp, #8
 8011078:	ecbd 8b02 	vpop	{d8}
 801107c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8011080:	f000 b8ba 	b.w	80111f8 <__math_divzero>
 8011084:	4942      	ldr	r1, [pc, #264]	; (8011190 <log+0x228>)
 8011086:	2000      	movs	r0, #0
 8011088:	428b      	cmp	r3, r1
 801108a:	bf08      	it	eq
 801108c:	4282      	cmpeq	r2, r0
 801108e:	d0de      	beq.n	801104e <log+0xe6>
 8011090:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8011094:	d104      	bne.n	80110a0 <log+0x138>
 8011096:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 801109a:	ea31 010c 	bics.w	r1, r1, ip
 801109e:	d108      	bne.n	80110b2 <log+0x14a>
 80110a0:	ed9d 0b00 	vldr	d0, [sp]
 80110a4:	b002      	add	sp, #8
 80110a6:	ecbd 8b02 	vpop	{d8}
 80110aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80110ae:	f000 b8bb 	b.w	8011228 <__math_invalid>
 80110b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011170 <log+0x208>
 80110b6:	ed9d 6b00 	vldr	d6, [sp]
 80110ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80110be:	ec56 5b17 	vmov	r5, r6, d7
 80110c2:	4834      	ldr	r0, [pc, #208]	; (8011194 <log+0x22c>)
 80110c4:	2400      	movs	r4, #0
 80110c6:	192a      	adds	r2, r5, r4
 80110c8:	eb46 0300 	adc.w	r3, r6, r0
 80110cc:	2100      	movs	r1, #0
 80110ce:	1851      	adds	r1, r2, r1
 80110d0:	4931      	ldr	r1, [pc, #196]	; (8011198 <log+0x230>)
 80110d2:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80110d6:	eb43 0101 	adc.w	r1, r3, r1
 80110da:	0d0c      	lsrs	r4, r1, #20
 80110dc:	2500      	movs	r5, #0
 80110de:	ebb2 0805 	subs.w	r8, r2, r5
 80110e2:	ea4f 5404 	mov.w	r4, r4, lsl #20
 80110e6:	eb63 0904 	sbc.w	r9, r3, r4
 80110ea:	4b28      	ldr	r3, [pc, #160]	; (801118c <log+0x224>)
 80110ec:	f3c1 3046 	ubfx	r0, r1, #13, #7
 80110f0:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 80110f4:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 80110f8:	ec49 8b16 	vmov	d6, r8, r9
 80110fc:	1509      	asrs	r1, r1, #20
 80110fe:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011102:	ee07 1a90 	vmov	s15, r1
 8011106:	ee24 1b04 	vmul.f64	d1, d4, d4
 801110a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801110e:	ed93 5b00 	vldr	d5, [r3]
 8011112:	ee24 0b01 	vmul.f64	d0, d4, d1
 8011116:	ed93 3b02 	vldr	d3, [r3, #8]
 801111a:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 801111e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011122:	ee34 5b07 	vadd.f64	d5, d4, d7
 8011126:	ee37 7b45 	vsub.f64	d7, d7, d5
 801112a:	ee37 7b04 	vadd.f64	d7, d7, d4
 801112e:	eea3 7b06 	vfma.f64	d7, d3, d6
 8011132:	ed93 6b04 	vldr	d6, [r3, #16]
 8011136:	ed93 3b08 	vldr	d3, [r3, #32]
 801113a:	eea6 7b01 	vfma.f64	d7, d6, d1
 801113e:	ed93 6b06 	vldr	d6, [r3, #24]
 8011142:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8011146:	eea3 6b04 	vfma.f64	d6, d3, d4
 801114a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801114e:	eea2 3b04 	vfma.f64	d3, d2, d4
 8011152:	eea3 6b01 	vfma.f64	d6, d3, d1
 8011156:	eea0 7b06 	vfma.f64	d7, d0, d6
 801115a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801115e:	e774      	b.n	801104a <log+0xe2>
 8011160:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8011178 <log+0x210>
 8011164:	e771      	b.n	801104a <log+0xe2>
 8011166:	bf00      	nop
 8011168:	00000000 	.word	0x00000000
 801116c:	41a00000 	.word	0x41a00000
 8011170:	00000000 	.word	0x00000000
 8011174:	43300000 	.word	0x43300000
	...
 8011180:	c0120000 	.word	0xc0120000
 8011184:	000308ff 	.word	0x000308ff
 8011188:	3ff00000 	.word	0x3ff00000
 801118c:	0801bd68 	.word	0x0801bd68
 8011190:	7ff00000 	.word	0x7ff00000
 8011194:	fcc00000 	.word	0xfcc00000
 8011198:	c01a0000 	.word	0xc01a0000

0801119c <with_errno>:
 801119c:	b513      	push	{r0, r1, r4, lr}
 801119e:	4604      	mov	r4, r0
 80111a0:	ed8d 0b00 	vstr	d0, [sp]
 80111a4:	f7fc ff98 	bl	800e0d8 <__errno>
 80111a8:	ed9d 0b00 	vldr	d0, [sp]
 80111ac:	6004      	str	r4, [r0, #0]
 80111ae:	b002      	add	sp, #8
 80111b0:	bd10      	pop	{r4, pc}

080111b2 <xflow>:
 80111b2:	b082      	sub	sp, #8
 80111b4:	b158      	cbz	r0, 80111ce <xflow+0x1c>
 80111b6:	eeb1 7b40 	vneg.f64	d7, d0
 80111ba:	ed8d 7b00 	vstr	d7, [sp]
 80111be:	ed9d 7b00 	vldr	d7, [sp]
 80111c2:	2022      	movs	r0, #34	; 0x22
 80111c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80111c8:	b002      	add	sp, #8
 80111ca:	f7ff bfe7 	b.w	801119c <with_errno>
 80111ce:	eeb0 7b40 	vmov.f64	d7, d0
 80111d2:	e7f2      	b.n	80111ba <xflow+0x8>
 80111d4:	0000      	movs	r0, r0
	...

080111d8 <__math_uflow>:
 80111d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80111e0 <__math_uflow+0x8>
 80111dc:	f7ff bfe9 	b.w	80111b2 <xflow>
 80111e0:	00000000 	.word	0x00000000
 80111e4:	10000000 	.word	0x10000000

080111e8 <__math_oflow>:
 80111e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80111f0 <__math_oflow+0x8>
 80111ec:	f7ff bfe1 	b.w	80111b2 <xflow>
 80111f0:	00000000 	.word	0x00000000
 80111f4:	70000000 	.word	0x70000000

080111f8 <__math_divzero>:
 80111f8:	b082      	sub	sp, #8
 80111fa:	2800      	cmp	r0, #0
 80111fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011200:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011204:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011208:	ed8d 7b00 	vstr	d7, [sp]
 801120c:	ed9d 0b00 	vldr	d0, [sp]
 8011210:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011220 <__math_divzero+0x28>
 8011214:	2022      	movs	r0, #34	; 0x22
 8011216:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801121a:	b002      	add	sp, #8
 801121c:	f7ff bfbe 	b.w	801119c <with_errno>
	...

08011228 <__math_invalid>:
 8011228:	eeb0 7b40 	vmov.f64	d7, d0
 801122c:	eeb4 7b47 	vcmp.f64	d7, d7
 8011230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011234:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011238:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801123c:	d602      	bvs.n	8011244 <__math_invalid+0x1c>
 801123e:	2021      	movs	r0, #33	; 0x21
 8011240:	f7ff bfac 	b.w	801119c <with_errno>
 8011244:	4770      	bx	lr

08011246 <__math_check_uflow>:
 8011246:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124e:	d102      	bne.n	8011256 <__math_check_uflow+0x10>
 8011250:	2022      	movs	r0, #34	; 0x22
 8011252:	f7ff bfa3 	b.w	801119c <with_errno>
 8011256:	4770      	bx	lr

08011258 <__math_check_oflow>:
 8011258:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011278 <__math_check_oflow+0x20>
 801125c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011260:	eeb4 7b46 	vcmp.f64	d7, d6
 8011264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011268:	dd02      	ble.n	8011270 <__math_check_oflow+0x18>
 801126a:	2022      	movs	r0, #34	; 0x22
 801126c:	f7ff bf96 	b.w	801119c <with_errno>
 8011270:	4770      	bx	lr
 8011272:	bf00      	nop
 8011274:	f3af 8000 	nop.w
 8011278:	ffffffff 	.word	0xffffffff
 801127c:	7fefffff 	.word	0x7fefffff

08011280 <cos>:
 8011280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011282:	eeb0 7b40 	vmov.f64	d7, d0
 8011286:	ee17 3a90 	vmov	r3, s15
 801128a:	4a1f      	ldr	r2, [pc, #124]	; (8011308 <cos+0x88>)
 801128c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011290:	4293      	cmp	r3, r2
 8011292:	dc04      	bgt.n	801129e <cos+0x1e>
 8011294:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011300 <cos+0x80>
 8011298:	f000 fa72 	bl	8011780 <__kernel_cos>
 801129c:	e004      	b.n	80112a8 <cos+0x28>
 801129e:	4a1b      	ldr	r2, [pc, #108]	; (801130c <cos+0x8c>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	dd04      	ble.n	80112ae <cos+0x2e>
 80112a4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80112a8:	b005      	add	sp, #20
 80112aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80112ae:	4668      	mov	r0, sp
 80112b0:	f000 f926 	bl	8011500 <__ieee754_rem_pio2>
 80112b4:	f000 0003 	and.w	r0, r0, #3
 80112b8:	2801      	cmp	r0, #1
 80112ba:	d007      	beq.n	80112cc <cos+0x4c>
 80112bc:	2802      	cmp	r0, #2
 80112be:	d00e      	beq.n	80112de <cos+0x5e>
 80112c0:	b9a0      	cbnz	r0, 80112ec <cos+0x6c>
 80112c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112c6:	ed9d 0b00 	vldr	d0, [sp]
 80112ca:	e7e5      	b.n	8011298 <cos+0x18>
 80112cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112d0:	ed9d 0b00 	vldr	d0, [sp]
 80112d4:	f000 fd40 	bl	8011d58 <__kernel_sin>
 80112d8:	eeb1 0b40 	vneg.f64	d0, d0
 80112dc:	e7e4      	b.n	80112a8 <cos+0x28>
 80112de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112e2:	ed9d 0b00 	vldr	d0, [sp]
 80112e6:	f000 fa4b 	bl	8011780 <__kernel_cos>
 80112ea:	e7f5      	b.n	80112d8 <cos+0x58>
 80112ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112f0:	ed9d 0b00 	vldr	d0, [sp]
 80112f4:	2001      	movs	r0, #1
 80112f6:	f000 fd2f 	bl	8011d58 <__kernel_sin>
 80112fa:	e7d5      	b.n	80112a8 <cos+0x28>
 80112fc:	f3af 8000 	nop.w
	...
 8011308:	3fe921fb 	.word	0x3fe921fb
 801130c:	7fefffff 	.word	0x7fefffff

08011310 <sin>:
 8011310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011312:	eeb0 7b40 	vmov.f64	d7, d0
 8011316:	ee17 3a90 	vmov	r3, s15
 801131a:	4a1f      	ldr	r2, [pc, #124]	; (8011398 <sin+0x88>)
 801131c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011320:	4293      	cmp	r3, r2
 8011322:	dc05      	bgt.n	8011330 <sin+0x20>
 8011324:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8011390 <sin+0x80>
 8011328:	2000      	movs	r0, #0
 801132a:	f000 fd15 	bl	8011d58 <__kernel_sin>
 801132e:	e004      	b.n	801133a <sin+0x2a>
 8011330:	4a1a      	ldr	r2, [pc, #104]	; (801139c <sin+0x8c>)
 8011332:	4293      	cmp	r3, r2
 8011334:	dd04      	ble.n	8011340 <sin+0x30>
 8011336:	ee30 0b40 	vsub.f64	d0, d0, d0
 801133a:	b005      	add	sp, #20
 801133c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011340:	4668      	mov	r0, sp
 8011342:	f000 f8dd 	bl	8011500 <__ieee754_rem_pio2>
 8011346:	f000 0003 	and.w	r0, r0, #3
 801134a:	2801      	cmp	r0, #1
 801134c:	d008      	beq.n	8011360 <sin+0x50>
 801134e:	2802      	cmp	r0, #2
 8011350:	d00d      	beq.n	801136e <sin+0x5e>
 8011352:	b9b0      	cbnz	r0, 8011382 <sin+0x72>
 8011354:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011358:	ed9d 0b00 	vldr	d0, [sp]
 801135c:	2001      	movs	r0, #1
 801135e:	e7e4      	b.n	801132a <sin+0x1a>
 8011360:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011364:	ed9d 0b00 	vldr	d0, [sp]
 8011368:	f000 fa0a 	bl	8011780 <__kernel_cos>
 801136c:	e7e5      	b.n	801133a <sin+0x2a>
 801136e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011372:	ed9d 0b00 	vldr	d0, [sp]
 8011376:	2001      	movs	r0, #1
 8011378:	f000 fcee 	bl	8011d58 <__kernel_sin>
 801137c:	eeb1 0b40 	vneg.f64	d0, d0
 8011380:	e7db      	b.n	801133a <sin+0x2a>
 8011382:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011386:	ed9d 0b00 	vldr	d0, [sp]
 801138a:	f000 f9f9 	bl	8011780 <__kernel_cos>
 801138e:	e7f5      	b.n	801137c <sin+0x6c>
	...
 8011398:	3fe921fb 	.word	0x3fe921fb
 801139c:	7fefffff 	.word	0x7fefffff

080113a0 <log10>:
 80113a0:	b508      	push	{r3, lr}
 80113a2:	ed2d 8b02 	vpush	{d8}
 80113a6:	eeb0 8b40 	vmov.f64	d8, d0
 80113aa:	f000 f831 	bl	8011410 <__ieee754_log10>
 80113ae:	4b16      	ldr	r3, [pc, #88]	; (8011408 <log10+0x68>)
 80113b0:	f993 3000 	ldrsb.w	r3, [r3]
 80113b4:	3301      	adds	r3, #1
 80113b6:	d014      	beq.n	80113e2 <log10+0x42>
 80113b8:	eeb4 8b48 	vcmp.f64	d8, d8
 80113bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c0:	d60f      	bvs.n	80113e2 <log10+0x42>
 80113c2:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80113c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ca:	d80a      	bhi.n	80113e2 <log10+0x42>
 80113cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80113d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d4:	d108      	bne.n	80113e8 <log10+0x48>
 80113d6:	f7fc fe7f 	bl	800e0d8 <__errno>
 80113da:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011400 <log10+0x60>
 80113de:	2322      	movs	r3, #34	; 0x22
 80113e0:	6003      	str	r3, [r0, #0]
 80113e2:	ecbd 8b02 	vpop	{d8}
 80113e6:	bd08      	pop	{r3, pc}
 80113e8:	f7fc fe76 	bl	800e0d8 <__errno>
 80113ec:	ecbd 8b02 	vpop	{d8}
 80113f0:	2321      	movs	r3, #33	; 0x21
 80113f2:	6003      	str	r3, [r0, #0]
 80113f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113f8:	4804      	ldr	r0, [pc, #16]	; (801140c <log10+0x6c>)
 80113fa:	f000 bd85 	b.w	8011f08 <nan>
 80113fe:	bf00      	nop
 8011400:	00000000 	.word	0x00000000
 8011404:	fff00000 	.word	0xfff00000
 8011408:	240005dc 	.word	0x240005dc
 801140c:	0801b388 	.word	0x0801b388

08011410 <__ieee754_log10>:
 8011410:	b510      	push	{r4, lr}
 8011412:	ed2d 8b02 	vpush	{d8}
 8011416:	b082      	sub	sp, #8
 8011418:	ed8d 0b00 	vstr	d0, [sp]
 801141c:	9b01      	ldr	r3, [sp, #4]
 801141e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011422:	da28      	bge.n	8011476 <__ieee754_log10+0x66>
 8011424:	9900      	ldr	r1, [sp, #0]
 8011426:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801142a:	430a      	orrs	r2, r1
 801142c:	d109      	bne.n	8011442 <__ieee754_log10+0x32>
 801142e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80114c8 <__ieee754_log10+0xb8>
 8011432:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80114d0 <__ieee754_log10+0xc0>
 8011436:	ee86 0b07 	vdiv.f64	d0, d6, d7
 801143a:	b002      	add	sp, #8
 801143c:	ecbd 8b02 	vpop	{d8}
 8011440:	bd10      	pop	{r4, pc}
 8011442:	2b00      	cmp	r3, #0
 8011444:	da04      	bge.n	8011450 <__ieee754_log10+0x40>
 8011446:	ed9d 7b00 	vldr	d7, [sp]
 801144a:	ee37 6b47 	vsub.f64	d6, d7, d7
 801144e:	e7f0      	b.n	8011432 <__ieee754_log10+0x22>
 8011450:	ed9d 6b00 	vldr	d6, [sp]
 8011454:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80114d8 <__ieee754_log10+0xc8>
 8011458:	ee26 7b07 	vmul.f64	d7, d6, d7
 801145c:	ed8d 7b00 	vstr	d7, [sp]
 8011460:	9b01      	ldr	r3, [sp, #4]
 8011462:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011466:	4924      	ldr	r1, [pc, #144]	; (80114f8 <__ieee754_log10+0xe8>)
 8011468:	428b      	cmp	r3, r1
 801146a:	dd06      	ble.n	801147a <__ieee754_log10+0x6a>
 801146c:	ed9d 7b00 	vldr	d7, [sp]
 8011470:	ee37 0b07 	vadd.f64	d0, d7, d7
 8011474:	e7e1      	b.n	801143a <__ieee754_log10+0x2a>
 8011476:	2200      	movs	r2, #0
 8011478:	e7f5      	b.n	8011466 <__ieee754_log10+0x56>
 801147a:	1518      	asrs	r0, r3, #20
 801147c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011480:	4410      	add	r0, r2
 8011482:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8011486:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 801148a:	ee08 3a10 	vmov	s16, r3
 801148e:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8011492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011496:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 801149a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801149e:	ec43 2b10 	vmov	d0, r2, r3
 80114a2:	f7ff fd61 	bl	8010f68 <log>
 80114a6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80114e0 <__ieee754_log10+0xd0>
 80114aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80114ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80114e8 <__ieee754_log10+0xd8>
 80114b2:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 80114b6:	eea8 0b07 	vfma.f64	d0, d8, d7
 80114ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80114f0 <__ieee754_log10+0xe0>
 80114be:	eea8 0b07 	vfma.f64	d0, d8, d7
 80114c2:	e7ba      	b.n	801143a <__ieee754_log10+0x2a>
 80114c4:	f3af 8000 	nop.w
 80114c8:	00000000 	.word	0x00000000
 80114cc:	c3500000 	.word	0xc3500000
	...
 80114dc:	43500000 	.word	0x43500000
 80114e0:	1526e50e 	.word	0x1526e50e
 80114e4:	3fdbcb7b 	.word	0x3fdbcb7b
 80114e8:	11f12b36 	.word	0x11f12b36
 80114ec:	3d59fef3 	.word	0x3d59fef3
 80114f0:	509f6000 	.word	0x509f6000
 80114f4:	3fd34413 	.word	0x3fd34413
 80114f8:	7fefffff 	.word	0x7fefffff
 80114fc:	00000000 	.word	0x00000000

08011500 <__ieee754_rem_pio2>:
 8011500:	b570      	push	{r4, r5, r6, lr}
 8011502:	eeb0 7b40 	vmov.f64	d7, d0
 8011506:	ee17 5a90 	vmov	r5, s15
 801150a:	4b97      	ldr	r3, [pc, #604]	; (8011768 <__ieee754_rem_pio2+0x268>)
 801150c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011510:	429e      	cmp	r6, r3
 8011512:	b088      	sub	sp, #32
 8011514:	4604      	mov	r4, r0
 8011516:	dc07      	bgt.n	8011528 <__ieee754_rem_pio2+0x28>
 8011518:	2200      	movs	r2, #0
 801151a:	2300      	movs	r3, #0
 801151c:	ed84 0b00 	vstr	d0, [r4]
 8011520:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011524:	2000      	movs	r0, #0
 8011526:	e01b      	b.n	8011560 <__ieee754_rem_pio2+0x60>
 8011528:	4b90      	ldr	r3, [pc, #576]	; (801176c <__ieee754_rem_pio2+0x26c>)
 801152a:	429e      	cmp	r6, r3
 801152c:	dc3b      	bgt.n	80115a6 <__ieee754_rem_pio2+0xa6>
 801152e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8011532:	2d00      	cmp	r5, #0
 8011534:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011728 <__ieee754_rem_pio2+0x228>
 8011538:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801153c:	dd19      	ble.n	8011572 <__ieee754_rem_pio2+0x72>
 801153e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011542:	429e      	cmp	r6, r3
 8011544:	d00e      	beq.n	8011564 <__ieee754_rem_pio2+0x64>
 8011546:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011730 <__ieee754_rem_pio2+0x230>
 801154a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801154e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011552:	ed84 5b00 	vstr	d5, [r4]
 8011556:	ee37 7b46 	vsub.f64	d7, d7, d6
 801155a:	ed84 7b02 	vstr	d7, [r4, #8]
 801155e:	2001      	movs	r0, #1
 8011560:	b008      	add	sp, #32
 8011562:	bd70      	pop	{r4, r5, r6, pc}
 8011564:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011738 <__ieee754_rem_pio2+0x238>
 8011568:	ee37 7b46 	vsub.f64	d7, d7, d6
 801156c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011740 <__ieee754_rem_pio2+0x240>
 8011570:	e7eb      	b.n	801154a <__ieee754_rem_pio2+0x4a>
 8011572:	429e      	cmp	r6, r3
 8011574:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011578:	d00e      	beq.n	8011598 <__ieee754_rem_pio2+0x98>
 801157a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011730 <__ieee754_rem_pio2+0x230>
 801157e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011582:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011586:	ed84 5b00 	vstr	d5, [r4]
 801158a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801158e:	f04f 30ff 	mov.w	r0, #4294967295
 8011592:	ed84 7b02 	vstr	d7, [r4, #8]
 8011596:	e7e3      	b.n	8011560 <__ieee754_rem_pio2+0x60>
 8011598:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011738 <__ieee754_rem_pio2+0x238>
 801159c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80115a0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011740 <__ieee754_rem_pio2+0x240>
 80115a4:	e7eb      	b.n	801157e <__ieee754_rem_pio2+0x7e>
 80115a6:	4b72      	ldr	r3, [pc, #456]	; (8011770 <__ieee754_rem_pio2+0x270>)
 80115a8:	429e      	cmp	r6, r3
 80115aa:	dc6e      	bgt.n	801168a <__ieee754_rem_pio2+0x18a>
 80115ac:	f000 fc2c 	bl	8011e08 <fabs>
 80115b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80115b4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011748 <__ieee754_rem_pio2+0x248>
 80115b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80115bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80115c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80115c4:	ee17 0a90 	vmov	r0, s15
 80115c8:	eeb1 4b45 	vneg.f64	d4, d5
 80115cc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011728 <__ieee754_rem_pio2+0x228>
 80115d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80115d4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011730 <__ieee754_rem_pio2+0x230>
 80115d8:	281f      	cmp	r0, #31
 80115da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80115de:	ee30 6b47 	vsub.f64	d6, d0, d7
 80115e2:	dc08      	bgt.n	80115f6 <__ieee754_rem_pio2+0xf6>
 80115e4:	4b63      	ldr	r3, [pc, #396]	; (8011774 <__ieee754_rem_pio2+0x274>)
 80115e6:	1e42      	subs	r2, r0, #1
 80115e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ec:	42b3      	cmp	r3, r6
 80115ee:	d002      	beq.n	80115f6 <__ieee754_rem_pio2+0xf6>
 80115f0:	ed84 6b00 	vstr	d6, [r4]
 80115f4:	e024      	b.n	8011640 <__ieee754_rem_pio2+0x140>
 80115f6:	ee16 3a90 	vmov	r3, s13
 80115fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80115fe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8011602:	2b10      	cmp	r3, #16
 8011604:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011608:	ddf2      	ble.n	80115f0 <__ieee754_rem_pio2+0xf0>
 801160a:	eeb0 6b40 	vmov.f64	d6, d0
 801160e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011738 <__ieee754_rem_pio2+0x238>
 8011612:	eea4 6b03 	vfma.f64	d6, d4, d3
 8011616:	ee30 7b46 	vsub.f64	d7, d0, d6
 801161a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801161e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011740 <__ieee754_rem_pio2+0x240>
 8011622:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8011626:	ee36 3b47 	vsub.f64	d3, d6, d7
 801162a:	ee13 3a90 	vmov	r3, s7
 801162e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	2b31      	cmp	r3, #49	; 0x31
 8011636:	dc17      	bgt.n	8011668 <__ieee754_rem_pio2+0x168>
 8011638:	eeb0 0b46 	vmov.f64	d0, d6
 801163c:	ed84 3b00 	vstr	d3, [r4]
 8011640:	ed94 6b00 	vldr	d6, [r4]
 8011644:	2d00      	cmp	r5, #0
 8011646:	ee30 0b46 	vsub.f64	d0, d0, d6
 801164a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801164e:	ed84 7b02 	vstr	d7, [r4, #8]
 8011652:	da85      	bge.n	8011560 <__ieee754_rem_pio2+0x60>
 8011654:	eeb1 6b46 	vneg.f64	d6, d6
 8011658:	ed84 6b00 	vstr	d6, [r4]
 801165c:	eeb1 7b47 	vneg.f64	d7, d7
 8011660:	4240      	negs	r0, r0
 8011662:	ed84 7b02 	vstr	d7, [r4, #8]
 8011666:	e77b      	b.n	8011560 <__ieee754_rem_pio2+0x60>
 8011668:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011750 <__ieee754_rem_pio2+0x250>
 801166c:	eeb0 0b46 	vmov.f64	d0, d6
 8011670:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011674:	ee36 7b40 	vsub.f64	d7, d6, d0
 8011678:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011758 <__ieee754_rem_pio2+0x258>
 801167c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011680:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011684:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011688:	e7b2      	b.n	80115f0 <__ieee754_rem_pio2+0xf0>
 801168a:	4b3b      	ldr	r3, [pc, #236]	; (8011778 <__ieee754_rem_pio2+0x278>)
 801168c:	429e      	cmp	r6, r3
 801168e:	dd06      	ble.n	801169e <__ieee754_rem_pio2+0x19e>
 8011690:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011694:	ed80 7b02 	vstr	d7, [r0, #8]
 8011698:	ed80 7b00 	vstr	d7, [r0]
 801169c:	e742      	b.n	8011524 <__ieee754_rem_pio2+0x24>
 801169e:	1532      	asrs	r2, r6, #20
 80116a0:	ee10 0a10 	vmov	r0, s0
 80116a4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80116a8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80116ac:	ec41 0b17 	vmov	d7, r0, r1
 80116b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80116b4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011760 <__ieee754_rem_pio2+0x260>
 80116b8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80116bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80116c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80116c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80116c8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80116cc:	a902      	add	r1, sp, #8
 80116ce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80116d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80116d6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80116da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80116de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80116e2:	2603      	movs	r6, #3
 80116e4:	4608      	mov	r0, r1
 80116e6:	ed91 7b04 	vldr	d7, [r1, #16]
 80116ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116f2:	4633      	mov	r3, r6
 80116f4:	f1a1 0108 	sub.w	r1, r1, #8
 80116f8:	f106 36ff 	add.w	r6, r6, #4294967295
 80116fc:	d0f3      	beq.n	80116e6 <__ieee754_rem_pio2+0x1e6>
 80116fe:	491f      	ldr	r1, [pc, #124]	; (801177c <__ieee754_rem_pio2+0x27c>)
 8011700:	9101      	str	r1, [sp, #4]
 8011702:	2102      	movs	r1, #2
 8011704:	9100      	str	r1, [sp, #0]
 8011706:	4621      	mov	r1, r4
 8011708:	f000 f8a6 	bl	8011858 <__kernel_rem_pio2>
 801170c:	2d00      	cmp	r5, #0
 801170e:	f6bf af27 	bge.w	8011560 <__ieee754_rem_pio2+0x60>
 8011712:	ed94 7b00 	vldr	d7, [r4]
 8011716:	eeb1 7b47 	vneg.f64	d7, d7
 801171a:	ed84 7b00 	vstr	d7, [r4]
 801171e:	ed94 7b02 	vldr	d7, [r4, #8]
 8011722:	e79b      	b.n	801165c <__ieee754_rem_pio2+0x15c>
 8011724:	f3af 8000 	nop.w
 8011728:	54400000 	.word	0x54400000
 801172c:	3ff921fb 	.word	0x3ff921fb
 8011730:	1a626331 	.word	0x1a626331
 8011734:	3dd0b461 	.word	0x3dd0b461
 8011738:	1a600000 	.word	0x1a600000
 801173c:	3dd0b461 	.word	0x3dd0b461
 8011740:	2e037073 	.word	0x2e037073
 8011744:	3ba3198a 	.word	0x3ba3198a
 8011748:	6dc9c883 	.word	0x6dc9c883
 801174c:	3fe45f30 	.word	0x3fe45f30
 8011750:	2e000000 	.word	0x2e000000
 8011754:	3ba3198a 	.word	0x3ba3198a
 8011758:	252049c1 	.word	0x252049c1
 801175c:	397b839a 	.word	0x397b839a
 8011760:	00000000 	.word	0x00000000
 8011764:	41700000 	.word	0x41700000
 8011768:	3fe921fb 	.word	0x3fe921fb
 801176c:	4002d97b 	.word	0x4002d97b
 8011770:	413921fb 	.word	0x413921fb
 8011774:	0801c5f8 	.word	0x0801c5f8
 8011778:	7fefffff 	.word	0x7fefffff
 801177c:	0801c678 	.word	0x0801c678

08011780 <__kernel_cos>:
 8011780:	ee10 1a90 	vmov	r1, s1
 8011784:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801178c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011790:	da05      	bge.n	801179e <__kernel_cos+0x1e>
 8011792:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011796:	ee17 3a90 	vmov	r3, s15
 801179a:	2b00      	cmp	r3, #0
 801179c:	d03d      	beq.n	801181a <__kernel_cos+0x9a>
 801179e:	ee20 3b00 	vmul.f64	d3, d0, d0
 80117a2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011820 <__kernel_cos+0xa0>
 80117a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011828 <__kernel_cos+0xa8>
 80117aa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80117ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011830 <__kernel_cos+0xb0>
 80117b2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80117b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011838 <__kernel_cos+0xb8>
 80117ba:	eea7 6b03 	vfma.f64	d6, d7, d3
 80117be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011840 <__kernel_cos+0xc0>
 80117c2:	4b23      	ldr	r3, [pc, #140]	; (8011850 <__kernel_cos+0xd0>)
 80117c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80117c8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011848 <__kernel_cos+0xc8>
 80117cc:	4299      	cmp	r1, r3
 80117ce:	eea7 6b03 	vfma.f64	d6, d7, d3
 80117d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80117d6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80117da:	ee23 7b07 	vmul.f64	d7, d3, d7
 80117de:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80117e2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80117e6:	dc04      	bgt.n	80117f2 <__kernel_cos+0x72>
 80117e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80117ec:	ee34 0b46 	vsub.f64	d0, d4, d6
 80117f0:	4770      	bx	lr
 80117f2:	4b18      	ldr	r3, [pc, #96]	; (8011854 <__kernel_cos+0xd4>)
 80117f4:	4299      	cmp	r1, r3
 80117f6:	dc0d      	bgt.n	8011814 <__kernel_cos+0x94>
 80117f8:	2200      	movs	r2, #0
 80117fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80117fe:	ec43 2b15 	vmov	d5, r2, r3
 8011802:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011806:	ee37 7b45 	vsub.f64	d7, d7, d5
 801180a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801180e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011812:	4770      	bx	lr
 8011814:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011818:	e7f3      	b.n	8011802 <__kernel_cos+0x82>
 801181a:	eeb0 0b44 	vmov.f64	d0, d4
 801181e:	4770      	bx	lr
 8011820:	be8838d4 	.word	0xbe8838d4
 8011824:	bda8fae9 	.word	0xbda8fae9
 8011828:	bdb4b1c4 	.word	0xbdb4b1c4
 801182c:	3e21ee9e 	.word	0x3e21ee9e
 8011830:	809c52ad 	.word	0x809c52ad
 8011834:	be927e4f 	.word	0xbe927e4f
 8011838:	19cb1590 	.word	0x19cb1590
 801183c:	3efa01a0 	.word	0x3efa01a0
 8011840:	16c15177 	.word	0x16c15177
 8011844:	bf56c16c 	.word	0xbf56c16c
 8011848:	5555554c 	.word	0x5555554c
 801184c:	3fa55555 	.word	0x3fa55555
 8011850:	3fd33332 	.word	0x3fd33332
 8011854:	3fe90000 	.word	0x3fe90000

08011858 <__kernel_rem_pio2>:
 8011858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185c:	ed2d 8b06 	vpush	{d8-d10}
 8011860:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8011864:	469b      	mov	fp, r3
 8011866:	460f      	mov	r7, r1
 8011868:	4bcf      	ldr	r3, [pc, #828]	; (8011ba8 <__kernel_rem_pio2+0x350>)
 801186a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801186c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8011870:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8011874:	9000      	str	r0, [sp, #0]
 8011876:	f112 0f14 	cmn.w	r2, #20
 801187a:	bfa8      	it	ge
 801187c:	2318      	movge	r3, #24
 801187e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8011882:	bfb8      	it	lt
 8011884:	2300      	movlt	r3, #0
 8011886:	f06f 0417 	mvn.w	r4, #23
 801188a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011b90 <__kernel_rem_pio2+0x338>
 801188e:	bfa4      	itt	ge
 8011890:	f1a2 0a03 	subge.w	sl, r2, #3
 8011894:	fb9a f3f3 	sdivge	r3, sl, r3
 8011898:	fb03 4404 	mla	r4, r3, r4, r4
 801189c:	1a5d      	subs	r5, r3, r1
 801189e:	4414      	add	r4, r2
 80118a0:	eb09 0601 	add.w	r6, r9, r1
 80118a4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80118a8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80118ac:	2200      	movs	r2, #0
 80118ae:	42b2      	cmp	r2, r6
 80118b0:	dd12      	ble.n	80118d8 <__kernel_rem_pio2+0x80>
 80118b2:	aa18      	add	r2, sp, #96	; 0x60
 80118b4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80118b8:	460e      	mov	r6, r1
 80118ba:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80118be:	f1cb 0a01 	rsb	sl, fp, #1
 80118c2:	eb0a 0006 	add.w	r0, sl, r6
 80118c6:	4581      	cmp	r9, r0
 80118c8:	db25      	blt.n	8011916 <__kernel_rem_pio2+0xbe>
 80118ca:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011b90 <__kernel_rem_pio2+0x338>
 80118ce:	f8dd e000 	ldr.w	lr, [sp]
 80118d2:	4615      	mov	r5, r2
 80118d4:	2000      	movs	r0, #0
 80118d6:	e015      	b.n	8011904 <__kernel_rem_pio2+0xac>
 80118d8:	42d5      	cmn	r5, r2
 80118da:	d409      	bmi.n	80118f0 <__kernel_rem_pio2+0x98>
 80118dc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80118e0:	ee07 0a90 	vmov	s15, r0
 80118e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118e8:	eca8 7b02 	vstmia	r8!, {d7}
 80118ec:	3201      	adds	r2, #1
 80118ee:	e7de      	b.n	80118ae <__kernel_rem_pio2+0x56>
 80118f0:	eeb0 7b46 	vmov.f64	d7, d6
 80118f4:	e7f8      	b.n	80118e8 <__kernel_rem_pio2+0x90>
 80118f6:	ecbe 5b02 	vldmia	lr!, {d5}
 80118fa:	ed95 6b00 	vldr	d6, [r5]
 80118fe:	3001      	adds	r0, #1
 8011900:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011904:	4288      	cmp	r0, r1
 8011906:	f1a5 0508 	sub.w	r5, r5, #8
 801190a:	ddf4      	ble.n	80118f6 <__kernel_rem_pio2+0x9e>
 801190c:	eca8 7b02 	vstmia	r8!, {d7}
 8011910:	3208      	adds	r2, #8
 8011912:	3601      	adds	r6, #1
 8011914:	e7d5      	b.n	80118c2 <__kernel_rem_pio2+0x6a>
 8011916:	aa04      	add	r2, sp, #16
 8011918:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011b98 <__kernel_rem_pio2+0x340>
 801191c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011ba0 <__kernel_rem_pio2+0x348>
 8011920:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8011924:	9201      	str	r2, [sp, #4]
 8011926:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 801192a:	464e      	mov	r6, r9
 801192c:	ab90      	add	r3, sp, #576	; 0x240
 801192e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011932:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8011936:	ab04      	add	r3, sp, #16
 8011938:	4618      	mov	r0, r3
 801193a:	4632      	mov	r2, r6
 801193c:	2a00      	cmp	r2, #0
 801193e:	dc4e      	bgt.n	80119de <__kernel_rem_pio2+0x186>
 8011940:	4620      	mov	r0, r4
 8011942:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8011946:	f000 fae7 	bl	8011f18 <scalbn>
 801194a:	eeb0 8b40 	vmov.f64	d8, d0
 801194e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011952:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011956:	f000 fa63 	bl	8011e20 <floor>
 801195a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801195e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011962:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011966:	2c00      	cmp	r4, #0
 8011968:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801196c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8011970:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011974:	ee17 8a90 	vmov	r8, s15
 8011978:	dd46      	ble.n	8011a08 <__kernel_rem_pio2+0x1b0>
 801197a:	1e70      	subs	r0, r6, #1
 801197c:	aa04      	add	r2, sp, #16
 801197e:	f1c4 0c18 	rsb	ip, r4, #24
 8011982:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8011986:	fa45 f20c 	asr.w	r2, r5, ip
 801198a:	4490      	add	r8, r2
 801198c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011990:	1aad      	subs	r5, r5, r2
 8011992:	aa04      	add	r2, sp, #16
 8011994:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8011998:	f1c4 0217 	rsb	r2, r4, #23
 801199c:	4115      	asrs	r5, r2
 801199e:	2d00      	cmp	r5, #0
 80119a0:	dd41      	ble.n	8011a26 <__kernel_rem_pio2+0x1ce>
 80119a2:	f04f 0c00 	mov.w	ip, #0
 80119a6:	f108 0801 	add.w	r8, r8, #1
 80119aa:	4660      	mov	r0, ip
 80119ac:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80119b0:	4566      	cmp	r6, ip
 80119b2:	dc69      	bgt.n	8011a88 <__kernel_rem_pio2+0x230>
 80119b4:	2c00      	cmp	r4, #0
 80119b6:	dd03      	ble.n	80119c0 <__kernel_rem_pio2+0x168>
 80119b8:	2c01      	cmp	r4, #1
 80119ba:	d076      	beq.n	8011aaa <__kernel_rem_pio2+0x252>
 80119bc:	2c02      	cmp	r4, #2
 80119be:	d07f      	beq.n	8011ac0 <__kernel_rem_pio2+0x268>
 80119c0:	2d02      	cmp	r5, #2
 80119c2:	d130      	bne.n	8011a26 <__kernel_rem_pio2+0x1ce>
 80119c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80119c8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80119cc:	b358      	cbz	r0, 8011a26 <__kernel_rem_pio2+0x1ce>
 80119ce:	4620      	mov	r0, r4
 80119d0:	9102      	str	r1, [sp, #8]
 80119d2:	f000 faa1 	bl	8011f18 <scalbn>
 80119d6:	9902      	ldr	r1, [sp, #8]
 80119d8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80119dc:	e023      	b.n	8011a26 <__kernel_rem_pio2+0x1ce>
 80119de:	ee20 7b09 	vmul.f64	d7, d0, d9
 80119e2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80119e6:	3a01      	subs	r2, #1
 80119e8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80119ec:	ad68      	add	r5, sp, #416	; 0x1a0
 80119ee:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80119f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80119f6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80119fa:	eca0 0a01 	vstmia	r0!, {s0}
 80119fe:	ed95 0b00 	vldr	d0, [r5]
 8011a02:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011a06:	e799      	b.n	801193c <__kernel_rem_pio2+0xe4>
 8011a08:	d105      	bne.n	8011a16 <__kernel_rem_pio2+0x1be>
 8011a0a:	1e72      	subs	r2, r6, #1
 8011a0c:	a804      	add	r0, sp, #16
 8011a0e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8011a12:	15ed      	asrs	r5, r5, #23
 8011a14:	e7c3      	b.n	801199e <__kernel_rem_pio2+0x146>
 8011a16:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011a1a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a22:	da2f      	bge.n	8011a84 <__kernel_rem_pio2+0x22c>
 8011a24:	2500      	movs	r5, #0
 8011a26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a2e:	f040 8087 	bne.w	8011b40 <__kernel_rem_pio2+0x2e8>
 8011a32:	1e73      	subs	r3, r6, #1
 8011a34:	4618      	mov	r0, r3
 8011a36:	f04f 0c00 	mov.w	ip, #0
 8011a3a:	4548      	cmp	r0, r9
 8011a3c:	da47      	bge.n	8011ace <__kernel_rem_pio2+0x276>
 8011a3e:	f1bc 0f00 	cmp.w	ip, #0
 8011a42:	d070      	beq.n	8011b26 <__kernel_rem_pio2+0x2ce>
 8011a44:	aa04      	add	r2, sp, #16
 8011a46:	3c18      	subs	r4, #24
 8011a48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011a4c:	2a00      	cmp	r2, #0
 8011a4e:	d075      	beq.n	8011b3c <__kernel_rem_pio2+0x2e4>
 8011a50:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a54:	4620      	mov	r0, r4
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	f000 fa5e 	bl	8011f18 <scalbn>
 8011a5c:	9b00      	ldr	r3, [sp, #0]
 8011a5e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011b98 <__kernel_rem_pio2+0x340>
 8011a62:	461a      	mov	r2, r3
 8011a64:	2a00      	cmp	r2, #0
 8011a66:	f280 80ac 	bge.w	8011bc2 <__kernel_rem_pio2+0x36a>
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	2900      	cmp	r1, #0
 8011a70:	f2c0 80cd 	blt.w	8011c0e <__kernel_rem_pio2+0x3b6>
 8011a74:	aa68      	add	r2, sp, #416	; 0x1a0
 8011a76:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8011a7a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011b90 <__kernel_rem_pio2+0x338>
 8011a7e:	4e4b      	ldr	r6, [pc, #300]	; (8011bac <__kernel_rem_pio2+0x354>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	e0b8      	b.n	8011bf6 <__kernel_rem_pio2+0x39e>
 8011a84:	2502      	movs	r5, #2
 8011a86:	e78c      	b.n	80119a2 <__kernel_rem_pio2+0x14a>
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	b948      	cbnz	r0, 8011aa0 <__kernel_rem_pio2+0x248>
 8011a8c:	b11a      	cbz	r2, 8011a96 <__kernel_rem_pio2+0x23e>
 8011a8e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	2201      	movs	r2, #1
 8011a96:	f10c 0c01 	add.w	ip, ip, #1
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	4610      	mov	r0, r2
 8011a9e:	e787      	b.n	80119b0 <__kernel_rem_pio2+0x158>
 8011aa0:	ebae 0202 	sub.w	r2, lr, r2
 8011aa4:	601a      	str	r2, [r3, #0]
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	e7f5      	b.n	8011a96 <__kernel_rem_pio2+0x23e>
 8011aaa:	1e72      	subs	r2, r6, #1
 8011aac:	ab04      	add	r3, sp, #16
 8011aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011ab6:	f10d 0c10 	add.w	ip, sp, #16
 8011aba:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8011abe:	e77f      	b.n	80119c0 <__kernel_rem_pio2+0x168>
 8011ac0:	1e72      	subs	r2, r6, #1
 8011ac2:	ab04      	add	r3, sp, #16
 8011ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011acc:	e7f3      	b.n	8011ab6 <__kernel_rem_pio2+0x25e>
 8011ace:	aa04      	add	r2, sp, #16
 8011ad0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8011ad4:	3801      	subs	r0, #1
 8011ad6:	ea4c 0c02 	orr.w	ip, ip, r2
 8011ada:	e7ae      	b.n	8011a3a <__kernel_rem_pio2+0x1e2>
 8011adc:	3001      	adds	r0, #1
 8011ade:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011ae2:	2a00      	cmp	r2, #0
 8011ae4:	d0fa      	beq.n	8011adc <__kernel_rem_pio2+0x284>
 8011ae6:	eb06 020b 	add.w	r2, r6, fp
 8011aea:	ad18      	add	r5, sp, #96	; 0x60
 8011aec:	1c73      	adds	r3, r6, #1
 8011aee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011af2:	4406      	add	r6, r0
 8011af4:	429e      	cmp	r6, r3
 8011af6:	f6ff af19 	blt.w	801192c <__kernel_rem_pio2+0xd4>
 8011afa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011afe:	9d00      	ldr	r5, [sp, #0]
 8011b00:	ee07 0a90 	vmov	s15, r0
 8011b04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b08:	2000      	movs	r0, #0
 8011b0a:	eca2 7b02 	vstmia	r2!, {d7}
 8011b0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011b90 <__kernel_rem_pio2+0x338>
 8011b12:	4694      	mov	ip, r2
 8011b14:	4288      	cmp	r0, r1
 8011b16:	dd09      	ble.n	8011b2c <__kernel_rem_pio2+0x2d4>
 8011b18:	a868      	add	r0, sp, #416	; 0x1a0
 8011b1a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011b1e:	ed80 7b00 	vstr	d7, [r0]
 8011b22:	3301      	adds	r3, #1
 8011b24:	e7e6      	b.n	8011af4 <__kernel_rem_pio2+0x29c>
 8011b26:	9b01      	ldr	r3, [sp, #4]
 8011b28:	2001      	movs	r0, #1
 8011b2a:	e7d8      	b.n	8011ade <__kernel_rem_pio2+0x286>
 8011b2c:	ecb5 5b02 	vldmia	r5!, {d5}
 8011b30:	ed3c 6b02 	vldmdb	ip!, {d6}
 8011b34:	3001      	adds	r0, #1
 8011b36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011b3a:	e7eb      	b.n	8011b14 <__kernel_rem_pio2+0x2bc>
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	e781      	b.n	8011a44 <__kernel_rem_pio2+0x1ec>
 8011b40:	4260      	negs	r0, r4
 8011b42:	eeb0 0b48 	vmov.f64	d0, d8
 8011b46:	f000 f9e7 	bl	8011f18 <scalbn>
 8011b4a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011ba0 <__kernel_rem_pio2+0x348>
 8011b4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b56:	db2b      	blt.n	8011bb0 <__kernel_rem_pio2+0x358>
 8011b58:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011b98 <__kernel_rem_pio2+0x340>
 8011b5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011b60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011b64:	aa04      	add	r2, sp, #16
 8011b66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011b6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011b6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011b72:	a904      	add	r1, sp, #16
 8011b74:	ee10 3a10 	vmov	r3, s0
 8011b78:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011b7c:	ee17 2a10 	vmov	r2, s14
 8011b80:	1c73      	adds	r3, r6, #1
 8011b82:	3418      	adds	r4, #24
 8011b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011b88:	e762      	b.n	8011a50 <__kernel_rem_pio2+0x1f8>
 8011b8a:	bf00      	nop
 8011b8c:	f3af 8000 	nop.w
	...
 8011b9c:	3e700000 	.word	0x3e700000
 8011ba0:	00000000 	.word	0x00000000
 8011ba4:	41700000 	.word	0x41700000
 8011ba8:	0801c7c0 	.word	0x0801c7c0
 8011bac:	0801c780 	.word	0x0801c780
 8011bb0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011bb4:	aa04      	add	r2, sp, #16
 8011bb6:	ee10 3a10 	vmov	r3, s0
 8011bba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011bbe:	4633      	mov	r3, r6
 8011bc0:	e746      	b.n	8011a50 <__kernel_rem_pio2+0x1f8>
 8011bc2:	a804      	add	r0, sp, #16
 8011bc4:	a968      	add	r1, sp, #416	; 0x1a0
 8011bc6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011bca:	9000      	str	r0, [sp, #0]
 8011bcc:	ee07 0a90 	vmov	s15, r0
 8011bd0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011bd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011bd8:	3a01      	subs	r2, #1
 8011bda:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011bde:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011be2:	ed81 7b00 	vstr	d7, [r1]
 8011be6:	e73d      	b.n	8011a64 <__kernel_rem_pio2+0x20c>
 8011be8:	ecb6 5b02 	vldmia	r6!, {d5}
 8011bec:	ecb4 6b02 	vldmia	r4!, {d6}
 8011bf0:	3201      	adds	r2, #1
 8011bf2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011bf6:	454a      	cmp	r2, r9
 8011bf8:	dc01      	bgt.n	8011bfe <__kernel_rem_pio2+0x3a6>
 8011bfa:	4290      	cmp	r0, r2
 8011bfc:	daf4      	bge.n	8011be8 <__kernel_rem_pio2+0x390>
 8011bfe:	aa40      	add	r2, sp, #256	; 0x100
 8011c00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011c04:	ed82 7b00 	vstr	d7, [r2]
 8011c08:	3901      	subs	r1, #1
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	e72f      	b.n	8011a6e <__kernel_rem_pio2+0x216>
 8011c0e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011c10:	2a02      	cmp	r2, #2
 8011c12:	dc0a      	bgt.n	8011c2a <__kernel_rem_pio2+0x3d2>
 8011c14:	2a00      	cmp	r2, #0
 8011c16:	dc5a      	bgt.n	8011cce <__kernel_rem_pio2+0x476>
 8011c18:	d039      	beq.n	8011c8e <__kernel_rem_pio2+0x436>
 8011c1a:	f008 0007 	and.w	r0, r8, #7
 8011c1e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8011c22:	ecbd 8b06 	vpop	{d8-d10}
 8011c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011c2c:	2a03      	cmp	r2, #3
 8011c2e:	d1f4      	bne.n	8011c1a <__kernel_rem_pio2+0x3c2>
 8011c30:	aa40      	add	r2, sp, #256	; 0x100
 8011c32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c36:	4611      	mov	r1, r2
 8011c38:	4618      	mov	r0, r3
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	f1a1 0108 	sub.w	r1, r1, #8
 8011c40:	dc52      	bgt.n	8011ce8 <__kernel_rem_pio2+0x490>
 8011c42:	4619      	mov	r1, r3
 8011c44:	2901      	cmp	r1, #1
 8011c46:	f1a2 0208 	sub.w	r2, r2, #8
 8011c4a:	dc5d      	bgt.n	8011d08 <__kernel_rem_pio2+0x4b0>
 8011c4c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011d50 <__kernel_rem_pio2+0x4f8>
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	dc69      	bgt.n	8011d28 <__kernel_rem_pio2+0x4d0>
 8011c54:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011c58:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011c5c:	2d00      	cmp	r5, #0
 8011c5e:	d16c      	bne.n	8011d3a <__kernel_rem_pio2+0x4e2>
 8011c60:	ed87 5b00 	vstr	d5, [r7]
 8011c64:	ed87 6b02 	vstr	d6, [r7, #8]
 8011c68:	ed87 7b04 	vstr	d7, [r7, #16]
 8011c6c:	e7d5      	b.n	8011c1a <__kernel_rem_pio2+0x3c2>
 8011c6e:	aa40      	add	r2, sp, #256	; 0x100
 8011c70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c74:	ed92 6b00 	vldr	d6, [r2]
 8011c78:	3b01      	subs	r3, #1
 8011c7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	daf5      	bge.n	8011c6e <__kernel_rem_pio2+0x416>
 8011c82:	b10d      	cbz	r5, 8011c88 <__kernel_rem_pio2+0x430>
 8011c84:	eeb1 7b47 	vneg.f64	d7, d7
 8011c88:	ed87 7b00 	vstr	d7, [r7]
 8011c8c:	e7c5      	b.n	8011c1a <__kernel_rem_pio2+0x3c2>
 8011c8e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011d50 <__kernel_rem_pio2+0x4f8>
 8011c92:	e7f4      	b.n	8011c7e <__kernel_rem_pio2+0x426>
 8011c94:	a940      	add	r1, sp, #256	; 0x100
 8011c96:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011c9a:	ed91 7b00 	vldr	d7, [r1]
 8011c9e:	3a01      	subs	r2, #1
 8011ca0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011ca4:	2a00      	cmp	r2, #0
 8011ca6:	daf5      	bge.n	8011c94 <__kernel_rem_pio2+0x43c>
 8011ca8:	b1ad      	cbz	r5, 8011cd6 <__kernel_rem_pio2+0x47e>
 8011caa:	eeb1 7b46 	vneg.f64	d7, d6
 8011cae:	ed87 7b00 	vstr	d7, [r7]
 8011cb2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8011cb6:	a942      	add	r1, sp, #264	; 0x108
 8011cb8:	2201      	movs	r2, #1
 8011cba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	da0c      	bge.n	8011cdc <__kernel_rem_pio2+0x484>
 8011cc2:	b10d      	cbz	r5, 8011cc8 <__kernel_rem_pio2+0x470>
 8011cc4:	eeb1 7b47 	vneg.f64	d7, d7
 8011cc8:	ed87 7b02 	vstr	d7, [r7, #8]
 8011ccc:	e7a5      	b.n	8011c1a <__kernel_rem_pio2+0x3c2>
 8011cce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011d50 <__kernel_rem_pio2+0x4f8>
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	e7e6      	b.n	8011ca4 <__kernel_rem_pio2+0x44c>
 8011cd6:	eeb0 7b46 	vmov.f64	d7, d6
 8011cda:	e7e8      	b.n	8011cae <__kernel_rem_pio2+0x456>
 8011cdc:	ecb1 6b02 	vldmia	r1!, {d6}
 8011ce0:	3201      	adds	r2, #1
 8011ce2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011ce6:	e7ea      	b.n	8011cbe <__kernel_rem_pio2+0x466>
 8011ce8:	ed91 7b00 	vldr	d7, [r1]
 8011cec:	ed91 5b02 	vldr	d5, [r1, #8]
 8011cf0:	3801      	subs	r0, #1
 8011cf2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011cf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011cfa:	ed81 6b00 	vstr	d6, [r1]
 8011cfe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011d02:	ed81 7b02 	vstr	d7, [r1, #8]
 8011d06:	e798      	b.n	8011c3a <__kernel_rem_pio2+0x3e2>
 8011d08:	ed92 7b00 	vldr	d7, [r2]
 8011d0c:	ed92 5b02 	vldr	d5, [r2, #8]
 8011d10:	3901      	subs	r1, #1
 8011d12:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011d16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d1a:	ed82 6b00 	vstr	d6, [r2]
 8011d1e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011d22:	ed82 7b02 	vstr	d7, [r2, #8]
 8011d26:	e78d      	b.n	8011c44 <__kernel_rem_pio2+0x3ec>
 8011d28:	aa40      	add	r2, sp, #256	; 0x100
 8011d2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011d2e:	ed92 6b00 	vldr	d6, [r2]
 8011d32:	3b01      	subs	r3, #1
 8011d34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d38:	e78a      	b.n	8011c50 <__kernel_rem_pio2+0x3f8>
 8011d3a:	eeb1 5b45 	vneg.f64	d5, d5
 8011d3e:	eeb1 6b46 	vneg.f64	d6, d6
 8011d42:	ed87 5b00 	vstr	d5, [r7]
 8011d46:	eeb1 7b47 	vneg.f64	d7, d7
 8011d4a:	ed87 6b02 	vstr	d6, [r7, #8]
 8011d4e:	e78b      	b.n	8011c68 <__kernel_rem_pio2+0x410>
	...

08011d58 <__kernel_sin>:
 8011d58:	ee10 3a90 	vmov	r3, s1
 8011d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d60:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011d64:	da04      	bge.n	8011d70 <__kernel_sin+0x18>
 8011d66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011d6a:	ee17 3a90 	vmov	r3, s15
 8011d6e:	b35b      	cbz	r3, 8011dc8 <__kernel_sin+0x70>
 8011d70:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011d74:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011d78:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011dd0 <__kernel_sin+0x78>
 8011d7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011dd8 <__kernel_sin+0x80>
 8011d80:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011d84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011de0 <__kernel_sin+0x88>
 8011d88:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011d8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011de8 <__kernel_sin+0x90>
 8011d90:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011d94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011df0 <__kernel_sin+0x98>
 8011d98:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011d9c:	b930      	cbnz	r0, 8011dac <__kernel_sin+0x54>
 8011d9e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011df8 <__kernel_sin+0xa0>
 8011da2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011da6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011daa:	4770      	bx	lr
 8011dac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011db0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011db4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011db8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011dbc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011e00 <__kernel_sin+0xa8>
 8011dc0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011dc4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	f3af 8000 	nop.w
 8011dd0:	5acfd57c 	.word	0x5acfd57c
 8011dd4:	3de5d93a 	.word	0x3de5d93a
 8011dd8:	8a2b9ceb 	.word	0x8a2b9ceb
 8011ddc:	be5ae5e6 	.word	0xbe5ae5e6
 8011de0:	57b1fe7d 	.word	0x57b1fe7d
 8011de4:	3ec71de3 	.word	0x3ec71de3
 8011de8:	19c161d5 	.word	0x19c161d5
 8011dec:	bf2a01a0 	.word	0xbf2a01a0
 8011df0:	1110f8a6 	.word	0x1110f8a6
 8011df4:	3f811111 	.word	0x3f811111
 8011df8:	55555549 	.word	0x55555549
 8011dfc:	bfc55555 	.word	0xbfc55555
 8011e00:	55555549 	.word	0x55555549
 8011e04:	3fc55555 	.word	0x3fc55555

08011e08 <fabs>:
 8011e08:	ec51 0b10 	vmov	r0, r1, d0
 8011e0c:	ee10 2a10 	vmov	r2, s0
 8011e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e14:	ec43 2b10 	vmov	d0, r2, r3
 8011e18:	4770      	bx	lr
 8011e1a:	0000      	movs	r0, r0
 8011e1c:	0000      	movs	r0, r0
	...

08011e20 <floor>:
 8011e20:	ee10 1a90 	vmov	r1, s1
 8011e24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011e28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011e2c:	2b13      	cmp	r3, #19
 8011e2e:	b530      	push	{r4, r5, lr}
 8011e30:	ee10 0a10 	vmov	r0, s0
 8011e34:	ee10 5a10 	vmov	r5, s0
 8011e38:	dc31      	bgt.n	8011e9e <floor+0x7e>
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	da15      	bge.n	8011e6a <floor+0x4a>
 8011e3e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011ef8 <floor+0xd8>
 8011e42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4e:	dd07      	ble.n	8011e60 <floor+0x40>
 8011e50:	2900      	cmp	r1, #0
 8011e52:	da4e      	bge.n	8011ef2 <floor+0xd2>
 8011e54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e58:	4318      	orrs	r0, r3
 8011e5a:	d001      	beq.n	8011e60 <floor+0x40>
 8011e5c:	4928      	ldr	r1, [pc, #160]	; (8011f00 <floor+0xe0>)
 8011e5e:	2000      	movs	r0, #0
 8011e60:	460b      	mov	r3, r1
 8011e62:	4602      	mov	r2, r0
 8011e64:	ec43 2b10 	vmov	d0, r2, r3
 8011e68:	e020      	b.n	8011eac <floor+0x8c>
 8011e6a:	4a26      	ldr	r2, [pc, #152]	; (8011f04 <floor+0xe4>)
 8011e6c:	411a      	asrs	r2, r3
 8011e6e:	ea01 0402 	and.w	r4, r1, r2
 8011e72:	4304      	orrs	r4, r0
 8011e74:	d01a      	beq.n	8011eac <floor+0x8c>
 8011e76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011ef8 <floor+0xd8>
 8011e7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011e7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e86:	ddeb      	ble.n	8011e60 <floor+0x40>
 8011e88:	2900      	cmp	r1, #0
 8011e8a:	bfbe      	ittt	lt
 8011e8c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011e90:	fa40 f303 	asrlt.w	r3, r0, r3
 8011e94:	18c9      	addlt	r1, r1, r3
 8011e96:	ea21 0102 	bic.w	r1, r1, r2
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	e7e0      	b.n	8011e60 <floor+0x40>
 8011e9e:	2b33      	cmp	r3, #51	; 0x33
 8011ea0:	dd05      	ble.n	8011eae <floor+0x8e>
 8011ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ea6:	d101      	bne.n	8011eac <floor+0x8c>
 8011ea8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011eac:	bd30      	pop	{r4, r5, pc}
 8011eae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb6:	40e2      	lsrs	r2, r4
 8011eb8:	4202      	tst	r2, r0
 8011eba:	d0f7      	beq.n	8011eac <floor+0x8c>
 8011ebc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011ef8 <floor+0xd8>
 8011ec0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011ec4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ecc:	ddc8      	ble.n	8011e60 <floor+0x40>
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	da02      	bge.n	8011ed8 <floor+0xb8>
 8011ed2:	2b14      	cmp	r3, #20
 8011ed4:	d103      	bne.n	8011ede <floor+0xbe>
 8011ed6:	3101      	adds	r1, #1
 8011ed8:	ea20 0002 	bic.w	r0, r0, r2
 8011edc:	e7c0      	b.n	8011e60 <floor+0x40>
 8011ede:	2401      	movs	r4, #1
 8011ee0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011ee4:	fa04 f303 	lsl.w	r3, r4, r3
 8011ee8:	4418      	add	r0, r3
 8011eea:	42a8      	cmp	r0, r5
 8011eec:	bf38      	it	cc
 8011eee:	1909      	addcc	r1, r1, r4
 8011ef0:	e7f2      	b.n	8011ed8 <floor+0xb8>
 8011ef2:	2000      	movs	r0, #0
 8011ef4:	4601      	mov	r1, r0
 8011ef6:	e7b3      	b.n	8011e60 <floor+0x40>
 8011ef8:	8800759c 	.word	0x8800759c
 8011efc:	7e37e43c 	.word	0x7e37e43c
 8011f00:	bff00000 	.word	0xbff00000
 8011f04:	000fffff 	.word	0x000fffff

08011f08 <nan>:
 8011f08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f10 <nan+0x8>
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	00000000 	.word	0x00000000
 8011f14:	7ff80000 	.word	0x7ff80000

08011f18 <scalbn>:
 8011f18:	b082      	sub	sp, #8
 8011f1a:	ed8d 0b00 	vstr	d0, [sp]
 8011f1e:	9b01      	ldr	r3, [sp, #4]
 8011f20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011f24:	b9a2      	cbnz	r2, 8011f50 <scalbn+0x38>
 8011f26:	9a00      	ldr	r2, [sp, #0]
 8011f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	d03a      	beq.n	8011fa6 <scalbn+0x8e>
 8011f30:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8012008 <scalbn+0xf0>
 8011f34:	4b40      	ldr	r3, [pc, #256]	; (8012038 <scalbn+0x120>)
 8011f36:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011f3a:	4298      	cmp	r0, r3
 8011f3c:	ed8d 7b00 	vstr	d7, [sp]
 8011f40:	da11      	bge.n	8011f66 <scalbn+0x4e>
 8011f42:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8012010 <scalbn+0xf8>
 8011f46:	ed9d 6b00 	vldr	d6, [sp]
 8011f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f4e:	e007      	b.n	8011f60 <scalbn+0x48>
 8011f50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011f54:	428a      	cmp	r2, r1
 8011f56:	d10a      	bne.n	8011f6e <scalbn+0x56>
 8011f58:	ed9d 7b00 	vldr	d7, [sp]
 8011f5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f60:	ed8d 7b00 	vstr	d7, [sp]
 8011f64:	e01f      	b.n	8011fa6 <scalbn+0x8e>
 8011f66:	9b01      	ldr	r3, [sp, #4]
 8011f68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011f6c:	3a36      	subs	r2, #54	; 0x36
 8011f6e:	4402      	add	r2, r0
 8011f70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011f74:	428a      	cmp	r2, r1
 8011f76:	dd0a      	ble.n	8011f8e <scalbn+0x76>
 8011f78:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012018 <scalbn+0x100>
 8011f7c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012020 <scalbn+0x108>
 8011f80:	eeb0 6b47 	vmov.f64	d6, d7
 8011f84:	9b01      	ldr	r3, [sp, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011f8c:	e7dd      	b.n	8011f4a <scalbn+0x32>
 8011f8e:	2a00      	cmp	r2, #0
 8011f90:	dd0d      	ble.n	8011fae <scalbn+0x96>
 8011f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f9e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8011fa6:	ed9d 0b00 	vldr	d0, [sp]
 8011faa:	b002      	add	sp, #8
 8011fac:	4770      	bx	lr
 8011fae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011fb2:	da18      	bge.n	8011fe6 <scalbn+0xce>
 8011fb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011fb8:	4298      	cmp	r0, r3
 8011fba:	9b01      	ldr	r3, [sp, #4]
 8011fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fc0:	dd09      	ble.n	8011fd6 <scalbn+0xbe>
 8011fc2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012018 <scalbn+0x100>
 8011fc6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8012020 <scalbn+0x108>
 8011fca:	eeb0 6b47 	vmov.f64	d6, d7
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011fd4:	e7b9      	b.n	8011f4a <scalbn+0x32>
 8011fd6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012010 <scalbn+0xf8>
 8011fda:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8012028 <scalbn+0x110>
 8011fde:	eeb0 6b47 	vmov.f64	d6, d7
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	e7f4      	b.n	8011fd0 <scalbn+0xb8>
 8011fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011fee:	3236      	adds	r2, #54	; 0x36
 8011ff0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ff4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011ff8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8012030 <scalbn+0x118>
 8011ffc:	ec41 0b17 	vmov	d7, r0, r1
 8012000:	e7a3      	b.n	8011f4a <scalbn+0x32>
 8012002:	bf00      	nop
 8012004:	f3af 8000 	nop.w
 8012008:	00000000 	.word	0x00000000
 801200c:	43500000 	.word	0x43500000
 8012010:	c2f8f359 	.word	0xc2f8f359
 8012014:	01a56e1f 	.word	0x01a56e1f
 8012018:	8800759c 	.word	0x8800759c
 801201c:	7e37e43c 	.word	0x7e37e43c
 8012020:	8800759c 	.word	0x8800759c
 8012024:	fe37e43c 	.word	0xfe37e43c
 8012028:	c2f8f359 	.word	0xc2f8f359
 801202c:	81a56e1f 	.word	0x81a56e1f
 8012030:	00000000 	.word	0x00000000
 8012034:	3c900000 	.word	0x3c900000
 8012038:	ffff3cb0 	.word	0xffff3cb0

0801203c <_init>:
 801203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203e:	bf00      	nop
 8012040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012042:	bc08      	pop	{r3}
 8012044:	469e      	mov	lr, r3
 8012046:	4770      	bx	lr

08012048 <_fini>:
 8012048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801204a:	bf00      	nop
 801204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801204e:	bc08      	pop	{r3}
 8012050:	469e      	mov	lr, r3
 8012052:	4770      	bx	lr
