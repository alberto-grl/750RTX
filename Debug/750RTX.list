
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014894  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aa18  08014b38  08014b38  00024b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f550  0801f550  00051800  2**0
                  CONTENTS
  4 .ARM          00000008  0801f550  0801f550  0002f550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f558  0801f558  00051800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f558  0801f558  0002f558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f55c  0801f55c  0002f55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e4  24000000  0801f560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cffc  24000600  0801fb44  00030600  2**5
                  ALLOC
 10 ._user_heap_stack 00000644  2400d5fc  0801fb44  0003d5fc  2**0
                  ALLOC
 11 .dtcm         00011800  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00051800  2**0
                  CONTENTS, READONLY
 13 .debug_line   00046f69  00000000  00000000  0005182e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004655f  00000000  00000000  00098797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000080c0  00000000  00000000  000decf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be8  00000000  00000000  000e6db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018736d  00000000  00000000  000e89a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000316c2  00000000  00000000  0026fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00005648  00000000  00000000  002a13d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000a51d  00000000  00000000  002a6a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002b0f35  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000071e4  00000000  00000000  002b0f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000600 	.word	0x24000600
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014b1c 	.word	0x08014b1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000604 	.word	0x24000604
 80002dc:	08014b1c 	.word	0x08014b1c

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b974 	b.w	8000750 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468e      	mov	lr, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14d      	bne.n	800052a <__udivmoddi4+0xaa>
 800048e:	428a      	cmp	r2, r1
 8000490:	4694      	mov	ip, r2
 8000492:	d969      	bls.n	8000568 <__udivmoddi4+0xe8>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b152      	cbz	r2, 80004b0 <__udivmoddi4+0x30>
 800049a:	fa01 f302 	lsl.w	r3, r1, r2
 800049e:	f1c2 0120 	rsb	r1, r2, #32
 80004a2:	fa20 f101 	lsr.w	r1, r0, r1
 80004a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80004aa:	ea41 0e03 	orr.w	lr, r1, r3
 80004ae:	4094      	lsls	r4, r2
 80004b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b4:	0c21      	lsrs	r1, r4, #16
 80004b6:	fbbe f6f8 	udiv	r6, lr, r8
 80004ba:	fa1f f78c 	uxth.w	r7, ip
 80004be:	fb08 e316 	mls	r3, r8, r6, lr
 80004c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004c6:	fb06 f107 	mul.w	r1, r6, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004d6:	f080 811f 	bcs.w	8000718 <__udivmoddi4+0x298>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 811c 	bls.w	8000718 <__udivmoddi4+0x298>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a5b      	subs	r3, r3, r1
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004ec:	fb08 3310 	mls	r3, r8, r0, r3
 80004f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f4:	fb00 f707 	mul.w	r7, r0, r7
 80004f8:	42a7      	cmp	r7, r4
 80004fa:	d90a      	bls.n	8000512 <__udivmoddi4+0x92>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 33ff 	add.w	r3, r0, #4294967295
 8000504:	f080 810a 	bcs.w	800071c <__udivmoddi4+0x29c>
 8000508:	42a7      	cmp	r7, r4
 800050a:	f240 8107 	bls.w	800071c <__udivmoddi4+0x29c>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000516:	1be4      	subs	r4, r4, r7
 8000518:	2600      	movs	r6, #0
 800051a:	b11d      	cbz	r5, 8000524 <__udivmoddi4+0xa4>
 800051c:	40d4      	lsrs	r4, r2
 800051e:	2300      	movs	r3, #0
 8000520:	e9c5 4300 	strd	r4, r3, [r5]
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d909      	bls.n	8000542 <__udivmoddi4+0xc2>
 800052e:	2d00      	cmp	r5, #0
 8000530:	f000 80ef 	beq.w	8000712 <__udivmoddi4+0x292>
 8000534:	2600      	movs	r6, #0
 8000536:	e9c5 0100 	strd	r0, r1, [r5]
 800053a:	4630      	mov	r0, r6
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	fab3 f683 	clz	r6, r3
 8000546:	2e00      	cmp	r6, #0
 8000548:	d14a      	bne.n	80005e0 <__udivmoddi4+0x160>
 800054a:	428b      	cmp	r3, r1
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xd4>
 800054e:	4282      	cmp	r2, r0
 8000550:	f200 80f9 	bhi.w	8000746 <__udivmoddi4+0x2c6>
 8000554:	1a84      	subs	r4, r0, r2
 8000556:	eb61 0303 	sbc.w	r3, r1, r3
 800055a:	2001      	movs	r0, #1
 800055c:	469e      	mov	lr, r3
 800055e:	2d00      	cmp	r5, #0
 8000560:	d0e0      	beq.n	8000524 <__udivmoddi4+0xa4>
 8000562:	e9c5 4e00 	strd	r4, lr, [r5]
 8000566:	e7dd      	b.n	8000524 <__udivmoddi4+0xa4>
 8000568:	b902      	cbnz	r2, 800056c <__udivmoddi4+0xec>
 800056a:	deff      	udf	#255	; 0xff
 800056c:	fab2 f282 	clz	r2, r2
 8000570:	2a00      	cmp	r2, #0
 8000572:	f040 8092 	bne.w	800069a <__udivmoddi4+0x21a>
 8000576:	eba1 010c 	sub.w	r1, r1, ip
 800057a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800057e:	fa1f fe8c 	uxth.w	lr, ip
 8000582:	2601      	movs	r6, #1
 8000584:	0c20      	lsrs	r0, r4, #16
 8000586:	fbb1 f3f7 	udiv	r3, r1, r7
 800058a:	fb07 1113 	mls	r1, r7, r3, r1
 800058e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000592:	fb0e f003 	mul.w	r0, lr, r3
 8000596:	4288      	cmp	r0, r1
 8000598:	d908      	bls.n	80005ac <__udivmoddi4+0x12c>
 800059a:	eb1c 0101 	adds.w	r1, ip, r1
 800059e:	f103 38ff 	add.w	r8, r3, #4294967295
 80005a2:	d202      	bcs.n	80005aa <__udivmoddi4+0x12a>
 80005a4:	4288      	cmp	r0, r1
 80005a6:	f200 80cb 	bhi.w	8000740 <__udivmoddi4+0x2c0>
 80005aa:	4643      	mov	r3, r8
 80005ac:	1a09      	subs	r1, r1, r0
 80005ae:	b2a4      	uxth	r4, r4
 80005b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b4:	fb07 1110 	mls	r1, r7, r0, r1
 80005b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80005bc:	fb0e fe00 	mul.w	lr, lr, r0
 80005c0:	45a6      	cmp	lr, r4
 80005c2:	d908      	bls.n	80005d6 <__udivmoddi4+0x156>
 80005c4:	eb1c 0404 	adds.w	r4, ip, r4
 80005c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005cc:	d202      	bcs.n	80005d4 <__udivmoddi4+0x154>
 80005ce:	45a6      	cmp	lr, r4
 80005d0:	f200 80bb 	bhi.w	800074a <__udivmoddi4+0x2ca>
 80005d4:	4608      	mov	r0, r1
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005de:	e79c      	b.n	800051a <__udivmoddi4+0x9a>
 80005e0:	f1c6 0720 	rsb	r7, r6, #32
 80005e4:	40b3      	lsls	r3, r6
 80005e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ee:	fa20 f407 	lsr.w	r4, r0, r7
 80005f2:	fa01 f306 	lsl.w	r3, r1, r6
 80005f6:	431c      	orrs	r4, r3
 80005f8:	40f9      	lsrs	r1, r7
 80005fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000602:	fbb1 f8f9 	udiv	r8, r1, r9
 8000606:	0c20      	lsrs	r0, r4, #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fb09 1118 	mls	r1, r9, r8, r1
 8000610:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000614:	fb08 f00e 	mul.w	r0, r8, lr
 8000618:	4288      	cmp	r0, r1
 800061a:	fa02 f206 	lsl.w	r2, r2, r6
 800061e:	d90b      	bls.n	8000638 <__udivmoddi4+0x1b8>
 8000620:	eb1c 0101 	adds.w	r1, ip, r1
 8000624:	f108 3aff 	add.w	sl, r8, #4294967295
 8000628:	f080 8088 	bcs.w	800073c <__udivmoddi4+0x2bc>
 800062c:	4288      	cmp	r0, r1
 800062e:	f240 8085 	bls.w	800073c <__udivmoddi4+0x2bc>
 8000632:	f1a8 0802 	sub.w	r8, r8, #2
 8000636:	4461      	add	r1, ip
 8000638:	1a09      	subs	r1, r1, r0
 800063a:	b2a4      	uxth	r4, r4
 800063c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000640:	fb09 1110 	mls	r1, r9, r0, r1
 8000644:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000648:	fb00 fe0e 	mul.w	lr, r0, lr
 800064c:	458e      	cmp	lr, r1
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x1e2>
 8000650:	eb1c 0101 	adds.w	r1, ip, r1
 8000654:	f100 34ff 	add.w	r4, r0, #4294967295
 8000658:	d26c      	bcs.n	8000734 <__udivmoddi4+0x2b4>
 800065a:	458e      	cmp	lr, r1
 800065c:	d96a      	bls.n	8000734 <__udivmoddi4+0x2b4>
 800065e:	3802      	subs	r0, #2
 8000660:	4461      	add	r1, ip
 8000662:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000666:	fba0 9402 	umull	r9, r4, r0, r2
 800066a:	eba1 010e 	sub.w	r1, r1, lr
 800066e:	42a1      	cmp	r1, r4
 8000670:	46c8      	mov	r8, r9
 8000672:	46a6      	mov	lr, r4
 8000674:	d356      	bcc.n	8000724 <__udivmoddi4+0x2a4>
 8000676:	d053      	beq.n	8000720 <__udivmoddi4+0x2a0>
 8000678:	b15d      	cbz	r5, 8000692 <__udivmoddi4+0x212>
 800067a:	ebb3 0208 	subs.w	r2, r3, r8
 800067e:	eb61 010e 	sbc.w	r1, r1, lr
 8000682:	fa01 f707 	lsl.w	r7, r1, r7
 8000686:	fa22 f306 	lsr.w	r3, r2, r6
 800068a:	40f1      	lsrs	r1, r6
 800068c:	431f      	orrs	r7, r3
 800068e:	e9c5 7100 	strd	r7, r1, [r5]
 8000692:	2600      	movs	r6, #0
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	40d8      	lsrs	r0, r3
 80006a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a4:	fa21 f303 	lsr.w	r3, r1, r3
 80006a8:	4091      	lsls	r1, r2
 80006aa:	4301      	orrs	r1, r0
 80006ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006b0:	fa1f fe8c 	uxth.w	lr, ip
 80006b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80006b8:	fb07 3610 	mls	r6, r7, r0, r3
 80006bc:	0c0b      	lsrs	r3, r1, #16
 80006be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006c2:	fb00 f60e 	mul.w	r6, r0, lr
 80006c6:	429e      	cmp	r6, r3
 80006c8:	fa04 f402 	lsl.w	r4, r4, r2
 80006cc:	d908      	bls.n	80006e0 <__udivmoddi4+0x260>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006d6:	d22f      	bcs.n	8000738 <__udivmoddi4+0x2b8>
 80006d8:	429e      	cmp	r6, r3
 80006da:	d92d      	bls.n	8000738 <__udivmoddi4+0x2b8>
 80006dc:	3802      	subs	r0, #2
 80006de:	4463      	add	r3, ip
 80006e0:	1b9b      	subs	r3, r3, r6
 80006e2:	b289      	uxth	r1, r1
 80006e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006e8:	fb07 3316 	mls	r3, r7, r6, r3
 80006ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006f0:	fb06 f30e 	mul.w	r3, r6, lr
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0x28a>
 80006f8:	eb1c 0101 	adds.w	r1, ip, r1
 80006fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000700:	d216      	bcs.n	8000730 <__udivmoddi4+0x2b0>
 8000702:	428b      	cmp	r3, r1
 8000704:	d914      	bls.n	8000730 <__udivmoddi4+0x2b0>
 8000706:	3e02      	subs	r6, #2
 8000708:	4461      	add	r1, ip
 800070a:	1ac9      	subs	r1, r1, r3
 800070c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000710:	e738      	b.n	8000584 <__udivmoddi4+0x104>
 8000712:	462e      	mov	r6, r5
 8000714:	4628      	mov	r0, r5
 8000716:	e705      	b.n	8000524 <__udivmoddi4+0xa4>
 8000718:	4606      	mov	r6, r0
 800071a:	e6e3      	b.n	80004e4 <__udivmoddi4+0x64>
 800071c:	4618      	mov	r0, r3
 800071e:	e6f8      	b.n	8000512 <__udivmoddi4+0x92>
 8000720:	454b      	cmp	r3, r9
 8000722:	d2a9      	bcs.n	8000678 <__udivmoddi4+0x1f8>
 8000724:	ebb9 0802 	subs.w	r8, r9, r2
 8000728:	eb64 0e0c 	sbc.w	lr, r4, ip
 800072c:	3801      	subs	r0, #1
 800072e:	e7a3      	b.n	8000678 <__udivmoddi4+0x1f8>
 8000730:	4646      	mov	r6, r8
 8000732:	e7ea      	b.n	800070a <__udivmoddi4+0x28a>
 8000734:	4620      	mov	r0, r4
 8000736:	e794      	b.n	8000662 <__udivmoddi4+0x1e2>
 8000738:	4640      	mov	r0, r8
 800073a:	e7d1      	b.n	80006e0 <__udivmoddi4+0x260>
 800073c:	46d0      	mov	r8, sl
 800073e:	e77b      	b.n	8000638 <__udivmoddi4+0x1b8>
 8000740:	3b02      	subs	r3, #2
 8000742:	4461      	add	r1, ip
 8000744:	e732      	b.n	80005ac <__udivmoddi4+0x12c>
 8000746:	4630      	mov	r0, r6
 8000748:	e709      	b.n	800055e <__udivmoddi4+0xde>
 800074a:	4464      	add	r4, ip
 800074c:	3802      	subs	r0, #2
 800074e:	e742      	b.n	80005d6 <__udivmoddi4+0x156>

08000750 <__aeabi_idiv0>:
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000758:	4605      	mov	r5, r0
 800075a:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 800075c:	f8b5 8000 	ldrh.w	r8, [r5]
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8000760:	686a      	ldr	r2, [r5, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 8000762:	ea4f 0158 	mov.w	r1, r8, lsr #1
  float32_t * p2 = p1 + L;
 8000766:	eb00 0688 	add.w	r6, r0, r8, lsl #2
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800076a:	ea5f 08d8 	movs.w	r8, r8, lsr #3
{
 800076e:	ed2d 8b08 	vpush	{d8-d11}
 8000772:	b082      	sub	sp, #8
  for (l = L >> 2; l > 0; l-- )
 8000774:	f000 80a9 	beq.w	80008ca <arm_cfft_radix8by2_f32+0x176>
 8000778:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800077c:	f100 0310 	add.w	r3, r0, #16
 8000780:	f102 0710 	add.w	r7, r2, #16
 8000784:	f106 0e10 	add.w	lr, r6, #16
 8000788:	f10c 0c10 	add.w	ip, ip, #16
 800078c:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 8000790:	eb00 040c 	add.w	r4, r0, ip
 8000794:	44b4      	add	ip, r6
    t3[1] = pMid1[1];
    t3[2] = pMid1[2];
    t3[3] = pMid1[3];

    t4[0] = pMid2[0];
    t4[1] = pMid2[1];
 8000796:	ed1c 5a03 	vldr	s10, [ip, #-12]
  for (l = L >> 2; l > 0; l-- )
 800079a:	f10e 0e10 	add.w	lr, lr, #16
    t4[0] = pMid2[0];
 800079e:	ed1c 2a04 	vldr	s4, [ip, #-16]
  for (l = L >> 2; l > 0; l-- )
 80007a2:	f10c 0c10 	add.w	ip, ip, #16
    t2[0] = p2[0];
 80007a6:	ed5e 2a08 	vldr	s5, [lr, #-32]	; 0xffffffe0
  for (l = L >> 2; l > 0; l-- )
 80007aa:	3710      	adds	r7, #16
    t2[1] = p2[1];
 80007ac:	ed1e 3a07 	vldr	s6, [lr, #-28]	; 0xffffffe4
  for (l = L >> 2; l > 0; l-- )
 80007b0:	3310      	adds	r3, #16
    t2[2] = p2[2];
 80007b2:	ed5e 3a06 	vldr	s7, [lr, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80007b6:	3410      	adds	r4, #16
    t2[3] = p2[3];
 80007b8:	ed1e 4a05 	vldr	s8, [lr, #-20]	; 0xffffffec
    t4[2] = pMid2[2];
 80007bc:	ed5c 7a06 	vldr	s15, [ip, #-24]	; 0xffffffe8
    t4[3] = pMid2[3];
 80007c0:	ed5c 6a05 	vldr	s13, [ip, #-20]	; 0xffffffec
    t1[0] = p1[0];
 80007c4:	ed13 1a08 	vldr	s2, [r3, #-32]	; 0xffffffe0
    t1[1] = p1[1];
 80007c8:	ed53 1a07 	vldr	s3, [r3, #-28]	; 0xffffffe4
    t1[2] = p1[2];
 80007cc:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8

    *p1++ = t1[0] + t2[0];
 80007d0:	ee71 ba22 	vadd.f32	s23, s2, s5
    t1[3] = p1[3];
 80007d4:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
    *p1++ = t1[1] + t2[1];
 80007d8:	ee31 ba83 	vadd.f32	s22, s3, s6
    t3[0] = pMid1[0];
 80007dc:	ed54 4a08 	vldr	s9, [r4, #-32]	; 0xffffffe0
    *p1++ = t1[2] + t2[2];
 80007e0:	ee76 aa23 	vadd.f32	s21, s12, s7
    t3[1] = pMid1[1];
 80007e4:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80007e8:	ee37 aa04 	vadd.f32	s20, s14, s8
    t3[2] = pMid1[2];
 80007ec:	ed54 0a06 	vldr	s1, [r4, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
    t2[1] = t1[1] - t2[1];
    t2[2] = t1[2] - t2[2];
    t2[3] = t1[3] - t2[3];    /* for col 2 */

    *pMid1++ = t3[0] + t4[0];
 80007f0:	ee74 9a82 	vadd.f32	s19, s9, s4
    t3[3] = pMid1[3];
 80007f4:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    *pMid1++ = t3[1] + t4[1];
 80007f8:	ee35 9a85 	vadd.f32	s18, s11, s10
    *pMid1++ = t3[2] + t4[2];
 80007fc:	ee70 8aa7 	vadd.f32	s17, s1, s15
    *p1++ = t1[0] + t2[0];
 8000800:	ed43 ba08 	vstr	s23, [r3, #-32]	; 0xffffffe0
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000804:	ee30 8a26 	vadd.f32	s16, s0, s13
    *p1++ = t1[1] + t2[1];
 8000808:	ed03 ba07 	vstr	s22, [r3, #-28]	; 0xffffffe4
    *p1++ = t1[2] + t2[2];
 800080c:	ed43 aa06 	vstr	s21, [r3, #-24]	; 0xffffffe8
    t2[0] = t1[0] - t2[0];
 8000810:	ee31 1a62 	vsub.f32	s2, s2, s5
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8000814:	ed03 aa05 	vstr	s20, [r3, #-20]	; 0xffffffec
    t2[1] = t1[1] - t2[1];
 8000818:	ee71 1ac3 	vsub.f32	s3, s3, s6
    *pMid1++ = t3[0] + t4[0];
 800081c:	ed44 9a08 	vstr	s19, [r4, #-32]	; 0xffffffe0

    t4[0] = t4[0] - t3[0];
 8000820:	ee32 2a64 	vsub.f32	s4, s4, s9
    *pMid1++ = t3[1] + t4[1];
 8000824:	ed04 9a07 	vstr	s18, [r4, #-28]	; 0xffffffe4
    t4[1] = t4[1] - t3[1];
 8000828:	ee75 5a65 	vsub.f32	s11, s10, s11
    *pMid1++ = t3[2] + t4[2];
 800082c:	ed44 8a06 	vstr	s17, [r4, #-24]	; 0xffffffe8
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8000830:	ee37 7a44 	vsub.f32	s14, s14, s8
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8000834:	ed04 8a05 	vstr	s16, [r4, #-20]	; 0xffffffec
    t2[2] = t1[2] - t2[2];
 8000838:	ee36 6a63 	vsub.f32	s12, s12, s7
    t4[2] = t4[2] - t3[2];
    t4[3] = t4[3] - t3[3];    /* for col 2 */

    twR = *tw++;
 800083c:	ed57 4a08 	vldr	s9, [r7, #-32]	; 0xffffffe0
    t4[2] = t4[2] - t3[2];
 8000840:	ee77 7ae0 	vsub.f32	s15, s15, s1
    twI = *tw++;
 8000844:	ed17 5a07 	vldr	s10, [r7, #-28]	; 0xffffffe4
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8000848:	ee76 6ac0 	vsub.f32	s13, s13, s0
    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
    m1 = t4[1] * twR;
    m2 = t4[1] * twI;
    m3 = t4[0] * twR;
 800084c:	ee22 4a24 	vmul.f32	s8, s4, s9
  for (l = L >> 2; l > 0; l-- )
 8000850:	4543      	cmp	r3, r8
    m1 = t2[1] * twI;
 8000852:	ee61 2a85 	vmul.f32	s5, s3, s10
    *p2++ = m2 - m3;
 8000856:	ee25 3a41 	vnmul.f32	s6, s10, s2

    *pMid2++ = m0 - m1;
 800085a:	ee64 3ae5 	vnmul.f32	s7, s9, s11
    *p2++ = m0 + m1;
 800085e:	eee1 2a24 	vfma.f32	s5, s2, s9
    *p2++ = m2 - m3;
 8000862:	eea1 3aa4 	vfma.f32	s6, s3, s9
    *pMid2++ = m2 + m3;
 8000866:	eef0 4a44 	vmov.f32	s9, s8
    *pMid2++ = m0 - m1;
 800086a:	eee2 3a05 	vfma.f32	s7, s4, s10
    *pMid2++ = m2 + m3;
 800086e:	eee5 4a85 	vfma.f32	s9, s11, s10
    *p2++ = m0 + m1;
 8000872:	ed4e 2a08 	vstr	s5, [lr, #-32]	; 0xffffffe0
    *p2++ = m2 - m3;
 8000876:	ed0e 3a07 	vstr	s6, [lr, #-28]	; 0xffffffe4
    *pMid2++ = m0 - m1;
 800087a:	ed4c 3a08 	vstr	s7, [ip, #-32]	; 0xffffffe0
    *pMid2++ = m2 + m3;
 800087e:	ed4c 4a07 	vstr	s9, [ip, #-28]	; 0xffffffe4

    twR = *tw++;
 8000882:	ed17 5a06 	vldr	s10, [r7, #-24]	; 0xffffffe8
    twI = *tw++;
 8000886:	ed57 5a05 	vldr	s11, [r7, #-20]	; 0xffffffec
    *p2++ = m2 - m3;

    m0 = t4[2] * twI;
    m1 = t4[3] * twR;
    m2 = t4[3] * twI;
    m3 = t4[2] * twR;
 800088a:	ee67 4a85 	vmul.f32	s9, s15, s10
    m1 = t2[3] * twI;
 800088e:	ee27 3a25 	vmul.f32	s6, s14, s11
    *p2++ = m2 - m3;
 8000892:	ee65 3ac6 	vnmul.f32	s7, s11, s12

    *pMid2++ = m0 - m1;
 8000896:	ee25 4a66 	vnmul.f32	s8, s10, s13
    *p2++ = m0 + m1;
 800089a:	eea6 3a05 	vfma.f32	s6, s12, s10
    *pMid2++ = m2 + m3;
 800089e:	eeb0 6a64 	vmov.f32	s12, s9
 80008a2:	eea6 6aa5 	vfma.f32	s12, s13, s11
    *p2++ = m2 - m3;
 80008a6:	eef0 6a63 	vmov.f32	s13, s7
    *p2++ = m0 + m1;
 80008aa:	ed0e 3a06 	vstr	s6, [lr, #-24]	; 0xffffffe8
    *p2++ = m2 - m3;
 80008ae:	eee7 6a05 	vfma.f32	s13, s14, s10
    *pMid2++ = m0 - m1;
 80008b2:	eeb0 7a44 	vmov.f32	s14, s8
 80008b6:	eea7 7aa5 	vfma.f32	s14, s15, s11
    *p2++ = m2 - m3;
 80008ba:	ed4e 6a05 	vstr	s13, [lr, #-20]	; 0xffffffec
    *pMid2++ = m2 + m3;
 80008be:	ed0c 6a05 	vstr	s12, [ip, #-20]	; 0xffffffec
    *pMid2++ = m0 - m1;
 80008c2:	ed0c 7a06 	vstr	s14, [ip, #-24]	; 0xffffffe8
  for (l = L >> 2; l > 0; l-- )
 80008c6:	f47f af66 	bne.w	8000796 <arm_cfft_radix8by2_f32+0x42>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80008ca:	b289      	uxth	r1, r1
 80008cc:	2302      	movs	r3, #2
 80008ce:	9101      	str	r1, [sp, #4]
 80008d0:	f000 face 	bl	8000e70 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008d4:	2302      	movs	r3, #2
 80008d6:	686a      	ldr	r2, [r5, #4]
 80008d8:	9901      	ldr	r1, [sp, #4]
 80008da:	4630      	mov	r0, r6
}
 80008dc:	b002      	add	sp, #8
 80008de:	ecbd 8b08 	vpop	{d8-d11}
 80008e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80008e6:	f000 bac3 	b.w	8000e70 <arm_radix8_butterfly_f32>
 80008ea:	bf00      	nop

080008ec <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	4607      	mov	r7, r0
 80008f2:	ed2d 8b06 	vpush	{d8-d10}
 80008f6:	b08f      	sub	sp, #60	; 0x3c
 80008f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80008fa:	4608      	mov	r0, r1
 80008fc:	910c      	str	r1, [sp, #48]	; 0x30
    uint32_t    L  = S->fftLen >> 1;
 80008fe:	8839      	ldrh	r1, [r7, #0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000900:	4606      	mov	r6, r0
    p1ap3_0 = p1[0] + p3[0];
 8000902:	edd0 7a00 	vldr	s15, [r0]
    uint32_t    L  = S->fftLen >> 1;
 8000906:	0849      	lsrs	r1, r1, #1
    p1ap3_1 = p1[1] + p3[1];
 8000908:	ed90 7a01 	vldr	s14, [r0, #4]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800090c:	687f      	ldr	r7, [r7, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800090e:	3608      	adds	r6, #8
    float32_t * p3 = p2 + L;
 8000910:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    float32_t * p2 = p1 + L;
 8000914:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000918:	9604      	str	r6, [sp, #16]
    p1ap3_0 = p1[0] + p3[0];
 800091a:	edd2 6a00 	vldr	s13, [r2]
    float32_t * p4 = p3 + L;
 800091e:	eb02 0481 	add.w	r4, r2, r1, lsl #2
    p1ap3_1 = p1[1] + p3[1];
 8000922:	edd2 5a01 	vldr	s11, [r2, #4]
    float32_t * p2 = p1 + L;
 8000926:	008b      	lsls	r3, r1, #2
    p1ap3_0 = p1[0] + p3[0];
 8000928:	ee37 6aa6 	vadd.f32	s12, s15, s13
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800092c:	ed95 5a00 	vldr	s10, [r5]
    p1sp3_0 = p1[0] - p3[0];
 8000930:	ee77 7ae6 	vsub.f32	s15, s15, s13
    L >>= 1;
 8000934:	0849      	lsrs	r1, r1, #1
    p1ap3_1 = p1[1] + p3[1];
 8000936:	ee77 6a25 	vadd.f32	s13, s14, s11
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800093a:	edd5 2a01 	vldr	s5, [r5, #4]
    p1sp3_1 = p1[1] - p3[1];
 800093e:	ee37 7a65 	vsub.f32	s14, s14, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000942:	edd4 5a00 	vldr	s11, [r4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000946:	ee76 3a45 	vsub.f32	s7, s12, s10
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800094a:	ed94 2a01 	vldr	s4, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800094e:	ee35 6a86 	vadd.f32	s12, s11, s12
    L >>= 1;
 8000952:	9107      	str	r1, [sp, #28]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000954:	ee75 4a07 	vadd.f32	s9, s10, s14
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8000958:	4629      	mov	r1, r5
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800095a:	ee35 7a87 	vadd.f32	s14, s11, s14
    float32_t * p3 = p2 + L;
 800095e:	9209      	str	r2, [sp, #36]	; 0x24
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000960:	ee36 6a05 	vadd.f32	s12, s12, s10
    *p2++ = t2[0];
 8000964:	3108      	adds	r1, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000966:	ee32 3aa7 	vadd.f32	s6, s5, s15
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
 800096a:	f107 0608 	add.w	r6, r7, #8
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800096e:	ee37 7a45 	vsub.f32	s14, s14, s10
    *p2++ = t2[0];
 8000972:	9106      	str	r1, [sp, #24]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000974:	ed80 6a00 	vstr	s12, [r0]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000978:	ee36 4ae2 	vsub.f32	s8, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800097c:	ed94 5a01 	vldr	s10, [r4, #4]
    *p3++ = t3[0];
 8000980:	4611      	mov	r1, r2
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000982:	ed95 6a01 	vldr	s12, [r5, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000986:	ee73 3ae5 	vsub.f32	s7, s7, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800098a:	ee76 6a85 	vadd.f32	s13, s13, s10
    *p3++ = t3[0];
 800098e:	3108      	adds	r1, #8
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000990:	ee33 3a42 	vsub.f32	s6, s6, s4
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8000994:	970a      	str	r7, [sp, #40]	; 0x28
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000996:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p3++ = t3[0];
 800099a:	9100      	str	r1, [sp, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800099c:	ee76 6a86 	vadd.f32	s13, s13, s12
    *p3++ = t3[1];
 80009a0:	4611      	mov	r1, r2
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80009a2:	ee72 7a27 	vadd.f32	s15, s4, s15
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80009a6:	ee74 5ae5 	vsub.f32	s11, s9, s11
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80009aa:	edc0 6a01 	vstr	s13, [r0, #4]
    *p2++ = t2[0];
 80009ae:	ed85 3a00 	vstr	s6, [r5]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80009b2:	ee77 7ae2 	vsub.f32	s15, s15, s5
    *p2++ = t2[1];
 80009b6:	ed85 7a01 	vstr	s14, [r5, #4]
    *p3++ = t3[0];
 80009ba:	edc2 3a00 	vstr	s7, [r2]
    *p3++ = t3[1];
 80009be:	ed82 4a01 	vstr	s8, [r2, #4]
    *p4++ = t4[0];
 80009c2:	4622      	mov	r2, r4
 80009c4:	edc4 7a00 	vstr	s15, [r4]
 80009c8:	3208      	adds	r2, #8
    *p4++ = t4[1];
 80009ca:	edc4 5a01 	vstr	s11, [r4, #4]
    *p4++ = t4[0];
 80009ce:	9205      	str	r2, [sp, #20]
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d0:	9a07      	ldr	r2, [sp, #28]
    tw2 += twMod2;
 80009d2:	9603      	str	r6, [sp, #12]
    tw3 += twMod3;
 80009d4:	f107 0610 	add.w	r6, r7, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009d8:	3a02      	subs	r2, #2
    tw3 += twMod3;
 80009da:	9601      	str	r6, [sp, #4]
    tw4 += twMod4;
 80009dc:	f107 0618 	add.w	r6, r7, #24
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009e0:	0852      	lsrs	r2, r2, #1
    tw4 += twMod4;
 80009e2:	9602      	str	r6, [sp, #8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80009e4:	9208      	str	r2, [sp, #32]
 80009e6:	f000 8134 	beq.w	8000c52 <arm_cfft_radix8by4_f32+0x366>
 80009ea:	4693      	mov	fp, r2
 80009ec:	f100 0210 	add.w	r2, r0, #16
 80009f0:	3b0c      	subs	r3, #12
 80009f2:	f107 0920 	add.w	r9, r7, #32
 80009f6:	920d      	str	r2, [sp, #52]	; 0x34
 80009f8:	460a      	mov	r2, r1
 80009fa:	f107 0830 	add.w	r8, r7, #48	; 0x30
 80009fe:	4423      	add	r3, r4
 8000a00:	f102 0e10 	add.w	lr, r2, #16
 8000a04:	f1a5 060c 	sub.w	r6, r5, #12
 8000a08:	f8dd a004 	ldr.w	sl, [sp, #4]
 8000a0c:	f105 0010 	add.w	r0, r5, #16
 8000a10:	390c      	subs	r1, #12
 8000a12:	f1a4 0c0c 	sub.w	ip, r4, #12
 8000a16:	f104 0210 	add.w	r2, r4, #16
 8000a1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a1c:	ed52 5a02 	vldr	s11, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a20:	f1bb 0b01 	subs.w	fp, fp, #1
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a24:	ed10 5a02 	vldr	s10, [r0, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a28:	f107 0708 	add.w	r7, r7, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a2c:	ed5e 3a02 	vldr	s7, [lr, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a30:	f1a6 0608 	sub.w	r6, r6, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a34:	ed17 7a04 	vldr	s14, [r7, #-16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a38:	ee35 4a25 	vadd.f32	s8, s10, s11
      p1ap3_1 = p1[1] + p3[1];
 8000a3c:	ed5e 6a01 	vldr	s13, [lr, #-4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a40:	f10a 0a08 	add.w	sl, sl, #8
      p1ap3_0 = p1[0] + p3[0];
 8000a44:	ee37 1a23 	vadd.f32	s2, s14, s7
      p1ap3_1 = p1[1] + p3[1];
 8000a48:	ed57 7a03 	vldr	s15, [r7, #-12]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a4c:	ed52 4a01 	vldr	s9, [r2, #-4]
      p1sp3_0 = p1[0] - p3[0];
 8000a50:	ee37 7a63 	vsub.f32	s14, s14, s7
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a54:	ed10 6a01 	vldr	s12, [r0, #-4]
      p1ap3_1 = p1[1] + p3[1];
 8000a58:	ee77 3aa6 	vadd.f32	s7, s15, s13
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a5c:	ee34 4a01 	vadd.f32	s8, s8, s2
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a60:	f100 0008 	add.w	r0, r0, #8
      p1sp3_1 = p1[1] - p3[1];
 8000a64:	ee77 7ae6 	vsub.f32	s15, s15, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a68:	f1a1 0108 	sub.w	r1, r1, #8
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a6c:	ee31 1a45 	vsub.f32	s2, s2, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a70:	f109 0910 	add.w	r9, r9, #16
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000a74:	ed07 4a04 	vstr	s8, [r7, #-16]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000a78:	ee77 0a64 	vsub.f32	s1, s14, s9
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a7c:	ed12 4a01 	vldr	s8, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a80:	ee37 0ac5 	vsub.f32	s0, s15, s10
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a84:	ed50 6a03 	vldr	s13, [r0, #-12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000a88:	ee77 7ae5 	vsub.f32	s15, s15, s11
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000a8c:	ee31 1a65 	vsub.f32	s2, s2, s11
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a90:	f10e 0e08 	add.w	lr, lr, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000a94:	ee76 6a84 	vadd.f32	s13, s13, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000a98:	f1ac 0c08 	sub.w	ip, ip, #8
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000a9c:	ee30 0a25 	vadd.f32	s0, s0, s11
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000aa0:	f108 0818 	add.w	r8, r8, #24
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000aa4:	ee37 5a85 	vadd.f32	s10, s15, s10
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000aa8:	f102 0208 	add.w	r2, r2, #8
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000aac:	ee76 6aa3 	vadd.f32	s13, s13, s7
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000ab0:	f1a3 0308 	sub.w	r3, r3, #8
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ab4:	ee70 0a86 	vadd.f32	s1, s1, s12
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000ab8:	ee37 7a46 	vsub.f32	s14, s14, s12
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000abc:	ed47 6a03 	vstr	s13, [r7, #-12]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000ac0:	ee33 6ac6 	vsub.f32	s12, s7, s12

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ac4:	eddc 7a04 	vldr	s15, [ip, #16]
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ac8:	edd3 9a04 	vldr	s19, [r3, #16]
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000acc:	ee37 7a24 	vadd.f32	s14, s14, s9
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000ad0:	ed96 8a04 	vldr	s16, [r6, #16]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000ad4:	ee36 4a64 	vsub.f32	s8, s12, s9
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000ad8:	edd1 5a04 	vldr	s11, [r1, #16]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8000adc:	ee38 3a27 	vadd.f32	s6, s16, s15
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000ae0:	ed93 9a03 	vldr	s18, [r3, #12]
 8000ae4:	ee75 2aa9 	vadd.f32	s5, s11, s19
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000ae8:	ed9c 2a03 	vldr	s4, [ip, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000aec:	ee75 3ae9 	vsub.f32	s7, s11, s19
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000af0:	edd1 8a03 	vldr	s17, [r1, #12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000af4:	edd6 4a03 	vldr	s9, [r6, #12]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000af8:	ee78 6a09 	vadd.f32	s13, s16, s18
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000afc:	ee33 6a22 	vadd.f32	s12, s6, s5
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8000b00:	ee34 aa82 	vadd.f32	s20, s9, s4
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b04:	ee73 1ac2 	vsub.f32	s3, s7, s4
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8000b08:	ed86 6a04 	vstr	s12, [r6, #16]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b10:	edd3 aa03 	vldr	s21, [r3, #12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b14:	ee77 7a89 	vadd.f32	s15, s15, s18
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b18:	ed91 6a03 	vldr	s12, [r1, #12]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8000b1c:	ee71 1aa4 	vadd.f32	s3, s3, s9
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b20:	ee73 4ae4 	vsub.f32	s9, s7, s9
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b24:	ee36 6a2a 	vadd.f32	s12, s12, s21
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8000b28:	ee76 6ae8 	vsub.f32	s13, s13, s17
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b2c:	ee77 7ae8 	vsub.f32	s15, s15, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b30:	ee36 6a0a 	vadd.f32	s12, s12, s20
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000b34:	ee73 5a65 	vsub.f32	s11, s6, s11
      *p3++ = m0 + m1;
      *p3++ = m2 - m3;
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8000b38:	ee72 2ac3 	vsub.f32	s5, s5, s6
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b3c:	ee3a 3a68 	vsub.f32	s6, s20, s17
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8000b40:	ed86 6a03 	vstr	s12, [r6, #12]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8000b44:	ee74 4a82 	vadd.f32	s9, s9, s4
      twR = *tw2++;
 8000b48:	ed5a 3a04 	vldr	s7, [sl, #-16]
      twI = *tw2++;
 8000b4c:	ed1a 2a03 	vldr	s4, [sl, #-12]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8000b50:	ee37 6ac8 	vsub.f32	s12, s15, s16
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8000b54:	ee33 3a49 	vsub.f32	s6, s6, s18
      m3 = t2[3] * twR;
 8000b58:	ee66 7aa3 	vmul.f32	s15, s13, s7
      *pEnd2-- = m0 - m1;
 8000b5c:	ee23 8ae1 	vnmul.f32	s16, s7, s3
      *p2++ = m2 - m3;
 8000b60:	ee62 8a60 	vnmul.f32	s17, s4, s1
      m1 = t2[1] * twI;
 8000b64:	ee20 9a02 	vmul.f32	s18, s0, s4
      *pEnd2-- = m2 + m3;
 8000b68:	eee1 7a82 	vfma.f32	s15, s3, s4
      *pEnd2-- = m0 - m1;
 8000b6c:	eea6 8a82 	vfma.f32	s16, s13, s4
      *p2++ = m0 + m1;
 8000b70:	eeb0 2a49 	vmov.f32	s4, s18
      *p2++ = m2 - m3;
 8000b74:	eef0 6a68 	vmov.f32	s13, s17
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8000b78:	ee75 5ae9 	vsub.f32	s11, s11, s19
      *p2++ = m0 + m1;
 8000b7c:	eea0 2aa3 	vfma.f32	s4, s1, s7
      *p2++ = m2 - m3;
 8000b80:	eee0 6a23 	vfma.f32	s13, s0, s7
      *p2++ = m0 + m1;
 8000b84:	ed00 2a04 	vstr	s4, [r0, #-16]
      *p2++ = m2 - m3;
 8000b88:	ed40 6a03 	vstr	s13, [r0, #-12]
      *pEnd2-- = m0 - m1;
 8000b8c:	ed81 8a04 	vstr	s16, [r1, #16]
      *pEnd2-- = m2 + m3;
 8000b90:	edc1 7a03 	vstr	s15, [r1, #12]
      twI = tw3[1];
 8000b94:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
      twR = tw3[0];
 8000b98:	ed59 3a08 	vldr	s7, [r9, #-32]	; 0xffffffe0
      *p3++ = m2 - m3;
 8000b9c:	ee27 2ac1 	vnmul.f32	s4, s15, s2
      m1 = t3[1] * twI;
 8000ba0:	ee64 1a27 	vmul.f32	s3, s8, s15
      m1 =  t3[2] * twI;
      m2 =  t3[2] * twR;
      m3 =  t3[3] * twI;
 8000ba4:	ee65 6aa7 	vmul.f32	s13, s11, s15

      *pEnd3-- = m0 - m1;
 8000ba8:	ee67 7ac3 	vnmul.f32	s15, s15, s6
      *p3++ = m2 - m3;
 8000bac:	eef0 5a42 	vmov.f32	s11, s4
      *pEnd3-- = m3 - m2;
 8000bb0:	eee3 6a63 	vfms.f32	s13, s6, s7
      *pEnd3-- = m0 - m1;
 8000bb4:	eee2 7aa3 	vfma.f32	s15, s5, s7
      *p3++ = m2 - m3;
 8000bb8:	eee4 5a23 	vfma.f32	s11, s8, s7
      *p3++ = m0 + m1;
 8000bbc:	eee1 1a23 	vfma.f32	s3, s2, s7
 8000bc0:	ed4e 1a04 	vstr	s3, [lr, #-16]
      *p3++ = m2 - m3;
 8000bc4:	ed4e 5a03 	vstr	s11, [lr, #-12]
      *pEnd3-- = m0 - m1;
 8000bc8:	edcc 7a04 	vstr	s15, [ip, #16]
      *pEnd3-- = m3 - m2;
 8000bcc:	edcc 6a03 	vstr	s13, [ip, #12]

      /* COL 4 */
      twR = tw4[0];
 8000bd0:	ed58 6a0c 	vldr	s13, [r8, #-48]	; 0xffffffd0
      twI = tw4[1];
 8000bd4:	ed58 7a0b 	vldr	s15, [r8, #-44]	; 0xffffffd4
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
      m1 = t4[2] * twR;
      m2 = t4[2] * twI;
      m3 = t4[3] * twR;
 8000bd8:	ee66 5a26 	vmul.f32	s11, s12, s13
      *p4++ = m2 - m3;
 8000bdc:	ee67 3ac7 	vnmul.f32	s7, s15, s14
      m1 = t4[1] * twI;
 8000be0:	ee25 3a27 	vmul.f32	s6, s10, s15

      *pEnd4-- = m0 - m1;
 8000be4:	ee26 4ae4 	vnmul.f32	s8, s13, s9
      *p4++ = m2 - m3;
 8000be8:	eee5 3a26 	vfma.f32	s7, s10, s13
      *p4++ = m0 + m1;
 8000bec:	eea7 3a26 	vfma.f32	s6, s14, s13
      *pEnd4-- = m0 - m1;
 8000bf0:	eef0 6a44 	vmov.f32	s13, s8
      *pEnd4-- = m2 + m3;
 8000bf4:	eeb0 7a65 	vmov.f32	s14, s11
      *pEnd4-- = m0 - m1;
 8000bf8:	eee6 6a27 	vfma.f32	s13, s12, s15
      *pEnd4-- = m2 + m3;
 8000bfc:	eea4 7aa7 	vfma.f32	s14, s9, s15
      *p4++ = m2 - m3;
 8000c00:	ed42 3a03 	vstr	s7, [r2, #-12]
      *p4++ = m0 + m1;
 8000c04:	ed02 3a04 	vstr	s6, [r2, #-16]
      *pEnd4-- = m0 - m1;
 8000c08:	edc3 6a04 	vstr	s13, [r3, #16]
      *pEnd4-- = m2 + m3;
 8000c0c:	ed83 7a03 	vstr	s14, [r3, #12]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8000c10:	f47f af04 	bne.w	8000a1c <arm_cfft_radix8by4_f32+0x130>
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000c14:	9b08      	ldr	r3, [sp, #32]
 8000c16:	9a04      	ldr	r2, [sp, #16]
 8000c18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c1c:	9204      	str	r2, [sp, #16]
      twI = *tw2++;
 8000c1e:	9a03      	ldr	r2, [sp, #12]
 8000c20:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c24:	9203      	str	r2, [sp, #12]
      *p2++ = m2 - m3;
 8000c26:	9a06      	ldr	r2, [sp, #24]
 8000c28:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c2c:	9206      	str	r2, [sp, #24]
      tw3 += twMod3;
 8000c2e:	9a01      	ldr	r2, [sp, #4]
 8000c30:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000c34:	9201      	str	r2, [sp, #4]
      *p3++ = m2 - m3;
 8000c36:	9a00      	ldr	r2, [sp, #0]
 8000c38:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000c3c:	9200      	str	r2, [sp, #0]
      *p4++ = m2 - m3;
 8000c3e:	9a05      	ldr	r2, [sp, #20]
 8000c40:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      tw4 += twMod4;
 8000c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      *p4++ = m2 - m3;
 8000c48:	9205      	str	r2, [sp, #20]
      tw4 += twMod4;
 8000c4a:	9a02      	ldr	r2, [sp, #8]
 8000c4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000c50:	9302      	str	r3, [sp, #8]
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c52:	9b06      	ldr	r3, [sp, #24]
 8000c54:	9e05      	ldr	r6, [sp, #20]
    p1ap3_0 = p1[0] + p3[0];
 8000c56:	9f04      	ldr	r7, [sp, #16]
 8000c58:	9900      	ldr	r1, [sp, #0]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000c5a:	edd6 2a00 	vldr	s5, [r6]
 8000c5e:	ed93 3a00 	vldr	s6, [r3]
    p1ap3_0 = p1[0] + p3[0];
 8000c62:	edd1 6a00 	vldr	s13, [r1]
 8000c66:	ed97 7a00 	vldr	s14, [r7]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c6a:	ee33 6a22 	vadd.f32	s12, s6, s5
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c6e:	ed96 2a01 	vldr	s4, [r6, #4]
    p1ap3_0 = p1[0] + p3[0];
 8000c72:	ee37 5a26 	vadd.f32	s10, s14, s13
    p1ap3_1 = p1[1] + p3[1];
 8000c76:	edd1 4a01 	vldr	s9, [r1, #4]
    p1sp3_0 = p1[0] - p3[0];
 8000c7a:	ee37 7a66 	vsub.f32	s14, s14, s13
    p1ap3_1 = p1[1] + p3[1];
 8000c7e:	edd7 5a01 	vldr	s11, [r7, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c82:	edd3 7a01 	vldr	s15, [r3, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c86:	ee36 6a05 	vadd.f32	s12, s12, s10

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c8a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000c8e:	ee77 3a42 	vsub.f32	s7, s14, s4
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    p1sp3_1 = p1[1] - p3[1];
 8000c94:	ee75 6ae4 	vsub.f32	s13, s11, s9
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000c98:	980c      	ldr	r0, [sp, #48]	; 0x30
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8000c9a:	ed87 6a00 	vstr	s12, [r7]
    p1ap3_1 = p1[1] + p3[1];
 8000c9e:	ee75 5aa4 	vadd.f32	s11, s11, s9
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000ca2:	edd6 1a01 	vldr	s3, [r6, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8000ca6:	ee73 3aa7 	vadd.f32	s7, s7, s15
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000caa:	ed93 6a01 	vldr	s12, [r3, #4]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cae:	ee75 4a43 	vsub.f32	s9, s10, s6
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cb2:	ee36 4ac3 	vsub.f32	s8, s13, s6
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cb6:	ee36 6a21 	vadd.f32	s12, s12, s3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cba:	ee35 5ae7 	vsub.f32	s10, s11, s15
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000cc2:	ee36 7ae2 	vsub.f32	s14, s13, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cc6:	ee76 6a25 	vadd.f32	s13, s12, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8000cca:	ee34 4a22 	vadd.f32	s8, s8, s5
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8000cce:	ee74 4ae2 	vsub.f32	s9, s9, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8000cd2:	edc7 6a01 	vstr	s13, [r7, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8000cd6:	ee35 5a42 	vsub.f32	s10, s10, s4
    twI = tw2[1];
 8000cda:	9f03      	ldr	r7, [sp, #12]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8000cdc:	ee77 7a82 	vadd.f32	s15, s15, s4
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8000ce0:	ee37 7a03 	vadd.f32	s14, s14, s6
    twI = tw2[1];
 8000ce4:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw2[0];
 8000ce8:	edd7 5a00 	vldr	s11, [r7]
    m1 = t2[1] * twI;
 8000cec:	ee24 6a26 	vmul.f32	s12, s8, s13
    twI = tw3[1];
 8000cf0:	9f01      	ldr	r7, [sp, #4]
    *p2++ = m2 - m3;
 8000cf2:	ee66 6ae3 	vnmul.f32	s13, s13, s7
    *p2++ = m0 + m1;
 8000cf6:	eea3 6aa5 	vfma.f32	s12, s7, s11
    *p2++ = m2 - m3;
 8000cfa:	eee4 6a25 	vfma.f32	s13, s8, s11
    *p2++ = m0 + m1;
 8000cfe:	ed83 6a00 	vstr	s12, [r3]
    *p2++ = m2 - m3;
 8000d02:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw3[1];
 8000d06:	edd7 6a01 	vldr	s13, [r7, #4]
    twR = tw3[0];
 8000d0a:	edd7 5a00 	vldr	s11, [r7]
    m1 = t3[1] * twI;
 8000d0e:	ee25 6a26 	vmul.f32	s12, s10, s13
    *p3++ = m0 + m1;
 8000d12:	9b00      	ldr	r3, [sp, #0]
    *p3++ = m2 - m3;
 8000d14:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *p3++ = m0 + m1;
 8000d18:	eea4 6aa5 	vfma.f32	s12, s9, s11
    *p3++ = m2 - m3;
 8000d1c:	eee5 6a25 	vfma.f32	s13, s10, s11
    *p3++ = m0 + m1;
 8000d20:	ed83 6a00 	vstr	s12, [r3]
    *p3++ = m2 - m3;
 8000d24:	edc3 6a01 	vstr	s13, [r3, #4]
    twI = tw4[1];
 8000d28:	9b02      	ldr	r3, [sp, #8]
 8000d2a:	edd3 6a01 	vldr	s13, [r3, #4]
    twR = tw4[0];
 8000d2e:	edd3 5a00 	vldr	s11, [r3]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d32:	2304      	movs	r3, #4
    m1 = t4[1] * twI;
 8000d34:	ee27 6a26 	vmul.f32	s12, s14, s13
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d38:	9100      	str	r1, [sp, #0]
    *p4++ = m2 - m3;
 8000d3a:	ee66 6ae7 	vnmul.f32	s13, s13, s15
    *p4++ = m0 + m1;
 8000d3e:	eea7 6aa5 	vfma.f32	s12, s15, s11
    *p4++ = m2 - m3;
 8000d42:	eee7 6a25 	vfma.f32	s13, s14, s11
    *p4++ = m0 + m1;
 8000d46:	ed86 6a00 	vstr	s12, [r6]
    *p4++ = m2 - m3;
 8000d4a:	edc6 6a01 	vstr	s13, [r6, #4]
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8000d4e:	f000 f88f 	bl	8000e70 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8000d52:	4628      	mov	r0, r5
 8000d54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000d56:	2304      	movs	r3, #4
 8000d58:	9900      	ldr	r1, [sp, #0]
 8000d5a:	686a      	ldr	r2, [r5, #4]
 8000d5c:	f000 f888 	bl	8000e70 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8000d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d62:	686a      	ldr	r2, [r5, #4]
 8000d64:	2304      	movs	r3, #4
 8000d66:	9900      	ldr	r1, [sp, #0]
 8000d68:	f000 f882 	bl	8000e70 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	686a      	ldr	r2, [r5, #4]
 8000d70:	4620      	mov	r0, r4
 8000d72:	9900      	ldr	r1, [sp, #0]
}
 8000d74:	b00f      	add	sp, #60	; 0x3c
 8000d76:	ecbd 8b06 	vpop	{d8-d10}
 8000d7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8000d7e:	f000 b877 	b.w	8000e70 <arm_radix8_butterfly_f32>
 8000d82:	bf00      	nop

08000d84 <arm_cfft_f32>:
        uint8_t bitReverseFlag)
{
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8000d84:	2a01      	cmp	r2, #1
{
 8000d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d8a:	4606      	mov	r6, r0
 8000d8c:	4617      	mov	r7, r2
 8000d8e:	460c      	mov	r4, r1
 8000d90:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 8000d92:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 8000d94:	d059      	beq.n	8000e4a <arm_cfft_f32+0xc6>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 8000d96:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000d9a:	d051      	beq.n	8000e40 <arm_cfft_f32+0xbc>
 8000d9c:	d80f      	bhi.n	8000dbe <arm_cfft_f32+0x3a>
 8000d9e:	2d40      	cmp	r5, #64	; 0x40
 8000da0:	d014      	beq.n	8000dcc <arm_cfft_f32+0x48>
 8000da2:	d949      	bls.n	8000e38 <arm_cfft_f32+0xb4>
 8000da4:	2d80      	cmp	r5, #128	; 0x80
 8000da6:	d103      	bne.n	8000db0 <arm_cfft_f32+0x2c>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000da8:	4621      	mov	r1, r4
 8000daa:	4630      	mov	r0, r6
 8000dac:	f7ff fcd2 	bl	8000754 <arm_cfft_radix8by2_f32>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 8000db0:	f1b8 0f00 	cmp.w	r8, #0
 8000db4:	d113      	bne.n	8000dde <arm_cfft_f32+0x5a>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);

  if (ifftFlag == 1U)
 8000db6:	2f01      	cmp	r7, #1
 8000db8:	d018      	beq.n	8000dec <arm_cfft_f32+0x68>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 8000dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000dbe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8000dc2:	d03d      	beq.n	8000e40 <arm_cfft_f32+0xbc>
 8000dc4:	d931      	bls.n	8000e2a <arm_cfft_f32+0xa6>
 8000dc6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8000dca:	d1f1      	bne.n	8000db0 <arm_cfft_f32+0x2c>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8000dcc:	2301      	movs	r3, #1
 8000dce:	6872      	ldr	r2, [r6, #4]
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f000 f84c 	bl	8000e70 <arm_radix8_butterfly_f32>
  if ( bitReverseFlag )
 8000dd8:	f1b8 0f00 	cmp.w	r8, #0
 8000ddc:	d0eb      	beq.n	8000db6 <arm_cfft_f32+0x32>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8000dde:	68b2      	ldr	r2, [r6, #8]
 8000de0:	4620      	mov	r0, r4
 8000de2:	89b1      	ldrh	r1, [r6, #12]
 8000de4:	f7ff fa7c 	bl	80002e0 <arm_bitreversal_32>
  if (ifftFlag == 1U)
 8000de8:	2f01      	cmp	r7, #1
 8000dea:	d1e6      	bne.n	8000dba <arm_cfft_f32+0x36>
    invL = 1.0f / (float32_t)L;
 8000dec:	ee07 5a90 	vmov	s15, r5
 8000df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (l= 0; l < L; l++)
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0dc      	beq.n	8000dba <arm_cfft_f32+0x36>
 8000e00:	f104 0108 	add.w	r1, r4, #8
 8000e04:	2300      	movs	r3, #0
      *pSrc++ *=   invL ;
 8000e06:	ed11 7a02 	vldr	s14, [r1, #-8]
    for (l= 0; l < L; l++)
 8000e0a:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 8000e0c:	ed51 7a01 	vldr	s15, [r1, #-4]
    for (l= 0; l < L; l++)
 8000e10:	3108      	adds	r1, #8
 8000e12:	429d      	cmp	r5, r3
      *pSrc++ *=   invL ;
 8000e14:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pSrc    = -(*pSrc) * invL;
 8000e18:	ee67 7ae6 	vnmul.f32	s15, s15, s13
      *pSrc++ *=   invL ;
 8000e1c:	ed01 7a04 	vstr	s14, [r1, #-16]
      *pSrc    = -(*pSrc) * invL;
 8000e20:	ed41 7a03 	vstr	s15, [r1, #-12]
    for (l= 0; l < L; l++)
 8000e24:	d1ef      	bne.n	8000e06 <arm_cfft_f32+0x82>
}
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 8000e2a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000e2e:	d0cd      	beq.n	8000dcc <arm_cfft_f32+0x48>
 8000e30:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000e34:	d0b8      	beq.n	8000da8 <arm_cfft_f32+0x24>
 8000e36:	e7bb      	b.n	8000db0 <arm_cfft_f32+0x2c>
 8000e38:	2d10      	cmp	r5, #16
 8000e3a:	d0b5      	beq.n	8000da8 <arm_cfft_f32+0x24>
 8000e3c:	2d20      	cmp	r5, #32
 8000e3e:	d1b7      	bne.n	8000db0 <arm_cfft_f32+0x2c>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8000e40:	4621      	mov	r1, r4
 8000e42:	4630      	mov	r0, r6
 8000e44:	f7ff fd52 	bl	80008ec <arm_cfft_radix8by4_f32>
    break;
 8000e48:	e7b2      	b.n	8000db0 <arm_cfft_f32+0x2c>
    for (l = 0; l < L; l++)
 8000e4a:	b175      	cbz	r5, 8000e6a <arm_cfft_f32+0xe6>
 8000e4c:	310c      	adds	r1, #12
 8000e4e:	f04f 0c00 	mov.w	ip, #0
      *pSrc = -*pSrc;
 8000e52:	ed51 7a02 	vldr	s15, [r1, #-8]
    for (l = 0; l < L; l++)
 8000e56:	f10c 0c01 	add.w	ip, ip, #1
 8000e5a:	3108      	adds	r1, #8
      *pSrc = -*pSrc;
 8000e5c:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 8000e60:	4565      	cmp	r5, ip
      *pSrc = -*pSrc;
 8000e62:	ed41 7a04 	vstr	s15, [r1, #-16]
    for (l = 0; l < L; l++)
 8000e66:	d1f4      	bne.n	8000e52 <arm_cfft_f32+0xce>
 8000e68:	e795      	b.n	8000d96 <arm_cfft_f32+0x12>
  if ( bitReverseFlag )
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0a5      	beq.n	8000dba <arm_cfft_f32+0x36>
 8000e6e:	e7b6      	b.n	8000dde <arm_cfft_f32+0x5a>

08000e70 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	ed2d 8b10 	vpush	{d8-d15}
 8000e78:	b091      	sub	sp, #68	; 0x44
 8000e7a:	468a      	mov	sl, r1
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8000e7c:	468b      	mov	fp, r1
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8000e7e:	eddf babe 	vldr	s23, [pc, #760]	; 8001178 <arm_radix8_butterfly_f32+0x308>
{
 8000e82:	900e      	str	r0, [sp, #56]	; 0x38
 8000e84:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8000e88:	4603      	mov	r3, r0
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	930f      	str	r3, [sp, #60]	; 0x3c
      n2 = n2 >> 3;
 8000e8e:	ea4f 07db 	mov.w	r7, fp, lsr #3
 8000e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
      i1 = 0;
 8000e98:	f04f 0e00 	mov.w	lr, #0
 8000e9c:	eb02 1147 	add.w	r1, r2, r7, lsl #5
      n2 = n2 >> 3;
 8000ea0:	970b      	str	r7, [sp, #44]	; 0x2c
      i1 = 0;
 8000ea2:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 8000ea6:	eb01 1007 	add.w	r0, r1, r7, lsl #4
 8000eaa:	eba7 0287 	sub.w	r2, r7, r7, lsl #2
 8000eae:	00e4      	lsls	r4, r4, #3
 8000eb0:	9001      	str	r0, [sp, #4]
 8000eb2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000eb6:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 8000eba:	9403      	str	r4, [sp, #12]
 8000ebc:	017d      	lsls	r5, r7, #5
 8000ebe:	00c4      	lsls	r4, r0, #3
 8000ec0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8000ec4:	9502      	str	r5, [sp, #8]
 8000ec6:	ea4f 1807 	mov.w	r8, r7, lsl #4
 8000eca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000ecc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000ed0:	9406      	str	r4, [sp, #24]
 8000ed2:	f108 0004 	add.w	r0, r8, #4
 8000ed6:	f109 0404 	add.w	r4, r9, #4
 8000eda:	eb01 0cc7 	add.w	ip, r1, r7, lsl #3
 8000ede:	442c      	add	r4, r5
 8000ee0:	4428      	add	r0, r5
 8000ee2:	0135      	lsls	r5, r6, #4
 8000ee4:	eb02 1747 	add.w	r7, r2, r7, lsl #5
 8000ee8:	9504      	str	r5, [sp, #16]
 8000eea:	00f5      	lsls	r5, r6, #3
 8000eec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8000eee:	9505      	str	r5, [sp, #20]
 8000ef0:	9d01      	ldr	r5, [sp, #4]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000ef2:	ed10 7a01 	vldr	s14, [r0, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
         pSrc[2 * i4 + 1] = t2 + r8;

         i1 += n1;
 8000ef6:	44de      	add	lr, fp
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000ef8:	edd2 9a00 	vldr	s19, [r2]
 8000efc:	ed97 5a00 	vldr	s10, [r7]
      } while (i1 < fftLen);
 8000f00:	45f2      	cmp	sl, lr
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f02:	edd5 4a00 	vldr	s9, [r5]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f06:	ed16 6a01 	vldr	s12, [r6, #-4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8000f0a:	ee39 9a85 	vadd.f32	s18, s19, s10
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f0e:	ed9c 4a00 	vldr	s8, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8000f12:	ee77 5a24 	vadd.f32	s11, s14, s9
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f16:	edd1 6a00 	vldr	s13, [r1]
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8000f1a:	ee77 0a64 	vsub.f32	s1, s14, s9
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f1e:	ed54 7a01 	vldr	s15, [r4, #-4]
 8000f22:	ee74 4ac7 	vsub.f32	s9, s9, s14
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8000f26:	ee36 1a26 	vadd.f32	s2, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8000f2a:	ee77 8a84 	vadd.f32	s17, s15, s8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8000f2e:	ee76 6a66 	vsub.f32	s13, s12, s13
         r1 = r1 + r3;
 8000f32:	ee31 7a25 	vadd.f32	s14, s2, s11
         r2 = r2 + r4;
 8000f36:	ee38 6a89 	vadd.f32	s12, s17, s18
         t1 = r1 - r3;
 8000f3a:	ee31 1a65 	vsub.f32	s2, s2, s11
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8000f3e:	ee77 7ac4 	vsub.f32	s15, s15, s8
         pSrc[2 * i1] = r1 + r2;
 8000f42:	ee77 5a06 	vadd.f32	s11, s14, s12
         pSrc[2 * i5] = r1 - r2;
 8000f46:	ee37 7a46 	vsub.f32	s14, s14, s12
         r1 = (r6 - r8) * C81;
 8000f4a:	ee77 2ae9 	vsub.f32	s5, s15, s19
         pSrc[2 * i1] = r1 + r2;
 8000f4e:	ed46 5a01 	vstr	s11, [r6, #-4]
         t1 = r5 - r1;
 8000f52:	eeb0 8a66 	vmov.f32	s16, s13
         pSrc[2 * i5] = r1 - r2;
 8000f56:	ed81 7a00 	vstr	s14, [r1]
         r6 = (r6 + r8) * C81;
 8000f5a:	ee77 7ac5 	vsub.f32	s15, s15, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f5e:	ed94 aa00 	vldr	s20, [r4]
         r1 = (r6 - r8) * C81;
 8000f62:	ee72 2a85 	vadd.f32	s5, s5, s10
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f66:	eddc 1a01 	vldr	s3, [ip, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f6a:	ed91 7a01 	vldr	s14, [r1, #4]
         r6 = (r6 + r8) * C81;
 8000f6e:	ee77 7aa9 	vadd.f32	s15, s15, s19
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8000f72:	ee7a 3a61 	vsub.f32	s7, s20, s3
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000f76:	ed97 6a01 	vldr	s12, [r7, #4]
 8000f7a:	ed92 2a01 	vldr	s4, [r2, #4]
         t1 = r5 - r1;
 8000f7e:	eea2 8aeb 	vfms.f32	s16, s5, s23
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000f82:	edd6 5a00 	vldr	s11, [r6]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8000f86:	ee7a 1a21 	vadd.f32	s3, s20, s3
         r2 = (s6 - s8) * C81;
 8000f8a:	ee33 3ac2 	vsub.f32	s6, s7, s4
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f8e:	ed90 0a00 	vldr	s0, [r0]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8000f92:	ee35 4ac7 	vsub.f32	s8, s11, s14
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f96:	ed95 5a01 	vldr	s10, [r5, #4]
         s6 = (s6 + s8) * C81;
 8000f9a:	ee73 3ac6 	vsub.f32	s7, s7, s12
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8000f9e:	ee70 aa05 	vadd.f32	s21, s0, s10
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8000fa2:	ee75 5a87 	vadd.f32	s11, s11, s14
         r2 = (s6 - s8) * C81;
 8000fa6:	ee33 3a06 	vadd.f32	s6, s6, s12
         s6 = (s6 + s8) * C81;
 8000faa:	ee33 7a82 	vadd.f32	s14, s7, s4
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8000fae:	ee70 3a45 	vsub.f32	s7, s0, s10
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000fb2:	ee35 5a40 	vsub.f32	s10, s10, s0
         t2 = s5 - r2;
 8000fb6:	eeb0 0a44 	vmov.f32	s0, s8
         s7 = s7 + s6;
 8000fba:	eeb0 aa63 	vmov.f32	s20, s7
 8000fbe:	eef0 9a48 	vmov.f32	s19, s16
         t2 = s5 - r2;
 8000fc2:	eea3 0a6b 	vfms.f32	s0, s6, s23
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8000fc6:	ee32 2a06 	vadd.f32	s4, s4, s12
         r5 = r5 + r1;
 8000fca:	eee2 6aab 	vfma.f32	s13, s5, s23
         t2 = r1 - s3;
 8000fce:	ee35 6aea 	vsub.f32	s12, s11, s21
         s7 = s7 + s6;
 8000fd2:	eea7 aa2b 	vfma.f32	s20, s14, s23
 8000fd6:	eee7 9a6b 	vfms.f32	s19, s14, s23
 8000fda:	eea7 5a2b 	vfma.f32	s10, s14, s23
         r7 = r7 + r6;
 8000fde:	eef0 2a60 	vmov.f32	s5, s1
         r1 = r1 + s3;
 8000fe2:	ee35 7aaa 	vadd.f32	s14, s11, s21
 8000fe6:	eef0 5a40 	vmov.f32	s11, s0
         r7 = r7 + r6;
 8000fea:	eee7 2aab 	vfma.f32	s5, s15, s23
         s5 = s5 + r2;
 8000fee:	eea3 4a2b 	vfma.f32	s8, s6, s23
 8000ff2:	eee7 4aab 	vfma.f32	s9, s15, s23
 8000ff6:	eee7 5aeb 	vfms.f32	s11, s15, s23
         r2 = r2 + r4;
 8000ffa:	ee71 aa82 	vadd.f32	s21, s3, s4
         pSrc[2 * i3]     = t1 + s3;
 8000ffe:	ee31 ba42 	vsub.f32	s22, s2, s4
         pSrc[2 * i7]     = t1 - s3;
 8001002:	ee71 7a61 	vsub.f32	s15, s2, s3
         pSrc[2 * i3 + 1] = t2 - r3;
 8001006:	ee36 3a68 	vsub.f32	s6, s12, s17
         pSrc[2 * i7 + 1] = t2 + r3;
 800100a:	ee36 6a49 	vsub.f32	s12, s12, s18
         pSrc[2 * i1 + 1] = r1 + r2;
 800100e:	ee37 1a2a 	vadd.f32	s2, s14, s21
         pSrc[2 * i7]     = t1 - s3;
 8001012:	ee77 7a82 	vadd.f32	s15, s15, s4
         pSrc[2 * i3 + 1] = t2 - r3;
 8001016:	ee33 9a09 	vadd.f32	s18, s6, s18
         pSrc[2 * i2]     = r5 + s7;
 800101a:	ee36 2a8a 	vadd.f32	s4, s13, s20
         pSrc[2 * i1 + 1] = r1 + r2;
 800101e:	ed86 1a00 	vstr	s2, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001022:	ee34 3a62 	vsub.f32	s6, s8, s5
      } while (i1 < fftLen);
 8001026:	441e      	add	r6, r3
         pSrc[2 * i5 + 1] = r1 - r2;
 8001028:	ee37 7a6a 	vsub.f32	s14, s14, s21
         pSrc[2 * i3]     = t1 + s3;
 800102c:	ee7b 1a21 	vadd.f32	s3, s22, s3
         pSrc[2 * i7 + 1] = t2 + r3;
 8001030:	ee36 6a28 	vadd.f32	s12, s12, s17
         pSrc[2 * i8]     = r5 - s7;
 8001034:	ee76 6aca 	vsub.f32	s13, s13, s20
         pSrc[2 * i5 + 1] = r1 - r2;
 8001038:	ed81 7a01 	vstr	s14, [r1, #4]
         pSrc[2 * i6]     = t1 + s8;
 800103c:	ee73 3aa9 	vadd.f32	s7, s7, s19
         pSrc[2 * i3]     = t1 + s3;
 8001040:	ed40 1a01 	vstr	s3, [r0, #-4]
         pSrc[2 * i4]     = t1 - s8;
 8001044:	ee38 5a05 	vadd.f32	s10, s16, s10
         pSrc[2 * i7]     = t1 - s3;
 8001048:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i8 + 1] = s5 + r7;
 800104c:	ee32 4a84 	vadd.f32	s8, s5, s8
         pSrc[2 * i3 + 1] = t2 - r3;
 8001050:	ed80 9a00 	vstr	s18, [r0]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001054:	ee70 4a24 	vadd.f32	s9, s0, s9
         pSrc[2 * i7 + 1] = t2 + r3;
 8001058:	ed85 6a01 	vstr	s12, [r5, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 800105c:	ee70 5aa5 	vadd.f32	s11, s1, s11
         pSrc[2 * i2]     = r5 + s7;
 8001060:	ed04 2a01 	vstr	s4, [r4, #-4]
      } while (i1 < fftLen);
 8001064:	4419      	add	r1, r3
         pSrc[2 * i8]     = r5 - s7;
 8001066:	edc7 6a00 	vstr	s13, [r7]
      } while (i1 < fftLen);
 800106a:	4418      	add	r0, r3
         pSrc[2 * i6]     = t1 + s8;
 800106c:	edcc 3a00 	vstr	s7, [ip]
      } while (i1 < fftLen);
 8001070:	441d      	add	r5, r3
         pSrc[2 * i4]     = t1 - s8;
 8001072:	ed82 5a00 	vstr	s10, [r2]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001076:	ed84 3a00 	vstr	s6, [r4]
      } while (i1 < fftLen);
 800107a:	441c      	add	r4, r3
         pSrc[2 * i8 + 1] = s5 + r7;
 800107c:	ed87 4a01 	vstr	s8, [r7, #4]
      } while (i1 < fftLen);
 8001080:	441f      	add	r7, r3
         pSrc[2 * i6 + 1] = t2 - r8;
 8001082:	edcc 4a01 	vstr	s9, [ip, #4]
      } while (i1 < fftLen);
 8001086:	449c      	add	ip, r3
         pSrc[2 * i4 + 1] = t2 + r8;
 8001088:	edc2 5a01 	vstr	s11, [r2, #4]
      } while (i1 < fftLen);
 800108c:	441a      	add	r2, r3
 800108e:	f63f af30 	bhi.w	8000ef2 <arm_radix8_butterfly_f32+0x82>

      if (n2 < 8)
 8001092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001094:	2a07      	cmp	r2, #7
 8001096:	f240 819f 	bls.w	80013d8 <arm_radix8_butterfly_f32+0x568>
 800109a:	9d02      	ldr	r5, [sp, #8]
 800109c:	f109 0908 	add.w	r9, r9, #8
 80010a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80010a2:	f108 080c 	add.w	r8, r8, #12
 80010a6:	3508      	adds	r5, #8
 80010a8:	9a06      	ldr	r2, [sp, #24]
 80010aa:	9905      	ldr	r1, [sp, #20]
 80010ac:	1975      	adds	r5, r6, r5
 80010ae:	3208      	adds	r2, #8
 80010b0:	9c03      	ldr	r4, [sp, #12]
 80010b2:	3108      	adds	r1, #8
 80010b4:	950a      	str	r5, [sp, #40]	; 0x28
 80010b6:	4635      	mov	r5, r6
 80010b8:	9804      	ldr	r0, [sp, #16]
 80010ba:	3408      	adds	r4, #8
 80010bc:	18aa      	adds	r2, r5, r2
 80010be:	1869      	adds	r1, r5, r1
 80010c0:	3008      	adds	r0, #8
 80010c2:	444e      	add	r6, r9
 80010c4:	9205      	str	r2, [sp, #20]
 80010c6:	462a      	mov	r2, r5
 80010c8:	192c      	adds	r4, r5, r4
 80010ca:	1828      	adds	r0, r5, r0
 80010cc:	320c      	adds	r2, #12
 80010ce:	9106      	str	r1, [sp, #24]
         break;

      ia1 = 0;
      j = 1;
 80010d0:	f04f 0901 	mov.w	r9, #1
 80010d4:	eb05 0108 	add.w	r1, r5, r8
      ia1 = 0;
 80010d8:	f04f 0800 	mov.w	r8, #0
 80010dc:	9609      	str	r6, [sp, #36]	; 0x24
 80010de:	9408      	str	r4, [sp, #32]
 80010e0:	9007      	str	r0, [sp, #28]
 80010e2:	9103      	str	r1, [sp, #12]
 80010e4:	9204      	str	r2, [sp, #16]

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80010e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 80010e8:	46ce      	mov	lr, r9
         si8 = pCoef[2 * ia7 + 1];
 80010ea:	9e05      	ldr	r6, [sp, #20]
         id  = ia1 + twidCoefModifier;
 80010ec:	4490      	add	r8, r2
         co2 = pCoef[2 * ia1];
 80010ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80010f0:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80010f4:	eba8 0188 	sub.w	r1, r8, r8, lsl #2
 80010f8:	ed92 fa00 	vldr	s30, [r2]
         co3 = pCoef[2 * ia2];
 80010fc:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001100:	edd2 ea00 	vldr	s29, [r2]
         co4 = pCoef[2 * ia3];
 8001104:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001108:	ed92 ea00 	vldr	s28, [r2]
         co5 = pCoef[2 * ia4];
 800110c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001110:	edd2 da00 	vldr	s27, [r2]
         co6 = pCoef[2 * ia5];
 8001114:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001118:	ed92 da00 	vldr	s26, [r2]
         co7 = pCoef[2 * ia6];
 800111c:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001120:	edd2 ca00 	vldr	s25, [r2]
         co8 = pCoef[2 * ia7];
 8001124:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001128:	ed92 ca00 	vldr	s24, [r2]
         si8 = pCoef[2 * ia7 + 1];
 800112c:	ed92 ba01 	vldr	s22, [r2, #4]
 8001130:	eb02 1201 	add.w	r2, r2, r1, lsl #4
         si2 = pCoef[2 * ia1 + 1];
 8001134:	edd2 aa01 	vldr	s21, [r2, #4]
         si3 = pCoef[2 * ia2 + 1];
 8001138:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800113c:	ed92 aa01 	vldr	s20, [r2, #4]
         si4 = pCoef[2 * ia3 + 1];
 8001140:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001144:	edd2 9a01 	vldr	s19, [r2, #4]
         si5 = pCoef[2 * ia4 + 1];
 8001148:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800114c:	ed92 9a01 	vldr	s18, [r2, #4]
         si6 = pCoef[2 * ia5 + 1];
 8001150:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8001154:	edd2 7a01 	vldr	s15, [r2, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001158:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
         si6 = pCoef[2 * ia5 + 1];
 800115c:	edcd 7a01 	vstr	s15, [sp, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001160:	edd2 7a01 	vldr	s15, [r2, #4]
         si8 = pCoef[2 * ia7 + 1];
 8001164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         si7 = pCoef[2 * ia6 + 1];
 8001166:	edcd 7a02 	vstr	s15, [sp, #8]
         si8 = pCoef[2 * ia7 + 1];
 800116a:	e9dd c703 	ldrd	ip, r7, [sp, #12]
 800116e:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8001172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001176:	e001      	b.n	800117c <arm_radix8_butterfly_f32+0x30c>
 8001178:	3f3504f3 	.word	0x3f3504f3
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800117c:	edd5 3a00 	vldr	s7, [r5]
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;

            i1 += n1;
 8001180:	44de      	add	lr, fp
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001182:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8001186:	edd4 6a00 	vldr	s13, [r4]
         } while (i1 < fftLen);
 800118a:	45f2      	cmp	sl, lr
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800118c:	edd6 4a00 	vldr	s9, [r6]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001190:	ed17 4a01 	vldr	s8, [r7, #-4]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001194:	ee37 6a26 	vadd.f32	s12, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001198:	ed91 3a00 	vldr	s6, [r1]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800119c:	ee33 0aa4 	vadd.f32	s0, s7, s9
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80011a0:	edd2 5a00 	vldr	s11, [r2]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80011a4:	ee77 8a66 	vsub.f32	s17, s14, s13
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80011a8:	edd0 7a00 	vldr	s15, [r0]
 80011ac:	ee76 6ac7 	vsub.f32	s13, s13, s14
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80011b0:	ee34 5a25 	vadd.f32	s10, s8, s11
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011b4:	ed97 1a00 	vldr	s2, [r7]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80011b8:	ee73 0a27 	vadd.f32	s1, s6, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80011bc:	ee73 7a67 	vsub.f32	s15, s6, s15
            r1 = r1 + r3;
 80011c0:	ee35 2a06 	vadd.f32	s4, s10, s12
            r2 = r2 + r4;
 80011c4:	ee30 7a80 	vadd.f32	s14, s1, s0
            t1 = r1 - r3;
 80011c8:	ee35 6a46 	vsub.f32	s12, s10, s12
            r1 = (r6 - r8) * C81;
 80011cc:	ee77 fae3 	vsub.f32	s31, s15, s7
            pSrc[2 * i1] = r1 + r2;
 80011d0:	ee32 5a07 	vadd.f32	s10, s4, s14
            r6 = (r6 + r8) * C81;
 80011d4:	ee77 7ae4 	vsub.f32	s15, s15, s9
            r2 = r1 - r2;
 80011d8:	ee32 2a47 	vsub.f32	s4, s4, s14
            pSrc[2 * i1] = r1 + r2;
 80011dc:	ed07 5a01 	vstr	s10, [r7, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80011e0:	ee74 5a65 	vsub.f32	s11, s8, s11
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80011e4:	ed90 7a01 	vldr	s14, [r0, #4]
            r6 = (r6 + r8) * C81;
 80011e8:	ee77 7aa3 	vadd.f32	s15, s15, s7
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80011ec:	ed91 3a01 	vldr	s6, [r1, #4]
            r1 = (r6 - r8) * C81;
 80011f0:	ee7f 4aa4 	vadd.f32	s9, s31, s9
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80011f4:	ed92 4a01 	vldr	s8, [r2, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80011f8:	ee33 5a47 	vsub.f32	s10, s6, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80011fc:	edd6 3a01 	vldr	s7, [r6, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001200:	ee71 2a44 	vsub.f32	s5, s2, s8
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001204:	ed9c 8a00 	vldr	s16, [ip]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001208:	ee31 1a04 	vadd.f32	s2, s2, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800120c:	ed95 4a01 	vldr	s8, [r5, #4]
 8001210:	eee7 6aab 	vfma.f32	s13, s15, s23
            s1 = (s6 - s8) * C81;
 8001214:	ee75 fa44 	vsub.f32	s31, s10, s8
            s6 = (s6 + s8) * C81;
 8001218:	ee35 5a63 	vsub.f32	s10, s10, s7
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800121c:	ee33 3a07 	vadd.f32	s6, s6, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001220:	ed94 7a01 	vldr	s14, [r4, #4]
            s1 = (s6 - s8) * C81;
 8001224:	ee7f faa3 	vadd.f32	s31, s31, s7
            s6 = (s6 + s8) * C81;
 8001228:	ee35 5a04 	vadd.f32	s10, s10, s8
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800122c:	ee74 3a23 	vadd.f32	s7, s8, s7
            t1 = r5 - r1;
 8001230:	eeb0 4a65 	vmov.f32	s8, s11
            r5 = r5 + r1;
 8001234:	eee4 5aab 	vfma.f32	s11, s9, s23
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001238:	ee78 1a07 	vadd.f32	s3, s16, s14
            t1 = r5 - r1;
 800123c:	eea4 4aeb 	vfms.f32	s8, s9, s23
            t2 = s5 - s1;
 8001240:	eef0 4a62 	vmov.f32	s9, s5
            s5 = s5 + s1;
 8001244:	eeef 2aab 	vfma.f32	s5, s31, s23
            t2 = s5 - s1;
 8001248:	eeef 4aeb 	vfms.f32	s9, s31, s23
            r7 = r7 + r6;
 800124c:	eef0 fa68 	vmov.f32	s31, s17
 8001250:	eee7 faab 	vfma.f32	s31, s15, s23
            s6 = t2 - r8;
 8001254:	ee74 6aa6 	vadd.f32	s13, s9, s13
 8001258:	eee7 4aeb 	vfms.f32	s9, s15, s23
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800125c:	ee78 7a47 	vsub.f32	s15, s16, s14
            t2 = s1 - s3;
 8001260:	ee37 7a48 	vsub.f32	s14, s14, s16
            s7 = s7 + s6;
 8001264:	eeb0 8a67 	vmov.f32	s16, s15
 8001268:	eea5 7a2b 	vfma.f32	s14, s10, s23
            t2 = t2 + r8;
 800126c:	ee78 4aa4 	vadd.f32	s9, s17, s9
            s7 = s7 + s6;
 8001270:	eea5 8a2b 	vfma.f32	s16, s10, s23
            r1 = t1 + s3;
 8001274:	ee76 8a63 	vsub.f32	s17, s12, s7
 8001278:	ee36 6a43 	vsub.f32	s12, s12, s6
            t1 = t1 - s8;
 800127c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8001280:	eea5 4a6b 	vfms.f32	s8, s10, s23
            t2 = s1 - s3;
 8001284:	ee31 5a61 	vsub.f32	s10, s2, s3
            s1 = s1 + s3;
 8001288:	ee71 1a21 	vadd.f32	s3, s2, s3
            t1 = t1 - s3;
 800128c:	ee33 6a86 	vadd.f32	s12, s7, s12
            r6 = t1 + s8;
 8001290:	ee74 7a27 	vadd.f32	s15, s8, s15
            s2 = s2 + s4;
 8001294:	ee33 4a23 	vadd.f32	s8, s6, s7
            r1 = t1 + s3;
 8001298:	ee38 3a83 	vadd.f32	s6, s17, s6
            p2 = si6 * s6;
 800129c:	eddd 8a01 	vldr	s17, [sp, #4]
            pSrc[2 * i1 + 1] = s1 + s2;
 80012a0:	ee71 3a84 	vadd.f32	s7, s3, s8
            s2 = s1 - s2;
 80012a4:	ee71 1ac4 	vsub.f32	s3, s3, s8
            s1 = t2 - r3;
 80012a8:	ee35 4a60 	vsub.f32	s8, s10, s1
 80012ac:	ee35 5a40 	vsub.f32	s10, s10, s0
            pSrc[2 * i1 + 1] = s1 + s2;
 80012b0:	edc7 3a00 	vstr	s7, [r7]
            p2 = si5 * s2;
 80012b4:	ee29 1a21 	vmul.f32	s2, s18, s3
         } while (i1 < fftLen);
 80012b8:	441f      	add	r7, r3
            s1 = t2 - r3;
 80012ba:	ee34 0a00 	vadd.f32	s0, s8, s0
            t2 = t2 + r3;
 80012be:	ee70 0a85 	vadd.f32	s1, s1, s10
            pSrc[2 * i3 + 1] = p3 - p4;
 80012c2:	ee23 5a4a 	vnmul.f32	s10, s6, s20
            p2 = si3 * s1;
 80012c6:	ee2a 4a00 	vmul.f32	s8, s20, s0
            pSrc[2 * i5]     = p1 + p2;
 80012ca:	eead 1a82 	vfma.f32	s2, s27, s4
            pSrc[2 * i3 + 1] = p3 - p4;
 80012ce:	eeae 5a80 	vfma.f32	s10, s29, s0
            p2 = si7 * t2;
 80012d2:	ed9d 0a02 	vldr	s0, [sp, #8]
            pSrc[2 * i3]     = p1 + p2;
 80012d6:	eeae 4a83 	vfma.f32	s8, s29, s6
            pSrc[2 * i5 + 1] = p3 - p4;
 80012da:	ee62 3a49 	vnmul.f32	s7, s4, s18
            p2 = si7 * t2;
 80012de:	ee20 3a20 	vmul.f32	s6, s0, s1
            r1 = r5 + s7;
 80012e2:	ee35 2a88 	vadd.f32	s4, s11, s16
            pSrc[2 * i5 + 1] = p3 - p4;
 80012e6:	eeed 3aa1 	vfma.f32	s7, s27, s3
            pSrc[2 * i5]     = p1 + p2;
 80012ea:	ed82 1a00 	vstr	s2, [r2]
            s1 = s5 - r7;
 80012ee:	ee72 1aef 	vsub.f32	s3, s5, s31
            pSrc[2 * i7]     = p1 + p2;
 80012f2:	eeac 3a86 	vfma.f32	s6, s25, s12
            pSrc[2 * i7 + 1] = p3 - p4;
 80012f6:	ee26 0a40 	vnmul.f32	s0, s12, s0
            pSrc[2 * i2 + 1] = p3 - p4;
 80012fa:	ee22 6a6a 	vnmul.f32	s12, s4, s21
            r5 = r5 - s7;
 80012fe:	ee75 5ac8 	vsub.f32	s11, s11, s16
            s5 = s5 + r7;
 8001302:	ee7f 2aa2 	vadd.f32	s5, s31, s5
            pSrc[2 * i5 + 1] = p3 - p4;
 8001306:	edc2 3a01 	vstr	s7, [r2, #4]
            pSrc[2 * i2 + 1] = p3 - p4;
 800130a:	eeaf 6a21 	vfma.f32	s12, s30, s3
            pSrc[2 * i3]     = p1 + p2;
 800130e:	ed0c 4a01 	vstr	s8, [ip, #-4]
            p2 = si2 * s1;
 8001312:	ee2a 8aa1 	vmul.f32	s16, s21, s3
            pSrc[2 * i3 + 1] = p3 - p4;
 8001316:	ed8c 5a00 	vstr	s10, [ip]
            pSrc[2 * i7 + 1] = p3 - p4;
 800131a:	eeac 0aa0 	vfma.f32	s0, s25, s1
            pSrc[2 * i7]     = p1 + p2;
 800131e:	ed84 3a00 	vstr	s6, [r4]
            p2 = si8 * s5;
 8001322:	ee6b 0a22 	vmul.f32	s1, s22, s5
         } while (i1 < fftLen);
 8001326:	441a      	add	r2, r3
            pSrc[2 * i2]     = p1 + p2;
 8001328:	eeaf 8a02 	vfma.f32	s16, s30, s4
         } while (i1 < fftLen);
 800132c:	449c      	add	ip, r3
            pSrc[2 * i8 + 1] = p3 - p4;
 800132e:	ee25 1acb 	vnmul.f32	s2, s11, s22
            pSrc[2 * i2 + 1] = p3 - p4;
 8001332:	eeb0 2a46 	vmov.f32	s4, s12
            p2 = si6 * s6;
 8001336:	ee68 3aa6 	vmul.f32	s7, s17, s13
            pSrc[2 * i6 + 1] = p3 - p4;
 800133a:	ee67 1ae8 	vnmul.f32	s3, s15, s17
            pSrc[2 * i7 + 1] = p3 - p4;
 800133e:	ed84 0a01 	vstr	s0, [r4, #4]
            p2 = si4 * t2;
 8001342:	ee29 4aa4 	vmul.f32	s8, s19, s9
            pSrc[2 * i2 + 1] = p3 - p4;
 8001346:	ed81 2a01 	vstr	s4, [r1, #4]
            pSrc[2 * i4 + 1] = p3 - p4;
 800134a:	ee27 6a69 	vnmul.f32	s12, s14, s19
            pSrc[2 * i2]     = p1 + p2;
 800134e:	ed81 8a00 	vstr	s16, [r1]
            pSrc[2 * i8]     = p1 + p2;
 8001352:	eeec 0a25 	vfma.f32	s1, s24, s11
         } while (i1 < fftLen);
 8001356:	441c      	add	r4, r3
            pSrc[2 * i8 + 1] = p3 - p4;
 8001358:	eeac 1a22 	vfma.f32	s2, s24, s5
         } while (i1 < fftLen);
 800135c:	4419      	add	r1, r3
            pSrc[2 * i6]     = p1 + p2;
 800135e:	eeed 3a27 	vfma.f32	s7, s26, s15
            pSrc[2 * i6 + 1] = p3 - p4;
 8001362:	eeed 1a26 	vfma.f32	s3, s26, s13
            pSrc[2 * i4]     = p1 + p2;
 8001366:	eeae 4a07 	vfma.f32	s8, s28, s14
            pSrc[2 * i4 + 1] = p3 - p4;
 800136a:	eeae 6a24 	vfma.f32	s12, s28, s9
            pSrc[2 * i8]     = p1 + p2;
 800136e:	edc6 0a00 	vstr	s1, [r6]
            pSrc[2 * i8 + 1] = p3 - p4;
 8001372:	ed86 1a01 	vstr	s2, [r6, #4]
         } while (i1 < fftLen);
 8001376:	441e      	add	r6, r3
            pSrc[2 * i6]     = p1 + p2;
 8001378:	edc0 3a00 	vstr	s7, [r0]
            pSrc[2 * i6 + 1] = p3 - p4;
 800137c:	edc0 1a01 	vstr	s3, [r0, #4]
         } while (i1 < fftLen);
 8001380:	4418      	add	r0, r3
            pSrc[2 * i4]     = p1 + p2;
 8001382:	ed85 4a00 	vstr	s8, [r5]
            pSrc[2 * i4 + 1] = p3 - p4;
 8001386:	ed85 6a01 	vstr	s12, [r5, #4]
         } while (i1 < fftLen);
 800138a:	441d      	add	r5, r3
 800138c:	f63f aef6 	bhi.w	800117c <arm_radix8_butterfly_f32+0x30c>

         j++;
      } while (j < n2);
 8001390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
         j++;
 8001392:	f109 0901 	add.w	r9, r9, #1
      } while (j < n2);
 8001396:	3208      	adds	r2, #8
 8001398:	920a      	str	r2, [sp, #40]	; 0x28
 800139a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800139c:	3208      	adds	r2, #8
 800139e:	9209      	str	r2, [sp, #36]	; 0x24
 80013a0:	9a08      	ldr	r2, [sp, #32]
 80013a2:	3208      	adds	r2, #8
 80013a4:	9208      	str	r2, [sp, #32]
 80013a6:	9a07      	ldr	r2, [sp, #28]
 80013a8:	3208      	adds	r2, #8
 80013aa:	9207      	str	r2, [sp, #28]
 80013ac:	9a06      	ldr	r2, [sp, #24]
 80013ae:	3208      	adds	r2, #8
 80013b0:	9206      	str	r2, [sp, #24]
 80013b2:	9a05      	ldr	r2, [sp, #20]
 80013b4:	3208      	adds	r2, #8
 80013b6:	9205      	str	r2, [sp, #20]
 80013b8:	9a04      	ldr	r2, [sp, #16]
 80013ba:	3208      	adds	r2, #8
 80013bc:	9204      	str	r2, [sp, #16]
 80013be:	9a03      	ldr	r2, [sp, #12]
 80013c0:	3208      	adds	r2, #8
 80013c2:	9203      	str	r2, [sp, #12]
 80013c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80013c6:	454a      	cmp	r2, r9
 80013c8:	f47f ae8d 	bne.w	80010e6 <arm_radix8_butterfly_f32+0x276>

      twidCoefModifier <<= 3;
 80013cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013ce:	4693      	mov	fp, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	930c      	str	r3, [sp, #48]	; 0x30
   } while (n2 > 7);
 80013d6:	e55a      	b.n	8000e8e <arm_radix8_butterfly_f32+0x1e>
}
 80013d8:	b011      	add	sp, #68	; 0x44
 80013da:	ecbd 8b10 	vpop	{d8-d15}
 80013de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013e2:	bf00      	nop

080013e4 <arm_cmplx_mult_cmplx_f32>:
  blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80013e4:	b1eb      	cbz	r3, 8001422 <arm_cmplx_mult_cmplx_f32+0x3e>
 80013e6:	3008      	adds	r0, #8
 80013e8:	3108      	adds	r1, #8
 80013ea:	3208      	adds	r2, #8
  {
    /* C[2 * i    ] = A[2 * i] * B[2 * i    ] - A[2 * i + 1] * B[2 * i + 1]. */
    /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i    ]. */

    a = *pSrcA++;
    b = *pSrcA++;
 80013ec:	ed50 7a01 	vldr	s15, [r0, #-4]
  while (blkCnt > 0U)
 80013f0:	3208      	adds	r2, #8
    c = *pSrcB++;
 80013f2:	ed51 6a02 	vldr	s13, [r1, #-8]
  while (blkCnt > 0U)
 80013f6:	3b01      	subs	r3, #1
    d = *pSrcB++;
 80013f8:	ed51 5a01 	vldr	s11, [r1, #-4]
  while (blkCnt > 0U)
 80013fc:	f100 0008 	add.w	r0, r0, #8

    /* store result in destination buffer. */
    *pDst++ = (a * c) - (b * d);
    *pDst++ = (a * d) + (b * c);
 8001400:	ee27 7aa6 	vmul.f32	s14, s15, s13
    a = *pSrcA++;
 8001404:	ed10 6a04 	vldr	s12, [r0, #-16]
    *pDst++ = (a * c) - (b * d);
 8001408:	ee65 7ae7 	vnmul.f32	s15, s11, s15
  while (blkCnt > 0U)
 800140c:	f101 0108 	add.w	r1, r1, #8
    *pDst++ = (a * d) + (b * c);
 8001410:	eea6 7a25 	vfma.f32	s14, s12, s11
    *pDst++ = (a * c) - (b * d);
 8001414:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pDst++ = (a * d) + (b * c);
 8001418:	ed02 7a03 	vstr	s14, [r2, #-12]
    *pDst++ = (a * c) - (b * d);
 800141c:	ed42 7a04 	vstr	s15, [r2, #-16]
  while (blkCnt > 0U)
 8001420:	d1e4      	bne.n	80013ec <arm_cmplx_mult_cmplx_f32+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 8001422:	4770      	bx	lr

08001424 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8001428:	8844      	ldrh	r4, [r0, #2]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 800142a:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 800142e:	f890 8000 	ldrb.w	r8, [r0]
        float32_t *pState = S->pState;                 /* State pointer */
 8001432:	6887      	ldr	r7, [r0, #8]
  pStateCur = S->pState + (numTaps - 1U);
 8001434:	44a6      	add	lr, r4
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8001436:	4598      	cmp	r8, r3
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8001438:	f8d0 9004 	ldr.w	r9, [r0, #4]
  pStateCur = S->pState + (numTaps - 1U);
 800143c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8001440:	fbb3 faf8 	udiv	sl, r3, r8
  while (blkCnt > 0U)
 8001444:	d834      	bhi.n	80014b0 <arm_fir_decimate_f32+0x8c>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8001446:	ea4f 0c88 	mov.w	ip, r8, lsl #2
  blkCnt = outBlockSize;
 800144a:	4655      	mov	r5, sl
        float32_t *pState = S->pState;                 /* State pointer */
 800144c:	463e      	mov	r6, r7
 800144e:	46f3      	mov	fp, lr
 8001450:	4643      	mov	r3, r8
 8001452:	4608      	mov	r0, r1
      *pStateCur++ = *pSrc++;
 8001454:	ecf0 7a01 	vldmia	r0!, {s15}
    } while (--i);
 8001458:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 800145a:	eceb 7a01 	vstmia	fp!, {s15}
    } while (--i);
 800145e:	d1f9      	bne.n	8001454 <arm_fir_decimate_f32+0x30>
      *pStateCur++ = *pSrc++;
 8001460:	4461      	add	r1, ip
 8001462:	44e6      	add	lr, ip
    while (tapCnt > 0U)
 8001464:	b1e4      	cbz	r4, 80014a0 <arm_fir_decimate_f32+0x7c>
 8001466:	4623      	mov	r3, r4
    acc0 = 0.0f;
 8001468:	eddf 7a12 	vldr	s15, [pc, #72]	; 80014b4 <arm_fir_decimate_f32+0x90>
    pb = pCoeffs;
 800146c:	46cb      	mov	fp, r9
    while (tapCnt > 0U)
 800146e:	4630      	mov	r0, r6
      acc0 += x0 * c0;
 8001470:	ecfb 6a01 	vldmia	fp!, {s13}
    while (tapCnt > 0U)
 8001474:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8001476:	ecb0 7a01 	vldmia	r0!, {s14}
 800147a:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 800147e:	d1f7      	bne.n	8001470 <arm_fir_decimate_f32+0x4c>
  while (blkCnt > 0U)
 8001480:	3d01      	subs	r5, #1
    pState = pState + S->M;
 8001482:	4466      	add	r6, ip

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8001484:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8001488:	d1e1      	bne.n	800144e <arm_fir_decimate_f32+0x2a>
    pState = pState + S->M;
 800148a:	fb0a 7c0c 	mla	ip, sl, ip, r7
 800148e:	e003      	b.n	8001498 <arm_fir_decimate_f32+0x74>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8001490:	f85c 3b04 	ldr.w	r3, [ip], #4
 8001494:	f847 3b04 	str.w	r3, [r7], #4
  while (tapCnt > 0U)
 8001498:	3c01      	subs	r4, #1
 800149a:	d1f9      	bne.n	8001490 <arm_fir_decimate_f32+0x6c>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 800149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc0 = 0.0f;
 80014a0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80014b4 <arm_fir_decimate_f32+0x90>
  while (blkCnt > 0U)
 80014a4:	3d01      	subs	r5, #1
    pState = pState + S->M;
 80014a6:	4466      	add	r6, ip
    *pDst++ = acc0;
 80014a8:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 80014ac:	d1cf      	bne.n	800144e <arm_fir_decimate_f32+0x2a>
 80014ae:	e7ec      	b.n	800148a <arm_fir_decimate_f32+0x66>
        float32_t *pState = S->pState;                 /* State pointer */
 80014b0:	46bc      	mov	ip, r7
 80014b2:	e7f1      	b.n	8001498 <arm_fir_decimate_f32+0x74>
 80014b4:	00000000 	.word	0x00000000

080014b8 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	4616      	mov	r6, r2
 80014bc:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 80014c0:	fbb2 f4f6 	udiv	r4, r2, r6
 80014c4:	fb06 2414 	mls	r4, r6, r4, r2
 80014c8:	b96c      	cbnz	r4, 80014e6 <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 80014ca:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014cc:	1e4b      	subs	r3, r1, #1
 80014ce:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 80014d0:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80014d2:	441a      	add	r2, r3
 80014d4:	4621      	mov	r1, r4
 80014d6:	4638      	mov	r0, r7
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	f00f fa83 	bl	80109e4 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 80014de:	4620      	mov	r0, r4
    S->pState = pState;
 80014e0:	60af      	str	r7, [r5, #8]
    S->M = M;
 80014e2:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 80014e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 80014e6:	f06f 0001 	mvn.w	r0, #1
}
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014ec <loadWPM>:
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
	}
}

void loadWPM (int wpm) // Calculate new time constants based on wpm value
{
 80014ec:	b510      	push	{r4, lr}

	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014ee:	4c05      	ldr	r4, [pc, #20]	; (8001504 <loadWPM+0x18>)
{
 80014f0:	4602      	mov	r2, r0
	ditTime = (1200ULL)/wpm;   //ditTime = 1200/wpm; time in msec
 80014f2:	17c3      	asrs	r3, r0, #31
 80014f4:	2100      	movs	r1, #0
 80014f6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80014fa:	f7fe ffa9 	bl	8000450 <__aeabi_uldivmod>
 80014fe:	6020      	str	r0, [r4, #0]

}
 8001500:	bd10      	pop	{r4, pc}
 8001502:	bf00      	nop
 8001504:	24007c38 	.word	0x24007c38

08001508 <HAL_TIM_PeriodElapsedCallback>:
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

void DoKeyer(void)
{

#ifdef SEMI_QSK
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 800150c:	4c9a      	ldr	r4, [pc, #616]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d12f      	bne.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x6c>
			semi_qsk_timeout = 0;
						pk = Saved_pk;
		}  // delayed QSK RX
#endif

	if(keyer_mode != SINGLE){  // check DIT/DAH keys for CW
 8001514:	4a99      	ldr	r2, [pc, #612]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	2a02      	cmp	r2, #2
 800151a:	d029      	beq.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>

		switch(keyerState){ // Basic Iambic Keyer, keyerControl contains processing flags and keyer mode bits, Supports Iambic A and B, State machine based, uses calls to millis() for timing.
 800151c:	4d98      	ldr	r5, [pc, #608]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800151e:	782a      	ldrb	r2, [r5, #0]
 8001520:	2a05      	cmp	r2, #5
 8001522:	d825      	bhi.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
 8001524:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001528:	009f0070 	.word	0x009f0070
 800152c:	000600d9 	.word	0x000600d9
 8001530:	004000ad 	.word	0x004000ad
			} else {
				keyerState = IDLE;
			}
			break;
		case KEYED_PREP: // Assert key down, start timing, state shared for dit or dah
			Key_state = HIGH;
 8001534:	4a93      	ldr	r2, [pc, #588]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001536:	2001      	movs	r0, #1
 8001538:	6010      	str	r0, [r2, #0]
	if(!(semi_qsk_timeout))
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80e2 	beq.w	8001704 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8001540:	4f91      	ldr	r7, [pc, #580]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x280>)
	tx = tx_enable;
 8001542:	2601      	movs	r6, #1
		semi_qsk_timeout = 0;
 8001544:	2300      	movs	r3, #0
			CarrierEnable(1);
 8001546:	4630      	mov	r0, r6
		semi_qsk_timeout = 0;
 8001548:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 800154a:	703e      	strb	r6, [r7, #0]
			CarrierEnable(1);
 800154c:	f003 fd94 	bl	8005078 <CarrierEnable>
		TXSwitch(1);
 8001550:	4630      	mov	r0, r6
			switch_rxtx(Key_state);
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
			keyerState = KEYED;                 // next state
 8001552:	2404      	movs	r4, #4
		TXSwitch(1);
 8001554:	f003 fd2c 	bl	8004fb0 <TXSwitch>
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001558:	f005 fb58 	bl	8006c0c <HAL_GetTick>
 800155c:	498b      	ldr	r1, [pc, #556]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x284>)
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800155e:	4a8c      	ldr	r2, [pc, #560]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001560:	680b      	ldr	r3, [r1, #0]
			keyerState = KEYED;                 // next state
 8001562:	702c      	strb	r4, [r5, #0]
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 8001564:	4418      	add	r0, r3
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 8001566:	7813      	ldrb	r3, [r2, #0]
 8001568:	f023 0303 	bic.w	r3, r3, #3
			ktimer += HAL_GetTick();                 // set ktimer to interval end time
 800156c:	6008      	str	r0, [r1, #0]
			keyerControl &= ~(DIT_L + DAH_L);   // clear both paddle latch bits
 800156e:	7013      	strb	r3, [r2, #0]
}
 8001570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if((semi_qsk_timeout) && (HAL_GetTick() > (semi_qsk_timeout - 100)))
 8001574:	f005 fb4a 	bl	8006c0c <HAL_GetTick>
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800157e:	4290      	cmp	r0, r2
 8001580:	f200 80b9 	bhi.w	80016f6 <HAL_TIM_PeriodElapsedCallback+0x1ee>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0c5      	beq.n	8001514 <HAL_TIM_PeriodElapsedCallback+0xc>
 8001588:	f005 fb40 	bl	8006c0c <HAL_GetTick>
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	4298      	cmp	r0, r3
 8001590:	d9c0      	bls.n	8001514 <HAL_TIM_PeriodElapsedCallback+0xc>
						pk = Saved_pk;
 8001592:	4f80      	ldr	r7, [pc, #512]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x28c>)
			TXSwitch(0);
 8001594:	2000      	movs	r0, #0
 8001596:	f003 fd0b 	bl	8004fb0 <TXSwitch>
						pk = Saved_pk;
 800159a:	4e7f      	ldr	r6, [pc, #508]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
			semi_qsk_timeout = 0;
 800159c:	2200      	movs	r2, #0
						pk = Saved_pk;
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	4613      	mov	r3, r2
			semi_qsk_timeout = 0;
 80015a2:	6022      	str	r2, [r4, #0]
						pk = Saved_pk;
 80015a4:	6031      	str	r1, [r6, #0]
 80015a6:	e7b5      	b.n	8001514 <HAL_TIM_PeriodElapsedCallback+0xc>
	if(KEYER_DASH) {
 80015a8:	2140      	movs	r1, #64	; 0x40
 80015aa:	487c      	ldr	r0, [pc, #496]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015ac:	f008 fbd2 	bl	8009d54 <HAL_GPIO_ReadPin>
 80015b0:	b948      	cbnz	r0, 80015c6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015b4:	4a76      	ldr	r2, [pc, #472]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	7811      	ldrb	r1, [r2, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2302      	movne	r3, #2
 80015c0:	2301      	moveq	r3, #1
 80015c2:	430b      	orrs	r3, r1
 80015c4:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	4874      	ldr	r0, [pc, #464]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80015ca:	f008 fbc3 	bl	8009d54 <HAL_GPIO_ReadPin>
 80015ce:	b948      	cbnz	r0, 80015e4 <HAL_TIM_PeriodElapsedCallback+0xdc>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80015d0:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015d2:	4a6f      	ldr	r2, [pc, #444]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	7811      	ldrb	r1, [r2, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2302      	moveq	r3, #2
 80015e0:	430b      	orrs	r3, r1
 80015e2:	7013      	strb	r3, [r2, #0]
			}
			break;
		case INTER_ELEMENT:
			// Insert time between dits/dahs
			update_PaddleLatch();               // latch paddle state
			if(HAL_GetTick() > ktimer) {            // are we at end of inter-space ?
 80015e4:	f005 fb12 	bl	8006c0c <HAL_GetTick>
 80015e8:	4b68      	ldr	r3, [pc, #416]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4298      	cmp	r0, r3
 80015ee:	d9bf      	bls.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(keyerControl & DIT_PROC) {             // was it a dit or dah ?
 80015f0:	4a67      	ldr	r2, [pc, #412]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015f2:	7813      	ldrb	r3, [r2, #0]
 80015f4:	f013 0104 	ands.w	r1, r3, #4
 80015f8:	f000 80b9 	beq.w	800176e <HAL_TIM_PeriodElapsedCallback+0x266>
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 80015fc:	f023 0305 	bic.w	r3, r3, #5
					keyerState = CHK_DAH;                  // dit done, check for dah
 8001600:	2102      	movs	r1, #2
					keyerControl &= ~(DIT_L + DIT_PROC);   // clear two bits
 8001602:	7013      	strb	r3, [r2, #0]
					keyerState = CHK_DAH;                  // dit done, check for dah
 8001604:	7029      	strb	r1, [r5, #0]
 8001606:	e7b3      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
			if((KEYER_DASH) ||
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	4864      	ldr	r0, [pc, #400]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800160c:	f008 fba2 	bl	8009d54 <HAL_GPIO_ReadPin>
 8001610:	b140      	cbz	r0, 8001624 <HAL_TIM_PeriodElapsedCallback+0x11c>
					(KEYER_DOT) ||
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	4861      	ldr	r0, [pc, #388]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001616:	f008 fb9d 	bl	8009d54 <HAL_GPIO_ReadPin>
			if((KEYER_DASH) ||
 800161a:	b118      	cbz	r0, 8001624 <HAL_TIM_PeriodElapsedCallback+0x11c>
					(keyerControl & 0x03))
 800161c:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
					(KEYER_DOT) ||
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	0798      	lsls	r0, r3, #30
 8001622:	d0a5      	beq.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	485d      	ldr	r0, [pc, #372]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001628:	f008 fb94 	bl	8009d54 <HAL_GPIO_ReadPin>
 800162c:	b948      	cbnz	r0, 8001642 <HAL_TIM_PeriodElapsedCallback+0x13a>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001630:	4a57      	ldr	r2, [pc, #348]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	7811      	ldrb	r1, [r2, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2302      	movne	r3, #2
 800163c:	2301      	moveq	r3, #1
 800163e:	430b      	orrs	r3, r1
 8001640:	7013      	strb	r3, [r2, #0]
	if(KEYER_DOT) {
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	4855      	ldr	r0, [pc, #340]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001646:	f008 fb85 	bl	8009d54 <HAL_GPIO_ReadPin>
 800164a:	b948      	cbnz	r0, 8001660 <HAL_TIM_PeriodElapsedCallback+0x158>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800164e:	4a50      	ldr	r2, [pc, #320]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	7811      	ldrb	r1, [r2, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2302      	moveq	r3, #2
 800165c:	430b      	orrs	r3, r1
 800165e:	7013      	strb	r3, [r2, #0]
				keyerState = CHK_DIT;
 8001660:	2301      	movs	r3, #1
 8001662:	702b      	strb	r3, [r5, #0]
 8001664:	e784      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DIT_L) {
 8001666:	4a4a      	ldr	r2, [pc, #296]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001668:	7813      	ldrb	r3, [r2, #0]
 800166a:	07d9      	lsls	r1, r3, #31
 800166c:	d55e      	bpl.n	800172c <HAL_TIM_PeriodElapsedCallback+0x224>
				keyerControl |= DIT_PROC;
 800166e:	f043 0304 	orr.w	r3, r3, #4
				ktimer = ditTime;
 8001672:	484c      	ldr	r0, [pc, #304]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001674:	4945      	ldr	r1, [pc, #276]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001676:	6800      	ldr	r0, [r0, #0]
				keyerControl |= DIT_PROC;
 8001678:	7013      	strb	r3, [r2, #0]
				keyerState = KEYED_PREP;
 800167a:	2303      	movs	r3, #3
				ktimer = ditTime;
 800167c:	6008      	str	r0, [r1, #0]
				keyerState = KEYED_PREP;
 800167e:	702b      	strb	r3, [r5, #0]
 8001680:	e776      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(HAL_GetTick() > ktimer) {            // are we at end of key down ?
 8001682:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800178c <HAL_TIM_PeriodElapsedCallback+0x284>
 8001686:	f005 fac1 	bl	8006c0c <HAL_GetTick>
 800168a:	f8d8 3000 	ldr.w	r3, [r8]
 800168e:	4298      	cmp	r0, r3
 8001690:	d84f      	bhi.n	8001732 <HAL_TIM_PeriodElapsedCallback+0x22a>
			} else if(keyerControl & IAMBICB) {
 8001692:	4c3f      	ldr	r4, [pc, #252]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001694:	7823      	ldrb	r3, [r4, #0]
 8001696:	06db      	lsls	r3, r3, #27
 8001698:	f57f af6a 	bpl.w	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
	if(KEYER_DASH) {
 800169c:	2140      	movs	r1, #64	; 0x40
 800169e:	483f      	ldr	r0, [pc, #252]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016a0:	f008 fb58 	bl	8009d54 <HAL_GPIO_ReadPin>
 80016a4:	b940      	cbnz	r0, 80016b8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		keyerControl |= keyer_swap ? DAH_L : DIT_L;
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016a8:	7822      	ldrb	r2, [r4, #0]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf14      	ite	ne
 80016b0:	2302      	movne	r3, #2
 80016b2:	2301      	moveq	r3, #1
 80016b4:	4313      	orrs	r3, r2
 80016b6:	7023      	strb	r3, [r4, #0]
	if(KEYER_DOT) {
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4838      	ldr	r0, [pc, #224]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80016bc:	f008 fb4a 	bl	8009d54 <HAL_GPIO_ReadPin>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	f47f af55 	bne.w	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
		keyerControl |= keyer_swap ? DIT_L : DAH_L;
 80016c6:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80016c8:	7822      	ldrb	r2, [r4, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2302      	moveq	r3, #2
 80016d4:	4313      	orrs	r3, r2
 80016d6:	7023      	strb	r3, [r4, #0]
}
 80016d8:	e74a      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
			if(keyerControl & DAH_L) {
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f013 0302 	ands.w	r3, r3, #2
 80016e2:	d00d      	beq.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				ktimer = ditTime*3;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
				keyerState = KEYED_PREP;
 80016e6:	2103      	movs	r1, #3
				ktimer = ditTime*3;
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80016ea:	681b      	ldr	r3, [r3, #0]
				keyerState = KEYED_PREP;
 80016ec:	7029      	strb	r1, [r5, #0]
				ktimer = ditTime*3;
 80016ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016f2:	6013      	str	r3, [r2, #0]
				keyerState = KEYED_PREP;
 80016f4:	e73c      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
		TXSwitch(0);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f003 fc5a 	bl	8004fb0 <TXSwitch>
	if((semi_qsk_timeout) && (HAL_GetTick() > semi_qsk_timeout)){
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	e741      	b.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x7c>
				keyerState = IDLE;
 8001700:	702b      	strb	r3, [r5, #0]
 8001702:	e735      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 8001704:	4e28      	ldr	r6, [pc, #160]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001706:	4f20      	ldr	r7, [pc, #128]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001708:	7833      	ldrb	r3, [r6, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f43f af19 	beq.w	8001542 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001710:	783b      	ldrb	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f af15 	bne.w	8001542 <HAL_TIM_PeriodElapsedCallback+0x3a>
					Saved_pk = pk;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800171e:	601a      	str	r2, [r3, #0]
			TXSwitch(1);
 8001720:	f003 fc46 	bl	8004fb0 <TXSwitch>
			HAL_Delay(txdelay);
 8001724:	7830      	ldrb	r0, [r6, #0]
 8001726:	f005 fa77 	bl	8006c18 <HAL_Delay>
 800172a:	e70a      	b.n	8001542 <HAL_TIM_PeriodElapsedCallback+0x3a>
				keyerState = CHK_DAH;
 800172c:	2302      	movs	r3, #2
 800172e:	702b      	strb	r3, [r5, #0]
 8001730:	e71e      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
				Key_state = LOW;
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001734:	2300      	movs	r3, #0
	if(!(semi_qsk_timeout))
 8001736:	6820      	ldr	r0, [r4, #0]
				Key_state = LOW;
 8001738:	6013      	str	r3, [r2, #0]
	if(!(semi_qsk_timeout))
 800173a:	bbb8      	cbnz	r0, 80017ac <HAL_TIM_PeriodElapsedCallback+0x2a4>
	tx = tx_enable;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x280>)
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 800173e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80017a4 <HAL_TIM_PeriodElapsedCallback+0x29c>
	tx = tx_enable;
 8001742:	7018      	strb	r0, [r3, #0]
			CarrierEnable(0);
 8001744:	f003 fc98 	bl	8005078 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001748:	f005 fa60 	bl	8006c0c <HAL_GetTick>
 800174c:	f8d9 3000 	ldr.w	r3, [r9]
 8001750:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001754:	6020      	str	r0, [r4, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001756:	2800      	cmp	r0, #0
 8001758:	d039      	beq.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x2c6>
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 800175a:	f005 fa57 	bl	8006c0c <HAL_GetTick>
 800175e:	f8d9 3000 	ldr.w	r3, [r9]
				keyerState = INTER_ELEMENT;     // next state
 8001762:	2205      	movs	r2, #5
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001764:	4418      	add	r0, r3
				keyerState = INTER_ELEMENT;     // next state
 8001766:	702a      	strb	r2, [r5, #0]
				ktimer = HAL_GetTick() + ditTime;    // inter-element time
 8001768:	f8c8 0000 	str.w	r0, [r8]
				keyerState = INTER_ELEMENT;     // next state
 800176c:	e700      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
				} else {
					keyerControl &= ~(DAH_L);              // clear dah latch
 800176e:	f023 0302 	bic.w	r3, r3, #2
					keyerState = IDLE;                     // go idle
 8001772:	7029      	strb	r1, [r5, #0]
					keyerControl &= ~(DAH_L);              // clear dah latch
 8001774:	7013      	strb	r3, [r2, #0]
}
 8001776:	e6fb      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x68>
 8001778:	2400a998 	.word	0x2400a998
 800177c:	2400a80e 	.word	0x2400a80e
 8001780:	2400a80d 	.word	0x2400a80d
 8001784:	24005254 	.word	0x24005254
 8001788:	2400b9cc 	.word	0x2400b9cc
 800178c:	2400a818 	.word	0x2400a818
 8001790:	2400a80c 	.word	0x2400a80c
 8001794:	2400628c 	.word	0x2400628c
 8001798:	2400a844 	.word	0x2400a844
 800179c:	58020000 	.word	0x58020000
 80017a0:	2400a814 	.word	0x2400a814
 80017a4:	24007c38 	.word	0x24007c38
 80017a8:	2400b9cd 	.word	0x2400b9cd
	tx = tx_enable;
 80017ac:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
			pk = Saved_pk;
 80017ae:	4f0a      	ldr	r7, [pc, #40]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017b0:	4e0a      	ldr	r6, [pc, #40]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
			semi_qsk_timeout = 0;
 80017b2:	6023      	str	r3, [r4, #0]
	tx = tx_enable;
 80017b4:	7013      	strb	r3, [r2, #0]
			pk = Saved_pk;
 80017b6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80017e0 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6033      	str	r3, [r6, #0]
			TXSwitch(0);
 80017be:	2000      	movs	r0, #0
 80017c0:	f003 fbf6 	bl	8004fb0 <TXSwitch>
						pk = Saved_pk;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6033      	str	r3, [r6, #0]
			semi_qsk_timeout = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	6023      	str	r3, [r4, #0]
						pk = Saved_pk;
 80017cc:	e7c5      	b.n	800175a <HAL_TIM_PeriodElapsedCallback+0x252>
 80017ce:	4e03      	ldr	r6, [pc, #12]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80017d0:	4f01      	ldr	r7, [pc, #4]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80017d2:	e7f4      	b.n	80017be <HAL_TIM_PeriodElapsedCallback+0x2b6>
 80017d4:	2400b9cc 	.word	0x2400b9cc
 80017d8:	2400628c 	.word	0x2400628c
 80017dc:	2400a844 	.word	0x2400a844
 80017e0:	24007c38 	.word	0x24007c38

080017e4 <cw_tx_char>:

uint8_t cw_msg_interval = 5; // number of seconds CW message is repeated
uint32_t cw_msg_event = 0;
uint8_t cw_msg_id = 0; // selected message

int cw_tx_char(char ch){    // Transmit message in CW
 80017e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sym;
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017e8:	497d      	ldr	r1, [pc, #500]	; (80019e0 <cw_tx_char+0x1fc>)
 80017ea:	237e      	movs	r3, #126	; 0x7e
 80017ec:	2500      	movs	r5, #0
 80017ee:	e004      	b.n	80017fa <cw_tx_char+0x16>
 80017f0:	b2d5      	uxtb	r5, r2
 80017f2:	5d4b      	ldrb	r3, [r1, r5]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 808b 	beq.w	8001910 <cw_tx_char+0x12c>
    if(sym == ch){  // found -> transmit CW character j
 80017fa:	4298      	cmp	r0, r3
  for(uint8_t j = 0; (sym = (m2c[j])); j++){  // lookup msg[i] in m2c, skip if not found
 80017fc:	f105 0201 	add.w	r2, r5, #1
    if(sym == ch){  // found -> transmit CW character j
 8001800:	d1f6      	bne.n	80017f0 <cw_tx_char+0xc>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 8001802:	062b      	lsls	r3, r5, #24
 8001804:	f100 80e6 	bmi.w	80019d4 <cw_tx_char+0x1f0>
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	461e      	mov	r6, r3
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	422b      	tst	r3, r5
 8001810:	d0fb      	beq.n	800180a <cw_tx_char+0x26>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001812:	08b6      	lsrs	r6, r6, #2
 8001814:	f000 80b2 	beq.w	800197c <cw_tx_char+0x198>
 8001818:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80019f4 <cw_tx_char+0x210>
 800181c:	4f71      	ldr	r7, [pc, #452]	; (80019e4 <cw_tx_char+0x200>)
 800181e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80019fc <cw_tx_char+0x218>
					Saved_pk = pk;
 8001822:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80019f8 <cw_tx_char+0x214>
	if(!(semi_qsk_timeout))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b93b      	cbnz	r3, 800183a <cw_tx_char+0x56>
		if((txdelay) && (tx_enable) && (!(tx))){  // key-up TX relay in advance before actual transmission
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <cw_tx_char+0x204>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b123      	cbz	r3, 800183a <cw_tx_char+0x56>
 8001830:	f898 3000 	ldrb.w	r3, [r8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8095 	beq.w	8001964 <cw_tx_char+0x180>
	tx = tx_enable;
 800183a:	2401      	movs	r4, #1
		semi_qsk_timeout = 0;
 800183c:	2300      	movs	r3, #0
			CarrierEnable(1);
 800183e:	4620      	mov	r0, r4
		semi_qsk_timeout = 0;
 8001840:	603b      	str	r3, [r7, #0]
	tx = tx_enable;
 8001842:	f888 4000 	strb.w	r4, [r8]
			CarrierEnable(1);
 8001846:	f003 fc17 	bl	8005078 <CarrierEnable>
		TXSwitch(1);
 800184a:	4620      	mov	r0, r4
    if(KEYER_DASH || KEYER_DOT){
 800184c:	4c67      	ldr	r4, [pc, #412]	; (80019ec <cw_tx_char+0x208>)
		TXSwitch(1);
 800184e:	f003 fbaf 	bl	8004fb0 <TXSwitch>
      else {
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
          switch_rxtx(1);  // key-on  tx
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001852:	422e      	tst	r6, r5
 8001854:	f8d9 0000 	ldr.w	r0, [r9]
 8001858:	bf14      	ite	ne
 800185a:	f04f 0b03 	movne.w	fp, #3
 800185e:	f04f 0b01 	moveq.w	fp, #1
 8001862:	fb00 fb0b 	mul.w	fp, r0, fp
  uint32_t event = HAL_GetTick() + ms;
 8001866:	f005 f9d1 	bl	8006c0c <HAL_GetTick>
 800186a:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 800186c:	e00a      	b.n	8001884 <cw_tx_char+0xa0>
    if(KEYER_DASH || KEYER_DOT){
 800186e:	f008 fa71 	bl	8009d54 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	4620      	mov	r0, r4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d04c      	beq.n	8001916 <cw_tx_char+0x132>
 800187c:	f008 fa6a 	bl	8009d54 <HAL_GPIO_ReadPin>
 8001880:	2800      	cmp	r0, #0
 8001882:	d048      	beq.n	8001916 <cw_tx_char+0x132>
  while(HAL_GetTick() < event){
 8001884:	f005 f9c2 	bl	8006c0c <HAL_GetTick>
 8001888:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 800188a:	2140      	movs	r1, #64	; 0x40
 800188c:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800188e:	459b      	cmp	fp, r3
 8001890:	d8ed      	bhi.n	800186e <cw_tx_char+0x8a>
	if(!(semi_qsk_timeout))
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	2800      	cmp	r0, #0
 8001896:	d151      	bne.n	800193c <cw_tx_char+0x158>
	tx = tx_enable;
 8001898:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 800189c:	f003 fbec 	bl	8005078 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 80018a0:	f005 f9b4 	bl	8006c0c <HAL_GetTick>
 80018a4:	f8d9 b000 	ldr.w	fp, [r9]
 80018a8:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 80018ac:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d04c      	beq.n	800194c <cw_tx_char+0x168>
  uint32_t event = HAL_GetTick() + ms;
 80018b2:	f005 f9ab 	bl	8006c0c <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018b6:	4c4d      	ldr	r4, [pc, #308]	; (80019ec <cw_tx_char+0x208>)
  uint32_t event = HAL_GetTick() + ms;
 80018b8:	4483      	add	fp, r0
  while(HAL_GetTick() < event){
 80018ba:	e008      	b.n	80018ce <cw_tx_char+0xea>
    if(KEYER_DASH || KEYER_DOT){
 80018bc:	f008 fa4a 	bl	8009d54 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	4620      	mov	r0, r4
 80018c6:	b3b3      	cbz	r3, 8001936 <cw_tx_char+0x152>
 80018c8:	f008 fa44 	bl	8009d54 <HAL_GPIO_ReadPin>
 80018cc:	b398      	cbz	r0, 8001936 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 80018ce:	f005 f99d 	bl	8006c0c <HAL_GetTick>
 80018d2:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80018d8:	459b      	cmp	fp, r3
 80018da:	d8ef      	bhi.n	80018bc <cw_tx_char+0xd8>
        for(; k; k >>= 1){ // send dit/dah one by one, until everythng is sent
 80018dc:	0876      	lsrs	r6, r6, #1
 80018de:	d1a2      	bne.n	8001826 <cw_tx_char+0x42>
          switch_rxtx(0);  // key-off tx
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
        }
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018e0:	f8d9 6000 	ldr.w	r6, [r9]
  uint32_t event = HAL_GetTick() + ms;
 80018e4:	f005 f992 	bl	8006c0c <HAL_GetTick>
    if(KEYER_DASH || KEYER_DOT){
 80018e8:	4c40      	ldr	r4, [pc, #256]	; (80019ec <cw_tx_char+0x208>)
        if(delayWithKeySense(ditTime * 2)) return 1; // add letter space (was 2)
 80018ea:	0076      	lsls	r6, r6, #1
  uint32_t event = HAL_GetTick() + ms;
 80018ec:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 80018ee:	e008      	b.n	8001902 <cw_tx_char+0x11e>
    if(KEYER_DASH || KEYER_DOT){
 80018f0:	f008 fa30 	bl	8009d54 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4620      	mov	r0, r4
 80018fa:	b1e3      	cbz	r3, 8001936 <cw_tx_char+0x152>
 80018fc:	f008 fa2a 	bl	8009d54 <HAL_GPIO_ReadPin>
 8001900:	b1c8      	cbz	r0, 8001936 <cw_tx_char+0x152>
  while(HAL_GetTick() < event){
 8001902:	f005 f983 	bl	8006c0c <HAL_GetTick>
 8001906:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 800190c:	429e      	cmp	r6, r3
 800190e:	d8ef      	bhi.n	80018f0 <cw_tx_char+0x10c>
      }
      break; // next character
    }
  }
  return 0;
 8001910:	2000      	movs	r0, #0
}
 8001912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(!(semi_qsk_timeout))
 8001916:	6838      	ldr	r0, [r7, #0]
 8001918:	2800      	cmp	r0, #0
 800191a:	d14a      	bne.n	80019b2 <cw_tx_char+0x1ce>
	tx = tx_enable;
 800191c:	f888 0000 	strb.w	r0, [r8]
			CarrierEnable(0);
 8001920:	f003 fbaa 	bl	8005078 <CarrierEnable>
			semi_qsk_timeout = HAL_GetTick() + ditTime * 8;
 8001924:	f005 f972 	bl	8006c0c <HAL_GetTick>
 8001928:	f8d9 3000 	ldr.w	r3, [r9]
 800192c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001930:	6038      	str	r0, [r7, #0]
		if((!semi_qsk_timeout) )   // enable RX when no longer in semi-qsk phase; so RX and NTX/PTX outputs are switching only when in RX mode
 8001932:	2800      	cmp	r0, #0
 8001934:	d050      	beq.n	80019d8 <cw_tx_char+0x1f4>
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 8001936:	2001      	movs	r0, #1
}
 8001938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx = tx_enable;
 800193c:	2300      	movs	r3, #0
			pk = Saved_pk;
 800193e:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 8001940:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 8001944:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 8001946:	f8da 3000 	ldr.w	r3, [sl]
 800194a:	6013      	str	r3, [r2, #0]
			TXSwitch(0);
 800194c:	2000      	movs	r0, #0
 800194e:	f003 fb2f 	bl	8004fb0 <TXSwitch>
			semi_qsk_timeout = 0;
 8001952:	2300      	movs	r3, #0
						pk = Saved_pk;
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <cw_tx_char+0x20c>)
			semi_qsk_timeout = 0;
 8001956:	603b      	str	r3, [r7, #0]
						pk = Saved_pk;
 8001958:	f8da 3000 	ldr.w	r3, [sl]
          if(delayWithKeySense(ditTime)) return 1;   // add symbol space
 800195c:	f8d9 b000 	ldr.w	fp, [r9]
						pk = Saved_pk;
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e7a6      	b.n	80018b2 <cw_tx_char+0xce>
					Saved_pk = pk;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <cw_tx_char+0x20c>)
			TXSwitch(1);
 8001966:	2001      	movs	r0, #1
					Saved_pk = pk;
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8ca 3000 	str.w	r3, [sl]
			TXSwitch(1);
 800196e:	f003 fb1f 	bl	8004fb0 <TXSwitch>
			HAL_Delay(txdelay);
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <cw_tx_char+0x204>)
 8001974:	7818      	ldrb	r0, [r3, #0]
 8001976:	f005 f94f 	bl	8006c18 <HAL_Delay>
 800197a:	e75e      	b.n	800183a <cw_tx_char+0x56>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <cw_tx_char+0x210>)
    if(KEYER_DASH || KEYER_DOT){
 800197e:	4c1b      	ldr	r4, [pc, #108]	; (80019ec <cw_tx_char+0x208>)
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001980:	681e      	ldr	r6, [r3, #0]
  uint32_t event = HAL_GetTick() + ms;
 8001982:	f005 f943 	bl	8006c0c <HAL_GetTick>
      if(k == 0) delayWithKeySense(ditTime * 4); // space -> add word space (was 4)
 8001986:	00b6      	lsls	r6, r6, #2
  uint32_t event = HAL_GetTick() + ms;
 8001988:	4406      	add	r6, r0
  while(HAL_GetTick() < event){
 800198a:	e00a      	b.n	80019a2 <cw_tx_char+0x1be>
    if(KEYER_DASH || KEYER_DOT){
 800198c:	f008 f9e2 	bl	8009d54 <HAL_GPIO_ReadPin>
 8001990:	4603      	mov	r3, r0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	4620      	mov	r0, r4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ba      	beq.n	8001910 <cw_tx_char+0x12c>
 800199a:	f008 f9db 	bl	8009d54 <HAL_GPIO_ReadPin>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d0b6      	beq.n	8001910 <cw_tx_char+0x12c>
  while(HAL_GetTick() < event){
 80019a2:	f005 f933 	bl	8006c0c <HAL_GetTick>
 80019a6:	4603      	mov	r3, r0
    if(KEYER_DASH || KEYER_DOT){
 80019a8:	2140      	movs	r1, #64	; 0x40
 80019aa:	4620      	mov	r0, r4
  while(HAL_GetTick() < event){
 80019ac:	429e      	cmp	r6, r3
 80019ae:	d8ed      	bhi.n	800198c <cw_tx_char+0x1a8>
 80019b0:	e7ae      	b.n	8001910 <cw_tx_char+0x12c>
	tx = tx_enable;
 80019b2:	2300      	movs	r3, #0
			pk = Saved_pk;
 80019b4:	4d10      	ldr	r5, [pc, #64]	; (80019f8 <cw_tx_char+0x214>)
 80019b6:	4c0e      	ldr	r4, [pc, #56]	; (80019f0 <cw_tx_char+0x20c>)
	tx = tx_enable;
 80019b8:	f888 3000 	strb.w	r3, [r8]
			semi_qsk_timeout = 0;
 80019bc:	603b      	str	r3, [r7, #0]
			pk = Saved_pk;
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	6023      	str	r3, [r4, #0]
			TXSwitch(0);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f003 faf4 	bl	8004fb0 <TXSwitch>
			semi_qsk_timeout = 0;
 80019c8:	2200      	movs	r2, #0
						pk = Saved_pk;
 80019ca:	682b      	ldr	r3, [r5, #0]
          if(delayWithKeySense(ditTime * ((j & k) ? 3 : 1))){ switch_rxtx(0); return 1; } // symbol: dah or dih length
 80019cc:	2001      	movs	r0, #1
			semi_qsk_timeout = 0;
 80019ce:	603a      	str	r2, [r7, #0]
						pk = Saved_pk;
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	e79e      	b.n	8001912 <cw_tx_char+0x12e>
      uint8_t k = 0x80; for(; !(j & k); k >>= 1); k >>= 1; // shift start of cw code to MSB
 80019d4:	2640      	movs	r6, #64	; 0x40
 80019d6:	e71f      	b.n	8001818 <cw_tx_char+0x34>
 80019d8:	4d07      	ldr	r5, [pc, #28]	; (80019f8 <cw_tx_char+0x214>)
 80019da:	4c05      	ldr	r4, [pc, #20]	; (80019f0 <cw_tx_char+0x20c>)
 80019dc:	e7f1      	b.n	80019c2 <cw_tx_char+0x1de>
 80019de:	bf00      	nop
 80019e0:	08017980 	.word	0x08017980
 80019e4:	2400a998 	.word	0x2400a998
 80019e8:	2400b9cd 	.word	0x2400b9cd
 80019ec:	58020000 	.word	0x58020000
 80019f0:	2400a844 	.word	0x2400a844
 80019f4:	24007c38 	.word	0x24007c38
 80019f8:	2400628c 	.word	0x2400628c
 80019fc:	2400b9cc 	.word	0x2400b9cc

08001a00 <SendCWMessage>:
  return 0;
}


void SendCWMessage(uint8_t MessageNo)
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
	cw_tx(cw_msg[MessageNo]);
 8001a02:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <SendCWMessage+0x28>)
 8001a08:	012a      	lsls	r2, r5, #4
 8001a0a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  for(uint8_t i = 0; msg[i]; i++){  // loop over message
 8001a0e:	5c98      	ldrb	r0, [r3, r2]
 8001a10:	b148      	cbz	r0, 8001a26 <SendCWMessage+0x26>
 8001a12:	2400      	movs	r4, #0
 8001a14:	e002      	b.n	8001a1c <SendCWMessage+0x1c>
 8001a16:	b2e4      	uxtb	r4, r4
 8001a18:	5d28      	ldrb	r0, [r5, r4]
 8001a1a:	b120      	cbz	r0, 8001a26 <SendCWMessage+0x26>
 8001a1c:	3401      	adds	r4, #1
    if(cw_tx_char(msg[i])) return 1;
 8001a1e:	f7ff fee1 	bl	80017e4 <cw_tx_char>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d0f7      	beq.n	8001a16 <SendCWMessage+0x16>
}
 8001a26:	bd38      	pop	{r3, r4, r5, pc}
 8001a28:	24000000 	.word	0x24000000

08001a2c <DecodeDCF77>:
{
	uint8_t i;
	static uint8_t MinParity, HourParity;
	MinParity = HourParity = 0;
	for (i = 21 ; i < 28; i++)
		if (DCF77Message[i])
 8001a2c:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <DecodeDCF77+0x14c>)
{
 8001a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (DCF77Message[i])
 8001a32:	7d5a      	ldrb	r2, [r3, #21]
{
 8001a34:	b085      	sub	sp, #20
		if (DCF77Message[i])
 8001a36:	f893 a016 	ldrb.w	sl, [r3, #22]
			MinParity ^= 1;
 8001a3a:	1e11      	subs	r1, r2, #0
 8001a3c:	bf18      	it	ne
 8001a3e:	2101      	movne	r1, #1
		if (DCF77Message[i])
 8001a40:	f1ba 0f00 	cmp.w	sl, #0
 8001a44:	d001      	beq.n	8001a4a <DecodeDCF77+0x1e>
			MinParity ^= 1;
 8001a46:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001a4a:	7ddf      	ldrb	r7, [r3, #23]
 8001a4c:	b10f      	cbz	r7, 8001a52 <DecodeDCF77+0x26>
			MinParity ^= 1;
 8001a4e:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001a52:	7e18      	ldrb	r0, [r3, #24]
 8001a54:	9003      	str	r0, [sp, #12]
 8001a56:	b108      	cbz	r0, 8001a5c <DecodeDCF77+0x30>
			MinParity ^= 1;
 8001a58:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001a5c:	7e5c      	ldrb	r4, [r3, #25]
 8001a5e:	b10c      	cbz	r4, 8001a64 <DecodeDCF77+0x38>
			MinParity ^= 1;
 8001a60:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001a64:	f893 901a 	ldrb.w	r9, [r3, #26]
 8001a68:	f1b9 0f00 	cmp.w	r9, #0
 8001a6c:	d001      	beq.n	8001a72 <DecodeDCF77+0x46>
			MinParity ^= 1;
 8001a6e:	f081 0101 	eor.w	r1, r1, #1
		if (DCF77Message[i])
 8001a72:	7ede      	ldrb	r6, [r3, #27]
 8001a74:	b10e      	cbz	r6, 8001a7a <DecodeDCF77+0x4e>
			MinParity ^= 1;
 8001a76:	f081 0101 	eor.w	r1, r1, #1
	for (i = 21 ; i < 28; i++)
 8001a7a:	4840      	ldr	r0, [pc, #256]	; (8001b7c <DecodeDCF77+0x150>)
	for (i = 29 ; i < 35; i++)
		if (DCF77Message[i])
 8001a7c:	f893 801e 	ldrb.w	r8, [r3, #30]
 8001a80:	7001      	strb	r1, [r0, #0]
 8001a82:	7f58      	ldrb	r0, [r3, #29]
			HourParity ^= 1;
 8001a84:	f1b0 0c00 	subs.w	ip, r0, #0
 8001a88:	bf18      	it	ne
 8001a8a:	f04f 0c01 	movne.w	ip, #1
		if (DCF77Message[i])
 8001a8e:	f1b8 0f00 	cmp.w	r8, #0
 8001a92:	d001      	beq.n	8001a98 <DecodeDCF77+0x6c>
			HourParity ^= 1;
 8001a94:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001a98:	7fdd      	ldrb	r5, [r3, #31]
 8001a9a:	9501      	str	r5, [sp, #4]
 8001a9c:	b10d      	cbz	r5, 8001aa2 <DecodeDCF77+0x76>
			HourParity ^= 1;
 8001a9e:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001aa2:	f893 5020 	ldrb.w	r5, [r3, #32]
 8001aa6:	9502      	str	r5, [sp, #8]
 8001aa8:	b10d      	cbz	r5, 8001aae <DecodeDCF77+0x82>
			HourParity ^= 1;
 8001aaa:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001aae:	f893 5021 	ldrb.w	r5, [r3, #33]	; 0x21
 8001ab2:	b10d      	cbz	r5, 8001ab8 <DecodeDCF77+0x8c>
			HourParity ^= 1;
 8001ab4:	f08c 0c01 	eor.w	ip, ip, #1
		if (DCF77Message[i])
 8001ab8:	f893 e022 	ldrb.w	lr, [r3, #34]	; 0x22
 8001abc:	f1be 0f00 	cmp.w	lr, #0
 8001ac0:	d141      	bne.n	8001b46 <DecodeDCF77+0x11a>
	for (i = 29 ; i < 35; i++)
 8001ac2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8001b98 <DecodeDCF77+0x16c>
 8001ac6:	f88b c000 	strb.w	ip, [fp]

	if (MinParity != DCF77Message[28] && HourParity != DCF77Message[35])
 8001aca:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8001ace:	458b      	cmp	fp, r1
 8001ad0:	d006      	beq.n	8001ae0 <DecodeDCF77+0xb4>
 8001ad2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ad6:	4563      	cmp	r3, ip
 8001ad8:	d002      	beq.n	8001ae0 <DecodeDCF77+0xb4>
		}
		break;
	case SEND_WSPR:
		break;
	}
}
 8001ada:	b005      	add	sp, #20
 8001adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001ae0:	eb04 0449 	add.w	r4, r4, r9, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8001ae4:	9b01      	ldr	r3, [sp, #4]
		DCF77Min += DCF77Message[21+i] << i;
 8001ae6:	eb02 024a 	add.w	r2, r2, sl, lsl #1
		DCF77Hour += (DCF77Message[29+i] << i);
 8001aea:	eb00 0048 	add.w	r0, r0, r8, lsl #1
		DCF77Min += DCF77Message[21+i] << i;
 8001aee:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	switch (WSPRBeaconState)
 8001af2:	4f23      	ldr	r7, [pc, #140]	; (8001b80 <DecodeDCF77+0x154>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001af4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8001af8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		DCF77Min += DCF77Message[21+i] << i;
 8001afc:	9b03      	ldr	r3, [sp, #12]
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001afe:	eb05 054e 	add.w	r5, r5, lr, lsl #1
	switch (WSPRBeaconState)
 8001b02:	783c      	ldrb	r4, [r7, #0]
		DCF77Min += DCF77Message[21+i] << i;
 8001b04:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
		DCF77Hour += (DCF77Message[29+i] << i);
 8001b08:	9b02      	ldr	r3, [sp, #8]
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001b0a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
		DCF77Hour += (DCF77Message[29+i] << i);
 8001b0e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <DecodeDCF77+0x158>)
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001b14:	eb02 0646 	add.w	r6, r2, r6, lsl #1
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <DecodeDCF77+0x15c>)
 8001b1a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		DCF77Min += 10 * (DCF77Message[25+i] << i);
 8001b1e:	b2f6      	uxtb	r6, r6
		DCF77Hour += 10 * (DCF77Message[33+i] << i);
 8001b20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8001b24:	701e      	strb	r6, [r3, #0]
 8001b26:	7015      	strb	r5, [r2, #0]
	switch (WSPRBeaconState)
 8001b28:	b184      	cbz	r4, 8001b4c <DecodeDCF77+0x120>
 8001b2a:	2c01      	cmp	r4, #1
 8001b2c:	d1d5      	bne.n	8001ada <DecodeDCF77+0xae>
		if (SystemMinutes == DCF77Min)
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <DecodeDCF77+0x160>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4296      	cmp	r6, r2
 8001b34:	d013      	beq.n	8001b5e <DecodeDCF77+0x132>
			SystemSeconds = 0;
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <DecodeDCF77+0x164>)
			SystemMinutes = DCF77Min;
 8001b38:	601e      	str	r6, [r3, #0]
			SystemSeconds = 0;
 8001b3a:	2300      	movs	r3, #0
			WSPRBeaconState = FIRST_FIX;
 8001b3c:	703c      	strb	r4, [r7, #0]
			SystemSeconds = 0;
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	b005      	add	sp, #20
 8001b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			HourParity ^= 1;
 8001b46:	f08c 0c01 	eor.w	ip, ip, #1
 8001b4a:	e7ba      	b.n	8001ac2 <DecodeDCF77+0x96>
		SystemMinutes = DCF77Min;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <DecodeDCF77+0x160>)
		SystemSeconds = 0;
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <DecodeDCF77+0x164>)
		SystemMinutes = DCF77Min;
 8001b50:	601e      	str	r6, [r3, #0]
		WSPRBeaconState = FIRST_FIX;
 8001b52:	2301      	movs	r3, #1
		SystemSeconds = 0;
 8001b54:	6014      	str	r4, [r2, #0]
		WSPRBeaconState = FIRST_FIX;
 8001b56:	703b      	strb	r3, [r7, #0]
}
 8001b58:	b005      	add	sp, #20
 8001b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SystemSeconds = 0;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <DecodeDCF77+0x164>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
			srand((unsigned) HAL_GetTick());
 8001b64:	f005 f852 	bl	8006c0c <HAL_GetTick>
 8001b68:	f00f fce0 	bl	801152c <srand>
			TransmittingWSPR = 1;
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <DecodeDCF77+0x168>)
			WSPRBeaconState = SEND_WSPR;
 8001b6e:	2302      	movs	r3, #2
			TransmittingWSPR = 1;
 8001b70:	7014      	strb	r4, [r2, #0]
			WSPRBeaconState = SEND_WSPR;
 8001b72:	703b      	strb	r3, [r7, #0]
 8001b74:	e7b1      	b.n	8001ada <DecodeDCF77+0xae>
 8001b76:	bf00      	nop
 8001b78:	2400062c 	.word	0x2400062c
 8001b7c:	2400066a 	.word	0x2400066a
 8001b80:	240073fd 	.word	0x240073fd
 8001b84:	2400101c 	.word	0x2400101c
 8001b88:	24001019 	.word	0x24001019
 8001b8c:	240062d4 	.word	0x240062d4
 8001b90:	240062d8 	.word	0x240062d8
 8001b94:	240062e9 	.word	0x240062e9
 8001b98:	24000669 	.word	0x24000669

08001b9c <DoDCF77>:

void DoDCF77(uint16_t DCF77In)
{
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
//100 mSec (DCF77 0) is 3200 samples
//200 mSec (DCF77 1) is 6400 samples
//2 Sec (DCF77 Sync) is 64000 samples


	if (DCF77In && !LastDCF77In)
 8001b9e:	4d3c      	ldr	r5, [pc, #240]	; (8001c90 <DoDCF77+0xf4>)
{
 8001ba0:	b083      	sub	sp, #12
	if (DCF77In && !LastDCF77In)
 8001ba2:	b1f8      	cbz	r0, 8001be4 <DoDCF77+0x48>
 8001ba4:	8829      	ldrh	r1, [r5, #0]
 8001ba6:	2900      	cmp	r1, #0
 8001ba8:	d141      	bne.n	8001c2e <DoDCF77+0x92>
		RisingEdge = 1;
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <DoDCF77+0xf8>)
 8001bac:	2201      	movs	r2, #1
		DCF77LowSampleCounter = 0;
	}

	if (RisingEdge)
	{
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8001bae:	f640 34b6 	movw	r4, #2998	; 0xbb6
		RisingEdge = 1;
 8001bb2:	701a      	strb	r2, [r3, #0]
	if (!DCF77In && LastDCF77In)
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <DoDCF77+0xfc>)
 8001bb6:	7019      	strb	r1, [r3, #0]
		if (DCF77LowSampleCounter > 3000 && DCF77LowSampleCounter < 6000)
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <DoDCF77+0x100>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f6a3 36b9 	subw	r6, r3, #3001	; 0xbb9
 8001bc0:	42a6      	cmp	r6, r4
 8001bc2:	d855      	bhi.n	8001c70 <DoDCF77+0xd4>
			DCF77Message[DCF77BitCounter++] = 0;
 8001bc4:	4c36      	ldr	r4, [pc, #216]	; (8001ca0 <DoDCF77+0x104>)
 8001bc6:	4a37      	ldr	r2, [pc, #220]	; (8001ca4 <DoDCF77+0x108>)
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	54d1      	strb	r1, [r2, r3]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	6023      	str	r3, [r4, #0]
{
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <DoDCF77+0x10c>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
				DCF77Message[DCF77BitCounter++] = 1;
		DCF77HighSampleCounter = 0;
	}
	if (DCF77In && DCF77HighSampleCounter < 100000)
		DCF77HighSampleCounter++;
 8001bd4:	600a      	str	r2, [r1, #0]

	if (!DCF77In && DCF77LowSampleCounter < 100000)
		DCF77LowSampleCounter++;

	if (DCF77BitCounter > 59)
 8001bd6:	2b3b      	cmp	r3, #59	; 0x3b
 8001bd8:	d901      	bls.n	8001bde <DoDCF77+0x42>
		DCF77BitCounter = 59;
 8001bda:	233b      	movs	r3, #59	; 0x3b
 8001bdc:	6023      	str	r3, [r4, #0]
	LastDCF77In = DCF77In;
 8001bde:	8028      	strh	r0, [r5, #0]
}
 8001be0:	b003      	add	sp, #12
 8001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!DCF77In && LastDCF77In)
 8001be4:	882a      	ldrh	r2, [r5, #0]
		RisingEdge = 0;
 8001be6:	4f2b      	ldr	r7, [pc, #172]	; (8001c94 <DoDCF77+0xf8>)
	if (!DCF77In && LastDCF77In)
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <DoDCF77+0xfc>)
		RisingEdge = 0;
 8001bec:	7038      	strb	r0, [r7, #0]
	if (!DCF77In && LastDCF77In)
 8001bee:	bf14      	ite	ne
 8001bf0:	2201      	movne	r2, #1
 8001bf2:	2200      	moveq	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
	if (FallingEdge)
 8001bf6:	d027      	beq.n	8001c48 <DoDCF77+0xac>
		if (DCF77HighSampleCounter > 40000 && DCF77HighSampleCounter < 90000)
 8001bf8:	4e2b      	ldr	r6, [pc, #172]	; (8001ca8 <DoDCF77+0x10c>)
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <DoDCF77+0x110>)
 8001bfc:	6832      	ldr	r2, [r6, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f24c 324e 	movw	r2, #49998	; 0xc34e
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d90a      	bls.n	8001c1e <DoDCF77+0x82>
		DCF77LowSampleCounter = 0;
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <DoDCF77+0x100>)
 8001c0a:	4c25      	ldr	r4, [pc, #148]	; (8001ca0 <DoDCF77+0x104>)
 8001c0c:	6010      	str	r0, [r2, #0]
	if (DCF77BitCounter > 59)
 8001c0e:	6823      	ldr	r3, [r4, #0]
	if (!DCF77In && DCF77LowSampleCounter < 100000)
 8001c10:	6811      	ldr	r1, [r2, #0]
 8001c12:	4e27      	ldr	r6, [pc, #156]	; (8001cb0 <DoDCF77+0x114>)
 8001c14:	42b1      	cmp	r1, r6
 8001c16:	d8de      	bhi.n	8001bd6 <DoDCF77+0x3a>
		DCF77LowSampleCounter++;
 8001c18:	3101      	adds	r1, #1
 8001c1a:	6011      	str	r1, [r2, #0]
 8001c1c:	e7db      	b.n	8001bd6 <DoDCF77+0x3a>
			if (DCF77BitCounter == 59)
 8001c1e:	4c20      	ldr	r4, [pc, #128]	; (8001ca0 <DoDCF77+0x104>)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	2b3b      	cmp	r3, #59	; 0x3b
 8001c24:	d013      	beq.n	8001c4e <DoDCF77+0xb2>
		DCF77LowSampleCounter = 0;
 8001c26:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <DoDCF77+0x100>)
			DCF77BitCounter = 0;
 8001c28:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8001c2a:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8001c2c:	e7ef      	b.n	8001c0e <DoDCF77+0x72>
		RisingEdge = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <DoDCF77+0xf8>)
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001c32:	491d      	ldr	r1, [pc, #116]	; (8001ca8 <DoDCF77+0x10c>)
		RisingEdge = 0;
 8001c34:	7013      	strb	r3, [r2, #0]
	if (!DCF77In && LastDCF77In)
 8001c36:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <DoDCF77+0xfc>)
 8001c38:	7013      	strb	r3, [r2, #0]
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001c3a:	680a      	ldr	r2, [r1, #0]
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <DoDCF77+0x114>)
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d912      	bls.n	8001c68 <DoDCF77+0xcc>
	if (DCF77BitCounter > 59)
 8001c42:	4c17      	ldr	r4, [pc, #92]	; (8001ca0 <DoDCF77+0x104>)
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	e7c6      	b.n	8001bd6 <DoDCF77+0x3a>
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <DoDCF77+0x100>)
 8001c4a:	4c15      	ldr	r4, [pc, #84]	; (8001ca0 <DoDCF77+0x104>)
 8001c4c:	e7df      	b.n	8001c0e <DoDCF77+0x72>
				DecodeDCF77();
 8001c4e:	9001      	str	r0, [sp, #4]
 8001c50:	f7ff feec 	bl	8001a2c <DecodeDCF77>
			DCF77BitCounter = 0;
 8001c54:	9801      	ldr	r0, [sp, #4]
		DCF77LowSampleCounter = 0;
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <DoDCF77+0x100>)
	if (RisingEdge)
 8001c58:	783b      	ldrb	r3, [r7, #0]
			DCF77BitCounter = 0;
 8001c5a:	6020      	str	r0, [r4, #0]
		DCF77LowSampleCounter = 0;
 8001c5c:	6010      	str	r0, [r2, #0]
	if (RisingEdge)
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0d5      	beq.n	8001c0e <DoDCF77+0x72>
	if (DCF77BitCounter > 59)
 8001c62:	4603      	mov	r3, r0
		DCF77HighSampleCounter = 0;
 8001c64:	6030      	str	r0, [r6, #0]
 8001c66:	e7d3      	b.n	8001c10 <DoDCF77+0x74>
	if (DCF77BitCounter > 59)
 8001c68:	4c0d      	ldr	r4, [pc, #52]	; (8001ca0 <DoDCF77+0x104>)
		DCF77HighSampleCounter++;
 8001c6a:	3201      	adds	r2, #1
	if (DCF77BitCounter > 59)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	e7b1      	b.n	8001bd4 <DoDCF77+0x38>
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001c70:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <DoDCF77+0x118>)
				DCF77Message[DCF77BitCounter++] = 1;
 8001c72:	4c0b      	ldr	r4, [pc, #44]	; (8001ca0 <DoDCF77+0x104>)
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001c74:	4419      	add	r1, r3
 8001c76:	f241 736e 	movw	r3, #5998	; 0x176e
 8001c7a:	4299      	cmp	r1, r3
				DCF77Message[DCF77BitCounter++] = 1;
 8001c7c:	6823      	ldr	r3, [r4, #0]
			if (DCF77LowSampleCounter > 6000 && DCF77LowSampleCounter < 12000)
 8001c7e:	d901      	bls.n	8001c84 <DoDCF77+0xe8>
	if (DCF77In && DCF77HighSampleCounter < 100000)
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <DoDCF77+0x10c>)
 8001c82:	e7a7      	b.n	8001bd4 <DoDCF77+0x38>
				DCF77Message[DCF77BitCounter++] = 1;
 8001c84:	4907      	ldr	r1, [pc, #28]	; (8001ca4 <DoDCF77+0x108>)
 8001c86:	54ca      	strb	r2, [r1, r3]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	6023      	str	r3, [r4, #0]
 8001c8c:	e7a0      	b.n	8001bd0 <DoDCF77+0x34>
 8001c8e:	bf00      	nop
 8001c90:	2400625e 	.word	0x2400625e
 8001c94:	2400066b 	.word	0x2400066b
 8001c98:	24000668 	.word	0x24000668
 8001c9c:	24000628 	.word	0x24000628
 8001ca0:	2400061c 	.word	0x2400061c
 8001ca4:	2400062c 	.word	0x2400062c
 8001ca8:	24000624 	.word	0x24000624
 8001cac:	ffff63bf 	.word	0xffff63bf
 8001cb0:	0001869f 	.word	0x0001869f
 8001cb4:	ffffe88f 	.word	0xffffe88f

08001cb8 <DCF77StatusDisplay>:

void DCF77StatusDisplay(void)
{
	static uint16_t DCF77DisplayCounter, DCF77DisplayPrescaler;

	if (DCF77DisplayPrescaler++ == 1)
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <DCF77StatusDisplay+0x64>)
{
 8001cba:	b538      	push	{r3, r4, r5, lr}
	if (DCF77DisplayPrescaler++ == 1)
 8001cbc:	8813      	ldrh	r3, [r2, #0]
	{
		DCF77DisplayPrescaler = 0;
		DCF77DisplayCounter++;
 8001cbe:	4c18      	ldr	r4, [pc, #96]	; (8001d20 <DCF77StatusDisplay+0x68>)
	if (DCF77DisplayPrescaler++ == 1)
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	8011      	strh	r1, [r2, #0]
 8001cc6:	d019      	beq.n	8001cfc <DCF77StatusDisplay+0x44>
	}
	if (DCF77DisplayCounter % 2 == 0)
 8001cc8:	8823      	ldrh	r3, [r4, #0]
 8001cca:	f013 0201 	ands.w	r2, r3, #1
 8001cce:	d01e      	beq.n	8001d0e <DCF77StatusDisplay+0x56>
		LED_GREEN_OFF;
	else
	{
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8001cd0:	4d14      	ldr	r5, [pc, #80]	; (8001d24 <DCF77StatusDisplay+0x6c>)
			LED_GREEN_ON;
		else
			LED_GREEN_OFF;
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	4814      	ldr	r0, [pc, #80]	; (8001d28 <DCF77StatusDisplay+0x70>)
		if (DCF77DisplayCounter <= (WSPRBeaconState + 1) * 2 )
 8001cd8:	782a      	ldrb	r2, [r5, #0]
 8001cda:	3201      	adds	r2, #1
 8001cdc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
			LED_GREEN_ON;
 8001ce0:	bfd4      	ite	le
 8001ce2:	2201      	movle	r2, #1
			LED_GREEN_OFF;
 8001ce4:	2200      	movgt	r2, #0
 8001ce6:	f008 f83b 	bl	8009d60 <HAL_GPIO_WritePin>
		if (DCF77DisplayCounter > (WSPRBeaconState + 3) * 2 )
 8001cea:	782b      	ldrb	r3, [r5, #0]
 8001cec:	8822      	ldrh	r2, [r4, #0]
 8001cee:	3303      	adds	r3, #3
 8001cf0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8001cf4:	dd01      	ble.n	8001cfa <DCF77StatusDisplay+0x42>
			DCF77DisplayCounter = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	8023      	strh	r3, [r4, #0]
	}

}
 8001cfa:	bd38      	pop	{r3, r4, r5, pc}
		DCF77DisplayCounter++;
 8001cfc:	8823      	ldrh	r3, [r4, #0]
		DCF77DisplayPrescaler = 0;
 8001cfe:	2100      	movs	r1, #0
		DCF77DisplayCounter++;
 8001d00:	3301      	adds	r3, #1
		DCF77DisplayPrescaler = 0;
 8001d02:	8011      	strh	r1, [r2, #0]
		DCF77DisplayCounter++;
 8001d04:	b29b      	uxth	r3, r3
	if (DCF77DisplayCounter % 2 == 0)
 8001d06:	f013 0201 	ands.w	r2, r3, #1
		DCF77DisplayCounter++;
 8001d0a:	8023      	strh	r3, [r4, #0]
	if (DCF77DisplayCounter % 2 == 0)
 8001d0c:	d1e0      	bne.n	8001cd0 <DCF77StatusDisplay+0x18>
		LED_GREEN_OFF;
 8001d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <DCF77StatusDisplay+0x70>)
}
 8001d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LED_GREEN_OFF;
 8001d18:	f008 b822 	b.w	8009d60 <HAL_GPIO_WritePin>
 8001d1c:	24000622 	.word	0x24000622
 8001d20:	24000620 	.word	0x24000620
 8001d24:	240073fd 	.word	0x240073fd
 8001d28:	58020400 	.word	0x58020400

08001d2c <Load_Presets>:
// Load from the Presets table
void Load_Presets(void)
{
	int k;

	for(k=0; k<MAXPRESETS; k++)
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <Load_Presets+0x40>)
{
 8001d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d32:	4c0f      	ldr	r4, [pc, #60]	; (8001d70 <Load_Presets+0x44>)
 8001d34:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 8001d38:	4f0e      	ldr	r7, [pc, #56]	; (8001d74 <Load_Presets+0x48>)
 8001d3a:	4e0f      	ldr	r6, [pc, #60]	; (8001d78 <Load_Presets+0x4c>)
 8001d3c:	4d0f      	ldr	r5, [pc, #60]	; (8001d7c <Load_Presets+0x50>)
	{
		strcpy(psets[k].name, pNames[k]);
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00f fc7f 	bl	8011644 <strcpy>
 8001d46:	4603      	mov	r3, r0
		psets[k].freq = pFreqs[k];
 8001d48:	f857 0b04 	ldr.w	r0, [r7], #4
	for(k=0; k<MAXPRESETS; k++)
 8001d4c:	3410      	adds	r4, #16
 8001d4e:	3318      	adds	r3, #24
		psets[k].mode = pModes[k];
 8001d50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		psets[k].freq = pFreqs[k];
 8001d54:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8001d58:	f815 2f01 	ldrb.w	r2, [r5, #1]!
	for(k=0; k<MAXPRESETS; k++)
 8001d5c:	4543      	cmp	r3, r8
		psets[k].mode = pModes[k];
 8001d5e:	f803 1c04 	strb.w	r1, [r3, #-4]
		psets[k].bw   = pBws[k];
 8001d62:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8001d66:	d1ea      	bne.n	8001d3e <Load_Presets+0x12>
	}
}
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d6c:	2400a848 	.word	0x2400a848
 8001d70:	24000120 	.word	0x24000120
 8001d74:	0801da10 	.word	0x0801da10
 8001d78:	0801da47 	.word	0x0801da47
 8001d7c:	0801d9ff 	.word	0x0801d9ff

08001d80 <SetBW>:
//-----------------------------------------------------------------------------
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	if (newbw == CurrentBW)
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <SetBW+0x94>)
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	4282      	cmp	r2, r0
 8001d86:	d043      	beq.n	8001e10 <SetBW+0x90>
		return;

	CurrentBW = newbw;
	switch(CurrentMode)
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <SetBW+0x98>)
{
 8001d8a:	b410      	push	{r4}
	CurrentBW = newbw;
 8001d8c:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8001d8e:	7813      	ldrb	r3, [r2, #0]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d803      	bhi.n	8001d9c <SetBW+0x1c>
 8001d94:	e8df f003 	tbb	[pc, r3]
 8001d98:	05342113 	.word	0x05342113
		break;

	default :
		break;
	}
}	
 8001d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001da0:	4770      	bx	lr
		bw[CW] = newbw;
 8001da2:	4c1e      	ldr	r4, [pc, #120]	; (8001e1c <SetBW+0x9c>)
		CWindex = 0; // TODO toglimi
 8001da4:	2100      	movs	r1, #0
 8001da6:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <SetBW+0xa0>)
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[CW] = newbw;
 8001dac:	70e0      	strb	r0, [r4, #3]
		CWindex = 0; // TODO toglimi
 8001dae:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001db0:	481c      	ldr	r0, [pc, #112]	; (8001e24 <SetBW+0xa4>)
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <SetBW+0xa8>)
 8001db4:	491d      	ldr	r1, [pc, #116]	; (8001e2c <SetBW+0xac>)
}	
 8001db6:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001dba:	f001 b951 	b.w	8003060 <SDR_2R_toC_f32>
		bw[AM] = newbw;
 8001dbe:	4c17      	ldr	r4, [pc, #92]	; (8001e1c <SetBW+0x9c>)
		AMindex = 0; // TODO toglimi
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <SetBW+0xb0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
		bw[AM] = newbw;
 8001dc8:	7020      	strb	r0, [r4, #0]
		AMindex = 0; // TODO toglimi
 8001dca:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001dcc:	4819      	ldr	r0, [pc, #100]	; (8001e34 <SetBW+0xb4>)
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <SetBW+0xa8>)
 8001dd0:	4919      	ldr	r1, [pc, #100]	; (8001e38 <SetBW+0xb8>)
}	
 8001dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001dd6:	f001 b943 	b.w	8003060 <SDR_2R_toC_f32>
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001dda:	1e02      	subs	r2, r0, #0
		bw[LSB] = newbw;
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <SetBW+0x9c>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <SetBW+0xb0>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001de0:	bf18      	it	ne
 8001de2:	2201      	movne	r2, #1
		LSBindex = 0; // TODO toglimi
 8001de4:	4c15      	ldr	r4, [pc, #84]	; (8001e3c <SetBW+0xbc>)
		bw[LSB] = newbw;
 8001de6:	7048      	strb	r0, [r1, #1]
		USBindex = 0; // TODO toglimi
 8001de8:	2000      	movs	r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001dea:	801a      	strh	r2, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001dec:	4914      	ldr	r1, [pc, #80]	; (8001e40 <SetBW+0xc0>)
 8001dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8001df2:	8020      	strh	r0, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <SetBW+0xa8>)
 8001df6:	4813      	ldr	r0, [pc, #76]	; (8001e44 <SetBW+0xc4>)
}	
 8001df8:	f85d 4b04 	ldr.w	r4, [sp], #4
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001dfc:	f001 b930 	b.w	8003060 <SDR_2R_toC_f32>
		bw[USB] = newbw;
 8001e00:	4906      	ldr	r1, [pc, #24]	; (8001e1c <SetBW+0x9c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001e02:	1e02      	subs	r2, r0, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <SetBW+0xb0>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8001e06:	bf18      	it	ne
 8001e08:	2201      	movne	r2, #1
		USBindex = 0; // TODO toglimi
 8001e0a:	4c0f      	ldr	r4, [pc, #60]	; (8001e48 <SetBW+0xc8>)
		bw[USB] = newbw;
 8001e0c:	7088      	strb	r0, [r1, #2]
 8001e0e:	e7eb      	b.n	8001de8 <SetBW+0x68>
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	24001017 	.word	0x24001017
 8001e18:	24001018 	.word	0x24001018
 8001e1c:	24007c30 	.word	0x24007c30
 8001e20:	24001014 	.word	0x24001014
 8001e24:	0801aa00 	.word	0x0801aa00
 8001e28:	20006800 	.word	0x20006800
 8001e2c:	08019a00 	.word	0x08019a00
 8001e30:	240007e0 	.word	0x240007e0
 8001e34:	08018a00 	.word	0x08018a00
 8001e38:	08017a00 	.word	0x08017a00
 8001e3c:	2400625c 	.word	0x2400625c
 8001e40:	0801ba00 	.word	0x0801ba00
 8001e44:	0801ca00 	.word	0x0801ca00
 8001e48:	240062f4 	.word	0x240062f4

08001e4c <SetAGC>:
// Change the AGC constants according to the mode and the AGC chosen,
// and change the color of the buttons to indicate the active AGC speed
void SetAGC(/*WM_HWIN ptr,*/ Agctype newAGC)
{
	CurrentAGC =newAGC;
	switch(CurrentMode)
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <SetAGC+0x98>)
	CurrentAGC =newAGC;
 8001e4e:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <SetAGC+0x9c>)
{
 8001e50:	b410      	push	{r4}
	switch(CurrentMode)
 8001e52:	781b      	ldrb	r3, [r3, #0]
	CurrentAGC =newAGC;
 8001e54:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d811      	bhi.n	8001e7e <SetAGC+0x32>
 8001e5a:	e8df f003 	tbb	[pc, r3]
 8001e5e:	2333      	.short	0x2333
 8001e60:	0213      	.short	0x0213
	case USB :      agc[USB] = newAGC;
	Decay[USB]  = AGC_decay[newAGC];
	Hcount[USB] = Hangcount[newAGC]; break;

	case CW :       agc[CW] = newAGC;
	Decay[CW]   = AGC_decay[newAGC];
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <SetAGC+0xa0>)
	case CW :       agc[CW] = newAGC;
 8001e64:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <SetAGC+0xa4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e66:	4c23      	ldr	r4, [pc, #140]	; (8001ef4 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 8001e68:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <SetAGC+0xac>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e6e:	f834 c010 	ldrh.w	ip, [r4, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8001e72:	681b      	ldr	r3, [r3, #0]
	case CW :       agc[CW] = newAGC;
 8001e74:	70c8      	strb	r0, [r1, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e76:	4921      	ldr	r1, [pc, #132]	; (8001efc <SetAGC+0xb0>)
	Decay[CW]   = AGC_decay[newAGC];
 8001e78:	60d3      	str	r3, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8001e7a:	f8a1 c006 	strh.w	ip, [r1, #6]
	}
	//  ChangeColor(ptr, hFAST, (newAGC == Fast) ? GUI_RED   : GUI_BLACK);
	//  ChangeColor(ptr, hSLOW, (newAGC == Slow) ? GUI_RED   : GUI_BLACK);
}	
 8001e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e82:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <SetAGC+0xa0>)
	case USB :      agc[USB] = newAGC;
 8001e86:	491a      	ldr	r1, [pc, #104]	; (8001ef0 <SetAGC+0xa4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e88:	4c1a      	ldr	r4, [pc, #104]	; (8001ef4 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 8001e8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case USB :      agc[USB] = newAGC;
 8001e8e:	7088      	strb	r0, [r1, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e90:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <SetAGC+0xac>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e96:	4919      	ldr	r1, [pc, #100]	; (8001efc <SetAGC+0xb0>)
	Decay[USB]  = AGC_decay[newAGC];
 8001e98:	681b      	ldr	r3, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8001e9a:	808c      	strh	r4, [r1, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8001e9c:	6093      	str	r3, [r2, #8]
}	
 8001e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ea2:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <SetAGC+0xa0>)
	case LSB :      agc[LSB] = newAGC;
 8001ea6:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <SetAGC+0xa4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001ea8:	4c12      	ldr	r4, [pc, #72]	; (8001ef4 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001eaa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8001eae:	7048      	strb	r0, [r1, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001eb0:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8001eb4:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <SetAGC+0xac>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001eb6:	4911      	ldr	r1, [pc, #68]	; (8001efc <SetAGC+0xb0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8001eb8:	681b      	ldr	r3, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8001eba:	804c      	strh	r4, [r1, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8001ebc:	6053      	str	r3, [r2, #4]
}	
 8001ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ec2:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <SetAGC+0xa0>)
	case AM :       agc[AM] = newAGC;
 8001ec6:	490a      	ldr	r1, [pc, #40]	; (8001ef0 <SetAGC+0xa4>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	; (8001ef4 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8001eca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	case AM :       agc[AM] = newAGC;
 8001ece:	7008      	strb	r0, [r1, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001ed0:	f834 4010 	ldrh.w	r4, [r4, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <SetAGC+0xac>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001ed6:	4909      	ldr	r1, [pc, #36]	; (8001efc <SetAGC+0xb0>)
	Decay[AM]   = AGC_decay[newAGC];
 8001ed8:	681b      	ldr	r3, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8001eda:	800c      	strh	r4, [r1, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8001edc:	6013      	str	r3, [r2, #0]
}	
 8001ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	24001018 	.word	0x24001018
 8001ee8:	24001016 	.word	0x24001016
 8001eec:	240007d8 	.word	0x240007d8
 8001ef0:	24007c20 	.word	0x24007c20
 8001ef4:	24005248 	.word	0x24005248
 8001ef8:	24001020 	.word	0x24001020
 8001efc:	2400524c 	.word	0x2400524c

08001f00 <Tune_Preset>:
{
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LOfreq = psets[Idx].freq;
 8001f02:	4e43      	ldr	r6, [pc, #268]	; (8002010 <Tune_Preset+0x110>)
 8001f04:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <Tune_Preset+0x114>)
{
 8001f0a:	4604      	mov	r4, r0
	LOfreq = psets[Idx].freq;
 8001f0c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	if (CurrentMode == newmode)
 8001f10:	4f41      	ldr	r7, [pc, #260]	; (8002018 <Tune_Preset+0x118>)
	LOfreq = psets[Idx].freq;
 8001f12:	0045      	lsls	r5, r0, #1
 8001f14:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 8001f16:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 8001f18:	6011      	str	r1, [r2, #0]
	if (CurrentMode == newmode)
 8001f1a:	783a      	ldrb	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d00e      	beq.n	8001f3e <Tune_Preset+0x3e>
		return;

	CurrentMode = newmode;
 8001f20:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d80b      	bhi.n	8001f3e <Tune_Preset+0x3e>
 8001f26:	e8df f003 	tbb	[pc, r3]
 8001f2a:	4a41      	.short	0x4a41
 8001f2c:	0253      	.short	0x0253
	case USB :
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <Tune_Preset+0x11c>)
 8001f30:	78d8      	ldrb	r0, [r3, #3]
 8001f32:	f7ff ff25 	bl	8001d80 <SetBW>
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <Tune_Preset+0x120>)
 8001f38:	78d8      	ldrb	r0, [r3, #3]
 8001f3a:	f7ff ff87 	bl	8001e4c <SetAGC>
	SetBW( psets[Idx].bw);
 8001f3e:	4425      	add	r5, r4
	if (newbw == CurrentBW)
 8001f40:	4a38      	ldr	r2, [pc, #224]	; (8002024 <Tune_Preset+0x124>)
	SetBW( psets[Idx].bw);
 8001f42:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	if (newbw == CurrentBW)
 8001f46:	7811      	ldrb	r1, [r2, #0]
	SetBW( psets[Idx].bw);
 8001f48:	7d6b      	ldrb	r3, [r5, #21]
	if (newbw == CurrentBW)
 8001f4a:	4299      	cmp	r1, r3
 8001f4c:	d018      	beq.n	8001f80 <Tune_Preset+0x80>
	switch(CurrentMode)
 8001f4e:	7839      	ldrb	r1, [r7, #0]
	CurrentBW = newbw;
 8001f50:	7013      	strb	r3, [r2, #0]
	switch(CurrentMode)
 8001f52:	2903      	cmp	r1, #3
 8001f54:	d814      	bhi.n	8001f80 <Tune_Preset+0x80>
 8001f56:	e8df f001 	tbb	[pc, r1]
 8001f5a:	0244      	.short	0x0244
 8001f5c:	1c51      	.short	0x1c51
		bw[LSB] = newbw;
 8001f5e:	492f      	ldr	r1, [pc, #188]	; (800201c <Tune_Preset+0x11c>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001f60:	4a31      	ldr	r2, [pc, #196]	; (8002028 <Tune_Preset+0x128>)
		bw[LSB] = newbw;
 8001f62:	704b      	strb	r3, [r1, #1]
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8001f64:	3b00      	subs	r3, #0
 8001f66:	bf18      	it	ne
 8001f68:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001f6a:	8013      	strh	r3, [r2, #0]
		LSBindex = 0; // TODO toglimi
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	; (800202c <Tune_Preset+0x12c>)
		USBindex = 0; // TODO toglimi
 8001f6e:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f74:	482e      	ldr	r0, [pc, #184]	; (8002030 <Tune_Preset+0x130>)
		USBindex = 0; // TODO toglimi
 8001f76:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8001f78:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <Tune_Preset+0x134>)
 8001f7a:	492f      	ldr	r1, [pc, #188]	; (8002038 <Tune_Preset+0x138>)
 8001f7c:	f001 f870 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001f80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001f84:	482d      	ldr	r0, [pc, #180]	; (800203c <Tune_Preset+0x13c>)
 8001f86:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8001f8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	strcpy(msg, psets[Idx].name);
 8001f8e:	f00f bb59 	b.w	8011644 <strcpy>
		bw[CW] = newbw;
 8001f92:	4922      	ldr	r1, [pc, #136]	; (800201c <Tune_Preset+0x11c>)
		CWindex = 0; // TODO toglimi
 8001f94:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <Tune_Preset+0x140>)
		bw[CW] = newbw;
 8001f96:	70cb      	strb	r3, [r1, #3]
		CWindex = 0; // TODO toglimi
 8001f98:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f9e:	4829      	ldr	r0, [pc, #164]	; (8002044 <Tune_Preset+0x144>)
		CWindex = 0; // TODO toglimi
 8001fa0:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 8001fa2:	4a24      	ldr	r2, [pc, #144]	; (8002034 <Tune_Preset+0x134>)
 8001fa4:	4928      	ldr	r1, [pc, #160]	; (8002048 <Tune_Preset+0x148>)
 8001fa6:	f001 f85b 	bl	8003060 <SDR_2R_toC_f32>
		break;
 8001faa:	e7e9      	b.n	8001f80 <Tune_Preset+0x80>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <Tune_Preset+0x11c>)
 8001fae:	7818      	ldrb	r0, [r3, #0]
 8001fb0:	f7ff fee6 	bl	8001d80 <SetBW>
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <Tune_Preset+0x120>)
 8001fb6:	7818      	ldrb	r0, [r3, #0]
 8001fb8:	f7ff ff48 	bl	8001e4c <SetAGC>
		break;
 8001fbc:	e7bf      	b.n	8001f3e <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <Tune_Preset+0x11c>)
 8001fc0:	7858      	ldrb	r0, [r3, #1]
 8001fc2:	f7ff fedd 	bl	8001d80 <SetBW>
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <Tune_Preset+0x120>)
 8001fc8:	7858      	ldrb	r0, [r3, #1]
 8001fca:	f7ff ff3f 	bl	8001e4c <SetAGC>
		break;
 8001fce:	e7b6      	b.n	8001f3e <Tune_Preset+0x3e>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <Tune_Preset+0x11c>)
 8001fd2:	7898      	ldrb	r0, [r3, #2]
 8001fd4:	f7ff fed4 	bl	8001d80 <SetBW>
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <Tune_Preset+0x120>)
 8001fda:	7898      	ldrb	r0, [r3, #2]
 8001fdc:	f7ff ff36 	bl	8001e4c <SetAGC>
		break;
 8001fe0:	e7ad      	b.n	8001f3e <Tune_Preset+0x3e>
		bw[AM] = newbw;
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <Tune_Preset+0x11c>)
		AMindex = 0; // TODO toglimi
 8001fe4:	4a10      	ldr	r2, [pc, #64]	; (8002028 <Tune_Preset+0x128>)
		bw[AM] = newbw;
 8001fe6:	700b      	strb	r3, [r1, #0]
		AMindex = 0; // TODO toglimi
 8001fe8:	2100      	movs	r1, #0
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fee:	4817      	ldr	r0, [pc, #92]	; (800204c <Tune_Preset+0x14c>)
		AMindex = 0; // TODO toglimi
 8001ff0:	8011      	strh	r1, [r2, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8001ff2:	4a10      	ldr	r2, [pc, #64]	; (8002034 <Tune_Preset+0x134>)
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <Tune_Preset+0x150>)
 8001ff6:	f001 f833 	bl	8003060 <SDR_2R_toC_f32>
		break;
 8001ffa:	e7c1      	b.n	8001f80 <Tune_Preset+0x80>
		bw[USB] = newbw;
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <Tune_Preset+0x11c>)
		AMindex = (newbw == Narrow) ? 0 : 1;
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <Tune_Preset+0x128>)
		bw[USB] = newbw;
 8002000:	708b      	strb	r3, [r1, #2]
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002002:	3b00      	subs	r3, #0
 8002004:	bf18      	it	ne
 8002006:	2301      	movne	r3, #1
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002008:	8013      	strh	r3, [r2, #0]
		USBindex = 0; // TODO toglimi
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <Tune_Preset+0x154>)
 800200c:	e7af      	b.n	8001f6e <Tune_Preset+0x6e>
 800200e:	bf00      	nop
 8002010:	2400a848 	.word	0x2400a848
 8002014:	24006258 	.word	0x24006258
 8002018:	24001018 	.word	0x24001018
 800201c:	24007c30 	.word	0x24007c30
 8002020:	24007c20 	.word	0x24007c20
 8002024:	24001017 	.word	0x24001017
 8002028:	240007e0 	.word	0x240007e0
 800202c:	2400625c 	.word	0x2400625c
 8002030:	0801ca00 	.word	0x0801ca00
 8002034:	20006800 	.word	0x20006800
 8002038:	0801ba00 	.word	0x0801ba00
 800203c:	2400a820 	.word	0x2400a820
 8002040:	24001014 	.word	0x24001014
 8002044:	0801aa00 	.word	0x0801aa00
 8002048:	08019a00 	.word	0x08019a00
 800204c:	08018a00 	.word	0x08018a00
 8002050:	08017a00 	.word	0x08017a00
 8002054:	240062f4 	.word	0x240062f4

08002058 <SetMode>:
{
 8002058:	b508      	push	{r3, lr}
	if (CurrentMode == newmode)
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <SetMode+0x6c>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4282      	cmp	r2, r0
 8002060:	d006      	beq.n	8002070 <SetMode+0x18>
	CurrentMode = newmode;
 8002062:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 8002064:	2803      	cmp	r0, #3
 8002066:	d803      	bhi.n	8002070 <SetMode+0x18>
 8002068:	e8df f000 	tbb	[pc, r0]
 800206c:	0321170d 	.word	0x0321170d
		break;

	default :
		break;
	}
}	
 8002070:	bd08      	pop	{r3, pc}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <SetMode+0x70>)
 8002074:	78d8      	ldrb	r0, [r3, #3]
 8002076:	f7ff fe83 	bl	8001d80 <SetBW>
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <SetMode+0x74>)
 800207c:	78d8      	ldrb	r0, [r3, #3]
}	
 800207e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8002082:	f7ff bee3 	b.w	8001e4c <SetAGC>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <SetMode+0x70>)
 8002088:	7818      	ldrb	r0, [r3, #0]
 800208a:	f7ff fe79 	bl	8001d80 <SetBW>
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <SetMode+0x74>)
 8002090:	7818      	ldrb	r0, [r3, #0]
}	
 8002092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8002096:	f7ff bed9 	b.w	8001e4c <SetAGC>
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <SetMode+0x70>)
 800209c:	7858      	ldrb	r0, [r3, #1]
 800209e:	f7ff fe6f 	bl	8001d80 <SetBW>
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <SetMode+0x74>)
 80020a4:	7858      	ldrb	r0, [r3, #1]
}	
 80020a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80020aa:	f7ff becf 	b.w	8001e4c <SetAGC>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SetMode+0x70>)
 80020b0:	7898      	ldrb	r0, [r3, #2]
 80020b2:	f7ff fe65 	bl	8001d80 <SetBW>
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SetMode+0x74>)
 80020b8:	7898      	ldrb	r0, [r3, #2]
}	
 80020ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80020be:	f7ff bec5 	b.w	8001e4c <SetAGC>
 80020c2:	bf00      	nop
 80020c4:	24001018 	.word	0x24001018
 80020c8:	24007c30 	.word	0x24007c30
 80020cc:	24007c20 	.word	0x24007c20

080020d0 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	if (idx == 9)
 80020d0:	2809      	cmp	r0, #9
{
 80020d2:	b508      	push	{r3, lr}
	if (idx == 9)
 80020d4:	d012      	beq.n	80020fc <SetFstep+0x2c>
		Fstep = 9000;  // MW Channel for Europe
	else
		Fstep = pow(10, 5 - idx);
 80020d6:	f1c0 0005 	rsb	r0, r0, #5
 80020da:	ee07 0a90 	vmov	s15, r0
 80020de:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002108 <SetFstep+0x38>
 80020e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020e6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80020ea:	f011 fbed 	bl	80138c8 <exp>
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <SetFstep+0x40>)
 80020f0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
 80020f4:	ee17 3a90 	vmov	r3, s15
 80020f8:	6013      	str	r3, [r2, #0]
}	
 80020fa:	bd08      	pop	{r3, pc}
		Fstep = 9000;  // MW Channel for Europe
 80020fc:	f242 3328 	movw	r3, #9000	; 0x2328
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <SetFstep+0x40>)
 8002102:	6013      	str	r3, [r2, #0]
}	
 8002104:	bd08      	pop	{r3, pc}
 8002106:	bf00      	nop
 8002108:	bbb55516 	.word	0xbbb55516
 800210c:	40026bb1 	.word	0x40026bb1
 8002110:	24005240 	.word	0x24005240

08002114 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked(uint16_t Nsteps)
{	
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <FplusClicked+0xe4>)
 8002116:	ee07 0a90 	vmov	s15, r0
 800211a:	4a38      	ldr	r2, [pc, #224]	; (80021fc <FplusClicked+0xe8>)
 800211c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002120:	ed93 6a00 	vldr	s12, [r3]
 8002124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002128:	ed92 7a00 	vldr	s14, [r2]
 800212c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <FplusClicked+0xec>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002132:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = min(LOfreq, 50000000.f);
 8002136:	eddf 5a33 	vldr	s11, [pc, #204]	; 8002204 <FplusClicked+0xf0>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800213a:	4933      	ldr	r1, [pc, #204]	; (8002208 <FplusClicked+0xf4>)
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800213c:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8002140:	4832      	ldr	r0, [pc, #200]	; (800220c <FplusClicked+0xf8>)
{	
 8002142:	b510      	push	{r4, lr}
	LOfreq += Fstep * (float)Nsteps / 2.0;
 8002144:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002148:	781b      	ldrb	r3, [r3, #0]
	psets[0].bw = bw[CurrentMode];
 800214a:	4c31      	ldr	r4, [pc, #196]	; (8002210 <FplusClicked+0xfc>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800214c:	750b      	strb	r3, [r1, #20]
	LOfreq += Fstep * (float)Nsteps / 2.0;
 800214e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8002152:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = min(LOfreq, 50000000.f);
 8002156:	fe87 7a65 	vminnm.f32	s14, s14, s11
 800215a:	ed82 7a00 	vstr	s14, [r2]
	psets[0].bw = bw[CurrentMode];
 800215e:	5ce2      	ldrb	r2, [r4, r3]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002160:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8002164:	754a      	strb	r2, [r1, #21]
	if (newbw == CurrentBW)
 8002166:	7801      	ldrb	r1, [r0, #0]
 8002168:	4291      	cmp	r1, r2
 800216a:	d016      	beq.n	800219a <FplusClicked+0x86>
	CurrentBW = newbw;
 800216c:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800216e:	2b03      	cmp	r3, #3
 8002170:	d813      	bhi.n	800219a <FplusClicked+0x86>
 8002172:	e8df f003 	tbb	[pc, r3]
 8002176:	0229      	.short	0x0229
 8002178:	183a      	.short	0x183a
		LSBindex = (newbw == Narrow) ? 0 : 1;
 800217a:	1e11      	subs	r1, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <FplusClicked+0x100>)
		LSBindex = 0; // TODO toglimi
 800217e:	4826      	ldr	r0, [pc, #152]	; (8002218 <FplusClicked+0x104>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 8002180:	bf18      	it	ne
 8002182:	2101      	movne	r1, #1
		bw[LSB] = newbw;
 8002184:	7062      	strb	r2, [r4, #1]
		USBindex = 0; // TODO toglimi
 8002186:	2400      	movs	r4, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 8002188:	8019      	strh	r1, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <FplusClicked+0x108>)
 800218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 8002190:	8004      	strh	r4, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 8002192:	4923      	ldr	r1, [pc, #140]	; (8002220 <FplusClicked+0x10c>)
 8002194:	4823      	ldr	r0, [pc, #140]	; (8002224 <FplusClicked+0x110>)
 8002196:	f000 ff63 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <FplusClicked+0xf4>)
 800219c:	4822      	ldr	r0, [pc, #136]	; (8002228 <FplusClicked+0x114>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 800219e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80021a2:	f00f ba4f 	b.w	8011644 <strcpy>
		CWindex = 0; // TODO toglimi
 80021a6:	4921      	ldr	r1, [pc, #132]	; (800222c <FplusClicked+0x118>)
 80021a8:	2000      	movs	r0, #0
		bw[CW] = newbw;
 80021aa:	70e2      	strb	r2, [r4, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80021ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 80021b0:	8008      	strh	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80021b2:	4a1a      	ldr	r2, [pc, #104]	; (800221c <FplusClicked+0x108>)
 80021b4:	491e      	ldr	r1, [pc, #120]	; (8002230 <FplusClicked+0x11c>)
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <FplusClicked+0x120>)
 80021b8:	f000 ff52 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 80021bc:	4912      	ldr	r1, [pc, #72]	; (8002208 <FplusClicked+0xf4>)
 80021be:	481a      	ldr	r0, [pc, #104]	; (8002228 <FplusClicked+0x114>)
}	
 80021c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80021c4:	f00f ba3e 	b.w	8011644 <strcpy>
		AMindex = 0; // TODO toglimi
 80021c8:	4912      	ldr	r1, [pc, #72]	; (8002214 <FplusClicked+0x100>)
 80021ca:	2000      	movs	r0, #0
		bw[AM] = newbw;
 80021cc:	7022      	strb	r2, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80021ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 80021d2:	8008      	strh	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <FplusClicked+0x108>)
 80021d6:	4918      	ldr	r1, [pc, #96]	; (8002238 <FplusClicked+0x124>)
 80021d8:	4818      	ldr	r0, [pc, #96]	; (800223c <FplusClicked+0x128>)
 80021da:	f000 ff41 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <FplusClicked+0xf4>)
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <FplusClicked+0x114>)
}	
 80021e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80021e6:	f00f ba2d 	b.w	8011644 <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 80021ea:	1e11      	subs	r1, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <FplusClicked+0x100>)
		USBindex = 0; // TODO toglimi
 80021ee:	4814      	ldr	r0, [pc, #80]	; (8002240 <FplusClicked+0x12c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 80021f0:	bf18      	it	ne
 80021f2:	2101      	movne	r1, #1
		bw[USB] = newbw;
 80021f4:	70a2      	strb	r2, [r4, #2]
 80021f6:	e7c6      	b.n	8002186 <FplusClicked+0x72>
 80021f8:	24005240 	.word	0x24005240
 80021fc:	24006258 	.word	0x24006258
 8002200:	24001018 	.word	0x24001018
 8002204:	4c3ebc20 	.word	0x4c3ebc20
 8002208:	2400a848 	.word	0x2400a848
 800220c:	24001017 	.word	0x24001017
 8002210:	24007c30 	.word	0x24007c30
 8002214:	240007e0 	.word	0x240007e0
 8002218:	2400625c 	.word	0x2400625c
 800221c:	20006800 	.word	0x20006800
 8002220:	0801ba00 	.word	0x0801ba00
 8002224:	0801ca00 	.word	0x0801ca00
 8002228:	2400a820 	.word	0x2400a820
 800222c:	24001014 	.word	0x24001014
 8002230:	08019a00 	.word	0x08019a00
 8002234:	0801aa00 	.word	0x0801aa00
 8002238:	08017a00 	.word	0x08017a00
 800223c:	08018a00 	.word	0x08018a00
 8002240:	240062f4 	.word	0x240062f4

08002244 <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked(uint16_t Nsteps)
{	
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <FminusClicked+0xe4>)
 8002246:	ee07 0a90 	vmov	s15, r0
 800224a:	4a38      	ldr	r2, [pc, #224]	; (800232c <FminusClicked+0xe8>)
 800224c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002250:	ed93 6a00 	vldr	s12, [r3]
 8002254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002258:	ed92 7a00 	vldr	s14, [r2]
 800225c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <FminusClicked+0xec>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002262:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	LOfreq  = max(LOfreq, 8000.f);
 8002266:	eddf 5a33 	vldr	s11, [pc, #204]	; 8002334 <FminusClicked+0xf0>
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800226a:	4933      	ldr	r1, [pc, #204]	; (8002338 <FminusClicked+0xf4>)
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 800226c:	ee26 6a26 	vmul.f32	s12, s12, s13
	if (newbw == CurrentBW)
 8002270:	4832      	ldr	r0, [pc, #200]	; (800233c <FminusClicked+0xf8>)
{	
 8002272:	b510      	push	{r4, lr}
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 8002274:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002278:	781b      	ldrb	r3, [r3, #0]
	psets[0].bw = bw[CurrentMode];
 800227a:	4c31      	ldr	r4, [pc, #196]	; (8002340 <FminusClicked+0xfc>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800227c:	750b      	strb	r3, [r1, #20]
	LOfreq -= Fstep * (float)Nsteps / 2.0;
 800227e:	eea6 7b44 	vfms.f64	d7, d6, d4
 8002282:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	LOfreq  = max(LOfreq, 8000.f);
 8002286:	fe87 7a25 	vmaxnm.f32	s14, s14, s11
 800228a:	ed82 7a00 	vstr	s14, [r2]
	psets[0].bw = bw[CurrentMode];
 800228e:	5ce2      	ldrb	r2, [r4, r3]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8002290:	ed81 7a04 	vstr	s14, [r1, #16]
	psets[0].bw = bw[CurrentMode];
 8002294:	754a      	strb	r2, [r1, #21]
	if (newbw == CurrentBW)
 8002296:	7801      	ldrb	r1, [r0, #0]
 8002298:	4291      	cmp	r1, r2
 800229a:	d016      	beq.n	80022ca <FminusClicked+0x86>
	CurrentBW = newbw;
 800229c:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d813      	bhi.n	80022ca <FminusClicked+0x86>
 80022a2:	e8df f003 	tbb	[pc, r3]
 80022a6:	0229      	.short	0x0229
 80022a8:	183a      	.short	0x183a
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80022aa:	1e11      	subs	r1, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <FminusClicked+0x100>)
		LSBindex = 0; // TODO toglimi
 80022ae:	4826      	ldr	r0, [pc, #152]	; (8002348 <FminusClicked+0x104>)
		LSBindex = (newbw == Narrow) ? 0 : 1;
 80022b0:	bf18      	it	ne
 80022b2:	2101      	movne	r1, #1
		bw[LSB] = newbw;
 80022b4:	7062      	strb	r2, [r4, #1]
		USBindex = 0; // TODO toglimi
 80022b6:	2400      	movs	r4, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 80022b8:	8019      	strh	r1, [r3, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <FminusClicked+0x108>)
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
		USBindex = 0; // TODO toglimi
 80022c0:	8004      	strh	r4, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex],
 80022c2:	4923      	ldr	r1, [pc, #140]	; (8002350 <FminusClicked+0x10c>)
 80022c4:	4823      	ldr	r0, [pc, #140]	; (8002354 <FminusClicked+0x110>)
 80022c6:	f000 fecb 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 80022ca:	491b      	ldr	r1, [pc, #108]	; (8002338 <FminusClicked+0xf4>)
 80022cc:	4822      	ldr	r0, [pc, #136]	; (8002358 <FminusClicked+0x114>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 80022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80022d2:	f00f b9b7 	b.w	8011644 <strcpy>
		CWindex = 0; // TODO toglimi
 80022d6:	4921      	ldr	r1, [pc, #132]	; (800235c <FminusClicked+0x118>)
 80022d8:	2000      	movs	r0, #0
		bw[CW] = newbw;
 80022da:	70e2      	strb	r2, [r4, #3]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80022dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
		CWindex = 0; // TODO toglimi
 80022e0:	8008      	strh	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex],
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <FminusClicked+0x108>)
 80022e4:	491e      	ldr	r1, [pc, #120]	; (8002360 <FminusClicked+0x11c>)
 80022e6:	481f      	ldr	r0, [pc, #124]	; (8002364 <FminusClicked+0x120>)
 80022e8:	f000 feba 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 80022ec:	4912      	ldr	r1, [pc, #72]	; (8002338 <FminusClicked+0xf4>)
 80022ee:	481a      	ldr	r0, [pc, #104]	; (8002358 <FminusClicked+0x114>)
}
 80022f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 80022f4:	f00f b9a6 	b.w	8011644 <strcpy>
		AMindex = 0; // TODO toglimi
 80022f8:	4912      	ldr	r1, [pc, #72]	; (8002344 <FminusClicked+0x100>)
 80022fa:	2000      	movs	r0, #0
		bw[AM] = newbw;
 80022fc:	7022      	strb	r2, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80022fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8002302:	8008      	strh	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <FminusClicked+0x108>)
 8002306:	4918      	ldr	r1, [pc, #96]	; (8002368 <FminusClicked+0x124>)
 8002308:	4818      	ldr	r0, [pc, #96]	; (800236c <FminusClicked+0x128>)
 800230a:	f000 fea9 	bl	8003060 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 800230e:	490a      	ldr	r1, [pc, #40]	; (8002338 <FminusClicked+0xf4>)
 8002310:	4811      	ldr	r0, [pc, #68]	; (8002358 <FminusClicked+0x114>)
}
 8002312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	strcpy(msg, psets[Idx].name);
 8002316:	f00f b995 	b.w	8011644 <strcpy>
		USBindex = (newbw == Narrow) ? 0 : 1;
 800231a:	1e11      	subs	r1, r2, #0
		AMindex = (newbw == Narrow) ? 0 : 1;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <FminusClicked+0x100>)
		USBindex = 0; // TODO toglimi
 800231e:	4814      	ldr	r0, [pc, #80]	; (8002370 <FminusClicked+0x12c>)
		USBindex = (newbw == Narrow) ? 0 : 1;
 8002320:	bf18      	it	ne
 8002322:	2101      	movne	r1, #1
		bw[USB] = newbw;
 8002324:	70a2      	strb	r2, [r4, #2]
 8002326:	e7c6      	b.n	80022b6 <FminusClicked+0x72>
 8002328:	24005240 	.word	0x24005240
 800232c:	24006258 	.word	0x24006258
 8002330:	24001018 	.word	0x24001018
 8002334:	45fa0000 	.word	0x45fa0000
 8002338:	2400a848 	.word	0x2400a848
 800233c:	24001017 	.word	0x24001017
 8002340:	24007c30 	.word	0x24007c30
 8002344:	240007e0 	.word	0x240007e0
 8002348:	2400625c 	.word	0x2400625c
 800234c:	20006800 	.word	0x20006800
 8002350:	0801ba00 	.word	0x0801ba00
 8002354:	0801ca00 	.word	0x0801ca00
 8002358:	2400a820 	.word	0x2400a820
 800235c:	24001014 	.word	0x24001014
 8002360:	08019a00 	.word	0x08019a00
 8002364:	0801aa00 	.word	0x0801aa00
 8002368:	08017a00 	.word	0x08017a00
 800236c:	08018a00 	.word	0x08018a00
 8002370:	240062f4 	.word	0x240062f4

08002374 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop

08002378 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8002378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 800237c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002380:	498b      	ldr	r1, [pc, #556]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x238>)
 8002382:	488c      	ldr	r0, [pc, #560]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x23c>)
	 */

	// TODO: check why with the original code above LSB and USB are swapped

	//if USB, copy the USB in the lower half (LSB)
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8002384:	4c8c      	ldr	r4, [pc, #560]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x240>)
{
 8002386:	ed2d 8b08 	vpush	{d8-d11}
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 800238a:	f000 ff7d 	bl	8003288 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 800238e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002392:	498a      	ldr	r1, [pc, #552]	; (80025bc <HAL_GPIO_EXTI_Callback+0x244>)
 8002394:	488a      	ldr	r0, [pc, #552]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x248>)
 8002396:	f000 ff77 	bl	8003288 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 800239a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800239e:	4a89      	ldr	r2, [pc, #548]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80023a0:	4984      	ldr	r1, [pc, #528]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x23c>)
 80023a2:	4889      	ldr	r0, [pc, #548]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x250>)
 80023a4:	f7ff f83e 	bl	8001424 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 80023a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ac:	4a87      	ldr	r2, [pc, #540]	; (80025cc <HAL_GPIO_EXTI_Callback+0x254>)
 80023ae:	4984      	ldr	r1, [pc, #528]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x248>)
 80023b0:	4887      	ldr	r0, [pc, #540]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x258>)
 80023b2:	f7ff f837 	bl	8001424 <arm_fir_decimate_f32>
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 80023b6:	4987      	ldr	r1, [pc, #540]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x25c>)
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 80023c0:	f000 ff62 	bl	8003288 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 80023c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c8:	4a82      	ldr	r2, [pc, #520]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x25c>)
 80023ca:	4980      	ldr	r1, [pc, #512]	; (80025cc <HAL_GPIO_EXTI_Callback+0x254>)
 80023cc:	487d      	ldr	r0, [pc, #500]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80023ce:	f000 fe47 	bl	8003060 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 80023d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d6:	4980      	ldr	r1, [pc, #512]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x260>)
 80023d8:	4880      	ldr	r0, [pc, #512]	; (80025dc <HAL_GPIO_EXTI_Callback+0x264>)
 80023da:	f000 ff55 	bl	8003288 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 80023de:	2301      	movs	r3, #1
 80023e0:	2200      	movs	r2, #0
 80023e2:	497e      	ldr	r1, [pc, #504]	; (80025dc <HAL_GPIO_EXTI_Callback+0x264>)
 80023e4:	487e      	ldr	r0, [pc, #504]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x268>)
 80023e6:	f7fe fccd 	bl	8000d84 <arm_cfft_f32>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 80023ea:	7823      	ldrb	r3, [r4, #0]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	f000 80c9 	beq.w	8002584 <HAL_GPIO_EXTI_Callback+0x20c>

#endif
	 */

	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 80023f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f6:	4a7b      	ldr	r2, [pc, #492]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 80023f8:	497b      	ldr	r1, [pc, #492]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x270>)
 80023fa:	4878      	ldr	r0, [pc, #480]	; (80025dc <HAL_GPIO_EXTI_Callback+0x264>)
 80023fc:	f7fe fff2 	bl	80013e4 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8002400:	2301      	movs	r3, #1
 8002402:	4978      	ldr	r1, [pc, #480]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002404:	461a      	mov	r2, r3
 8002406:	4876      	ldr	r0, [pc, #472]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x268>)
 8002408:	f7fe fcbc 	bl	8000d84 <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 800240c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002410:	4976      	ldr	r1, [pc, #472]	; (80025ec <HAL_GPIO_EXTI_Callback+0x274>)
 8002412:	4877      	ldr	r0, [pc, #476]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x278>)
 8002414:	f000 ff38 	bl	8003288 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8002418:	7823      	ldrb	r3, [r4, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d836      	bhi.n	800248c <HAL_GPIO_EXTI_Callback+0x114>
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 80ab 	bne.w	800257a <HAL_GPIO_EXTI_Callback+0x202>
	{	
	case AM :
#ifdef RECEIVE_AM
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 8002424:	4973      	ldr	r1, [pc, #460]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002426:	4872      	ldr	r0, [pc, #456]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x278>)
 8002428:	f001 f87e 	bl	8003528 <SDR_demodAM_AGC>
	}


#ifdef DCF77_DECODER

	if (WSPRBeaconMode == 1)
 800242c:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x280>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d045      	beq.n	80024c0 <HAL_GPIO_EXTI_Callback+0x148>
#endif

#ifdef CW_TX_SIDETONE
	// CW tone while keying
	//TODO: make it sine and with attack/decay
	if (TXCarrierEnabled)
 8002434:	4b71      	ldr	r3, [pc, #452]	; (80025fc <HAL_GPIO_EXTI_Callback+0x284>)
 8002436:	7819      	ldrb	r1, [r3, #0]
 8002438:	2900      	cmp	r1, #0
 800243a:	d037      	beq.n	80024ac <HAL_GPIO_EXTI_Callback+0x134>
		for (int i=0; i<BSIZE; i++)
		{
			if (i % 64 > 31)
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
			else
				fAudio[i] = -volume * SIDETONE_VOLUME;
 800243c:	4b70      	ldr	r3, [pc, #448]	; (8002600 <HAL_GPIO_EXTI_Callback+0x288>)
 800243e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002604 <HAL_GPIO_EXTI_Callback+0x28c>
 8002442:	edd3 7a00 	vldr	s15, [r3]
		for (int i=0; i<BSIZE; i++)
 8002446:	2300      	movs	r3, #0
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
 8002448:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002608 <HAL_GPIO_EXTI_Callback+0x290>
				fAudio[i] = -volume * SIDETONE_VOLUME;
 800244c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002450:	4a68      	ldr	r2, [pc, #416]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
				fAudio[i] = volume * SIDETONE_VOLUME; //Volume
 8002452:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (i % 64 > 31)
 8002456:	f013 0f20 	tst.w	r3, #32
		for (int i=0; i<BSIZE; i++)
 800245a:	f103 0301 	add.w	r3, r3, #1
			if (i % 64 > 31)
 800245e:	d10f      	bne.n	8002480 <HAL_GPIO_EXTI_Callback+0x108>
		for (int i=0; i<BSIZE; i++)
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	eca2 7a01 	vstmia	r2!, {s14}
 8002468:	d1f5      	bne.n	8002456 <HAL_GPIO_EXTI_Callback+0xde>
#endif

	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800246a:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_GPIO_EXTI_Callback+0x294>)
 800246c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002470:	4860      	ldr	r0, [pc, #384]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002472:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8002474:	ecbd 8b08 	vpop	{d8-d11}
 8002478:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 800247c:	f000 be8e 	b.w	800319c <SDR_float_to_DAC_audio>
		for (int i=0; i<BSIZE; i++)
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	ece2 7a01 	vstmia	r2!, {s15}
 8002488:	d1e5      	bne.n	8002456 <HAL_GPIO_EXTI_Callback+0xde>
 800248a:	e7ee      	b.n	800246a <HAL_GPIO_EXTI_Callback+0xf2>
	switch(CurrentMode)
 800248c:	2b03      	cmp	r3, #3
 800248e:	d1cd      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0xb4>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8002490:	4958      	ldr	r1, [pc, #352]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002492:	4857      	ldr	r0, [pc, #348]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x278>)
 8002494:	f001 f8d8 	bl	8003648 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8002498:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <HAL_GPIO_EXTI_Callback+0x298>)
 800249a:	78db      	ldrb	r3, [r3, #3]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1c5      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0xb4>
			SDR_CWPeak(fAudio, BSIZE);
 80024a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a4:	4853      	ldr	r0, [pc, #332]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80024a6:	f000 ffb5 	bl	8003414 <SDR_CWPeak>
 80024aa:	e7bf      	b.n	800242c <HAL_GPIO_EXTI_Callback+0xb4>
		if (TransmissionEnabled)
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_GPIO_EXTI_Callback+0x29c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0da      	beq.n	800246a <HAL_GPIO_EXTI_Callback+0xf2>
				fAudio[i] = 0.;
 80024b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b8:	484e      	ldr	r0, [pc, #312]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80024ba:	f00e fa93 	bl	80109e4 <memset>
 80024be:	e7d4      	b.n	800246a <HAL_GPIO_EXTI_Callback+0xf2>
		BaseNoiseLevel = 9999.f;
 80024c0:	4c4c      	ldr	r4, [pc, #304]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80024c2:	4b55      	ldr	r3, [pc, #340]	; (8002618 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80024c4:	4a55      	ldr	r2, [pc, #340]	; (800261c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80024c6:	f504 6a00 	add.w	sl, r4, #2048	; 0x800
 80024ca:	f8df b168 	ldr.w	fp, [pc, #360]	; 8002634 <HAL_GPIO_EXTI_Callback+0x2bc>
 80024ce:	4f54      	ldr	r7, [pc, #336]	; (8002620 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80024d0:	4e54      	ldr	r6, [pc, #336]	; (8002624 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80024d2:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8002638 <HAL_GPIO_EXTI_Callback+0x2c0>
 80024d6:	4d54      	ldr	r5, [pc, #336]	; (8002628 <HAL_GPIO_EXTI_Callback+0x2b0>)
				LED_RED_ON;
 80024d8:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800263c <HAL_GPIO_EXTI_Callback+0x2c4>
		BaseNoiseLevel = 9999.f;
 80024dc:	601a      	str	r2, [r3, #0]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 80024de:	ed9f bb2c 	vldr	d11, [pc, #176]	; 8002590 <HAL_GPIO_EXTI_Callback+0x218>
 80024e2:	ed9f ab2d 	vldr	d10, [pc, #180]	; 8002598 <HAL_GPIO_EXTI_Callback+0x220>
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 80024e6:	ed9f 9b2e 	vldr	d9, [pc, #184]	; 80025a0 <HAL_GPIO_EXTI_Callback+0x228>
 80024ea:	ed9f 8b2f 	vldr	d8, [pc, #188]	; 80025a8 <HAL_GPIO_EXTI_Callback+0x230>
 80024ee:	e008      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x18a>
				DCF77In = 0;
 80024f0:	f8a5 c000 	strh.w	ip, [r5]
				LED_RED_ON;
 80024f4:	f007 fc34 	bl	8009d60 <HAL_GPIO_WritePin>
			DoDCF77(DCF77In);
 80024f8:	8828      	ldrh	r0, [r5, #0]
 80024fa:	f7ff fb4f 	bl	8001b9c <DoDCF77>
		for (int i = 0; i < BSIZE; i++)
 80024fe:	4554      	cmp	r4, sl
 8002500:	d098      	beq.n	8002434 <HAL_GPIO_EXTI_Callback+0xbc>
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002502:	ed97 6a00 	vldr	s12, [r7]
				DCF77In = 0;
 8002506:	f04f 0c00 	mov.w	ip, #0
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800250a:	ed96 7a00 	vldr	s14, [r6]
				LED_RED_OFF;
 800250e:	4640      	mov	r0, r8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002510:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
			CWLevel = fabs(fAudio[i]);
 8002514:	ecf4 5a01 	vldmia	r4!, {s11}
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002518:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800251c:	ed99 5a00 	vldr	s10, [r9]
			CWLevel = fabs(fAudio[i]);
 8002520:	eef0 5ae5 	vabs.f32	s11, s11
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002524:	4b41      	ldr	r3, [pc, #260]	; (800262c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8002526:	ee26 6b0b 	vmul.f64	d6, d6, d11
				LED_RED_OFF;
 800252a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800252e:	4662      	mov	r2, ip
			CWLevel = fabs(fAudio[i]);
 8002530:	edcb 5a00 	vstr	s11, [fp]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002534:	ee27 7b09 	vmul.f64	d7, d7, d9
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002538:	eeb7 4ae5 	vcvt.f64.f32	d4, s11
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 800253c:	eea4 7b08 	vfma.f64	d7, d4, d8
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002540:	eea4 6b0a 	vfma.f64	d6, d4, d10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002544:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			OldMediumLevelAverage = MediumLevelFiltered;
 8002548:	ed86 7a00 	vstr	s14, [r6]
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 800254c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8002550:	ee77 7a46 	vsub.f32	s15, s14, s12
			CWLevelFiltered = CW_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - CW_LEVEL_AVERAGE_T_CONST) * OldCWLevelAverage;
 8002554:	ed83 6a00 	vstr	s12, [r3]
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_GPIO_EXTI_Callback+0x2b8>)
			OldCWLevelAverage = CWLevelFiltered;
 800255a:	ed87 6a00 	vstr	s12, [r7]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 800255e:	eef4 7ac5 	vcmpe.f32	s15, s10
			MediumLevelFiltered = MEDIUM_LEVEL_AVERAGE_T_CONST * CWLevel + (1 - MEDIUM_LEVEL_AVERAGE_T_CONST) * OldMediumLevelAverage;
 8002562:	ed83 7a00 	vstr	s14, [r3]
			if ( MediumLevelFiltered - CWLevelFiltered  > CWThreshold)
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dcc1      	bgt.n	80024f0 <HAL_GPIO_EXTI_Callback+0x178>
				DCF77In += 1; //TODO limit CW increase
 800256c:	882b      	ldrh	r3, [r5, #0]
				LED_RED_ON;
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
				DCF77In += 1; //TODO limit CW increase
 8002574:	4413      	add	r3, r2
 8002576:	802b      	strh	r3, [r5, #0]
 8002578:	e7bc      	b.n	80024f4 <HAL_GPIO_EXTI_Callback+0x17c>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 800257a:	491e      	ldr	r1, [pc, #120]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x27c>)
 800257c:	481c      	ldr	r0, [pc, #112]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x278>)
 800257e:	f001 f863 	bl	8003648 <SDR_demodSSB_CW_AGC>
 8002582:	e753      	b.n	800242c <HAL_GPIO_EXTI_Callback+0xb4>
	if(CurrentMode == USB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8002584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002588:	4814      	ldr	r0, [pc, #80]	; (80025dc <HAL_GPIO_EXTI_Callback+0x264>)
 800258a:	f000 fe97 	bl	80032bc <SDR_mirror_LSB>
 800258e:	e730      	b.n	80023f2 <HAL_GPIO_EXTI_Callback+0x7a>
 8002590:	d916872b 	.word	0xd916872b
 8002594:	3feff7ce 	.word	0x3feff7ce
 8002598:	d2f1a9fc 	.word	0xd2f1a9fc
 800259c:	3f50624d 	.word	0x3f50624d
 80025a0:	074a771d 	.word	0x074a771d
 80025a4:	3fefffeb 	.word	0x3fefffeb
 80025a8:	88e368f1 	.word	0x88e368f1
 80025ac:	3ee4f8b5 	.word	0x3ee4f8b5
 80025b0:	2000f800 	.word	0x2000f800
 80025b4:	2000b800 	.word	0x2000b800
 80025b8:	24001018 	.word	0x24001018
 80025bc:	2000d800 	.word	0x2000d800
 80025c0:	20009800 	.word	0x20009800
 80025c4:	20009000 	.word	0x20009000
 80025c8:	2400629c 	.word	0x2400629c
 80025cc:	20008800 	.word	0x20008800
 80025d0:	24006290 	.word	0x24006290
 80025d4:	2400943c 	.word	0x2400943c
 80025d8:	2400843c 	.word	0x2400843c
 80025dc:	20004800 	.word	0x20004800
 80025e0:	08017970 	.word	0x08017970
 80025e4:	20002800 	.word	0x20002800
 80025e8:	20006800 	.word	0x20006800
 80025ec:	20003800 	.word	0x20003800
 80025f0:	2400a99c 	.word	0x2400a99c
 80025f4:	24007c3c 	.word	0x24007c3c
 80025f8:	240073fc 	.word	0x240073fc
 80025fc:	240062dc 	.word	0x240062dc
 8002600:	2400b9d0 	.word	0x2400b9d0
 8002604:	be4ccccd 	.word	0xbe4ccccd
 8002608:	3e4ccccd 	.word	0x3e4ccccd
 800260c:	240073f8 	.word	0x240073f8
 8002610:	24007c30 	.word	0x24007c30
 8002614:	240062e8 	.word	0x240062e8
 8002618:	24001004 	.word	0x24001004
 800261c:	461c3c00 	.word	0x461c3c00
 8002620:	24006274 	.word	0x24006274
 8002624:	24006278 	.word	0x24006278
 8002628:	2400101a 	.word	0x2400101a
 800262c:	2400100c 	.word	0x2400100c
 8002630:	2400626c 	.word	0x2400626c
 8002634:	24001008 	.word	0x24001008
 8002638:	24001010 	.word	0x24001010
 800263c:	58020400 	.word	0x58020400

08002640 <ADC_Stream0_Handler>:

//#pragma GCC push_options
//#pragma GCC optimize ("O0")

void ADC_Stream0_Handler(uint8_t FullConversion)
{
 8002640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* It needs a delay between fract div disable and parameter setting.
	 * Reference manual says otherwise.
	 * So we disable at the top of the ISR and set the parameter near the bottom.
	 */
	if (TransmittingWSPR)
 8002644:	4d8e      	ldr	r5, [pc, #568]	; (8002880 <ADC_Stream0_Handler+0x240>)
{
 8002646:	ed2d 8b10 	vpush	{d8-d15}
	if (TransmittingWSPR)
 800264a:	782b      	ldrb	r3, [r5, #0]
{
 800264c:	b095      	sub	sp, #84	; 0x54
	if (TransmittingWSPR)
 800264e:	b123      	cbz	r3, 800265a <ADC_Stream0_Handler+0x1a>
	{
		__HAL_RCC_PLL2FRACN_DISABLE();
 8002650:	4a8c      	ldr	r2, [pc, #560]	; (8002884 <ADC_Stream0_Handler+0x244>)
 8002652:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002654:	f023 0310 	bic.w	r3, r3, #16
 8002658:	62d3      	str	r3, [r2, #44]	; 0x2c

	// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
	else
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800265a:	4f8b      	ldr	r7, [pc, #556]	; (8002888 <ADC_Stream0_Handler+0x248>)
	pR=TestSignalData;
#endif


	// compute the new NCO buffer, with the CWpitch offset if receiving CW
	if(CurrentMode == CW)
 800265c:	4b8b      	ldr	r3, [pc, #556]	; (800288c <ADC_Stream0_Handler+0x24c>)
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 800265e:	f5a7 6280 	sub.w	r2, r7, #1024	; 0x400
	if(CurrentMode == CW)
 8002662:	781b      	ldrb	r3, [r3, #0]
		pR = (uint16_t *) &aADCDualConvertedValues[0];
 8002664:	2800      	cmp	r0, #0
 8002666:	bf08      	it	eq
 8002668:	4617      	moveq	r7, r2
	if(CurrentMode == CW)
 800266a:	2b03      	cmp	r3, #3
 800266c:	f000 8429 	beq.w	8002ec2 <ADC_Stream0_Handler+0x882>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
	else
		SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 8002670:	4b87      	ldr	r3, [pc, #540]	; (8002890 <ADC_Stream0_Handler+0x250>)
 8002672:	ed93 0a00 	vldr	s0, [r3]
 8002676:	f000 fc35 	bl	8002ee4 <SDR_ComputeLO>
	// in the short words to floating point conversion routine

	//TODO Check if it should be BSIZE/2

	sum = 0; k = BSIZE;
	while(k)
 800267a:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 800267e:	1eb8      	subs	r0, r7, #2
	sum = 0; k = BSIZE;
 8002680:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002894 <ADC_Stream0_Handler+0x254>
	{
		sum += pR[k-1];
 8002684:	8814      	ldrh	r4, [r2, #0]
	while(k)
 8002686:	3a08      	subs	r2, #8
		sum += pR[k-2];
 8002688:	88d3      	ldrh	r3, [r2, #6]
		sum += pR[k-1];
 800268a:	b2a4      	uxth	r4, r4
		sum += pR[k-3];
 800268c:	8896      	ldrh	r6, [r2, #4]
		sum += pR[k-2];
 800268e:	b29b      	uxth	r3, r3
		sum += pR[k-4];
 8002690:	8851      	ldrh	r1, [r2, #2]
		sum += pR[k-1];
 8002692:	ee07 4a90 	vmov	s15, r4
		sum += pR[k-3];
 8002696:	b2b6      	uxth	r6, r6
		sum += pR[k-2];
 8002698:	ee07 3a10 	vmov	s14, r3
		sum += pR[k-4];
 800269c:	b289      	uxth	r1, r1
		sum += pR[k-1];
 800269e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-3];
 80026a2:	ee07 6a90 	vmov	s15, r6
		sum += pR[k-2];
 80026a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 80026aa:	ee06 1a90 	vmov	s13, r1
		sum += pR[k-3];
 80026ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	while(k)
 80026b2:	4290      	cmp	r0, r2
		sum += pR[k-4];
 80026b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80026c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c4:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(k)
 80026c8:	d1dc      	bne.n	8002684 <ADC_Stream0_Handler+0x44>
		k-=4;
	}

	TestSampledValue=pR[BSIZE/2];
 80026ca:	f8b7 3200 	ldrh.w	r3, [r7, #512]	; 0x200
 80026ce:	2200      	movs	r2, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80026d0:	eddf 7a71 	vldr	s15, [pc, #452]	; 8002898 <ADC_Stream0_Handler+0x258>

	// downconvert to zero IF, by multiplication by the exp(-jwt) signal
	// generated by the NCO, and at the same time convert to floating point
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80026d4:	4638      	mov	r0, r7
	TestSampledValue=pR[BSIZE/2];
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4c70      	ldr	r4, [pc, #448]	; (800289c <ADC_Stream0_Handler+0x25c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80026da:	ee20 0a27 	vmul.f32	s0, s0, s15
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80026de:	4970      	ldr	r1, [pc, #448]	; (80028a0 <ADC_Stream0_Handler+0x260>)
	TestSampledValue=pR[BSIZE/2];
 80026e0:	ee07 3a90 	vmov	s15, r3
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80026e4:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <ADC_Stream0_Handler+0x264>)
 80026e6:	8022      	strh	r2, [r4, #0]
	TestSampledValue=pR[BSIZE/2];
 80026e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80026ec:	ed83 0a00 	vstr	s0, [r3]
	TestSampledValue=pR[BSIZE/2];
 80026f0:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <ADC_Stream0_Handler+0x268>)
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80026f2:	4a6e      	ldr	r2, [pc, #440]	; (80028ac <ADC_Stream0_Handler+0x26c>)
	TestSampledValue=pR[BSIZE/2];
 80026f4:	edc3 7a00 	vstr	s15, [r3]
	SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80026f8:	f000 fcde 	bl	80030b8 <SDR_downconvert_f32>


	ptDataR = ADC_Rdata;  ptDataI = ADC_Idata;


	if (TransmittingWSPR)
 80026fc:	782b      	ldrb	r3, [r5, #0]
 80026fe:	b30b      	cbz	r3, 8002744 <ADC_Stream0_Handler+0x104>
	{
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 8002700:	4d6b      	ldr	r5, [pc, #428]	; (80028b0 <ADC_Stream0_Handler+0x270>)
 8002702:	496c      	ldr	r1, [pc, #432]	; (80028b4 <ADC_Stream0_Handler+0x274>)
 8002704:	f9b5 2000 	ldrsh.w	r2, [r5]
 8002708:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <ADC_Stream0_Handler+0x278>)
 800270a:	7809      	ldrb	r1, [r1, #0]
 800270c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002710:	1c53      	adds	r3, r2, #1
 8002712:	4282      	cmp	r2, r0
 8002714:	b21b      	sxth	r3, r3
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8002716:	485b      	ldr	r0, [pc, #364]	; (8002884 <ADC_Stream0_Handler+0x244>)
 8002718:	4a68      	ldr	r2, [pc, #416]	; (80028bc <ADC_Stream0_Handler+0x27c>)
		if (IntCounter++ < FracPWMCoeff[WSPRTone])
 800271a:	802b      	strh	r3, [r5, #0]
 800271c:	f2c0 8352 	blt.w	8002dc4 <ADC_Stream0_Handler+0x784>
		}
		else
		{
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002720:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002724:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
		}
		if (IntCounter == 8)
 8002726:	2b08      	cmp	r3, #8
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] );
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <ADC_Stream0_Handler+0x280>)
 800272a:	ea02 0206 	and.w	r2, r2, r6
 800272e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002732:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (IntCounter == 8)
 8002734:	d101      	bne.n	800273a <ADC_Stream0_Handler+0xfa>
		{
			IntCounter = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	802b      	strh	r3, [r5, #0]
		}
		__HAL_RCC_PLL2FRACN_ENABLE();
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <ADC_Stream0_Handler+0x244>)
 800273c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	62d3      	str	r3, [r2, #44]	; 0x2c
	// passed to the baseband interrupt routine, where it is additionally filtered with a
	// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
	//-------------------------------------------------------------------------

	k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
	while(k--)
 8002744:	4a5f      	ldr	r2, [pc, #380]	; (80028c4 <ADC_Stream0_Handler+0x284>)
 8002746:	23ff      	movs	r3, #255	; 0xff
 8002748:	495f      	ldr	r1, [pc, #380]	; (80028c8 <ADC_Stream0_Handler+0x288>)
 800274a:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800274e:	ed92 2a00 	vldr	s4, [r2]
 8002752:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8002756:	4a5d      	ldr	r2, [pc, #372]	; (80028cc <ADC_Stream0_Handler+0x28c>)
 8002758:	edd1 3a00 	vldr	s7, [r1]
 800275c:	edd2 1a00 	vldr	s3, [r2]
 8002760:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <ADC_Stream0_Handler+0x290>)
 8002762:	495c      	ldr	r1, [pc, #368]	; (80028d4 <ADC_Stream0_Handler+0x294>)
 8002764:	ed92 7a00 	vldr	s14, [r2]
 8002768:	4a5b      	ldr	r2, [pc, #364]	; (80028d8 <ADC_Stream0_Handler+0x298>)
 800276a:	ed91 9a00 	vldr	s18, [r1]
 800276e:	eeb0 6a47 	vmov.f32	s12, s14
 8002772:	edd2 2a00 	vldr	s5, [r2]
 8002776:	4959      	ldr	r1, [pc, #356]	; (80028dc <ADC_Stream0_Handler+0x29c>)
 8002778:	4a59      	ldr	r2, [pc, #356]	; (80028e0 <ADC_Stream0_Handler+0x2a0>)
 800277a:	edd1 ea00 	vldr	s29, [r1]
 800277e:	edd2 8a00 	vldr	s17, [r2]
 8002782:	4958      	ldr	r1, [pc, #352]	; (80028e4 <ADC_Stream0_Handler+0x2a4>)
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <ADC_Stream0_Handler+0x2a8>)
 8002786:	edd1 6a00 	vldr	s13, [r1]
 800278a:	ed92 5a00 	vldr	s10, [r2]
 800278e:	4957      	ldr	r1, [pc, #348]	; (80028ec <ADC_Stream0_Handler+0x2ac>)
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <ADC_Stream0_Handler+0x2b0>)
 8002792:	edd1 ca00 	vldr	s25, [r1]
 8002796:	edd2 fa00 	vldr	s31, [r2]
 800279a:	4956      	ldr	r1, [pc, #344]	; (80028f4 <ADC_Stream0_Handler+0x2b4>)
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <ADC_Stream0_Handler+0x2b8>)
 800279e:	ed91 da00 	vldr	s26, [r1]
 80027a2:	ed92 8a00 	vldr	s16, [r2]
 80027a6:	4955      	ldr	r1, [pc, #340]	; (80028fc <ADC_Stream0_Handler+0x2bc>)
 80027a8:	4a55      	ldr	r2, [pc, #340]	; (8002900 <ADC_Stream0_Handler+0x2c0>)
 80027aa:	edcd 6a02 	vstr	s13, [sp, #8]
 80027ae:	edd2 5a00 	vldr	s11, [r2]
 80027b2:	edd1 6a00 	vldr	s13, [r1]
 80027b6:	4a53      	ldr	r2, [pc, #332]	; (8002904 <ADC_Stream0_Handler+0x2c4>)
 80027b8:	4953      	ldr	r1, [pc, #332]	; (8002908 <ADC_Stream0_Handler+0x2c8>)
 80027ba:	ed92 fa00 	vldr	s30, [r2]
 80027be:	ed91 ca00 	vldr	s24, [r1]
 80027c2:	4a52      	ldr	r2, [pc, #328]	; (800290c <ADC_Stream0_Handler+0x2cc>)
 80027c4:	4952      	ldr	r1, [pc, #328]	; (8002910 <ADC_Stream0_Handler+0x2d0>)
 80027c6:	edd2 ba00 	vldr	s23, [r2]
 80027ca:	edcd 6a01 	vstr	s13, [sp, #4]
 80027ce:	4a51      	ldr	r2, [pc, #324]	; (8002914 <ADC_Stream0_Handler+0x2d4>)
 80027d0:	edd1 6a00 	vldr	s13, [r1]
 80027d4:	4950      	ldr	r1, [pc, #320]	; (8002918 <ADC_Stream0_Handler+0x2d8>)
 80027d6:	ed92 3a00 	vldr	s6, [r2]
 80027da:	edcd 6a03 	vstr	s13, [sp, #12]
 80027de:	4a4f      	ldr	r2, [pc, #316]	; (800291c <ADC_Stream0_Handler+0x2dc>)
 80027e0:	edd1 6a00 	vldr	s13, [r1]
 80027e4:	494e      	ldr	r1, [pc, #312]	; (8002920 <ADC_Stream0_Handler+0x2e0>)
 80027e6:	edd2 9a00 	vldr	s19, [r2]
 80027ea:	edcd 6a08 	vstr	s13, [sp, #32]
 80027ee:	4a4d      	ldr	r2, [pc, #308]	; (8002924 <ADC_Stream0_Handler+0x2e4>)
 80027f0:	edd1 6a00 	vldr	s13, [r1]
 80027f4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8002950 <ADC_Stream0_Handler+0x310>
 80027f8:	494b      	ldr	r1, [pc, #300]	; (8002928 <ADC_Stream0_Handler+0x2e8>)
 80027fa:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8002954 <ADC_Stream0_Handler+0x314>
 80027fe:	ed92 ba00 	vldr	s22, [r2]
 8002802:	ed9a 1a00 	vldr	s2, [sl]
 8002806:	edd9 7a00 	vldr	s15, [r9]
 800280a:	8023      	strh	r3, [r4, #0]
 800280c:	edcd 6a09 	vstr	s13, [sp, #36]	; 0x24
 8002810:	edd1 6a00 	vldr	s13, [r1]
 8002814:	4945      	ldr	r1, [pc, #276]	; (800292c <ADC_Stream0_Handler+0x2ec>)
 8002816:	edcd 6a00 	vstr	s13, [sp]
 800281a:	edd1 6a00 	vldr	s13, [r1]
 800281e:	4944      	ldr	r1, [pc, #272]	; (8002930 <ADC_Stream0_Handler+0x2f0>)
 8002820:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
 8002824:	edd1 6a00 	vldr	s13, [r1]
 8002828:	4942      	ldr	r1, [pc, #264]	; (8002934 <ADC_Stream0_Handler+0x2f4>)
 800282a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002958 <ADC_Stream0_Handler+0x318>
 800282e:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 8002832:	edd1 6a00 	vldr	s13, [r1]
 8002836:	4f40      	ldr	r7, [pc, #256]	; (8002938 <ADC_Stream0_Handler+0x2f8>)
 8002838:	edcd 6a06 	vstr	s13, [sp, #24]
 800283c:	edd8 6a00 	vldr	s13, [r8]
 8002840:	4e3e      	ldr	r6, [pc, #248]	; (800293c <ADC_Stream0_Handler+0x2fc>)
 8002842:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8002846:	edd7 6a00 	vldr	s13, [r7]
 800284a:	493d      	ldr	r1, [pc, #244]	; (8002940 <ADC_Stream0_Handler+0x300>)
 800284c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8002850:	edd6 6a00 	vldr	s13, [r6]
 8002854:	f8df b104 	ldr.w	fp, [pc, #260]	; 800295c <ADC_Stream0_Handler+0x31c>
 8002858:	edcd 6a07 	vstr	s13, [sp, #28]
 800285c:	edd1 6a00 	vldr	s13, [r1]
 8002860:	4938      	ldr	r1, [pc, #224]	; (8002944 <ADC_Stream0_Handler+0x304>)
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <ADC_Stream0_Handler+0x308>)
 8002864:	f9bb 0000 	ldrsh.w	r0, [fp]
 8002868:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800286c:	f502 6c00 	add.w	ip, r2, #2048	; 0x800
 8002870:	edd1 6a00 	vldr	s13, [r1]
 8002874:	4686      	mov	lr, r0
 8002876:	4935      	ldr	r1, [pc, #212]	; (800294c <ADC_Stream0_Handler+0x30c>)
 8002878:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 800287c:	e173      	b.n	8002b66 <ADC_Stream0_Handler+0x526>
 800287e:	bf00      	nop
 8002880:	240062e9 	.word	0x240062e9
 8002884:	58024400 	.word	0x58024400
 8002888:	24007820 	.word	0x24007820
 800288c:	24001018 	.word	0x24001018
 8002890:	24006258 	.word	0x24006258
 8002894:	00000000 	.word	0x00000000
 8002898:	3b000000 	.word	0x3b000000
 800289c:	24000700 	.word	0x24000700
 80028a0:	20001800 	.word	0x20001800
 80028a4:	2400a81c 	.word	0x2400a81c
 80028a8:	240062e4 	.word	0x240062e4
 80028ac:	20001000 	.word	0x20001000
 80028b0:	2400066c 	.word	0x2400066c
 80028b4:	240073ff 	.word	0x240073ff
 80028b8:	24005238 	.word	0x24005238
 80028bc:	2400522c 	.word	0x2400522c
 80028c0:	ffff0007 	.word	0xffff0007
 80028c4:	24000674 	.word	0x24000674
 80028c8:	240006c4 	.word	0x240006c4
 80028cc:	240006a0 	.word	0x240006a0
 80028d0:	240006a4 	.word	0x240006a4
 80028d4:	24000680 	.word	0x24000680
 80028d8:	24000670 	.word	0x24000670
 80028dc:	240006d8 	.word	0x240006d8
 80028e0:	240006b8 	.word	0x240006b8
 80028e4:	240006dc 	.word	0x240006dc
 80028e8:	240006bc 	.word	0x240006bc
 80028ec:	2400068c 	.word	0x2400068c
 80028f0:	2400067c 	.word	0x2400067c
 80028f4:	240006d0 	.word	0x240006d0
 80028f8:	240006b0 	.word	0x240006b0
 80028fc:	240006d4 	.word	0x240006d4
 8002900:	240006b4 	.word	0x240006b4
 8002904:	24000678 	.word	0x24000678
 8002908:	24000688 	.word	0x24000688
 800290c:	240006c8 	.word	0x240006c8
 8002910:	240006e8 	.word	0x240006e8
 8002914:	240006cc 	.word	0x240006cc
 8002918:	240006ec 	.word	0x240006ec
 800291c:	24000684 	.word	0x24000684
 8002920:	24000694 	.word	0x24000694
 8002924:	240006c0 	.word	0x240006c0
 8002928:	240006e0 	.word	0x240006e0
 800292c:	240006e4 	.word	0x240006e4
 8002930:	24000690 	.word	0x24000690
 8002934:	240006f8 	.word	0x240006f8
 8002938:	2400069c 	.word	0x2400069c
 800293c:	240006f0 	.word	0x240006f0
 8002940:	240006f4 	.word	0x240006f4
 8002944:	24000698 	.word	0x24000698
 8002948:	20001808 	.word	0x20001808
 800294c:	20001008 	.word	0x20001008
 8002950:	240006a8 	.word	0x240006a8
 8002954:	240006ac 	.word	0x240006ac
 8002958:	240006fc 	.word	0x240006fc
 800295c:	2400066e 	.word	0x2400066e
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 2
		// now compute the couple of elements for the next step

		inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8002960:	eea8 5a84 	vfma.f32	s10, s17, s8

		inE2Rold = inER;                           inE2Iold = inEI;
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002964:	0798      	lsls	r0, r3, #30
 8002966:	eee8 5a04 	vfma.f32	s11, s16, s8
		outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800296a:	ee7f faaa 	vadd.f32	s31, s31, s21
 800296e:	ee3f fa0a 	vadd.f32	s30, s30, s20
 8002972:	eeaf 5aa4 	vfma.f32	s10, s31, s9
 8002976:	eeef 5a24 	vfma.f32	s11, s30, s9
 800297a:	ee75 6a27 	vadd.f32	s13, s10, s15
 800297e:	ee35 6a87 	vadd.f32	s12, s11, s14
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 8002982:	f100 8118 	bmi.w	8002bb6 <ADC_Stream0_Handler+0x576>
		// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8002986:	eeab 3a84 	vfma.f32	s6, s23, s8

		inE3Rold  = inER;                          inE3Iold  = inEI;
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 800298a:	075d      	lsls	r5, r3, #29
 800298c:	eeeb 3a04 	vfma.f32	s7, s22, s8
		outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8002990:	ee79 9a8e 	vadd.f32	s19, s19, s28
 8002994:	ee39 9a2d 	vadd.f32	s18, s18, s27
 8002998:	eea9 3aa4 	vfma.f32	s6, s19, s9
 800299c:	eee9 3a24 	vfma.f32	s7, s18, s9
 80029a0:	ee33 9a26 	vadd.f32	s18, s6, s13
 80029a4:	ee73 9a86 	vadd.f32	s19, s7, s12
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80029a8:	f100 8116 	bmi.w	8002bd8 <ADC_Stream0_Handler+0x598>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80029ac:	eddd 5a02 	vldr	s11, [sp, #8]

		inE4Rold = inER;                           inE4Iold = inEI;
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80029b0:	0718      	lsls	r0, r3, #28
 80029b2:	ed9d 5a01 	vldr	s10, [sp, #4]
 80029b6:	eeee 5a84 	vfma.f32	s11, s29, s8
		outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80029ba:	eddd 3a05 	vldr	s7, [sp, #20]
 80029be:	eead 5a04 	vfma.f32	s10, s26, s8
 80029c2:	ed9d 3a04 	vldr	s6, [sp, #16]
 80029c6:	ee7c caa3 	vadd.f32	s25, s25, s7
 80029ca:	ee3c ca03 	vadd.f32	s24, s24, s6
 80029ce:	eeec 5aa4 	vfma.f32	s11, s25, s9
 80029d2:	eeac 5a24 	vfma.f32	s10, s24, s9
 80029d6:	ee39 ca25 	vadd.f32	s24, s18, s11
 80029da:	ee75 ca29 	vadd.f32	s25, s10, s19
		if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80029de:	f100 81a5 	bmi.w	8002d2c <ADC_Stream0_Handler+0x6ec>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80029e2:	ed9d fa08 	vldr	s30, [sp, #32]
		inE5Rold  = inER;                          inE5Iold  = inEI;
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;



		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80029e6:	f013 0010 	ands.w	r0, r3, #16
 80029ea:	ed9d 3a03 	vldr	s6, [sp, #12]
 80029ee:	eddd 5a00 	vldr	s11, [sp]
 80029f2:	eddd fa0a 	vldr	s31, [sp, #40]	; 0x28
 80029f6:	eea3 fa04 	vfma.f32	s30, s6, s8
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80029fa:	ed9d 5a11 	vldr	s10, [sp, #68]	; 0x44
 80029fe:	eee5 fa84 	vfma.f32	s31, s11, s8
 8002a02:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8002a06:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002a0a:	ed9d 5a10 	vldr	s10, [sp, #64]	; 0x40
 8002a0e:	eea5 faa4 	vfma.f32	s30, s11, s9
 8002a12:	eddd 5a0b 	vldr	s11, [sp, #44]	; 0x2c
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002a16:	900b      	str	r0, [sp, #44]	; 0x2c
		outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8002a18:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002a1c:	eee5 faa4 	vfma.f32	s31, s11, s9
 8002a20:	ee3c fa0f 	vadd.f32	s30, s24, s30
 8002a24:	ed8d fa09 	vstr	s30, [sp, #36]	; 0x24
 8002a28:	ee7c faaf 	vadd.f32	s31, s25, s31
		if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8002a2c:	f040 819b 	bne.w	8002d66 <ADC_Stream0_Handler+0x726>
		// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
		// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
		// a decimation by 16. Now compute the couple of elements for the next step

		inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002a30:	eddd 3a06 	vldr	s7, [sp, #24]
		// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
		// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

		// create a block of BSIZE*4 entries, which will be then decimated by 4

		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002a34:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8002a38:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 8002a3c:	ed9d 5a0e 	vldr	s10, [sp, #56]	; 0x38
 8002a40:	eee3 5a84 	vfma.f32	s11, s7, s8
 8002a44:	eddd 3a07 	vldr	s7, [sp, #28]
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002a48:	ed9d fa0d 	vldr	s30, [sp, #52]	; 0x34
 8002a4c:	eea3 5a84 	vfma.f32	s10, s7, s8
 8002a50:	eddd 3a12 	vldr	s7, [sp, #72]	; 0x48
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002a54:	4ddd      	ldr	r5, [pc, #884]	; (8002dcc <ADC_Stream0_Handler+0x78c>)
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002a56:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8002a5a:	ed9d fa0f 	vldr	s30, [sp, #60]	; 0x3c
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002a5e:	4428      	add	r0, r5
 8002a60:	4ddb      	ldr	r5, [pc, #876]	; (8002dd0 <ADC_Stream0_Handler+0x790>)
 8002a62:	eee3 5aa4 	vfma.f32	s11, s7, s9
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002a66:	eddd 3a13 	vldr	s7, [sp, #76]	; 0x4c
 8002a6a:	ee73 3a8f 	vadd.f32	s7, s7, s30
 8002a6e:	ed9d fa09 	vldr	s30, [sp, #36]	; 0x24
 8002a72:	eea3 5aa4 	vfma.f32	s10, s7, s9
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002a76:	eddf 3ad7 	vldr	s7, [pc, #860]	; 8002dd4 <ADC_Stream0_Handler+0x794>
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002a7a:	ee75 5a8f 	vadd.f32	s11, s11, s30
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002a7e:	ee65 5aa3 	vmul.f32	s11, s11, s7
		outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8002a82:	ee35 5a2f 	vadd.f32	s10, s10, s31
		Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8002a86:	ee25 5a23 	vmul.f32	s10, s10, s7
 8002a8a:	ed80 5a00 	vstr	s10, [r0]
 8002a8e:	f10e 0001 	add.w	r0, lr, #1
 8002a92:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
 8002a96:	edce 5a00 	vstr	s11, [lr]
 8002a9a:	fa0f fe80 	sxth.w	lr, r0
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002a9e:	eddd 5a07 	vldr	s11, [sp, #28]
		//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 8002aa2:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002aa6:	edcd 5a0e 	vstr	s11, [sp, #56]	; 0x38
		if(idx < BSIZE*4)
 8002aaa:	f2c0 81d3 	blt.w	8002e54 <ADC_Stream0_Handler+0x814>
#endif


			// generate now an interrupt to signal the base band processing routine that it has a new buffer

			EXTI->SWIER1 |= GPIO_PIN_14;
 8002aae:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ab2:	eddd 3a06 	vldr	s7, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ab6:	eddd 5a00 	vldr	s11, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002aba:	eeb0 5a68 	vmov.f32	s10, s17
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002abe:	68a8      	ldr	r0, [r5, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002ac0:	eef0 8a67 	vmov.f32	s17, s15
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002ac4:	ed8d da01 	vstr	s26, [sp, #4]
 8002ac8:	eeb0 da69 	vmov.f32	s26, s19
 8002acc:	edcd ea02 	vstr	s29, [sp, #8]
 8002ad0:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ad4:	edcd 3a0c 	vstr	s7, [sp, #48]	; 0x30
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002ad8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002adc:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002ae0:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002ae4:	ed8d 3a08 	vstr	s6, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002ae8:	eef0 5a48 	vmov.f32	s11, s16
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002aec:	eeb0 3a6b 	vmov.f32	s6, s23
		idx = 0;
 8002af0:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002af4:	eeb0 ba46 	vmov.f32	s22, s12
		inE6Rold = inER;                           inE6Iold = inEI;
 8002af8:	ed9d 6a13 	vldr	s12, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002afc:	eef0 ba66 	vmov.f32	s23, s13
		inE6Rold = inER;                           inE6Iold = inEI;
 8002b00:	eddd 6a12 	vldr	s13, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002b04:	eeb0 8a47 	vmov.f32	s16, s14
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002b08:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002b0c:	edcd fa07 	vstr	s31, [sp, #28]
 8002b10:	ed8d fa06 	vstr	s30, [sp, #24]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002b14:	edcd ca00 	vstr	s25, [sp]
 8002b18:	ed8d ca03 	vstr	s24, [sp, #12]
			EXTI->SWIER1 |= GPIO_PIN_14;
 8002b1c:	60a8      	str	r0, [r5, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002b1e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8002b22:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002b26:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8002b2a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8002b2e:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002b32:	eeb0 9a6d 	vmov.f32	s18, s27
		inE4Rold = inER;                           inE4Iold = inEI;
 8002b36:	ed9d ca04 	vldr	s24, [sp, #16]
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002b3a:	eef0 9a4e 	vmov.f32	s19, s28
		inE4Rold = inER;                           inE4Iold = inEI;
 8002b3e:	eddd ca05 	vldr	s25, [sp, #20]
		inE2Rold = inER;                           inE2Iold = inEI;
 8002b42:	eeb0 fa4a 	vmov.f32	s30, s20
 8002b46:	eef0 fa6a 	vmov.f32	s31, s21
	while(k--)
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	eef0 7a41 	vmov.f32	s15, s2
 8002b52:	3108      	adds	r1, #8
 8002b54:	4594      	cmp	ip, r2
 8002b56:	eeb0 6a61 	vmov.f32	s12, s3
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	d059      	beq.n	8002c12 <ADC_Stream0_Handler+0x5d2>
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002b5e:	eef0 1a60 	vmov.f32	s3, s1
 8002b62:	eeb0 1a40 	vmov.f32	s2, s0
 8002b66:	eeb0 7a42 	vmov.f32	s14, s4
 8002b6a:	ed12 0a01 	vldr	s0, [r2, #-4]
 8002b6e:	ed12 2a02 	vldr	s4, [r2, #-8]
 8002b72:	eef0 6a62 	vmov.f32	s13, s5
 8002b76:	ed51 0a01 	vldr	s1, [r1, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8002b7a:	07dd      	lsls	r5, r3, #31
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002b7c:	ee72 2a07 	vadd.f32	s5, s4, s14
 8002b80:	eeb0 7a40 	vmov.f32	s14, s0
 8002b84:	eea1 7a04 	vfma.f32	s14, s2, s8
 8002b88:	eea2 7aa4 	vfma.f32	s14, s5, s9
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8002b8c:	ed51 2a02 	vldr	s5, [r1, #-8]
		outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8002b90:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8002b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b98:	eeb0 7a60 	vmov.f32	s14, s1
 8002b9c:	eea1 7a84 	vfma.f32	s14, s3, s8
 8002ba0:	eea6 7aa4 	vfma.f32	s14, s13, s9
 8002ba4:	ee36 7a07 	vadd.f32	s14, s12, s14
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 8002ba8:	f57f aeda 	bpl.w	8002960 <ADC_Stream0_Handler+0x320>
			tmp1R = outR; tmp1I = outI;  // save the even element produced
 8002bac:	eeb0 aa47 	vmov.f32	s20, s14
 8002bb0:	eef0 aa67 	vmov.f32	s21, s15
 8002bb4:	e7c9      	b.n	8002b4a <ADC_Stream0_Handler+0x50a>
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002bb6:	eef0 5a48 	vmov.f32	s11, s16
 8002bba:	eeb0 5a68 	vmov.f32	s10, s17
 8002bbe:	eeb0 8a47 	vmov.f32	s16, s14
 8002bc2:	eef0 8a67 	vmov.f32	s17, s15
			tmp2R = outR; tmp2I = outI;  // save the even element produced
 8002bc6:	eef0 da46 	vmov.f32	s27, s12
 8002bca:	eeb0 ea66 	vmov.f32	s28, s13
		inE2Rold = inER;                           inE2Iold = inEI;
 8002bce:	eeb0 fa4a 	vmov.f32	s30, s20
 8002bd2:	eef0 fa6a 	vmov.f32	s31, s21
 8002bd6:	e7b8      	b.n	8002b4a <ADC_Stream0_Handler+0x50a>
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002bd8:	eef0 3a4b 	vmov.f32	s7, s22
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002bdc:	edcd 9a04 	vstr	s19, [sp, #16]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002be0:	eeb0 3a6b 	vmov.f32	s6, s23
			tmp3R = outR; tmp3I = outI;  // save the even element produced
 8002be4:	ed8d 9a05 	vstr	s18, [sp, #20]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002be8:	eef0 5a48 	vmov.f32	s11, s16
 8002bec:	eeb0 5a68 	vmov.f32	s10, s17
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002bf0:	eeb0 ba46 	vmov.f32	s22, s12
 8002bf4:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002bf8:	eeb0 8a47 	vmov.f32	s16, s14
 8002bfc:	eef0 8a67 	vmov.f32	s17, s15
		inE3Rold  = inER;                          inE3Iold  = inEI;
 8002c00:	eeb0 9a6d 	vmov.f32	s18, s27
 8002c04:	eef0 9a4e 	vmov.f32	s19, s28
		inE2Rold = inER;                           inE2Iold = inEI;
 8002c08:	eeb0 fa4a 	vmov.f32	s30, s20
 8002c0c:	eef0 fa6a 	vmov.f32	s31, s21
 8002c10:	e79b      	b.n	8002b4a <ADC_Stream0_Handler+0x50a>
 8002c12:	4b71      	ldr	r3, [pc, #452]	; (8002dd8 <ADC_Stream0_Handler+0x798>)
 8002c14:	eddd 7a02 	vldr	s15, [sp, #8]
 8002c18:	ed83 2a00 	vstr	s4, [r3]
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <ADC_Stream0_Handler+0x79c>)
 8002c1e:	ed8a 0a00 	vstr	s0, [sl]
 8002c22:	edc3 0a00 	vstr	s1, [r3]
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <ADC_Stream0_Handler+0x7a0>)
 8002c28:	ed89 1a00 	vstr	s2, [r9]
 8002c2c:	edc3 1a00 	vstr	s3, [r3]
 8002c30:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <ADC_Stream0_Handler+0x7a4>)
 8002c32:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <ADC_Stream0_Handler+0x7a8>)
 8002c34:	edc3 2a00 	vstr	s5, [r3]
 8002c38:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <ADC_Stream0_Handler+0x7ac>)
 8002c3a:	edc3 8a00 	vstr	s17, [r3]
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	; (8002df0 <ADC_Stream0_Handler+0x7b0>)
 8002c40:	ed83 5a00 	vstr	s10, [r3]
 8002c44:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <ADC_Stream0_Handler+0x7b4>)
 8002c46:	edc3 fa00 	vstr	s31, [r3]
 8002c4a:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <ADC_Stream0_Handler+0x7b8>)
 8002c4c:	ed83 8a00 	vstr	s16, [r3]
 8002c50:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <ADC_Stream0_Handler+0x7bc>)
 8002c52:	edc3 5a00 	vstr	s11, [r3]
 8002c56:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <ADC_Stream0_Handler+0x7c0>)
 8002c58:	ed83 fa00 	vstr	s30, [r3]
 8002c5c:	4b69      	ldr	r3, [pc, #420]	; (8002e04 <ADC_Stream0_Handler+0x7c4>)
 8002c5e:	edc3 ba00 	vstr	s23, [r3]
 8002c62:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <ADC_Stream0_Handler+0x7c8>)
 8002c64:	ed83 3a00 	vstr	s6, [r3]
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <ADC_Stream0_Handler+0x7cc>)
 8002c6a:	edc3 9a00 	vstr	s19, [r3]
 8002c6e:	4b68      	ldr	r3, [pc, #416]	; (8002e10 <ADC_Stream0_Handler+0x7d0>)
 8002c70:	ed83 ba00 	vstr	s22, [r3]
 8002c74:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <ADC_Stream0_Handler+0x7d4>)
 8002c76:	edc3 3a00 	vstr	s7, [r3]
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <ADC_Stream0_Handler+0x7d8>)
 8002c7c:	ed83 9a00 	vstr	s18, [r3]
 8002c80:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <ADC_Stream0_Handler+0x7dc>)
 8002c82:	edc3 ea00 	vstr	s29, [r3]
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <ADC_Stream0_Handler+0x7e0>)
 8002c88:	edc3 7a00 	vstr	s15, [r3]
 8002c8c:	4b65      	ldr	r3, [pc, #404]	; (8002e24 <ADC_Stream0_Handler+0x7e4>)
 8002c8e:	eddd 7a01 	vldr	s15, [sp, #4]
 8002c92:	edc3 ca00 	vstr	s25, [r3]
 8002c96:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <ADC_Stream0_Handler+0x7e8>)
 8002c98:	ed83 da00 	vstr	s26, [r3]
 8002c9c:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <ADC_Stream0_Handler+0x7ec>)
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <ADC_Stream0_Handler+0x7f0>)
 8002ca4:	eddd 7a03 	vldr	s15, [sp, #12]
 8002ca8:	ed83 ca00 	vstr	s24, [r3]
 8002cac:	4b61      	ldr	r3, [pc, #388]	; (8002e34 <ADC_Stream0_Handler+0x7f4>)
 8002cae:	edc3 7a00 	vstr	s15, [r3]
 8002cb2:	eddd 7a08 	vldr	s15, [sp, #32]
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <ADC_Stream0_Handler+0x7f8>)
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
 8002cbc:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <ADC_Stream0_Handler+0x7fc>)
 8002cc2:	edc3 7a00 	vstr	s15, [r3]
 8002cc6:	eddd 7a00 	vldr	s15, [sp]
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <ADC_Stream0_Handler+0x800>)
 8002ccc:	f8ab e000 	strh.w	lr, [fp]
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
 8002cd4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8002cd8:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <ADC_Stream0_Handler+0x804>)
 8002cda:	edc3 7a00 	vstr	s15, [r3]
 8002cde:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <ADC_Stream0_Handler+0x808>)
 8002ce4:	edc3 7a00 	vstr	s15, [r3]
 8002ce8:	eddd 7a06 	vldr	s15, [sp, #24]
 8002cec:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <ADC_Stream0_Handler+0x80c>)
 8002cee:	edc3 7a00 	vstr	s15, [r3]
 8002cf2:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <ADC_Stream0_Handler+0x810>)
 8002cf8:	edc8 7a00 	vstr	s15, [r8]
 8002cfc:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8002d00:	edc7 7a00 	vstr	s15, [r7]
 8002d04:	eddd 7a07 	vldr	s15, [sp, #28]
 8002d08:	edc6 7a00 	vstr	s15, [r6]
 8002d0c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8002d10:	edc3 7a00 	vstr	s15, [r3]
 8002d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d18:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8002d1c:	8023      	strh	r3, [r4, #0]
 8002d1e:	edc2 7a00 	vstr	s15, [r2]
		}

		// LED_YELLOW_OFF;

	}
 8002d22:	b015      	add	sp, #84	; 0x54
 8002d24:	ecbd 8b10 	vpop	{d8-d15}
 8002d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d2c:	eef0 3a4b 	vmov.f32	s7, s22
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d30:	ed8d da01 	vstr	s26, [sp, #4]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d34:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d38:	edcd ea02 	vstr	s29, [sp, #8]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002d3c:	eef0 5a48 	vmov.f32	s11, s16
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8002d40:	edcd ca10 	vstr	s25, [sp, #64]	; 0x40
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002d44:	eeb0 5a68 	vmov.f32	s10, s17
			tmp4R = outR; tmp4I = outI;  // save the even element produced
 8002d48:	ed8d ca11 	vstr	s24, [sp, #68]	; 0x44
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d4c:	eeb0 da69 	vmov.f32	s26, s19
 8002d50:	eef0 ea49 	vmov.f32	s29, s18
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d54:	eeb0 ba46 	vmov.f32	s22, s12
 8002d58:	eef0 ba66 	vmov.f32	s23, s13
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002d5c:	eeb0 8a47 	vmov.f32	s16, s14
 8002d60:	eef0 8a67 	vmov.f32	s17, s15
 8002d64:	e6e5      	b.n	8002b32 <ADC_Stream0_Handler+0x4f2>
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002d66:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d6a:	eef0 3a4b 	vmov.f32	s7, s22
 8002d6e:	eeb0 3a6b 	vmov.f32	s6, s23
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d72:	ed8d da01 	vstr	s26, [sp, #4]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002d76:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d7a:	eeb0 da69 	vmov.f32	s26, s19
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002d7e:	eddd 5a03 	vldr	s11, [sp, #12]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d82:	eeb0 ba46 	vmov.f32	s22, s12
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d86:	edcd ea02 	vstr	s29, [sp, #8]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002d8a:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002d8e:	edcd 5a08 	vstr	s11, [sp, #32]
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002d92:	eef0 ea49 	vmov.f32	s29, s18
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002d96:	eef0 5a48 	vmov.f32	s11, s16
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002d9a:	edcd ca00 	vstr	s25, [sp]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002d9e:	eeb0 8a47 	vmov.f32	s16, s14
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002da2:	ed8d ca03 	vstr	s24, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002da6:	eeb0 5a68 	vmov.f32	s10, s17
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8002daa:	edcd fa13 	vstr	s31, [sp, #76]	; 0x4c
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002dae:	eef0 8a67 	vmov.f32	s17, s15
			tmp5R = outR; tmp5I = outI;  // save the even element produced
 8002db2:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8002db6:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
		inE5Rold  = inER;                          inE5Iold  = inEI;
 8002dba:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8002dbe:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
 8002dc2:	e6b2      	b.n	8002b2a <ADC_Stream0_Handler+0x4ea>
			__HAL_RCC_PLL2FRACN_CONFIG(FracDivCoeff[WSPRTone] + 1);
 8002dc4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002dc8:	1c51      	adds	r1, r2, #1
 8002dca:	e4ab      	b.n	8002724 <ADC_Stream0_Handler+0xe4>
 8002dcc:	2000d800 	.word	0x2000d800
 8002dd0:	2000f800 	.word	0x2000f800
 8002dd4:	34000000 	.word	0x34000000
 8002dd8:	24000674 	.word	0x24000674
 8002ddc:	240006a0 	.word	0x240006a0
 8002de0:	240006a4 	.word	0x240006a4
 8002de4:	24000670 	.word	0x24000670
 8002de8:	24000698 	.word	0x24000698
 8002dec:	240006b8 	.word	0x240006b8
 8002df0:	240006bc 	.word	0x240006bc
 8002df4:	2400067c 	.word	0x2400067c
 8002df8:	240006b0 	.word	0x240006b0
 8002dfc:	240006b4 	.word	0x240006b4
 8002e00:	24000678 	.word	0x24000678
 8002e04:	240006c8 	.word	0x240006c8
 8002e08:	240006cc 	.word	0x240006cc
 8002e0c:	24000684 	.word	0x24000684
 8002e10:	240006c0 	.word	0x240006c0
 8002e14:	240006c4 	.word	0x240006c4
 8002e18:	24000680 	.word	0x24000680
 8002e1c:	240006d8 	.word	0x240006d8
 8002e20:	240006dc 	.word	0x240006dc
 8002e24:	2400068c 	.word	0x2400068c
 8002e28:	240006d0 	.word	0x240006d0
 8002e2c:	240006d4 	.word	0x240006d4
 8002e30:	24000688 	.word	0x24000688
 8002e34:	240006e8 	.word	0x240006e8
 8002e38:	240006ec 	.word	0x240006ec
 8002e3c:	24000694 	.word	0x24000694
 8002e40:	240006e0 	.word	0x240006e0
 8002e44:	240006e4 	.word	0x240006e4
 8002e48:	24000690 	.word	0x24000690
 8002e4c:	240006f8 	.word	0x240006f8
 8002e50:	240006f4 	.word	0x240006f4
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e54:	eddd 5a06 	vldr	s11, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002e58:	eeb0 5a68 	vmov.f32	s10, s17
 8002e5c:	eef0 8a67 	vmov.f32	s17, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8002e60:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e64:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e68:	eef0 3a4b 	vmov.f32	s7, s22
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e6c:	eddd 5a00 	vldr	s11, [sp]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e70:	eeb0 3a6b 	vmov.f32	s6, s23
		inE6Rold = inER;                           inE6Iold = inEI;
 8002e74:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e78:	eeb0 ba46 	vmov.f32	s22, s12
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e7c:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8002e80:	eef0 ba66 	vmov.f32	s23, s13
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e84:	eddd 5a03 	vldr	s11, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002e88:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002e8c:	edcd 5a08 	vstr	s11, [sp, #32]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002e90:	eef0 5a48 	vmov.f32	s11, s16
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002e94:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24
		inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8002e98:	ed8d da01 	vstr	s26, [sp, #4]
 8002e9c:	eeb0 da69 	vmov.f32	s26, s19
 8002ea0:	edcd ea02 	vstr	s29, [sp, #8]
 8002ea4:	eef0 ea49 	vmov.f32	s29, s18
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002ea8:	ed8d 8a06 	vstr	s16, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8002eac:	eeb0 8a47 	vmov.f32	s16, s14
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8002eb0:	edcd fa07 	vstr	s31, [sp, #28]
		inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8002eb4:	edcd ca00 	vstr	s25, [sp]
 8002eb8:	ed8d ca03 	vstr	s24, [sp, #12]
		inE6Rold = inER;                           inE6Iold = inEI;
 8002ebc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8002ec0:	e77b      	b.n	8002dba <ADC_Stream0_Handler+0x77a>
		SDR_ComputeLO(LOfreq + cwpitch);  // prepare next LO buffer
 8002ec2:	4a06      	ldr	r2, [pc, #24]	; (8002edc <ADC_Stream0_Handler+0x89c>)
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <ADC_Stream0_Handler+0x8a0>)
 8002ec6:	ed92 0a00 	vldr	s0, [r2]
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002ed2:	f000 f807 	bl	8002ee4 <SDR_ComputeLO>
 8002ed6:	f7ff bbd0 	b.w	800267a <ADC_Stream0_Handler+0x3a>
 8002eda:	bf00      	nop
 8002edc:	24006258 	.word	0x24006258
 8002ee0:	24007c34 	.word	0x24007c34

08002ee4 <SDR_ComputeLO>:

#include <arm_const_structs.h>

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8002ee4:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
	static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f,
			ypi, ypq, tmpi, gain=1.f;

	if (oldfreq != freq)
 8002ee6:	4b50      	ldr	r3, [pc, #320]	; (8003028 <SDR_ComputeLO+0x144>)
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
 8002eec:	eef4 7a40 	vcmp.f32	s15, s0
{
 8002ef0:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d173      	bne.n	8002fe2 <SDR_ComputeLO+0xfe>
	// Coupled Quadrature Oscillator with level stabilization
	while(k)
	{                    
		// loop partially unrolled for performance

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002efa:	4a4c      	ldr	r2, [pc, #304]	; (800302c <SDR_ComputeLO+0x148>)
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <SDR_ComputeLO+0x14c>)
 8002efe:	ed92 8a00 	vldr	s16, [r2]
 8002f02:	ed93 7a00 	vldr	s14, [r3]
 8002f06:	4d4b      	ldr	r5, [pc, #300]	; (8003034 <SDR_ComputeLO+0x150>)
 8002f08:	4c4b      	ldr	r4, [pc, #300]	; (8003038 <SDR_ComputeLO+0x154>)
 8002f0a:	484c      	ldr	r0, [pc, #304]	; (800303c <SDR_ComputeLO+0x158>)
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <SDR_ComputeLO+0x15c>)
 8002f0e:	edd5 5a00 	vldr	s11, [r5]
 8002f12:	edd4 7a00 	vldr	s15, [r4]
 8002f16:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8002f1a:	edd0 6a00 	vldr	s13, [r0]
 8002f1e:	4a49      	ldr	r2, [pc, #292]	; (8003044 <SDR_ComputeLO+0x160>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f20:	ee27 6a88 	vmul.f32	s12, s15, s16
	while(k)
 8002f24:	3210      	adds	r2, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f26:	ee67 7a67 	vnmul.f32	s15, s14, s15
	while(k)
 8002f2a:	3310      	adds	r3, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f2c:	eea5 6a87 	vfma.f32	s12, s11, s14
	while(k)
 8002f30:	428b      	cmp	r3, r1
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f32:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f36:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f3e:	ee26 5a08 	vmul.f32	s10, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f42:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f46:	ee67 5a46 	vnmul.f32	s11, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f4a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f4e:	eea7 5a87 	vfma.f32	s10, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f52:	eee7 5a88 	vfma.f32	s11, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f56:	ee26 5a85 	vmul.f32	s10, s13, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f5a:	ee66 5aa5 	vmul.f32	s11, s13, s11
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f5e:	ee25 6a08 	vmul.f32	s12, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f62:	ed02 5a07 	vstr	s10, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f66:	ee67 7a45 	vnmul.f32	s15, s14, s10
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f6a:	ed43 5a07 	vstr	s11, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f6e:	eea5 6a87 	vfma.f32	s12, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f72:	eee5 7a88 	vfma.f32	s15, s11, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f76:	ee26 6a86 	vmul.f32	s12, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		ym1i = tmpi;

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f7e:	ee66 5a08 	vmul.f32	s11, s12, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f82:	ed02 6a06 	vstr	s12, [r2, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f86:	ee27 5a46 	vnmul.f32	s10, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f8a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f8e:	eeb0 6a65 	vmov.f32	s12, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f92:	eea7 5a88 	vfma.f32	s10, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f96:	eea7 6a87 	vfma.f32	s12, s15, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002f9a:	ee66 5a85 	vmul.f32	s11, s13, s10
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002f9e:	ee66 7a86 	vmul.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8002fa2:	ed43 5a05 	vstr	s11, [r3, #-20]	; 0xffffffec
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8002fa6:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8002faa:	d1b9      	bne.n	8002f20 <SDR_ComputeLO+0x3c>
		ym1i = tmpi;

		k--;
	}
	// compute the gain to be applied to stabilize the level
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002fac:	ee66 6a06 	vmul.f32	s13, s12, s12
 8002fb0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003048 <SDR_ComputeLO+0x164>
 8002fb4:	edc4 7a00 	vstr	s15, [r4]
 8002fb8:	eddf 4a24 	vldr	s9, [pc, #144]	; 800304c <SDR_ComputeLO+0x168>
 8002fbc:	eee5 6a05 	vfma.f32	s13, s10, s10
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <SDR_ComputeLO+0x16c>)
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <SDR_ComputeLO+0x170>)
 8002fc4:	edc5 5a00 	vstr	s11, [r5]
 8002fc8:	ed82 5a00 	vstr	s10, [r2]
 8002fcc:	ed83 6a00 	vstr	s12, [r3]
 8002fd0:	ee77 7a66 	vsub.f32	s15, s14, s13
}	
 8002fd4:	ecbd 8b04 	vpop	{d8-d9}
	gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f; //was (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8002fd8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002fdc:	edc0 7a00 	vstr	s15, [r0]
}	
 8002fe0:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002fe2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003058 <SDR_ComputeLO+0x174>
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <SDR_ComputeLO+0x178>)
 8002fe8:	ee60 7a27 	vmul.f32	s15, s0, s15
		oldfreq  =  freq;
 8002fec:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8002ff0:	ed92 7a00 	vldr	s14, [r2]
 8002ff4:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8002ff8:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8002ffc:	eeb0 0b49 	vmov.f64	d0, d9
 8003000:	f010 fda6 	bl	8013b50 <cos>
 8003004:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <SDR_ComputeLO+0x148>)
		sintheta = -sin(TWOPI * freq / SamplingRate);
 800300a:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 800300e:	ed83 8a00 	vstr	s16, [r3]
		sintheta = -sin(TWOPI * freq / SamplingRate);
 8003012:	f010 fde9 	bl	8013be8 <sin>
 8003016:	eeb7 7bc0 	vcvt.f32.f64	s14, d0
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SDR_ComputeLO+0x14c>)
 800301c:	eeb1 7a47 	vneg.f32	s14, s14
 8003020:	ed83 7a00 	vstr	s14, [r3]
 8003024:	e76f      	b.n	8002f06 <SDR_ComputeLO+0x22>
 8003026:	bf00      	nop
 8003028:	24000204 	.word	0x24000204
 800302c:	24000704 	.word	0x24000704
 8003030:	2400070c 	.word	0x2400070c
 8003034:	24000208 	.word	0x24000208
 8003038:	24000724 	.word	0x24000724
 800303c:	24000200 	.word	0x24000200
 8003040:	24005a68 	.word	0x24005a68
 8003044:	24005268 	.word	0x24005268
 8003048:	46000200 	.word	0x46000200
 800304c:	39000000 	.word	0x39000000
 8003050:	24000728 	.word	0x24000728
 8003054:	2400072c 	.word	0x2400072c
 8003058:	40c90fdb 	.word	0x40c90fdb
 800305c:	24006288 	.word	0x24006288

08003060 <SDR_2R_toC_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time
	while(blkCnt)
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	d028      	beq.n	80030b6 <SDR_2R_toC_f32+0x56>
 8003064:	3010      	adds	r0, #16
 8003066:	3110      	adds	r1, #16
 8003068:	3220      	adds	r2, #32
	{
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800306a:	f850 cc10 	ldr.w	ip, [r0, #-16]
	while(blkCnt)
 800306e:	3110      	adds	r1, #16
 8003070:	3010      	adds	r0, #16
 8003072:	3b01      	subs	r3, #1
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8003074:	f842 cc20 	str.w	ip, [r2, #-32]
	while(blkCnt)
 8003078:	f102 0220 	add.w	r2, r2, #32
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800307c:	f851 cc20 	ldr.w	ip, [r1, #-32]
 8003080:	f842 cc3c 	str.w	ip, [r2, #-60]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8003084:	f850 cc1c 	ldr.w	ip, [r0, #-28]
 8003088:	f842 cc38 	str.w	ip, [r2, #-56]
 800308c:	f851 cc1c 	ldr.w	ip, [r1, #-28]
 8003090:	f842 cc34 	str.w	ip, [r2, #-52]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8003094:	f850 cc18 	ldr.w	ip, [r0, #-24]
 8003098:	f842 cc30 	str.w	ip, [r2, #-48]
 800309c:	f851 cc18 	ldr.w	ip, [r1, #-24]
 80030a0:	f842 cc2c 	str.w	ip, [r2, #-44]
		*pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 80030a4:	f850 cc14 	ldr.w	ip, [r0, #-20]
 80030a8:	f842 cc28 	str.w	ip, [r2, #-40]
 80030ac:	f851 cc14 	ldr.w	ip, [r1, #-20]
 80030b0:	f842 cc24 	str.w	ip, [r2, #-36]
	while(blkCnt)
 80030b4:	d1d9      	bne.n	800306a <SDR_2R_toC_f32+0xa>

		blkCnt--;
	}
}
 80030b6:	4770      	bx	lr

080030b8 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <SDR_downconvert_f32+0xd8>)
	float  tmp1, tmp2, tmp3, tmp4, *LOI=LO_R, *LOR=LO_I;
	uint16_t *pt = signal;

	// loop Unrolling
	blkCnt = BSIZE >> 2u;   // loop unrolling.  Compute 4 outputs at a time
	while(blkCnt)
 80030ba:	3110      	adds	r1, #16
 80030bc:	3210      	adds	r2, #16
 80030be:	3008      	adds	r0, #8
		tmp2=((*(pt+1)-offset)) / 2048.f;
		tmp1 = tmp2;
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3 = tmp4;
#else
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80030c0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003194 <SDR_downconvert_f32+0xdc>
 80030c4:	f503 6c00 	add.w	ip, r3, #2048	; 0x800
{
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4c33      	ldr	r4, [pc, #204]	; (8003198 <SDR_downconvert_f32+0xe0>)
		tmp1=((*(pt)  -offset)) / 2048.f;
 80030cc:	f830 ec08 	ldrh.w	lr, [r0, #-8]
	while(blkCnt)
 80030d0:	3110      	adds	r1, #16
		tmp4=((*(pt+3)-offset)) / 2048.f;
		tmp3=((*(pt+2)-offset)) / 2048.f;
#endif


		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80030d2:	ed13 5a04 	vldr	s10, [r3, #-16]
	while(blkCnt)
 80030d6:	3410      	adds	r4, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 80030d8:	ee06 ea10 	vmov	s12, lr
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80030dc:	f830 ec06 	ldrh.w	lr, [r0, #-6]
	while(blkCnt)
 80030e0:	3310      	adds	r3, #16
 80030e2:	3210      	adds	r2, #16
		tmp1=((*(pt)  -offset)) / 2048.f;
 80030e4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80030e8:	ee06 ea90 	vmov	s13, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80030ec:	f830 ec02 	ldrh.w	lr, [r0, #-2]
	while(blkCnt)
 80030f0:	4563      	cmp	r3, ip
		tmp2=((*(pt+1)-offset)) / 2048.f;
 80030f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	while(blkCnt)
 80030f6:	f100 0008 	add.w	r0, r0, #8
		tmp1=((*(pt)  -offset)) / 2048.f;
 80030fa:	ee36 6a40 	vsub.f32	s12, s12, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 80030fe:	ee07 ea90 	vmov	s15, lr
		tmp3=((*(pt+2)-offset)) / 2048.f;
 8003102:	f830 ec0c 	ldrh.w	lr, [r0, #-12]
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003106:	ee76 6ac0 	vsub.f32	s13, s13, s0
		tmp1=((*(pt)  -offset)) / 2048.f;
 800310a:	ee26 6a25 	vmul.f32	s12, s12, s11
		tmp3=((*(pt+2)-offset)) / 2048.f;
 800310e:	ee07 ea10 	vmov	s14, lr
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8003112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		tmp2=((*(pt+1)-offset)) / 2048.f;
 8003116:	ee66 6aa5 	vmul.f32	s13, s13, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800311a:	ee25 5a06 	vmul.f32	s10, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 800311e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8003122:	ee77 7ac0 	vsub.f32	s15, s15, s0
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8003126:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 800312a:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		tmp3=((*(pt+2)-offset)) / 2048.f;
 800312e:	ee37 7a40 	vsub.f32	s14, s14, s0
		tmp4=((*(pt+3)-offset)) / 2048.f;
 8003132:	ee67 7aa5 	vmul.f32	s15, s15, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8003136:	ee25 6a06 	vmul.f32	s12, s10, s12
		tmp3=((*(pt+2)-offset)) / 2048.f;
 800313a:	ee27 7a25 	vmul.f32	s14, s14, s11
		*zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 800313e:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		*zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8003142:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8003146:	ee26 6a26 	vmul.f32	s12, s12, s13
 800314a:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 800314e:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8003152:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003156:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		*zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 800315a:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 800315e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8003162:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8003166:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 800316a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800316e:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		*zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8003172:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 8003176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317a:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 800317e:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(blkCnt)
 800318a:	d19f      	bne.n	80030cc <SDR_downconvert_f32+0x14>
		pt += 4;
		blkCnt--;
	}	
}
 800318c:	bd10      	pop	{r4, pc}
 800318e:	bf00      	nop
 8003190:	24005268 	.word	0x24005268
 8003194:	3a000000 	.word	0x3a000000
 8003198:	24005a68 	.word	0x24005a68

0800319c <SDR_float_to_DAC_audio>:
	short *AudioBuffer;

	AudioBuffer = pDst;

	/* loop Unrolling */
	blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 800319c:	0893      	lsrs	r3, r2, #2
	while(blkCnt--)
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d058      	beq.n	8003254 <SDR_float_to_DAC_audio+0xb8>
 80031a2:	f103 3cff 	add.w	ip, r3, #4294967295
	{
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <SDR_float_to_DAC_audio+0xe4>)
 80031a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ac:	fa1f fc8c 	uxth.w	ip, ip
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	f100 0310 	add.w	r3, r0, #16
 80031b8:	3020      	adds	r0, #32
 80031ba:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 80031be:	f101 0008 	add.w	r0, r1, #8
{
 80031c2:	b500      	push	{lr}
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031c4:	eeb0 5a47 	vmov.f32	s10, s14
 80031c8:	ed53 5a04 	vldr	s11, [r3, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031cc:	ed13 6a03 	vldr	s12, [r3, #-12]
	while(blkCnt--)
 80031d0:	3008      	adds	r0, #8
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031d2:	ed53 6a02 	vldr	s13, [r3, #-8]
	while(blkCnt--)
 80031d6:	3310      	adds	r3, #16
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031d8:	eea5 5aa7 	vfma.f32	s10, s11, s15
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031dc:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031e0:	eef0 5a47 	vmov.f32	s11, s14
	while(blkCnt--)
 80031e4:	459c      	cmp	ip, r3
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031e6:	eee7 5a86 	vfma.f32	s11, s15, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031ea:	eeb0 6a47 	vmov.f32	s12, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031ee:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031f2:	eea7 6aa6 	vfma.f32	s12, s15, s13
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031f6:	eef0 6a47 	vmov.f32	s13, s14
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031fa:	ee15 ea10 	vmov	lr, s10
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 80031fe:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003202:	f820 ec10 	strh.w	lr, [r0, #-16]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003206:	eee7 6aa4 	vfma.f32	s13, s15, s9
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800320a:	ee15 ea90 	vmov	lr, s11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800320e:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003212:	f820 ec0e 	strh.w	lr, [r0, #-14]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003216:	ee16 ea10 	vmov	lr, s12
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800321a:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800321e:	f820 ec0c 	strh.w	lr, [r0, #-12]
		*pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8003222:	ee16 ea90 	vmov	lr, s13
 8003226:	f820 ec0a 	strh.w	lr, [r0, #-10]
	while(blkCnt--)
 800322a:	d1cb      	bne.n	80031c4 <SDR_float_to_DAC_audio+0x28>
	}	

	// SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
	SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 800322c:	0093      	lsls	r3, r2, #2
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800322e:	f001 021f 	and.w	r2, r1, #31
 8003232:	441a      	add	r2, r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003234:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003238:	4812      	ldr	r0, [pc, #72]	; (8003284 <SDR_float_to_DAC_audio+0xe8>)
 800323a:	440a      	add	r2, r1
 800323c:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003240:	3120      	adds	r1, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003242:	1a53      	subs	r3, r2, r1
 8003244:	2b00      	cmp	r3, #0
 8003246:	dcf9      	bgt.n	800323c <SDR_float_to_DAC_audio+0xa0>
 8003248:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800324c:	f3bf 8f6f 	isb	sy
#endif
	return;
}	
 8003250:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( dsize > 0 ) { 
 8003254:	0093      	lsls	r3, r2, #2
 8003256:	b902      	cbnz	r2, 800325a <SDR_float_to_DAC_audio+0xbe>
 8003258:	4770      	bx	lr
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800325a:	f001 021f 	and.w	r2, r1, #31
 800325e:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8003260:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003264:	4807      	ldr	r0, [pc, #28]	; (8003284 <SDR_float_to_DAC_audio+0xe8>)
 8003266:	440a      	add	r2, r1
 8003268:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800326c:	3120      	adds	r1, #32
      } while ( op_size > 0 );
 800326e:	1a53      	subs	r3, r2, r1
 8003270:	2b00      	cmp	r3, #0
 8003272:	dcf9      	bgt.n	8003268 <SDR_float_to_DAC_audio+0xcc>
 8003274:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003278:	f3bf 8f6f 	isb	sy
	return;
 800327c:	e7ec      	b.n	8003258 <SDR_float_to_DAC_audio+0xbc>
 800327e:	bf00      	nop
 8003280:	2400b9d0 	.word	0x2400b9d0
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <SDR_memcpy_f32>:

	// loop Unrolling
	blkCnt = blockSize >> 2u;

	// Compute 4 outputs at a time.
	while(blkCnt > 0u)
 8003288:	0892      	lsrs	r2, r2, #2
 800328a:	d016      	beq.n	80032ba <SDR_memcpy_f32+0x32>
 800328c:	3110      	adds	r1, #16
 800328e:	3010      	adds	r0, #16
	{
		/* Copy and then store the results in the destination buffer */
		in1 = *pSrc++;  *pDst++ = in1;
 8003290:	f851 3c10 	ldr.w	r3, [r1, #-16]
	while(blkCnt > 0u)
 8003294:	3110      	adds	r1, #16
 8003296:	3a01      	subs	r2, #1
 8003298:	f100 0010 	add.w	r0, r0, #16
		in1 = *pSrc++;  *pDst++ = in1;
 800329c:	f840 3c20 	str.w	r3, [r0, #-32]
		in2 = *pSrc++;  *pDst++ = in2;
 80032a0:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80032a4:	f840 3c1c 	str.w	r3, [r0, #-28]
		in3 = *pSrc++;  *pDst++ = in3;
 80032a8:	f851 3c18 	ldr.w	r3, [r1, #-24]
 80032ac:	f840 3c18 	str.w	r3, [r0, #-24]
		in4 = *pSrc++;  *pDst++ = in4;
 80032b0:	f851 3c14 	ldr.w	r3, [r1, #-20]
 80032b4:	f840 3c14 	str.w	r3, [r0, #-20]
	while(blkCnt > 0u)
 80032b8:	d1ea      	bne.n	8003290 <SDR_memcpy_f32+0x8>

		// Decrement the loop counter
		blkCnt--;
	}
}
 80032ba:	4770      	bx	lr

080032bc <SDR_mirror_LSB>:
{
	uint32_t blkCnt;            /* loop counter */
	float *pbR, *pbI, *peR, *peI;

	// loop Unrolling */
	blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 80032bc:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80032be:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

	//  Compute 4 outputs at a time.
	while(blkCnt--)
 80032c2:	2a01      	cmp	r2, #1
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80032c4:	440b      	add	r3, r1
	while(blkCnt--)
 80032c6:	f1a2 0102 	sub.w	r1, r2, #2
	pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 80032ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	while(blkCnt--)
 80032ce:	d036      	beq.n	800333e <SDR_mirror_LSB+0x82>
 80032d0:	f1a3 0220 	sub.w	r2, r3, #32
 80032d4:	f1a3 0c1c 	sub.w	ip, r3, #28
 80032d8:	f100 0328 	add.w	r3, r0, #40	; 0x28
 80032dc:	4402      	add	r2, r0
 80032de:	4460      	add	r0, ip
	{
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80032e0:	f8d2 c020 	ldr.w	ip, [r2, #32]
	while(blkCnt--)
 80032e4:	3a20      	subs	r2, #32
 80032e6:	3820      	subs	r0, #32
 80032e8:	3901      	subs	r1, #1
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80032ea:	f843 cc20 	str.w	ip, [r3, #-32]
	while(blkCnt--)
 80032ee:	3320      	adds	r3, #32
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80032f0:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
	while(blkCnt--)
 80032f4:	f1b1 3fff 	cmp.w	r1, #4294967295
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 80032f8:	eef1 7a67 	vneg.f32	s15, s15
 80032fc:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003300:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8003304:	f843 cc38 	str.w	ip, [r3, #-56]
 8003308:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 800330c:	eef1 7a67 	vneg.f32	s15, s15
 8003310:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003314:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8003318:	f843 cc30 	str.w	ip, [r3, #-48]
 800331c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8003320:	eef1 7a67 	vneg.f32	s15, s15
 8003324:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
		*pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8003328:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
 800332c:	f843 cc28 	str.w	ip, [r3, #-40]
 8003330:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8003334:	eef1 7a67 	vneg.f32	s15, s15
 8003338:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 800333c:	d1d0      	bne.n	80032e0 <SDR_mirror_LSB+0x24>
	}
}
 800333e:	4770      	bx	lr

08003340 <SDR_compute_IIR_parms>:
#endif
	r = Qfactor;

	a1 = a2 = b0 = 0.f;
	r2 = r*r;
	wr = 2.f * cwpitch / rate * myPI;
 8003340:	492b      	ldr	r1, [pc, #172]	; (80033f0 <SDR_compute_IIR_parms+0xb0>)
 8003342:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80033f4 <SDR_compute_IIR_parms+0xb4>
 8003346:	edd1 7a00 	vldr	s15, [r1]
	float rate = SamplingRate/256; //SamplingRate / decimation
 800334a:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <SDR_compute_IIR_parms+0xb8>)
	wr = 2.f * cwpitch / rate * myPI;
 800334c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003350:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80033fc <SDR_compute_IIR_parms+0xbc>
 8003354:	ed92 7a00 	vldr	s14, [r2]
{
 8003358:	b508      	push	{r3, lr}
 800335a:	ed2d 8b06 	vpush	{d8-d10}
	wr = 2.f * cwpitch / rate * myPI;
 800335e:	eec7 8a87 	vdiv.f32	s17, s15, s14
	r = Qfactor;
 8003362:	4b27      	ldr	r3, [pc, #156]	; (8003400 <SDR_compute_IIR_parms+0xc0>)
 8003364:	edd3 9a00 	vldr	s19, [r3]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003368:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	r2 = r*r;
 800336c:	ee69 aaa9 	vmul.f32	s21, s19, s19
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003370:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8003374:	ee3a 9a88 	vadd.f32	s18, s21, s16
	// (see the Proakis & Manolakis book)
	a1 = -2.f * r * cosw0;
	a2 = r2;
	// b0 is normalized for gain ~ 2dB on all the band
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8003378:	ee38 8a69 	vsub.f32	s16, s16, s19
	wr = 2.f * cwpitch / rate * myPI;
 800337c:	ee68 8a80 	vmul.f32	s17, s17, s0
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003380:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8003384:	f010 fbe4 	bl	8013b50 <cos>
 8003388:	ee8a 5a09 	vdiv.f32	s10, s20, s18
	a1 = -2.f * r * cosw0;
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <SDR_compute_IIR_parms+0xc4>)
	a2 = r2;
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <SDR_compute_IIR_parms+0xc8>)
 8003390:	edc2 aa00 	vstr	s21, [r2]
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8003394:	eeb0 6b40 	vmov.f64	d6, d0
	a1 = -2.f * r * cosw0;
 8003398:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 800339c:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80033a0:	eeb7 aaca 	vcvt.f64.f32	d10, s20
	a1 = -2.f * r * cosw0;
 80033a4:	ee69 7aa7 	vmul.f32	s15, s19, s15
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80033a8:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
	cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80033ac:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80033b0:	ee25 6b06 	vmul.f64	d6, d5, d6
 80033b4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	a1 = -2.f * r * cosw0;
 80033b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033bc:	ed83 6a00 	vstr	s12, [r3]
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80033c0:	f010 fbc6 	bl	8013b50 <cos>
 80033c4:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 80033c8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800340c <SDR_compute_IIR_parms+0xcc>
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <SDR_compute_IIR_parms+0xd0>)
 80033ce:	ee28 7a07 	vmul.f32	s14, s16, s14
 80033d2:	eeaa 6b40 	vfms.f64	d6, d10, d0
 80033d6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 80033da:	ecbd 8b06 	vpop	{d8-d10}
	b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80033de:	eeb1 5bc6 	vsqrt.f64	d5, d6
 80033e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80033e6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80033ea:	ed83 7a00 	vstr	s14, [r3]
}
 80033ee:	bd08      	pop	{r3, pc}
 80033f0:	24007c34 	.word	0x24007c34
 80033f4:	44000000 	.word	0x44000000
 80033f8:	24006288 	.word	0x24006288
 80033fc:	40490fdb 	.word	0x40490fdb
 8003400:	24006280 	.word	0x24006280
 8003404:	24007404 	.word	0x24007404
 8003408:	24007408 	.word	0x24007408
 800340c:	3f99999a 	.word	0x3f99999a
 8003410:	24007c2c 	.word	0x24007c2c

08003414 <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
	static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	register float x0, y0;
	uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8003414:	0889      	lsrs	r1, r1, #2

	// Compute 4 outputs at a time, loop unrolled for performance
	while(blkCnt--)
 8003416:	2900      	cmp	r1, #0
 8003418:	d077      	beq.n	800350a <SDR_CWPeak+0xf6>
 800341a:	1e4b      	subs	r3, r1, #1
 800341c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003524 <SDR_CWPeak+0x110>
	{
		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003420:	493a      	ldr	r1, [pc, #232]	; (800350c <SDR_CWPeak+0xf8>)
 8003422:	3010      	adds	r0, #16
 8003424:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <SDR_CWPeak+0xfc>)
 8003426:	eddc 2a00 	vldr	s5, [ip]
 800342a:	ed91 6a00 	vldr	s12, [r1]
 800342e:	ed92 5a00 	vldr	s10, [r2]
{
 8003432:	b4f0      	push	{r4, r5, r6, r7}
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003434:	4c37      	ldr	r4, [pc, #220]	; (8003514 <SDR_CWPeak+0x100>)
 8003436:	4f38      	ldr	r7, [pc, #224]	; (8003518 <SDR_CWPeak+0x104>)
 8003438:	edd4 4a00 	vldr	s9, [r4]
 800343c:	4e37      	ldr	r6, [pc, #220]	; (800351c <SDR_CWPeak+0x108>)
 800343e:	4d38      	ldr	r5, [pc, #224]	; (8003520 <SDR_CWPeak+0x10c>)
 8003440:	eeb1 2a64 	vneg.f32	s4, s9
 8003444:	ed97 7a00 	vldr	s14, [r7]
 8003448:	edd6 5a00 	vldr	s11, [r6]
 800344c:	edd5 6a00 	vldr	s13, [r5]
 8003450:	ee66 3a47 	vnmul.f32	s7, s12, s14
 8003454:	ed10 7a04 	vldr	s14, [r0, #-16]
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8003458:	ee26 4a66 	vnmul.f32	s8, s12, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800345c:	ed50 7a03 	vldr	s15, [r0, #-12]
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003460:	ed50 6a02 	vldr	s13, [r0, #-8]
	while(blkCnt--)
 8003464:	3010      	adds	r0, #16
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003466:	eee2 3a22 	vfma.f32	s7, s4, s5
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;

		x0 = *buf;
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800346a:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800346e:	eea2 4a25 	vfma.f32	s8, s4, s11
	while(blkCnt--)
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003478:	eee7 3a05 	vfma.f32	s7, s14, s10
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800347c:	eea3 4a85 	vfma.f32	s8, s7, s10
		*buf++ = y0;
 8003480:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003484:	ed92 5a00 	vldr	s10, [r2]
 8003488:	ed91 6a00 	vldr	s12, [r1]
 800348c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003490:	edd4 4a00 	vldr	s9, [r4]
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003494:	ee25 7a26 	vmul.f32	s14, s10, s13
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8003498:	ee65 6a03 	vmul.f32	s13, s10, s6
 800349c:	eee6 7a62 	vfms.f32	s15, s12, s5
 80034a0:	eea6 7a63 	vfms.f32	s14, s12, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80034a4:	eeb1 2a64 	vneg.f32	s4, s9
 80034a8:	eee4 7ae3 	vfms.f32	s15, s9, s7
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80034ac:	eea4 7ae7 	vfms.f32	s14, s9, s15
 80034b0:	eee6 6a67 	vfms.f32	s13, s12, s15
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80034b4:	ee65 7a27 	vmul.f32	s15, s10, s15
 80034b8:	eee4 7ac4 	vfms.f32	s15, s9, s8
		y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80034bc:	eee4 6ac7 	vfms.f32	s13, s9, s14
 80034c0:	eef0 2a66 	vmov.f32	s5, s13
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80034c4:	ee65 6a07 	vmul.f32	s13, s10, s14
 80034c8:	eee6 6a44 	vfms.f32	s13, s12, s8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80034cc:	eeb0 4a67 	vmov.f32	s8, s15
 80034d0:	eed6 7a25 	vfnms.f32	s15, s12, s11
 80034d4:	eea6 4a65 	vfms.f32	s8, s12, s11
		y2a = y1a;
		y1a = y0;
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80034d8:	ee65 5a22 	vmul.f32	s11, s10, s5
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80034dc:	eee4 6aa7 	vfma.f32	s13, s9, s15
 80034e0:	eee6 5a44 	vfms.f32	s11, s12, s8
		*buf++ = y0;
 80034e4:	ed00 4a07 	vstr	s8, [r0, #-28]	; 0xffffffe4
		*buf++ = y0;
 80034e8:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
		y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80034ec:	eee4 5ae6 	vfms.f32	s11, s9, s13
		y2b = y1b;
		y1b = y0;
		*buf++ = y0;
 80034f0:	ed40 5a05 	vstr	s11, [r0, #-20]	; 0xffffffec
	while(blkCnt--)
 80034f4:	d1ac      	bne.n	8003450 <SDR_CWPeak+0x3c>
 80034f6:	ed87 7a00 	vstr	s14, [r7]
 80034fa:	edc6 5a00 	vstr	s11, [r6]
 80034fe:	edc5 6a00 	vstr	s13, [r5]
 8003502:	edcc 2a00 	vstr	s5, [ip]
	}
}
 8003506:	bcf0      	pop	{r4, r5, r6, r7}
 8003508:	4770      	bx	lr
 800350a:	4770      	bx	lr
 800350c:	24007408 	.word	0x24007408
 8003510:	24007c2c 	.word	0x24007c2c
 8003514:	24007404 	.word	0x24007404
 8003518:	2400071c 	.word	0x2400071c
 800351c:	24000718 	.word	0x24000718
 8003520:	24000720 	.word	0x24000720
 8003524:	24000714 	.word	0x24000714

08003528 <SDR_demodAM_AGC>:

#ifdef RECEIVE_AM

// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8003528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

		if(pk < audiotmp)
		{
			pk = audiotmp;
			hangcnt = Hcount[AM];
 800352c:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <SDR_demodAM_AGC+0xf8>)
{
 800352e:	b082      	sub	sp, #8
 8003530:	4f3c      	ldr	r7, [pc, #240]	; (8003624 <SDR_demodAM_AGC+0xfc>)
 8003532:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
 8003536:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003644 <SDR_demodAM_AGC+0x11c>
			hangcnt = Hcount[AM];
 800353a:	f8b3 e000 	ldrh.w	lr, [r3]
 800353e:	683a      	ldr	r2, [r7, #0]

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8003540:	eddf 4a39 	vldr	s9, [pc, #228]	; 8003628 <SDR_demodAM_AGC+0x100>

		if(hangcnt == 0)
			pk  *= Decay[AM];

		// DC removal filter -----------------------
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8003544:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800362c <SDR_demodAM_AGC+0x104>
 8003548:	ed98 7a00 	vldr	s14, [r8]
 800354c:	4b38      	ldr	r3, [pc, #224]	; (8003630 <SDR_demodAM_AGC+0x108>)
 800354e:	4d39      	ldr	r5, [pc, #228]	; (8003634 <SDR_demodAM_AGC+0x10c>)
 8003550:	4c39      	ldr	r4, [pc, #228]	; (8003638 <SDR_demodAM_AGC+0x110>)
			pk  *= Decay[AM];
 8003552:	4e3a      	ldr	r6, [pc, #232]	; (800363c <SDR_demodAM_AGC+0x114>)
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003554:	edd0 7a01 	vldr	s15, [r0, #4]
 8003558:	edd0 6a00 	vldr	s13, [r0]
 800355c:	ee67 7aa7 	vmul.f32	s15, s15, s15
		audiotmp /= max(pk, AgcThreshold);
 8003560:	ed95 6a00 	vldr	s12, [r5]
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8003564:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8003568:	edcd 7a01 	vstr	s15, [sp, #4]
		arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 800356c:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8003570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = sqrtf(in);
 8003578:	bfa8      	it	ge
 800357a:	eef1 5ae7 	vsqrtge.f32	s11, s15
		if(pk < audiotmp)
 800357e:	edd3 7a00 	vldr	s15, [r3]
      *pOut = 0.0f;
 8003582:	bfb8      	it	lt
 8003584:	eef0 5a64 	vmovlt.f32	s11, s9
 8003588:	eef4 7ae5 	vcmpe.f32	s15, s11
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	d504      	bpl.n	800359c <SDR_demodAM_AGC+0x74>
			pk = audiotmp;
 8003592:	eef0 7a65 	vmov.f32	s15, s11
			hangcnt = Hcount[AM];
 8003596:	4672      	mov	r2, lr
			pk = audiotmp;
 8003598:	edc3 5a00 	vstr	s11, [r3]
		audiotmp /= max(pk, AgcThreshold);
 800359c:	fe87 6a86 	vmaxnm.f32	s12, s15, s12
 80035a0:	eec5 6a86 	vdiv.f32	s13, s11, s12
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80035a4:	eef0 5a66 	vmov.f32	s11, s13
		audiotmp /= max(pk, AgcThreshold);
 80035a8:	edc4 6a00 	vstr	s13, [r4]
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80035ac:	eee7 5a05 	vfma.f32	s11, s14, s10
		if(hangcnt == 0)
 80035b0:	b9da      	cbnz	r2, 80035ea <SDR_demodAM_AGC+0xc2>
			pk  *= Decay[AM];
 80035b2:	edd6 6a00 	vldr	s13, [r6]
	for(k=j=0; k<BSIZE*2; k+=2)
 80035b6:	3008      	adds	r0, #8
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80035b8:	edcd 5a00 	vstr	s11, [sp]
			pk  *= Decay[AM];
 80035bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80035c0:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80035c4:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80035c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80035ca:	ed9d 7a00 	vldr	s14, [sp]
			pk  *= Decay[AM];
 80035ce:	edc3 6a00 	vstr	s13, [r3]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80035d2:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 80035d6:	d1bd      	bne.n	8003554 <SDR_demodAM_AGC+0x2c>
		// -----------------------------------------
	}
	PeakAudioValue=pk;
 80035d8:	4919      	ldr	r1, [pc, #100]	; (8003640 <SDR_demodAM_AGC+0x118>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	603a      	str	r2, [r7, #0]
 80035de:	ed88 7a00 	vstr	s14, [r8]
 80035e2:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
}
 80035e4:	b002      	add	sp, #8
 80035e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80035ea:	edcd 5a00 	vstr	s11, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80035ee:	3008      	adds	r0, #8
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80035f0:	eddd 7a00 	vldr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 80035f4:	4584      	cmp	ip, r0
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80035f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
		wold = w;
 80035fa:	ed9d 7a00 	vldr	s14, [sp]
		fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 80035fe:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8003602:	d1a7      	bne.n	8003554 <SDR_demodAM_AGC+0x2c>
	PeakAudioValue=pk;
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <SDR_demodAM_AGC+0x118>)
	if(hangcnt > 0)  hangcnt--;
 8003606:	2a00      	cmp	r2, #0
	PeakAudioValue=pk;
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	603a      	str	r2, [r7, #0]
 800360c:	ed88 7a00 	vstr	s14, [r8]
 8003610:	600b      	str	r3, [r1, #0]
	if(hangcnt > 0)  hangcnt--;
 8003612:	dd01      	ble.n	8003618 <SDR_demodAM_AGC+0xf0>
 8003614:	3a01      	subs	r2, #1
 8003616:	603a      	str	r2, [r7, #0]
}
 8003618:	b002      	add	sp, #8
 800361a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800361e:	bf00      	nop
 8003620:	2400524c 	.word	0x2400524c
 8003624:	2400a504 	.word	0x2400a504
 8003628:	00000000 	.word	0x00000000
 800362c:	3f75c28f 	.word	0x3f75c28f
 8003630:	2400a844 	.word	0x2400a844
 8003634:	240007e4 	.word	0x240007e4
 8003638:	24007c28 	.word	0x24007c28
 800363c:	24001020 	.word	0x24001020
 8003640:	2400627c 	.word	0x2400627c
 8003644:	24000710 	.word	0x24000710

08003648 <SDR_demodSSB_CW_AGC>:
#endif

//---------------------------------------------------------------------------
// SSB and CW demodulation with AGC
void SDR_demodSSB_CW_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(pk < sav)
		{
			pk = sav;
			if(CurrentMode == CW) hangcnt = Hcount[CW];
			else
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <SDR_demodSSB_CW_AGC+0xf0>)
 800364e:	f241 0e04 	movw	lr, #4100	; 0x1004
 8003652:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8003750 <SDR_demodSSB_CW_AGC+0x108>
		if(pk < sav)
 8003656:	4a39      	ldr	r2, [pc, #228]	; (800373c <SDR_demodSSB_CW_AGC+0xf4>)
 8003658:	4486      	add	lr, r0
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800365a:	889f      	ldrh	r7, [r3, #4]
 800365c:	885e      	ldrh	r6, [r3, #2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 800365e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003662:	1d03      	adds	r3, r0, #4
		if(pk < sav)
 8003664:	edd2 7a00 	vldr	s15, [r2]
 8003668:	f8d8 0000 	ldr.w	r0, [r8]
 800366c:	4d34      	ldr	r5, [pc, #208]	; (8003740 <SDR_demodSSB_CW_AGC+0xf8>)
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 800366e:	4c35      	ldr	r4, [pc, #212]	; (8003744 <SDR_demodSSB_CW_AGC+0xfc>)

		if(hangcnt == 0)
		{
			if(CurrentMode == CW) pk  *= Decay[CW];
			else
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003670:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003754 <SDR_demodSSB_CW_AGC+0x10c>
 8003674:	e014      	b.n	80036a0 <SDR_demodSSB_CW_AGC+0x58>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003676:	f894 c000 	ldrb.w	ip, [r4]
 800367a:	f1bc 0f03 	cmp.w	ip, #3
 800367e:	d052      	beq.n	8003726 <SDR_demodSSB_CW_AGC+0xde>
				pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8003680:	f1bc 0f01 	cmp.w	ip, #1
 8003684:	ed92 7a00 	vldr	s14, [r2]
 8003688:	bf0c      	ite	eq
 800368a:	edda 7a01 	vldreq	s15, [sl, #4]
 800368e:	edda 7a02 	vldrne	s15, [sl, #8]
 8003692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003696:	edc2 7a00 	vstr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 800369a:	3308      	adds	r3, #8
 800369c:	459e      	cmp	lr, r3
 800369e:	d02d      	beq.n	80036fc <SDR_demodSSB_CW_AGC+0xb4>
		tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	ed53 6a01 	vldr	s13, [r3, #-4]
 80036a8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80036ac:	eea6 7aa6 	vfma.f32	s14, s13, s13
      *pOut = sqrtf(in);
 80036b0:	eeb1 6ac7 	vsqrt.f32	s12, s14
		if(pk < sav)
 80036b4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	dd0f      	ble.n	80036de <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80036be:	f894 c000 	ldrb.w	ip, [r4]
			pk = sav;
 80036c2:	ed82 6a00 	vstr	s12, [r2]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 80036c6:	f1bc 0f03 	cmp.w	ip, #3
 80036ca:	d026      	beq.n	800371a <SDR_demodSSB_CW_AGC+0xd2>
 80036cc:	eef0 7a46 	vmov.f32	s15, s12
				hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80036d0:	f1bc 0f01 	cmp.w	ip, #1
 80036d4:	bf0c      	ite	eq
 80036d6:	4630      	moveq	r0, r6
 80036d8:	4638      	movne	r0, r7
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 80036da:	ed53 6a01 	vldr	s13, [r3, #-4]
 80036de:	ed95 7a00 	vldr	s14, [r5]
 80036e2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80036e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ea:	eca1 7a01 	vstmia	r1!, {s14}
		if(hangcnt == 0)
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0c1      	beq.n	8003676 <SDR_demodSSB_CW_AGC+0x2e>
	for(k=j=0; k<BSIZE*2; k+=2)
 80036f2:	3308      	adds	r3, #8
		}
	}
	PeakAudioValue=pk;
 80036f4:	edd2 7a00 	vldr	s15, [r2]
	for(k=j=0; k<BSIZE*2; k+=2)
 80036f8:	459e      	cmp	lr, r3
 80036fa:	d1d1      	bne.n	80036a0 <SDR_demodSSB_CW_AGC+0x58>
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <SDR_demodSSB_CW_AGC+0x100>)
	if(hangcnt > 0)  hangcnt--;
 80036fe:	2800      	cmp	r0, #0
	PeakAudioValue=pk;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <SDR_demodSSB_CW_AGC+0x104>)
 8003702:	f8c8 0000 	str.w	r0, [r8]
 8003706:	ed82 6a00 	vstr	s12, [r2]
 800370a:	edc3 7a00 	vstr	s15, [r3]
	if(hangcnt > 0)  hangcnt--;
 800370e:	dd02      	ble.n	8003716 <SDR_demodSSB_CW_AGC+0xce>
 8003710:	3801      	subs	r0, #1
 8003712:	f8c8 0000 	str.w	r0, [r8]
}
 8003716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371a:	eef0 7a46 	vmov.f32	s15, s12
		fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);
 800371e:	ed53 6a01 	vldr	s13, [r3, #-4]
			if(CurrentMode == CW) hangcnt = Hcount[CW];
 8003722:	4648      	mov	r0, r9
 8003724:	e7db      	b.n	80036de <SDR_demodSSB_CW_AGC+0x96>
			if(CurrentMode == CW) pk  *= Decay[CW];
 8003726:	ed92 7a00 	vldr	s14, [r2]
 800372a:	edda 7a03 	vldr	s15, [sl, #12]
 800372e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003732:	edc2 7a00 	vstr	s15, [r2]
 8003736:	e7b0      	b.n	800369a <SDR_demodSSB_CW_AGC+0x52>
 8003738:	2400524c 	.word	0x2400524c
 800373c:	2400a844 	.word	0x2400a844
 8003740:	240007e4 	.word	0x240007e4
 8003744:	24001018 	.word	0x24001018
 8003748:	24000708 	.word	0x24000708
 800374c:	2400627c 	.word	0x2400627c
 8003750:	2400a504 	.word	0x2400a504
 8003754:	24001020 	.word	0x24001020

08003758 <pack_call>:
	return m;
}

static long
unsigned int pack_call(char const *callsign)
{
 8003758:	b510      	push	{r4, lr}
	unsigned int i;
	long unsigned int n;
	char call6[6];
	memset(call6,' ',sizeof(call6));
 800375a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
{
 800375e:	b082      	sub	sp, #8
 8003760:	4604      	mov	r4, r0
	memset(call6,' ',sizeof(call6));
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f8ad 3004 	strh.w	r3, [sp, #4]
	// callsign is 6 characters in length. Exactly.
	size_t call_len = strlen(callsign);
 8003768:	f7fc fe1a 	bl	80003a0 <strlen>
	if( call_len > 6 ) {
 800376c:	2806      	cmp	r0, #6
 800376e:	f200 808f 	bhi.w	8003890 <pack_call+0x138>
		return 0;
	}
	if( isdigit((int) callsign[2]) ) {
 8003772:	78a2      	ldrb	r2, [r4, #2]
 8003774:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <pack_call+0x18c>)
 8003776:	5cd2      	ldrb	r2, [r2, r3]
 8003778:	0752      	lsls	r2, r2, #29
 800377a:	d57c      	bpl.n	8003876 <pack_call+0x11e>
		for (i=0; i<call_len; i++) {
 800377c:	b120      	cbz	r0, 8003788 <pack_call+0x30>
			call6[i]=callsign[i];
 800377e:	4602      	mov	r2, r0
 8003780:	4621      	mov	r1, r4
 8003782:	4668      	mov	r0, sp
 8003784:	f00d f920 	bl	80109c8 <memcpy>
		for (i=1; i<call_len+1; i++) {
			call6[i]=callsign[i-1];
		}
	}
	for (i=0; i<6; i++) {
		call6[i]=get_callsign_character_code(call6[i]);
 8003788:	f89d 3000 	ldrb.w	r3, [sp]
	if( ch >=48 && ch <=57 ) { //0-9
 800378c:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003790:	fa5f fe8c 	uxtb.w	lr, ip
 8003794:	f1be 0f09 	cmp.w	lr, #9
 8003798:	d908      	bls.n	80037ac <pack_call+0x54>
	if( ch == 32 ) {  //space
 800379a:	2b20      	cmp	r3, #32
 800379c:	f000 809a 	beq.w	80038d4 <pack_call+0x17c>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80037a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80037a4:	2a19      	cmp	r2, #25
 80037a6:	d976      	bls.n	8003896 <pack_call+0x13e>
	return -1;
 80037a8:	f04f 0eff 	mov.w	lr, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80037ac:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 80037b0:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80037b4:	fa5f f48c 	uxtb.w	r4, ip
 80037b8:	2c09      	cmp	r4, #9
 80037ba:	d907      	bls.n	80037cc <pack_call+0x74>
	if( ch == 32 ) {  //space
 80037bc:	2b20      	cmp	r3, #32
 80037be:	f000 8087 	beq.w	80038d0 <pack_call+0x178>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80037c2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80037c6:	2a19      	cmp	r2, #25
 80037c8:	d979      	bls.n	80038be <pack_call+0x166>
	return -1;
 80037ca:	24ff      	movs	r4, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80037cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 80037d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	2a09      	cmp	r2, #9
 80037d8:	d906      	bls.n	80037e8 <pack_call+0x90>
	if( ch == 32 ) {  //space
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d076      	beq.n	80038cc <pack_call+0x174>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80037de:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80037e2:	2a19      	cmp	r2, #25
 80037e4:	d968      	bls.n	80038b8 <pack_call+0x160>
	return -1;
 80037e6:	22ff      	movs	r2, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 80037e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 80037ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	d906      	bls.n	8003804 <pack_call+0xac>
	if( ch == 32 ) {  //space
 80037f6:	2920      	cmp	r1, #32
 80037f8:	d066      	beq.n	80038c8 <pack_call+0x170>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 80037fa:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80037fe:	2b19      	cmp	r3, #25
 8003800:	d956      	bls.n	80038b0 <pack_call+0x158>
	return -1;
 8003802:	23ff      	movs	r3, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003804:	f89d 0004 	ldrb.w	r0, [sp, #4]
	if( ch >=48 && ch <=57 ) { //0-9
 8003808:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 800380c:	b2c9      	uxtb	r1, r1
 800380e:	2909      	cmp	r1, #9
 8003810:	d906      	bls.n	8003820 <pack_call+0xc8>
	if( ch == 32 ) {  //space
 8003812:	2820      	cmp	r0, #32
 8003814:	d061      	beq.n	80038da <pack_call+0x182>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003816:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800381a:	2919      	cmp	r1, #25
 800381c:	d940      	bls.n	80038a0 <pack_call+0x148>
	return -1;
 800381e:	21ff      	movs	r1, #255	; 0xff
		call6[i]=get_callsign_character_code(call6[i]);
 8003820:	f89d c005 	ldrb.w	ip, [sp, #5]
	if( ch >=48 && ch <=57 ) { //0-9
 8003824:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
 8003828:	b2c0      	uxtb	r0, r0
 800382a:	2809      	cmp	r0, #9
 800382c:	d907      	bls.n	800383e <pack_call+0xe6>
	if( ch == 32 ) {  //space
 800382e:	f1bc 0f20 	cmp.w	ip, #32
 8003832:	d054      	beq.n	80038de <pack_call+0x186>
	if( ch >= 65 && ch <= 90 ) { //A-Z
 8003834:	f1ac 0041 	sub.w	r0, ip, #65	; 0x41
 8003838:	2819      	cmp	r0, #25
 800383a:	d935      	bls.n	80038a8 <pack_call+0x150>
	return -1;
 800383c:	20ff      	movs	r0, #255	; 0xff
	}
	n = call6[0];
	n = n*36+call6[1];
 800383e:	f04f 0c24 	mov.w	ip, #36	; 0x24
	n = n*10+call6[2];
	n = n*27+call6[3]-10;
 8003842:	3b0a      	subs	r3, #10
	n = n*27+call6[4]-10;
 8003844:	390a      	subs	r1, #10
	n = n*27+call6[5]-10;
 8003846:	380a      	subs	r0, #10
	n = n*36+call6[1];
 8003848:	fb1c 4c0e 	smlabb	ip, ip, lr, r4
	n = n*10+call6[2];
 800384c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003850:	eb02 024c 	add.w	r2, r2, ip, lsl #1
	n = n*27+call6[3]-10;
 8003854:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003858:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800385c:	4413      	add	r3, r2
	n = n*27+call6[4]-10;
 800385e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003862:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003866:	440b      	add	r3, r1
	n = n*27+call6[5]-10;
 8003868:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800386c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003870:	4418      	add	r0, r3
	return n;
}
 8003872:	b002      	add	sp, #8
 8003874:	bd10      	pop	{r4, pc}
	} else if( isdigit((int) callsign[1]) ) {
 8003876:	7862      	ldrb	r2, [r4, #1]
 8003878:	5cd3      	ldrb	r3, [r2, r3]
 800387a:	075b      	lsls	r3, r3, #29
 800387c:	d584      	bpl.n	8003788 <pack_call+0x30>
		for (i=1; i<call_len+1; i++) {
 800387e:	2800      	cmp	r0, #0
 8003880:	d082      	beq.n	8003788 <pack_call+0x30>
			call6[i]=callsign[i-1];
 8003882:	4602      	mov	r2, r0
 8003884:	4621      	mov	r1, r4
 8003886:	f10d 0001 	add.w	r0, sp, #1
 800388a:	f00d f89d 	bl	80109c8 <memcpy>
 800388e:	e77b      	b.n	8003788 <pack_call+0x30>
		return 0;
 8003890:	2000      	movs	r0, #0
}
 8003892:	b002      	add	sp, #8
 8003894:	bd10      	pop	{r4, pc}
		return ch-55;
 8003896:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 800389a:	fa5f fe8c 	uxtb.w	lr, ip
 800389e:	e785      	b.n	80037ac <pack_call+0x54>
 80038a0:	f1a0 0137 	sub.w	r1, r0, #55	; 0x37
 80038a4:	b2c9      	uxtb	r1, r1
 80038a6:	e7bb      	b.n	8003820 <pack_call+0xc8>
 80038a8:	f1ac 0037 	sub.w	r0, ip, #55	; 0x37
 80038ac:	b2c0      	uxtb	r0, r0
 80038ae:	e7c6      	b.n	800383e <pack_call+0xe6>
 80038b0:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e7a5      	b.n	8003804 <pack_call+0xac>
 80038b8:	3b37      	subs	r3, #55	; 0x37
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	e794      	b.n	80037e8 <pack_call+0x90>
 80038be:	f1a3 0c37 	sub.w	ip, r3, #55	; 0x37
 80038c2:	fa5f f48c 	uxtb.w	r4, ip
 80038c6:	e781      	b.n	80037cc <pack_call+0x74>
		return 36;
 80038c8:	2324      	movs	r3, #36	; 0x24
 80038ca:	e79b      	b.n	8003804 <pack_call+0xac>
 80038cc:	2224      	movs	r2, #36	; 0x24
 80038ce:	e78b      	b.n	80037e8 <pack_call+0x90>
 80038d0:	2424      	movs	r4, #36	; 0x24
 80038d2:	e77b      	b.n	80037cc <pack_call+0x74>
 80038d4:	f04f 0e24 	mov.w	lr, #36	; 0x24
 80038d8:	e768      	b.n	80037ac <pack_call+0x54>
 80038da:	2124      	movs	r1, #36	; 0x24
 80038dc:	e7a0      	b.n	8003820 <pack_call+0xc8>
 80038de:	2024      	movs	r0, #36	; 0x24
 80038e0:	e7ad      	b.n	800383e <pack_call+0xe6>
 80038e2:	bf00      	nop
 80038e4:	0801de19 	.word	0x0801de19

080038e8 <get_wspr_channel_symbols>:
	memcpy(sym, tmp, sizeof(tmp));
}

int
get_wspr_channel_symbols(char* rawmessage, uint8_t* symbols)
{
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,
			0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,1,
			0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1,1,0,
			0,0
	};
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80038ec:	4abb      	ldr	r2, [pc, #748]	; (8003bdc <get_wspr_channel_symbols+0x2f4>)
	char *callsign, *grid, *powstr;
	char grid4[5], message[23];

	memset(message,0,sizeof(char)*23);
 80038ee:	2300      	movs	r3, #0
{
 80038f0:	4605      	mov	r5, r0
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 80038f2:	4614      	mov	r4, r2
{
 80038f4:	ed2d 8b02 	vpush	{d8}
 80038f8:	b0ed      	sub	sp, #436	; 0x1b4
 80038fa:	af00      	add	r7, sp, #0
	i=0;
	while ( rawmessage[i] != 0 && i<23 ) {
 80038fc:	f890 c000 	ldrb.w	ip, [r0]
	memset(message,0,sizeof(char)*23);
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003902:	f107 0634 	add.w	r6, r7, #52	; 0x34
{
 8003906:	6039      	str	r1, [r7, #0]
	memset(message,0,sizeof(char)*23);
 8003908:	f8c7 302f 	str.w	r3, [r7, #47]	; 0x2f
 800390c:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8003910:	e9c7 3309 	strd	r3, r3, [r7, #36]	; 0x24
	int nu[10]={0,-1,1,0,-1,2,1,0,-1,1};
 8003914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003916:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800391c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003920:	e886 0003 	stmia.w	r6, {r0, r1}
	while ( rawmessage[i] != 0 && i<23 ) {
 8003924:	f1bc 0f00 	cmp.w	ip, #0
 8003928:	d00d      	beq.n	8003946 <get_wspr_channel_symbols+0x5e>
 800392a:	f107 021c 	add.w	r2, r7, #28
 800392e:	1c6b      	adds	r3, r5, #1
 8003930:	43e8      	mvns	r0, r5
 8003932:	4664      	mov	r4, ip
 8003934:	e000      	b.n	8003938 <get_wspr_channel_symbols+0x50>
 8003936:	b134      	cbz	r4, 8003946 <get_wspr_channel_symbols+0x5e>
		message[i]=rawmessage[i];
 8003938:	f802 4b01 	strb.w	r4, [r2], #1
	while ( rawmessage[i] != 0 && i<23 ) {
 800393c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003940:	18c1      	adds	r1, r0, r3
 8003942:	2917      	cmp	r1, #23
 8003944:	d1f7      	bne.n	8003936 <get_wspr_channel_symbols+0x4e>
		i++;
	}

	size_t i1=strcspn(message," ");
 8003946:	49a6      	ldr	r1, [pc, #664]	; (8003be0 <get_wspr_channel_symbols+0x2f8>)
 8003948:	f107 001c 	add.w	r0, r7, #28
 800394c:	f00d fe82 	bl	8011654 <strcspn>
	size_t i2=strcspn(message,"/");
 8003950:	49a4      	ldr	r1, [pc, #656]	; (8003be4 <get_wspr_channel_symbols+0x2fc>)
	size_t i1=strcspn(message," ");
 8003952:	4604      	mov	r4, r0
	size_t i2=strcspn(message,"/");
 8003954:	f107 001c 	add.w	r0, r7, #28
 8003958:	f00d fe7c 	bl	8011654 <strcspn>
	size_t i3=strcspn(message,"<");
 800395c:	49a2      	ldr	r1, [pc, #648]	; (8003be8 <get_wspr_channel_symbols+0x300>)
	size_t i2=strcspn(message,"/");
 800395e:	4606      	mov	r6, r0
	size_t i3=strcspn(message,"<");
 8003960:	f107 001c 	add.w	r0, r7, #28
 8003964:	f00d fe76 	bl	8011654 <strcspn>
	size_t mlen=strlen(message);

	// Use the presence and/or absence of "<" and "/" to decide what
	// type of message. No sanity checks! Beware!

	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003968:	3c04      	subs	r4, #4
	size_t i4=strcspn(message,">");
 800396a:	49a0      	ldr	r1, [pc, #640]	; (8003bec <get_wspr_channel_symbols+0x304>)
	size_t i3=strcspn(message,"<");
 800396c:	4605      	mov	r5, r0
	size_t i4=strcspn(message,">");
 800396e:	f107 001c 	add.w	r0, r7, #28
 8003972:	f00d fe6f 	bl	8011654 <strcspn>
 8003976:	4680      	mov	r8, r0
	size_t mlen=strlen(message);
 8003978:	f107 001c 	add.w	r0, r7, #28
 800397c:	f7fc fd10 	bl	80003a0 <strlen>
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003980:	2c02      	cmp	r4, #2
	size_t mlen=strlen(message);
 8003982:	4603      	mov	r3, r0
	if( i1 > 3 && i1 < 7 && i2 == mlen && i3 == mlen ) {
 8003984:	d804      	bhi.n	8003990 <get_wspr_channel_symbols+0xa8>
 8003986:	4286      	cmp	r6, r0
 8003988:	d102      	bne.n	8003990 <get_wspr_channel_symbols+0xa8>
 800398a:	4285      	cmp	r5, r0
 800398c:	f000 8136 	beq.w	8003bfc <get_wspr_channel_symbols+0x314>
		for (i=0; i<4; i++) {
			grid4[i]=get_locator_character_code(*(grid+i));
		}
		m = pack_grid4_power(grid4,power);

	} else if ( i3 == 0 && i4 < mlen ) {
 8003990:	b90d      	cbnz	r5, 8003996 <get_wspr_channel_symbols+0xae>
 8003992:	4598      	cmp	r8, r3
 8003994:	d37e      	bcc.n	8003a94 <get_wspr_channel_symbols+0x1ac>
		for(i=0; i<j-1; i++) {
			grid6[i]=grid[i+1];
		}
		grid6[5]=grid[0];
		n = pack_call(grid6);
	} else if ( i2 < mlen ) {  // just looks for a right slash
 8003996:	429e      	cmp	r6, r3
 8003998:	d307      	bcc.n	80039aa <get_wspr_channel_symbols+0xc2>
		pack_prefix(callsign, &n1, &ng, &nadd);
		ntype=power + 1 + nadd;
		m=128*ng+ntype+64;
		n=n1;
	} else {
		return 0;
 800399a:	2000      	movs	r0, #0

	for (i=0; i < 162; i++) {
		symbols[i] = 2 * channelbits[i] + pr3[i];
	}
	return 1;
}
 800399c:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80039a0:	46bd      	mov	sp, r7
 80039a2:	ecbd 8b02 	vpop	{d8}
 80039a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		callsign = strtok (message," ");
 80039aa:	498d      	ldr	r1, [pc, #564]	; (8003be0 <get_wspr_channel_symbols+0x2f8>)
 80039ac:	f107 001c 	add.w	r0, r7, #28
 80039b0:	f00d fe62 	bl	8011678 <strtok>
 80039b4:	4604      	mov	r4, r0
 80039b6:	4682      	mov	sl, r0
		if( i2==0 || i2>strlen(callsign) ) return 0; //guards against pathological case
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	d0ee      	beq.n	800399a <get_wspr_channel_symbols+0xb2>
 80039bc:	f7fc fcf0 	bl	80003a0 <strlen>
 80039c0:	42b0      	cmp	r0, r6
 80039c2:	d3ea      	bcc.n	800399a <get_wspr_channel_symbols+0xb2>
		powstr = strtok (NULL," ");
 80039c4:	4986      	ldr	r1, [pc, #536]	; (8003be0 <get_wspr_channel_symbols+0x2f8>)
 80039c6:	2000      	movs	r0, #0
 80039c8:	f00d fe56 	bl	8011678 <strtok>
		int power = atoi (powstr);
 80039cc:	f00c ffbc 	bl	8010948 <atoi>
		if( power < 0 ) power=0;
 80039d0:	283c      	cmp	r0, #60	; 0x3c
 80039d2:	4605      	mov	r5, r0
		power=power+nu[power%10];
 80039d4:	4b86      	ldr	r3, [pc, #536]	; (8003bf0 <get_wspr_channel_symbols+0x308>)
 80039d6:	bfa8      	it	ge
 80039d8:	253c      	movge	r5, #60	; 0x3c
	size_t i1 = strcspn(callsign,"/");
 80039da:	4982      	ldr	r1, [pc, #520]	; (8003be4 <get_wspr_channel_symbols+0x2fc>)
 80039dc:	4620      	mov	r0, r4
 80039de:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
		power=power+nu[power%10];
 80039e2:	fba3 2305 	umull	r2, r3, r3, r5
 80039e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80039f0:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	441d      	add	r5, r3
	size_t i1 = strcspn(callsign,"/");
 80039fa:	f00d fe2b 	bl	8011654 <strcspn>
	if( callsign[i1+2] == 0 ) {
 80039fe:	f100 0802 	add.w	r8, r0, #2
	size_t i1 = strcspn(callsign,"/");
 8003a02:	4606      	mov	r6, r0
	if( callsign[i1+2] == 0 ) {
 8003a04:	f814 3008 	ldrb.w	r3, [r4, r8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 843f 	beq.w	800428c <get_wspr_channel_symbols+0x9a4>
	} else if( callsign[i1+3]==0 ) {
 8003a0e:	eb04 0900 	add.w	r9, r4, r0
 8003a12:	f899 3003 	ldrb.w	r3, [r9, #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 8522 	bne.w	8004460 <get_wspr_channel_symbols+0xb78>
		for (i=0; i<i1; i++) {
 8003a1c:	b300      	cbz	r0, 8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a1e:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8003a20:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 8003a22:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8003a26:	d01b      	beq.n	8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a28:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 8003a2a:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 8003a2c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 8003a30:	d016      	beq.n	8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a32:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 8003a34:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 8003a36:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 8003a3a:	d011      	beq.n	8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a3c:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 8003a3e:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 8003a40:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 8003a44:	d00c      	beq.n	8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a46:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 8003a48:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 8003a4a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 8003a4e:	d007      	beq.n	8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a50:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 8003a52:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 8003a54:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 8003a58:	d002      	beq.n	8003a60 <get_wspr_channel_symbols+0x178>
			call6[i]=callsign[i];
 8003a5a:	79a3      	ldrb	r3, [r4, #6]
 8003a5c:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		*n=pack_call(call6);
 8003a60:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a64:	4618      	mov	r0, r3
 8003a66:	ee08 3a10 	vmov	s16, r3
 8003a6a:	f7ff fe75 	bl	8003758 <pack_call>
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8003a6e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8003a72:	f81a 2008 	ldrb.w	r2, [sl, r8]
		*n=pack_call(call6);
 8003a76:	4604      	mov	r4, r0
		*m=10*(callsign[i1+1]-48)+(callsign[i1+2]-48);
 8003a78:	3b30      	subs	r3, #48	; 0x30
 8003a7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a7e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		*m=60000 + 26 + *m;
 8003a82:	f64e 234a 	movw	r3, #59978	; 0xea4a
 8003a86:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8003a88:	01db      	lsls	r3, r3, #7
		*nadd=1;
 8003a8a:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 8003a8c:	3541      	adds	r5, #65	; 0x41
 8003a8e:	4428      	add	r0, r5
 8003a90:	18c5      	adds	r5, r0, r3
		n=n1;
 8003a92:	e11a      	b.n	8003cca <get_wspr_channel_symbols+0x3e2>
		callsign=strtok(message,"<> ");
 8003a94:	4957      	ldr	r1, [pc, #348]	; (8003bf4 <get_wspr_channel_symbols+0x30c>)
 8003a96:	f107 001c 	add.w	r0, r7, #28
 8003a9a:	f00d fded 	bl	8011678 <strtok>
		grid=strtok(NULL," ");
 8003a9e:	4950      	ldr	r1, [pc, #320]	; (8003be0 <get_wspr_channel_symbols+0x2f8>)
		callsign=strtok(message,"<> ");
 8003aa0:	4606      	mov	r6, r0
		grid=strtok(NULL," ");
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f00d fde8 	bl	8011678 <strtok>
		powstr=strtok(NULL," ");
 8003aa8:	494d      	ldr	r1, [pc, #308]	; (8003be0 <get_wspr_channel_symbols+0x2f8>)
		grid=strtok(NULL," ");
 8003aaa:	4604      	mov	r4, r0
		powstr=strtok(NULL," ");
 8003aac:	2000      	movs	r0, #0
 8003aae:	f00d fde3 	bl	8011678 <strtok>
		callsign=strtok(message,"<> ");
 8003ab2:	46b0      	mov	r8, r6
		int power = atoi(powstr);
 8003ab4:	f00c ff48 	bl	8010948 <atoi>
		if( power < 0 ) power=0;
 8003ab8:	283c      	cmp	r0, #60	; 0x3c
		power=power+nu[power%10];
 8003aba:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <get_wspr_channel_symbols+0x308>)
 8003abc:	bfa8      	it	ge
 8003abe:	203c      	movge	r0, #60	; 0x3c
 8003ac0:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8003ac4:	4630      	mov	r0, r6
		power=power+nu[power%10];
 8003ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ad4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8003ad8:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8003adc:	442a      	add	r2, r5
		ntype=-(power+1);
 8003ade:	43d5      	mvns	r5, r2
		ihash=nhash(callsign,strlen(callsign),(uint32_t)146);
 8003ae0:	f7fc fc5e 	bl	80003a0 <strlen>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003ae4:	4b44      	ldr	r3, [pc, #272]	; (8003bf8 <get_wspr_channel_symbols+0x310>)
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8003ae6:	07b1      	lsls	r1, r6, #30
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003ae8:	4403      	add	r3, r0
	if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {
 8003aea:	f000 8296 	beq.w	800401a <get_wspr_channel_symbols+0x732>
	} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {
 8003aee:	4632      	mov	r2, r6
 8003af0:	07d2      	lsls	r2, r2, #31
 8003af2:	f140 8366 	bpl.w	80041c2 <get_wspr_channel_symbols+0x8da>
		while (length > 12)
 8003af6:	280c      	cmp	r0, #12
 8003af8:	f240 8514 	bls.w	8004524 <get_wspr_channel_symbols+0xc3c>
 8003afc:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8003afe:	461a      	mov	r2, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	46a1      	mov	r9, r4
 8003b04:	469c      	mov	ip, r3
			c += ((uint32_t)k[10])<<16;
 8003b06:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			length -= 12;
 8003b0a:	380c      	subs	r0, #12
			c += ((uint32_t)k[9])<<8;
 8003b0c:	f816 3c03 	ldrb.w	r3, [r6, #-3]
			c += ((uint32_t)k[10])<<16;
 8003b10:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
			c += ((uint32_t)k[11])<<24;
 8003b14:	f816 8c01 	ldrb.w	r8, [r6, #-1]
		while (length > 12)
 8003b18:	280c      	cmp	r0, #12
			c += ((uint32_t)k[11])<<24;
 8003b1a:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
			a += ((uint32_t)k[2])<<16;
 8003b1e:	f816 3c0a 	ldrb.w	r3, [r6, #-10]
 8003b22:	ea4f 4403 	mov.w	r4, r3, lsl #16
			c += k[8];
 8003b26:	f816 3c04 	ldrb.w	r3, [r6, #-4]
			c += ((uint32_t)k[11])<<24;
 8003b2a:	449e      	add	lr, r3
			a += ((uint32_t)k[1])<<8;
 8003b2c:	f816 3c0b 	ldrb.w	r3, [r6, #-11]
			c += ((uint32_t)k[11])<<24;
 8003b30:	eb0e 6e08 	add.w	lr, lr, r8, lsl #24
			mix(a,b,c);
 8003b34:	eb04 2403 	add.w	r4, r4, r3, lsl #8
			b += ((uint32_t)k[6])<<16;
 8003b38:	f816 3c06 	ldrb.w	r3, [r6, #-6]
			c += ((uint32_t)k[11])<<24;
 8003b3c:	4472      	add	r2, lr
			a += k[0];
 8003b3e:	f816 ec0c 	ldrb.w	lr, [r6, #-12]
			b += ((uint32_t)k[6])<<16;
 8003b42:	ea4f 4303 	mov.w	r3, r3, lsl #16
			mix(a,b,c);
 8003b46:	4474      	add	r4, lr
			b += ((uint32_t)k[5])<<8;
 8003b48:	f816 ec07 	ldrb.w	lr, [r6, #-7]
			b += ((uint32_t)k[7])<<24;
 8003b4c:	eb03 230e 	add.w	r3, r3, lr, lsl #8
			a += ((uint32_t)k[3])<<24;
 8003b50:	f816 ec09 	ldrb.w	lr, [r6, #-9]
			mix(a,b,c);
 8003b54:	eb04 640e 	add.w	r4, r4, lr, lsl #24
 8003b58:	46b6      	mov	lr, r6
		while (length > 12)
 8003b5a:	f106 060c 	add.w	r6, r6, #12
			mix(a,b,c);
 8003b5e:	eba4 0402 	sub.w	r4, r4, r2
 8003b62:	4464      	add	r4, ip
			b += k[4];
 8003b64:	f816 cc14 	ldrb.w	ip, [r6, #-20]
			b += ((uint32_t)k[7])<<24;
 8003b68:	4463      	add	r3, ip
 8003b6a:	f816 cc11 	ldrb.w	ip, [r6, #-17]
			mix(a,b,c);
 8003b6e:	ea84 7432 	eor.w	r4, r4, r2, ror #28
			b += ((uint32_t)k[7])<<24;
 8003b72:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 8003b76:	440b      	add	r3, r1
			mix(a,b,c);
 8003b78:	4621      	mov	r1, r4
 8003b7a:	441a      	add	r2, r3
 8003b7c:	eba3 0304 	sub.w	r3, r3, r4
 8003b80:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8003b84:	4411      	add	r1, r2
 8003b86:	eba2 0203 	sub.w	r2, r2, r3
 8003b8a:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8003b8e:	440b      	add	r3, r1
 8003b90:	eba1 0102 	sub.w	r1, r1, r2
 8003b94:	ea81 4432 	eor.w	r4, r1, r2, ror #16
 8003b98:	441a      	add	r2, r3
 8003b9a:	eba3 0304 	sub.w	r3, r3, r4
 8003b9e:	eb04 0c02 	add.w	ip, r4, r2
 8003ba2:	ea83 3174 	eor.w	r1, r3, r4, ror #13
 8003ba6:	eba2 0201 	sub.w	r2, r2, r1
 8003baa:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8003bae:	4461      	add	r1, ip
		while (length > 12)
 8003bb0:	d8a9      	bhi.n	8003b06 <get_wspr_channel_symbols+0x21e>
 8003bb2:	464c      	mov	r4, r9
 8003bb4:	4663      	mov	r3, ip
 8003bb6:	46f0      	mov	r8, lr
		switch(length)                   /* all the case statements fall through */
 8003bb8:	3801      	subs	r0, #1
 8003bba:	280b      	cmp	r0, #11
 8003bbc:	f200 82bd 	bhi.w	800413a <get_wspr_channel_symbols+0x852>
 8003bc0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003bc4:	029b029f 	.word	0x029b029f
 8003bc8:	02930297 	.word	0x02930297
 8003bcc:	028c0290 	.word	0x028c0290
 8003bd0:	02840288 	.word	0x02840288
 8003bd4:	027d0281 	.word	0x027d0281
 8003bd8:	02750279 	.word	0x02750279
 8003bdc:	08014b38 	.word	0x08014b38
 8003be0:	0801dc30 	.word	0x0801dc30
 8003be4:	0801da58 	.word	0x0801da58
 8003be8:	0801da5c 	.word	0x0801da5c
 8003bec:	0801da60 	.word	0x0801da60
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	0801da64 	.word	0x0801da64
 8003bf8:	deadbf81 	.word	0xdeadbf81
		callsign = strtok(message," ");
 8003bfc:	49ce      	ldr	r1, [pc, #824]	; (8003f38 <get_wspr_channel_symbols+0x650>)
 8003bfe:	f107 001c 	add.w	r0, r7, #28
 8003c02:	f00d fd39 	bl	8011678 <strtok>
		grid = strtok(NULL," ");
 8003c06:	49cc      	ldr	r1, [pc, #816]	; (8003f38 <get_wspr_channel_symbols+0x650>)
		callsign = strtok(message," ");
 8003c08:	4604      	mov	r4, r0
		grid = strtok(NULL," ");
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f00d fd34 	bl	8011678 <strtok>
		powstr = strtok(NULL," ");
 8003c10:	49c9      	ldr	r1, [pc, #804]	; (8003f38 <get_wspr_channel_symbols+0x650>)
		grid = strtok(NULL," ");
 8003c12:	4606      	mov	r6, r0
		powstr = strtok(NULL," ");
 8003c14:	2000      	movs	r0, #0
 8003c16:	f00d fd2f 	bl	8011678 <strtok>
		int power = atoi(powstr);
 8003c1a:	f00c fe95 	bl	8010948 <atoi>
 8003c1e:	4605      	mov	r5, r0
		n = pack_call(callsign);
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff fd99 	bl	8003758 <pack_call>
			grid4[i]=get_locator_character_code(*(grid+i));
 8003c26:	7833      	ldrb	r3, [r6, #0]
		n = pack_call(callsign);
 8003c28:	4604      	mov	r4, r0
	if( ch >=48 && ch <=57 ) { //0-9
 8003c2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	2a09      	cmp	r2, #9
 8003c32:	d908      	bls.n	8003c46 <get_wspr_channel_symbols+0x35e>
	if( ch == 32 ) {  //space
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	f000 845c 	beq.w	80044f2 <get_wspr_channel_symbols+0xc0a>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003c3a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003c3e:	b2d2      	uxtb	r2, r2
	return -1;
 8003c40:	2a12      	cmp	r2, #18
 8003c42:	bf28      	it	cs
 8003c44:	22ff      	movcs	r2, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003c46:	7871      	ldrb	r1, [r6, #1]
	if( ch >=48 && ch <=57 ) { //0-9
 8003c48:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b09      	cmp	r3, #9
 8003c50:	d908      	bls.n	8003c64 <get_wspr_channel_symbols+0x37c>
	if( ch == 32 ) {  //space
 8003c52:	2920      	cmp	r1, #32
 8003c54:	f000 844a 	beq.w	80044ec <get_wspr_channel_symbols+0xc04>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003c58:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8003c5c:	b2db      	uxtb	r3, r3
	return -1;
 8003c5e:	2b12      	cmp	r3, #18
 8003c60:	bf28      	it	cs
 8003c62:	23ff      	movcs	r3, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003c64:	78b1      	ldrb	r1, [r6, #2]
	if( ch >=48 && ch <=57 ) { //0-9
 8003c66:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8003c6a:	b2c0      	uxtb	r0, r0
 8003c6c:	2809      	cmp	r0, #9
 8003c6e:	d907      	bls.n	8003c80 <get_wspr_channel_symbols+0x398>
	if( ch == 32 ) {  //space
 8003c70:	2920      	cmp	r1, #32
 8003c72:	f000 8441 	beq.w	80044f8 <get_wspr_channel_symbols+0xc10>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003c76:	3941      	subs	r1, #65	; 0x41
 8003c78:	b2c8      	uxtb	r0, r1
	return -1;
 8003c7a:	2812      	cmp	r0, #18
 8003c7c:	bf28      	it	cs
 8003c7e:	20ff      	movcs	r0, #255	; 0xff
			grid4[i]=get_locator_character_code(*(grid+i));
 8003c80:	78f6      	ldrb	r6, [r6, #3]
	if( ch >=48 && ch <=57 ) { //0-9
 8003c82:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8003c86:	b2c9      	uxtb	r1, r1
 8003c88:	2909      	cmp	r1, #9
 8003c8a:	d908      	bls.n	8003c9e <get_wspr_channel_symbols+0x3b6>
	if( ch == 32 ) {  //space
 8003c8c:	2e20      	cmp	r6, #32
 8003c8e:	f000 8427 	beq.w	80044e0 <get_wspr_channel_symbols+0xbf8>
	if( ch >= 65 && ch <= 82 ) { //A-Z
 8003c92:	f1a6 0141 	sub.w	r1, r6, #65	; 0x41
 8003c96:	b2c9      	uxtb	r1, r1
	return -1;
 8003c98:	2912      	cmp	r1, #18
 8003c9a:	bf28      	it	cs
 8003c9c:	21ff      	movcs	r1, #255	; 0xff
	m=(179-10*grid4[0]-grid4[2])*180+10*grid4[1]+grid4[3];
 8003c9e:	f06f 0609 	mvn.w	r6, #9
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	fb06 f202 	mul.w	r2, r6, r2
 8003ca8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cac:	32b3      	adds	r2, #179	; 0xb3
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	1a12      	subs	r2, r2, r0
 8003cb2:	20b4      	movs	r0, #180	; 0xb4
 8003cb4:	fb00 3302 	mla	r3, r0, r2, r3
 8003cb8:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003cbc:	440b      	add	r3, r1
 8003cbe:	ee08 2a10 	vmov	s16, r2
 8003cc2:	eb05 13c3 	add.w	r3, r5, r3, lsl #7
	m=m*128+power+64;
 8003cc6:	f103 0540 	add.w	r5, r3, #64	; 0x40
	it=0xFF & (n>>20);
 8003cca:	0d23      	lsrs	r3, r4, #20
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003ccc:	f3c5 4283 	ubfx	r2, r5, #18, #4
	memset(data,0,sizeof(data));
 8003cd0:	2600      	movs	r6, #0
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003cd2:	ee18 0a10 	vmov	r0, s16
	it=0xFF & (n>>20);
 8003cd6:	743b      	strb	r3, [r7, #16]
	it=0xFF & (n>>12);
 8003cd8:	0b23      	lsrs	r3, r4, #12
	it= ((n&(0x0F))<<4) + ((m>>18)&(0x0F));
 8003cda:	eb02 1204 	add.w	r2, r2, r4, lsl #4
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003cde:	4631      	mov	r1, r6
	it=0xFF & (n>>12);
 8003ce0:	747b      	strb	r3, [r7, #17]
	it=0xFF & (m>>10);
 8003ce2:	12ab      	asrs	r3, r5, #10
	it=0xFF & (n>>4);
 8003ce4:	0924      	lsrs	r4, r4, #4
	data[3]=it;
 8003ce6:	74fa      	strb	r2, [r7, #19]
	it=0xFF & (m>>10);
 8003ce8:	753b      	strb	r3, [r7, #20]
	it=0xFF & (m>>2);
 8003cea:	10ab      	asrs	r3, r5, #2
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003cec:	22b0      	movs	r2, #176	; 0xb0
	it=0xFF & (n>>4);
 8003cee:	74bc      	strb	r4, [r7, #18]
	it=0xFF & (m>>2);
 8003cf0:	757b      	strb	r3, [r7, #21]
	it=(m & 0x03)<<6 ;
 8003cf2:	01ab      	lsls	r3, r5, #6
	memset(data,0,sizeof(data));
 8003cf4:	f8c7 6017 	str.w	r6, [r7, #23]
	it=(m & 0x03)<<6 ;
 8003cf8:	75bb      	strb	r3, [r7, #22]
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8003cfa:	466b      	mov	r3, sp
			ENCODE(sym,encstate);
 8003cfc:	4d8f      	ldr	r5, [pc, #572]	; (8003f3c <get_wspr_channel_symbols+0x654>)
	uint8_t channelbits[nbytes*8*2]; /* 162 rounded up */
 8003cfe:	ee08 3a90 	vmov	s17, r3
	memset(channelbits, 0, sizeof(channelbits[0])*nbytes*8*2);
 8003d02:	f00c fe6f 	bl	80109e4 <memset>
	while(nbytes-- != 0) {
 8003d06:	f107 0310 	add.w	r3, r7, #16
 8003d0a:	4a8d      	ldr	r2, [pc, #564]	; (8003f40 <get_wspr_channel_symbols+0x658>)
			ENCODE(sym,encstate);
 8003d0c:	4c8d      	ldr	r4, [pc, #564]	; (8003f44 <get_wspr_channel_symbols+0x65c>)
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d14:	60fe      	str	r6, [r7, #12]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d16:	68b8      	ldr	r0, [r7, #8]
	while(nbytes-- != 0) {
 8003d18:	3310      	adds	r3, #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	f810 9b01 	ldrb.w	r9, [r0], #1
 8003d20:	60b8      	str	r0, [r7, #8]
 8003d22:	ea4f 10d9 	mov.w	r0, r9, lsr #7
 8003d26:	f3c9 1880 	ubfx	r8, r9, #6, #1
 8003d2a:	f3c9 1e40 	ubfx	lr, r9, #5, #1
 8003d2e:	ea40 0141 	orr.w	r1, r0, r1, lsl #1
 8003d32:	f3c9 1c00 	ubfx	ip, r9, #4, #1
 8003d36:	f3c9 0680 	ubfx	r6, r9, #2, #1
 8003d3a:	ea48 0841 	orr.w	r8, r8, r1, lsl #1
			ENCODE(sym,encstate);
 8003d3e:	ea01 0005 	and.w	r0, r1, r5
 8003d42:	4021      	ands	r1, r4
 8003d44:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003d48:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d4c:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
			ENCODE(sym,encstate);
 8003d50:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8003d54:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003d58:	b2c9      	uxtb	r1, r1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d5a:	ea4c 0c4e 	orr.w	ip, ip, lr, lsl #1
			ENCODE(sym,encstate);
 8003d5e:	f812 a001 	ldrb.w	sl, [r2, r1]
 8003d62:	b2c0      	uxtb	r0, r0
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d64:	f3c9 01c0 	ubfx	r1, r9, #3, #1
			ENCODE(sym,encstate);
 8003d68:	5c10      	ldrb	r0, [r2, r0]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d6a:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
			ENCODE(sym,encstate);
 8003d6e:	ea4a 0a40 	orr.w	sl, sl, r0, lsl #1
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d72:	f3c9 0040 	ubfx	r0, r9, #1, #1
 8003d76:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 8003d7a:	6079      	str	r1, [r7, #4]
 8003d7c:	f009 0101 	and.w	r1, r9, #1
			ENCODE(sym,encstate);
 8003d80:	ea08 0905 	and.w	r9, r8, r5
 8003d84:	ea08 0804 	and.w	r8, r8, r4
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003d88:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
			ENCODE(sym,encstate);
 8003d8c:	ea89 4919 	eor.w	r9, r9, r9, lsr #16
 8003d90:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8003d94:	ea89 2919 	eor.w	r9, r9, r9, lsr #8
 8003d98:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8003d9c:	fa5f f989 	uxtb.w	r9, r9
 8003da0:	fa5f f888 	uxtb.w	r8, r8
 8003da4:	f812 9009 	ldrb.w	r9, [r2, r9]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003da8:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			ENCODE(sym,encstate);
 8003dac:	f812 8008 	ldrb.w	r8, [r2, r8]
			encstate = (encstate << 1) | ((*data >> i) & 1);
 8003db0:	60f9      	str	r1, [r7, #12]
			ENCODE(sym,encstate);
 8003db2:	ea48 0949 	orr.w	r9, r8, r9, lsl #1
 8003db6:	ea0e 0805 	and.w	r8, lr, r5
 8003dba:	ea0e 0e04 	and.w	lr, lr, r4
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	ea88 4818 	eor.w	r8, r8, r8, lsr #16
 8003dc4:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8003dc8:	ea88 2818 	eor.w	r8, r8, r8, lsr #8
 8003dcc:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8003dd0:	fa5f f888 	uxtb.w	r8, r8
 8003dd4:	fa5f fe8e 	uxtb.w	lr, lr
 8003dd8:	f812 8008 	ldrb.w	r8, [r2, r8]
 8003ddc:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8003de0:	ea4e 0848 	orr.w	r8, lr, r8, lsl #1
 8003de4:	ea0c 0e05 	and.w	lr, ip, r5
 8003de8:	ea0c 0c04 	and.w	ip, ip, r4
 8003dec:	ea8e 4e1e 	eor.w	lr, lr, lr, lsr #16
 8003df0:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8003df4:	ea8e 2e1e 	eor.w	lr, lr, lr, lsr #8
 8003df8:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8003dfc:	fa5f fe8e 	uxtb.w	lr, lr
 8003e00:	fa5f fc8c 	uxtb.w	ip, ip
 8003e04:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8003e08:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8003e0c:	ea4c 0e4e 	orr.w	lr, ip, lr, lsl #1
 8003e10:	ea01 0c05 	and.w	ip, r1, r5
 8003e14:	4021      	ands	r1, r4
 8003e16:	ea8c 4c1c 	eor.w	ip, ip, ip, lsr #16
 8003e1a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8003e1e:	ea8c 2c1c 	eor.w	ip, ip, ip, lsr #8
 8003e22:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8003e26:	fa5f fc8c 	uxtb.w	ip, ip
 8003e2a:	b2c9      	uxtb	r1, r1
 8003e2c:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8003e30:	5c51      	ldrb	r1, [r2, r1]
 8003e32:	ea41 0c4c 	orr.w	ip, r1, ip, lsl #1
 8003e36:	ea06 0105 	and.w	r1, r6, r5
 8003e3a:	4026      	ands	r6, r4
 8003e3c:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
 8003e40:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003e44:	ea81 2111 	eor.w	r1, r1, r1, lsr #8
 8003e48:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003e4c:	b2c9      	uxtb	r1, r1
 8003e4e:	b2f6      	uxtb	r6, r6
 8003e50:	5c51      	ldrb	r1, [r2, r1]
 8003e52:	5d96      	ldrb	r6, [r2, r6]
 8003e54:	ea46 0141 	orr.w	r1, r6, r1, lsl #1
 8003e58:	ea00 0605 	and.w	r6, r0, r5
 8003e5c:	4020      	ands	r0, r4
 8003e5e:	ea86 4616 	eor.w	r6, r6, r6, lsr #16
 8003e62:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003e66:	ea86 2616 	eor.w	r6, r6, r6, lsr #8
 8003e6a:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003e6e:	b2f6      	uxtb	r6, r6
 8003e70:	b2c0      	uxtb	r0, r0
 8003e72:	5d96      	ldrb	r6, [r2, r6]
 8003e74:	5c10      	ldrb	r0, [r2, r0]
 8003e76:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	4028      	ands	r0, r5
 8003e7e:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003e82:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003e86:	b2c0      	uxtb	r0, r0
 8003e88:	f812 b000 	ldrb.w	fp, [r2, r0]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	4020      	ands	r0, r4
 8003e90:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 8003e94:	ea80 2010 	eor.w	r0, r0, r0, lsr #8
 8003e98:	b2c0      	uxtb	r0, r0
 8003e9a:	5c10      	ldrb	r0, [r2, r0]
 8003e9c:	ea40 0b4b 	orr.w	fp, r0, fp, lsl #1
			*symbols++ = sym >> 1;
 8003ea0:	ea4f 006a 	mov.w	r0, sl, asr #1
			*symbols++ = sym & 1;
 8003ea4:	f00a 0a01 	and.w	sl, sl, #1
			*symbols++ = sym >> 1;
 8003ea8:	f803 0c20 	strb.w	r0, [r3, #-32]
 8003eac:	ea4f 0069 	mov.w	r0, r9, asr #1
			*symbols++ = sym & 1;
 8003eb0:	f009 0901 	and.w	r9, r9, #1
 8003eb4:	f803 ac1f 	strb.w	sl, [r3, #-31]
			*symbols++ = sym >> 1;
 8003eb8:	f803 0c1e 	strb.w	r0, [r3, #-30]
 8003ebc:	ea4f 0068 	mov.w	r0, r8, asr #1
			*symbols++ = sym & 1;
 8003ec0:	f008 0801 	and.w	r8, r8, #1
 8003ec4:	f803 9c1d 	strb.w	r9, [r3, #-29]
			*symbols++ = sym >> 1;
 8003ec8:	f803 0c1c 	strb.w	r0, [r3, #-28]
 8003ecc:	ea4f 006e 	mov.w	r0, lr, asr #1
			*symbols++ = sym & 1;
 8003ed0:	f00e 0e01 	and.w	lr, lr, #1
 8003ed4:	f803 8c1b 	strb.w	r8, [r3, #-27]
			*symbols++ = sym >> 1;
 8003ed8:	f803 0c1a 	strb.w	r0, [r3, #-26]
 8003edc:	ea4f 006c 	mov.w	r0, ip, asr #1
			*symbols++ = sym & 1;
 8003ee0:	f803 ec19 	strb.w	lr, [r3, #-25]
 8003ee4:	f00c 0c01 	and.w	ip, ip, #1
			*symbols++ = sym >> 1;
 8003ee8:	f803 0c18 	strb.w	r0, [r3, #-24]
 8003eec:	1048      	asrs	r0, r1, #1
			*symbols++ = sym & 1;
 8003eee:	f001 0101 	and.w	r1, r1, #1
 8003ef2:	f803 cc17 	strb.w	ip, [r3, #-23]
			*symbols++ = sym >> 1;
 8003ef6:	f803 0c16 	strb.w	r0, [r3, #-22]
 8003efa:	1070      	asrs	r0, r6, #1
			*symbols++ = sym & 1;
 8003efc:	f803 1c15 	strb.w	r1, [r3, #-21]
 8003f00:	f006 0601 	and.w	r6, r6, #1
			*symbols++ = sym >> 1;
 8003f04:	f803 0c14 	strb.w	r0, [r3, #-20]
 8003f08:	ea4f 006b 	mov.w	r0, fp, asr #1
	while(nbytes-- != 0) {
 8003f0c:	f107 011b 	add.w	r1, r7, #27
			*symbols++ = sym & 1;
 8003f10:	f00b 0b01 	and.w	fp, fp, #1
			*symbols++ = sym >> 1;
 8003f14:	f803 0c12 	strb.w	r0, [r3, #-18]
	while(nbytes-- != 0) {
 8003f18:	68b8      	ldr	r0, [r7, #8]
			*symbols++ = sym & 1;
 8003f1a:	f803 6c13 	strb.w	r6, [r3, #-19]
	while(nbytes-- != 0) {
 8003f1e:	4288      	cmp	r0, r1
			*symbols++ = sym & 1;
 8003f20:	f803 bc11 	strb.w	fp, [r3, #-17]
	while(nbytes-- != 0) {
 8003f24:	f47f aef7 	bne.w	8003d16 <get_wspr_channel_symbols+0x42e>
 8003f28:	f04f 0e00 	mov.w	lr, #0
 8003f2c:	f107 0b5c 	add.w	fp, r7, #92	; 0x5c
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003f30:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003f48 <get_wspr_channel_symbols+0x660>
	i = p = 0;
 8003f34:	46f4      	mov	ip, lr
 8003f36:	e009      	b.n	8003f4c <get_wspr_channel_symbols+0x664>
 8003f38:	0801dc30 	.word	0x0801dc30
 8003f3c:	f2d05351 	.word	0xf2d05351
 8003f40:	0801da78 	.word	0x0801da78
 8003f44:	e4613c47 	.word	0xe4613c47
 8003f48:	84422110 	.word	0x84422110
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003f4c:	fa5f f58e 	uxtb.w	r5, lr
			tmp[j] = sym[p];
 8003f50:	f50c 72d0 	add.w	r2, ip, #416	; 0x1a0
 8003f54:	f107 0110 	add.w	r1, r7, #16
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003f58:	2300      	movs	r3, #0
			p++;
 8003f5a:	f10c 0001 	add.w	r0, ip, #1
			tmp[j] = sym[p];
 8003f5e:	1854      	adds	r4, r2, r1
		j=((i * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
 8003f60:	462a      	mov	r2, r5
 8003f62:	02ad      	lsls	r5, r5, #10
 8003f64:	18ad      	adds	r5, r5, r2
 8003f66:	f143 0300 	adc.w	r3, r3, #0
 8003f6a:	052a      	lsls	r2, r5, #20
 8003f6c:	051e      	lsls	r6, r3, #20
 8003f6e:	18aa      	adds	r2, r5, r2
 8003f70:	ea46 3615 	orr.w	r6, r6, r5, lsr #12
 8003f74:	eb43 0306 	adc.w	r3, r3, r6
 8003f78:	1892      	adds	r2, r2, r2
 8003f7a:	415b      	adcs	r3, r3
 8003f7c:	ea02 060a 	and.w	r6, r2, sl
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	0235      	lsls	r5, r6, #8
 8003f86:	021a      	lsls	r2, r3, #8
 8003f88:	19ad      	adds	r5, r5, r6
 8003f8a:	ea42 6216 	orr.w	r2, r2, r6, lsr #24
 8003f8e:	ea4f 4105 	mov.w	r1, r5, lsl #16
 8003f92:	eb43 0202 	adc.w	r2, r3, r2
 8003f96:	1869      	adds	r1, r5, r1
 8003f98:	ea4f 4902 	mov.w	r9, r2, lsl #16
 8003f9c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8003fa0:	ea49 4915 	orr.w	r9, r9, r5, lsr #16
 8003fa4:	eb42 0209 	adc.w	r2, r2, r9
 8003fa8:	eb18 0606 	adds.w	r6, r8, r6
 8003fac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003fb0:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8003fb4:	eb43 0302 	adc.w	r3, r3, r2
 8003fb8:	b2db      	uxtb	r3, r3
		if (j < 162 ) {
 8003fba:	2ba1      	cmp	r3, #161	; 0xa1
 8003fbc:	f200 80fa 	bhi.w	80041b4 <get_wspr_channel_symbols+0x8cc>
			p++;
 8003fc0:	fa5f fc80 	uxtb.w	ip, r0
			tmp[j] = sym[p];
 8003fc4:	f814 2cb0 	ldrb.w	r2, [r4, #-176]
	while (p < 162) {
 8003fc8:	f10e 0e01 	add.w	lr, lr, #1
 8003fcc:	f1bc 0fa2 	cmp.w	ip, #162	; 0xa2
			tmp[j] = sym[p];
 8003fd0:	f80b 2003 	strb.w	r2, [fp, r3]
	while (p < 162) {
 8003fd4:	d1ba      	bne.n	8003f4c <get_wspr_channel_symbols+0x664>
	memcpy(sym, tmp, sizeof(tmp));
 8003fd6:	22a2      	movs	r2, #162	; 0xa2
 8003fd8:	4659      	mov	r1, fp
 8003fda:	ee18 0a10 	vmov	r0, s16
 8003fde:	f207 15a1 	addw	r5, r7, #417	; 0x1a1
 8003fe2:	f00c fcf1 	bl	80109c8 <memcpy>
	for (i=0; i < 162; i++) {
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f107 02ff 	add.w	r2, r7, #255	; 0xff
 8003fec:	48d3      	ldr	r0, [pc, #844]	; (800433c <get_wspr_channel_symbols+0xa54>)
 8003fee:	1e59      	subs	r1, r3, #1
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003ff0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003ff4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8003ff8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
	for (i=0; i < 162; i++) {
 8003ffc:	42aa      	cmp	r2, r5
		symbols[i] = 2 * channelbits[i] + pr3[i];
 8003ffe:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i=0; i < 162; i++) {
 8004002:	d1f5      	bne.n	8003ff0 <get_wspr_channel_symbols+0x708>
	return 1;
 8004004:	ee18 3a90 	vmov	r3, s17
 8004008:	2001      	movs	r0, #1
}
 800400a:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 800400e:	469d      	mov	sp, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	ecbd 8b02 	vpop	{d8}
 8004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (length > 12)
 800401a:	280c      	cmp	r0, #12
 800401c:	f240 8263 	bls.w	80044e6 <get_wspr_channel_symbols+0xbfe>
 8004020:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 8004022:	461a      	mov	r2, r3
 8004024:	4619      	mov	r1, r3
 8004026:	46a6      	mov	lr, r4
			c += k[2];
 8004028:	f856 4c04 	ldr.w	r4, [r6, #-4]
			length -= 12;
 800402c:	380c      	subs	r0, #12
 800402e:	46b4      	mov	ip, r6
		while (length > 12)
 8004030:	360c      	adds	r6, #12
			c += k[2];
 8004032:	4422      	add	r2, r4
			mix(a,b,c);
 8004034:	f856 4c18 	ldr.w	r4, [r6, #-24]
		while (length > 12)
 8004038:	280c      	cmp	r0, #12
			mix(a,b,c);
 800403a:	eba4 0402 	sub.w	r4, r4, r2
 800403e:	4423      	add	r3, r4
 8004040:	ea83 7332 	eor.w	r3, r3, r2, ror #28
 8004044:	461c      	mov	r4, r3
			b += k[1];
 8004046:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800404a:	440b      	add	r3, r1
			mix(a,b,c);
 800404c:	4621      	mov	r1, r4
 800404e:	441a      	add	r2, r3
 8004050:	eba3 0304 	sub.w	r3, r3, r4
 8004054:	ea83 63b4 	eor.w	r3, r3, r4, ror #26
 8004058:	4411      	add	r1, r2
 800405a:	eba2 0203 	sub.w	r2, r2, r3
 800405e:	ea82 6233 	eor.w	r2, r2, r3, ror #24
 8004062:	440b      	add	r3, r1
 8004064:	eba1 0102 	sub.w	r1, r1, r2
 8004068:	ea81 4132 	eor.w	r1, r1, r2, ror #16
 800406c:	441a      	add	r2, r3
 800406e:	460c      	mov	r4, r1
 8004070:	eba3 0301 	sub.w	r3, r3, r1
 8004074:	ea83 3171 	eor.w	r1, r3, r1, ror #13
 8004078:	4623      	mov	r3, r4
 800407a:	4413      	add	r3, r2
 800407c:	eba2 0201 	sub.w	r2, r2, r1
 8004080:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8004084:	4419      	add	r1, r3
		while (length > 12)
 8004086:	d8cf      	bhi.n	8004028 <get_wspr_channel_symbols+0x740>
 8004088:	4674      	mov	r4, lr
 800408a:	46e0      	mov	r8, ip
		switch(length)
 800408c:	3801      	subs	r0, #1
 800408e:	280b      	cmp	r0, #11
 8004090:	d853      	bhi.n	800413a <get_wspr_channel_symbols+0x852>
 8004092:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004096:	0036      	.short	0x0036
 8004098:	017d013f 	.word	0x017d013f
 800409c:	01720179 	.word	0x01720179
 80040a0:	0164016b 	.word	0x0164016b
 80040a4:	0159015d 	.word	0x0159015d
 80040a8:	014c0155 	.word	0x014c0155
 80040ac:	0143      	.short	0x0143
		case 12: c+=((uint32_t)k[11])<<24;
 80040ae:	f898 000b 	ldrb.w	r0, [r8, #11]
 80040b2:	eb02 6200 	add.w	r2, r2, r0, lsl #24
		case 11: c+=((uint32_t)k[10])<<16;
 80040b6:	f898 000a 	ldrb.w	r0, [r8, #10]
 80040ba:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		case 10: c+=((uint32_t)k[9])<<8;
 80040be:	f898 0009 	ldrb.w	r0, [r8, #9]
 80040c2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		case 9 : c+=k[8];
 80040c6:	f898 0008 	ldrb.w	r0, [r8, #8]
 80040ca:	4402      	add	r2, r0
		case 8 : b+=((uint32_t)k[7])<<24;
 80040cc:	f898 0007 	ldrb.w	r0, [r8, #7]
 80040d0:	eb01 6100 	add.w	r1, r1, r0, lsl #24
		case 7 : b+=((uint32_t)k[6])<<16;
 80040d4:	f898 0006 	ldrb.w	r0, [r8, #6]
 80040d8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		case 6 : b+=((uint32_t)k[5])<<8;
 80040dc:	f898 0005 	ldrb.w	r0, [r8, #5]
 80040e0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		case 5 : b+=k[4];
 80040e4:	f898 0004 	ldrb.w	r0, [r8, #4]
 80040e8:	4401      	add	r1, r0
		case 4 : a+=((uint32_t)k[3])<<24;
 80040ea:	f898 0003 	ldrb.w	r0, [r8, #3]
 80040ee:	eb03 6300 	add.w	r3, r3, r0, lsl #24
		case 3 : a+=((uint32_t)k[2])<<16;
 80040f2:	f898 0002 	ldrb.w	r0, [r8, #2]
 80040f6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=((uint32_t)k[1])<<8;
 80040fa:	f898 0001 	ldrb.w	r0, [r8, #1]
 80040fe:	eb03 2300 	add.w	r3, r3, r0, lsl #8
		case 1 : a+=k[0];
 8004102:	f898 0000 	ldrb.w	r0, [r8]
 8004106:	4403      	add	r3, r0
	final(a,b,c);
 8004108:	404a      	eors	r2, r1
 800410a:	eba2 40b1 	sub.w	r0, r2, r1, ror #18
 800410e:	4043      	eors	r3, r0
 8004110:	eba3 5370 	sub.w	r3, r3, r0, ror #21
 8004114:	4059      	eors	r1, r3
 8004116:	eba1 12f3 	sub.w	r2, r1, r3, ror #7
 800411a:	ea80 0102 	eor.w	r1, r0, r2
 800411e:	eba1 4132 	sub.w	r1, r1, r2, ror #16
 8004122:	404b      	eors	r3, r1
 8004124:	eba3 7331 	sub.w	r3, r3, r1, ror #28
 8004128:	405a      	eors	r2, r3
 800412a:	eba2 43b3 	sub.w	r3, r2, r3, ror #18
 800412e:	ea81 0203 	eor.w	r2, r1, r3
 8004132:	eba2 2333 	sub.w	r3, r2, r3, ror #8
	c=(32767&c);
 8004136:	f3c3 020e 	ubfx	r2, r3, #0, #15
		m=128*ihash + ntype + 64;
 800413a:	eb05 13c2 	add.w	r3, r5, r2, lsl #7
		memset(grid6,0,sizeof(char)*7);
 800413e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004142:	2200      	movs	r2, #0
		j=strlen(grid);
 8004144:	4620      	mov	r0, r4
		memset(grid6,0,sizeof(char)*7);
 8004146:	ee08 1a10 	vmov	s16, r1
		m=128*ihash + ntype + 64;
 800414a:	f103 0540 	add.w	r5, r3, #64	; 0x40
		memset(grid6,0,sizeof(char)*7);
 800414e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8004152:	f8c7 2103 	str.w	r2, [r7, #259]	; 0x103
		j=strlen(grid);
 8004156:	f7fc f923 	bl	80003a0 <strlen>
		for(i=0; i<j-1; i++) {
 800415a:	3801      	subs	r0, #1
 800415c:	2800      	cmp	r0, #0
 800415e:	dd20      	ble.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004160:	7863      	ldrb	r3, [r4, #1]
		for(i=0; i<j-1; i++) {
 8004162:	2801      	cmp	r0, #1
			grid6[i]=grid[i+1];
 8004164:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for(i=0; i<j-1; i++) {
 8004168:	d01b      	beq.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800416a:	78a3      	ldrb	r3, [r4, #2]
		for(i=0; i<j-1; i++) {
 800416c:	2802      	cmp	r0, #2
			grid6[i]=grid[i+1];
 800416e:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for(i=0; i<j-1; i++) {
 8004172:	d016      	beq.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004174:	78e3      	ldrb	r3, [r4, #3]
		for(i=0; i<j-1; i++) {
 8004176:	2803      	cmp	r0, #3
			grid6[i]=grid[i+1];
 8004178:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for(i=0; i<j-1; i++) {
 800417c:	d011      	beq.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800417e:	7923      	ldrb	r3, [r4, #4]
		for(i=0; i<j-1; i++) {
 8004180:	2804      	cmp	r0, #4
			grid6[i]=grid[i+1];
 8004182:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for(i=0; i<j-1; i++) {
 8004186:	d00c      	beq.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004188:	7963      	ldrb	r3, [r4, #5]
		for(i=0; i<j-1; i++) {
 800418a:	2805      	cmp	r0, #5
			grid6[i]=grid[i+1];
 800418c:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for(i=0; i<j-1; i++) {
 8004190:	d007      	beq.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 8004192:	79a3      	ldrb	r3, [r4, #6]
		for(i=0; i<j-1; i++) {
 8004194:	2806      	cmp	r0, #6
			grid6[i]=grid[i+1];
 8004196:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for(i=0; i<j-1; i++) {
 800419a:	d002      	beq.n	80041a2 <get_wspr_channel_symbols+0x8ba>
			grid6[i]=grid[i+1];
 800419c:	79e3      	ldrb	r3, [r4, #7]
 800419e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		grid6[5]=grid[0];
 80041a2:	7823      	ldrb	r3, [r4, #0]
		n = pack_call(grid6);
 80041a4:	ee18 0a10 	vmov	r0, s16
		grid6[5]=grid[0];
 80041a8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		n = pack_call(grid6);
 80041ac:	f7ff fad4 	bl	8003758 <pack_call>
 80041b0:	4604      	mov	r4, r0
 80041b2:	e58a      	b.n	8003cca <get_wspr_channel_symbols+0x3e2>
	while (p < 162) {
 80041b4:	f1bc 0fa1 	cmp.w	ip, #161	; 0xa1
 80041b8:	f10e 0e01 	add.w	lr, lr, #1
 80041bc:	f67f aec6 	bls.w	8003f4c <get_wspr_channel_symbols+0x664>
 80041c0:	e709      	b.n	8003fd6 <get_wspr_channel_symbols+0x6ee>
		while (length > 12)
 80041c2:	280c      	cmp	r0, #12
 80041c4:	f240 81ab 	bls.w	800451e <get_wspr_channel_symbols+0xc36>
 80041c8:	360c      	adds	r6, #12
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80041ca:	461a      	mov	r2, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	46a6      	mov	lr, r4
			c += k[4] + (((uint32_t)k[5])<<16);
 80041d0:	f836 cc02 	ldrh.w	ip, [r6, #-2]
			length -= 12;
 80041d4:	380c      	subs	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 80041d6:	f836 4c04 	ldrh.w	r4, [r6, #-4]
		while (length > 12)
 80041da:	280c      	cmp	r0, #12
			c += k[4] + (((uint32_t)k[5])<<16);
 80041dc:	eb04 440c 	add.w	r4, r4, ip, lsl #16
			a += k[0] + (((uint32_t)k[1])<<16);
 80041e0:	f836 cc0a 	ldrh.w	ip, [r6, #-10]
			c += k[4] + (((uint32_t)k[5])<<16);
 80041e4:	4422      	add	r2, r4
 80041e6:	4614      	mov	r4, r2
			a += k[0] + (((uint32_t)k[1])<<16);
 80041e8:	f836 2c0c 	ldrh.w	r2, [r6, #-12]
			mix(a,b,c);
 80041ec:	eb02 420c 	add.w	r2, r2, ip, lsl #16
			b += k[2] + (((uint32_t)k[3])<<16);
 80041f0:	f836 cc06 	ldrh.w	ip, [r6, #-6]
			mix(a,b,c);
 80041f4:	eba2 0204 	sub.w	r2, r2, r4
 80041f8:	441a      	add	r2, r3
			b += k[2] + (((uint32_t)k[3])<<16);
 80041fa:	f836 3c08 	ldrh.w	r3, [r6, #-8]
 80041fe:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8004202:	46b4      	mov	ip, r6
			mix(a,b,c);
 8004204:	ea82 7234 	eor.w	r2, r2, r4, ror #28
		while (length > 12)
 8004208:	f106 060c 	add.w	r6, r6, #12
			b += k[2] + (((uint32_t)k[3])<<16);
 800420c:	440b      	add	r3, r1
			mix(a,b,c);
 800420e:	eb03 0104 	add.w	r1, r3, r4
 8004212:	eba3 0302 	sub.w	r3, r3, r2
 8004216:	ea83 63b2 	eor.w	r3, r3, r2, ror #26
 800421a:	440a      	add	r2, r1
 800421c:	eba1 0103 	sub.w	r1, r1, r3
 8004220:	ea81 6133 	eor.w	r1, r1, r3, ror #24
 8004224:	4413      	add	r3, r2
 8004226:	eba2 0201 	sub.w	r2, r2, r1
 800422a:	eb01 0403 	add.w	r4, r1, r3
 800422e:	ea82 4231 	eor.w	r2, r2, r1, ror #16
 8004232:	eba3 0302 	sub.w	r3, r3, r2
 8004236:	ea83 3172 	eor.w	r1, r3, r2, ror #13
 800423a:	eb02 0304 	add.w	r3, r2, r4
 800423e:	eba4 0201 	sub.w	r2, r4, r1
 8004242:	ea82 7231 	eor.w	r2, r2, r1, ror #28
 8004246:	4419      	add	r1, r3
		while (length > 12)
 8004248:	d8c2      	bhi.n	80041d0 <get_wspr_channel_symbols+0x8e8>
 800424a:	4674      	mov	r4, lr
 800424c:	46e0      	mov	r8, ip
		switch(length)
 800424e:	3801      	subs	r0, #1
 8004250:	280b      	cmp	r0, #11
 8004252:	f63f af72 	bhi.w	800413a <get_wspr_channel_symbols+0x852>
 8004256:	a601      	add	r6, pc, #4	; (adr r6, 800425c <get_wspr_channel_symbols+0x974>)
 8004258:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 800425c:	08004103 	.word	0x08004103
 8004260:	08004315 	.word	0x08004315
 8004264:	0800430d 	.word	0x0800430d
 8004268:	08004411 	.word	0x08004411
 800426c:	0800440b 	.word	0x0800440b
 8004270:	080043f5 	.word	0x080043f5
 8004274:	080043ed 	.word	0x080043ed
 8004278:	080043cf 	.word	0x080043cf
 800427c:	080043c9 	.word	0x080043c9
 8004280:	080043a5 	.word	0x080043a5
 8004284:	0800439d 	.word	0x0800439d
 8004288:	08004421 	.word	0x08004421
		for (i=0; i<i1; i++) {
 800428c:	b300      	cbz	r0, 80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 800428e:	7823      	ldrb	r3, [r4, #0]
		for (i=0; i<i1; i++) {
 8004290:	2801      	cmp	r0, #1
			call6[i]=callsign[i];
 8004292:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
		for (i=0; i<i1; i++) {
 8004296:	d01b      	beq.n	80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 8004298:	7863      	ldrb	r3, [r4, #1]
		for (i=0; i<i1; i++) {
 800429a:	2802      	cmp	r0, #2
			call6[i]=callsign[i];
 800429c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
		for (i=0; i<i1; i++) {
 80042a0:	d016      	beq.n	80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80042a2:	78a3      	ldrb	r3, [r4, #2]
		for (i=0; i<i1; i++) {
 80042a4:	2803      	cmp	r0, #3
			call6[i]=callsign[i];
 80042a6:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
		for (i=0; i<i1; i++) {
 80042aa:	d011      	beq.n	80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80042ac:	78e3      	ldrb	r3, [r4, #3]
		for (i=0; i<i1; i++) {
 80042ae:	2804      	cmp	r0, #4
			call6[i]=callsign[i];
 80042b0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		for (i=0; i<i1; i++) {
 80042b4:	d00c      	beq.n	80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80042b6:	7923      	ldrb	r3, [r4, #4]
		for (i=0; i<i1; i++) {
 80042b8:	2805      	cmp	r0, #5
			call6[i]=callsign[i];
 80042ba:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
		for (i=0; i<i1; i++) {
 80042be:	d007      	beq.n	80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80042c0:	7963      	ldrb	r3, [r4, #5]
		for (i=0; i<i1; i++) {
 80042c2:	2806      	cmp	r0, #6
			call6[i]=callsign[i];
 80042c4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		for (i=0; i<i1; i++) {
 80042c8:	d002      	beq.n	80042d0 <get_wspr_channel_symbols+0x9e8>
			call6[i]=callsign[i];
 80042ca:	79a3      	ldrb	r3, [r4, #6]
 80042cc:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		call6[i] = '\0';
 80042d0:	f107 0210 	add.w	r2, r7, #16
 80042d4:	f506 73d0 	add.w	r3, r6, #416	; 0x1a0
 80042d8:	4413      	add	r3, r2
		*n=pack_call(call6);
 80042da:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80042de:	4610      	mov	r0, r2
 80042e0:	ee08 2a10 	vmov	s16, r2
		call6[i] = '\0';
 80042e4:	2200      	movs	r2, #0
 80042e6:	f803 2cb0 	strb.w	r2, [r3, #-176]
		*n=pack_call(call6);
 80042ea:	f7ff fa35 	bl	8003758 <pack_call>
		int nc = callsign[i1+1];
 80042ee:	4653      	mov	r3, sl
		*n=pack_call(call6);
 80042f0:	4604      	mov	r4, r0
		int nc = callsign[i1+1];
 80042f2:	4433      	add	r3, r6
 80042f4:	785a      	ldrb	r2, [r3, #1]
		if( nc >= 48 && nc <= 57 ) {
 80042f6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	f200 80a6 	bhi.w	800444c <get_wspr_channel_symbols+0xb64>
		*m=60000-32768+*m;
 8004300:	f646 2330 	movw	r3, #27184	; 0x6a30
 8004304:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 8004306:	01db      	lsls	r3, r3, #7
 8004308:	f7ff bbbf 	b.w	8003a8a <get_wspr_channel_symbols+0x1a2>
		case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */
 800430c:	f898 0002 	ldrb.w	r0, [r8, #2]
 8004310:	eb03 4300 	add.w	r3, r3, r0, lsl #16
		case 2 : a+=k[0];
 8004314:	f8b8 0000 	ldrh.w	r0, [r8]
 8004318:	4403      	add	r3, r0
		break;
 800431a:	e6f5      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;
 800431c:	4646      	mov	r6, r8
 800431e:	f8d8 0008 	ldr.w	r0, [r8, #8]
		case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;
 8004322:	4402      	add	r2, r0
 8004324:	6870      	ldr	r0, [r6, #4]
 8004326:	4401      	add	r1, r0
 8004328:	6830      	ldr	r0, [r6, #0]
 800432a:	4403      	add	r3, r0
 800432c:	e6ec      	b.n	8004108 <get_wspr_channel_symbols+0x820>
 800432e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004332:	4646      	mov	r6, r8
 8004334:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004338:	e7f3      	b.n	8004322 <get_wspr_channel_symbols+0xa3a>
 800433a:	bf00      	nop
 800433c:	0801db77 	.word	0x0801db77
		case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;
 8004340:	4646      	mov	r6, r8
 8004342:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8004346:	e7ec      	b.n	8004322 <get_wspr_channel_symbols+0xa3a>
		case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;
 8004348:	4646      	mov	r6, r8
 800434a:	f898 0008 	ldrb.w	r0, [r8, #8]
 800434e:	e7e8      	b.n	8004322 <get_wspr_channel_symbols+0xa3a>
		case 8 : b+=k[1]; a+=k[0]; break;
 8004350:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004354:	4401      	add	r1, r0
 8004356:	f8d8 0000 	ldr.w	r0, [r8]
 800435a:	4403      	add	r3, r0
 800435c:	e6d4      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 7 : b+=k[1]&0xffffff; a+=k[0]; break;
 800435e:	e9d8 6000 	ldrd	r6, r0, [r8]
 8004362:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004366:	4433      	add	r3, r6
 8004368:	4401      	add	r1, r0
 800436a:	e6cd      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 6 : b+=k[1]&0xffff; a+=k[0]; break;
 800436c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8004370:	4401      	add	r1, r0
 8004372:	f8d8 0000 	ldr.w	r0, [r8]
 8004376:	4403      	add	r3, r0
 8004378:	e6c6      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k[1]&0xff; a+=k[0]; break;
 800437a:	f898 0004 	ldrb.w	r0, [r8, #4]
 800437e:	4401      	add	r1, r0
 8004380:	f8d8 0000 	ldr.w	r0, [r8]
 8004384:	4403      	add	r3, r0
 8004386:	e6bf      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 4 : a+=k[0]; break;
 8004388:	f8d8 0000 	ldr.w	r0, [r8]
 800438c:	4403      	add	r3, r0
 800438e:	e6bb      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 3 : a+=k[0]&0xffffff; break;
 8004390:	f8d8 0000 	ldr.w	r0, [r8]
 8004394:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004398:	4403      	add	r3, r0
 800439a:	e6b5      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */
 800439c:	f898 000a 	ldrb.w	r0, [r8, #10]
 80043a0:	eb02 4200 	add.w	r2, r2, r0, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 80043a4:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80043a8:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80043aa:	f8b8 0000 	ldrh.w	r0, [r8]
 80043ae:	4418      	add	r0, r3
		case 10: c+=k[4];
 80043b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80043b4:	441a      	add	r2, r3
		b+=k[2]+(((uint32_t)k[3])<<16);
 80043b6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80043ba:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80043be:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80043c2:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80043c6:	e69f      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 9 : c+=k8[8];                      /* fall through */
 80043c8:	f898 0008 	ldrb.w	r0, [r8, #8]
 80043cc:	4402      	add	r2, r0
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80043ce:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80043d2:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 80043d4:	f8b8 0000 	ldrh.w	r0, [r8]
 80043d8:	4418      	add	r0, r3
		case 8 : b+=k[2]+(((uint32_t)k[3])<<16);
 80043da:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80043de:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80043e2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80043e6:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 80043ea:	e68d      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */
 80043ec:	f898 0006 	ldrb.w	r0, [r8, #6]
 80043f0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 80043f4:	f8b8 0000 	ldrh.w	r0, [r8]
 80043f8:	4418      	add	r0, r3
		case 6 : b+=k[2];
 80043fa:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80043fe:	4419      	add	r1, r3
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004400:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004404:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 8004408:	e67e      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 5 : b+=k8[4];                      /* fall through */
 800440a:	f898 0004 	ldrb.w	r0, [r8, #4]
 800440e:	4401      	add	r1, r0
		case 4 : a+=k[0]+(((uint32_t)k[1])<<16);
 8004410:	f8b8 0000 	ldrh.w	r0, [r8]
 8004414:	4418      	add	r0, r3
 8004416:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800441a:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800441e:	e673      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8004420:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8004424:	4402      	add	r2, r0
		b+=k[2]+(((uint32_t)k[3])<<16);
 8004426:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800442a:	4401      	add	r1, r0
		a+=k[0]+(((uint32_t)k[1])<<16);
 800442c:	f8b8 0000 	ldrh.w	r0, [r8]
 8004430:	4418      	add	r0, r3
		case 12: c+=k[4]+(((uint32_t)k[5])<<16);
 8004432:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8004436:	eb02 4203 	add.w	r2, r2, r3, lsl #16
		b+=k[2]+(((uint32_t)k[3])<<16);
 800443a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800443e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
		a+=k[0]+(((uint32_t)k[1])<<16);
 8004442:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8004446:	eb00 4303 	add.w	r3, r0, r3, lsl #16
		break;
 800444a:	e65d      	b.n	8004108 <get_wspr_channel_symbols+0x820>
		} else if ( nc >= 65 && nc <= 90 ) {
 800444c:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8004450:	2b19      	cmp	r3, #25
 8004452:	d854      	bhi.n	80044fe <get_wspr_channel_symbols+0xc16>
		*m=60000-32768+*m;
 8004454:	f646 2329 	movw	r3, #27177	; 0x6a29
 8004458:	4413      	add	r3, r2
		m=128*ng+ntype+64;
 800445a:	01db      	lsls	r3, r3, #7
 800445c:	f7ff bb15 	b.w	8003a8a <get_wspr_channel_symbols+0x1a2>
		char const * pfx = strtok (callsign,"/");
 8004460:	4936      	ldr	r1, [pc, #216]	; (800453c <get_wspr_channel_symbols+0xc54>)
 8004462:	4620      	mov	r0, r4
 8004464:	f00d f908 	bl	8011678 <strtok>
		char const * call = strtok(NULL," ");
 8004468:	4935      	ldr	r1, [pc, #212]	; (8004540 <get_wspr_channel_symbols+0xc58>)
		char const * pfx = strtok (callsign,"/");
 800446a:	4606      	mov	r6, r0
		char const * call = strtok(NULL," ");
 800446c:	2000      	movs	r0, #0
 800446e:	f00d f903 	bl	8011678 <strtok>
		*n = pack_call (call);
 8004472:	f7ff f971 	bl	8003758 <pack_call>
 8004476:	4604      	mov	r4, r0
		size_t plen=strlen (pfx);
 8004478:	4630      	mov	r0, r6
 800447a:	f7fb ff91 	bl	80003a0 <strlen>
		if( plen ==1 ) {
 800447e:	2801      	cmp	r0, #1
 8004480:	d042      	beq.n	8004508 <get_wspr_channel_symbols+0xc20>
		} else if( plen == 2 ) {
 8004482:	2802      	cmp	r0, #2
 8004484:	d03e      	beq.n	8004504 <get_wspr_channel_symbols+0xc1c>
		for (i=0; i<plen; i++) {
 8004486:	2800      	cmp	r0, #0
 8004488:	d050      	beq.n	800452c <get_wspr_channel_symbols+0xc44>
			*m=0;
 800448a:	2300      	movs	r3, #0
 800448c:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004490:	46d0      	mov	r8, sl
			} else if ( nc >= 65 && nc <= 90 ) {
 8004492:	4662      	mov	r2, ip
			int nc = callsign[i];
 8004494:	f81c 6f01 	ldrb.w	r6, [ip, #1]!
			if( nc >= 48 && nc <= 57 ) {
 8004498:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
			} else if ( nc >= 65 && nc <= 90 ) {
 800449c:	f1a6 0e41 	sub.w	lr, r6, #65	; 0x41
			if( nc >= 48 && nc <= 57 ) {
 80044a0:	2909      	cmp	r1, #9
 80044a2:	d906      	bls.n	80044b2 <get_wspr_channel_symbols+0xbca>
			} else if ( nc >= 65 && nc <= 90 ) {
 80044a4:	f1be 0f19 	cmp.w	lr, #25
				nc=36;
 80044a8:	f04f 0124 	mov.w	r1, #36	; 0x24
				nc=nc-65+10;
 80044ac:	bf98      	it	ls
 80044ae:	f1a6 0137 	subls.w	r1, r6, #55	; 0x37
		for (i=0; i<plen; i++) {
 80044b2:	4646      	mov	r6, r8
 80044b4:	3202      	adds	r2, #2
 80044b6:	1b92      	subs	r2, r2, r6
			*m=37*(*m)+nc;
 80044b8:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
		for (i=0; i<plen; i++) {
 80044bc:	4290      	cmp	r0, r2
			*m=37*(*m)+nc;
 80044be:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80044c2:	440b      	add	r3, r1
		for (i=0; i<plen; i++) {
 80044c4:	d8e5      	bhi.n	8004492 <get_wspr_channel_symbols+0xbaa>
		if( *m > 32768 ) {
 80044c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ca:	dd20      	ble.n	800450e <get_wspr_channel_symbols+0xc26>
			*m=*m-32768;
 80044cc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80044d0:	f507 7280 	add.w	r2, r7, #256	; 0x100
			*nadd=1;
 80044d4:	2001      	movs	r0, #1
		m=128*ng+ntype+64;
 80044d6:	01db      	lsls	r3, r3, #7
 80044d8:	ee08 2a10 	vmov	s16, r2
 80044dc:	f7ff bad6 	b.w	8003a8c <get_wspr_channel_symbols+0x1a4>
		return 36;
 80044e0:	2124      	movs	r1, #36	; 0x24
 80044e2:	f7ff bbdc 	b.w	8003c9e <get_wspr_channel_symbols+0x3b6>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 80044e6:	461a      	mov	r2, r3
 80044e8:	4619      	mov	r1, r3
 80044ea:	e5cf      	b.n	800408c <get_wspr_channel_symbols+0x7a4>
		return 36;
 80044ec:	2324      	movs	r3, #36	; 0x24
 80044ee:	f7ff bbb9 	b.w	8003c64 <get_wspr_channel_symbols+0x37c>
 80044f2:	2224      	movs	r2, #36	; 0x24
 80044f4:	f7ff bba7 	b.w	8003c46 <get_wspr_channel_symbols+0x35e>
 80044f8:	2024      	movs	r0, #36	; 0x24
 80044fa:	f7ff bbc1 	b.w	8003c80 <get_wspr_channel_symbols+0x398>
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <get_wspr_channel_symbols+0xc5c>)
		*m=60000-32768+*m;
 8004500:	f7ff bac3 	b.w	8003a8a <get_wspr_channel_symbols+0x1a2>
			*m=36;
 8004504:	2324      	movs	r3, #36	; 0x24
		for (i=0; i<plen; i++) {
 8004506:	e7c1      	b.n	800448c <get_wspr_channel_symbols+0xba4>
			*m=37*(*m)+36;
 8004508:	f44f 63ab 	mov.w	r3, #1368	; 0x558
 800450c:	e7be      	b.n	800448c <get_wspr_channel_symbols+0xba4>
 800450e:	f507 7280 	add.w	r2, r7, #256	; 0x100
		m=128*ng+ntype+64;
 8004512:	01db      	lsls	r3, r3, #7
		*nadd=0;
 8004514:	2000      	movs	r0, #0
 8004516:	ee08 2a10 	vmov	s16, r2
 800451a:	f7ff bab7 	b.w	8003a8c <get_wspr_channel_symbols+0x1a4>
	a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;
 800451e:	461a      	mov	r2, r3
 8004520:	4619      	mov	r1, r3
 8004522:	e694      	b.n	800424e <get_wspr_channel_symbols+0x966>
 8004524:	461a      	mov	r2, r3
 8004526:	4619      	mov	r1, r3
 8004528:	f7ff bb46 	b.w	8003bb8 <get_wspr_channel_symbols+0x2d0>
 800452c:	f507 7280 	add.w	r2, r7, #256	; 0x100
		for (i=0; i<plen; i++) {
 8004530:	4603      	mov	r3, r0
 8004532:	ee08 2a10 	vmov	s16, r2
 8004536:	f7ff baa9 	b.w	8003a8c <get_wspr_channel_symbols+0x1a4>
 800453a:	bf00      	nop
 800453c:	0801da58 	.word	0x0801da58
 8004540:	0801dc30 	.word	0x0801dc30
 8004544:	00354300 	.word	0x00354300

08004548 <SendWSPR>:
{
 8004548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800454c:	496c      	ldr	r1, [pc, #432]	; (8004700 <SendWSPR+0x1b8>)
 800454e:	486d      	ldr	r0, [pc, #436]	; (8004704 <SendWSPR+0x1bc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004550:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8004740 <SendWSPR+0x1f8>
 8004554:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8004744 <SendWSPR+0x1fc>
{
 8004558:	ed2d 8b02 	vpush	{d8}
	(void) get_wspr_channel_symbols("I4NZX JN54 30", syms);
 800455c:	f7ff f9c4 	bl	80038e8 <get_wspr_channel_symbols>
	LOfreq = (double)WSPR_FREQ;
 8004560:	4b69      	ldr	r3, [pc, #420]	; (8004708 <SendWSPR+0x1c0>)
 8004562:	486a      	ldr	r0, [pc, #424]	; (800470c <SendWSPR+0x1c4>)
	LastTXFreq = LOfreq;
 8004564:	4a6a      	ldr	r2, [pc, #424]	; (8004710 <SendWSPR+0x1c8>)
	LOfreq = (double)WSPR_FREQ;
 8004566:	6003      	str	r3, [r0, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 8004568:	496a      	ldr	r1, [pc, #424]	; (8004714 <SendWSPR+0x1cc>)
 800456a:	486b      	ldr	r0, [pc, #428]	; (8004718 <SendWSPR+0x1d0>)
	LastTXFreq = LOfreq;
 800456c:	6013      	str	r3, [r2, #0]
	SetWSPRPLLCoeff((double)WSPR_FREQ, FracDivCoeff, FracPWMCoeff);
 800456e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80046f8 <SendWSPR+0x1b0>
 8004572:	f000 fa81 	bl	8004a78 <SetWSPRPLLCoeff>
	WSPRTXFraction = 20; //percentage
 8004576:	2214      	movs	r2, #20
 8004578:	4968      	ldr	r1, [pc, #416]	; (800471c <SendWSPR+0x1d4>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 800457a:	f8d8 3000 	ldr.w	r3, [r8]
	WSPRTXFraction = 20; //percentage
 800457e:	700a      	strb	r2, [r1, #0]
				LED_GREEN_ON;
 8004580:	4d67      	ldr	r5, [pc, #412]	; (8004720 <SendWSPR+0x1d8>)
			if(KEYER_DASH || KEYER_DOT)
 8004582:	4c68      	ldr	r4, [pc, #416]	; (8004724 <SendWSPR+0x1dc>)
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 8004584:	e014      	b.n	80045b0 <SendWSPR+0x68>
 8004586:	f8db 3000 	ldr.w	r3, [fp]
 800458a:	07da      	lsls	r2, r3, #31
 800458c:	d51e      	bpl.n	80045cc <SendWSPR+0x84>
				LED_GREEN_ON;
 800458e:	2201      	movs	r2, #1
 8004590:	f005 fbe6 	bl	8009d60 <HAL_GPIO_WritePin>
			if(KEYER_DASH || KEYER_DOT)
 8004594:	2140      	movs	r1, #64	; 0x40
 8004596:	4620      	mov	r0, r4
 8004598:	f005 fbdc 	bl	8009d54 <HAL_GPIO_ReadPin>
 800459c:	4603      	mov	r3, r0
 800459e:	2180      	movs	r1, #128	; 0x80
 80045a0:	4620      	mov	r0, r4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d036      	beq.n	8004614 <SendWSPR+0xcc>
 80045a6:	f005 fbd5 	bl	8009d54 <HAL_GPIO_ReadPin>
 80045aa:	b398      	cbz	r0, 8004614 <SendWSPR+0xcc>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80045ac:	f8d8 3000 	ldr.w	r3, [r8]
				LED_GREEN_OFF;
 80045b0:	2200      	movs	r2, #0
				LED_GREEN_ON;
 80045b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045b6:	4628      	mov	r0, r5
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0e4      	beq.n	8004586 <SendWSPR+0x3e>
			if (SystemSeconds % 2 == 0)
 80045bc:	07de      	lsls	r6, r3, #31
 80045be:	d5e6      	bpl.n	800458e <SendWSPR+0x46>
				LED_GREEN_OFF;
 80045c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045c4:	4628      	mov	r0, r5
 80045c6:	f005 fbcb 	bl	8009d60 <HAL_GPIO_WritePin>
 80045ca:	e7e3      	b.n	8004594 <SendWSPR+0x4c>
		if (((rand() % 101) > WSPRTXFraction) && (!WSPRFirstTime))
 80045cc:	f00c ffdc 	bl	8011588 <rand>
 80045d0:	4b52      	ldr	r3, [pc, #328]	; (800471c <SendWSPR+0x1d4>)
 80045d2:	2165      	movs	r1, #101	; 0x65
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	4b54      	ldr	r3, [pc, #336]	; (8004728 <SendWSPR+0x1e0>)
 80045d8:	fb83 3400 	smull	r3, r4, r3, r0
 80045dc:	17c3      	asrs	r3, r0, #31
 80045de:	ebc3 1324 	rsb	r3, r3, r4, asr #4
 80045e2:	4c52      	ldr	r4, [pc, #328]	; (800472c <SendWSPR+0x1e4>)
 80045e4:	fb01 0013 	mls	r0, r1, r3, r0
 80045e8:	4290      	cmp	r0, r2
 80045ea:	dd17      	ble.n	800461c <SendWSPR+0xd4>
 80045ec:	7823      	ldrb	r3, [r4, #0]
 80045ee:	b9ab      	cbnz	r3, 800461c <SendWSPR+0xd4>
				if(KEYER_DASH || KEYER_DOT)
 80045f0:	4c4c      	ldr	r4, [pc, #304]	; (8004724 <SendWSPR+0x1dc>)
 80045f2:	e002      	b.n	80045fa <SendWSPR+0xb2>
 80045f4:	f005 fbae 	bl	8009d54 <HAL_GPIO_ReadPin>
 80045f8:	b160      	cbz	r0, 8004614 <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 80045fa:	f8d8 3000 	ldr.w	r3, [r8]
				if(KEYER_DASH || KEYER_DOT)
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 8004602:	2b01      	cmp	r3, #1
 8004604:	d0bc      	beq.n	8004580 <SendWSPR+0x38>
				if(KEYER_DASH || KEYER_DOT)
 8004606:	f005 fba5 	bl	8009d54 <HAL_GPIO_ReadPin>
 800460a:	4603      	mov	r3, r0
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	4620      	mov	r0, r4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ef      	bne.n	80045f4 <SendWSPR+0xac>
}
 8004614:	ecbd 8b02 	vpop	{d8}
 8004618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_ADCEx_MultiModeStart_DMA(HAdc1,
 800461c:	4b44      	ldr	r3, [pc, #272]	; (8004730 <SendWSPR+0x1e8>)
 800461e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004622:	4944      	ldr	r1, [pc, #272]	; (8004734 <SendWSPR+0x1ec>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f003 fbdb 	bl	8007de0 <HAL_ADCEx_MultiModeStart_DMA>
 800462a:	2800      	cmp	r0, #0
 800462c:	d161      	bne.n	80046f2 <SendWSPR+0x1aa>
			WSPRFirstTime = 0;
 800462e:	2300      	movs	r3, #0
			TXSwitch(1);
 8004630:	2001      	movs	r0, #1
			WSPRFirstTime = 0;
 8004632:	7023      	strb	r3, [r4, #0]
			TXSwitch(1);
 8004634:	f000 fcbc 	bl	8004fb0 <TXSwitch>
			CarrierEnable(1);
 8004638:	2001      	movs	r0, #1
				if(KEYER_DASH || KEYER_DOT)
 800463a:	4c3a      	ldr	r4, [pc, #232]	; (8004724 <SendWSPR+0x1dc>)
			CarrierEnable(1);
 800463c:	f000 fd1c 	bl	8005078 <CarrierEnable>
			while (SystemSeconds != 1)
 8004640:	e00a      	b.n	8004658 <SendWSPR+0x110>
				if(KEYER_DASH || KEYER_DOT)
 8004642:	f005 fb87 	bl	8009d54 <HAL_GPIO_ReadPin>
 8004646:	4603      	mov	r3, r0
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	4620      	mov	r0, r4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0e1      	beq.n	8004614 <SendWSPR+0xcc>
 8004650:	f005 fb80 	bl	8009d54 <HAL_GPIO_ReadPin>
 8004654:	2800      	cmp	r0, #0
 8004656:	d0dd      	beq.n	8004614 <SendWSPR+0xcc>
			while (SystemSeconds != 1)
 8004658:	f8d8 7000 	ldr.w	r7, [r8]
				if(KEYER_DASH || KEYER_DOT)
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	4620      	mov	r0, r4
			while (SystemSeconds != 1)
 8004660:	2f01      	cmp	r7, #1
 8004662:	d1ee      	bne.n	8004642 <SendWSPR+0xfa>
			WSPRTone = syms[txIndex++];
 8004664:	4b26      	ldr	r3, [pc, #152]	; (8004700 <SendWSPR+0x1b8>)
 8004666:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8004748 <SendWSPR+0x200>
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	4699      	mov	r9, r3
			WSPRStartTick = HAL_GetTick();
 800466e:	4d32      	ldr	r5, [pc, #200]	; (8004738 <SendWSPR+0x1f0>)
						LED_GREEN_OFF;
 8004670:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8004720 <SendWSPR+0x1d8>
			WSPRTone = syms[txIndex++];
 8004674:	f88a 2000 	strb.w	r2, [sl]
			WSPRStartTick = HAL_GetTick();
 8004678:	f002 fac8 	bl	8006c0c <HAL_GetTick>
 800467c:	6028      	str	r0, [r5, #0]
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 800467e:	4b2f      	ldr	r3, [pc, #188]	; (800473c <SendWSPR+0x1f4>)
 8004680:	037c      	lsls	r4, r7, #13
 8004682:	fba3 3404 	umull	r3, r4, r3, r4
 8004686:	07fb      	lsls	r3, r7, #31
 8004688:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 800468c:	d524      	bpl.n	80046d8 <SendWSPR+0x190>
 800468e:	e001      	b.n	8004694 <SendWSPR+0x14c>
						LED_GREEN_OFF;
 8004690:	f005 fb66 	bl	8009d60 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 8004694:	f002 faba 	bl	8006c0c <HAL_GetTick>
 8004698:	682e      	ldr	r6, [r5, #0]
 800469a:	4603      	mov	r3, r0
						LED_GREEN_OFF;
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046a2:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80046a6:	1b9b      	subs	r3, r3, r6
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d8f1      	bhi.n	8004690 <SendWSPR+0x148>
				WSPRTone = syms[txIndex++];
 80046ac:	3701      	adds	r7, #1
 80046ae:	f819 3f01 	ldrb.w	r3, [r9, #1]!
			while (txIndex < 162) {
 80046b2:	2fa2      	cmp	r7, #162	; 0xa2
				WSPRTone = syms[txIndex++];
 80046b4:	f88a 3000 	strb.w	r3, [sl]
			while (txIndex < 162) {
 80046b8:	d1e1      	bne.n	800467e <SendWSPR+0x136>
			TXSwitch(0);
 80046ba:	2000      	movs	r0, #0
 80046bc:	f000 fc78 	bl	8004fb0 <TXSwitch>
			CarrierEnable(0);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f000 fcd9 	bl	8005078 <CarrierEnable>
			HAL_ADCEx_MultiModeStop_DMA(HAdc1);
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <SendWSPR+0x1e8>)
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f003 fc05 	bl	8007ed8 <HAL_ADCEx_MultiModeStop_DMA>
		while ((SystemSeconds != 0) || ((SystemMinutes % 2) != 0))
 80046ce:	f8d8 3000 	ldr.w	r3, [r8]
 80046d2:	e755      	b.n	8004580 <SendWSPR+0x38>
						LED_GREEN_ON;
 80046d4:	f005 fb44 	bl	8009d60 <HAL_GPIO_WritePin>
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80046d8:	f002 fa98 	bl	8006c0c <HAL_GetTick>
 80046dc:	682e      	ldr	r6, [r5, #0]
 80046de:	4603      	mov	r3, r0
						LED_GREEN_ON;
 80046e0:	2201      	movs	r2, #1
 80046e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046e6:	ee18 0a10 	vmov	r0, s16
				while ((HAL_GetTick() - WSPRStartTick) < ((uint32_t)txIndex * 8192L / 12L) )
 80046ea:	1b9b      	subs	r3, r3, r6
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d3f1      	bcc.n	80046d4 <SendWSPR+0x18c>
 80046f0:	e7dc      	b.n	80046ac <SendWSPR+0x164>
				Error_Handler();
 80046f2:	f000 fd1f 	bl	8005134 <Error_Handler>
 80046f6:	e79a      	b.n	800462e <SendWSPR+0xe6>
 80046f8:	c0000000 	.word	0xc0000000
 80046fc:	415adb21 	.word	0x415adb21
 8004700:	24000734 	.word	0x24000734
 8004704:	0801da68 	.word	0x0801da68
 8004708:	4ad6d90e 	.word	0x4ad6d90e
 800470c:	24006258 	.word	0x24006258
 8004710:	24006264 	.word	0x24006264
 8004714:	24005238 	.word	0x24005238
 8004718:	2400522c 	.word	0x2400522c
 800471c:	240073fe 	.word	0x240073fe
 8004720:	58020400 	.word	0x58020400
 8004724:	58020000 	.word	0x58020000
 8004728:	288df0cb 	.word	0x288df0cb
 800472c:	2400020c 	.word	0x2400020c
 8004730:	24005244 	.word	0x24005244
 8004734:	24007420 	.word	0x24007420
 8004738:	24000730 	.word	0x24000730
 800473c:	aaaaaaab 	.word	0xaaaaaaab
 8004740:	240062d8 	.word	0x240062d8
 8004744:	240062d4 	.word	0x240062d4
 8004748:	240073ff 	.word	0x240073ff

0800474c <DisplayStatus.part.0>:
	static char StringStep[8];
	static char StringTxPower[8];

	if (!DisableDisplay)
	{
		switch(Fstep)
 800474c:	4b74      	ldr	r3, [pc, #464]	; (8004920 <DisplayStatus.part.0+0x1d4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
void DisplayStatus(void)
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
		switch(Fstep)
 8004758:	f000 80d8 	beq.w	800490c <DisplayStatus.part.0+0x1c0>
 800475c:	d81f      	bhi.n	800479e <DisplayStatus.part.0+0x52>
 800475e:	2b0a      	cmp	r3, #10
 8004760:	f000 80c6 	beq.w	80048f0 <DisplayStatus.part.0+0x1a4>
 8004764:	2b64      	cmp	r3, #100	; 0x64
 8004766:	d110      	bne.n	800478a <DisplayStatus.part.0+0x3e>
		{
		case 1:			strcpy(StringStep,"   1 "); break;
		case 10: 		strcpy(StringStep,"  10 "); break;
		case 100: 		strcpy(StringStep," 100 "); break;
 8004768:	4b6e      	ldr	r3, [pc, #440]	; (8004924 <DisplayStatus.part.0+0x1d8>)
 800476a:	4a6f      	ldr	r2, [pc, #444]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 800476c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004770:	6010      	str	r0, [r2, #0]
 8004772:	8091      	strh	r1, [r2, #4]
		case 9000: 		strcpy(StringStep,"   9K"); break;
		case 10000:		strcpy(StringStep,"  10K"); break;
		case 100000: 	strcpy(StringStep," 100K"); break;
		}

		switch(CurrentMode)
 8004774:	4b6d      	ldr	r3, [pc, #436]	; (800492c <DisplayStatus.part.0+0x1e0>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b03      	cmp	r3, #3
 800477a:	f200 80ce 	bhi.w	800491a <DisplayStatus.part.0+0x1ce>
 800477e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004782:	00ab      	.short	0x00ab
 8004784:	008500a7 	.word	0x008500a7
 8004788:	0029      	.short	0x0029
		switch(Fstep)
 800478a:	2b01      	cmp	r3, #1
 800478c:	f040 80aa 	bne.w	80048e4 <DisplayStatus.part.0+0x198>
		case 1:			strcpy(StringStep,"   1 "); break;
 8004790:	4b67      	ldr	r3, [pc, #412]	; (8004930 <DisplayStatus.part.0+0x1e4>)
 8004792:	4a65      	ldr	r2, [pc, #404]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 8004794:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004798:	6010      	str	r0, [r2, #0]
 800479a:	8091      	strh	r1, [r2, #4]
 800479c:	e7ea      	b.n	8004774 <DisplayStatus.part.0+0x28>
		switch(Fstep)
 800479e:	f242 7210 	movw	r2, #10000	; 0x2710
 80047a2:	4293      	cmp	r3, r2
 80047a4:	f000 80ab 	beq.w	80048fe <DisplayStatus.part.0+0x1b2>
 80047a8:	4a62      	ldr	r2, [pc, #392]	; (8004934 <DisplayStatus.part.0+0x1e8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d106      	bne.n	80047bc <DisplayStatus.part.0+0x70>
		case 100000: 	strcpy(StringStep," 100K"); break;
 80047ae:	4b62      	ldr	r3, [pc, #392]	; (8004938 <DisplayStatus.part.0+0x1ec>)
 80047b0:	4a5d      	ldr	r2, [pc, #372]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 80047b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047b6:	6010      	str	r0, [r2, #0]
 80047b8:	8091      	strh	r1, [r2, #4]
 80047ba:	e7db      	b.n	8004774 <DisplayStatus.part.0+0x28>
		switch(Fstep)
 80047bc:	f242 3228 	movw	r2, #9000	; 0x2328
 80047c0:	4293      	cmp	r3, r2
 80047c2:	f040 808f 	bne.w	80048e4 <DisplayStatus.part.0+0x198>
		case 9000: 		strcpy(StringStep,"   9K"); break;
 80047c6:	4b5d      	ldr	r3, [pc, #372]	; (800493c <DisplayStatus.part.0+0x1f0>)
 80047c8:	4a57      	ldr	r2, [pc, #348]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 80047ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047ce:	6010      	str	r0, [r2, #0]
 80047d0:	8091      	strh	r1, [r2, #4]
 80047d2:	e7cf      	b.n	8004774 <DisplayStatus.part.0+0x28>
		{
		case LSB: strcpy(StringMode,"LSB"); break;
		case USB: strcpy(StringMode,"USB"); break;
		case AM: strcpy(StringMode,"AM"); break;
		case CW: strcpy(StringMode,"CW"); break;
 80047d4:	4b5a      	ldr	r3, [pc, #360]	; (8004940 <DisplayStatus.part.0+0x1f4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4e5a      	ldr	r6, [pc, #360]	; (8004944 <DisplayStatus.part.0+0x1f8>)
 80047da:	0c19      	lsrs	r1, r3, #16
 80047dc:	8033      	strh	r3, [r6, #0]
 80047de:	70b1      	strb	r1, [r6, #2]
		}
		switch (CurrentAGC)
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <DisplayStatus.part.0+0x1fc>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d058      	beq.n	800489a <DisplayStatus.part.0+0x14e>
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d179      	bne.n	80048e0 <DisplayStatus.part.0+0x194>
		{
		case Fast: strcpy(StringAGC,"Fast"); break;
		case Slow: strcpy(StringAGC,"Slow"); break;
 80047ec:	4b57      	ldr	r3, [pc, #348]	; (800494c <DisplayStatus.part.0+0x200>)
 80047ee:	4d58      	ldr	r5, [pc, #352]	; (8004950 <DisplayStatus.part.0+0x204>)
 80047f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047f4:	6028      	str	r0, [r5, #0]
 80047f6:	7129      	strb	r1, [r5, #4]
		}
		switch (CurrentBW)
 80047f8:	4b56      	ldr	r3, [pc, #344]	; (8004954 <DisplayStatus.part.0+0x208>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d056      	beq.n	80048ae <DisplayStatus.part.0+0x162>
 8004800:	2b01      	cmp	r3, #1
 8004802:	d16b      	bne.n	80048dc <DisplayStatus.part.0+0x190>
		{
		case Narrow: strcpy(StringWidth,"Narrow"); break;
		case Wide: strcpy(StringWidth,"Wide"); break;
 8004804:	4b54      	ldr	r3, [pc, #336]	; (8004958 <DisplayStatus.part.0+0x20c>)
 8004806:	4c55      	ldr	r4, [pc, #340]	; (800495c <DisplayStatus.part.0+0x210>)
 8004808:	e893 0003 	ldmia.w	r3, {r0, r1}
 800480c:	6020      	str	r0, [r4, #0]
 800480e:	7121      	strb	r1, [r4, #4]
		}
		switch (TxPowerOut)
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <DisplayStatus.part.0+0x214>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004818:	d056      	beq.n	80048c8 <DisplayStatus.part.0+0x17c>
 800481a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800481e:	428b      	cmp	r3, r1
 8004820:	d062      	beq.n	80048e8 <DisplayStatus.part.0+0x19c>
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	4b4f      	ldr	r3, [pc, #316]	; (8004964 <DisplayStatus.part.0+0x218>)
		{
		case LOW_POWER_OUT: strcpy(StringTxPower,"Low"); break;
 8004828:	bf04      	itt	eq
 800482a:	494f      	ldreq	r1, [pc, #316]	; (8004968 <DisplayStatus.part.0+0x21c>)
 800482c:	6019      	streq	r1, [r3, #0]
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
		}
		sprintf((char *)UartTXString, "\e[3;1HFreq %5.3f  Step %s\e[5;1HMode %s BW %s AGG %s ERR %d WPM %d PWR %s Volume %1.1f   \r", LOfreq/1000.f, StringStep, StringMode, StringWidth, StringAGC, TXFreqError, keyer_speed, StringTxPower, volume);
 800482e:	9306      	str	r3, [sp, #24]
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <DisplayStatus.part.0+0x220>)
 8004832:	9503      	str	r5, [sp, #12]
 8004834:	9402      	str	r4, [sp, #8]
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	4b4d      	ldr	r3, [pc, #308]	; (8004970 <DisplayStatus.part.0+0x224>)
 800483c:	9601      	str	r6, [sp, #4]
 800483e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	484b      	ldr	r0, [pc, #300]	; (8004974 <DisplayStatus.part.0+0x228>)
 8004846:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8004978 <DisplayStatus.part.0+0x22c>
 800484a:	6804      	ldr	r4, [r0, #0]
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <DisplayStatus.part.0+0x230>)
 8004850:	9200      	str	r2, [sp, #0]
 8004852:	9405      	str	r4, [sp, #20]
 8004854:	494a      	ldr	r1, [pc, #296]	; (8004980 <DisplayStatus.part.0+0x234>)
 8004856:	484b      	ldr	r0, [pc, #300]	; (8004984 <DisplayStatus.part.0+0x238>)
 8004858:	ed8d 7b08 	vstr	d7, [sp, #32]
 800485c:	edd3 7a00 	vldr	s15, [r3]
 8004860:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004864:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004868:	ec53 2b17 	vmov	r2, r3, d7
 800486c:	f00c feca 	bl	8011604 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 8004870:	4844      	ldr	r0, [pc, #272]	; (8004984 <DisplayStatus.part.0+0x238>)
 8004872:	f7fb fd95 	bl	80003a0 <strlen>
 8004876:	4601      	mov	r1, r0
 8004878:	4842      	ldr	r0, [pc, #264]	; (8004984 <DisplayStatus.part.0+0x238>)
 800487a:	b289      	uxth	r1, r1
 800487c:	f00b fdc2 	bl	8010404 <CDC_Transmit_FS>
	HAL_Delay(1);
 8004880:	2001      	movs	r0, #1
		PrintUI(UartTXString);
	}
}
 8004882:	b00a      	add	sp, #40	; 0x28
 8004884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(1);
 8004888:	f002 b9c6 	b.w	8006c18 <HAL_Delay>
		case USB: strcpy(StringMode,"USB"); break;
 800488c:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <DisplayStatus.part.0+0x23c>)
 800488e:	4e2d      	ldr	r6, [pc, #180]	; (8004944 <DisplayStatus.part.0+0x1f8>)
 8004890:	6033      	str	r3, [r6, #0]
		switch (CurrentAGC)
 8004892:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <DisplayStatus.part.0+0x1fc>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1a6      	bne.n	80047e8 <DisplayStatus.part.0+0x9c>
		case Fast: strcpy(StringAGC,"Fast"); break;
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <DisplayStatus.part.0+0x240>)
 800489c:	4d2c      	ldr	r5, [pc, #176]	; (8004950 <DisplayStatus.part.0+0x204>)
 800489e:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (CurrentBW)
 80048a2:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <DisplayStatus.part.0+0x208>)
		case Fast: strcpy(StringAGC,"Fast"); break;
 80048a4:	6028      	str	r0, [r5, #0]
		switch (CurrentBW)
 80048a6:	781b      	ldrb	r3, [r3, #0]
		case Fast: strcpy(StringAGC,"Fast"); break;
 80048a8:	7129      	strb	r1, [r5, #4]
		switch (CurrentBW)
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1a8      	bne.n	8004800 <DisplayStatus.part.0+0xb4>
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80048ae:	4b38      	ldr	r3, [pc, #224]	; (8004990 <DisplayStatus.part.0+0x244>)
 80048b0:	4c2a      	ldr	r4, [pc, #168]	; (800495c <DisplayStatus.part.0+0x210>)
 80048b2:	e893 0003 	ldmia.w	r3, {r0, r1}
		switch (TxPowerOut)
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <DisplayStatus.part.0+0x214>)
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80048b8:	80a1      	strh	r1, [r4, #4]
 80048ba:	0c09      	lsrs	r1, r1, #16
		switch (TxPowerOut)
 80048bc:	681b      	ldr	r3, [r3, #0]
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80048be:	6020      	str	r0, [r4, #0]
		switch (TxPowerOut)
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		case Narrow: strcpy(StringWidth,"Narrow"); break;
 80048c4:	71a1      	strb	r1, [r4, #6]
		switch (TxPowerOut)
 80048c6:	d1a8      	bne.n	800481a <DisplayStatus.part.0+0xce>
		case MID_POWER_OUT: strcpy(StringTxPower,"Mid"); break;
 80048c8:	4b26      	ldr	r3, [pc, #152]	; (8004964 <DisplayStatus.part.0+0x218>)
 80048ca:	4932      	ldr	r1, [pc, #200]	; (8004994 <DisplayStatus.part.0+0x248>)
 80048cc:	6019      	str	r1, [r3, #0]
 80048ce:	e7ae      	b.n	800482e <DisplayStatus.part.0+0xe2>
		case LSB: strcpy(StringMode,"LSB"); break;
 80048d0:	4e1c      	ldr	r6, [pc, #112]	; (8004944 <DisplayStatus.part.0+0x1f8>)
 80048d2:	4b31      	ldr	r3, [pc, #196]	; (8004998 <DisplayStatus.part.0+0x24c>)
 80048d4:	6033      	str	r3, [r6, #0]
 80048d6:	e783      	b.n	80047e0 <DisplayStatus.part.0+0x94>
		case AM: strcpy(StringMode,"AM"); break;
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <DisplayStatus.part.0+0x250>)
 80048da:	e77c      	b.n	80047d6 <DisplayStatus.part.0+0x8a>
 80048dc:	4c1f      	ldr	r4, [pc, #124]	; (800495c <DisplayStatus.part.0+0x210>)
 80048de:	e797      	b.n	8004810 <DisplayStatus.part.0+0xc4>
 80048e0:	4d1b      	ldr	r5, [pc, #108]	; (8004950 <DisplayStatus.part.0+0x204>)
 80048e2:	e789      	b.n	80047f8 <DisplayStatus.part.0+0xac>
 80048e4:	4a10      	ldr	r2, [pc, #64]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 80048e6:	e745      	b.n	8004774 <DisplayStatus.part.0+0x28>
		case MAX_POWER_OUT: strcpy(StringTxPower,"Max"); break;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <DisplayStatus.part.0+0x218>)
 80048ea:	492d      	ldr	r1, [pc, #180]	; (80049a0 <DisplayStatus.part.0+0x254>)
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	e79e      	b.n	800482e <DisplayStatus.part.0+0xe2>
		case 10: 		strcpy(StringStep,"  10 "); break;
 80048f0:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <DisplayStatus.part.0+0x258>)
 80048f2:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 80048f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048f8:	6010      	str	r0, [r2, #0]
 80048fa:	8091      	strh	r1, [r2, #4]
 80048fc:	e73a      	b.n	8004774 <DisplayStatus.part.0+0x28>
		case 10000:		strcpy(StringStep,"  10K"); break;
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <DisplayStatus.part.0+0x25c>)
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 8004902:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004906:	6010      	str	r0, [r2, #0]
 8004908:	8091      	strh	r1, [r2, #4]
 800490a:	e733      	b.n	8004774 <DisplayStatus.part.0+0x28>
		case 1000: 		strcpy(StringStep,"   1K"); break;
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <DisplayStatus.part.0+0x260>)
 800490e:	4a06      	ldr	r2, [pc, #24]	; (8004928 <DisplayStatus.part.0+0x1dc>)
 8004910:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004914:	6010      	str	r0, [r2, #0]
 8004916:	8091      	strh	r1, [r2, #4]
 8004918:	e72c      	b.n	8004774 <DisplayStatus.part.0+0x28>
 800491a:	4e0a      	ldr	r6, [pc, #40]	; (8004944 <DisplayStatus.part.0+0x1f8>)
 800491c:	e760      	b.n	80047e0 <DisplayStatus.part.0+0x94>
 800491e:	bf00      	nop
 8004920:	24005240 	.word	0x24005240
 8004924:	0801dc2c 	.word	0x0801dc2c
 8004928:	240062bc 	.word	0x240062bc
 800492c:	24001018 	.word	0x24001018
 8004930:	0801dc1c 	.word	0x0801dc1c
 8004934:	000186a0 	.word	0x000186a0
 8004938:	0801dc4c 	.word	0x0801dc4c
 800493c:	0801dc3c 	.word	0x0801dc3c
 8004940:	0801dc58 	.word	0x0801dc58
 8004944:	240062b4 	.word	0x240062b4
 8004948:	24001016 	.word	0x24001016
 800494c:	0801dc64 	.word	0x0801dc64
 8004950:	240062ac 	.word	0x240062ac
 8004954:	24001017 	.word	0x24001017
 8004958:	0801dc74 	.word	0x0801dc74
 800495c:	240062cc 	.word	0x240062cc
 8004960:	240062ec 	.word	0x240062ec
 8004964:	240062c4 	.word	0x240062c4
 8004968:	00776f4c 	.word	0x00776f4c
 800496c:	2400b9d0 	.word	0x2400b9d0
 8004970:	240062e0 	.word	0x240062e0
 8004974:	2400a810 	.word	0x2400a810
 8004978:	3a83126f 	.word	0x3a83126f
 800497c:	24006258 	.word	0x24006258
 8004980:	0801dc7c 	.word	0x0801dc7c
 8004984:	240063f8 	.word	0x240063f8
 8004988:	00425355 	.word	0x00425355
 800498c:	0801dc5c 	.word	0x0801dc5c
 8004990:	0801dc6c 	.word	0x0801dc6c
 8004994:	0064694d 	.word	0x0064694d
 8004998:	0042534c 	.word	0x0042534c
 800499c:	0801dc54 	.word	0x0801dc54
 80049a0:	0078614d 	.word	0x0078614d
 80049a4:	0801dc24 	.word	0x0801dc24
 80049a8:	0801dc44 	.word	0x0801dc44
 80049ac:	0801dc34 	.word	0x0801dc34

080049b0 <HAL_ADC_ConvCpltCallback>:
{
 80049b0:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80049b4:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80049b8:	490a      	ldr	r1, [pc, #40]	; (80049e4 <HAL_ADC_ConvCpltCallback+0x34>)
 80049ba:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80049be:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80049c2:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d1fa      	bne.n	80049be <HAL_ADC_ConvCpltCallback+0xe>
 80049c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80049cc:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(1);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7fd fe35 	bl	8002640 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = SET;
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_ADC_ConvCpltCallback+0x38>)
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
}
 80049dc:	bd08      	pop	{r3, pc}
 80049de:	bf00      	nop
 80049e0:	24007820 	.word	0x24007820
 80049e4:	e000ed00 	.word	0xe000ed00
 80049e8:	2400b9ce 	.word	0x2400b9ce

080049ec <HAL_ADC_ConvHalfCpltCallback>:
{
 80049ec:	b508      	push	{r3, lr}
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80049f0:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80049f4:	490a      	ldr	r1, [pc, #40]	; (8004a20 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80049f6:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80049fa:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80049fe:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d1fa      	bne.n	80049fa <HAL_ADC_ConvHalfCpltCallback+0xe>
 8004a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a08:	f3bf 8f6f 	isb	sy
	ADC_Stream0_Handler(0);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fd fe17 	bl	8002640 <ADC_Stream0_Handler>
	ubADCDualConversionComplete = RESET;
 8004a12:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
}
 8004a18:	bd08      	pop	{r3, pc}
 8004a1a:	bf00      	nop
 8004a1c:	24007420 	.word	0x24007420
 8004a20:	e000ed00 	.word	0xe000ed00
 8004a24:	2400b9ce 	.word	0x2400b9ce

08004a28 <HAL_DAC_ConvCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[BSIZE];
 8004a28:	4b01      	ldr	r3, [pc, #4]	; (8004a30 <HAL_DAC_ConvCpltCallbackCh1+0x8>)
 8004a2a:	4a02      	ldr	r2, [pc, #8]	; (8004a34 <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	4770      	bx	lr
 8004a30:	240073f8 	.word	0x240073f8
 8004a34:	24000c00 	.word	0x24000c00

08004a38 <HAL_DAC_ConvHalfCpltCallbackCh1>:
	ValidAudioHalf = &AudioOut[0];
 8004a38:	4b01      	ldr	r3, [pc, #4]	; (8004a40 <HAL_DAC_ConvHalfCpltCallbackCh1+0x8>)
 8004a3a:	4a02      	ldr	r2, [pc, #8]	; (8004a44 <HAL_DAC_ConvHalfCpltCallbackCh1+0xc>)
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	4770      	bx	lr
 8004a40:	240073f8 	.word	0x240073f8
 8004a44:	24000800 	.word	0x24000800

08004a48 <HAL_ADC_LevelOutOfWindowCallback>:
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004a48:	4907      	ldr	r1, [pc, #28]	; (8004a68 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
	OVFDetected = OVF_TIMEOUT;
 8004a4a:	2002      	movs	r0, #2
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <HAL_ADC_LevelOutOfWindowCallback+0x24>)
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004a4e:	6809      	ldr	r1, [r1, #0]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004a50:	4a07      	ldr	r2, [pc, #28]	; (8004a70 <HAL_ADC_LevelOutOfWindowCallback+0x28>)
	OVFDetected = OVF_TIMEOUT;
 8004a52:	8018      	strh	r0, [r3, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004a54:	684b      	ldr	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004a56:	6812      	ldr	r2, [r2, #0]
	__HAL_ADC_DISABLE_IT(&hadc1, (ADC_IT_AWD1));
 8004a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5c:	604b      	str	r3, [r1, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, (ADC_IT_AWD1));
 8004a5e:	6853      	ldr	r3, [r2, #4]
 8004a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a64:	6053      	str	r3, [r2, #4]
}
 8004a66:	4770      	bx	lr
 8004a68:	2400a43c 	.word	0x2400a43c
 8004a6c:	24006272 	.word	0x24006272
 8004a70:	2400a4a0 	.word	0x2400a4a0
 8004a74:	00000000 	.word	0x00000000

08004a78 <SetWSPRPLLCoeff>:
 * for 7040.1 PLL coeffs are N 450, M 17, P 94, FracDiv 48
 */


void SetWSPRPLLCoeff(double TXFreq, uint16_t *FracDivCoeff, uint16_t *FracPWMCoeff)
{
 8004a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
	uint32_t m, n, p, od;
	volatile uint32_t fm, fn, fp, fod, FracDiv, i;
	LastTXFreq = (float)TXFreq;
#define TEST_COEFF 1
	for (i = 0; i < 4; i++) {
 8004a7c:	2300      	movs	r3, #0
	LastTXFreq = (float)TXFreq;
 8004a7e:	eef7 7bc0 	vcvt.f32.f64	s15, d0
 8004a82:	4aa9      	ldr	r2, [pc, #676]	; (8004d28 <SetWSPRPLLCoeff+0x2b0>)
{
 8004a84:	ed2d 8b02 	vpush	{d8}
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004a88:	f20f 298c 	addw	r9, pc, #652	; 0x28c
 8004a8c:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8004a90:	b08f      	sub	sp, #60	; 0x3c
	LastTXFreq = (float)TXFreq;
 8004a92:	edc2 7a00 	vstr	s15, [r2]
	volatile double TF, OutFHigherStep, OutF, MinDiff = 999999999;
 8004a96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	for (i = 0; i < 4; i++) {
 8004a9a:	9305      	str	r3, [sp, #20]
 8004a9c:	9b05      	ldr	r3, [sp, #20]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	f200 80d0 	bhi.w	8004c44 <SetWSPRPLLCoeff+0x1cc>
		for (m = 2; m <= 25; m++) //was 64
		{
			for (n = 2; n <= 512; n++) //was 1
			{
				for (p = 2; p <= 128; p += 2) {
					OutF = XTalFreq * n / m / p / od;
 8004aa4:	4ba1      	ldr	r3, [pc, #644]	; (8004d2c <SetWSPRPLLCoeff+0x2b4>)
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004aaa:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 8004d30 <SetWSPRPLLCoeff+0x2b8>
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
							&& ((XTalFreq * n / m) > 150000000.0)
 8004aae:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8004d34 <SetWSPRPLLCoeff+0x2bc>
						MinDiff = abs(OutF - TF);

						fp = p;
						fn = n;
						fm = m;
						fod = od;
 8004ab2:	2001      	movs	r0, #1
					OutF = XTalFreq * n / m / p / od;
 8004ab4:	edd3 2a00 	vldr	s5, [r3]
 8004ab8:	f8df c288 	ldr.w	ip, [pc, #648]	; 8004d44 <SetWSPRPLLCoeff+0x2cc>
							&& ((XTalFreq * n / m) < 960000000.0)) {
 8004abc:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8004d38 <SetWSPRPLLCoeff+0x2c0>
 8004ac0:	4e9e      	ldr	r6, [pc, #632]	; (8004d3c <SetWSPRPLLCoeff+0x2c4>)
		}
		if (fn < 511) {
			OutF = XTalFreq * fn / fm / fp / fod;
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004ac2:	ed9f 3b97 	vldr	d3, [pc, #604]	; 8004d20 <SetWSPRPLLCoeff+0x2a8>
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004ac6:	ed9d 7a05 	vldr	s14, [sp, #20]
 8004aca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		for (m = 2; m <= 25; m++) //was 64
 8004ace:	2102      	movs	r1, #2
			for (n = 2; n <= 512; n++) //was 1
 8004ad0:	f240 2e01 	movw	lr, #513	; 0x201
		TF = TXFreq + i * 1.4648f * TEST_COEFF; // WSPR shift
 8004ad4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ad8:	ee27 7a08 	vmul.f32	s14, s14, s16
 8004adc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004ae0:	ee37 7b00 	vadd.f64	d7, d7, d0
 8004ae4:	ed8d 7b06 	vstr	d7, [sp, #24]
		MinDiff = 999999999;
 8004ae8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
					OutF = XTalFreq * n / m / p / od;
 8004aec:	ee07 1a90 	vmov	s15, r1
			for (n = 2; n <= 512; n++) //was 1
 8004af0:	2202      	movs	r2, #2
					OutF = XTalFreq * n / m / p / od;
 8004af2:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8004af6:	eec8 1a84 	vdiv.f32	s3, s17, s8
 8004afa:	ee07 2a90 	vmov	s15, r2
				for (p = 2; p <= 128; p += 2) {
 8004afe:	2302      	movs	r3, #2
					OutF = XTalFreq * n / m / p / od;
 8004b00:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8004b04:	ee64 4aa2 	vmul.f32	s9, s9, s5
							&& ((XTalFreq * n / m) > 150000000.0)
 8004b08:	ee64 7aa1 	vmul.f32	s15, s9, s3
 8004b0c:	eef4 7a42 	vcmp.f32	s15, s4
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	dd05      	ble.n	8004b22 <SetWSPRPLLCoeff+0xaa>
 8004b16:	eef4 7ac1 	vcmpe.f32	s15, s2
 8004b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1e:	f100 80b2 	bmi.w	8004c86 <SetWSPRPLLCoeff+0x20e>
					OutF = XTalFreq * n / m / p / od;
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	3302      	adds	r3, #2
 8004b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004b30:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004b34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004b38:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004b3c:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004b40:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004b44:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004b48:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004b4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	dd03      	ble.n	8004b5e <SetWSPRPLLCoeff+0xe6>
 8004b56:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004b5a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
				for (p = 2; p <= 128; p += 2) {
 8004b5e:	2b82      	cmp	r3, #130	; 0x82
 8004b60:	d1df      	bne.n	8004b22 <SetWSPRPLLCoeff+0xaa>
			for (n = 2; n <= 512; n++) //was 1
 8004b62:	3201      	adds	r2, #1
 8004b64:	4572      	cmp	r2, lr
 8004b66:	d1c8      	bne.n	8004afa <SetWSPRPLLCoeff+0x82>
		for (m = 2; m <= 25; m++) //was 64
 8004b68:	3101      	adds	r1, #1
 8004b6a:	291a      	cmp	r1, #26
 8004b6c:	d1be      	bne.n	8004aec <SetWSPRPLLCoeff+0x74>
		if (fn < 511) {
 8004b6e:	9b01      	ldr	r3, [sp, #4]
 8004b70:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004b74:	f200 80ca 	bhi.w	8004d0c <SetWSPRPLLCoeff+0x294>
			OutF = XTalFreq * fn / fm / fp / fod;
 8004b78:	ed9d 6a01 	vldr	s12, [sp, #4]
 8004b7c:	eddd 6a00 	vldr	s13, [sp]
 8004b80:	eddd 7a02 	vldr	s15, [sp, #8]
 8004b84:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004b88:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b90:	ee26 6a22 	vmul.f32	s12, s12, s5
 8004b94:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004b98:	eddd 7a03 	vldr	s15, [sp, #12]
 8004b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004ba8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004bac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
			OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004bb0:	9b01      	ldr	r3, [sp, #4]
 8004bb2:	eddd 6a00 	vldr	s13, [sp]
 8004bb6:	eddd 7a02 	vldr	s15, [sp, #8]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc4:	ee06 3a10 	vmov	s12, r3
 8004bc8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004bcc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004bd0:	eddd 7a03 	vldr	s15, [sp, #12]
 8004bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd8:	ee26 6a22 	vmul.f32	s12, s12, s5
 8004bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004be4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004be8:	ed8d 7b08 	vstr	d7, [sp, #32]
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004bec:	ed9d 5b06 	vldr	d5, [sp, #24]
 8004bf0:	ed9d 4b0a 	vldr	d4, [sp, #40]	; 0x28
 8004bf4:	ed9d 6b08 	vldr	d6, [sp, #32]
 8004bf8:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8004bfc:	ee35 5b44 	vsub.f64	d5, d5, d4
 8004c00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004c04:	ee85 7b06 	vdiv.f64	d7, d5, d6
					* 8192 * 8); //FracDiv PWM has 8 levels
 8004c08:	ee27 7b03 	vmul.f64	d7, d7, d3
			FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)
 8004c0c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8004c10:	ed8d 7a04 	vstr	s14, [sp, #16]
		} else {
			FracDiv = 8191 * 8;
		}

		FracDivPWM = LowestWSPRToneFracDivPWM = FracDiv & 0x07;
 8004c14:	9b04      	ldr	r3, [sp, #16]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	8033      	strh	r3, [r6, #0]
 8004c1c:	f8ac 3000 	strh.w	r3, [ip]
		FracDiv >>= 0x03;
 8004c20:	9b04      	ldr	r3, [sp, #16]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	9304      	str	r3, [sp, #16]
		FracDivCoeff[i] = FracDiv;
 8004c26:	9a04      	ldr	r2, [sp, #16]
 8004c28:	9b05      	ldr	r3, [sp, #20]
 8004c2a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		FracPWMCoeff[i] = FracDivPWM;
 8004c2e:	9a05      	ldr	r2, [sp, #20]
	for (i = 0; i < 4; i++) {
 8004c30:	9b05      	ldr	r3, [sp, #20]
 8004c32:	3301      	adds	r3, #1
 8004c34:	9305      	str	r3, [sp, #20]
		FracPWMCoeff[i] = FracDivPWM;
 8004c36:	8833      	ldrh	r3, [r6, #0]
 8004c38:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
	for (i = 0; i < 4; i++) {
 8004c3c:	9b05      	ldr	r3, [sp, #20]
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	f67f af41 	bls.w	8004ac6 <SetWSPRPLLCoeff+0x4e>
	}
	__HAL_RCC_PLL2_DISABLE();
 8004c44:	4a3e      	ldr	r2, [pc, #248]	; (8004d40 <SetWSPRPLLCoeff+0x2c8>)
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c4c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1); //These parameters should stay the same for the 4 WSPR tones
 8004c4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004c50:	9900      	ldr	r1, [sp, #0]
 8004c52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c56:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004c5a:	6293      	str	r3, [r2, #40]	; 0x28
 8004c5c:	9901      	ldr	r1, [sp, #4]
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	3901      	subs	r1, #1
 8004c62:	3b01      	subs	r3, #1
 8004c64:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004c68:	025b      	lsls	r3, r3, #9
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c72:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004c74:	6813      	ldr	r3, [r2, #0]
 8004c76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c7a:	6013      	str	r3, [r2, #0]
}
 8004c7c:	b00f      	add	sp, #60	; 0x3c
 8004c7e:	ecbd 8b02 	vpop	{d8}
 8004c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					OutF = XTalFreq * n / m / p / od;
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004c92:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8004c96:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004c9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
					if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0)
 8004c9e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004ca2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8004ca6:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004caa:	ee37 7b45 	vsub.f64	d7, d7, d5
 8004cae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb6:	d521      	bpl.n	8004cfc <SetWSPRPLLCoeff+0x284>
 8004cb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004cbc:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004cc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	dd16      	ble.n	8004cfc <SetWSPRPLLCoeff+0x284>
						MinDiff = abs(OutF - TF);
 8004cce:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8004cd2:	ed9d 6b06 	vldr	d6, [sp, #24]
 8004cd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cda:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8004cde:	ee17 7a10 	vmov	r7, s14
 8004ce2:	2f00      	cmp	r7, #0
 8004ce4:	bfb8      	it	lt
 8004ce6:	427f      	neglt	r7, r7
 8004ce8:	ee07 7a10 	vmov	s14, r7
 8004cec:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8004cf0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
						fp = p;
 8004cf4:	9302      	str	r3, [sp, #8]
						fn = n;
 8004cf6:	9201      	str	r2, [sp, #4]
						fm = m;
 8004cf8:	9100      	str	r1, [sp, #0]
						fod = od;
 8004cfa:	9003      	str	r0, [sp, #12]
				for (p = 2; p <= 128; p += 2) {
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	2b82      	cmp	r3, #130	; 0x82
 8004d00:	d1c1      	bne.n	8004c86 <SetWSPRPLLCoeff+0x20e>
			for (n = 2; n <= 512; n++) //was 1
 8004d02:	3201      	adds	r2, #1
 8004d04:	4572      	cmp	r2, lr
 8004d06:	f47f aef8 	bne.w	8004afa <SetWSPRPLLCoeff+0x82>
 8004d0a:	e72d      	b.n	8004b68 <SetWSPRPLLCoeff+0xf0>
			FracDiv = 8191 * 8;
 8004d0c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	e77f      	b.n	8004c14 <SetWSPRPLLCoeff+0x19c>
 8004d14:	f3af 8000 	nop.w
 8004d18:	ff800000 	.word	0xff800000
 8004d1c:	41cdcd64 	.word	0x41cdcd64
 8004d20:	00000000 	.word	0x00000000
 8004d24:	40f00000 	.word	0x40f00000
 8004d28:	24006264 	.word	0x24006264
 8004d2c:	24007400 	.word	0x24007400
 8004d30:	3fbb7e91 	.word	0x3fbb7e91
 8004d34:	4d0f0d18 	.word	0x4d0f0d18
 8004d38:	4e64e1c0 	.word	0x4e64e1c0
 8004d3c:	24005234 	.word	0x24005234
 8004d40:	58024400 	.word	0x58024400
 8004d44:	24006268 	.word	0x24006268

08004d48 <SetTXPLL>:
	{
		for (n = 2; n <= 512; n++) //was 1
		{
			for (p = 2; p <= 128; p+=2)
			{
				OutF = XTalFreq * n / m / p / od;
 8004d48:	4a90      	ldr	r2, [pc, #576]	; (8004f8c <SetTXPLL+0x244>)
 8004d4a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004d4e:	4b90      	ldr	r3, [pc, #576]	; (8004f90 <SetTXPLL+0x248>)
	for (m = 2; m <= 25; m++) //was 64
 8004d50:	2002      	movs	r0, #2
				OutF = XTalFreq * n / m / p / od;
 8004d52:	edd2 5a00 	vldr	s11, [r2]
		for (n = 2; n <= 512; n++) //was 1
 8004d56:	f240 2c01 	movw	ip, #513	; 0x201
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004d5a:	ed9f 5a8e 	vldr	s10, [pc, #568]	; 8004f94 <SetTXPLL+0x24c>
 8004d5e:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8004f98 <SetTXPLL+0x250>
{
 8004d62:	b410      	push	{r4}
					MinDiff = abs(OutF - TF);

					fp = p;
					fn = n;
					fm = m;
					fod = od;
 8004d64:	2401      	movs	r4, #1
{
 8004d66:	b08b      	sub	sp, #44	; 0x2c
	volatile float OutFHigherStep, OutF, MinDiff = 999999999;
 8004d68:	9303      	str	r3, [sp, #12]
	MinDiff = 999999999;
 8004d6a:	9303      	str	r3, [sp, #12]
				OutF = XTalFreq * n / m / p / od;
 8004d6c:	ee07 0a90 	vmov	s15, r0
		for (n = 2; n <= 512; n++) //was 1
 8004d70:	2102      	movs	r1, #2
				OutF = XTalFreq * n / m / p / od;
 8004d72:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004d76:	eec3 4a86 	vdiv.f32	s9, s7, s12
 8004d7a:	ee07 1a90 	vmov	s15, r1
			for (p = 2; p <= 128; p+=2)
 8004d7e:	2302      	movs	r3, #2
				OutF = XTalFreq * n / m / p / od;
 8004d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d84:	ee66 6aa5 	vmul.f32	s13, s13, s11
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004d88:	ee66 7aa4 	vmul.f32	s15, s13, s9
 8004d8c:	eef4 7a45 	vcmp.f32	s15, s10
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	dd05      	ble.n	8004da2 <SetTXPLL+0x5a>
 8004d96:	eef4 7ac4 	vcmpe.f32	s15, s8
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	f100 80b6 	bmi.w	8004f0e <SetTXPLL+0x1c6>
				OutF = XTalFreq * n / m / p / od;
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	3302      	adds	r3, #2
 8004da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dac:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db4:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004db8:	eddd 7a02 	vldr	s15, [sp, #8]
 8004dbc:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004dc0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	dd00      	ble.n	8004dd0 <SetTXPLL+0x88>
 8004dce:	9a02      	ldr	r2, [sp, #8]
			for (p = 2; p <= 128; p+=2)
 8004dd0:	2b82      	cmp	r3, #130	; 0x82
 8004dd2:	d1e6      	bne.n	8004da2 <SetTXPLL+0x5a>
		for (n = 2; n <= 512; n++) //was 1
 8004dd4:	3101      	adds	r1, #1
 8004dd6:	4561      	cmp	r1, ip
 8004dd8:	d1cf      	bne.n	8004d7a <SetTXPLL+0x32>
	for (m = 2; m <= 25; m++) //was 64
 8004dda:	3001      	adds	r0, #1
 8004ddc:	281a      	cmp	r0, #26
 8004dde:	d1c5      	bne.n	8004d6c <SetTXPLL+0x24>
				}
			}
		}
	}
	if (fn < 511)
 8004de0:	9b05      	ldr	r3, [sp, #20]
 8004de2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004de6:	f200 80cd 	bhi.w	8004f84 <SetTXPLL+0x23c>
	{
		OutF = XTalFreq * fn / fm / fp / fod;
 8004dea:	eddd 6a05 	vldr	s13, [sp, #20]
 8004dee:	ed9d 7a04 	vldr	s14, [sp, #16]
 8004df2:	eddd 7a06 	vldr	s15, [sp, #24]
 8004df6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004dfa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004dfe:	ed9d 6a07 	vldr	s12, [sp, #28]
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004e06:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8004f9c <SetTXPLL+0x254>
		OutF = XTalFreq * fn / fm / fp / fod;
 8004e0a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004e0e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1e:	ed8d 7a02 	vstr	s14, [sp, #8]
		OutFHigherStep = XTalFreq * (fn + 1) / fm / fp / fod;
 8004e22:	9b05      	ldr	r3, [sp, #20]
 8004e24:	ed9d 7a04 	vldr	s14, [sp, #16]
 8004e28:	eddd 7a06 	vldr	s15, [sp, #24]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e32:	ed9d 6a07 	vldr	s12, [sp, #28]
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	ee06 3a90 	vmov	s13, r3
 8004e3e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8004e42:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4a:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8004e4e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004e52:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004e56:	ed8d 7a01 	vstr	s14, [sp, #4]
		FracDiv = (uint32_t) ((TF - OutF) / (OutFHigherStep - OutF)  * 8192);
 8004e5a:	eddd 6a02 	vldr	s13, [sp, #8]
 8004e5e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004e62:	eddd 7a02 	vldr	s15, [sp, #8]
 8004e66:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e6e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8004e72:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7a:	edcd 7a08 	vstr	s15, [sp, #32]
	else
	{
		FracDiv = 8191;
	}

	TXFreqError = MinDiff;
 8004e7e:	eddd 7a03 	vldr	s15, [sp, #12]
	for (i=0; i< 50; i++)
 8004e82:	2000      	movs	r0, #0
	__HAL_RCC_PLL2_DISABLE();
 8004e84:	4a46      	ldr	r2, [pc, #280]	; (8004fa0 <SetTXPLL+0x258>)
	TXFreqError = MinDiff;
 8004e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e8a:	4b46      	ldr	r3, [pc, #280]	; (8004fa4 <SetTXPLL+0x25c>)
 8004e8c:	edc3 7a00 	vstr	s15, [r3]
	__HAL_RCC_PLL2_DISABLE();
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e96:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(fm, fn, fp, 2, 1);
 8004e98:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004e9a:	9904      	ldr	r1, [sp, #16]
 8004e9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ea0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8004ea4:	6293      	str	r3, [r2, #40]	; 0x28
 8004ea6:	9905      	ldr	r1, [sp, #20]
 8004ea8:	9b06      	ldr	r3, [sp, #24]
 8004eaa:	3901      	subs	r1, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004eb2:	025b      	lsls	r3, r3, #9
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ec4:	6013      	str	r3, [r2, #0]

	SetFracPLL(FracDiv);
 8004ec6:	9908      	ldr	r1, [sp, #32]
	__HAL_RCC_PLL2FRACN_DISABLE();
 8004ec8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004eca:	f023 0310 	bic.w	r3, r3, #16
 8004ece:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 8004ed0:	9009      	str	r0, [sp, #36]	; 0x24
 8004ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed4:	2b31      	cmp	r3, #49	; 0x31
 8004ed6:	d80b      	bhi.n	8004ef0 <SetTXPLL+0x1a8>
		i++;
 8004ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eda:	3301      	adds	r3, #1
 8004edc:	9309      	str	r3, [sp, #36]	; 0x24
		i--;
 8004ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	9309      	str	r3, [sp, #36]	; 0x24
	for (i=0; i< 50; i++)
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eec:	2b31      	cmp	r3, #49	; 0x31
 8004eee:	d9f3      	bls.n	8004ed8 <SetTXPLL+0x190>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 8004ef0:	4a2b      	ldr	r2, [pc, #172]	; (8004fa0 <SetTXPLL+0x258>)
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <SetTXPLL+0x260>)
 8004ef4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8004ef6:	4003      	ands	r3, r0
 8004ef8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004efc:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 8004efe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f00:	f043 0310 	orr.w	r3, r3, #16
 8004f04:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif

}
 8004f06:	b00b      	add	sp, #44	; 0x2c
 8004f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f0c:	4770      	bx	lr
				OutF = XTalFreq * n / m / p / od;
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f16:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1e:	ed8d 7a02 	vstr	s14, [sp, #8]
				if (((TF - OutF) < MinDiff) && ((TF - OutF) > 0) && ((XTalFreq * n / m)> 150000000.0) && ((XTalFreq * n / m)< 960000000.0))
 8004f22:	eddd 7a02 	vldr	s15, [sp, #8]
 8004f26:	ed9d 7a03 	vldr	s14, [sp, #12]
 8004f2a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	d51d      	bpl.n	8004f74 <SetTXPLL+0x22c>
 8004f38:	eddd 7a02 	vldr	s15, [sp, #8]
 8004f3c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	dd14      	ble.n	8004f74 <SetTXPLL+0x22c>
					MinDiff = abs(OutF - TF);
 8004f4a:	eddd 7a02 	vldr	s15, [sp, #8]
 8004f4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f56:	ee17 2a90 	vmov	r2, s15
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	bfb8      	it	lt
 8004f5e:	4252      	neglt	r2, r2
 8004f60:	ee07 2a90 	vmov	s15, r2
 8004f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f68:	edcd 7a03 	vstr	s15, [sp, #12]
					fp = p;
 8004f6c:	9306      	str	r3, [sp, #24]
					fn = n;
 8004f6e:	9105      	str	r1, [sp, #20]
					fm = m;
 8004f70:	9004      	str	r0, [sp, #16]
					fod = od;
 8004f72:	9407      	str	r4, [sp, #28]
			for (p = 2; p <= 128; p+=2)
 8004f74:	3302      	adds	r3, #2
 8004f76:	2b82      	cmp	r3, #130	; 0x82
 8004f78:	d1c9      	bne.n	8004f0e <SetTXPLL+0x1c6>
		for (n = 2; n <= 512; n++) //was 1
 8004f7a:	3101      	adds	r1, #1
 8004f7c:	4561      	cmp	r1, ip
 8004f7e:	f47f aefc 	bne.w	8004d7a <SetTXPLL+0x32>
 8004f82:	e72a      	b.n	8004dda <SetTXPLL+0x92>
		FracDiv = 8191;
 8004f84:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004f88:	9308      	str	r3, [sp, #32]
 8004f8a:	e778      	b.n	8004e7e <SetTXPLL+0x136>
 8004f8c:	24007400 	.word	0x24007400
 8004f90:	4e6e6b28 	.word	0x4e6e6b28
 8004f94:	4d0f0d18 	.word	0x4d0f0d18
 8004f98:	4e64e1c0 	.word	0x4e64e1c0
 8004f9c:	46000000 	.word	0x46000000
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	240062e0 	.word	0x240062e0
 8004fa8:	ffff0007 	.word	0xffff0007
 8004fac:	00000000 	.word	0x00000000

08004fb0 <TXSwitch>:


void TXSwitch(uint8_t Status)
{
 8004fb0:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb2:	2300      	movs	r3, #0
{
 8004fb4:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb6:	e9cd 3300 	strd	r3, r3, [sp]
 8004fba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004fbe:	9304      	str	r3, [sp, #16]

	if (Status)
 8004fc0:	b378      	cbz	r0, 8005022 <TXSwitch+0x72>
	{
		TransmissionEnabled = 1;
		//TODO: TXFreq should be calculated in a low priority task every time F is changed, during RX. In this way TX would start immediately and without
		// audio noise caused by RX starving
		if (LastTXFreq != LOfreq)
 8004fc2:	4d27      	ldr	r5, [pc, #156]	; (8005060 <TXSwitch+0xb0>)
		TransmissionEnabled = 1;
 8004fc4:	2201      	movs	r2, #1
		if (LastTXFreq != LOfreq)
 8004fc6:	4c27      	ldr	r4, [pc, #156]	; (8005064 <TXSwitch+0xb4>)
 8004fc8:	ed95 0a00 	vldr	s0, [r5]
 8004fcc:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <TXSwitch+0xb8>)
		if (LastTXFreq != LOfreq)
 8004fd2:	eef4 7a40 	vcmp.f32	s15, s0
		TransmissionEnabled = 1;
 8004fd6:	701a      	strb	r2, [r3, #0]
		if (LastTXFreq != LOfreq)
 8004fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fdc:	d11c      	bne.n	8005018 <TXSwitch+0x68>
			SetTXPLL(LOfreq);
			LastTXFreq = LOfreq;
		}

		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	f44f 7400 	mov.w	r4, #512	; 0x200
 8004fe6:	2502      	movs	r5, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fe8:	4669      	mov	r1, sp
 8004fea:	4820      	ldr	r0, [pc, #128]	; (800506c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fec:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ff0:	2300      	movs	r3, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ff2:	e9cd 4500 	strd	r4, r5, [sp]
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ff6:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ff8:	f004 fd72 	bl	8009ae0 <HAL_GPIO_Init>

		RELAY_TX_ON;
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005002:	481b      	ldr	r0, [pc, #108]	; (8005070 <TXSwitch+0xc0>)
 8005004:	f004 feac 	bl	8009d60 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 8005008:	2201      	movs	r2, #1
 800500a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800500e:	4819      	ldr	r0, [pc, #100]	; (8005074 <TXSwitch+0xc4>)
 8005010:	f004 fea6 	bl	8009d60 <HAL_GPIO_WritePin>
		RELAY_TX_OFF;
		LED_YELLOW_OFF;
		TransmissionEnabled = 0;

	}
}
 8005014:	b007      	add	sp, #28
 8005016:	bd30      	pop	{r4, r5, pc}
			SetTXPLL(LOfreq);
 8005018:	f7ff fe96 	bl	8004d48 <SetTXPLL>
			LastTXFreq = LOfreq;
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	e7dd      	b.n	8004fde <TXSwitch+0x2e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005022:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8005058 <TXSwitch+0xa8>
 8005026:	4604      	mov	r4, r0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005028:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800502a:	4669      	mov	r1, sp
 800502c:	480f      	ldr	r0, [pc, #60]	; (800506c <TXSwitch+0xbc>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800502e:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005030:	ed8d 7b00 	vstr	d7, [sp]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005034:	f004 fd54 	bl	8009ae0 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005038:	4622      	mov	r2, r4
 800503a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800503e:	480c      	ldr	r0, [pc, #48]	; (8005070 <TXSwitch+0xc0>)
 8005040:	f004 fe8e 	bl	8009d60 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 8005044:	4622      	mov	r2, r4
 8005046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800504a:	480a      	ldr	r0, [pc, #40]	; (8005074 <TXSwitch+0xc4>)
 800504c:	f004 fe88 	bl	8009d60 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <TXSwitch+0xb8>)
 8005052:	701c      	strb	r4, [r3, #0]
}
 8005054:	b007      	add	sp, #28
 8005056:	bd30      	pop	{r4, r5, pc}
 8005058:	00000200 	.word	0x00000200
 800505c:	00000001 	.word	0x00000001
 8005060:	24006258 	.word	0x24006258
 8005064:	24006264 	.word	0x24006264
 8005068:	240062e8 	.word	0x240062e8
 800506c:	58020800 	.word	0x58020800
 8005070:	58020c00 	.word	0x58020c00
 8005074:	58020400 	.word	0x58020400

08005078 <CarrierEnable>:


void CarrierEnable(uint8_t Status)
{
 8005078:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507a:	2400      	movs	r4, #0
{
 800507c:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507e:	e9cd 4400 	strd	r4, r4, [sp]
 8005082:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005086:	9404      	str	r4, [sp, #16]
	if (Status)
 8005088:	b320      	cbz	r0, 80050d4 <CarrierEnable+0x5c>
	{
		//TODO: Ramping
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800508a:	4622      	mov	r2, r4
 800508c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005090:	4822      	ldr	r0, [pc, #136]	; (800511c <CarrierEnable+0xa4>)
 8005092:	f004 fe65 	bl	8009d60 <HAL_GPIO_WritePin>
		//approx bias vs. VRMS 50 Ohm out vs power
		//4095 17.1  5.8
		//2048 13.1  3.4
		//1024 7.5	 1.1
		// 256 3.8   0.3
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8005096:	4b22      	ldr	r3, [pc, #136]	; (8005120 <CarrierEnable+0xa8>)
 8005098:	4622      	mov	r2, r4
 800509a:	2110      	movs	r1, #16
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4821      	ldr	r0, [pc, #132]	; (8005124 <CarrierEnable+0xac>)
 80050a0:	f003 f966 	bl	8008370 <HAL_DAC_SetValue>
		/*Configure GPIO pin : PC9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a8:	2302      	movs	r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	4669      	mov	r1, sp
 80050ac:	481e      	ldr	r0, [pc, #120]	; (8005128 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80050ae:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050b0:	e9cd 2300 	strd	r2, r3, [sp]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2303      	movs	r3, #3
 80050b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050bc:	f004 fd10 	bl	8009ae0 <HAL_GPIO_Init>

		TXCarrierEnabled = 1;
 80050c0:	2201      	movs	r2, #1
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <CarrierEnable+0xb4>)
		LED_GREEN_ON;
 80050c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050c8:	4819      	ldr	r0, [pc, #100]	; (8005130 <CarrierEnable+0xb8>)
		TXCarrierEnabled = 1;
 80050ca:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 80050cc:	f004 fe48 	bl	8009d60 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		LED_GREEN_OFF;
	}
}
 80050d0:	b007      	add	sp, #28
 80050d2:	bd30      	pop	{r4, r5, pc}
 80050d4:	4605      	mov	r5, r0
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80050d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050da:	4810      	ldr	r0, [pc, #64]	; (800511c <CarrierEnable+0xa4>)
 80050dc:	2201      	movs	r2, #1
 80050de:	f004 fe3f 	bl	8009d60 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 80050e2:	462b      	mov	r3, r5
 80050e4:	462a      	mov	r2, r5
 80050e6:	2110      	movs	r1, #16
 80050e8:	480e      	ldr	r0, [pc, #56]	; (8005124 <CarrierEnable+0xac>)
 80050ea:	f003 f941 	bl	8008370 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f2:	2301      	movs	r3, #1
		TXCarrierEnabled = 0;
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <CarrierEnable+0xb4>)
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f6:	4669      	mov	r1, sp
		TXCarrierEnabled = 0;
 80050f8:	7005      	strb	r5, [r0, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050fa:	480b      	ldr	r0, [pc, #44]	; (8005128 <CarrierEnable+0xb0>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005100:	2300      	movs	r3, #0
 8005102:	2202      	movs	r2, #2
 8005104:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005108:	f004 fcea 	bl	8009ae0 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 800510c:	462a      	mov	r2, r5
 800510e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005112:	4807      	ldr	r0, [pc, #28]	; (8005130 <CarrierEnable+0xb8>)
 8005114:	f004 fe24 	bl	8009d60 <HAL_GPIO_WritePin>
}
 8005118:	b007      	add	sp, #28
 800511a:	bd30      	pop	{r4, r5, pc}
 800511c:	58020c00 	.word	0x58020c00
 8005120:	240062ec 	.word	0x240062ec
 8005124:	2400a508 	.word	0x2400a508
 8005128:	58020800 	.word	0x58020800
 800512c:	240062dc 	.word	0x240062dc
 8005130:	58020400 	.word	0x58020400

08005134 <Error_Handler>:
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005134:	4e09      	ldr	r6, [pc, #36]	; (800515c <Error_Handler+0x28>)
{
 8005136:	4d0a      	ldr	r5, [pc, #40]	; (8005160 <Error_Handler+0x2c>)
 8005138:	4c0a      	ldr	r4, [pc, #40]	; (8005164 <Error_Handler+0x30>)
 800513a:	b508      	push	{r3, lr}
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	fb05 f303 	mul.w	r3, r5, r3
 8005142:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8005146:	d200      	bcs.n	800514a <Error_Handler+0x16>
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8005148:	e7fe      	b.n	8005148 <Error_Handler+0x14>
			LED_switch();
 800514a:	f7fd f913 	bl	8002374 <LED_switch>
 800514e:	6833      	ldr	r3, [r6, #0]
 8005150:	fb05 f303 	mul.w	r3, r5, r3
 8005154:	ebb4 0f73 	cmp.w	r4, r3, ror #1
 8005158:	d2f7      	bcs.n	800514a <Error_Handler+0x16>
 800515a:	e7f5      	b.n	8005148 <Error_Handler+0x14>
 800515c:	2400a840 	.word	0x2400a840
 8005160:	c28f5c29 	.word	0xc28f5c29
 8005164:	051eb851 	.word	0x051eb851

08005168 <SystemClock_Config_For_OC>:
{
 8005168:	b530      	push	{r4, r5, lr}
 800516a:	b0cf      	sub	sp, #316	; 0x13c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800516c:	224c      	movs	r2, #76	; 0x4c
 800516e:	2100      	movs	r1, #0
 8005170:	a80a      	add	r0, sp, #40	; 0x28
 8005172:	f00b fc37 	bl	80109e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005176:	2220      	movs	r2, #32
 8005178:	2100      	movs	r1, #0
 800517a:	a802      	add	r0, sp, #8
 800517c:	f00b fc32 	bl	80109e4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005180:	22c0      	movs	r2, #192	; 0xc0
 8005182:	2100      	movs	r1, #0
 8005184:	a81e      	add	r0, sp, #120	; 0x78
 8005186:	f00b fc2d 	bl	80109e4 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800518a:	2002      	movs	r0, #2
 800518c:	f005 fe6a 	bl	800ae64 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005190:	4a49      	ldr	r2, [pc, #292]	; (80052b8 <SystemClock_Config_For_OC+0x150>)
 8005192:	2300      	movs	r3, #0
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	6991      	ldr	r1, [r2, #24]
 8005198:	4b48      	ldr	r3, [pc, #288]	; (80052bc <SystemClock_Config_For_OC+0x154>)
 800519a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800519e:	6191      	str	r1, [r2, #24]
 80051a0:	6991      	ldr	r1, [r2, #24]
 80051a2:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80051a6:	9101      	str	r1, [sp, #4]
 80051a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051aa:	f041 0101 	orr.w	r1, r1, #1
 80051ae:	62d9      	str	r1, [r3, #44]	; 0x2c
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80051ba:	6993      	ldr	r3, [r2, #24]
 80051bc:	0499      	lsls	r1, r3, #18
 80051be:	d5fc      	bpl.n	80051ba <SystemClock_Config_For_OC+0x52>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80051c0:	4a3f      	ldr	r2, [pc, #252]	; (80052c0 <SystemClock_Config_For_OC+0x158>)
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80051c2:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80051c4:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051c6:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80051c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	f043 0302 	orr.w	r3, r3, #2
 80051d2:	6293      	str	r3, [r2, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051d4:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLM = 10;
 80051d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80051da:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 80051dc:	9317      	str	r3, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80051de:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80051e0:	941a      	str	r4, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80051e2:	9418      	str	r4, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051e4:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80051e8:	2300      	movs	r3, #0
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80051ea:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 10;
 80051ee:	230a      	movs	r3, #10
 80051f0:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
	XTalFreq += XTalFreq * XTAL_F_ERROR;
 80051f4:	4b33      	ldr	r3, [pc, #204]	; (80052c4 <SystemClock_Config_For_OC+0x15c>)
 80051f6:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <SystemClock_Config_For_OC+0x160>)
 80051f8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80051fa:	2221      	movs	r2, #33	; 0x21
 80051fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005200:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005204:	f005 fede 	bl	800afc4 <HAL_RCC_OscConfig>
 8005208:	2800      	cmp	r0, #0
 800520a:	d152      	bne.n	80052b2 <SystemClock_Config_For_OC+0x14a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800520c:	223f      	movs	r2, #63	; 0x3f
 800520e:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005210:	4621      	mov	r1, r4
 8005212:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	2308      	movs	r3, #8
 800521c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005220:	2240      	movs	r2, #64	; 0x40
 8005222:	2340      	movs	r3, #64	; 0x40
 8005224:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005232:	f006 faad 	bl	800b790 <HAL_RCC_ClockConfig>
 8005236:	2800      	cmp	r0, #0
 8005238:	d13b      	bne.n	80052b2 <SystemClock_Config_For_OC+0x14a>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 800523a:	4a24      	ldr	r2, [pc, #144]	; (80052cc <SystemClock_Config_For_OC+0x164>)
 800523c:	2300      	movs	r3, #0
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800523e:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005242:	903c      	str	r0, [sp, #240]	; 0xf0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005244:	a81e      	add	r0, sp, #120	; 0x78
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005246:	9140      	str	r1, [sp, #256]	; 0x100
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8005248:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800524c:	2204      	movs	r2, #4
 800524e:	2326      	movs	r3, #38	; 0x26
 8005250:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8005254:	2218      	movs	r2, #24
 8005256:	2302      	movs	r3, #2
 8005258:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 800525c:	2202      	movs	r2, #2
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
 800526c:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005270:	f44f 6280 	mov.w	r2, #1024	; 0x400
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8005278:	9245      	str	r2, [sp, #276]	; 0x114
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800527a:	2205      	movs	r2, #5
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800527c:	9347      	str	r3, [sp, #284]	; 0x11c
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
 8005284:	2202      	movs	r2, #2
 8005286:	2308      	movs	r3, #8
 8005288:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 800528c:	2205      	movs	r2, #5
 800528e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005292:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005296:	f006 fd67 	bl	800bd68 <HAL_RCCEx_PeriphCLKConfig>
 800529a:	b950      	cbnz	r0, 80052b2 <SystemClock_Config_For_OC+0x14a>
	HAL_PWREx_EnableUSBVoltageDetector();
 800529c:	f005 fe06 	bl	800aeac <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 80052a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80052a4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80052a8:	4628      	mov	r0, r5
 80052aa:	f006 f97f 	bl	800b5ac <HAL_RCC_MCOConfig>
}
 80052ae:	b04f      	add	sp, #316	; 0x13c
 80052b0:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80052b2:	f7ff ff3f 	bl	8005134 <Error_Handler>
 80052b6:	bf00      	nop
 80052b8:	58024800 	.word	0x58024800
 80052bc:	58000400 	.word	0x58000400
 80052c0:	58024400 	.word	0x58024400
 80052c4:	24007400 	.word	0x24007400
 80052c8:	4bbebbd3 	.word	0x4bbebbd3
 80052cc:	000c0042 	.word	0x000c0042

080052d0 <UserInput>:
{
 80052d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (WSPRBeaconState == SEND_WSPR)
 80052d4:	4d84      	ldr	r5, [pc, #528]	; (80054e8 <UserInput+0x218>)
{
 80052d6:	b08d      	sub	sp, #52	; 0x34
	if (WSPRBeaconState == SEND_WSPR)
 80052d8:	782e      	ldrb	r6, [r5, #0]
 80052da:	2e02      	cmp	r6, #2
 80052dc:	f000 812c 	beq.w	8005538 <UserInput+0x268>
	if (USBRXLength)
 80052e0:	4b82      	ldr	r3, [pc, #520]	; (80054ec <UserInput+0x21c>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	bb2a      	cbnz	r2, 8005332 <UserInput+0x62>
		result = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f88d 3017 	strb.w	r3, [sp, #23]
	if (result == HAL_OK)
 80052ec:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80052f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052f4:	b33b      	cbz	r3, 8005346 <UserInput+0x76>
 80052f6:	4c7e      	ldr	r4, [pc, #504]	; (80054f0 <UserInput+0x220>)
	EncVal = TIM4->CNT;
 80052f8:	4b7e      	ldr	r3, [pc, #504]	; (80054f4 <UserInput+0x224>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80052fa:	4d7f      	ldr	r5, [pc, #508]	; (80054f8 <UserInput+0x228>)
	EncVal = TIM4->CNT;
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 80052fe:	882a      	ldrh	r2, [r5, #0]
	EncVal = TIM4->CNT;
 8005300:	b29b      	uxth	r3, r3
 8005302:	4e7e      	ldr	r6, [pc, #504]	; (80054fc <UserInput+0x22c>)
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005304:	1a98      	subs	r0, r3, r2
	EncVal = TIM4->CNT;
 8005306:	8033      	strh	r3, [r6, #0]
	DiffEncVal = (int32_t) (EncVal - LastEncVal);
 8005308:	b201      	sxth	r1, r0
 800530a:	b280      	uxth	r0, r0
	if (DiffEncVal < 0)
 800530c:	2900      	cmp	r1, #0
 800530e:	f2c0 80d9 	blt.w	80054c4 <UserInput+0x1f4>
	if (DiffEncVal > 0)
 8005312:	f000 8081 	beq.w	8005418 <UserInput+0x148>
		FminusClicked(DiffEncVal); // One encoder click is two counts
 8005316:	f7fc ff95 	bl	8002244 <FminusClicked>
	if (!DisableDisplay)
 800531a:	7823      	ldrb	r3, [r4, #0]
 800531c:	b913      	cbnz	r3, 8005324 <UserInput+0x54>
 800531e:	f7ff fa15 	bl	800474c <DisplayStatus.part.0>
	if (!DisableDisplay)
 8005322:	7823      	ldrb	r3, [r4, #0]
		LastEncVal = EncVal;
 8005324:	8832      	ldrh	r2, [r6, #0]
 8005326:	802a      	strh	r2, [r5, #0]
	if (!DisableDisplay)
 8005328:	2b00      	cmp	r3, #0
 800532a:	d078      	beq.n	800541e <UserInput+0x14e>
}
 800532c:	b00d      	add	sp, #52	; 0x34
 800532e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		result = HAL_OK;
 8005332:	2200      	movs	r2, #0
 8005334:	f88d 2017 	strb.w	r2, [sp, #23]
		USBRXLength = 0;
 8005338:	601a      	str	r2, [r3, #0]
	if (result == HAL_OK)
 800533a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800533e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1d7      	bne.n	80052f6 <UserInput+0x26>
		switch (UartRXString[0])
 8005346:	4b6e      	ldr	r3, [pc, #440]	; (8005500 <UserInput+0x230>)
		UartRXDataReady = RESET;
 8005348:	496e      	ldr	r1, [pc, #440]	; (8005504 <UserInput+0x234>)
		switch (UartRXString[0])
 800534a:	781b      	ldrb	r3, [r3, #0]
		UartRXDataReady = RESET;
 800534c:	700a      	strb	r2, [r1, #0]
		switch (UartRXString[0])
 800534e:	3b2b      	subs	r3, #43	; 0x2b
 8005350:	2b4c      	cmp	r3, #76	; 0x4c
 8005352:	d859      	bhi.n	8005408 <UserInput+0x138>
 8005354:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005358:	00580159 	.word	0x00580159
 800535c:	0058016b 	.word	0x0058016b
 8005360:	00580058 	.word	0x00580058
 8005364:	01840180 	.word	0x01840180
 8005368:	018c0188 	.word	0x018c0188
 800536c:	01940190 	.word	0x01940190
 8005370:	019c0198 	.word	0x019c0198
 8005374:	005801a0 	.word	0x005801a0
 8005378:	00580058 	.word	0x00580058
 800537c:	00580058 	.word	0x00580058
 8005380:	00580058 	.word	0x00580058
 8005384:	01a40058 	.word	0x01a40058
 8005388:	01ac01a8 	.word	0x01ac01a8
 800538c:	00580058 	.word	0x00580058
 8005390:	00580058 	.word	0x00580058
 8005394:	01b00058 	.word	0x01b00058
 8005398:	01ba01b5 	.word	0x01ba01b5
 800539c:	00580058 	.word	0x00580058
 80053a0:	00580058 	.word	0x00580058
 80053a4:	00580058 	.word	0x00580058
 80053a8:	00580058 	.word	0x00580058
 80053ac:	00580058 	.word	0x00580058
 80053b0:	005801bf 	.word	0x005801bf
 80053b4:	02dd01c7 	.word	0x02dd01c7
 80053b8:	00580058 	.word	0x00580058
 80053bc:	00580058 	.word	0x00580058
 80053c0:	00580058 	.word	0x00580058
 80053c4:	02c802e5 	.word	0x02c802e5
 80053c8:	005802cc 	.word	0x005802cc
 80053cc:	02d00058 	.word	0x02d00058
 80053d0:	004d02d4 	.word	0x004d02d4
 80053d4:	00580058 	.word	0x00580058
 80053d8:	01d60058 	.word	0x01d60058
 80053dc:	01da0058 	.word	0x01da0058
 80053e0:	00580058 	.word	0x00580058
 80053e4:	01de0058 	.word	0x01de0058
 80053e8:	0222021e 	.word	0x0222021e
 80053ec:	02a60278 	.word	0x02a60278
 80053f0:	0155      	.short	0x0155
			keyer_speed += 1;
 80053f2:	4b45      	ldr	r3, [pc, #276]	; (8005508 <UserInput+0x238>)
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	3001      	adds	r0, #1
			if (keyer_speed > 50)
 80053f8:	2832      	cmp	r0, #50	; 0x32
 80053fa:	f340 8296 	ble.w	800592a <UserInput+0x65a>
				keyer_speed = 50;
 80053fe:	2232      	movs	r2, #50	; 0x32
 8005400:	4610      	mov	r0, r2
 8005402:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005404:	f7fc f872 	bl	80014ec <loadWPM>
	if (!DisableDisplay)
 8005408:	4c39      	ldr	r4, [pc, #228]	; (80054f0 <UserInput+0x220>)
 800540a:	7823      	ldrb	r3, [r4, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f47f af73 	bne.w	80052f8 <UserInput+0x28>
 8005412:	f7ff f99b 	bl	800474c <DisplayStatus.part.0>
 8005416:	e76f      	b.n	80052f8 <UserInput+0x28>
	if (!DisableDisplay)
 8005418:	7823      	ldrb	r3, [r4, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d186      	bne.n	800532c <UserInput+0x5c>
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800541e:	4b3b      	ldr	r3, [pc, #236]	; (800550c <UserInput+0x23c>)
 8005420:	4c3b      	ldr	r4, [pc, #236]	; (8005510 <UserInput+0x240>)
 8005422:	ed93 7a00 	vldr	s14, [r3]
 8005426:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80054d8 <UserInput+0x208>
 800542a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800542e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005432:	f00e fc25 	bl	8013c80 <log10>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005436:	4937      	ldr	r1, [pc, #220]	; (8005514 <UserInput+0x244>)
 8005438:	4a37      	ldr	r2, [pc, #220]	; (8005518 <UserInput+0x248>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800543a:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 800543e:	4b37      	ldr	r3, [pc, #220]	; (800551c <UserInput+0x24c>)
 8005440:	6808      	ldr	r0, [r1, #0]
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4936      	ldr	r1, [pc, #216]	; (8005520 <UserInput+0x250>)
 8005448:	9300      	str	r3, [sp, #0]
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800544a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80054e0 <UserInput+0x210>
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 800544e:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8005452:	4834      	ldr	r0, [pc, #208]	; (8005524 <UserInput+0x254>)
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005454:	eea0 7b06 	vfma.f64	d7, d0, d6
 8005458:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 800545c:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
		SValue = 4 + 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8005460:	ed84 7a00 	vstr	s14, [r4]
		sprintf((char*)UartTXString, "\e[1;1HS %-4.1f     T %d:%2d:%2d  \r", SValue, DCF77Hour, (int)SystemMinutes, (int)SystemSeconds);
 8005464:	ec53 2b16 	vmov	r2, r3, d6
 8005468:	f00c f8cc 	bl	8011604 <siprintf>
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 800546c:	482d      	ldr	r0, [pc, #180]	; (8005524 <UserInput+0x254>)
 800546e:	f7fa ff97 	bl	80003a0 <strlen>
 8005472:	4601      	mov	r1, r0
 8005474:	482b      	ldr	r0, [pc, #172]	; (8005524 <UserInput+0x254>)
 8005476:	b289      	uxth	r1, r1
 8005478:	f00a ffc4 	bl	8010404 <CDC_Transmit_FS>
	HAL_Delay(1);
 800547c:	2001      	movs	r0, #1
 800547e:	f001 fbcb 	bl	8006c18 <HAL_Delay>
		if (OVFDetected)
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <UserInput+0x258>)
 8005484:	8813      	ldrh	r3, [r2, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80a5 	beq.w	80055d6 <UserInput+0x306>
			OVFDetected--;
 800548c:	3b01      	subs	r3, #1
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 800548e:	4927      	ldr	r1, [pc, #156]	; (800552c <UserInput+0x25c>)
 8005490:	4c24      	ldr	r4, [pc, #144]	; (8005524 <UserInput+0x254>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005492:	2580      	movs	r5, #128	; 0x80
			OVFDetected--;
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 8005498:	4a25      	ldr	r2, [pc, #148]	; (8005530 <UserInput+0x260>)
 800549a:	6816      	ldr	r6, [r2, #0]
			sprintf((char*)UartTXString, "\e[4;1HOVF\r");
 800549c:	c907      	ldmia	r1, {r0, r1, r2}
 800549e:	c403      	stmia	r4!, {r0, r1}
 80054a0:	f824 2b02 	strh.w	r2, [r4], #2
 80054a4:	0c12      	lsrs	r2, r2, #16
 80054a6:	7022      	strb	r2, [r4, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80054a8:	4a22      	ldr	r2, [pc, #136]	; (8005534 <UserInput+0x264>)
			__HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_AWD1);
 80054aa:	6035      	str	r5, [r6, #0]
			__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_AWD1);
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	6015      	str	r5, [r2, #0]
			if (!OVFDetected)
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 8098 	bne.w	80055e6 <UserInput+0x316>
				__HAL_ADC_ENABLE_IT(&hadc1, (ADC_IT_AWD1));
 80054b6:	6873      	ldr	r3, [r6, #4]
 80054b8:	432b      	orrs	r3, r5
 80054ba:	6073      	str	r3, [r6, #4]
				__HAL_ADC_ENABLE_IT(&hadc2, (ADC_IT_AWD1));
 80054bc:	6853      	ldr	r3, [r2, #4]
 80054be:	432b      	orrs	r3, r5
 80054c0:	6053      	str	r3, [r2, #4]
 80054c2:	e090      	b.n	80055e6 <UserInput+0x316>
		FplusClicked(-DiffEncVal); // One encoder click is two counts
 80054c4:	1ad0      	subs	r0, r2, r3
 80054c6:	b280      	uxth	r0, r0
 80054c8:	f7fc fe24 	bl	8002114 <FplusClicked>
	if (!DisableDisplay)
 80054cc:	7823      	ldrb	r3, [r4, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f47f af28 	bne.w	8005324 <UserInput+0x54>
 80054d4:	e723      	b.n	800531e <UserInput+0x4e>
 80054d6:	bf00      	nop
 80054d8:	00000000 	.word	0x00000000
 80054dc:	409f4000 	.word	0x409f4000
 80054e0:	9916f6a6 	.word	0x9916f6a6
 80054e4:	400a93fc 	.word	0x400a93fc
 80054e8:	240073fd 	.word	0x240073fd
 80054ec:	240062f0 	.word	0x240062f0
 80054f0:	24001030 	.word	0x24001030
 80054f4:	40000800 	.word	0x40000800
 80054f8:	24006260 	.word	0x24006260
 80054fc:	24001032 	.word	0x24001032
 8005500:	240062f8 	.word	0x240062f8
 8005504:	240062f6 	.word	0x240062f6
 8005508:	2400a810 	.word	0x2400a810
 800550c:	2400627c 	.word	0x2400627c
 8005510:	24006284 	.word	0x24006284
 8005514:	240062d8 	.word	0x240062d8
 8005518:	240062d4 	.word	0x240062d4
 800551c:	24001019 	.word	0x24001019
 8005520:	0801dcd8 	.word	0x0801dcd8
 8005524:	240063f8 	.word	0x240063f8
 8005528:	24006272 	.word	0x24006272
 800552c:	0801dcfc 	.word	0x0801dcfc
 8005530:	2400a43c 	.word	0x2400a43c
 8005534:	2400a4a0 	.word	0x2400a4a0
		HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8005538:	48c7      	ldr	r0, [pc, #796]	; (8005858 <UserInput+0x588>)
 800553a:	f002 fccd 	bl	8007ed8 <HAL_ADCEx_MultiModeStop_DMA>
		SendWSPR(); //endless loop, only way to exit is by CW keying.
 800553e:	f7ff f803 	bl	8004548 <SendWSPR>
		if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8005542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005546:	49c5      	ldr	r1, [pc, #788]	; (800585c <UserInput+0x58c>)
 8005548:	48c3      	ldr	r0, [pc, #780]	; (8005858 <UserInput+0x588>)
 800554a:	f002 fc49 	bl	8007de0 <HAL_ADCEx_MultiModeStart_DMA>
 800554e:	4604      	mov	r4, r0
 8005550:	2800      	cmp	r0, #0
 8005552:	f040 81f4 	bne.w	800593e <UserInput+0x66e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005556:	f44f 7800 	mov.w	r8, #512	; 0x200
 800555a:	f04f 0901 	mov.w	r9, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800555e:	a906      	add	r1, sp, #24
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005560:	9608      	str	r6, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005562:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005566:	48be      	ldr	r0, [pc, #760]	; (8005860 <UserInput+0x590>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005568:	e9cd 8906 	strd	r8, r9, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800556c:	f004 fab8 	bl	8009ae0 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005570:	4622      	mov	r2, r4
 8005572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005576:	48bb      	ldr	r0, [pc, #748]	; (8005864 <UserInput+0x594>)
 8005578:	f004 fbf2 	bl	8009d60 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800557c:	4622      	mov	r2, r4
 800557e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005582:	48b9      	ldr	r0, [pc, #740]	; (8005868 <UserInput+0x598>)
 8005584:	f004 fbec 	bl	8009d60 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005588:	4bb8      	ldr	r3, [pc, #736]	; (800586c <UserInput+0x59c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800558a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800558e:	48b5      	ldr	r0, [pc, #724]	; (8005864 <UserInput+0x594>)
 8005590:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8005592:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	940a      	str	r4, [sp, #40]	; 0x28
 8005596:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800559a:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800559e:	f004 fbdf 	bl	8009d60 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 80055a2:	4623      	mov	r3, r4
 80055a4:	4622      	mov	r2, r4
 80055a6:	2110      	movs	r1, #16
 80055a8:	48b1      	ldr	r0, [pc, #708]	; (8005870 <UserInput+0x5a0>)
 80055aa:	f002 fee1 	bl	8008370 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055ae:	2202      	movs	r2, #2
 80055b0:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055b2:	a906      	add	r1, sp, #24
 80055b4:	48aa      	ldr	r0, [pc, #680]	; (8005860 <UserInput+0x590>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 80055ba:	4bae      	ldr	r3, [pc, #696]	; (8005874 <UserInput+0x5a4>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
		TXCarrierEnabled = 0;
 80055c0:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055c2:	f004 fa8d 	bl	8009ae0 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 80055c6:	4622      	mov	r2, r4
 80055c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055cc:	48a6      	ldr	r0, [pc, #664]	; (8005868 <UserInput+0x598>)
 80055ce:	f004 fbc7 	bl	8009d60 <HAL_GPIO_WritePin>
		WSPRBeaconState = NO_FIX;
 80055d2:	702c      	strb	r4, [r5, #0]
 80055d4:	e684      	b.n	80052e0 <UserInput+0x10>
			sprintf((char*)UartTXString, "\e[4;1H   \r");
 80055d6:	4aa8      	ldr	r2, [pc, #672]	; (8005878 <UserInput+0x5a8>)
 80055d8:	4ba8      	ldr	r3, [pc, #672]	; (800587c <UserInput+0x5ac>)
 80055da:	ca07      	ldmia	r2, {r0, r1, r2}
 80055dc:	0c14      	lsrs	r4, r2, #16
 80055de:	c303      	stmia	r3!, {r0, r1}
 80055e0:	f823 2b02 	strh.w	r2, [r3], #2
 80055e4:	701c      	strb	r4, [r3, #0]
	CDC_Transmit_FS(UartTXString, strlen((char *)UartTXString));
 80055e6:	48a5      	ldr	r0, [pc, #660]	; (800587c <UserInput+0x5ac>)
 80055e8:	f7fa feda 	bl	80003a0 <strlen>
 80055ec:	4601      	mov	r1, r0
 80055ee:	48a3      	ldr	r0, [pc, #652]	; (800587c <UserInput+0x5ac>)
 80055f0:	b289      	uxth	r1, r1
 80055f2:	f00a ff07 	bl	8010404 <CDC_Transmit_FS>
	HAL_Delay(1);
 80055f6:	2001      	movs	r0, #1
}
 80055f8:	b00d      	add	sp, #52	; 0x34
 80055fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80055fe:	f001 bb0b 	b.w	8006c18 <HAL_Delay>
			SetBW((Bwidth)Wide);  break;
 8005602:	2001      	movs	r0, #1
 8005604:	f7fc fbbc 	bl	8001d80 <SetBW>
 8005608:	e6fe      	b.n	8005408 <UserInput+0x138>
			volume += 0.1;
 800560a:	4b9d      	ldr	r3, [pc, #628]	; (8005880 <UserInput+0x5b0>)
			if (volume > 1.0)
 800560c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8005610:	ed93 7a00 	vldr	s14, [r3]
 8005614:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8005850 <UserInput+0x580>
 8005618:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800561c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005620:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005624:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 8005628:	edc3 7a00 	vstr	s15, [r3]
 800562c:	e6ec      	b.n	8005408 <UserInput+0x138>
			volume -= 0.1;
 800562e:	4b94      	ldr	r3, [pc, #592]	; (8005880 <UserInput+0x5b0>)
			if (volume < 0)
 8005630:	2200      	movs	r2, #0
			volume -= 0.1;
 8005632:	ed93 7a00 	vldr	s14, [r3]
 8005636:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8005850 <UserInput+0x580>
 800563a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800563e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005642:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8005646:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volume -= 0.1;
 800564e:	bf54      	ite	pl
 8005650:	ed83 7a00 	vstrpl	s14, [r3]
				volume = 0;
 8005654:	601a      	strmi	r2, [r3, #0]
 8005656:	e6d7      	b.n	8005408 <UserInput+0x138>
			FminusClicked(2); break;
 8005658:	2002      	movs	r0, #2
 800565a:	f7fc fdf3 	bl	8002244 <FminusClicked>
 800565e:	e6d3      	b.n	8005408 <UserInput+0x138>
			FplusClicked(2); break;
 8005660:	2002      	movs	r0, #2
 8005662:	f7fc fd57 	bl	8002114 <FplusClicked>
 8005666:	e6cf      	b.n	8005408 <UserInput+0x138>
			SetFstep(5);  break;
 8005668:	2005      	movs	r0, #5
 800566a:	f7fc fd31 	bl	80020d0 <SetFstep>
 800566e:	e6cb      	b.n	8005408 <UserInput+0x138>
			SetFstep(4);  break;
 8005670:	2004      	movs	r0, #4
 8005672:	f7fc fd2d 	bl	80020d0 <SetFstep>
 8005676:	e6c7      	b.n	8005408 <UserInput+0x138>
			SetFstep(3);  break;
 8005678:	2003      	movs	r0, #3
 800567a:	f7fc fd29 	bl	80020d0 <SetFstep>
 800567e:	e6c3      	b.n	8005408 <UserInput+0x138>
			SetFstep(2);  break;
 8005680:	2002      	movs	r0, #2
 8005682:	f7fc fd25 	bl	80020d0 <SetFstep>
 8005686:	e6bf      	b.n	8005408 <UserInput+0x138>
			SetFstep(1); break;
 8005688:	2001      	movs	r0, #1
 800568a:	f7fc fd21 	bl	80020d0 <SetFstep>
 800568e:	e6bb      	b.n	8005408 <UserInput+0x138>
			SetFstep(0); break;
 8005690:	2000      	movs	r0, #0
 8005692:	f7fc fd1d 	bl	80020d0 <SetFstep>
 8005696:	e6b7      	b.n	8005408 <UserInput+0x138>
			SetFstep(9); break;
 8005698:	2009      	movs	r0, #9
 800569a:	f7fc fd19 	bl	80020d0 <SetFstep>
 800569e:	e6b3      	b.n	8005408 <UserInput+0x138>
			DisableDisplay = 1; break;
 80056a0:	4c78      	ldr	r4, [pc, #480]	; (8005884 <UserInput+0x5b4>)
 80056a2:	2301      	movs	r3, #1
 80056a4:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 80056a6:	e627      	b.n	80052f8 <UserInput+0x28>
			SendCWMessage(0); break;
 80056a8:	2000      	movs	r0, #0
 80056aa:	f7fc f9a9 	bl	8001a00 <SendCWMessage>
 80056ae:	e6ab      	b.n	8005408 <UserInput+0x138>
			SendCWMessage(1); break;
 80056b0:	2001      	movs	r0, #1
 80056b2:	f7fc f9a5 	bl	8001a00 <SendCWMessage>
 80056b6:	e6a7      	b.n	8005408 <UserInput+0x138>
			TxPowerOut = LOW_POWER_OUT;
 80056b8:	4b73      	ldr	r3, [pc, #460]	; (8005888 <UserInput+0x5b8>)
 80056ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056be:	601a      	str	r2, [r3, #0]
			break;
 80056c0:	e6a2      	b.n	8005408 <UserInput+0x138>
			TxPowerOut = MID_POWER_OUT;
 80056c2:	4b71      	ldr	r3, [pc, #452]	; (8005888 <UserInput+0x5b8>)
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	601a      	str	r2, [r3, #0]
			break;
 80056ca:	e69d      	b.n	8005408 <UserInput+0x138>
			TxPowerOut = MAX_POWER_OUT;
 80056cc:	4b6e      	ldr	r3, [pc, #440]	; (8005888 <UserInput+0x5b8>)
 80056ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80056d2:	601a      	str	r2, [r3, #0]
			break;
 80056d4:	e698      	b.n	8005408 <UserInput+0x138>
			if (ShowWF)
 80056d6:	4b6d      	ldr	r3, [pc, #436]	; (800588c <UserInput+0x5bc>)
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f000 8127 	beq.w	800592e <UserInput+0x65e>
				ShowWF=0;
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e690      	b.n	8005408 <UserInput+0x138>
			SetWSPRPLLCoeff((double)LOfreq, FracDivCoeff, FracPWMCoeff);
 80056e6:	4b6a      	ldr	r3, [pc, #424]	; (8005890 <UserInput+0x5c0>)
 80056e8:	496a      	ldr	r1, [pc, #424]	; (8005894 <UserInput+0x5c4>)
 80056ea:	ed93 0a00 	vldr	s0, [r3]
 80056ee:	486a      	ldr	r0, [pc, #424]	; (8005898 <UserInput+0x5c8>)
 80056f0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80056f4:	f7ff f9c0 	bl	8004a78 <SetWSPRPLLCoeff>
			TransmittingWSPR = 1;
 80056f8:	4b68      	ldr	r3, [pc, #416]	; (800589c <UserInput+0x5cc>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
			SendWSPR();
 80056fe:	f7fe ff23 	bl	8004548 <SendWSPR>
			break;
 8005702:	e681      	b.n	8005408 <UserInput+0x138>
			SetMode((Mode)LSB); break;
 8005704:	2001      	movs	r0, #1
 8005706:	f7fc fca7 	bl	8002058 <SetMode>
 800570a:	e67d      	b.n	8005408 <UserInput+0x138>
			SetBW((Bwidth)Narrow);  break;
 800570c:	2000      	movs	r0, #0
 800570e:	f7fc fb37 	bl	8001d80 <SetBW>
 8005712:	e679      	b.n	8005408 <UserInput+0x138>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005714:	2400      	movs	r4, #0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005716:	2302      	movs	r3, #2
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005718:	f44f 7600 	mov.w	r6, #512	; 0x200
 800571c:	2701      	movs	r7, #1
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800571e:	a906      	add	r1, sp, #24
 8005720:	484f      	ldr	r0, [pc, #316]	; (8005860 <UserInput+0x590>)
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005722:	9308      	str	r3, [sp, #32]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005724:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005728:	e9cd 6706 	strd	r6, r7, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800572c:	f004 f9d8 	bl	8009ae0 <HAL_GPIO_Init>
		RELAY_TX_OFF;
 8005730:	4622      	mov	r2, r4
 8005732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005736:	484b      	ldr	r0, [pc, #300]	; (8005864 <UserInput+0x594>)
 8005738:	f004 fb12 	bl	8009d60 <HAL_GPIO_WritePin>
		LED_YELLOW_OFF;
 800573c:	4622      	mov	r2, r4
 800573e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005742:	4849      	ldr	r0, [pc, #292]	; (8005868 <UserInput+0x598>)
 8005744:	f004 fb0c 	bl	8009d60 <HAL_GPIO_WritePin>
		TransmissionEnabled = 0;
 8005748:	4b48      	ldr	r3, [pc, #288]	; (800586c <UserInput+0x59c>)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800574a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800574e:	4845      	ldr	r0, [pc, #276]	; (8005864 <UserInput+0x594>)
 8005750:	2201      	movs	r2, #1
		TransmissionEnabled = 0;
 8005752:	701c      	strb	r4, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	940a      	str	r4, [sp, #40]	; 0x28
 8005756:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800575a:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800575e:	f004 faff 	bl	8009d60 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias. TODO: Need ramping
 8005762:	4623      	mov	r3, r4
 8005764:	4622      	mov	r2, r4
 8005766:	2110      	movs	r1, #16
 8005768:	4841      	ldr	r0, [pc, #260]	; (8005870 <UserInput+0x5a0>)
 800576a:	f002 fe01 	bl	8008370 <HAL_DAC_SetValue>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800576e:	2202      	movs	r2, #2
 8005770:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005772:	a906      	add	r1, sp, #24
 8005774:	483a      	ldr	r0, [pc, #232]	; (8005860 <UserInput+0x590>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005776:	e9cd 2308 	strd	r2, r3, [sp, #32]
		TXCarrierEnabled = 0;
 800577a:	4b3e      	ldr	r3, [pc, #248]	; (8005874 <UserInput+0x5a4>)
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800577c:	e9cd 6706 	strd	r6, r7, [sp, #24]
		TXCarrierEnabled = 0;
 8005780:	701c      	strb	r4, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005782:	f004 f9ad 	bl	8009ae0 <HAL_GPIO_Init>
		LED_GREEN_OFF;
 8005786:	4622      	mov	r2, r4
 8005788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800578c:	4836      	ldr	r0, [pc, #216]	; (8005868 <UserInput+0x598>)
 800578e:	f004 fae7 	bl	8009d60 <HAL_GPIO_WritePin>
}
 8005792:	e639      	b.n	8005408 <UserInput+0x138>
			SetAGC((Agctype)Slow);  break;
 8005794:	2001      	movs	r0, #1
 8005796:	f7fc fb59 	bl	8001e4c <SetAGC>
 800579a:	e635      	b.n	8005408 <UserInput+0x138>
		if (LastTXFreq != LOfreq)
 800579c:	4d3c      	ldr	r5, [pc, #240]	; (8005890 <UserInput+0x5c0>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579e:	2300      	movs	r3, #0
		if (LastTXFreq != LOfreq)
 80057a0:	4c3f      	ldr	r4, [pc, #252]	; (80058a0 <UserInput+0x5d0>)
		TransmissionEnabled = 1;
 80057a2:	2101      	movs	r1, #1
		if (LastTXFreq != LOfreq)
 80057a4:	ed95 0a00 	vldr	s0, [r5]
 80057a8:	edd4 7a00 	vldr	s15, [r4]
		TransmissionEnabled = 1;
 80057ac:	4a2f      	ldr	r2, [pc, #188]	; (800586c <UserInput+0x59c>)
		if (LastTXFreq != LOfreq)
 80057ae:	eef4 7a40 	vcmp.f32	s15, s0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b2:	930a      	str	r3, [sp, #40]	; 0x28
		TransmissionEnabled = 1;
 80057b4:	7011      	strb	r1, [r2, #0]
		if (LastTXFreq != LOfreq)
 80057b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ba:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80057be:	e9cd 3308 	strd	r3, r3, [sp, #32]
		if (LastTXFreq != LOfreq)
 80057c2:	f040 80b7 	bne.w	8005934 <UserInput+0x664>
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057c6:	2400      	movs	r4, #0
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057c8:	f44f 7600 	mov.w	r6, #512	; 0x200
 80057cc:	2702      	movs	r7, #2
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f04f 0903 	mov.w	r9, #3
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057d6:	a906      	add	r1, sp, #24
 80057d8:	4821      	ldr	r0, [pc, #132]	; (8005860 <UserInput+0x590>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057da:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80057dc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80057e0:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057e4:	f004 f97c 	bl	8009ae0 <HAL_GPIO_Init>
		RELAY_TX_ON;
 80057e8:	2201      	movs	r2, #1
 80057ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057ee:	481d      	ldr	r0, [pc, #116]	; (8005864 <UserInput+0x594>)
 80057f0:	f004 fab6 	bl	8009d60 <HAL_GPIO_WritePin>
		LED_YELLOW_ON;
 80057f4:	2201      	movs	r2, #1
 80057f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80057fa:	481b      	ldr	r0, [pc, #108]	; (8005868 <UserInput+0x598>)
 80057fc:	f004 fab0 	bl	8009d60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8005800:	4622      	mov	r2, r4
 8005802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005806:	4817      	ldr	r0, [pc, #92]	; (8005864 <UserInput+0x594>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	940a      	str	r4, [sp, #40]	; 0x28
 800580a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800580e:	e9cd 4408 	strd	r4, r4, [sp, #32]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8005812:	f004 faa5 	bl	8009d60 <HAL_GPIO_WritePin>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, TxPowerOut); // TX gate bias
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <UserInput+0x5b8>)
 8005818:	4622      	mov	r2, r4
 800581a:	2110      	movs	r1, #16
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4814      	ldr	r0, [pc, #80]	; (8005870 <UserInput+0x5a0>)
 8005820:	f002 fda6 	bl	8008370 <HAL_DAC_SetValue>
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005824:	a906      	add	r1, sp, #24
 8005826:	480e      	ldr	r0, [pc, #56]	; (8005860 <UserInput+0x590>)
		GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005828:	940a      	str	r4, [sp, #40]	; 0x28
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800582a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800582e:	e9cd 8908 	strd	r8, r9, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005832:	f004 f955 	bl	8009ae0 <HAL_GPIO_Init>
		TXCarrierEnabled = 1;
 8005836:	2201      	movs	r2, #1
 8005838:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <UserInput+0x5a4>)
		LED_GREEN_ON;
 800583a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800583e:	480a      	ldr	r0, [pc, #40]	; (8005868 <UserInput+0x598>)
		TXCarrierEnabled = 1;
 8005840:	701a      	strb	r2, [r3, #0]
		LED_GREEN_ON;
 8005842:	f004 fa8d 	bl	8009d60 <HAL_GPIO_WritePin>
}
 8005846:	e5df      	b.n	8005408 <UserInput+0x138>
			SetMode((Mode)USB); break;
 8005848:	2002      	movs	r0, #2
 800584a:	f7fc fc05 	bl	8002058 <SetMode>
 800584e:	e5db      	b.n	8005408 <UserInput+0x138>
 8005850:	9999999a 	.word	0x9999999a
 8005854:	3fb99999 	.word	0x3fb99999
 8005858:	2400a43c 	.word	0x2400a43c
 800585c:	24007420 	.word	0x24007420
 8005860:	58020800 	.word	0x58020800
 8005864:	58020c00 	.word	0x58020c00
 8005868:	58020400 	.word	0x58020400
 800586c:	240062e8 	.word	0x240062e8
 8005870:	2400a508 	.word	0x2400a508
 8005874:	240062dc 	.word	0x240062dc
 8005878:	0801dd08 	.word	0x0801dd08
 800587c:	240063f8 	.word	0x240063f8
 8005880:	2400b9d0 	.word	0x2400b9d0
 8005884:	24001030 	.word	0x24001030
 8005888:	240062ec 	.word	0x240062ec
 800588c:	240062a8 	.word	0x240062a8
 8005890:	24006258 	.word	0x24006258
 8005894:	24005238 	.word	0x24005238
 8005898:	2400522c 	.word	0x2400522c
 800589c:	240062e9 	.word	0x240062e9
 80058a0:	24006264 	.word	0x24006264
	__HAL_RCC_PLL2FRACN_DISABLE();
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <UserInput+0x674>)
	for (i=0; i< 50; i++)
 80058a6:	2100      	movs	r1, #0
	__HAL_RCC_PLL2FRACN_DISABLE();
 80058a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058aa:	f023 0310 	bic.w	r3, r3, #16
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (i=0; i< 50; i++)
 80058b0:	9106      	str	r1, [sp, #24]
 80058b2:	9b06      	ldr	r3, [sp, #24]
 80058b4:	2b31      	cmp	r3, #49	; 0x31
 80058b6:	d80b      	bhi.n	80058d0 <UserInput+0x600>
		i++;
 80058b8:	9b06      	ldr	r3, [sp, #24]
 80058ba:	3301      	adds	r3, #1
 80058bc:	9306      	str	r3, [sp, #24]
		i--;
 80058be:	9b06      	ldr	r3, [sp, #24]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	9306      	str	r3, [sp, #24]
	for (i=0; i< 50; i++)
 80058c4:	9b06      	ldr	r3, [sp, #24]
 80058c6:	3301      	adds	r3, #1
 80058c8:	9306      	str	r3, [sp, #24]
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	2b31      	cmp	r3, #49	; 0x31
 80058ce:	d9f3      	bls.n	80058b8 <UserInput+0x5e8>
	__HAL_RCC_PLL2FRACN_CONFIG(Coeff); // 0-8191, can be issued at any time  TODO: It seems necessary to have a delay between disable and set new value
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <UserInput+0x674>)
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <UserInput+0x678>)
 80058d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80058d6:	400b      	ands	r3, r1
 80058d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80058dc:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_RCC_PLL2FRACN_ENABLE();
 80058de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058e0:	f043 0310 	orr.w	r3, r3, #16
 80058e4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80058e6:	e58f      	b.n	8005408 <UserInput+0x138>
			DisableDisplay = 0; break;
 80058e8:	4c18      	ldr	r4, [pc, #96]	; (800594c <UserInput+0x67c>)
 80058ea:	2300      	movs	r3, #0
 80058ec:	7023      	strb	r3, [r4, #0]
	if (!DisableDisplay)
 80058ee:	e590      	b.n	8005412 <UserInput+0x142>
			SetMode((Mode)CW); break;
 80058f0:	2003      	movs	r0, #3
 80058f2:	f7fc fbb1 	bl	8002058 <SetMode>
 80058f6:	e587      	b.n	8005408 <UserInput+0x138>
			SetAGC((Agctype)Fast);  break;
 80058f8:	2000      	movs	r0, #0
 80058fa:	f7fc faa7 	bl	8001e4c <SetAGC>
 80058fe:	e583      	b.n	8005408 <UserInput+0x138>
			keyer_speed -= 1;
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <UserInput+0x680>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	3801      	subs	r0, #1
			if (keyer_speed < 3)
 8005906:	2802      	cmp	r0, #2
 8005908:	dc0f      	bgt.n	800592a <UserInput+0x65a>
				keyer_speed = 3;
 800590a:	2203      	movs	r2, #3
 800590c:	4610      	mov	r0, r2
 800590e:	601a      	str	r2, [r3, #0]
			loadWPM(keyer_speed);
 8005910:	e578      	b.n	8005404 <UserInput+0x134>
			uwTick = SystemSeconds = SystemMinutes = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	480f      	ldr	r0, [pc, #60]	; (8005954 <UserInput+0x684>)
 8005916:	4910      	ldr	r1, [pc, #64]	; (8005958 <UserInput+0x688>)
 8005918:	4a10      	ldr	r2, [pc, #64]	; (800595c <UserInput+0x68c>)
 800591a:	6003      	str	r3, [r0, #0]
 800591c:	600b      	str	r3, [r1, #0]
 800591e:	6013      	str	r3, [r2, #0]
			break;
 8005920:	e572      	b.n	8005408 <UserInput+0x138>
			SetMode((Mode)AM); break;
 8005922:	2000      	movs	r0, #0
 8005924:	f7fc fb98 	bl	8002058 <SetMode>
 8005928:	e56e      	b.n	8005408 <UserInput+0x138>
			keyer_speed += 1;
 800592a:	6018      	str	r0, [r3, #0]
 800592c:	e56a      	b.n	8005404 <UserInput+0x134>
				ShowWF=1;
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e569      	b.n	8005408 <UserInput+0x138>
			SetTXPLL(LOfreq);
 8005934:	f7ff fa08 	bl	8004d48 <SetTXPLL>
			LastTXFreq = LOfreq;
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	e743      	b.n	80057c6 <UserInput+0x4f6>
			Error_Handler();
 800593e:	f7ff fbf9 	bl	8005134 <Error_Handler>
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
 8005948:	ffff0007 	.word	0xffff0007
 800594c:	24001030 	.word	0x24001030
 8005950:	2400a810 	.word	0x2400a810
 8005954:	240062d4 	.word	0x240062d4
 8005958:	240062d8 	.word	0x240062d8
 800595c:	2400b9dc 	.word	0x2400b9dc

08005960 <MX_TIM6_Init_Custom_Rate>:
{
 8005960:	b510      	push	{r4, lr}
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005962:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8005964:	4c0f      	ldr	r4, [pc, #60]	; (80059a4 <MX_TIM6_Init_Custom_Rate+0x44>)
 8005966:	4810      	ldr	r0, [pc, #64]	; (80059a8 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8005968:	b084      	sub	sp, #16
	htim6.Init.Period = 9599; //
 800596a:	f242 517f 	movw	r1, #9599	; 0x257f
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800596e:	2280      	movs	r2, #128	; 0x80
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005970:	9301      	str	r3, [sp, #4]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005972:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8005974:	e9c4 0300 	strd	r0, r3, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005978:	4620      	mov	r0, r4
	htim6.Init.Period = 9599; //
 800597a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800597e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005982:	f007 fbcb 	bl	800d11c <HAL_TIM_Base_Init>
 8005986:	b950      	cbnz	r0, 800599e <MX_TIM6_Init_Custom_Rate+0x3e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005988:	4603      	mov	r3, r0
 800598a:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800598c:	a901      	add	r1, sp, #4
 800598e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005990:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005992:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005994:	f007 fffc 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005998:	b908      	cbnz	r0, 800599e <MX_TIM6_Init_Custom_Rate+0x3e>
}
 800599a:	b004      	add	sp, #16
 800599c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800599e:	f7ff fbc9 	bl	8005134 <Error_Handler>
 80059a2:	bf00      	nop
 80059a4:	2400a6e0 	.word	0x2400a6e0
 80059a8:	40001000 	.word	0x40001000
 80059ac:	00000000 	.word	0x00000000

080059b0 <main>:
{
 80059b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80059b4:	b0cf      	sub	sp, #316	; 0x13c
  HAL_Init();
 80059b6:	f001 f8ed 	bl	8006b94 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80059ba:	4ad5      	ldr	r2, [pc, #852]	; (8005d10 <main+0x360>)
 80059bc:	6953      	ldr	r3, [r2, #20]
 80059be:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80059c2:	d111      	bne.n	80059e8 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80059c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059c8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80059cc:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80059d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059d4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80059d8:	6953      	ldr	r3, [r2, #20]
 80059da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80059e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059e4:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059ea:	4dca      	ldr	r5, [pc, #808]	; (8005d14 <main+0x364>)
	SystemClock_Config_For_OC();
 80059ec:	f7ff fbbc 	bl	8005168 <SystemClock_Config_For_OC>
	HAL_Delay(20);  //needed for USB setup. USB sometimes (and almost always on an Android phone) does not initialize
 80059f0:	2014      	movs	r0, #20
 80059f2:	f001 f911 	bl	8006c18 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f6:	9448      	str	r4, [sp, #288]	; 0x120
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 80059f8:	4622      	mov	r2, r4
 80059fa:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80059fe:	48c6      	ldr	r0, [pc, #792]	; (8005d18 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a00:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005a02:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005a06:	f04f 0a08 	mov.w	sl, #8
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a0a:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005a0e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a12:	e9cd 4444 	strd	r4, r4, [sp, #272]	; 0x110
 8005a16:	e9cd 4446 	strd	r4, r4, [sp, #280]	; 0x118
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a1a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a1e:	f043 0304 	orr.w	r3, r3, #4
 8005a22:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005a26:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	9305      	str	r3, [sp, #20]
 8005a30:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a32:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005a3e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	9306      	str	r3, [sp, #24]
 8005a48:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005a56:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a62:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a66:	f043 0302 	orr.w	r3, r3, #2
 8005a6a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005a6e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	9308      	str	r3, [sp, #32]
 8005a78:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a7a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a7e:	f043 0308 	orr.w	r3, r3, #8
 8005a82:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005a86:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LedYellow_Pin|LedGreen_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8005a92:	f004 f965 	bl	8009d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RXTX_Pin|TX_ENA_Pin, GPIO_PIN_RESET);
 8005a96:	4622      	mov	r2, r4
 8005a98:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005a9c:	489f      	ldr	r0, [pc, #636]	; (8005d1c <main+0x36c>)
 8005a9e:	f004 f95f 	bl	8009d60 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005aa6:	2300      	movs	r3, #0
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005aa8:	a944      	add	r1, sp, #272	; 0x110
 8005aaa:	489d      	ldr	r0, [pc, #628]	; (8005d20 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aac:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = IN_SW01_Pin;
 8005aae:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(IN_SW01_GPIO_Port, &GPIO_InitStruct);
 8005ab2:	f004 f815 	bl	8009ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8005ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8005abe:	a944      	add	r1, sp, #272	; 0x110
 8005ac0:	4897      	ldr	r0, [pc, #604]	; (8005d20 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ac2:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8005ac4:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8005ac8:	f004 f80a 	bl	8009ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005acc:	22c0      	movs	r2, #192	; 0xc0
 8005ace:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad0:	a944      	add	r1, sp, #272	; 0x110
 8005ad2:	4894      	ldr	r0, [pc, #592]	; (8005d24 <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ad4:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = KEYER_DASH_Pin|KEYER_DOT_Pin;
 8005ad6:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ada:	f004 f801 	bl	8009ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005ade:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8005ae2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ae4:	a944      	add	r1, sp, #272	; 0x110
 8005ae6:	488c      	ldr	r0, [pc, #560]	; (8005d18 <main+0x368>)
  GPIO_InitStruct.Pin = LedYellow_Pin|LedGreen_Pin|LedRed_Pin;
 8005ae8:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8005aec:	2200      	movs	r2, #0
 8005aee:	2300      	movs	r3, #0
 8005af0:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af4:	f003 fff4 	bl	8009ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005af8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005afc:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005afe:	a944      	add	r1, sp, #272	; 0x110
 8005b00:	4886      	ldr	r0, [pc, #536]	; (8005d1c <main+0x36c>)
  GPIO_InitStruct.Pin = RXTX_Pin|TX_ENA_Pin;
 8005b02:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8005b06:	2202      	movs	r2, #2
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b0e:	f003 ffe7 	bl	8009ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8005b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b16:	2300      	movs	r3, #0
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005b18:	a944      	add	r1, sp, #272	; 0x110
 8005b1a:	4880      	ldr	r0, [pc, #512]	; (8005d1c <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b1c:	9646      	str	r6, [sp, #280]	; 0x118
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8005b1e:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8005b22:	f003 ffdd 	bl	8009ae0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b2a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b2c:	a944      	add	r1, sp, #272	; 0x110
 8005b2e:	487c      	ldr	r0, [pc, #496]	; (8005d20 <main+0x370>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005b30:	9448      	str	r4, [sp, #288]	; 0x120
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b32:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
 8005b36:	2303      	movs	r3, #3
 8005b38:	2200      	movs	r2, #0
 8005b3a:	e9cd 2346 	strd	r2, r3, [sp, #280]	; 0x118
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b3e:	f003 ffcf 	bl	8009ae0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8005b42:	4622      	mov	r2, r4
 8005b44:	2104      	movs	r1, #4
 8005b46:	2028      	movs	r0, #40	; 0x28
 8005b48:	f002 fada 	bl	8008100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005b4c:	2028      	movs	r0, #40	; 0x28
 8005b4e:	f002 fb15 	bl	800817c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b52:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005b56:	4622      	mov	r2, r4
 8005b58:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b5a:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005b5c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b5e:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8005b62:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hadc1.Instance = ADC1;
 8005b66:	4d70      	ldr	r5, [pc, #448]	; (8005d28 <main+0x378>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b68:	4033      	ands	r3, r6
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005b6e:	f002 fac7 	bl	8008100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005b72:	200b      	movs	r0, #11
 8005b74:	f002 fb02 	bl	800817c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8005b78:	4622      	mov	r2, r4
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	200c      	movs	r0, #12
 8005b7e:	f002 fabf 	bl	8008100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005b82:	200c      	movs	r0, #12
 8005b84:	f002 fafa 	bl	800817c <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005b88:	4b68      	ldr	r3, [pc, #416]	; (8005d2c <main+0x37c>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005b8a:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b8c:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8005b8e:	9432      	str	r4, [sp, #200]	; 0xc8
  ADC_MultiModeTypeDef multimode = {0};
 8005b90:	940c      	str	r4, [sp, #48]	; 0x30
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005b92:	9429      	str	r4, [sp, #164]	; 0xa4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005b94:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005b96:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005b98:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8005b9a:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.NbrOfConversion = 1;
 8005b9e:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ba0:	f8c5 a008 	str.w	sl, [r5, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ba4:	f8c5 9010 	str.w	r9, [r5, #16]
  ADC_MultiModeTypeDef multimode = {0};
 8005ba8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005bac:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
 8005bb0:	e9cd 4427 	strd	r4, r4, [sp, #156]	; 0x9c
  ADC_ChannelConfTypeDef sConfig = {0};
 8005bb4:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
 8005bb8:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
 8005bbc:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005bc0:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005bc4:	f44f 7480 	mov.w	r4, #256	; 0x100
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005bc8:	e9c5 3b00 	strd	r3, fp, [r5]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005bcc:	2303      	movs	r3, #3
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005bce:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005bd0:	e9c5 380b 	strd	r3, r8, [r5, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005bd4:	f001 ffa4 	bl	8007b20 <HAL_ADC_Init>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f040 8310 	bne.w	80061fe <main+0x84e>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8005bde:	2207      	movs	r2, #7
 8005be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005be4:	a90a      	add	r1, sp, #40	; 0x28
 8005be6:	4628      	mov	r0, r5
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8005be8:	940c      	str	r4, [sp, #48]	; 0x30
  multimode.Mode = ADC_DUALMODE_INTERL;
 8005bea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005bee:	f002 fa0d 	bl	800800c <HAL_ADCEx_MultiModeConfigChannel>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f040 8303 	bne.w	80061fe <main+0x84e>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	; (8005d30 <main+0x380>)
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005bfa:	a924      	add	r1, sp, #144	; 0x90
 8005bfc:	4628      	mov	r0, r5
  AnalogWDGConfig.ITMode = ENABLE;
 8005bfe:	f88d 609c 	strb.w	r6, [sp, #156]	; 0x9c
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005c02:	9326      	str	r3, [sp, #152]	; 0x98
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005c04:	ed9f cb38 	vldr	d12, [pc, #224]	; 8005ce8 <main+0x338>
  AnalogWDGConfig.HighThreshold = 4094;
 8005c08:	ed9f bb39 	vldr	d11, [pc, #228]	; 8005cf0 <main+0x340>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005c0c:	ed8d cb24 	vstr	d12, [sp, #144]	; 0x90
  AnalogWDGConfig.HighThreshold = 4094;
 8005c10:	ed8d bb28 	vstr	d11, [sp, #160]	; 0xa0
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8005c14:	f001 fc00 	bl	8007418 <HAL_ADC_AnalogWDGConfig>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f040 82f0 	bne.w	80061fe <main+0x84e>
  sConfig.OffsetSignedSaturation = DISABLE;
 8005c1e:	f88d 00e1 	strb.w	r0, [sp, #225]	; 0xe1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c22:	a932      	add	r1, sp, #200	; 0xc8
 8005c24:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8005c26:	ed9f ab34 	vldr	d10, [pc, #208]	; 8005cf8 <main+0x348>
 8005c2a:	ed9f 9b35 	vldr	d9, [pc, #212]	; 8005d00 <main+0x350>
 8005c2e:	ed9f 8b36 	vldr	d8, [pc, #216]	; 8005d08 <main+0x358>
 8005c32:	ed8d ab32 	vstr	d10, [sp, #200]	; 0xc8
 8005c36:	ed8d 9b34 	vstr	d9, [sp, #208]	; 0xd0
 8005c3a:	ed8d 8b36 	vstr	d8, [sp, #216]	; 0xd8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c3e:	f001 f9bb 	bl	8006fb8 <HAL_ADC_ConfigChannel>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	f040 82db 	bne.w	80061fe <main+0x84e>
  hadc2.Instance = ADC2;
 8005c48:	4f3a      	ldr	r7, [pc, #232]	; (8005d34 <main+0x384>)
 8005c4a:	4a3b      	ldr	r2, [pc, #236]	; (8005d38 <main+0x388>)
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005c4c:	901e      	str	r0, [sp, #120]	; 0x78
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c4e:	902a      	str	r0, [sp, #168]	; 0xa8
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005c50:	9023      	str	r0, [sp, #140]	; 0x8c
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c52:	60f8      	str	r0, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c54:	7738      	strb	r0, [r7, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8005c56:	62f8      	str	r0, [r7, #44]	; 0x2c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8005c58:	6378      	str	r0, [r7, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8005c5a:	f887 0038 	strb.w	r0, [r7, #56]	; 0x38
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005c5e:	82bc      	strh	r4, [r7, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c60:	f8c7 9010 	str.w	r9, [r7, #16]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005c64:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
  hadc2.Init.NbrOfConversion = 1;
 8005c68:	61be      	str	r6, [r7, #24]
  hadc2.Instance = ADC2;
 8005c6a:	603a      	str	r2, [r7, #0]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8005c6c:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
 8005c70:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c74:	e9cd 002b 	strd	r0, r0, [sp, #172]	; 0xac
 8005c78:	e9cd 002d 	strd	r0, r0, [sp, #180]	; 0xb4
 8005c7c:	e9cd 002f 	strd	r0, r0, [sp, #188]	; 0xbc
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005c80:	4638      	mov	r0, r7
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005c82:	e9c7 ba01 	strd	fp, sl, [r7, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005c86:	f001 ff4b 	bl	8007b20 <HAL_ADC_Init>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f040 82b7 	bne.w	80061fe <main+0x84e>
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <main+0x380>)
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005c92:	a91e      	add	r1, sp, #120	; 0x78
 8005c94:	4638      	mov	r0, r7
  AnalogWDGConfig.ITMode = ENABLE;
 8005c96:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8005c9a:	9320      	str	r3, [sp, #128]	; 0x80
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8005c9c:	ed8d cb1e 	vstr	d12, [sp, #120]	; 0x78
  AnalogWDGConfig.HighThreshold = 4094;
 8005ca0:	ed8d bb22 	vstr	d11, [sp, #136]	; 0x88
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8005ca4:	f001 fbb8 	bl	8007418 <HAL_ADC_AnalogWDGConfig>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f040 82a7 	bne.w	80061fe <main+0x84e>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cb0:	a92a      	add	r1, sp, #168	; 0xa8
 8005cb2:	4638      	mov	r0, r7
  sConfig.OffsetSignedSaturation = DISABLE;
 8005cb4:	f88d 20c1 	strb.w	r2, [sp, #193]	; 0xc1
  sConfig.Channel = ADC_CHANNEL_5;
 8005cb8:	ed8d ab2a 	vstr	d10, [sp, #168]	; 0xa8
 8005cbc:	ed8d 9b2c 	vstr	d9, [sp, #176]	; 0xb0
 8005cc0:	ed8d 8b2e 	vstr	d8, [sp, #184]	; 0xb8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cc4:	f001 f978 	bl	8006fb8 <HAL_ADC_ConfigChannel>
 8005cc8:	4601      	mov	r1, r0
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f040 8297 	bne.w	80061fe <main+0x84e>
  DAC_ChannelConfTypeDef sConfig = {0};
 8005cd0:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8005cd2:	4c1a      	ldr	r4, [pc, #104]	; (8005d3c <main+0x38c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8005cd4:	a844      	add	r0, sp, #272	; 0x110
 8005cd6:	f00a fe85 	bl	80109e4 <memset>
  hdac1.Instance = DAC1;
 8005cda:	4b19      	ldr	r3, [pc, #100]	; (8005d40 <main+0x390>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005cdc:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	e030      	b.n	8005d44 <main+0x394>
 8005ce2:	bf00      	nop
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	7dc00000 	.word	0x7dc00000
 8005cec:	00c00000 	.word	0x00c00000
 8005cf0:	00000ffe 	.word	0x00000ffe
 8005cf4:	00000001 	.word	0x00000001
 8005cf8:	14f00020 	.word	0x14f00020
 8005cfc:	00000006 	.word	0x00000006
 8005d00:	00000000 	.word	0x00000000
 8005d04:	000007ff 	.word	0x000007ff
 8005d08:	00000004 	.word	0x00000004
 8005d0c:	00000000 	.word	0x00000000
 8005d10:	e000ed00 	.word	0xe000ed00
 8005d14:	58024400 	.word	0x58024400
 8005d18:	58020400 	.word	0x58020400
 8005d1c:	58020c00 	.word	0x58020c00
 8005d20:	58020800 	.word	0x58020800
 8005d24:	58020000 	.word	0x58020000
 8005d28:	2400a43c 	.word	0x2400a43c
 8005d2c:	40022000 	.word	0x40022000
 8005d30:	14f00020 	.word	0x14f00020
 8005d34:	2400a4a0 	.word	0x2400a4a0
 8005d38:	40022100 	.word	0x40022100
 8005d3c:	2400a508 	.word	0x2400a508
 8005d40:	40007400 	.word	0x40007400
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005d44:	f002 fa3e 	bl	80081c4 <HAL_DAC_Init>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f040 8257 	bne.w	80061fe <main+0x84e>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005d50:	2116      	movs	r1, #22
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005d52:	9048      	str	r0, [sp, #288]	; 0x120
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005d54:	2000      	movs	r0, #0
 8005d56:	e9cd 0144 	strd	r0, r1, [sp, #272]	; 0x110
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	e9cd 0146 	strd	r0, r1, [sp, #280]	; 0x118
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005d62:	a944      	add	r1, sp, #272	; 0x110
 8005d64:	4620      	mov	r0, r4
 8005d66:	f002 fb6d 	bl	8008444 <HAL_DAC_ConfigChannel>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	f040 8246 	bne.w	80061fe <main+0x84e>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005d72:	2210      	movs	r2, #16
 8005d74:	a944      	add	r1, sp, #272	; 0x110
 8005d76:	4620      	mov	r0, r4
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005d78:	9345      	str	r3, [sp, #276]	; 0x114
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005d7a:	f002 fb63 	bl	8008444 <HAL_DAC_ConfigChannel>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f040 823d 	bne.w	80061fe <main+0x84e>
  hlptim2.Instance = LPTIM2;
 8005d84:	48bb      	ldr	r0, [pc, #748]	; (8006074 <main+0x6c4>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8005d86:	2300      	movs	r3, #0
  hlptim2.Instance = LPTIM2;
 8005d88:	4abb      	ldr	r2, [pc, #748]	; (8006078 <main+0x6c8>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005d8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8005d8e:	6303      	str	r3, [r0, #48]	; 0x30
  hlptim2.Instance = LPTIM2;
 8005d90:	6002      	str	r2, [r0, #0]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005d92:	2200      	movs	r2, #0
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8005d94:	6146      	str	r6, [r0, #20]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8005d96:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8005d9a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e9c0 2308 	strd	r2, r3, [r0, #32]
 8005da4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005da8:	2300      	movs	r3, #0
 8005daa:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8005dae:	f003 ffe9 	bl	8009d84 <HAL_LPTIM_Init>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f040 8223 	bne.w	80061fe <main+0x84e>
  htim6.Instance = TIM6;
 8005db8:	4cb0      	ldr	r4, [pc, #704]	; (800607c <main+0x6cc>)
 8005dba:	4bb1      	ldr	r3, [pc, #708]	; (8006080 <main+0x6d0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dbc:	9019      	str	r0, [sp, #100]	; 0x64
  htim6.Instance = TIM6;
 8005dbe:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = 8191;
 8005dc0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005dc4:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dc6:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc8:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dcc:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005dd0:	4620      	mov	r0, r4
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dd2:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005dd4:	f007 f9a2 	bl	800d11c <HAL_TIM_Base_Init>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f040 8210 	bne.w	80061fe <main+0x84e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005dde:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005de0:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005de2:	a917      	add	r1, sp, #92	; 0x5c
 8005de4:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005de6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005de8:	f007 fdd2 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f040 8205 	bne.w	80061fe <main+0x84e>
  huart3.Instance = USART3;
 8005df4:	4ca3      	ldr	r4, [pc, #652]	; (8006084 <main+0x6d4>)
 8005df6:	4aa4      	ldr	r2, [pc, #656]	; (8006088 <main+0x6d8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005df8:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 8005dfa:	6022      	str	r2, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8005dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e00:	61a0      	str	r0, [r4, #24]
  huart3.Init.BaudRate = 115200;
 8005e02:	6062      	str	r2, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e04:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e06:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e0a:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e0e:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e10:	6162      	str	r2, [r4, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e12:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e16:	f008 fc0d 	bl	800e634 <HAL_UART_Init>
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 81ee 	bne.w	80061fe <main+0x84e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e22:	4620      	mov	r0, r4
 8005e24:	f008 fc5e 	bl	800e6e4 <HAL_UARTEx_SetTxFifoThreshold>
 8005e28:	4601      	mov	r1, r0
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	f040 81e7 	bne.w	80061fe <main+0x84e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e30:	4620      	mov	r0, r4
 8005e32:	f008 fc99 	bl	800e768 <HAL_UARTEx_SetRxFifoThreshold>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	f040 81e1 	bne.w	80061fe <main+0x84e>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f008 fc33 	bl	800e6a8 <HAL_UARTEx_DisableFifoMode>
 8005e42:	4604      	mov	r4, r0
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f040 81da 	bne.w	80061fe <main+0x84e>
  MX_USB_DEVICE_Init();
 8005e4a:	f00a fa51 	bl	80102f0 <MX_USB_DEVICE_Init>
  htim4.Instance = TIM4;
 8005e4e:	4f8f      	ldr	r7, [pc, #572]	; (800608c <main+0x6dc>)
 8005e50:	4b8f      	ldr	r3, [pc, #572]	; (8006090 <main+0x6e0>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005e52:	2201      	movs	r2, #1
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005e54:	a93a      	add	r1, sp, #232	; 0xe8
 8005e56:	4638      	mov	r0, r7
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e58:	943d      	str	r4, [sp, #244]	; 0xf4
 8005e5a:	9441      	str	r4, [sp, #260]	; 0x104
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e5c:	9414      	str	r4, [sp, #80]	; 0x50
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e5e:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e60:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e62:	9415      	str	r4, [sp, #84]	; 0x54
 8005e64:	9416      	str	r4, [sp, #88]	; 0x58
  htim4.Init.Prescaler = 0;
 8005e66:	e9c7 3400 	strd	r3, r4, [r7]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e9cd 233a 	strd	r2, r3, [sp, #232]	; 0xe8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e70:	2301      	movs	r3, #1
  sConfig.IC1Filter = 8;
 8005e72:	2208      	movs	r2, #8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e74:	933c      	str	r3, [sp, #240]	; 0xf0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005e76:	9340      	str	r3, [sp, #256]	; 0x100
  sConfig.IC2Filter = 8;
 8005e78:	2308      	movs	r3, #8
 8005e7a:	9342      	str	r3, [sp, #264]	; 0x108
  sConfig.IC1Filter = 8;
 8005e7c:	2302      	movs	r3, #2
  htim4.Init.Period = 65535;
 8005e7e:	e9c7 4602 	strd	r4, r6, [r7, #8]
  sConfig.IC1Filter = 8;
 8005e82:	e9cd 233e 	strd	r2, r3, [sp, #248]	; 0xf8
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005e86:	f007 fab3 	bl	800d3f0 <HAL_TIM_Encoder_Init>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	f040 81b6 	bne.w	80061fe <main+0x84e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e92:	a914      	add	r1, sp, #80	; 0x50
 8005e94:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e96:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e98:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e9a:	f007 fd79 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f040 81ac 	bne.w	80061fe <main+0x84e>
  htim7.Instance = TIM7;
 8005ea6:	4c7b      	ldr	r4, [pc, #492]	; (8006094 <main+0x6e4>)
  htim7.Init.Period = 8192;
 8005ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  htim7.Instance = TIM7;
 8005eac:	497a      	ldr	r1, [pc, #488]	; (8006098 <main+0x6e8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005eae:	9011      	str	r0, [sp, #68]	; 0x44
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eb0:	61a3      	str	r3, [r4, #24]
  htim7.Init.Prescaler = 0;
 8005eb2:	e9c4 1000 	strd	r1, r0, [r4]
  htim7.Init.Period = 8192;
 8005eb6:	e9c4 0202 	strd	r0, r2, [r4, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005eba:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ebc:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ec0:	f007 f92c 	bl	800d11c <HAL_TIM_Base_Init>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	f040 819a 	bne.w	80061fe <main+0x84e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eca:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ecc:	a911      	add	r1, sp, #68	; 0x44
 8005ece:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ed0:	9311      	str	r3, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ed4:	f007 fd5c 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f040 8190 	bne.w	80061fe <main+0x84e>
	htim7.Instance = TIM7;
 8005ede:	4b6e      	ldr	r3, [pc, #440]	; (8006098 <main+0x6e8>)
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ee0:	61a0      	str	r0, [r4, #24]
	htim7.Instance = TIM7;
 8005ee2:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8005ee4:	f247 5330 	movw	r3, #30000	; 0x7530
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ee8:	e9c4 0001 	strd	r0, r0, [r4, #4]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005eec:	4620      	mov	r0, r4
	htim7.Init.Period = 30000; //SCAMP is called at Fclock / 2 / 30000 = 10 KHz
 8005eee:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ef0:	f007 f914 	bl	800d11c <HAL_TIM_Base_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f040 8181 	bne.w	80061fe <main+0x84e>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005efc:	a911      	add	r1, sp, #68	; 0x44
 8005efe:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f00:	9311      	str	r3, [sp, #68]	; 0x44
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f02:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005f04:	f007 fd44 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f040 8178 	bne.w	80061fe <main+0x84e>
  htim2.Instance = TIM2;
 8005f0e:	4c63      	ldr	r4, [pc, #396]	; (800609c <main+0x6ec>)
 8005f10:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  htim2.Init.Period = 10000;
 8005f14:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f18:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f1a:	900e      	str	r0, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f1c:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f1e:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f20:	61a0      	str	r0, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f22:	901d      	str	r0, [sp, #116]	; 0x74
  htim2.Init.Period = 10000;
 8005f24:	60e3      	str	r3, [r4, #12]
  htim2.Instance = TIM2;
 8005f26:	e9c4 6000 	strd	r6, r0, [r4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f2a:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f2e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f32:	4620      	mov	r0, r4
 8005f34:	f007 f8f2 	bl	800d11c <HAL_TIM_Base_Init>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f040 8160 	bne.w	80061fe <main+0x84e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f3e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f42:	a91a      	add	r1, sp, #104	; 0x68
 8005f44:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f46:	971a      	str	r7, [sp, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f48:	f007 fb96 	bl	800d678 <HAL_TIM_ConfigClockSource>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f040 8156 	bne.w	80061fe <main+0x84e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f52:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f54:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f56:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f007 fd19 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f040 814d 	bne.w	80061fe <main+0x84e>
	htim2.Init.Period = 15000;
 8005f64:	f643 2398 	movw	r3, #15000	; 0x3a98
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f68:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f6a:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f6c:	61a0      	str	r0, [r4, #24]
	htim2.Init.Period = 15000;
 8005f6e:	60e3      	str	r3, [r4, #12]
	htim2.Init.Prescaler = 0;
 8005f70:	e9c4 6000 	strd	r6, r0, [r4]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005f74:	4620      	mov	r0, r4
 8005f76:	f007 f8d1 	bl	800d11c <HAL_TIM_Base_Init>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f040 813f 	bne.w	80061fe <main+0x84e>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f80:	a91a      	add	r1, sp, #104	; 0x68
 8005f82:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f84:	971a      	str	r7, [sp, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005f86:	f007 fb77 	bl	800d678 <HAL_TIM_ConfigClockSource>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f040 8136 	bne.w	80061fe <main+0x84e>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f92:	a90e      	add	r1, sp, #56	; 0x38
 8005f94:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f96:	930e      	str	r3, [sp, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f98:	9310      	str	r3, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f9a:	f007 fcf9 	bl	800d990 <HAL_TIMEx_MasterConfigSynchronization>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f040 812d 	bne.w	80061fe <main+0x84e>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005fa4:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <main+0x6f0>)
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	03d9      	lsls	r1, r3, #15
 8005faa:	d426      	bmi.n	8005ffa <main+0x64a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005fac:	483c      	ldr	r0, [pc, #240]	; (80060a0 <main+0x6f0>)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005fb4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005fb8:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005fbc:	f643 77e0 	movw	r7, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005fc0:	f3c6 344e 	ubfx	r4, r6, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005fc4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 8005fc8:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005fca:	ea04 0107 	and.w	r1, r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005fce:	4633      	mov	r3, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005fd0:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8005fd4:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005fd6:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	d1f8      	bne.n	8005fd0 <main+0x620>
    } while(sets-- != 0U);
 8005fde:	3c20      	subs	r4, #32
 8005fe0:	f114 0f20 	cmn.w	r4, #32
 8005fe4:	d1f1      	bne.n	8005fca <main+0x61a>
 8005fe6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005fea:	6943      	ldr	r3, [r0, #20]
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	6143      	str	r3, [r0, #20]
 8005ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ff6:	f3bf 8f6f 	isb	sy
	MX_TIM6_Init_Custom_Rate();
 8005ffa:	f7ff fcb1 	bl	8005960 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8005ffe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006006:	4827      	ldr	r0, [pc, #156]	; (80060a4 <main+0x6f4>)
 8006008:	f001 fe98 	bl	8007d3c <HAL_ADCEx_Calibration_Start>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 80f6 	bne.w	80061fe <main+0x84e>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8006012:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006016:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800601a:	4823      	ldr	r0, [pc, #140]	; (80060a8 <main+0x6f8>)
 800601c:	f001 fe8e 	bl	8007d3c <HAL_ADCEx_Calibration_Start>
 8006020:	4604      	mov	r4, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	f040 80eb 	bne.w	80061fe <main+0x84e>
	HAL_Delay(1);
 8006028:	2001      	movs	r0, #1
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 800602a:	4f20      	ldr	r7, [pc, #128]	; (80060ac <main+0x6fc>)
	AMindex  = LSBindex = 1;
 800602c:	4606      	mov	r6, r0
	HAL_Delay(1);
 800602e:	f000 fdf3 	bl	8006c18 <HAL_Delay>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8006032:	4621      	mov	r1, r4
 8006034:	4815      	ldr	r0, [pc, #84]	; (800608c <main+0x6dc>)
 8006036:	f007 fabf 	bl	800d5b8 <HAL_TIM_Encoder_Start>
	volume= 0.1;
 800603a:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <main+0x700>)
 800603c:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <main+0x704>)
	SetFstep(2);
 800603e:	2002      	movs	r0, #2
	volume= 0.1;
 8006040:	601a      	str	r2, [r3, #0]
	SetFstep(2);
 8006042:	f7fc f845 	bl	80020d0 <SetFstep>
	cwpitch = CWPITCH;
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <main+0x708>)
	meanavg = 0.f;
 8006048:	2100      	movs	r1, #0
	cwpitch = CWPITCH;
 800604a:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <main+0x70c>)
	CarrierEnable(0);
 800604c:	4620      	mov	r0, r4
	cwpitch = CWPITCH;
 800604e:	601a      	str	r2, [r3, #0]
	meanavg = 0.f;
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <main+0x710>)
	os_time = 0;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <main+0x714>)
	meanavg = 0.f;
 8006054:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8006056:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <main+0x718>)
 8006058:	491c      	ldr	r1, [pc, #112]	; (80060cc <main+0x71c>)
	os_time = 0;
 800605a:	601c      	str	r4, [r3, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 800605c:	6011      	str	r1, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 800605e:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
	Muted   = false;
 8006062:	4a1b      	ldr	r2, [pc, #108]	; (80060d0 <main+0x720>)
	AGC_decay[Fast] = 0.9995f;
 8006064:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <main+0x724>)
	Muted   = false;
 8006066:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 8006068:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <main+0x728>)
 800606a:	8016      	strh	r6, [r2, #0]
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <main+0x72c>)
 800606e:	8016      	strh	r6, [r2, #0]
 8006070:	e036      	b.n	80060e0 <main+0x730>
 8006072:	bf00      	nop
 8006074:	2400a610 	.word	0x2400a610
 8006078:	58002400 	.word	0x58002400
 800607c:	2400a6e0 	.word	0x2400a6e0
 8006080:	40001000 	.word	0x40001000
 8006084:	2400a778 	.word	0x2400a778
 8006088:	40004800 	.word	0x40004800
 800608c:	2400a694 	.word	0x2400a694
 8006090:	40000800 	.word	0x40000800
 8006094:	2400a72c 	.word	0x2400a72c
 8006098:	40001400 	.word	0x40001400
 800609c:	2400a648 	.word	0x2400a648
 80060a0:	e000ed00 	.word	0xe000ed00
 80060a4:	2400a43c 	.word	0x2400a43c
 80060a8:	2400a4a0 	.word	0x2400a4a0
 80060ac:	24006288 	.word	0x24006288
 80060b0:	2400b9d0 	.word	0x2400b9d0
 80060b4:	3dcccccd 	.word	0x3dcccccd
 80060b8:	24007c34 	.word	0x24007c34
 80060bc:	44228000 	.word	0x44228000
 80060c0:	2400a81c 	.word	0x2400a81c
 80060c4:	2400a840 	.word	0x2400a840
 80060c8:	24006280 	.word	0x24006280
 80060cc:	3f7cac08 	.word	0x3f7cac08
 80060d0:	24006270 	.word	0x24006270
 80060d4:	240007d8 	.word	0x240007d8
 80060d8:	2400625c 	.word	0x2400625c
 80060dc:	240007e0 	.word	0x240007e0
	USBindex = CWindex  = 1;
 80060e0:	4a6d      	ldr	r2, [pc, #436]	; (8006298 <main+0x8e8>)
 80060e2:	8016      	strh	r6, [r2, #0]
 80060e4:	4a6d      	ldr	r2, [pc, #436]	; (800629c <main+0x8ec>)
 80060e6:	8016      	strh	r6, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 80060e8:	4a6d      	ldr	r2, [pc, #436]	; (80062a0 <main+0x8f0>)
 80060ea:	6011      	str	r1, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 80060ec:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
 80060f0:	4a6c      	ldr	r2, [pc, #432]	; (80062a4 <main+0x8f4>)
 80060f2:	6011      	str	r1, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 80060f4:	4a6c      	ldr	r2, [pc, #432]	; (80062a8 <main+0x8f8>)
 80060f6:	601a      	str	r2, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 80060f8:	4a6c      	ldr	r2, [pc, #432]	; (80062ac <main+0x8fc>)
 80060fa:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 80060fc:	4b6c      	ldr	r3, [pc, #432]	; (80062b0 <main+0x900>)
 80060fe:	4a6d      	ldr	r2, [pc, #436]	; (80062b4 <main+0x904>)
 8006100:	601a      	str	r2, [r3, #0]
	AgcThreshold    = 1.92e-4f;
 8006102:	4b6d      	ldr	r3, [pc, #436]	; (80062b8 <main+0x908>)
 8006104:	4a6d      	ldr	r2, [pc, #436]	; (80062bc <main+0x90c>)
 8006106:	601a      	str	r2, [r3, #0]
	pk = 0.02f;
 8006108:	4a6d      	ldr	r2, [pc, #436]	; (80062c0 <main+0x910>)
 800610a:	4b6e      	ldr	r3, [pc, #440]	; (80062c4 <main+0x914>)
 800610c:	601a      	str	r2, [r3, #0]
	HAdc1 = &hadc1;
 800610e:	4b6e      	ldr	r3, [pc, #440]	; (80062c8 <main+0x918>)
 8006110:	601d      	str	r5, [r3, #0]
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006112:	f44f 6500 	mov.w	r5, #2048	; 0x800
	SamplingRate = ((128000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8006116:	4b6d      	ldr	r3, [pc, #436]	; (80062cc <main+0x91c>)
 8006118:	603b      	str	r3, [r7, #0]
	CarrierEnable(0);
 800611a:	f7fe ffad 	bl	8005078 <CarrierEnable>
	TXSwitch(0);
 800611e:	4620      	mov	r0, r4
 8006120:	f7fe ff46 	bl	8004fb0 <TXSwitch>
	__HAL_RCC_PLL2_DISABLE();
 8006124:	4a6a      	ldr	r2, [pc, #424]	; (80062d0 <main+0x920>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 8006126:	231a      	movs	r3, #26
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006128:	ed97 7a00 	vldr	s14, [r7]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 800612c:	4969      	ldr	r1, [pc, #420]	; (80062d4 <main+0x924>)
	DivN2 = (((uint64_t)FHz * 24 * 4 * 0x2000) / (uint64_t)25000000) >> 13;
 800612e:	9303      	str	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006130:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	__HAL_RCC_PLL2_DISABLE();
 8006134:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006136:	eddf 6a68 	vldr	s13, [pc, #416]	; 80062d8 <main+0x928>
	__HAL_RCC_PLL2_DISABLE();
 800613a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
	CWThreshold = 0.01;
 800613e:	4867      	ldr	r0, [pc, #412]	; (80062dc <main+0x92c>)
	__HAL_RCC_PLL2_DISABLE();
 8006140:	6013      	str	r3, [r2, #0]
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006142:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006144:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 800614c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8006290 <main+0x8e0>
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006150:	6293      	str	r3, [r2, #40]	; 0x28
 8006152:	9b03      	ldr	r3, [sp, #12]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006154:	ee27 7b05 	vmul.f64	d7, d7, d5
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006158:	3b01      	subs	r3, #1
 800615a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615e:	4319      	orrs	r1, r3
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006160:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	__HAL_RCC_PLL2_CONFIG(4, DivN2, 24, 2, 2);
 8006164:	6391      	str	r1, [r2, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8006166:	6813      	ldr	r3, [r2, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006168:	ee67 7a26 	vmul.f32	s15, s14, s13
	__HAL_RCC_PLL2_ENABLE();
 800616c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006170:	6013      	str	r3, [r2, #0]
	CWThreshold = 0.01;
 8006172:	4a5b      	ldr	r2, [pc, #364]	; (80062e0 <main+0x930>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8006174:	4b5b      	ldr	r3, [pc, #364]	; (80062e4 <main+0x934>)
	CWThreshold = 0.01;
 8006176:	6002      	str	r2, [r0, #0]
	SamplingRate += SamplingRate * XTAL_F_ERROR / 2.0;
 8006178:	ed87 7a00 	vstr	s14, [r7]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800617c:	edc3 7a00 	vstr	s15, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8006180:	f7fd f8de 	bl	8003340 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8006184:	4958      	ldr	r1, [pc, #352]	; (80062e8 <main+0x938>)
 8006186:	2204      	movs	r2, #4
 8006188:	4f58      	ldr	r7, [pc, #352]	; (80062ec <main+0x93c>)
 800618a:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <main+0x940>)
 800618c:	4859      	ldr	r0, [pc, #356]	; (80062f4 <main+0x944>)
 800618e:	e9cd 1500 	strd	r1, r5, [sp]
 8006192:	2140      	movs	r1, #64	; 0x40
 8006194:	f7fb f990 	bl	80014b8 <arm_fir_decimate_init_f32>
 8006198:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 800619a:	b100      	cbz	r0, 800619e <main+0x7ee>
 800619c:	e7fe      	b.n	800619c <main+0x7ec>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 800619e:	4a56      	ldr	r2, [pc, #344]	; (80062f8 <main+0x948>)
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	4b53      	ldr	r3, [pc, #332]	; (80062f0 <main+0x940>)
 80061a4:	4855      	ldr	r0, [pc, #340]	; (80062fc <main+0x94c>)
 80061a6:	e9cd 2500 	strd	r2, r5, [sp]
 80061aa:	2204      	movs	r2, #4
 80061ac:	f7fb f984 	bl	80014b8 <arm_fir_decimate_init_f32>
 80061b0:	4604      	mov	r4, r0
 80061b2:	7038      	strb	r0, [r7, #0]
	while(arc != ARM_MATH_SUCCESS)
 80061b4:	bb28      	cbnz	r0, 8006202 <main+0x852>
	Load_Presets();
 80061b6:	f7fb fdb9 	bl	8001d2c <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7fb fea0 	bl	8001f00 <Tune_Preset>
	keyerState = IDLE;
 80061c0:	4a4f      	ldr	r2, [pc, #316]	; (8006300 <main+0x950>)
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80061c2:	4b50      	ldr	r3, [pc, #320]	; (8006304 <main+0x954>)
	keyer_speed = 15;
 80061c4:	200f      	movs	r0, #15
	keyerState = IDLE;
 80061c6:	7014      	strb	r4, [r2, #0]
	keyerControl = IAMBICB;      // Or 0 for IAMBICA
 80061c8:	2210      	movs	r2, #16
 80061ca:	701a      	strb	r2, [r3, #0]
	keyer_speed = 15;
 80061cc:	4b4e      	ldr	r3, [pc, #312]	; (8006308 <main+0x958>)
 80061ce:	6018      	str	r0, [r3, #0]
	loadWPM(keyer_speed);        // Fix speed at 15 WPM
 80061d0:	f7fb f98c 	bl	80014ec <loadWPM>
	keyer_mode = 1; //->  iambic
 80061d4:	4a4d      	ldr	r2, [pc, #308]	; (800630c <main+0x95c>)
	txdelay = 10;
 80061d6:	200a      	movs	r0, #10
	if (!DisableDisplay)
 80061d8:	4b4d      	ldr	r3, [pc, #308]	; (8006310 <main+0x960>)
	keyer_mode = 1; //->  iambic
 80061da:	7016      	strb	r6, [r2, #0]
	keyer_swap = 0; //->  DI/DAH
 80061dc:	4a4d      	ldr	r2, [pc, #308]	; (8006314 <main+0x964>)
	txdelay = 10;
 80061de:	494e      	ldr	r1, [pc, #312]	; (8006318 <main+0x968>)
	keyer_swap = 0; //->  DI/DAH
 80061e0:	7014      	strb	r4, [r2, #0]
	if (!DisableDisplay)
 80061e2:	781b      	ldrb	r3, [r3, #0]
	TxPowerOut = MID_POWER_OUT;
 80061e4:	4a4d      	ldr	r2, [pc, #308]	; (800631c <main+0x96c>)
	txdelay = 10;
 80061e6:	7008      	strb	r0, [r1, #0]
	TxPowerOut = MID_POWER_OUT;
 80061e8:	6015      	str	r5, [r2, #0]
	if (!DisableDisplay)
 80061ea:	b90b      	cbnz	r3, 80061f0 <main+0x840>
 80061ec:	f7fe faae 	bl	800474c <DisplayStatus.part.0>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80061f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f4:	494a      	ldr	r1, [pc, #296]	; (8006320 <main+0x970>)
 80061f6:	484b      	ldr	r0, [pc, #300]	; (8006324 <main+0x974>)
 80061f8:	f001 fdf2 	bl	8007de0 <HAL_ADCEx_MultiModeStart_DMA>
 80061fc:	b110      	cbz	r0, 8006204 <main+0x854>
    Error_Handler();
 80061fe:	f7fe ff99 	bl	8005134 <Error_Handler>
	while(arc != ARM_MATH_SUCCESS)
 8006202:	e7fe      	b.n	8006202 <main+0x852>
	if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8006204:	4848      	ldr	r0, [pc, #288]	; (8006328 <main+0x978>)
 8006206:	f007 f897 	bl	800d338 <HAL_TIM_Base_Start_IT>
 800620a:	4604      	mov	r4, r0
 800620c:	2800      	cmp	r0, #0
 800620e:	d1f6      	bne.n	80061fe <main+0x84e>
	HAL_TIM_Base_Start(&htim6);
 8006210:	4846      	ldr	r0, [pc, #280]	; (800632c <main+0x97c>)
 8006212:	f007 f839 	bl	800d288 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8006216:	4846      	ldr	r0, [pc, #280]	; (8006330 <main+0x980>)
 8006218:	f007 f836 	bl	800d288 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800621c:	4621      	mov	r1, r4
 800621e:	4845      	ldr	r0, [pc, #276]	; (8006334 <main+0x984>)
 8006220:	f001 ffe6 	bl	80081f0 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8006224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006228:	4a43      	ldr	r2, [pc, #268]	; (8006338 <main+0x988>)
 800622a:	4621      	mov	r1, r4
 800622c:	4841      	ldr	r0, [pc, #260]	; (8006334 <main+0x984>)
 800622e:	9400      	str	r4, [sp, #0]
 8006230:	f002 f812 	bl	8008258 <HAL_DAC_Start_DMA>
	HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8006234:	4620      	mov	r0, r4
 8006236:	f000 fd07 	bl	8006c48 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800623a:	2110      	movs	r1, #16
 800623c:	483d      	ldr	r0, [pc, #244]	; (8006334 <main+0x984>)
 800623e:	f001 ffd7 	bl	80081f0 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // TX gate bias
 8006242:	4623      	mov	r3, r4
 8006244:	2110      	movs	r1, #16
 8006246:	4622      	mov	r2, r4
 8006248:	483a      	ldr	r0, [pc, #232]	; (8006334 <main+0x984>)
 800624a:	f002 f891 	bl	8008370 <HAL_DAC_SetValue>
	WSPRBeaconState = NO_FIX;
 800624e:	4b3b      	ldr	r3, [pc, #236]	; (800633c <main+0x98c>)
	if (ENC_BUTTON)
 8006250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006254:	483a      	ldr	r0, [pc, #232]	; (8006340 <main+0x990>)
	WSPRBeaconState = NO_FIX;
 8006256:	701c      	strb	r4, [r3, #0]
	if (ENC_BUTTON)
 8006258:	f003 fd7c 	bl	8009d54 <HAL_GPIO_ReadPin>
 800625c:	b170      	cbz	r0, 800627c <main+0x8cc>
		UserInput();
 800625e:	f7ff f837 	bl	80052d0 <UserInput>
		DCF77StatusDisplay();
 8006262:	f7fb fd29 	bl	8001cb8 <DCF77StatusDisplay>
		HAL_Delay(200);
 8006266:	20c8      	movs	r0, #200	; 0xc8
 8006268:	f000 fcd6 	bl	8006c18 <HAL_Delay>
		UserInput();
 800626c:	f7ff f830 	bl	80052d0 <UserInput>
		DCF77StatusDisplay();
 8006270:	f7fb fd22 	bl	8001cb8 <DCF77StatusDisplay>
		HAL_Delay(200);
 8006274:	20c8      	movs	r0, #200	; 0xc8
 8006276:	f000 fccf 	bl	8006c18 <HAL_Delay>
	while (1)
 800627a:	e7f0      	b.n	800625e <main+0x8ae>
		SetMode((Mode)CW);
 800627c:	2003      	movs	r0, #3
 800627e:	f7fb feeb 	bl	8002058 <SetMode>
		LOfreq = DCF77_FREQ;
 8006282:	4930      	ldr	r1, [pc, #192]	; (8006344 <main+0x994>)
 8006284:	4830      	ldr	r0, [pc, #192]	; (8006348 <main+0x998>)
		WSPRBeaconMode = 1;
 8006286:	2201      	movs	r2, #1
 8006288:	4b30      	ldr	r3, [pc, #192]	; (800634c <main+0x99c>)
		LOfreq = DCF77_FREQ;
 800628a:	6008      	str	r0, [r1, #0]
		WSPRBeaconMode = 1;
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e7e6      	b.n	800625e <main+0x8ae>
 8006290:	8f04fefd 	.word	0x8f04fefd
 8006294:	3feffff9 	.word	0x3feffff9
 8006298:	24001014 	.word	0x24001014
 800629c:	240062f4 	.word	0x240062f4
 80062a0:	24007c30 	.word	0x24007c30
 80062a4:	24007c20 	.word	0x24007c20
 80062a8:	3f7fdf3b 	.word	0x3f7fdf3b
 80062ac:	3f7ffcb9 	.word	0x3f7ffcb9
 80062b0:	24005248 	.word	0x24005248
 80062b4:	001e0002 	.word	0x001e0002
 80062b8:	240007e4 	.word	0x240007e4
 80062bc:	3949539c 	.word	0x3949539c
 80062c0:	3ca3d70a 	.word	0x3ca3d70a
 80062c4:	2400a844 	.word	0x2400a844
 80062c8:	24005244 	.word	0x24005244
 80062cc:	4af42400 	.word	0x4af42400
 80062d0:	58024400 	.word	0x58024400
 80062d4:	01012e00 	.word	0x01012e00
 80062d8:	3b800000 	.word	0x3b800000
 80062dc:	24001010 	.word	0x24001010
 80062e0:	3c23d70a 	.word	0x3c23d70a
 80062e4:	24001000 	.word	0x24001000
 80062e8:	24003130 	.word	0x24003130
 80062ec:	24007c24 	.word	0x24007c24
 80062f0:	24000210 	.word	0x24000210
 80062f4:	2400629c 	.word	0x2400629c
 80062f8:	24001034 	.word	0x24001034
 80062fc:	24006290 	.word	0x24006290
 8006300:	2400a80d 	.word	0x2400a80d
 8006304:	2400a80c 	.word	0x2400a80c
 8006308:	2400a810 	.word	0x2400a810
 800630c:	2400a80e 	.word	0x2400a80e
 8006310:	24001030 	.word	0x24001030
 8006314:	2400a814 	.word	0x2400a814
 8006318:	2400b9cd 	.word	0x2400b9cd
 800631c:	240062ec 	.word	0x240062ec
 8006320:	24007420 	.word	0x24007420
 8006324:	2400a43c 	.word	0x2400a43c
 8006328:	2400a72c 	.word	0x2400a72c
 800632c:	2400a6e0 	.word	0x2400a6e0
 8006330:	2400a648 	.word	0x2400a648
 8006334:	2400a508 	.word	0x2400a508
 8006338:	24000800 	.word	0x24000800
 800633c:	240073fd 	.word	0x240073fd
 8006340:	58020c00 	.word	0x58020c00
 8006344:	24006258 	.word	0x24006258
 8006348:	47975e00 	.word	0x47975e00
 800634c:	240073fc 	.word	0x240073fc

08006350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006350:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006352:	4c14      	ldr	r4, [pc, #80]	; (80063a4 <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006354:	2102      	movs	r1, #2
{
 8006356:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006358:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800635e:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006362:	430b      	orrs	r3, r1
 8006364:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006368:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800636c:	400b      	ands	r3, r1
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8006372:	f001 fec5 	bl	8008100 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8006376:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800637a:	2020      	movs	r0, #32
  __HAL_RCC_VREF_CLK_ENABLE();
 800637c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006380:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8006384:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8006390:	f000 fc5a 	bl	8006c48 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8006394:	f000 fc6c 	bl	8006c70 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006398:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800639a:	b002      	add	sp, #8
 800639c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80063a0:	f000 bc5c 	b.w	8006c5c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 80063a4:	58024400 	.word	0x58024400

080063a8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80063a8:	494c      	ldr	r1, [pc, #304]	; (80064dc <HAL_ADC_MspInit+0x134>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063aa:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80063ac:	6802      	ldr	r2, [r0, #0]
{
 80063ae:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80063b0:	428a      	cmp	r2, r1
{
 80063b2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80063b8:	9306      	str	r3, [sp, #24]
 80063ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80063be:	d029      	beq.n	8006414 <HAL_ADC_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80063c0:	4b47      	ldr	r3, [pc, #284]	; (80064e0 <HAL_ADC_MspInit+0x138>)
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d001      	beq.n	80063ca <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80063c6:	b00a      	add	sp, #40	; 0x28
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80063ca:	4a46      	ldr	r2, [pc, #280]	; (80064e4 <HAL_ADC_MspInit+0x13c>)
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80063d0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80063d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80063d4:	d070      	beq.n	80064b8 <HAL_ADC_MspInit+0x110>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d6:	4b44      	ldr	r3, [pc, #272]	; (80064e8 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80063d8:	2402      	movs	r4, #2
 80063da:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063dc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e2:	4842      	ldr	r0, [pc, #264]	; (80064ec <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e4:	f042 0202 	orr.w	r2, r2, #2
 80063e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80063ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80063f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063fc:	f003 fb70 	bl	8009ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006400:	2200      	movs	r2, #0
 8006402:	2012      	movs	r0, #18
 8006404:	4611      	mov	r1, r2
 8006406:	f001 fe7b 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800640a:	2012      	movs	r0, #18
 800640c:	f001 feb6 	bl	800817c <HAL_NVIC_EnableIRQ>
}
 8006410:	b00a      	add	sp, #40	; 0x28
 8006412:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006414:	4a33      	ldr	r2, [pc, #204]	; (80064e4 <HAL_ADC_MspInit+0x13c>)
 8006416:	4604      	mov	r4, r0
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800641c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800641e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006420:	d03c      	beq.n	800649c <HAL_ADC_MspInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006422:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <HAL_ADC_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006424:	a904      	add	r1, sp, #16
 8006426:	4831      	ldr	r0, [pc, #196]	; (80064ec <HAL_ADC_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006428:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc1.Instance = DMA1_Stream0;
 800642c:	4d30      	ldr	r5, [pc, #192]	; (80064f0 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800642e:	f042 0202 	orr.w	r2, r2, #2
 8006432:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006436:	2202      	movs	r2, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006442:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006444:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006446:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800644a:	f003 fb49 	bl	8009ae0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 800644e:	4929      	ldr	r1, [pc, #164]	; (80064f4 <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006450:	2209      	movs	r2, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006452:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006454:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006456:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006458:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800645c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006460:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006464:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006468:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800646c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006470:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006474:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8006478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800647c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800647e:	f002 f997 	bl	80087b0 <HAL_DMA_Init>
 8006482:	bb38      	cbnz	r0, 80064d4 <HAL_ADC_MspInit+0x12c>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006484:	2200      	movs	r2, #0
 8006486:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006488:	64e5      	str	r5, [r4, #76]	; 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800648a:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800648c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800648e:	f001 fe37 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006492:	2012      	movs	r0, #18
 8006494:	f001 fe72 	bl	800817c <HAL_NVIC_EnableIRQ>
}
 8006498:	b00a      	add	sp, #40	; 0x28
 800649a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <HAL_ADC_MspInit+0x140>)
 800649e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80064a2:	f042 0220 	orr.w	r2, r2, #32
 80064a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80064aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	9b00      	ldr	r3, [sp, #0]
 80064b6:	e7b4      	b.n	8006422 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_ADC_MspInit+0x140>)
 80064ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80064be:	f042 0220 	orr.w	r2, r2, #32
 80064c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80064c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	9302      	str	r3, [sp, #8]
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	e780      	b.n	80063d6 <HAL_ADC_MspInit+0x2e>
      Error_Handler();
 80064d4:	f7fe fe2e 	bl	8005134 <Error_Handler>
 80064d8:	e7d4      	b.n	8006484 <HAL_ADC_MspInit+0xdc>
 80064da:	bf00      	nop
 80064dc:	40022000 	.word	0x40022000
 80064e0:	40022100 	.word	0x40022100
 80064e4:	2400b9d4 	.word	0x2400b9d4
 80064e8:	58024400 	.word	0x58024400
 80064ec:	58020400 	.word	0x58020400
 80064f0:	2400a51c 	.word	0x2400a51c
 80064f4:	40020010 	.word	0x40020010

080064f8 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80064f8:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <HAL_DAC_MspInit+0xb4>)
 80064fa:	6802      	ldr	r2, [r0, #0]
{
 80064fc:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 80064fe:	429a      	cmp	r2, r3
{
 8006500:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006502:	f04f 0400 	mov.w	r4, #0
 8006506:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800650a:	9404      	str	r4, [sp, #16]
 800650c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8006510:	d001      	beq.n	8006516 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006512:	b008      	add	sp, #32
 8006514:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8006516:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <HAL_DAC_MspInit+0xb8>)
 8006518:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651a:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800651c:	4e25      	ldr	r6, [pc, #148]	; (80065b4 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800651e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006522:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006526:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800652a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800652e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8006532:	9200      	str	r2, [sp, #0]
 8006534:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006536:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006542:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800654e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006550:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006552:	4819      	ldr	r0, [pc, #100]	; (80065b8 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006554:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006558:	f003 fac2 	bl	8009ae0 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800655c:	4a17      	ldr	r2, [pc, #92]	; (80065bc <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800655e:	2343      	movs	r3, #67	; 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006560:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8006562:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006564:	2240      	movs	r2, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8006566:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006568:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800656c:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800656e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006572:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006578:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800657a:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800657c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800657e:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006586:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006588:	f002 f912 	bl	80087b0 <HAL_DMA_Init>
 800658c:	b958      	cbnz	r0, 80065a6 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800658e:	2200      	movs	r2, #0
 8006590:	2101      	movs	r1, #1
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006592:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006594:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006596:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006598:	f001 fdb2 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800659c:	2036      	movs	r0, #54	; 0x36
 800659e:	f001 fded 	bl	800817c <HAL_NVIC_EnableIRQ>
}
 80065a2:	b008      	add	sp, #32
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80065a6:	f7fe fdc5 	bl	8005134 <Error_Handler>
 80065aa:	e7f0      	b.n	800658e <HAL_DAC_MspInit+0x96>
 80065ac:	40007400 	.word	0x40007400
 80065b0:	58024400 	.word	0x58024400
 80065b4:	2400a594 	.word	0x2400a594
 80065b8:	58020000 	.word	0x58020000
 80065bc:	40020028 	.word	0x40020028

080065c0 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_LPTIM_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c2:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 80065c4:	6801      	ldr	r1, [r0, #0]
{
 80065c6:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM2)
 80065c8:	4291      	cmp	r1, r2
{
 80065ca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80065d4:	9306      	str	r3, [sp, #24]
  if(hlptim->Instance==LPTIM2)
 80065d6:	d001      	beq.n	80065dc <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80065d8:	b008      	add	sp, #32
 80065da:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <HAL_LPTIM_MspInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80065de:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e0:	a902      	add	r1, sp, #8
 80065e2:	4815      	ldr	r0, [pc, #84]	; (8006638 <HAL_LPTIM_MspInit+0x78>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80065e4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80065e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80065f0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80065f4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80065f8:	9200      	str	r2, [sp, #0]
 80065fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006600:	f042 0202 	orr.w	r2, r2, #2
 8006604:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 800660c:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800660e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006612:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8006628 <HAL_LPTIM_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800661a:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800661e:	f003 fa5f 	bl	8009ae0 <HAL_GPIO_Init>
}
 8006622:	b008      	add	sp, #32
 8006624:	bd10      	pop	{r4, pc}
 8006626:	bf00      	nop
 8006628:	00000400 	.word	0x00000400
 800662c:	00000002 	.word	0x00000002
 8006630:	58002400 	.word	0x58002400
 8006634:	58024400 	.word	0x58024400
 8006638:	58020400 	.word	0x58020400

0800663c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800663c:	6803      	ldr	r3, [r0, #0]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8006642:	b510      	push	{r4, lr}
 8006644:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 8006646:	d007      	beq.n	8006658 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8006648:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <HAL_TIM_Base_MspInit+0xac>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01c      	beq.n	8006688 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800664e:	4a27      	ldr	r2, [pc, #156]	; (80066ec <HAL_TIM_Base_MspInit+0xb0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d031      	beq.n	80066b8 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006654:	b004      	add	sp, #16
 8006656:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800665a:	201c      	movs	r0, #28
 800665c:	2200      	movs	r2, #0
 800665e:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006660:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006664:	f044 0401 	orr.w	r4, r4, #1
 8006668:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800666c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8006678:	f001 fd42 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800667c:	201c      	movs	r0, #28
}
 800667e:	b004      	add	sp, #16
 8006680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006684:	f001 bd7a 	b.w	800817c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006688:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800668a:	2036      	movs	r0, #54	; 0x36
 800668c:	2200      	movs	r2, #0
 800668e:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006690:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8006694:	f044 0410 	orr.w	r4, r4, #16
 8006698:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800669c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80066a8:	f001 fd2a 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80066ac:	2036      	movs	r0, #54	; 0x36
}
 80066ae:	b004      	add	sp, #16
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80066b4:	f001 bd62 	b.w	800817c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <HAL_TIM_Base_MspInit+0xb4>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80066ba:	2037      	movs	r0, #55	; 0x37
 80066bc:	2200      	movs	r2, #0
 80066be:	2101      	movs	r1, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80066c0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80066c4:	f044 0420 	orr.w	r4, r4, #32
 80066c8:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80066cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	9303      	str	r3, [sp, #12]
 80066d6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80066d8:	f001 fd12 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80066dc:	2037      	movs	r0, #55	; 0x37
}
 80066de:	b004      	add	sp, #16
 80066e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80066e4:	f001 bd4a 	b.w	800817c <HAL_NVIC_EnableIRQ>
 80066e8:	40001000 	.word	0x40001000
 80066ec:	40001400 	.word	0x40001400
 80066f0:	58024400 	.word	0x58024400
 80066f4:	00000000 	.word	0x00000000

080066f8 <HAL_TIM_Encoder_MspInit>:
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <HAL_TIM_Encoder_MspInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fa:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 80066fc:	6801      	ldr	r1, [r0, #0]
{
 80066fe:	b500      	push	{lr}
  if(htim_encoder->Instance==TIM4)
 8006700:	4291      	cmp	r1, r2
{
 8006702:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006704:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006708:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800670c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 800670e:	d002      	beq.n	8006716 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006710:	b009      	add	sp, #36	; 0x24
 8006712:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006716:	4b17      	ldr	r3, [pc, #92]	; (8006774 <HAL_TIM_Encoder_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006718:	2001      	movs	r0, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800671a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800671c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8006720:	f042 0204 	orr.w	r2, r2, #4
 8006724:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006728:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800672c:	f002 0204 	and.w	r2, r2, #4
 8006730:	9200      	str	r2, [sp, #0]
 8006732:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006734:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006738:	f042 0208 	orr.w	r2, r2, #8
 800673c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006740:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006746:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006748:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800674c:	480a      	ldr	r0, [pc, #40]	; (8006778 <HAL_TIM_Encoder_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800674e:	9206      	str	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006754:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8006768 <HAL_TIM_Encoder_MspInit+0x70>
 8006758:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800675c:	f003 f9c0 	bl	8009ae0 <HAL_GPIO_Init>
}
 8006760:	b009      	add	sp, #36	; 0x24
 8006762:	f85d fb04 	ldr.w	pc, [sp], #4
 8006766:	bf00      	nop
 8006768:	00003000 	.word	0x00003000
 800676c:	00000002 	.word	0x00000002
 8006770:	40000800 	.word	0x40000800
 8006774:	58024400 	.word	0x58024400
 8006778:	58020c00 	.word	0x58020c00

0800677c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800677c:	b5d0      	push	{r4, r6, r7, lr}
 800677e:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006780:	2100      	movs	r1, #0
{
 8006782:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006784:	22c0      	movs	r2, #192	; 0xc0
 8006786:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006788:	9108      	str	r1, [sp, #32]
 800678a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800678e:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006792:	f00a f927 	bl	80109e4 <memset>
  if(huart->Instance==USART3)
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <HAL_UART_MspInit+0xd4>)
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d001      	beq.n	80067a2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800679e:	b03a      	add	sp, #232	; 0xe8
 80067a0:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80067a2:	2202      	movs	r2, #2
 80067a4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067a6:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80067a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067ac:	f005 fadc 	bl	800bd68 <HAL_RCCEx_PeriphCLKConfig>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d149      	bne.n	8006848 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80067b4:	4b27      	ldr	r3, [pc, #156]	; (8006854 <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80067b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067ba:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80067bc:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80067be:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80067c2:	2600      	movs	r6, #0
 80067c4:	2700      	movs	r7, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 80067c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80067ca:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80067ce:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80067d2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80067d6:	9201      	str	r2, [sp, #4]
 80067d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067de:	f042 0202 	orr.w	r2, r2, #2
 80067e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067ea:	f002 0202 	and.w	r2, r2, #2
 80067ee:	9202      	str	r2, [sp, #8]
 80067f0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80067f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067f6:	f042 0208 	orr.w	r2, r2, #8
 80067fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006802:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006804:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006808:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800680c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800680e:	a904      	add	r1, sp, #16
 8006810:	4811      	ldr	r0, [pc, #68]	; (8006858 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006812:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006814:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006818:	f003 f962 	bl	8009ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800681c:	2302      	movs	r3, #2
 800681e:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006822:	a904      	add	r1, sp, #16
 8006824:	480d      	ldr	r0, [pc, #52]	; (800685c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006826:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006828:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800682c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006830:	f003 f956 	bl	8009ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006834:	2200      	movs	r2, #0
 8006836:	2101      	movs	r1, #1
 8006838:	2027      	movs	r0, #39	; 0x27
 800683a:	f001 fc61 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800683e:	2027      	movs	r0, #39	; 0x27
 8006840:	f001 fc9c 	bl	800817c <HAL_NVIC_EnableIRQ>
}
 8006844:	b03a      	add	sp, #232	; 0xe8
 8006846:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8006848:	f7fe fc74 	bl	8005134 <Error_Handler>
 800684c:	e7b2      	b.n	80067b4 <HAL_UART_MspInit+0x38>
 800684e:	bf00      	nop
 8006850:	40004800 	.word	0x40004800
 8006854:	58024400 	.word	0x58024400
 8006858:	58020400 	.word	0x58020400
 800685c:	58020c00 	.word	0x58020c00

08006860 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006864:	e7fe      	b.n	8006864 <HardFault_Handler>
 8006866:	bf00      	nop

08006868 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006868:	e7fe      	b.n	8006868 <MemManage_Handler>
 800686a:	bf00      	nop

0800686c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800686c:	e7fe      	b.n	800686c <BusFault_Handler>
 800686e:	bf00      	nop

08006870 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006870:	e7fe      	b.n	8006870 <UsageFault_Handler>
 8006872:	bf00      	nop

08006874 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8006874:	f000 b966 	b.w	8006b44 <ADC3_IRQHandler>

08006878 <DebugMon_Handler>:
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop

0800687c <PendSV_Handler>:
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop

08006880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint32_t SystemSeconds, SystemMinutes;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006882:	f000 f9b7 	bl	8006bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if ((uwTick % 1000) == 0)
 8006886:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <SysTick_Handler+0x3c>)
 8006888:	490d      	ldr	r1, [pc, #52]	; (80068c0 <SysTick_Handler+0x40>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <SysTick_Handler+0x44>)
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8006896:	d310      	bcc.n	80068ba <SysTick_Handler+0x3a>
	{
		SystemSeconds++;
 8006898:	490b      	ldr	r1, [pc, #44]	; (80068c8 <SysTick_Handler+0x48>)
 800689a:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <SysTick_Handler+0x4c>)
 800689c:	680b      	ldr	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 800689e:	480c      	ldr	r0, [pc, #48]	; (80068d0 <SysTick_Handler+0x50>)
		SystemSeconds++;
 80068a0:	3301      	adds	r3, #1
 80068a2:	fb03 f202 	mul.w	r2, r3, r2
 80068a6:	600b      	str	r3, [r1, #0]
		if((SystemSeconds % 60) == 0)
 80068a8:	ebb0 0fb2 	cmp.w	r0, r2, ror #2
 80068ac:	d305      	bcc.n	80068ba <SysTick_Handler+0x3a>
		{
			SystemMinutes++;
 80068ae:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <SysTick_Handler+0x54>)
			SystemSeconds = 0;
 80068b0:	2000      	movs	r0, #0
			SystemMinutes++;
 80068b2:	6813      	ldr	r3, [r2, #0]
			SystemSeconds = 0;
 80068b4:	6008      	str	r0, [r1, #0]
			SystemMinutes++;
 80068b6:	3301      	adds	r3, #1
 80068b8:	6013      	str	r3, [r2, #0]
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80068ba:	bd08      	pop	{r3, pc}
 80068bc:	2400b9dc 	.word	0x2400b9dc
 80068c0:	26e978d5 	.word	0x26e978d5
 80068c4:	00418937 	.word	0x00418937
 80068c8:	240062d8 	.word	0x240062d8
 80068cc:	eeeeeeef 	.word	0xeeeeeeef
 80068d0:	04444444 	.word	0x04444444
 80068d4:	240062d4 	.word	0x240062d4

080068d8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80068d8:	4801      	ldr	r0, [pc, #4]	; (80068e0 <DMA1_Stream0_IRQHandler+0x8>)
 80068da:	f002 bdb1 	b.w	8009440 <HAL_DMA_IRQHandler>
 80068de:	bf00      	nop
 80068e0:	2400a51c 	.word	0x2400a51c

080068e4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80068e4:	4801      	ldr	r0, [pc, #4]	; (80068ec <DMA1_Stream1_IRQHandler+0x8>)
 80068e6:	f002 bdab 	b.w	8009440 <HAL_DMA_IRQHandler>
 80068ea:	bf00      	nop
 80068ec:	2400a594 	.word	0x2400a594

080068f0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80068f0:	4804      	ldr	r0, [pc, #16]	; (8006904 <ADC_IRQHandler+0x14>)
{
 80068f2:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 80068f4:	f000 f9dc 	bl	8006cb0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80068f8:	4803      	ldr	r0, [pc, #12]	; (8006908 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80068fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80068fe:	f000 b9d7 	b.w	8006cb0 <HAL_ADC_IRQHandler>
 8006902:	bf00      	nop
 8006904:	2400a43c 	.word	0x2400a43c
 8006908:	2400a4a0 	.word	0x2400a4a0

0800690c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <TIM2_IRQHandler+0x8>)
 800690e:	f006 bf87 	b.w	800d820 <HAL_TIM_IRQHandler>
 8006912:	bf00      	nop
 8006914:	2400a648 	.word	0x2400a648

08006918 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <USART3_IRQHandler+0x8>)
 800691a:	f007 b8a9 	b.w	800da70 <HAL_UART_IRQHandler>
 800691e:	bf00      	nop
 8006920:	2400a778 	.word	0x2400a778

08006924 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SwInt1_Pin);
 8006924:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006928:	f003 ba1e 	b.w	8009d68 <HAL_GPIO_EXTI_IRQHandler>

0800692c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800692c:	4804      	ldr	r0, [pc, #16]	; (8006940 <TIM6_DAC_IRQHandler+0x14>)
{
 800692e:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8006930:	f001 fd54 	bl	80083dc <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006934:	4803      	ldr	r0, [pc, #12]	; (8006944 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800693a:	f006 bf71 	b.w	800d820 <HAL_TIM_IRQHandler>
 800693e:	bf00      	nop
 8006940:	2400a508 	.word	0x2400a508
 8006944:	2400a6e0 	.word	0x2400a6e0

08006948 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006948:	4801      	ldr	r0, [pc, #4]	; (8006950 <TIM7_IRQHandler+0x8>)
 800694a:	f006 bf69 	b.w	800d820 <HAL_TIM_IRQHandler>
 800694e:	bf00      	nop
 8006950:	2400a72c 	.word	0x2400a72c

08006954 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006954:	4801      	ldr	r0, [pc, #4]	; (800695c <OTG_FS_IRQHandler+0x8>)
 8006956:	f003 bb3f 	b.w	8009fd8 <HAL_PCD_IRQHandler>
 800695a:	bf00      	nop
 800695c:	2400cec0 	.word	0x2400cec0

08006960 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006960:	2001      	movs	r0, #1
 8006962:	4770      	bx	lr

08006964 <_kill>:

int _kill(int pid, int sig)
{
 8006964:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006966:	f009 fff3 	bl	8010950 <__errno>
 800696a:	2216      	movs	r2, #22
 800696c:	4603      	mov	r3, r0
	return -1;
}
 800696e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bd08      	pop	{r3, pc}
 8006976:	bf00      	nop

08006978 <_exit>:

void _exit (int status)
{
 8006978:	b508      	push	{r3, lr}
	errno = EINVAL;
 800697a:	f009 ffe9 	bl	8010950 <__errno>
 800697e:	2316      	movs	r3, #22
 8006980:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8006982:	e7fe      	b.n	8006982 <_exit+0xa>

08006984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006984:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006986:	1e16      	subs	r6, r2, #0
 8006988:	dd07      	ble.n	800699a <_read+0x16>
 800698a:	460c      	mov	r4, r1
 800698c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800698e:	f3af 8000 	nop.w
 8006992:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006996:	42a5      	cmp	r5, r4
 8006998:	d1f9      	bne.n	800698e <_read+0xa>
	}

return len;
}
 800699a:	4630      	mov	r0, r6
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	bf00      	nop

080069a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80069a0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069a2:	1e16      	subs	r6, r2, #0
 80069a4:	dd07      	ble.n	80069b6 <_write+0x16>
 80069a6:	460c      	mov	r4, r1
 80069a8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80069aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80069ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069b2:	42ac      	cmp	r4, r5
 80069b4:	d1f9      	bne.n	80069aa <_write+0xa>
	}
	return len;
}
 80069b6:	4630      	mov	r0, r6
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	bf00      	nop

080069bc <_close>:

int _close(int file)
{
	return -1;
}
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80069c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80069c8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80069ca:	604b      	str	r3, [r1, #4]
}
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80069d0:	2001      	movs	r0, #1
 80069d2:	4770      	bx	lr

080069d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80069d4:	2000      	movs	r0, #0
 80069d6:	4770      	bx	lr

080069d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069d8:	b538      	push	{r3, r4, r5, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069da:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <_sbrk+0x38>)
{
 80069dc:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069de:	490d      	ldr	r1, [pc, #52]	; (8006a14 <_sbrk+0x3c>)
 80069e0:	4d0d      	ldr	r5, [pc, #52]	; (8006a18 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80069e2:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069e4:	1b49      	subs	r1, r1, r5
  if (NULL == __sbrk_heap_end)
 80069e6:	b12a      	cbz	r2, 80069f4 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069e8:	4413      	add	r3, r2
 80069ea:	428b      	cmp	r3, r1
 80069ec:	d808      	bhi.n	8006a00 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80069ee:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80069f0:	6023      	str	r3, [r4, #0]
}
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
    __sbrk_heap_end = &_end;
 80069f4:	4809      	ldr	r0, [pc, #36]	; (8006a1c <_sbrk+0x44>)
 80069f6:	4602      	mov	r2, r0
 80069f8:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80069fa:	4413      	add	r3, r2
 80069fc:	428b      	cmp	r3, r1
 80069fe:	d9f6      	bls.n	80069ee <_sbrk+0x16>
    errno = ENOMEM;
 8006a00:	f009 ffa6 	bl	8010950 <__errno>
 8006a04:	230c      	movs	r3, #12
    return (void *)-1;
 8006a06:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8006a0a:	6003      	str	r3, [r0, #0]
}
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	2400b9d8 	.word	0x2400b9d8
 8006a14:	24080000 	.word	0x24080000
 8006a18:	00000420 	.word	0x00000420
 8006a1c:	2400d600 	.word	0x2400d600

08006a20 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006a20:	4929      	ldr	r1, [pc, #164]	; (8006ac8 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a22:	4a2a      	ldr	r2, [pc, #168]	; (8006acc <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006a24:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8006a2c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2b06      	cmp	r3, #6
 8006a3a:	d805      	bhi.n	8006a48 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006a3c:	6813      	ldr	r3, [r2, #0]
 8006a3e:	f023 030f 	bic.w	r3, r3, #15
 8006a42:	f043 0307 	orr.w	r3, r3, #7
 8006a46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006a48:	4b21      	ldr	r3, [pc, #132]	; (8006ad0 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006a4a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006a4c:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8006a4e:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a50:	481e      	ldr	r0, [pc, #120]	; (8006acc <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8006a52:	f041 0101 	orr.w	r1, r1, #1
 8006a56:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006a58:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006a5a:	6819      	ldr	r1, [r3, #0]
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a60:	6803      	ldr	r3, [r0, #0]
 8006a62:	071b      	lsls	r3, r3, #28
 8006a64:	d505      	bpl.n	8006a72 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006a66:	6803      	ldr	r3, [r0, #0]
 8006a68:	f023 030f 	bic.w	r3, r3, #15
 8006a6c:	f043 0307 	orr.w	r3, r3, #7
 8006a70:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <SystemInit+0xb0>)
 8006a74:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006a76:	4918      	ldr	r1, [pc, #96]	; (8006ad8 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8006a78:	4c18      	ldr	r4, [pc, #96]	; (8006adc <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8006a7a:	4819      	ldr	r0, [pc, #100]	; (8006ae0 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8006a7c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006a7e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006a80:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006a82:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8006a84:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8006a86:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006a8a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006a8c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006a8e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006a90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006a92:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006a94:	4c13      	ldr	r4, [pc, #76]	; (8006ae4 <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 8006a96:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006a9a:	4913      	ldr	r1, [pc, #76]	; (8006ae8 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8006a9c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006a9e:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	4019      	ands	r1, r3
 8006aa4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006aa8:	d203      	bcs.n	8006ab2 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006aaa:	4b10      	ldr	r3, [pc, #64]	; (8006aec <SystemInit+0xcc>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006ab2:	490f      	ldr	r1, [pc, #60]	; (8006af0 <SystemInit+0xd0>)
 8006ab4:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ab8:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <SystemInit+0xa8>)
 8006aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006abe:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ac4:	609a      	str	r2, [r3, #8]
}
 8006ac6:	4770      	bx	lr
 8006ac8:	e000ed00 	.word	0xe000ed00
 8006acc:	52002000 	.word	0x52002000
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	eaf6ed7f 	.word	0xeaf6ed7f
 8006ad8:	01010280 	.word	0x01010280
 8006adc:	02020200 	.word	0x02020200
 8006ae0:	01ff0000 	.word	0x01ff0000
 8006ae4:	5c001000 	.word	0x5c001000
 8006ae8:	ffff0000 	.word	0xffff0000
 8006aec:	51008000 	.word	0x51008000
 8006af0:	52004000 	.word	0x52004000

08006af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b2c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006af8:	f7ff ff92 	bl	8006a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006afe:	e003      	b.n	8006b08 <LoopCopyDataInit>

08006b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b00:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8006b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b06:	3104      	adds	r1, #4

08006b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006b08:	480a      	ldr	r0, [pc, #40]	; (8006b34 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8006b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006b10:	d3f6      	bcc.n	8006b00 <CopyDataInit>
  ldr  r2, =_sbss
 8006b12:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8006b14:	e002      	b.n	8006b1c <LoopFillZerobss>

08006b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006b18:	f842 3b04 	str.w	r3, [r2], #4

08006b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006b1c:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8006b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006b20:	d3f9      	bcc.n	8006b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b22:	f009 ff2d 	bl	8010980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b26:	f7fe ff43 	bl	80059b0 <main>
  bx  lr    
 8006b2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b2c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8006b30:	0801f560 	.word	0x0801f560
  ldr  r0, =_sdata
 8006b34:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8006b38:	240005e4 	.word	0x240005e4
  ldr  r2, =_sbss
 8006b3c:	24000600 	.word	0x24000600
  ldr  r3, = _ebss
 8006b40:	2400d5fc 	.word	0x2400d5fc

08006b44 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b44:	e7fe      	b.n	8006b44 <ADC3_IRQHandler>
	...

08006b48 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <HAL_InitTick+0x40>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b90b      	cbnz	r3, 8006b52 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8006b4e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006b50:	4770      	bx	lr
{
 8006b52:	b510      	push	{r4, lr}
 8006b54:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b5a:	4a0c      	ldr	r2, [pc, #48]	; (8006b8c <HAL_InitTick+0x44>)
 8006b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b60:	6810      	ldr	r0, [r2, #0]
 8006b62:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b66:	f001 fb17 	bl	8008198 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b6a:	2c0f      	cmp	r4, #15
 8006b6c:	d800      	bhi.n	8006b70 <HAL_InitTick+0x28>
 8006b6e:	b108      	cbz	r0, 8006b74 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006b70:	2001      	movs	r0, #1
}
 8006b72:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b74:	2200      	movs	r2, #0
 8006b76:	4621      	mov	r1, r4
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	f001 fac0 	bl	8008100 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b80:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <HAL_InitTick+0x48>)
 8006b82:	2000      	movs	r0, #0
 8006b84:	601c      	str	r4, [r3, #0]
}
 8006b86:	bd10      	pop	{r4, pc}
 8006b88:	24000318 	.word	0x24000318
 8006b8c:	24000310 	.word	0x24000310
 8006b90:	2400031c 	.word	0x2400031c

08006b94 <HAL_Init>:
{
 8006b94:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b96:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b98:	4c12      	ldr	r4, [pc, #72]	; (8006be4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b9a:	f001 fa9f 	bl	80080dc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b9e:	f004 fd57 	bl	800b650 <HAL_RCC_GetSysClockFreq>
 8006ba2:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <HAL_Init+0x54>)
 8006ba4:	4911      	ldr	r1, [pc, #68]	; (8006bec <HAL_Init+0x58>)
 8006ba6:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ba8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006baa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bae:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bb2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bb4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bb6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8006bba:	490d      	ldr	r1, [pc, #52]	; (8006bf0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bbc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006bc0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bc2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8006bc6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bc8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bca:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bcc:	f7ff ffbc 	bl	8006b48 <HAL_InitTick>
 8006bd0:	b110      	cbz	r0, 8006bd8 <HAL_Init+0x44>
    return HAL_ERROR;
 8006bd2:	2401      	movs	r4, #1
}
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	4604      	mov	r4, r0
  HAL_MspInit();
 8006bda:	f7ff fbb9 	bl	8006350 <HAL_MspInit>
}
 8006bde:	4620      	mov	r0, r4
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	bf00      	nop
 8006be4:	24000314 	.word	0x24000314
 8006be8:	58024400 	.word	0x58024400
 8006bec:	0801dd14 	.word	0x0801dd14
 8006bf0:	24000310 	.word	0x24000310

08006bf4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006bf4:	4a03      	ldr	r2, [pc, #12]	; (8006c04 <HAL_IncTick+0x10>)
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <HAL_IncTick+0x14>)
 8006bf8:	6811      	ldr	r1, [r2, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	440b      	add	r3, r1
 8006bfe:	6013      	str	r3, [r2, #0]
}
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	2400b9dc 	.word	0x2400b9dc
 8006c08:	24000318 	.word	0x24000318

08006c0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006c0c:	4b01      	ldr	r3, [pc, #4]	; (8006c14 <HAL_GetTick+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
}
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2400b9dc 	.word	0x2400b9dc

08006c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006c1c:	f7ff fff6 	bl	8006c0c <HAL_GetTick>
 8006c20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c22:	1c63      	adds	r3, r4, #1
 8006c24:	d002      	beq.n	8006c2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <HAL_Delay+0x20>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c2c:	f7ff ffee 	bl	8006c0c <HAL_GetTick>
 8006c30:	1b43      	subs	r3, r0, r5
 8006c32:	42a3      	cmp	r3, r4
 8006c34:	d3fa      	bcc.n	8006c2c <HAL_Delay+0x14>
  {
  }
}
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	24000318 	.word	0x24000318

08006c3c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <HAL_GetREVID+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
}
 8006c40:	0c00      	lsrs	r0, r0, #16
 8006c42:	4770      	bx	lr
 8006c44:	5c001000 	.word	0x5c001000

08006c48 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8006c48:	4a03      	ldr	r2, [pc, #12]	; (8006c58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c50:	4318      	orrs	r0, r3
 8006c52:	6010      	str	r0, [r2, #0]
}
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	58003c00 	.word	0x58003c00

08006c5c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8006c5c:	4a03      	ldr	r2, [pc, #12]	; (8006c6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 8006c5e:	6813      	ldr	r3, [r2, #0]
 8006c60:	f023 0302 	bic.w	r3, r3, #2
 8006c64:	4318      	orrs	r0, r3
 8006c66:	6010      	str	r0, [r2, #0]
}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	58003c00 	.word	0x58003c00

08006c70 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8006c70:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8006c72:	4c0a      	ldr	r4, [pc, #40]	; (8006c9c <HAL_SYSCFG_EnableVREFBUF+0x2c>)
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c7c:	f7ff ffc6 	bl	8006c0c <HAL_GetTick>
 8006c80:	4605      	mov	r5, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8006c82:	e004      	b.n	8006c8e <HAL_SYSCFG_EnableVREFBUF+0x1e>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8006c84:	f7ff ffc2 	bl	8006c0c <HAL_GetTick>
 8006c88:	1b40      	subs	r0, r0, r5
 8006c8a:	280a      	cmp	r0, #10
 8006c8c:	d804      	bhi.n	8006c98 <HAL_SYSCFG_EnableVREFBUF+0x28>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	071b      	lsls	r3, r3, #28
 8006c92:	d5f7      	bpl.n	8006c84 <HAL_SYSCFG_EnableVREFBUF+0x14>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006c94:	2000      	movs	r0, #0
}
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8006c98:	2003      	movs	r0, #3
}
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	58003c00 	.word	0x58003c00

08006ca0 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ca0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006ca2:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ca4:	f7fd fea2 	bl	80049ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ca8:	bd08      	pop	{r3, pc}
 8006caa:	bf00      	nop

08006cac <HAL_ADC_ErrorCallback>:
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop

08006cb0 <HAL_ADC_IRQHandler>:
{
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cb2:	4a90      	ldr	r2, [pc, #576]	; (8006ef4 <HAL_ADC_IRQHandler+0x244>)
{
 8006cb4:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006cb6:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cb8:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006cba:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006cbc:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cbe:	f000 8095 	beq.w	8006dec <HAL_ADC_IRQHandler+0x13c>
 8006cc2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	f000 8090 	beq.w	8006dec <HAL_ADC_IRQHandler+0x13c>
 8006ccc:	4a8a      	ldr	r2, [pc, #552]	; (8006ef8 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006cce:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006cd0:	07a9      	lsls	r1, r5, #30
 8006cd2:	f007 071f 	and.w	r7, r7, #31
 8006cd6:	d502      	bpl.n	8006cde <HAL_ADC_IRQHandler+0x2e>
 8006cd8:	07b2      	lsls	r2, r6, #30
 8006cda:	f100 80aa 	bmi.w	8006e32 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006cde:	0769      	lsls	r1, r5, #29
 8006ce0:	d579      	bpl.n	8006dd6 <HAL_ADC_IRQHandler+0x126>
 8006ce2:	0772      	lsls	r2, r6, #29
 8006ce4:	d577      	bpl.n	8006dd6 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ce6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006ce8:	06d2      	lsls	r2, r2, #27
 8006cea:	d403      	bmi.n	8006cf4 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf2:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006cfa:	d11c      	bne.n	8006d36 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006cfc:	4a7f      	ldr	r2, [pc, #508]	; (8006efc <HAL_ADC_IRQHandler+0x24c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	f000 80e8 	beq.w	8006ed4 <HAL_ADC_IRQHandler+0x224>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006d04:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006d06:	0490      	lsls	r0, r2, #18
 8006d08:	d415      	bmi.n	8006d36 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	0711      	lsls	r1, r2, #28
 8006d0e:	d512      	bpl.n	8006d36 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	0752      	lsls	r2, r2, #29
 8006d14:	f100 80f6 	bmi.w	8006f04 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	f022 020c 	bic.w	r2, r2, #12
 8006d1e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d26:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d2a:	04db      	lsls	r3, r3, #19
 8006d2c:	d403      	bmi.n	8006d36 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7fd fe3a 	bl	80049b0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	220c      	movs	r2, #12
 8006d40:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006d42:	06a8      	lsls	r0, r5, #26
 8006d44:	d54d      	bpl.n	8006de2 <HAL_ADC_IRQHandler+0x132>
 8006d46:	06b1      	lsls	r1, r6, #26
 8006d48:	d54b      	bpl.n	8006de2 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d4a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d4c:	06d1      	lsls	r1, r2, #27
 8006d4e:	d403      	bmi.n	8006d58 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006d50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d56:	6562      	str	r2, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d58:	4968      	ldr	r1, [pc, #416]	; (8006efc <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d5c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006d5e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006d60:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8006d64:	d073      	beq.n	8006e4e <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006d66:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006d68:	b9d2      	cbnz	r2, 8006da0 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006d6a:	018a      	lsls	r2, r1, #6
 8006d6c:	f100 80aa 	bmi.w	8006ec4 <HAL_ADC_IRQHandler+0x214>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	0650      	lsls	r0, r2, #25
 8006d74:	d514      	bpl.n	8006da0 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d76:	0289      	lsls	r1, r1, #10
 8006d78:	d412      	bmi.n	8006da0 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	0712      	lsls	r2, r2, #28
 8006d7e:	f100 80cc 	bmi.w	8006f1a <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d88:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d90:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006d92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d94:	05d8      	lsls	r0, r3, #23
 8006d96:	d403      	bmi.n	8006da0 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 f929 	bl	8007ff8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	2260      	movs	r2, #96	; 0x60
 8006daa:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006dac:	0629      	lsls	r1, r5, #24
 8006dae:	d501      	bpl.n	8006db4 <HAL_ADC_IRQHandler+0x104>
 8006db0:	0632      	lsls	r2, r6, #24
 8006db2:	d460      	bmi.n	8006e76 <HAL_ADC_IRQHandler+0x1c6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006db4:	05e8      	lsls	r0, r5, #23
 8006db6:	d501      	bpl.n	8006dbc <HAL_ADC_IRQHandler+0x10c>
 8006db8:	05f1      	lsls	r1, r6, #23
 8006dba:	d467      	bmi.n	8006e8c <HAL_ADC_IRQHandler+0x1dc>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006dbc:	05aa      	lsls	r2, r5, #22
 8006dbe:	d501      	bpl.n	8006dc4 <HAL_ADC_IRQHandler+0x114>
 8006dc0:	05b0      	lsls	r0, r6, #22
 8006dc2:	d44c      	bmi.n	8006e5e <HAL_ADC_IRQHandler+0x1ae>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006dc4:	06e9      	lsls	r1, r5, #27
 8006dc6:	d501      	bpl.n	8006dcc <HAL_ADC_IRQHandler+0x11c>
 8006dc8:	06f2      	lsls	r2, r6, #27
 8006dca:	d411      	bmi.n	8006df0 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006dcc:	0568      	lsls	r0, r5, #21
 8006dce:	d501      	bpl.n	8006dd4 <HAL_ADC_IRQHandler+0x124>
 8006dd0:	0571      	lsls	r1, r6, #21
 8006dd2:	d467      	bmi.n	8006ea4 <HAL_ADC_IRQHandler+0x1f4>
}
 8006dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006dd6:	0728      	lsls	r0, r5, #28
 8006dd8:	d5b3      	bpl.n	8006d42 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006dda:	0731      	lsls	r1, r6, #28
 8006ddc:	d483      	bmi.n	8006ce6 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006dde:	06a8      	lsls	r0, r5, #26
 8006de0:	d4b1      	bmi.n	8006d46 <HAL_ADC_IRQHandler+0x96>
 8006de2:	066a      	lsls	r2, r5, #25
 8006de4:	d5e2      	bpl.n	8006dac <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006de6:	0670      	lsls	r0, r6, #25
 8006de8:	d5e0      	bpl.n	8006dac <HAL_ADC_IRQHandler+0xfc>
 8006dea:	e7ae      	b.n	8006d4a <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006dec:	4a44      	ldr	r2, [pc, #272]	; (8006f00 <HAL_ADC_IRQHandler+0x250>)
 8006dee:	e76e      	b.n	8006cce <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006df0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006df2:	b17a      	cbz	r2, 8006e14 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006df4:	2f00      	cmp	r7, #0
 8006df6:	d072      	beq.n	8006ede <HAL_ADC_IRQHandler+0x22e>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006df8:	4a3e      	ldr	r2, [pc, #248]	; (8006ef4 <HAL_ADC_IRQHandler+0x244>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	f000 808b 	beq.w	8006f16 <HAL_ADC_IRQHandler+0x266>
 8006e00:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006e04:	4293      	cmp	r3, r2
 8006e06:	f000 8086 	beq.w	8006f16 <HAL_ADC_IRQHandler+0x266>
 8006e0a:	4a3b      	ldr	r2, [pc, #236]	; (8006ef8 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006e0c:	6892      	ldr	r2, [r2, #8]
 8006e0e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8006e12:	d00b      	beq.n	8006e2c <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
      HAL_ADC_ErrorCallback(hadc);
 8006e16:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e1c:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8006e26:	f7ff ff41 	bl	8006cac <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	2210      	movs	r2, #16
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e7cc      	b.n	8006dcc <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e34:	06d8      	lsls	r0, r3, #27
 8006e36:	d403      	bmi.n	8006e40 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006e38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006e3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e3e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006e40:	4620      	mov	r0, r4
 8006e42:	f001 f8e1 	bl	8008008 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e747      	b.n	8006cde <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006e4e:	1fb9      	subs	r1, r7, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006e50:	2901      	cmp	r1, #1
 8006e52:	d988      	bls.n	8006d66 <HAL_ADC_IRQHandler+0xb6>
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	d086      	beq.n	8006d66 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006e58:	4926      	ldr	r1, [pc, #152]	; (8006ef4 <HAL_ADC_IRQHandler+0x244>)
 8006e5a:	68c9      	ldr	r1, [r1, #12]
 8006e5c:	e784      	b.n	8006d68 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e60:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e66:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e68:	f001 f8cc 	bl	8008004 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e7a6      	b.n	8006dc4 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006e76:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006e78:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e7e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006e80:	f7fd fde2 	bl	8004a48 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	2280      	movs	r2, #128	; 0x80
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e793      	b.n	8006db4 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006e8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006e8e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e94:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006e96:	f001 f8b3 	bl	8008000 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e78b      	b.n	8006dbc <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006ea4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006eaa:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eb0:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006eb2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006eb4:	f042 0208 	orr.w	r2, r2, #8
 8006eb8:	65a2      	str	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006eba:	6019      	str	r1, [r3, #0]
}
 8006ebc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006ec0:	f001 b89c 	b.w	8007ffc <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006ec4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006ec8:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006ecc:	4302      	orrs	r2, r0
 8006ece:	f47f af67 	bne.w	8006da0 <HAL_ADC_IRQHandler+0xf0>
 8006ed2:	e74d      	b.n	8006d70 <HAL_ADC_IRQHandler+0xc0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ed4:	2f09      	cmp	r7, #9
 8006ed6:	d906      	bls.n	8006ee6 <HAL_ADC_IRQHandler+0x236>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006ed8:	4a06      	ldr	r2, [pc, #24]	; (8006ef4 <HAL_ADC_IRQHandler+0x244>)
 8006eda:	68d2      	ldr	r2, [r2, #12]
 8006edc:	e713      	b.n	8006d06 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	0797      	lsls	r7, r2, #30
 8006ee2:	d0a3      	beq.n	8006e2c <HAL_ADC_IRQHandler+0x17c>
 8006ee4:	e796      	b.n	8006e14 <HAL_ADC_IRQHandler+0x164>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ee6:	f240 2221 	movw	r2, #545	; 0x221
 8006eea:	40fa      	lsrs	r2, r7
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006eec:	07d2      	lsls	r2, r2, #31
 8006eee:	f53f af09 	bmi.w	8006d04 <HAL_ADC_IRQHandler+0x54>
 8006ef2:	e7f1      	b.n	8006ed8 <HAL_ADC_IRQHandler+0x228>
 8006ef4:	40022000 	.word	0x40022000
 8006ef8:	58026300 	.word	0x58026300
 8006efc:	40022100 	.word	0x40022100
 8006f00:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f06:	f043 0310 	orr.w	r3, r3, #16
 8006f0a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f14:	e70f      	b.n	8006d36 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006f16:	4a05      	ldr	r2, [pc, #20]	; (8006f2c <HAL_ADC_IRQHandler+0x27c>)
 8006f18:	e778      	b.n	8006e0c <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f1c:	f043 0310 	orr.w	r3, r3, #16
 8006f20:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f2a:	e739      	b.n	8006da0 <HAL_ADC_IRQHandler+0xf0>
 8006f2c:	40022300 	.word	0x40022300

08006f30 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f30:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f34:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 8006f3a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006f3c:	d11d      	bne.n	8006f7a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f3e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f46:	680a      	ldr	r2, [r1, #0]
 8006f48:	f012 0f08 	tst.w	r2, #8
 8006f4c:	68ca      	ldr	r2, [r1, #12]
 8006f4e:	d01b      	beq.n	8006f88 <ADC_DMAConvCplt+0x58>
 8006f50:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006f54:	d10d      	bne.n	8006f72 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006f56:	68ca      	ldr	r2, [r1, #12]
 8006f58:	0494      	lsls	r4, r2, #18
 8006f5a:	d40a      	bmi.n	8006f72 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f66:	04d1      	lsls	r1, r2, #19
 8006f68:	d403      	bmi.n	8006f72 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f6c:	f042 0201 	orr.w	r2, r2, #1
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fd fd1c 	bl	80049b0 <HAL_ADC_ConvCpltCallback>
}
 8006f78:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f7a:	06d2      	lsls	r2, r2, #27
 8006f7c:	d40a      	bmi.n	8006f94 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f86:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006f88:	0790      	lsls	r0, r2, #30
 8006f8a:	d0e7      	beq.n	8006f5c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd fd0f 	bl	80049b0 <HAL_ADC_ConvCpltCallback>
 8006f92:	e7f1      	b.n	8006f78 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff fe89 	bl	8006cac <HAL_ADC_ErrorCallback>
}
 8006f9a:	bd10      	pop	{r4, pc}

08006f9c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006f9e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fa0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006fa8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006faa:	f043 0304 	orr.w	r3, r3, #4
 8006fae:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006fb0:	f7ff fe7c 	bl	8006cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fb4:	bd08      	pop	{r3, pc}
 8006fb6:	bf00      	nop

08006fb8 <HAL_ADC_ConfigChannel>:
{
 8006fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8006fba:	2200      	movs	r2, #0
{
 8006fbc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8006fbe:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8006fc0:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8006fc4:	2a01      	cmp	r2, #1
 8006fc6:	f000 813b 	beq.w	8007240 <HAL_ADC_ConfigChannel+0x288>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fce:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006fd0:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fd4:	6894      	ldr	r4, [r2, #8]
 8006fd6:	0764      	lsls	r4, r4, #29
 8006fd8:	f100 8099 	bmi.w	800710e <HAL_ADC_ConfigChannel+0x156>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006fdc:	680c      	ldr	r4, [r1, #0]
 8006fde:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8006fe2:	2d00      	cmp	r5, #0
 8006fe4:	f040 809e 	bne.w	8007124 <HAL_ADC_ConfigChannel+0x16c>
 8006fe8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8006fec:	40a0      	lsls	r0, r4
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006fee:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
 8006ff0:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006ff4:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ff6:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8006ffa:	4330      	orrs	r0, r6
 8006ffc:	f00c 0c0c 	and.w	ip, ip, #12
 8007000:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
 8007002:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007006:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800700a:	4084      	lsls	r4, r0
 800700c:	fa0e fe00 	lsl.w	lr, lr, r0
 8007010:	f85c 0005 	ldr.w	r0, [ip, r5]
 8007014:	ea20 000e 	bic.w	r0, r0, lr
 8007018:	4304      	orrs	r4, r0
 800701a:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800701e:	6890      	ldr	r0, [r2, #8]
 8007020:	0740      	lsls	r0, r0, #29
 8007022:	d47d      	bmi.n	8007120 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007024:	6895      	ldr	r5, [r2, #8]
 8007026:	f015 0508 	ands.w	r5, r5, #8
 800702a:	d156      	bne.n	80070da <HAL_ADC_ConfigChannel+0x122>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800702c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 800702e:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007030:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007034:	4fb7      	ldr	r7, [pc, #732]	; (8007314 <HAL_ADC_ConfigChannel+0x35c>)
 8007036:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800703a:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800703e:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8007042:	fa00 fe04 	lsl.w	lr, r0, r4
 8007046:	6888      	ldr	r0, [r1, #8]
 8007048:	fa00 f404 	lsl.w	r4, r0, r4
 800704c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8007050:	ea20 000e 	bic.w	r0, r0, lr
 8007054:	4320      	orrs	r0, r4
 8007056:	f84c 0006 	str.w	r0, [ip, r6]
 800705a:	6838      	ldr	r0, [r7, #0]
 800705c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8007060:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8007064:	f000 8095 	beq.w	8007192 <HAL_ADC_ConfigChannel+0x1da>
 8007068:	68d0      	ldr	r0, [r2, #12]
 800706a:	68d6      	ldr	r6, [r2, #12]
 800706c:	06c7      	lsls	r7, r0, #27
 800706e:	f100 8107 	bmi.w	8007280 <HAL_ADC_ConfigChannel+0x2c8>
 8007072:	f3c6 0682 	ubfx	r6, r6, #2, #3
 8007076:	6948      	ldr	r0, [r1, #20]
 8007078:	0076      	lsls	r6, r6, #1
 800707a:	fa00 f606 	lsl.w	r6, r0, r6
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800707e:	690f      	ldr	r7, [r1, #16]
 8007080:	2f04      	cmp	r7, #4
 8007082:	f000 80e0 	beq.w	8007246 <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007086:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
 800708a:	6808      	ldr	r0, [r1, #0]
 800708c:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
 8007090:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007094:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007098:	ea40 000c 	orr.w	r0, r0, ip
 800709c:	4330      	orrs	r0, r6
 800709e:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80070a2:	7e48      	ldrb	r0, [r1, #25]
 80070a4:	690e      	ldr	r6, [r1, #16]
 80070a6:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80070a8:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80070ac:	bf0c      	ite	eq
 80070ae:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80070b2:	2700      	movne	r7, #0
 80070b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070b8:	4338      	orrs	r0, r7
 80070ba:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80070be:	7e0c      	ldrb	r4, [r1, #24]
 80070c0:	6908      	ldr	r0, [r1, #16]
 80070c2:	2c01      	cmp	r4, #1
 80070c4:	d104      	bne.n	80070d0 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80070c6:	f000 001f 	and.w	r0, r0, #31
 80070ca:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80070ce:	4085      	lsls	r5, r0
 80070d0:	6910      	ldr	r0, [r2, #16]
 80070d2:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80070d6:	4305      	orrs	r5, r0
 80070d8:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070da:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070dc:	07c4      	lsls	r4, r0, #31
 80070de:	d414      	bmi.n	800710a <HAL_ADC_ConfigChannel+0x152>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80070e0:	68ce      	ldr	r6, [r1, #12]
 80070e2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80070e4:	f006 0718 	and.w	r7, r6, #24
 80070e8:	488b      	ldr	r0, [pc, #556]	; (8007318 <HAL_ADC_ConfigChannel+0x360>)
 80070ea:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
 80070ee:	40f8      	lsrs	r0, r7
 80070f0:	f3c4 0713 	ubfx	r7, r4, #0, #20
 80070f4:	4020      	ands	r0, r4
 80070f6:	ea25 0507 	bic.w	r5, r5, r7
 80070fa:	4328      	orrs	r0, r5
 80070fc:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007100:	4886      	ldr	r0, [pc, #536]	; (800731c <HAL_ADC_ConfigChannel+0x364>)
 8007102:	4286      	cmp	r6, r0
 8007104:	d04d      	beq.n	80071a2 <HAL_ADC_ConfigChannel+0x1ea>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007106:	2c00      	cmp	r4, #0
 8007108:	db15      	blt.n	8007136 <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800710a:	2000      	movs	r0, #0
 800710c:	e003      	b.n	8007116 <HAL_ADC_ConfigChannel+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800710e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007110:	f042 0220 	orr.w	r2, r2, #32
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800711c:	b003      	add	sp, #12
 800711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007120:	6890      	ldr	r0, [r2, #8]
 8007122:	e7da      	b.n	80070da <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007124:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007128:	b115      	cbz	r5, 8007130 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800712a:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800712e:	40a8      	lsls	r0, r5
 8007130:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8007134:	e75b      	b.n	8006fee <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007136:	497a      	ldr	r1, [pc, #488]	; (8007320 <HAL_ADC_ConfigChannel+0x368>)
 8007138:	428a      	cmp	r2, r1
 800713a:	f000 80c7 	beq.w	80072cc <HAL_ADC_ConfigChannel+0x314>
 800713e:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8007142:	428a      	cmp	r2, r1
 8007144:	f000 80c2 	beq.w	80072cc <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007148:	4d76      	ldr	r5, [pc, #472]	; (8007324 <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800714a:	4877      	ldr	r0, [pc, #476]	; (8007328 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800714c:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800714e:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007150:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007154:	43c0      	mvns	r0, r0
 8007156:	f000 0001 	and.w	r0, r0, #1
 800715a:	2800      	cmp	r0, #0
 800715c:	f000 80c5 	beq.w	80072ea <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007160:	4872      	ldr	r0, [pc, #456]	; (800732c <HAL_ADC_ConfigChannel+0x374>)
 8007162:	4284      	cmp	r4, r0
 8007164:	f000 810e 	beq.w	8007384 <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007168:	4871      	ldr	r0, [pc, #452]	; (8007330 <HAL_ADC_ConfigChannel+0x378>)
 800716a:	4284      	cmp	r4, r0
 800716c:	f000 812d 	beq.w	80073ca <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007170:	4870      	ldr	r0, [pc, #448]	; (8007334 <HAL_ADC_ConfigChannel+0x37c>)
 8007172:	4284      	cmp	r4, r0
 8007174:	d1c9      	bne.n	800710a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
 8007176:	0249      	lsls	r1, r1, #9
 8007178:	d4c7      	bmi.n	800710a <HAL_ADC_ConfigChannel+0x152>
 800717a:	496b      	ldr	r1, [pc, #428]	; (8007328 <HAL_ADC_ConfigChannel+0x370>)
 800717c:	428a      	cmp	r2, r1
 800717e:	d1c4      	bne.n	800710a <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007180:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007182:	2000      	movs	r0, #0
 8007184:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8007188:	4332      	orrs	r2, r6
 800718a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800718e:	60aa      	str	r2, [r5, #8]
}
 8007190:	e7c1      	b.n	8007116 <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007192:	68d6      	ldr	r6, [r2, #12]
 8007194:	6948      	ldr	r0, [r1, #20]
 8007196:	f3c6 0682 	ubfx	r6, r6, #2, #3
 800719a:	0076      	lsls	r6, r6, #1
 800719c:	fa00 f606 	lsl.w	r6, r0, r6
 80071a0:	e76d      	b.n	800707e <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071a2:	2f00      	cmp	r7, #0
 80071a4:	d073      	beq.n	800728e <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a6:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80071aa:	2800      	cmp	r0, #0
 80071ac:	f000 80c6 	beq.w	800733c <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
 80071b0:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071b4:	3001      	adds	r0, #1
 80071b6:	f000 001f 	and.w	r0, r0, #31
 80071ba:	2809      	cmp	r0, #9
 80071bc:	f240 80be 	bls.w	800733c <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c0:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f000 8114 	beq.w	80073f2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80071ca:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071ce:	3001      	adds	r0, #1
 80071d0:	0680      	lsls	r0, r0, #26
 80071d2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80071da:	2d00      	cmp	r5, #0
 80071dc:	f000 8107 	beq.w	80073ee <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80071e0:	fab5 f585 	clz	r5, r5
 80071e4:	2601      	movs	r6, #1
 80071e6:	3501      	adds	r5, #1
 80071e8:	f005 051f 	and.w	r5, r5, #31
 80071ec:	fa06 f505 	lsl.w	r5, r6, r5
 80071f0:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f2:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80071f6:	2c00      	cmp	r4, #0
 80071f8:	f000 80f7 	beq.w	80073ea <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 80071fc:	fab4 f484 	clz	r4, r4
 8007200:	f06f 061d 	mvn.w	r6, #29
 8007204:	1c60      	adds	r0, r4, #1
 8007206:	f000 041f 	and.w	r4, r0, #31
 800720a:	2003      	movs	r0, #3
 800720c:	fb10 6004 	smlabb	r0, r0, r4, r6
 8007210:	0500      	lsls	r0, r0, #20
 8007212:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007216:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
 8007218:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800721a:	f102 0514 	add.w	r5, r2, #20
 800721e:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8007220:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007224:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8007228:	fa04 f700 	lsl.w	r7, r4, r0
 800722c:	5974      	ldr	r4, [r6, r5]
 800722e:	ea24 0407 	bic.w	r4, r4, r7
 8007232:	688f      	ldr	r7, [r1, #8]
 8007234:	fa07 f000 	lsl.w	r0, r7, r0
 8007238:	4320      	orrs	r0, r4
 800723a:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800723c:	680c      	ldr	r4, [r1, #0]
}
 800723e:	e762      	b.n	8007106 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8007240:	2002      	movs	r0, #2
}
 8007242:	b003      	add	sp, #12
 8007244:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007246:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8007248:	680c      	ldr	r4, [r1, #0]
 800724a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800724e:	06a5      	lsls	r5, r4, #26
 8007250:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
 8007254:	d030      	beq.n	80072b8 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007256:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8007258:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800725c:	4285      	cmp	r5, r0
 800725e:	d026      	beq.n	80072ae <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007260:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8007262:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007266:	4285      	cmp	r5, r0
 8007268:	d02b      	beq.n	80072c2 <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800726a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800726c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007270:	4285      	cmp	r5, r0
 8007272:	f47f af32 	bne.w	80070da <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007276:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8007278:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800727c:	66d0      	str	r0, [r2, #108]	; 0x6c
 800727e:	e72c      	b.n	80070da <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007280:	0876      	lsrs	r6, r6, #1
 8007282:	6948      	ldr	r0, [r1, #20]
 8007284:	f006 0608 	and.w	r6, r6, #8
 8007288:	fa00 f606 	lsl.w	r6, r0, r6
 800728c:	e6f7      	b.n	800707e <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800728e:	0ea4      	lsrs	r4, r4, #26
 8007290:	3401      	adds	r4, #1
 8007292:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007296:	2e09      	cmp	r6, #9
 8007298:	d82d      	bhi.n	80072f6 <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800729a:	06a5      	lsls	r5, r4, #26
 800729c:	2001      	movs	r0, #1
 800729e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80072a2:	40b0      	lsls	r0, r6
 80072a4:	4305      	orrs	r5, r0
 80072a6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80072aa:	0500      	lsls	r0, r0, #20
 80072ac:	e7b3      	b.n	8007216 <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80072ae:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80072b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80072b4:	6650      	str	r0, [r2, #100]	; 0x64
 80072b6:	e7d3      	b.n	8007260 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80072b8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80072ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80072be:	6610      	str	r0, [r2, #96]	; 0x60
 80072c0:	e7c9      	b.n	8007256 <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80072c2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80072c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80072c8:	6690      	str	r0, [r2, #104]	; 0x68
 80072ca:	e7ce      	b.n	800726a <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80072cc:	4814      	ldr	r0, [pc, #80]	; (8007320 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80072ce:	4d1a      	ldr	r5, [pc, #104]	; (8007338 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80072d0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80072d4:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80072d6:	f850 6cf8 	ldr.w	r6, [r0, #-248]
 80072da:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072dc:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80072de:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
 80072e2:	43c0      	mvns	r0, r0
 80072e4:	f000 0001 	and.w	r0, r0, #1
 80072e8:	e737      	b.n	800715a <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80072ec:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072ee:	f042 0220 	orr.w	r2, r2, #32
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 80072f4:	e70f      	b.n	8007116 <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80072f6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80072fa:	06a5      	lsls	r5, r4, #26
 80072fc:	2401      	movs	r4, #1
 80072fe:	381e      	subs	r0, #30
 8007300:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8007304:	fa04 f606 	lsl.w	r6, r4, r6
 8007308:	0500      	lsls	r0, r0, #20
 800730a:	4335      	orrs	r5, r6
 800730c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8007310:	e781      	b.n	8007216 <HAL_ADC_ConfigChannel+0x25e>
 8007312:	bf00      	nop
 8007314:	5c001000 	.word	0x5c001000
 8007318:	000fffff 	.word	0x000fffff
 800731c:	47ff0000 	.word	0x47ff0000
 8007320:	40022000 	.word	0x40022000
 8007324:	58026300 	.word	0x58026300
 8007328:	58026000 	.word	0x58026000
 800732c:	cb840000 	.word	0xcb840000
 8007330:	c7520000 	.word	0xc7520000
 8007334:	cfb80000 	.word	0xcfb80000
 8007338:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800733c:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8007340:	2800      	cmp	r0, #0
 8007342:	d05e      	beq.n	8007402 <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
 8007344:	fab0 f080 	clz	r0, r0
 8007348:	3001      	adds	r0, #1
 800734a:	0680      	lsls	r0, r0, #26
 800734c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007350:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8007354:	2d00      	cmp	r5, #0
 8007356:	d052      	beq.n	80073fe <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8007358:	fab5 f585 	clz	r5, r5
 800735c:	2601      	movs	r6, #1
 800735e:	3501      	adds	r5, #1
 8007360:	f005 051f 	and.w	r5, r5, #31
 8007364:	fa06 f505 	lsl.w	r5, r6, r5
 8007368:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800736e:	2c00      	cmp	r4, #0
 8007370:	d042      	beq.n	80073f8 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8007372:	fab4 f484 	clz	r4, r4
 8007376:	3401      	adds	r4, #1
 8007378:	f004 041f 	and.w	r4, r4, #31
 800737c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8007380:	0520      	lsls	r0, r4, #20
 8007382:	e748      	b.n	8007216 <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007384:	0208      	lsls	r0, r1, #8
 8007386:	f53f aec0 	bmi.w	800710a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800738a:	491f      	ldr	r1, [pc, #124]	; (8007408 <HAL_ADC_ConfigChannel+0x450>)
 800738c:	428a      	cmp	r2, r1
 800738e:	f47f aebc 	bne.w	800710a <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007392:	4a1e      	ldr	r2, [pc, #120]	; (800740c <HAL_ADC_ConfigChannel+0x454>)
 8007394:	481e      	ldr	r0, [pc, #120]	; (8007410 <HAL_ADC_ConfigChannel+0x458>)
 8007396:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007398:	68a9      	ldr	r1, [r5, #8]
 800739a:	0992      	lsrs	r2, r2, #6
 800739c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80073a0:	fba0 0202 	umull	r0, r2, r0, r2
 80073a4:	4331      	orrs	r1, r6
 80073a6:	0992      	lsrs	r2, r2, #6
 80073a8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80073ac:	3201      	adds	r2, #1
 80073ae:	60a9      	str	r1, [r5, #8]
 80073b0:	0052      	lsls	r2, r2, #1
 80073b2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80073b4:	9a01      	ldr	r2, [sp, #4]
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	f43f aea7 	beq.w	800710a <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
 80073bc:	9a01      	ldr	r2, [sp, #4]
 80073be:	3a01      	subs	r2, #1
 80073c0:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80073c2:	9a01      	ldr	r2, [sp, #4]
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	d1f9      	bne.n	80073bc <HAL_ADC_ConfigChannel+0x404>
 80073c8:	e69f      	b.n	800710a <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073ca:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
 80073ce:	f47f ae9c 	bne.w	800710a <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073d2:	490d      	ldr	r1, [pc, #52]	; (8007408 <HAL_ADC_ConfigChannel+0x450>)
 80073d4:	428a      	cmp	r2, r1
 80073d6:	f47f ae98 	bne.w	800710a <HAL_ADC_ConfigChannel+0x152>
 80073da:	68aa      	ldr	r2, [r5, #8]
 80073dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80073e0:	4332      	orrs	r2, r6
 80073e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80073e6:	60aa      	str	r2, [r5, #8]
}
 80073e8:	e695      	b.n	8007116 <HAL_ADC_ConfigChannel+0x15e>
 80073ea:	480a      	ldr	r0, [pc, #40]	; (8007414 <HAL_ADC_ConfigChannel+0x45c>)
 80073ec:	e713      	b.n	8007216 <HAL_ADC_ConfigChannel+0x25e>
 80073ee:	2502      	movs	r5, #2
 80073f0:	e6fe      	b.n	80071f0 <HAL_ADC_ConfigChannel+0x238>
 80073f2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80073f6:	e6ee      	b.n	80071d6 <HAL_ADC_ConfigChannel+0x21e>
 80073f8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80073fc:	e70b      	b.n	8007216 <HAL_ADC_ConfigChannel+0x25e>
 80073fe:	2502      	movs	r5, #2
 8007400:	e7b2      	b.n	8007368 <HAL_ADC_ConfigChannel+0x3b0>
 8007402:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007406:	e7a3      	b.n	8007350 <HAL_ADC_ConfigChannel+0x398>
 8007408:	58026000 	.word	0x58026000
 800740c:	24000310 	.word	0x24000310
 8007410:	053e2d63 	.word	0x053e2d63
 8007414:	fe500000 	.word	0xfe500000

08007418 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8007418:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 800741c:	4603      	mov	r3, r0
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800741e:	6848      	ldr	r0, [r1, #4]
  __HAL_LOCK(hadc);
 8007420:	2a01      	cmp	r2, #1
 8007422:	f000 80f3 	beq.w	800760c <HAL_ADC_AnalogWDGConfig+0x1f4>
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007426:	681a      	ldr	r2, [r3, #0]
{
 8007428:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 800742a:	2401      	movs	r4, #1
 800742c:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007430:	6894      	ldr	r4, [r2, #8]
 8007432:	0765      	lsls	r5, r4, #29
 8007434:	d428      	bmi.n	8007488 <HAL_ADC_AnalogWDGConfig+0x70>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007436:	6894      	ldr	r4, [r2, #8]
 8007438:	0724      	lsls	r4, r4, #28
 800743a:	d426      	bmi.n	800748a <HAL_ADC_AnalogWDGConfig+0x72>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800743c:	680c      	ldr	r4, [r1, #0]
 800743e:	4db8      	ldr	r5, [pc, #736]	; (8007720 <HAL_ADC_AnalogWDGConfig+0x308>)
 8007440:	42ac      	cmp	r4, r5
 8007442:	f000 80a0 	beq.w	8007586 <HAL_ADC_AnalogWDGConfig+0x16e>
      switch (AnalogWDGConfig->WatchdogMode)
 8007446:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 800744a:	d02e      	beq.n	80074aa <HAL_ADC_AnalogWDGConfig+0x92>
 800744c:	d827      	bhi.n	800749e <HAL_ADC_AnalogWDGConfig+0x86>
 800744e:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007452:	d02a      	beq.n	80074aa <HAL_ADC_AnalogWDGConfig+0x92>
 8007454:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007458:	d027      	beq.n	80074aa <HAL_ADC_AnalogWDGConfig+0x92>
 800745a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800745e:	d024      	beq.n	80074aa <HAL_ADC_AnalogWDGConfig+0x92>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007460:	f004 0001 	and.w	r0, r4, #1
 8007464:	f3c4 5501 	ubfx	r5, r4, #20, #2
  MODIFY_REG(*preg,
 8007468:	4eae      	ldr	r6, [pc, #696]	; (8007724 <HAL_ADC_AnalogWDGConfig+0x30c>)
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800746a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  MODIFY_REG(*preg,
 800746e:	4026      	ands	r6, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8007470:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8007474:	f102 000c 	add.w	r0, r2, #12
  MODIFY_REG(*preg,
 8007478:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 800747c:	ea24 0406 	bic.w	r4, r4, r6
 8007480:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007484:	680c      	ldr	r4, [r1, #0]
}
 8007486:	e023      	b.n	80074d0 <HAL_ADC_AnalogWDGConfig+0xb8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007488:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800748a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800748c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800748e:	f042 0220 	orr.w	r2, r2, #32
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800749a:	bc70      	pop	{r4, r5, r6}
 800749c:	4770      	bx	lr
      switch (AnalogWDGConfig->WatchdogMode)
 800749e:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80074a2:	d002      	beq.n	80074aa <HAL_ADC_AnalogWDGConfig+0x92>
 80074a4:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80074a8:	d1da      	bne.n	8007460 <HAL_ADC_AnalogWDGConfig+0x48>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80074aa:	489f      	ldr	r0, [pc, #636]	; (8007728 <HAL_ADC_AnalogWDGConfig+0x310>)
 80074ac:	4284      	cmp	r4, r0
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80074ae:	6888      	ldr	r0, [r1, #8]
 80074b0:	f3c0 0513 	ubfx	r5, r0, #0, #20
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80074b4:	f000 80cb 	beq.w	800764e <HAL_ADC_AnalogWDGConfig+0x236>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	f040 80df 	bne.w	800767c <HAL_ADC_AnalogWDGConfig+0x264>
 80074be:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80074c2:	2501      	movs	r5, #1
 80074c4:	4085      	lsls	r5, r0
 80074c6:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 80074ca:	4328      	orrs	r0, r5
 80074cc:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80074d0:	4896      	ldr	r0, [pc, #600]	; (800772c <HAL_ADC_AnalogWDGConfig+0x314>)
 80074d2:	6800      	ldr	r0, [r0, #0]
 80074d4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80074d8:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80074dc:	68d0      	ldr	r0, [r2, #12]
 80074de:	d04b      	beq.n	8007578 <HAL_ADC_AnalogWDGConfig+0x160>
 80074e0:	f010 0f10 	tst.w	r0, #16
 80074e4:	68d0      	ldr	r0, [r2, #12]
 80074e6:	d047      	beq.n	8007578 <HAL_ADC_AnalogWDGConfig+0x160>
 80074e8:	0840      	lsrs	r0, r0, #1
 80074ea:	690d      	ldr	r5, [r1, #16]
 80074ec:	f000 0008 	and.w	r0, r0, #8
 80074f0:	fa05 f000 	lsl.w	r0, r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80074f4:	4d8d      	ldr	r5, [pc, #564]	; (800772c <HAL_ADC_AnalogWDGConfig+0x314>)
 80074f6:	682d      	ldr	r5, [r5, #0]
 80074f8:	f005 4c70 	and.w	ip, r5, #4026531840	; 0xf0000000
 80074fc:	68d5      	ldr	r5, [r2, #12]
 80074fe:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8007502:	d031      	beq.n	8007568 <HAL_ADC_AnalogWDGConfig+0x150>
 8007504:	f015 0f10 	tst.w	r5, #16
 8007508:	68d5      	ldr	r5, [r2, #12]
 800750a:	d02d      	beq.n	8007568 <HAL_ADC_AnalogWDGConfig+0x150>
 800750c:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8007510:	694d      	ldr	r5, [r1, #20]
 8007512:	f00c 0c08 	and.w	ip, ip, #8
 8007516:	fa05 fc0c 	lsl.w	ip, r5, ip
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800751a:	4d83      	ldr	r5, [pc, #524]	; (8007728 <HAL_ADC_AnalogWDGConfig+0x310>)
 800751c:	42ac      	cmp	r4, r5
 800751e:	d077      	beq.n	8007610 <HAL_ADC_AnalogWDGConfig+0x1f8>
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007520:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 8007524:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007528:	ea44 040c 	orr.w	r4, r4, ip
 800752c:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007530:	f8d2 40bc 	ldr.w	r4, [r2, #188]	; 0xbc
 8007534:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007538:	4320      	orrs	r0, r4
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800753a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800753e:	f8c2 00bc 	str.w	r0, [r2, #188]	; 0xbc
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007542:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007544:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8007548:	6558      	str	r0, [r3, #84]	; 0x54
 800754a:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 800754c:	7b09      	ldrb	r1, [r1, #12]
 800754e:	2901      	cmp	r1, #1
 8007550:	f000 808e 	beq.w	8007670 <HAL_ADC_AnalogWDGConfig+0x258>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007554:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007556:	2000      	movs	r0, #0
 8007558:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800755c:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8007564:	bc70      	pop	{r4, r5, r6}
 8007566:	4770      	bx	lr
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007568:	f3c5 0c82 	ubfx	ip, r5, #2, #3
 800756c:	694d      	ldr	r5, [r1, #20]
 800756e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007572:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007576:	e7d0      	b.n	800751a <HAL_ADC_AnalogWDGConfig+0x102>
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007578:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800757c:	690d      	ldr	r5, [r1, #16]
 800757e:	0040      	lsls	r0, r0, #1
 8007580:	fa05 f000 	lsl.w	r0, r5, r0
 8007584:	e7b6      	b.n	80074f4 <HAL_ADC_AnalogWDGConfig+0xdc>
      switch (AnalogWDGConfig->WatchdogMode)
 8007586:	f1b0 7fa0 	cmp.w	r0, #20971520	; 0x1400000
 800758a:	f000 80f0 	beq.w	800776e <HAL_ADC_AnalogWDGConfig+0x356>
 800758e:	d82a      	bhi.n	80075e6 <HAL_ADC_AnalogWDGConfig+0x1ce>
 8007590:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 8007594:	f000 80e0 	beq.w	8007758 <HAL_ADC_AnalogWDGConfig+0x340>
 8007598:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800759c:	d118      	bne.n	80075d0 <HAL_ADC_AnalogWDGConfig+0x1b8>
  MODIFY_REG(*preg,
 800759e:	68d4      	ldr	r4, [r2, #12]
 80075a0:	4863      	ldr	r0, [pc, #396]	; (8007730 <HAL_ADC_AnalogWDGConfig+0x318>)
 80075a2:	4020      	ands	r0, r4
 80075a4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 80075a8:	60d0      	str	r0, [r2, #12]
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80075aa:	4860      	ldr	r0, [pc, #384]	; (800772c <HAL_ADC_AnalogWDGConfig+0x314>)
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80075b2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80075b6:	68d0      	ldr	r0, [r2, #12]
 80075b8:	d069      	beq.n	800768e <HAL_ADC_AnalogWDGConfig+0x276>
 80075ba:	f010 0f10 	tst.w	r0, #16
 80075be:	690d      	ldr	r5, [r1, #16]
 80075c0:	68d0      	ldr	r0, [r2, #12]
 80075c2:	f040 8099 	bne.w	80076f8 <HAL_ADC_AnalogWDGConfig+0x2e0>
 80075c6:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80075ca:	0040      	lsls	r0, r0, #1
 80075cc:	4085      	lsls	r5, r0
 80075ce:	e063      	b.n	8007698 <HAL_ADC_AnalogWDGConfig+0x280>
      switch (AnalogWDGConfig->WatchdogMode)
 80075d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80075d4:	f040 80b4 	bne.w	8007740 <HAL_ADC_AnalogWDGConfig+0x328>
 80075d8:	68d4      	ldr	r4, [r2, #12]
 80075da:	4855      	ldr	r0, [pc, #340]	; (8007730 <HAL_ADC_AnalogWDGConfig+0x318>)
 80075dc:	4020      	ands	r0, r4
 80075de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80075e2:	60d0      	str	r0, [r2, #12]
}
 80075e4:	e7e1      	b.n	80075aa <HAL_ADC_AnalogWDGConfig+0x192>
 80075e6:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80075ea:	f000 80ae 	beq.w	800774a <HAL_ADC_AnalogWDGConfig+0x332>
 80075ee:	f1b0 7fe0 	cmp.w	r0, #29360128	; 0x1c00000
 80075f2:	f040 80a5 	bne.w	8007740 <HAL_ADC_AnalogWDGConfig+0x328>
  MODIFY_REG(*preg,
 80075f6:	68d5      	ldr	r5, [r2, #12]
 80075f8:	6888      	ldr	r0, [r1, #8]
 80075fa:	4c4d      	ldr	r4, [pc, #308]	; (8007730 <HAL_ADC_AnalogWDGConfig+0x318>)
 80075fc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007600:	402c      	ands	r4, r5
 8007602:	4320      	orrs	r0, r4
 8007604:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
 8007608:	60d0      	str	r0, [r2, #12]
}
 800760a:	e7ce      	b.n	80075aa <HAL_ADC_AnalogWDGConfig+0x192>
  __HAL_LOCK(hadc);
 800760c:	2002      	movs	r0, #2
}
 800760e:	4770      	bx	lr
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007610:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8007614:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007618:	ea44 040c 	orr.w	r4, r4, ip
 800761c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007620:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
 8007624:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 8007628:	4320      	orrs	r0, r4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800762a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800762e:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007632:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007634:	f420 3000 	bic.w	r0, r0, #131072	; 0x20000
 8007638:	6558      	str	r0, [r3, #84]	; 0x54
 800763a:	6014      	str	r4, [r2, #0]
        if (AnalogWDGConfig->ITMode == ENABLE)
 800763c:	7b09      	ldrb	r1, [r1, #12]
 800763e:	2901      	cmp	r1, #1
 8007640:	d078      	beq.n	8007734 <HAL_ADC_AnalogWDGConfig+0x31c>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007642:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007644:	2000      	movs	r0, #0
 8007646:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800764a:	6051      	str	r1, [r2, #4]
}
 800764c:	e722      	b.n	8007494 <HAL_ADC_AnalogWDGConfig+0x7c>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800764e:	2d00      	cmp	r5, #0
 8007650:	d05e      	beq.n	8007710 <HAL_ADC_AnalogWDGConfig+0x2f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007652:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007656:	2800      	cmp	r0, #0
 8007658:	f000 8094 	beq.w	8007784 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 800765c:	fab0 f080 	clz	r0, r0
 8007660:	2501      	movs	r5, #1
 8007662:	4085      	lsls	r5, r0
 8007664:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8007668:	4328      	orrs	r0, r5
 800766a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
 800766e:	e72f      	b.n	80074d0 <HAL_ADC_AnalogWDGConfig+0xb8>
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007670:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007672:	2000      	movs	r0, #0
 8007674:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007678:	6051      	str	r1, [r2, #4]
}
 800767a:	e70b      	b.n	8007494 <HAL_ADC_AnalogWDGConfig+0x7c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8007680:	2800      	cmp	r0, #0
 8007682:	d04a      	beq.n	800771a <HAL_ADC_AnalogWDGConfig+0x302>
  return __builtin_clz(value);
 8007684:	fab0 f080 	clz	r0, r0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007688:	2501      	movs	r5, #1
 800768a:	4085      	lsls	r5, r0
 800768c:	e71b      	b.n	80074c6 <HAL_ADC_AnalogWDGConfig+0xae>
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800768e:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8007692:	690d      	ldr	r5, [r1, #16]
 8007694:	0040      	lsls	r0, r0, #1
 8007696:	4085      	lsls	r5, r0
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007698:	4824      	ldr	r0, [pc, #144]	; (800772c <HAL_ADC_AnalogWDGConfig+0x314>)
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80076a0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80076a4:	68d0      	ldr	r0, [r2, #12]
 80076a6:	d003      	beq.n	80076b0 <HAL_ADC_AnalogWDGConfig+0x298>
 80076a8:	f010 0f10 	tst.w	r0, #16
 80076ac:	68d0      	ldr	r0, [r2, #12]
 80076ae:	d128      	bne.n	8007702 <HAL_ADC_AnalogWDGConfig+0x2ea>
 80076b0:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80076b4:	694c      	ldr	r4, [r1, #20]
 80076b6:	0040      	lsls	r0, r0, #1
 80076b8:	fa04 f000 	lsl.w	r0, r4, r0
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80076bc:	6a14      	ldr	r4, [r2, #32]
 80076be:	f004 447c 	and.w	r4, r4, #4227858432	; 0xfc000000
 80076c2:	4304      	orrs	r4, r0
 80076c4:	6214      	str	r4, [r2, #32]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80076c6:	2480      	movs	r4, #128	; 0x80
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80076c8:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80076ca:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
 80076ce:	4328      	orrs	r0, r5
 80076d0:	6250      	str	r0, [r2, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80076d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80076d4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80076d8:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076da:	2000      	movs	r0, #0
 80076dc:	6014      	str	r4, [r2, #0]
      if (AnalogWDGConfig->ITMode == ENABLE)
 80076de:	7b09      	ldrb	r1, [r1, #12]
 80076e0:	2901      	cmp	r1, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80076e2:	6851      	ldr	r1, [r2, #4]
 80076e4:	bf0c      	ite	eq
 80076e6:	4321      	orreq	r1, r4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80076e8:	f021 0180 	bicne.w	r1, r1, #128	; 0x80
 80076ec:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hadc);
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80076f4:	bc70      	pop	{r4, r5, r6}
 80076f6:	4770      	bx	lr
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80076f8:	0840      	lsrs	r0, r0, #1
 80076fa:	f000 0008 	and.w	r0, r0, #8
 80076fe:	4085      	lsls	r5, r0
 8007700:	e7ca      	b.n	8007698 <HAL_ADC_AnalogWDGConfig+0x280>
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007702:	0840      	lsrs	r0, r0, #1
 8007704:	694c      	ldr	r4, [r1, #20]
 8007706:	f000 0008 	and.w	r0, r0, #8
 800770a:	fa04 f000 	lsl.w	r0, r4, r0
 800770e:	e7d5      	b.n	80076bc <HAL_ADC_AnalogWDGConfig+0x2a4>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007710:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8007714:	2501      	movs	r5, #1
 8007716:	4085      	lsls	r5, r0
 8007718:	e7a4      	b.n	8007664 <HAL_ADC_AnalogWDGConfig+0x24c>
 800771a:	2501      	movs	r5, #1
 800771c:	e6d3      	b.n	80074c6 <HAL_ADC_AnalogWDGConfig+0xae>
 800771e:	bf00      	nop
 8007720:	7dc00000 	.word	0x7dc00000
 8007724:	7dcfffff 	.word	0x7dcfffff
 8007728:	001fffff 	.word	0x001fffff
 800772c:	5c001000 	.word	0x5c001000
 8007730:	823fffff 	.word	0x823fffff
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007734:	6851      	ldr	r1, [r2, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007736:	2000      	movs	r0, #0
 8007738:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800773c:	6051      	str	r1, [r2, #4]
}
 800773e:	e6a9      	b.n	8007494 <HAL_ADC_AnalogWDGConfig+0x7c>
  MODIFY_REG(*preg,
 8007740:	68d4      	ldr	r4, [r2, #12]
 8007742:	4811      	ldr	r0, [pc, #68]	; (8007788 <HAL_ADC_AnalogWDGConfig+0x370>)
 8007744:	4020      	ands	r0, r4
 8007746:	60d0      	str	r0, [r2, #12]
}
 8007748:	e72f      	b.n	80075aa <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800774a:	68d4      	ldr	r4, [r2, #12]
 800774c:	480e      	ldr	r0, [pc, #56]	; (8007788 <HAL_ADC_AnalogWDGConfig+0x370>)
 800774e:	4020      	ands	r0, r4
 8007750:	f040 70c0 	orr.w	r0, r0, #25165824	; 0x1800000
 8007754:	60d0      	str	r0, [r2, #12]
}
 8007756:	e728      	b.n	80075aa <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 8007758:	68d5      	ldr	r5, [r2, #12]
 800775a:	6888      	ldr	r0, [r1, #8]
 800775c:	4c0a      	ldr	r4, [pc, #40]	; (8007788 <HAL_ADC_AnalogWDGConfig+0x370>)
 800775e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007762:	402c      	ands	r4, r5
 8007764:	4320      	orrs	r0, r4
 8007766:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800776a:	60d0      	str	r0, [r2, #12]
}
 800776c:	e71d      	b.n	80075aa <HAL_ADC_AnalogWDGConfig+0x192>
  MODIFY_REG(*preg,
 800776e:	68d5      	ldr	r5, [r2, #12]
 8007770:	6888      	ldr	r0, [r1, #8]
 8007772:	4c05      	ldr	r4, [pc, #20]	; (8007788 <HAL_ADC_AnalogWDGConfig+0x370>)
 8007774:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8007778:	402c      	ands	r4, r5
 800777a:	4320      	orrs	r0, r4
 800777c:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
 8007780:	60d0      	str	r0, [r2, #12]
}
 8007782:	e712      	b.n	80075aa <HAL_ADC_AnalogWDGConfig+0x192>
 8007784:	2501      	movs	r5, #1
 8007786:	e76d      	b.n	8007664 <HAL_ADC_AnalogWDGConfig+0x24c>
 8007788:	823fffff 	.word	0x823fffff

0800778c <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800778c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007794:	689a      	ldr	r2, [r3, #8]
{
 8007796:	b570      	push	{r4, r5, r6, lr}
 8007798:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800779a:	d103      	bne.n	80077a4 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800779c:	0712      	lsls	r2, r2, #28
 800779e:	d401      	bmi.n	80077a4 <ADC_ConversionStop+0x18>
  return HAL_OK;
 80077a0:	2000      	movs	r0, #0
}
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	0196      	lsls	r6, r2, #6
 80077a8:	d504      	bpl.n	80077b4 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80077aa:	8aa0      	ldrh	r0, [r4, #20]
 80077ac:	f240 1201 	movw	r2, #257	; 0x101
 80077b0:	4290      	cmp	r0, r2
 80077b2:	d01a      	beq.n	80077ea <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80077b4:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	d040      	beq.n	800783c <ADC_ConversionStop+0xb0>
 80077ba:	0756      	lsls	r6, r2, #29
 80077bc:	d508      	bpl.n	80077d0 <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	0790      	lsls	r0, r2, #30
 80077c2:	d405      	bmi.n	80077d0 <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
 80077c4:	6898      	ldr	r0, [r3, #8]
 80077c6:	4a2d      	ldr	r2, [pc, #180]	; (800787c <ADC_ConversionStop+0xf0>)
 80077c8:	4002      	ands	r2, r0
 80077ca:	f042 0210 	orr.w	r2, r2, #16
 80077ce:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80077d0:	2901      	cmp	r1, #1
 80077d2:	d019      	beq.n	8007808 <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	0712      	lsls	r2, r2, #28
 80077d8:	d502      	bpl.n	80077e0 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	0790      	lsls	r0, r2, #30
 80077de:	d534      	bpl.n	800784a <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80077e0:	2903      	cmp	r1, #3
 80077e2:	bf14      	ite	ne
 80077e4:	2504      	movne	r5, #4
 80077e6:	250c      	moveq	r5, #12
 80077e8:	e00f      	b.n	800780a <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	0650      	lsls	r0, r2, #25
 80077ee:	d406      	bmi.n	80077fe <ADC_ConversionStop+0x72>
 80077f0:	4a23      	ldr	r2, [pc, #140]	; (8007880 <ADC_ConversionStop+0xf4>)
 80077f2:	e001      	b.n	80077f8 <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80077f4:	3a01      	subs	r2, #1
 80077f6:	d018      	beq.n	800782a <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80077f8:	6819      	ldr	r1, [r3, #0]
 80077fa:	0649      	lsls	r1, r1, #25
 80077fc:	d5fa      	bpl.n	80077f4 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80077fe:	2240      	movs	r2, #64	; 0x40
 8007800:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	0752      	lsls	r2, r2, #29
 8007806:	d427      	bmi.n	8007858 <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007808:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800780a:	f7ff f9ff 	bl	8006c0c <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800780e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007810:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	421d      	tst	r5, r3
 8007816:	d0c3      	beq.n	80077a0 <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007818:	f7ff f9f8 	bl	8006c0c <HAL_GetTick>
 800781c:	1b83      	subs	r3, r0, r6
 800781e:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007820:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007822:	d9f6      	bls.n	8007812 <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	422a      	tst	r2, r5
 8007828:	d0f3      	beq.n	8007812 <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800782a:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800782c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800782e:	f043 0310 	orr.w	r3, r3, #16
 8007832:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007834:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007836:	4303      	orrs	r3, r0
 8007838:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800783a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800783c:	0715      	lsls	r5, r2, #28
 800783e:	d502      	bpl.n	8007846 <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	0792      	lsls	r2, r2, #30
 8007844:	d513      	bpl.n	800786e <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007846:	2508      	movs	r5, #8
        break;
 8007848:	e7df      	b.n	800780a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800784a:	6898      	ldr	r0, [r3, #8]
 800784c:	4a0b      	ldr	r2, [pc, #44]	; (800787c <ADC_ConversionStop+0xf0>)
 800784e:	4002      	ands	r2, r0
 8007850:	f042 0220 	orr.w	r2, r2, #32
 8007854:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8007856:	e7c3      	b.n	80077e0 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	0796      	lsls	r6, r2, #30
 800785c:	d4d4      	bmi.n	8007808 <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
 800785e:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007860:	2504      	movs	r5, #4
 8007862:	4a06      	ldr	r2, [pc, #24]	; (800787c <ADC_ConversionStop+0xf0>)
 8007864:	400a      	ands	r2, r1
 8007866:	f042 0210 	orr.w	r2, r2, #16
 800786a:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800786c:	e7cd      	b.n	800780a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800786e:	6899      	ldr	r1, [r3, #8]
 8007870:	4a02      	ldr	r2, [pc, #8]	; (800787c <ADC_ConversionStop+0xf0>)
 8007872:	400a      	ands	r2, r1
 8007874:	f042 0220 	orr.w	r2, r2, #32
 8007878:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 800787a:	e7e4      	b.n	8007846 <ADC_ConversionStop+0xba>
 800787c:	7fffffc0 	.word	0x7fffffc0
 8007880:	000cdc00 	.word	0x000cdc00

08007884 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007884:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	07d1      	lsls	r1, r2, #31
 800788a:	d501      	bpl.n	8007890 <ADC_Enable+0xc>
  return HAL_OK;
 800788c:	2000      	movs	r0, #0
}
 800788e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007890:	6899      	ldr	r1, [r3, #8]
 8007892:	4a21      	ldr	r2, [pc, #132]	; (8007918 <ADC_Enable+0x94>)
 8007894:	4211      	tst	r1, r2
{
 8007896:	b570      	push	{r4, r5, r6, lr}
 8007898:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800789a:	d12c      	bne.n	80078f6 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 800789c:	6899      	ldr	r1, [r3, #8]
 800789e:	4a1f      	ldr	r2, [pc, #124]	; (800791c <ADC_Enable+0x98>)
 80078a0:	400a      	ands	r2, r1
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80078a8:	f7ff f9b0 	bl	8006c0c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	4a1c      	ldr	r2, [pc, #112]	; (8007920 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 80078b0:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d028      	beq.n	8007908 <ADC_Enable+0x84>
 80078b6:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d024      	beq.n	8007908 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80078be:	4a19      	ldr	r2, [pc, #100]	; (8007924 <ADC_Enable+0xa0>)
 80078c0:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	07d6      	lsls	r6, r2, #31
 80078c6:	d414      	bmi.n	80078f2 <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 80078c8:	4e14      	ldr	r6, [pc, #80]	; (800791c <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078ca:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078cc:	07d0      	lsls	r0, r2, #31
 80078ce:	d404      	bmi.n	80078da <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	4032      	ands	r2, r6
 80078d4:	f042 0201 	orr.w	r2, r2, #1
 80078d8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80078da:	f7ff f997 	bl	8006c0c <HAL_GetTick>
 80078de:	1b43      	subs	r3, r0, r5
 80078e0:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078e2:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80078e4:	d902      	bls.n	80078ec <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	07d1      	lsls	r1, r2, #31
 80078ea:	d504      	bpl.n	80078f6 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	07d2      	lsls	r2, r2, #31
 80078f0:	d5eb      	bpl.n	80078ca <ADC_Enable+0x46>
  return HAL_OK;
 80078f2:	2000      	movs	r0, #0
}
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
 80078f8:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078fa:	f043 0310 	orr.w	r3, r3, #16
 80078fe:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007902:	4303      	orrs	r3, r0
 8007904:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007906:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007908:	4a07      	ldr	r2, [pc, #28]	; (8007928 <ADC_Enable+0xa4>)
 800790a:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800790c:	06d2      	lsls	r2, r2, #27
 800790e:	d0d8      	beq.n	80078c2 <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007910:	4a06      	ldr	r2, [pc, #24]	; (800792c <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007912:	4293      	cmp	r3, r2
 8007914:	d1d5      	bne.n	80078c2 <ADC_Enable+0x3e>
 8007916:	e7ec      	b.n	80078f2 <ADC_Enable+0x6e>
 8007918:	8000003f 	.word	0x8000003f
 800791c:	7fffffc0 	.word	0x7fffffc0
 8007920:	40022000 	.word	0x40022000
 8007924:	58026300 	.word	0x58026300
 8007928:	40022300 	.word	0x40022300
 800792c:	40022100 	.word	0x40022100

08007930 <ADC_Disable>:
{
 8007930:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007932:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	0795      	lsls	r5, r2, #30
 8007938:	d502      	bpl.n	8007940 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800793a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 800793c:	2000      	movs	r0, #0
}
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007942:	07d4      	lsls	r4, r2, #31
 8007944:	d529      	bpl.n	800799a <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	4604      	mov	r4, r0
 800794a:	f002 020d 	and.w	r2, r2, #13
 800794e:	2a01      	cmp	r2, #1
 8007950:	d008      	beq.n	8007964 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007952:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007954:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007956:	f043 0310 	orr.w	r3, r3, #16
 800795a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800795c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800795e:	4303      	orrs	r3, r0
 8007960:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8007962:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8007964:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007966:	2103      	movs	r1, #3
 8007968:	4a0d      	ldr	r2, [pc, #52]	; (80079a0 <ADC_Disable+0x70>)
 800796a:	4002      	ands	r2, r0
 800796c:	f042 0202 	orr.w	r2, r2, #2
 8007970:	609a      	str	r2, [r3, #8]
 8007972:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8007974:	f7ff f94a 	bl	8006c0c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007978:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800797a:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	07d9      	lsls	r1, r3, #31
 8007980:	d50b      	bpl.n	800799a <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007982:	f7ff f943 	bl	8006c0c <HAL_GetTick>
 8007986:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007988:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800798a:	2802      	cmp	r0, #2
 800798c:	d902      	bls.n	8007994 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	07d2      	lsls	r2, r2, #31
 8007992:	d4de      	bmi.n	8007952 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	07db      	lsls	r3, r3, #31
 8007998:	d4f3      	bmi.n	8007982 <ADC_Disable+0x52>
  return HAL_OK;
 800799a:	2000      	movs	r0, #0
}
 800799c:	bd38      	pop	{r3, r4, r5, pc}
 800799e:	bf00      	nop
 80079a0:	7fffffc0 	.word	0x7fffffc0

080079a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80079a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80079a6:	4a57      	ldr	r2, [pc, #348]	; (8007b04 <ADC_ConfigureBoostMode+0x160>)
{
 80079a8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80079aa:	6803      	ldr	r3, [r0, #0]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d026      	beq.n	80079fe <ADC_ConfigureBoostMode+0x5a>
 80079b0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d022      	beq.n	80079fe <ADC_ConfigureBoostMode+0x5a>
 80079b8:	4b53      	ldr	r3, [pc, #332]	; (8007b08 <ADC_ConfigureBoostMode+0x164>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80079c0:	d022      	beq.n	8007a08 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80079c2:	f004 f80d 	bl	800b9e0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80079c6:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80079c8:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80079ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ce:	f000 8088 	beq.w	8007ae2 <ADC_ConfigureBoostMode+0x13e>
 80079d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079d6:	d06c      	beq.n	8007ab2 <ADC_ConfigureBoostMode+0x10e>
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	f000 8081 	beq.w	8007ae2 <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80079e0:	f7ff f92c 	bl	8006c3c <HAL_GetREVID>
 80079e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80079e8:	4298      	cmp	r0, r3
 80079ea:	d84b      	bhi.n	8007a84 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 80079ec:	4b47      	ldr	r3, [pc, #284]	; (8007b0c <ADC_ConfigureBoostMode+0x168>)
 80079ee:	429d      	cmp	r5, r3
 80079f0:	d92a      	bls.n	8007a48 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	6893      	ldr	r3, [r2, #8]
 80079f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fa:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80079fc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80079fe:	4b44      	ldr	r3, [pc, #272]	; (8007b10 <ADC_ConfigureBoostMode+0x16c>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8007a06:	d1dc      	bne.n	80079c2 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007a08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	f005 f9bd 	bl	800cd8c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8007a12:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007a14:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8007a16:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007a1a:	d06c      	beq.n	8007af6 <ADC_ConfigureBoostMode+0x152>
 8007a1c:	d808      	bhi.n	8007a30 <ADC_ConfigureBoostMode+0x8c>
 8007a1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007a22:	d050      	beq.n	8007ac6 <ADC_ConfigureBoostMode+0x122>
 8007a24:	d916      	bls.n	8007a54 <ADC_ConfigureBoostMode+0xb0>
 8007a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a2a:	d1d9      	bne.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8007a2c:	0945      	lsrs	r5, r0, #5
        break;
 8007a2e:	e7d7      	b.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8007a30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007a34:	d045      	beq.n	8007ac2 <ADC_ConfigureBoostMode+0x11e>
 8007a36:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007a3a:	d1d1      	bne.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007a3c:	f7ff f8fe 	bl	8006c3c <HAL_GetREVID>
 8007a40:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a44:	4298      	cmp	r0, r3
 8007a46:	d840      	bhi.n	8007aca <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007a48:	6822      	ldr	r2, [r4, #0]
 8007a4a:	6893      	ldr	r3, [r2, #8]
 8007a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a50:	6093      	str	r3, [r2, #8]
}
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8007a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a58:	d006      	beq.n	8007a68 <ADC_ConfigureBoostMode+0xc4>
 8007a5a:	d90a      	bls.n	8007a72 <ADC_ConfigureBoostMode+0xce>
 8007a5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007a60:	d002      	beq.n	8007a68 <ADC_ConfigureBoostMode+0xc4>
 8007a62:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007a66:	d1bb      	bne.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007a68:	0c9b      	lsrs	r3, r3, #18
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8007a70:	e7b6      	b.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8007a72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a76:	d0f7      	beq.n	8007a68 <ADC_ConfigureBoostMode+0xc4>
 8007a78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a7c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007a80:	d0f2      	beq.n	8007a68 <ADC_ConfigureBoostMode+0xc4>
 8007a82:	e7ad      	b.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8007a84:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <ADC_ConfigureBoostMode+0x170>)
 8007a86:	429d      	cmp	r5, r3
 8007a88:	d805      	bhi.n	8007a96 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	6893      	ldr	r3, [r2, #8]
 8007a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a92:	6093      	str	r3, [r2, #8]
}
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8007a96:	4b20      	ldr	r3, [pc, #128]	; (8007b18 <ADC_ConfigureBoostMode+0x174>)
 8007a98:	429d      	cmp	r5, r3
 8007a9a:	d91a      	bls.n	8007ad2 <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
 8007a9c:	4b1f      	ldr	r3, [pc, #124]	; (8007b1c <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007a9e:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 8007aa0:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007aa2:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
 8007aa4:	d829      	bhi.n	8007afa <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007aae:	6093      	str	r3, [r2, #8]
}
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8007ab2:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007ab4:	f7ff f8c2 	bl	8006c3c <HAL_GetREVID>
 8007ab8:	f241 0303 	movw	r3, #4099	; 0x1003
 8007abc:	4298      	cmp	r0, r3
 8007abe:	d8e1      	bhi.n	8007a84 <ADC_ConfigureBoostMode+0xe0>
 8007ac0:	e794      	b.n	80079ec <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 8007ac2:	09c5      	lsrs	r5, r0, #7
        break;
 8007ac4:	e78c      	b.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8007ac6:	0905      	lsrs	r5, r0, #4
        break;
 8007ac8:	e78a      	b.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <ADC_ConfigureBoostMode+0x170>)
 8007acc:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8007ad0:	d2db      	bcs.n	8007a8a <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007ad2:	6822      	ldr	r2, [r4, #0]
 8007ad4:	6893      	ldr	r3, [r2, #8]
 8007ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ade:	6093      	str	r3, [r2, #8]
}
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007ae2:	0c1b      	lsrs	r3, r3, #16
 8007ae4:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007ae8:	f7ff f8a8 	bl	8006c3c <HAL_GetREVID>
 8007aec:	f241 0303 	movw	r3, #4099	; 0x1003
 8007af0:	4298      	cmp	r0, r3
 8007af2:	d8c7      	bhi.n	8007a84 <ADC_ConfigureBoostMode+0xe0>
 8007af4:	e77a      	b.n	80079ec <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 8007af6:	0985      	lsrs	r5, r0, #6
        break;
 8007af8:	e772      	b.n	80079e0 <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007afa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007afe:	6093      	str	r3, [r2, #8]
}
 8007b00:	bd38      	pop	{r3, r4, r5, pc}
 8007b02:	bf00      	nop
 8007b04:	40022000 	.word	0x40022000
 8007b08:	58026300 	.word	0x58026300
 8007b0c:	01312d00 	.word	0x01312d00
 8007b10:	40022300 	.word	0x40022300
 8007b14:	00bebc21 	.word	0x00bebc21
 8007b18:	017d7841 	.word	0x017d7841
 8007b1c:	02faf081 	.word	0x02faf081

08007b20 <HAL_ADC_Init>:
{
 8007b20:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8007b22:	2300      	movs	r3, #0
{
 8007b24:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8007b26:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f000 80d1 	beq.w	8007cd0 <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b2e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8007b30:	4604      	mov	r4, r0
 8007b32:	2d00      	cmp	r5, #0
 8007b34:	f000 80bb 	beq.w	8007cae <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007b38:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007b3a:	6893      	ldr	r3, [r2, #8]
 8007b3c:	009d      	lsls	r5, r3, #2
 8007b3e:	d503      	bpl.n	8007b48 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007b40:	6891      	ldr	r1, [r2, #8]
 8007b42:	4b72      	ldr	r3, [pc, #456]	; (8007d0c <HAL_ADC_Init+0x1ec>)
 8007b44:	400b      	ands	r3, r1
 8007b46:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b48:	6893      	ldr	r3, [r2, #8]
 8007b4a:	00d8      	lsls	r0, r3, #3
 8007b4c:	d416      	bmi.n	8007b7c <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b4e:	4b70      	ldr	r3, [pc, #448]	; (8007d10 <HAL_ADC_Init+0x1f0>)
 8007b50:	4970      	ldr	r1, [pc, #448]	; (8007d14 <HAL_ADC_Init+0x1f4>)
 8007b52:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8007b54:	6890      	ldr	r0, [r2, #8]
 8007b56:	099b      	lsrs	r3, r3, #6
 8007b58:	fba1 1303 	umull	r1, r3, r1, r3
 8007b5c:	496e      	ldr	r1, [pc, #440]	; (8007d18 <HAL_ADC_Init+0x1f8>)
 8007b5e:	099b      	lsrs	r3, r3, #6
 8007b60:	4001      	ands	r1, r0
 8007b62:	3301      	adds	r3, #1
 8007b64:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007b68:	6091      	str	r1, [r2, #8]
 8007b6a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	b12b      	cbz	r3, 8007b7c <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8007b70:	9b01      	ldr	r3, [sp, #4]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f9      	bne.n	8007b70 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b7c:	6893      	ldr	r3, [r2, #8]
 8007b7e:	00d9      	lsls	r1, r3, #3
 8007b80:	d424      	bmi.n	8007bcc <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007b84:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b86:	f043 0310 	orr.w	r3, r3, #16
 8007b8a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b8e:	432b      	orrs	r3, r5
 8007b90:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b92:	6893      	ldr	r3, [r2, #8]
 8007b94:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007b9a:	d11d      	bne.n	8007bd8 <HAL_ADC_Init+0xb8>
 8007b9c:	06db      	lsls	r3, r3, #27
 8007b9e:	d41b      	bmi.n	8007bd8 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
 8007ba0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007ba2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007ba6:	f043 0302 	orr.w	r3, r3, #2
 8007baa:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007bac:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bae:	07de      	lsls	r6, r3, #31
 8007bb0:	d428      	bmi.n	8007c04 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007bb2:	4b5a      	ldr	r3, [pc, #360]	; (8007d1c <HAL_ADC_Init+0x1fc>)
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d017      	beq.n	8007be8 <HAL_ADC_Init+0xc8>
 8007bb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d013      	beq.n	8007be8 <HAL_ADC_Init+0xc8>
 8007bc0:	4b57      	ldr	r3, [pc, #348]	; (8007d20 <HAL_ADC_Init+0x200>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	07d9      	lsls	r1, r3, #31
 8007bc6:	d41d      	bmi.n	8007c04 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007bc8:	4a56      	ldr	r2, [pc, #344]	; (8007d24 <HAL_ADC_Init+0x204>)
 8007bca:	e015      	b.n	8007bf8 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007bcc:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007bce:	2500      	movs	r5, #0
 8007bd0:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007bd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007bd6:	d0e1      	beq.n	8007b9c <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8007bda:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bdc:	f043 0310 	orr.w	r3, r3, #16
}
 8007be0:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007be2:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007be4:	b002      	add	sp, #8
 8007be6:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007be8:	4a4c      	ldr	r2, [pc, #304]	; (8007d1c <HAL_ADC_Init+0x1fc>)
 8007bea:	4b4f      	ldr	r3, [pc, #316]	; (8007d28 <HAL_ADC_Init+0x208>)
 8007bec:	6892      	ldr	r2, [r2, #8]
 8007bee:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	07d8      	lsls	r0, r3, #31
 8007bf4:	d406      	bmi.n	8007c04 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007bf6:	4a4d      	ldr	r2, [pc, #308]	; (8007d2c <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007bf8:	6893      	ldr	r3, [r2, #8]
 8007bfa:	6861      	ldr	r1, [r4, #4]
 8007bfc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007c04:	f7ff f81a 	bl	8006c3c <HAL_GetREVID>
 8007c08:	f241 0303 	movw	r3, #4099	; 0x1003
 8007c0c:	68a1      	ldr	r1, [r4, #8]
 8007c0e:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007c10:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007c12:	d852      	bhi.n	8007cba <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007c14:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007c18:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007c1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007c1c:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8007c20:	4302      	orrs	r2, r0
 8007c22:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d103      	bne.n	8007c30 <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007c28:	6a23      	ldr	r3, [r4, #32]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c32:	b123      	cbz	r3, 8007c3e <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c34:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007c38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c3a:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007c3c:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	493b      	ldr	r1, [pc, #236]	; (8007d30 <HAL_ADC_Init+0x210>)
 8007c42:	68d8      	ldr	r0, [r3, #12]
 8007c44:	4001      	ands	r1, r0
 8007c46:	430a      	orrs	r2, r1
 8007c48:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c50:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c52:	d11c      	bne.n	8007c8e <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c54:	0712      	lsls	r2, r2, #28
 8007c56:	d41a      	bmi.n	8007c8e <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007c58:	68d8      	ldr	r0, [r3, #12]
 8007c5a:	4a36      	ldr	r2, [pc, #216]	; (8007d34 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c5c:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007c5e:	4002      	ands	r2, r0
 8007c60:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8007c64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c66:	430a      	orrs	r2, r1
 8007c68:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007c6a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8007c6e:	2a01      	cmp	r2, #1
 8007c70:	d03a      	beq.n	8007ce8 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007c7a:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8007c7c:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c80:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007c84:	430a      	orrs	r2, r1
 8007c86:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8007c88:	f7ff fe8c 	bl	80079a4 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007c8c:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007c8e:	68e2      	ldr	r2, [r4, #12]
 8007c90:	2a01      	cmp	r2, #1
 8007c92:	d021      	beq.n	8007cd8 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c96:	f022 020f 	bic.w	r2, r2, #15
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8007c9e:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007ca0:	f023 0303 	bic.w	r3, r3, #3
 8007ca4:	f043 0301 	orr.w	r3, r3, #1
 8007ca8:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007caa:	b002      	add	sp, #8
 8007cac:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007cae:	f7fe fb7b 	bl	80063a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007cb2:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8007cb4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8007cb8:	e73e      	b.n	8007b38 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007cba:	2910      	cmp	r1, #16
 8007cbc:	d1aa      	bne.n	8007c14 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007cbe:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007cc0:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007cc2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8007cc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	f042 021c 	orr.w	r2, r2, #28
 8007cce:	e7a9      	b.n	8007c24 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
 8007cd0:	2501      	movs	r5, #1
}
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007cda:	69a2      	ldr	r2, [r4, #24]
 8007cdc:	f021 010f 	bic.w	r1, r1, #15
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ce6:	e7d9      	b.n	8007c9c <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007ce8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8007cec:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8007cee:	3901      	subs	r1, #1
 8007cf0:	6918      	ldr	r0, [r3, #16]
 8007cf2:	4332      	orrs	r2, r6
 8007cf4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007cf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	490e      	ldr	r1, [pc, #56]	; (8007d38 <HAL_ADC_Init+0x218>)
 8007cfe:	4001      	ands	r1, r0
 8007d00:	430a      	orrs	r2, r1
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	611a      	str	r2, [r3, #16]
 8007d08:	e7b7      	b.n	8007c7a <HAL_ADC_Init+0x15a>
 8007d0a:	bf00      	nop
 8007d0c:	5fffffc0 	.word	0x5fffffc0
 8007d10:	24000310 	.word	0x24000310
 8007d14:	053e2d63 	.word	0x053e2d63
 8007d18:	6fffffc0 	.word	0x6fffffc0
 8007d1c:	40022000 	.word	0x40022000
 8007d20:	58026000 	.word	0x58026000
 8007d24:	58026300 	.word	0x58026300
 8007d28:	40022100 	.word	0x40022100
 8007d2c:	40022300 	.word	0x40022300
 8007d30:	fff0c003 	.word	0xfff0c003
 8007d34:	ffffbffc 	.word	0xffffbffc
 8007d38:	fc00f81e 	.word	0xfc00f81e

08007d3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007d3e:	2300      	movs	r3, #0
{
 8007d40:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007d42:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d44:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d040      	beq.n	8007dce <HAL_ADCEx_Calibration_Start+0x92>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	4604      	mov	r4, r0
 8007d50:	460e      	mov	r6, r1
 8007d52:	4615      	mov	r5, r2
 8007d54:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007d58:	f7ff fdea 	bl	8007930 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007d5c:	b9e8      	cbnz	r0, 8007d9a <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d5e:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8007d60:	f005 4280 	and.w	r2, r5, #1073741824	; 0x40000000
 8007d64:	4b1b      	ldr	r3, [pc, #108]	; (8007dd4 <HAL_ADCEx_Calibration_Start+0x98>)
 8007d66:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
 8007d6a:	4d1b      	ldr	r5, [pc, #108]	; (8007dd8 <HAL_ADCEx_Calibration_Start+0x9c>)
 8007d6c:	403b      	ands	r3, r7

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007d6e:	4f1b      	ldr	r7, [pc, #108]	; (8007ddc <HAL_ADCEx_Calibration_Start+0xa0>)
    ADC_STATE_CLR_SET(hadc->State,
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	6563      	str	r3, [r4, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	689e      	ldr	r6, [r3, #8]
 8007d7a:	4035      	ands	r5, r6
 8007d7c:	4315      	orrs	r5, r2
 8007d7e:	430d      	orrs	r5, r1
 8007d80:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8007d84:	609d      	str	r5, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	2a00      	cmp	r2, #0
 8007d8a:	db0f      	blt.n	8007dac <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	f043 0301 	orr.w	r3, r3, #1
 8007d96:	6563      	str	r3, [r4, #84]	; 0x54
 8007d98:	e003      	b.n	8007da2 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d9c:	f043 0310 	orr.w	r3, r3, #16
 8007da0:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007da2:	2300      	movs	r3, #0
 8007da4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8007da8:	b003      	add	sp, #12
 8007daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8007dac:	9a01      	ldr	r2, [sp, #4]
 8007dae:	3201      	adds	r2, #1
 8007db0:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007db2:	9a01      	ldr	r2, [sp, #4]
 8007db4:	42ba      	cmp	r2, r7
 8007db6:	d3e6      	bcc.n	8007d86 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8007db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8007dba:	2200      	movs	r2, #0
        return HAL_ERROR;
 8007dbc:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8007dbe:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8007dc2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8007dc6:	f043 0310 	orr.w	r3, r3, #16
 8007dca:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8007dcc:	e7ec      	b.n	8007da8 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8007dce:	2002      	movs	r0, #2
}
 8007dd0:	b003      	add	sp, #12
 8007dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd4:	ffffeefd 	.word	0xffffeefd
 8007dd8:	3ffeffc0 	.word	0x3ffeffc0
 8007ddc:	25c3f800 	.word	0x25c3f800

08007de0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007de4:	f8d0 8000 	ldr.w	r8, [r0]
{
 8007de8:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007dea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8007dee:	f015 0504 	ands.w	r5, r5, #4
 8007df2:	d117      	bne.n	8007e24 <HAL_ADCEx_MultiModeStart_DMA+0x44>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007df4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8007df8:	4604      	mov	r4, r0
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d012      	beq.n	8007e24 <HAL_ADCEx_MultiModeStart_DMA+0x44>

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007dfe:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <HAL_ADCEx_MultiModeStart_DMA+0xd4>)
    __HAL_LOCK(hadc);
 8007e00:	f04f 0c01 	mov.w	ip, #1
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007e04:	9516      	str	r5, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007e06:	4598      	cmp	r8, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007e08:	9517      	str	r5, [sp, #92]	; 0x5c
    __HAL_LOCK(hadc);
 8007e0a:	f880 c050 	strb.w	ip, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007e0e:	d00d      	beq.n	8007e2c <HAL_ADCEx_MultiModeStart_DMA+0x4c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e10:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8007e12:	4660      	mov	r0, ip
      __HAL_UNLOCK(hadc);
 8007e14:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e18:	f043 0320 	orr.w	r3, r3, #32
 8007e1c:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8007e1e:	b01a      	add	sp, #104	; 0x68
 8007e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007e24:	2002      	movs	r0, #2
}
 8007e26:	b01a      	add	sp, #104	; 0x68
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	4d22      	ldr	r5, [pc, #136]	; (8007eb8 <HAL_ADCEx_MultiModeStart_DMA+0xd8>)
 8007e2e:	460e      	mov	r6, r1
 8007e30:	4617      	mov	r7, r2
 8007e32:	9501      	str	r5, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8007e34:	f7ff fd26 	bl	8007884 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007e38:	b128      	cbz	r0, 8007e46 <HAL_ADCEx_MultiModeStart_DMA+0x66>
      __HAL_UNLOCK(hadc);
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007e40:	b01a      	add	sp, #104	; 0x68
 8007e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8007e46:	a801      	add	r0, sp, #4
 8007e48:	f7ff fd1c 	bl	8007884 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d1f4      	bne.n	8007e3a <HAL_ADCEx_MultiModeStart_DMA+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8007e50:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007e52:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007e54:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      ADC_STATE_CLR_SET(hadc->State,
 8007e56:	400a      	ands	r2, r1
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007e58:	f8d4 c000 	ldr.w	ip, [r4]
      ADC_STATE_CLR_SET(hadc->State,
 8007e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007e60:	45c4      	cmp	ip, r8
      ADC_STATE_CLR_SET(hadc->State,
 8007e62:	6562      	str	r2, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8007e64:	65a0      	str	r0, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007e66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007e68:	63c3      	str	r3, [r0, #60]	; 0x3c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007e6a:	4b16      	ldr	r3, [pc, #88]	; (8007ec4 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
 8007e6c:	6403      	str	r3, [r0, #64]	; 0x40
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8007e6e:	4b16      	ldr	r3, [pc, #88]	; (8007ec8 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
 8007e70:	64c3      	str	r3, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007e72:	d01d      	beq.n	8007eb0 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8007e74:	45ac      	cmp	ip, r5
 8007e76:	d01b      	beq.n	8007eb0 <HAL_ADCEx_MultiModeStart_DMA+0xd0>
 8007e78:	4914      	ldr	r1, [pc, #80]	; (8007ecc <HAL_ADCEx_MultiModeStart_DMA+0xec>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007e7a:	251c      	movs	r5, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	4632      	mov	r2, r6
 8007e80:	310c      	adds	r1, #12
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007e82:	f8cc 5000 	str.w	r5, [ip]
      __HAL_UNLOCK(hadc);
 8007e86:	2500      	movs	r5, #0
 8007e88:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007e8c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007e90:	f045 0510 	orr.w	r5, r5, #16
 8007e94:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007e98:	f000 fef8 	bl	8008c8c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007e9c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8007ea0:	6891      	ldr	r1, [r2, #8]
 8007ea2:	400b      	ands	r3, r1
 8007ea4:	f043 0304 	orr.w	r3, r3, #4
 8007ea8:	6093      	str	r3, [r2, #8]
}
 8007eaa:	b01a      	add	sp, #104	; 0x68
 8007eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007eb0:	4908      	ldr	r1, [pc, #32]	; (8007ed4 <HAL_ADCEx_MultiModeStart_DMA+0xf4>)
 8007eb2:	e7e2      	b.n	8007e7a <HAL_ADCEx_MultiModeStart_DMA+0x9a>
 8007eb4:	40022000 	.word	0x40022000
 8007eb8:	40022100 	.word	0x40022100
 8007ebc:	fffff0fe 	.word	0xfffff0fe
 8007ec0:	08006f31 	.word	0x08006f31
 8007ec4:	08006ca1 	.word	0x08006ca1
 8007ec8:	08006f9d 	.word	0x08006f9d
 8007ecc:	58026300 	.word	0x58026300
 8007ed0:	7fffffc0 	.word	0x7fffffc0
 8007ed4:	40022300 	.word	0x40022300

08007ed8 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8007ed8:	b570      	push	{r4, r5, r6, lr}

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007eda:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8007ede:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d05a      	beq.n	8007f9a <HAL_ADCEx_MultiModeStop_DMA+0xc2>
 8007ee4:	2601      	movs	r6, #1


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8007eea:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007eee:	f7ff fc4d 	bl	800778c <ADC_ConversionStop>

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	bb40      	cbnz	r0, 8007f48 <HAL_ADCEx_MultiModeStop_DMA+0x70>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007ef6:	4b3d      	ldr	r3, [pc, #244]	; (8007fec <HAL_ADCEx_MultiModeStop_DMA+0x114>)
 8007ef8:	6822      	ldr	r2, [r4, #0]
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007efa:	9016      	str	r0, [sp, #88]	; 0x58
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007efc:	429a      	cmp	r2, r3
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007efe:	9017      	str	r0, [sp, #92]	; 0x5c
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007f00:	d028      	beq.n	8007f54 <HAL_ADCEx_MultiModeStop_DMA+0x7c>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f02:	6d63      	ldr	r3, [r4, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8007f04:	4635      	mov	r5, r6
      __HAL_UNLOCK(hadc);
 8007f06:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f0a:	f043 0320 	orr.w	r3, r3, #32
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8007f0e:	4628      	mov	r0, r5
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f10:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007f12:	b01a      	add	sp, #104	; 0x68
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007f16:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007f18:	f001 f850 	bl	8008fbc <HAL_DMA_Abort>
    if (tmp_hal_status == HAL_ERROR)
 8007f1c:	2801      	cmp	r0, #1
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007f1e:	4605      	mov	r5, r0
    if (tmp_hal_status == HAL_ERROR)
 8007f20:	d053      	beq.n	8007fca <HAL_ADCEx_MultiModeStop_DMA+0xf2>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	6853      	ldr	r3, [r2, #4]
 8007f26:	f023 0310 	bic.w	r3, r3, #16
 8007f2a:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d155      	bne.n	8007fdc <HAL_ADCEx_MultiModeStop_DMA+0x104>
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8007f30:	a801      	add	r0, sp, #4
 8007f32:	f7ff fcfd 	bl	8007930 <ADC_Disable>
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff fcfa 	bl	8007930 <ADC_Disable>
    ADC_STATE_CLR_SET(hadc->State,
 8007f3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007f3e:	4b2c      	ldr	r3, [pc, #176]	; (8007ff0 <HAL_ADCEx_MultiModeStop_DMA+0x118>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8007f4c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007f50:	b01a      	add	sp, #104	; 0x68
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <HAL_ADCEx_MultiModeStop_DMA+0x11c>)
 8007f56:	9301      	str	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8007f58:	f7fe fe58 	bl	8006c0c <HAL_GetTick>
    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007f5c:	9b01      	ldr	r3, [sp, #4]
    tickstart = HAL_GetTick();
 8007f5e:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	075b      	lsls	r3, r3, #29
 8007f64:	d41d      	bmi.n	8007fa2 <HAL_ADCEx_MultiModeStop_DMA+0xca>
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	075a      	lsls	r2, r3, #29
 8007f6c:	d5d3      	bpl.n	8007f16 <HAL_ADCEx_MultiModeStop_DMA+0x3e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007f6e:	f7fe fe4d 	bl	8006c0c <HAL_GetTick>
 8007f72:	1b43      	subs	r3, r0, r5
 8007f74:	2b05      	cmp	r3, #5
 8007f76:	d91b      	bls.n	8007fb0 <HAL_ADCEx_MultiModeStop_DMA+0xd8>
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	0750      	lsls	r0, r2, #29
 8007f7e:	d51f      	bpl.n	8007fc0 <HAL_ADCEx_MultiModeStop_DMA+0xe8>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8007f86:	2501      	movs	r5, #1
          __HAL_UNLOCK(hadc);
 8007f88:	2200      	movs	r2, #0
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f8a:	f043 0310 	orr.w	r3, r3, #16
}
 8007f8e:	4628      	mov	r0, r5
          __HAL_UNLOCK(hadc);
 8007f90:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f94:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007f96:	b01a      	add	sp, #104	; 0x68
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8007f9a:	2502      	movs	r5, #2
}
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	b01a      	add	sp, #104	; 0x68
 8007fa0:	bd70      	pop	{r4, r5, r6, pc}
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007fa6:	f7fe fe31 	bl	8006c0c <HAL_GetTick>
 8007faa:	1b43      	subs	r3, r0, r5
 8007fac:	2b05      	cmp	r3, #5
 8007fae:	d8e3      	bhi.n	8007f78 <HAL_ADCEx_MultiModeStop_DMA+0xa0>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007fb0:	6822      	ldr	r2, [r4, #0]
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f013 0f04 	tst.w	r3, #4
 8007fba:	6893      	ldr	r3, [r2, #8]
 8007fbc:	d1d7      	bne.n	8007f6e <HAL_ADCEx_MultiModeStop_DMA+0x96>
 8007fbe:	e7d4      	b.n	8007f6a <HAL_ADCEx_MultiModeStop_DMA+0x92>
        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	6891      	ldr	r1, [r2, #8]
 8007fc4:	0749      	lsls	r1, r1, #29
 8007fc6:	d5f5      	bpl.n	8007fb4 <HAL_ADCEx_MultiModeStop_DMA+0xdc>
 8007fc8:	e7dc      	b.n	8007f84 <HAL_ADCEx_MultiModeStop_DMA+0xac>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007fca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007fcc:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fd2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007fd4:	6853      	ldr	r3, [r2, #4]
 8007fd6:	f023 0310 	bic.w	r3, r3, #16
 8007fda:	6053      	str	r3, [r2, #4]
      (void) ADC_Disable(hadc);
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff fca7 	bl	8007930 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8007fe2:	a801      	add	r0, sp, #4
 8007fe4:	f7ff fca4 	bl	8007930 <ADC_Disable>
 8007fe8:	e7a8      	b.n	8007f3c <HAL_ADCEx_MultiModeStop_DMA+0x64>
 8007fea:	bf00      	nop
 8007fec:	40022000 	.word	0x40022000
 8007ff0:	ffffeefe 	.word	0xffffeefe
 8007ff4:	40022100 	.word	0x40022100

08007ff8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop

08007ffc <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop

08008000 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop

08008004 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop

08008008 <HAL_ADCEx_EndOfSamplingCallback>:
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800800c:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800800e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8008012:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008014:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8008016:	2a01      	cmp	r2, #1
 8008018:	d04d      	beq.n	80080b6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800801a:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800801c:	4c2b      	ldr	r4, [pc, #172]	; (80080cc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800801e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8008020:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008022:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008024:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008026:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
 8008028:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800802c:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800802e:	d008      	beq.n	8008042 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008030:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008036:	f041 0120 	orr.w	r1, r1, #32
 800803a:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800803c:	b01a      	add	sp, #104	; 0x68
 800803e:	bcf0      	pop	{r4, r5, r6, r7}
 8008040:	4770      	bx	lr
 8008042:	4c23      	ldr	r4, [pc, #140]	; (80080d0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8008044:	68a2      	ldr	r2, [r4, #8]
 8008046:	0752      	lsls	r2, r2, #29
 8008048:	d50b      	bpl.n	8008062 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800804a:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800804c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800804e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008050:	f042 0220 	orr.w	r2, r2, #32
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 800805c:	b01a      	add	sp, #104	; 0x68
 800805e:	bcf0      	pop	{r4, r5, r6, r7}
 8008060:	4770      	bx	lr
 8008062:	68a8      	ldr	r0, [r5, #8]
 8008064:	f010 0004 	ands.w	r0, r0, #4
 8008068:	d1f0      	bne.n	800804c <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800806a:	b1c6      	cbz	r6, 800809e <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800806c:	f8df c068 	ldr.w	ip, [pc, #104]	; 80080d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8008070:	684f      	ldr	r7, [r1, #4]
 8008072:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8008076:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800807a:	433a      	orrs	r2, r7
 800807c:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008080:	68ad      	ldr	r5, [r5, #8]
 8008082:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008084:	432a      	orrs	r2, r5
 8008086:	07d4      	lsls	r4, r2, #31
 8008088:	d413      	bmi.n	80080b2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
 800808a:	688a      	ldr	r2, [r1, #8]
 800808c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008090:	4316      	orrs	r6, r2
 8008092:	4a10      	ldr	r2, [pc, #64]	; (80080d4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8008094:	400a      	ands	r2, r1
 8008096:	4316      	orrs	r6, r2
 8008098:	f8cc 6008 	str.w	r6, [ip, #8]
 800809c:	e7db      	b.n	8008056 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800809e:	490e      	ldr	r1, [pc, #56]	; (80080d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80080a0:	688a      	ldr	r2, [r1, #8]
 80080a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80080a6:	608a      	str	r2, [r1, #8]
 80080a8:	68a8      	ldr	r0, [r5, #8]
 80080aa:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80080ac:	4302      	orrs	r2, r0
 80080ae:	07d0      	lsls	r0, r2, #31
 80080b0:	d505      	bpl.n	80080be <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080b2:	2000      	movs	r0, #0
 80080b4:	e7cf      	b.n	8008056 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80080b6:	2002      	movs	r0, #2
}
 80080b8:	b01a      	add	sp, #104	; 0x68
 80080ba:	bcf0      	pop	{r4, r5, r6, r7}
 80080bc:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80080be:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080c0:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80080c2:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80080c4:	4022      	ands	r2, r4
 80080c6:	608a      	str	r2, [r1, #8]
 80080c8:	e7c5      	b.n	8008056 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80080ca:	bf00      	nop
 80080cc:	40022000 	.word	0x40022000
 80080d0:	40022100 	.word	0x40022100
 80080d4:	fffff0e0 	.word	0xfffff0e0
 80080d8:	40022300 	.word	0x40022300

080080dc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080dc:	4906      	ldr	r1, [pc, #24]	; (80080f8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080de:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080e2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080e6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080e8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080ec:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080f0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80080f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80080f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80080f6:	4770      	bx	lr
 80080f8:	e000ed00 	.word	0xe000ed00
 80080fc:	05fa0000 	.word	0x05fa0000

08008100 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008100:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <HAL_NVIC_SetPriority+0x70>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008108:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800810a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800810e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008112:	f1be 0f04 	cmp.w	lr, #4
 8008116:	bf28      	it	cs
 8008118:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800811c:	f1bc 0f06 	cmp.w	ip, #6
 8008120:	d91a      	bls.n	8008158 <HAL_NVIC_SetPriority+0x58>
 8008122:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008124:	f04f 3cff 	mov.w	ip, #4294967295
 8008128:	fa0c fc03 	lsl.w	ip, ip, r3
 800812c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008130:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008134:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008136:	fa0c fc0e 	lsl.w	ip, ip, lr
 800813a:	ea21 010c 	bic.w	r1, r1, ip
 800813e:	fa01 f103 	lsl.w	r1, r1, r3
 8008142:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008146:	db0a      	blt.n	800815e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008148:	0109      	lsls	r1, r1, #4
 800814a:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <HAL_NVIC_SetPriority+0x74>)
 800814c:	b2c9      	uxtb	r1, r1
 800814e:	4403      	add	r3, r0
 8008150:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008154:	f85d fb04 	ldr.w	pc, [sp], #4
 8008158:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800815a:	4613      	mov	r3, r2
 800815c:	e7e8      	b.n	8008130 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800815e:	f000 000f 	and.w	r0, r0, #15
 8008162:	0109      	lsls	r1, r1, #4
 8008164:	4b04      	ldr	r3, [pc, #16]	; (8008178 <HAL_NVIC_SetPriority+0x78>)
 8008166:	b2c9      	uxtb	r1, r1
 8008168:	4403      	add	r3, r0
 800816a:	7619      	strb	r1, [r3, #24]
 800816c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008170:	e000ed00 	.word	0xe000ed00
 8008174:	e000e100 	.word	0xe000e100
 8008178:	e000ecfc 	.word	0xe000ecfc

0800817c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800817c:	2800      	cmp	r0, #0
 800817e:	db07      	blt.n	8008190 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008180:	2301      	movs	r3, #1
 8008182:	f000 011f 	and.w	r1, r0, #31
 8008186:	4a03      	ldr	r2, [pc, #12]	; (8008194 <HAL_NVIC_EnableIRQ+0x18>)
 8008188:	0940      	lsrs	r0, r0, #5
 800818a:	408b      	lsls	r3, r1
 800818c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	e000e100 	.word	0xe000e100

08008198 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008198:	1e43      	subs	r3, r0, #1
 800819a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800819e:	d20c      	bcs.n	80081ba <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081a0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081a4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a6:	4906      	ldr	r1, [pc, #24]	; (80081c0 <HAL_SYSTICK_Config+0x28>)
 80081a8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081ac:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081ae:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081b0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081b4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081b6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80081ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	e000ed00 	.word	0xe000ed00

080081c4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80081c4:	b188      	cbz	r0, 80081ea <HAL_DAC_Init+0x26>
{
 80081c6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80081c8:	7903      	ldrb	r3, [r0, #4]
 80081ca:	4604      	mov	r4, r0
 80081cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80081d0:	b13b      	cbz	r3, 80081e2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80081d2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80081d4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80081d6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80081d8:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80081da:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80081dc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80081de:	7122      	strb	r2, [r4, #4]
}
 80081e0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80081e2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80081e4:	f7fe f988 	bl	80064f8 <HAL_DAC_MspInit>
 80081e8:	e7f3      	b.n	80081d2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80081ea:	2001      	movs	r0, #1
}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop

080081f0 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80081f0:	7942      	ldrb	r2, [r0, #5]
 80081f2:	2a01      	cmp	r2, #1
 80081f4:	d02e      	beq.n	8008254 <HAL_DAC_Start+0x64>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80081f6:	4603      	mov	r3, r0
 80081f8:	f04f 0c02 	mov.w	ip, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80081fc:	6800      	ldr	r0, [r0, #0]
 80081fe:	2201      	movs	r2, #1
{
 8008200:	b510      	push	{r4, lr}
  __HAL_DAC_ENABLE(hdac, Channel);
 8008202:	f001 0e10 	and.w	lr, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008206:	f883 c004 	strb.w	ip, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800820a:	6804      	ldr	r4, [r0, #0]
 800820c:	fa02 f20e 	lsl.w	r2, r2, lr
 8008210:	4322      	orrs	r2, r4
 8008212:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008214:	6802      	ldr	r2, [r0, #0]
  if (Channel == DAC_CHANNEL_1)
 8008216:	b969      	cbnz	r1, 8008234 <HAL_DAC_Start+0x44>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008218:	f002 023e 	and.w	r2, r2, #62	; 0x3e
 800821c:	4562      	cmp	r2, ip
 800821e:	d103      	bne.n	8008228 <HAL_DAC_Start+0x38>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008220:	6842      	ldr	r2, [r0, #4]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008228:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 800822a:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 800822c:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800822e:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8008230:	715a      	strb	r2, [r3, #5]
}
 8008232:	bd10      	pop	{r4, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008234:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008238:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 800823c:	4562      	cmp	r2, ip
 800823e:	d1f3      	bne.n	8008228 <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008240:	6842      	ldr	r2, [r0, #4]
  hdac->State = HAL_DAC_STATE_READY;
 8008242:	2101      	movs	r1, #1
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008244:	f042 0202 	orr.w	r2, r2, #2
 8008248:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 800824a:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 800824c:	7119      	strb	r1, [r3, #4]
  return HAL_OK;
 800824e:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdac);
 8008250:	715a      	strb	r2, [r3, #5]
}
 8008252:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdac);
 8008254:	2002      	movs	r0, #2
}
 8008256:	4770      	bx	lr

08008258 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800825c:	7940      	ldrb	r0, [r0, #5]
{
 800825e:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 8008260:	2801      	cmp	r0, #1
 8008262:	d053      	beq.n	800830c <HAL_DAC_Start_DMA+0xb4>
 8008264:	460d      	mov	r5, r1
 8008266:	4611      	mov	r1, r2
 8008268:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800826a:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hdac);
 800826c:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800826e:	2202      	movs	r2, #2
 8008270:	7122      	strb	r2, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008272:	bb3d      	cbnz	r5, 80082c4 <HAL_DAC_Start_DMA+0x6c>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008274:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008276:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008278:	4a37      	ldr	r2, [pc, #220]	; (8008358 <HAL_DAC_Start_DMA+0x100>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800827a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008360 <HAL_DAC_Start_DMA+0x108>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800827e:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008280:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008282:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008286:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800828a:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8008364 <HAL_DAC_Start_DMA+0x10c>
 800828e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008292:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 8008294:	d042      	beq.n	800831c <HAL_DAC_Start_DMA+0xc4>
 8008296:	2f08      	cmp	r7, #8
 8008298:	d03d      	beq.n	8008316 <HAL_DAC_Start_DMA+0xbe>
 800829a:	2f00      	cmp	r7, #0
 800829c:	d038      	beq.n	8008310 <HAL_DAC_Start_DMA+0xb8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800829e:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80082a0:	6837      	ldr	r7, [r6, #0]
 80082a2:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80082a6:	6037      	str	r7, [r6, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80082a8:	f000 fcf0 	bl	8008c8c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80082ac:	2300      	movs	r3, #0
 80082ae:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80082b0:	bb38      	cbnz	r0, 8008302 <HAL_DAC_Start_DMA+0xaa>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	f005 0110 	and.w	r1, r5, #16
 80082b8:	2501      	movs	r5, #1
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	408d      	lsls	r5, r1
 80082be:	4315      	orrs	r5, r2
 80082c0:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80082c4:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 80082c6:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80082c8:	4a24      	ldr	r2, [pc, #144]	; (800835c <HAL_DAC_Start_DMA+0x104>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80082ca:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8008368 <HAL_DAC_Start_DMA+0x110>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80082ce:	63c2      	str	r2, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80082d0:	6832      	ldr	r2, [r6, #0]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80082d2:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80082d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80082da:	f8df c090 	ldr.w	ip, [pc, #144]	; 800836c <HAL_DAC_Start_DMA+0x114>
 80082de:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80082e2:	6032      	str	r2, [r6, #0]
    switch (Alignment)
 80082e4:	d02f      	beq.n	8008346 <HAL_DAC_Start_DMA+0xee>
 80082e6:	2f08      	cmp	r7, #8
 80082e8:	d024      	beq.n	8008334 <HAL_DAC_Start_DMA+0xdc>
 80082ea:	b1d7      	cbz	r7, 8008322 <HAL_DAC_Start_DMA+0xca>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80082ec:	6837      	ldr	r7, [r6, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80082ee:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80082f0:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 80082f4:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80082f6:	f000 fcc9 	bl	8008c8c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80082fa:	2300      	movs	r3, #0
 80082fc:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80082fe:	2800      	cmp	r0, #0
 8008300:	d0d7      	beq.n	80082b2 <HAL_DAC_Start_DMA+0x5a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	f043 0304 	orr.w	r3, r3, #4
 8008308:	6123      	str	r3, [r4, #16]
}
 800830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdac);
 800830c:	2002      	movs	r0, #2
}
 800830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008310:	f106 0208 	add.w	r2, r6, #8
        break;
 8008314:	e7c4      	b.n	80082a0 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008316:	f106 0210 	add.w	r2, r6, #16
        break;
 800831a:	e7c1      	b.n	80082a0 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800831c:	f106 020c 	add.w	r2, r6, #12
        break;
 8008320:	e7be      	b.n	80082a0 <HAL_DAC_Start_DMA+0x48>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008322:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008324:	f106 0214 	add.w	r2, r6, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008328:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800832c:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800832e:	f000 fcad 	bl	8008c8c <HAL_DMA_Start_IT>
 8008332:	e7e2      	b.n	80082fa <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008334:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008336:	f106 021c 	add.w	r2, r6, #28
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800833a:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800833e:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008340:	f000 fca4 	bl	8008c8c <HAL_DMA_Start_IT>
 8008344:	e7d9      	b.n	80082fa <HAL_DAC_Start_DMA+0xa2>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008346:	6837      	ldr	r7, [r6, #0]
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008348:	f106 0218 	add.w	r2, r6, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800834c:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8008350:	6037      	str	r7, [r6, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008352:	f000 fc9b 	bl	8008c8c <HAL_DMA_Start_IT>
 8008356:	e7d0      	b.n	80082fa <HAL_DAC_Start_DMA+0xa2>
 8008358:	080083a1 	.word	0x080083a1
 800835c:	080085a5 	.word	0x080085a5
 8008360:	080083b1 	.word	0x080083b1
 8008364:	080083c1 	.word	0x080083c1
 8008368:	080085b9 	.word	0x080085b9
 800836c:	080085c9 	.word	0x080085c9

08008370 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008370:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008372:	6800      	ldr	r0, [r0, #0]
{
 8008374:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008376:	2400      	movs	r4, #0
 8008378:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 800837a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 800837c:	b951      	cbnz	r1, 8008394 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	3108      	adds	r1, #8
 8008382:	440a      	add	r2, r1
 8008384:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008386:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8008388:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800838a:	6013      	str	r3, [r2, #0]
}
 800838c:	b003      	add	sp, #12
 800838e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008392:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008394:	9901      	ldr	r1, [sp, #4]
 8008396:	3114      	adds	r1, #20
 8008398:	440a      	add	r2, r1
 800839a:	9201      	str	r2, [sp, #4]
 800839c:	e7f3      	b.n	8008386 <HAL_DAC_SetValue+0x16>
 800839e:	bf00      	nop

080083a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80083a0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083a2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7fc fb3f 	bl	8004a28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083aa:	2301      	movs	r3, #1
 80083ac:	7123      	strb	r3, [r4, #4]
}
 80083ae:	bd10      	pop	{r4, pc}

080083b0 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80083b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80083b2:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80083b4:	f7fc fb40 	bl	8004a38 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80083b8:	bd08      	pop	{r3, pc}
 80083ba:	bf00      	nop

080083bc <HAL_DAC_ErrorCallbackCh1>:
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop

080083c0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80083c0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083c4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80083c6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083c8:	f043 0304 	orr.w	r3, r3, #4
 80083cc:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80083ce:	f7ff fff5 	bl	80083bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083d2:	2301      	movs	r3, #1
 80083d4:	7123      	strb	r3, [r4, #4]
}
 80083d6:	bd10      	pop	{r4, pc}

080083d8 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop

080083dc <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80083dc:	6803      	ldr	r3, [r0, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	0491      	lsls	r1, r2, #18
{
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80083e6:	d502      	bpl.n	80083ee <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80083e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ea:	0492      	lsls	r2, r2, #18
 80083ec:	d418      	bmi.n	8008420 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	0091      	lsls	r1, r2, #2
 80083f2:	d502      	bpl.n	80083fa <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80083f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f6:	0092      	lsls	r2, r2, #2
 80083f8:	d400      	bmi.n	80083fc <HAL_DAC_IRQHandler+0x20>
}
 80083fa:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80083fc:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80083fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008402:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008404:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008406:	6922      	ldr	r2, [r4, #16]
 8008408:	f042 0202 	orr.w	r2, r2, #2
 800840c:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800840e:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800841a:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800841c:	f000 b8e0 	b.w	80085e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008420:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008426:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008428:	6902      	ldr	r2, [r0, #16]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008430:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008438:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800843a:	f7ff ffcd 	bl	80083d8 <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	e7d5      	b.n	80083ee <HAL_DAC_IRQHandler+0x12>
 8008442:	bf00      	nop

08008444 <HAL_DAC_ConfigChannel>:
{
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdac);
 8008448:	7943      	ldrb	r3, [r0, #5]
{
 800844a:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800844c:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800844e:	2b01      	cmp	r3, #1
 8008450:	f000 8098 	beq.w	8008584 <HAL_DAC_ConfigChannel+0x140>
 8008454:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008456:	2904      	cmp	r1, #4
 8008458:	4605      	mov	r5, r0
 800845a:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
 800845c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800845e:	f04f 0302 	mov.w	r3, #2
 8008462:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008464:	d045      	beq.n	80084f2 <HAL_DAC_ConfigChannel+0xae>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008466:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 800846a:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800846c:	6933      	ldr	r3, [r6, #16]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d108      	bne.n	8008484 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008472:	241f      	movs	r4, #31
    tmpreg1 = hdac->Instance->CCR;
 8008474:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008476:	4094      	lsls	r4, r2
 8008478:	ea23 0404 	bic.w	r4, r3, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800847c:	6973      	ldr	r3, [r6, #20]
 800847e:	4093      	lsls	r3, r2
 8008480:	4323      	orrs	r3, r4
    hdac->Instance->CCR = tmpreg1;
 8008482:	6383      	str	r3, [r0, #56]	; 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008484:	2407      	movs	r4, #7
 8008486:	fa04 f302 	lsl.w	r3, r4, r2
  tmpreg1 = hdac->Instance->MCR;
 800848a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800848c:	ea24 0403 	bic.w	r4, r4, r3
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008490:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008494:	2b01      	cmp	r3, #1
 8008496:	d028      	beq.n	80084ea <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008498:	2b02      	cmp	r3, #2
 800849a:	d028      	beq.n	80084ee <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800849c:	fab7 f387 	clz	r3, r7
 80084a0:	095b      	lsrs	r3, r3, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80084a2:	433b      	orrs	r3, r7
 80084a4:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084a6:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084a8:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084aa:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084ac:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80084ae:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 80084b2:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80084b4:	4094      	lsls	r4, r2
 80084b6:	6803      	ldr	r3, [r0, #0]
 80084b8:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80084bc:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80084c0:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80084c2:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
 80084c4:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80084c6:	ea23 0304 	bic.w	r3, r3, r4
  hdac->State = HAL_DAC_STATE_READY;
 80084ca:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80084cc:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80084ce:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 80084d0:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80084d2:	fa01 f302 	lsl.w	r3, r1, r2
 80084d6:	6802      	ldr	r2, [r0, #0]
  __HAL_UNLOCK(hdac);
 80084d8:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80084da:	ea22 0203 	bic.w	r2, r2, r3
 80084de:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 80084e0:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 80084e2:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
 80084e4:	7169      	strb	r1, [r5, #5]
}
 80084e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e7d9      	b.n	80084a2 <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7d7      	b.n	80084a2 <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
 80084f2:	f7fe fb8b 	bl	8006c0c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80084f6:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80084f8:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80084fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80084fc:	bb1c      	cbnz	r4, 8008546 <HAL_DAC_ConfigChannel+0x102>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80084fe:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800859c <HAL_DAC_ConfigChannel+0x158>
 8008502:	ea13 0f08 	tst.w	r3, r8
 8008506:	d00d      	beq.n	8008524 <HAL_DAC_ConfigChannel+0xe0>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008508:	f7fe fb80 	bl	8006c0c <HAL_GetTick>
 800850c:	1bc3      	subs	r3, r0, r7
 800850e:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008510:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008512:	d903      	bls.n	800851c <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008516:	ea12 0f08 	tst.w	r2, r8
 800851a:	d136      	bne.n	800858a <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800851c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851e:	ea13 0f08 	tst.w	r3, r8
 8008522:	d1f1      	bne.n	8008508 <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
 8008524:	2001      	movs	r0, #1
 8008526:	f7fe fb77 	bl	8006c18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800852a:	6828      	ldr	r0, [r5, #0]
 800852c:	69b3      	ldr	r3, [r6, #24]
 800852e:	6403      	str	r3, [r0, #64]	; 0x40
 8008530:	e011      	b.n	8008556 <HAL_DAC_ConfigChannel+0x112>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008532:	f7fe fb6b 	bl	8006c0c <HAL_GetTick>
 8008536:	1bc3      	subs	r3, r0, r7
 8008538:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800853a:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800853c:	d902      	bls.n	8008544 <HAL_DAC_ConfigChannel+0x100>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800853e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008540:	2a00      	cmp	r2, #0
 8008542:	db22      	blt.n	800858a <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008546:	2b00      	cmp	r3, #0
 8008548:	dbf3      	blt.n	8008532 <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 800854a:	2001      	movs	r0, #1
 800854c:	f7fe fb64 	bl	8006c18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008550:	6828      	ldr	r0, [r5, #0]
 8008552:	69b3      	ldr	r3, [r6, #24]
 8008554:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008556:	f004 0210 	and.w	r2, r4, #16
 800855a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800855e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008560:	4091      	lsls	r1, r2
 8008562:	ea23 0301 	bic.w	r3, r3, r1
 8008566:	69f1      	ldr	r1, [r6, #28]
 8008568:	4091      	lsls	r1, r2
 800856a:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800856c:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800856e:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008570:	4091      	lsls	r1, r2
 8008572:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008574:	ea23 0301 	bic.w	r3, r3, r1
 8008578:	6a31      	ldr	r1, [r6, #32]
 800857a:	4091      	lsls	r1, r2
 800857c:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800857e:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008580:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008582:	e773      	b.n	800846c <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
 8008584:	2002      	movs	r0, #2
}
 8008586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800858a:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800858c:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800858e:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
 8008592:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008594:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008596:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8008598:	e7a5      	b.n	80084e6 <HAL_DAC_ConfigChannel+0xa2>
 800859a:	bf00      	nop
 800859c:	20008000 	.word	0x20008000

080085a0 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80085a4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80085a8:	4620      	mov	r0, r4
 80085aa:	f7ff fff9 	bl	80085a0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80085ae:	2301      	movs	r3, #1
 80085b0:	7123      	strb	r3, [r4, #4]
}
 80085b2:	bd10      	pop	{r4, pc}

080085b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop

080085b8 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80085b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80085ba:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80085bc:	f7ff fffa 	bl	80085b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80085c0:	bd08      	pop	{r3, pc}
 80085c2:	bf00      	nop

080085c4 <HAL_DACEx_ErrorCallbackCh2>:
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop

080085c8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80085c8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085ca:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80085cc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80085ce:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80085d0:	f043 0304 	orr.w	r3, r3, #4
 80085d4:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80085d6:	f7ff fff5 	bl	80085c4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80085da:	2301      	movs	r3, #1
 80085dc:	7123      	strb	r3, [r4, #4]
}
 80085de:	bd10      	pop	{r4, pc}

080085e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop

080085e4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085e4:	6802      	ldr	r2, [r0, #0]
 80085e6:	4b34      	ldr	r3, [pc, #208]	; (80086b8 <DMA_CalcBaseAndBitshift+0xd4>)
 80085e8:	4934      	ldr	r1, [pc, #208]	; (80086bc <DMA_CalcBaseAndBitshift+0xd8>)
{
 80085ea:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085ec:	4d34      	ldr	r5, [pc, #208]	; (80086c0 <DMA_CalcBaseAndBitshift+0xdc>)
 80085ee:	4c35      	ldr	r4, [pc, #212]	; (80086c4 <DMA_CalcBaseAndBitshift+0xe0>)
 80085f0:	42aa      	cmp	r2, r5
 80085f2:	bf18      	it	ne
 80085f4:	429a      	cmpne	r2, r3
 80085f6:	bf0c      	ite	eq
 80085f8:	2301      	moveq	r3, #1
 80085fa:	2300      	movne	r3, #0
 80085fc:	428a      	cmp	r2, r1
 80085fe:	bf08      	it	eq
 8008600:	f043 0301 	orreq.w	r3, r3, #1
 8008604:	3130      	adds	r1, #48	; 0x30
 8008606:	42a2      	cmp	r2, r4
 8008608:	bf08      	it	eq
 800860a:	f043 0301 	orreq.w	r3, r3, #1
 800860e:	3430      	adds	r4, #48	; 0x30
 8008610:	428a      	cmp	r2, r1
 8008612:	bf08      	it	eq
 8008614:	f043 0301 	orreq.w	r3, r3, #1
 8008618:	3130      	adds	r1, #48	; 0x30
 800861a:	42a2      	cmp	r2, r4
 800861c:	bf08      	it	eq
 800861e:	f043 0301 	orreq.w	r3, r3, #1
 8008622:	3430      	adds	r4, #48	; 0x30
 8008624:	428a      	cmp	r2, r1
 8008626:	bf08      	it	eq
 8008628:	f043 0301 	orreq.w	r3, r3, #1
 800862c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008630:	42a2      	cmp	r2, r4
 8008632:	bf08      	it	eq
 8008634:	f043 0301 	orreq.w	r3, r3, #1
 8008638:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800863c:	428a      	cmp	r2, r1
 800863e:	bf08      	it	eq
 8008640:	f043 0301 	orreq.w	r3, r3, #1
 8008644:	3130      	adds	r1, #48	; 0x30
 8008646:	42a2      	cmp	r2, r4
 8008648:	bf08      	it	eq
 800864a:	f043 0301 	orreq.w	r3, r3, #1
 800864e:	3430      	adds	r4, #48	; 0x30
 8008650:	428a      	cmp	r2, r1
 8008652:	bf08      	it	eq
 8008654:	f043 0301 	orreq.w	r3, r3, #1
 8008658:	3130      	adds	r1, #48	; 0x30
 800865a:	42a2      	cmp	r2, r4
 800865c:	bf08      	it	eq
 800865e:	f043 0301 	orreq.w	r3, r3, #1
 8008662:	3430      	adds	r4, #48	; 0x30
 8008664:	428a      	cmp	r2, r1
 8008666:	bf08      	it	eq
 8008668:	f043 0301 	orreq.w	r3, r3, #1
 800866c:	3130      	adds	r1, #48	; 0x30
 800866e:	42a2      	cmp	r2, r4
 8008670:	bf08      	it	eq
 8008672:	f043 0301 	orreq.w	r3, r3, #1
 8008676:	428a      	cmp	r2, r1
 8008678:	bf08      	it	eq
 800867a:	f043 0301 	orreq.w	r3, r3, #1
 800867e:	b913      	cbnz	r3, 8008686 <DMA_CalcBaseAndBitshift+0xa2>
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <DMA_CalcBaseAndBitshift+0xe4>)
 8008682:	429a      	cmp	r2, r3
 8008684:	d113      	bne.n	80086ae <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008686:	b2d3      	uxtb	r3, r2
 8008688:	4910      	ldr	r1, [pc, #64]	; (80086cc <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800868a:	4c11      	ldr	r4, [pc, #68]	; (80086d0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800868c:	3b10      	subs	r3, #16
 800868e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8008692:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008696:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800869a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800869e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80086a0:	bf88      	it	hi
 80086a2:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80086a4:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80086a6:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	bc30      	pop	{r4, r5}
 80086ac:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80086ae:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 80086b2:	6583      	str	r3, [r0, #88]	; 0x58
 80086b4:	e7f8      	b.n	80086a8 <DMA_CalcBaseAndBitshift+0xc4>
 80086b6:	bf00      	nop
 80086b8:	40020010 	.word	0x40020010
 80086bc:	40020040 	.word	0x40020040
 80086c0:	40020028 	.word	0x40020028
 80086c4:	40020058 	.word	0x40020058
 80086c8:	400204b8 	.word	0x400204b8
 80086cc:	aaaaaaab 	.word	0xaaaaaaab
 80086d0:	0801dd24 	.word	0x0801dd24
 80086d4:	fffffc00 	.word	0xfffffc00

080086d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80086d8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086da:	4a29      	ldr	r2, [pc, #164]	; (8008780 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80086dc:	4929      	ldr	r1, [pc, #164]	; (8008784 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 80086de:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086e0:	4d29      	ldr	r5, [pc, #164]	; (8008788 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80086e2:	4c2a      	ldr	r4, [pc, #168]	; (800878c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	bf18      	it	ne
 80086e8:	4293      	cmpne	r3, r2
 80086ea:	bf0c      	ite	eq
 80086ec:	2201      	moveq	r2, #1
 80086ee:	2200      	movne	r2, #0
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf08      	it	eq
 80086f4:	f042 0201 	orreq.w	r2, r2, #1
 80086f8:	3128      	adds	r1, #40	; 0x28
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	bf08      	it	eq
 80086fe:	f042 0201 	orreq.w	r2, r2, #1
 8008702:	3428      	adds	r4, #40	; 0x28
 8008704:	428b      	cmp	r3, r1
 8008706:	bf08      	it	eq
 8008708:	f042 0201 	orreq.w	r2, r2, #1
 800870c:	3128      	adds	r1, #40	; 0x28
 800870e:	42a3      	cmp	r3, r4
 8008710:	bf08      	it	eq
 8008712:	f042 0201 	orreq.w	r2, r2, #1
 8008716:	428b      	cmp	r3, r1
 8008718:	bf08      	it	eq
 800871a:	f042 0201 	orreq.w	r2, r2, #1
 800871e:	b912      	cbnz	r2, 8008726 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8008720:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d113      	bne.n	800874e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008726:	b2db      	uxtb	r3, r3
 8008728:	4c1a      	ldr	r4, [pc, #104]	; (8008794 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800872a:	4a1b      	ldr	r2, [pc, #108]	; (8008798 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800872c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800872e:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008730:	4d1a      	ldr	r5, [pc, #104]	; (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008732:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008736:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008738:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800873c:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008740:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008742:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008746:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008748:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800874a:	bc30      	pop	{r4, r5}
 800874c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800874e:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008750:	4913      	ldr	r1, [pc, #76]	; (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008752:	4c14      	ldr	r4, [pc, #80]	; (80087a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008754:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008756:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008758:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800875a:	fba4 2302 	umull	r2, r3, r4, r2
 800875e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008762:	d800      	bhi.n	8008766 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8008764:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008766:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008768:	f003 051f 	and.w	r5, r3, #31
 800876c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800876e:	4c0f      	ldr	r4, [pc, #60]	; (80087ac <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008770:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008772:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008774:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008776:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008778:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800877a:	6602      	str	r2, [r0, #96]	; 0x60
}
 800877c:	e7e5      	b.n	800874a <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800877e:	bf00      	nop
 8008780:	58025408 	.word	0x58025408
 8008784:	58025430 	.word	0x58025430
 8008788:	5802541c 	.word	0x5802541c
 800878c:	58025444 	.word	0x58025444
 8008790:	58025494 	.word	0x58025494
 8008794:	cccccccd 	.word	0xcccccccd
 8008798:	16009600 	.word	0x16009600
 800879c:	58025880 	.word	0x58025880
 80087a0:	bffdfbf0 	.word	0xbffdfbf0
 80087a4:	aaaaaaab 	.word	0xaaaaaaab
 80087a8:	10008200 	.word	0x10008200
 80087ac:	40020880 	.word	0x40020880

080087b0 <HAL_DMA_Init>:
{
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80087b4:	f7fe fa2a 	bl	8006c0c <HAL_GetTick>
  if(hdma == NULL)
 80087b8:	2c00      	cmp	r4, #0
 80087ba:	f000 8177 	beq.w	8008aac <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	4605      	mov	r5, r0
 80087c2:	4a92      	ldr	r2, [pc, #584]	; (8008a0c <HAL_DMA_Init+0x25c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d048      	beq.n	800885a <HAL_DMA_Init+0xaa>
 80087c8:	3218      	adds	r2, #24
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d045      	beq.n	800885a <HAL_DMA_Init+0xaa>
 80087ce:	3230      	adds	r2, #48	; 0x30
 80087d0:	498f      	ldr	r1, [pc, #572]	; (8008a10 <HAL_DMA_Init+0x260>)
 80087d2:	428b      	cmp	r3, r1
 80087d4:	bf18      	it	ne
 80087d6:	4293      	cmpne	r3, r2
 80087d8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80087dc:	bf0c      	ite	eq
 80087de:	2201      	moveq	r2, #1
 80087e0:	2200      	movne	r2, #0
 80087e2:	428b      	cmp	r3, r1
 80087e4:	bf08      	it	eq
 80087e6:	f042 0201 	orreq.w	r2, r2, #1
 80087ea:	3118      	adds	r1, #24
 80087ec:	428b      	cmp	r3, r1
 80087ee:	bf08      	it	eq
 80087f0:	f042 0201 	orreq.w	r2, r2, #1
 80087f4:	3118      	adds	r1, #24
 80087f6:	428b      	cmp	r3, r1
 80087f8:	bf08      	it	eq
 80087fa:	f042 0201 	orreq.w	r2, r2, #1
 80087fe:	3118      	adds	r1, #24
 8008800:	428b      	cmp	r3, r1
 8008802:	bf08      	it	eq
 8008804:	f042 0201 	orreq.w	r2, r2, #1
 8008808:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800880c:	428b      	cmp	r3, r1
 800880e:	bf08      	it	eq
 8008810:	f042 0201 	orreq.w	r2, r2, #1
 8008814:	3118      	adds	r1, #24
 8008816:	428b      	cmp	r3, r1
 8008818:	bf08      	it	eq
 800881a:	f042 0201 	orreq.w	r2, r2, #1
 800881e:	3118      	adds	r1, #24
 8008820:	428b      	cmp	r3, r1
 8008822:	bf08      	it	eq
 8008824:	f042 0201 	orreq.w	r2, r2, #1
 8008828:	3118      	adds	r1, #24
 800882a:	428b      	cmp	r3, r1
 800882c:	bf08      	it	eq
 800882e:	f042 0201 	orreq.w	r2, r2, #1
 8008832:	3118      	adds	r1, #24
 8008834:	428b      	cmp	r3, r1
 8008836:	bf08      	it	eq
 8008838:	f042 0201 	orreq.w	r2, r2, #1
 800883c:	3118      	adds	r1, #24
 800883e:	428b      	cmp	r3, r1
 8008840:	bf08      	it	eq
 8008842:	f042 0201 	orreq.w	r2, r2, #1
 8008846:	3118      	adds	r1, #24
 8008848:	428b      	cmp	r3, r1
 800884a:	bf08      	it	eq
 800884c:	f042 0201 	orreq.w	r2, r2, #1
 8008850:	b91a      	cbnz	r2, 800885a <HAL_DMA_Init+0xaa>
 8008852:	4a70      	ldr	r2, [pc, #448]	; (8008a14 <HAL_DMA_Init+0x264>)
 8008854:	4293      	cmp	r3, r2
 8008856:	f040 8198 	bne.w	8008b8a <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 800885a:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800885c:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 800885e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8008862:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	f022 0201 	bic.w	r2, r2, #1
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e006      	b.n	800887e <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008870:	f7fe f9cc 	bl	8006c0c <HAL_GetTick>
 8008874:	1b43      	subs	r3, r0, r5
 8008876:	2b05      	cmp	r3, #5
 8008878:	f200 80ff 	bhi.w	8008a7a <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	07d6      	lsls	r6, r2, #31
 8008882:	d4f5      	bmi.n	8008870 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8008884:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008888:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800888a:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800888c:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800888e:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008890:	4302      	orrs	r2, r0
 8008892:	6960      	ldr	r0, [r4, #20]
 8008894:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008896:	69e0      	ldr	r0, [r4, #28]
 8008898:	430a      	orrs	r2, r1
 800889a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800889c:	485e      	ldr	r0, [pc, #376]	; (8008a18 <HAL_DMA_Init+0x268>)
 800889e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 80088a0:	6a25      	ldr	r5, [r4, #32]
 80088a2:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80088a4:	4d5d      	ldr	r5, [pc, #372]	; (8008a1c <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 80088a6:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088aa:	2804      	cmp	r0, #4
 80088ac:	f000 8100 	beq.w	8008ab0 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80088b0:	682e      	ldr	r6, [r5, #0]
 80088b2:	4d5b      	ldr	r5, [pc, #364]	; (8008a20 <HAL_DMA_Init+0x270>)
 80088b4:	4035      	ands	r5, r6
 80088b6:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80088ba:	f080 80bb 	bcs.w	8008a34 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80088be:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80088c0:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80088c2:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80088c6:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80088c8:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fe8a 	bl	80085e4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80088d2:	233f      	movs	r3, #63	; 0x3f
 80088d4:	f002 021f 	and.w	r2, r2, #31
 80088d8:	4093      	lsls	r3, r2
 80088da:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	4b4b      	ldr	r3, [pc, #300]	; (8008a0c <HAL_DMA_Init+0x25c>)
 80088e0:	4850      	ldr	r0, [pc, #320]	; (8008a24 <HAL_DMA_Init+0x274>)
 80088e2:	494b      	ldr	r1, [pc, #300]	; (8008a10 <HAL_DMA_Init+0x260>)
 80088e4:	4282      	cmp	r2, r0
 80088e6:	bf18      	it	ne
 80088e8:	429a      	cmpne	r2, r3
 80088ea:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80088ee:	bf0c      	ite	eq
 80088f0:	2301      	moveq	r3, #1
 80088f2:	2300      	movne	r3, #0
 80088f4:	428a      	cmp	r2, r1
 80088f6:	bf08      	it	eq
 80088f8:	f043 0301 	orreq.w	r3, r3, #1
 80088fc:	3130      	adds	r1, #48	; 0x30
 80088fe:	4282      	cmp	r2, r0
 8008900:	bf08      	it	eq
 8008902:	f043 0301 	orreq.w	r3, r3, #1
 8008906:	3030      	adds	r0, #48	; 0x30
 8008908:	428a      	cmp	r2, r1
 800890a:	bf08      	it	eq
 800890c:	f043 0301 	orreq.w	r3, r3, #1
 8008910:	3130      	adds	r1, #48	; 0x30
 8008912:	4282      	cmp	r2, r0
 8008914:	bf08      	it	eq
 8008916:	f043 0301 	orreq.w	r3, r3, #1
 800891a:	3030      	adds	r0, #48	; 0x30
 800891c:	428a      	cmp	r2, r1
 800891e:	bf08      	it	eq
 8008920:	f043 0301 	orreq.w	r3, r3, #1
 8008924:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008928:	4282      	cmp	r2, r0
 800892a:	bf08      	it	eq
 800892c:	f043 0301 	orreq.w	r3, r3, #1
 8008930:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8008934:	428a      	cmp	r2, r1
 8008936:	bf08      	it	eq
 8008938:	f043 0301 	orreq.w	r3, r3, #1
 800893c:	3130      	adds	r1, #48	; 0x30
 800893e:	4282      	cmp	r2, r0
 8008940:	bf08      	it	eq
 8008942:	f043 0301 	orreq.w	r3, r3, #1
 8008946:	3030      	adds	r0, #48	; 0x30
 8008948:	428a      	cmp	r2, r1
 800894a:	bf08      	it	eq
 800894c:	f043 0301 	orreq.w	r3, r3, #1
 8008950:	3130      	adds	r1, #48	; 0x30
 8008952:	4282      	cmp	r2, r0
 8008954:	bf08      	it	eq
 8008956:	f043 0301 	orreq.w	r3, r3, #1
 800895a:	3030      	adds	r0, #48	; 0x30
 800895c:	428a      	cmp	r2, r1
 800895e:	bf08      	it	eq
 8008960:	f043 0301 	orreq.w	r3, r3, #1
 8008964:	3130      	adds	r1, #48	; 0x30
 8008966:	4282      	cmp	r2, r0
 8008968:	bf08      	it	eq
 800896a:	f043 0301 	orreq.w	r3, r3, #1
 800896e:	3030      	adds	r0, #48	; 0x30
 8008970:	428a      	cmp	r2, r1
 8008972:	bf08      	it	eq
 8008974:	f043 0301 	orreq.w	r3, r3, #1
 8008978:	492b      	ldr	r1, [pc, #172]	; (8008a28 <HAL_DMA_Init+0x278>)
 800897a:	4282      	cmp	r2, r0
 800897c:	bf08      	it	eq
 800897e:	f043 0301 	orreq.w	r3, r3, #1
 8008982:	482a      	ldr	r0, [pc, #168]	; (8008a2c <HAL_DMA_Init+0x27c>)
 8008984:	428a      	cmp	r2, r1
 8008986:	bf08      	it	eq
 8008988:	f043 0301 	orreq.w	r3, r3, #1
 800898c:	3128      	adds	r1, #40	; 0x28
 800898e:	4282      	cmp	r2, r0
 8008990:	bf08      	it	eq
 8008992:	f043 0301 	orreq.w	r3, r3, #1
 8008996:	3028      	adds	r0, #40	; 0x28
 8008998:	428a      	cmp	r2, r1
 800899a:	bf08      	it	eq
 800899c:	f043 0301 	orreq.w	r3, r3, #1
 80089a0:	3128      	adds	r1, #40	; 0x28
 80089a2:	4282      	cmp	r2, r0
 80089a4:	bf08      	it	eq
 80089a6:	f043 0301 	orreq.w	r3, r3, #1
 80089aa:	3028      	adds	r0, #40	; 0x28
 80089ac:	428a      	cmp	r2, r1
 80089ae:	bf08      	it	eq
 80089b0:	f043 0301 	orreq.w	r3, r3, #1
 80089b4:	3128      	adds	r1, #40	; 0x28
 80089b6:	4282      	cmp	r2, r0
 80089b8:	bf08      	it	eq
 80089ba:	f043 0301 	orreq.w	r3, r3, #1
 80089be:	428a      	cmp	r2, r1
 80089c0:	bf08      	it	eq
 80089c2:	f043 0301 	orreq.w	r3, r3, #1
 80089c6:	b913      	cbnz	r3, 80089ce <HAL_DMA_Init+0x21e>
 80089c8:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <HAL_DMA_Init+0x280>)
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d118      	bne.n	8008a00 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff fe82 	bl	80086d8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80089d4:	68a3      	ldr	r3, [r4, #8]
 80089d6:	2b80      	cmp	r3, #128	; 0x80
 80089d8:	d05c      	beq.n	8008a94 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089da:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089dc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089de:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80089e0:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089e2:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80089e6:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089e8:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089ea:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80089ec:	d859      	bhi.n	8008aa2 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80089ee:	1e50      	subs	r0, r2, #1
 80089f0:	2807      	cmp	r0, #7
 80089f2:	d96e      	bls.n	8008ad2 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80089f6:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80089fa:	2000      	movs	r0, #0
 80089fc:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089fe:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a00:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008a02:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a04:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008a06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0c:	40020010 	.word	0x40020010
 8008a10:	40020040 	.word	0x40020040
 8008a14:	400204b8 	.word	0x400204b8
 8008a18:	fe10803f 	.word	0xfe10803f
 8008a1c:	5c001000 	.word	0x5c001000
 8008a20:	ffff0000 	.word	0xffff0000
 8008a24:	40020028 	.word	0x40020028
 8008a28:	58025408 	.word	0x58025408
 8008a2c:	5802541c 	.word	0x5802541c
 8008a30:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008a34:	6865      	ldr	r5, [r4, #4]
 8008a36:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 8008a3a:	2e1f      	cmp	r6, #31
 8008a3c:	d924      	bls.n	8008a88 <HAL_DMA_Init+0x2d8>
 8008a3e:	3d4f      	subs	r5, #79	; 0x4f
 8008a40:	2d03      	cmp	r5, #3
 8008a42:	d801      	bhi.n	8008a48 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 8008a44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008a48:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a4a:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008a4c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a4e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8008a52:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a56:	f47f af37 	bne.w	80088c8 <HAL_DMA_Init+0x118>
 8008a5a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8008a5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008a5e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008a60:	2d00      	cmp	r5, #0
 8008a62:	f43f af31 	beq.w	80088c8 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a66:	2900      	cmp	r1, #0
 8008a68:	d169      	bne.n	8008b3e <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 8008a6a:	2801      	cmp	r0, #1
 8008a6c:	f000 8088 	beq.w	8008b80 <HAL_DMA_Init+0x3d0>
 8008a70:	f030 0102 	bics.w	r1, r0, #2
 8008a74:	f47f af28 	bne.w	80088c8 <HAL_DMA_Init+0x118>
 8008a78:	e069      	b.n	8008b4e <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a7a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8008a7c:	2303      	movs	r3, #3
        return HAL_ERROR;
 8008a7e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a80:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8008a82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008a88:	4d73      	ldr	r5, [pc, #460]	; (8008c58 <HAL_DMA_Init+0x4a8>)
 8008a8a:	fa25 f606 	lsr.w	r6, r5, r6
 8008a8e:	07f5      	lsls	r5, r6, #31
 8008a90:	d5da      	bpl.n	8008a48 <HAL_DMA_Init+0x298>
 8008a92:	e7d7      	b.n	8008a44 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008a94:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a96:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008a98:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008a9c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008a9e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aa0:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8008aa2:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8008aa4:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008aa8:	6763      	str	r3, [r4, #116]	; 0x74
 8008aaa:	e7a9      	b.n	8008a00 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8008aac:	2001      	movs	r0, #1
}
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008ab0:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008ab2:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8008ab6:	432e      	orrs	r6, r5
 8008ab8:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008aba:	4e68      	ldr	r6, [pc, #416]	; (8008c5c <HAL_DMA_Init+0x4ac>)
 8008abc:	403e      	ands	r6, r7
 8008abe:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8008ac2:	d2b7      	bcs.n	8008a34 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008ac4:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008ac6:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ac8:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8008acc:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ad0:	e7c4      	b.n	8008a5c <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ad2:	6821      	ldr	r1, [r4, #0]
 8008ad4:	4b62      	ldr	r3, [pc, #392]	; (8008c60 <HAL_DMA_Init+0x4b0>)
 8008ad6:	4d63      	ldr	r5, [pc, #396]	; (8008c64 <HAL_DMA_Init+0x4b4>)
 8008ad8:	42a9      	cmp	r1, r5
 8008ada:	bf18      	it	ne
 8008adc:	4299      	cmpne	r1, r3
 8008ade:	f105 0514 	add.w	r5, r5, #20
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	42a9      	cmp	r1, r5
 8008aea:	bf08      	it	eq
 8008aec:	f043 0301 	orreq.w	r3, r3, #1
 8008af0:	3514      	adds	r5, #20
 8008af2:	42a9      	cmp	r1, r5
 8008af4:	bf08      	it	eq
 8008af6:	f043 0301 	orreq.w	r3, r3, #1
 8008afa:	3514      	adds	r5, #20
 8008afc:	42a9      	cmp	r1, r5
 8008afe:	bf08      	it	eq
 8008b00:	f043 0301 	orreq.w	r3, r3, #1
 8008b04:	3514      	adds	r5, #20
 8008b06:	42a9      	cmp	r1, r5
 8008b08:	bf08      	it	eq
 8008b0a:	f043 0301 	orreq.w	r3, r3, #1
 8008b0e:	3514      	adds	r5, #20
 8008b10:	42a9      	cmp	r1, r5
 8008b12:	bf08      	it	eq
 8008b14:	f043 0301 	orreq.w	r3, r3, #1
 8008b18:	b93b      	cbnz	r3, 8008b2a <HAL_DMA_Init+0x37a>
 8008b1a:	4b53      	ldr	r3, [pc, #332]	; (8008c68 <HAL_DMA_Init+0x4b8>)
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	d004      	beq.n	8008b2a <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b20:	4b52      	ldr	r3, [pc, #328]	; (8008c6c <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b22:	4953      	ldr	r1, [pc, #332]	; (8008c70 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b28:	e003      	b.n	8008b32 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b2a:	4b52      	ldr	r3, [pc, #328]	; (8008c74 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b2c:	4952      	ldr	r1, [pc, #328]	; (8008c78 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b32:	2201      	movs	r2, #1
 8008b34:	4082      	lsls	r2, r0
 8008b36:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8008b3a:	6762      	str	r2, [r4, #116]	; 0x74
 8008b3c:	e75d      	b.n	80089fa <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b3e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8008b42:	d00e      	beq.n	8008b62 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 8008b44:	2802      	cmp	r0, #2
 8008b46:	d905      	bls.n	8008b54 <HAL_DMA_Init+0x3a4>
 8008b48:	2803      	cmp	r0, #3
 8008b4a:	f47f aebd 	bne.w	80088c8 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b4e:	01e9      	lsls	r1, r5, #7
 8008b50:	f57f aeba 	bpl.w	80088c8 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8008b54:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b56:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8008b58:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b5a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8008b5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8008b62:	2803      	cmp	r0, #3
 8008b64:	f63f aeb0 	bhi.w	80088c8 <HAL_DMA_Init+0x118>
 8008b68:	a101      	add	r1, pc, #4	; (adr r1, 8008b70 <HAL_DMA_Init+0x3c0>)
 8008b6a:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b55 	.word	0x08008b55
 8008b74:	08008b4f 	.word	0x08008b4f
 8008b78:	08008b55 	.word	0x08008b55
 8008b7c:	08008b81 	.word	0x08008b81
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b80:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8008b84:	f47f aea0 	bne.w	80088c8 <HAL_DMA_Init+0x118>
 8008b88:	e7e4      	b.n	8008b54 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b8a:	4a35      	ldr	r2, [pc, #212]	; (8008c60 <HAL_DMA_Init+0x4b0>)
 8008b8c:	4835      	ldr	r0, [pc, #212]	; (8008c64 <HAL_DMA_Init+0x4b4>)
 8008b8e:	493b      	ldr	r1, [pc, #236]	; (8008c7c <HAL_DMA_Init+0x4cc>)
 8008b90:	4283      	cmp	r3, r0
 8008b92:	bf18      	it	ne
 8008b94:	4293      	cmpne	r3, r2
 8008b96:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8008b9a:	bf0c      	ite	eq
 8008b9c:	2201      	moveq	r2, #1
 8008b9e:	2200      	movne	r2, #0
 8008ba0:	428b      	cmp	r3, r1
 8008ba2:	bf08      	it	eq
 8008ba4:	f042 0201 	orreq.w	r2, r2, #1
 8008ba8:	3128      	adds	r1, #40	; 0x28
 8008baa:	4283      	cmp	r3, r0
 8008bac:	bf08      	it	eq
 8008bae:	f042 0201 	orreq.w	r2, r2, #1
 8008bb2:	3028      	adds	r0, #40	; 0x28
 8008bb4:	428b      	cmp	r3, r1
 8008bb6:	bf08      	it	eq
 8008bb8:	f042 0201 	orreq.w	r2, r2, #1
 8008bbc:	3128      	adds	r1, #40	; 0x28
 8008bbe:	4283      	cmp	r3, r0
 8008bc0:	bf08      	it	eq
 8008bc2:	f042 0201 	orreq.w	r2, r2, #1
 8008bc6:	428b      	cmp	r3, r1
 8008bc8:	bf08      	it	eq
 8008bca:	f042 0201 	orreq.w	r2, r2, #1
 8008bce:	b912      	cbnz	r2, 8008bd6 <HAL_DMA_Init+0x426>
 8008bd0:	4a25      	ldr	r2, [pc, #148]	; (8008c68 <HAL_DMA_Init+0x4b8>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d138      	bne.n	8008c48 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8008bd6:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bd8:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008bda:	4d29      	ldr	r5, [pc, #164]	; (8008c80 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bdc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008be0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008be4:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008be6:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008be8:	68a2      	ldr	r2, [r4, #8]
 8008bea:	2a40      	cmp	r2, #64	; 0x40
 8008bec:	d02a      	beq.n	8008c44 <HAL_DMA_Init+0x494>
 8008bee:	2a80      	cmp	r2, #128	; 0x80
 8008bf0:	bf0c      	ite	eq
 8008bf2:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8008bf6:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008bf8:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008bfa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008bfe:	08d2      	lsrs	r2, r2, #3
 8008c00:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008c04:	6961      	ldr	r1, [r4, #20]
 8008c06:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008c0a:	69a1      	ldr	r1, [r4, #24]
 8008c0c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008c10:	69e1      	ldr	r1, [r4, #28]
 8008c12:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008c16:	491b      	ldr	r1, [pc, #108]	; (8008c84 <HAL_DMA_Init+0x4d4>)
 8008c18:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8008c1c:	4419      	add	r1, r3
 8008c1e:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008c20:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008c22:	4819      	ldr	r0, [pc, #100]	; (8008c88 <HAL_DMA_Init+0x4d8>)
 8008c24:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c28:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008c2a:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008c2c:	090b      	lsrs	r3, r1, #4
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c32:	f7ff fcd7 	bl	80085e4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008c36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f002 021f 	and.w	r2, r2, #31
 8008c3e:	4093      	lsls	r3, r2
 8008c40:	6043      	str	r3, [r0, #4]
 8008c42:	e64b      	b.n	80088dc <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008c44:	2010      	movs	r0, #16
 8008c46:	e7d7      	b.n	8008bf8 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008c48:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008c4a:	2303      	movs	r3, #3
    return HAL_ERROR;
 8008c4c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008c4e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008c50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c56:	bf00      	nop
 8008c58:	c3c0003f 	.word	0xc3c0003f
 8008c5c:	ffff0000 	.word	0xffff0000
 8008c60:	58025408 	.word	0x58025408
 8008c64:	5802541c 	.word	0x5802541c
 8008c68:	58025494 	.word	0x58025494
 8008c6c:	1000823f 	.word	0x1000823f
 8008c70:	40020940 	.word	0x40020940
 8008c74:	1600963f 	.word	0x1600963f
 8008c78:	58025940 	.word	0x58025940
 8008c7c:	58025430 	.word	0x58025430
 8008c80:	fffe000f 	.word	0xfffe000f
 8008c84:	a7fdabf8 	.word	0xa7fdabf8
 8008c88:	cccccccd 	.word	0xcccccccd

08008c8c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f000 8177 	beq.w	8008f80 <HAL_DMA_Start_IT+0x2f4>
 8008c92:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8008c94:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8008c98:	2801      	cmp	r0, #1
 8008c9a:	f000 8173 	beq.w	8008f84 <HAL_DMA_Start_IT+0x2f8>
 8008c9e:	2001      	movs	r0, #1
{
 8008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ca4:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8008ca8:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008cac:	4284      	cmp	r4, r0
 8008cae:	d008      	beq.n	8008cc2 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8008cb4:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008cb6:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8008cba:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008cc2:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8008cc4:	f8dc 4000 	ldr.w	r4, [ip]
 8008cc8:	4d53      	ldr	r5, [pc, #332]	; (8008e18 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8008cca:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cce:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008cd0:	4e52      	ldr	r6, [pc, #328]	; (8008e1c <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cd2:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8008cd6:	4852      	ldr	r0, [pc, #328]	; (8008e20 <HAL_DMA_Start_IT+0x194>)
 8008cd8:	42ac      	cmp	r4, r5
 8008cda:	bf18      	it	ne
 8008cdc:	4284      	cmpne	r4, r0
 8008cde:	f105 0518 	add.w	r5, r5, #24
 8008ce2:	bf0c      	ite	eq
 8008ce4:	2001      	moveq	r0, #1
 8008ce6:	2000      	movne	r0, #0
 8008ce8:	42ac      	cmp	r4, r5
 8008cea:	bf08      	it	eq
 8008cec:	f040 0001 	orreq.w	r0, r0, #1
 8008cf0:	3518      	adds	r5, #24
 8008cf2:	42ac      	cmp	r4, r5
 8008cf4:	bf08      	it	eq
 8008cf6:	f040 0001 	orreq.w	r0, r0, #1
 8008cfa:	3518      	adds	r5, #24
 8008cfc:	42ac      	cmp	r4, r5
 8008cfe:	bf08      	it	eq
 8008d00:	f040 0001 	orreq.w	r0, r0, #1
 8008d04:	3518      	adds	r5, #24
 8008d06:	42ac      	cmp	r4, r5
 8008d08:	bf08      	it	eq
 8008d0a:	f040 0001 	orreq.w	r0, r0, #1
 8008d0e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8008d12:	42ac      	cmp	r4, r5
 8008d14:	bf08      	it	eq
 8008d16:	f040 0001 	orreq.w	r0, r0, #1
 8008d1a:	3518      	adds	r5, #24
 8008d1c:	42ac      	cmp	r4, r5
 8008d1e:	bf08      	it	eq
 8008d20:	f040 0001 	orreq.w	r0, r0, #1
 8008d24:	3518      	adds	r5, #24
 8008d26:	42ac      	cmp	r4, r5
 8008d28:	bf08      	it	eq
 8008d2a:	f040 0001 	orreq.w	r0, r0, #1
 8008d2e:	3518      	adds	r5, #24
 8008d30:	42ac      	cmp	r4, r5
 8008d32:	bf08      	it	eq
 8008d34:	f040 0001 	orreq.w	r0, r0, #1
 8008d38:	3518      	adds	r5, #24
 8008d3a:	42ac      	cmp	r4, r5
 8008d3c:	bf08      	it	eq
 8008d3e:	f040 0001 	orreq.w	r0, r0, #1
 8008d42:	3518      	adds	r5, #24
 8008d44:	42ac      	cmp	r4, r5
 8008d46:	bf08      	it	eq
 8008d48:	f040 0001 	orreq.w	r0, r0, #1
 8008d4c:	3518      	adds	r5, #24
 8008d4e:	42ac      	cmp	r4, r5
 8008d50:	bf08      	it	eq
 8008d52:	f040 0001 	orreq.w	r0, r0, #1
 8008d56:	3518      	adds	r5, #24
 8008d58:	42ac      	cmp	r4, r5
 8008d5a:	bf14      	ite	ne
 8008d5c:	4681      	movne	r9, r0
 8008d5e:	f040 0901 	orreq.w	r9, r0, #1
 8008d62:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8008d66:	42ac      	cmp	r4, r5
 8008d68:	bf18      	it	ne
 8008d6a:	42b4      	cmpne	r4, r6
 8008d6c:	bf0c      	ite	eq
 8008d6e:	2501      	moveq	r5, #1
 8008d70:	2500      	movne	r5, #0
 8008d72:	d002      	beq.n	8008d7a <HAL_DMA_Start_IT+0xee>
 8008d74:	f1b9 0f00 	cmp.w	r9, #0
 8008d78:	d054      	beq.n	8008e24 <HAL_DMA_Start_IT+0x198>
 8008d7a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d7c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8008d80:	f026 0601 	bic.w	r6, r6, #1
 8008d84:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d86:	2d00      	cmp	r5, #0
 8008d88:	d078      	beq.n	8008e7c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d8a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8008d8e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008d90:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008d94:	b117      	cbz	r7, 8008d9c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d96:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8008d9a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d9c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8008da0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8008da4:	f006 081f 	and.w	r8, r6, #31
 8008da8:	fa0e fe08 	lsl.w	lr, lr, r8
 8008dac:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008db0:	6826      	ldr	r6, [r4, #0]
 8008db2:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8008db6:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008db8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dba:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008dbe:	2b40      	cmp	r3, #64	; 0x40
 8008dc0:	f000 80e2 	beq.w	8008f88 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008dc4:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008dc6:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dc8:	b91d      	cbnz	r5, 8008dd2 <HAL_DMA_Start_IT+0x146>
 8008dca:	f1b9 0f00 	cmp.w	r9, #0
 8008dce:	f000 80e1 	beq.w	8008f94 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	f023 031e 	bic.w	r3, r3, #30
 8008dd8:	f043 0316 	orr.w	r3, r3, #22
 8008ddc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008dde:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008de2:	b11b      	cbz	r3, 8008dec <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	f043 0308 	orr.w	r3, r3, #8
 8008dea:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008dec:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	03d2      	lsls	r2, r2, #15
 8008df4:	d503      	bpl.n	8008dfe <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dfc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8008dfe:	b11f      	cbz	r7, 8008e08 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e06:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8008e08:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008e0c:	f043 0301 	orr.w	r3, r3, #1
 8008e10:	6023      	str	r3, [r4, #0]
}
 8008e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e16:	bf00      	nop
 8008e18:	40020058 	.word	0x40020058
 8008e1c:	40020010 	.word	0x40020010
 8008e20:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e24:	4f61      	ldr	r7, [pc, #388]	; (8008fac <HAL_DMA_Start_IT+0x320>)
 8008e26:	4e62      	ldr	r6, [pc, #392]	; (8008fb0 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e28:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e2c:	42b4      	cmp	r4, r6
 8008e2e:	bf18      	it	ne
 8008e30:	42bc      	cmpne	r4, r7
 8008e32:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8008e36:	bf0c      	ite	eq
 8008e38:	2701      	moveq	r7, #1
 8008e3a:	2700      	movne	r7, #0
 8008e3c:	42b4      	cmp	r4, r6
 8008e3e:	bf08      	it	eq
 8008e40:	f047 0701 	orreq.w	r7, r7, #1
 8008e44:	3614      	adds	r6, #20
 8008e46:	42b4      	cmp	r4, r6
 8008e48:	bf08      	it	eq
 8008e4a:	f047 0701 	orreq.w	r7, r7, #1
 8008e4e:	3614      	adds	r6, #20
 8008e50:	42b4      	cmp	r4, r6
 8008e52:	bf08      	it	eq
 8008e54:	f047 0701 	orreq.w	r7, r7, #1
 8008e58:	3614      	adds	r6, #20
 8008e5a:	42b4      	cmp	r4, r6
 8008e5c:	bf08      	it	eq
 8008e5e:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8008e62:	6826      	ldr	r6, [r4, #0]
 8008e64:	f026 0601 	bic.w	r6, r6, #1
 8008e68:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e6a:	4e52      	ldr	r6, [pc, #328]	; (8008fb4 <HAL_DMA_Start_IT+0x328>)
 8008e6c:	42b4      	cmp	r4, r6
 8008e6e:	bf08      	it	eq
 8008e70:	f047 0701 	orreq.w	r7, r7, #1
 8008e74:	b917      	cbnz	r7, 8008e7c <HAL_DMA_Start_IT+0x1f0>
 8008e76:	4f50      	ldr	r7, [pc, #320]	; (8008fb8 <HAL_DMA_Start_IT+0x32c>)
 8008e78:	42bc      	cmp	r4, r7
 8008e7a:	d10b      	bne.n	8008e94 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e7c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8008e80:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008e82:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008e86:	b117      	cbz	r7, 8008e8e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e88:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 8008e8c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e8e:	f1b9 0f00 	cmp.w	r9, #0
 8008e92:	d183      	bne.n	8008d9c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008e94:	4f46      	ldr	r7, [pc, #280]	; (8008fb0 <HAL_DMA_Start_IT+0x324>)
 8008e96:	f8df e114 	ldr.w	lr, [pc, #276]	; 8008fac <HAL_DMA_Start_IT+0x320>
 8008e9a:	4574      	cmp	r4, lr
 8008e9c:	bf18      	it	ne
 8008e9e:	42bc      	cmpne	r4, r7
 8008ea0:	f10e 0e14 	add.w	lr, lr, #20
 8008ea4:	bf0c      	ite	eq
 8008ea6:	2701      	moveq	r7, #1
 8008ea8:	2700      	movne	r7, #0
 8008eaa:	4574      	cmp	r4, lr
 8008eac:	bf08      	it	eq
 8008eae:	f047 0701 	orreq.w	r7, r7, #1
 8008eb2:	f10e 0e14 	add.w	lr, lr, #20
 8008eb6:	4574      	cmp	r4, lr
 8008eb8:	bf08      	it	eq
 8008eba:	f047 0701 	orreq.w	r7, r7, #1
 8008ebe:	f10e 0e14 	add.w	lr, lr, #20
 8008ec2:	4574      	cmp	r4, lr
 8008ec4:	bf08      	it	eq
 8008ec6:	f047 0701 	orreq.w	r7, r7, #1
 8008eca:	f10e 0e14 	add.w	lr, lr, #20
 8008ece:	4574      	cmp	r4, lr
 8008ed0:	bf08      	it	eq
 8008ed2:	f047 0701 	orreq.w	r7, r7, #1
 8008ed6:	f10e 0e14 	add.w	lr, lr, #20
 8008eda:	4574      	cmp	r4, lr
 8008edc:	bf08      	it	eq
 8008ede:	f047 0701 	orreq.w	r7, r7, #1
 8008ee2:	b917      	cbnz	r7, 8008eea <HAL_DMA_Start_IT+0x25e>
 8008ee4:	4f34      	ldr	r7, [pc, #208]	; (8008fb8 <HAL_DMA_Start_IT+0x32c>)
 8008ee6:	42bc      	cmp	r4, r7
 8008ee8:	d154      	bne.n	8008f94 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008eea:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8008eee:	2701      	movs	r7, #1
 8008ef0:	f000 0e1f 	and.w	lr, r0, #31
 8008ef4:	fa07 f70e 	lsl.w	r7, r7, lr
 8008ef8:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008efc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008efe:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008f02:	2b40      	cmp	r3, #64	; 0x40
 8008f04:	d043      	beq.n	8008f8e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008f06:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008f08:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	f023 030e 	bic.w	r3, r3, #14
 8008f10:	f043 030a 	orr.w	r3, r3, #10
 8008f14:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008f16:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d02d      	beq.n	8008f7a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	f043 0304 	orr.w	r3, r3, #4
 8008f24:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f26:	4b21      	ldr	r3, [pc, #132]	; (8008fac <HAL_DMA_Start_IT+0x320>)
 8008f28:	4a21      	ldr	r2, [pc, #132]	; (8008fb0 <HAL_DMA_Start_IT+0x324>)
 8008f2a:	4294      	cmp	r4, r2
 8008f2c:	bf18      	it	ne
 8008f2e:	429c      	cmpne	r4, r3
 8008f30:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8008f34:	bf0c      	ite	eq
 8008f36:	2301      	moveq	r3, #1
 8008f38:	2300      	movne	r3, #0
 8008f3a:	4294      	cmp	r4, r2
 8008f3c:	bf08      	it	eq
 8008f3e:	f043 0301 	orreq.w	r3, r3, #1
 8008f42:	3214      	adds	r2, #20
 8008f44:	4294      	cmp	r4, r2
 8008f46:	bf08      	it	eq
 8008f48:	f043 0301 	orreq.w	r3, r3, #1
 8008f4c:	3214      	adds	r2, #20
 8008f4e:	4294      	cmp	r4, r2
 8008f50:	bf08      	it	eq
 8008f52:	f043 0301 	orreq.w	r3, r3, #1
 8008f56:	3214      	adds	r2, #20
 8008f58:	4294      	cmp	r4, r2
 8008f5a:	bf08      	it	eq
 8008f5c:	f043 0301 	orreq.w	r3, r3, #1
 8008f60:	3214      	adds	r2, #20
 8008f62:	4294      	cmp	r4, r2
 8008f64:	bf08      	it	eq
 8008f66:	f043 0301 	orreq.w	r3, r3, #1
 8008f6a:	3214      	adds	r2, #20
 8008f6c:	4294      	cmp	r4, r2
 8008f6e:	bf08      	it	eq
 8008f70:	f043 0301 	orreq.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f43f af47 	beq.w	8008e08 <HAL_DMA_Start_IT+0x17c>
 8008f7a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8008f7e:	e735      	b.n	8008dec <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8008f80:	2001      	movs	r0, #1
 8008f82:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8008f84:	2002      	movs	r0, #2
}
 8008f86:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008f88:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008f8a:	60e1      	str	r1, [r4, #12]
 8008f8c:	e71c      	b.n	8008dc8 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008f8e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008f90:	60e1      	str	r1, [r4, #12]
 8008f92:	e7ba      	b.n	8008f0a <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	f023 030e 	bic.w	r3, r3, #14
 8008f9a:	f043 030a 	orr.w	r3, r3, #10
 8008f9e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008fa0:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1ba      	bne.n	8008f1e <HAL_DMA_Start_IT+0x292>
 8008fa8:	e7bd      	b.n	8008f26 <HAL_DMA_Start_IT+0x29a>
 8008faa:	bf00      	nop
 8008fac:	5802541c 	.word	0x5802541c
 8008fb0:	58025408 	.word	0x58025408
 8008fb4:	58025480 	.word	0x58025480
 8008fb8:	58025494 	.word	0x58025494

08008fbc <HAL_DMA_Abort>:
{
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008fc0:	f7fd fe24 	bl	8006c0c <HAL_GetTick>
  if(hdma == NULL)
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	f000 8124 	beq.w	8009212 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008fca:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f040 80dd 	bne.w	800918e <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008fd4:	682c      	ldr	r4, [r5, #0]
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	4b8f      	ldr	r3, [pc, #572]	; (8009218 <HAL_DMA_Abort+0x25c>)
 8008fda:	4890      	ldr	r0, [pc, #576]	; (800921c <HAL_DMA_Abort+0x260>)
 8008fdc:	4a90      	ldr	r2, [pc, #576]	; (8009220 <HAL_DMA_Abort+0x264>)
 8008fde:	4284      	cmp	r4, r0
 8008fe0:	bf18      	it	ne
 8008fe2:	429c      	cmpne	r4, r3
 8008fe4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008fe8:	498e      	ldr	r1, [pc, #568]	; (8009224 <HAL_DMA_Abort+0x268>)
 8008fea:	bf0c      	ite	eq
 8008fec:	2301      	moveq	r3, #1
 8008fee:	2300      	movne	r3, #0
 8008ff0:	4284      	cmp	r4, r0
 8008ff2:	bf08      	it	eq
 8008ff4:	f043 0301 	orreq.w	r3, r3, #1
 8008ff8:	3018      	adds	r0, #24
 8008ffa:	4284      	cmp	r4, r0
 8008ffc:	bf08      	it	eq
 8008ffe:	f043 0301 	orreq.w	r3, r3, #1
 8009002:	3018      	adds	r0, #24
 8009004:	4284      	cmp	r4, r0
 8009006:	bf08      	it	eq
 8009008:	f043 0301 	orreq.w	r3, r3, #1
 800900c:	3018      	adds	r0, #24
 800900e:	4284      	cmp	r4, r0
 8009010:	bf08      	it	eq
 8009012:	f043 0301 	orreq.w	r3, r3, #1
 8009016:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800901a:	4284      	cmp	r4, r0
 800901c:	bf08      	it	eq
 800901e:	f043 0301 	orreq.w	r3, r3, #1
 8009022:	3018      	adds	r0, #24
 8009024:	4284      	cmp	r4, r0
 8009026:	bf08      	it	eq
 8009028:	f043 0301 	orreq.w	r3, r3, #1
 800902c:	3018      	adds	r0, #24
 800902e:	4284      	cmp	r4, r0
 8009030:	bf08      	it	eq
 8009032:	f043 0301 	orreq.w	r3, r3, #1
 8009036:	3018      	adds	r0, #24
 8009038:	4284      	cmp	r4, r0
 800903a:	bf08      	it	eq
 800903c:	f043 0301 	orreq.w	r3, r3, #1
 8009040:	3018      	adds	r0, #24
 8009042:	4284      	cmp	r4, r0
 8009044:	bf08      	it	eq
 8009046:	f043 0301 	orreq.w	r3, r3, #1
 800904a:	3018      	adds	r0, #24
 800904c:	4284      	cmp	r4, r0
 800904e:	bf08      	it	eq
 8009050:	f043 0301 	orreq.w	r3, r3, #1
 8009054:	3018      	adds	r0, #24
 8009056:	4284      	cmp	r4, r0
 8009058:	bf08      	it	eq
 800905a:	f043 0301 	orreq.w	r3, r3, #1
 800905e:	3018      	adds	r0, #24
 8009060:	4284      	cmp	r4, r0
 8009062:	bf08      	it	eq
 8009064:	f043 0301 	orreq.w	r3, r3, #1
 8009068:	428c      	cmp	r4, r1
 800906a:	bf18      	it	ne
 800906c:	4294      	cmpne	r4, r2
 800906e:	bf0c      	ite	eq
 8009070:	2201      	moveq	r2, #1
 8009072:	2200      	movne	r2, #0
 8009074:	d002      	beq.n	800907c <HAL_DMA_Abort+0xc0>
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 8090 	beq.w	800919c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800907c:	6821      	ldr	r1, [r4, #0]
 800907e:	f021 011e 	bic.w	r1, r1, #30
 8009082:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009084:	6961      	ldr	r1, [r4, #20]
 8009086:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800908a:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800908c:	2a00      	cmp	r2, #0
 800908e:	f000 80b0 	beq.w	80091f2 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009092:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009094:	6813      	ldr	r3, [r2, #0]
 8009096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800909a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f023 0301 	bic.w	r3, r3, #1
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	e005      	b.n	80090b2 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090a6:	f7fd fdb1 	bl	8006c0c <HAL_GetTick>
 80090aa:	1b83      	subs	r3, r0, r6
 80090ac:	2b05      	cmp	r3, #5
 80090ae:	f200 80a6 	bhi.w	80091fe <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	07db      	lsls	r3, r3, #31
 80090b6:	d4f6      	bmi.n	80090a6 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090b8:	682a      	ldr	r2, [r5, #0]
 80090ba:	4b57      	ldr	r3, [pc, #348]	; (8009218 <HAL_DMA_Abort+0x25c>)
 80090bc:	4857      	ldr	r0, [pc, #348]	; (800921c <HAL_DMA_Abort+0x260>)
 80090be:	495a      	ldr	r1, [pc, #360]	; (8009228 <HAL_DMA_Abort+0x26c>)
 80090c0:	4282      	cmp	r2, r0
 80090c2:	bf18      	it	ne
 80090c4:	429a      	cmpne	r2, r3
 80090c6:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80090ca:	bf0c      	ite	eq
 80090cc:	2301      	moveq	r3, #1
 80090ce:	2300      	movne	r3, #0
 80090d0:	428a      	cmp	r2, r1
 80090d2:	bf08      	it	eq
 80090d4:	f043 0301 	orreq.w	r3, r3, #1
 80090d8:	3130      	adds	r1, #48	; 0x30
 80090da:	4282      	cmp	r2, r0
 80090dc:	bf08      	it	eq
 80090de:	f043 0301 	orreq.w	r3, r3, #1
 80090e2:	3030      	adds	r0, #48	; 0x30
 80090e4:	428a      	cmp	r2, r1
 80090e6:	bf08      	it	eq
 80090e8:	f043 0301 	orreq.w	r3, r3, #1
 80090ec:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80090f0:	4282      	cmp	r2, r0
 80090f2:	bf08      	it	eq
 80090f4:	f043 0301 	orreq.w	r3, r3, #1
 80090f8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80090fc:	428a      	cmp	r2, r1
 80090fe:	bf08      	it	eq
 8009100:	f043 0301 	orreq.w	r3, r3, #1
 8009104:	3130      	adds	r1, #48	; 0x30
 8009106:	4282      	cmp	r2, r0
 8009108:	bf08      	it	eq
 800910a:	f043 0301 	orreq.w	r3, r3, #1
 800910e:	3030      	adds	r0, #48	; 0x30
 8009110:	428a      	cmp	r2, r1
 8009112:	bf08      	it	eq
 8009114:	f043 0301 	orreq.w	r3, r3, #1
 8009118:	3130      	adds	r1, #48	; 0x30
 800911a:	4282      	cmp	r2, r0
 800911c:	bf08      	it	eq
 800911e:	f043 0301 	orreq.w	r3, r3, #1
 8009122:	3030      	adds	r0, #48	; 0x30
 8009124:	428a      	cmp	r2, r1
 8009126:	bf08      	it	eq
 8009128:	f043 0301 	orreq.w	r3, r3, #1
 800912c:	3130      	adds	r1, #48	; 0x30
 800912e:	4282      	cmp	r2, r0
 8009130:	bf08      	it	eq
 8009132:	f043 0301 	orreq.w	r3, r3, #1
 8009136:	428a      	cmp	r2, r1
 8009138:	bf08      	it	eq
 800913a:	f043 0301 	orreq.w	r3, r3, #1
 800913e:	3118      	adds	r1, #24
 8009140:	428a      	cmp	r2, r1
 8009142:	bf08      	it	eq
 8009144:	f043 0301 	orreq.w	r3, r3, #1
 8009148:	b933      	cbnz	r3, 8009158 <HAL_DMA_Abort+0x19c>
 800914a:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800914e:	4b35      	ldr	r3, [pc, #212]	; (8009224 <HAL_DMA_Abort+0x268>)
 8009150:	429a      	cmp	r2, r3
 8009152:	bf18      	it	ne
 8009154:	428a      	cmpne	r2, r1
 8009156:	d16f      	bne.n	8009238 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009158:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800915a:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800915c:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800915e:	f002 021f 	and.w	r2, r2, #31
 8009162:	4093      	lsls	r3, r2
 8009164:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8009166:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009168:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800916c:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800916e:	b133      	cbz	r3, 800917e <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009170:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009172:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800917a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800917c:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800917e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8009180:	2201      	movs	r2, #1
  return HAL_OK;
 8009182:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8009184:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009188:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800918c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800918e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8009190:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009192:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009194:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009196:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800919a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800919c:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800919e:	4923      	ldr	r1, [pc, #140]	; (800922c <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80091a0:	f022 020e 	bic.w	r2, r2, #14
 80091a4:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091a6:	4a22      	ldr	r2, [pc, #136]	; (8009230 <HAL_DMA_Abort+0x274>)
 80091a8:	428c      	cmp	r4, r1
 80091aa:	bf18      	it	ne
 80091ac:	4294      	cmpne	r4, r2
 80091ae:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80091b2:	bf0c      	ite	eq
 80091b4:	2201      	moveq	r2, #1
 80091b6:	2200      	movne	r2, #0
 80091b8:	428c      	cmp	r4, r1
 80091ba:	bf08      	it	eq
 80091bc:	f042 0201 	orreq.w	r2, r2, #1
 80091c0:	3114      	adds	r1, #20
 80091c2:	428c      	cmp	r4, r1
 80091c4:	bf08      	it	eq
 80091c6:	f042 0201 	orreq.w	r2, r2, #1
 80091ca:	3114      	adds	r1, #20
 80091cc:	428c      	cmp	r4, r1
 80091ce:	bf08      	it	eq
 80091d0:	f042 0201 	orreq.w	r2, r2, #1
 80091d4:	3114      	adds	r1, #20
 80091d6:	428c      	cmp	r4, r1
 80091d8:	bf08      	it	eq
 80091da:	f042 0201 	orreq.w	r2, r2, #1
 80091de:	3114      	adds	r1, #20
 80091e0:	428c      	cmp	r4, r1
 80091e2:	bf08      	it	eq
 80091e4:	f042 0201 	orreq.w	r2, r2, #1
 80091e8:	b91a      	cbnz	r2, 80091f2 <HAL_DMA_Abort+0x236>
 80091ea:	4a12      	ldr	r2, [pc, #72]	; (8009234 <HAL_DMA_Abort+0x278>)
 80091ec:	4294      	cmp	r4, r2
 80091ee:	f47f af55 	bne.w	800909c <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80091f2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80091f4:	680a      	ldr	r2, [r1, #0]
 80091f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091fa:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80091fc:	e74e      	b.n	800909c <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091fe:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009200:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8009202:	2300      	movs	r3, #0
        return HAL_ERROR;
 8009204:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009206:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8009208:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800920c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8009210:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8009212:	2001      	movs	r0, #1
}
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	bf00      	nop
 8009218:	40020058 	.word	0x40020058
 800921c:	40020040 	.word	0x40020040
 8009220:	40020010 	.word	0x40020010
 8009224:	40020028 	.word	0x40020028
 8009228:	40020070 	.word	0x40020070
 800922c:	58025408 	.word	0x58025408
 8009230:	5802541c 	.word	0x5802541c
 8009234:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009238:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800923a:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800923c:	4b16      	ldr	r3, [pc, #88]	; (8009298 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800923e:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009242:	4c16      	ldr	r4, [pc, #88]	; (800929c <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009244:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009246:	42a2      	cmp	r2, r4
 8009248:	bf18      	it	ne
 800924a:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800924c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800924e:	bf0c      	ite	eq
 8009250:	2301      	moveq	r3, #1
 8009252:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009254:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009256:	4812      	ldr	r0, [pc, #72]	; (80092a0 <HAL_DMA_Abort+0x2e4>)
 8009258:	4912      	ldr	r1, [pc, #72]	; (80092a4 <HAL_DMA_Abort+0x2e8>)
 800925a:	4282      	cmp	r2, r0
 800925c:	bf08      	it	eq
 800925e:	f043 0301 	orreq.w	r3, r3, #1
 8009262:	3028      	adds	r0, #40	; 0x28
 8009264:	428a      	cmp	r2, r1
 8009266:	bf08      	it	eq
 8009268:	f043 0301 	orreq.w	r3, r3, #1
 800926c:	3128      	adds	r1, #40	; 0x28
 800926e:	4282      	cmp	r2, r0
 8009270:	bf08      	it	eq
 8009272:	f043 0301 	orreq.w	r3, r3, #1
 8009276:	428a      	cmp	r2, r1
 8009278:	bf08      	it	eq
 800927a:	f043 0301 	orreq.w	r3, r3, #1
 800927e:	3114      	adds	r1, #20
 8009280:	428a      	cmp	r2, r1
 8009282:	bf08      	it	eq
 8009284:	f043 0301 	orreq.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	f47f af6c 	bne.w	8009166 <HAL_DMA_Abort+0x1aa>
 800928e:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <HAL_DMA_Abort+0x2ec>)
 8009290:	429a      	cmp	r2, r3
 8009292:	f43f af68 	beq.w	8009166 <HAL_DMA_Abort+0x1aa>
 8009296:	e772      	b.n	800917e <HAL_DMA_Abort+0x1c2>
 8009298:	5802541c 	.word	0x5802541c
 800929c:	58025408 	.word	0x58025408
 80092a0:	58025430 	.word	0x58025430
 80092a4:	58025444 	.word	0x58025444
 80092a8:	58025494 	.word	0x58025494

080092ac <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d05f      	beq.n	8009370 <HAL_DMA_Abort_IT+0xc4>
{
 80092b0:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80092b2:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80092b6:	4603      	mov	r3, r0
 80092b8:	2a02      	cmp	r2, #2
 80092ba:	d155      	bne.n	8009368 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80092bc:	6801      	ldr	r1, [r0, #0]
 80092be:	4a57      	ldr	r2, [pc, #348]	; (800941c <HAL_DMA_Abort_IT+0x170>)
 80092c0:	4291      	cmp	r1, r2
 80092c2:	d048      	beq.n	8009356 <HAL_DMA_Abort_IT+0xaa>
 80092c4:	3218      	adds	r2, #24
 80092c6:	4291      	cmp	r1, r2
 80092c8:	d045      	beq.n	8009356 <HAL_DMA_Abort_IT+0xaa>
 80092ca:	3230      	adds	r2, #48	; 0x30
 80092cc:	4c54      	ldr	r4, [pc, #336]	; (8009420 <HAL_DMA_Abort_IT+0x174>)
 80092ce:	4855      	ldr	r0, [pc, #340]	; (8009424 <HAL_DMA_Abort_IT+0x178>)
 80092d0:	42a1      	cmp	r1, r4
 80092d2:	bf18      	it	ne
 80092d4:	4291      	cmpne	r1, r2
 80092d6:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80092da:	bf0c      	ite	eq
 80092dc:	2201      	moveq	r2, #1
 80092de:	2200      	movne	r2, #0
 80092e0:	4281      	cmp	r1, r0
 80092e2:	bf08      	it	eq
 80092e4:	f042 0201 	orreq.w	r2, r2, #1
 80092e8:	3030      	adds	r0, #48	; 0x30
 80092ea:	42a1      	cmp	r1, r4
 80092ec:	bf08      	it	eq
 80092ee:	f042 0201 	orreq.w	r2, r2, #1
 80092f2:	3430      	adds	r4, #48	; 0x30
 80092f4:	4281      	cmp	r1, r0
 80092f6:	bf08      	it	eq
 80092f8:	f042 0201 	orreq.w	r2, r2, #1
 80092fc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009300:	42a1      	cmp	r1, r4
 8009302:	bf08      	it	eq
 8009304:	f042 0201 	orreq.w	r2, r2, #1
 8009308:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800930c:	4281      	cmp	r1, r0
 800930e:	bf08      	it	eq
 8009310:	f042 0201 	orreq.w	r2, r2, #1
 8009314:	3030      	adds	r0, #48	; 0x30
 8009316:	42a1      	cmp	r1, r4
 8009318:	bf08      	it	eq
 800931a:	f042 0201 	orreq.w	r2, r2, #1
 800931e:	3430      	adds	r4, #48	; 0x30
 8009320:	4281      	cmp	r1, r0
 8009322:	bf08      	it	eq
 8009324:	f042 0201 	orreq.w	r2, r2, #1
 8009328:	3030      	adds	r0, #48	; 0x30
 800932a:	42a1      	cmp	r1, r4
 800932c:	bf08      	it	eq
 800932e:	f042 0201 	orreq.w	r2, r2, #1
 8009332:	3430      	adds	r4, #48	; 0x30
 8009334:	4281      	cmp	r1, r0
 8009336:	bf08      	it	eq
 8009338:	f042 0201 	orreq.w	r2, r2, #1
 800933c:	3030      	adds	r0, #48	; 0x30
 800933e:	42a1      	cmp	r1, r4
 8009340:	bf08      	it	eq
 8009342:	f042 0201 	orreq.w	r2, r2, #1
 8009346:	4281      	cmp	r1, r0
 8009348:	bf08      	it	eq
 800934a:	f042 0201 	orreq.w	r2, r2, #1
 800934e:	b912      	cbnz	r2, 8009356 <HAL_DMA_Abort_IT+0xaa>
 8009350:	4a35      	ldr	r2, [pc, #212]	; (8009428 <HAL_DMA_Abort_IT+0x17c>)
 8009352:	4291      	cmp	r1, r2
 8009354:	d10e      	bne.n	8009374 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009356:	2204      	movs	r2, #4
  return HAL_OK;
 8009358:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800935a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800935e:	680b      	ldr	r3, [r1, #0]
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	600b      	str	r3, [r1, #0]
}
 8009366:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009368:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800936a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800936c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800936e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009370:	2001      	movs	r0, #1
}
 8009372:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009374:	4a2d      	ldr	r2, [pc, #180]	; (800942c <HAL_DMA_Abort_IT+0x180>)
 8009376:	4d2e      	ldr	r5, [pc, #184]	; (8009430 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009378:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800937a:	42a9      	cmp	r1, r5
 800937c:	bf18      	it	ne
 800937e:	4291      	cmpne	r1, r2
 8009380:	4c2c      	ldr	r4, [pc, #176]	; (8009434 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009382:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009386:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800938a:	bf0c      	ite	eq
 800938c:	2201      	moveq	r2, #1
 800938e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009390:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009392:	42a1      	cmp	r1, r4
 8009394:	bf08      	it	eq
 8009396:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800939a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800939c:	3428      	adds	r4, #40	; 0x28
 800939e:	42a9      	cmp	r1, r5
 80093a0:	bf08      	it	eq
 80093a2:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80093a6:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80093aa:	42a1      	cmp	r1, r4
 80093ac:	bf08      	it	eq
 80093ae:	f042 0201 	orreq.w	r2, r2, #1
 80093b2:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80093b4:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80093b6:	42a1      	cmp	r1, r4
 80093b8:	bf08      	it	eq
 80093ba:	f042 0201 	orreq.w	r2, r2, #1
 80093be:	481e      	ldr	r0, [pc, #120]	; (8009438 <HAL_DMA_Abort_IT+0x18c>)
 80093c0:	4281      	cmp	r1, r0
 80093c2:	bf08      	it	eq
 80093c4:	f042 0201 	orreq.w	r2, r2, #1
 80093c8:	b912      	cbnz	r2, 80093d0 <HAL_DMA_Abort_IT+0x124>
 80093ca:	4a1c      	ldr	r2, [pc, #112]	; (800943c <HAL_DMA_Abort_IT+0x190>)
 80093cc:	4291      	cmp	r1, r2
 80093ce:	d117      	bne.n	8009400 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80093d0:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80093d2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80093d4:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80093d8:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80093da:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80093de:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80093e2:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80093e4:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80093e6:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80093e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093ea:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 80093ee:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80093f0:	b132      	cbz	r2, 8009400 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80093f2:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093f4:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80093f8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80093fc:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093fe:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009400:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8009402:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8009404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8009406:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800940a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800940e:	b11a      	cbz	r2, 8009418 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8009410:	4618      	mov	r0, r3
 8009412:	4790      	blx	r2
  return HAL_OK;
 8009414:	4620      	mov	r0, r4
}
 8009416:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8009418:	4610      	mov	r0, r2
}
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	40020010 	.word	0x40020010
 8009420:	40020040 	.word	0x40020040
 8009424:	40020070 	.word	0x40020070
 8009428:	400204b8 	.word	0x400204b8
 800942c:	5802541c 	.word	0x5802541c
 8009430:	58025408 	.word	0x58025408
 8009434:	58025430 	.word	0x58025430
 8009438:	58025480 	.word	0x58025480
 800943c:	58025494 	.word	0x58025494

08009440 <HAL_DMA_IRQHandler>:
{
 8009440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8009444:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8009446:	4b9c      	ldr	r3, [pc, #624]	; (80096b8 <HAL_DMA_IRQHandler+0x278>)
{
 8009448:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800944a:	4e9c      	ldr	r6, [pc, #624]	; (80096bc <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800944c:	681d      	ldr	r5, [r3, #0]
{
 800944e:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8009450:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009452:	6803      	ldr	r3, [r0, #0]
 8009454:	4a9a      	ldr	r2, [pc, #616]	; (80096c0 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009456:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009458:	4293      	cmp	r3, r2
 800945a:	bf18      	it	ne
 800945c:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800945e:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009460:	bf08      	it	eq
 8009462:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8009464:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009466:	bf18      	it	ne
 8009468:	2600      	movne	r6, #0
 800946a:	d045      	beq.n	80094f8 <HAL_DMA_IRQHandler+0xb8>
 800946c:	3218      	adds	r2, #24
 800946e:	4895      	ldr	r0, [pc, #596]	; (80096c4 <HAL_DMA_IRQHandler+0x284>)
 8009470:	4283      	cmp	r3, r0
 8009472:	bf18      	it	ne
 8009474:	4293      	cmpne	r3, r2
 8009476:	f100 0018 	add.w	r0, r0, #24
 800947a:	bf0c      	ite	eq
 800947c:	2201      	moveq	r2, #1
 800947e:	2200      	movne	r2, #0
 8009480:	4283      	cmp	r3, r0
 8009482:	bf08      	it	eq
 8009484:	f042 0201 	orreq.w	r2, r2, #1
 8009488:	3018      	adds	r0, #24
 800948a:	4283      	cmp	r3, r0
 800948c:	bf08      	it	eq
 800948e:	f042 0201 	orreq.w	r2, r2, #1
 8009492:	3018      	adds	r0, #24
 8009494:	4283      	cmp	r3, r0
 8009496:	bf08      	it	eq
 8009498:	f042 0201 	orreq.w	r2, r2, #1
 800949c:	3018      	adds	r0, #24
 800949e:	4283      	cmp	r3, r0
 80094a0:	bf08      	it	eq
 80094a2:	f042 0201 	orreq.w	r2, r2, #1
 80094a6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80094aa:	4283      	cmp	r3, r0
 80094ac:	bf08      	it	eq
 80094ae:	f042 0201 	orreq.w	r2, r2, #1
 80094b2:	3018      	adds	r0, #24
 80094b4:	4283      	cmp	r3, r0
 80094b6:	bf08      	it	eq
 80094b8:	f042 0201 	orreq.w	r2, r2, #1
 80094bc:	3018      	adds	r0, #24
 80094be:	4283      	cmp	r3, r0
 80094c0:	bf08      	it	eq
 80094c2:	f042 0201 	orreq.w	r2, r2, #1
 80094c6:	3018      	adds	r0, #24
 80094c8:	4283      	cmp	r3, r0
 80094ca:	bf08      	it	eq
 80094cc:	f042 0201 	orreq.w	r2, r2, #1
 80094d0:	3018      	adds	r0, #24
 80094d2:	4283      	cmp	r3, r0
 80094d4:	bf08      	it	eq
 80094d6:	f042 0201 	orreq.w	r2, r2, #1
 80094da:	3018      	adds	r0, #24
 80094dc:	4283      	cmp	r3, r0
 80094de:	bf08      	it	eq
 80094e0:	f042 0201 	orreq.w	r2, r2, #1
 80094e4:	3018      	adds	r0, #24
 80094e6:	4283      	cmp	r3, r0
 80094e8:	bf08      	it	eq
 80094ea:	f042 0201 	orreq.w	r2, r2, #1
 80094ee:	b91a      	cbnz	r2, 80094f8 <HAL_DMA_IRQHandler+0xb8>
 80094f0:	4a75      	ldr	r2, [pc, #468]	; (80096c8 <HAL_DMA_IRQHandler+0x288>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	f040 8250 	bne.w	8009998 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094f8:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80094fc:	2208      	movs	r2, #8
 80094fe:	f001 0c1f 	and.w	ip, r1, #31
 8009502:	fa02 f20c 	lsl.w	r2, r2, ip
 8009506:	4217      	tst	r7, r2
 8009508:	f040 8188 	bne.w	800981c <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800950c:	fa27 f20c 	lsr.w	r2, r7, ip
 8009510:	07d2      	lsls	r2, r2, #31
 8009512:	d50c      	bpl.n	800952e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	0610      	lsls	r0, r2, #24
 8009518:	d509      	bpl.n	800952e <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800951a:	2201      	movs	r2, #1
 800951c:	fa02 f20c 	lsl.w	r2, r2, ip
 8009520:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009522:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8009526:	f042 0202 	orr.w	r2, r2, #2
 800952a:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800952e:	f04f 0e04 	mov.w	lr, #4
 8009532:	fa0e f00c 	lsl.w	r0, lr, ip
 8009536:	4238      	tst	r0, r7
 8009538:	d05b      	beq.n	80095f2 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800953a:	2e00      	cmp	r6, #0
 800953c:	d14f      	bne.n	80095de <HAL_DMA_IRQHandler+0x19e>
 800953e:	4a61      	ldr	r2, [pc, #388]	; (80096c4 <HAL_DMA_IRQHandler+0x284>)
 8009540:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80096cc <HAL_DMA_IRQHandler+0x28c>
 8009544:	4543      	cmp	r3, r8
 8009546:	bf18      	it	ne
 8009548:	4293      	cmpne	r3, r2
 800954a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800954e:	bf0c      	ite	eq
 8009550:	2201      	moveq	r2, #1
 8009552:	2200      	movne	r2, #0
 8009554:	4543      	cmp	r3, r8
 8009556:	bf08      	it	eq
 8009558:	f042 0201 	orreq.w	r2, r2, #1
 800955c:	f108 0818 	add.w	r8, r8, #24
 8009560:	4543      	cmp	r3, r8
 8009562:	bf08      	it	eq
 8009564:	f042 0201 	orreq.w	r2, r2, #1
 8009568:	f108 0818 	add.w	r8, r8, #24
 800956c:	4543      	cmp	r3, r8
 800956e:	bf08      	it	eq
 8009570:	f042 0201 	orreq.w	r2, r2, #1
 8009574:	f108 0818 	add.w	r8, r8, #24
 8009578:	4543      	cmp	r3, r8
 800957a:	bf08      	it	eq
 800957c:	f042 0201 	orreq.w	r2, r2, #1
 8009580:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8009584:	4543      	cmp	r3, r8
 8009586:	bf08      	it	eq
 8009588:	f042 0201 	orreq.w	r2, r2, #1
 800958c:	f108 0818 	add.w	r8, r8, #24
 8009590:	4543      	cmp	r3, r8
 8009592:	bf08      	it	eq
 8009594:	f042 0201 	orreq.w	r2, r2, #1
 8009598:	f108 0818 	add.w	r8, r8, #24
 800959c:	4543      	cmp	r3, r8
 800959e:	bf08      	it	eq
 80095a0:	f042 0201 	orreq.w	r2, r2, #1
 80095a4:	f108 0818 	add.w	r8, r8, #24
 80095a8:	4543      	cmp	r3, r8
 80095aa:	bf08      	it	eq
 80095ac:	f042 0201 	orreq.w	r2, r2, #1
 80095b0:	f108 0818 	add.w	r8, r8, #24
 80095b4:	4543      	cmp	r3, r8
 80095b6:	bf08      	it	eq
 80095b8:	f042 0201 	orreq.w	r2, r2, #1
 80095bc:	f108 0818 	add.w	r8, r8, #24
 80095c0:	4543      	cmp	r3, r8
 80095c2:	bf08      	it	eq
 80095c4:	f042 0201 	orreq.w	r2, r2, #1
 80095c8:	f108 0818 	add.w	r8, r8, #24
 80095cc:	4543      	cmp	r3, r8
 80095ce:	bf08      	it	eq
 80095d0:	f042 0201 	orreq.w	r2, r2, #1
 80095d4:	b91a      	cbnz	r2, 80095de <HAL_DMA_IRQHandler+0x19e>
 80095d6:	4a3c      	ldr	r2, [pc, #240]	; (80096c8 <HAL_DMA_IRQHandler+0x288>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	f040 8219 	bne.w	8009a10 <HAL_DMA_IRQHandler+0x5d0>
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	0792      	lsls	r2, r2, #30
 80095e2:	d506      	bpl.n	80095f2 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095e4:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095e6:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80095ea:	f042 0204 	orr.w	r2, r2, #4
 80095ee:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095f2:	2210      	movs	r2, #16
 80095f4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80095f8:	ea1c 0f07 	tst.w	ip, r7
 80095fc:	d06c      	beq.n	80096d8 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d145      	bne.n	800968e <HAL_DMA_IRQHandler+0x24e>
 8009602:	4a30      	ldr	r2, [pc, #192]	; (80096c4 <HAL_DMA_IRQHandler+0x284>)
 8009604:	4e31      	ldr	r6, [pc, #196]	; (80096cc <HAL_DMA_IRQHandler+0x28c>)
 8009606:	42b3      	cmp	r3, r6
 8009608:	bf18      	it	ne
 800960a:	4293      	cmpne	r3, r2
 800960c:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8009610:	bf0c      	ite	eq
 8009612:	2201      	moveq	r2, #1
 8009614:	2200      	movne	r2, #0
 8009616:	42b3      	cmp	r3, r6
 8009618:	bf08      	it	eq
 800961a:	f042 0201 	orreq.w	r2, r2, #1
 800961e:	3618      	adds	r6, #24
 8009620:	42b3      	cmp	r3, r6
 8009622:	bf08      	it	eq
 8009624:	f042 0201 	orreq.w	r2, r2, #1
 8009628:	3618      	adds	r6, #24
 800962a:	42b3      	cmp	r3, r6
 800962c:	bf08      	it	eq
 800962e:	f042 0201 	orreq.w	r2, r2, #1
 8009632:	3618      	adds	r6, #24
 8009634:	42b3      	cmp	r3, r6
 8009636:	bf08      	it	eq
 8009638:	f042 0201 	orreq.w	r2, r2, #1
 800963c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8009640:	42b3      	cmp	r3, r6
 8009642:	bf08      	it	eq
 8009644:	f042 0201 	orreq.w	r2, r2, #1
 8009648:	3618      	adds	r6, #24
 800964a:	42b3      	cmp	r3, r6
 800964c:	bf08      	it	eq
 800964e:	f042 0201 	orreq.w	r2, r2, #1
 8009652:	3618      	adds	r6, #24
 8009654:	42b3      	cmp	r3, r6
 8009656:	bf08      	it	eq
 8009658:	f042 0201 	orreq.w	r2, r2, #1
 800965c:	3618      	adds	r6, #24
 800965e:	42b3      	cmp	r3, r6
 8009660:	bf08      	it	eq
 8009662:	f042 0201 	orreq.w	r2, r2, #1
 8009666:	3618      	adds	r6, #24
 8009668:	42b3      	cmp	r3, r6
 800966a:	bf08      	it	eq
 800966c:	f042 0201 	orreq.w	r2, r2, #1
 8009670:	3618      	adds	r6, #24
 8009672:	42b3      	cmp	r3, r6
 8009674:	bf08      	it	eq
 8009676:	f042 0201 	orreq.w	r2, r2, #1
 800967a:	3618      	adds	r6, #24
 800967c:	42b3      	cmp	r3, r6
 800967e:	bf08      	it	eq
 8009680:	f042 0201 	orreq.w	r2, r2, #1
 8009684:	b91a      	cbnz	r2, 800968e <HAL_DMA_IRQHandler+0x24e>
 8009686:	4a10      	ldr	r2, [pc, #64]	; (80096c8 <HAL_DMA_IRQHandler+0x288>)
 8009688:	4293      	cmp	r3, r2
 800968a:	f040 81c9 	bne.w	8009a20 <HAL_DMA_IRQHandler+0x5e0>
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	0710      	lsls	r0, r2, #28
 8009692:	d521      	bpl.n	80096d8 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009694:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	0356      	lsls	r6, r2, #13
 800969c:	f100 814c 	bmi.w	8009938 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	05d2      	lsls	r2, r2, #23
 80096a4:	d403      	bmi.n	80096ae <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	f022 0208 	bic.w	r2, r2, #8
 80096ac:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80096ae:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80096b2:	b18b      	cbz	r3, 80096d8 <HAL_DMA_IRQHandler+0x298>
 80096b4:	e00c      	b.n	80096d0 <HAL_DMA_IRQHandler+0x290>
 80096b6:	bf00      	nop
 80096b8:	24000310 	.word	0x24000310
 80096bc:	40020010 	.word	0x40020010
 80096c0:	40020028 	.word	0x40020028
 80096c4:	40020058 	.word	0x40020058
 80096c8:	400204b8 	.word	0x400204b8
 80096cc:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 80096d0:	4648      	mov	r0, r9
 80096d2:	4798      	blx	r3
 80096d4:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096d8:	f001 011f 	and.w	r1, r1, #31
 80096dc:	2620      	movs	r6, #32
 80096de:	408e      	lsls	r6, r1
 80096e0:	423e      	tst	r6, r7
 80096e2:	d068      	beq.n	80097b6 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80096e4:	f8d9 2000 	ldr.w	r2, [r9]
 80096e8:	4ba5      	ldr	r3, [pc, #660]	; (8009980 <HAL_DMA_IRQHandler+0x540>)
 80096ea:	4fa6      	ldr	r7, [pc, #664]	; (8009984 <HAL_DMA_IRQHandler+0x544>)
 80096ec:	42ba      	cmp	r2, r7
 80096ee:	bf18      	it	ne
 80096f0:	429a      	cmpne	r2, r3
 80096f2:	f107 0718 	add.w	r7, r7, #24
 80096f6:	bf0c      	ite	eq
 80096f8:	2301      	moveq	r3, #1
 80096fa:	2300      	movne	r3, #0
 80096fc:	42ba      	cmp	r2, r7
 80096fe:	bf08      	it	eq
 8009700:	f043 0301 	orreq.w	r3, r3, #1
 8009704:	3718      	adds	r7, #24
 8009706:	42ba      	cmp	r2, r7
 8009708:	bf08      	it	eq
 800970a:	f043 0301 	orreq.w	r3, r3, #1
 800970e:	3718      	adds	r7, #24
 8009710:	42ba      	cmp	r2, r7
 8009712:	bf08      	it	eq
 8009714:	f043 0301 	orreq.w	r3, r3, #1
 8009718:	3718      	adds	r7, #24
 800971a:	42ba      	cmp	r2, r7
 800971c:	bf08      	it	eq
 800971e:	f043 0301 	orreq.w	r3, r3, #1
 8009722:	3718      	adds	r7, #24
 8009724:	42ba      	cmp	r2, r7
 8009726:	bf08      	it	eq
 8009728:	f043 0301 	orreq.w	r3, r3, #1
 800972c:	3718      	adds	r7, #24
 800972e:	42ba      	cmp	r2, r7
 8009730:	bf08      	it	eq
 8009732:	f043 0301 	orreq.w	r3, r3, #1
 8009736:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800973a:	42ba      	cmp	r2, r7
 800973c:	bf08      	it	eq
 800973e:	f043 0301 	orreq.w	r3, r3, #1
 8009742:	3718      	adds	r7, #24
 8009744:	42ba      	cmp	r2, r7
 8009746:	bf08      	it	eq
 8009748:	f043 0301 	orreq.w	r3, r3, #1
 800974c:	3718      	adds	r7, #24
 800974e:	42ba      	cmp	r2, r7
 8009750:	bf08      	it	eq
 8009752:	f043 0301 	orreq.w	r3, r3, #1
 8009756:	3718      	adds	r7, #24
 8009758:	42ba      	cmp	r2, r7
 800975a:	bf08      	it	eq
 800975c:	f043 0301 	orreq.w	r3, r3, #1
 8009760:	3718      	adds	r7, #24
 8009762:	42ba      	cmp	r2, r7
 8009764:	bf08      	it	eq
 8009766:	f043 0301 	orreq.w	r3, r3, #1
 800976a:	3718      	adds	r7, #24
 800976c:	42ba      	cmp	r2, r7
 800976e:	bf08      	it	eq
 8009770:	f043 0301 	orreq.w	r3, r3, #1
 8009774:	3718      	adds	r7, #24
 8009776:	42ba      	cmp	r2, r7
 8009778:	bf08      	it	eq
 800977a:	f043 0301 	orreq.w	r3, r3, #1
 800977e:	b91b      	cbnz	r3, 8009788 <HAL_DMA_IRQHandler+0x348>
 8009780:	4b81      	ldr	r3, [pc, #516]	; (8009988 <HAL_DMA_IRQHandler+0x548>)
 8009782:	429a      	cmp	r2, r3
 8009784:	f040 8162 	bne.w	8009a4c <HAL_DMA_IRQHandler+0x60c>
 8009788:	6813      	ldr	r3, [r2, #0]
 800978a:	06db      	lsls	r3, r3, #27
 800978c:	d513      	bpl.n	80097b6 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800978e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009790:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8009794:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009796:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009798:	f000 80ae 	beq.w	80098f8 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800979c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80097a0:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80097a2:	f000 80d3 	beq.w	800994c <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80097a6:	031c      	lsls	r4, r3, #12
 80097a8:	f140 80de 	bpl.w	8009968 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 80097ac:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 80097b0:	b10b      	cbz	r3, 80097b6 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 80097b2:	4648      	mov	r0, r9
 80097b4:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80097b6:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 80b9 	beq.w	8009932 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80097c0:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80097c4:	07d8      	lsls	r0, r3, #31
 80097c6:	d51f      	bpl.n	8009808 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 80097c8:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 80097cc:	2104      	movs	r1, #4
 80097ce:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097da:	4b6c      	ldr	r3, [pc, #432]	; (800998c <HAL_DMA_IRQHandler+0x54c>)
 80097dc:	fba3 3505 	umull	r3, r5, r3, r5
 80097e0:	0aad      	lsrs	r5, r5, #10
 80097e2:	e002      	b.n	80097ea <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80097e4:	6813      	ldr	r3, [r2, #0]
 80097e6:	07d9      	lsls	r1, r3, #31
 80097e8:	d504      	bpl.n	80097f4 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 80097ea:	9b01      	ldr	r3, [sp, #4]
 80097ec:	3301      	adds	r3, #1
 80097ee:	42ab      	cmp	r3, r5
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	d9f7      	bls.n	80097e4 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80097f4:	6813      	ldr	r3, [r2, #0]
 80097f6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80097f8:	bf4c      	ite	mi
 80097fa:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80097fc:	2301      	movpl	r3, #1
 80097fe:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8009802:	2300      	movs	r3, #0
 8009804:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8009808:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8090 	beq.w	8009932 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 8009812:	4648      	mov	r0, r9
}
 8009814:	b003      	add	sp, #12
 8009816:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 800981a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	0740      	lsls	r0, r0, #29
 8009820:	d50a      	bpl.n	8009838 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	f020 0004 	bic.w	r0, r0, #4
 8009828:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800982a:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800982c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8009830:	f042 0201 	orr.w	r2, r2, #1
 8009834:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009838:	fa27 f20c 	lsr.w	r2, r7, ip
 800983c:	07d2      	lsls	r2, r2, #31
 800983e:	f57f ae76 	bpl.w	800952e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009842:	4a53      	ldr	r2, [pc, #332]	; (8009990 <HAL_DMA_IRQHandler+0x550>)
 8009844:	4853      	ldr	r0, [pc, #332]	; (8009994 <HAL_DMA_IRQHandler+0x554>)
 8009846:	4283      	cmp	r3, r0
 8009848:	bf18      	it	ne
 800984a:	4293      	cmpne	r3, r2
 800984c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009850:	bf0c      	ite	eq
 8009852:	2201      	moveq	r2, #1
 8009854:	2200      	movne	r2, #0
 8009856:	4283      	cmp	r3, r0
 8009858:	bf08      	it	eq
 800985a:	f042 0201 	orreq.w	r2, r2, #1
 800985e:	3018      	adds	r0, #24
 8009860:	4283      	cmp	r3, r0
 8009862:	bf08      	it	eq
 8009864:	f042 0201 	orreq.w	r2, r2, #1
 8009868:	3018      	adds	r0, #24
 800986a:	4283      	cmp	r3, r0
 800986c:	bf08      	it	eq
 800986e:	f042 0201 	orreq.w	r2, r2, #1
 8009872:	3018      	adds	r0, #24
 8009874:	4283      	cmp	r3, r0
 8009876:	bf08      	it	eq
 8009878:	f042 0201 	orreq.w	r2, r2, #1
 800987c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8009880:	4283      	cmp	r3, r0
 8009882:	bf08      	it	eq
 8009884:	f042 0201 	orreq.w	r2, r2, #1
 8009888:	3018      	adds	r0, #24
 800988a:	4283      	cmp	r3, r0
 800988c:	bf08      	it	eq
 800988e:	f042 0201 	orreq.w	r2, r2, #1
 8009892:	3018      	adds	r0, #24
 8009894:	4283      	cmp	r3, r0
 8009896:	bf08      	it	eq
 8009898:	f042 0201 	orreq.w	r2, r2, #1
 800989c:	3018      	adds	r0, #24
 800989e:	4283      	cmp	r3, r0
 80098a0:	bf08      	it	eq
 80098a2:	f042 0201 	orreq.w	r2, r2, #1
 80098a6:	3018      	adds	r0, #24
 80098a8:	4283      	cmp	r3, r0
 80098aa:	bf08      	it	eq
 80098ac:	f042 0201 	orreq.w	r2, r2, #1
 80098b0:	3018      	adds	r0, #24
 80098b2:	4283      	cmp	r3, r0
 80098b4:	bf08      	it	eq
 80098b6:	f042 0201 	orreq.w	r2, r2, #1
 80098ba:	3018      	adds	r0, #24
 80098bc:	4283      	cmp	r3, r0
 80098be:	bf08      	it	eq
 80098c0:	f042 0201 	orreq.w	r2, r2, #1
 80098c4:	3018      	adds	r0, #24
 80098c6:	4283      	cmp	r3, r0
 80098c8:	bf08      	it	eq
 80098ca:	f042 0201 	orreq.w	r2, r2, #1
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	f47f ae20 	bne.w	8009514 <HAL_DMA_IRQHandler+0xd4>
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	f47f ae1d 	bne.w	8009514 <HAL_DMA_IRQHandler+0xd4>
 80098da:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098dc:	2204      	movs	r2, #4
 80098de:	fa02 f20c 	lsl.w	r2, r2, ip
 80098e2:	423a      	tst	r2, r7
 80098e4:	f040 8094 	bne.w	8009a10 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098e8:	2210      	movs	r2, #16
 80098ea:	fa02 fc0c 	lsl.w	ip, r2, ip
 80098ee:	ea17 0f0c 	tst.w	r7, ip
 80098f2:	f43f aef1 	beq.w	80096d8 <HAL_DMA_IRQHandler+0x298>
 80098f6:	e684      	b.n	8009602 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80098f8:	f023 0316 	bic.w	r3, r3, #22
 80098fc:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80098fe:	6953      	ldr	r3, [r2, #20]
 8009900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009904:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009906:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800990a:	b39b      	cbz	r3, 8009974 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800990c:	6813      	ldr	r3, [r2, #0]
 800990e:	f023 0308 	bic.w	r3, r3, #8
 8009912:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009914:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8009916:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 8009918:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800991a:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800991e:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009922:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8009924:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009928:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800992c:	2b00      	cmp	r3, #0
 800992e:	f47f af70 	bne.w	8009812 <HAL_DMA_IRQHandler+0x3d2>
}
 8009932:	b003      	add	sp, #12
 8009934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	0318      	lsls	r0, r3, #12
 800993c:	f57f aeb7 	bpl.w	80096ae <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009940:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8009944:	2b00      	cmp	r3, #0
 8009946:	f47f aec3 	bne.w	80096d0 <HAL_DMA_IRQHandler+0x290>
 800994a:	e6c5      	b.n	80096d8 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800994c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8009950:	f47f af2c 	bne.w	80097ac <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009954:	6811      	ldr	r1, [r2, #0]
 8009956:	f021 0110 	bic.w	r1, r1, #16
 800995a:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800995c:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800995e:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8009962:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8009966:	e721      	b.n	80097ac <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8009968:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800996c:	2b00      	cmp	r3, #0
 800996e:	f47f af20 	bne.w	80097b2 <HAL_DMA_IRQHandler+0x372>
 8009972:	e720      	b.n	80097b6 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009974:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1c7      	bne.n	800990c <HAL_DMA_IRQHandler+0x4cc>
 800997c:	e7ca      	b.n	8009914 <HAL_DMA_IRQHandler+0x4d4>
 800997e:	bf00      	nop
 8009980:	40020010 	.word	0x40020010
 8009984:	40020028 	.word	0x40020028
 8009988:	400204b8 	.word	0x400204b8
 800998c:	1b4e81b5 	.word	0x1b4e81b5
 8009990:	40020058 	.word	0x40020058
 8009994:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009998:	4a4e      	ldr	r2, [pc, #312]	; (8009ad4 <HAL_DMA_IRQHandler+0x694>)
 800999a:	4d4f      	ldr	r5, [pc, #316]	; (8009ad8 <HAL_DMA_IRQHandler+0x698>)
 800999c:	42ab      	cmp	r3, r5
 800999e:	bf18      	it	ne
 80099a0:	4293      	cmpne	r3, r2
 80099a2:	f105 0514 	add.w	r5, r5, #20
 80099a6:	bf0c      	ite	eq
 80099a8:	2201      	moveq	r2, #1
 80099aa:	2200      	movne	r2, #0
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	bf08      	it	eq
 80099b0:	f042 0201 	orreq.w	r2, r2, #1
 80099b4:	3514      	adds	r5, #20
 80099b6:	42ab      	cmp	r3, r5
 80099b8:	bf08      	it	eq
 80099ba:	f042 0201 	orreq.w	r2, r2, #1
 80099be:	3514      	adds	r5, #20
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	bf08      	it	eq
 80099c4:	f042 0201 	orreq.w	r2, r2, #1
 80099c8:	3514      	adds	r5, #20
 80099ca:	42ab      	cmp	r3, r5
 80099cc:	bf08      	it	eq
 80099ce:	f042 0201 	orreq.w	r2, r2, #1
 80099d2:	3514      	adds	r5, #20
 80099d4:	42ab      	cmp	r3, r5
 80099d6:	bf08      	it	eq
 80099d8:	f042 0201 	orreq.w	r2, r2, #1
 80099dc:	b912      	cbnz	r2, 80099e4 <HAL_DMA_IRQHandler+0x5a4>
 80099de:	4a3f      	ldr	r2, [pc, #252]	; (8009adc <HAL_DMA_IRQHandler+0x69c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d1a6      	bne.n	8009932 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80099e4:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 80099e8:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80099ea:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80099ec:	f005 051f 	and.w	r5, r5, #31
 80099f0:	40ae      	lsls	r6, r5
 80099f2:	420e      	tst	r6, r1
 80099f4:	d019      	beq.n	8009a2a <HAL_DMA_IRQHandler+0x5ea>
 80099f6:	0757      	lsls	r7, r2, #29
 80099f8:	d517      	bpl.n	8009a2a <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099fa:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80099fc:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099fe:	d54b      	bpl.n	8009a98 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009a00:	03d1      	lsls	r1, r2, #15
 8009a02:	d44f      	bmi.n	8009aa4 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009a04:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f47f af02 	bne.w	8009812 <HAL_DMA_IRQHandler+0x3d2>
 8009a0e:	e790      	b.n	8009932 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009a10:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a12:	2210      	movs	r2, #16
 8009a14:	fa02 fc0c 	lsl.w	ip, r2, ip
 8009a18:	ea17 0f0c 	tst.w	r7, ip
 8009a1c:	f43f ae5c 	beq.w	80096d8 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	0752      	lsls	r2, r2, #29
 8009a24:	f57f ae58 	bpl.w	80096d8 <HAL_DMA_IRQHandler+0x298>
 8009a28:	e634      	b.n	8009694 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009a2a:	2602      	movs	r6, #2
 8009a2c:	40ae      	lsls	r6, r5
 8009a2e:	420e      	tst	r6, r1
 8009a30:	d011      	beq.n	8009a56 <HAL_DMA_IRQHandler+0x616>
 8009a32:	0797      	lsls	r7, r2, #30
 8009a34:	d50f      	bpl.n	8009a56 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009a36:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a38:	0414      	lsls	r4, r2, #16
 8009a3a:	d539      	bpl.n	8009ab0 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009a3c:	03d0      	lsls	r0, r2, #15
 8009a3e:	d443      	bmi.n	8009ac8 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 8009a40:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f47f aee4 	bne.w	8009812 <HAL_DMA_IRQHandler+0x3d2>
 8009a4a:	e772      	b.n	8009932 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009a4c:	6813      	ldr	r3, [r2, #0]
 8009a4e:	079f      	lsls	r7, r3, #30
 8009a50:	f57f aeb1 	bpl.w	80097b6 <HAL_DMA_IRQHandler+0x376>
 8009a54:	e69b      	b.n	800978e <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009a56:	2608      	movs	r6, #8
 8009a58:	40ae      	lsls	r6, r5
 8009a5a:	420e      	tst	r6, r1
 8009a5c:	f43f af69 	beq.w	8009932 <HAL_DMA_IRQHandler+0x4f2>
 8009a60:	0711      	lsls	r1, r2, #28
 8009a62:	f57f af66 	bpl.w	8009932 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a66:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8009a68:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a6a:	f022 020e 	bic.w	r2, r2, #14
 8009a6e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a70:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8009a72:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a76:	fa03 f505 	lsl.w	r5, r3, r5
 8009a7a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009a7c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8009a80:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8009a84:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	f43f af52 	beq.w	8009932 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 8009a8e:	4648      	mov	r0, r9
}
 8009a90:	b003      	add	sp, #12
 8009a92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8009a96:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009a98:	0692      	lsls	r2, r2, #26
 8009a9a:	d403      	bmi.n	8009aa4 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	f022 0204 	bic.w	r2, r2, #4
 8009aa2:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8009aa4:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f47f aeb2 	bne.w	8009812 <HAL_DMA_IRQHandler+0x3d2>
 8009aae:	e740      	b.n	8009932 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009ab0:	f012 0220 	ands.w	r2, r2, #32
 8009ab4:	d108      	bne.n	8009ac8 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009ab6:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009ab8:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009aba:	f021 010a 	bic.w	r1, r1, #10
 8009abe:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009ac0:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009ac4:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8009ac8:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f47f aea0 	bne.w	8009812 <HAL_DMA_IRQHandler+0x3d2>
 8009ad2:	e72e      	b.n	8009932 <HAL_DMA_IRQHandler+0x4f2>
 8009ad4:	58025408 	.word	0x58025408
 8009ad8:	5802541c 	.word	0x5802541c
 8009adc:	58025494 	.word	0x58025494

08009ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009ae4:	680c      	ldr	r4, [r1, #0]
{
 8009ae6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009ae8:	2c00      	cmp	r4, #0
 8009aea:	f000 80a6 	beq.w	8009c3a <HAL_GPIO_Init+0x15a>
 8009aee:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009af2:	4f8e      	ldr	r7, [pc, #568]	; (8009d2c <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 8009af4:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009af6:	2201      	movs	r2, #1
 8009af8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8009afa:	ea12 0e04 	ands.w	lr, r2, r4
 8009afe:	f000 8095 	beq.w	8009c2c <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b02:	684d      	ldr	r5, [r1, #4]
 8009b04:	f005 0903 	and.w	r9, r5, #3
 8009b08:	f109 36ff 	add.w	r6, r9, #4294967295
 8009b0c:	2e01      	cmp	r6, #1
 8009b0e:	f240 8097 	bls.w	8009c40 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b12:	f1b9 0f03 	cmp.w	r9, #3
 8009b16:	f040 80d1 	bne.w	8009cbc <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b1a:	fa09 f20c 	lsl.w	r2, r9, ip
 8009b1e:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8009b22:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b24:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009b28:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b2c:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8009b30:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b32:	d07b      	beq.n	8009c2c <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b34:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009b38:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b3c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b40:	f042 0202 	orr.w	r2, r2, #2
 8009b44:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b48:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b4c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009b50:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8009b54:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8009b58:	f002 0202 	and.w	r2, r2, #2
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b60:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8009b62:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009b66:	fa02 f209 	lsl.w	r2, r2, r9
 8009b6a:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009b6e:	4e70      	ldr	r6, [pc, #448]	; (8009d30 <HAL_GPIO_Init+0x250>)
 8009b70:	42b0      	cmp	r0, r6
 8009b72:	d029      	beq.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009b74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009b78:	42b0      	cmp	r0, r6
 8009b7a:	f000 80ac 	beq.w	8009cd6 <HAL_GPIO_Init+0x1f6>
 8009b7e:	4e6d      	ldr	r6, [pc, #436]	; (8009d34 <HAL_GPIO_Init+0x254>)
 8009b80:	42b0      	cmp	r0, r6
 8009b82:	f000 80ae 	beq.w	8009ce2 <HAL_GPIO_Init+0x202>
 8009b86:	4e6c      	ldr	r6, [pc, #432]	; (8009d38 <HAL_GPIO_Init+0x258>)
 8009b88:	42b0      	cmp	r0, r6
 8009b8a:	f000 809e 	beq.w	8009cca <HAL_GPIO_Init+0x1ea>
 8009b8e:	4e6b      	ldr	r6, [pc, #428]	; (8009d3c <HAL_GPIO_Init+0x25c>)
 8009b90:	42b0      	cmp	r0, r6
 8009b92:	f000 80b2 	beq.w	8009cfa <HAL_GPIO_Init+0x21a>
 8009b96:	4e6a      	ldr	r6, [pc, #424]	; (8009d40 <HAL_GPIO_Init+0x260>)
 8009b98:	42b0      	cmp	r0, r6
 8009b9a:	f000 80b4 	beq.w	8009d06 <HAL_GPIO_Init+0x226>
 8009b9e:	4e69      	ldr	r6, [pc, #420]	; (8009d44 <HAL_GPIO_Init+0x264>)
 8009ba0:	42b0      	cmp	r0, r6
 8009ba2:	f000 80a4 	beq.w	8009cee <HAL_GPIO_Init+0x20e>
 8009ba6:	4e68      	ldr	r6, [pc, #416]	; (8009d48 <HAL_GPIO_Init+0x268>)
 8009ba8:	42b0      	cmp	r0, r6
 8009baa:	f000 80b2 	beq.w	8009d12 <HAL_GPIO_Init+0x232>
 8009bae:	4e67      	ldr	r6, [pc, #412]	; (8009d4c <HAL_GPIO_Init+0x26c>)
 8009bb0:	42b0      	cmp	r0, r6
 8009bb2:	f000 80b4 	beq.w	8009d1e <HAL_GPIO_Init+0x23e>
 8009bb6:	4e66      	ldr	r6, [pc, #408]	; (8009d50 <HAL_GPIO_Init+0x270>)
 8009bb8:	42b0      	cmp	r0, r6
 8009bba:	bf0c      	ite	eq
 8009bbc:	2609      	moveq	r6, #9
 8009bbe:	260a      	movne	r6, #10
 8009bc0:	fa06 f909 	lsl.w	r9, r6, r9
 8009bc4:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009bc8:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009bd0:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8009bd2:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8009bd6:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8009bd8:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8009bdc:	bf54      	ite	pl
 8009bde:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8009be2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8009be6:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009be8:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 8009bea:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8009bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8009bf0:	bf54      	ite	pl
 8009bf2:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8009bf6:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8009bfa:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009bfc:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c00:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8009c06:	bf54      	ite	pl
 8009c08:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8009c0c:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c10:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009c12:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8009c16:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8009c1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8009c1e:	bf54      	ite	pl
 8009c20:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8009c24:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8009c28:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8009c2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009c2e:	f10c 0c02 	add.w	ip, ip, #2
 8009c32:	fa34 f203 	lsrs.w	r2, r4, r3
 8009c36:	f47f af5e 	bne.w	8009af6 <HAL_GPIO_Init+0x16>
  }
}
 8009c3a:	b003      	add	sp, #12
 8009c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c40:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8009c44:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c46:	fa08 f80c 	lsl.w	r8, r8, ip
 8009c4a:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c4e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c50:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009c54:	fa06 f60c 	lsl.w	r6, r6, ip
 8009c58:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8009c5c:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c5e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8009c62:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c66:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c68:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c6c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8009c6e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8009c70:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c72:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c76:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c78:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009c7c:	fa06 f60c 	lsl.w	r6, r6, ip
 8009c80:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8009c84:	fa09 f20c 	lsl.w	r2, r9, ip
 8009c88:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c8a:	f47f af4a 	bne.w	8009b22 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c8e:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8009c92:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c96:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8009c9a:	260f      	movs	r6, #15
 8009c9c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8009ca0:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8009ca4:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009ca8:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009cac:	690e      	ldr	r6, [r1, #16]
 8009cae:	fa06 f60b 	lsl.w	r6, r6, fp
 8009cb2:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8009cb6:	f8c9 6020 	str.w	r6, [r9, #32]
 8009cba:	e732      	b.n	8009b22 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009cbc:	f04f 0803 	mov.w	r8, #3
 8009cc0:	fa08 f80c 	lsl.w	r8, r8, ip
 8009cc4:	ea6f 0808 	mvn.w	r8, r8
 8009cc8:	e7d2      	b.n	8009c70 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009cca:	2603      	movs	r6, #3
 8009ccc:	fa06 f909 	lsl.w	r9, r6, r9
 8009cd0:	ea42 0209 	orr.w	r2, r2, r9
 8009cd4:	e778      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009cd6:	2601      	movs	r6, #1
 8009cd8:	fa06 f909 	lsl.w	r9, r6, r9
 8009cdc:	ea42 0209 	orr.w	r2, r2, r9
 8009ce0:	e772      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009ce2:	2602      	movs	r6, #2
 8009ce4:	fa06 f909 	lsl.w	r9, r6, r9
 8009ce8:	ea42 0209 	orr.w	r2, r2, r9
 8009cec:	e76c      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009cee:	2606      	movs	r6, #6
 8009cf0:	fa06 f909 	lsl.w	r9, r6, r9
 8009cf4:	ea42 0209 	orr.w	r2, r2, r9
 8009cf8:	e766      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009cfa:	2604      	movs	r6, #4
 8009cfc:	fa06 f909 	lsl.w	r9, r6, r9
 8009d00:	ea42 0209 	orr.w	r2, r2, r9
 8009d04:	e760      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009d06:	2605      	movs	r6, #5
 8009d08:	fa06 f909 	lsl.w	r9, r6, r9
 8009d0c:	ea42 0209 	orr.w	r2, r2, r9
 8009d10:	e75a      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009d12:	2607      	movs	r6, #7
 8009d14:	fa06 f909 	lsl.w	r9, r6, r9
 8009d18:	ea42 0209 	orr.w	r2, r2, r9
 8009d1c:	e754      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009d1e:	2608      	movs	r6, #8
 8009d20:	fa06 f909 	lsl.w	r9, r6, r9
 8009d24:	ea42 0209 	orr.w	r2, r2, r9
 8009d28:	e74e      	b.n	8009bc8 <HAL_GPIO_Init+0xe8>
 8009d2a:	bf00      	nop
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	58020000 	.word	0x58020000
 8009d34:	58020800 	.word	0x58020800
 8009d38:	58020c00 	.word	0x58020c00
 8009d3c:	58021000 	.word	0x58021000
 8009d40:	58021400 	.word	0x58021400
 8009d44:	58021800 	.word	0x58021800
 8009d48:	58021c00 	.word	0x58021c00
 8009d4c:	58022000 	.word	0x58022000
 8009d50:	58022400 	.word	0x58022400

08009d54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009d54:	6903      	ldr	r3, [r0, #16]
 8009d56:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009d58:	bf14      	ite	ne
 8009d5a:	2001      	movne	r0, #1
 8009d5c:	2000      	moveq	r0, #0
 8009d5e:	4770      	bx	lr

08009d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d60:	b902      	cbnz	r2, 8009d64 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009d62:	0409      	lsls	r1, r1, #16
 8009d64:	6181      	str	r1, [r0, #24]
  }
}
 8009d66:	4770      	bx	lr

08009d68 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d6c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8009d70:	4201      	tst	r1, r0
 8009d72:	d100      	bne.n	8009d76 <HAL_GPIO_EXTI_IRQHandler+0xe>
 8009d74:	4770      	bx	lr
{
 8009d76:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d78:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d7c:	f7f8 fafc 	bl	8002378 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009d80:	bd08      	pop	{r3, pc}
 8009d82:	bf00      	nop

08009d84 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d05e      	beq.n	8009e46 <HAL_LPTIM_Init+0xc2>
{
 8009d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009d8a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8009d8e:	4604      	mov	r4, r0
 8009d90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d051      	beq.n	8009e3c <HAL_LPTIM_Init+0xb8>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009d98:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009d9a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009d9c:	e9d4 1500 	ldrd	r1, r5, [r4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009da0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009da4:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8009da6:	68c8      	ldr	r0, [r1, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009da8:	d03c      	beq.n	8009e24 <HAL_LPTIM_Init+0xa0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009daa:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8009dae:	d039      	beq.n	8009e24 <HAL_LPTIM_Init+0xa0>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009db0:	6962      	ldr	r2, [r4, #20]
 8009db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d003      	beq.n	8009dc2 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009dba:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8009dbe:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009dc2:	68a3      	ldr	r3, [r4, #8]
              hlptim->Init.Clock.Prescaler |
 8009dc4:	6a26      	ldr	r6, [r4, #32]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009dc6:	432b      	orrs	r3, r5
              hlptim->Init.Clock.Prescaler |
 8009dc8:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8009dca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009dcc:	4333      	orrs	r3, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009dce:	4e22      	ldr	r6, [pc, #136]	; (8009e58 <HAL_LPTIM_Init+0xd4>)
              hlptim->Init.UpdateMode      |
 8009dd0:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009dd2:	4006      	ands	r6, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009dd4:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8009dd6:	b1ed      	cbz	r5, 8009e14 <HAL_LPTIM_Init+0x90>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009dd8:	2d01      	cmp	r5, #1
 8009dda:	d11f      	bne.n	8009e1c <HAL_LPTIM_Init+0x98>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009ddc:	e9d4 0503 	ldrd	r0, r5, [r4, #12]
 8009de0:	4328      	orrs	r0, r5
 8009de2:	4303      	orrs	r3, r0
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009de4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009de8:	4282      	cmp	r2, r0
 8009dea:	d004      	beq.n	8009df6 <HAL_LPTIM_Init+0x72>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009dec:	69a0      	ldr	r0, [r4, #24]
 8009dee:	4302      	orrs	r2, r0
                hlptim->Init.Trigger.ActiveEdge |
 8009df0:	69e0      	ldr	r0, [r4, #28]
 8009df2:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009df4:	4313      	orrs	r3, r2

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8009df6:	4a19      	ldr	r2, [pc, #100]	; (8009e5c <HAL_LPTIM_Init+0xd8>)
  hlptim->Instance->CFGR = tmpcfgr;
 8009df8:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8009dfa:	4291      	cmp	r1, r2
 8009dfc:	d015      	beq.n	8009e2a <HAL_LPTIM_Init+0xa6>
 8009dfe:	4b18      	ldr	r3, [pc, #96]	; (8009e60 <HAL_LPTIM_Init+0xdc>)
 8009e00:	4299      	cmp	r1, r3
 8009e02:	d012      	beq.n	8009e2a <HAL_LPTIM_Init+0xa6>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009e04:	4b17      	ldr	r3, [pc, #92]	; (8009e64 <HAL_LPTIM_Init+0xe0>)
 8009e06:	4299      	cmp	r1, r3
 8009e08:	d01f      	beq.n	8009e4a <HAL_LPTIM_Init+0xc6>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009e0a:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8009e0c:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009e0e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009e14:	69e0      	ldr	r0, [r4, #28]
 8009e16:	6925      	ldr	r5, [r4, #16]
 8009e18:	4328      	orrs	r0, r5
 8009e1a:	4303      	orrs	r3, r0
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009e1c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8009e20:	d1e0      	bne.n	8009de4 <HAL_LPTIM_Init+0x60>
 8009e22:	e7db      	b.n	8009ddc <HAL_LPTIM_Init+0x58>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8009e24:	f020 001e 	bic.w	r0, r0, #30
 8009e28:	e7c2      	b.n	8009db0 <HAL_LPTIM_Init+0x2c>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009e2a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 8009e2e:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009e30:	4313      	orrs	r3, r2
 8009e32:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8009e3c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8009e40:	f7fc fbbe 	bl	80065c0 <HAL_LPTIM_MspInit>
 8009e44:	e7a8      	b.n	8009d98 <HAL_LPTIM_Init+0x14>
    return HAL_ERROR;
 8009e46:	2001      	movs	r0, #1
}
 8009e48:	4770      	bx	lr
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009e4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8009e4c:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009e4e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009e50:	2301      	movs	r3, #1
 8009e52:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8009e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e58:	ff19f1fe 	.word	0xff19f1fe
 8009e5c:	40002400 	.word	0x40002400
 8009e60:	58002400 	.word	0x58002400
 8009e64:	58002800 	.word	0x58002800

08009e68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6a:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f000 8088 	beq.w	8009f82 <HAL_PCD_Init+0x11a>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e72:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8009e76:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8009e78:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d079      	beq.n	8009f76 <HAL_PCD_Init+0x10e>
 8009e82:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e84:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e86:	462e      	mov	r6, r5
 8009e88:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e8a:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e90:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e92:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8009e96:	bf08      	it	eq
 8009e98:	60eb      	streq	r3, [r5, #12]
  __HAL_PCD_DISABLE(hpcd);
 8009e9a:	f004 fdcb 	bl	800ea34 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e9e:	f856 eb10 	ldr.w	lr, [r6], #16
 8009ea2:	46b4      	mov	ip, r6
 8009ea4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009eb0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009eb4:	e884 0003 	stmia.w	r4, {r0, r1}
 8009eb8:	4670      	mov	r0, lr
 8009eba:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009ebe:	f004 fc95 	bl	800e7ec <USB_CoreInit>
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	b130      	cbz	r0, 8009ed4 <HAL_PCD_Init+0x6c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8009ec6:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ec8:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8009eca:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ecc:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
}
 8009ed0:	b00b      	add	sp, #44	; 0x2c
 8009ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009ed4:	4601      	mov	r1, r0
 8009ed6:	6828      	ldr	r0, [r5, #0]
 8009ed8:	f004 fdb4 	bl	800ea44 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009edc:	6868      	ldr	r0, [r5, #4]
 8009ede:	b358      	cbz	r0, 8009f38 <HAL_PCD_Init+0xd0>
 8009ee0:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8009ee2:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ee6:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 8009ee8:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eec:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 8009ef0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009ef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009efc:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 8009f00:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f04:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009f06:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f0a:	64d9      	str	r1, [r3, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009f0c:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f10:	d3ea      	bcc.n	8009ee8 <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8009f12:	2200      	movs	r2, #0
 8009f14:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f18:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8009f1a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8009f1e:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f22:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 8009f24:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f28:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f2a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f2e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f32:	e9c3 22a1 	strd	r2, r2, [r3, #644]	; 0x284
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f36:	d3ed      	bcc.n	8009f14 <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f38:	466c      	mov	r4, sp
 8009f3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009f46:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f4a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8009f4e:	6828      	ldr	r0, [r5, #0]
 8009f50:	f004 fdae 	bl	800eab0 <USB_DevInit>
 8009f54:	4604      	mov	r4, r0
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d1b5      	bne.n	8009ec6 <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_READY;
 8009f5a:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8009f5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8009f5e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8009f62:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8009f64:	f885 24bd 	strb.w	r2, [r5, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8009f68:	d00f      	beq.n	8009f8a <HAL_PCD_Init+0x122>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009f6a:	6828      	ldr	r0, [r5, #0]
 8009f6c:	f005 f9d6 	bl	800f31c <USB_DevDisconnect>
}
 8009f70:	4620      	mov	r0, r4
 8009f72:	b00b      	add	sp, #44	; 0x2c
 8009f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8009f76:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8009f7a:	f006 fb31 	bl	80105e0 <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 8009f7e:	6828      	ldr	r0, [r5, #0]
 8009f80:	e780      	b.n	8009e84 <HAL_PCD_Init+0x1c>
    return HAL_ERROR;
 8009f82:	2401      	movs	r4, #1
}
 8009f84:	4620      	mov	r0, r4
 8009f86:	b00b      	add	sp, #44	; 0x2c
 8009f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 ff50 	bl	800ae30 <HAL_PCDEx_ActivateLPM>
 8009f90:	e7eb      	b.n	8009f6a <HAL_PCD_Init+0x102>
 8009f92:	bf00      	nop

08009f94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009f94:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  __HAL_LOCK(hpcd);
 8009f96:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
{
 8009f9a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f9c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d017      	beq.n	8009fd2 <HAL_PCD_Start+0x3e>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009fa8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009faa:	05db      	lsls	r3, r3, #23
 8009fac:	d402      	bmi.n	8009fb4 <HAL_PCD_Start+0x20>
 8009fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d009      	beq.n	8009fc8 <HAL_PCD_Start+0x34>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }

  __HAL_PCD_ENABLE(hpcd);
 8009fb4:	f004 fd36 	bl	800ea24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009fb8:	6820      	ldr	r0, [r4, #0]
 8009fba:	f005 f99f 	bl	800f2fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009fbe:	2300      	movs	r3, #0

  return HAL_OK;
 8009fc0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 8009fc2:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 8009fc6:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fce:	6383      	str	r3, [r0, #56]	; 0x38
 8009fd0:	e7f0      	b.n	8009fb4 <HAL_PCD_Start+0x20>
  __HAL_LOCK(hpcd);
 8009fd2:	2002      	movs	r0, #2
}
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	bf00      	nop

08009fd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fdc:	6805      	ldr	r5, [r0, #0]
{
 8009fde:	b089      	sub	sp, #36	; 0x24
 8009fe0:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f005 f9d8 	bl	800f398 <USB_GetMode>
 8009fe8:	b110      	cbz	r0, 8009ff0 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
    }
  }
}
 8009fea:	b009      	add	sp, #36	; 0x24
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009ff0:	4683      	mov	fp, r0
 8009ff2:	6820      	ldr	r0, [r4, #0]
 8009ff4:	f005 f9a2 	bl	800f33c <USB_ReadInterrupts>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d0f6      	beq.n	8009fea <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009ffc:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800a000:	f505 6200 	add.w	r2, r5, #2048	; 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a004:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a006:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800a00a:	9202      	str	r2, [sp, #8]
 800a00c:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a010:	f005 f994 	bl	800f33c <USB_ReadInterrupts>
 800a014:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a018:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a01a:	d003      	beq.n	800a024 <HAL_PCD_IRQHandler+0x4c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a01c:	6943      	ldr	r3, [r0, #20]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a024:	f005 f98a 	bl	800f33c <USB_ReadInterrupts>
 800a028:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a02c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a02e:	d012      	beq.n	800a056 <HAL_PCD_IRQHandler+0x7e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a030:	6983      	ldr	r3, [r0, #24]
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	6183      	str	r3, [r0, #24]
      RegVal = USBx->GRXSTSP;
 800a038:	6a2e      	ldr	r6, [r5, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a03a:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a03e:	f006 070f 	and.w	r7, r6, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a042:	2b02      	cmp	r3, #2
 800a044:	f000 83e3 	beq.w	800a80e <HAL_PCD_IRQHandler+0x836>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a048:	2b06      	cmp	r3, #6
 800a04a:	f000 8322 	beq.w	800a692 <HAL_PCD_IRQHandler+0x6ba>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a04e:	6983      	ldr	r3, [r0, #24]
 800a050:	f043 0310 	orr.w	r3, r3, #16
 800a054:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a056:	f005 f971 	bl	800f33c <USB_ReadInterrupts>
 800a05a:	0307      	lsls	r7, r0, #12
 800a05c:	f100 8280 	bmi.w	800a560 <HAL_PCD_IRQHandler+0x588>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a060:	6820      	ldr	r0, [r4, #0]
 800a062:	f005 f96b 	bl	800f33c <USB_ReadInterrupts>
 800a066:	0346      	lsls	r6, r0, #13
 800a068:	f100 8228 	bmi.w	800a4bc <HAL_PCD_IRQHandler+0x4e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	f005 f965 	bl	800f33c <USB_ReadInterrupts>
 800a072:	2800      	cmp	r0, #0
 800a074:	f2c0 819a 	blt.w	800a3ac <HAL_PCD_IRQHandler+0x3d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	f005 f95f 	bl	800f33c <USB_ReadInterrupts>
 800a07e:	0503      	lsls	r3, r0, #20
 800a080:	f100 8157 	bmi.w	800a332 <HAL_PCD_IRQHandler+0x35a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	f005 f959 	bl	800f33c <USB_ReadInterrupts>
 800a08a:	0106      	lsls	r6, r0, #4
 800a08c:	d514      	bpl.n	800a0b8 <HAL_PCD_IRQHandler+0xe0>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a08e:	6822      	ldr	r2, [r4, #0]
 800a090:	6953      	ldr	r3, [r2, #20]
 800a092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a096:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800a098:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f040 82ab 	bne.w	800a5f8 <HAL_PCD_IRQHandler+0x620>
        hpcd->LPM_State = LPM_L1;
 800a0a2:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a0a4:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800a0a6:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a0aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a0ac:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a0b0:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a0b4:	f000 fed4 	bl	800ae60 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	f005 f93f 	bl	800f33c <USB_ReadInterrupts>
 800a0be:	04c0      	lsls	r0, r0, #19
 800a0c0:	f100 819e 	bmi.w	800a400 <HAL_PCD_IRQHandler+0x428>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	f005 f939 	bl	800f33c <USB_ReadInterrupts>
 800a0ca:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800a0ce:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0d0:	f040 817f 	bne.w	800a3d2 <HAL_PCD_IRQHandler+0x3fa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a0d4:	f005 f932 	bl	800f33c <USB_ReadInterrupts>
 800a0d8:	0701      	lsls	r1, r0, #28
 800a0da:	f100 81e6 	bmi.w	800a4aa <HAL_PCD_IRQHandler+0x4d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a0de:	6820      	ldr	r0, [r4, #0]
 800a0e0:	f005 f92c 	bl	800f33c <USB_ReadInterrupts>
 800a0e4:	0602      	lsls	r2, r0, #24
 800a0e6:	d571      	bpl.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a0e8:	69aa      	ldr	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0ea:	6863      	ldr	r3, [r4, #4]
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a0ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0f0:	2b01      	cmp	r3, #1
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a0f2:	61aa      	str	r2, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0f4:	d96a      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a0f6:	f894 22a3 	ldrb.w	r2, [r4, #675]	; 0x2a3
 800a0fa:	2a01      	cmp	r2, #1
 800a0fc:	f000 83e8 	beq.w	800a8d0 <HAL_PCD_IRQHandler+0x8f8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a100:	2b02      	cmp	r3, #2
 800a102:	d963      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a104:	f894 22c7 	ldrb.w	r2, [r4, #711]	; 0x2c7
 800a108:	2a01      	cmp	r2, #1
 800a10a:	f000 83fc 	beq.w	800a906 <HAL_PCD_IRQHandler+0x92e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d95c      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a112:	f894 22eb 	ldrb.w	r2, [r4, #747]	; 0x2eb
 800a116:	2a01      	cmp	r2, #1
 800a118:	f000 82b4 	beq.w	800a684 <HAL_PCD_IRQHandler+0x6ac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d955      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a120:	f894 230f 	ldrb.w	r2, [r4, #783]	; 0x30f
 800a124:	2a01      	cmp	r2, #1
 800a126:	f000 82c7 	beq.w	800a6b8 <HAL_PCD_IRQHandler+0x6e0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d94e      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a12e:	f894 2333 	ldrb.w	r2, [r4, #819]	; 0x333
 800a132:	2a01      	cmp	r2, #1
 800a134:	f000 8424 	beq.w	800a980 <HAL_PCD_IRQHandler+0x9a8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a138:	2b06      	cmp	r3, #6
 800a13a:	d947      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a13c:	f894 2357 	ldrb.w	r2, [r4, #855]	; 0x357
 800a140:	2a01      	cmp	r2, #1
 800a142:	f000 8431 	beq.w	800a9a8 <HAL_PCD_IRQHandler+0x9d0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a146:	2b07      	cmp	r3, #7
 800a148:	d940      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a14a:	f894 237b 	ldrb.w	r2, [r4, #891]	; 0x37b
 800a14e:	2a01      	cmp	r2, #1
 800a150:	f000 8448 	beq.w	800a9e4 <HAL_PCD_IRQHandler+0xa0c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a154:	2b08      	cmp	r3, #8
 800a156:	d939      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a158:	f894 239f 	ldrb.w	r2, [r4, #927]	; 0x39f
 800a15c:	2a01      	cmp	r2, #1
 800a15e:	f000 8455 	beq.w	800aa0c <HAL_PCD_IRQHandler+0xa34>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a162:	2b09      	cmp	r3, #9
 800a164:	d932      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a166:	f894 23c3 	ldrb.w	r2, [r4, #963]	; 0x3c3
 800a16a:	2a01      	cmp	r2, #1
 800a16c:	f000 8462 	beq.w	800aa34 <HAL_PCD_IRQHandler+0xa5c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d92b      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a174:	f894 23e7 	ldrb.w	r2, [r4, #999]	; 0x3e7
 800a178:	2a01      	cmp	r2, #1
 800a17a:	f000 846f 	beq.w	800aa5c <HAL_PCD_IRQHandler+0xa84>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a17e:	2b0b      	cmp	r3, #11
 800a180:	d924      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a182:	f894 240b 	ldrb.w	r2, [r4, #1035]	; 0x40b
 800a186:	2a01      	cmp	r2, #1
 800a188:	f000 847c 	beq.w	800aa84 <HAL_PCD_IRQHandler+0xaac>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a18c:	2b0c      	cmp	r3, #12
 800a18e:	d91d      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a190:	f894 242f 	ldrb.w	r2, [r4, #1071]	; 0x42f
 800a194:	2a01      	cmp	r2, #1
 800a196:	f000 847d 	beq.w	800aa94 <HAL_PCD_IRQHandler+0xabc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a19a:	2b0d      	cmp	r3, #13
 800a19c:	d916      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a19e:	f894 2453 	ldrb.w	r2, [r4, #1107]	; 0x453
 800a1a2:	2a01      	cmp	r2, #1
 800a1a4:	f000 849d 	beq.w	800aae2 <HAL_PCD_IRQHandler+0xb0a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1a8:	2b0e      	cmp	r3, #14
 800a1aa:	d90f      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a1ac:	f894 2477 	ldrb.w	r2, [r4, #1143]	; 0x477
 800a1b0:	2a01      	cmp	r2, #1
 800a1b2:	f000 84a4 	beq.w	800aafe <HAL_PCD_IRQHandler+0xb26>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d908      	bls.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a1ba:	f894 349b 	ldrb.w	r3, [r4, #1179]	; 0x49b
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d104      	bne.n	800a1cc <HAL_PCD_IRQHandler+0x1f4>
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a1c2:	f504 6193 	add.w	r1, r4, #1176	; 0x498
 800a1c6:	6820      	ldr	r0, [r4, #0]
 800a1c8:	f004 ffa6 	bl	800f118 <USB_EPStopXfer>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	f005 f8b5 	bl	800f33c <USB_ReadInterrupts>
 800a1d2:	02c3      	lsls	r3, r0, #11
 800a1d4:	f140 80ab 	bpl.w	800a32e <HAL_PCD_IRQHandler+0x356>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	f240 8089 	bls.w	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1e0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1e4:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1e8:	2a01      	cmp	r2, #1
 800a1ea:	f000 8214 	beq.w	800a616 <HAL_PCD_IRQHandler+0x63e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d97f      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1f2:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a1f6:	f8d5 1940 	ldr.w	r1, [r5, #2368]	; 0x940
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a1fa:	2a01      	cmp	r2, #1
 800a1fc:	f000 821e 	beq.w	800a63c <HAL_PCD_IRQHandler+0x664>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a200:	2b03      	cmp	r3, #3
 800a202:	d976      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a204:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a208:	f8d5 1960 	ldr.w	r1, [r5, #2400]	; 0x960
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a20c:	2a01      	cmp	r2, #1
 800a20e:	f000 8221 	beq.w	800a654 <HAL_PCD_IRQHandler+0x67c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a212:	2b04      	cmp	r3, #4
 800a214:	d96d      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a216:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a21a:	f8d5 1980 	ldr.w	r1, [r5, #2432]	; 0x980
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a21e:	2a01      	cmp	r2, #1
 800a220:	f000 8224 	beq.w	800a66c <HAL_PCD_IRQHandler+0x694>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a224:	2b05      	cmp	r3, #5
 800a226:	d964      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a228:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a22c:	f8d5 19a0 	ldr.w	r1, [r5, #2464]	; 0x9a0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a230:	2a01      	cmp	r2, #1
 800a232:	f000 8341 	beq.w	800a8b8 <HAL_PCD_IRQHandler+0x8e0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a236:	2b06      	cmp	r3, #6
 800a238:	d95b      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a23a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a23e:	f8d5 19c0 	ldr.w	r1, [r5, #2496]	; 0x9c0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a242:	2a01      	cmp	r2, #1
 800a244:	f000 8353 	beq.w	800a8ee <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a248:	2b07      	cmp	r3, #7
 800a24a:	d952      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a24c:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a250:	f8d5 19e0 	ldr.w	r1, [r5, #2528]	; 0x9e0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a254:	2a01      	cmp	r2, #1
 800a256:	f000 835e 	beq.w	800a916 <HAL_PCD_IRQHandler+0x93e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d949      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a25e:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a262:	f8d5 1a00 	ldr.w	r1, [r5, #2560]	; 0xa00
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a266:	2a01      	cmp	r2, #1
 800a268:	f000 8361 	beq.w	800a92e <HAL_PCD_IRQHandler+0x956>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a26c:	2b09      	cmp	r3, #9
 800a26e:	d940      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a270:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a274:	f8d5 1a20 	ldr.w	r1, [r5, #2592]	; 0xa20
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a278:	2a01      	cmp	r2, #1
 800a27a:	f000 836c 	beq.w	800a956 <HAL_PCD_IRQHandler+0x97e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a27e:	2b0a      	cmp	r3, #10
 800a280:	d937      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a282:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a286:	f8d5 1a40 	ldr.w	r1, [r5, #2624]	; 0xa40
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a28a:	2a01      	cmp	r2, #1
 800a28c:	f000 8380 	beq.w	800a990 <HAL_PCD_IRQHandler+0x9b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a290:	2b0b      	cmp	r3, #11
 800a292:	d92e      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a294:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a298:	f8d5 1a60 	ldr.w	r1, [r5, #2656]	; 0xa60
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a29c:	2a01      	cmp	r2, #1
 800a29e:	f000 8395 	beq.w	800a9cc <HAL_PCD_IRQHandler+0x9f4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2a2:	2b0c      	cmp	r3, #12
 800a2a4:	d925      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2a6:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a2aa:	f8d5 1a80 	ldr.w	r1, [r5, #2688]	; 0xa80
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2ae:	2a01      	cmp	r2, #1
 800a2b0:	f000 83a0 	beq.w	800a9f4 <HAL_PCD_IRQHandler+0xa1c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2b4:	2b0d      	cmp	r3, #13
 800a2b6:	d91c      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2b8:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a2bc:	f8d5 1aa0 	ldr.w	r1, [r5, #2720]	; 0xaa0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2c0:	2a01      	cmp	r2, #1
 800a2c2:	f000 83ab 	beq.w	800aa1c <HAL_PCD_IRQHandler+0xa44>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2c6:	2b0e      	cmp	r3, #14
 800a2c8:	d913      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2ca:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a2ce:	f8d5 1ac0 	ldr.w	r1, [r5, #2752]	; 0xac0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2d2:	2a01      	cmp	r2, #1
 800a2d4:	f000 83b6 	beq.w	800aa44 <HAL_PCD_IRQHandler+0xa6c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2d8:	2b0f      	cmp	r3, #15
 800a2da:	d90a      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2dc:	f894 225c 	ldrb.w	r2, [r4, #604]	; 0x25c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a2e0:	f8d5 1ae0 	ldr.w	r1, [r5, #2784]	; 0xae0
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a2e4:	2a01      	cmp	r2, #1
 800a2e6:	f000 83c1 	beq.w	800aa6c <HAL_PCD_IRQHandler+0xa94>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d901      	bls.n	800a2f2 <HAL_PCD_IRQHandler+0x31a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a2ee:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a2f2:	6820      	ldr	r0, [r4, #0]
 800a2f4:	6943      	ldr	r3, [r0, #20]
 800a2f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2fa:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a2fc:	f005 f81e 	bl	800f33c <USB_ReadInterrupts>
 800a300:	0287      	lsls	r7, r0, #10
 800a302:	d421      	bmi.n	800a348 <HAL_PCD_IRQHandler+0x370>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a304:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a306:	f005 f819 	bl	800f33c <USB_ReadInterrupts>
 800a30a:	0040      	lsls	r0, r0, #1
 800a30c:	f100 80c4 	bmi.w	800a498 <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a310:	6820      	ldr	r0, [r4, #0]
 800a312:	f005 f813 	bl	800f33c <USB_ReadInterrupts>
 800a316:	0741      	lsls	r1, r0, #29
 800a318:	f57f ae67 	bpl.w	8009fea <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a320:	076a      	lsls	r2, r5, #29
 800a322:	f100 8295 	bmi.w	800a850 <HAL_PCD_IRQHandler+0x878>
      hpcd->Instance->GOTGINT |= RegVal;
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	432a      	orrs	r2, r5
 800a32a:	605a      	str	r2, [r3, #4]
 800a32c:	e65d      	b.n	8009fea <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a32e:	6820      	ldr	r0, [r4, #0]
 800a330:	e7e4      	b.n	800a2fc <HAL_PCD_IRQHandler+0x324>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	07df      	lsls	r7, r3, #31
 800a338:	f100 8286 	bmi.w	800a848 <HAL_PCD_IRQHandler+0x870>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	6943      	ldr	r3, [r0, #20]
 800a340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a344:	6143      	str	r3, [r0, #20]
 800a346:	e69e      	b.n	800a086 <HAL_PCD_IRQHandler+0xae>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a348:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800a34c:	f1bc 0f01 	cmp.w	ip, #1
 800a350:	d926      	bls.n	800a3a0 <HAL_PCD_IRQHandler+0x3c8>
 800a352:	f505 6232 	add.w	r2, r5, #2848	; 0xb20
 800a356:	4623      	mov	r3, r4
 800a358:	2101      	movs	r1, #1
 800a35a:	e004      	b.n	800a366 <HAL_PCD_IRQHandler+0x38e>
 800a35c:	3101      	adds	r1, #1
 800a35e:	3220      	adds	r2, #32
 800a360:	3324      	adds	r3, #36	; 0x24
 800a362:	4561      	cmp	r1, ip
 800a364:	d01c      	beq.n	800a3a0 <HAL_PCD_IRQHandler+0x3c8>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a366:	f893 02a4 	ldrb.w	r0, [r3, #676]	; 0x2a4
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a36a:	6816      	ldr	r6, [r2, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a36c:	2801      	cmp	r0, #1
 800a36e:	d1f5      	bne.n	800a35c <HAL_PCD_IRQHandler+0x384>
 800a370:	2e00      	cmp	r6, #0
 800a372:	daf3      	bge.n	800a35c <HAL_PCD_IRQHandler+0x384>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a374:	f8d4 74fc 	ldr.w	r7, [r4, #1276]	; 0x4fc
 800a378:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 800a37c:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a380:	42be      	cmp	r6, r7
 800a382:	d1eb      	bne.n	800a35c <HAL_PCD_IRQHandler+0x384>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a384:	f883 02a3 	strb.w	r0, [r3, #675]	; 0x2a3
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a388:	69a8      	ldr	r0, [r5, #24]
 800a38a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a38e:	61a8      	str	r0, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a390:	6968      	ldr	r0, [r5, #20]
 800a392:	0606      	lsls	r6, r0, #24
 800a394:	d4e2      	bmi.n	800a35c <HAL_PCD_IRQHandler+0x384>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a396:	9a02      	ldr	r2, [sp, #8]
 800a398:	6853      	ldr	r3, [r2, #4]
 800a39a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a39e:	6053      	str	r3, [r2, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a3a0:	6820      	ldr	r0, [r4, #0]
 800a3a2:	6943      	ldr	r3, [r0, #20]
 800a3a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3a8:	6143      	str	r3, [r0, #20]
 800a3aa:	e7ac      	b.n	800a306 <HAL_PCD_IRQHandler+0x32e>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a3ac:	9a02      	ldr	r2, [sp, #8]
 800a3ae:	6853      	ldr	r3, [r2, #4]
 800a3b0:	f023 0301 	bic.w	r3, r3, #1
 800a3b4:	6053      	str	r3, [r2, #4]
      if (hpcd->LPM_State == LPM_L1)
 800a3b6:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	f000 8137 	beq.w	800a62e <HAL_PCD_IRQHandler+0x656>
        HAL_PCD_ResumeCallback(hpcd);
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f006 f9bb 	bl	801073c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a3c6:	6820      	ldr	r0, [r4, #0]
 800a3c8:	6943      	ldr	r3, [r0, #20]
 800a3ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3ce:	6143      	str	r3, [r0, #20]
 800a3d0:	e653      	b.n	800a07a <HAL_PCD_IRQHandler+0xa2>
      (void)USB_ActivateSetup(hpcd->Instance);
 800a3d2:	f004 ffe5 	bl	800f3a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a3d6:	6820      	ldr	r0, [r4, #0]
 800a3d8:	f004 fca8 	bl	800ed2c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a3dc:	6826      	ldr	r6, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a3de:	6120      	str	r0, [r4, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a3e0:	f001 fafe 	bl	800b9e0 <HAL_RCC_GetHCLKFreq>
 800a3e4:	7c22      	ldrb	r2, [r4, #16]
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f004 faa1 	bl	800e930 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f006 f976 	bl	80106e0 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	6943      	ldr	r3, [r0, #20]
 800a3f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3fc:	6143      	str	r3, [r0, #20]
 800a3fe:	e669      	b.n	800a0d4 <HAL_PCD_IRQHandler+0xfc>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a400:	9a02      	ldr	r2, [sp, #8]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a402:	2110      	movs	r1, #16
 800a404:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a406:	6853      	ldr	r3, [r2, #4]
 800a408:	f023 0301 	bic.w	r3, r3, #1
 800a40c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a40e:	f004 fc63 	bl	800ecd8 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a412:	6860      	ldr	r0, [r4, #4]
 800a414:	b1e0      	cbz	r0, 800a450 <HAL_PCD_IRQHandler+0x478>
 800a416:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a41a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800a41e:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a420:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a424:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a426:	3320      	adds	r3, #32
 800a428:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a42a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a42e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a432:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a436:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a43a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a43e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a442:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a446:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a44a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a44e:	d1e6      	bne.n	800a41e <HAL_PCD_IRQHandler+0x446>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a450:	9902      	ldr	r1, [sp, #8]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a452:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a454:	69cb      	ldr	r3, [r1, #28]
 800a456:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a45a:	61cb      	str	r3, [r1, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	f040 80cf 	bne.w	800a600 <HAL_PCD_IRQHandler+0x628>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a462:	694a      	ldr	r2, [r1, #20]
 800a464:	f242 032b 	movw	r3, #8235	; 0x202b
 800a468:	4313      	orrs	r3, r2
 800a46a:	614b      	str	r3, [r1, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a46c:	690b      	ldr	r3, [r1, #16]
 800a46e:	f043 030b 	orr.w	r3, r3, #11
 800a472:	610b      	str	r3, [r1, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a474:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a478:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800a47c:	7b21      	ldrb	r1, [r4, #12]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a47e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a482:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a484:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a488:	f004 ffa0 	bl	800f3cc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	6943      	ldr	r3, [r0, #20]
 800a490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a494:	6143      	str	r3, [r0, #20]
 800a496:	e616      	b.n	800a0c6 <HAL_PCD_IRQHandler+0xee>
      HAL_PCD_ConnectCallback(hpcd);
 800a498:	4620      	mov	r0, r4
 800a49a:	f006 f95b 	bl	8010754 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	6943      	ldr	r3, [r0, #20]
 800a4a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4a6:	6143      	str	r3, [r0, #20]
 800a4a8:	e733      	b.n	800a312 <HAL_PCD_IRQHandler+0x33a>
      HAL_PCD_SOFCallback(hpcd);
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f006 f914 	bl	80106d8 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	6943      	ldr	r3, [r0, #20]
 800a4b4:	f003 0308 	and.w	r3, r3, #8
 800a4b8:	6143      	str	r3, [r0, #20]
 800a4ba:	e611      	b.n	800a0e0 <HAL_PCD_IRQHandler+0x108>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	f004 ff49 	bl	800f354 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f43f add1 	beq.w	800a06c <HAL_PCD_IRQHandler+0x94>
      epnum = 0U;
 800a4ca:	f04f 0a00 	mov.w	sl, #0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4ce:	6820      	ldr	r0, [r4, #0]
 800a4d0:	4627      	mov	r7, r4
 800a4d2:	f505 6910 	add.w	r9, r5, #2304	; 0x900
              ep->is_iso_incomplete = 0U;
 800a4d6:	4656      	mov	r6, sl
 800a4d8:	9503      	str	r5, [sp, #12]
 800a4da:	f8cd b010 	str.w	fp, [sp, #16]
 800a4de:	e009      	b.n	800a4f4 <HAL_PCD_IRQHandler+0x51c>
      while (ep_intr != 0U)
 800a4e0:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800a4e4:	f106 0601 	add.w	r6, r6, #1
      while (ep_intr != 0U)
 800a4e8:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800a4ec:	f109 0920 	add.w	r9, r9, #32
 800a4f0:	f000 80ec 	beq.w	800a6cc <HAL_PCD_IRQHandler+0x6f4>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a4f4:	f018 0f01 	tst.w	r8, #1
 800a4f8:	d0f2      	beq.n	800a4e0 <HAL_PCD_IRQHandler+0x508>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4fa:	fa5f fa86 	uxtb.w	sl, r6
 800a4fe:	4651      	mov	r1, sl
 800a500:	f004 ff3a 	bl	800f378 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a504:	07c1      	lsls	r1, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a506:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a508:	d513      	bpl.n	800a532 <HAL_PCD_IRQHandler+0x55a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a50a:	9902      	ldr	r1, [sp, #8]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a50c:	f006 030f 	and.w	r3, r6, #15
 800a510:	2201      	movs	r2, #1
 800a512:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a514:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a516:	ea23 0302 	bic.w	r3, r3, r2
 800a51a:	634b      	str	r3, [r1, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a51c:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800a51e:	68e1      	ldr	r1, [r4, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a520:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800a524:	4299      	cmp	r1, r3
 800a526:	f000 8198 	beq.w	800a85a <HAL_PCD_IRQHandler+0x882>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a52a:	4651      	mov	r1, sl
 800a52c:	4620      	mov	r0, r4
 800a52e:	f006 f8c9 	bl	80106c4 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a532:	072a      	lsls	r2, r5, #28
 800a534:	d502      	bpl.n	800a53c <HAL_PCD_IRQHandler+0x564>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a536:	2308      	movs	r3, #8
 800a538:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a53c:	06eb      	lsls	r3, r5, #27
 800a53e:	d502      	bpl.n	800a546 <HAL_PCD_IRQHandler+0x56e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a540:	2310      	movs	r3, #16
 800a542:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a546:	0668      	lsls	r0, r5, #25
 800a548:	d502      	bpl.n	800a550 <HAL_PCD_IRQHandler+0x578>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a54a:	2340      	movs	r3, #64	; 0x40
 800a54c:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a550:	07a9      	lsls	r1, r5, #30
 800a552:	f100 814f 	bmi.w	800a7f4 <HAL_PCD_IRQHandler+0x81c>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a556:	062a      	lsls	r2, r5, #24
 800a558:	f100 80f9 	bmi.w	800a74e <HAL_PCD_IRQHandler+0x776>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	e7bf      	b.n	800a4e0 <HAL_PCD_IRQHandler+0x508>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	f004 feef 	bl	800f344 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800a566:	4606      	mov	r6, r0
 800a568:	2800      	cmp	r0, #0
 800a56a:	f43f ad79 	beq.w	800a060 <HAL_PCD_IRQHandler+0x88>
 800a56e:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 800a572:	46a2      	mov	sl, r4
      epnum = 0U;
 800a574:	f04f 0900 	mov.w	r9, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a578:	f8cd b00c 	str.w	fp, [sp, #12]
 800a57c:	e008      	b.n	800a590 <HAL_PCD_IRQHandler+0x5b8>
      while (ep_intr != 0U)
 800a57e:	0876      	lsrs	r6, r6, #1
        epnum++;
 800a580:	f109 0901 	add.w	r9, r9, #1
      while (ep_intr != 0U)
 800a584:	f107 0720 	add.w	r7, r7, #32
 800a588:	f10a 0a24 	add.w	sl, sl, #36	; 0x24
 800a58c:	f000 809b 	beq.w	800a6c6 <HAL_PCD_IRQHandler+0x6ee>
        if ((ep_intr & 0x1U) != 0U)
 800a590:	07f0      	lsls	r0, r6, #31
 800a592:	d5f4      	bpl.n	800a57e <HAL_PCD_IRQHandler+0x5a6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a594:	fa5f fb89 	uxtb.w	fp, r9
 800a598:	6820      	ldr	r0, [r4, #0]
 800a59a:	4659      	mov	r1, fp
 800a59c:	f004 fee2 	bl	800f364 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a5a0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a5a4:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a5a6:	f040 80b3 	bne.w	800a710 <HAL_PCD_IRQHandler+0x738>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a5aa:	f018 0f08 	tst.w	r8, #8
 800a5ae:	f040 8090 	bne.w	800a6d2 <HAL_PCD_IRQHandler+0x6fa>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a5b2:	f018 0f10 	tst.w	r8, #16
 800a5b6:	d001      	beq.n	800a5bc <HAL_PCD_IRQHandler+0x5e4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a5b8:	2210      	movs	r2, #16
 800a5ba:	60ba      	str	r2, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a5bc:	f018 0f02 	tst.w	r8, #2
 800a5c0:	d00e      	beq.n	800a5e0 <HAL_PCD_IRQHandler+0x608>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a5c2:	696a      	ldr	r2, [r5, #20]
 800a5c4:	0610      	lsls	r0, r2, #24
 800a5c6:	d504      	bpl.n	800a5d2 <HAL_PCD_IRQHandler+0x5fa>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5d0:	605a      	str	r2, [r3, #4]
            if (ep->is_iso_incomplete == 1U)
 800a5d2:	f89a 227f 	ldrb.w	r2, [sl, #639]	; 0x27f
 800a5d6:	2a01      	cmp	r2, #1
 800a5d8:	f000 8181 	beq.w	800a8de <HAL_PCD_IRQHandler+0x906>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a5dc:	2302      	movs	r3, #2
 800a5de:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a5e0:	f018 0f20 	tst.w	r8, #32
 800a5e4:	d001      	beq.n	800a5ea <HAL_PCD_IRQHandler+0x612>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a5e6:	2320      	movs	r3, #32
 800a5e8:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a5ea:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 800a5ee:	d0c6      	beq.n	800a57e <HAL_PCD_IRQHandler+0x5a6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a5f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5f4:	60bb      	str	r3, [r7, #8]
 800a5f6:	e7c2      	b.n	800a57e <HAL_PCD_IRQHandler+0x5a6>
        HAL_PCD_SuspendCallback(hpcd);
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f006 f887 	bl	801070c <HAL_PCD_SuspendCallback>
 800a5fe:	e55b      	b.n	800a0b8 <HAL_PCD_IRQHandler+0xe0>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a600:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 800a604:	f043 030b 	orr.w	r3, r3, #11
 800a608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a60c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800a60e:	f043 030b 	orr.w	r3, r3, #11
 800a612:	644b      	str	r3, [r1, #68]	; 0x44
 800a614:	e72e      	b.n	800a474 <HAL_PCD_IRQHandler+0x49c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a616:	2900      	cmp	r1, #0
 800a618:	f6bf ade9 	bge.w	800a1ee <HAL_PCD_IRQHandler+0x216>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a61c:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a61e:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a622:	f851 0b60 	ldr.w	r0, [r1], #96
 800a626:	f004 fd77 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a62a:	6863      	ldr	r3, [r4, #4]
 800a62c:	e5df      	b.n	800a1ee <HAL_PCD_IRQHandler+0x216>
        hpcd->LPM_State = LPM_L0;
 800a62e:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a630:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800a632:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a636:	f000 fc13 	bl	800ae60 <HAL_PCDEx_LPM_Callback>
 800a63a:	e6c4      	b.n	800a3c6 <HAL_PCD_IRQHandler+0x3ee>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a63c:	2900      	cmp	r1, #0
 800a63e:	f6bf addf 	bge.w	800a200 <HAL_PCD_IRQHandler+0x228>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a642:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a644:	f884 2087 	strb.w	r2, [r4, #135]	; 0x87
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a648:	f851 0b84 	ldr.w	r0, [r1], #132
 800a64c:	f004 fd64 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a650:	6863      	ldr	r3, [r4, #4]
 800a652:	e5d5      	b.n	800a200 <HAL_PCD_IRQHandler+0x228>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a654:	2900      	cmp	r1, #0
 800a656:	f6bf addc 	bge.w	800a212 <HAL_PCD_IRQHandler+0x23a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a65a:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a65c:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a660:	f851 0ba8 	ldr.w	r0, [r1], #168
 800a664:	f004 fd58 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a668:	6863      	ldr	r3, [r4, #4]
 800a66a:	e5d2      	b.n	800a212 <HAL_PCD_IRQHandler+0x23a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a66c:	2900      	cmp	r1, #0
 800a66e:	f6bf add9 	bge.w	800a224 <HAL_PCD_IRQHandler+0x24c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a672:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a674:	f884 20cf 	strb.w	r2, [r4, #207]	; 0xcf
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a678:	f851 0bcc 	ldr.w	r0, [r1], #204
 800a67c:	f004 fd4c 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a680:	6863      	ldr	r3, [r4, #4]
 800a682:	e5cf      	b.n	800a224 <HAL_PCD_IRQHandler+0x24c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a684:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
 800a688:	6820      	ldr	r0, [r4, #0]
 800a68a:	f004 fd45 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a68e:	6863      	ldr	r3, [r4, #4]
 800a690:	e544      	b.n	800a11c <HAL_PCD_IRQHandler+0x144>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a692:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a696:	2208      	movs	r2, #8
 800a698:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 800a69c:	4628      	mov	r0, r5
 800a69e:	f004 fd95 	bl	800f1cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a6a2:	f3c6 130a 	ubfx	r3, r6, #4, #11
 800a6a6:	eb04 0287 	add.w	r2, r4, r7, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a6aa:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a6ac:	f8d2 1290 	ldr.w	r1, [r2, #656]	; 0x290
 800a6b0:	440b      	add	r3, r1
 800a6b2:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
 800a6b6:	e4ca      	b.n	800a04e <HAL_PCD_IRQHandler+0x76>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a6b8:	f504 7143 	add.w	r1, r4, #780	; 0x30c
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	f004 fd2b 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	e531      	b.n	800a12a <HAL_PCD_IRQHandler+0x152>
 800a6c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a6ca:	e4c9      	b.n	800a060 <HAL_PCD_IRQHandler+0x88>
 800a6cc:	e9dd 5b03 	ldrd	r5, fp, [sp, #12]
 800a6d0:	e4cd      	b.n	800a06e <HAL_PCD_IRQHandler+0x96>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6d2:	6821      	ldr	r1, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a6d4:	2208      	movs	r2, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6d6:	4bbb      	ldr	r3, [pc, #748]	; (800a9c4 <HAL_PCD_IRQHandler+0x9ec>)
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a6d8:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a6da:	f501 6230 	add.w	r2, r1, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6de:	6c09      	ldr	r1, [r1, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a6e0:	eb02 1249 	add.w	r2, r2, r9, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6e4:	4299      	cmp	r1, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a6e6:	6890      	ldr	r0, [r2, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6e8:	f240 80c8 	bls.w	800a87c <HAL_PCD_IRQHandler+0x8a4>
 800a6ec:	0403      	lsls	r3, r0, #16
 800a6ee:	d502      	bpl.n	800a6f6 <HAL_PCD_IRQHandler+0x71e>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6f4:	6091      	str	r1, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f005 ffd4 	bl	80106a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a6fc:	68e1      	ldr	r1, [r4, #12]
 800a6fe:	2901      	cmp	r1, #1
 800a700:	f47f af57 	bne.w	800a5b2 <HAL_PCD_IRQHandler+0x5da>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a704:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800a708:	6820      	ldr	r0, [r4, #0]
 800a70a:	f004 fe5f 	bl	800f3cc <USB_EP0_OutStart>
 800a70e:	e750      	b.n	800a5b2 <HAL_PCD_IRQHandler+0x5da>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a710:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a712:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800a714:	68e1      	ldr	r1, [r4, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a716:	60ba      	str	r2, [r7, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a718:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800a71c:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a71e:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a722:	eb02 1249 	add.w	r2, r2, r9, lsl #5
 800a726:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800a728:	f000 80ac 	beq.w	800a884 <HAL_PCD_IRQHandler+0x8ac>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a72c:	49a6      	ldr	r1, [pc, #664]	; (800a9c8 <HAL_PCD_IRQHandler+0x9f0>)
 800a72e:	458c      	cmp	ip, r1
 800a730:	f000 8109 	beq.w	800a946 <HAL_PCD_IRQHandler+0x96e>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a734:	f1b9 0f00 	cmp.w	r9, #0
 800a738:	d104      	bne.n	800a744 <HAL_PCD_IRQHandler+0x76c>
 800a73a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800a73e:	2a00      	cmp	r2, #0
 800a740:	f000 81d7 	beq.w	800aaf2 <HAL_PCD_IRQHandler+0xb1a>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a744:	4659      	mov	r1, fp
 800a746:	4620      	mov	r0, r4
 800a748:	f005 ffb2 	bl	80106b0 <HAL_PCD_DataOutStageCallback>
 800a74c:	e72d      	b.n	800a5aa <HAL_PCD_IRQHandler+0x5d2>
  if (ep->xfer_count > ep->xfer_len)
 800a74e:	e9d7 5313 	ldrd	r5, r3, [r7, #76]	; 0x4c
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a752:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800a756:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a758:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800a75a:	f63f aec1 	bhi.w	800a4e0 <HAL_PCD_IRQHandler+0x508>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a75e:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800a762:	6c79      	ldr	r1, [r7, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a764:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a768:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 800a76c:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800a76e:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800a770:	428a      	cmp	r2, r1
 800a772:	bf28      	it	cs
 800a774:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a776:	9905      	ldr	r1, [sp, #20]
 800a778:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800a77a:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a77c:	b289      	uxth	r1, r1
 800a77e:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800a782:	f0c0 8095 	bcc.w	800a8b0 <HAL_PCD_IRQHandler+0x8d8>
 800a786:	4652      	mov	r2, sl
 800a788:	9606      	str	r6, [sp, #24]
 800a78a:	46ca      	mov	sl, r9
 800a78c:	4626      	mov	r6, r4
 800a78e:	46c1      	mov	r9, r8
 800a790:	9c05      	ldr	r4, [sp, #20]
 800a792:	4690      	mov	r8, r2
 800a794:	e019      	b.n	800a7ca <HAL_PCD_IRQHandler+0x7f2>
    len = ep->xfer_len - ep->xfer_count;
 800a796:	1aed      	subs	r5, r5, r3
    if (len > ep->maxpacket)
 800a798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a79a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a79c:	4642      	mov	r2, r8
 800a79e:	429d      	cmp	r5, r3
 800a7a0:	4658      	mov	r0, fp
 800a7a2:	bf28      	it	cs
 800a7a4:	461d      	movcs	r5, r3
 800a7a6:	7b33      	ldrb	r3, [r6, #12]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	b2ab      	uxth	r3, r5
 800a7ac:	f004 fcf8 	bl	800f1a0 <USB_WritePacket>
    ep->xfer_buff  += len;
 800a7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7b2:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800a7b4:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7b6:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800a7b8:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 800a7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7bc:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800a7be:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7c0:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800a7c4:	653b      	str	r3, [r7, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7c6:	d36b      	bcc.n	800a8a0 <HAL_PCD_IRQHandler+0x8c8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a7c8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800a7ca:	429d      	cmp	r5, r3
 800a7cc:	d8e3      	bhi.n	800a796 <HAL_PCD_IRQHandler+0x7be>
 800a7ce:	4634      	mov	r4, r6
 800a7d0:	46c8      	mov	r8, r9
 800a7d2:	9e06      	ldr	r6, [sp, #24]
 800a7d4:	46d1      	mov	r9, sl
 800a7d6:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a7da:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a7dc:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a7de:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a7e0:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a7e4:	f006 030f 	and.w	r3, r6, #15
 800a7e8:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a7ea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a7ec:	ea23 0302 	bic.w	r3, r3, r2
 800a7f0:	634b      	str	r3, [r1, #52]	; 0x34
 800a7f2:	e675      	b.n	800a4e0 <HAL_PCD_IRQHandler+0x508>
            (void)USB_FlushTxFifo(USBx, epnum);
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	9803      	ldr	r0, [sp, #12]
 800a7f8:	f004 fa6e 	bl	800ecd8 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 800a7fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a800:	2b01      	cmp	r3, #1
 800a802:	f000 80b4 	beq.w	800a96e <HAL_PCD_IRQHandler+0x996>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a806:	2302      	movs	r3, #2
 800a808:	f8c9 3008 	str.w	r3, [r9, #8]
 800a80c:	e6a3      	b.n	800a556 <HAL_PCD_IRQHandler+0x57e>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a80e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a812:	421e      	tst	r6, r3
 800a814:	f43f ac1b 	beq.w	800a04e <HAL_PCD_IRQHandler+0x76>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a818:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800a81c:	f3c6 120a 	ubfx	r2, r6, #4, #11
 800a820:	4628      	mov	r0, r5
 800a822:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a826:	4616      	mov	r6, r2
 800a828:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 800a82c:	f004 fcce 	bl	800f1cc <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a830:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a834:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a836:	4433      	add	r3, r6
 800a838:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a83c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800a840:	4433      	add	r3, r6
 800a842:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800a846:	e402      	b.n	800a04e <HAL_PCD_IRQHandler+0x76>
        HAL_PCD_SuspendCallback(hpcd);
 800a848:	4620      	mov	r0, r4
 800a84a:	f005 ff5f 	bl	801070c <HAL_PCD_SuspendCallback>
 800a84e:	e575      	b.n	800a33c <HAL_PCD_IRQHandler+0x364>
        HAL_PCD_DisconnectCallback(hpcd);
 800a850:	4620      	mov	r0, r4
 800a852:	f005 ff83 	bl	801075c <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	e565      	b.n	800a326 <HAL_PCD_IRQHandler+0x34e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a85a:	e9d7 2311 	ldrd	r2, r3, [r7, #68]	; 0x44
 800a85e:	4413      	add	r3, r2
 800a860:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a862:	2e00      	cmp	r6, #0
 800a864:	f47f ae61 	bne.w	800a52a <HAL_PCD_IRQHandler+0x552>
 800a868:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f47f ae5d 	bne.w	800a52a <HAL_PCD_IRQHandler+0x552>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a870:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800a874:	6820      	ldr	r0, [r4, #0]
 800a876:	f004 fda9 	bl	800f3cc <USB_EP0_OutStart>
 800a87a:	e656      	b.n	800a52a <HAL_PCD_IRQHandler+0x552>
  HAL_PCD_SetupStageCallback(hpcd);
 800a87c:	4620      	mov	r0, r4
 800a87e:	f005 ff11 	bl	80106a4 <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a882:	e696      	b.n	800a5b2 <HAL_PCD_IRQHandler+0x5da>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a884:	0719      	lsls	r1, r3, #28
 800a886:	f140 8097 	bpl.w	800a9b8 <HAL_PCD_IRQHandler+0x9e0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a88a:	494e      	ldr	r1, [pc, #312]	; (800a9c4 <HAL_PCD_IRQHandler+0x9ec>)
 800a88c:	458c      	cmp	ip, r1
 800a88e:	f67f ae8c 	bls.w	800a5aa <HAL_PCD_IRQHandler+0x5d2>
 800a892:	0418      	lsls	r0, r3, #16
 800a894:	f57f ae89 	bpl.w	800a5aa <HAL_PCD_IRQHandler+0x5d2>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a89c:	6091      	str	r1, [r2, #8]
 800a89e:	e684      	b.n	800a5aa <HAL_PCD_IRQHandler+0x5d2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a8a0:	4634      	mov	r4, r6
 800a8a2:	46c8      	mov	r8, r9
 800a8a4:	9e06      	ldr	r6, [sp, #24]
 800a8a6:	46d1      	mov	r9, sl
 800a8a8:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 800a8ac:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a8ae:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800a8b0:	429d      	cmp	r5, r3
 800a8b2:	f63f ae15 	bhi.w	800a4e0 <HAL_PCD_IRQHandler+0x508>
 800a8b6:	e790      	b.n	800a7da <HAL_PCD_IRQHandler+0x802>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a8b8:	2900      	cmp	r1, #0
 800a8ba:	f6bf acbc 	bge.w	800a236 <HAL_PCD_IRQHandler+0x25e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8be:	4621      	mov	r1, r4
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a8c0:	f884 20f3 	strb.w	r2, [r4, #243]	; 0xf3
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8c4:	f851 0bf0 	ldr.w	r0, [r1], #240
 800a8c8:	f004 fc26 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	e4b2      	b.n	800a236 <HAL_PCD_IRQHandler+0x25e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8d0:	f504 7128 	add.w	r1, r4, #672	; 0x2a0
 800a8d4:	6820      	ldr	r0, [r4, #0]
 800a8d6:	f004 fc1f 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8da:	6863      	ldr	r3, [r4, #4]
 800a8dc:	e410      	b.n	800a100 <HAL_PCD_IRQHandler+0x128>
              ep->is_iso_incomplete = 0U;
 800a8de:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a8e0:	4659      	mov	r1, fp
 800a8e2:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 800a8e4:	f88a 327f 	strb.w	r3, [sl, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a8e8:	f005 ff2c 	bl	8010744 <HAL_PCD_ISOOUTIncompleteCallback>
 800a8ec:	e676      	b.n	800a5dc <HAL_PCD_IRQHandler+0x604>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a8ee:	2900      	cmp	r1, #0
 800a8f0:	f6bf acaa 	bge.w	800a248 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8f4:	f504 718a 	add.w	r1, r4, #276	; 0x114
 800a8f8:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a8fa:	f884 2117 	strb.w	r2, [r4, #279]	; 0x117
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a8fe:	f004 fc0b 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a902:	6863      	ldr	r3, [r4, #4]
 800a904:	e4a0      	b.n	800a248 <HAL_PCD_IRQHandler+0x270>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a906:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 800a90a:	6820      	ldr	r0, [r4, #0]
 800a90c:	f004 fc04 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	f7ff bbfc 	b.w	800a10e <HAL_PCD_IRQHandler+0x136>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a916:	2900      	cmp	r1, #0
 800a918:	f6bf ac9f 	bge.w	800a25a <HAL_PCD_IRQHandler+0x282>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a91c:	f504 719c 	add.w	r1, r4, #312	; 0x138
 800a920:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a922:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a926:	f004 fbf7 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a92a:	6863      	ldr	r3, [r4, #4]
 800a92c:	e495      	b.n	800a25a <HAL_PCD_IRQHandler+0x282>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a92e:	2900      	cmp	r1, #0
 800a930:	f6bf ac9c 	bge.w	800a26c <HAL_PCD_IRQHandler+0x294>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a934:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
 800a938:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a93a:	f884 215f 	strb.w	r2, [r4, #351]	; 0x15f
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a93e:	f004 fbeb 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a942:	6863      	ldr	r3, [r4, #4]
 800a944:	e492      	b.n	800a26c <HAL_PCD_IRQHandler+0x294>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a946:	0418      	lsls	r0, r3, #16
 800a948:	d4a6      	bmi.n	800a898 <HAL_PCD_IRQHandler+0x8c0>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a94a:	0699      	lsls	r1, r3, #26
 800a94c:	f57f aefa 	bpl.w	800a744 <HAL_PCD_IRQHandler+0x76c>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a950:	2120      	movs	r1, #32
 800a952:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a954:	e6f6      	b.n	800a744 <HAL_PCD_IRQHandler+0x76c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a956:	2900      	cmp	r1, #0
 800a958:	f6bf ac91 	bge.w	800a27e <HAL_PCD_IRQHandler+0x2a6>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a95c:	f504 71c0 	add.w	r1, r4, #384	; 0x180
 800a960:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a962:	f884 2183 	strb.w	r2, [r4, #387]	; 0x183
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a966:	f004 fbd7 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a96a:	6863      	ldr	r3, [r4, #4]
 800a96c:	e487      	b.n	800a27e <HAL_PCD_IRQHandler+0x2a6>
              ep->is_iso_incomplete = 0U;
 800a96e:	f04f 0300 	mov.w	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a972:	4651      	mov	r1, sl
 800a974:	4620      	mov	r0, r4
              ep->is_iso_incomplete = 0U;
 800a976:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a97a:	f005 fee7 	bl	801074c <HAL_PCD_ISOINIncompleteCallback>
 800a97e:	e742      	b.n	800a806 <HAL_PCD_IRQHandler+0x82e>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a980:	f504 714c 	add.w	r1, r4, #816	; 0x330
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	f004 fbc7 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a98a:	6863      	ldr	r3, [r4, #4]
 800a98c:	f7ff bbd4 	b.w	800a138 <HAL_PCD_IRQHandler+0x160>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a990:	2900      	cmp	r1, #0
 800a992:	f6bf ac7d 	bge.w	800a290 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a996:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 800a99a:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a99c:	f884 21a7 	strb.w	r2, [r4, #423]	; 0x1a7
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9a0:	f004 fbba 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9a4:	6863      	ldr	r3, [r4, #4]
 800a9a6:	e473      	b.n	800a290 <HAL_PCD_IRQHandler+0x2b8>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9a8:	f504 7155 	add.w	r1, r4, #852	; 0x354
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	f004 fbb3 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9b2:	6863      	ldr	r3, [r4, #4]
 800a9b4:	f7ff bbc7 	b.w	800a146 <HAL_PCD_IRQHandler+0x16e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a9b8:	0699      	lsls	r1, r3, #26
 800a9ba:	d573      	bpl.n	800aaa4 <HAL_PCD_IRQHandler+0xacc>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a9bc:	2120      	movs	r1, #32
 800a9be:	6091      	str	r1, [r2, #8]
 800a9c0:	e5f3      	b.n	800a5aa <HAL_PCD_IRQHandler+0x5d2>
 800a9c2:	bf00      	nop
 800a9c4:	4f54300a 	.word	0x4f54300a
 800a9c8:	4f54310a 	.word	0x4f54310a
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	f6bf ac68 	bge.w	800a2a2 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9d2:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 800a9d6:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a9d8:	f884 21cb 	strb.w	r2, [r4, #459]	; 0x1cb
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9dc:	f004 fb9c 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9e0:	6863      	ldr	r3, [r4, #4]
 800a9e2:	e45e      	b.n	800a2a2 <HAL_PCD_IRQHandler+0x2ca>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9e4:	f504 715e 	add.w	r1, r4, #888	; 0x378
 800a9e8:	6820      	ldr	r0, [r4, #0]
 800a9ea:	f004 fb95 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9ee:	6863      	ldr	r3, [r4, #4]
 800a9f0:	f7ff bbb0 	b.w	800a154 <HAL_PCD_IRQHandler+0x17c>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	f6bf ac5d 	bge.w	800a2b4 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a9fa:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 800a9fe:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aa00:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa04:	f004 fb88 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	e453      	b.n	800a2b4 <HAL_PCD_IRQHandler+0x2dc>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa0c:	f504 7167 	add.w	r1, r4, #924	; 0x39c
 800aa10:	6820      	ldr	r0, [r4, #0]
 800aa12:	f004 fb81 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa16:	6863      	ldr	r3, [r4, #4]
 800aa18:	f7ff bba3 	b.w	800a162 <HAL_PCD_IRQHandler+0x18a>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	f6bf ac52 	bge.w	800a2c6 <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa22:	f504 7104 	add.w	r1, r4, #528	; 0x210
 800aa26:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aa28:	f884 2213 	strb.w	r2, [r4, #531]	; 0x213
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa2c:	f004 fb74 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa30:	6863      	ldr	r3, [r4, #4]
 800aa32:	e448      	b.n	800a2c6 <HAL_PCD_IRQHandler+0x2ee>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa34:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	f004 fb6d 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa3e:	6863      	ldr	r3, [r4, #4]
 800aa40:	f7ff bb96 	b.w	800a170 <HAL_PCD_IRQHandler+0x198>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aa44:	2900      	cmp	r1, #0
 800aa46:	f6bf ac47 	bge.w	800a2d8 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa4a:	f504 710d 	add.w	r1, r4, #564	; 0x234
 800aa4e:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aa50:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa54:	f004 fb60 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	e43d      	b.n	800a2d8 <HAL_PCD_IRQHandler+0x300>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa5c:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	f004 fb59 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	f7ff bb89 	b.w	800a17e <HAL_PCD_IRQHandler+0x1a6>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	f6bf ac3c 	bge.w	800a2ea <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa72:	f504 7116 	add.w	r1, r4, #600	; 0x258
 800aa76:	6820      	ldr	r0, [r4, #0]
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aa78:	f884 225b 	strb.w	r2, [r4, #603]	; 0x25b
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa7c:	f004 fb4c 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa80:	6863      	ldr	r3, [r4, #4]
 800aa82:	e432      	b.n	800a2ea <HAL_PCD_IRQHandler+0x312>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa84:	f504 6181 	add.w	r1, r4, #1032	; 0x408
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	f004 fb45 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	f7ff bb7c 	b.w	800a18c <HAL_PCD_IRQHandler+0x1b4>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aa94:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 800aa98:	6820      	ldr	r0, [r4, #0]
 800aa9a:	f004 fb3d 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa9e:	6863      	ldr	r3, [r4, #4]
 800aaa0:	f7ff bb7b 	b.w	800a19a <HAL_PCD_IRQHandler+0x1c2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800aaa4:	f013 0f28 	tst.w	r3, #40	; 0x28
 800aaa8:	f47f ad7f 	bne.w	800a5aa <HAL_PCD_IRQHandler+0x5d2>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aaac:	491b      	ldr	r1, [pc, #108]	; (800ab1c <HAL_PCD_IRQHandler+0xb44>)
 800aaae:	458c      	cmp	ip, r1
 800aab0:	d902      	bls.n	800aab8 <HAL_PCD_IRQHandler+0xae0>
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	f53f aef0 	bmi.w	800a898 <HAL_PCD_IRQHandler+0x8c0>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aab8:	6911      	ldr	r1, [r2, #16]
 800aaba:	f8da 229c 	ldr.w	r2, [sl, #668]	; 0x29c
 800aabe:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800aac2:	1a52      	subs	r2, r2, r1
 800aac4:	f8ca 2290 	str.w	r2, [sl, #656]	; 0x290
        if (epnum == 0U)
 800aac8:	f1b9 0f00 	cmp.w	r9, #0
 800aacc:	f47f ae3a 	bne.w	800a744 <HAL_PCD_IRQHandler+0x76c>
          if (ep->xfer_len == 0U)
 800aad0:	f8d4 128c 	ldr.w	r1, [r4, #652]	; 0x28c
 800aad4:	b1d9      	cbz	r1, 800ab0e <HAL_PCD_IRQHandler+0xb36>
            ep->xfer_buff += ep->xfer_count;
 800aad6:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
 800aada:	440a      	add	r2, r1
 800aadc:	f8c4 2288 	str.w	r2, [r4, #648]	; 0x288
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aae0:	e630      	b.n	800a744 <HAL_PCD_IRQHandler+0x76c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aae2:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	f004 fb16 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aaec:	6863      	ldr	r3, [r4, #4]
 800aaee:	f7ff bb5b 	b.w	800a1a8 <HAL_PCD_IRQHandler+0x1d0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aaf2:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f004 fc68 	bl	800f3cc <USB_EP0_OutStart>
 800aafc:	e622      	b.n	800a744 <HAL_PCD_IRQHandler+0x76c>
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800aafe:	f204 4174 	addw	r1, r4, #1140	; 0x474
 800ab02:	6820      	ldr	r0, [r4, #0]
 800ab04:	f004 fb08 	bl	800f118 <USB_EPStopXfer>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	f7ff bb54 	b.w	800a1b6 <HAL_PCD_IRQHandler+0x1de>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab0e:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800ab12:	2101      	movs	r1, #1
 800ab14:	f004 fc5a 	bl	800f3cc <USB_EP0_OutStart>
 800ab18:	e614      	b.n	800a744 <HAL_PCD_IRQHandler+0x76c>
 800ab1a:	bf00      	nop
 800ab1c:	4f54300a 	.word	0x4f54300a

0800ab20 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800ab20:	f890 24bc 	ldrb.w	r2, [r0, #1212]	; 0x4bc
 800ab24:	2a01      	cmp	r2, #1
 800ab26:	d00e      	beq.n	800ab46 <HAL_PCD_SetAddress+0x26>
 800ab28:	2201      	movs	r2, #1
{
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab2e:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800ab30:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800ab34:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ab38:	f004 fbce 	bl	800f2d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ab3c:	2300      	movs	r3, #0
  return HAL_OK;
 800ab3e:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ab40:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800ab44:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800ab46:	2002      	movs	r0, #2
}
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop

0800ab4c <HAL_PCD_EP_Open>:
{
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800ab52:	0609      	lsls	r1, r1, #24
{
 800ab54:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800ab56:	d427      	bmi.n	800aba8 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab58:	f04f 0c24 	mov.w	ip, #36	; 0x24
 800ab5c:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800ab60:	f50c 711f 	add.w	r1, ip, #636	; 0x27c
    ep->is_in = 0U;
 800ab64:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
 800ab68:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f88c 027d 	strb.w	r0, [ip, #637]	; 0x27d
  ep->maxpacket = ep_mps;
 800ab72:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800ab74:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab76:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800ab7a:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 800ab7c:	b10a      	cbz	r2, 800ab82 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800ab7e:	f8a1 e01a 	strh.w	lr, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d101      	bne.n	800ab8a <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	714b      	strb	r3, [r1, #5]
  __HAL_LOCK(hpcd);
 800ab8a:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d018      	beq.n	800abc4 <HAL_PCD_EP_Open+0x78>
 800ab92:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab94:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ab96:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab9a:	f004 f8d3 	bl	800ed44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab9e:	2300      	movs	r3, #0
  return ret;
 800aba0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800aba2:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800aba6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aba8:	2024      	movs	r0, #36	; 0x24
    ep->is_in = 1U;
 800abaa:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abae:	fb00 400e 	mla	r0, r0, lr, r4
 800abb2:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800abb6:	eb0e 00ce 	add.w	r0, lr, lr, lsl #3
 800abba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800abbe:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800abc2:	e7d6      	b.n	800ab72 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800abc4:	2002      	movs	r0, #2
}
 800abc6:	bd10      	pop	{r4, pc}

0800abc8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800abc8:	f011 0f80 	tst.w	r1, #128	; 0x80
 800abcc:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abd0:	f04f 0124 	mov.w	r1, #36	; 0x24
{
 800abd4:	b510      	push	{r4, lr}
 800abd6:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800abd8:	d11a      	bne.n	800ac10 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abda:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800abde:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800abe2:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abe4:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800abe8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800abec:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 800abf0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800abf2:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d019      	beq.n	800ac2e <HAL_PCD_EP_Close+0x66>
 800abfa:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abfc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800abfe:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac02:	f004 f8e7 	bl	800edd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac06:	2300      	movs	r3, #0
  return HAL_OK;
 800ac08:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ac0a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800ac0e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac10:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800ac14:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ac18:	2001      	movs	r0, #1
 800ac1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac1e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ac20:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac24:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800ac26:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d1e5      	bne.n	800abfa <HAL_PCD_EP_Close+0x32>
 800ac2e:	2002      	movs	r0, #2
}
 800ac30:	bd10      	pop	{r4, pc}
 800ac32:	bf00      	nop

0800ac34 <HAL_PCD_EP_Receive>:
{
 800ac34:	b508      	push	{r3, lr}
 800ac36:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac3a:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 800ac3c:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac40:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800ac44:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac48:	f501 711f 	add.w	r1, r1, #636	; 0x27c
  ep->xfer_len = len;
 800ac4c:	f8cc 328c 	str.w	r3, [ip, #652]	; 0x28c
  ep->xfer_count = 0U;
 800ac50:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800ac52:	f8cc 2288 	str.w	r2, [ip, #648]	; 0x288
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac56:	f88c e27c 	strb.w	lr, [ip, #636]	; 0x27c
  ep->xfer_count = 0U;
 800ac5a:	f8cc 3290 	str.w	r3, [ip, #656]	; 0x290
  ep->is_in = 0U;
 800ac5e:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  if (hpcd->Init.dma_enable == 1U)
 800ac62:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac64:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800ac66:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800ac68:	bf08      	it	eq
 800ac6a:	f8cc 2298 	streq.w	r2, [ip, #664]	; 0x298
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	f004 f90e 	bl	800ee90 <USB_EPStartXfer>
}
 800ac74:	2000      	movs	r0, #0
 800ac76:	bd08      	pop	{r3, pc}

0800ac78 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac78:	f001 010f 	and.w	r1, r1, #15
 800ac7c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ac80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800ac84:	f8d1 0290 	ldr.w	r0, [r1, #656]	; 0x290
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop

0800ac8c <HAL_PCD_EP_Transmit>:
{
 800ac8c:	b508      	push	{r3, lr}
 800ac8e:	f001 0e0f 	and.w	lr, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac92:	2124      	movs	r1, #36	; 0x24
  ep->xfer_buff = pBuf;
 800ac94:	eb0e 0cce 	add.w	ip, lr, lr, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac98:	fb01 010e 	mla	r1, r1, lr, r0
  ep->xfer_buff = pBuf;
 800ac9c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aca0:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800aca2:	f8cc 304c 	str.w	r3, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 800aca6:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800aca8:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800acac:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->is_in = 1U;
 800acb0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800acb2:	f88c e03c 	strb.w	lr, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800acb6:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800acba:	68c3      	ldr	r3, [r0, #12]
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acbc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800acbe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800acc0:	bf08      	it	eq
 800acc2:	f8cc 2058 	streq.w	r2, [ip, #88]	; 0x58
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	f004 f8e2 	bl	800ee90 <USB_EPStartXfer>
}
 800accc:	2000      	movs	r0, #0
 800acce:	bd08      	pop	{r3, pc}

0800acd0 <HAL_PCD_EP_SetStall>:
{
 800acd0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800acd2:	6843      	ldr	r3, [r0, #4]
 800acd4:	f001 050f 	and.w	r5, r1, #15
 800acd8:	429d      	cmp	r5, r3
 800acda:	d834      	bhi.n	800ad46 <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800acdc:	060b      	lsls	r3, r1, #24
 800acde:	4604      	mov	r4, r0
 800ace0:	d41d      	bmi.n	800ad1e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800ace2:	2224      	movs	r2, #36	; 0x24
    ep->is_in = 0U;
 800ace4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800ace8:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800acec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800acf0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800acf2:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800acf6:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 800acfa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800acfc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800acfe:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ad00:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d01c      	beq.n	800ad42 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ad08:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ad0a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ad0e:	f004 fa83 	bl	800f218 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad12:	b1d5      	cbz	r5, 800ad4a <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800ad14:	2300      	movs	r3, #0
  return HAL_OK;
 800ad16:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ad18:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
}
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad1e:	2124      	movs	r1, #36	; 0x24
    ep->is_in = 1U;
 800ad20:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 800ad24:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad26:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800ad2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad2e:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800ad34:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad36:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800ad38:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ad3a:	f894 24bc 	ldrb.w	r2, [r4, #1212]	; 0x4bc
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d1e2      	bne.n	800ad08 <HAL_PCD_EP_SetStall+0x38>
 800ad42:	2002      	movs	r0, #2
}
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ad46:	2001      	movs	r0, #1
}
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ad4a:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 800ad4e:	7b21      	ldrb	r1, [r4, #12]
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	f004 fb3b 	bl	800f3cc <USB_EP0_OutStart>
 800ad56:	e7dd      	b.n	800ad14 <HAL_PCD_EP_SetStall+0x44>

0800ad58 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad58:	6842      	ldr	r2, [r0, #4]
{
 800ad5a:	b538      	push	{r3, r4, r5, lr}
 800ad5c:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d832      	bhi.n	800adca <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800ad64:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ad68:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad6a:	f04f 0124 	mov.w	r1, #36	; 0x24
    ep->is_in = 1U;
 800ad6e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800ad72:	d119      	bne.n	800ada8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad74:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ad78:	2000      	movs	r0, #0
 800ad7a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800ad7e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad80:	f501 711f 	add.w	r1, r1, #636	; 0x27c
    ep->is_in = 0U;
 800ad84:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad88:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800ad8a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800ad8c:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d018      	beq.n	800adc6 <HAL_PCD_EP_ClrStall+0x6e>
 800ad94:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad96:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ad98:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ad9c:	f004 fa70 	bl	800f280 <USB_EPClearStall>
  return HAL_OK;
 800ada0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800ada2:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
}
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ada8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800adac:	2001      	movs	r0, #1
 800adae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800adb2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adb4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800adb6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800adba:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800adbc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800adbe:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d1e6      	bne.n	800ad94 <HAL_PCD_EP_ClrStall+0x3c>
 800adc6:	2002      	movs	r0, #2
}
 800adc8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800adca:	2001      	movs	r0, #1
}
 800adcc:	bd38      	pop	{r3, r4, r5, pc}
 800adce:	bf00      	nop

0800add0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800add0:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800add2:	6804      	ldr	r4, [r0, #0]
 800add4:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800add6:	b931      	cbnz	r1, 800ade6 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800add8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800addc:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800adde:	2000      	movs	r0, #0
 800ade0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade4:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ade6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800ade8:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800adec:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800adf0:	d00b      	beq.n	800ae0a <HAL_PCDEx_SetTxFiFo+0x3a>
 800adf2:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800adf4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800adf8:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800adfa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800adfe:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ae00:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800ae02:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ae04:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800ae08:	d3f4      	bcc.n	800adf4 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ae0a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800ae0e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800ae12:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800ae16:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ae1a:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800ae1e:	2000      	movs	r0, #0
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop

0800ae24 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ae24:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800ae26:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop

0800ae30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ae30:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800ae32:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ae36:	4909      	ldr	r1, [pc, #36]	; (800ae5c <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae38:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800ae3a:	4660      	mov	r0, ip
{
 800ae3c:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800ae3e:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800ae40:	f883 c4f4 	strb.w	ip, [r3, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 800ae44:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ae48:	6993      	ldr	r3, [r2, #24]
}
 800ae4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ae4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae52:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ae54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ae56:	4319      	orrs	r1, r3
 800ae58:	6551      	str	r1, [r2, #84]	; 0x54
}
 800ae5a:	4770      	bx	lr
 800ae5c:	10000003 	.word	0x10000003

0800ae60 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop

0800ae64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ae64:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ae66:	4c10      	ldr	r4, [pc, #64]	; (800aea8 <HAL_PWREx_ConfigSupply+0x44>)
 800ae68:	68e3      	ldr	r3, [r4, #12]
 800ae6a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ae6e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ae70:	d105      	bne.n	800ae7e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ae72:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ae76:	1a18      	subs	r0, r3, r0
 800ae78:	bf18      	it	ne
 800ae7a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ae7e:	f023 0307 	bic.w	r3, r3, #7
 800ae82:	4318      	orrs	r0, r3
 800ae84:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800ae86:	f7fb fec1 	bl	8006c0c <HAL_GetTick>
 800ae8a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae8c:	e005      	b.n	800ae9a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ae8e:	f7fb febd 	bl	8006c0c <HAL_GetTick>
 800ae92:	1b40      	subs	r0, r0, r5
 800ae94:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ae98:	d804      	bhi.n	800aea4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae9a:	6863      	ldr	r3, [r4, #4]
 800ae9c:	049b      	lsls	r3, r3, #18
 800ae9e:	d5f6      	bpl.n	800ae8e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800aea0:	2000      	movs	r0, #0
}
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800aea4:	2001      	movs	r0, #1
}
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	58024800 	.word	0x58024800

0800aeac <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800aeac:	4a02      	ldr	r2, [pc, #8]	; (800aeb8 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800aeae:	68d3      	ldr	r3, [r2, #12]
 800aeb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeb4:	60d3      	str	r3, [r2, #12]
}
 800aeb6:	4770      	bx	lr
 800aeb8:	58024800 	.word	0x58024800

0800aebc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aebc:	4b3b      	ldr	r3, [pc, #236]	; (800afac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800aebe:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aec2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aec4:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800aec6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aeca:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800aecc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800aed0:	d038      	beq.n	800af44 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aed2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aed6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeda:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aede:	fb05 f101 	mul.w	r1, r5, r1
 800aee2:	2a01      	cmp	r2, #1
 800aee4:	ee07 1a90 	vmov	s15, r1
 800aee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800aeec:	d002      	beq.n	800aef4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800aeee:	2a02      	cmp	r2, #2
 800aef0:	d04e      	beq.n	800af90 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800aef2:	b34a      	cbz	r2, 800af48 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aef4:	ee07 0a90 	vmov	s15, r0
 800aef8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800afb0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800aefc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af02:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800af06:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800afb4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800af0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0e:	ee06 3a90 	vmov	s13, r3
 800af12:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800af16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800af1a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800af1e:	eee7 6a25 	vfma.f32	s13, s14, s11
 800af22:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af26:	4b21      	ldr	r3, [pc, #132]	; (800afac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800af28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800af2e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af30:	ee07 3a90 	vmov	s15, r3
 800af34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800af38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af40:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800af44:	bc30      	pop	{r4, r5}
 800af46:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	0692      	lsls	r2, r2, #26
 800af4c:	d527      	bpl.n	800af9e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af4e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af50:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af54:	4a18      	ldr	r2, [pc, #96]	; (800afb8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af56:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800af5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af5c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af64:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800afb4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800af68:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af6c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af6e:	ee06 3a90 	vmov	s13, r3
 800af72:	ee05 2a90 	vmov	s11, r2
 800af76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800af7a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800af7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800af82:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800af86:	eee7 6a05 	vfma.f32	s13, s14, s10
 800af8a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800af8e:	e7ca      	b.n	800af26 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af90:	ee07 0a90 	vmov	s15, r0
 800af94:	eddf 6a09 	vldr	s13, [pc, #36]	; 800afbc <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800af98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af9c:	e7b0      	b.n	800af00 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af9e:	ee07 0a90 	vmov	s15, r0
 800afa2:	eddf 6a07 	vldr	s13, [pc, #28]	; 800afc0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800afa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afaa:	e7a9      	b.n	800af00 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800afac:	58024400 	.word	0x58024400
 800afb0:	4a742400 	.word	0x4a742400
 800afb4:	39000000 	.word	0x39000000
 800afb8:	03d09000 	.word	0x03d09000
 800afbc:	4bbebc20 	.word	0x4bbebc20
 800afc0:	4c742400 	.word	0x4c742400

0800afc4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f000 81e8 	beq.w	800b39a <HAL_RCC_OscConfig+0x3d6>
{
 800afca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800afcc:	6803      	ldr	r3, [r0, #0]
 800afce:	4604      	mov	r4, r0
 800afd0:	07d9      	lsls	r1, r3, #31
 800afd2:	d52e      	bpl.n	800b032 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afd4:	49a4      	ldr	r1, [pc, #656]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800afd6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800afd8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afda:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800afde:	2a10      	cmp	r2, #16
 800afe0:	f000 8107 	beq.w	800b1f2 <HAL_RCC_OscConfig+0x22e>
 800afe4:	2a18      	cmp	r2, #24
 800afe6:	f000 80ff 	beq.w	800b1e8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff0:	f000 812a 	beq.w	800b248 <HAL_RCC_OscConfig+0x284>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f000 8168 	beq.w	800b2ca <HAL_RCC_OscConfig+0x306>
 800affa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800affe:	4b9a      	ldr	r3, [pc, #616]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	f000 8289 	beq.w	800b518 <HAL_RCC_OscConfig+0x554>
 800b006:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b00a:	601a      	str	r2, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b012:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b014:	f7fb fdfa 	bl	8006c0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b018:	4e93      	ldr	r6, [pc, #588]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800b01a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b01c:	e005      	b.n	800b02a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b01e:	f7fb fdf5 	bl	8006c0c <HAL_GetTick>
 800b022:	1b40      	subs	r0, r0, r5
 800b024:	2864      	cmp	r0, #100	; 0x64
 800b026:	f200 814e 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b02a:	6833      	ldr	r3, [r6, #0]
 800b02c:	039b      	lsls	r3, r3, #14
 800b02e:	d5f6      	bpl.n	800b01e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	079d      	lsls	r5, r3, #30
 800b034:	f100 808a 	bmi.w	800b14c <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b038:	06d9      	lsls	r1, r3, #27
 800b03a:	d533      	bpl.n	800b0a4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b03c:	4a8a      	ldr	r2, [pc, #552]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b03e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b040:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b042:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b046:	2b08      	cmp	r3, #8
 800b048:	f000 80e3 	beq.w	800b212 <HAL_RCC_OscConfig+0x24e>
 800b04c:	2b18      	cmp	r3, #24
 800b04e:	f000 80db 	beq.w	800b208 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b052:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800b054:	4d84      	ldr	r5, [pc, #528]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 816f 	beq.w	800b33a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b062:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b064:	f7fb fdd2 	bl	8006c0c <HAL_GetTick>
 800b068:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b06a:	e005      	b.n	800b078 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b06c:	f7fb fdce 	bl	8006c0c <HAL_GetTick>
 800b070:	1b80      	subs	r0, r0, r6
 800b072:	2802      	cmp	r0, #2
 800b074:	f200 8127 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	05db      	lsls	r3, r3, #23
 800b07c:	d5f6      	bpl.n	800b06c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b07e:	f7fb fddd 	bl	8006c3c <HAL_GetREVID>
 800b082:	f241 0303 	movw	r3, #4099	; 0x1003
 800b086:	4298      	cmp	r0, r3
 800b088:	f200 826d 	bhi.w	800b566 <HAL_RCC_OscConfig+0x5a2>
 800b08c:	6a22      	ldr	r2, [r4, #32]
 800b08e:	686b      	ldr	r3, [r5, #4]
 800b090:	2a20      	cmp	r2, #32
 800b092:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b096:	bf0c      	ite	eq
 800b098:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800b09c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800b0a0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	071d      	lsls	r5, r3, #28
 800b0a6:	d516      	bpl.n	800b0d6 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b0a8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800b0aa:	4d6f      	ldr	r5, [pc, #444]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 8122 	beq.w	800b2f6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800b0b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b0b4:	f043 0301 	orr.w	r3, r3, #1
 800b0b8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b0ba:	f7fb fda7 	bl	8006c0c <HAL_GetTick>
 800b0be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b0c0:	e005      	b.n	800b0ce <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0c2:	f7fb fda3 	bl	8006c0c <HAL_GetTick>
 800b0c6:	1b80      	subs	r0, r0, r6
 800b0c8:	2802      	cmp	r0, #2
 800b0ca:	f200 80fc 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b0ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b0d0:	0798      	lsls	r0, r3, #30
 800b0d2:	d5f6      	bpl.n	800b0c2 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	069a      	lsls	r2, r3, #26
 800b0d8:	d516      	bpl.n	800b108 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b0da:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800b0dc:	4d62      	ldr	r5, [pc, #392]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 811a 	beq.w	800b318 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b0ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b0ec:	f7fb fd8e 	bl	8006c0c <HAL_GetTick>
 800b0f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b0f2:	e005      	b.n	800b100 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b0f4:	f7fb fd8a 	bl	8006c0c <HAL_GetTick>
 800b0f8:	1b80      	subs	r0, r0, r6
 800b0fa:	2802      	cmp	r0, #2
 800b0fc:	f200 80e3 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	049f      	lsls	r7, r3, #18
 800b104:	d5f6      	bpl.n	800b0f4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	0759      	lsls	r1, r3, #29
 800b10a:	f100 80a3 	bmi.w	800b254 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b10e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b110:	b1d0      	cbz	r0, 800b148 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b112:	4d55      	ldr	r5, [pc, #340]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b114:	692b      	ldr	r3, [r5, #16]
 800b116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b11a:	2b18      	cmp	r3, #24
 800b11c:	f000 81ae 	beq.w	800b47c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800b120:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b122:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800b124:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b128:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b12a:	f000 8142 	beq.w	800b3b2 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800b12e:	f7fb fd6d 	bl	8006c0c <HAL_GetTick>
 800b132:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b134:	e005      	b.n	800b142 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b136:	f7fb fd69 	bl	8006c0c <HAL_GetTick>
 800b13a:	1b00      	subs	r0, r0, r4
 800b13c:	2802      	cmp	r0, #2
 800b13e:	f200 80c2 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b142:	682b      	ldr	r3, [r5, #0]
 800b144:	019b      	lsls	r3, r3, #6
 800b146:	d4f6      	bmi.n	800b136 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800b148:	2000      	movs	r0, #0
}
 800b14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b14c:	4a46      	ldr	r2, [pc, #280]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b14e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b150:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b152:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800b156:	d12d      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b158:	4b43      	ldr	r3, [pc, #268]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b15a:	68e2      	ldr	r2, [r4, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	0759      	lsls	r1, r3, #29
 800b160:	d501      	bpl.n	800b166 <HAL_RCC_OscConfig+0x1a2>
 800b162:	2a00      	cmp	r2, #0
 800b164:	d04e      	beq.n	800b204 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b166:	4d40      	ldr	r5, [pc, #256]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	f023 0319 	bic.w	r3, r3, #25
 800b16e:	4313      	orrs	r3, r2
 800b170:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b172:	f7fb fd4b 	bl	8006c0c <HAL_GetTick>
 800b176:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b178:	e005      	b.n	800b186 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b17a:	f7fb fd47 	bl	8006c0c <HAL_GetTick>
 800b17e:	1b80      	subs	r0, r0, r6
 800b180:	2802      	cmp	r0, #2
 800b182:	f200 80a0 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b186:	682b      	ldr	r3, [r5, #0]
 800b188:	075b      	lsls	r3, r3, #29
 800b18a:	d5f6      	bpl.n	800b17a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b18c:	f7fb fd56 	bl	8006c3c <HAL_GetREVID>
 800b190:	f241 0303 	movw	r3, #4099	; 0x1003
 800b194:	4298      	cmp	r0, r3
 800b196:	f200 80f7 	bhi.w	800b388 <HAL_RCC_OscConfig+0x3c4>
 800b19a:	6922      	ldr	r2, [r4, #16]
 800b19c:	686b      	ldr	r3, [r5, #4]
 800b19e:	2a40      	cmp	r2, #64	; 0x40
 800b1a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b1a4:	bf0c      	ite	eq
 800b1a6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800b1aa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800b1ae:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	e741      	b.n	800b038 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b1b4:	2b18      	cmp	r3, #24
 800b1b6:	f000 80e3 	beq.w	800b380 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b1ba:	4d2b      	ldr	r5, [pc, #172]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b1bc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b1be:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	f000 80cc 	beq.w	800b35e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b1c6:	f023 0319 	bic.w	r3, r3, #25
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b1ce:	f7fb fd1d 	bl	8006c0c <HAL_GetTick>
 800b1d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1d4:	e004      	b.n	800b1e0 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1d6:	f7fb fd19 	bl	8006c0c <HAL_GetTick>
 800b1da:	1b80      	subs	r0, r0, r6
 800b1dc:	2802      	cmp	r0, #2
 800b1de:	d872      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	075f      	lsls	r7, r3, #29
 800b1e4:	d5f7      	bpl.n	800b1d6 <HAL_RCC_OscConfig+0x212>
 800b1e6:	e7d1      	b.n	800b18c <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b1e8:	f001 0103 	and.w	r1, r1, #3
 800b1ec:	2902      	cmp	r1, #2
 800b1ee:	f47f aefc 	bne.w	800afea <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1f2:	4a1d      	ldr	r2, [pc, #116]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b1f4:	6812      	ldr	r2, [r2, #0]
 800b1f6:	0392      	lsls	r2, r2, #14
 800b1f8:	f57f af1b 	bpl.w	800b032 <HAL_RCC_OscConfig+0x6e>
 800b1fc:	6862      	ldr	r2, [r4, #4]
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	f47f af17 	bne.w	800b032 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800b204:	2001      	movs	r0, #1
}
 800b206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b208:	f002 0203 	and.w	r2, r2, #3
 800b20c:	2a01      	cmp	r2, #1
 800b20e:	f47f af20 	bne.w	800b052 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	05da      	lsls	r2, r3, #23
 800b218:	d502      	bpl.n	800b220 <HAL_RCC_OscConfig+0x25c>
 800b21a:	69e3      	ldr	r3, [r4, #28]
 800b21c:	2b80      	cmp	r3, #128	; 0x80
 800b21e:	d1f1      	bne.n	800b204 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b220:	f7fb fd0c 	bl	8006c3c <HAL_GetREVID>
 800b224:	f241 0303 	movw	r3, #4099	; 0x1003
 800b228:	4298      	cmp	r0, r3
 800b22a:	f200 80b8 	bhi.w	800b39e <HAL_RCC_OscConfig+0x3da>
 800b22e:	6a22      	ldr	r2, [r4, #32]
 800b230:	2a20      	cmp	r2, #32
 800b232:	f000 81a7 	beq.w	800b584 <HAL_RCC_OscConfig+0x5c0>
 800b236:	490c      	ldr	r1, [pc, #48]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b238:	684b      	ldr	r3, [r1, #4]
 800b23a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b23e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800b242:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	e72d      	b.n	800b0a4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b248:	4a07      	ldr	r2, [pc, #28]	; (800b268 <HAL_RCC_OscConfig+0x2a4>)
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b250:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b252:	e6df      	b.n	800b014 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800b254:	4d05      	ldr	r5, [pc, #20]	; (800b26c <HAL_RCC_OscConfig+0x2a8>)
 800b256:	682b      	ldr	r3, [r5, #0]
 800b258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b25c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b25e:	f7fb fcd5 	bl	8006c0c <HAL_GetTick>
 800b262:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b264:	e009      	b.n	800b27a <HAL_RCC_OscConfig+0x2b6>
 800b266:	bf00      	nop
 800b268:	58024400 	.word	0x58024400
 800b26c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b270:	f7fb fccc 	bl	8006c0c <HAL_GetTick>
 800b274:	1b80      	subs	r0, r0, r6
 800b276:	2864      	cmp	r0, #100	; 0x64
 800b278:	d825      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b27a:	682b      	ldr	r3, [r5, #0]
 800b27c:	05da      	lsls	r2, r3, #23
 800b27e:	d5f7      	bpl.n	800b270 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b280:	68a3      	ldr	r3, [r4, #8]
 800b282:	2b01      	cmp	r3, #1
 800b284:	f000 8178 	beq.w	800b578 <HAL_RCC_OscConfig+0x5b4>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 8153 	beq.w	800b534 <HAL_RCC_OscConfig+0x570>
 800b28e:	2b05      	cmp	r3, #5
 800b290:	4ba5      	ldr	r3, [pc, #660]	; (800b528 <HAL_RCC_OscConfig+0x564>)
 800b292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b294:	f000 817f 	beq.w	800b596 <HAL_RCC_OscConfig+0x5d2>
 800b298:	f022 0201 	bic.w	r2, r2, #1
 800b29c:	671a      	str	r2, [r3, #112]	; 0x70
 800b29e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2a0:	f022 0204 	bic.w	r2, r2, #4
 800b2a4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b2a6:	f7fb fcb1 	bl	8006c0c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2aa:	4e9f      	ldr	r6, [pc, #636]	; (800b528 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2ac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b2b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2b2:	e004      	b.n	800b2be <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2b4:	f7fb fcaa 	bl	8006c0c <HAL_GetTick>
 800b2b8:	1b40      	subs	r0, r0, r5
 800b2ba:	42b8      	cmp	r0, r7
 800b2bc:	d803      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2be:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b2c0:	079b      	lsls	r3, r3, #30
 800b2c2:	d5f7      	bpl.n	800b2b4 <HAL_RCC_OscConfig+0x2f0>
 800b2c4:	e723      	b.n	800b10e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800b2c6:	2003      	movs	r0, #3
}
 800b2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2ca:	4d97      	ldr	r5, [pc, #604]	; (800b528 <HAL_RCC_OscConfig+0x564>)
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2d2:	602b      	str	r3, [r5, #0]
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b2da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b2dc:	f7fb fc96 	bl	8006c0c <HAL_GetTick>
 800b2e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b2e2:	e004      	b.n	800b2ee <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2e4:	f7fb fc92 	bl	8006c0c <HAL_GetTick>
 800b2e8:	1b80      	subs	r0, r0, r6
 800b2ea:	2864      	cmp	r0, #100	; 0x64
 800b2ec:	d8eb      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	039f      	lsls	r7, r3, #14
 800b2f2:	d4f7      	bmi.n	800b2e4 <HAL_RCC_OscConfig+0x320>
 800b2f4:	e69c      	b.n	800b030 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800b2f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b2fe:	f7fb fc85 	bl	8006c0c <HAL_GetTick>
 800b302:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b304:	e004      	b.n	800b310 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b306:	f7fb fc81 	bl	8006c0c <HAL_GetTick>
 800b30a:	1b80      	subs	r0, r0, r6
 800b30c:	2802      	cmp	r0, #2
 800b30e:	d8da      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b310:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b312:	0799      	lsls	r1, r3, #30
 800b314:	d4f7      	bmi.n	800b306 <HAL_RCC_OscConfig+0x342>
 800b316:	e6dd      	b.n	800b0d4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b31e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b320:	f7fb fc74 	bl	8006c0c <HAL_GetTick>
 800b324:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b326:	e004      	b.n	800b332 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b328:	f7fb fc70 	bl	8006c0c <HAL_GetTick>
 800b32c:	1b80      	subs	r0, r0, r6
 800b32e:	2802      	cmp	r0, #2
 800b330:	d8c9      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b332:	682b      	ldr	r3, [r5, #0]
 800b334:	0498      	lsls	r0, r3, #18
 800b336:	d4f7      	bmi.n	800b328 <HAL_RCC_OscConfig+0x364>
 800b338:	e6e5      	b.n	800b106 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b340:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b342:	f7fb fc63 	bl	8006c0c <HAL_GetTick>
 800b346:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b348:	e004      	b.n	800b354 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b34a:	f7fb fc5f 	bl	8006c0c <HAL_GetTick>
 800b34e:	1b80      	subs	r0, r0, r6
 800b350:	2802      	cmp	r0, #2
 800b352:	d8b8      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	05df      	lsls	r7, r3, #23
 800b358:	d4f7      	bmi.n	800b34a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	e6a2      	b.n	800b0a4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800b35e:	f023 0301 	bic.w	r3, r3, #1
 800b362:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b364:	f7fb fc52 	bl	8006c0c <HAL_GetTick>
 800b368:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b36a:	e004      	b.n	800b376 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b36c:	f7fb fc4e 	bl	8006c0c <HAL_GetTick>
 800b370:	1b80      	subs	r0, r0, r6
 800b372:	2802      	cmp	r0, #2
 800b374:	d8a7      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	0758      	lsls	r0, r3, #29
 800b37a:	d4f7      	bmi.n	800b36c <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	e65b      	b.n	800b038 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b380:	0790      	lsls	r0, r2, #30
 800b382:	f47f af1a 	bne.w	800b1ba <HAL_RCC_OscConfig+0x1f6>
 800b386:	e6e7      	b.n	800b158 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b388:	686b      	ldr	r3, [r5, #4]
 800b38a:	6922      	ldr	r2, [r4, #16]
 800b38c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b390:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b394:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	e64e      	b.n	800b038 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800b39a:	2001      	movs	r0, #1
}
 800b39c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b39e:	4a62      	ldr	r2, [pc, #392]	; (800b528 <HAL_RCC_OscConfig+0x564>)
 800b3a0:	6a21      	ldr	r1, [r4, #32]
 800b3a2:	68d3      	ldr	r3, [r2, #12]
 800b3a4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b3a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b3ac:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	e678      	b.n	800b0a4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800b3b2:	f7fb fc2b 	bl	8006c0c <HAL_GetTick>
 800b3b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b3b8:	e004      	b.n	800b3c4 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3ba:	f7fb fc27 	bl	8006c0c <HAL_GetTick>
 800b3be:	1b80      	subs	r0, r0, r6
 800b3c0:	2802      	cmp	r0, #2
 800b3c2:	d880      	bhi.n	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	0199      	lsls	r1, r3, #6
 800b3c8:	d4f7      	bmi.n	800b3ba <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b3cc:	4b57      	ldr	r3, [pc, #348]	; (800b52c <HAL_RCC_OscConfig+0x568>)
 800b3ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b3d0:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b3d2:	4957      	ldr	r1, [pc, #348]	; (800b530 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b3d4:	4e54      	ldr	r6, [pc, #336]	; (800b528 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b3da:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b3de:	62ab      	str	r3, [r5, #40]	; 0x28
 800b3e0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	3a01      	subs	r2, #1
 800b3e8:	025b      	lsls	r3, r3, #9
 800b3ea:	0412      	lsls	r2, r2, #16
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b3f6:	3a01      	subs	r2, #1
 800b3f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b400:	3a01      	subs	r2, #1
 800b402:	0612      	lsls	r2, r2, #24
 800b404:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b408:	4313      	orrs	r3, r2
 800b40a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b40c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b40e:	f023 0301 	bic.w	r3, r3, #1
 800b412:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b414:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b416:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b418:	4011      	ands	r1, r2
 800b41a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800b41e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b420:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b422:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b424:	f023 030c 	bic.w	r3, r3, #12
 800b428:	4313      	orrs	r3, r2
 800b42a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b42c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b42e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b430:	f023 0302 	bic.w	r3, r3, #2
 800b434:	4313      	orrs	r3, r2
 800b436:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b438:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b43a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b43e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b440:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b446:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b448:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b44a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b44e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b450:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b452:	f043 0301 	orr.w	r3, r3, #1
 800b456:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b45e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b460:	f7fb fbd4 	bl	8006c0c <HAL_GetTick>
 800b464:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b466:	e005      	b.n	800b474 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b468:	f7fb fbd0 	bl	8006c0c <HAL_GetTick>
 800b46c:	1b00      	subs	r0, r0, r4
 800b46e:	2802      	cmp	r0, #2
 800b470:	f63f af29 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b474:	6833      	ldr	r3, [r6, #0]
 800b476:	019a      	lsls	r2, r3, #6
 800b478:	d5f6      	bpl.n	800b468 <HAL_RCC_OscConfig+0x4a4>
 800b47a:	e665      	b.n	800b148 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b47c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b47e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b480:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b482:	f43f ae62 	beq.w	800b14a <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b486:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b48a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b48c:	428b      	cmp	r3, r1
 800b48e:	f47f aeb9 	bne.w	800b204 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b492:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b498:	429a      	cmp	r2, r3
 800b49a:	f47f aeb3 	bne.w	800b204 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b49e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4a0:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800b4a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	f47f aeac 	bne.w	800b204 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b4ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4ae:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800b4b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	f47f aea5 	bne.w	800b204 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b4ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4bc:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800b4c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	f47f ae9e 	bne.w	800b204 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b4c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4ca:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800b4ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b4d0:	429e      	cmp	r6, r3
 800b4d2:	f47f ae97 	bne.w	800b204 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b4d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b4d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b4da:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	f43f ae32 	beq.w	800b148 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b4e4:	4a10      	ldr	r2, [pc, #64]	; (800b528 <HAL_RCC_OscConfig+0x564>)
 800b4e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800b4ee:	f7fb fb8d 	bl	8006c0c <HAL_GetTick>
 800b4f2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b4f4:	f7fb fb8a 	bl	8006c0c <HAL_GetTick>
 800b4f8:	42a8      	cmp	r0, r5
 800b4fa:	d0fb      	beq.n	800b4f4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b4fc:	4a0a      	ldr	r2, [pc, #40]	; (800b528 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 800b4fe:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b502:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <HAL_RCC_OscConfig+0x56c>)
 800b504:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b506:	4023      	ands	r3, r4
 800b508:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b50c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b50e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b510:	f043 0301 	orr.w	r3, r3, #1
 800b514:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b518:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e575      	b.n	800b014 <HAL_RCC_OscConfig+0x50>
 800b528:	58024400 	.word	0x58024400
 800b52c:	fffffc0c 	.word	0xfffffc0c
 800b530:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b534:	4d1c      	ldr	r5, [pc, #112]	; (800b5a8 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b536:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b53a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b53c:	f023 0301 	bic.w	r3, r3, #1
 800b540:	672b      	str	r3, [r5, #112]	; 0x70
 800b542:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b544:	f023 0304 	bic.w	r3, r3, #4
 800b548:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b54a:	f7fb fb5f 	bl	8006c0c <HAL_GetTick>
 800b54e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b550:	e005      	b.n	800b55e <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b552:	f7fb fb5b 	bl	8006c0c <HAL_GetTick>
 800b556:	1b80      	subs	r0, r0, r6
 800b558:	42b8      	cmp	r0, r7
 800b55a:	f63f aeb4 	bhi.w	800b2c6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b55e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b560:	0798      	lsls	r0, r3, #30
 800b562:	d4f6      	bmi.n	800b552 <HAL_RCC_OscConfig+0x58e>
 800b564:	e5d3      	b.n	800b10e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b566:	68eb      	ldr	r3, [r5, #12]
 800b568:	6a22      	ldr	r2, [r4, #32]
 800b56a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b56e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b572:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	e595      	b.n	800b0a4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b578:	4a0b      	ldr	r2, [pc, #44]	; (800b5a8 <HAL_RCC_OscConfig+0x5e4>)
 800b57a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b57c:	f043 0301 	orr.w	r3, r3, #1
 800b580:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b582:	e690      	b.n	800b2a6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b584:	4a08      	ldr	r2, [pc, #32]	; (800b5a8 <HAL_RCC_OscConfig+0x5e4>)
 800b586:	6853      	ldr	r3, [r2, #4]
 800b588:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b58c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b590:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	e586      	b.n	800b0a4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b596:	f042 0204 	orr.w	r2, r2, #4
 800b59a:	671a      	str	r2, [r3, #112]	; 0x70
 800b59c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	671a      	str	r2, [r3, #112]	; 0x70
 800b5a4:	e67f      	b.n	800b2a6 <HAL_RCC_OscConfig+0x2e2>
 800b5a6:	bf00      	nop
 800b5a8:	58024400 	.word	0x58024400

0800b5ac <HAL_RCC_MCOConfig>:
{
 800b5ac:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800b5ae:	4e25      	ldr	r6, [pc, #148]	; (800b644 <HAL_RCC_MCOConfig+0x98>)
{
 800b5b0:	b088      	sub	sp, #32
 800b5b2:	460d      	mov	r5, r1
 800b5b4:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 800b5b6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b5ba:	b9f8      	cbnz	r0, 800b5fc <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b5bc:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b5c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b5c4:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 800b5c6:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b5ca:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b5ce:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 800b5d0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b5d4:	481c      	ldr	r0, [pc, #112]	; (800b648 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b5e8:	f7fe fa7a 	bl	8009ae0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b5ec:	6932      	ldr	r2, [r6, #16]
 800b5ee:	f022 72fe 	bic.w	r2, r2, #33292288	; 0x1fc0000
 800b5f2:	432a      	orrs	r2, r5
 800b5f4:	4322      	orrs	r2, r4
 800b5f6:	6132      	str	r2, [r6, #16]
}
 800b5f8:	b008      	add	sp, #32
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b5fc:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b600:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b604:	4811      	ldr	r0, [pc, #68]	; (800b64c <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 800b606:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b60a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b60e:	f003 0304 	and.w	r3, r3, #4
 800b612:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b614:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 800b616:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b618:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b61a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b61e:	2200      	movs	r2, #0
 800b620:	2303      	movs	r3, #3
 800b622:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b626:	2300      	movs	r3, #0
 800b628:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b62a:	f7fe fa59 	bl	8009ae0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b62e:	6933      	ldr	r3, [r6, #16]
 800b630:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800b634:	ea43 0105 	orr.w	r1, r3, r5
 800b638:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 800b63c:	6131      	str	r1, [r6, #16]
}
 800b63e:	b008      	add	sp, #32
 800b640:	bd70      	pop	{r4, r5, r6, pc}
 800b642:	bf00      	nop
 800b644:	58024400 	.word	0x58024400
 800b648:	58020000 	.word	0x58020000
 800b64c:	58020800 	.word	0x58020800

0800b650 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b650:	4a47      	ldr	r2, [pc, #284]	; (800b770 <HAL_RCC_GetSysClockFreq+0x120>)
 800b652:	6913      	ldr	r3, [r2, #16]
 800b654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b658:	2b10      	cmp	r3, #16
 800b65a:	d004      	beq.n	800b666 <HAL_RCC_GetSysClockFreq+0x16>
 800b65c:	2b18      	cmp	r3, #24
 800b65e:	d00d      	beq.n	800b67c <HAL_RCC_GetSysClockFreq+0x2c>
 800b660:	b11b      	cbz	r3, 800b66a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800b662:	4844      	ldr	r0, [pc, #272]	; (800b774 <HAL_RCC_GetSysClockFreq+0x124>)
 800b664:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b666:	4844      	ldr	r0, [pc, #272]	; (800b778 <HAL_RCC_GetSysClockFreq+0x128>)
 800b668:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b66a:	6813      	ldr	r3, [r2, #0]
 800b66c:	0699      	lsls	r1, r3, #26
 800b66e:	d54a      	bpl.n	800b706 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b670:	6813      	ldr	r3, [r2, #0]
 800b672:	4842      	ldr	r0, [pc, #264]	; (800b77c <HAL_RCC_GetSysClockFreq+0x12c>)
 800b674:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b678:	40d8      	lsrs	r0, r3
 800b67a:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b67c:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800b67e:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b680:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b682:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800b684:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b688:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b68a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b68e:	d038      	beq.n	800b702 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b690:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b694:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b698:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b69c:	fb05 f101 	mul.w	r1, r5, r1
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	ee07 1a90 	vmov	s15, r1
 800b6a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800b6aa:	d002      	beq.n	800b6b2 <HAL_RCC_GetSysClockFreq+0x62>
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d02c      	beq.n	800b70a <HAL_RCC_GetSysClockFreq+0xba>
 800b6b0:	b393      	cbz	r3, 800b718 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b2:	ee07 0a90 	vmov	s15, r0
 800b6b6:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b780 <HAL_RCC_GetSysClockFreq+0x130>
 800b6ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b6c0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b6c4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800b784 <HAL_RCC_GetSysClockFreq+0x134>
 800b6c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6cc:	ee06 3a90 	vmov	s13, r3
 800b6d0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b6d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b6d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b6dc:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b6e0:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b6e4:	4b22      	ldr	r3, [pc, #136]	; (800b770 <HAL_RCC_GetSysClockFreq+0x120>)
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b6ec:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fe:	ee17 0a90 	vmov	r0, s15
}
 800b702:	bc30      	pop	{r4, r5}
 800b704:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b706:	481d      	ldr	r0, [pc, #116]	; (800b77c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800b708:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b70a:	ee07 0a90 	vmov	s15, r0
 800b70e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b788 <HAL_RCC_GetSysClockFreq+0x138>
 800b712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b716:	e7d2      	b.n	800b6be <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b718:	6813      	ldr	r3, [r2, #0]
 800b71a:	069b      	lsls	r3, r3, #26
 800b71c:	d520      	bpl.n	800b760 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b720:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b724:	4915      	ldr	r1, [pc, #84]	; (800b77c <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b726:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b72a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b72c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b734:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800b784 <HAL_RCC_GetSysClockFreq+0x134>
 800b738:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b73c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b73e:	ee06 3a90 	vmov	s13, r3
 800b742:	ee05 1a90 	vmov	s11, r1
 800b746:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b74a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b74e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b752:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b756:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b75a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b75e:	e7c1      	b.n	800b6e4 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b760:	ee07 0a90 	vmov	s15, r0
 800b764:	eddf 6a09 	vldr	s13, [pc, #36]	; 800b78c <HAL_RCC_GetSysClockFreq+0x13c>
 800b768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b76c:	e7a7      	b.n	800b6be <HAL_RCC_GetSysClockFreq+0x6e>
 800b76e:	bf00      	nop
 800b770:	58024400 	.word	0x58024400
 800b774:	003d0900 	.word	0x003d0900
 800b778:	017d7840 	.word	0x017d7840
 800b77c:	03d09000 	.word	0x03d09000
 800b780:	4a742400 	.word	0x4a742400
 800b784:	39000000 	.word	0x39000000
 800b788:	4bbebc20 	.word	0x4bbebc20
 800b78c:	4c742400 	.word	0x4c742400

0800b790 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b790:	2800      	cmp	r0, #0
 800b792:	f000 810c 	beq.w	800b9ae <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b796:	4a8c      	ldr	r2, [pc, #560]	; (800b9c8 <HAL_RCC_ClockConfig+0x238>)
 800b798:	6813      	ldr	r3, [r2, #0]
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	428b      	cmp	r3, r1
{
 800b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7a8:	d20c      	bcs.n	800b7c4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7aa:	6813      	ldr	r3, [r2, #0]
 800b7ac:	f023 030f 	bic.w	r3, r3, #15
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7b4:	6813      	ldr	r3, [r2, #0]
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	428b      	cmp	r3, r1
 800b7bc:	d002      	beq.n	800b7c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b7be:	2001      	movs	r0, #1
}
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	075f      	lsls	r7, r3, #29
 800b7c8:	d50b      	bpl.n	800b7e2 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b7ca:	4980      	ldr	r1, [pc, #512]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b7cc:	6920      	ldr	r0, [r4, #16]
 800b7ce:	698a      	ldr	r2, [r1, #24]
 800b7d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b7d4:	4290      	cmp	r0, r2
 800b7d6:	d904      	bls.n	800b7e2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b7d8:	698a      	ldr	r2, [r1, #24]
 800b7da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b7de:	4302      	orrs	r2, r0
 800b7e0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7e2:	071e      	lsls	r6, r3, #28
 800b7e4:	d50b      	bpl.n	800b7fe <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b7e6:	4979      	ldr	r1, [pc, #484]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b7e8:	6960      	ldr	r0, [r4, #20]
 800b7ea:	69ca      	ldr	r2, [r1, #28]
 800b7ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b7f0:	4290      	cmp	r0, r2
 800b7f2:	d904      	bls.n	800b7fe <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b7f4:	69ca      	ldr	r2, [r1, #28]
 800b7f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b7fa:	4302      	orrs	r2, r0
 800b7fc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7fe:	06d8      	lsls	r0, r3, #27
 800b800:	d50b      	bpl.n	800b81a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b802:	4972      	ldr	r1, [pc, #456]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b804:	69a0      	ldr	r0, [r4, #24]
 800b806:	69ca      	ldr	r2, [r1, #28]
 800b808:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b80c:	4290      	cmp	r0, r2
 800b80e:	d904      	bls.n	800b81a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b810:	69ca      	ldr	r2, [r1, #28]
 800b812:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b816:	4302      	orrs	r2, r0
 800b818:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b81a:	0699      	lsls	r1, r3, #26
 800b81c:	d50b      	bpl.n	800b836 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b81e:	496b      	ldr	r1, [pc, #428]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b820:	69e0      	ldr	r0, [r4, #28]
 800b822:	6a0a      	ldr	r2, [r1, #32]
 800b824:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b828:	4290      	cmp	r0, r2
 800b82a:	d904      	bls.n	800b836 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b82c:	6a0a      	ldr	r2, [r1, #32]
 800b82e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b832:	4302      	orrs	r2, r0
 800b834:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b836:	079a      	lsls	r2, r3, #30
 800b838:	f140 80ab 	bpl.w	800b992 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b83c:	4863      	ldr	r0, [pc, #396]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b83e:	68e1      	ldr	r1, [r4, #12]
 800b840:	6982      	ldr	r2, [r0, #24]
 800b842:	f002 020f 	and.w	r2, r2, #15
 800b846:	4291      	cmp	r1, r2
 800b848:	d904      	bls.n	800b854 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b84a:	6982      	ldr	r2, [r0, #24]
 800b84c:	f022 020f 	bic.w	r2, r2, #15
 800b850:	430a      	orrs	r2, r1
 800b852:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b854:	07d8      	lsls	r0, r3, #31
 800b856:	d530      	bpl.n	800b8ba <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b858:	4a5c      	ldr	r2, [pc, #368]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b85a:	68a1      	ldr	r1, [r4, #8]
 800b85c:	6993      	ldr	r3, [r2, #24]
 800b85e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b862:	430b      	orrs	r3, r1
 800b864:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b866:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b868:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b86a:	2902      	cmp	r1, #2
 800b86c:	f000 80a1 	beq.w	800b9b2 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b870:	2903      	cmp	r1, #3
 800b872:	f000 8098 	beq.w	800b9a6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b876:	2901      	cmp	r1, #1
 800b878:	f000 80a1 	beq.w	800b9be <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b87c:	0758      	lsls	r0, r3, #29
 800b87e:	d59e      	bpl.n	800b7be <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b880:	4e52      	ldr	r6, [pc, #328]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b882:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b886:	6933      	ldr	r3, [r6, #16]
 800b888:	f023 0307 	bic.w	r3, r3, #7
 800b88c:	430b      	orrs	r3, r1
 800b88e:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800b890:	f7fb f9bc 	bl	8006c0c <HAL_GetTick>
 800b894:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b896:	e005      	b.n	800b8a4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b898:	f7fb f9b8 	bl	8006c0c <HAL_GetTick>
 800b89c:	1bc0      	subs	r0, r0, r7
 800b89e:	4540      	cmp	r0, r8
 800b8a0:	f200 808b 	bhi.w	800b9ba <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8a4:	6933      	ldr	r3, [r6, #16]
 800b8a6:	6862      	ldr	r2, [r4, #4]
 800b8a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8ac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b8b0:	d1f2      	bne.n	800b898 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	0799      	lsls	r1, r3, #30
 800b8b6:	d506      	bpl.n	800b8c6 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b8b8:	68e1      	ldr	r1, [r4, #12]
 800b8ba:	4844      	ldr	r0, [pc, #272]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b8bc:	6982      	ldr	r2, [r0, #24]
 800b8be:	f002 020f 	and.w	r2, r2, #15
 800b8c2:	428a      	cmp	r2, r1
 800b8c4:	d869      	bhi.n	800b99a <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8c6:	4940      	ldr	r1, [pc, #256]	; (800b9c8 <HAL_RCC_ClockConfig+0x238>)
 800b8c8:	680a      	ldr	r2, [r1, #0]
 800b8ca:	f002 020f 	and.w	r2, r2, #15
 800b8ce:	42aa      	cmp	r2, r5
 800b8d0:	d90a      	bls.n	800b8e8 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8d2:	680a      	ldr	r2, [r1, #0]
 800b8d4:	f022 020f 	bic.w	r2, r2, #15
 800b8d8:	432a      	orrs	r2, r5
 800b8da:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8dc:	680a      	ldr	r2, [r1, #0]
 800b8de:	f002 020f 	and.w	r2, r2, #15
 800b8e2:	42aa      	cmp	r2, r5
 800b8e4:	f47f af6b 	bne.w	800b7be <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b8e8:	075a      	lsls	r2, r3, #29
 800b8ea:	d50b      	bpl.n	800b904 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b8ec:	4937      	ldr	r1, [pc, #220]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b8ee:	6920      	ldr	r0, [r4, #16]
 800b8f0:	698a      	ldr	r2, [r1, #24]
 800b8f2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b8f6:	4290      	cmp	r0, r2
 800b8f8:	d204      	bcs.n	800b904 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b8fa:	698a      	ldr	r2, [r1, #24]
 800b8fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b900:	4302      	orrs	r2, r0
 800b902:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b904:	071f      	lsls	r7, r3, #28
 800b906:	d50b      	bpl.n	800b920 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b908:	4930      	ldr	r1, [pc, #192]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b90a:	6960      	ldr	r0, [r4, #20]
 800b90c:	69ca      	ldr	r2, [r1, #28]
 800b90e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b912:	4290      	cmp	r0, r2
 800b914:	d204      	bcs.n	800b920 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b916:	69ca      	ldr	r2, [r1, #28]
 800b918:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b91c:	4302      	orrs	r2, r0
 800b91e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b920:	06de      	lsls	r6, r3, #27
 800b922:	d50b      	bpl.n	800b93c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b924:	4929      	ldr	r1, [pc, #164]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b926:	69a0      	ldr	r0, [r4, #24]
 800b928:	69ca      	ldr	r2, [r1, #28]
 800b92a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b92e:	4290      	cmp	r0, r2
 800b930:	d204      	bcs.n	800b93c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b932:	69ca      	ldr	r2, [r1, #28]
 800b934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b938:	4302      	orrs	r2, r0
 800b93a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b93c:	069d      	lsls	r5, r3, #26
 800b93e:	d50b      	bpl.n	800b958 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b940:	4a22      	ldr	r2, [pc, #136]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b942:	69e1      	ldr	r1, [r4, #28]
 800b944:	6a13      	ldr	r3, [r2, #32]
 800b946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b94a:	4299      	cmp	r1, r3
 800b94c:	d204      	bcs.n	800b958 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b94e:	6a13      	ldr	r3, [r2, #32]
 800b950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b954:	430b      	orrs	r3, r1
 800b956:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b958:	f7ff fe7a 	bl	800b650 <HAL_RCC_GetSysClockFreq>
 800b95c:	4a1b      	ldr	r2, [pc, #108]	; (800b9cc <HAL_RCC_ClockConfig+0x23c>)
 800b95e:	4603      	mov	r3, r0
 800b960:	481b      	ldr	r0, [pc, #108]	; (800b9d0 <HAL_RCC_ClockConfig+0x240>)
 800b962:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b964:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b966:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b96a:	4d1a      	ldr	r5, [pc, #104]	; (800b9d4 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b96c:	f002 020f 	and.w	r2, r2, #15
 800b970:	4c19      	ldr	r4, [pc, #100]	; (800b9d8 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b972:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b974:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b976:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b97a:	4818      	ldr	r0, [pc, #96]	; (800b9dc <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b97c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b980:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b982:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b984:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b986:	40d3      	lsrs	r3, r2
 800b988:	6023      	str	r3, [r4, #0]
}
 800b98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b98e:	f7fb b8db 	b.w	8006b48 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b992:	07da      	lsls	r2, r3, #31
 800b994:	f53f af60 	bmi.w	800b858 <HAL_RCC_ClockConfig+0xc8>
 800b998:	e795      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b99a:	6982      	ldr	r2, [r0, #24]
 800b99c:	f022 020f 	bic.w	r2, r2, #15
 800b9a0:	4311      	orrs	r1, r2
 800b9a2:	6181      	str	r1, [r0, #24]
 800b9a4:	e78f      	b.n	800b8c6 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9a6:	019f      	lsls	r7, r3, #6
 800b9a8:	f53f af6a 	bmi.w	800b880 <HAL_RCC_ClockConfig+0xf0>
 800b9ac:	e707      	b.n	800b7be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b9ae:	2001      	movs	r0, #1
}
 800b9b0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b9b2:	039b      	lsls	r3, r3, #14
 800b9b4:	f53f af64 	bmi.w	800b880 <HAL_RCC_ClockConfig+0xf0>
 800b9b8:	e701      	b.n	800b7be <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b9ba:	2003      	movs	r0, #3
 800b9bc:	e700      	b.n	800b7c0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9be:	05de      	lsls	r6, r3, #23
 800b9c0:	f53f af5e 	bmi.w	800b880 <HAL_RCC_ClockConfig+0xf0>
 800b9c4:	e6fb      	b.n	800b7be <HAL_RCC_ClockConfig+0x2e>
 800b9c6:	bf00      	nop
 800b9c8:	52002000 	.word	0x52002000
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	0801dd14 	.word	0x0801dd14
 800b9d4:	24000310 	.word	0x24000310
 800b9d8:	24000314 	.word	0x24000314
 800b9dc:	2400031c 	.word	0x2400031c

0800b9e0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9e0:	4a18      	ldr	r2, [pc, #96]	; (800ba44 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b9e2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9e4:	6913      	ldr	r3, [r2, #16]
 800b9e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9ea:	2b10      	cmp	r3, #16
 800b9ec:	d01a      	beq.n	800ba24 <HAL_RCC_GetHCLKFreq+0x44>
 800b9ee:	2b18      	cmp	r3, #24
 800b9f0:	d023      	beq.n	800ba3a <HAL_RCC_GetHCLKFreq+0x5a>
 800b9f2:	b1cb      	cbz	r3, 800ba28 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800b9f4:	4814      	ldr	r0, [pc, #80]	; (800ba48 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <HAL_RCC_GetHCLKFreq+0x64>)
 800b9f8:	4914      	ldr	r1, [pc, #80]	; (800ba4c <HAL_RCC_GetHCLKFreq+0x6c>)
 800b9fa:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b9fc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b9fe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba02:	4c13      	ldr	r4, [pc, #76]	; (800ba50 <HAL_RCC_GetHCLKFreq+0x70>)
 800ba04:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba08:	4d12      	ldr	r5, [pc, #72]	; (800ba54 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba0a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba0c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba0e:	f002 021f 	and.w	r2, r2, #31
 800ba12:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba16:	f003 001f 	and.w	r0, r3, #31
 800ba1a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800ba1e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba20:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba24:	480c      	ldr	r0, [pc, #48]	; (800ba58 <HAL_RCC_GetHCLKFreq+0x78>)
 800ba26:	e7e6      	b.n	800b9f6 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba28:	6813      	ldr	r3, [r2, #0]
 800ba2a:	069b      	lsls	r3, r3, #26
 800ba2c:	d508      	bpl.n	800ba40 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba2e:	6812      	ldr	r2, [r2, #0]
 800ba30:	480a      	ldr	r0, [pc, #40]	; (800ba5c <HAL_RCC_GetHCLKFreq+0x7c>)
 800ba32:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800ba36:	40d0      	lsrs	r0, r2
 800ba38:	e7dd      	b.n	800b9f6 <HAL_RCC_GetHCLKFreq+0x16>
 800ba3a:	f7ff fa3f 	bl	800aebc <HAL_RCC_GetSysClockFreq.part.0>
 800ba3e:	e7da      	b.n	800b9f6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ba40:	4806      	ldr	r0, [pc, #24]	; (800ba5c <HAL_RCC_GetHCLKFreq+0x7c>)
 800ba42:	e7d8      	b.n	800b9f6 <HAL_RCC_GetHCLKFreq+0x16>
 800ba44:	58024400 	.word	0x58024400
 800ba48:	003d0900 	.word	0x003d0900
 800ba4c:	0801dd14 	.word	0x0801dd14
 800ba50:	24000314 	.word	0x24000314
 800ba54:	24000310 	.word	0x24000310
 800ba58:	017d7840 	.word	0x017d7840
 800ba5c:	03d09000 	.word	0x03d09000

0800ba60 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba60:	4a1c      	ldr	r2, [pc, #112]	; (800bad4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba62:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba64:	6913      	ldr	r3, [r2, #16]
 800ba66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba6a:	2b10      	cmp	r3, #16
 800ba6c:	d021      	beq.n	800bab2 <HAL_RCC_GetPCLK1Freq+0x52>
 800ba6e:	2b18      	cmp	r3, #24
 800ba70:	d02b      	beq.n	800baca <HAL_RCC_GetPCLK1Freq+0x6a>
 800ba72:	b303      	cbz	r3, 800bab6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800ba74:	4818      	ldr	r0, [pc, #96]	; (800bad8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba76:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <HAL_RCC_GetPCLK1Freq+0x74>)
 800ba78:	4918      	ldr	r1, [pc, #96]	; (800badc <HAL_RCC_GetPCLK1Freq+0x7c>)
 800ba7a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800ba7c:	4d18      	ldr	r5, [pc, #96]	; (800bae0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba7e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba82:	4c18      	ldr	r4, [pc, #96]	; (800bae4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba84:	5ccb      	ldrb	r3, [r1, r3]
 800ba86:	f003 031f 	and.w	r3, r3, #31
 800ba8a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba8e:	6990      	ldr	r0, [r2, #24]
 800ba90:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800ba94:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba96:	5c08      	ldrb	r0, [r1, r0]
 800ba98:	f000 001f 	and.w	r0, r0, #31
 800ba9c:	40c3      	lsrs	r3, r0
 800ba9e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800baa0:	69d2      	ldr	r2, [r2, #28]
 800baa2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800baa6:	5c88      	ldrb	r0, [r1, r2]
 800baa8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800baac:	fa23 f000 	lsr.w	r0, r3, r0
 800bab0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bab2:	480d      	ldr	r0, [pc, #52]	; (800bae8 <HAL_RCC_GetPCLK1Freq+0x88>)
 800bab4:	e7df      	b.n	800ba76 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	069b      	lsls	r3, r3, #26
 800baba:	d509      	bpl.n	800bad0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800babc:	6810      	ldr	r0, [r2, #0]
 800babe:	4b0b      	ldr	r3, [pc, #44]	; (800baec <HAL_RCC_GetPCLK1Freq+0x8c>)
 800bac0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800bac4:	fa23 f000 	lsr.w	r0, r3, r0
 800bac8:	e7d5      	b.n	800ba76 <HAL_RCC_GetPCLK1Freq+0x16>
 800baca:	f7ff f9f7 	bl	800aebc <HAL_RCC_GetSysClockFreq.part.0>
 800bace:	e7d2      	b.n	800ba76 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bad0:	4806      	ldr	r0, [pc, #24]	; (800baec <HAL_RCC_GetPCLK1Freq+0x8c>)
 800bad2:	e7d0      	b.n	800ba76 <HAL_RCC_GetPCLK1Freq+0x16>
 800bad4:	58024400 	.word	0x58024400
 800bad8:	003d0900 	.word	0x003d0900
 800badc:	0801dd14 	.word	0x0801dd14
 800bae0:	24000310 	.word	0x24000310
 800bae4:	24000314 	.word	0x24000314
 800bae8:	017d7840 	.word	0x017d7840
 800baec:	03d09000 	.word	0x03d09000

0800baf0 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800baf0:	4a1c      	ldr	r2, [pc, #112]	; (800bb64 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800baf2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800baf4:	6913      	ldr	r3, [r2, #16]
 800baf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bafa:	2b10      	cmp	r3, #16
 800bafc:	d021      	beq.n	800bb42 <HAL_RCC_GetPCLK2Freq+0x52>
 800bafe:	2b18      	cmp	r3, #24
 800bb00:	d02b      	beq.n	800bb5a <HAL_RCC_GetPCLK2Freq+0x6a>
 800bb02:	b303      	cbz	r3, 800bb46 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800bb04:	4818      	ldr	r0, [pc, #96]	; (800bb68 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bb06:	4a17      	ldr	r2, [pc, #92]	; (800bb64 <HAL_RCC_GetPCLK2Freq+0x74>)
 800bb08:	4918      	ldr	r1, [pc, #96]	; (800bb6c <HAL_RCC_GetPCLK2Freq+0x7c>)
 800bb0a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800bb0c:	4d18      	ldr	r5, [pc, #96]	; (800bb70 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bb0e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bb12:	4c18      	ldr	r4, [pc, #96]	; (800bb74 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bb14:	5ccb      	ldrb	r3, [r1, r3]
 800bb16:	f003 031f 	and.w	r3, r3, #31
 800bb1a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bb1e:	6990      	ldr	r0, [r2, #24]
 800bb20:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800bb24:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bb26:	5c08      	ldrb	r0, [r1, r0]
 800bb28:	f000 001f 	and.w	r0, r0, #31
 800bb2c:	40c3      	lsrs	r3, r0
 800bb2e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bb30:	69d2      	ldr	r2, [r2, #28]
 800bb32:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800bb36:	5c88      	ldrb	r0, [r1, r2]
 800bb38:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bb3c:	fa23 f000 	lsr.w	r0, r3, r0
 800bb40:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb42:	480d      	ldr	r0, [pc, #52]	; (800bb78 <HAL_RCC_GetPCLK2Freq+0x88>)
 800bb44:	e7df      	b.n	800bb06 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb46:	6813      	ldr	r3, [r2, #0]
 800bb48:	069b      	lsls	r3, r3, #26
 800bb4a:	d509      	bpl.n	800bb60 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb4c:	6810      	ldr	r0, [r2, #0]
 800bb4e:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800bb50:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800bb54:	fa23 f000 	lsr.w	r0, r3, r0
 800bb58:	e7d5      	b.n	800bb06 <HAL_RCC_GetPCLK2Freq+0x16>
 800bb5a:	f7ff f9af 	bl	800aebc <HAL_RCC_GetSysClockFreq.part.0>
 800bb5e:	e7d2      	b.n	800bb06 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bb60:	4806      	ldr	r0, [pc, #24]	; (800bb7c <HAL_RCC_GetPCLK2Freq+0x8c>)
 800bb62:	e7d0      	b.n	800bb06 <HAL_RCC_GetPCLK2Freq+0x16>
 800bb64:	58024400 	.word	0x58024400
 800bb68:	003d0900 	.word	0x003d0900
 800bb6c:	0801dd14 	.word	0x0801dd14
 800bb70:	24000310 	.word	0x24000310
 800bb74:	24000314 	.word	0x24000314
 800bb78:	017d7840 	.word	0x017d7840
 800bb7c:	03d09000 	.word	0x03d09000

0800bb80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb82:	4c3a      	ldr	r4, [pc, #232]	; (800bc6c <RCCEx_PLL2_Config+0xec>)
 800bb84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d067      	beq.n	800bc5e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	4606      	mov	r6, r0
 800bb92:	460f      	mov	r7, r1
 800bb94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb9a:	f7fb f837 	bl	8006c0c <HAL_GetTick>
 800bb9e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bba0:	e004      	b.n	800bbac <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bba2:	f7fb f833 	bl	8006c0c <HAL_GetTick>
 800bba6:	1b43      	subs	r3, r0, r5
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d856      	bhi.n	800bc5a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	011a      	lsls	r2, r3, #4
 800bbb0:	d4f7      	bmi.n	800bba2 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bbb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbb4:	6832      	ldr	r2, [r6, #0]
 800bbb6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bbba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800bbbe:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbc0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	3a01      	subs	r2, #1
 800bbc8:	025b      	lsls	r3, r3, #9
 800bbca:	0412      	lsls	r2, r2, #16
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	6872      	ldr	r2, [r6, #4]
 800bbd6:	3a01      	subs	r2, #1
 800bbd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	6932      	ldr	r2, [r6, #16]
 800bbe0:	3a01      	subs	r2, #1
 800bbe2:	0612      	lsls	r2, r2, #24
 800bbe4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bbee:	6972      	ldr	r2, [r6, #20]
 800bbf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bbfa:	69b3      	ldr	r3, [r6, #24]
 800bbfc:	f022 0220 	bic.w	r2, r2, #32
 800bc00:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc02:	4b1b      	ldr	r3, [pc, #108]	; (800bc70 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bc04:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc08:	f022 0210 	bic.w	r2, r2, #16
 800bc0c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc0e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bc10:	69f2      	ldr	r2, [r6, #28]
 800bc12:	400b      	ands	r3, r1
 800bc14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bc18:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bc1c:	f043 0310 	orr.w	r3, r3, #16
 800bc20:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800bc24:	b1ef      	cbz	r7, 800bc62 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc26:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc28:	bf0c      	ite	eq
 800bc2a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc2e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800bc32:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc34:	4c0d      	ldr	r4, [pc, #52]	; (800bc6c <RCCEx_PLL2_Config+0xec>)
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3e:	f7fa ffe5 	bl	8006c0c <HAL_GetTick>
 800bc42:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc44:	e004      	b.n	800bc50 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bc46:	f7fa ffe1 	bl	8006c0c <HAL_GetTick>
 800bc4a:	1b40      	subs	r0, r0, r5
 800bc4c:	2802      	cmp	r0, #2
 800bc4e:	d804      	bhi.n	800bc5a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	d5f7      	bpl.n	800bc46 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800bc56:	2000      	movs	r0, #0
}
 800bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800bc5a:	2003      	movs	r0, #3
}
 800bc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bc5e:	2001      	movs	r0, #1
}
 800bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc66:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc68:	e7e4      	b.n	800bc34 <RCCEx_PLL2_Config+0xb4>
 800bc6a:	bf00      	nop
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	ffff0007 	.word	0xffff0007

0800bc74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc76:	4c3a      	ldr	r4, [pc, #232]	; (800bd60 <RCCEx_PLL3_Config+0xec>)
 800bc78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc7a:	f003 0303 	and.w	r3, r3, #3
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d067      	beq.n	800bd52 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	4606      	mov	r6, r0
 800bc86:	460f      	mov	r7, r1
 800bc88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc8c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc8e:	f7fa ffbd 	bl	8006c0c <HAL_GetTick>
 800bc92:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc94:	e004      	b.n	800bca0 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc96:	f7fa ffb9 	bl	8006c0c <HAL_GetTick>
 800bc9a:	1b43      	subs	r3, r0, r5
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d856      	bhi.n	800bd4e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	009a      	lsls	r2, r3, #2
 800bca4:	d4f7      	bmi.n	800bc96 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bca8:	6832      	ldr	r2, [r6, #0]
 800bcaa:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800bcae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800bcb2:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcb4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	3a01      	subs	r2, #1
 800bcbc:	025b      	lsls	r3, r3, #9
 800bcbe:	0412      	lsls	r2, r2, #16
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	6872      	ldr	r2, [r6, #4]
 800bcca:	3a01      	subs	r2, #1
 800bccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	6932      	ldr	r2, [r6, #16]
 800bcd4:	3a01      	subs	r2, #1
 800bcd6:	0612      	lsls	r2, r2, #24
 800bcd8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bce0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bce2:	6972      	ldr	r2, [r6, #20]
 800bce4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bce8:	4313      	orrs	r3, r2
 800bcea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bcec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bcee:	69b3      	ldr	r3, [r6, #24]
 800bcf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bcf4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bcf6:	4b1b      	ldr	r3, [pc, #108]	; (800bd64 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bcf8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bcfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bcfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd00:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bd04:	69f2      	ldr	r2, [r6, #28]
 800bd06:	400b      	ands	r3, r1
 800bd08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bd0c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bd10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd14:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800bd18:	b1ef      	cbz	r7, 800bd56 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd1a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd1c:	bf0c      	ite	eq
 800bd1e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd22:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800bd26:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd28:	4c0d      	ldr	r4, [pc, #52]	; (800bd60 <RCCEx_PLL3_Config+0xec>)
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd30:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd32:	f7fa ff6b 	bl	8006c0c <HAL_GetTick>
 800bd36:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd38:	e004      	b.n	800bd44 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd3a:	f7fa ff67 	bl	8006c0c <HAL_GetTick>
 800bd3e:	1b40      	subs	r0, r0, r5
 800bd40:	2802      	cmp	r0, #2
 800bd42:	d804      	bhi.n	800bd4e <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	d5f7      	bpl.n	800bd3a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800bd4a:	2000      	movs	r0, #0
}
 800bd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800bd4e:	2003      	movs	r0, #3
}
 800bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bd52:	2001      	movs	r0, #1
}
 800bd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd5c:	e7e4      	b.n	800bd28 <RCCEx_PLL3_Config+0xb4>
 800bd5e:	bf00      	nop
 800bd60:	58024400 	.word	0x58024400
 800bd64:	ffff0007 	.word	0xffff0007

0800bd68 <HAL_RCCEx_PeriphCLKConfig>:
{
 800bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd6c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800bd70:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd72:	011d      	lsls	r5, r3, #4
 800bd74:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800bd78:	d523      	bpl.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bd7a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800bd7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bd80:	f000 854f 	beq.w	800c822 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800bd84:	d812      	bhi.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bd86:	2900      	cmp	r1, #0
 800bd88:	f000 85a5 	beq.w	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 800bd8c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bd90:	f040 859e 	bne.w	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd94:	2102      	movs	r1, #2
 800bd96:	3008      	adds	r0, #8
 800bd98:	f7ff fef2 	bl	800bb80 <RCCEx_PLL2_Config>
 800bd9c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800bd9e:	2e00      	cmp	r6, #0
 800bda0:	f040 851e 	bne.w	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bda4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bda6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bdaa:	e003      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bdac:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bdb0:	f040 858e 	bne.w	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bdb4:	4dae      	ldr	r5, [pc, #696]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bdb6:	2600      	movs	r6, #0
 800bdb8:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800bdba:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800bdbe:	4301      	orrs	r1, r0
 800bdc0:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bdc2:	05d8      	lsls	r0, r3, #23
 800bdc4:	d50a      	bpl.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bdc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bdc8:	2904      	cmp	r1, #4
 800bdca:	d806      	bhi.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x72>
 800bdcc:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bdd0:	05390532 	.word	0x05390532
 800bdd4:	03100516 	.word	0x03100516
 800bdd8:	0310      	.short	0x0310
 800bdda:	2601      	movs	r6, #1
 800bddc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bdde:	0599      	lsls	r1, r3, #22
 800bde0:	d51d      	bpl.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bde2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bde4:	2980      	cmp	r1, #128	; 0x80
 800bde6:	f000 8512 	beq.w	800c80e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 800bdea:	f200 80f9 	bhi.w	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800bdee:	2900      	cmp	r1, #0
 800bdf0:	f000 8420 	beq.w	800c634 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800bdf4:	2940      	cmp	r1, #64	; 0x40
 800bdf6:	f040 80fa 	bne.w	800bfee <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	f104 0008 	add.w	r0, r4, #8
 800be00:	f7ff febe 	bl	800bb80 <RCCEx_PLL2_Config>
 800be04:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800be06:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	f040 83eb 	bne.w	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800be10:	4f97      	ldr	r7, [pc, #604]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800be12:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800be14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be16:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800be1a:	4301      	orrs	r1, r0
 800be1c:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800be1e:	055f      	lsls	r7, r3, #21
 800be20:	d521      	bpl.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 800be22:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800be26:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800be2a:	f000 851d 	beq.w	800c868 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800be2e:	f200 80e1 	bhi.w	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800be32:	2900      	cmp	r1, #0
 800be34:	f000 8405 	beq.w	800c642 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800be38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800be3c:	f040 80e2 	bne.w	800c004 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be40:	2100      	movs	r1, #0
 800be42:	f104 0008 	add.w	r0, r4, #8
 800be46:	f7ff fe9b 	bl	800bb80 <RCCEx_PLL2_Config>
 800be4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800be4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be50:	2d00      	cmp	r5, #0
 800be52:	f040 83cf 	bne.w	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800be56:	4f86      	ldr	r7, [pc, #536]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800be58:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800be5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be5e:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800be62:	4301      	orrs	r1, r0
 800be64:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800be66:	0518      	lsls	r0, r3, #20
 800be68:	d521      	bpl.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 800be6a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800be6e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800be72:	f000 84b9 	beq.w	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 800be76:	f200 80c8 	bhi.w	800c00a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 800be7a:	2900      	cmp	r1, #0
 800be7c:	f000 83d4 	beq.w	800c628 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800be80:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800be84:	f040 80c9 	bne.w	800c01a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be88:	2100      	movs	r1, #0
 800be8a:	f104 0008 	add.w	r0, r4, #8
 800be8e:	f7ff fe77 	bl	800bb80 <RCCEx_PLL2_Config>
 800be92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800be94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800be98:	2d00      	cmp	r5, #0
 800be9a:	f040 83a2 	bne.w	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800be9e:	4f74      	ldr	r7, [pc, #464]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bea0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800bea4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bea6:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800beaa:	4301      	orrs	r1, r0
 800beac:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800beae:	0199      	lsls	r1, r3, #6
 800beb0:	d518      	bpl.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800beb2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800beb4:	2920      	cmp	r1, #32
 800beb6:	f000 841e 	beq.w	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800beba:	f200 80b1 	bhi.w	800c020 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bebe:	b139      	cbz	r1, 800bed0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bec0:	2910      	cmp	r1, #16
 800bec2:	f040 80b0 	bne.w	800c026 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bec6:	486a      	ldr	r0, [pc, #424]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bec8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800beca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800bece:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	f040 83d3 	bne.w	800c67c <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bed6:	4f66      	ldr	r7, [pc, #408]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bed8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800beda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bedc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800bee0:	4301      	orrs	r1, r0
 800bee2:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bee4:	04df      	lsls	r7, r3, #19
 800bee6:	d51f      	bpl.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bee8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800beea:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800beee:	f000 84b1 	beq.w	800c854 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800bef2:	f200 809b 	bhi.w	800c02c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800bef6:	2900      	cmp	r1, #0
 800bef8:	f000 8390 	beq.w	800c61c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800befc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bf00:	f040 809c 	bne.w	800c03c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf04:	2100      	movs	r1, #0
 800bf06:	f104 0008 	add.w	r0, r4, #8
 800bf0a:	f7ff fe39 	bl	800bb80 <RCCEx_PLL2_Config>
 800bf0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf14:	2d00      	cmp	r5, #0
 800bf16:	f040 8368 	bne.w	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf1a:	4f55      	ldr	r7, [pc, #340]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bf1c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bf1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf20:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800bf24:	4301      	orrs	r1, r0
 800bf26:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf28:	0498      	lsls	r0, r3, #18
 800bf2a:	d51d      	bpl.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf2c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bf2e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bf32:	f000 840f 	beq.w	800c754 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 800bf36:	f200 8084 	bhi.w	800c042 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bf3a:	b159      	cbz	r1, 800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800bf3c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bf40:	f040 8087 	bne.w	800c052 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf44:	2101      	movs	r1, #1
 800bf46:	f104 0008 	add.w	r0, r4, #8
 800bf4a:	f7ff fe19 	bl	800bb80 <RCCEx_PLL2_Config>
 800bf4e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf50:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	f040 839b 	bne.w	800c690 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bf5a:	4f45      	ldr	r7, [pc, #276]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bf5c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bf5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf60:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800bf64:	4301      	orrs	r1, r0
 800bf66:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf68:	0459      	lsls	r1, r3, #17
 800bf6a:	d51d      	bpl.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bf6c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800bf70:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bf74:	f000 83fa 	beq.w	800c76c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800bf78:	d86e      	bhi.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800bf7a:	b151      	cbz	r1, 800bf92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bf7c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bf80:	d172      	bne.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf82:	2101      	movs	r1, #1
 800bf84:	f104 0008 	add.w	r0, r4, #8
 800bf88:	f7ff fdfa 	bl	800bb80 <RCCEx_PLL2_Config>
 800bf8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf8e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800bf92:	2d00      	cmp	r5, #0
 800bf94:	f040 8380 	bne.w	800c698 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf98:	4f35      	ldr	r7, [pc, #212]	; (800c070 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800bf9a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800bf9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfa0:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800bfa4:	4301      	orrs	r1, r0
 800bfa6:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bfa8:	041f      	lsls	r7, r3, #16
 800bfaa:	d50d      	bpl.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 800bfac:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800bfae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bfb2:	f000 83c7 	beq.w	800c744 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800bfb6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bfba:	f000 8225 	beq.w	800c408 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800bfbe:	2900      	cmp	r1, #0
 800bfc0:	f000 822a 	beq.w	800c418 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800bfc4:	2601      	movs	r6, #1
 800bfc6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bfc8:	01d8      	lsls	r0, r3, #7
 800bfca:	d55f      	bpl.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 800bfcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bfce:	2903      	cmp	r1, #3
 800bfd0:	f200 84bb 	bhi.w	800c94a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800bfd4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bfd8:	03e10056 	.word	0x03e10056
 800bfdc:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800bfe0:	29c0      	cmp	r1, #192	; 0xc0
 800bfe2:	f43f af12 	beq.w	800be0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bfe6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bfea:	f43f af0e 	beq.w	800be0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800bfee:	2601      	movs	r6, #1
 800bff0:	4635      	mov	r5, r6
 800bff2:	e714      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bff4:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800bff8:	f43f af2a 	beq.w	800be50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800bffc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c000:	f43f af26 	beq.w	800be50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c004:	2601      	movs	r6, #1
 800c006:	4635      	mov	r5, r6
 800c008:	e72d      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c00a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800c00e:	f43f af43 	beq.w	800be98 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800c012:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800c016:	f43f af3f 	beq.w	800be98 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800c01a:	2601      	movs	r6, #1
 800c01c:	4635      	mov	r5, r6
 800c01e:	e746      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 800c020:	2930      	cmp	r1, #48	; 0x30
 800c022:	f43f af55 	beq.w	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c026:	2601      	movs	r6, #1
 800c028:	4635      	mov	r5, r6
 800c02a:	e75b      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800c02c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800c030:	f43f af70 	beq.w	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800c034:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c038:	f43f af6c 	beq.w	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 800c03c:	2601      	movs	r6, #1
 800c03e:	4635      	mov	r5, r6
 800c040:	e772      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c042:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800c046:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800c04a:	d083      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800c04c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800c050:	d080      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800c052:	2601      	movs	r6, #1
 800c054:	4635      	mov	r5, r6
 800c056:	e787      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c058:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c05c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c060:	d097      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c062:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c066:	d094      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c068:	2601      	movs	r6, #1
 800c06a:	4635      	mov	r5, r6
 800c06c:	e79c      	b.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c06e:	bf00      	nop
 800c070:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c074:	2102      	movs	r1, #2
 800c076:	f104 0008 	add.w	r0, r4, #8
 800c07a:	f7ff fd81 	bl	800bb80 <RCCEx_PLL2_Config>
 800c07e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c080:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c084:	2d00      	cmp	r5, #0
 800c086:	f000 82fb 	beq.w	800c680 <HAL_RCCEx_PeriphCLKConfig+0x918>
 800c08a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c08c:	0259      	lsls	r1, r3, #9
 800c08e:	f100 825a 	bmi.w	800c546 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c092:	07d8      	lsls	r0, r3, #31
 800c094:	d52f      	bpl.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 800c096:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c098:	2928      	cmp	r1, #40	; 0x28
 800c09a:	d82a      	bhi.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
 800c09c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c0a0:	002901fa 	.word	0x002901fa
 800c0a4:	00290029 	.word	0x00290029
 800c0a8:	00290029 	.word	0x00290029
 800c0ac:	00290029 	.word	0x00290029
 800c0b0:	00290406 	.word	0x00290406
 800c0b4:	00290029 	.word	0x00290029
 800c0b8:	00290029 	.word	0x00290029
 800c0bc:	00290029 	.word	0x00290029
 800c0c0:	002901f2 	.word	0x002901f2
 800c0c4:	00290029 	.word	0x00290029
 800c0c8:	00290029 	.word	0x00290029
 800c0cc:	00290029 	.word	0x00290029
 800c0d0:	002901fa 	.word	0x002901fa
 800c0d4:	00290029 	.word	0x00290029
 800c0d8:	00290029 	.word	0x00290029
 800c0dc:	00290029 	.word	0x00290029
 800c0e0:	002901fa 	.word	0x002901fa
 800c0e4:	00290029 	.word	0x00290029
 800c0e8:	00290029 	.word	0x00290029
 800c0ec:	00290029 	.word	0x00290029
 800c0f0:	01fa      	.short	0x01fa
 800c0f2:	2601      	movs	r6, #1
 800c0f4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c0f6:	0799      	lsls	r1, r3, #30
 800c0f8:	d517      	bpl.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c0fa:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c0fc:	2905      	cmp	r1, #5
 800c0fe:	f200 8420 	bhi.w	800c942 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 800c102:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c106:	000e      	.short	0x000e
 800c108:	000603bb 	.word	0x000603bb
 800c10c:	000e000e 	.word	0x000e000e
 800c110:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c112:	2101      	movs	r1, #1
 800c114:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c118:	f7ff fdac 	bl	800bc74 <RCCEx_PLL3_Config>
 800c11c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c11e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c122:	2d00      	cmp	r5, #0
 800c124:	f000 8299 	beq.w	800c65a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800c128:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c12a:	075f      	lsls	r7, r3, #29
 800c12c:	d518      	bpl.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c12e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c132:	2905      	cmp	r1, #5
 800c134:	f200 840d 	bhi.w	800c952 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 800c138:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c13c:	03ac000e 	.word	0x03ac000e
 800c140:	000e0006 	.word	0x000e0006
 800c144:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c148:	2101      	movs	r1, #1
 800c14a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c14e:	f7ff fd91 	bl	800bc74 <RCCEx_PLL3_Config>
 800c152:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c154:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c158:	2d00      	cmp	r5, #0
 800c15a:	f000 8286 	beq.w	800c66a <HAL_RCCEx_PeriphCLKConfig+0x902>
 800c15e:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c160:	0698      	lsls	r0, r3, #26
 800c162:	d51f      	bpl.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c164:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800c168:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c16c:	f000 8309 	beq.w	800c782 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800c170:	f200 810b 	bhi.w	800c38a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800c174:	b159      	cbz	r1, 800c18e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c176:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c17a:	f040 8110 	bne.w	800c39e <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c17e:	2100      	movs	r1, #0
 800c180:	f104 0008 	add.w	r0, r4, #8
 800c184:	f7ff fcfc 	bl	800bb80 <RCCEx_PLL2_Config>
 800c188:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c18a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c18e:	2d00      	cmp	r5, #0
 800c190:	f040 825f 	bne.w	800c652 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c194:	4fa6      	ldr	r7, [pc, #664]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c196:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800c19a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c19c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800c1a0:	4301      	orrs	r1, r0
 800c1a2:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1a4:	0659      	lsls	r1, r3, #25
 800c1a6:	d51f      	bpl.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1a8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800c1ac:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c1b0:	f000 82b2 	beq.w	800c718 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800c1b4:	f200 80f6 	bhi.w	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 800c1b8:	b159      	cbz	r1, 800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800c1ba:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c1be:	f040 80fb 	bne.w	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	f104 0008 	add.w	r0, r4, #8
 800c1c8:	f7ff fcda 	bl	800bb80 <RCCEx_PLL2_Config>
 800c1cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c1ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c1d2:	2d00      	cmp	r5, #0
 800c1d4:	f040 8262 	bne.w	800c69c <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1d8:	4f95      	ldr	r7, [pc, #596]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c1da:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800c1de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1e0:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800c1e4:	4301      	orrs	r1, r0
 800c1e6:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c1e8:	061f      	lsls	r7, r3, #24
 800c1ea:	d51f      	bpl.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c1ec:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800c1f0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c1f4:	f000 829b 	beq.w	800c72e <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 800c1f8:	f200 80e1 	bhi.w	800c3be <HAL_RCCEx_PeriphCLKConfig+0x656>
 800c1fc:	b159      	cbz	r1, 800c216 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c1fe:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c202:	f040 80e6 	bne.w	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c206:	2100      	movs	r1, #0
 800c208:	f104 0008 	add.w	r0, r4, #8
 800c20c:	f7ff fcb8 	bl	800bb80 <RCCEx_PLL2_Config>
 800c210:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c212:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c216:	2d00      	cmp	r5, #0
 800c218:	f040 823c 	bne.w	800c694 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c21c:	4f84      	ldr	r7, [pc, #528]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c21e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800c222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c224:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800c228:	4301      	orrs	r1, r0
 800c22a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c22c:	0718      	lsls	r0, r3, #28
 800c22e:	d50b      	bpl.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c230:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800c234:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c238:	f000 82b8 	beq.w	800c7ac <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c23c:	4f7c      	ldr	r7, [pc, #496]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c23e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c240:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800c244:	4301      	orrs	r1, r0
 800c246:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c248:	06d9      	lsls	r1, r3, #27
 800c24a:	d50b      	bpl.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c24c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800c250:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c254:	f000 82b7 	beq.w	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c258:	4f75      	ldr	r7, [pc, #468]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c25a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c25c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800c260:	4301      	orrs	r1, r0
 800c262:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c264:	031f      	lsls	r7, r3, #12
 800c266:	d50e      	bpl.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 800c268:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c26c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c270:	f000 80f4 	beq.w	800c45c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800c274:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c278:	f000 80f8 	beq.w	800c46c <HAL_RCCEx_PeriphCLKConfig+0x704>
 800c27c:	2900      	cmp	r1, #0
 800c27e:	f000 822e 	beq.w	800c6de <HAL_RCCEx_PeriphCLKConfig+0x976>
 800c282:	2601      	movs	r6, #1
 800c284:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c286:	0358      	lsls	r0, r3, #13
 800c288:	d50f      	bpl.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 800c28a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c28e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c292:	f000 80cf 	beq.w	800c434 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c296:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800c29a:	f000 80d3 	beq.w	800c444 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800c29e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c2a2:	f000 8214 	beq.w	800c6ce <HAL_RCCEx_PeriphCLKConfig+0x966>
 800c2a6:	2601      	movs	r6, #1
 800c2a8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c2aa:	03d9      	lsls	r1, r3, #15
 800c2ac:	d509      	bpl.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 800c2ae:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c2b0:	2900      	cmp	r1, #0
 800c2b2:	f000 8203 	beq.w	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x954>
 800c2b6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c2ba:	f000 819d 	beq.w	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800c2be:	2601      	movs	r6, #1
 800c2c0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2c2:	009f      	lsls	r7, r3, #2
 800c2c4:	f100 80f1 	bmi.w	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2c8:	0398      	lsls	r0, r3, #14
 800c2ca:	d50c      	bpl.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 800c2cc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c2d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c2d4:	f000 81ea 	beq.w	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x944>
 800c2d8:	d97e      	bls.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800c2da:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800c2de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c2e2:	d07b      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x674>
 800c2e4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c2e6:	02d9      	lsls	r1, r3, #11
 800c2e8:	d506      	bpl.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c2ea:	4851      	ldr	r0, [pc, #324]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c2ec:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c2ee:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c2f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c2f4:	4329      	orrs	r1, r5
 800c2f6:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c2f8:	00df      	lsls	r7, r3, #3
 800c2fa:	d507      	bpl.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c2fc:	484c      	ldr	r0, [pc, #304]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c2fe:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800c302:	6901      	ldr	r1, [r0, #16]
 800c304:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800c308:	4329      	orrs	r1, r5
 800c30a:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c30c:	029d      	lsls	r5, r3, #10
 800c30e:	d506      	bpl.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c310:	4847      	ldr	r0, [pc, #284]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c312:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800c314:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800c316:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800c31a:	4329      	orrs	r1, r5
 800c31c:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c31e:	0058      	lsls	r0, r3, #1
 800c320:	d509      	bpl.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c322:	4943      	ldr	r1, [pc, #268]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c324:	6908      	ldr	r0, [r1, #16]
 800c326:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800c32a:	6108      	str	r0, [r1, #16]
 800c32c:	6908      	ldr	r0, [r1, #16]
 800c32e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800c332:	4328      	orrs	r0, r5
 800c334:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c336:	2b00      	cmp	r3, #0
 800c338:	da06      	bge.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c33a:	483d      	ldr	r0, [pc, #244]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c33c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c33e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c340:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c344:	4329      	orrs	r1, r5
 800c346:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c348:	0219      	lsls	r1, r3, #8
 800c34a:	d507      	bpl.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c34c:	4938      	ldr	r1, [pc, #224]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c34e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800c352:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c354:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c358:	4303      	orrs	r3, r0
 800c35a:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c35c:	07d3      	lsls	r3, r2, #31
 800c35e:	f100 80b0 	bmi.w	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c362:	0797      	lsls	r7, r2, #30
 800c364:	f100 80ba 	bmi.w	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c368:	0755      	lsls	r5, r2, #29
 800c36a:	f100 80c4 	bmi.w	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c36e:	0710      	lsls	r0, r2, #28
 800c370:	f100 80ce 	bmi.w	800c510 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c374:	06d1      	lsls	r1, r2, #27
 800c376:	f100 80d8 	bmi.w	800c52a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c37a:	0692      	lsls	r2, r2, #26
 800c37c:	f100 8125 	bmi.w	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 800c380:	1e30      	subs	r0, r6, #0
 800c382:	bf18      	it	ne
 800c384:	2001      	movne	r0, #1
}
 800c386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c38a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c38e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c392:	f43f aefc 	beq.w	800c18e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c396:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c39a:	f43f aef8 	beq.w	800c18e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c39e:	2601      	movs	r6, #1
 800c3a0:	4635      	mov	r5, r6
 800c3a2:	e6ff      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c3a4:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800c3a8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c3ac:	f43f af11 	beq.w	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800c3b0:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800c3b4:	f43f af0d 	beq.w	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800c3b8:	2601      	movs	r6, #1
 800c3ba:	4635      	mov	r5, r6
 800c3bc:	e714      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c3be:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800c3c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c3c6:	f43f af26 	beq.w	800c216 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c3ca:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800c3ce:	f43f af22 	beq.w	800c216 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c3d2:	2601      	movs	r6, #1
 800c3d4:	4635      	mov	r5, r6
 800c3d6:	e729      	b.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 800c3d8:	2900      	cmp	r1, #0
 800c3da:	d183      	bne.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	f040 8163 	bne.w	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c3e2:	4d13      	ldr	r5, [pc, #76]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c3e4:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800c3e6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800c3ea:	4301      	orrs	r1, r0
 800c3ec:	6569      	str	r1, [r5, #84]	; 0x54
 800c3ee:	e77a      	b.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c3f0:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800c3f2:	2d00      	cmp	r5, #0
 800c3f4:	f040 80fb 	bne.w	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3f8:	4f0d      	ldr	r7, [pc, #52]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c3fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3fe:	f021 0107 	bic.w	r1, r1, #7
 800c402:	4301      	orrs	r1, r0
 800c404:	6539      	str	r1, [r7, #80]	; 0x50
 800c406:	e4ea      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c408:	2101      	movs	r1, #1
 800c40a:	f104 0008 	add.w	r0, r4, #8
 800c40e:	f7ff fbb7 	bl	800bb80 <RCCEx_PLL2_Config>
 800c412:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c414:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c418:	2d00      	cmp	r5, #0
 800c41a:	f040 811c 	bne.w	800c656 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c41e:	4f04      	ldr	r7, [pc, #16]	; (800c430 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800c420:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c424:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800c428:	4301      	orrs	r1, r0
 800c42a:	6539      	str	r1, [r7, #80]	; 0x50
 800c42c:	e5cc      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800c42e:	bf00      	nop
 800c430:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c434:	2101      	movs	r1, #1
 800c436:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c43a:	f7ff fc1b 	bl	800bc74 <RCCEx_PLL3_Config>
 800c43e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c440:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c444:	2d00      	cmp	r5, #0
 800c446:	f040 812d 	bne.w	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c44a:	4fb1      	ldr	r7, [pc, #708]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c44c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c452:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c456:	4301      	orrs	r1, r0
 800c458:	6579      	str	r1, [r7, #84]	; 0x54
 800c45a:	e726      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c45c:	2102      	movs	r1, #2
 800c45e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c462:	f7ff fc07 	bl	800bc74 <RCCEx_PLL3_Config>
 800c466:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c468:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c46c:	2d00      	cmp	r5, #0
 800c46e:	f040 8117 	bne.w	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c472:	4fa7      	ldr	r7, [pc, #668]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c474:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800c478:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c47a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800c47e:	4301      	orrs	r1, r0
 800c480:	65b9      	str	r1, [r7, #88]	; 0x58
 800c482:	e700      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c484:	2101      	movs	r1, #1
 800c486:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c48a:	f7ff fbf3 	bl	800bc74 <RCCEx_PLL3_Config>
 800c48e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c490:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c494:	2d00      	cmp	r5, #0
 800c496:	f040 80da 	bne.w	800c64e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c49a:	4f9d      	ldr	r7, [pc, #628]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c49c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c49e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4a0:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800c4a4:	4301      	orrs	r1, r0
 800c4a6:	6579      	str	r1, [r7, #84]	; 0x54
 800c4a8:	e625      	b.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4aa:	2102      	movs	r1, #2
 800c4ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4b0:	f7ff fbe0 	bl	800bc74 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f43f af05 	beq.w	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 800c4be:	2601      	movs	r6, #1
 800c4c0:	e702      	b.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	f104 0008 	add.w	r0, r4, #8
 800c4c8:	f7ff fb5a 	bl	800bb80 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c4cc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f43f af47 	beq.w	800c362 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c4d4:	0797      	lsls	r7, r2, #30
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	f57f af46 	bpl.w	800c368 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4dc:	2101      	movs	r1, #1
 800c4de:	f104 0008 	add.w	r0, r4, #8
 800c4e2:	f7ff fb4d 	bl	800bb80 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c4e6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f43f af3d 	beq.w	800c368 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c4ee:	0755      	lsls	r5, r2, #29
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	f57f af3c 	bpl.w	800c36e <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4f6:	2102      	movs	r1, #2
 800c4f8:	f104 0008 	add.w	r0, r4, #8
 800c4fc:	f7ff fb40 	bl	800bb80 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c500:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c502:	2800      	cmp	r0, #0
 800c504:	f43f af33 	beq.w	800c36e <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c508:	4606      	mov	r6, r0
 800c50a:	0710      	lsls	r0, r2, #28
 800c50c:	f57f af32 	bpl.w	800c374 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c510:	2100      	movs	r1, #0
 800c512:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c516:	f7ff fbad 	bl	800bc74 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c51a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f43f af29 	beq.w	800c374 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c522:	06d1      	lsls	r1, r2, #27
 800c524:	4606      	mov	r6, r0
 800c526:	f57f af28 	bpl.w	800c37a <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c52a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800c52e:	2101      	movs	r1, #1
 800c530:	4628      	mov	r0, r5
 800c532:	f7ff fb9f 	bl	800bc74 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c536:	2800      	cmp	r0, #0
 800c538:	f000 80db 	beq.w	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c53c:	6863      	ldr	r3, [r4, #4]
 800c53e:	069b      	lsls	r3, r3, #26
 800c540:	d54c      	bpl.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x874>
 800c542:	4606      	mov	r6, r0
 800c544:	e043      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c546:	4f73      	ldr	r7, [pc, #460]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c54e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c550:	f7fa fb5c 	bl	8006c0c <HAL_GetTick>
 800c554:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c556:	e006      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c558:	f7fa fb58 	bl	8006c0c <HAL_GetTick>
 800c55c:	eba0 0008 	sub.w	r0, r0, r8
 800c560:	2864      	cmp	r0, #100	; 0x64
 800c562:	f200 81af 	bhi.w	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	05da      	lsls	r2, r3, #23
 800c56a:	d5f5      	bpl.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	f040 81e3 	bne.w	800c938 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c572:	4a67      	ldr	r2, [pc, #412]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c574:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c578:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c57a:	4059      	eors	r1, r3
 800c57c:	f411 7f40 	tst.w	r1, #768	; 0x300
 800c580:	d00b      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c582:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800c584:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c586:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c58a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c58e:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c590:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800c592:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800c596:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c598:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59e:	f000 81ad 	beq.w	800c8fc <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800c5a6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c5aa:	f000 81bb 	beq.w	800c924 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 800c5ae:	4958      	ldr	r1, [pc, #352]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c5b0:	690a      	ldr	r2, [r1, #16]
 800c5b2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c5b6:	610a      	str	r2, [r1, #16]
 800c5b8:	4855      	ldr	r0, [pc, #340]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c5ba:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800c5be:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800c5c0:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c5c2:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5c6:	6701      	str	r1, [r0, #112]	; 0x70
 800c5c8:	e563      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5ca:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5ce:	2102      	movs	r1, #2
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f7ff fb4f 	bl	800bc74 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f43f aed2 	beq.w	800c380 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 800c5dc:	2001      	movs	r0, #1
}
 800c5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	462e      	mov	r6, r5
 800c5e4:	e463      	b.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x146>
 800c5e6:	462e      	mov	r6, r5
 800c5e8:	e419      	b.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
 800c5ea:	462e      	mov	r6, r5
 800c5ec:	e49c      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c5ee:	462e      	mov	r6, r5
 800c5f0:	f7ff bbf5 	b.w	800bdde <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c5f4:	462e      	mov	r6, r5
 800c5f6:	e436      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5f8:	2102      	movs	r1, #2
 800c5fa:	f104 0008 	add.w	r0, r4, #8
 800c5fe:	f7ff fabf 	bl	800bb80 <RCCEx_PLL2_Config>
 800c602:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c604:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c608:	2d00      	cmp	r5, #0
 800c60a:	d15e      	bne.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c60c:	4f40      	ldr	r7, [pc, #256]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c60e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c610:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c612:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c616:	4301      	orrs	r1, r0
 800c618:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c61a:	e652      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c61c:	483c      	ldr	r0, [pc, #240]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c61e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c620:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c624:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c626:	e475      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c628:	4839      	ldr	r0, [pc, #228]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c62a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c62c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c630:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c632:	e431      	b.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c634:	4836      	ldr	r0, [pc, #216]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c636:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c638:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c63c:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c63e:	f7ff bbe4 	b.w	800be0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c642:	4833      	ldr	r0, [pc, #204]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c644:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c646:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c64a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c64c:	e400      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800c64e:	462e      	mov	r6, r5
 800c650:	e551      	b.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800c652:	462e      	mov	r6, r5
 800c654:	e5a6      	b.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800c656:	462e      	mov	r6, r5
 800c658:	e4b6      	b.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c65a:	4f2d      	ldr	r7, [pc, #180]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c65c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c65e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c660:	f021 0107 	bic.w	r1, r1, #7
 800c664:	4301      	orrs	r1, r0
 800c666:	6579      	str	r1, [r7, #84]	; 0x54
 800c668:	e55f      	b.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c66a:	4f29      	ldr	r7, [pc, #164]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c66c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800c670:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c672:	f021 0107 	bic.w	r1, r1, #7
 800c676:	4301      	orrs	r1, r0
 800c678:	65b9      	str	r1, [r7, #88]	; 0x58
 800c67a:	e571      	b.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c67c:	462e      	mov	r6, r5
 800c67e:	e431      	b.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c680:	4f23      	ldr	r7, [pc, #140]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c682:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c684:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c686:	f021 0103 	bic.w	r1, r1, #3
 800c68a:	4301      	orrs	r1, r0
 800c68c:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c68e:	e4fd      	b.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800c690:	462e      	mov	r6, r5
 800c692:	e469      	b.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c694:	462e      	mov	r6, r5
 800c696:	e5c9      	b.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800c698:	462e      	mov	r6, r5
 800c69a:	e485      	b.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c69c:	462e      	mov	r6, r5
 800c69e:	e5a3      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c6a0:	462e      	mov	r6, r5
 800c6a2:	e5f0      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c6a4:	462e      	mov	r6, r5
 800c6a6:	e600      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x542>
 800c6a8:	462e      	mov	r6, r5
 800c6aa:	e61c      	b.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ac:	4f18      	ldr	r7, [pc, #96]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c6ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c6b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800c6b6:	2d00      	cmp	r5, #0
 800c6b8:	d1f6      	bne.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800c6ba:	e692      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6bc:	4814      	ldr	r0, [pc, #80]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c6be:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c6c0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c6c4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	d0a0      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 800c6ca:	462e      	mov	r6, r5
 800c6cc:	e5f9      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6ce:	4810      	ldr	r0, [pc, #64]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800c6d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c6d2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c6d6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	d1e3      	bne.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800c6dc:	e6b5      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6de:	f104 0008 	add.w	r0, r4, #8
 800c6e2:	f7ff fa4d 	bl	800bb80 <RCCEx_PLL2_Config>
 800c6e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c6e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	d1d7      	bne.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c6f0:	e6bf      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c6f2:	6862      	ldr	r2, [r4, #4]
 800c6f4:	e641      	b.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	f104 0008 	add.w	r0, r4, #8
 800c6fc:	f7ff fa40 	bl	800bb80 <RCCEx_PLL2_Config>
 800c700:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c702:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c706:	2d00      	cmp	r5, #0
 800c708:	d1b8      	bne.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x914>
 800c70a:	f7ff bbe4 	b.w	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800c70e:	bf00      	nop
 800c710:	58024400 	.word	0x58024400
 800c714:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c718:	2102      	movs	r1, #2
 800c71a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c71e:	f7ff faa9 	bl	800bc74 <RCCEx_PLL3_Config>
 800c722:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c724:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c728:	2d00      	cmp	r5, #0
 800c72a:	d1b7      	bne.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c72c:	e554      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c72e:	2102      	movs	r1, #2
 800c730:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c734:	f7ff fa9e 	bl	800bc74 <RCCEx_PLL3_Config>
 800c738:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c73a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c73e:	2d00      	cmp	r5, #0
 800c740:	d1a8      	bne.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800c742:	e56b      	b.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c744:	4884      	ldr	r0, [pc, #528]	; (800c958 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c746:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c748:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c74c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c74e:	2d00      	cmp	r5, #0
 800c750:	d181      	bne.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c752:	e664      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c754:	2101      	movs	r1, #1
 800c756:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c75a:	f7ff fa8b 	bl	800bc74 <RCCEx_PLL3_Config>
 800c75e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c760:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c764:	2d00      	cmp	r5, #0
 800c766:	d193      	bne.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x928>
 800c768:	f7ff bbf7 	b.w	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c76c:	2101      	movs	r1, #1
 800c76e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c772:	f7ff fa7f 	bl	800bc74 <RCCEx_PLL3_Config>
 800c776:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c778:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c77c:	2d00      	cmp	r5, #0
 800c77e:	d18b      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x930>
 800c780:	e40a      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c782:	2102      	movs	r1, #2
 800c784:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c788:	f7ff fa74 	bl	800bc74 <RCCEx_PLL3_Config>
 800c78c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c78e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c792:	2d00      	cmp	r5, #0
 800c794:	f47f af5d 	bne.w	800c652 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c798:	e4fc      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c79a:	486f      	ldr	r0, [pc, #444]	; (800c958 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c79c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c79e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c7a2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800c7a4:	2d00      	cmp	r5, #0
 800c7a6:	f47f ac70 	bne.w	800c08a <HAL_RCCEx_PeriphCLKConfig+0x322>
 800c7aa:	e769      	b.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7ac:	2102      	movs	r1, #2
 800c7ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7b2:	f7ff fa5f 	bl	800bc74 <RCCEx_PLL3_Config>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f040 8094 	bne.w	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c7bc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c7c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c7c4:	e53a      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7c6:	2102      	movs	r1, #2
 800c7c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7cc:	f7ff fa52 	bl	800bc74 <RCCEx_PLL3_Config>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	f040 808d 	bne.w	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c7d6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c7da:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c7de:	e53b      	b.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c7e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c7e4:	f7ff baed 	b.w	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c7ee:	f7ff fa41 	bl	800bc74 <RCCEx_PLL3_Config>
 800c7f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c7f4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c7f8:	f7ff bb4e 	b.w	800be98 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c802:	f7ff fa37 	bl	800bc74 <RCCEx_PLL3_Config>
 800c806:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c808:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c80c:	e5f1      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c80e:	2100      	movs	r1, #0
 800c810:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c814:	f7ff fa2e 	bl	800bc74 <RCCEx_PLL3_Config>
 800c818:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c81a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c81e:	f7ff baf4 	b.w	800be0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c822:	2102      	movs	r1, #2
 800c824:	3028      	adds	r0, #40	; 0x28
 800c826:	f7ff fa25 	bl	800bc74 <RCCEx_PLL3_Config>
 800c82a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c82c:	2e00      	cmp	r6, #0
 800c82e:	f43f aab9 	beq.w	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c832:	e7d5      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c834:	4848      	ldr	r0, [pc, #288]	; (800c958 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 800c836:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c838:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c83a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800c83e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800c840:	e5d7      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c842:	2100      	movs	r1, #0
 800c844:	f104 0008 	add.w	r0, r4, #8
 800c848:	f7ff f99a 	bl	800bb80 <RCCEx_PLL2_Config>
 800c84c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c84e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c852:	e5ce      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c854:	2100      	movs	r1, #0
 800c856:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c85a:	f7ff fa0b 	bl	800bc74 <RCCEx_PLL3_Config>
 800c85e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c860:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c864:	f7ff bb56 	b.w	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c868:	2100      	movs	r1, #0
 800c86a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c86e:	f7ff fa01 	bl	800bc74 <RCCEx_PLL3_Config>
 800c872:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c874:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800c878:	f7ff baea 	b.w	800be50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c87c:	2101      	movs	r1, #1
 800c87e:	f104 0008 	add.w	r0, r4, #8
 800c882:	f7ff f97d 	bl	800bb80 <RCCEx_PLL2_Config>
 800c886:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c888:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c88c:	2d00      	cmp	r5, #0
 800c88e:	f47f ac4b 	bne.w	800c128 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800c892:	e6e2      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c894:	2101      	movs	r1, #1
 800c896:	f104 0008 	add.w	r0, r4, #8
 800c89a:	f7ff f971 	bl	800bb80 <RCCEx_PLL2_Config>
 800c89e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c8a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c8a4:	2d00      	cmp	r5, #0
 800c8a6:	f47f ac5a 	bne.w	800c15e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800c8aa:	e6de      	b.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	f104 0008 	add.w	r0, r4, #8
 800c8b2:	f7ff f965 	bl	800bb80 <RCCEx_PLL2_Config>
 800c8b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c8b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800c8bc:	2d00      	cmp	r5, #0
 800c8be:	f47f aec6 	bne.w	800c64e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 800c8c2:	e5ea      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 800c8c4:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c8c6:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800c8ca:	4635      	mov	r5, r6
 800c8cc:	f7ff bbe1 	b.w	800c092 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c8d0:	2601      	movs	r6, #1
 800c8d2:	f7ff ba76 	b.w	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8d6:	4d20      	ldr	r5, [pc, #128]	; (800c958 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c8d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800c8da:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800c8de:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 800c8e0:	f7ff ba68 	b.w	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c8e4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 800c8e8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c8ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c8ee:	e4a5      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c8f0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 800c8f4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c8fa:	e4ad      	b.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 800c8fc:	f7fa f986 	bl	8006c0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c900:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c958 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 800c904:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c906:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c90a:	e004      	b.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c90c:	f7fa f97e 	bl	8006c0c <HAL_GetTick>
 800c910:	1bc0      	subs	r0, r0, r7
 800c912:	4548      	cmp	r0, r9
 800c914:	d8d6      	bhi.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c916:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c91a:	079b      	lsls	r3, r3, #30
 800c91c:	d5f6      	bpl.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c91e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c922:	e63e      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800c924:	480c      	ldr	r0, [pc, #48]	; (800c958 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 800c926:	4a0d      	ldr	r2, [pc, #52]	; (800c95c <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 800c928:	6901      	ldr	r1, [r0, #16]
 800c92a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800c92e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800c932:	430a      	orrs	r2, r1
 800c934:	6102      	str	r2, [r0, #16]
 800c936:	e63f      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c938:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c93c:	462e      	mov	r6, r5
 800c93e:	f7ff bba8 	b.w	800c092 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c942:	2601      	movs	r6, #1
 800c944:	4635      	mov	r5, r6
 800c946:	f7ff bbf0 	b.w	800c12a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 800c94a:	2601      	movs	r6, #1
 800c94c:	4635      	mov	r5, r6
 800c94e:	f7ff bb9d 	b.w	800c08c <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c952:	2601      	movs	r6, #1
 800c954:	4635      	mov	r5, r6
 800c956:	e403      	b.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c958:	58024400 	.word	0x58024400
 800c95c:	00ffffcf 	.word	0x00ffffcf

0800c960 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c960:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c962:	f7ff f83d 	bl	800b9e0 <HAL_RCC_GetHCLKFreq>
 800c966:	4b05      	ldr	r3, [pc, #20]	; (800c97c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c968:	4a05      	ldr	r2, [pc, #20]	; (800c980 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c970:	5cd3      	ldrb	r3, [r2, r3]
 800c972:	f003 031f 	and.w	r3, r3, #31
}
 800c976:	40d8      	lsrs	r0, r3
 800c978:	bd08      	pop	{r3, pc}
 800c97a:	bf00      	nop
 800c97c:	58024400 	.word	0x58024400
 800c980:	0801dd14 	.word	0x0801dd14

0800c984 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c984:	4b4f      	ldr	r3, [pc, #316]	; (800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800c986:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c988:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c98a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c98c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800c98e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c992:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c996:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800c998:	d05c      	beq.n	800ca54 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c99a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c99e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9a2:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9a6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c9aa:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9ac:	ee07 4a90 	vmov	s15, r4
 800c9b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c9b4:	d003      	beq.n	800c9be <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800c9b6:	2902      	cmp	r1, #2
 800c9b8:	d075      	beq.n	800caa6 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	d04f      	beq.n	800ca5e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9be:	ee07 2a90 	vmov	s15, r2
 800c9c2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c9c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c9d0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c9d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d8:	ee06 3a90 	vmov	s13, r3
 800c9dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c9e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c9e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c9e8:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c9ec:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c9f0:	4a34      	ldr	r2, [pc, #208]	; (800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800c9f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c9f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c9f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c9fc:	ee07 3a10 	vmov	s14, r3
 800ca00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ca04:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca06:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ca0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca12:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca16:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ca18:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ca1c:	ee07 3a10 	vmov	s14, r3
 800ca20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca24:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ca28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca30:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca34:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800ca36:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca42:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ca46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ca4e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800ca52:	4770      	bx	lr
 800ca54:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca56:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca5a:	6082      	str	r2, [r0, #8]
}
 800ca5c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca5e:	6819      	ldr	r1, [r3, #0]
 800ca60:	0689      	lsls	r1, r1, #26
 800ca62:	d527      	bpl.n	800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca64:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca66:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca6a:	4919      	ldr	r1, [pc, #100]	; (800cad0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ca70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca72:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca7a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800ca7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca82:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca84:	ee06 3a90 	vmov	s13, r3
 800ca88:	ee05 1a90 	vmov	s11, r1
 800ca8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ca90:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ca94:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ca98:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800ca9c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800caa0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800caa4:	e7a4      	b.n	800c9f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800caa6:	ee07 2a90 	vmov	s15, r2
 800caaa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800caae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cab2:	e78a      	b.n	800c9ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cab4:	ee07 2a90 	vmov	s15, r2
 800cab8:	eddf 6a07 	vldr	s13, [pc, #28]	; 800cad8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800cabc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac0:	e783      	b.n	800c9ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800cac2:	bf00      	nop
 800cac4:	58024400 	.word	0x58024400
 800cac8:	4a742400 	.word	0x4a742400
 800cacc:	39000000 	.word	0x39000000
 800cad0:	03d09000 	.word	0x03d09000
 800cad4:	4bbebc20 	.word	0x4bbebc20
 800cad8:	4c742400 	.word	0x4c742400

0800cadc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cadc:	4b4f      	ldr	r3, [pc, #316]	; (800cc1c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800cade:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cae0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cae2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cae4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800cae6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800caea:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800caee:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800caf0:	d05c      	beq.n	800cbac <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800caf2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800caf6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cafa:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cafe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800cb02:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb04:	ee07 4a90 	vmov	s15, r4
 800cb08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800cb0c:	d003      	beq.n	800cb16 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800cb0e:	2902      	cmp	r1, #2
 800cb10:	d075      	beq.n	800cbfe <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800cb12:	2900      	cmp	r1, #0
 800cb14:	d04f      	beq.n	800cbb6 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb16:	ee07 2a90 	vmov	s15, r2
 800cb1a:	eddf 6a41 	vldr	s13, [pc, #260]	; 800cc20 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800cb1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800cb28:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cc24 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800cb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb30:	ee06 3a90 	vmov	s13, r3
 800cb34:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800cb38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cb3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cb40:	eee7 6a25 	vfma.f32	s13, s14, s11
 800cb44:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb48:	4a34      	ldr	r2, [pc, #208]	; (800cc1c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800cb4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cb4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cb50:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800cb54:	ee07 3a10 	vmov	s14, r3
 800cb58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800cb5c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb5e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cb62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6a:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cb6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cb70:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800cb74:	ee07 3a10 	vmov	s14, r3
 800cb78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cb80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb88:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cb8e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800cb92:	ee07 3a90 	vmov	s15, r3
 800cb96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cba2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800cba6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800cbaa:	4770      	bx	lr
 800cbac:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cbae:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cbb2:	6082      	str	r2, [r0, #8]
}
 800cbb4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbb6:	6819      	ldr	r1, [r3, #0]
 800cbb8:	0689      	lsls	r1, r1, #26
 800cbba:	d527      	bpl.n	800cc0c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbbc:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbbe:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbc2:	4919      	ldr	r1, [pc, #100]	; (800cc28 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbca:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbd2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800cc24 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800cbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbda:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbdc:	ee06 3a90 	vmov	s13, r3
 800cbe0:	ee05 1a90 	vmov	s11, r1
 800cbe4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cbe8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cbec:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cbf0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800cbf4:	eee7 6a05 	vfma.f32	s13, s14, s10
 800cbf8:	ee66 6a26 	vmul.f32	s13, s12, s13
 800cbfc:	e7a4      	b.n	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbfe:	ee07 2a90 	vmov	s15, r2
 800cc02:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800cc2c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800cc06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc0a:	e78a      	b.n	800cb22 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc0c:	ee07 2a90 	vmov	s15, r2
 800cc10:	eddf 6a07 	vldr	s13, [pc, #28]	; 800cc30 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800cc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc18:	e783      	b.n	800cb22 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800cc1a:	bf00      	nop
 800cc1c:	58024400 	.word	0x58024400
 800cc20:	4a742400 	.word	0x4a742400
 800cc24:	39000000 	.word	0x39000000
 800cc28:	03d09000 	.word	0x03d09000
 800cc2c:	4bbebc20 	.word	0x4bbebc20
 800cc30:	4c742400 	.word	0x4c742400

0800cc34 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc34:	4b4f      	ldr	r3, [pc, #316]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800cc36:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc38:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cc3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cc3c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800cc3e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cc42:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc46:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800cc48:	d05c      	beq.n	800cd04 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc4a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cc4e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc52:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc56:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800cc5a:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc5c:	ee07 4a90 	vmov	s15, r4
 800cc60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800cc64:	d07e      	beq.n	800cd64 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800cc66:	2902      	cmp	r1, #2
 800cc68:	d075      	beq.n	800cd56 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800cc6a:	2900      	cmp	r1, #0
 800cc6c:	d04f      	beq.n	800cd0e <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc6e:	ee07 2a90 	vmov	s15, r2
 800cc72:	eddf 6a41 	vldr	s13, [pc, #260]	; 800cd78 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800cc76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800cc80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800cc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc88:	ee06 3a90 	vmov	s13, r3
 800cc8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800cc90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cc94:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cc98:	eee7 6a25 	vfma.f32	s13, s14, s11
 800cc9c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cca0:	4a34      	ldr	r2, [pc, #208]	; (800cd74 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800cca2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cca6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cca8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ccac:	ee07 3a10 	vmov	s14, r3
 800ccb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ccb4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ccb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ccba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc2:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ccc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ccc8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800cccc:	ee07 3a10 	vmov	s14, r3
 800ccd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ccd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cce0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cce4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800cce6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccf2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ccf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ccfe:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800cd02:	4770      	bx	lr
 800cd04:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd06:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd0a:	6082      	str	r2, [r0, #8]
}
 800cd0c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd0e:	6819      	ldr	r1, [r3, #0]
 800cd10:	0689      	lsls	r1, r1, #26
 800cd12:	d5ac      	bpl.n	800cc6e <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd14:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd16:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd1a:	4919      	ldr	r1, [pc, #100]	; (800cd80 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd22:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd2a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800cd7c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800cd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd32:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd34:	ee06 3a90 	vmov	s13, r3
 800cd38:	ee05 1a90 	vmov	s11, r1
 800cd3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cd40:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cd44:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cd48:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800cd4c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800cd50:	ee66 6a26 	vmul.f32	s13, s12, s13
 800cd54:	e7a4      	b.n	800cca0 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd56:	ee07 2a90 	vmov	s15, r2
 800cd5a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800cd84 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800cd5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd62:	e78a      	b.n	800cc7a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd64:	ee07 2a90 	vmov	s15, r2
 800cd68:	eddf 6a07 	vldr	s13, [pc, #28]	; 800cd88 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800cd6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd70:	e783      	b.n	800cc7a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800cd72:	bf00      	nop
 800cd74:	58024400 	.word	0x58024400
 800cd78:	4c742400 	.word	0x4c742400
 800cd7c:	39000000 	.word	0x39000000
 800cd80:	03d09000 	.word	0x03d09000
 800cd84:	4bbebc20 	.word	0x4bbebc20
 800cd88:	4a742400 	.word	0x4a742400

0800cd8c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cd8c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800cd90:	430b      	orrs	r3, r1
{
 800cd92:	b500      	push	{lr}
 800cd94:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cd96:	f000 8084 	beq.w	800cea2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800cd9a:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	d039      	beq.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cda2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800cda6:	430b      	orrs	r3, r1
 800cda8:	f000 80e6 	beq.w	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cdac:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	f000 8089 	beq.w	800cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cdb6:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800cdba:	430b      	orrs	r3, r1
 800cdbc:	d061      	beq.n	800ce82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cdbe:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800cdc2:	430b      	orrs	r3, r1
 800cdc4:	f000 8112 	beq.w	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cdc8:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800cdcc:	430b      	orrs	r3, r1
 800cdce:	f000 80a3 	beq.w	800cf18 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cdd2:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800cdd6:	430b      	orrs	r3, r1
 800cdd8:	f000 80fa 	beq.w	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cddc:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800cde0:	430b      	orrs	r3, r1
 800cde2:	f000 8143 	beq.w	800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cde6:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800cdea:	ea50 0301 	orrs.w	r3, r0, r1
 800cdee:	d137      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cdf0:	4a99      	ldr	r2, [pc, #612]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cdf2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cdf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800cdf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdfc:	f000 8083 	beq.w	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800ce00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce04:	f000 8156 	beq.w	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800ce08:	bb53      	cbnz	r3, 800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce0a:	6810      	ldr	r0, [r2, #0]
 800ce0c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800ce10:	d044      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800ce12:	4892      	ldr	r0, [pc, #584]	; (800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ce14:	e042      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ce16:	4a90      	ldr	r2, [pc, #576]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce18:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ce1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800ce1e:	2b80      	cmp	r3, #128	; 0x80
 800ce20:	f000 80a5 	beq.w	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ce24:	d920      	bls.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800ce26:	2bc0      	cmp	r3, #192	; 0xc0
 800ce28:	d037      	beq.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800ce2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce2e:	d117      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce30:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce32:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce38:	0749      	lsls	r1, r1, #29
 800ce3a:	d502      	bpl.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 80c1 	beq.w	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce42:	4a85      	ldr	r2, [pc, #532]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce44:	6812      	ldr	r2, [r2, #0]
 800ce46:	05d0      	lsls	r0, r2, #23
 800ce48:	d503      	bpl.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800ce4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce4e:	f000 8101 	beq.w	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce52:	4a81      	ldr	r2, [pc, #516]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce54:	6812      	ldr	r2, [r2, #0]
 800ce56:	0391      	lsls	r1, r2, #14
 800ce58:	d502      	bpl.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800ce5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce5e:	d0d8      	beq.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800ce60:	2000      	movs	r0, #0
}
 800ce62:	b005      	add	sp, #20
 800ce64:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d04c      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800ce6c:	2b40      	cmp	r3, #64	; 0x40
 800ce6e:	d1f7      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce70:	6810      	ldr	r0, [r2, #0]
 800ce72:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ce76:	d011      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce78:	a801      	add	r0, sp, #4
 800ce7a:	f7ff fd83 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce7e:	9801      	ldr	r0, [sp, #4]
 800ce80:	e00c      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ce82:	4a75      	ldr	r2, [pc, #468]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ce84:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ce86:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800ce8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce8e:	d06e      	beq.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ce90:	d937      	bls.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800ce92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ce96:	f040 8087 	bne.w	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce9a:	4871      	ldr	r0, [pc, #452]	; (800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800ce9c:	b005      	add	sp, #20
 800ce9e:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cea2:	4b6d      	ldr	r3, [pc, #436]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cea6:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800ceaa:	2b04      	cmp	r3, #4
 800ceac:	d8d8      	bhi.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800ceae:	a201      	add	r2, pc, #4	; (adr r2, 800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800cf57 	.word	0x0800cf57
 800ceb8:	0800cf33 	.word	0x0800cf33
 800cebc:	0800cf43 	.word	0x0800cf43
 800cec0:	0800ce9b 	.word	0x0800ce9b
 800cec4:	0800cf3f 	.word	0x0800cf3f
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cec8:	4a63      	ldr	r2, [pc, #396]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ceca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cecc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800ced0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ced4:	d04b      	beq.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ced6:	d944      	bls.n	800cf62 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800ced8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cedc:	d0dd      	beq.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cee2:	d1bd      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cee4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cee6:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ceec:	0752      	lsls	r2, r2, #29
 800ceee:	d5a8      	bpl.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1a6      	bne.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cef4:	4b58      	ldr	r3, [pc, #352]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cef6:	485b      	ldr	r0, [pc, #364]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cefe:	40d8      	lsrs	r0, r3
 800cf00:	e7cc      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d154      	bne.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf06:	6810      	ldr	r0, [r2, #0]
 800cf08:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800cf0c:	d0c6      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf0e:	a801      	add	r0, sp, #4
 800cf10:	f7ff fe90 	bl	800cc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf14:	9802      	ldr	r0, [sp, #8]
 800cf16:	e7c1      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cf18:	4a4f      	ldr	r2, [pc, #316]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf1a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cf1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800cf20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf24:	f000 80d0 	beq.w	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800cf28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf2c:	d0da      	beq.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d196      	bne.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf32:	4b49      	ldr	r3, [pc, #292]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cf3a:	d0af      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cf3c:	e79c      	b.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf3e:	4a46      	ldr	r2, [pc, #280]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf40:	e776      	b.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf42:	4b45      	ldr	r3, [pc, #276]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf44:	6818      	ldr	r0, [r3, #0]
 800cf46:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cf4a:	d0a7      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf4c:	a801      	add	r0, sp, #4
 800cf4e:	f7ff fdc5 	bl	800cadc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf52:	9801      	ldr	r0, [sp, #4]
 800cf54:	e7a2      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf56:	4b40      	ldr	r3, [pc, #256]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf58:	6818      	ldr	r0, [r3, #0]
 800cf5a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800cf5e:	d09d      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cf60:	e7d5      	b.n	800cf0e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d0cf      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cf66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf6a:	d081      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cf6c:	e778      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf6e:	6810      	ldr	r0, [r2, #0]
 800cf70:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cf74:	d092      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cf76:	e7e9      	b.n	800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cf78:	4a37      	ldr	r2, [pc, #220]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cf7a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cf7c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800cf80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf84:	d0f3      	beq.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cf86:	d806      	bhi.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d0bc      	beq.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cf8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf90:	f43f af6e 	beq.w	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cf94:	e764      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cf96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cf9a:	f43f af7e 	beq.w	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cf9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cfa2:	f43f af45 	beq.w	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800cfa6:	e75b      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800cfa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cfac:	d09a      	beq.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cfae:	e757      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cfb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfb4:	f43f af5c 	beq.w	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cfb8:	e752      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cfba:	6810      	ldr	r0, [r2, #0]
 800cfbc:	f010 0004 	ands.w	r0, r0, #4
 800cfc0:	f43f af6c 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfc4:	6813      	ldr	r3, [r2, #0]
 800cfc6:	4827      	ldr	r0, [pc, #156]	; (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cfc8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cfcc:	40d8      	lsrs	r0, r3
 800cfce:	e765      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cfd0:	4b21      	ldr	r3, [pc, #132]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cfd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800cfd4:	03d2      	lsls	r2, r2, #15
 800cfd6:	d5bf      	bpl.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfd8:	6818      	ldr	r0, [r3, #0]
 800cfda:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cfde:	f43f af5d 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfe2:	a801      	add	r0, sp, #4
 800cfe4:	f7ff fcce 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cfe8:	9803      	ldr	r0, [sp, #12]
 800cfea:	e757      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cfec:	4a1a      	ldr	r2, [pc, #104]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cfee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cff0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800cff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cff8:	d0df      	beq.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800cffa:	d810      	bhi.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800cffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d000:	d058      	beq.n	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800d002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d006:	d118      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d008:	4b13      	ldr	r3, [pc, #76]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d010:	f43f af44 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d014:	a801      	add	r0, sp, #4
 800d016:	f7ff fd61 	bl	800cadc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d01a:	9802      	ldr	r0, [sp, #8]
 800d01c:	e73e      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800d01e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d022:	d012      	beq.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800d024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d028:	f47f af1a 	bne.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d02c:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800d034:	f43f af32 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d038:	e6eb      	b.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f47f af10 	bne.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800d040:	b005      	add	sp, #20
 800d042:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800d046:	f7fe bd0b 	b.w	800ba60 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d04a:	6810      	ldr	r0, [r2, #0]
 800d04c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800d050:	f43f af24 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800d054:	4804      	ldr	r0, [pc, #16]	; (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800d056:	e721      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d058:	58024400 	.word	0x58024400
 800d05c:	017d7840 	.word	0x017d7840
 800d060:	00bb8000 	.word	0x00bb8000
 800d064:	03d09000 	.word	0x03d09000
 800d068:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d06c:	4b28      	ldr	r3, [pc, #160]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d070:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800d074:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d078:	d037      	beq.n	800d0ea <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800d07a:	d814      	bhi.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800d07c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d080:	d03f      	beq.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800d082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d086:	d0bf      	beq.n	800d008 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f47f aee9 	bne.w	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d08e:	f7fe fca7 	bl	800b9e0 <HAL_RCC_GetHCLKFreq>
 800d092:	4b1f      	ldr	r3, [pc, #124]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d094:	4a1f      	ldr	r2, [pc, #124]	; (800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d09c:	5cd3      	ldrb	r3, [r2, r3]
 800d09e:	f003 031f 	and.w	r3, r3, #31
 800d0a2:	40d8      	lsrs	r0, r3
        break;
 800d0a4:	e6fa      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800d0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0aa:	d017      	beq.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800d0ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0b0:	d0bc      	beq.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800d0b2:	e6d5      	b.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0b4:	6810      	ldr	r0, [r2, #0]
 800d0b6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d0ba:	f43f aeef 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0be:	a801      	add	r0, sp, #4
 800d0c0:	f7ff fc60 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0c4:	9802      	ldr	r0, [sp, #8]
 800d0c6:	e6e9      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0c8:	6810      	ldr	r0, [r2, #0]
 800d0ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d0ce:	f43f aee5 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0d2:	a801      	add	r0, sp, #4
 800d0d4:	f7ff fd02 	bl	800cadc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d0d8:	9803      	ldr	r0, [sp, #12]
 800d0da:	e6df      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d0de:	6818      	ldr	r0, [r3, #0]
 800d0e0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800d0e4:	f43f aeda 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d0e8:	e7b4      	b.n	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d0ea:	4b09      	ldr	r3, [pc, #36]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f010 0004 	ands.w	r0, r0, #4
 800d0f2:	f43f aed3 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4807      	ldr	r0, [pc, #28]	; (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800d0fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d0fe:	40d8      	lsrs	r0, r3
 800d100:	e6cc      	b.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d102:	4b03      	ldr	r3, [pc, #12]	; (800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d104:	6818      	ldr	r0, [r3, #0]
 800d106:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d10a:	f43f aec7 	beq.w	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d10e:	e7d6      	b.n	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800d110:	58024400 	.word	0x58024400
 800d114:	0801dd14 	.word	0x0801dd14
 800d118:	03d09000 	.word	0x03d09000

0800d11c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f000 80a5 	beq.w	800d26c <HAL_TIM_Base_Init+0x150>
{
 800d122:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d124:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d128:	4604      	mov	r4, r0
 800d12a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d076      	beq.n	800d220 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d132:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d134:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d136:	494e      	ldr	r1, [pc, #312]	; (800d270 <HAL_TIM_Base_Init+0x154>)
 800d138:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 800d13c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d140:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 800d144:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d146:	fab1 f181 	clz	r1, r1
 800d14a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d14e:	d027      	beq.n	800d1a0 <HAL_TIM_Base_Init+0x84>
 800d150:	bb31      	cbnz	r1, 800d1a0 <HAL_TIM_Base_Init+0x84>
 800d152:	4848      	ldr	r0, [pc, #288]	; (800d274 <HAL_TIM_Base_Init+0x158>)
 800d154:	4d48      	ldr	r5, [pc, #288]	; (800d278 <HAL_TIM_Base_Init+0x15c>)
 800d156:	4282      	cmp	r2, r0
 800d158:	d067      	beq.n	800d22a <HAL_TIM_Base_Init+0x10e>
 800d15a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d15e:	4282      	cmp	r2, r0
 800d160:	d063      	beq.n	800d22a <HAL_TIM_Base_Init+0x10e>
 800d162:	1b55      	subs	r5, r2, r5
 800d164:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d168:	fab5 f585 	clz	r5, r5
 800d16c:	4282      	cmp	r2, r0
 800d16e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800d172:	d063      	beq.n	800d23c <HAL_TIM_Base_Init+0x120>
 800d174:	2d00      	cmp	r5, #0
 800d176:	d161      	bne.n	800d23c <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d178:	4840      	ldr	r0, [pc, #256]	; (800d27c <HAL_TIM_Base_Init+0x160>)
 800d17a:	4941      	ldr	r1, [pc, #260]	; (800d280 <HAL_TIM_Base_Init+0x164>)
 800d17c:	428a      	cmp	r2, r1
 800d17e:	bf18      	it	ne
 800d180:	4282      	cmpne	r2, r0
 800d182:	d065      	beq.n	800d250 <HAL_TIM_Base_Init+0x134>
 800d184:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d188:	428a      	cmp	r2, r1
 800d18a:	d061      	beq.n	800d250 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d18c:	69a0      	ldr	r0, [r4, #24]
 800d18e:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d192:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d194:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d196:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d198:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d19a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d19c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d19e:	e023      	b.n	800d1e8 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1a0:	4d35      	ldr	r5, [pc, #212]	; (800d278 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d1a6:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1a8:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
 800d1aa:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1ac:	fab5 f585 	clz	r5, r5
 800d1b0:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1b2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d1b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d1b8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d1ba:	69a0      	ldr	r0, [r4, #24]
 800d1bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1c0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800d1c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d1c4:	68e3      	ldr	r3, [r4, #12]
 800d1c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d1c8:	6863      	ldr	r3, [r4, #4]
 800d1ca:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d1cc:	b951      	cbnz	r1, 800d1e4 <HAL_TIM_Base_Init+0xc8>
 800d1ce:	b94d      	cbnz	r5, 800d1e4 <HAL_TIM_Base_Init+0xc8>
 800d1d0:	492a      	ldr	r1, [pc, #168]	; (800d27c <HAL_TIM_Base_Init+0x160>)
 800d1d2:	4b2b      	ldr	r3, [pc, #172]	; (800d280 <HAL_TIM_Base_Init+0x164>)
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	bf18      	it	ne
 800d1d8:	428a      	cmpne	r2, r1
 800d1da:	d003      	beq.n	800d1e4 <HAL_TIM_Base_Init+0xc8>
 800d1dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d101      	bne.n	800d1e8 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d1e4:	6963      	ldr	r3, [r4, #20]
 800d1e6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1e8:	2301      	movs	r3, #1
  return HAL_OK;
 800d1ea:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 800d1ec:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800d1f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800d1fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800d1fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800d202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d20a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d20e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d212:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800d216:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d21a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800d220:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d224:	f7f9 fa0a 	bl	800663c <HAL_TIM_Base_MspInit>
 800d228:	e783      	b.n	800d132 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d22a:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d22c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d230:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d232:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
 800d236:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d238:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d23a:	e7ba      	b.n	800d1b2 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
 800d23c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d242:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d244:	480f      	ldr	r0, [pc, #60]	; (800d284 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d246:	4282      	cmp	r2, r0
 800d248:	d0b3      	beq.n	800d1b2 <HAL_TIM_Base_Init+0x96>
 800d24a:	2d00      	cmp	r5, #0
 800d24c:	d1b1      	bne.n	800d1b2 <HAL_TIM_Base_Init+0x96>
 800d24e:	e793      	b.n	800d178 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d250:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d256:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d258:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d25a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d25c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d260:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800d262:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800d264:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d266:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d268:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d26a:	e7b1      	b.n	800d1d0 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
 800d26c:	2001      	movs	r0, #1
}
 800d26e:	4770      	bx	lr
 800d270:	40010000 	.word	0x40010000
 800d274:	40000400 	.word	0x40000400
 800d278:	40010400 	.word	0x40010400
 800d27c:	40014000 	.word	0x40014000
 800d280:	40014400 	.word	0x40014400
 800d284:	40000c00 	.word	0x40000c00

0800d288 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d288:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d13d      	bne.n	800d30c <HAL_TIM_Base_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d290:	6802      	ldr	r2, [r0, #0]
 800d292:	4b23      	ldr	r3, [pc, #140]	; (800d320 <HAL_TIM_Base_Start+0x98>)
 800d294:	4923      	ldr	r1, [pc, #140]	; (800d324 <HAL_TIM_Base_Start+0x9c>)
 800d296:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d29a:	bf18      	it	ne
 800d29c:	429a      	cmpne	r2, r3
{
 800d29e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2a0:	bf0c      	ite	eq
 800d2a2:	2301      	moveq	r3, #1
 800d2a4:	2300      	movne	r3, #0
 800d2a6:	4d20      	ldr	r5, [pc, #128]	; (800d328 <HAL_TIM_Base_Start+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d2a8:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2aa:	42aa      	cmp	r2, r5
 800d2ac:	bf08      	it	eq
 800d2ae:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b2:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2b6:	4c1d      	ldr	r4, [pc, #116]	; (800d32c <HAL_TIM_Base_Start+0xa4>)
 800d2b8:	428a      	cmp	r2, r1
 800d2ba:	bf08      	it	eq
 800d2bc:	f043 0301 	orreq.w	r3, r3, #1
 800d2c0:	481b      	ldr	r0, [pc, #108]	; (800d330 <HAL_TIM_Base_Start+0xa8>)
 800d2c2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800d2c6:	42a2      	cmp	r2, r4
 800d2c8:	bf08      	it	eq
 800d2ca:	f043 0301 	orreq.w	r3, r3, #1
 800d2ce:	4282      	cmp	r2, r0
 800d2d0:	bf08      	it	eq
 800d2d2:	f043 0301 	orreq.w	r3, r3, #1
 800d2d6:	428a      	cmp	r2, r1
 800d2d8:	bf08      	it	eq
 800d2da:	f043 0301 	orreq.w	r3, r3, #1
 800d2de:	b933      	cbnz	r3, 800d2ee <HAL_TIM_Base_Start+0x66>
 800d2e0:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d2e4:	1a10      	subs	r0, r2, r0
 800d2e6:	fab0 f080 	clz	r0, r0
 800d2ea:	0940      	lsrs	r0, r0, #5
 800d2ec:	b198      	cbz	r0, 800d316 <HAL_TIM_Base_Start+0x8e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2ee:	6891      	ldr	r1, [r2, #8]
 800d2f0:	4b10      	ldr	r3, [pc, #64]	; (800d334 <HAL_TIM_Base_Start+0xac>)
 800d2f2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f4:	2b06      	cmp	r3, #6
 800d2f6:	d00b      	beq.n	800d310 <HAL_TIM_Base_Start+0x88>
 800d2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2fc:	d008      	beq.n	800d310 <HAL_TIM_Base_Start+0x88>
      __HAL_TIM_ENABLE(htim);
 800d2fe:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d300:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d302:	f043 0301 	orr.w	r3, r3, #1
 800d306:	6013      	str	r3, [r2, #0]
}
 800d308:	bc30      	pop	{r4, r5}
 800d30a:	4770      	bx	lr
    return HAL_ERROR;
 800d30c:	2001      	movs	r0, #1
}
 800d30e:	4770      	bx	lr
  return HAL_OK;
 800d310:	2000      	movs	r0, #0
}
 800d312:	bc30      	pop	{r4, r5}
 800d314:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d316:	6813      	ldr	r3, [r2, #0]
 800d318:	f043 0301 	orr.w	r3, r3, #1
 800d31c:	6013      	str	r3, [r2, #0]
 800d31e:	e7f3      	b.n	800d308 <HAL_TIM_Base_Start+0x80>
 800d320:	40010000 	.word	0x40010000
 800d324:	40000800 	.word	0x40000800
 800d328:	40000400 	.word	0x40000400
 800d32c:	40000c00 	.word	0x40000c00
 800d330:	40010400 	.word	0x40010400
 800d334:	00010007 	.word	0x00010007

0800d338 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800d338:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d141      	bne.n	800d3c4 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d340:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d342:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d344:	4b24      	ldr	r3, [pc, #144]	; (800d3d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800d346:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d34a:	bf18      	it	ne
 800d34c:	429a      	cmpne	r2, r3
{
 800d34e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d350:	bf0c      	ite	eq
 800d352:	2301      	moveq	r3, #1
 800d354:	2300      	movne	r3, #0
 800d356:	4d21      	ldr	r5, [pc, #132]	; (800d3dc <HAL_TIM_Base_Start_IT+0xa4>)
 800d358:	4c21      	ldr	r4, [pc, #132]	; (800d3e0 <HAL_TIM_Base_Start_IT+0xa8>)
 800d35a:	42aa      	cmp	r2, r5
 800d35c:	bf08      	it	eq
 800d35e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d362:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d366:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d368:	42a2      	cmp	r2, r4
 800d36a:	bf08      	it	eq
 800d36c:	f043 0301 	orreq.w	r3, r3, #1
 800d370:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d374:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d378:	481a      	ldr	r0, [pc, #104]	; (800d3e4 <HAL_TIM_Base_Start_IT+0xac>)
 800d37a:	42a2      	cmp	r2, r4
 800d37c:	bf08      	it	eq
 800d37e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d382:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d384:	4282      	cmp	r2, r0
 800d386:	bf08      	it	eq
 800d388:	f043 0301 	orreq.w	r3, r3, #1
 800d38c:	4916      	ldr	r1, [pc, #88]	; (800d3e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800d38e:	428a      	cmp	r2, r1
 800d390:	bf08      	it	eq
 800d392:	f043 0301 	orreq.w	r3, r3, #1
 800d396:	b933      	cbnz	r3, 800d3a6 <HAL_TIM_Base_Start_IT+0x6e>
 800d398:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 800d39c:	1a10      	subs	r0, r2, r0
 800d39e:	fab0 f080 	clz	r0, r0
 800d3a2:	0940      	lsrs	r0, r0, #5
 800d3a4:	b198      	cbz	r0, 800d3ce <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3a6:	6891      	ldr	r1, [r2, #8]
 800d3a8:	4b10      	ldr	r3, [pc, #64]	; (800d3ec <HAL_TIM_Base_Start_IT+0xb4>)
 800d3aa:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3ac:	2b06      	cmp	r3, #6
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_TIM_Base_Start_IT+0x90>
 800d3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3b4:	d008      	beq.n	800d3c8 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 800d3b6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d3b8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800d3ba:	f043 0301 	orr.w	r3, r3, #1
 800d3be:	6013      	str	r3, [r2, #0]
}
 800d3c0:	bc30      	pop	{r4, r5}
 800d3c2:	4770      	bx	lr
    return HAL_ERROR;
 800d3c4:	2001      	movs	r0, #1
}
 800d3c6:	4770      	bx	lr
  return HAL_OK;
 800d3c8:	2000      	movs	r0, #0
}
 800d3ca:	bc30      	pop	{r4, r5}
 800d3cc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800d3ce:	6813      	ldr	r3, [r2, #0]
 800d3d0:	f043 0301 	orr.w	r3, r3, #1
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	e7f3      	b.n	800d3c0 <HAL_TIM_Base_Start_IT+0x88>
 800d3d8:	40010000 	.word	0x40010000
 800d3dc:	40000400 	.word	0x40000400
 800d3e0:	40000800 	.word	0x40000800
 800d3e4:	40010400 	.word	0x40010400
 800d3e8:	40001800 	.word	0x40001800
 800d3ec:	00010007 	.word	0x00010007

0800d3f0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	f000 80cc 	beq.w	800d58e <HAL_TIM_Encoder_Init+0x19e>
{
 800d3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800d3f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	460d      	mov	r5, r1
 800d400:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 809b 	beq.w	800d540 <HAL_TIM_Encoder_Init+0x150>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d40a:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800d40c:	2102      	movs	r1, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d40e:	4a61      	ldr	r2, [pc, #388]	; (800d594 <HAL_TIM_Encoder_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d410:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d418:	6899      	ldr	r1, [r3, #8]
 800d41a:	ea02 0201 	and.w	r2, r2, r1
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d41e:	495e      	ldr	r1, [pc, #376]	; (800d598 <HAL_TIM_Encoder_Init+0x1a8>)
 800d420:	eba3 0101 	sub.w	r1, r3, r1
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d424:	609a      	str	r2, [r3, #8]
  tmpcr1 = TIMx->CR1;
 800d426:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d428:	fab1 f181 	clz	r1, r1
 800d42c:	ea4f 1151 	mov.w	r1, r1, lsr #5
 800d430:	d02b      	beq.n	800d48a <HAL_TIM_Encoder_Init+0x9a>
 800d432:	bb51      	cbnz	r1, 800d48a <HAL_TIM_Encoder_Init+0x9a>
 800d434:	4859      	ldr	r0, [pc, #356]	; (800d59c <HAL_TIM_Encoder_Init+0x1ac>)
 800d436:	4283      	cmp	r3, r0
 800d438:	f000 8087 	beq.w	800d54a <HAL_TIM_Encoder_Init+0x15a>
 800d43c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d440:	4283      	cmp	r3, r0
 800d442:	f000 8082 	beq.w	800d54a <HAL_TIM_Encoder_Init+0x15a>
 800d446:	4e56      	ldr	r6, [pc, #344]	; (800d5a0 <HAL_TIM_Encoder_Init+0x1b0>)
 800d448:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d44c:	1b9e      	subs	r6, r3, r6
 800d44e:	4283      	cmp	r3, r0
 800d450:	fab6 f686 	clz	r6, r6
 800d454:	ea4f 1656 	mov.w	r6, r6, lsr #5
 800d458:	f000 8081 	beq.w	800d55e <HAL_TIM_Encoder_Init+0x16e>
 800d45c:	2e00      	cmp	r6, #0
 800d45e:	d17e      	bne.n	800d55e <HAL_TIM_Encoder_Init+0x16e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d460:	4850      	ldr	r0, [pc, #320]	; (800d5a4 <HAL_TIM_Encoder_Init+0x1b4>)
 800d462:	4951      	ldr	r1, [pc, #324]	; (800d5a8 <HAL_TIM_Encoder_Init+0x1b8>)
 800d464:	428b      	cmp	r3, r1
 800d466:	bf18      	it	ne
 800d468:	4283      	cmpne	r3, r0
 800d46a:	f000 8082 	beq.w	800d572 <HAL_TIM_Encoder_Init+0x182>
 800d46e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d472:	428b      	cmp	r3, r1
 800d474:	d07d      	beq.n	800d572 <HAL_TIM_Encoder_Init+0x182>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d476:	69a1      	ldr	r1, [r4, #24]
 800d478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d47c:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d47e:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d480:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d482:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d484:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d486:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d488:	e023      	b.n	800d4d2 <HAL_TIM_Encoder_Init+0xe2>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d48a:	4e45      	ldr	r6, [pc, #276]	; (800d5a0 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d48c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d490:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d492:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d494:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d496:	fab6 f686 	clz	r6, r6
 800d49a:	0976      	lsrs	r6, r6, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d49c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d49e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4a2:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4a4:	69a0      	ldr	r0, [r4, #24]
 800d4a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4aa:	4302      	orrs	r2, r0
  TIMx->CR1 = tmpcr1;
 800d4ac:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4ae:	68e2      	ldr	r2, [r4, #12]
 800d4b0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d4b2:	6862      	ldr	r2, [r4, #4]
 800d4b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4b6:	b951      	cbnz	r1, 800d4ce <HAL_TIM_Encoder_Init+0xde>
 800d4b8:	b94e      	cbnz	r6, 800d4ce <HAL_TIM_Encoder_Init+0xde>
 800d4ba:	493a      	ldr	r1, [pc, #232]	; (800d5a4 <HAL_TIM_Encoder_Init+0x1b4>)
 800d4bc:	4a3a      	ldr	r2, [pc, #232]	; (800d5a8 <HAL_TIM_Encoder_Init+0x1b8>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	bf18      	it	ne
 800d4c2:	428b      	cmpne	r3, r1
 800d4c4:	d003      	beq.n	800d4ce <HAL_TIM_Encoder_Init+0xde>
 800d4c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d101      	bne.n	800d4d2 <HAL_TIM_Encoder_Init+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800d4ce:	6962      	ldr	r2, [r4, #20]
 800d4d0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d4d2:	692a      	ldr	r2, [r5, #16]
  TIMx->EGR = TIM_EGR_UG;
 800d4d4:	2601      	movs	r6, #1
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d4d6:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d4d8:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d4dc:	69aa      	ldr	r2, [r5, #24]
  TIMx->EGR = TIM_EGR_UG;
 800d4de:	615e      	str	r6, [r3, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d4e0:	ea41 2c02 	orr.w	ip, r1, r2, lsl #8
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d4e4:	69e9      	ldr	r1, [r5, #28]
  tmpsmcr = htim->Instance->SMCR;
 800d4e6:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d4e8:	ea4e 2201 	orr.w	r2, lr, r1, lsl #8
  tmpccmr1 = htim->Instance->CCMR1;
 800d4ec:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d4ee:	492f      	ldr	r1, [pc, #188]	; (800d5ac <HAL_TIM_Encoder_Init+0x1bc>)
 800d4f0:	4039      	ands	r1, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d4f2:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d4f4:	ea4c 0c01 	orr.w	ip, ip, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d4f8:	68e9      	ldr	r1, [r5, #12]
 800d4fa:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 800d4fc:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d4fe:	f021 0eaa 	bic.w	lr, r1, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d502:	6a29      	ldr	r1, [r5, #32]
 800d504:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d508:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 800d50a:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d50c:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 800d510:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d512:	ea41 010e 	orr.w	r1, r1, lr
  htim->Instance->SMCR = tmpsmcr;
 800d516:	6098      	str	r0, [r3, #8]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d518:	4825      	ldr	r0, [pc, #148]	; (800d5b0 <HAL_TIM_Encoder_Init+0x1c0>)
 800d51a:	ea0c 0000 	and.w	r0, ip, r0
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d51e:	4302      	orrs	r2, r0
  return HAL_OK;
 800d520:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800d522:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800d524:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d526:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d52a:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d52e:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d532:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d536:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800d53a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
}
 800d53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800d540:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800d544:	f7f9 f8d8 	bl	80066f8 <HAL_TIM_Encoder_MspInit>
 800d548:	e75f      	b.n	800d40a <HAL_TIM_Encoder_Init+0x1a>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d54a:	4e15      	ldr	r6, [pc, #84]	; (800d5a0 <HAL_TIM_Encoder_Init+0x1b0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d54c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d550:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d552:	1b9e      	subs	r6, r3, r6
    tmpcr1 |= Structure->CounterMode;
 800d554:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d556:	fab6 f686 	clz	r6, r6
 800d55a:	0976      	lsrs	r6, r6, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d55c:	e79e      	b.n	800d49c <HAL_TIM_Encoder_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 800d55e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d560:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d564:	4302      	orrs	r2, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d566:	4813      	ldr	r0, [pc, #76]	; (800d5b4 <HAL_TIM_Encoder_Init+0x1c4>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d568:	4283      	cmp	r3, r0
 800d56a:	d097      	beq.n	800d49c <HAL_TIM_Encoder_Init+0xac>
 800d56c:	2e00      	cmp	r6, #0
 800d56e:	d195      	bne.n	800d49c <HAL_TIM_Encoder_Init+0xac>
 800d570:	e776      	b.n	800d460 <HAL_TIM_Encoder_Init+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d572:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d574:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d578:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d57a:	69a1      	ldr	r1, [r4, #24]
 800d57c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d580:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d582:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800d584:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 800d586:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d588:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d58a:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d58c:	e795      	b.n	800d4ba <HAL_TIM_Encoder_Init+0xca>
    return HAL_ERROR;
 800d58e:	2001      	movs	r0, #1
}
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	fffebff8 	.word	0xfffebff8
 800d598:	40010000 	.word	0x40010000
 800d59c:	40000400 	.word	0x40000400
 800d5a0:	40010400 	.word	0x40010400
 800d5a4:	40014000 	.word	0x40014000
 800d5a8:	40014400 	.word	0x40014400
 800d5ac:	fffffcfc 	.word	0xfffffcfc
 800d5b0:	ffff0303 	.word	0xffff0303
 800d5b4:	40000c00 	.word	0x40000c00

0800d5b8 <HAL_TIM_Encoder_Start>:
{
 800d5b8:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d5ba:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d5be:	f890 c03f 	ldrb.w	ip, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d5c2:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d5c6:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d5c8:	f890 e045 	ldrb.w	lr, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d5cc:	b2d2      	uxtb	r2, r2
  if (Channel == TIM_CHANNEL_1)
 800d5ce:	b9c1      	cbnz	r1, 800d602 <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d123      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
 800d5d4:	2a01      	cmp	r2, #1
 800d5d6:	d121      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d5d8:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5da:	2302      	movs	r3, #2
 800d5dc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5e0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5e4:	6a13      	ldr	r3, [r2, #32]
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
 800d5ea:	6213      	str	r3, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5ec:	6a13      	ldr	r3, [r2, #32]
 800d5ee:	f043 0301 	orr.w	r3, r3, #1
 800d5f2:	6213      	str	r3, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 800d5f4:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800d5f6:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800d5f8:	f043 0301 	orr.w	r3, r3, #1
 800d5fc:	6013      	str	r3, [r2, #0]
}
 800d5fe:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (Channel == TIM_CHANNEL_2)
 800d602:	2904      	cmp	r1, #4
 800d604:	fa5f fc8c 	uxtb.w	ip, ip
 800d608:	fa5f fe8e 	uxtb.w	lr, lr
 800d60c:	d027      	beq.n	800d65e <HAL_TIM_Encoder_Start+0xa6>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d104      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
 800d612:	f1bc 0f01 	cmp.w	ip, #1
 800d616:	d101      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d618:	2a01      	cmp	r2, #1
 800d61a:	d002      	beq.n	800d622 <HAL_TIM_Encoder_Start+0x6a>
      return HAL_ERROR;
 800d61c:	2001      	movs	r0, #1
}
 800d61e:	f85d fb04 	ldr.w	pc, [sp], #4
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d622:	f1be 0f01 	cmp.w	lr, #1
 800d626:	d1f9      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d628:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d62a:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d62c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d630:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d634:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d638:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d63c:	6a13      	ldr	r3, [r2, #32]
 800d63e:	f023 0301 	bic.w	r3, r3, #1
 800d642:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d644:	6a13      	ldr	r3, [r2, #32]
 800d646:	f043 0301 	orr.w	r3, r3, #1
 800d64a:	6213      	str	r3, [r2, #32]
  TIMx->CCER &= ~tmp;
 800d64c:	6a13      	ldr	r3, [r2, #32]
 800d64e:	f023 0310 	bic.w	r3, r3, #16
 800d652:	6213      	str	r3, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d654:	6a13      	ldr	r3, [r2, #32]
 800d656:	f043 0310 	orr.w	r3, r3, #16
 800d65a:	6213      	str	r3, [r2, #32]
}
 800d65c:	e7ca      	b.n	800d5f4 <HAL_TIM_Encoder_Start+0x3c>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d65e:	f1bc 0f01 	cmp.w	ip, #1
 800d662:	d1db      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
 800d664:	f1be 0f01 	cmp.w	lr, #1
 800d668:	d1d8      	bne.n	800d61c <HAL_TIM_Encoder_Start+0x64>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d66a:	2302      	movs	r3, #2
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d66c:	6802      	ldr	r2, [r0, #0]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d66e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d672:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  TIMx->CCER &= ~tmp;
 800d676:	e7e9      	b.n	800d64c <HAL_TIM_Encoder_Start+0x94>

0800d678 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800d678:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	f000 8081 	beq.w	800d784 <HAL_TIM_ConfigClockSource+0x10c>
 800d682:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d684:	2302      	movs	r3, #2
{
 800d686:	b470      	push	{r4, r5, r6}
  tmpsmcr = htim->Instance->SMCR;
 800d688:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800d68a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d68c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800d690:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d694:	4b5a      	ldr	r3, [pc, #360]	; (800d800 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800d696:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d698:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800d69a:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800d69c:	680b      	ldr	r3, [r1, #0]
 800d69e:	2b70      	cmp	r3, #112	; 0x70
 800d6a0:	f000 809c 	beq.w	800d7dc <HAL_TIM_ConfigClockSource+0x164>
 800d6a4:	d825      	bhi.n	800d6f2 <HAL_TIM_ConfigClockSource+0x7a>
 800d6a6:	2b50      	cmp	r3, #80	; 0x50
 800d6a8:	d06e      	beq.n	800d788 <HAL_TIM_ConfigClockSource+0x110>
 800d6aa:	d939      	bls.n	800d720 <HAL_TIM_ConfigClockSource+0xa8>
 800d6ac:	2b60      	cmp	r3, #96	; 0x60
 800d6ae:	d118      	bne.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6b0:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6b2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6b4:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6b8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6ba:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d6bc:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800d6be:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6c4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800d6c8:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d6ca:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 800d6ce:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6d0:	4b4c      	ldr	r3, [pc, #304]	; (800d804 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800d6d2:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCER = tmpccer;
 800d6d6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800d6d8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d6da:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d6dc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d6e0:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800d6e2:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800d6e4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800d6e6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d6ea:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800d6ee:	bc70      	pop	{r4, r5, r6}
 800d6f0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800d6f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6f6:	d060      	beq.n	800d7ba <HAL_TIM_ConfigClockSource+0x142>
 800d6f8:	d933      	bls.n	800d762 <HAL_TIM_ConfigClockSource+0xea>
 800d6fa:	4943      	ldr	r1, [pc, #268]	; (800d808 <HAL_TIM_ConfigClockSource+0x190>)
 800d6fc:	428b      	cmp	r3, r1
 800d6fe:	d006      	beq.n	800d70e <HAL_TIM_ConfigClockSource+0x96>
 800d700:	d929      	bls.n	800d756 <HAL_TIM_ConfigClockSource+0xde>
 800d702:	4942      	ldr	r1, [pc, #264]	; (800d80c <HAL_TIM_ConfigClockSource+0x194>)
 800d704:	428b      	cmp	r3, r1
 800d706:	d002      	beq.n	800d70e <HAL_TIM_ConfigClockSource+0x96>
 800d708:	3110      	adds	r1, #16
 800d70a:	428b      	cmp	r3, r1
 800d70c:	d1e9      	bne.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 800d70e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d710:	493c      	ldr	r1, [pc, #240]	; (800d804 <HAL_TIM_ConfigClockSource+0x18c>)
 800d712:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800d714:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d716:	430b      	orrs	r3, r1
 800d718:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800d71c:	60a3      	str	r3, [r4, #8]
}
 800d71e:	e7e0      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d720:	2b40      	cmp	r3, #64	; 0x40
 800d722:	d123      	bne.n	800d76c <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 800d724:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d726:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d728:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d72a:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d72e:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d732:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800d734:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d736:	4b33      	ldr	r3, [pc, #204]	; (800d804 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d738:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d73a:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d73c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d740:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d744:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d746:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d748:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d74a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d74c:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d74e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d752:	60a3      	str	r3, [r4, #8]
}
 800d754:	e7c5      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d756:	f023 0110 	bic.w	r1, r3, #16
 800d75a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d75e:	d1c0      	bne.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
 800d760:	e7d5      	b.n	800d70e <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 800d762:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800d766:	bf18      	it	ne
 800d768:	2001      	movne	r0, #1
 800d76a:	e7ba      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800d76c:	d8b9      	bhi.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
 800d76e:	2b20      	cmp	r3, #32
 800d770:	d0cd      	beq.n	800d70e <HAL_TIM_ConfigClockSource+0x96>
 800d772:	d903      	bls.n	800d77c <HAL_TIM_ConfigClockSource+0x104>
 800d774:	2b30      	cmp	r3, #48	; 0x30
 800d776:	d0ca      	beq.n	800d70e <HAL_TIM_ConfigClockSource+0x96>
 800d778:	2001      	movs	r0, #1
 800d77a:	e7b2      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
 800d77c:	f033 0110 	bics.w	r1, r3, #16
 800d780:	d1af      	bne.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
 800d782:	e7c4      	b.n	800d70e <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800d784:	2002      	movs	r0, #2
}
 800d786:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800d788:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d78a:	6a25      	ldr	r5, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d78c:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d78e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d792:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d796:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 800d798:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800d79a:	4b1a      	ldr	r3, [pc, #104]	; (800d804 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d79c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d79e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7a0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7a4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d7a8:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800d7aa:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800d7ac:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800d7ae:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7b0:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7b2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800d7b6:	60a3      	str	r3, [r4, #8]
}
 800d7b8:	e793      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7ba:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d7be:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7c0:	432b      	orrs	r3, r5
 800d7c2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7c4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d7c8:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d7ce:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d7d0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d7d8:	60a3      	str	r3, [r4, #8]
      break;
 800d7da:	e782      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7dc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800d7e0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7e2:	432b      	orrs	r3, r5
 800d7e4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7e6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800d7ea:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d7f0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800d7f2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800d7f4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800d7fa:	60a3      	str	r3, [r4, #8]
      break;
 800d7fc:	e771      	b.n	800d6e2 <HAL_TIM_ConfigClockSource+0x6a>
 800d7fe:	bf00      	nop
 800d800:	ffce0088 	.word	0xffce0088
 800d804:	ffcfff8f 	.word	0xffcfff8f
 800d808:	00100020 	.word	0x00100020
 800d80c:	00100030 	.word	0x00100030

0800d810 <HAL_TIM_OC_DelayElapsedCallback>:
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop

0800d814 <HAL_TIM_IC_CaptureCallback>:
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop

0800d818 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop

0800d81c <HAL_TIM_TriggerCallback>:
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop

0800d820 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d820:	6803      	ldr	r3, [r0, #0]
 800d822:	691a      	ldr	r2, [r3, #16]
 800d824:	0791      	lsls	r1, r2, #30
{
 800d826:	b510      	push	{r4, lr}
 800d828:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d82a:	d502      	bpl.n	800d832 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d82c:	68da      	ldr	r2, [r3, #12]
 800d82e:	0792      	lsls	r2, r2, #30
 800d830:	d468      	bmi.n	800d904 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d832:	691a      	ldr	r2, [r3, #16]
 800d834:	0752      	lsls	r2, r2, #29
 800d836:	d502      	bpl.n	800d83e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d838:	68da      	ldr	r2, [r3, #12]
 800d83a:	0750      	lsls	r0, r2, #29
 800d83c:	d44f      	bmi.n	800d8de <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d83e:	691a      	ldr	r2, [r3, #16]
 800d840:	0711      	lsls	r1, r2, #28
 800d842:	d502      	bpl.n	800d84a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d844:	68da      	ldr	r2, [r3, #12]
 800d846:	0712      	lsls	r2, r2, #28
 800d848:	d437      	bmi.n	800d8ba <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	06d0      	lsls	r0, r2, #27
 800d84e:	d502      	bpl.n	800d856 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	06d1      	lsls	r1, r2, #27
 800d854:	d41e      	bmi.n	800d894 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d856:	691a      	ldr	r2, [r3, #16]
 800d858:	07d2      	lsls	r2, r2, #31
 800d85a:	d502      	bpl.n	800d862 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d85c:	68da      	ldr	r2, [r3, #12]
 800d85e:	07d0      	lsls	r0, r2, #31
 800d860:	d469      	bmi.n	800d936 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d862:	691a      	ldr	r2, [r3, #16]
 800d864:	0611      	lsls	r1, r2, #24
 800d866:	d502      	bpl.n	800d86e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d868:	68da      	ldr	r2, [r3, #12]
 800d86a:	0612      	lsls	r2, r2, #24
 800d86c:	d46b      	bmi.n	800d946 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	05d0      	lsls	r0, r2, #23
 800d872:	d502      	bpl.n	800d87a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d874:	68da      	ldr	r2, [r3, #12]
 800d876:	0611      	lsls	r1, r2, #24
 800d878:	d46d      	bmi.n	800d956 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d87a:	691a      	ldr	r2, [r3, #16]
 800d87c:	0652      	lsls	r2, r2, #25
 800d87e:	d502      	bpl.n	800d886 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	0650      	lsls	r0, r2, #25
 800d884:	d46f      	bmi.n	800d966 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d886:	691a      	ldr	r2, [r3, #16]
 800d888:	0691      	lsls	r1, r2, #26
 800d88a:	d502      	bpl.n	800d892 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d88c:	68da      	ldr	r2, [r3, #12]
 800d88e:	0692      	lsls	r2, r2, #26
 800d890:	d449      	bmi.n	800d926 <HAL_TIM_IRQHandler+0x106>
}
 800d892:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d894:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d898:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d89a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d89c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d89e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8a0:	69db      	ldr	r3, [r3, #28]
 800d8a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d8a6:	d16f      	bne.n	800d988 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8a8:	f7ff ffb2 	bl	800d810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	f7ff ffb3 	bl	800d818 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d8b4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8b6:	7722      	strb	r2, [r4, #28]
 800d8b8:	e7cd      	b.n	800d856 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8ba:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8be:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d8c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8c2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8c6:	69db      	ldr	r3, [r3, #28]
 800d8c8:	079b      	lsls	r3, r3, #30
 800d8ca:	d15a      	bne.n	800d982 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8cc:	f7ff ffa0 	bl	800d810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f7ff ffa1 	bl	800d818 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8d6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d8d8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8da:	7722      	strb	r2, [r4, #28]
 800d8dc:	e7b5      	b.n	800d84a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8de:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8e2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800d8e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8e6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d8f0:	d144      	bne.n	800d97c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8f2:	f7ff ff8d 	bl	800d810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f7ff ff8e 	bl	800d818 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8fc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d8fe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d900:	7722      	strb	r2, [r4, #28]
 800d902:	e79c      	b.n	800d83e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d904:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d908:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d90a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d90c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	0799      	lsls	r1, r3, #30
 800d912:	d130      	bne.n	800d976 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d914:	f7ff ff7c 	bl	800d810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d918:	4620      	mov	r0, r4
 800d91a:	f7ff ff7d 	bl	800d818 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d91e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d920:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d922:	7722      	strb	r2, [r4, #28]
 800d924:	e785      	b.n	800d832 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d926:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d92a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d92c:	611a      	str	r2, [r3, #16]
}
 800d92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d932:	f000 b887 	b.w	800da44 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d936:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d93a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d93c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d93e:	f7f3 fde3 	bl	8001508 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	e78d      	b.n	800d862 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d946:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800d94a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d94c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d94e:	f000 f87b 	bl	800da48 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	e78b      	b.n	800d86e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d956:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800d95a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d95c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d95e:	f000 f875 	bl	800da4c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	e789      	b.n	800d87a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d966:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800d96a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d96c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d96e:	f7ff ff55 	bl	800d81c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	e787      	b.n	800d886 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800d976:	f7ff ff4d 	bl	800d814 <HAL_TIM_IC_CaptureCallback>
 800d97a:	e7d0      	b.n	800d91e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d97c:	f7ff ff4a 	bl	800d814 <HAL_TIM_IC_CaptureCallback>
 800d980:	e7bc      	b.n	800d8fc <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d982:	f7ff ff47 	bl	800d814 <HAL_TIM_IC_CaptureCallback>
 800d986:	e7a6      	b.n	800d8d6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d988:	f7ff ff44 	bl	800d814 <HAL_TIM_IC_CaptureCallback>
 800d98c:	e791      	b.n	800d8b2 <HAL_TIM_IRQHandler+0x92>
 800d98e:	bf00      	nop

0800d990 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d990:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d994:	2b01      	cmp	r3, #1
 800d996:	d04b      	beq.n	800da30 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d998:	6803      	ldr	r3, [r0, #0]
 800d99a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800d99c:	2002      	movs	r0, #2
{
 800d99e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9a0:	4d24      	ldr	r5, [pc, #144]	; (800da34 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9a6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800d9a8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800d9aa:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d9ac:	d029      	beq.n	800da02 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800d9ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d9b2:	42ab      	cmp	r3, r5
 800d9b4:	d025      	beq.n	800da02 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9b6:	4d20      	ldr	r5, [pc, #128]	; (800da38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9b8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9bc:	42ab      	cmp	r3, r5
 800d9be:	bf18      	it	ne
 800d9c0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d9c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d9c8:	bf0c      	ite	eq
 800d9ca:	f04f 0c01 	moveq.w	ip, #1
 800d9ce:	f04f 0c00 	movne.w	ip, #0
 800d9d2:	42ab      	cmp	r3, r5
 800d9d4:	bf08      	it	eq
 800d9d6:	f04c 0c01 	orreq.w	ip, ip, #1
 800d9da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d9de:	42ab      	cmp	r3, r5
 800d9e0:	bf08      	it	eq
 800d9e2:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9e6:	680d      	ldr	r5, [r1, #0]
 800d9e8:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ea:	4d14      	ldr	r5, [pc, #80]	; (800da3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800d9ec:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ee:	42ab      	cmp	r3, r5
 800d9f0:	bf14      	ite	ne
 800d9f2:	4660      	movne	r0, ip
 800d9f4:	f04c 0001 	orreq.w	r0, ip, #1
 800d9f8:	b960      	cbnz	r0, 800da14 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800d9fa:	4811      	ldr	r0, [pc, #68]	; (800da40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d9fc:	4283      	cmp	r3, r0
 800d9fe:	d009      	beq.n	800da14 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800da00:	e00d      	b.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da02:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da04:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da08:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da0a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800da0c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da10:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800da12:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da14:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da16:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da1a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da1c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800da1e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800da20:	2101      	movs	r1, #1

  return HAL_OK;
 800da22:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800da24:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800da28:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800da2c:	bc30      	pop	{r4, r5}
 800da2e:	4770      	bx	lr
  __HAL_LOCK(htim);
 800da30:	2002      	movs	r0, #2
}
 800da32:	4770      	bx	lr
 800da34:	40010000 	.word	0x40010000
 800da38:	40000400 	.word	0x40000400
 800da3c:	40001800 	.word	0x40001800
 800da40:	40014000 	.word	0x40014000

0800da44 <HAL_TIMEx_CommutCallback>:
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop

0800da48 <HAL_TIMEx_BreakCallback>:
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop

0800da4c <HAL_TIMEx_Break2Callback>:
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop

0800da50 <HAL_UART_TxCpltCallback>:
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop

0800da54 <HAL_UART_ErrorCallback>:
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop

0800da58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da58:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da62:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da66:	f7ff fff5 	bl	800da54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da6a:	bd08      	pop	{r3, pc}

0800da6c <HAL_UARTEx_RxEventCallback>:
}
 800da6c:	4770      	bx	lr
 800da6e:	bf00      	nop

0800da70 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da70:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da72:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da76:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800da78:	ea12 0f0c 	tst.w	r2, ip
{
 800da7c:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da7e:	681d      	ldr	r5, [r3, #0]
{
 800da80:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da82:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800da84:	f000 8121 	beq.w	800dcca <HAL_UART_IRQHandler+0x25a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da88:	4eb1      	ldr	r6, [pc, #708]	; (800dd50 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da8a:	48b2      	ldr	r0, [pc, #712]	; (800dd54 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da8c:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da90:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da92:	ea5c 0600 	orrs.w	r6, ip, r0
 800da96:	f040 8089 	bne.w	800dbac <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da9a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800da9c:	2801      	cmp	r0, #1
 800da9e:	d022      	beq.n	800dae6 <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800daa0:	02d0      	lsls	r0, r2, #11
 800daa2:	d502      	bpl.n	800daaa <HAL_UART_IRQHandler+0x3a>
 800daa4:	024e      	lsls	r6, r1, #9
 800daa6:	f100 8139 	bmi.w	800dd1c <HAL_UART_IRQHandler+0x2ac>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800daaa:	0610      	lsls	r0, r2, #24
 800daac:	d506      	bpl.n	800dabc <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800daae:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dab2:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dab6:	4301      	orrs	r1, r0
 800dab8:	f040 8128 	bne.w	800dd0c <HAL_UART_IRQHandler+0x29c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dabc:	0651      	lsls	r1, r2, #25
 800dabe:	d567      	bpl.n	800db90 <HAL_UART_IRQHandler+0x120>
 800dac0:	066e      	lsls	r6, r5, #25
 800dac2:	d565      	bpl.n	800db90 <HAL_UART_IRQHandler+0x120>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dacc:	e843 2100 	strex	r1, r2, [r3]
 800dad0:	2900      	cmp	r1, #0
 800dad2:	d1f7      	bne.n	800dac4 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dad4:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dad6:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dad8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800dada:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
 800dade:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800dae0:	f7ff ffb6 	bl	800da50 <HAL_UART_TxCpltCallback>
}
 800dae4:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dae6:	06d0      	lsls	r0, r2, #27
 800dae8:	d5da      	bpl.n	800daa0 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800daea:	06ee      	lsls	r6, r5, #27
 800daec:	d5d8      	bpl.n	800daa0 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800daee:	2210      	movs	r2, #16
 800daf0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf2:	689a      	ldr	r2, [r3, #8]
 800daf4:	0655      	lsls	r5, r2, #25
 800daf6:	f140 813c 	bpl.w	800dd72 <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dafa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dafe:	6801      	ldr	r1, [r0, #0]
 800db00:	684a      	ldr	r2, [r1, #4]
 800db02:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800db04:	2a00      	cmp	r2, #0
 800db06:	d0ed      	beq.n	800dae4 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db08:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800db0c:	4291      	cmp	r1, r2
 800db0e:	d9e9      	bls.n	800dae4 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
 800db10:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db14:	69c2      	ldr	r2, [r0, #28]
 800db16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800db1a:	d02f      	beq.n	800db7c <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db24:	e843 2100 	strex	r1, r2, [r3]
 800db28:	2900      	cmp	r1, #0
 800db2a:	d1f7      	bne.n	800db1c <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2c:	f103 0208 	add.w	r2, r3, #8
 800db30:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db34:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db38:	f103 0508 	add.w	r5, r3, #8
 800db3c:	e845 2100 	strex	r1, r2, [r5]
 800db40:	2900      	cmp	r1, #0
 800db42:	d1f3      	bne.n	800db2c <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	f103 0208 	add.w	r2, r3, #8
 800db48:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db50:	f103 0508 	add.w	r5, r3, #8
 800db54:	e845 2100 	strex	r1, r2, [r5]
 800db58:	2900      	cmp	r1, #0
 800db5a:	d1f3      	bne.n	800db44 <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
 800db5c:	2220      	movs	r2, #32
 800db5e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db62:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db64:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db68:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6c:	e843 2100 	strex	r1, r2, [r3]
 800db70:	2900      	cmp	r1, #0
 800db72:	d1f7      	bne.n	800db64 <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db74:	f7fb fa22 	bl	8008fbc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db78:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db7c:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db7e:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db80:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db82:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800db86:	1ac9      	subs	r1, r1, r3
 800db88:	b289      	uxth	r1, r1
 800db8a:	f7ff ff6f 	bl	800da6c <HAL_UARTEx_RxEventCallback>
}
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800db90:	0210      	lsls	r0, r2, #8
 800db92:	d502      	bpl.n	800db9a <HAL_UART_IRQHandler+0x12a>
 800db94:	0069      	lsls	r1, r5, #1
 800db96:	f100 80e7 	bmi.w	800dd68 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800db9a:	01d3      	lsls	r3, r2, #7
 800db9c:	d5a2      	bpl.n	800dae4 <HAL_UART_IRQHandler+0x74>
 800db9e:	2d00      	cmp	r5, #0
 800dba0:	daa0      	bge.n	800dae4 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dba2:	4620      	mov	r0, r4
}
 800dba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dba8:	f000 bd7a 	b.w	800e6a0 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dbac:	07d6      	lsls	r6, r2, #31
 800dbae:	d509      	bpl.n	800dbc4 <HAL_UART_IRQHandler+0x154>
 800dbb0:	05ee      	lsls	r6, r5, #23
 800dbb2:	d507      	bpl.n	800dbc4 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dbb4:	2601      	movs	r6, #1
 800dbb6:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dbb8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800dbbc:	f046 0601 	orr.w	r6, r6, #1
 800dbc0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbc4:	0796      	lsls	r6, r2, #30
 800dbc6:	f140 8092 	bpl.w	800dcee <HAL_UART_IRQHandler+0x27e>
 800dbca:	07ce      	lsls	r6, r1, #31
 800dbcc:	d50a      	bpl.n	800dbe4 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dbce:	2602      	movs	r6, #2
 800dbd0:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbd2:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800dbd6:	f046 0604 	orr.w	r6, r6, #4
 800dbda:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbde:	0756      	lsls	r6, r2, #29
 800dbe0:	f100 808b 	bmi.w	800dcfa <HAL_UART_IRQHandler+0x28a>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dbe4:	0716      	lsls	r6, r2, #28
 800dbe6:	d50b      	bpl.n	800dc00 <HAL_UART_IRQHandler+0x190>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dbe8:	f005 0620 	and.w	r6, r5, #32
 800dbec:	4330      	orrs	r0, r6
 800dbee:	d007      	beq.n	800dc00 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbf0:	2008      	movs	r0, #8
 800dbf2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbf4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dbf8:	f040 0008 	orr.w	r0, r0, #8
 800dbfc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dc00:	0516      	lsls	r6, r2, #20
 800dc02:	d50a      	bpl.n	800dc1a <HAL_UART_IRQHandler+0x1aa>
 800dc04:	0168      	lsls	r0, r5, #5
 800dc06:	d508      	bpl.n	800dc1a <HAL_UART_IRQHandler+0x1aa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dc0c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dc0e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dc12:	f040 0020 	orr.w	r0, r0, #32
 800dc16:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc1a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f43f af60 	beq.w	800dae4 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc24:	0696      	lsls	r6, r2, #26
 800dc26:	d50b      	bpl.n	800dc40 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc28:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc2c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800dc30:	ea55 0201 	orrs.w	r2, r5, r1
 800dc34:	d004      	beq.n	800dc40 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
 800dc36:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800dc38:	b112      	cbz	r2, 800dc40 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc3e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800dc40:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc44:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc46:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc4a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800dc4e:	4315      	orrs	r5, r2
 800dc50:	f000 80c5 	beq.w	800ddde <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc54:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc5c:	e843 2100 	strex	r1, r2, [r3]
 800dc60:	2900      	cmp	r1, #0
 800dc62:	d1f7      	bne.n	800dc54 <HAL_UART_IRQHandler+0x1e4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc64:	483c      	ldr	r0, [pc, #240]	; (800dd58 <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc66:	f103 0208 	add.w	r2, r3, #8
 800dc6a:	e852 2f00 	ldrex	r2, [r2]
 800dc6e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc70:	f103 0508 	add.w	r5, r3, #8
 800dc74:	e845 2100 	strex	r1, r2, [r5]
 800dc78:	2900      	cmp	r1, #0
 800dc7a:	d1f4      	bne.n	800dc66 <HAL_UART_IRQHandler+0x1f6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800dc7e:	2a01      	cmp	r2, #1
 800dc80:	d054      	beq.n	800dd2c <HAL_UART_IRQHandler+0x2bc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc82:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800dc84:	2120      	movs	r1, #32
 800dc86:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc8a:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc8c:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800dc8e:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc90:	064d      	lsls	r5, r1, #25
 800dc92:	d565      	bpl.n	800dd60 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc94:	f103 0208 	add.w	r2, r3, #8
 800dc98:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca0:	f103 0008 	add.w	r0, r3, #8
 800dca4:	e840 2100 	strex	r1, r2, [r0]
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d1f3      	bne.n	800dc94 <HAL_UART_IRQHandler+0x224>
          if (huart->hdmarx != NULL)
 800dcac:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d055      	beq.n	800dd60 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dcb4:	4b29      	ldr	r3, [pc, #164]	; (800dd5c <HAL_UART_IRQHandler+0x2ec>)
 800dcb6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcb8:	f7fb faf8 	bl	80092ac <HAL_DMA_Abort_IT>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	f43f af11 	beq.w	800dae4 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcc2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800dcc6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dcc8:	e00e      	b.n	800dce8 <HAL_UART_IRQHandler+0x278>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dcca:	0696      	lsls	r6, r2, #26
 800dccc:	f57f aee5 	bpl.w	800da9a <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dcd0:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dcd4:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 800dcd8:	ea56 060c 	orrs.w	r6, r6, ip
 800dcdc:	f43f aedd 	beq.w	800da9a <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800dce0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f43f aefe 	beq.w	800dae4 <HAL_UART_IRQHandler+0x74>
}
 800dce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcec:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dcee:	0756      	lsls	r6, r2, #29
 800dcf0:	f57f af78 	bpl.w	800dbe4 <HAL_UART_IRQHandler+0x174>
 800dcf4:	07ce      	lsls	r6, r1, #31
 800dcf6:	f57f af75 	bpl.w	800dbe4 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dcfa:	2604      	movs	r6, #4
 800dcfc:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dcfe:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800dd02:	f046 0602 	orr.w	r6, r6, #2
 800dd06:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800dd0a:	e76b      	b.n	800dbe4 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
 800dd0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f43f aee8 	beq.w	800dae4 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 800dd14:	4620      	mov	r0, r4
}
 800dd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800dd1a:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800dd20:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dd22:	621a      	str	r2, [r3, #32]
}
 800dd24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800dd28:	f000 bcb8 	b.w	800e69c <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd30:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd34:	e843 2100 	strex	r1, r2, [r3]
 800dd38:	2900      	cmp	r1, #0
 800dd3a:	d0a2      	beq.n	800dc82 <HAL_UART_IRQHandler+0x212>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3c:	e853 2f00 	ldrex	r2, [r3]
 800dd40:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd44:	e843 2100 	strex	r1, r2, [r3]
 800dd48:	2900      	cmp	r1, #0
 800dd4a:	d1ef      	bne.n	800dd2c <HAL_UART_IRQHandler+0x2bc>
 800dd4c:	e799      	b.n	800dc82 <HAL_UART_IRQHandler+0x212>
 800dd4e:	bf00      	nop
 800dd50:	04000120 	.word	0x04000120
 800dd54:	10000001 	.word	0x10000001
 800dd58:	effffffe 	.word	0xeffffffe
 800dd5c:	0800da59 	.word	0x0800da59
            HAL_UART_ErrorCallback(huart);
 800dd60:	4620      	mov	r0, r4
 800dd62:	f7ff fe77 	bl	800da54 <HAL_UART_ErrorCallback>
}
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd68:	4620      	mov	r0, r4
}
 800dd6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd6e:	f000 bc99 	b.w	800e6a4 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd72:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 800dd76:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800dd7a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd7e:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 800dd80:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd82:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800dd84:	2a00      	cmp	r2, #0
 800dd86:	f43f aead 	beq.w	800dae4 <HAL_UART_IRQHandler+0x74>
 800dd8a:	2900      	cmp	r1, #0
 800dd8c:	f43f aeaa 	beq.w	800dae4 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd90:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd98:	e843 2000 	strex	r0, r2, [r3]
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d1f7      	bne.n	800dd90 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dda0:	4d12      	ldr	r5, [pc, #72]	; (800ddec <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda2:	f103 0208 	add.w	r2, r3, #8
 800dda6:	e852 2f00 	ldrex	r2, [r2]
 800ddaa:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddac:	f103 0608 	add.w	r6, r3, #8
 800ddb0:	e846 2000 	strex	r0, r2, [r6]
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d1f4      	bne.n	800dda2 <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
 800ddb8:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ddba:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ddbc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddc0:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddc6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddca:	e843 2000 	strex	r0, r2, [r3]
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d1f7      	bne.n	800ddc2 <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ddd2:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddd4:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ddd6:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ddd8:	f7ff fe48 	bl	800da6c <HAL_UARTEx_RxEventCallback>
}
 800dddc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800ddde:	4620      	mov	r0, r4
 800dde0:	f7ff fe38 	bl	800da54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800dde8:	bd70      	pop	{r4, r5, r6, pc}
 800ddea:	bf00      	nop
 800ddec:	effffffe 	.word	0xeffffffe

0800ddf0 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddf0:	6901      	ldr	r1, [r0, #16]
 800ddf2:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800ddf4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddf6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddf8:	49c0      	ldr	r1, [pc, #768]	; (800e0fc <UART_SetConfig+0x30c>)
{
 800ddfa:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddfc:	6945      	ldr	r5, [r0, #20]
{
 800ddfe:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de00:	69c0      	ldr	r0, [r0, #28]
{
 800de02:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de04:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de06:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de08:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de0a:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de0c:	4dbc      	ldr	r5, [pc, #752]	; (800e100 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de0e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de10:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de12:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800de14:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de16:	685a      	ldr	r2, [r3, #4]
 800de18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800de1c:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800de20:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de22:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800de24:	f000 80e0 	beq.w	800dfe8 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 800de28:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de2a:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800de2c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de2e:	4ab5      	ldr	r2, [pc, #724]	; (800e104 <UART_SetConfig+0x314>)
 800de30:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de32:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de34:	4311      	orrs	r1, r2
 800de36:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de3a:	f022 020f 	bic.w	r2, r2, #15
 800de3e:	432a      	orrs	r2, r5
 800de40:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de42:	4ab1      	ldr	r2, [pc, #708]	; (800e108 <UART_SetConfig+0x318>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d023      	beq.n	800de90 <UART_SetConfig+0xa0>
 800de48:	4ab0      	ldr	r2, [pc, #704]	; (800e10c <UART_SetConfig+0x31c>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d076      	beq.n	800df3c <UART_SetConfig+0x14c>
 800de4e:	4ab0      	ldr	r2, [pc, #704]	; (800e110 <UART_SetConfig+0x320>)
 800de50:	4293      	cmp	r3, r2
 800de52:	f000 818f 	beq.w	800e174 <UART_SetConfig+0x384>
 800de56:	4aaf      	ldr	r2, [pc, #700]	; (800e114 <UART_SetConfig+0x324>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	f000 81e1 	beq.w	800e220 <UART_SetConfig+0x430>
 800de5e:	4aae      	ldr	r2, [pc, #696]	; (800e118 <UART_SetConfig+0x328>)
 800de60:	4293      	cmp	r3, r2
 800de62:	f000 8121 	beq.w	800e0a8 <UART_SetConfig+0x2b8>
 800de66:	4aad      	ldr	r2, [pc, #692]	; (800e11c <UART_SetConfig+0x32c>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	f000 81e3 	beq.w	800e234 <UART_SetConfig+0x444>
 800de6e:	4aac      	ldr	r2, [pc, #688]	; (800e120 <UART_SetConfig+0x330>)
 800de70:	4293      	cmp	r3, r2
 800de72:	f000 8234 	beq.w	800e2de <UART_SetConfig+0x4ee>
 800de76:	4aab      	ldr	r2, [pc, #684]	; (800e124 <UART_SetConfig+0x334>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	f000 81e7 	beq.w	800e24c <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
 800de7e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800de80:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800de82:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800de86:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800de88:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800de8a:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800de8c:	b007      	add	sp, #28
 800de8e:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de90:	4ba5      	ldr	r3, [pc, #660]	; (800e128 <UART_SetConfig+0x338>)
 800de92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de98:	2b28      	cmp	r3, #40	; 0x28
 800de9a:	d8f0      	bhi.n	800de7e <UART_SetConfig+0x8e>
 800de9c:	4aa3      	ldr	r2, [pc, #652]	; (800e12c <UART_SetConfig+0x33c>)
 800de9e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dea0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800dea4:	d055      	beq.n	800df52 <UART_SetConfig+0x162>
    switch (clocksource)
 800dea6:	2b20      	cmp	r3, #32
 800dea8:	f200 814a 	bhi.w	800e140 <UART_SetConfig+0x350>
 800deac:	2b20      	cmp	r3, #32
 800deae:	d8e6      	bhi.n	800de7e <UART_SetConfig+0x8e>
 800deb0:	a201      	add	r2, pc, #4	; (adr r2, 800deb8 <UART_SetConfig+0xc8>)
 800deb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb6:	bf00      	nop
 800deb8:	0800e0f7 	.word	0x0800e0f7
 800debc:	0800e0f1 	.word	0x0800e0f1
 800dec0:	0800de7f 	.word	0x0800de7f
 800dec4:	0800de7f 	.word	0x0800de7f
 800dec8:	0800e0e1 	.word	0x0800e0e1
 800decc:	0800de7f 	.word	0x0800de7f
 800ded0:	0800de7f 	.word	0x0800de7f
 800ded4:	0800de7f 	.word	0x0800de7f
 800ded8:	0800e0d3 	.word	0x0800e0d3
 800dedc:	0800de7f 	.word	0x0800de7f
 800dee0:	0800de7f 	.word	0x0800de7f
 800dee4:	0800de7f 	.word	0x0800de7f
 800dee8:	0800de7f 	.word	0x0800de7f
 800deec:	0800de7f 	.word	0x0800de7f
 800def0:	0800de7f 	.word	0x0800de7f
 800def4:	0800de7f 	.word	0x0800de7f
 800def8:	0800e0bd 	.word	0x0800e0bd
 800defc:	0800de7f 	.word	0x0800de7f
 800df00:	0800de7f 	.word	0x0800de7f
 800df04:	0800de7f 	.word	0x0800de7f
 800df08:	0800de7f 	.word	0x0800de7f
 800df0c:	0800de7f 	.word	0x0800de7f
 800df10:	0800de7f 	.word	0x0800de7f
 800df14:	0800de7f 	.word	0x0800de7f
 800df18:	0800de7f 	.word	0x0800de7f
 800df1c:	0800de7f 	.word	0x0800de7f
 800df20:	0800de7f 	.word	0x0800de7f
 800df24:	0800de7f 	.word	0x0800de7f
 800df28:	0800de7f 	.word	0x0800de7f
 800df2c:	0800de7f 	.word	0x0800de7f
 800df30:	0800de7f 	.word	0x0800de7f
 800df34:	0800de7f 	.word	0x0800de7f
 800df38:	0800e261 	.word	0x0800e261
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df3c:	4b7a      	ldr	r3, [pc, #488]	; (800e128 <UART_SetConfig+0x338>)
 800df3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df40:	f003 0307 	and.w	r3, r3, #7
 800df44:	2b05      	cmp	r3, #5
 800df46:	d89a      	bhi.n	800de7e <UART_SetConfig+0x8e>
 800df48:	4a79      	ldr	r2, [pc, #484]	; (800e130 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800df4e:	5cd3      	ldrb	r3, [r2, r3]
 800df50:	d1a9      	bne.n	800dea6 <UART_SetConfig+0xb6>
    switch (clocksource)
 800df52:	2b20      	cmp	r3, #32
 800df54:	f200 8145 	bhi.w	800e1e2 <UART_SetConfig+0x3f2>
 800df58:	2b20      	cmp	r3, #32
 800df5a:	d890      	bhi.n	800de7e <UART_SetConfig+0x8e>
 800df5c:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <UART_SetConfig+0x174>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800e2cb 	.word	0x0800e2cb
 800df68:	0800e2c5 	.word	0x0800e2c5
 800df6c:	0800de7f 	.word	0x0800de7f
 800df70:	0800de7f 	.word	0x0800de7f
 800df74:	0800e2d1 	.word	0x0800e2d1
 800df78:	0800de7f 	.word	0x0800de7f
 800df7c:	0800de7f 	.word	0x0800de7f
 800df80:	0800de7f 	.word	0x0800de7f
 800df84:	0800e2b3 	.word	0x0800e2b3
 800df88:	0800de7f 	.word	0x0800de7f
 800df8c:	0800de7f 	.word	0x0800de7f
 800df90:	0800de7f 	.word	0x0800de7f
 800df94:	0800de7f 	.word	0x0800de7f
 800df98:	0800de7f 	.word	0x0800de7f
 800df9c:	0800de7f 	.word	0x0800de7f
 800dfa0:	0800de7f 	.word	0x0800de7f
 800dfa4:	0800e29f 	.word	0x0800e29f
 800dfa8:	0800de7f 	.word	0x0800de7f
 800dfac:	0800de7f 	.word	0x0800de7f
 800dfb0:	0800de7f 	.word	0x0800de7f
 800dfb4:	0800de7f 	.word	0x0800de7f
 800dfb8:	0800de7f 	.word	0x0800de7f
 800dfbc:	0800de7f 	.word	0x0800de7f
 800dfc0:	0800de7f 	.word	0x0800de7f
 800dfc4:	0800de7f 	.word	0x0800de7f
 800dfc8:	0800de7f 	.word	0x0800de7f
 800dfcc:	0800de7f 	.word	0x0800de7f
 800dfd0:	0800de7f 	.word	0x0800de7f
 800dfd4:	0800de7f 	.word	0x0800de7f
 800dfd8:	0800de7f 	.word	0x0800de7f
 800dfdc:	0800de7f 	.word	0x0800de7f
 800dfe0:	0800de7f 	.word	0x0800de7f
 800dfe4:	0800e2db 	.word	0x0800e2db
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dfe8:	6898      	ldr	r0, [r3, #8]
 800dfea:	4a46      	ldr	r2, [pc, #280]	; (800e104 <UART_SetConfig+0x314>)
 800dfec:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfee:	484e      	ldr	r0, [pc, #312]	; (800e128 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dff0:	430a      	orrs	r2, r1
 800dff2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dff8:	f022 020f 	bic.w	r2, r2, #15
 800dffc:	430a      	orrs	r2, r1
 800dffe:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e000:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e002:	f003 0307 	and.w	r3, r3, #7
 800e006:	2b05      	cmp	r3, #5
 800e008:	f63f af39 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e00c:	4a49      	ldr	r2, [pc, #292]	; (800e134 <UART_SetConfig+0x344>)
 800e00e:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 800e010:	2b20      	cmp	r3, #32
 800e012:	f200 80b9 	bhi.w	800e188 <UART_SetConfig+0x398>
 800e016:	2b01      	cmp	r3, #1
 800e018:	f67f af31 	bls.w	800de7e <UART_SetConfig+0x8e>
 800e01c:	3b02      	subs	r3, #2
 800e01e:	2b1e      	cmp	r3, #30
 800e020:	f63f af2d 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e024:	a201      	add	r2, pc, #4	; (adr r2, 800e02c <UART_SetConfig+0x23c>)
 800e026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02a:	bf00      	nop
 800e02c:	0800e295 	.word	0x0800e295
 800e030:	0800de7f 	.word	0x0800de7f
 800e034:	0800e28b 	.word	0x0800e28b
 800e038:	0800de7f 	.word	0x0800de7f
 800e03c:	0800de7f 	.word	0x0800de7f
 800e040:	0800de7f 	.word	0x0800de7f
 800e044:	0800e279 	.word	0x0800e279
 800e048:	0800de7f 	.word	0x0800de7f
 800e04c:	0800de7f 	.word	0x0800de7f
 800e050:	0800de7f 	.word	0x0800de7f
 800e054:	0800de7f 	.word	0x0800de7f
 800e058:	0800de7f 	.word	0x0800de7f
 800e05c:	0800de7f 	.word	0x0800de7f
 800e060:	0800de7f 	.word	0x0800de7f
 800e064:	0800e265 	.word	0x0800e265
 800e068:	0800de7f 	.word	0x0800de7f
 800e06c:	0800de7f 	.word	0x0800de7f
 800e070:	0800de7f 	.word	0x0800de7f
 800e074:	0800de7f 	.word	0x0800de7f
 800e078:	0800de7f 	.word	0x0800de7f
 800e07c:	0800de7f 	.word	0x0800de7f
 800e080:	0800de7f 	.word	0x0800de7f
 800e084:	0800de7f 	.word	0x0800de7f
 800e088:	0800de7f 	.word	0x0800de7f
 800e08c:	0800de7f 	.word	0x0800de7f
 800e090:	0800de7f 	.word	0x0800de7f
 800e094:	0800de7f 	.word	0x0800de7f
 800e098:	0800de7f 	.word	0x0800de7f
 800e09c:	0800de7f 	.word	0x0800de7f
 800e0a0:	0800de7f 	.word	0x0800de7f
 800e0a4:	0800e29b 	.word	0x0800e29b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e0a8:	4b1f      	ldr	r3, [pc, #124]	; (800e128 <UART_SetConfig+0x338>)
 800e0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ac:	f003 0307 	and.w	r3, r3, #7
 800e0b0:	2b05      	cmp	r3, #5
 800e0b2:	f63f aee4 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e0b6:	4a20      	ldr	r2, [pc, #128]	; (800e138 <UART_SetConfig+0x348>)
 800e0b8:	5cd3      	ldrb	r3, [r2, r3]
 800e0ba:	e6f1      	b.n	800dea0 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0bc:	4b1a      	ldr	r3, [pc, #104]	; (800e128 <UART_SetConfig+0x338>)
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	0692      	lsls	r2, r2, #26
 800e0c2:	f140 80c1 	bpl.w	800e248 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	481c      	ldr	r0, [pc, #112]	; (800e13c <UART_SetConfig+0x34c>)
 800e0ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e0ce:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e0d0:	e03b      	b.n	800e14a <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0d2:	a803      	add	r0, sp, #12
 800e0d4:	f7fe fd02 	bl	800cadc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0d8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e0da:	b938      	cbnz	r0, 800e0ec <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
 800e0dc:	2000      	movs	r0, #0
 800e0de:	e6cf      	b.n	800de80 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0e0:	4668      	mov	r0, sp
 800e0e2:	f7fe fc4f 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0e6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d0f7      	beq.n	800e0dc <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e0ee:	e02c      	b.n	800e14a <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0f0:	f7fd fcfe 	bl	800baf0 <HAL_RCC_GetPCLK2Freq>
        break;
 800e0f4:	e7f1      	b.n	800e0da <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0f6:	f7fd fcb3 	bl	800ba60 <HAL_RCC_GetPCLK1Freq>
        break;
 800e0fa:	e7ee      	b.n	800e0da <UART_SetConfig+0x2ea>
 800e0fc:	cfff69f3 	.word	0xcfff69f3
 800e100:	58000c00 	.word	0x58000c00
 800e104:	11fff4ff 	.word	0x11fff4ff
 800e108:	40011000 	.word	0x40011000
 800e10c:	40004400 	.word	0x40004400
 800e110:	40004800 	.word	0x40004800
 800e114:	40004c00 	.word	0x40004c00
 800e118:	40005000 	.word	0x40005000
 800e11c:	40011400 	.word	0x40011400
 800e120:	40007800 	.word	0x40007800
 800e124:	40007c00 	.word	0x40007c00
 800e128:	58024400 	.word	0x58024400
 800e12c:	0801dd2c 	.word	0x0801dd2c
 800e130:	0801dd58 	.word	0x0801dd58
 800e134:	0801dd60 	.word	0x0801dd60
 800e138:	0801dd58 	.word	0x0801dd58
 800e13c:	03d09000 	.word	0x03d09000
    switch (clocksource)
 800e140:	2b40      	cmp	r3, #64	; 0x40
 800e142:	f47f ae9c 	bne.w	800de7e <UART_SetConfig+0x8e>
 800e146:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e14a:	4b6c      	ldr	r3, [pc, #432]	; (800e2fc <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e14c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e150:	6862      	ldr	r2, [r4, #4]
 800e152:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e156:	fbb0 f3f3 	udiv	r3, r0, r3
 800e15a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e15e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e162:	f1a3 0210 	sub.w	r2, r3, #16
 800e166:	428a      	cmp	r2, r1
 800e168:	f63f ae89 	bhi.w	800de7e <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e16c:	6822      	ldr	r2, [r4, #0]
 800e16e:	2000      	movs	r0, #0
 800e170:	60d3      	str	r3, [r2, #12]
 800e172:	e685      	b.n	800de80 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e174:	4b62      	ldr	r3, [pc, #392]	; (800e300 <UART_SetConfig+0x510>)
 800e176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e178:	f003 0307 	and.w	r3, r3, #7
 800e17c:	2b05      	cmp	r3, #5
 800e17e:	f63f ae7e 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e182:	4a60      	ldr	r2, [pc, #384]	; (800e304 <UART_SetConfig+0x514>)
 800e184:	5cd3      	ldrb	r3, [r2, r3]
 800e186:	e68b      	b.n	800dea0 <UART_SetConfig+0xb0>
    switch (clocksource)
 800e188:	2b40      	cmp	r3, #64	; 0x40
 800e18a:	f47f ae78 	bne.w	800de7e <UART_SetConfig+0x8e>
 800e18e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e192:	4b5a      	ldr	r3, [pc, #360]	; (800e2fc <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e194:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e196:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e19a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e19e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1a2:	4299      	cmp	r1, r3
 800e1a4:	f63f ae6b 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e1a8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800e1ac:	f63f ae67 	bhi.w	800de7e <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	f7f2 f94c 	bl	8000450 <__aeabi_uldivmod>
 800e1b8:	462a      	mov	r2, r5
 800e1ba:	0209      	lsls	r1, r1, #8
 800e1bc:	0203      	lsls	r3, r0, #8
 800e1be:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800e1c2:	0868      	lsrs	r0, r5, #1
 800e1c4:	1818      	adds	r0, r3, r0
 800e1c6:	f04f 0300 	mov.w	r3, #0
 800e1ca:	f141 0100 	adc.w	r1, r1, #0
 800e1ce:	f7f2 f93f 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1d2:	4a4d      	ldr	r2, [pc, #308]	; (800e308 <UART_SetConfig+0x518>)
 800e1d4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1d8:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1da:	4291      	cmp	r1, r2
 800e1dc:	f63f ae4f 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e1e0:	e7c4      	b.n	800e16c <UART_SetConfig+0x37c>
    switch (clocksource)
 800e1e2:	2b40      	cmp	r3, #64	; 0x40
 800e1e4:	f47f ae4b 	bne.w	800de7e <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1e8:	4b44      	ldr	r3, [pc, #272]	; (800e2fc <UART_SetConfig+0x50c>)
 800e1ea:	6862      	ldr	r2, [r4, #4]
 800e1ec:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800e1f0:	0853      	lsrs	r3, r2, #1
 800e1f2:	fbb0 f0f1 	udiv	r0, r0, r1
 800e1f6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e1fa:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1fe:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e202:	f1a0 0210 	sub.w	r2, r0, #16
 800e206:	429a      	cmp	r2, r3
 800e208:	f63f ae39 	bhi.w	800de7e <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e20c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e210:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800e214:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e216:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800e218:	4303      	orrs	r3, r0
 800e21a:	2000      	movs	r0, #0
 800e21c:	60d3      	str	r3, [r2, #12]
 800e21e:	e62f      	b.n	800de80 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e220:	4b37      	ldr	r3, [pc, #220]	; (800e300 <UART_SetConfig+0x510>)
 800e222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e224:	f003 0307 	and.w	r3, r3, #7
 800e228:	2b05      	cmp	r3, #5
 800e22a:	f63f ae28 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e22e:	4a37      	ldr	r2, [pc, #220]	; (800e30c <UART_SetConfig+0x51c>)
 800e230:	5cd3      	ldrb	r3, [r2, r3]
 800e232:	e635      	b.n	800dea0 <UART_SetConfig+0xb0>
 800e234:	4b32      	ldr	r3, [pc, #200]	; (800e300 <UART_SetConfig+0x510>)
 800e236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e23c:	2b28      	cmp	r3, #40	; 0x28
 800e23e:	f63f ae1e 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e242:	4a33      	ldr	r2, [pc, #204]	; (800e310 <UART_SetConfig+0x520>)
 800e244:	5cd3      	ldrb	r3, [r2, r3]
 800e246:	e62b      	b.n	800dea0 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e248:	4832      	ldr	r0, [pc, #200]	; (800e314 <UART_SetConfig+0x524>)
 800e24a:	e77e      	b.n	800e14a <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e24c:	4b2c      	ldr	r3, [pc, #176]	; (800e300 <UART_SetConfig+0x510>)
 800e24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e250:	f003 0307 	and.w	r3, r3, #7
 800e254:	2b05      	cmp	r3, #5
 800e256:	f63f ae12 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e25a:	4a2f      	ldr	r2, [pc, #188]	; (800e318 <UART_SetConfig+0x528>)
 800e25c:	5cd3      	ldrb	r3, [r2, r3]
 800e25e:	e61f      	b.n	800dea0 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 800e260:	482e      	ldr	r0, [pc, #184]	; (800e31c <UART_SetConfig+0x52c>)
 800e262:	e772      	b.n	800e14a <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e264:	4b26      	ldr	r3, [pc, #152]	; (800e300 <UART_SetConfig+0x510>)
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	0690      	lsls	r0, r2, #26
 800e26a:	d542      	bpl.n	800e2f2 <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4829      	ldr	r0, [pc, #164]	; (800e314 <UART_SetConfig+0x524>)
 800e270:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e274:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e276:	e78c      	b.n	800e192 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e278:	a803      	add	r0, sp, #12
 800e27a:	f7fe fc2f 	bl	800cadc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e27e:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e280:	2800      	cmp	r0, #0
 800e282:	f43f af2b 	beq.w	800e0dc <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e286:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e288:	e783      	b.n	800e192 <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e28a:	4668      	mov	r0, sp
 800e28c:	f7fe fb7a 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e290:	9801      	ldr	r0, [sp, #4]
        break;
 800e292:	e7f5      	b.n	800e280 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e294:	f7fe fb64 	bl	800c960 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800e298:	e7f2      	b.n	800e280 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
 800e29a:	4820      	ldr	r0, [pc, #128]	; (800e31c <UART_SetConfig+0x52c>)
 800e29c:	e779      	b.n	800e192 <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e29e:	4b18      	ldr	r3, [pc, #96]	; (800e300 <UART_SetConfig+0x510>)
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	0691      	lsls	r1, r2, #26
 800e2a4:	d527      	bpl.n	800e2f6 <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	481a      	ldr	r0, [pc, #104]	; (800e314 <UART_SetConfig+0x524>)
 800e2aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e2ae:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800e2b0:	e79a      	b.n	800e1e8 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2b2:	a803      	add	r0, sp, #12
 800e2b4:	f7fe fc12 	bl	800cadc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2b8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	f43f af0e 	beq.w	800e0dc <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e2c2:	e791      	b.n	800e1e8 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2c4:	f7fd fc14 	bl	800baf0 <HAL_RCC_GetPCLK2Freq>
        break;
 800e2c8:	e7f7      	b.n	800e2ba <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2ca:	f7fd fbc9 	bl	800ba60 <HAL_RCC_GetPCLK1Freq>
        break;
 800e2ce:	e7f4      	b.n	800e2ba <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2d0:	4668      	mov	r0, sp
 800e2d2:	f7fe fb57 	bl	800c984 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2d6:	9801      	ldr	r0, [sp, #4]
        break;
 800e2d8:	e7ef      	b.n	800e2ba <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
 800e2da:	4810      	ldr	r0, [pc, #64]	; (800e31c <UART_SetConfig+0x52c>)
 800e2dc:	e784      	b.n	800e1e8 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2de:	4b08      	ldr	r3, [pc, #32]	; (800e300 <UART_SetConfig+0x510>)
 800e2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2e2:	f003 0307 	and.w	r3, r3, #7
 800e2e6:	2b05      	cmp	r3, #5
 800e2e8:	f63f adc9 	bhi.w	800de7e <UART_SetConfig+0x8e>
 800e2ec:	4a0c      	ldr	r2, [pc, #48]	; (800e320 <UART_SetConfig+0x530>)
 800e2ee:	5cd3      	ldrb	r3, [r2, r3]
 800e2f0:	e5d6      	b.n	800dea0 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 800e2f2:	4808      	ldr	r0, [pc, #32]	; (800e314 <UART_SetConfig+0x524>)
 800e2f4:	e74d      	b.n	800e192 <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 800e2f6:	4807      	ldr	r0, [pc, #28]	; (800e314 <UART_SetConfig+0x524>)
 800e2f8:	e776      	b.n	800e1e8 <UART_SetConfig+0x3f8>
 800e2fa:	bf00      	nop
 800e2fc:	0801dd68 	.word	0x0801dd68
 800e300:	58024400 	.word	0x58024400
 800e304:	0801dd58 	.word	0x0801dd58
 800e308:	000ffcff 	.word	0x000ffcff
 800e30c:	0801dd58 	.word	0x0801dd58
 800e310:	0801dd2c 	.word	0x0801dd2c
 800e314:	03d09000 	.word	0x03d09000
 800e318:	0801dd58 	.word	0x0801dd58
 800e31c:	003d0900 	.word	0x003d0900
 800e320:	0801dd58 	.word	0x0801dd58

0800e324 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e324:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e326:	07da      	lsls	r2, r3, #31
{
 800e328:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e32a:	d506      	bpl.n	800e33a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e32c:	6801      	ldr	r1, [r0, #0]
 800e32e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800e330:	684a      	ldr	r2, [r1, #4]
 800e332:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e336:	4322      	orrs	r2, r4
 800e338:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e33a:	079c      	lsls	r4, r3, #30
 800e33c:	d506      	bpl.n	800e34c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e33e:	6801      	ldr	r1, [r0, #0]
 800e340:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800e342:	684a      	ldr	r2, [r1, #4]
 800e344:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e348:	4322      	orrs	r2, r4
 800e34a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e34c:	0759      	lsls	r1, r3, #29
 800e34e:	d506      	bpl.n	800e35e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e350:	6801      	ldr	r1, [r0, #0]
 800e352:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e354:	684a      	ldr	r2, [r1, #4]
 800e356:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e35a:	4322      	orrs	r2, r4
 800e35c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e35e:	071a      	lsls	r2, r3, #28
 800e360:	d506      	bpl.n	800e370 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e362:	6801      	ldr	r1, [r0, #0]
 800e364:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800e366:	684a      	ldr	r2, [r1, #4]
 800e368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e36c:	4322      	orrs	r2, r4
 800e36e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e370:	06dc      	lsls	r4, r3, #27
 800e372:	d506      	bpl.n	800e382 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e374:	6801      	ldr	r1, [r0, #0]
 800e376:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e378:	688a      	ldr	r2, [r1, #8]
 800e37a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e37e:	4322      	orrs	r2, r4
 800e380:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e382:	0699      	lsls	r1, r3, #26
 800e384:	d506      	bpl.n	800e394 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e386:	6801      	ldr	r1, [r0, #0]
 800e388:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800e38a:	688a      	ldr	r2, [r1, #8]
 800e38c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e390:	4322      	orrs	r2, r4
 800e392:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e394:	065a      	lsls	r2, r3, #25
 800e396:	d50a      	bpl.n	800e3ae <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e398:	6801      	ldr	r1, [r0, #0]
 800e39a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800e39c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e39e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3a2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800e3a6:	ea42 0204 	orr.w	r2, r2, r4
 800e3aa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3ac:	d00b      	beq.n	800e3c6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3ae:	061b      	lsls	r3, r3, #24
 800e3b0:	d506      	bpl.n	800e3c0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3b2:	6802      	ldr	r2, [r0, #0]
 800e3b4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e3b6:	6853      	ldr	r3, [r2, #4]
 800e3b8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e3bc:	430b      	orrs	r3, r1
 800e3be:	6053      	str	r3, [r2, #4]
}
 800e3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3c6:	684a      	ldr	r2, [r1, #4]
 800e3c8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800e3ca:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800e3ce:	4322      	orrs	r2, r4
 800e3d0:	604a      	str	r2, [r1, #4]
 800e3d2:	e7ec      	b.n	800e3ae <UART_AdvFeatureConfig+0x8a>

0800e3d4 <UART_CheckIdleState>:
{
 800e3d4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d6:	2300      	movs	r3, #0
{
 800e3d8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3da:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800e3de:	f7f8 fc15 	bl	8006c0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3e2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800e3e4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3e6:	6813      	ldr	r3, [r2, #0]
 800e3e8:	071b      	lsls	r3, r3, #28
 800e3ea:	d40e      	bmi.n	800e40a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e3ec:	6813      	ldr	r3, [r2, #0]
 800e3ee:	0759      	lsls	r1, r3, #29
 800e3f0:	d432      	bmi.n	800e458 <UART_CheckIdleState+0x84>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3f2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800e3f4:	2220      	movs	r2, #32
  return HAL_OK;
 800e3f6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800e3f8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e3fc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e400:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e404:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e406:	6723      	str	r3, [r4, #112]	; 0x70
}
 800e408:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e40a:	69d3      	ldr	r3, [r2, #28]
 800e40c:	0298      	lsls	r0, r3, #10
 800e40e:	d4ed      	bmi.n	800e3ec <UART_CheckIdleState+0x18>
 800e410:	e00c      	b.n	800e42c <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e412:	6819      	ldr	r1, [r3, #0]
 800e414:	461a      	mov	r2, r3
 800e416:	0749      	lsls	r1, r1, #29
 800e418:	d505      	bpl.n	800e426 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e41a:	69d9      	ldr	r1, [r3, #28]
 800e41c:	0708      	lsls	r0, r1, #28
 800e41e:	d44f      	bmi.n	800e4c0 <UART_CheckIdleState+0xec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e420:	69d9      	ldr	r1, [r3, #28]
 800e422:	0509      	lsls	r1, r1, #20
 800e424:	d47a      	bmi.n	800e51c <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	0298      	lsls	r0, r3, #10
 800e42a:	d4df      	bmi.n	800e3ec <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e42c:	f7f8 fbee 	bl	8006c0c <HAL_GetTick>
 800e430:	1b43      	subs	r3, r0, r5
 800e432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e436:	6823      	ldr	r3, [r4, #0]
 800e438:	d3eb      	bcc.n	800e412 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e43a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e43e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e442:	e843 2100 	strex	r1, r2, [r3]
 800e446:	2900      	cmp	r1, #0
 800e448:	d1f7      	bne.n	800e43a <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 800e44a:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e44c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800e44e:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800e452:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800e456:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e458:	69d3      	ldr	r3, [r2, #28]
 800e45a:	025b      	lsls	r3, r3, #9
 800e45c:	d4c9      	bmi.n	800e3f2 <UART_CheckIdleState+0x1e>
 800e45e:	e00d      	b.n	800e47c <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	0750      	lsls	r0, r2, #29
 800e464:	d507      	bpl.n	800e476 <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e466:	69da      	ldr	r2, [r3, #28]
 800e468:	0711      	lsls	r1, r2, #28
 800e46a:	f100 8085 	bmi.w	800e578 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e46e:	69da      	ldr	r2, [r3, #28]
 800e470:	0512      	lsls	r2, r2, #20
 800e472:	f100 80af 	bmi.w	800e5d4 <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e476:	69db      	ldr	r3, [r3, #28]
 800e478:	025b      	lsls	r3, r3, #9
 800e47a:	d4ba      	bmi.n	800e3f2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e47c:	f7f8 fbc6 	bl	8006c0c <HAL_GetTick>
 800e480:	1b43      	subs	r3, r0, r5
 800e482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e486:	6823      	ldr	r3, [r4, #0]
 800e488:	d3ea      	bcc.n	800e460 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e48e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e492:	e843 2100 	strex	r1, r2, [r3]
 800e496:	2900      	cmp	r1, #0
 800e498:	d1f7      	bne.n	800e48a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49a:	f103 0208 	add.w	r2, r3, #8
 800e49e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4a2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a6:	f103 0008 	add.w	r0, r3, #8
 800e4aa:	e840 2100 	strex	r1, r2, [r0]
 800e4ae:	2900      	cmp	r1, #0
 800e4b0:	d1f3      	bne.n	800e49a <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
 800e4b2:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800e4b4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800e4b6:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800e4ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4c0:	2208      	movs	r2, #8
 800e4c2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4cc:	e843 2100 	strex	r1, r2, [r3]
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	d1f7      	bne.n	800e4c4 <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4d4:	4856      	ldr	r0, [pc, #344]	; (800e630 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d6:	f103 0208 	add.w	r2, r3, #8
 800e4da:	e852 2f00 	ldrex	r2, [r2]
 800e4de:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e0:	f103 0508 	add.w	r5, r3, #8
 800e4e4:	e845 2100 	strex	r1, r2, [r5]
 800e4e8:	2900      	cmp	r1, #0
 800e4ea:	d1f4      	bne.n	800e4d6 <UART_CheckIdleState+0x102>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e4ee:	2a01      	cmp	r2, #1
 800e4f0:	d00b      	beq.n	800e50a <UART_CheckIdleState+0x136>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4f2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e4f4:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e4f6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e4f8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e4fc:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fe:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e500:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e504:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e508:	e797      	b.n	800e43a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e50e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	e843 2100 	strex	r1, r2, [r3]
 800e516:	2900      	cmp	r1, #0
 800e518:	d1f7      	bne.n	800e50a <UART_CheckIdleState+0x136>
 800e51a:	e7ea      	b.n	800e4f2 <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e51c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e520:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e522:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e526:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52a:	e843 2100 	strex	r1, r2, [r3]
 800e52e:	2900      	cmp	r1, #0
 800e530:	d1f7      	bne.n	800e522 <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e532:	483f      	ldr	r0, [pc, #252]	; (800e630 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e534:	f103 0208 	add.w	r2, r3, #8
 800e538:	e852 2f00 	ldrex	r2, [r2]
 800e53c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53e:	f103 0508 	add.w	r5, r3, #8
 800e542:	e845 2100 	strex	r1, r2, [r5]
 800e546:	2900      	cmp	r1, #0
 800e548:	d1f4      	bne.n	800e534 <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e54a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e54c:	2a01      	cmp	r2, #1
 800e54e:	d00a      	beq.n	800e566 <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e550:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e552:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e554:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e556:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e55a:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e55e:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e560:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e564:	e769      	b.n	800e43a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e566:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e56a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56e:	e843 2100 	strex	r1, r2, [r3]
 800e572:	2900      	cmp	r1, #0
 800e574:	d1f7      	bne.n	800e566 <UART_CheckIdleState+0x192>
 800e576:	e7eb      	b.n	800e550 <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e578:	2208      	movs	r2, #8
 800e57a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e580:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e584:	e843 2100 	strex	r1, r2, [r3]
 800e588:	2900      	cmp	r1, #0
 800e58a:	d1f7      	bne.n	800e57c <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e58c:	4828      	ldr	r0, [pc, #160]	; (800e630 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58e:	f103 0208 	add.w	r2, r3, #8
 800e592:	e852 2f00 	ldrex	r2, [r2]
 800e596:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e598:	f103 0508 	add.w	r5, r3, #8
 800e59c:	e845 2100 	strex	r1, r2, [r5]
 800e5a0:	2900      	cmp	r1, #0
 800e5a2:	d1f4      	bne.n	800e58e <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e5a6:	2a01      	cmp	r2, #1
 800e5a8:	d00b      	beq.n	800e5c2 <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5aa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e5ac:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5ae:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800e5b0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 800e5b4:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5b6:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
 800e5b8:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5bc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
 800e5c0:	e763      	b.n	800e48a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ca:	e843 2100 	strex	r1, r2, [r3]
 800e5ce:	2900      	cmp	r1, #0
 800e5d0:	d1f7      	bne.n	800e5c2 <UART_CheckIdleState+0x1ee>
 800e5d2:	e7ea      	b.n	800e5aa <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5d8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5da:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e2:	e843 2100 	strex	r1, r2, [r3]
 800e5e6:	2900      	cmp	r1, #0
 800e5e8:	d1f7      	bne.n	800e5da <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5ea:	4811      	ldr	r0, [pc, #68]	; (800e630 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ec:	f103 0208 	add.w	r2, r3, #8
 800e5f0:	e852 2f00 	ldrex	r2, [r2]
 800e5f4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f6:	f103 0508 	add.w	r5, r3, #8
 800e5fa:	e845 2100 	strex	r1, r2, [r5]
 800e5fe:	2900      	cmp	r1, #0
 800e600:	d1f4      	bne.n	800e5ec <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e602:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800e604:	2a01      	cmp	r2, #1
 800e606:	d00a      	beq.n	800e61e <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e608:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800e60a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800e60c:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e60e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800e612:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e616:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e618:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
 800e61c:	e735      	b.n	800e48a <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e622:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e626:	e843 2100 	strex	r1, r2, [r3]
 800e62a:	2900      	cmp	r1, #0
 800e62c:	d1f7      	bne.n	800e61e <UART_CheckIdleState+0x24a>
 800e62e:	e7eb      	b.n	800e608 <UART_CheckIdleState+0x234>
 800e630:	effffffe 	.word	0xeffffffe

0800e634 <HAL_UART_Init>:
  if (huart == NULL)
 800e634:	b380      	cbz	r0, 800e698 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800e636:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800e63a:	b510      	push	{r4, lr}
 800e63c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800e63e:	b333      	cbz	r3, 800e68e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800e640:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800e642:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e644:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800e646:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800e64a:	6813      	ldr	r3, [r2, #0]
 800e64c:	f023 0301 	bic.w	r3, r3, #1
 800e650:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e652:	f7ff fbcd 	bl	800ddf0 <UART_SetConfig>
 800e656:	2801      	cmp	r0, #1
 800e658:	d017      	beq.n	800e68a <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e65a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e65c:	b98b      	cbnz	r3, 800e682 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e65e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800e660:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e662:	685a      	ldr	r2, [r3, #4]
 800e664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e66a:	689a      	ldr	r2, [r3, #8]
 800e66c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e670:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	f042 0201 	orr.w	r2, r2, #1
}
 800e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800e67c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800e67e:	f7ff bea9 	b.w	800e3d4 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800e682:	4620      	mov	r0, r4
 800e684:	f7ff fe4e 	bl	800e324 <UART_AdvFeatureConfig>
 800e688:	e7e9      	b.n	800e65e <HAL_UART_Init+0x2a>
}
 800e68a:	2001      	movs	r0, #1
 800e68c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800e68e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800e692:	f7f8 f873 	bl	800677c <HAL_UART_MspInit>
 800e696:	e7d3      	b.n	800e640 <HAL_UART_Init+0xc>
}
 800e698:	2001      	movs	r0, #1
 800e69a:	4770      	bx	lr

0800e69c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop

0800e6a0 <HAL_UARTEx_RxFifoFullCallback>:
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop

0800e6a4 <HAL_UARTEx_TxFifoEmptyCallback>:
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop

0800e6a8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6a8:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e6ac:	2a01      	cmp	r2, #1
 800e6ae:	d017      	beq.n	800e6e0 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6b0:	6802      	ldr	r2, [r0, #0]
 800e6b2:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e6b4:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6b6:	2100      	movs	r1, #0
{
 800e6b8:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800e6ba:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800e6be:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6c0:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e6c2:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e6c4:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800e6c8:	f024 0401 	bic.w	r4, r4, #1
 800e6cc:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6ce:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6d0:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800e6d2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e6d4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e6d8:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e6dc:	bc30      	pop	{r4, r5}
 800e6de:	4770      	bx	lr
  __HAL_LOCK(huart);
 800e6e0:	2002      	movs	r0, #2
}
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6e4:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e6e8:	2a01      	cmp	r2, #1
 800e6ea:	d037      	beq.n	800e75c <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6ec:	6802      	ldr	r2, [r0, #0]
 800e6ee:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e6f0:	2024      	movs	r0, #36	; 0x24
{
 800e6f2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e6f4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6f8:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6fa:	6810      	ldr	r0, [r2, #0]
 800e6fc:	f020 0001 	bic.w	r0, r0, #1
 800e700:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e702:	6890      	ldr	r0, [r2, #8]
 800e704:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800e708:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e70a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e70c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e70e:	b310      	cbz	r0, 800e756 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e710:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e712:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e714:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e718:	4911      	ldr	r1, [pc, #68]	; (800e760 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e71a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e71e:	4d11      	ldr	r5, [pc, #68]	; (800e764 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e720:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e724:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e728:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e72c:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e72e:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e732:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e734:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e738:	fbb1 f1f5 	udiv	r1, r1, r5
 800e73c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e740:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e742:	2100      	movs	r1, #0
 800e744:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e748:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e74a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e74c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e750:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e754:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e756:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e758:	4608      	mov	r0, r1
 800e75a:	e7ef      	b.n	800e73c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e75c:	2002      	movs	r0, #2
}
 800e75e:	4770      	bx	lr
 800e760:	0801dd88 	.word	0x0801dd88
 800e764:	0801dd80 	.word	0x0801dd80

0800e768 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800e768:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 800e76c:	2a01      	cmp	r2, #1
 800e76e:	d037      	beq.n	800e7e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e770:	6802      	ldr	r2, [r0, #0]
 800e772:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800e774:	2024      	movs	r0, #36	; 0x24
{
 800e776:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800e778:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e77c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800e77e:	6810      	ldr	r0, [r2, #0]
 800e780:	f020 0001 	bic.w	r0, r0, #1
 800e784:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e786:	6890      	ldr	r0, [r2, #8]
 800e788:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800e78c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e78e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e790:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e792:	b310      	cbz	r0, 800e7da <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e794:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e796:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e798:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e79c:	4911      	ldr	r1, [pc, #68]	; (800e7e4 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e79e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7a2:	4d11      	ldr	r5, [pc, #68]	; (800e7e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7a4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7a8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800e7ac:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7b0:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800e7b2:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7b6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e7b8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e7bc:	fbb1 f1f5 	udiv	r1, r1, r5
 800e7c0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 800e7c4:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7cc:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800e7ce:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800e7d0:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800e7d4:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 800e7d8:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800e7da:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800e7dc:	4608      	mov	r0, r1
 800e7de:	e7ef      	b.n	800e7c0 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800e7e0:	2002      	movs	r0, #2
}
 800e7e2:	4770      	bx	lr
 800e7e4:	0801dd88 	.word	0x0801dd88
 800e7e8:	0801dd80 	.word	0x0801dd80

0800e7ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	4684      	mov	ip, r0
 800e7f0:	b500      	push	{lr}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	f10d 0e14 	add.w	lr, sp, #20
 800e7f8:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d13e      	bne.n	800e880 <USB_CoreInit+0x94>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e802:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e804:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 800e808:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e80a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800e80e:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e810:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e812:	68c2      	ldr	r2, [r0, #12]
 800e814:	ea03 0302 	and.w	r3, r3, r2
 800e818:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e81a:	68c3      	ldr	r3, [r0, #12]
 800e81c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e820:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800e822:	d07c      	beq.n	800e91e <USB_CoreInit+0x132>
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800e824:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800e826:	4a40      	ldr	r2, [pc, #256]	; (800e928 <USB_CoreInit+0x13c>)
  __IO uint32_t count = 0U;
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	e003      	b.n	800e834 <USB_CoreInit+0x48>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e82c:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	db41      	blt.n	800e8b8 <USB_CoreInit+0xcc>
    count++;
 800e834:	9b00      	ldr	r3, [sp, #0]
 800e836:	3301      	adds	r3, #1
 800e838:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e83a:	9b00      	ldr	r3, [sp, #0]
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d9f5      	bls.n	800e82c <USB_CoreInit+0x40>
      return HAL_TIMEOUT;
 800e840:	2003      	movs	r0, #3
  if (cfg.dma_enable == 1U)
 800e842:	9b07      	ldr	r3, [sp, #28]
 800e844:	2b01      	cmp	r3, #1
 800e846:	d116      	bne.n	800e876 <USB_CoreInit+0x8a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e848:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e84c:	4b37      	ldr	r3, [pc, #220]	; (800e92c <USB_CoreInit+0x140>)
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e84e:	b292      	uxth	r2, r2
 800e850:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e854:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 800e858:	4313      	orrs	r3, r2
 800e85a:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e85e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e862:	f043 0306 	orr.w	r3, r3, #6
 800e866:	f8cc 3008 	str.w	r3, [ip, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e86a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e86e:	f043 0320 	orr.w	r3, r3, #32
 800e872:	f8cc 3008 	str.w	r3, [ip, #8]
}
 800e876:	b003      	add	sp, #12
 800e878:	f85d eb04 	ldr.w	lr, [sp], #4
 800e87c:	b004      	add	sp, #16
 800e87e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e880:	68c3      	ldr	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e882:	2100      	movs	r1, #0
    if (count > 200000U)
 800e884:	4a28      	ldr	r2, [pc, #160]	; (800e928 <USB_CoreInit+0x13c>)
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e88a:	60c3      	str	r3, [r0, #12]
  __IO uint32_t count = 0U;
 800e88c:	9101      	str	r1, [sp, #4]
 800e88e:	e003      	b.n	800e898 <USB_CoreInit+0xac>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e890:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e894:	2b00      	cmp	r3, #0
 800e896:	db2c      	blt.n	800e8f2 <USB_CoreInit+0x106>
    count++;
 800e898:	9b01      	ldr	r3, [sp, #4]
 800e89a:	3301      	adds	r3, #1
 800e89c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e89e:	9b01      	ldr	r3, [sp, #4]
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d9f5      	bls.n	800e890 <USB_CoreInit+0xa4>
      return HAL_TIMEOUT;
 800e8a4:	2003      	movs	r0, #3
    if (cfg.battery_charging_enable == 0U)
 800e8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8a8:	b9e3      	cbnz	r3, 800e8e4 <USB_CoreInit+0xf8>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e8aa:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e8ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e8b2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e8b6:	e7c4      	b.n	800e842 <USB_CoreInit+0x56>

  /* Core Soft Reset */
  count = 0U;
 800e8b8:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 800e8ba:	4a1b      	ldr	r2, [pc, #108]	; (800e928 <USB_CoreInit+0x13c>)
  count = 0U;
 800e8bc:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8be:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e8c2:	f043 0301 	orr.w	r3, r3, #1
 800e8c6:	f8cc 3010 	str.w	r3, [ip, #16]
 800e8ca:	e004      	b.n	800e8d6 <USB_CoreInit+0xea>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8cc:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e8d0:	f010 0001 	ands.w	r0, r0, #1
 800e8d4:	d0b5      	beq.n	800e842 <USB_CoreInit+0x56>
    count++;
 800e8d6:	9b00      	ldr	r3, [sp, #0]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800e8dc:	9b00      	ldr	r3, [sp, #0]
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d9f4      	bls.n	800e8cc <USB_CoreInit+0xe0>
 800e8e2:	e7ad      	b.n	800e840 <USB_CoreInit+0x54>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8e4:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800e8e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8ec:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
 800e8f0:	e7a7      	b.n	800e842 <USB_CoreInit+0x56>
  count = 0U;
 800e8f2:	2300      	movs	r3, #0
    if (count > 200000U)
 800e8f4:	4a0c      	ldr	r2, [pc, #48]	; (800e928 <USB_CoreInit+0x13c>)
  count = 0U;
 800e8f6:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8f8:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800e8fc:	f043 0301 	orr.w	r3, r3, #1
 800e900:	f8cc 3010 	str.w	r3, [ip, #16]
 800e904:	e004      	b.n	800e910 <USB_CoreInit+0x124>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e906:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800e90a:	f010 0001 	ands.w	r0, r0, #1
 800e90e:	d0ca      	beq.n	800e8a6 <USB_CoreInit+0xba>
    count++;
 800e910:	9b01      	ldr	r3, [sp, #4]
 800e912:	3301      	adds	r3, #1
 800e914:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800e916:	9b01      	ldr	r3, [sp, #4]
 800e918:	4293      	cmp	r3, r2
 800e91a:	d9f4      	bls.n	800e906 <USB_CoreInit+0x11a>
 800e91c:	e7c2      	b.n	800e8a4 <USB_CoreInit+0xb8>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e91e:	68c3      	ldr	r3, [r0, #12]
 800e920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e924:	60c3      	str	r3, [r0, #12]
 800e926:	e77d      	b.n	800e824 <USB_CoreInit+0x38>
 800e928:	00030d40 	.word	0x00030d40
 800e92c:	03ee0000 	.word	0x03ee0000

0800e930 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800e930:	2a02      	cmp	r2, #2
{
 800e932:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 800e934:	d00b      	beq.n	800e94e <USB_SetTurnaroundTime+0x1e>
 800e936:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e93a:	68d9      	ldr	r1, [r3, #12]
}
 800e93c:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e93e:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800e942:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e944:	68da      	ldr	r2, [r3, #12]
 800e946:	ea42 020c 	orr.w	r2, r2, ip
 800e94a:	60da      	str	r2, [r3, #12]
}
 800e94c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e94e:	4a23      	ldr	r2, [pc, #140]	; (800e9dc <USB_SetTurnaroundTime+0xac>)
 800e950:	4823      	ldr	r0, [pc, #140]	; (800e9e0 <USB_SetTurnaroundTime+0xb0>)
 800e952:	440a      	add	r2, r1
 800e954:	4282      	cmp	r2, r0
 800e956:	d92c      	bls.n	800e9b2 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e958:	4a22      	ldr	r2, [pc, #136]	; (800e9e4 <USB_SetTurnaroundTime+0xb4>)
 800e95a:	4823      	ldr	r0, [pc, #140]	; (800e9e8 <USB_SetTurnaroundTime+0xb8>)
 800e95c:	440a      	add	r2, r1
 800e95e:	4282      	cmp	r2, r0
 800e960:	d92a      	bls.n	800e9b8 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e962:	4a22      	ldr	r2, [pc, #136]	; (800e9ec <USB_SetTurnaroundTime+0xbc>)
 800e964:	4822      	ldr	r0, [pc, #136]	; (800e9f0 <USB_SetTurnaroundTime+0xc0>)
 800e966:	440a      	add	r2, r1
 800e968:	4282      	cmp	r2, r0
 800e96a:	d928      	bls.n	800e9be <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e96c:	4a21      	ldr	r2, [pc, #132]	; (800e9f4 <USB_SetTurnaroundTime+0xc4>)
 800e96e:	4822      	ldr	r0, [pc, #136]	; (800e9f8 <USB_SetTurnaroundTime+0xc8>)
 800e970:	440a      	add	r2, r1
 800e972:	4282      	cmp	r2, r0
 800e974:	d326      	bcc.n	800e9c4 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e976:	4a21      	ldr	r2, [pc, #132]	; (800e9fc <USB_SetTurnaroundTime+0xcc>)
 800e978:	4821      	ldr	r0, [pc, #132]	; (800ea00 <USB_SetTurnaroundTime+0xd0>)
 800e97a:	440a      	add	r2, r1
 800e97c:	4282      	cmp	r2, r0
 800e97e:	d924      	bls.n	800e9ca <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e980:	4a20      	ldr	r2, [pc, #128]	; (800ea04 <USB_SetTurnaroundTime+0xd4>)
 800e982:	4821      	ldr	r0, [pc, #132]	; (800ea08 <USB_SetTurnaroundTime+0xd8>)
 800e984:	440a      	add	r2, r1
 800e986:	4282      	cmp	r2, r0
 800e988:	d322      	bcc.n	800e9d0 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e98a:	4a20      	ldr	r2, [pc, #128]	; (800ea0c <USB_SetTurnaroundTime+0xdc>)
 800e98c:	4820      	ldr	r0, [pc, #128]	; (800ea10 <USB_SetTurnaroundTime+0xe0>)
 800e98e:	440a      	add	r2, r1
 800e990:	4282      	cmp	r2, r0
 800e992:	d3d0      	bcc.n	800e936 <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e994:	4a1f      	ldr	r2, [pc, #124]	; (800ea14 <USB_SetTurnaroundTime+0xe4>)
 800e996:	4820      	ldr	r0, [pc, #128]	; (800ea18 <USB_SetTurnaroundTime+0xe8>)
 800e998:	440a      	add	r2, r1
 800e99a:	4282      	cmp	r2, r0
 800e99c:	d31b      	bcc.n	800e9d6 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e99e:	4a1f      	ldr	r2, [pc, #124]	; (800ea1c <USB_SetTurnaroundTime+0xec>)
 800e9a0:	481f      	ldr	r0, [pc, #124]	; (800ea20 <USB_SetTurnaroundTime+0xf0>)
 800e9a2:	440a      	add	r2, r1
 800e9a4:	4282      	cmp	r2, r0
 800e9a6:	bf34      	ite	cc
 800e9a8:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 800e9ac:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 800e9b0:	e7c3      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9b2:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800e9b6:	e7c0      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9b8:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 800e9bc:	e7bd      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9be:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800e9c2:	e7ba      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9c4:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 800e9c8:	e7b7      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9ca:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800e9ce:	e7b4      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9d0:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 800e9d4:	e7b1      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9d6:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800e9da:	e7ae      	b.n	800e93a <USB_SetTurnaroundTime+0xa>
 800e9dc:	ff275340 	.word	0xff275340
 800e9e0:	000c34ff 	.word	0x000c34ff
 800e9e4:	ff1b1e40 	.word	0xff1b1e40
 800e9e8:	000f423f 	.word	0x000f423f
 800e9ec:	ff0bdc00 	.word	0xff0bdc00
 800e9f0:	00124f7f 	.word	0x00124f7f
 800e9f4:	fef98c80 	.word	0xfef98c80
 800e9f8:	0013d620 	.word	0x0013d620
 800e9fc:	fee5b660 	.word	0xfee5b660
 800ea00:	0016e35f 	.word	0x0016e35f
 800ea04:	feced300 	.word	0xfeced300
 800ea08:	001b7740 	.word	0x001b7740
 800ea0c:	feb35bc0 	.word	0xfeb35bc0
 800ea10:	002191c0 	.word	0x002191c0
 800ea14:	fe91ca00 	.word	0xfe91ca00
 800ea18:	00387520 	.word	0x00387520
 800ea1c:	fe5954e0 	.word	0xfe5954e0
 800ea20:	00419ce0 	.word	0x00419ce0

0800ea24 <USB_EnableGlobalInt>:
{
 800ea24:	4603      	mov	r3, r0
}
 800ea26:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ea28:	689a      	ldr	r2, [r3, #8]
 800ea2a:	f042 0201 	orr.w	r2, r2, #1
 800ea2e:	609a      	str	r2, [r3, #8]
}
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop

0800ea34 <USB_DisableGlobalInt>:
{
 800ea34:	4603      	mov	r3, r0
}
 800ea36:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ea38:	689a      	ldr	r2, [r3, #8]
 800ea3a:	f022 0201 	bic.w	r2, r2, #1
 800ea3e:	609a      	str	r2, [r3, #8]
}
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop

0800ea44 <USB_SetCurrentMode>:
{
 800ea44:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea46:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ea48:	2901      	cmp	r1, #1
{
 800ea4a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ea50:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800ea52:	d017      	beq.n	800ea84 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 800ea54:	b9a1      	cbnz	r1, 800ea80 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea56:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800ea58:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea5e:	60c3      	str	r3, [r0, #12]
 800ea60:	e001      	b.n	800ea66 <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ea62:	2c32      	cmp	r4, #50	; 0x32
 800ea64:	d00c      	beq.n	800ea80 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800ea66:	2001      	movs	r0, #1
      ms++;
 800ea68:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ea6a:	f7f8 f8d5 	bl	8006c18 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ea6e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ea70:	07db      	lsls	r3, r3, #31
 800ea72:	d4f6      	bmi.n	800ea62 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 800ea74:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800ea78:	fab0 f080 	clz	r0, r0
 800ea7c:	0940      	lsrs	r0, r0, #5
}
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ea80:	2001      	movs	r0, #1
}
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea84:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800ea86:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea8c:	60c3      	str	r3, [r0, #12]
 800ea8e:	e001      	b.n	800ea94 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ea90:	2c32      	cmp	r4, #50	; 0x32
 800ea92:	d0f5      	beq.n	800ea80 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 800ea94:	2001      	movs	r0, #1
      ms++;
 800ea96:	4404      	add	r4, r0
      HAL_Delay(1U);
 800ea98:	f7f8 f8be 	bl	8006c18 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800ea9c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ea9e:	07da      	lsls	r2, r3, #31
 800eaa0:	d5f6      	bpl.n	800ea90 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 800eaa2:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 800eaa6:	fab0 f080 	clz	r0, r0
 800eaaa:	0940      	lsrs	r0, r0, #5
 800eaac:	e7e7      	b.n	800ea7e <USB_SetCurrentMode+0x3a>
 800eaae:	bf00      	nop

0800eab0 <USB_DevInit>:
{
 800eab0:	b084      	sub	sp, #16
 800eab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eab6:	b083      	sub	sp, #12
 800eab8:	ac0b      	add	r4, sp, #44	; 0x2c
 800eaba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800eabc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 800eac0:	2300      	movs	r3, #0
 800eac2:	460c      	mov	r4, r1
 800eac4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800eac8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800eacc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800ead0:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800ead4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800ead8:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800eadc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
 800eae0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800eae4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 800eae8:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
 800eaec:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
 800eaf0:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800eaf4:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
 800eaf8:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
 800eafc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  if (cfg.vbus_sensing_enable == 0U)
 800eb00:	2d00      	cmp	r5, #0
 800eb02:	f040 80aa 	bne.w	800ec5a <USB_DevInit+0x1aa>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb06:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800eb0a:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
 800eb0e:	f043 0302 	orr.w	r3, r3, #2
 800eb12:	f8cc 3004 	str.w	r3, [ip, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800eb16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eb18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb1c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800eb1e:	6803      	ldr	r3, [r0, #0]
 800eb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb24:	6003      	str	r3, [r0, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eb26:	6803      	ldr	r3, [r0, #0]
 800eb28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb2c:	6003      	str	r3, [r0, #0]
  USBx_PCGCCTL = 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eb34:	f8dc 3000 	ldr.w	r3, [ip]
 800eb38:	f8cc 3000 	str.w	r3, [ip]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	f000 80b5 	beq.w	800ecae <USB_DevInit+0x1fe>
  USBx_DEVICE->DCFG |= speed;
 800eb44:	f8dc 3000 	ldr.w	r3, [ip]
 800eb48:	f043 0303 	orr.w	r3, r3, #3
 800eb4c:	f8cc 3000 	str.w	r3, [ip]
  __IO uint32_t count = 0U;
 800eb50:	2300      	movs	r3, #0
    if (count > 200000U)
 800eb52:	4a5e      	ldr	r2, [pc, #376]	; (800eccc <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	e003      	b.n	800eb60 <USB_DevInit+0xb0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb58:	6903      	ldr	r3, [r0, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f2c0 8094 	blt.w	800ec88 <USB_DevInit+0x1d8>
    count++;
 800eb60:	9b00      	ldr	r3, [sp, #0]
 800eb62:	3301      	adds	r3, #1
 800eb64:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800eb66:	9b00      	ldr	r3, [sp, #0]
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d9f5      	bls.n	800eb58 <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 800eb6c:	2101      	movs	r1, #1
  __IO uint32_t count = 0U;
 800eb6e:	2300      	movs	r3, #0
    if (count > 200000U)
 800eb70:	4a56      	ldr	r2, [pc, #344]	; (800eccc <USB_DevInit+0x21c>)
  __IO uint32_t count = 0U;
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	e002      	b.n	800eb7c <USB_DevInit+0xcc>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb76:	6903      	ldr	r3, [r0, #16]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	db75      	blt.n	800ec68 <USB_DevInit+0x1b8>
    count++;
 800eb7c:	9b01      	ldr	r3, [sp, #4]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800eb82:	9b01      	ldr	r3, [sp, #4]
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d9f6      	bls.n	800eb76 <USB_DevInit+0xc6>
    ret = HAL_ERROR;
 800eb88:	2101      	movs	r1, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f8cc 2010 	str.w	r2, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb90:	f8cc 2014 	str.w	r2, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb94:	f8cc 201c 	str.w	r2, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb98:	b1dc      	cbz	r4, 800ebd2 <USB_DevInit+0x122>
 800eb9a:	f500 6310 	add.w	r3, r0, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800eb9e:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eba2:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 800eba6:	4617      	mov	r7, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eba8:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ebac:	e007      	b.n	800ebbe <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800ebae:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebb0:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ebb2:	611f      	str	r7, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ebb4:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebb8:	3320      	adds	r3, #32
 800ebba:	4294      	cmp	r4, r2
 800ebbc:	d030      	beq.n	800ec20 <USB_DevInit+0x170>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebbe:	681e      	ldr	r6, [r3, #0]
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	daf4      	bge.n	800ebae <USB_DevInit+0xfe>
      if (i == 0U)
 800ebc4:	b112      	cbz	r2, 800ebcc <USB_DevInit+0x11c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ebc6:	f8c3 8000 	str.w	r8, [r3]
 800ebca:	e7f1      	b.n	800ebb0 <USB_DevInit+0x100>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ebcc:	f8c3 9000 	str.w	r9, [r3]
 800ebd0:	e7ee      	b.n	800ebb0 <USB_DevInit+0x100>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ebd2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 800ebd6:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ebd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebdc:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ebe0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 800ebe4:	6182      	str	r2, [r0, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ebe6:	6143      	str	r3, [r0, #20]
  if (cfg.dma_enable == 0U)
 800ebe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebea:	b91b      	cbnz	r3, 800ebf4 <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ebec:	6983      	ldr	r3, [r0, #24]
 800ebee:	f043 0310 	orr.w	r3, r3, #16
 800ebf2:	6183      	str	r3, [r0, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ebf4:	6982      	ldr	r2, [r0, #24]
 800ebf6:	4b36      	ldr	r3, [pc, #216]	; (800ecd0 <USB_DevInit+0x220>)
 800ebf8:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 800ebfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ebfc:	6183      	str	r3, [r0, #24]
  if (cfg.Sof_enable != 0U)
 800ebfe:	b11a      	cbz	r2, 800ec08 <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ec00:	6983      	ldr	r3, [r0, #24]
 800ec02:	f043 0308 	orr.w	r3, r3, #8
 800ec06:	6183      	str	r3, [r0, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800ec08:	2d01      	cmp	r5, #1
 800ec0a:	d103      	bne.n	800ec14 <USB_DevInit+0x164>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ec0c:	6982      	ldr	r2, [r0, #24]
 800ec0e:	4b31      	ldr	r3, [pc, #196]	; (800ecd4 <USB_DevInit+0x224>)
 800ec10:	4313      	orrs	r3, r2
 800ec12:	6183      	str	r3, [r0, #24]
}
 800ec14:	4608      	mov	r0, r1
 800ec16:	b003      	add	sp, #12
 800ec18:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec1c:	b004      	add	sp, #16
 800ec1e:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec20:	2200      	movs	r2, #0
 800ec22:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec26:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec2a:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec2e:	4617      	mov	r7, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec30:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 800ec34:	e007      	b.n	800ec46 <USB_DevInit+0x196>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec36:	601f      	str	r7, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec38:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec3a:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec3c:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec40:	3320      	adds	r3, #32
 800ec42:	4294      	cmp	r4, r2
 800ec44:	d0c5      	beq.n	800ebd2 <USB_DevInit+0x122>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec46:	681e      	ldr	r6, [r3, #0]
 800ec48:	2e00      	cmp	r6, #0
 800ec4a:	daf4      	bge.n	800ec36 <USB_DevInit+0x186>
      if (i == 0U)
 800ec4c:	b112      	cbz	r2, 800ec54 <USB_DevInit+0x1a4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec4e:	f8c3 8000 	str.w	r8, [r3]
 800ec52:	e7f1      	b.n	800ec38 <USB_DevInit+0x188>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec54:	f8c3 9000 	str.w	r9, [r3]
 800ec58:	e7ee      	b.n	800ec38 <USB_DevInit+0x188>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec5c:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ec64:	6383      	str	r3, [r0, #56]	; 0x38
 800ec66:	e762      	b.n	800eb2e <USB_DevInit+0x7e>
  count = 0U;
 800ec68:	2300      	movs	r3, #0
    if (count > 200000U)
 800ec6a:	4a18      	ldr	r2, [pc, #96]	; (800eccc <USB_DevInit+0x21c>)
  count = 0U;
 800ec6c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec6e:	2310      	movs	r3, #16
 800ec70:	6103      	str	r3, [r0, #16]
 800ec72:	e002      	b.n	800ec7a <USB_DevInit+0x1ca>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec74:	6903      	ldr	r3, [r0, #16]
 800ec76:	06db      	lsls	r3, r3, #27
 800ec78:	d587      	bpl.n	800eb8a <USB_DevInit+0xda>
    count++;
 800ec7a:	9b01      	ldr	r3, [sp, #4]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ec80:	9b01      	ldr	r3, [sp, #4]
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d9f6      	bls.n	800ec74 <USB_DevInit+0x1c4>
 800ec86:	e77f      	b.n	800eb88 <USB_DevInit+0xd8>
  count = 0U;
 800ec88:	2300      	movs	r3, #0
    if (count > 200000U)
 800ec8a:	4a10      	ldr	r2, [pc, #64]	; (800eccc <USB_DevInit+0x21c>)
  count = 0U;
 800ec8c:	9300      	str	r3, [sp, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ec8e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800ec92:	6103      	str	r3, [r0, #16]
 800ec94:	e004      	b.n	800eca0 <USB_DevInit+0x1f0>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec96:	6901      	ldr	r1, [r0, #16]
 800ec98:	f011 0120 	ands.w	r1, r1, #32
 800ec9c:	f43f af67 	beq.w	800eb6e <USB_DevInit+0xbe>
    count++;
 800eca0:	9b00      	ldr	r3, [sp, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	9300      	str	r3, [sp, #0]
    if (count > 200000U)
 800eca6:	9b00      	ldr	r3, [sp, #0]
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	d9f4      	bls.n	800ec96 <USB_DevInit+0x1e6>
 800ecac:	e75e      	b.n	800eb6c <USB_DevInit+0xbc>
    if (cfg.speed == USBD_HS_SPEED)
 800ecae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecb0:	b923      	cbnz	r3, 800ecbc <USB_DevInit+0x20c>
  USBx_DEVICE->DCFG |= speed;
 800ecb2:	f8dc 3000 	ldr.w	r3, [ip]
 800ecb6:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ecba:	e749      	b.n	800eb50 <USB_DevInit+0xa0>
  USBx_DEVICE->DCFG |= speed;
 800ecbc:	f8dc 3000 	ldr.w	r3, [ip]
 800ecc0:	f043 0301 	orr.w	r3, r3, #1
 800ecc4:	f8cc 3000 	str.w	r3, [ip]
  return HAL_OK;
 800ecc8:	e742      	b.n	800eb50 <USB_DevInit+0xa0>
 800ecca:	bf00      	nop
 800eccc:	00030d40 	.word	0x00030d40
 800ecd0:	803c3800 	.word	0x803c3800
 800ecd4:	40000004 	.word	0x40000004

0800ecd8 <USB_FlushTxFifo>:
{
 800ecd8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800ecda:	2300      	movs	r3, #0
    if (count > 200000U)
 800ecdc:	4a12      	ldr	r2, [pc, #72]	; (800ed28 <USB_FlushTxFifo+0x50>)
  __IO uint32_t count = 0U;
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	e002      	b.n	800ece8 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ece2:	6903      	ldr	r3, [r0, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	db08      	blt.n	800ecfa <USB_FlushTxFifo+0x22>
    count++;
 800ece8:	9b01      	ldr	r3, [sp, #4]
 800ecea:	3301      	adds	r3, #1
 800ecec:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d9f6      	bls.n	800ece2 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 800ecf4:	2003      	movs	r0, #3
}
 800ecf6:	b002      	add	sp, #8
 800ecf8:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ecfa:	0189      	lsls	r1, r1, #6
  count = 0U;
 800ecfc:	2300      	movs	r3, #0
    if (count > 200000U)
 800ecfe:	4a0a      	ldr	r2, [pc, #40]	; (800ed28 <USB_FlushTxFifo+0x50>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed00:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800ed04:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed06:	6101      	str	r1, [r0, #16]
 800ed08:	e003      	b.n	800ed12 <USB_FlushTxFifo+0x3a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed0a:	6903      	ldr	r3, [r0, #16]
 800ed0c:	f013 0320 	ands.w	r3, r3, #32
 800ed10:	d006      	beq.n	800ed20 <USB_FlushTxFifo+0x48>
    count++;
 800ed12:	9b01      	ldr	r3, [sp, #4]
 800ed14:	3301      	adds	r3, #1
 800ed16:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800ed18:	9b01      	ldr	r3, [sp, #4]
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d9f5      	bls.n	800ed0a <USB_FlushTxFifo+0x32>
 800ed1e:	e7e9      	b.n	800ecf4 <USB_FlushTxFifo+0x1c>
  return HAL_OK;
 800ed20:	4618      	mov	r0, r3
}
 800ed22:	b002      	add	sp, #8
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	00030d40 	.word	0x00030d40

0800ed2c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ed2c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ed30:	f013 0006 	ands.w	r0, r3, #6
 800ed34:	d004      	beq.n	800ed40 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800ed36:	f013 0f02 	tst.w	r3, #2
 800ed3a:	bf14      	ite	ne
 800ed3c:	2002      	movne	r0, #2
 800ed3e:	200f      	moveq	r0, #15
}
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop

0800ed44 <USB_ActivateEndpoint>:
{
 800ed44:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800ed46:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ed48:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d020      	beq.n	800ed90 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed4e:	f002 0c0f 	and.w	ip, r2, #15
 800ed52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ed56:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed5a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed5e:	fa03 f30c 	lsl.w	r3, r3, ip
 800ed62:	4323      	orrs	r3, r4
 800ed64:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ed68:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800ed6c:	041b      	lsls	r3, r3, #16
 800ed6e:	d40c      	bmi.n	800ed8a <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed70:	688b      	ldr	r3, [r1, #8]
 800ed72:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 800ed76:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ed7a:	7908      	ldrb	r0, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed7c:	4914      	ldr	r1, [pc, #80]	; (800edd0 <USB_ActivateEndpoint+0x8c>)
 800ed7e:	4323      	orrs	r3, r4
 800ed80:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 800ed84:	4319      	orrs	r1, r3
 800ed86:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	bc30      	pop	{r4, r5}
 800ed8e:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ed90:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800ed94:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ed98:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ed9c:	40ab      	lsls	r3, r5
 800ed9e:	69e5      	ldr	r5, [r4, #28]
 800eda0:	432b      	orrs	r3, r5
 800eda2:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eda4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800eda8:	041c      	lsls	r4, r3, #16
 800edaa:	d4ee      	bmi.n	800ed8a <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edac:	688b      	ldr	r3, [r1, #8]
 800edae:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 800edb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800edb6:	790c      	ldrb	r4, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edb8:	4905      	ldr	r1, [pc, #20]	; (800edd0 <USB_ActivateEndpoint+0x8c>)
 800edba:	432b      	orrs	r3, r5
 800edbc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800edc0:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 800edc4:	4311      	orrs	r1, r2
}
 800edc6:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800edc8:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800edcc:	2000      	movs	r0, #0
 800edce:	4770      	bx	lr
 800edd0:	10008000 	.word	0x10008000

0800edd4 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 800edd4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800edd6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800edd8:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800edda:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800edde:	d02a      	beq.n	800ee36 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ede0:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	db19      	blt.n	800ee1c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ede8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800edf4:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800edf8:	4a23      	ldr	r2, [pc, #140]	; (800ee88 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800edfa:	ea21 0103 	bic.w	r1, r1, r3
 800edfe:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ee02:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800ee06:	ea21 0303 	bic.w	r3, r1, r3
 800ee0a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800ee0e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ee10:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 800ee14:	401a      	ands	r2, r3
 800ee16:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 800ee1a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ee1c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800ee20:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ee24:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ee28:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 800ee2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ee30:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 800ee34:	e7d8      	b.n	800ede8 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee36:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800ee3a:	2a00      	cmp	r2, #0
 800ee3c:	da0b      	bge.n	800ee56 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ee3e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800ee42:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ee46:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ee4a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 800ee4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ee52:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee56:	f003 020f 	and.w	r2, r3, #15
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800ee60:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ee62:	4a0a      	ldr	r2, [pc, #40]	; (800ee8c <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee64:	ea21 0103 	bic.w	r1, r1, r3
 800ee68:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee6c:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 800ee70:	ea21 0303 	bic.w	r3, r1, r3
 800ee74:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 800ee78:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ee7a:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 800ee7e:	401a      	ands	r2, r3
 800ee80:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	eff37800 	.word	0xeff37800
 800ee8c:	ec337800 	.word	0xec337800

0800ee90 <USB_EPStartXfer>:
{
 800ee90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800ee94:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800ee96:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d045      	beq.n	800ef28 <USB_EPStartXfer+0x98>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee9c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800eea0:	4e9a      	ldr	r6, [pc, #616]	; (800f10c <USB_EPStartXfer+0x27c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eea2:	4d9b      	ldr	r5, [pc, #620]	; (800f110 <USB_EPStartXfer+0x280>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eea4:	f8d3 7b10 	ldr.w	r7, [r3, #2832]	; 0xb10
 800eea8:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 800eeac:	403e      	ands	r6, r7
 800eeae:	f8c3 6b10 	str.w	r6, [r3, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eeb2:	f8d3 6b10 	ldr.w	r6, [r3, #2832]	; 0xb10
 800eeb6:	4035      	ands	r5, r6
 800eeb8:	f8c3 5b10 	str.w	r5, [r3, #2832]	; 0xb10
    if (epnum == 0U)
 800eebc:	bb7c      	cbnz	r4, 800ef1e <USB_EPStartXfer+0x8e>
      if (ep->xfer_len > 0U)
 800eebe:	690c      	ldr	r4, [r1, #16]
 800eec0:	2c00      	cmp	r4, #0
 800eec2:	f040 8093 	bne.w	800efec <USB_EPStartXfer+0x15c>
        if (ep->xfer_len > ep->maxpacket)
 800eec6:	688c      	ldr	r4, [r1, #8]
      ep->xfer_size = ep->maxpacket;
 800eec8:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eeca:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800eece:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 800eed2:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eed4:	ea44 0405 	orr.w	r4, r4, r5
 800eed8:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eedc:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800eee0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800eee4:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 800eee8:	f000 80a1 	beq.w	800f02e <USB_EPStartXfer+0x19e>
    if (ep->type == EP_TYPE_ISOC)
 800eeec:	790a      	ldrb	r2, [r1, #4]
 800eeee:	2a01      	cmp	r2, #1
 800eef0:	d10c      	bne.n	800ef0c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eef2:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800eef6:	f412 7f80 	tst.w	r2, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eefa:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800eefe:	bf0c      	ite	eq
 800ef00:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ef04:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 800ef08:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef0c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
}
 800ef10:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef12:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800ef16:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800ef1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (ep->xfer_len == 0U)
 800ef1e:	690c      	ldr	r4, [r1, #16]
 800ef20:	2c00      	cmp	r4, #0
 800ef22:	d166      	bne.n	800eff2 <USB_EPStartXfer+0x162>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ef24:	688c      	ldr	r4, [r1, #8]
 800ef26:	e7d0      	b.n	800eeca <USB_EPStartXfer+0x3a>
    if (ep->xfer_len == 0U)
 800ef28:	690b      	ldr	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef2a:	eb00 1644 	add.w	r6, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 800ef2e:	bb2b      	cbnz	r3, 800ef7c <USB_EPStartXfer+0xec>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef30:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
    if (dma == 1U)
 800ef34:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef36:	4f76      	ldr	r7, [pc, #472]	; (800f110 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef38:	4d74      	ldr	r5, [pc, #464]	; (800f10c <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef3a:	ea0c 0707 	and.w	r7, ip, r7
 800ef3e:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ef42:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800ef46:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800ef4a:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef4e:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800ef52:	ea05 0507 	and.w	r5, r5, r7
 800ef56:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef5a:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800ef5e:	790f      	ldrb	r7, [r1, #4]
    if (dma == 1U)
 800ef60:	f000 80b1 	beq.w	800f0c6 <USB_EPStartXfer+0x236>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef64:	f8d6 c900 	ldr.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800ef68:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef6a:	f04c 4c04 	orr.w	ip, ip, #2214592512	; 0x84000000
 800ef6e:	f8c6 c900 	str.w	ip, [r6, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800ef72:	f000 8088 	beq.w	800f086 <USB_EPStartXfer+0x1f6>
}
 800ef76:	2000      	movs	r0, #0
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef7c:	f8d6 c910 	ldr.w	ip, [r6, #2320]	; 0x910
 800ef80:	4f62      	ldr	r7, [pc, #392]	; (800f10c <USB_EPStartXfer+0x27c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef82:	4d63      	ldr	r5, [pc, #396]	; (800f110 <USB_EPStartXfer+0x280>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef84:	ea0c 0707 	and.w	r7, ip, r7
 800ef88:	f8c6 7910 	str.w	r7, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef8c:	f8d6 7910 	ldr.w	r7, [r6, #2320]	; 0x910
 800ef90:	403d      	ands	r5, r7
 800ef92:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ef96:	f506 6510 	add.w	r5, r6, #2304	; 0x900
      if (epnum == 0U)
 800ef9a:	2c00      	cmp	r4, #0
 800ef9c:	d14e      	bne.n	800f03c <USB_EPStartXfer+0x1ac>
        if (ep->xfer_len > ep->maxpacket)
 800ef9e:	688f      	ldr	r7, [r1, #8]
 800efa0:	42bb      	cmp	r3, r7
 800efa2:	f200 80a0 	bhi.w	800f0e6 <USB_EPStartXfer+0x256>
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800efa6:	692f      	ldr	r7, [r5, #16]
 800efa8:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800efac:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800efae:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800efb2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 800efb6:	ea47 070c 	orr.w	r7, r7, ip
 800efba:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800efbc:	790f      	ldrb	r7, [r1, #4]
 800efbe:	2f01      	cmp	r7, #1
 800efc0:	d04d      	beq.n	800f05e <USB_EPStartXfer+0x1ce>
    if (dma == 1U)
 800efc2:	2a01      	cmp	r2, #1
 800efc4:	f000 808a 	beq.w	800f0dc <USB_EPStartXfer+0x24c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efc8:	f8d6 2900 	ldr.w	r2, [r6, #2304]	; 0x900
 800efcc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800efd0:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
        if (ep->xfer_len > 0U)
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d0ce      	beq.n	800ef76 <USB_EPStartXfer+0xe6>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800efd8:	f004 020f 	and.w	r2, r4, #15
 800efdc:	2401      	movs	r4, #1
 800efde:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800efe2:	4094      	lsls	r4, r2
 800efe4:	431c      	orrs	r4, r3
 800efe6:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800efea:	e7c4      	b.n	800ef76 <USB_EPStartXfer+0xe6>
        ep->xfer_len = ep->maxpacket;
 800efec:	688c      	ldr	r4, [r1, #8]
 800efee:	610c      	str	r4, [r1, #16]
 800eff0:	e76a      	b.n	800eec8 <USB_EPStartXfer+0x38>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eff2:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 800eff4:	2a01      	cmp	r2, #1
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eff6:	4e47      	ldr	r6, [pc, #284]	; (800f114 <USB_EPStartXfer+0x284>)
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eff8:	442c      	add	r4, r5
 800effa:	f104 34ff 	add.w	r4, r4, #4294967295
 800effe:	fbb4 f4f5 	udiv	r4, r4, r5
 800f002:	b2a4      	uxth	r4, r4
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f004:	fb04 f505 	mul.w	r5, r4, r5
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f008:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800f00c:	f8dc 6010 	ldr.w	r6, [ip, #16]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800f010:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f012:	f3c5 0512 	ubfx	r5, r5, #0, #19
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f016:	ea44 0406 	orr.w	r4, r4, r6
 800f01a:	f8cc 4010 	str.w	r4, [ip, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800f01e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800f022:	ea45 0504 	orr.w	r5, r5, r4
 800f026:	f8cc 5010 	str.w	r5, [ip, #16]
    if (dma == 1U)
 800f02a:	f47f af5f 	bne.w	800eeec <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 800f02e:	68ca      	ldr	r2, [r1, #12]
 800f030:	2a00      	cmp	r2, #0
 800f032:	f43f af5b 	beq.w	800eeec <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f036:	f8cc 2014 	str.w	r2, [ip, #20]
 800f03a:	e757      	b.n	800eeec <USB_EPStartXfer+0x5c>
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f03c:	f8d1 e008 	ldr.w	lr, [r1, #8]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f040:	4f34      	ldr	r7, [pc, #208]	; (800f114 <USB_EPStartXfer+0x284>)
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f042:	eb03 0c0e 	add.w	ip, r3, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f046:	f8d5 8010 	ldr.w	r8, [r5, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f04a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f04e:	fbbc fcfe 	udiv	ip, ip, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f052:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 800f056:	ea47 0708 	orr.w	r7, r7, r8
 800f05a:	612f      	str	r7, [r5, #16]
 800f05c:	e7a7      	b.n	800efae <USB_EPStartXfer+0x11e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f05e:	f8d5 c010 	ldr.w	ip, [r5, #16]
    if (dma == 1U)
 800f062:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f064:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 800f068:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f06c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800f070:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 800f074:	f8c5 c010 	str.w	ip, [r5, #16]
    if (dma == 1U)
 800f078:	d038      	beq.n	800f0ec <USB_EPStartXfer+0x25c>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f07a:	f8d6 7900 	ldr.w	r7, [r6, #2304]	; 0x900
 800f07e:	f047 4704 	orr.w	r7, r7, #2214592512	; 0x84000000
 800f082:	f8c6 7900 	str.w	r7, [r6, #2304]	; 0x900
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f086:	f8d0 6808 	ldr.w	r6, [r0, #2056]	; 0x808
 800f08a:	f416 7f80 	tst.w	r6, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f08e:	682e      	ldr	r6, [r5, #0]
 800f090:	bf0c      	ite	eq
 800f092:	f046 5600 	orreq.w	r6, r6, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f096:	f046 5680 	orrne.w	r6, r6, #268435456	; 0x10000000
 800f09a:	602e      	str	r6, [r5, #0]
  if (dma == 0U)
 800f09c:	2a00      	cmp	r2, #0
 800f09e:	f47f af6a 	bne.w	800ef76 <USB_EPStartXfer+0xe6>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f0a6:	089a      	lsrs	r2, r3, #2
 800f0a8:	f43f af65 	beq.w	800ef76 <USB_EPStartXfer+0xe6>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f0ac:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f0ae:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800f0b2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800f0b6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800f0ba:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 800f0be:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f0c0:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f0c2:	d1fa      	bne.n	800f0ba <USB_EPStartXfer+0x22a>
 800f0c4:	e757      	b.n	800ef76 <USB_EPStartXfer+0xe6>
      if ((uint32_t)ep->dma_addr != 0U)
 800f0c6:	69cb      	ldr	r3, [r1, #28]
 800f0c8:	b95b      	cbnz	r3, 800f0e2 <USB_EPStartXfer+0x252>
      if (ep->type == EP_TYPE_ISOC)
 800f0ca:	2f01      	cmp	r7, #1
 800f0cc:	d011      	beq.n	800f0f2 <USB_EPStartXfer+0x262>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0ce:	682b      	ldr	r3, [r5, #0]
}
 800f0d0:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f0d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f0d6:	602b      	str	r3, [r5, #0]
}
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800f0dc:	69cb      	ldr	r3, [r1, #28]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0f5      	beq.n	800f0ce <USB_EPStartXfer+0x23e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f0e2:	616b      	str	r3, [r5, #20]
 800f0e4:	e7f1      	b.n	800f0ca <USB_EPStartXfer+0x23a>
          ep->xfer_len = ep->maxpacket;
 800f0e6:	463b      	mov	r3, r7
 800f0e8:	610f      	str	r7, [r1, #16]
 800f0ea:	e75c      	b.n	800efa6 <USB_EPStartXfer+0x116>
      if ((uint32_t)ep->dma_addr != 0U)
 800f0ec:	69cb      	ldr	r3, [r1, #28]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1f7      	bne.n	800f0e2 <USB_EPStartXfer+0x252>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0f2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800f0f6:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f0fa:	682b      	ldr	r3, [r5, #0]
 800f0fc:	bf0c      	ite	eq
 800f0fe:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f102:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800f106:	602b      	str	r3, [r5, #0]
 800f108:	e7e1      	b.n	800f0ce <USB_EPStartXfer+0x23e>
 800f10a:	bf00      	nop
 800f10c:	fff80000 	.word	0xfff80000
 800f110:	e007ffff 	.word	0xe007ffff
 800f114:	1ff80000 	.word	0x1ff80000

0800f118 <USB_EPStopXfer>:
  __IO uint32_t count = 0U;
 800f118:	2300      	movs	r3, #0
{
 800f11a:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800f11c:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 800f11e:	784b      	ldrb	r3, [r1, #1]
 800f120:	2b01      	cmp	r3, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f122:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f124:	d020      	beq.n	800f168 <USB_EPStopXfer+0x50>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f126:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800f12a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f12e:	6803      	ldr	r3, [r0, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	db02      	blt.n	800f13a <USB_EPStopXfer+0x22>
  HAL_StatusTypeDef ret = HAL_OK;
 800f134:	2000      	movs	r0, #0
}
 800f136:	b002      	add	sp, #8
 800f138:	4770      	bx	lr
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f13a:	6803      	ldr	r3, [r0, #0]
        if (count > 10000U)
 800f13c:	f242 7210 	movw	r2, #10000	; 0x2710
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f140:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f144:	6003      	str	r3, [r0, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f146:	6803      	ldr	r3, [r0, #0]
 800f148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f14c:	6003      	str	r3, [r0, #0]
 800f14e:	e002      	b.n	800f156 <USB_EPStopXfer+0x3e>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f150:	6803      	ldr	r3, [r0, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	daee      	bge.n	800f134 <USB_EPStopXfer+0x1c>
        count++;
 800f156:	9b01      	ldr	r3, [sp, #4]
 800f158:	3301      	adds	r3, #1
 800f15a:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 800f15c:	9b01      	ldr	r3, [sp, #4]
 800f15e:	4293      	cmp	r3, r2
 800f160:	d9f6      	bls.n	800f150 <USB_EPStopXfer+0x38>
          ret = HAL_ERROR;
 800f162:	2001      	movs	r0, #1
}
 800f164:	b002      	add	sp, #8
 800f166:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f168:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800f16c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	2a00      	cmp	r2, #0
 800f174:	dade      	bge.n	800f134 <USB_EPStopXfer+0x1c>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f176:	681a      	ldr	r2, [r3, #0]
        if (count > 10000U)
 800f178:	f242 7110 	movw	r1, #10000	; 0x2710
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f17c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800f180:	601a      	str	r2, [r3, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	e002      	b.n	800f192 <USB_EPStopXfer+0x7a>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	2a00      	cmp	r2, #0
 800f190:	dad0      	bge.n	800f134 <USB_EPStopXfer+0x1c>
        count++;
 800f192:	9a01      	ldr	r2, [sp, #4]
 800f194:	3201      	adds	r2, #1
 800f196:	9201      	str	r2, [sp, #4]
        if (count > 10000U)
 800f198:	9a01      	ldr	r2, [sp, #4]
 800f19a:	428a      	cmp	r2, r1
 800f19c:	d9f6      	bls.n	800f18c <USB_EPStopXfer+0x74>
 800f19e:	e7e0      	b.n	800f162 <USB_EPStopXfer+0x4a>

0800f1a0 <USB_WritePacket>:
{
 800f1a0:	b410      	push	{r4}
 800f1a2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800f1a6:	b964      	cbnz	r4, 800f1c2 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 800f1a8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800f1aa:	089b      	lsrs	r3, r3, #2
 800f1ac:	d009      	beq.n	800f1c2 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f1ae:	3201      	adds	r2, #1
 800f1b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f1b4:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800f1b8:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800f1bc:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f1be:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800f1c0:	d1fa      	bne.n	800f1b8 <USB_WritePacket+0x18>
}
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop

0800f1cc <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 800f1cc:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 800f1d4:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 800f1d8:	d01c      	beq.n	800f214 <USB_ReadPacket+0x48>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f1da:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 800f1de:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f1e4:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 800f1e8:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f1ea:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 800f1ee:	d1f8      	bne.n	800f1e2 <USB_ReadPacket+0x16>
    pDest++;
 800f1f0:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 800f1f4:	b16e      	cbz	r6, 800f212 <USB_ReadPacket+0x46>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f1f6:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
      remaining_bytes--;
 800f1fa:	1e73      	subs	r3, r6, #1
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f1fc:	682a      	ldr	r2, [r5, #0]
      remaining_bytes--;
 800f1fe:	b29b      	uxth	r3, r3
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f200:	7002      	strb	r2, [r0, #0]
    } while (remaining_bytes != 0U);
 800f202:	b12b      	cbz	r3, 800f210 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f204:	0a11      	lsrs	r1, r2, #8
    } while (remaining_bytes != 0U);
 800f206:	2b01      	cmp	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f208:	7041      	strb	r1, [r0, #1]
    } while (remaining_bytes != 0U);
 800f20a:	d001      	beq.n	800f210 <USB_ReadPacket+0x44>
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f20c:	0c12      	lsrs	r2, r2, #16
 800f20e:	7082      	strb	r2, [r0, #2]
      pDest++;
 800f210:	4430      	add	r0, r6
}
 800f212:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 800f214:	4608      	mov	r0, r1
 800f216:	e7ed      	b.n	800f1f4 <USB_ReadPacket+0x28>

0800f218 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800f218:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f21a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f21c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f21e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800f222:	d00c      	beq.n	800f23e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f224:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f228:	b10b      	cbz	r3, 800f22e <USB_EPSetStall+0x16>
 800f22a:	2a00      	cmp	r2, #0
 800f22c:	da14      	bge.n	800f258 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f22e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f232:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f236:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f23a:	2000      	movs	r0, #0
 800f23c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f23e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800f242:	2a00      	cmp	r2, #0
 800f244:	db00      	blt.n	800f248 <USB_EPSetStall+0x30>
 800f246:	b973      	cbnz	r3, 800f266 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f248:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f24c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f250:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f254:	2000      	movs	r0, #0
 800f256:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f258:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f25c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f260:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800f264:	e7e3      	b.n	800f22e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f266:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f26a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f26e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f272:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f27a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800f27e:	e7e9      	b.n	800f254 <USB_EPSetStall+0x3c>

0800f280 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 800f280:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800f282:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f284:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f286:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 800f28a:	d013      	beq.n	800f2b4 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f28c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f294:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f298:	790b      	ldrb	r3, [r1, #4]
 800f29a:	3b02      	subs	r3, #2
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d901      	bls.n	800f2a4 <USB_EPClearStall+0x24>
}
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f2a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2ac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f2b4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f2b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2bc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f2c0:	790b      	ldrb	r3, [r1, #4]
 800f2c2:	3b02      	subs	r3, #2
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d8eb      	bhi.n	800f2a0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f2c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f2cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2d0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	4770      	bx	lr

0800f2d8 <USB_SetDevAddress>:
{
 800f2d8:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f2da:	0109      	lsls	r1, r1, #4
}
 800f2dc:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f2de:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f2e2:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f2e6:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800f2ea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f2ee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800f2f2:	4311      	orrs	r1, r2
 800f2f4:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop

0800f2fc <USB_DevConnect>:
{
 800f2fc:	4603      	mov	r3, r0
}
 800f2fe:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f300:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f304:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f308:	f022 0203 	bic.w	r2, r2, #3
 800f30c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f310:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f314:	f023 0302 	bic.w	r3, r3, #2
 800f318:	604b      	str	r3, [r1, #4]
}
 800f31a:	4770      	bx	lr

0800f31c <USB_DevDisconnect>:
{
 800f31c:	4603      	mov	r3, r0
}
 800f31e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f320:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f324:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f328:	f022 0203 	bic.w	r2, r2, #3
 800f32c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f330:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f334:	f043 0302 	orr.w	r3, r3, #2
 800f338:	604b      	str	r3, [r1, #4]
}
 800f33a:	4770      	bx	lr

0800f33c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800f33c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800f33e:	6980      	ldr	r0, [r0, #24]
}
 800f340:	4010      	ands	r0, r2
 800f342:	4770      	bx	lr

0800f344 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f344:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f348:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800f34c:	4018      	ands	r0, r3
}
 800f34e:	0c00      	lsrs	r0, r0, #16
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop

0800f354 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800f354:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f358:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 800f35c:	4018      	ands	r0, r3
}
 800f35e:	b280      	uxth	r0, r0
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop

0800f364 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f364:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f368:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f36c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f370:	6940      	ldr	r0, [r0, #20]
}
 800f372:	4010      	ands	r0, r2
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop

0800f378 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800f378:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f37c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f380:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f384:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f388:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f38c:	40cb      	lsrs	r3, r1
 800f38e:	01db      	lsls	r3, r3, #7
 800f390:	b2db      	uxtb	r3, r3
 800f392:	4313      	orrs	r3, r2
}
 800f394:	4018      	ands	r0, r3
 800f396:	4770      	bx	lr

0800f398 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800f398:	6940      	ldr	r0, [r0, #20]
}
 800f39a:	f000 0001 	and.w	r0, r0, #1
 800f39e:	4770      	bx	lr

0800f3a0 <USB_ActivateSetup>:
{
 800f3a0:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3a2:	4a09      	ldr	r2, [pc, #36]	; (800f3c8 <USB_ActivateSetup+0x28>)
}
 800f3a4:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f3a6:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800f3aa:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3ac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800f3b0:	4022      	ands	r2, r4
}
 800f3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3b6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f3ba:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800f3be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3c2:	604b      	str	r3, [r1, #4]
}
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	fffff800 	.word	0xfffff800

0800f3cc <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f3cc:	4b14      	ldr	r3, [pc, #80]	; (800f420 <USB_EP0_OutStart+0x54>)
{
 800f3ce:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f3d0:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f3d2:	429c      	cmp	r4, r3
 800f3d4:	d81a      	bhi.n	800f40c <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3d6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3da:	2300      	movs	r3, #0
  if (dma == 1U)
 800f3dc:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3de:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3e0:	6903      	ldr	r3, [r0, #16]
 800f3e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3e6:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3e8:	6903      	ldr	r3, [r0, #16]
 800f3ea:	f043 0318 	orr.w	r3, r3, #24
 800f3ee:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3f0:	6903      	ldr	r3, [r0, #16]
 800f3f2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f3f6:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 800f3f8:	d104      	bne.n	800f404 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3fa:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3fc:	6803      	ldr	r3, [r0, #0]
 800f3fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f402:	6003      	str	r3, [r0, #0]
}
 800f404:	2000      	movs	r0, #0
 800f406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f40a:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f40c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f410:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800f414:	2b00      	cmp	r3, #0
 800f416:	dae0      	bge.n	800f3da <USB_EP0_OutStart+0xe>
}
 800f418:	2000      	movs	r0, #0
 800f41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	4f54300a 	.word	0x4f54300a

0800f424 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f424:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f428:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 800f42c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f42e:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0

  if (hcdc == NULL)
 800f432:	b194      	cbz	r4, 800f45a <USBD_CDC_EP0_RxReady+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f434:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 800f438:	b16b      	cbz	r3, 800f456 <USBD_CDC_EP0_RxReady+0x32>
 800f43a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800f43e:	28ff      	cmp	r0, #255	; 0xff
 800f440:	d009      	beq.n	800f456 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	4621      	mov	r1, r4
 800f446:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800f44a:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800f44c:	23ff      	movs	r3, #255	; 0xff
  }

  return (uint8_t)USBD_OK;
 800f44e:	2000      	movs	r0, #0
    hcdc->CmdOpCode = 0xFFU;
 800f450:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
 800f454:	bd10      	pop	{r4, pc}
  return (uint8_t)USBD_OK;
 800f456:	2000      	movs	r0, #0
}
 800f458:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f45a:	2003      	movs	r0, #3
}
 800f45c:	bd10      	pop	{r4, pc}
 800f45e:	bf00      	nop

0800f460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f460:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f462:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 800f464:	4801      	ldr	r0, [pc, #4]	; (800f46c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f466:	801a      	strh	r2, [r3, #0]
}
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	2400039c 	.word	0x2400039c

0800f470 <USBD_CDC_GetFSCfgDesc>:
{
 800f470:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f472:	2182      	movs	r1, #130	; 0x82
{
 800f474:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f476:	480f      	ldr	r0, [pc, #60]	; (800f4b4 <USBD_CDC_GetFSCfgDesc+0x44>)
 800f478:	f000 fbf8 	bl	800fc6c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f47c:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f47e:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f480:	480c      	ldr	r0, [pc, #48]	; (800f4b4 <USBD_CDC_GetFSCfgDesc+0x44>)
 800f482:	f000 fbf3 	bl	800fc6c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f486:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f488:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f48a:	480a      	ldr	r0, [pc, #40]	; (800f4b4 <USBD_CDC_GetFSCfgDesc+0x44>)
 800f48c:	f000 fbee 	bl	800fc6c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800f490:	b10d      	cbz	r5, 800f496 <USBD_CDC_GetFSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f492:	2210      	movs	r2, #16
 800f494:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800f496:	b11c      	cbz	r4, 800f4a0 <USBD_CDC_GetFSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f498:	2100      	movs	r1, #0
 800f49a:	2240      	movs	r2, #64	; 0x40
 800f49c:	7161      	strb	r1, [r4, #5]
 800f49e:	7122      	strb	r2, [r4, #4]
  if (pEpInDesc != NULL)
 800f4a0:	b118      	cbz	r0, 800f4aa <USBD_CDC_GetFSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	2240      	movs	r2, #64	; 0x40
 800f4a6:	7141      	strb	r1, [r0, #5]
 800f4a8:	7102      	strb	r2, [r0, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f4aa:	2343      	movs	r3, #67	; 0x43
}
 800f4ac:	4801      	ldr	r0, [pc, #4]	; (800f4b4 <USBD_CDC_GetFSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f4ae:	8033      	strh	r3, [r6, #0]
}
 800f4b0:	bd70      	pop	{r4, r5, r6, pc}
 800f4b2:	bf00      	nop
 800f4b4:	24000358 	.word	0x24000358

0800f4b8 <USBD_CDC_GetHSCfgDesc>:
{
 800f4b8:	b570      	push	{r4, r5, r6, lr}
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f4ba:	2182      	movs	r1, #130	; 0x82
{
 800f4bc:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f4be:	480f      	ldr	r0, [pc, #60]	; (800f4fc <USBD_CDC_GetHSCfgDesc+0x44>)
 800f4c0:	f000 fbd4 	bl	800fc6c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f4c4:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f4c6:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f4c8:	480c      	ldr	r0, [pc, #48]	; (800f4fc <USBD_CDC_GetHSCfgDesc+0x44>)
 800f4ca:	f000 fbcf 	bl	800fc6c <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f4ce:	2181      	movs	r1, #129	; 0x81
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f4d0:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f4d2:	480a      	ldr	r0, [pc, #40]	; (800f4fc <USBD_CDC_GetHSCfgDesc+0x44>)
 800f4d4:	f000 fbca 	bl	800fc6c <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800f4d8:	b10d      	cbz	r5, 800f4de <USBD_CDC_GetHSCfgDesc+0x26>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f4da:	2210      	movs	r2, #16
 800f4dc:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800f4de:	b11c      	cbz	r4, 800f4e8 <USBD_CDC_GetHSCfgDesc+0x30>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	2202      	movs	r2, #2
 800f4e4:	7121      	strb	r1, [r4, #4]
 800f4e6:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800f4e8:	b118      	cbz	r0, 800f4f2 <USBD_CDC_GetHSCfgDesc+0x3a>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	2202      	movs	r2, #2
 800f4ee:	7101      	strb	r1, [r0, #4]
 800f4f0:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f4f2:	2343      	movs	r3, #67	; 0x43
}
 800f4f4:	4801      	ldr	r0, [pc, #4]	; (800f4fc <USBD_CDC_GetHSCfgDesc+0x44>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f4f6:	8033      	strh	r3, [r6, #0]
}
 800f4f8:	bd70      	pop	{r4, r5, r6, pc}
 800f4fa:	bf00      	nop
 800f4fc:	24000358 	.word	0x24000358

0800f500 <USBD_CDC_DataOut>:
{
 800f500:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f502:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f506:	33b0      	adds	r3, #176	; 0xb0
 800f508:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f50c:	b195      	cbz	r5, 800f534 <USBD_CDC_DataOut+0x34>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f50e:	4604      	mov	r4, r0
 800f510:	f001 f9f2 	bl	80108f8 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f514:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800f518:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f51c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f520:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f524:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800f528:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f530:	2000      	movs	r0, #0
}
 800f532:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800f534:	2003      	movs	r0, #3
}
 800f536:	bd38      	pop	{r3, r4, r5, pc}

0800f538 <USBD_CDC_DataIn>:
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f538:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f53c:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
{
 800f540:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f542:	f8dc 52c0 	ldr.w	r5, [ip, #704]	; 0x2c0
 800f546:	b36d      	cbz	r5, 800f5a4 <USBD_CDC_DataIn+0x6c>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f548:	f001 0e0f 	and.w	lr, r1, #15
 800f54c:	460a      	mov	r2, r1
 800f54e:	eb0e 068e 	add.w	r6, lr, lr, lsl #2
 800f552:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800f556:	69b3      	ldr	r3, [r6, #24]
 800f558:	b96b      	cbnz	r3, 800f576 <USBD_CDC_DataIn+0x3e>
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f55a:	f8dc 32c4 	ldr.w	r3, [ip, #708]	; 0x2c4
    hcdc->TxState = 0U;
 800f55e:	2400      	movs	r4, #0
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f560:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800f562:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f566:	b1db      	cbz	r3, 800f5a0 <USBD_CDC_DataIn+0x68>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f568:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800f56c:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 800f570:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800f572:	4620      	mov	r0, r4
}
 800f574:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f576:	f8d0 42c8 	ldr.w	r4, [r0, #712]	; 0x2c8
 800f57a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800f57e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800f582:	f8de 4044 	ldr.w	r4, [lr, #68]	; 0x44
 800f586:	fbb3 fef4 	udiv	lr, r3, r4
 800f58a:	fb04 341e 	mls	r4, r4, lr, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f58e:	2c00      	cmp	r4, #0
 800f590:	d1e3      	bne.n	800f55a <USBD_CDC_DataIn+0x22>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f592:	4623      	mov	r3, r4
 800f594:	4622      	mov	r2, r4
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f596:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f598:	f001 f992 	bl	80108c0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800f59c:	4620      	mov	r0, r4
}
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint8_t)USBD_OK;
 800f5a0:	4618      	mov	r0, r3
}
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 800f5a4:	2003      	movs	r0, #3
}
 800f5a6:	bd70      	pop	{r4, r5, r6, pc}

0800f5a8 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5a8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f5ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 800f5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 800f5b6:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5b8:	f8d3 72c0 	ldr.w	r7, [r3, #704]	; 0x2c0
  uint8_t ifalt = 0U;
 800f5bc:	f88d 0005 	strb.w	r0, [sp, #5]
  uint16_t status_info = 0U;
 800f5c0:	f8ad 0006 	strh.w	r0, [sp, #6]
  if (hcdc == NULL)
 800f5c4:	2f00      	cmp	r7, #0
 800f5c6:	d066      	beq.n	800f696 <USBD_CDC_Setup+0xee>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5c8:	f891 c000 	ldrb.w	ip, [r1]
 800f5cc:	460d      	mov	r5, r1
 800f5ce:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
 800f5d2:	d01d      	beq.n	800f610 <USBD_CDC_Setup+0x68>
 800f5d4:	2e20      	cmp	r6, #32
 800f5d6:	d007      	beq.n	800f5e8 <USBD_CDC_Setup+0x40>
          USBD_CtlError(pdev, req);
 800f5d8:	4629      	mov	r1, r5
 800f5da:	4620      	mov	r0, r4
          ret = USBD_FAIL;
 800f5dc:	2603      	movs	r6, #3
          USBD_CtlError(pdev, req);
 800f5de:	f000 fe09 	bl	80101f4 <USBD_CtlError>
}
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	b003      	add	sp, #12
 800f5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (req->wLength != 0U)
 800f5e8:	88ca      	ldrh	r2, [r1, #6]
 800f5ea:	b37a      	cbz	r2, 800f64c <USBD_CDC_Setup+0xa4>
        if ((req->bmRequest & 0x80U) != 0U)
 800f5ec:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800f5f0:	d155      	bne.n	800f69e <USBD_CDC_Setup+0xf6>
          hcdc->CmdOpCode = req->bRequest;
 800f5f2:	784b      	ldrb	r3, [r1, #1]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f5f4:	2a3f      	cmp	r2, #63	; 0x3f
          hcdc->CmdOpCode = req->bRequest;
 800f5f6:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f5fa:	d960      	bls.n	800f6be <USBD_CDC_Setup+0x116>
 800f5fc:	2340      	movs	r3, #64	; 0x40
 800f5fe:	461a      	mov	r2, r3
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f600:	4639      	mov	r1, r7
 800f602:	4620      	mov	r0, r4
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f604:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 800f608:	2600      	movs	r6, #0
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f60a:	f000 fe41 	bl	8010290 <USBD_CtlPrepareRx>
 800f60e:	e7e8      	b.n	800f5e2 <USBD_CDC_Setup+0x3a>
      switch (req->bRequest)
 800f610:	784b      	ldrb	r3, [r1, #1]
 800f612:	2b0b      	cmp	r3, #11
 800f614:	d8e0      	bhi.n	800f5d8 <USBD_CDC_Setup+0x30>
 800f616:	a201      	add	r2, pc, #4	; (adr r2, 800f61c <USBD_CDC_Setup+0x74>)
 800f618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61c:	0800f67f 	.word	0x0800f67f
 800f620:	0800f5e3 	.word	0x0800f5e3
 800f624:	0800f5d9 	.word	0x0800f5d9
 800f628:	0800f5d9 	.word	0x0800f5d9
 800f62c:	0800f5d9 	.word	0x0800f5d9
 800f630:	0800f5d9 	.word	0x0800f5d9
 800f634:	0800f5d9 	.word	0x0800f5d9
 800f638:	0800f5d9 	.word	0x0800f5d9
 800f63c:	0800f5d9 	.word	0x0800f5d9
 800f640:	0800f5d9 	.word	0x0800f5d9
 800f644:	0800f669 	.word	0x0800f669
 800f648:	0800f65f 	.word	0x0800f65f
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f64c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  USBD_StatusTypeDef ret = USBD_OK;
 800f650:	4616      	mov	r6, r2
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f652:	7848      	ldrb	r0, [r1, #1]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	4798      	blx	r3
}
 800f658:	4630      	mov	r0, r6
 800f65a:	b003      	add	sp, #12
 800f65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f65e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800f662:	2b03      	cmp	r3, #3
 800f664:	d0bd      	beq.n	800f5e2 <USBD_CDC_Setup+0x3a>
 800f666:	e7b7      	b.n	800f5d8 <USBD_CDC_Setup+0x30>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f668:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800f66c:	2b03      	cmp	r3, #3
 800f66e:	d1b3      	bne.n	800f5d8 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f670:	2201      	movs	r2, #1
 800f672:	f10d 0105 	add.w	r1, sp, #5
 800f676:	4620      	mov	r0, r4
 800f678:	f000 fdf2 	bl	8010260 <USBD_CtlSendData>
 800f67c:	e7b1      	b.n	800f5e2 <USBD_CDC_Setup+0x3a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f67e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800f682:	2a03      	cmp	r2, #3
 800f684:	d1a8      	bne.n	800f5d8 <USBD_CDC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f686:	2202      	movs	r2, #2
 800f688:	f10d 0106 	add.w	r1, sp, #6
 800f68c:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800f68e:	461e      	mov	r6, r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f690:	f000 fde6 	bl	8010260 <USBD_CtlSendData>
 800f694:	e7a5      	b.n	800f5e2 <USBD_CDC_Setup+0x3a>
    return (uint8_t)USBD_FAIL;
 800f696:	2603      	movs	r6, #3
}
 800f698:	4630      	mov	r0, r6
 800f69a:	b003      	add	sp, #12
 800f69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f69e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f6a2:	4639      	mov	r1, r7
  USBD_StatusTypeDef ret = USBD_OK;
 800f6a4:	4606      	mov	r6, r0
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6a6:	7868      	ldrb	r0, [r5, #1]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f6ac:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	2a07      	cmp	r2, #7
 800f6b4:	bf28      	it	cs
 800f6b6:	2207      	movcs	r2, #7
 800f6b8:	f000 fdd2 	bl	8010260 <USBD_CtlSendData>
 800f6bc:	e791      	b.n	800f5e2 <USBD_CDC_Setup+0x3a>
 800f6be:	b2d3      	uxtb	r3, r2
 800f6c0:	e79e      	b.n	800f600 <USBD_CDC_Setup+0x58>
 800f6c2:	bf00      	nop

0800f6c4 <USBD_CDC_DeInit>:
{
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	4604      	mov	r4, r0
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f6c8:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f6ca:	2181      	movs	r1, #129	; 0x81
 800f6cc:	f001 f8ac 	bl	8010828 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	4620      	mov	r0, r4
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f6d4:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f6d6:	f001 f8a7 	bl	8010828 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f6da:	2182      	movs	r1, #130	; 0x82
 800f6dc:	4620      	mov	r0, r4
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f6de:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f6e2:	f001 f8a1 	bl	8010828 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f6e6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f6ea:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f6ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6f0:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 800f6f4:	b18a      	cbz	r2, 800f71a <USBD_CDC_DeInit+0x56>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f6f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f6fe:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800f702:	33b0      	adds	r3, #176	; 0xb0
 800f704:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800f708:	f001 f8fe 	bl	8010908 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f70c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800f710:	33b0      	adds	r3, #176	; 0xb0
 800f712:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 800f716:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800f71a:	2000      	movs	r0, #0
 800f71c:	bd38      	pop	{r3, r4, r5, pc}
 800f71e:	bf00      	nop

0800f720 <USBD_CDC_Init>:
{
 800f720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f724:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f726:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f72a:	f001 f8e9 	bl	8010900 <USBD_static_malloc>
  if (hcdc == NULL)
 800f72e:	4605      	mov	r5, r0
 800f730:	2800      	cmp	r0, #0
 800f732:	d05b      	beq.n	800f7ec <USBD_CDC_Init+0xcc>
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f734:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800f738:	2100      	movs	r1, #0
 800f73a:	f001 f953 	bl	80109e4 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f73e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 800f742:	33b0      	adds	r3, #176	; 0xb0
 800f744:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f748:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f74a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f74e:	b3cb      	cbz	r3, 800f7c4 <USBD_CDC_Init+0xa4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f750:	2340      	movs	r3, #64	; 0x40
 800f752:	2202      	movs	r2, #2
 800f754:	2181      	movs	r1, #129	; 0x81
 800f756:	4620      	mov	r0, r4
 800f758:	f001 f854 	bl	8010804 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f75c:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f75e:	2340      	movs	r3, #64	; 0x40
 800f760:	4631      	mov	r1, r6
 800f762:	2202      	movs	r2, #2
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f764:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f766:	4620      	mov	r0, r4
 800f768:	f001 f84c 	bl	8010804 <USBD_LL_OpenEP>
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f76c:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f76e:	2203      	movs	r2, #3
 800f770:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f772:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f776:	4620      	mov	r0, r4
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f778:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f77c:	2308      	movs	r3, #8
 800f77e:	f001 f841 	bl	8010804 <USBD_LL_OpenEP>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f782:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  hcdc->RxBuffer = NULL;
 800f786:	2600      	movs	r6, #0
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f788:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f78c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f790:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f794:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
  hcdc->RxBuffer = NULL;
 800f798:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4798      	blx	r3
  if (hcdc->RxBuffer == NULL)
 800f7a0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  hcdc->TxState = 0U;
 800f7a4:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 800f7a8:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 800f7ac:	b33a      	cbz	r2, 800f7fe <USBD_CDC_Init+0xde>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7ae:	7c27      	ldrb	r7, [r4, #16]
 800f7b0:	b99f      	cbnz	r7, 800f7da <USBD_CDC_Init+0xba>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f7b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7b6:	4641      	mov	r1, r8
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f001 f88f 	bl	80108dc <USBD_LL_PrepareReceive>
}
 800f7be:	4638      	mov	r0, r7
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f7c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	2181      	movs	r1, #129	; 0x81
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f001 f819 	bl	8010804 <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f7d2:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f7d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7d8:	e7c2      	b.n	800f760 <USBD_CDC_Init+0x40>
  return (uint8_t)USBD_OK;
 800f7da:	4637      	mov	r7, r6
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f7dc:	2340      	movs	r3, #64	; 0x40
 800f7de:	4641      	mov	r1, r8
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	f001 f87b 	bl	80108dc <USBD_LL_PrepareReceive>
}
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f7ec:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 800f7f0:	2702      	movs	r7, #2
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f7f2:	33b0      	adds	r3, #176	; 0xb0
 800f7f4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
}
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 800f7fe:	2702      	movs	r7, #2
 800f800:	e7dd      	b.n	800f7be <USBD_CDC_Init+0x9e>
 800f802:	bf00      	nop

0800f804 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800f804:	b570      	push	{r4, r5, r6, lr}
 800f806:	2182      	movs	r1, #130	; 0x82
 800f808:	4606      	mov	r6, r0
 800f80a:	480f      	ldr	r0, [pc, #60]	; (800f848 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f80c:	f000 fa2e 	bl	800fc6c <USBD_GetEpDesc>
 800f810:	2101      	movs	r1, #1
 800f812:	4605      	mov	r5, r0
 800f814:	480c      	ldr	r0, [pc, #48]	; (800f848 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f816:	f000 fa29 	bl	800fc6c <USBD_GetEpDesc>
 800f81a:	2181      	movs	r1, #129	; 0x81
 800f81c:	4604      	mov	r4, r0
 800f81e:	480a      	ldr	r0, [pc, #40]	; (800f848 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f820:	f000 fa24 	bl	800fc6c <USBD_GetEpDesc>
 800f824:	b10d      	cbz	r5, 800f82a <USBD_CDC_GetOtherSpeedCfgDesc+0x26>
 800f826:	2210      	movs	r2, #16
 800f828:	71aa      	strb	r2, [r5, #6]
 800f82a:	b11c      	cbz	r4, 800f834 <USBD_CDC_GetOtherSpeedCfgDesc+0x30>
 800f82c:	2100      	movs	r1, #0
 800f82e:	2240      	movs	r2, #64	; 0x40
 800f830:	7161      	strb	r1, [r4, #5]
 800f832:	7122      	strb	r2, [r4, #4]
 800f834:	b118      	cbz	r0, 800f83e <USBD_CDC_GetOtherSpeedCfgDesc+0x3a>
 800f836:	2100      	movs	r1, #0
 800f838:	2240      	movs	r2, #64	; 0x40
 800f83a:	7141      	strb	r1, [r0, #5]
 800f83c:	7102      	strb	r2, [r0, #4]
 800f83e:	2343      	movs	r3, #67	; 0x43
 800f840:	4801      	ldr	r0, [pc, #4]	; (800f848 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800f842:	8033      	strh	r3, [r6, #0]
 800f844:	bd70      	pop	{r4, r5, r6, pc}
 800f846:	bf00      	nop
 800f848:	24000358 	.word	0x24000358

0800f84c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f84c:	4603      	mov	r3, r0
  if (fops == NULL)
 800f84e:	b139      	cbz	r1, 800f860 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 800f850:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4

  return (uint8_t)USBD_OK;
 800f854:	2000      	movs	r0, #0
  pdev->pUserData[pdev->classId] = fops;
 800f856:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f85a:	f8c3 12c4 	str.w	r1, [r3, #708]	; 0x2c4
  return (uint8_t)USBD_OK;
 800f85e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f860:	2003      	movs	r0, #3
}
 800f862:	4770      	bx	lr

0800f864 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f864:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f868:	33b0      	adds	r3, #176	; 0xb0
 800f86a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f86e:	b12b      	cbz	r3, 800f87c <USBD_CDC_SetTxBuffer+0x18>
  }

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
 800f870:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800f872:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f876:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  return (uint8_t)USBD_OK;
 800f87a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f87c:	2003      	movs	r0, #3
}
 800f87e:	4770      	bx	lr

0800f880 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f880:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f884:	33b0      	adds	r3, #176	; 0xb0
 800f886:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800f88a:	b11b      	cbz	r3, 800f894 <USBD_CDC_SetRxBuffer+0x14>
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
 800f88c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800f88e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  return (uint8_t)USBD_OK;
 800f892:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800f894:	2003      	movs	r0, #3
}
 800f896:	4770      	bx	lr

0800f898 <USBD_CDC_TransmitPacket>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f898:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800f89c:	33b0      	adds	r3, #176	; 0xb0
 800f89e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f8a2:	b192      	cbz	r2, 800f8ca <USBD_CDC_TransmitPacket+0x32>
{
 800f8a4:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800f8a6:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800f8aa:	b10c      	cbz	r4, 800f8b0 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f8ac:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800f8ae:	bd10      	pop	{r4, pc}
    hcdc->TxState = 1U;
 800f8b0:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f8b2:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800f8b4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f8b8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f8bc:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f8c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f8c2:	f000 fffd 	bl	80108c0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800f8c6:	4620      	mov	r0, r4
}
 800f8c8:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f8ca:	2003      	movs	r0, #3
}
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop

0800f8d0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8d0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800f8d4:	32b0      	adds	r2, #176	; 0xb0
 800f8d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
{
 800f8da:	b510      	push	{r4, lr}
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f8dc:	b19a      	cbz	r2, 800f906 <USBD_CDC_ReceivePacket+0x36>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8de:	7c04      	ldrb	r4, [r0, #16]
 800f8e0:	b144      	cbz	r4, 800f8f4 <USBD_CDC_ReceivePacket+0x24>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f8e2:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f8e4:	2340      	movs	r3, #64	; 0x40
 800f8e6:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800f8ea:	2101      	movs	r1, #1
 800f8ec:	f000 fff6 	bl	80108dc <USBD_LL_PrepareReceive>
}
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f8f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8f8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	f000 ffed 	bl	80108dc <USBD_LL_PrepareReceive>
}
 800f902:	4620      	mov	r0, r4
 800f904:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800f906:	2403      	movs	r4, #3
}
 800f908:	4620      	mov	r0, r4
 800f90a:	bd10      	pop	{r4, pc}

0800f90c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f90c:	b178      	cbz	r0, 800f92e <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f90e:	2300      	movs	r3, #0
 800f910:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800f914:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f918:	f8c0 32d0 	str.w	r3, [r0, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f91c:	b109      	cbz	r1, 800f922 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800f91e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f922:	2301      	movs	r3, #1
  pdev->id = id;
 800f924:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f926:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f92a:	f000 bf1d 	b.w	8010768 <USBD_LL_Init>

  return ret;
}
 800f92e:	2003      	movs	r0, #3
 800f930:	4770      	bx	lr
 800f932:	bf00      	nop

0800f934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f934:	b510      	push	{r4, lr}
  uint16_t len = 0U;
 800f936:	2300      	movs	r3, #0
{
 800f938:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800f93a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800f93e:	b189      	cbz	r1, 800f964 <USBD_RegisterClass+0x30>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f940:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800f942:	4604      	mov	r4, r0
  pdev->pClass[0] = pclass;
 800f944:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f948:	b123      	cbz	r3, 800f954 <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f94a:	f10d 0006 	add.w	r0, sp, #6
 800f94e:	4798      	blx	r3
 800f950:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f954:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 800f958:	2000      	movs	r0, #0
  pdev->NumClasses ++;
 800f95a:	3301      	adds	r3, #1
 800f95c:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
}
 800f960:	b002      	add	sp, #8
 800f962:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800f964:	2003      	movs	r0, #3
}
 800f966:	b002      	add	sp, #8
 800f968:	bd10      	pop	{r4, pc}
 800f96a:	bf00      	nop

0800f96c <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f96c:	f000 bf3c 	b.w	80107e8 <USBD_LL_Start>

0800f970 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f970:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f974:	b10b      	cbz	r3, 800f97a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop

0800f980 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f980:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f982:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 800f98a:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800f98c:	bf18      	it	ne
 800f98e:	2003      	movne	r0, #3
 800f990:	bd08      	pop	{r3, pc}
 800f992:	bf00      	nop

0800f994 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f994:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f996:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800f99a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f99c:	4628      	mov	r0, r5
 800f99e:	f000 fc1d 	bl	80101dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;
 800f9a2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 800f9a6:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800f9aa:	2201      	movs	r2, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800f9ac:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800f9b0:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800f9b4:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d009      	beq.n	800f9d0 <USBD_LL_SetupStage+0x3c>
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	d013      	beq.n	800f9e8 <USBD_LL_SetupStage+0x54>
 800f9c0:	b163      	cbz	r3, 800f9dc <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 800f9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f9cc:	f000 bf3a 	b.w	8010844 <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	4620      	mov	r0, r4
}
 800f9d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f9d8:	f000 bb0e 	b.w	800fff8 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4620      	mov	r0, r4
}
 800f9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f9e4:	f000 b958 	b.w	800fc98 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4620      	mov	r0, r4
}
 800f9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f9f0:	f000 bb44 	b.w	801007c <USBD_StdEPReq>

0800f9f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f9f4:	b570      	push	{r4, r5, r6, lr}
 800f9f6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 800f9f8:	b931      	cbnz	r1, 800fa08 <USBD_LL_DataOutStage+0x14>
 800f9fa:	460b      	mov	r3, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f9fc:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800fa00:	2903      	cmp	r1, #3
 800fa02:	d010      	beq.n	800fa26 <USBD_LL_DataOutStage+0x32>
      }
    }
  }

  return USBD_OK;
}
 800fa04:	2000      	movs	r0, #0
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa08:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fa0c:	2b03      	cmp	r3, #3
 800fa0e:	d1f9      	bne.n	800fa04 <USBD_LL_DataOutStage+0x10>
        if (pdev->pClass[idx]->DataOut != NULL)
 800fa10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fa14:	699b      	ldr	r3, [r3, #24]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d0f4      	beq.n	800fa04 <USBD_LL_DataOutStage+0x10>
          pdev->classId = idx;
 800fa1a:	2200      	movs	r2, #0
}
 800fa1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800fa20:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fa24:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800fa26:	e9d0 1557 	ldrd	r1, r5, [r0, #348]	; 0x15c
 800fa2a:	42a9      	cmp	r1, r5
 800fa2c:	d808      	bhi.n	800fa40 <USBD_LL_DataOutStage+0x4c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa2e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fa32:	2a03      	cmp	r2, #3
 800fa34:	d00f      	beq.n	800fa56 <USBD_LL_DataOutStage+0x62>
        (void)USBD_CtlSendStatus(pdev);
 800fa36:	4620      	mov	r0, r4
 800fa38:	f000 fc42 	bl	80102c0 <USBD_CtlSendStatus>
}
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800fa40:	1b4b      	subs	r3, r1, r5
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fa42:	4611      	mov	r1, r2
 800fa44:	462a      	mov	r2, r5
 800fa46:	429d      	cmp	r5, r3
        pep->rem_length -= pep->maxpacket;
 800fa48:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fa4c:	bf28      	it	cs
 800fa4e:	461a      	movcs	r2, r3
 800fa50:	f000 fc2c 	bl	80102ac <USBD_CtlContinueRx>
 800fa54:	e7d6      	b.n	800fa04 <USBD_LL_DataOutStage+0x10>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fa56:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800fa5a:	6912      	ldr	r2, [r2, #16]
 800fa5c:	2a00      	cmp	r2, #0
 800fa5e:	d0ea      	beq.n	800fa36 <USBD_LL_DataOutStage+0x42>
              pdev->classId = idx;
 800fa60:	f8c0 32d4 	str.w	r3, [r0, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fa64:	4790      	blx	r2
 800fa66:	e7e6      	b.n	800fa36 <USBD_LL_DataOutStage+0x42>

0800fa68 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fa6c:	b959      	cbnz	r1, 800fa86 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fa6e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d016      	beq.n	800faa4 <USBD_LL_DataInStage+0x3c>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fa76:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800fa7a:	b113      	cbz	r3, 800fa82 <USBD_LL_DataInStage+0x1a>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 800fa82:	2000      	movs	r0, #0
 800fa84:	bd70      	pop	{r4, r5, r6, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fa8a:	2b03      	cmp	r3, #3
 800fa8c:	d1f9      	bne.n	800fa82 <USBD_LL_DataInStage+0x1a>
        if (pdev->pClass[idx]->DataIn != NULL)
 800fa8e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fa92:	695b      	ldr	r3, [r3, #20]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d0f4      	beq.n	800fa82 <USBD_LL_DataInStage+0x1a>
          pdev->classId = idx;
 800fa98:	2200      	movs	r2, #0
}
 800fa9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 800fa9e:	f8c0 22d4 	str.w	r2, [r0, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800faa2:	4718      	bx	r3
      if (pep->rem_length > pep->maxpacket)
 800faa4:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 800faa8:	460d      	mov	r5, r1
 800faaa:	42b3      	cmp	r3, r6
 800faac:	d810      	bhi.n	800fad0 <USBD_LL_DataInStage+0x68>
        if ((pep->maxpacket == pep->rem_length) &&
 800faae:	d01c      	beq.n	800faea <USBD_LL_DataInStage+0x82>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fab0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800fab4:	2b03      	cmp	r3, #3
 800fab6:	d02b      	beq.n	800fb10 <USBD_LL_DataInStage+0xa8>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fab8:	2180      	movs	r1, #128	; 0x80
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 fec2 	bl	8010844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 fc09 	bl	80102d8 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode != 0U)
 800fac6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d0d9      	beq.n	800fa82 <USBD_LL_DataInStage+0x1a>
 800face:	e7d5      	b.n	800fa7c <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800fad0:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fad2:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800fad4:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fad6:	461a      	mov	r2, r3
 800fad8:	f000 fbd0 	bl	801027c <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fadc:	462b      	mov	r3, r5
 800fade:	462a      	mov	r2, r5
 800fae0:	4629      	mov	r1, r5
 800fae2:	4620      	mov	r0, r4
 800fae4:	f000 fefa 	bl	80108dc <USBD_LL_PrepareReceive>
 800fae8:	e7c5      	b.n	800fa76 <USBD_LL_DataInStage+0xe>
            (pep->total_length >= pep->maxpacket) &&
 800faea:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800faec:	4293      	cmp	r3, r2
 800faee:	d8df      	bhi.n	800fab0 <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 800faf0:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d2db      	bcs.n	800fab0 <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800faf8:	460a      	mov	r2, r1
 800fafa:	f000 fbbf 	bl	801027c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fafe:	462b      	mov	r3, r5
 800fb00:	462a      	mov	r2, r5
 800fb02:	4629      	mov	r1, r5
 800fb04:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800fb06:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb0a:	f000 fee7 	bl	80108dc <USBD_LL_PrepareReceive>
 800fb0e:	e7b2      	b.n	800fa76 <USBD_LL_DataInStage+0xe>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fb10:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800fb14:	68db      	ldr	r3, [r3, #12]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d0ce      	beq.n	800fab8 <USBD_LL_DataInStage+0x50>
              pdev->classId = 0U;
 800fb1a:	2200      	movs	r2, #0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fb1c:	4620      	mov	r0, r4
              pdev->classId = 0U;
 800fb1e:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fb22:	4798      	blx	r3
 800fb24:	e7c8      	b.n	800fab8 <USBD_LL_DataInStage+0x50>
 800fb26:	bf00      	nop

0800fb28 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800fb2a:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb2c:	2201      	movs	r2, #1
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fb2e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
{
 800fb32:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb34:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->dev_config = 0U;
 800fb38:	6041      	str	r1, [r0, #4]
  pdev->ep0_state = USBD_EP0_IDLE;
 800fb3a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_remote_wakeup = 0U;
 800fb3e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800fb42:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
  if (pdev->pClass[0] != NULL)
 800fb46:	b11b      	cbz	r3, 800fb50 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	b10b      	cbz	r3, 800fb50 <USBD_LL_Reset+0x28>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fb4c:	4798      	blx	r3
 800fb4e:	b9b0      	cbnz	r0, 800fb7e <USBD_LL_Reset+0x56>
  USBD_StatusTypeDef ret = USBD_OK;
 800fb50:	2700      	movs	r7, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb52:	2340      	movs	r3, #64	; 0x40
 800fb54:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb56:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb58:	4620      	mov	r0, r4

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb5a:	461d      	mov	r5, r3
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	f000 fe51 	bl	8010804 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb62:	2200      	movs	r2, #0
 800fb64:	462b      	mov	r3, r5
 800fb66:	2180      	movs	r1, #128	; 0x80
 800fb68:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb6a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb6e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb72:	f000 fe47 	bl	8010804 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return ret;
}
 800fb76:	4638      	mov	r0, r7
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb78:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb7a:	6225      	str	r5, [r4, #32]
}
 800fb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = USBD_FAIL;
 800fb7e:	2703      	movs	r7, #3
 800fb80:	e7e7      	b.n	800fb52 <USBD_LL_Reset+0x2a>
 800fb82:	bf00      	nop

0800fb84 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb84:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 800fb86:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800fb88:	7419      	strb	r1, [r3, #16]
}
 800fb8a:	4770      	bx	lr

0800fb8c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fb8c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
{
 800fb90:	4603      	mov	r3, r0
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800fb92:	2a04      	cmp	r2, #4
 800fb94:	d004      	beq.n	800fba0 <USBD_LL_Suspend+0x14>
  {
    pdev->dev_old_state = pdev->dev_state;
 800fb96:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fb9a:	b2d2      	uxtb	r2, r2
 800fb9c:	f880 229d 	strb.w	r2, [r0, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fba0:	2204      	movs	r2, #4

  return USBD_OK;
}
 800fba2:	2000      	movs	r0, #0
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 800fba8:	4770      	bx	lr
 800fbaa:	bf00      	nop

0800fbac <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fbb0:	2b04      	cmp	r3, #4
 800fbb2:	d104      	bne.n	800fbbe <USBD_LL_Resume+0x12>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbb4:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop

0800fbc4 <USBD_LL_SOF>:
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbc4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fbc8:	2a03      	cmp	r2, #3
 800fbca:	d001      	beq.n	800fbd0 <USBD_LL_SOF+0xc>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 800fbcc:	2000      	movs	r0, #0
 800fbce:	4770      	bx	lr
{
 800fbd0:	b508      	push	{r3, lr}
    if (pdev->pClass[0] != NULL)
 800fbd2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fbd6:	b113      	cbz	r3, 800fbde <USBD_LL_SOF+0x1a>
      if (pdev->pClass[0]->SOF != NULL)
 800fbd8:	69db      	ldr	r3, [r3, #28]
 800fbda:	b103      	cbz	r3, 800fbde <USBD_LL_SOF+0x1a>
        (void)pdev->pClass[0]->SOF(pdev);
 800fbdc:	4798      	blx	r3
}
 800fbde:	2000      	movs	r0, #0
 800fbe0:	bd08      	pop	{r3, pc}
 800fbe2:	bf00      	nop

0800fbe4 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800fbe4:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800fbe8:	32ae      	adds	r2, #174	; 0xae
 800fbea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800fbee:	b15a      	cbz	r2, 800fc08 <USBD_LL_IsoINIncomplete+0x24>
{
 800fbf0:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbf2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fbf6:	2b03      	cmp	r3, #3
 800fbf8:	d001      	beq.n	800fbfe <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800fbfa:	2000      	movs	r0, #0
}
 800fbfc:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800fbfe:	6a13      	ldr	r3, [r2, #32]
 800fc00:	b123      	cbz	r3, 800fc0c <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800fc02:	4798      	blx	r3
  return USBD_OK;
 800fc04:	2000      	movs	r0, #0
}
 800fc06:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fc08:	2003      	movs	r0, #3
}
 800fc0a:	4770      	bx	lr
  return USBD_OK;
 800fc0c:	4618      	mov	r0, r3
}
 800fc0e:	bd08      	pop	{r3, pc}

0800fc10 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 800fc10:	f8d0 22d4 	ldr.w	r2, [r0, #724]	; 0x2d4
 800fc14:	32ae      	adds	r2, #174	; 0xae
 800fc16:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800fc1a:	b15a      	cbz	r2, 800fc34 <USBD_LL_IsoOUTIncomplete+0x24>
{
 800fc1c:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc1e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d001      	beq.n	800fc2a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800fc26:	2000      	movs	r0, #0
}
 800fc28:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800fc2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fc2c:	b123      	cbz	r3, 800fc38 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800fc2e:	4798      	blx	r3
  return USBD_OK;
 800fc30:	2000      	movs	r0, #0
}
 800fc32:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800fc34:	2003      	movs	r0, #3
}
 800fc36:	4770      	bx	lr
  return USBD_OK;
 800fc38:	4618      	mov	r0, r3
}
 800fc3a:	bd08      	pop	{r3, pc}

0800fc3c <USBD_LL_DevConnected>:
 800fc3c:	2000      	movs	r0, #0
 800fc3e:	4770      	bx	lr

0800fc40 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc40:	2101      	movs	r1, #1
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fc42:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc46:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass[0] != NULL)
 800fc4a:	b142      	cbz	r2, 800fc5e <USBD_LL_DevDisconnected+0x1e>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fc4c:	6852      	ldr	r2, [r2, #4]
 800fc4e:	7901      	ldrb	r1, [r0, #4]
{
 800fc50:	b508      	push	{r3, lr}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800fc52:	4790      	blx	r2
 800fc54:	b908      	cbnz	r0, 800fc5a <USBD_LL_DevDisconnected+0x1a>
  USBD_StatusTypeDef   ret = USBD_OK;
 800fc56:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 800fc58:	bd08      	pop	{r3, pc}
      ret = USBD_FAIL;
 800fc5a:	2003      	movs	r0, #3
}
 800fc5c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 800fc5e:	2000      	movs	r0, #0
}
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop

0800fc64 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800fc64:	2000      	movs	r0, #0
 800fc66:	4770      	bx	lr

0800fc68 <USBD_CoreFindEP>:
 800fc68:	2000      	movs	r0, #0
 800fc6a:	4770      	bx	lr

0800fc6c <USBD_GetEpDesc>:
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800fc6c:	7802      	ldrb	r2, [r0, #0]
 800fc6e:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 800fc72:	b293      	uxth	r3, r2
 800fc74:	4594      	cmp	ip, r2
 800fc76:	d803      	bhi.n	800fc80 <USBD_GetEpDesc+0x14>
 800fc78:	e00c      	b.n	800fc94 <USBD_GetEpDesc+0x28>
  {
    ptr = desc->bLength;

    while (ptr < desc->wTotalLength)
 800fc7a:	459c      	cmp	ip, r3
 800fc7c:	d90a      	bls.n	800fc94 <USBD_GetEpDesc+0x28>
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800fc7e:	7802      	ldrb	r2, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800fc80:	4410      	add	r0, r2
  *ptr += pnext->bLength;
 800fc82:	4413      	add	r3, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fc84:	7842      	ldrb	r2, [r0, #1]
  *ptr += pnext->bLength;
 800fc86:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fc88:	2a05      	cmp	r2, #5
 800fc8a:	d1f6      	bne.n	800fc7a <USBD_GetEpDesc+0xe>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800fc8c:	7882      	ldrb	r2, [r0, #2]
 800fc8e:	428a      	cmp	r2, r1
 800fc90:	d1f3      	bne.n	800fc7a <USBD_GetEpDesc+0xe>
}
 800fc92:	4770      	bx	lr
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800fc94:	2000      	movs	r0, #0
}
 800fc96:	4770      	bx	lr

0800fc98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc9a:	780c      	ldrb	r4, [r1, #0]
 800fc9c:	b083      	sub	sp, #12
 800fc9e:	460e      	mov	r6, r1
 800fca0:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fca2:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800fca6:	2c20      	cmp	r4, #32
 800fca8:	d00e      	beq.n	800fcc8 <USBD_StdDevReq+0x30>
 800fcaa:	2c40      	cmp	r4, #64	; 0x40
 800fcac:	d00c      	beq.n	800fcc8 <USBD_StdDevReq+0x30>
 800fcae:	b1bc      	cbz	r4, 800fce0 <USBD_StdDevReq+0x48>
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcb0:	2180      	movs	r1, #128	; 0x80
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	f000 fdc6 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcb8:	2100      	movs	r1, #0
 800fcba:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800fcbc:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcbe:	f000 fdc1 	bl	8010844 <USBD_LL_StallEP>
}
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	b003      	add	sp, #12
 800fcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fcc8:	f8d5 32d4 	ldr.w	r3, [r5, #724]	; 0x2d4
 800fccc:	4631      	mov	r1, r6
 800fcce:	4628      	mov	r0, r5
 800fcd0:	33ae      	adds	r3, #174	; 0xae
 800fcd2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800fcd6:	689b      	ldr	r3, [r3, #8]
}
 800fcd8:	b003      	add	sp, #12
 800fcda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800fcde:	4718      	bx	r3
      switch (req->bRequest)
 800fce0:	784b      	ldrb	r3, [r1, #1]
 800fce2:	2b09      	cmp	r3, #9
 800fce4:	d8e4      	bhi.n	800fcb0 <USBD_StdDevReq+0x18>
 800fce6:	a201      	add	r2, pc, #4	; (adr r2, 800fcec <USBD_StdDevReq+0x54>)
 800fce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcec:	0800fd4d 	.word	0x0800fd4d
 800fcf0:	0800fd7b 	.word	0x0800fd7b
 800fcf4:	0800fcb1 	.word	0x0800fcb1
 800fcf8:	0800fd99 	.word	0x0800fd99
 800fcfc:	0800fcb1 	.word	0x0800fcb1
 800fd00:	0800fdbb 	.word	0x0800fdbb
 800fd04:	0800fdf3 	.word	0x0800fdf3
 800fd08:	0800fcb1 	.word	0x0800fcb1
 800fd0c:	0800fe25 	.word	0x0800fe25
 800fd10:	0800fd15 	.word	0x0800fd15
  cfgidx = (uint8_t)(req->wValue);
 800fd14:	7889      	ldrb	r1, [r1, #2]
 800fd16:	4eb3      	ldr	r6, [pc, #716]	; (800ffe4 <USBD_StdDevReq+0x34c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd18:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800fd1a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd1c:	f200 8150 	bhi.w	800ffc0 <USBD_StdDevReq+0x328>
  switch (pdev->dev_state)
 800fd20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	b2df      	uxtb	r7, r3
 800fd28:	f000 810e 	beq.w	800ff48 <USBD_StdDevReq+0x2b0>
 800fd2c:	2f03      	cmp	r7, #3
 800fd2e:	f000 811f 	beq.w	800ff70 <USBD_StdDevReq+0x2d8>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd32:	2180      	movs	r1, #128	; 0x80
      ret = USBD_FAIL;
 800fd34:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd36:	f000 fd85 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f000 fd81 	bl	8010844 <USBD_LL_StallEP>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd42:	7831      	ldrb	r1, [r6, #0]
 800fd44:	4628      	mov	r0, r5
 800fd46:	f7ff fe1b 	bl	800f980 <USBD_ClrClassConfig>
      break;
 800fd4a:	e7ba      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800fd4c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800fd50:	3a01      	subs	r2, #1
 800fd52:	2a02      	cmp	r2, #2
 800fd54:	d826      	bhi.n	800fda4 <USBD_StdDevReq+0x10c>
      if (req->wLength != 0x2U)
 800fd56:	88ca      	ldrh	r2, [r1, #6]
 800fd58:	2a02      	cmp	r2, #2
 800fd5a:	d123      	bne.n	800fda4 <USBD_StdDevReq+0x10c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fd5c:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup != 0U)
 800fd5e:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fd62:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800fd64:	b10a      	cbz	r2, 800fd6a <USBD_StdDevReq+0xd2>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fd66:	2203      	movs	r2, #3
 800fd68:	60c2      	str	r2, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fd6a:	2202      	movs	r2, #2
 800fd6c:	f105 010c 	add.w	r1, r5, #12
 800fd70:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 800fd72:	461c      	mov	r4, r3
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fd74:	f000 fa74 	bl	8010260 <USBD_CtlSendData>
      break;
 800fd78:	e7a3      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800fd7a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d80f      	bhi.n	800fda4 <USBD_StdDevReq+0x10c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd84:	884b      	ldrh	r3, [r1, #2]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d19b      	bne.n	800fcc2 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800fd8a:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 800fd8c:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 800fd8e:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd92:	f000 fa95 	bl	80102c0 <USBD_CtlSendStatus>
 800fd96:	e794      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd98:	884b      	ldrh	r3, [r1, #2]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d0f6      	beq.n	800fd8c <USBD_StdDevReq+0xf4>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	f000 8107 	beq.w	800ffb2 <USBD_StdDevReq+0x31a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fda4:	2180      	movs	r1, #128	; 0x80
 800fda6:	4628      	mov	r0, r5
 800fda8:	f000 fd4c 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fdac:	2100      	movs	r1, #0
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f000 fd48 	bl	8010844 <USBD_LL_StallEP>
}
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	b003      	add	sp, #12
 800fdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fdba:	888b      	ldrh	r3, [r1, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1f1      	bne.n	800fda4 <USBD_StdDevReq+0x10c>
 800fdc0:	88cb      	ldrh	r3, [r1, #6]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1ee      	bne.n	800fda4 <USBD_StdDevReq+0x10c>
 800fdc6:	884e      	ldrh	r6, [r1, #2]
 800fdc8:	2e7f      	cmp	r6, #127	; 0x7f
 800fdca:	d8eb      	bhi.n	800fda4 <USBD_StdDevReq+0x10c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800fdd0:	2b03      	cmp	r3, #3
 800fdd2:	d0e7      	beq.n	800fda4 <USBD_StdDevReq+0x10c>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fdd4:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800fdd6:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fdda:	f000 fd63 	bl	80108a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fdde:	4628      	mov	r0, r5
 800fde0:	f000 fa6e 	bl	80102c0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800fde4:	2e00      	cmp	r6, #0
 800fde6:	f040 80e0 	bne.w	800ffaa <USBD_StdDevReq+0x312>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fdea:	2301      	movs	r3, #1
 800fdec:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800fdf0:	e767      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 800fdf2:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800fdf4:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800fdf6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800fdfa:	0a13      	lsrs	r3, r2, #8
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	2b06      	cmp	r3, #6
 800fe00:	d8d0      	bhi.n	800fda4 <USBD_StdDevReq+0x10c>
 800fe02:	a101      	add	r1, pc, #4	; (adr r1, 800fe08 <USBD_StdDevReq+0x170>)
 800fe04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe08:	0800feb1 	.word	0x0800feb1
 800fe0c:	0800fe97 	.word	0x0800fe97
 800fe10:	0800fec1 	.word	0x0800fec1
 800fe14:	0800fda5 	.word	0x0800fda5
 800fe18:	0800fda5 	.word	0x0800fda5
 800fe1c:	0800fe83 	.word	0x0800fe83
 800fe20:	0800fe4b 	.word	0x0800fe4b
  if (req->wLength != 1U)
 800fe24:	88ca      	ldrh	r2, [r1, #6]
 800fe26:	2a01      	cmp	r2, #1
 800fe28:	d1bc      	bne.n	800fda4 <USBD_StdDevReq+0x10c>
    switch (pdev->dev_state)
 800fe2a:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 800fe2e:	2902      	cmp	r1, #2
 800fe30:	b2cb      	uxtb	r3, r1
 800fe32:	f200 8082 	bhi.w	800ff3a <USBD_StdDevReq+0x2a2>
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	f43f af3a 	beq.w	800fcb0 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	2300      	movs	r3, #0
 800fe40:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fe44:	f000 fa0c 	bl	8010260 <USBD_CtlSendData>
        break;
 800fe48:	e73b      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe4a:	7c03      	ldrb	r3, [r0, #16]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d1a9      	bne.n	800fda4 <USBD_StdDevReq+0x10c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fe50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fe54:	f10d 0006 	add.w	r0, sp, #6
 800fe58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe5c:	2307      	movs	r3, #7
 800fe5e:	7043      	strb	r3, [r0, #1]
  if (req->wLength != 0U)
 800fe60:	88f2      	ldrh	r2, [r6, #6]
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	d065      	beq.n	800ff32 <USBD_StdDevReq+0x29a>
    if (len != 0U)
 800fe66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d09a      	beq.n	800fda4 <USBD_StdDevReq+0x10c>
      len = MIN(len, req->wLength);
 800fe6e:	429a      	cmp	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe70:	4601      	mov	r1, r0
 800fe72:	4628      	mov	r0, r5
      len = MIN(len, req->wLength);
 800fe74:	bf28      	it	cs
 800fe76:	461a      	movcs	r2, r3
 800fe78:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe7c:	f000 f9f0 	bl	8010260 <USBD_CtlSendData>
 800fe80:	e71f      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe82:	7c03      	ldrb	r3, [r0, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d18d      	bne.n	800fda4 <USBD_StdDevReq+0x10c>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fe88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fe8c:	f10d 0006 	add.w	r0, sp, #6
 800fe90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe92:	4798      	blx	r3
  if (err != 0U)
 800fe94:	e7e4      	b.n	800fe60 <USBD_StdDevReq+0x1c8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe96:	7c03      	ldrb	r3, [r0, #16]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f040 809a 	bne.w	800ffd2 <USBD_StdDevReq+0x33a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fe9e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fea2:	f10d 0006 	add.w	r0, sp, #6
 800fea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800feaa:	2302      	movs	r3, #2
 800feac:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800feae:	e7d7      	b.n	800fe60 <USBD_StdDevReq+0x1c8>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800feb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800feb4:	f10d 0106 	add.w	r1, sp, #6
 800feb8:	7c00      	ldrb	r0, [r0, #16]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4798      	blx	r3
  if (err != 0U)
 800febe:	e7cf      	b.n	800fe60 <USBD_StdDevReq+0x1c8>
      switch ((uint8_t)(req->wValue))
 800fec0:	b2d2      	uxtb	r2, r2
 800fec2:	2a05      	cmp	r2, #5
 800fec4:	f63f af6e 	bhi.w	800fda4 <USBD_StdDevReq+0x10c>
 800fec8:	e8df f002 	tbb	[pc, r2]
 800fecc:	141a2026 	.word	0x141a2026
 800fed0:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fed2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fed6:	699b      	ldr	r3, [r3, #24]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	f43f af63 	beq.w	800fda4 <USBD_StdDevReq+0x10c>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fede:	f10d 0106 	add.w	r1, sp, #6
 800fee2:	7c28      	ldrb	r0, [r5, #16]
 800fee4:	4798      	blx	r3
  if (err != 0U)
 800fee6:	e7bb      	b.n	800fe60 <USBD_StdDevReq+0x1c8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fee8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1f5      	bne.n	800fede <USBD_StdDevReq+0x246>
 800fef2:	e757      	b.n	800fda4 <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fef4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1ef      	bne.n	800fede <USBD_StdDevReq+0x246>
 800fefe:	e751      	b.n	800fda4 <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ff00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1e9      	bne.n	800fede <USBD_StdDevReq+0x246>
 800ff0a:	e74b      	b.n	800fda4 <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ff0c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d1e3      	bne.n	800fede <USBD_StdDevReq+0x246>
 800ff16:	e745      	b.n	800fda4 <USBD_StdDevReq+0x10c>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1dd      	bne.n	800fede <USBD_StdDevReq+0x246>
 800ff22:	e73f      	b.n	800fda4 <USBD_StdDevReq+0x10c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff24:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800ff26:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff28:	460c      	mov	r4, r1
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff2a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff2e:	f7ff fd27 	bl	800f980 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ff32:	4628      	mov	r0, r5
 800ff34:	f000 f9c4 	bl	80102c0 <USBD_CtlSendStatus>
 800ff38:	e6c3      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 800ff3a:	2b03      	cmp	r3, #3
 800ff3c:	f47f aeb8 	bne.w	800fcb0 <USBD_StdDevReq+0x18>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff40:	1d01      	adds	r1, r0, #4
 800ff42:	f000 f98d 	bl	8010260 <USBD_CtlSendData>
        break;
 800ff46:	e6bc      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
      if (cfgidx != 0U)
 800ff48:	2900      	cmp	r1, #0
 800ff4a:	d0f2      	beq.n	800ff32 <USBD_StdDevReq+0x29a>
        pdev->dev_config = cfgidx;
 800ff4c:	2101      	movs	r1, #1
 800ff4e:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff50:	f7ff fd0e 	bl	800f970 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800ff54:	4604      	mov	r4, r0
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d046      	beq.n	800ffe8 <USBD_StdDevReq+0x350>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff5a:	2180      	movs	r1, #128	; 0x80
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	f000 fc71 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff62:	2100      	movs	r1, #0
 800ff64:	4628      	mov	r0, r5
 800ff66:	f000 fc6d 	bl	8010844 <USBD_LL_StallEP>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff6a:	f885 729c 	strb.w	r7, [r5, #668]	; 0x29c
 800ff6e:	e6a8      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
      if (cfgidx == 0U)
 800ff70:	2900      	cmp	r1, #0
 800ff72:	d0d7      	beq.n	800ff24 <USBD_StdDevReq+0x28c>
      else if (cfgidx != pdev->dev_config)
 800ff74:	6841      	ldr	r1, [r0, #4]
 800ff76:	2901      	cmp	r1, #1
 800ff78:	d0db      	beq.n	800ff32 <USBD_StdDevReq+0x29a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff7a:	b2c9      	uxtb	r1, r1
 800ff7c:	f7ff fd00 	bl	800f980 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff80:	7831      	ldrb	r1, [r6, #0]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff82:	4628      	mov	r0, r5
        pdev->dev_config = cfgidx;
 800ff84:	6069      	str	r1, [r5, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff86:	f7ff fcf3 	bl	800f970 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d0d0      	beq.n	800ff32 <USBD_StdDevReq+0x29a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff90:	2180      	movs	r1, #128	; 0x80
 800ff92:	4628      	mov	r0, r5
 800ff94:	f000 fc56 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff98:	2100      	movs	r1, #0
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	4634      	mov	r4, r6
 800ff9e:	f000 fc51 	bl	8010844 <USBD_LL_StallEP>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffa2:	7929      	ldrb	r1, [r5, #4]
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	f7ff fceb 	bl	800f980 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffaa:	2302      	movs	r3, #2
 800ffac:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800ffb0:	e687      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ffb2:	888b      	ldrh	r3, [r1, #4]
 800ffb4:	0a1b      	lsrs	r3, r3, #8
 800ffb6:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ffba:	f000 f981 	bl	80102c0 <USBD_CtlSendStatus>
 800ffbe:	e680      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffc0:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800ffc2:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ffc4:	f000 fc3e 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ffc8:	2100      	movs	r1, #0
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f000 fc3a 	bl	8010844 <USBD_LL_StallEP>
    return USBD_FAIL;
 800ffd0:	e677      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ffd2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ffd6:	f10d 0006 	add.w	r0, sp, #6
 800ffda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffdc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ffde:	2302      	movs	r3, #2
 800ffe0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ffe2:	e73d      	b.n	800fe60 <USBD_StdDevReq+0x1c8>
 800ffe4:	2400b9e0 	.word	0x2400b9e0
          (void)USBD_CtlSendStatus(pdev);
 800ffe8:	4628      	mov	r0, r5
 800ffea:	f000 f969 	bl	80102c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ffee:	2303      	movs	r3, #3
 800fff0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 800fff4:	e665      	b.n	800fcc2 <USBD_StdDevReq+0x2a>
 800fff6:	bf00      	nop

0800fff8 <USBD_StdItfReq>:
{
 800fff8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fffa:	780b      	ldrb	r3, [r1, #0]
{
 800fffc:	460d      	mov	r5, r1
 800fffe:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010000:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8010004:	2a40      	cmp	r2, #64	; 0x40
 8010006:	d00b      	beq.n	8010020 <USBD_StdItfReq+0x28>
 8010008:	065b      	lsls	r3, r3, #25
 801000a:	d509      	bpl.n	8010020 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 801000c:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801000e:	2180      	movs	r1, #128	; 0x80
 8010010:	f000 fc18 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010014:	4620      	mov	r0, r4
 8010016:	4629      	mov	r1, r5
 8010018:	f000 fc14 	bl	8010844 <USBD_LL_StallEP>
}
 801001c:	4628      	mov	r0, r5
 801001e:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8010020:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8010024:	3b01      	subs	r3, #1
 8010026:	2b02      	cmp	r3, #2
 8010028:	d802      	bhi.n	8010030 <USBD_StdItfReq+0x38>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801002a:	7929      	ldrb	r1, [r5, #4]
 801002c:	2901      	cmp	r1, #1
 801002e:	d90a      	bls.n	8010046 <USBD_StdItfReq+0x4e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010030:	2180      	movs	r1, #128	; 0x80
 8010032:	4620      	mov	r0, r4
 8010034:	f000 fc06 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010038:	2100      	movs	r1, #0
 801003a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 801003c:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801003e:	f000 fc01 	bl	8010844 <USBD_LL_StallEP>
}
 8010042:	4628      	mov	r0, r5
 8010044:	bd38      	pop	{r3, r4, r5, pc}
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010046:	4620      	mov	r0, r4
 8010048:	f7ff fe0c 	bl	800fc64 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801004c:	b990      	cbnz	r0, 8010074 <USBD_StdItfReq+0x7c>
              if (pdev->pClass[idx]->Setup != NULL)
 801004e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010052:	689b      	ldr	r3, [r3, #8]
 8010054:	b173      	cbz	r3, 8010074 <USBD_StdItfReq+0x7c>
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010056:	4629      	mov	r1, r5
                pdev->classId = idx;
 8010058:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801005c:	4620      	mov	r0, r4
 801005e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010060:	88eb      	ldrh	r3, [r5, #6]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010062:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1d9      	bne.n	801001c <USBD_StdItfReq+0x24>
 8010068:	2800      	cmp	r0, #0
 801006a:	d1d7      	bne.n	801001c <USBD_StdItfReq+0x24>
              (void)USBD_CtlSendStatus(pdev);
 801006c:	4620      	mov	r0, r4
 801006e:	f000 f927 	bl	80102c0 <USBD_CtlSendStatus>
 8010072:	e7d3      	b.n	801001c <USBD_StdItfReq+0x24>
              ret = USBD_FAIL;
 8010074:	2503      	movs	r5, #3
}
 8010076:	4628      	mov	r0, r5
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	bf00      	nop

0801007c <USBD_StdEPReq>:
{
 801007c:	b530      	push	{r4, r5, lr}
 801007e:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 8010080:	888a      	ldrh	r2, [r1, #4]
{
 8010082:	b083      	sub	sp, #12
 8010084:	4605      	mov	r5, r0
  ep_addr = LOBYTE(req->wIndex);
 8010086:	7823      	ldrb	r3, [r4, #0]
 8010088:	b2d1      	uxtb	r1, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801008a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801008e:	2b20      	cmp	r3, #32
 8010090:	d01e      	beq.n	80100d0 <USBD_StdEPReq+0x54>
 8010092:	2b40      	cmp	r3, #64	; 0x40
 8010094:	d01c      	beq.n	80100d0 <USBD_StdEPReq+0x54>
 8010096:	b36b      	cbz	r3, 80100f4 <USBD_StdEPReq+0x78>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010098:	2180      	movs	r1, #128	; 0x80
 801009a:	4628      	mov	r0, r5
 801009c:	f000 fbd2 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80100a0:	2100      	movs	r1, #0
 80100a2:	4628      	mov	r0, r5
 80100a4:	f000 fbce 	bl	8010844 <USBD_LL_StallEP>
}
 80100a8:	2000      	movs	r0, #0
 80100aa:	b003      	add	sp, #12
 80100ac:	bd30      	pop	{r4, r5, pc}
          switch (pdev->dev_state)
 80100ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100b2:	2b02      	cmp	r3, #2
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	d059      	beq.n	801016c <USBD_StdEPReq+0xf0>
 80100b8:	2a03      	cmp	r2, #3
 80100ba:	d1ed      	bne.n	8010098 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80100bc:	8863      	ldrh	r3, [r4, #2]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1f2      	bne.n	80100a8 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80100c2:	064b      	lsls	r3, r1, #25
 80100c4:	d17e      	bne.n	80101c4 <USBD_StdEPReq+0x148>
                (void)USBD_CtlSendStatus(pdev);
 80100c6:	4628      	mov	r0, r5
 80100c8:	9101      	str	r1, [sp, #4]
 80100ca:	f000 f8f9 	bl	80102c0 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80100ce:	9901      	ldr	r1, [sp, #4]
 80100d0:	4628      	mov	r0, r5
 80100d2:	f7ff fdc9 	bl	800fc68 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d1e6      	bne.n	80100a8 <USBD_StdEPReq+0x2c>
                  if (pdev->pClass[idx]->Setup != NULL)
 80100da:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
                  pdev->classId = idx;
 80100de:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d0df      	beq.n	80100a8 <USBD_StdEPReq+0x2c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100e8:	4621      	mov	r1, r4
 80100ea:	4628      	mov	r0, r5
}
 80100ec:	b003      	add	sp, #12
 80100ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80100f2:	4718      	bx	r3
      switch (req->bRequest)
 80100f4:	7863      	ldrb	r3, [r4, #1]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d0d9      	beq.n	80100ae <USBD_StdEPReq+0x32>
 80100fa:	2b03      	cmp	r3, #3
 80100fc:	d024      	beq.n	8010148 <USBD_StdEPReq+0xcc>
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1ca      	bne.n	8010098 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8010102:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010106:	2b02      	cmp	r3, #2
 8010108:	b2d8      	uxtb	r0, r3
 801010a:	d038      	beq.n	801017e <USBD_StdEPReq+0x102>
 801010c:	2803      	cmp	r0, #3
 801010e:	d1c3      	bne.n	8010098 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010110:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8010114:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010116:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801011a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 801011e:	d43f      	bmi.n	80101a0 <USBD_StdEPReq+0x124>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010120:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8010124:	2b00      	cmp	r3, #0
 8010126:	d0b7      	beq.n	8010098 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010128:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801012c:	2414      	movs	r4, #20
 801012e:	fb04 5403 	mla	r4, r4, r3, r5
 8010132:	f504 74aa 	add.w	r4, r4, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010136:	2b00      	cmp	r3, #0
 8010138:	d13e      	bne.n	80101b8 <USBD_StdEPReq+0x13c>
                pep->status = 0x0001U;
 801013a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801013c:	2202      	movs	r2, #2
 801013e:	4621      	mov	r1, r4
 8010140:	4628      	mov	r0, r5
 8010142:	f000 f88d 	bl	8010260 <USBD_CtlSendData>
              break;
 8010146:	e7af      	b.n	80100a8 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8010148:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801014c:	2b02      	cmp	r3, #2
 801014e:	b2da      	uxtb	r2, r3
 8010150:	d00c      	beq.n	801016c <USBD_StdEPReq+0xf0>
 8010152:	2a03      	cmp	r2, #3
 8010154:	d1a0      	bne.n	8010098 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010156:	8863      	ldrh	r3, [r4, #2]
 8010158:	b923      	cbnz	r3, 8010164 <USBD_StdEPReq+0xe8>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801015a:	0648      	lsls	r0, r1, #25
 801015c:	d002      	beq.n	8010164 <USBD_StdEPReq+0xe8>
 801015e:	88e3      	ldrh	r3, [r4, #6]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d036      	beq.n	80101d2 <USBD_StdEPReq+0x156>
              (void)USBD_CtlSendStatus(pdev);
 8010164:	4628      	mov	r0, r5
 8010166:	f000 f8ab 	bl	80102c0 <USBD_CtlSendStatus>
              break;
 801016a:	e79d      	b.n	80100a8 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801016c:	064a      	lsls	r2, r1, #25
 801016e:	d093      	beq.n	8010098 <USBD_StdEPReq+0x1c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010170:	f000 fb68 	bl	8010844 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010174:	2180      	movs	r1, #128	; 0x80
 8010176:	4628      	mov	r0, r5
 8010178:	f000 fb64 	bl	8010844 <USBD_LL_StallEP>
 801017c:	e794      	b.n	80100a8 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801017e:	0648      	lsls	r0, r1, #25
 8010180:	d18a      	bne.n	8010098 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010182:	0611      	lsls	r1, r2, #24
              pep->status = 0x0000U;
 8010184:	f04f 0300 	mov.w	r3, #0
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010188:	f04f 0202 	mov.w	r2, #2
 801018c:	4628      	mov	r0, r5
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801018e:	bf4c      	ite	mi
 8010190:	f105 0114 	addmi.w	r1, r5, #20
 8010194:	f505 71aa 	addpl.w	r1, r5, #340	; 0x154
              pep->status = 0x0000U;
 8010198:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801019a:	f000 f861 	bl	8010260 <USBD_CtlSendData>
              break;
 801019e:	e783      	b.n	80100a8 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80101a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f43f af78 	beq.w	8010098 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80101a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80101ac:	1c5c      	adds	r4, r3, #1
 80101ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80101b2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80101b6:	e7be      	b.n	8010136 <USBD_StdEPReq+0xba>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80101b8:	4628      	mov	r0, r5
 80101ba:	f000 fb5f 	bl	801087c <USBD_LL_IsStallEP>
 80101be:	b130      	cbz	r0, 80101ce <USBD_StdEPReq+0x152>
                pep->status = 0x0001U;
 80101c0:	2301      	movs	r3, #1
 80101c2:	e7ba      	b.n	801013a <USBD_StdEPReq+0xbe>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80101c4:	9101      	str	r1, [sp, #4]
 80101c6:	f000 fb4b 	bl	8010860 <USBD_LL_ClearStallEP>
 80101ca:	9901      	ldr	r1, [sp, #4]
 80101cc:	e77b      	b.n	80100c6 <USBD_StdEPReq+0x4a>
                pep->status = 0x0000U;
 80101ce:	6020      	str	r0, [r4, #0]
 80101d0:	e7b4      	b.n	801013c <USBD_StdEPReq+0xc0>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80101d2:	4628      	mov	r0, r5
 80101d4:	f000 fb36 	bl	8010844 <USBD_LL_StallEP>
 80101d8:	e7c4      	b.n	8010164 <USBD_StdEPReq+0xe8>
 80101da:	bf00      	nop

080101dc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80101dc:	780b      	ldrb	r3, [r1, #0]
 80101de:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80101e0:	784b      	ldrb	r3, [r1, #1]
 80101e2:	7043      	strb	r3, [r0, #1]
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80101e4:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80101e6:	8043      	strh	r3, [r0, #2]
 80101e8:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 80101ea:	8083      	strh	r3, [r0, #4]
 80101ec:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 80101ee:	80c3      	strh	r3, [r0, #6]
}
 80101f0:	4770      	bx	lr
 80101f2:	bf00      	nop

080101f4 <USBD_CtlError>:
{
 80101f4:	b510      	push	{r4, lr}
 80101f6:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80101f8:	2180      	movs	r1, #128	; 0x80
 80101fa:	f000 fb23 	bl	8010844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101fe:	2100      	movs	r1, #0
 8010200:	4620      	mov	r0, r4
}
 8010202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8010206:	f000 bb1d 	b.w	8010844 <USBD_LL_StallEP>
 801020a:	bf00      	nop

0801020c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 801020c:	b318      	cbz	r0, 8010256 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801020e:	7803      	ldrb	r3, [r0, #0]
{
 8010210:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8010212:	b30b      	cbz	r3, 8010258 <USBD_GetString+0x4c>
 8010214:	4604      	mov	r4, r0
 8010216:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 801021a:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 801021e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2d00      	cmp	r5, #0
 8010226:	d1f8      	bne.n	801021a <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010228:	3301      	adds	r3, #1
 801022a:	005b      	lsls	r3, r3, #1
 801022c:	b2dc      	uxtb	r4, r3
 801022e:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010230:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8010232:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010234:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8010236:	7804      	ldrb	r4, [r0, #0]
 8010238:	b15c      	cbz	r4, 8010252 <USBD_GetString+0x46>
  idx++;
 801023a:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 801023c:	2500      	movs	r5, #0
    idx++;
 801023e:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8010240:	54cc      	strb	r4, [r1, r3]
    idx++;
 8010242:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8010244:	b2d2      	uxtb	r2, r2
    idx++;
 8010246:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8010248:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 801024a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801024e:	2c00      	cmp	r4, #0
 8010250:	d1f5      	bne.n	801023e <USBD_GetString+0x32>
}
 8010252:	bc30      	pop	{r4, r5}
 8010254:	4770      	bx	lr
 8010256:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8010258:	2402      	movs	r4, #2
 801025a:	4623      	mov	r3, r4
 801025c:	e7e7      	b.n	801022e <USBD_GetString+0x22>
 801025e:	bf00      	nop

08010260 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010260:	b510      	push	{r4, lr}
 8010262:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010264:	2402      	movs	r4, #2
{
 8010266:	460a      	mov	r2, r1
#else
  pdev->ep_in[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010268:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801026a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 801026e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010272:	f000 fb25 	bl	80108c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010276:	2000      	movs	r0, #0
 8010278:	bd10      	pop	{r4, pc}
 801027a:	bf00      	nop

0801027c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801027c:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801027e:	2100      	movs	r1, #0
{
 8010280:	b508      	push	{r3, lr}
 8010282:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010284:	4662      	mov	r2, ip
 8010286:	f000 fb1b 	bl	80108c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 801028a:	2000      	movs	r0, #0
 801028c:	bd08      	pop	{r3, pc}
 801028e:	bf00      	nop

08010290 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010290:	b510      	push	{r4, lr}
 8010292:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010294:	2403      	movs	r4, #3
{
 8010296:	460a      	mov	r2, r1
#else
  pdev->ep_out[0].rem_length = len;
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010298:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801029a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 801029e:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102a2:	f000 fb1b 	bl	80108dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80102a6:	2000      	movs	r0, #0
 80102a8:	bd10      	pop	{r4, pc}
 80102aa:	bf00      	nop

080102ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80102ac:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102ae:	2100      	movs	r1, #0
{
 80102b0:	b508      	push	{r3, lr}
 80102b2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102b4:	4662      	mov	r2, ip
 80102b6:	f000 fb11 	bl	80108dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80102ba:	2000      	movs	r0, #0
 80102bc:	bd08      	pop	{r3, pc}
 80102be:	bf00      	nop

080102c0 <USBD_CtlSendStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102c0:	2300      	movs	r3, #0
{
 80102c2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102c4:	2404      	movs	r4, #4
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102c6:	461a      	mov	r2, r3
 80102c8:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102ca:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102ce:	f000 faf7 	bl	80108c0 <USBD_LL_Transmit>

  return USBD_OK;
}
 80102d2:	2000      	movs	r0, #0
 80102d4:	bd10      	pop	{r4, pc}
 80102d6:	bf00      	nop

080102d8 <USBD_CtlReceiveStatus>:
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102d8:	2300      	movs	r3, #0
{
 80102da:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102dc:	2405      	movs	r4, #5
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102de:	461a      	mov	r2, r3
 80102e0:	4619      	mov	r1, r3
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102e2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102e6:	f000 faf9 	bl	80108dc <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80102ea:	2000      	movs	r0, #0
 80102ec:	bd10      	pop	{r4, pc}
 80102ee:	bf00      	nop

080102f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80102f2:	2200      	movs	r2, #0
 80102f4:	4919      	ldr	r1, [pc, #100]	; (801035c <MX_USB_DEVICE_Init+0x6c>)
 80102f6:	481a      	ldr	r0, [pc, #104]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 80102f8:	f7ff fb08 	bl	800f90c <USBD_Init>
 80102fc:	b988      	cbnz	r0, 8010322 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80102fe:	4919      	ldr	r1, [pc, #100]	; (8010364 <MX_USB_DEVICE_Init+0x74>)
 8010300:	4817      	ldr	r0, [pc, #92]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 8010302:	f7ff fb17 	bl	800f934 <USBD_RegisterClass>
 8010306:	b9a0      	cbnz	r0, 8010332 <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010308:	4917      	ldr	r1, [pc, #92]	; (8010368 <MX_USB_DEVICE_Init+0x78>)
 801030a:	4815      	ldr	r0, [pc, #84]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 801030c:	f7ff fa9e 	bl	800f84c <USBD_CDC_RegisterInterface>
 8010310:	b9b8      	cbnz	r0, 8010342 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010312:	4813      	ldr	r0, [pc, #76]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 8010314:	f7ff fb2a 	bl	800f96c <USBD_Start>
 8010318:	b9d0      	cbnz	r0, 8010350 <MX_USB_DEVICE_Init+0x60>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801031a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 801031e:	f7fa bdc5 	b.w	800aeac <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 8010322:	f7f4 ff07 	bl	8005134 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010326:	490f      	ldr	r1, [pc, #60]	; (8010364 <MX_USB_DEVICE_Init+0x74>)
 8010328:	480d      	ldr	r0, [pc, #52]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 801032a:	f7ff fb03 	bl	800f934 <USBD_RegisterClass>
 801032e:	2800      	cmp	r0, #0
 8010330:	d0ea      	beq.n	8010308 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8010332:	f7f4 feff 	bl	8005134 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010336:	490c      	ldr	r1, [pc, #48]	; (8010368 <MX_USB_DEVICE_Init+0x78>)
 8010338:	4809      	ldr	r0, [pc, #36]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 801033a:	f7ff fa87 	bl	800f84c <USBD_CDC_RegisterInterface>
 801033e:	2800      	cmp	r0, #0
 8010340:	d0e7      	beq.n	8010312 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8010342:	f7f4 fef7 	bl	8005134 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010346:	4806      	ldr	r0, [pc, #24]	; (8010360 <MX_USB_DEVICE_Init+0x70>)
 8010348:	f7ff fb10 	bl	800f96c <USBD_Start>
 801034c:	2800      	cmp	r0, #0
 801034e:	d0e4      	beq.n	801031a <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 8010350:	f7f4 fef0 	bl	8005134 <Error_Handler>
}
 8010354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8010358:	f7fa bda8 	b.w	800aeac <HAL_PWREx_EnableUSBVoltageDetector>
 801035c:	240003c4 	.word	0x240003c4
 8010360:	2400b9e4 	.word	0x2400b9e4
 8010364:	24000320 	.word	0x24000320
 8010368:	240003a8 	.word	0x240003a8

0801036c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 801036c:	2000      	movs	r0, #0
 801036e:	4770      	bx	lr

08010370 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8010370:	2000      	movs	r0, #0
 8010372:	4770      	bx	lr

08010374 <CDC_Receive_FS>:
{
 8010374:	b570      	push	{r4, r5, r6, lr}
 8010376:	4604      	mov	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010378:	4e08      	ldr	r6, [pc, #32]	; (801039c <CDC_Receive_FS+0x28>)
{
 801037a:	460d      	mov	r5, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801037c:	4630      	mov	r0, r6
 801037e:	4621      	mov	r1, r4
 8010380:	f7ff fa7e 	bl	800f880 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 8010384:	4630      	mov	r0, r6
 8010386:	f7ff faa3 	bl	800f8d0 <USBD_CDC_ReceivePacket>
 801038a:	682a      	ldr	r2, [r5, #0]
 801038c:	4b04      	ldr	r3, [pc, #16]	; (80103a0 <CDC_Receive_FS+0x2c>)
  memcpy(UartRXString, Buf, USBRXLength);
 801038e:	4621      	mov	r1, r4
 8010390:	4804      	ldr	r0, [pc, #16]	; (80103a4 <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);  USBRXLength = *Len;
 8010392:	601a      	str	r2, [r3, #0]
  memcpy(UartRXString, Buf, USBRXLength);
 8010394:	f000 fb18 	bl	80109c8 <memcpy>
}
 8010398:	2000      	movs	r0, #0
 801039a:	bd70      	pop	{r4, r5, r6, pc}
 801039c:	2400b9e4 	.word	0x2400b9e4
 80103a0:	240062f0 	.word	0x240062f0
 80103a4:	240062f8 	.word	0x240062f8

080103a8 <CDC_Init_FS>:
{
 80103a8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80103aa:	4c06      	ldr	r4, [pc, #24]	; (80103c4 <CDC_Init_FS+0x1c>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	4906      	ldr	r1, [pc, #24]	; (80103c8 <CDC_Init_FS+0x20>)
 80103b0:	4620      	mov	r0, r4
 80103b2:	f7ff fa57 	bl	800f864 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80103b6:	4905      	ldr	r1, [pc, #20]	; (80103cc <CDC_Init_FS+0x24>)
 80103b8:	4620      	mov	r0, r4
 80103ba:	f7ff fa61 	bl	800f880 <USBD_CDC_SetRxBuffer>
}
 80103be:	2000      	movs	r0, #0
 80103c0:	bd10      	pop	{r4, pc}
 80103c2:	bf00      	nop
 80103c4:	2400b9e4 	.word	0x2400b9e4
 80103c8:	2400c4c0 	.word	0x2400c4c0
 80103cc:	2400bcc0 	.word	0x2400bcc0

080103d0 <CDC_Control_FS>:
  switch(cmd)
 80103d0:	2820      	cmp	r0, #32
 80103d2:	d00a      	beq.n	80103ea <CDC_Control_FS+0x1a>
 80103d4:	2821      	cmp	r0, #33	; 0x21
 80103d6:	d106      	bne.n	80103e6 <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80103d8:	4b09      	ldr	r3, [pc, #36]	; (8010400 <CDC_Control_FS+0x30>)
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	889a      	ldrh	r2, [r3, #4]
 80103de:	799b      	ldrb	r3, [r3, #6]
 80103e0:	6008      	str	r0, [r1, #0]
 80103e2:	808a      	strh	r2, [r1, #4]
 80103e4:	718b      	strb	r3, [r1, #6]
}
 80103e6:	2000      	movs	r0, #0
 80103e8:	4770      	bx	lr
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80103ea:	4b05      	ldr	r3, [pc, #20]	; (8010400 <CDC_Control_FS+0x30>)
 80103ec:	6808      	ldr	r0, [r1, #0]
 80103ee:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 80103f2:	798a      	ldrb	r2, [r1, #6]
 80103f4:	6018      	str	r0, [r3, #0]
}
 80103f6:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80103f8:	f8a3 c004 	strh.w	ip, [r3, #4]
 80103fc:	719a      	strb	r2, [r3, #6]
}
 80103fe:	4770      	bx	lr
 8010400:	240003bc 	.word	0x240003bc

08010404 <CDC_Transmit_FS>:
{
 8010404:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010406:	4c09      	ldr	r4, [pc, #36]	; (801042c <CDC_Transmit_FS+0x28>)
 8010408:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 801040c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010410:	b10b      	cbz	r3, 8010416 <CDC_Transmit_FS+0x12>
}
 8010412:	2001      	movs	r0, #1
 8010414:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010416:	460a      	mov	r2, r1
 8010418:	4601      	mov	r1, r0
 801041a:	4620      	mov	r0, r4
 801041c:	f7ff fa22 	bl	800f864 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010420:	4620      	mov	r0, r4
}
 8010422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010426:	f7ff ba37 	b.w	800f898 <USBD_CDC_TransmitPacket>
 801042a:	bf00      	nop
 801042c:	2400b9e4 	.word	0x2400b9e4

08010430 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010430:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8010432:	4801      	ldr	r0, [pc, #4]	; (8010438 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8010434:	800b      	strh	r3, [r1, #0]
}
 8010436:	4770      	bx	lr
 8010438:	240003e0 	.word	0x240003e0

0801043c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801043c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801043e:	4801      	ldr	r0, [pc, #4]	; (8010444 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8010440:	800b      	strh	r3, [r1, #0]
}
 8010442:	4770      	bx	lr
 8010444:	240003f4 	.word	0x240003f4

08010448 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010448:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801044a:	4c04      	ldr	r4, [pc, #16]	; (801045c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 801044c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801044e:	4804      	ldr	r0, [pc, #16]	; (8010460 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8010450:	4621      	mov	r1, r4
 8010452:	f7ff fedb 	bl	801020c <USBD_GetString>
  return USBD_StrDesc;
}
 8010456:	4620      	mov	r0, r4
 8010458:	bd10      	pop	{r4, pc}
 801045a:	bf00      	nop
 801045c:	2400ccc0 	.word	0x2400ccc0
 8010460:	0801dd90 	.word	0x0801dd90

08010464 <USBD_FS_ProductStrDescriptor>:
{
 8010464:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010466:	4c04      	ldr	r4, [pc, #16]	; (8010478 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8010468:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801046a:	4804      	ldr	r0, [pc, #16]	; (801047c <USBD_FS_ProductStrDescriptor+0x18>)
 801046c:	4621      	mov	r1, r4
 801046e:	f7ff fecd 	bl	801020c <USBD_GetString>
}
 8010472:	4620      	mov	r0, r4
 8010474:	bd10      	pop	{r4, pc}
 8010476:	bf00      	nop
 8010478:	2400ccc0 	.word	0x2400ccc0
 801047c:	0801dda4 	.word	0x0801dda4

08010480 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010480:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010482:	4c04      	ldr	r4, [pc, #16]	; (8010494 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8010484:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010486:	4804      	ldr	r0, [pc, #16]	; (8010498 <USBD_FS_ConfigStrDescriptor+0x18>)
 8010488:	4621      	mov	r1, r4
 801048a:	f7ff febf 	bl	801020c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 801048e:	4620      	mov	r0, r4
 8010490:	bd10      	pop	{r4, pc}
 8010492:	bf00      	nop
 8010494:	2400ccc0 	.word	0x2400ccc0
 8010498:	0801ddbc 	.word	0x0801ddbc

0801049c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801049c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801049e:	4c04      	ldr	r4, [pc, #16]	; (80104b0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80104a0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80104a2:	4804      	ldr	r0, [pc, #16]	; (80104b4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80104a4:	4621      	mov	r1, r4
 80104a6:	f7ff feb1 	bl	801020c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80104aa:	4620      	mov	r0, r4
 80104ac:	bd10      	pop	{r4, pc}
 80104ae:	bf00      	nop
 80104b0:	2400ccc0 	.word	0x2400ccc0
 80104b4:	0801ddc8 	.word	0x0801ddc8

080104b8 <USBD_FS_SerialStrDescriptor>:
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80104b8:	4a46      	ldr	r2, [pc, #280]	; (80105d4 <USBD_FS_SerialStrDescriptor+0x11c>)
  *length = USB_SIZ_STRING_SERIAL;
 80104ba:	f04f 0c1a 	mov.w	ip, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80104be:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 80104c2:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  *length = USB_SIZ_STRING_SERIAL;
 80104c6:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 80104ca:	18c3      	adds	r3, r0, r3
 80104cc:	d101      	bne.n	80104d2 <USBD_FS_SerialStrDescriptor+0x1a>
}
 80104ce:	4842      	ldr	r0, [pc, #264]	; (80105d8 <USBD_FS_SerialStrDescriptor+0x120>)
 80104d0:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 80104d2:	0f18      	lsrs	r0, r3, #28
 80104d4:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80104d8:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80104dc:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80104e0:	4a3d      	ldr	r2, [pc, #244]	; (80105d8 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80104e2:	bf2c      	ite	cs
 80104e4:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80104e6:	3030      	addcc	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80104e8:	f882 c003 	strb.w	ip, [r2, #3]
 80104ec:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 80104f0:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 80104f2:	f3c3 6003 	ubfx	r0, r3, #24, #4
    pbuf[2 * idx + 1] = 0;
 80104f6:	f882 c005 	strb.w	ip, [r2, #5]
 80104fa:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 80104fe:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8010500:	f882 c007 	strb.w	ip, [r2, #7]
 8010504:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010508:	bf8c      	ite	hi
 801050a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801050c:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 801050e:	f882 c009 	strb.w	ip, [r2, #9]
 8010512:	f04f 0c00 	mov.w	ip, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8010516:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 8010518:	f3c3 5003 	ubfx	r0, r3, #20, #4
    pbuf[2 * idx + 1] = 0;
 801051c:	f882 c00b 	strb.w	ip, [r2, #11]
 8010520:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8010524:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8010526:	f882 c00d 	strb.w	ip, [r2, #13]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801052a:	bf8c      	ite	hi
 801052c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801052e:	3030      	addls	r0, #48	; 0x30
 8010530:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 8010532:	f3c3 4003 	ubfx	r0, r3, #16, #4
 8010536:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010538:	bf8c      	ite	hi
 801053a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801053c:	3030      	addls	r0, #48	; 0x30
 801053e:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 8010540:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8010544:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010546:	bf8c      	ite	hi
 8010548:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801054a:	3030      	addls	r0, #48	; 0x30
 801054c:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 801054e:	f3c3 2003 	ubfx	r0, r3, #8, #4
 8010552:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010554:	bf8c      	ite	hi
 8010556:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8010558:	3030      	addls	r0, #48	; 0x30
 801055a:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 801055c:	f3c3 1003 	ubfx	r0, r3, #4, #4
 8010560:	f003 030f 	and.w	r3, r3, #15
 8010564:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010566:	bf8c      	ite	hi
 8010568:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801056a:	3030      	addls	r0, #48	; 0x30
    if (((value >> 28)) < 0xA)
 801056c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 801056e:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 8010570:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8010574:	bf94      	ite	ls
 8010576:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010578:	3337      	addhi	r3, #55	; 0x37
    if (((value >> 28)) < 0xA)
 801057a:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
    pbuf[2 * idx + 1] = 0;
 801057e:	73d0      	strb	r0, [r2, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010580:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8010582:	ea4f 7311 	mov.w	r3, r1, lsr #28
    pbuf[2 * idx + 1] = 0;
 8010586:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801058a:	bf2c      	ite	cs
 801058c:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801058e:	3330      	addcc	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 8010590:	7450      	strb	r0, [r2, #17]
 8010592:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8010594:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8010596:	f3c1 6303 	ubfx	r3, r1, #24, #4
    pbuf[2 * idx + 1] = 0;
 801059a:	74d0      	strb	r0, [r2, #19]
 801059c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 801059e:	2b09      	cmp	r3, #9
    pbuf[2 * idx + 1] = 0;
 80105a0:	7550      	strb	r0, [r2, #21]
 80105a2:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80105a6:	bf8c      	ite	hi
 80105a8:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80105aa:	3330      	addls	r3, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80105ac:	75d0      	strb	r0, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 80105ae:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 80105b0:	f3c1 5303 	ubfx	r3, r1, #20, #4
}
 80105b4:	4808      	ldr	r0, [pc, #32]	; (80105d8 <USBD_FS_SerialStrDescriptor+0x120>)
    if (((value >> 28)) < 0xA)
 80105b6:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80105b8:	bf8c      	ite	hi
 80105ba:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80105bc:	3330      	addls	r3, #48	; 0x30
 80105be:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 80105c0:	f3c1 4303 	ubfx	r3, r1, #16, #4
 80105c4:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80105c6:	bf94      	ite	ls
 80105c8:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80105ca:	3337      	addhi	r3, #55	; 0x37
 80105cc:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	7653      	strb	r3, [r2, #25]
}
 80105d2:	4770      	bx	lr
 80105d4:	1ff1e000 	.word	0x1ff1e000
 80105d8:	240003f8 	.word	0x240003f8
 80105dc:	00000000 	.word	0x00000000

080105e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80105e0:	b510      	push	{r4, lr}
 80105e2:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105e4:	2100      	movs	r1, #0
{
 80105e6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80105e8:	22c0      	movs	r2, #192	; 0xc0
 80105ea:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105ec:	9106      	str	r1, [sp, #24]
 80105ee:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80105f2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80105f6:	f000 f9f5 	bl	80109e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80105fa:	4b27      	ldr	r3, [pc, #156]	; (8010698 <HAL_PCD_MspInit+0xb8>)
 80105fc:	6822      	ldr	r2, [r4, #0]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d001      	beq.n	8010606 <HAL_PCD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010602:	b038      	add	sp, #224	; 0xe0
 8010604:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010606:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010688 <HAL_PCD_MspInit+0xa8>
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801060a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801060e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010610:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010614:	932a      	str	r3, [sp, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010616:	f7fb fba7 	bl	800bd68 <HAL_RCCEx_PeriphCLKConfig>
 801061a:	bb90      	cbnz	r0, 8010682 <HAL_PCD_MspInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801061c:	4c1f      	ldr	r4, [pc, #124]	; (801069c <HAL_PCD_MspInit+0xbc>)
    HAL_PWREx_EnableUSBVoltageDetector();
 801061e:	f7fa fc45 	bl	800aeac <HAL_PWREx_EnableUSBVoltageDetector>
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010622:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010624:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010626:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801062a:	481d      	ldr	r0, [pc, #116]	; (80106a0 <HAL_PCD_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801062c:	f043 0301 	orr.w	r3, r3, #1
 8010630:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8010634:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8010638:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801063a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801063c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010640:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010690 <HAL_PCD_MspInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010648:	2300      	movs	r3, #0
 801064a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801064e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010652:	f7f9 fa45 	bl	8009ae0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010656:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801065a:	2200      	movs	r2, #0
 801065c:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801065e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010662:	4611      	mov	r1, r2
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010664:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8010668:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 801066c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010674:	f7f7 fd44 	bl	8008100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010678:	2065      	movs	r0, #101	; 0x65
 801067a:	f7f7 fd7f 	bl	800817c <HAL_NVIC_EnableIRQ>
}
 801067e:	b038      	add	sp, #224	; 0xe0
 8010680:	bd10      	pop	{r4, pc}
      Error_Handler();
 8010682:	f7f4 fd57 	bl	8005134 <Error_Handler>
 8010686:	e7c9      	b.n	801061c <HAL_PCD_MspInit+0x3c>
 8010688:	00040000 	.word	0x00040000
 801068c:	00000000 	.word	0x00000000
 8010690:	00001800 	.word	0x00001800
 8010694:	00000002 	.word	0x00000002
 8010698:	40080000 	.word	0x40080000
 801069c:	58024400 	.word	0x58024400
 80106a0:	58020000 	.word	0x58020000

080106a4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80106a4:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 80106a8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106ac:	f7ff b972 	b.w	800f994 <USBD_LL_SetupStage>

080106b0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80106b0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80106b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80106b8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106bc:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 80106c0:	f7ff b998 	b.w	800f9f4 <USBD_LL_DataOutStage>

080106c4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80106c4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80106c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80106cc:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80106d2:	f7ff b9c9 	b.w	800fa68 <USBD_LL_DataInStage>
 80106d6:	bf00      	nop

080106d8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106d8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 80106dc:	f7ff ba72 	b.w	800fbc4 <USBD_LL_SOF>

080106e0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80106e0:	6901      	ldr	r1, [r0, #16]
{
 80106e2:	b510      	push	{r4, lr}
 80106e4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80106e6:	b111      	cbz	r1, 80106ee <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80106e8:	2902      	cmp	r1, #2
 80106ea:	d10a      	bne.n	8010702 <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 80106ec:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106ee:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 80106f2:	f7ff fa47 	bl	800fb84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80106f6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
}
 80106fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80106fe:	f7ff ba13 	b.w	800fb28 <USBD_LL_Reset>
    Error_Handler();
 8010702:	f7f4 fd17 	bl	8005134 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010706:	2101      	movs	r1, #1
 8010708:	e7f1      	b.n	80106ee <HAL_PCD_ResetCallback+0xe>
 801070a:	bf00      	nop

0801070c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801070c:	b510      	push	{r4, lr}
 801070e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010710:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010714:	f7ff fa3a 	bl	800fb8c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010718:	6822      	ldr	r2, [r4, #0]
 801071a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801071e:	f043 0301 	orr.w	r3, r3, #1
 8010722:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010726:	6a23      	ldr	r3, [r4, #32]
 8010728:	b123      	cbz	r3, 8010734 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801072a:	4a03      	ldr	r2, [pc, #12]	; (8010738 <HAL_PCD_SuspendCallback+0x2c>)
 801072c:	6913      	ldr	r3, [r2, #16]
 801072e:	f043 0306 	orr.w	r3, r3, #6
 8010732:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010734:	bd10      	pop	{r4, pc}
 8010736:	bf00      	nop
 8010738:	e000ed00 	.word	0xe000ed00

0801073c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801073c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010740:	f7ff ba34 	b.w	800fbac <USBD_LL_Resume>

08010744 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010744:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010748:	f7ff ba62 	b.w	800fc10 <USBD_LL_IsoOUTIncomplete>

0801074c <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801074c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010750:	f7ff ba48 	b.w	800fbe4 <USBD_LL_IsoINIncomplete>

08010754 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010754:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010758:	f7ff ba70 	b.w	800fc3c <USBD_LL_DevConnected>

0801075c <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801075c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8010760:	f7ff ba6e 	b.w	800fc40 <USBD_LL_DevDisconnected>
 8010764:	0000      	movs	r0, r0
	...

08010768 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010768:	7802      	ldrb	r2, [r0, #0]
 801076a:	b10a      	cbz	r2, 8010770 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
}
 801076c:	2000      	movs	r0, #0
 801076e:	4770      	bx	lr
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010770:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80107d0 <USBD_LL_Init+0x68>
  hpcd_USB_OTG_FS.pData = pdev;
 8010774:	4b1a      	ldr	r3, [pc, #104]	; (80107e0 <USBD_LL_Init+0x78>)
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010776:	491b      	ldr	r1, [pc, #108]	; (80107e4 <USBD_LL_Init+0x7c>)
{
 8010778:	b510      	push	{r4, lr}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801077a:	ed83 7b06 	vstr	d7, [r3, #24]
 801077e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80107d8 <USBD_LL_Init+0x70>
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010782:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010784:	6019      	str	r1, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010786:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.pData = pdev;
 8010788:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801078c:	f8c0 32c8 	str.w	r3, [r0, #712]	; 0x2c8
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010790:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010792:	605c      	str	r4, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010794:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010796:	ed83 7b08 	vstr	d7, [r3, #32]
 801079a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801079e:	e9c3 2103 	strd	r2, r1, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80107a2:	f7f9 fb61 	bl	8009e68 <HAL_PCD_Init>
 80107a6:	b978      	cbnz	r0, 80107c8 <USBD_LL_Init+0x60>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80107a8:	2180      	movs	r1, #128	; 0x80
 80107aa:	480d      	ldr	r0, [pc, #52]	; (80107e0 <USBD_LL_Init+0x78>)
 80107ac:	f7fa fb3a 	bl	800ae24 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80107b0:	2240      	movs	r2, #64	; 0x40
 80107b2:	2100      	movs	r1, #0
 80107b4:	480a      	ldr	r0, [pc, #40]	; (80107e0 <USBD_LL_Init+0x78>)
 80107b6:	f7fa fb0b 	bl	800add0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80107ba:	2280      	movs	r2, #128	; 0x80
 80107bc:	2101      	movs	r1, #1
 80107be:	4808      	ldr	r0, [pc, #32]	; (80107e0 <USBD_LL_Init+0x78>)
 80107c0:	f7fa fb06 	bl	800add0 <HAL_PCDEx_SetTxFiFo>
}
 80107c4:	2000      	movs	r0, #0
 80107c6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80107c8:	f7f4 fcb4 	bl	8005134 <Error_Handler>
 80107cc:	e7ec      	b.n	80107a8 <USBD_LL_Init+0x40>
 80107ce:	bf00      	nop
 80107d0:	00000002 	.word	0x00000002
	...
 80107e0:	2400cec0 	.word	0x2400cec0
 80107e4:	40080000 	.word	0x40080000

080107e8 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80107e8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80107ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80107ee:	f7f9 fbd1 	bl	8009f94 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80107f2:	2803      	cmp	r0, #3
 80107f4:	d802      	bhi.n	80107fc <USBD_LL_Start+0x14>
 80107f6:	4b02      	ldr	r3, [pc, #8]	; (8010800 <USBD_LL_Start+0x18>)
 80107f8:	5c18      	ldrb	r0, [r3, r0]
}
 80107fa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 80107fc:	2003      	movs	r0, #3
}
 80107fe:	bd08      	pop	{r3, pc}
 8010800:	0801ddd8 	.word	0x0801ddd8

08010804 <USBD_LL_OpenEP>:
{
 8010804:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010806:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 801080a:	461a      	mov	r2, r3
 801080c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801080e:	4663      	mov	r3, ip
 8010810:	f7fa f99c 	bl	800ab4c <HAL_PCD_EP_Open>
  switch (hal_status)
 8010814:	2803      	cmp	r0, #3
 8010816:	d802      	bhi.n	801081e <USBD_LL_OpenEP+0x1a>
 8010818:	4b02      	ldr	r3, [pc, #8]	; (8010824 <USBD_LL_OpenEP+0x20>)
 801081a:	5c18      	ldrb	r0, [r3, r0]
}
 801081c:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801081e:	2003      	movs	r0, #3
}
 8010820:	bd08      	pop	{r3, pc}
 8010822:	bf00      	nop
 8010824:	0801ddd8 	.word	0x0801ddd8

08010828 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010828:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 801082c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801082e:	f7fa f9cb 	bl	800abc8 <HAL_PCD_EP_Close>
  switch (hal_status)
 8010832:	2803      	cmp	r0, #3
 8010834:	d802      	bhi.n	801083c <USBD_LL_CloseEP+0x14>
 8010836:	4b02      	ldr	r3, [pc, #8]	; (8010840 <USBD_LL_CloseEP+0x18>)
 8010838:	5c18      	ldrb	r0, [r3, r0]
}
 801083a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801083c:	2003      	movs	r0, #3
}
 801083e:	bd08      	pop	{r3, pc}
 8010840:	0801ddd8 	.word	0x0801ddd8

08010844 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010844:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8010848:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801084a:	f7fa fa41 	bl	800acd0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 801084e:	2803      	cmp	r0, #3
 8010850:	d802      	bhi.n	8010858 <USBD_LL_StallEP+0x14>
 8010852:	4b02      	ldr	r3, [pc, #8]	; (801085c <USBD_LL_StallEP+0x18>)
 8010854:	5c18      	ldrb	r0, [r3, r0]
}
 8010856:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010858:	2003      	movs	r0, #3
}
 801085a:	bd08      	pop	{r3, pc}
 801085c:	0801ddd8 	.word	0x0801ddd8

08010860 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010860:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 8010864:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010866:	f7fa fa77 	bl	800ad58 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 801086a:	2803      	cmp	r0, #3
 801086c:	d802      	bhi.n	8010874 <USBD_LL_ClearStallEP+0x14>
 801086e:	4b02      	ldr	r3, [pc, #8]	; (8010878 <USBD_LL_ClearStallEP+0x18>)
 8010870:	5c18      	ldrb	r0, [r3, r0]
}
 8010872:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010874:	2003      	movs	r0, #3
}
 8010876:	bd08      	pop	{r3, pc}
 8010878:	0801ddd8 	.word	0x0801ddd8

0801087c <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 801087c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801087e:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8
  if((ep_addr & 0x80) == 0x80)
 8010882:	d406      	bmi.n	8010892 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010884:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010888:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801088c:	f891 027e 	ldrb.w	r0, [r1, #638]	; 0x27e
}
 8010890:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010892:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8010896:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801089a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801089e:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80108a2:	4770      	bx	lr

080108a4 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80108a4:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80108a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80108aa:	f7fa f939 	bl	800ab20 <HAL_PCD_SetAddress>
  switch (hal_status)
 80108ae:	2803      	cmp	r0, #3
 80108b0:	d802      	bhi.n	80108b8 <USBD_LL_SetUSBAddress+0x14>
 80108b2:	4b02      	ldr	r3, [pc, #8]	; (80108bc <USBD_LL_SetUSBAddress+0x18>)
 80108b4:	5c18      	ldrb	r0, [r3, r0]
}
 80108b6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80108b8:	2003      	movs	r0, #3
}
 80108ba:	bd08      	pop	{r3, pc}
 80108bc:	0801ddd8 	.word	0x0801ddd8

080108c0 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108c0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80108c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108c6:	f7fa f9e1 	bl	800ac8c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80108ca:	2803      	cmp	r0, #3
 80108cc:	d802      	bhi.n	80108d4 <USBD_LL_Transmit+0x14>
 80108ce:	4b02      	ldr	r3, [pc, #8]	; (80108d8 <USBD_LL_Transmit+0x18>)
 80108d0:	5c18      	ldrb	r0, [r3, r0]
}
 80108d2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108d4:	2003      	movs	r0, #3
}
 80108d6:	bd08      	pop	{r3, pc}
 80108d8:	0801ddd8 	.word	0x0801ddd8

080108dc <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108dc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
{
 80108e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108e2:	f7fa f9a7 	bl	800ac34 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80108e6:	2803      	cmp	r0, #3
 80108e8:	d802      	bhi.n	80108f0 <USBD_LL_PrepareReceive+0x14>
 80108ea:	4b02      	ldr	r3, [pc, #8]	; (80108f4 <USBD_LL_PrepareReceive+0x18>)
 80108ec:	5c18      	ldrb	r0, [r3, r0]
}
 80108ee:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108f0:	2003      	movs	r0, #3
}
 80108f2:	bd08      	pop	{r3, pc}
 80108f4:	0801ddd8 	.word	0x0801ddd8

080108f8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108f8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 80108fc:	f7fa b9bc 	b.w	800ac78 <HAL_PCD_EP_GetRxCount>

08010900 <USBD_static_malloc>:
}
 8010900:	4800      	ldr	r0, [pc, #0]	; (8010904 <USBD_static_malloc+0x4>)
 8010902:	4770      	bx	lr
 8010904:	2400d3cc 	.word	0x2400d3cc

08010908 <USBD_static_free>:
}
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop

0801090c <__assert_func>:
 801090c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801090e:	4614      	mov	r4, r2
 8010910:	461a      	mov	r2, r3
 8010912:	4b09      	ldr	r3, [pc, #36]	; (8010938 <__assert_func+0x2c>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4605      	mov	r5, r0
 8010918:	68d8      	ldr	r0, [r3, #12]
 801091a:	b14c      	cbz	r4, 8010930 <__assert_func+0x24>
 801091c:	4b07      	ldr	r3, [pc, #28]	; (801093c <__assert_func+0x30>)
 801091e:	9100      	str	r1, [sp, #0]
 8010920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010924:	4906      	ldr	r1, [pc, #24]	; (8010940 <__assert_func+0x34>)
 8010926:	462b      	mov	r3, r5
 8010928:	f000 f818 	bl	801095c <fiprintf>
 801092c:	f001 f84c 	bl	80119c8 <abort>
 8010930:	4b04      	ldr	r3, [pc, #16]	; (8010944 <__assert_func+0x38>)
 8010932:	461c      	mov	r4, r3
 8010934:	e7f3      	b.n	801091e <__assert_func+0x12>
 8010936:	bf00      	nop
 8010938:	24000414 	.word	0x24000414
 801093c:	0801dddc 	.word	0x0801dddc
 8010940:	0801dde9 	.word	0x0801dde9
 8010944:	0801de17 	.word	0x0801de17

08010948 <atoi>:
 8010948:	220a      	movs	r2, #10
 801094a:	2100      	movs	r1, #0
 801094c:	f000 bf72 	b.w	8011834 <strtol>

08010950 <__errno>:
 8010950:	4b01      	ldr	r3, [pc, #4]	; (8010958 <__errno+0x8>)
 8010952:	6818      	ldr	r0, [r3, #0]
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	24000414 	.word	0x24000414

0801095c <fiprintf>:
 801095c:	b40e      	push	{r1, r2, r3}
 801095e:	b503      	push	{r0, r1, lr}
 8010960:	4601      	mov	r1, r0
 8010962:	ab03      	add	r3, sp, #12
 8010964:	4805      	ldr	r0, [pc, #20]	; (801097c <fiprintf+0x20>)
 8010966:	f853 2b04 	ldr.w	r2, [r3], #4
 801096a:	6800      	ldr	r0, [r0, #0]
 801096c:	9301      	str	r3, [sp, #4]
 801096e:	f000 f86b 	bl	8010a48 <_vfiprintf_r>
 8010972:	b002      	add	sp, #8
 8010974:	f85d eb04 	ldr.w	lr, [sp], #4
 8010978:	b003      	add	sp, #12
 801097a:	4770      	bx	lr
 801097c:	24000414 	.word	0x24000414

08010980 <__libc_init_array>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	4d0d      	ldr	r5, [pc, #52]	; (80109b8 <__libc_init_array+0x38>)
 8010984:	4c0d      	ldr	r4, [pc, #52]	; (80109bc <__libc_init_array+0x3c>)
 8010986:	1b64      	subs	r4, r4, r5
 8010988:	10a4      	asrs	r4, r4, #2
 801098a:	2600      	movs	r6, #0
 801098c:	42a6      	cmp	r6, r4
 801098e:	d109      	bne.n	80109a4 <__libc_init_array+0x24>
 8010990:	4d0b      	ldr	r5, [pc, #44]	; (80109c0 <__libc_init_array+0x40>)
 8010992:	4c0c      	ldr	r4, [pc, #48]	; (80109c4 <__libc_init_array+0x44>)
 8010994:	f004 f8c2 	bl	8014b1c <_init>
 8010998:	1b64      	subs	r4, r4, r5
 801099a:	10a4      	asrs	r4, r4, #2
 801099c:	2600      	movs	r6, #0
 801099e:	42a6      	cmp	r6, r4
 80109a0:	d105      	bne.n	80109ae <__libc_init_array+0x2e>
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
 80109a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80109a8:	4798      	blx	r3
 80109aa:	3601      	adds	r6, #1
 80109ac:	e7ee      	b.n	801098c <__libc_init_array+0xc>
 80109ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80109b2:	4798      	blx	r3
 80109b4:	3601      	adds	r6, #1
 80109b6:	e7f2      	b.n	801099e <__libc_init_array+0x1e>
 80109b8:	0801f558 	.word	0x0801f558
 80109bc:	0801f558 	.word	0x0801f558
 80109c0:	0801f558 	.word	0x0801f558
 80109c4:	0801f55c 	.word	0x0801f55c

080109c8 <memcpy>:
 80109c8:	440a      	add	r2, r1
 80109ca:	4291      	cmp	r1, r2
 80109cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80109d0:	d100      	bne.n	80109d4 <memcpy+0xc>
 80109d2:	4770      	bx	lr
 80109d4:	b510      	push	{r4, lr}
 80109d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109de:	4291      	cmp	r1, r2
 80109e0:	d1f9      	bne.n	80109d6 <memcpy+0xe>
 80109e2:	bd10      	pop	{r4, pc}

080109e4 <memset>:
 80109e4:	4402      	add	r2, r0
 80109e6:	4603      	mov	r3, r0
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d100      	bne.n	80109ee <memset+0xa>
 80109ec:	4770      	bx	lr
 80109ee:	f803 1b01 	strb.w	r1, [r3], #1
 80109f2:	e7f9      	b.n	80109e8 <memset+0x4>

080109f4 <__sfputc_r>:
 80109f4:	6893      	ldr	r3, [r2, #8]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	b410      	push	{r4}
 80109fc:	6093      	str	r3, [r2, #8]
 80109fe:	da08      	bge.n	8010a12 <__sfputc_r+0x1e>
 8010a00:	6994      	ldr	r4, [r2, #24]
 8010a02:	42a3      	cmp	r3, r4
 8010a04:	db01      	blt.n	8010a0a <__sfputc_r+0x16>
 8010a06:	290a      	cmp	r1, #10
 8010a08:	d103      	bne.n	8010a12 <__sfputc_r+0x1e>
 8010a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a0e:	f000 bf1b 	b.w	8011848 <__swbuf_r>
 8010a12:	6813      	ldr	r3, [r2, #0]
 8010a14:	1c58      	adds	r0, r3, #1
 8010a16:	6010      	str	r0, [r2, #0]
 8010a18:	7019      	strb	r1, [r3, #0]
 8010a1a:	4608      	mov	r0, r1
 8010a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <__sfputs_r>:
 8010a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a24:	4606      	mov	r6, r0
 8010a26:	460f      	mov	r7, r1
 8010a28:	4614      	mov	r4, r2
 8010a2a:	18d5      	adds	r5, r2, r3
 8010a2c:	42ac      	cmp	r4, r5
 8010a2e:	d101      	bne.n	8010a34 <__sfputs_r+0x12>
 8010a30:	2000      	movs	r0, #0
 8010a32:	e007      	b.n	8010a44 <__sfputs_r+0x22>
 8010a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a38:	463a      	mov	r2, r7
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	f7ff ffda 	bl	80109f4 <__sfputc_r>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d1f3      	bne.n	8010a2c <__sfputs_r+0xa>
 8010a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a48 <_vfiprintf_r>:
 8010a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	460d      	mov	r5, r1
 8010a4e:	b09d      	sub	sp, #116	; 0x74
 8010a50:	4614      	mov	r4, r2
 8010a52:	4698      	mov	r8, r3
 8010a54:	4606      	mov	r6, r0
 8010a56:	b118      	cbz	r0, 8010a60 <_vfiprintf_r+0x18>
 8010a58:	6983      	ldr	r3, [r0, #24]
 8010a5a:	b90b      	cbnz	r3, 8010a60 <_vfiprintf_r+0x18>
 8010a5c:	f001 fed0 	bl	8012800 <__sinit>
 8010a60:	4b89      	ldr	r3, [pc, #548]	; (8010c88 <_vfiprintf_r+0x240>)
 8010a62:	429d      	cmp	r5, r3
 8010a64:	d11b      	bne.n	8010a9e <_vfiprintf_r+0x56>
 8010a66:	6875      	ldr	r5, [r6, #4]
 8010a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a6a:	07d9      	lsls	r1, r3, #31
 8010a6c:	d405      	bmi.n	8010a7a <_vfiprintf_r+0x32>
 8010a6e:	89ab      	ldrh	r3, [r5, #12]
 8010a70:	059a      	lsls	r2, r3, #22
 8010a72:	d402      	bmi.n	8010a7a <_vfiprintf_r+0x32>
 8010a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a76:	f001 ff66 	bl	8012946 <__retarget_lock_acquire_recursive>
 8010a7a:	89ab      	ldrh	r3, [r5, #12]
 8010a7c:	071b      	lsls	r3, r3, #28
 8010a7e:	d501      	bpl.n	8010a84 <_vfiprintf_r+0x3c>
 8010a80:	692b      	ldr	r3, [r5, #16]
 8010a82:	b9eb      	cbnz	r3, 8010ac0 <_vfiprintf_r+0x78>
 8010a84:	4629      	mov	r1, r5
 8010a86:	4630      	mov	r0, r6
 8010a88:	f000 ff30 	bl	80118ec <__swsetup_r>
 8010a8c:	b1c0      	cbz	r0, 8010ac0 <_vfiprintf_r+0x78>
 8010a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a90:	07dc      	lsls	r4, r3, #31
 8010a92:	d50e      	bpl.n	8010ab2 <_vfiprintf_r+0x6a>
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295
 8010a98:	b01d      	add	sp, #116	; 0x74
 8010a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9e:	4b7b      	ldr	r3, [pc, #492]	; (8010c8c <_vfiprintf_r+0x244>)
 8010aa0:	429d      	cmp	r5, r3
 8010aa2:	d101      	bne.n	8010aa8 <_vfiprintf_r+0x60>
 8010aa4:	68b5      	ldr	r5, [r6, #8]
 8010aa6:	e7df      	b.n	8010a68 <_vfiprintf_r+0x20>
 8010aa8:	4b79      	ldr	r3, [pc, #484]	; (8010c90 <_vfiprintf_r+0x248>)
 8010aaa:	429d      	cmp	r5, r3
 8010aac:	bf08      	it	eq
 8010aae:	68f5      	ldreq	r5, [r6, #12]
 8010ab0:	e7da      	b.n	8010a68 <_vfiprintf_r+0x20>
 8010ab2:	89ab      	ldrh	r3, [r5, #12]
 8010ab4:	0598      	lsls	r0, r3, #22
 8010ab6:	d4ed      	bmi.n	8010a94 <_vfiprintf_r+0x4c>
 8010ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010aba:	f001 ff45 	bl	8012948 <__retarget_lock_release_recursive>
 8010abe:	e7e9      	b.n	8010a94 <_vfiprintf_r+0x4c>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ac4:	2320      	movs	r3, #32
 8010ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ace:	2330      	movs	r3, #48	; 0x30
 8010ad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010c94 <_vfiprintf_r+0x24c>
 8010ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ad8:	f04f 0901 	mov.w	r9, #1
 8010adc:	4623      	mov	r3, r4
 8010ade:	469a      	mov	sl, r3
 8010ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ae4:	b10a      	cbz	r2, 8010aea <_vfiprintf_r+0xa2>
 8010ae6:	2a25      	cmp	r2, #37	; 0x25
 8010ae8:	d1f9      	bne.n	8010ade <_vfiprintf_r+0x96>
 8010aea:	ebba 0b04 	subs.w	fp, sl, r4
 8010aee:	d00b      	beq.n	8010b08 <_vfiprintf_r+0xc0>
 8010af0:	465b      	mov	r3, fp
 8010af2:	4622      	mov	r2, r4
 8010af4:	4629      	mov	r1, r5
 8010af6:	4630      	mov	r0, r6
 8010af8:	f7ff ff93 	bl	8010a22 <__sfputs_r>
 8010afc:	3001      	adds	r0, #1
 8010afe:	f000 80aa 	beq.w	8010c56 <_vfiprintf_r+0x20e>
 8010b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b04:	445a      	add	r2, fp
 8010b06:	9209      	str	r2, [sp, #36]	; 0x24
 8010b08:	f89a 3000 	ldrb.w	r3, [sl]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f000 80a2 	beq.w	8010c56 <_vfiprintf_r+0x20e>
 8010b12:	2300      	movs	r3, #0
 8010b14:	f04f 32ff 	mov.w	r2, #4294967295
 8010b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b1c:	f10a 0a01 	add.w	sl, sl, #1
 8010b20:	9304      	str	r3, [sp, #16]
 8010b22:	9307      	str	r3, [sp, #28]
 8010b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b28:	931a      	str	r3, [sp, #104]	; 0x68
 8010b2a:	4654      	mov	r4, sl
 8010b2c:	2205      	movs	r2, #5
 8010b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b32:	4858      	ldr	r0, [pc, #352]	; (8010c94 <_vfiprintf_r+0x24c>)
 8010b34:	f7ef fc3c 	bl	80003b0 <memchr>
 8010b38:	9a04      	ldr	r2, [sp, #16]
 8010b3a:	b9d8      	cbnz	r0, 8010b74 <_vfiprintf_r+0x12c>
 8010b3c:	06d1      	lsls	r1, r2, #27
 8010b3e:	bf44      	itt	mi
 8010b40:	2320      	movmi	r3, #32
 8010b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b46:	0713      	lsls	r3, r2, #28
 8010b48:	bf44      	itt	mi
 8010b4a:	232b      	movmi	r3, #43	; 0x2b
 8010b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b50:	f89a 3000 	ldrb.w	r3, [sl]
 8010b54:	2b2a      	cmp	r3, #42	; 0x2a
 8010b56:	d015      	beq.n	8010b84 <_vfiprintf_r+0x13c>
 8010b58:	9a07      	ldr	r2, [sp, #28]
 8010b5a:	4654      	mov	r4, sl
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	f04f 0c0a 	mov.w	ip, #10
 8010b62:	4621      	mov	r1, r4
 8010b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b68:	3b30      	subs	r3, #48	; 0x30
 8010b6a:	2b09      	cmp	r3, #9
 8010b6c:	d94e      	bls.n	8010c0c <_vfiprintf_r+0x1c4>
 8010b6e:	b1b0      	cbz	r0, 8010b9e <_vfiprintf_r+0x156>
 8010b70:	9207      	str	r2, [sp, #28]
 8010b72:	e014      	b.n	8010b9e <_vfiprintf_r+0x156>
 8010b74:	eba0 0308 	sub.w	r3, r0, r8
 8010b78:	fa09 f303 	lsl.w	r3, r9, r3
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	46a2      	mov	sl, r4
 8010b82:	e7d2      	b.n	8010b2a <_vfiprintf_r+0xe2>
 8010b84:	9b03      	ldr	r3, [sp, #12]
 8010b86:	1d19      	adds	r1, r3, #4
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	9103      	str	r1, [sp, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	bfbb      	ittet	lt
 8010b90:	425b      	neglt	r3, r3
 8010b92:	f042 0202 	orrlt.w	r2, r2, #2
 8010b96:	9307      	strge	r3, [sp, #28]
 8010b98:	9307      	strlt	r3, [sp, #28]
 8010b9a:	bfb8      	it	lt
 8010b9c:	9204      	strlt	r2, [sp, #16]
 8010b9e:	7823      	ldrb	r3, [r4, #0]
 8010ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ba2:	d10c      	bne.n	8010bbe <_vfiprintf_r+0x176>
 8010ba4:	7863      	ldrb	r3, [r4, #1]
 8010ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ba8:	d135      	bne.n	8010c16 <_vfiprintf_r+0x1ce>
 8010baa:	9b03      	ldr	r3, [sp, #12]
 8010bac:	1d1a      	adds	r2, r3, #4
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	9203      	str	r2, [sp, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	bfb8      	it	lt
 8010bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bba:	3402      	adds	r4, #2
 8010bbc:	9305      	str	r3, [sp, #20]
 8010bbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010ca4 <_vfiprintf_r+0x25c>
 8010bc2:	7821      	ldrb	r1, [r4, #0]
 8010bc4:	2203      	movs	r2, #3
 8010bc6:	4650      	mov	r0, sl
 8010bc8:	f7ef fbf2 	bl	80003b0 <memchr>
 8010bcc:	b140      	cbz	r0, 8010be0 <_vfiprintf_r+0x198>
 8010bce:	2340      	movs	r3, #64	; 0x40
 8010bd0:	eba0 000a 	sub.w	r0, r0, sl
 8010bd4:	fa03 f000 	lsl.w	r0, r3, r0
 8010bd8:	9b04      	ldr	r3, [sp, #16]
 8010bda:	4303      	orrs	r3, r0
 8010bdc:	3401      	adds	r4, #1
 8010bde:	9304      	str	r3, [sp, #16]
 8010be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010be4:	482c      	ldr	r0, [pc, #176]	; (8010c98 <_vfiprintf_r+0x250>)
 8010be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bea:	2206      	movs	r2, #6
 8010bec:	f7ef fbe0 	bl	80003b0 <memchr>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d03f      	beq.n	8010c74 <_vfiprintf_r+0x22c>
 8010bf4:	4b29      	ldr	r3, [pc, #164]	; (8010c9c <_vfiprintf_r+0x254>)
 8010bf6:	bb1b      	cbnz	r3, 8010c40 <_vfiprintf_r+0x1f8>
 8010bf8:	9b03      	ldr	r3, [sp, #12]
 8010bfa:	3307      	adds	r3, #7
 8010bfc:	f023 0307 	bic.w	r3, r3, #7
 8010c00:	3308      	adds	r3, #8
 8010c02:	9303      	str	r3, [sp, #12]
 8010c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c06:	443b      	add	r3, r7
 8010c08:	9309      	str	r3, [sp, #36]	; 0x24
 8010c0a:	e767      	b.n	8010adc <_vfiprintf_r+0x94>
 8010c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c10:	460c      	mov	r4, r1
 8010c12:	2001      	movs	r0, #1
 8010c14:	e7a5      	b.n	8010b62 <_vfiprintf_r+0x11a>
 8010c16:	2300      	movs	r3, #0
 8010c18:	3401      	adds	r4, #1
 8010c1a:	9305      	str	r3, [sp, #20]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	f04f 0c0a 	mov.w	ip, #10
 8010c22:	4620      	mov	r0, r4
 8010c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c28:	3a30      	subs	r2, #48	; 0x30
 8010c2a:	2a09      	cmp	r2, #9
 8010c2c:	d903      	bls.n	8010c36 <_vfiprintf_r+0x1ee>
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d0c5      	beq.n	8010bbe <_vfiprintf_r+0x176>
 8010c32:	9105      	str	r1, [sp, #20]
 8010c34:	e7c3      	b.n	8010bbe <_vfiprintf_r+0x176>
 8010c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e7f0      	b.n	8010c22 <_vfiprintf_r+0x1da>
 8010c40:	ab03      	add	r3, sp, #12
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	462a      	mov	r2, r5
 8010c46:	4b16      	ldr	r3, [pc, #88]	; (8010ca0 <_vfiprintf_r+0x258>)
 8010c48:	a904      	add	r1, sp, #16
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f000 f8bc 	bl	8010dc8 <_printf_float>
 8010c50:	4607      	mov	r7, r0
 8010c52:	1c78      	adds	r0, r7, #1
 8010c54:	d1d6      	bne.n	8010c04 <_vfiprintf_r+0x1bc>
 8010c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c58:	07d9      	lsls	r1, r3, #31
 8010c5a:	d405      	bmi.n	8010c68 <_vfiprintf_r+0x220>
 8010c5c:	89ab      	ldrh	r3, [r5, #12]
 8010c5e:	059a      	lsls	r2, r3, #22
 8010c60:	d402      	bmi.n	8010c68 <_vfiprintf_r+0x220>
 8010c62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c64:	f001 fe70 	bl	8012948 <__retarget_lock_release_recursive>
 8010c68:	89ab      	ldrh	r3, [r5, #12]
 8010c6a:	065b      	lsls	r3, r3, #25
 8010c6c:	f53f af12 	bmi.w	8010a94 <_vfiprintf_r+0x4c>
 8010c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c72:	e711      	b.n	8010a98 <_vfiprintf_r+0x50>
 8010c74:	ab03      	add	r3, sp, #12
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	462a      	mov	r2, r5
 8010c7a:	4b09      	ldr	r3, [pc, #36]	; (8010ca0 <_vfiprintf_r+0x258>)
 8010c7c:	a904      	add	r1, sp, #16
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f000 fb2e 	bl	80112e0 <_printf_i>
 8010c84:	e7e4      	b.n	8010c50 <_vfiprintf_r+0x208>
 8010c86:	bf00      	nop
 8010c88:	0801e0d0 	.word	0x0801e0d0
 8010c8c:	0801e0f0 	.word	0x0801e0f0
 8010c90:	0801e0b0 	.word	0x0801e0b0
 8010c94:	0801df20 	.word	0x0801df20
 8010c98:	0801df2a 	.word	0x0801df2a
 8010c9c:	08010dc9 	.word	0x08010dc9
 8010ca0:	08010a23 	.word	0x08010a23
 8010ca4:	0801df26 	.word	0x0801df26

08010ca8 <__cvt>:
 8010ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010caa:	ed2d 8b02 	vpush	{d8}
 8010cae:	eeb0 8b40 	vmov.f64	d8, d0
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	4617      	mov	r7, r2
 8010cb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010cb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010cba:	ee18 2a90 	vmov	r2, s17
 8010cbe:	f025 0520 	bic.w	r5, r5, #32
 8010cc2:	2a00      	cmp	r2, #0
 8010cc4:	bfb6      	itet	lt
 8010cc6:	222d      	movlt	r2, #45	; 0x2d
 8010cc8:	2200      	movge	r2, #0
 8010cca:	eeb1 8b40 	vneglt.f64	d8, d0
 8010cce:	2d46      	cmp	r5, #70	; 0x46
 8010cd0:	460c      	mov	r4, r1
 8010cd2:	701a      	strb	r2, [r3, #0]
 8010cd4:	d004      	beq.n	8010ce0 <__cvt+0x38>
 8010cd6:	2d45      	cmp	r5, #69	; 0x45
 8010cd8:	d100      	bne.n	8010cdc <__cvt+0x34>
 8010cda:	3401      	adds	r4, #1
 8010cdc:	2102      	movs	r1, #2
 8010cde:	e000      	b.n	8010ce2 <__cvt+0x3a>
 8010ce0:	2103      	movs	r1, #3
 8010ce2:	ab03      	add	r3, sp, #12
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	ab02      	add	r3, sp, #8
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	4622      	mov	r2, r4
 8010cec:	4633      	mov	r3, r6
 8010cee:	eeb0 0b48 	vmov.f64	d0, d8
 8010cf2:	f000 fefd 	bl	8011af0 <_dtoa_r>
 8010cf6:	2d47      	cmp	r5, #71	; 0x47
 8010cf8:	d101      	bne.n	8010cfe <__cvt+0x56>
 8010cfa:	07fb      	lsls	r3, r7, #31
 8010cfc:	d51a      	bpl.n	8010d34 <__cvt+0x8c>
 8010cfe:	2d46      	cmp	r5, #70	; 0x46
 8010d00:	eb00 0204 	add.w	r2, r0, r4
 8010d04:	d10c      	bne.n	8010d20 <__cvt+0x78>
 8010d06:	7803      	ldrb	r3, [r0, #0]
 8010d08:	2b30      	cmp	r3, #48	; 0x30
 8010d0a:	d107      	bne.n	8010d1c <__cvt+0x74>
 8010d0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d14:	bf1c      	itt	ne
 8010d16:	f1c4 0401 	rsbne	r4, r4, #1
 8010d1a:	6034      	strne	r4, [r6, #0]
 8010d1c:	6833      	ldr	r3, [r6, #0]
 8010d1e:	441a      	add	r2, r3
 8010d20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d28:	bf08      	it	eq
 8010d2a:	9203      	streq	r2, [sp, #12]
 8010d2c:	2130      	movs	r1, #48	; 0x30
 8010d2e:	9b03      	ldr	r3, [sp, #12]
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d307      	bcc.n	8010d44 <__cvt+0x9c>
 8010d34:	9b03      	ldr	r3, [sp, #12]
 8010d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d38:	1a1b      	subs	r3, r3, r0
 8010d3a:	6013      	str	r3, [r2, #0]
 8010d3c:	b005      	add	sp, #20
 8010d3e:	ecbd 8b02 	vpop	{d8}
 8010d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d44:	1c5c      	adds	r4, r3, #1
 8010d46:	9403      	str	r4, [sp, #12]
 8010d48:	7019      	strb	r1, [r3, #0]
 8010d4a:	e7f0      	b.n	8010d2e <__cvt+0x86>

08010d4c <__exponent>:
 8010d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2900      	cmp	r1, #0
 8010d52:	bfb8      	it	lt
 8010d54:	4249      	neglt	r1, r1
 8010d56:	f803 2b02 	strb.w	r2, [r3], #2
 8010d5a:	bfb4      	ite	lt
 8010d5c:	222d      	movlt	r2, #45	; 0x2d
 8010d5e:	222b      	movge	r2, #43	; 0x2b
 8010d60:	2909      	cmp	r1, #9
 8010d62:	7042      	strb	r2, [r0, #1]
 8010d64:	dd2a      	ble.n	8010dbc <__exponent+0x70>
 8010d66:	f10d 0407 	add.w	r4, sp, #7
 8010d6a:	46a4      	mov	ip, r4
 8010d6c:	270a      	movs	r7, #10
 8010d6e:	46a6      	mov	lr, r4
 8010d70:	460a      	mov	r2, r1
 8010d72:	fb91 f6f7 	sdiv	r6, r1, r7
 8010d76:	fb07 1516 	mls	r5, r7, r6, r1
 8010d7a:	3530      	adds	r5, #48	; 0x30
 8010d7c:	2a63      	cmp	r2, #99	; 0x63
 8010d7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010d82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010d86:	4631      	mov	r1, r6
 8010d88:	dcf1      	bgt.n	8010d6e <__exponent+0x22>
 8010d8a:	3130      	adds	r1, #48	; 0x30
 8010d8c:	f1ae 0502 	sub.w	r5, lr, #2
 8010d90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010d94:	1c44      	adds	r4, r0, #1
 8010d96:	4629      	mov	r1, r5
 8010d98:	4561      	cmp	r1, ip
 8010d9a:	d30a      	bcc.n	8010db2 <__exponent+0x66>
 8010d9c:	f10d 0209 	add.w	r2, sp, #9
 8010da0:	eba2 020e 	sub.w	r2, r2, lr
 8010da4:	4565      	cmp	r5, ip
 8010da6:	bf88      	it	hi
 8010da8:	2200      	movhi	r2, #0
 8010daa:	4413      	add	r3, r2
 8010dac:	1a18      	subs	r0, r3, r0
 8010dae:	b003      	add	sp, #12
 8010db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010db6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010dba:	e7ed      	b.n	8010d98 <__exponent+0x4c>
 8010dbc:	2330      	movs	r3, #48	; 0x30
 8010dbe:	3130      	adds	r1, #48	; 0x30
 8010dc0:	7083      	strb	r3, [r0, #2]
 8010dc2:	70c1      	strb	r1, [r0, #3]
 8010dc4:	1d03      	adds	r3, r0, #4
 8010dc6:	e7f1      	b.n	8010dac <__exponent+0x60>

08010dc8 <_printf_float>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	b08b      	sub	sp, #44	; 0x2c
 8010dce:	460c      	mov	r4, r1
 8010dd0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010dd4:	4616      	mov	r6, r2
 8010dd6:	461f      	mov	r7, r3
 8010dd8:	4605      	mov	r5, r0
 8010dda:	f001 fdaf 	bl	801293c <_localeconv_r>
 8010dde:	f8d0 b000 	ldr.w	fp, [r0]
 8010de2:	4658      	mov	r0, fp
 8010de4:	f7ef fadc 	bl	80003a0 <strlen>
 8010de8:	2300      	movs	r3, #0
 8010dea:	9308      	str	r3, [sp, #32]
 8010dec:	f8d8 3000 	ldr.w	r3, [r8]
 8010df0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010df4:	6822      	ldr	r2, [r4, #0]
 8010df6:	3307      	adds	r3, #7
 8010df8:	f023 0307 	bic.w	r3, r3, #7
 8010dfc:	f103 0108 	add.w	r1, r3, #8
 8010e00:	f8c8 1000 	str.w	r1, [r8]
 8010e04:	4682      	mov	sl, r0
 8010e06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010e0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011070 <_printf_float+0x2a8>
 8010e12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010e16:	eeb0 6bc0 	vabs.f64	d6, d0
 8010e1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e22:	dd24      	ble.n	8010e6e <_printf_float+0xa6>
 8010e24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2c:	d502      	bpl.n	8010e34 <_printf_float+0x6c>
 8010e2e:	232d      	movs	r3, #45	; 0x2d
 8010e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e34:	4b90      	ldr	r3, [pc, #576]	; (8011078 <_printf_float+0x2b0>)
 8010e36:	4891      	ldr	r0, [pc, #580]	; (801107c <_printf_float+0x2b4>)
 8010e38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010e3c:	bf94      	ite	ls
 8010e3e:	4698      	movls	r8, r3
 8010e40:	4680      	movhi	r8, r0
 8010e42:	2303      	movs	r3, #3
 8010e44:	6123      	str	r3, [r4, #16]
 8010e46:	f022 0204 	bic.w	r2, r2, #4
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	6022      	str	r2, [r4, #0]
 8010e4e:	9304      	str	r3, [sp, #16]
 8010e50:	9700      	str	r7, [sp, #0]
 8010e52:	4633      	mov	r3, r6
 8010e54:	aa09      	add	r2, sp, #36	; 0x24
 8010e56:	4621      	mov	r1, r4
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f000 f9d3 	bl	8011204 <_printf_common>
 8010e5e:	3001      	adds	r0, #1
 8010e60:	f040 808a 	bne.w	8010f78 <_printf_float+0x1b0>
 8010e64:	f04f 30ff 	mov.w	r0, #4294967295
 8010e68:	b00b      	add	sp, #44	; 0x2c
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8010e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e76:	d709      	bvc.n	8010e8c <_printf_float+0xc4>
 8010e78:	ee10 3a90 	vmov	r3, s1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	bfbc      	itt	lt
 8010e80:	232d      	movlt	r3, #45	; 0x2d
 8010e82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010e86:	487e      	ldr	r0, [pc, #504]	; (8011080 <_printf_float+0x2b8>)
 8010e88:	4b7e      	ldr	r3, [pc, #504]	; (8011084 <_printf_float+0x2bc>)
 8010e8a:	e7d5      	b.n	8010e38 <_printf_float+0x70>
 8010e8c:	6863      	ldr	r3, [r4, #4]
 8010e8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010e92:	9104      	str	r1, [sp, #16]
 8010e94:	1c59      	adds	r1, r3, #1
 8010e96:	d13c      	bne.n	8010f12 <_printf_float+0x14a>
 8010e98:	2306      	movs	r3, #6
 8010e9a:	6063      	str	r3, [r4, #4]
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	9303      	str	r3, [sp, #12]
 8010ea0:	ab08      	add	r3, sp, #32
 8010ea2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010eaa:	ab07      	add	r3, sp, #28
 8010eac:	6861      	ldr	r1, [r4, #4]
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	6022      	str	r2, [r4, #0]
 8010eb2:	f10d 031b 	add.w	r3, sp, #27
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f7ff fef6 	bl	8010ca8 <__cvt>
 8010ebc:	9b04      	ldr	r3, [sp, #16]
 8010ebe:	9907      	ldr	r1, [sp, #28]
 8010ec0:	2b47      	cmp	r3, #71	; 0x47
 8010ec2:	4680      	mov	r8, r0
 8010ec4:	d108      	bne.n	8010ed8 <_printf_float+0x110>
 8010ec6:	1cc8      	adds	r0, r1, #3
 8010ec8:	db02      	blt.n	8010ed0 <_printf_float+0x108>
 8010eca:	6863      	ldr	r3, [r4, #4]
 8010ecc:	4299      	cmp	r1, r3
 8010ece:	dd41      	ble.n	8010f54 <_printf_float+0x18c>
 8010ed0:	f1a9 0902 	sub.w	r9, r9, #2
 8010ed4:	fa5f f989 	uxtb.w	r9, r9
 8010ed8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010edc:	d820      	bhi.n	8010f20 <_printf_float+0x158>
 8010ede:	3901      	subs	r1, #1
 8010ee0:	464a      	mov	r2, r9
 8010ee2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ee6:	9107      	str	r1, [sp, #28]
 8010ee8:	f7ff ff30 	bl	8010d4c <__exponent>
 8010eec:	9a08      	ldr	r2, [sp, #32]
 8010eee:	9004      	str	r0, [sp, #16]
 8010ef0:	1813      	adds	r3, r2, r0
 8010ef2:	2a01      	cmp	r2, #1
 8010ef4:	6123      	str	r3, [r4, #16]
 8010ef6:	dc02      	bgt.n	8010efe <_printf_float+0x136>
 8010ef8:	6822      	ldr	r2, [r4, #0]
 8010efa:	07d2      	lsls	r2, r2, #31
 8010efc:	d501      	bpl.n	8010f02 <_printf_float+0x13a>
 8010efe:	3301      	adds	r3, #1
 8010f00:	6123      	str	r3, [r4, #16]
 8010f02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d0a2      	beq.n	8010e50 <_printf_float+0x88>
 8010f0a:	232d      	movs	r3, #45	; 0x2d
 8010f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f10:	e79e      	b.n	8010e50 <_printf_float+0x88>
 8010f12:	9904      	ldr	r1, [sp, #16]
 8010f14:	2947      	cmp	r1, #71	; 0x47
 8010f16:	d1c1      	bne.n	8010e9c <_printf_float+0xd4>
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d1bf      	bne.n	8010e9c <_printf_float+0xd4>
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	e7bc      	b.n	8010e9a <_printf_float+0xd2>
 8010f20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010f24:	d118      	bne.n	8010f58 <_printf_float+0x190>
 8010f26:	2900      	cmp	r1, #0
 8010f28:	6863      	ldr	r3, [r4, #4]
 8010f2a:	dd0b      	ble.n	8010f44 <_printf_float+0x17c>
 8010f2c:	6121      	str	r1, [r4, #16]
 8010f2e:	b913      	cbnz	r3, 8010f36 <_printf_float+0x16e>
 8010f30:	6822      	ldr	r2, [r4, #0]
 8010f32:	07d0      	lsls	r0, r2, #31
 8010f34:	d502      	bpl.n	8010f3c <_printf_float+0x174>
 8010f36:	3301      	adds	r3, #1
 8010f38:	440b      	add	r3, r1
 8010f3a:	6123      	str	r3, [r4, #16]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f40:	9304      	str	r3, [sp, #16]
 8010f42:	e7de      	b.n	8010f02 <_printf_float+0x13a>
 8010f44:	b913      	cbnz	r3, 8010f4c <_printf_float+0x184>
 8010f46:	6822      	ldr	r2, [r4, #0]
 8010f48:	07d2      	lsls	r2, r2, #31
 8010f4a:	d501      	bpl.n	8010f50 <_printf_float+0x188>
 8010f4c:	3302      	adds	r3, #2
 8010f4e:	e7f4      	b.n	8010f3a <_printf_float+0x172>
 8010f50:	2301      	movs	r3, #1
 8010f52:	e7f2      	b.n	8010f3a <_printf_float+0x172>
 8010f54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010f58:	9b08      	ldr	r3, [sp, #32]
 8010f5a:	4299      	cmp	r1, r3
 8010f5c:	db05      	blt.n	8010f6a <_printf_float+0x1a2>
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	6121      	str	r1, [r4, #16]
 8010f62:	07d8      	lsls	r0, r3, #31
 8010f64:	d5ea      	bpl.n	8010f3c <_printf_float+0x174>
 8010f66:	1c4b      	adds	r3, r1, #1
 8010f68:	e7e7      	b.n	8010f3a <_printf_float+0x172>
 8010f6a:	2900      	cmp	r1, #0
 8010f6c:	bfd4      	ite	le
 8010f6e:	f1c1 0202 	rsble	r2, r1, #2
 8010f72:	2201      	movgt	r2, #1
 8010f74:	4413      	add	r3, r2
 8010f76:	e7e0      	b.n	8010f3a <_printf_float+0x172>
 8010f78:	6823      	ldr	r3, [r4, #0]
 8010f7a:	055a      	lsls	r2, r3, #21
 8010f7c:	d407      	bmi.n	8010f8e <_printf_float+0x1c6>
 8010f7e:	6923      	ldr	r3, [r4, #16]
 8010f80:	4642      	mov	r2, r8
 8010f82:	4631      	mov	r1, r6
 8010f84:	4628      	mov	r0, r5
 8010f86:	47b8      	blx	r7
 8010f88:	3001      	adds	r0, #1
 8010f8a:	d12a      	bne.n	8010fe2 <_printf_float+0x21a>
 8010f8c:	e76a      	b.n	8010e64 <_printf_float+0x9c>
 8010f8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010f92:	f240 80e2 	bls.w	801115a <_printf_float+0x392>
 8010f96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010f9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa2:	d133      	bne.n	801100c <_printf_float+0x244>
 8010fa4:	4a38      	ldr	r2, [pc, #224]	; (8011088 <_printf_float+0x2c0>)
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	4631      	mov	r1, r6
 8010faa:	4628      	mov	r0, r5
 8010fac:	47b8      	blx	r7
 8010fae:	3001      	adds	r0, #1
 8010fb0:	f43f af58 	beq.w	8010e64 <_printf_float+0x9c>
 8010fb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	db02      	blt.n	8010fc2 <_printf_float+0x1fa>
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	07d8      	lsls	r0, r3, #31
 8010fc0:	d50f      	bpl.n	8010fe2 <_printf_float+0x21a>
 8010fc2:	4653      	mov	r3, sl
 8010fc4:	465a      	mov	r2, fp
 8010fc6:	4631      	mov	r1, r6
 8010fc8:	4628      	mov	r0, r5
 8010fca:	47b8      	blx	r7
 8010fcc:	3001      	adds	r0, #1
 8010fce:	f43f af49 	beq.w	8010e64 <_printf_float+0x9c>
 8010fd2:	f04f 0800 	mov.w	r8, #0
 8010fd6:	f104 091a 	add.w	r9, r4, #26
 8010fda:	9b08      	ldr	r3, [sp, #32]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	4543      	cmp	r3, r8
 8010fe0:	dc09      	bgt.n	8010ff6 <_printf_float+0x22e>
 8010fe2:	6823      	ldr	r3, [r4, #0]
 8010fe4:	079b      	lsls	r3, r3, #30
 8010fe6:	f100 8108 	bmi.w	80111fa <_printf_float+0x432>
 8010fea:	68e0      	ldr	r0, [r4, #12]
 8010fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fee:	4298      	cmp	r0, r3
 8010ff0:	bfb8      	it	lt
 8010ff2:	4618      	movlt	r0, r3
 8010ff4:	e738      	b.n	8010e68 <_printf_float+0xa0>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	464a      	mov	r2, r9
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	47b8      	blx	r7
 8011000:	3001      	adds	r0, #1
 8011002:	f43f af2f 	beq.w	8010e64 <_printf_float+0x9c>
 8011006:	f108 0801 	add.w	r8, r8, #1
 801100a:	e7e6      	b.n	8010fda <_printf_float+0x212>
 801100c:	9b07      	ldr	r3, [sp, #28]
 801100e:	2b00      	cmp	r3, #0
 8011010:	dc3c      	bgt.n	801108c <_printf_float+0x2c4>
 8011012:	4a1d      	ldr	r2, [pc, #116]	; (8011088 <_printf_float+0x2c0>)
 8011014:	2301      	movs	r3, #1
 8011016:	4631      	mov	r1, r6
 8011018:	4628      	mov	r0, r5
 801101a:	47b8      	blx	r7
 801101c:	3001      	adds	r0, #1
 801101e:	f43f af21 	beq.w	8010e64 <_printf_float+0x9c>
 8011022:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011026:	4313      	orrs	r3, r2
 8011028:	d102      	bne.n	8011030 <_printf_float+0x268>
 801102a:	6823      	ldr	r3, [r4, #0]
 801102c:	07d9      	lsls	r1, r3, #31
 801102e:	d5d8      	bpl.n	8010fe2 <_printf_float+0x21a>
 8011030:	4653      	mov	r3, sl
 8011032:	465a      	mov	r2, fp
 8011034:	4631      	mov	r1, r6
 8011036:	4628      	mov	r0, r5
 8011038:	47b8      	blx	r7
 801103a:	3001      	adds	r0, #1
 801103c:	f43f af12 	beq.w	8010e64 <_printf_float+0x9c>
 8011040:	f04f 0900 	mov.w	r9, #0
 8011044:	f104 0a1a 	add.w	sl, r4, #26
 8011048:	9b07      	ldr	r3, [sp, #28]
 801104a:	425b      	negs	r3, r3
 801104c:	454b      	cmp	r3, r9
 801104e:	dc01      	bgt.n	8011054 <_printf_float+0x28c>
 8011050:	9b08      	ldr	r3, [sp, #32]
 8011052:	e795      	b.n	8010f80 <_printf_float+0x1b8>
 8011054:	2301      	movs	r3, #1
 8011056:	4652      	mov	r2, sl
 8011058:	4631      	mov	r1, r6
 801105a:	4628      	mov	r0, r5
 801105c:	47b8      	blx	r7
 801105e:	3001      	adds	r0, #1
 8011060:	f43f af00 	beq.w	8010e64 <_printf_float+0x9c>
 8011064:	f109 0901 	add.w	r9, r9, #1
 8011068:	e7ee      	b.n	8011048 <_printf_float+0x280>
 801106a:	bf00      	nop
 801106c:	f3af 8000 	nop.w
 8011070:	ffffffff 	.word	0xffffffff
 8011074:	7fefffff 	.word	0x7fefffff
 8011078:	0801df31 	.word	0x0801df31
 801107c:	0801df35 	.word	0x0801df35
 8011080:	0801df3d 	.word	0x0801df3d
 8011084:	0801df39 	.word	0x0801df39
 8011088:	0801df41 	.word	0x0801df41
 801108c:	9a08      	ldr	r2, [sp, #32]
 801108e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011090:	429a      	cmp	r2, r3
 8011092:	bfa8      	it	ge
 8011094:	461a      	movge	r2, r3
 8011096:	2a00      	cmp	r2, #0
 8011098:	4691      	mov	r9, r2
 801109a:	dc38      	bgt.n	801110e <_printf_float+0x346>
 801109c:	2300      	movs	r3, #0
 801109e:	9305      	str	r3, [sp, #20]
 80110a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110a4:	f104 021a 	add.w	r2, r4, #26
 80110a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110aa:	9905      	ldr	r1, [sp, #20]
 80110ac:	9304      	str	r3, [sp, #16]
 80110ae:	eba3 0309 	sub.w	r3, r3, r9
 80110b2:	428b      	cmp	r3, r1
 80110b4:	dc33      	bgt.n	801111e <_printf_float+0x356>
 80110b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	db3c      	blt.n	8011138 <_printf_float+0x370>
 80110be:	6823      	ldr	r3, [r4, #0]
 80110c0:	07da      	lsls	r2, r3, #31
 80110c2:	d439      	bmi.n	8011138 <_printf_float+0x370>
 80110c4:	9b08      	ldr	r3, [sp, #32]
 80110c6:	9a04      	ldr	r2, [sp, #16]
 80110c8:	9907      	ldr	r1, [sp, #28]
 80110ca:	1a9a      	subs	r2, r3, r2
 80110cc:	eba3 0901 	sub.w	r9, r3, r1
 80110d0:	4591      	cmp	r9, r2
 80110d2:	bfa8      	it	ge
 80110d4:	4691      	movge	r9, r2
 80110d6:	f1b9 0f00 	cmp.w	r9, #0
 80110da:	dc35      	bgt.n	8011148 <_printf_float+0x380>
 80110dc:	f04f 0800 	mov.w	r8, #0
 80110e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110e4:	f104 0a1a 	add.w	sl, r4, #26
 80110e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110ec:	1a9b      	subs	r3, r3, r2
 80110ee:	eba3 0309 	sub.w	r3, r3, r9
 80110f2:	4543      	cmp	r3, r8
 80110f4:	f77f af75 	ble.w	8010fe2 <_printf_float+0x21a>
 80110f8:	2301      	movs	r3, #1
 80110fa:	4652      	mov	r2, sl
 80110fc:	4631      	mov	r1, r6
 80110fe:	4628      	mov	r0, r5
 8011100:	47b8      	blx	r7
 8011102:	3001      	adds	r0, #1
 8011104:	f43f aeae 	beq.w	8010e64 <_printf_float+0x9c>
 8011108:	f108 0801 	add.w	r8, r8, #1
 801110c:	e7ec      	b.n	80110e8 <_printf_float+0x320>
 801110e:	4613      	mov	r3, r2
 8011110:	4631      	mov	r1, r6
 8011112:	4642      	mov	r2, r8
 8011114:	4628      	mov	r0, r5
 8011116:	47b8      	blx	r7
 8011118:	3001      	adds	r0, #1
 801111a:	d1bf      	bne.n	801109c <_printf_float+0x2d4>
 801111c:	e6a2      	b.n	8010e64 <_printf_float+0x9c>
 801111e:	2301      	movs	r3, #1
 8011120:	4631      	mov	r1, r6
 8011122:	4628      	mov	r0, r5
 8011124:	9204      	str	r2, [sp, #16]
 8011126:	47b8      	blx	r7
 8011128:	3001      	adds	r0, #1
 801112a:	f43f ae9b 	beq.w	8010e64 <_printf_float+0x9c>
 801112e:	9b05      	ldr	r3, [sp, #20]
 8011130:	9a04      	ldr	r2, [sp, #16]
 8011132:	3301      	adds	r3, #1
 8011134:	9305      	str	r3, [sp, #20]
 8011136:	e7b7      	b.n	80110a8 <_printf_float+0x2e0>
 8011138:	4653      	mov	r3, sl
 801113a:	465a      	mov	r2, fp
 801113c:	4631      	mov	r1, r6
 801113e:	4628      	mov	r0, r5
 8011140:	47b8      	blx	r7
 8011142:	3001      	adds	r0, #1
 8011144:	d1be      	bne.n	80110c4 <_printf_float+0x2fc>
 8011146:	e68d      	b.n	8010e64 <_printf_float+0x9c>
 8011148:	9a04      	ldr	r2, [sp, #16]
 801114a:	464b      	mov	r3, r9
 801114c:	4442      	add	r2, r8
 801114e:	4631      	mov	r1, r6
 8011150:	4628      	mov	r0, r5
 8011152:	47b8      	blx	r7
 8011154:	3001      	adds	r0, #1
 8011156:	d1c1      	bne.n	80110dc <_printf_float+0x314>
 8011158:	e684      	b.n	8010e64 <_printf_float+0x9c>
 801115a:	9a08      	ldr	r2, [sp, #32]
 801115c:	2a01      	cmp	r2, #1
 801115e:	dc01      	bgt.n	8011164 <_printf_float+0x39c>
 8011160:	07db      	lsls	r3, r3, #31
 8011162:	d537      	bpl.n	80111d4 <_printf_float+0x40c>
 8011164:	2301      	movs	r3, #1
 8011166:	4642      	mov	r2, r8
 8011168:	4631      	mov	r1, r6
 801116a:	4628      	mov	r0, r5
 801116c:	47b8      	blx	r7
 801116e:	3001      	adds	r0, #1
 8011170:	f43f ae78 	beq.w	8010e64 <_printf_float+0x9c>
 8011174:	4653      	mov	r3, sl
 8011176:	465a      	mov	r2, fp
 8011178:	4631      	mov	r1, r6
 801117a:	4628      	mov	r0, r5
 801117c:	47b8      	blx	r7
 801117e:	3001      	adds	r0, #1
 8011180:	f43f ae70 	beq.w	8010e64 <_printf_float+0x9c>
 8011184:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011188:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011190:	d01b      	beq.n	80111ca <_printf_float+0x402>
 8011192:	9b08      	ldr	r3, [sp, #32]
 8011194:	f108 0201 	add.w	r2, r8, #1
 8011198:	3b01      	subs	r3, #1
 801119a:	4631      	mov	r1, r6
 801119c:	4628      	mov	r0, r5
 801119e:	47b8      	blx	r7
 80111a0:	3001      	adds	r0, #1
 80111a2:	d10e      	bne.n	80111c2 <_printf_float+0x3fa>
 80111a4:	e65e      	b.n	8010e64 <_printf_float+0x9c>
 80111a6:	2301      	movs	r3, #1
 80111a8:	464a      	mov	r2, r9
 80111aa:	4631      	mov	r1, r6
 80111ac:	4628      	mov	r0, r5
 80111ae:	47b8      	blx	r7
 80111b0:	3001      	adds	r0, #1
 80111b2:	f43f ae57 	beq.w	8010e64 <_printf_float+0x9c>
 80111b6:	f108 0801 	add.w	r8, r8, #1
 80111ba:	9b08      	ldr	r3, [sp, #32]
 80111bc:	3b01      	subs	r3, #1
 80111be:	4543      	cmp	r3, r8
 80111c0:	dcf1      	bgt.n	80111a6 <_printf_float+0x3de>
 80111c2:	9b04      	ldr	r3, [sp, #16]
 80111c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111c8:	e6db      	b.n	8010f82 <_printf_float+0x1ba>
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	f104 091a 	add.w	r9, r4, #26
 80111d2:	e7f2      	b.n	80111ba <_printf_float+0x3f2>
 80111d4:	2301      	movs	r3, #1
 80111d6:	4642      	mov	r2, r8
 80111d8:	e7df      	b.n	801119a <_printf_float+0x3d2>
 80111da:	2301      	movs	r3, #1
 80111dc:	464a      	mov	r2, r9
 80111de:	4631      	mov	r1, r6
 80111e0:	4628      	mov	r0, r5
 80111e2:	47b8      	blx	r7
 80111e4:	3001      	adds	r0, #1
 80111e6:	f43f ae3d 	beq.w	8010e64 <_printf_float+0x9c>
 80111ea:	f108 0801 	add.w	r8, r8, #1
 80111ee:	68e3      	ldr	r3, [r4, #12]
 80111f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111f2:	1a5b      	subs	r3, r3, r1
 80111f4:	4543      	cmp	r3, r8
 80111f6:	dcf0      	bgt.n	80111da <_printf_float+0x412>
 80111f8:	e6f7      	b.n	8010fea <_printf_float+0x222>
 80111fa:	f04f 0800 	mov.w	r8, #0
 80111fe:	f104 0919 	add.w	r9, r4, #25
 8011202:	e7f4      	b.n	80111ee <_printf_float+0x426>

08011204 <_printf_common>:
 8011204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011208:	4616      	mov	r6, r2
 801120a:	4699      	mov	r9, r3
 801120c:	688a      	ldr	r2, [r1, #8]
 801120e:	690b      	ldr	r3, [r1, #16]
 8011210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011214:	4293      	cmp	r3, r2
 8011216:	bfb8      	it	lt
 8011218:	4613      	movlt	r3, r2
 801121a:	6033      	str	r3, [r6, #0]
 801121c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011220:	4607      	mov	r7, r0
 8011222:	460c      	mov	r4, r1
 8011224:	b10a      	cbz	r2, 801122a <_printf_common+0x26>
 8011226:	3301      	adds	r3, #1
 8011228:	6033      	str	r3, [r6, #0]
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	0699      	lsls	r1, r3, #26
 801122e:	bf42      	ittt	mi
 8011230:	6833      	ldrmi	r3, [r6, #0]
 8011232:	3302      	addmi	r3, #2
 8011234:	6033      	strmi	r3, [r6, #0]
 8011236:	6825      	ldr	r5, [r4, #0]
 8011238:	f015 0506 	ands.w	r5, r5, #6
 801123c:	d106      	bne.n	801124c <_printf_common+0x48>
 801123e:	f104 0a19 	add.w	sl, r4, #25
 8011242:	68e3      	ldr	r3, [r4, #12]
 8011244:	6832      	ldr	r2, [r6, #0]
 8011246:	1a9b      	subs	r3, r3, r2
 8011248:	42ab      	cmp	r3, r5
 801124a:	dc26      	bgt.n	801129a <_printf_common+0x96>
 801124c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011250:	1e13      	subs	r3, r2, #0
 8011252:	6822      	ldr	r2, [r4, #0]
 8011254:	bf18      	it	ne
 8011256:	2301      	movne	r3, #1
 8011258:	0692      	lsls	r2, r2, #26
 801125a:	d42b      	bmi.n	80112b4 <_printf_common+0xb0>
 801125c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011260:	4649      	mov	r1, r9
 8011262:	4638      	mov	r0, r7
 8011264:	47c0      	blx	r8
 8011266:	3001      	adds	r0, #1
 8011268:	d01e      	beq.n	80112a8 <_printf_common+0xa4>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	68e5      	ldr	r5, [r4, #12]
 801126e:	6832      	ldr	r2, [r6, #0]
 8011270:	f003 0306 	and.w	r3, r3, #6
 8011274:	2b04      	cmp	r3, #4
 8011276:	bf08      	it	eq
 8011278:	1aad      	subeq	r5, r5, r2
 801127a:	68a3      	ldr	r3, [r4, #8]
 801127c:	6922      	ldr	r2, [r4, #16]
 801127e:	bf0c      	ite	eq
 8011280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011284:	2500      	movne	r5, #0
 8011286:	4293      	cmp	r3, r2
 8011288:	bfc4      	itt	gt
 801128a:	1a9b      	subgt	r3, r3, r2
 801128c:	18ed      	addgt	r5, r5, r3
 801128e:	2600      	movs	r6, #0
 8011290:	341a      	adds	r4, #26
 8011292:	42b5      	cmp	r5, r6
 8011294:	d11a      	bne.n	80112cc <_printf_common+0xc8>
 8011296:	2000      	movs	r0, #0
 8011298:	e008      	b.n	80112ac <_printf_common+0xa8>
 801129a:	2301      	movs	r3, #1
 801129c:	4652      	mov	r2, sl
 801129e:	4649      	mov	r1, r9
 80112a0:	4638      	mov	r0, r7
 80112a2:	47c0      	blx	r8
 80112a4:	3001      	adds	r0, #1
 80112a6:	d103      	bne.n	80112b0 <_printf_common+0xac>
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b0:	3501      	adds	r5, #1
 80112b2:	e7c6      	b.n	8011242 <_printf_common+0x3e>
 80112b4:	18e1      	adds	r1, r4, r3
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	2030      	movs	r0, #48	; 0x30
 80112ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112be:	4422      	add	r2, r4
 80112c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112c8:	3302      	adds	r3, #2
 80112ca:	e7c7      	b.n	801125c <_printf_common+0x58>
 80112cc:	2301      	movs	r3, #1
 80112ce:	4622      	mov	r2, r4
 80112d0:	4649      	mov	r1, r9
 80112d2:	4638      	mov	r0, r7
 80112d4:	47c0      	blx	r8
 80112d6:	3001      	adds	r0, #1
 80112d8:	d0e6      	beq.n	80112a8 <_printf_common+0xa4>
 80112da:	3601      	adds	r6, #1
 80112dc:	e7d9      	b.n	8011292 <_printf_common+0x8e>
	...

080112e0 <_printf_i>:
 80112e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112e4:	7e0f      	ldrb	r7, [r1, #24]
 80112e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112e8:	2f78      	cmp	r7, #120	; 0x78
 80112ea:	4691      	mov	r9, r2
 80112ec:	4680      	mov	r8, r0
 80112ee:	460c      	mov	r4, r1
 80112f0:	469a      	mov	sl, r3
 80112f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112f6:	d807      	bhi.n	8011308 <_printf_i+0x28>
 80112f8:	2f62      	cmp	r7, #98	; 0x62
 80112fa:	d80a      	bhi.n	8011312 <_printf_i+0x32>
 80112fc:	2f00      	cmp	r7, #0
 80112fe:	f000 80d8 	beq.w	80114b2 <_printf_i+0x1d2>
 8011302:	2f58      	cmp	r7, #88	; 0x58
 8011304:	f000 80a3 	beq.w	801144e <_printf_i+0x16e>
 8011308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801130c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011310:	e03a      	b.n	8011388 <_printf_i+0xa8>
 8011312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011316:	2b15      	cmp	r3, #21
 8011318:	d8f6      	bhi.n	8011308 <_printf_i+0x28>
 801131a:	a101      	add	r1, pc, #4	; (adr r1, 8011320 <_printf_i+0x40>)
 801131c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011320:	08011379 	.word	0x08011379
 8011324:	0801138d 	.word	0x0801138d
 8011328:	08011309 	.word	0x08011309
 801132c:	08011309 	.word	0x08011309
 8011330:	08011309 	.word	0x08011309
 8011334:	08011309 	.word	0x08011309
 8011338:	0801138d 	.word	0x0801138d
 801133c:	08011309 	.word	0x08011309
 8011340:	08011309 	.word	0x08011309
 8011344:	08011309 	.word	0x08011309
 8011348:	08011309 	.word	0x08011309
 801134c:	08011499 	.word	0x08011499
 8011350:	080113bd 	.word	0x080113bd
 8011354:	0801147b 	.word	0x0801147b
 8011358:	08011309 	.word	0x08011309
 801135c:	08011309 	.word	0x08011309
 8011360:	080114bb 	.word	0x080114bb
 8011364:	08011309 	.word	0x08011309
 8011368:	080113bd 	.word	0x080113bd
 801136c:	08011309 	.word	0x08011309
 8011370:	08011309 	.word	0x08011309
 8011374:	08011483 	.word	0x08011483
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	1d1a      	adds	r2, r3, #4
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	602a      	str	r2, [r5, #0]
 8011380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011388:	2301      	movs	r3, #1
 801138a:	e0a3      	b.n	80114d4 <_printf_i+0x1f4>
 801138c:	6820      	ldr	r0, [r4, #0]
 801138e:	6829      	ldr	r1, [r5, #0]
 8011390:	0606      	lsls	r6, r0, #24
 8011392:	f101 0304 	add.w	r3, r1, #4
 8011396:	d50a      	bpl.n	80113ae <_printf_i+0xce>
 8011398:	680e      	ldr	r6, [r1, #0]
 801139a:	602b      	str	r3, [r5, #0]
 801139c:	2e00      	cmp	r6, #0
 801139e:	da03      	bge.n	80113a8 <_printf_i+0xc8>
 80113a0:	232d      	movs	r3, #45	; 0x2d
 80113a2:	4276      	negs	r6, r6
 80113a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113a8:	485e      	ldr	r0, [pc, #376]	; (8011524 <_printf_i+0x244>)
 80113aa:	230a      	movs	r3, #10
 80113ac:	e019      	b.n	80113e2 <_printf_i+0x102>
 80113ae:	680e      	ldr	r6, [r1, #0]
 80113b0:	602b      	str	r3, [r5, #0]
 80113b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113b6:	bf18      	it	ne
 80113b8:	b236      	sxthne	r6, r6
 80113ba:	e7ef      	b.n	801139c <_printf_i+0xbc>
 80113bc:	682b      	ldr	r3, [r5, #0]
 80113be:	6820      	ldr	r0, [r4, #0]
 80113c0:	1d19      	adds	r1, r3, #4
 80113c2:	6029      	str	r1, [r5, #0]
 80113c4:	0601      	lsls	r1, r0, #24
 80113c6:	d501      	bpl.n	80113cc <_printf_i+0xec>
 80113c8:	681e      	ldr	r6, [r3, #0]
 80113ca:	e002      	b.n	80113d2 <_printf_i+0xf2>
 80113cc:	0646      	lsls	r6, r0, #25
 80113ce:	d5fb      	bpl.n	80113c8 <_printf_i+0xe8>
 80113d0:	881e      	ldrh	r6, [r3, #0]
 80113d2:	4854      	ldr	r0, [pc, #336]	; (8011524 <_printf_i+0x244>)
 80113d4:	2f6f      	cmp	r7, #111	; 0x6f
 80113d6:	bf0c      	ite	eq
 80113d8:	2308      	moveq	r3, #8
 80113da:	230a      	movne	r3, #10
 80113dc:	2100      	movs	r1, #0
 80113de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113e2:	6865      	ldr	r5, [r4, #4]
 80113e4:	60a5      	str	r5, [r4, #8]
 80113e6:	2d00      	cmp	r5, #0
 80113e8:	bfa2      	ittt	ge
 80113ea:	6821      	ldrge	r1, [r4, #0]
 80113ec:	f021 0104 	bicge.w	r1, r1, #4
 80113f0:	6021      	strge	r1, [r4, #0]
 80113f2:	b90e      	cbnz	r6, 80113f8 <_printf_i+0x118>
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	d04d      	beq.n	8011494 <_printf_i+0x1b4>
 80113f8:	4615      	mov	r5, r2
 80113fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80113fe:	fb03 6711 	mls	r7, r3, r1, r6
 8011402:	5dc7      	ldrb	r7, [r0, r7]
 8011404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011408:	4637      	mov	r7, r6
 801140a:	42bb      	cmp	r3, r7
 801140c:	460e      	mov	r6, r1
 801140e:	d9f4      	bls.n	80113fa <_printf_i+0x11a>
 8011410:	2b08      	cmp	r3, #8
 8011412:	d10b      	bne.n	801142c <_printf_i+0x14c>
 8011414:	6823      	ldr	r3, [r4, #0]
 8011416:	07de      	lsls	r6, r3, #31
 8011418:	d508      	bpl.n	801142c <_printf_i+0x14c>
 801141a:	6923      	ldr	r3, [r4, #16]
 801141c:	6861      	ldr	r1, [r4, #4]
 801141e:	4299      	cmp	r1, r3
 8011420:	bfde      	ittt	le
 8011422:	2330      	movle	r3, #48	; 0x30
 8011424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011428:	f105 35ff 	addle.w	r5, r5, #4294967295
 801142c:	1b52      	subs	r2, r2, r5
 801142e:	6122      	str	r2, [r4, #16]
 8011430:	f8cd a000 	str.w	sl, [sp]
 8011434:	464b      	mov	r3, r9
 8011436:	aa03      	add	r2, sp, #12
 8011438:	4621      	mov	r1, r4
 801143a:	4640      	mov	r0, r8
 801143c:	f7ff fee2 	bl	8011204 <_printf_common>
 8011440:	3001      	adds	r0, #1
 8011442:	d14c      	bne.n	80114de <_printf_i+0x1fe>
 8011444:	f04f 30ff 	mov.w	r0, #4294967295
 8011448:	b004      	add	sp, #16
 801144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801144e:	4835      	ldr	r0, [pc, #212]	; (8011524 <_printf_i+0x244>)
 8011450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011454:	6829      	ldr	r1, [r5, #0]
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	f851 6b04 	ldr.w	r6, [r1], #4
 801145c:	6029      	str	r1, [r5, #0]
 801145e:	061d      	lsls	r5, r3, #24
 8011460:	d514      	bpl.n	801148c <_printf_i+0x1ac>
 8011462:	07df      	lsls	r7, r3, #31
 8011464:	bf44      	itt	mi
 8011466:	f043 0320 	orrmi.w	r3, r3, #32
 801146a:	6023      	strmi	r3, [r4, #0]
 801146c:	b91e      	cbnz	r6, 8011476 <_printf_i+0x196>
 801146e:	6823      	ldr	r3, [r4, #0]
 8011470:	f023 0320 	bic.w	r3, r3, #32
 8011474:	6023      	str	r3, [r4, #0]
 8011476:	2310      	movs	r3, #16
 8011478:	e7b0      	b.n	80113dc <_printf_i+0xfc>
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	f043 0320 	orr.w	r3, r3, #32
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	2378      	movs	r3, #120	; 0x78
 8011484:	4828      	ldr	r0, [pc, #160]	; (8011528 <_printf_i+0x248>)
 8011486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801148a:	e7e3      	b.n	8011454 <_printf_i+0x174>
 801148c:	0659      	lsls	r1, r3, #25
 801148e:	bf48      	it	mi
 8011490:	b2b6      	uxthmi	r6, r6
 8011492:	e7e6      	b.n	8011462 <_printf_i+0x182>
 8011494:	4615      	mov	r5, r2
 8011496:	e7bb      	b.n	8011410 <_printf_i+0x130>
 8011498:	682b      	ldr	r3, [r5, #0]
 801149a:	6826      	ldr	r6, [r4, #0]
 801149c:	6961      	ldr	r1, [r4, #20]
 801149e:	1d18      	adds	r0, r3, #4
 80114a0:	6028      	str	r0, [r5, #0]
 80114a2:	0635      	lsls	r5, r6, #24
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	d501      	bpl.n	80114ac <_printf_i+0x1cc>
 80114a8:	6019      	str	r1, [r3, #0]
 80114aa:	e002      	b.n	80114b2 <_printf_i+0x1d2>
 80114ac:	0670      	lsls	r0, r6, #25
 80114ae:	d5fb      	bpl.n	80114a8 <_printf_i+0x1c8>
 80114b0:	8019      	strh	r1, [r3, #0]
 80114b2:	2300      	movs	r3, #0
 80114b4:	6123      	str	r3, [r4, #16]
 80114b6:	4615      	mov	r5, r2
 80114b8:	e7ba      	b.n	8011430 <_printf_i+0x150>
 80114ba:	682b      	ldr	r3, [r5, #0]
 80114bc:	1d1a      	adds	r2, r3, #4
 80114be:	602a      	str	r2, [r5, #0]
 80114c0:	681d      	ldr	r5, [r3, #0]
 80114c2:	6862      	ldr	r2, [r4, #4]
 80114c4:	2100      	movs	r1, #0
 80114c6:	4628      	mov	r0, r5
 80114c8:	f7ee ff72 	bl	80003b0 <memchr>
 80114cc:	b108      	cbz	r0, 80114d2 <_printf_i+0x1f2>
 80114ce:	1b40      	subs	r0, r0, r5
 80114d0:	6060      	str	r0, [r4, #4]
 80114d2:	6863      	ldr	r3, [r4, #4]
 80114d4:	6123      	str	r3, [r4, #16]
 80114d6:	2300      	movs	r3, #0
 80114d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114dc:	e7a8      	b.n	8011430 <_printf_i+0x150>
 80114de:	6923      	ldr	r3, [r4, #16]
 80114e0:	462a      	mov	r2, r5
 80114e2:	4649      	mov	r1, r9
 80114e4:	4640      	mov	r0, r8
 80114e6:	47d0      	blx	sl
 80114e8:	3001      	adds	r0, #1
 80114ea:	d0ab      	beq.n	8011444 <_printf_i+0x164>
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	079b      	lsls	r3, r3, #30
 80114f0:	d413      	bmi.n	801151a <_printf_i+0x23a>
 80114f2:	68e0      	ldr	r0, [r4, #12]
 80114f4:	9b03      	ldr	r3, [sp, #12]
 80114f6:	4298      	cmp	r0, r3
 80114f8:	bfb8      	it	lt
 80114fa:	4618      	movlt	r0, r3
 80114fc:	e7a4      	b.n	8011448 <_printf_i+0x168>
 80114fe:	2301      	movs	r3, #1
 8011500:	4632      	mov	r2, r6
 8011502:	4649      	mov	r1, r9
 8011504:	4640      	mov	r0, r8
 8011506:	47d0      	blx	sl
 8011508:	3001      	adds	r0, #1
 801150a:	d09b      	beq.n	8011444 <_printf_i+0x164>
 801150c:	3501      	adds	r5, #1
 801150e:	68e3      	ldr	r3, [r4, #12]
 8011510:	9903      	ldr	r1, [sp, #12]
 8011512:	1a5b      	subs	r3, r3, r1
 8011514:	42ab      	cmp	r3, r5
 8011516:	dcf2      	bgt.n	80114fe <_printf_i+0x21e>
 8011518:	e7eb      	b.n	80114f2 <_printf_i+0x212>
 801151a:	2500      	movs	r5, #0
 801151c:	f104 0619 	add.w	r6, r4, #25
 8011520:	e7f5      	b.n	801150e <_printf_i+0x22e>
 8011522:	bf00      	nop
 8011524:	0801df43 	.word	0x0801df43
 8011528:	0801df54 	.word	0x0801df54

0801152c <srand>:
 801152c:	b538      	push	{r3, r4, r5, lr}
 801152e:	4b10      	ldr	r3, [pc, #64]	; (8011570 <srand+0x44>)
 8011530:	681d      	ldr	r5, [r3, #0]
 8011532:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011534:	4604      	mov	r4, r0
 8011536:	b9b3      	cbnz	r3, 8011566 <srand+0x3a>
 8011538:	2018      	movs	r0, #24
 801153a:	f001 fa6b 	bl	8012a14 <malloc>
 801153e:	4602      	mov	r2, r0
 8011540:	63a8      	str	r0, [r5, #56]	; 0x38
 8011542:	b920      	cbnz	r0, 801154e <srand+0x22>
 8011544:	4b0b      	ldr	r3, [pc, #44]	; (8011574 <srand+0x48>)
 8011546:	480c      	ldr	r0, [pc, #48]	; (8011578 <srand+0x4c>)
 8011548:	2142      	movs	r1, #66	; 0x42
 801154a:	f7ff f9df 	bl	801090c <__assert_func>
 801154e:	490b      	ldr	r1, [pc, #44]	; (801157c <srand+0x50>)
 8011550:	4b0b      	ldr	r3, [pc, #44]	; (8011580 <srand+0x54>)
 8011552:	e9c0 1300 	strd	r1, r3, [r0]
 8011556:	4b0b      	ldr	r3, [pc, #44]	; (8011584 <srand+0x58>)
 8011558:	6083      	str	r3, [r0, #8]
 801155a:	230b      	movs	r3, #11
 801155c:	8183      	strh	r3, [r0, #12]
 801155e:	2100      	movs	r1, #0
 8011560:	2001      	movs	r0, #1
 8011562:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011566:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011568:	2200      	movs	r2, #0
 801156a:	611c      	str	r4, [r3, #16]
 801156c:	615a      	str	r2, [r3, #20]
 801156e:	bd38      	pop	{r3, r4, r5, pc}
 8011570:	24000414 	.word	0x24000414
 8011574:	0801df65 	.word	0x0801df65
 8011578:	0801df7c 	.word	0x0801df7c
 801157c:	abcd330e 	.word	0xabcd330e
 8011580:	e66d1234 	.word	0xe66d1234
 8011584:	0005deec 	.word	0x0005deec

08011588 <rand>:
 8011588:	4b16      	ldr	r3, [pc, #88]	; (80115e4 <rand+0x5c>)
 801158a:	b510      	push	{r4, lr}
 801158c:	681c      	ldr	r4, [r3, #0]
 801158e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011590:	b9b3      	cbnz	r3, 80115c0 <rand+0x38>
 8011592:	2018      	movs	r0, #24
 8011594:	f001 fa3e 	bl	8012a14 <malloc>
 8011598:	63a0      	str	r0, [r4, #56]	; 0x38
 801159a:	b928      	cbnz	r0, 80115a8 <rand+0x20>
 801159c:	4602      	mov	r2, r0
 801159e:	4b12      	ldr	r3, [pc, #72]	; (80115e8 <rand+0x60>)
 80115a0:	4812      	ldr	r0, [pc, #72]	; (80115ec <rand+0x64>)
 80115a2:	214e      	movs	r1, #78	; 0x4e
 80115a4:	f7ff f9b2 	bl	801090c <__assert_func>
 80115a8:	4a11      	ldr	r2, [pc, #68]	; (80115f0 <rand+0x68>)
 80115aa:	4b12      	ldr	r3, [pc, #72]	; (80115f4 <rand+0x6c>)
 80115ac:	e9c0 2300 	strd	r2, r3, [r0]
 80115b0:	4b11      	ldr	r3, [pc, #68]	; (80115f8 <rand+0x70>)
 80115b2:	6083      	str	r3, [r0, #8]
 80115b4:	230b      	movs	r3, #11
 80115b6:	8183      	strh	r3, [r0, #12]
 80115b8:	2201      	movs	r2, #1
 80115ba:	2300      	movs	r3, #0
 80115bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80115c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80115c2:	4a0e      	ldr	r2, [pc, #56]	; (80115fc <rand+0x74>)
 80115c4:	6920      	ldr	r0, [r4, #16]
 80115c6:	6963      	ldr	r3, [r4, #20]
 80115c8:	490d      	ldr	r1, [pc, #52]	; (8011600 <rand+0x78>)
 80115ca:	4342      	muls	r2, r0
 80115cc:	fb01 2203 	mla	r2, r1, r3, r2
 80115d0:	fba0 0101 	umull	r0, r1, r0, r1
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	eb42 0001 	adc.w	r0, r2, r1
 80115da:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80115de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80115e2:	bd10      	pop	{r4, pc}
 80115e4:	24000414 	.word	0x24000414
 80115e8:	0801df65 	.word	0x0801df65
 80115ec:	0801df7c 	.word	0x0801df7c
 80115f0:	abcd330e 	.word	0xabcd330e
 80115f4:	e66d1234 	.word	0xe66d1234
 80115f8:	0005deec 	.word	0x0005deec
 80115fc:	5851f42d 	.word	0x5851f42d
 8011600:	4c957f2d 	.word	0x4c957f2d

08011604 <siprintf>:
 8011604:	b40e      	push	{r1, r2, r3}
 8011606:	b500      	push	{lr}
 8011608:	b09c      	sub	sp, #112	; 0x70
 801160a:	ab1d      	add	r3, sp, #116	; 0x74
 801160c:	9002      	str	r0, [sp, #8]
 801160e:	9006      	str	r0, [sp, #24]
 8011610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011614:	4809      	ldr	r0, [pc, #36]	; (801163c <siprintf+0x38>)
 8011616:	9107      	str	r1, [sp, #28]
 8011618:	9104      	str	r1, [sp, #16]
 801161a:	4909      	ldr	r1, [pc, #36]	; (8011640 <siprintf+0x3c>)
 801161c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011620:	9105      	str	r1, [sp, #20]
 8011622:	6800      	ldr	r0, [r0, #0]
 8011624:	9301      	str	r3, [sp, #4]
 8011626:	a902      	add	r1, sp, #8
 8011628:	f001 ff1a 	bl	8013460 <_svfiprintf_r>
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	2200      	movs	r2, #0
 8011630:	701a      	strb	r2, [r3, #0]
 8011632:	b01c      	add	sp, #112	; 0x70
 8011634:	f85d eb04 	ldr.w	lr, [sp], #4
 8011638:	b003      	add	sp, #12
 801163a:	4770      	bx	lr
 801163c:	24000414 	.word	0x24000414
 8011640:	ffff0208 	.word	0xffff0208

08011644 <strcpy>:
 8011644:	4603      	mov	r3, r0
 8011646:	f811 2b01 	ldrb.w	r2, [r1], #1
 801164a:	f803 2b01 	strb.w	r2, [r3], #1
 801164e:	2a00      	cmp	r2, #0
 8011650:	d1f9      	bne.n	8011646 <strcpy+0x2>
 8011652:	4770      	bx	lr

08011654 <strcspn>:
 8011654:	b570      	push	{r4, r5, r6, lr}
 8011656:	4603      	mov	r3, r0
 8011658:	461e      	mov	r6, r3
 801165a:	f813 4b01 	ldrb.w	r4, [r3], #1
 801165e:	b144      	cbz	r4, 8011672 <strcspn+0x1e>
 8011660:	1e4a      	subs	r2, r1, #1
 8011662:	e001      	b.n	8011668 <strcspn+0x14>
 8011664:	42a5      	cmp	r5, r4
 8011666:	d004      	beq.n	8011672 <strcspn+0x1e>
 8011668:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801166c:	2d00      	cmp	r5, #0
 801166e:	d1f9      	bne.n	8011664 <strcspn+0x10>
 8011670:	e7f2      	b.n	8011658 <strcspn+0x4>
 8011672:	1a30      	subs	r0, r6, r0
 8011674:	bd70      	pop	{r4, r5, r6, pc}
	...

08011678 <strtok>:
 8011678:	4b16      	ldr	r3, [pc, #88]	; (80116d4 <strtok+0x5c>)
 801167a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801167c:	681e      	ldr	r6, [r3, #0]
 801167e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011680:	4605      	mov	r5, r0
 8011682:	b9fc      	cbnz	r4, 80116c4 <strtok+0x4c>
 8011684:	2050      	movs	r0, #80	; 0x50
 8011686:	9101      	str	r1, [sp, #4]
 8011688:	f001 f9c4 	bl	8012a14 <malloc>
 801168c:	9901      	ldr	r1, [sp, #4]
 801168e:	65b0      	str	r0, [r6, #88]	; 0x58
 8011690:	4602      	mov	r2, r0
 8011692:	b920      	cbnz	r0, 801169e <strtok+0x26>
 8011694:	4b10      	ldr	r3, [pc, #64]	; (80116d8 <strtok+0x60>)
 8011696:	4811      	ldr	r0, [pc, #68]	; (80116dc <strtok+0x64>)
 8011698:	2157      	movs	r1, #87	; 0x57
 801169a:	f7ff f937 	bl	801090c <__assert_func>
 801169e:	e9c0 4400 	strd	r4, r4, [r0]
 80116a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80116a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80116aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80116ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80116b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80116b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80116ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80116be:	6184      	str	r4, [r0, #24]
 80116c0:	7704      	strb	r4, [r0, #28]
 80116c2:	6244      	str	r4, [r0, #36]	; 0x24
 80116c4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80116c6:	2301      	movs	r3, #1
 80116c8:	4628      	mov	r0, r5
 80116ca:	b002      	add	sp, #8
 80116cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116d0:	f000 b806 	b.w	80116e0 <__strtok_r>
 80116d4:	24000414 	.word	0x24000414
 80116d8:	0801df65 	.word	0x0801df65
 80116dc:	0801dfd7 	.word	0x0801dfd7

080116e0 <__strtok_r>:
 80116e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e2:	b908      	cbnz	r0, 80116e8 <__strtok_r+0x8>
 80116e4:	6810      	ldr	r0, [r2, #0]
 80116e6:	b188      	cbz	r0, 801170c <__strtok_r+0x2c>
 80116e8:	4604      	mov	r4, r0
 80116ea:	4620      	mov	r0, r4
 80116ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80116f0:	460f      	mov	r7, r1
 80116f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80116f6:	b91e      	cbnz	r6, 8011700 <__strtok_r+0x20>
 80116f8:	b965      	cbnz	r5, 8011714 <__strtok_r+0x34>
 80116fa:	6015      	str	r5, [r2, #0]
 80116fc:	4628      	mov	r0, r5
 80116fe:	e005      	b.n	801170c <__strtok_r+0x2c>
 8011700:	42b5      	cmp	r5, r6
 8011702:	d1f6      	bne.n	80116f2 <__strtok_r+0x12>
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1f0      	bne.n	80116ea <__strtok_r+0xa>
 8011708:	6014      	str	r4, [r2, #0]
 801170a:	7003      	strb	r3, [r0, #0]
 801170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801170e:	461c      	mov	r4, r3
 8011710:	e00c      	b.n	801172c <__strtok_r+0x4c>
 8011712:	b915      	cbnz	r5, 801171a <__strtok_r+0x3a>
 8011714:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011718:	460e      	mov	r6, r1
 801171a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801171e:	42ab      	cmp	r3, r5
 8011720:	d1f7      	bne.n	8011712 <__strtok_r+0x32>
 8011722:	2b00      	cmp	r3, #0
 8011724:	d0f3      	beq.n	801170e <__strtok_r+0x2e>
 8011726:	2300      	movs	r3, #0
 8011728:	f804 3c01 	strb.w	r3, [r4, #-1]
 801172c:	6014      	str	r4, [r2, #0]
 801172e:	e7ed      	b.n	801170c <__strtok_r+0x2c>

08011730 <_strtol_l.constprop.0>:
 8011730:	2b01      	cmp	r3, #1
 8011732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011736:	d001      	beq.n	801173c <_strtol_l.constprop.0+0xc>
 8011738:	2b24      	cmp	r3, #36	; 0x24
 801173a:	d906      	bls.n	801174a <_strtol_l.constprop.0+0x1a>
 801173c:	f7ff f908 	bl	8010950 <__errno>
 8011740:	2316      	movs	r3, #22
 8011742:	6003      	str	r3, [r0, #0]
 8011744:	2000      	movs	r0, #0
 8011746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801174a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011830 <_strtol_l.constprop.0+0x100>
 801174e:	460d      	mov	r5, r1
 8011750:	462e      	mov	r6, r5
 8011752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011756:	f814 700c 	ldrb.w	r7, [r4, ip]
 801175a:	f017 0708 	ands.w	r7, r7, #8
 801175e:	d1f7      	bne.n	8011750 <_strtol_l.constprop.0+0x20>
 8011760:	2c2d      	cmp	r4, #45	; 0x2d
 8011762:	d132      	bne.n	80117ca <_strtol_l.constprop.0+0x9a>
 8011764:	782c      	ldrb	r4, [r5, #0]
 8011766:	2701      	movs	r7, #1
 8011768:	1cb5      	adds	r5, r6, #2
 801176a:	2b00      	cmp	r3, #0
 801176c:	d05b      	beq.n	8011826 <_strtol_l.constprop.0+0xf6>
 801176e:	2b10      	cmp	r3, #16
 8011770:	d109      	bne.n	8011786 <_strtol_l.constprop.0+0x56>
 8011772:	2c30      	cmp	r4, #48	; 0x30
 8011774:	d107      	bne.n	8011786 <_strtol_l.constprop.0+0x56>
 8011776:	782c      	ldrb	r4, [r5, #0]
 8011778:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801177c:	2c58      	cmp	r4, #88	; 0x58
 801177e:	d14d      	bne.n	801181c <_strtol_l.constprop.0+0xec>
 8011780:	786c      	ldrb	r4, [r5, #1]
 8011782:	2310      	movs	r3, #16
 8011784:	3502      	adds	r5, #2
 8011786:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801178a:	f108 38ff 	add.w	r8, r8, #4294967295
 801178e:	f04f 0c00 	mov.w	ip, #0
 8011792:	fbb8 f9f3 	udiv	r9, r8, r3
 8011796:	4666      	mov	r6, ip
 8011798:	fb03 8a19 	mls	sl, r3, r9, r8
 801179c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80117a0:	f1be 0f09 	cmp.w	lr, #9
 80117a4:	d816      	bhi.n	80117d4 <_strtol_l.constprop.0+0xa4>
 80117a6:	4674      	mov	r4, lr
 80117a8:	42a3      	cmp	r3, r4
 80117aa:	dd24      	ble.n	80117f6 <_strtol_l.constprop.0+0xc6>
 80117ac:	f1bc 0f00 	cmp.w	ip, #0
 80117b0:	db1e      	blt.n	80117f0 <_strtol_l.constprop.0+0xc0>
 80117b2:	45b1      	cmp	r9, r6
 80117b4:	d31c      	bcc.n	80117f0 <_strtol_l.constprop.0+0xc0>
 80117b6:	d101      	bne.n	80117bc <_strtol_l.constprop.0+0x8c>
 80117b8:	45a2      	cmp	sl, r4
 80117ba:	db19      	blt.n	80117f0 <_strtol_l.constprop.0+0xc0>
 80117bc:	fb06 4603 	mla	r6, r6, r3, r4
 80117c0:	f04f 0c01 	mov.w	ip, #1
 80117c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117c8:	e7e8      	b.n	801179c <_strtol_l.constprop.0+0x6c>
 80117ca:	2c2b      	cmp	r4, #43	; 0x2b
 80117cc:	bf04      	itt	eq
 80117ce:	782c      	ldrbeq	r4, [r5, #0]
 80117d0:	1cb5      	addeq	r5, r6, #2
 80117d2:	e7ca      	b.n	801176a <_strtol_l.constprop.0+0x3a>
 80117d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80117d8:	f1be 0f19 	cmp.w	lr, #25
 80117dc:	d801      	bhi.n	80117e2 <_strtol_l.constprop.0+0xb2>
 80117de:	3c37      	subs	r4, #55	; 0x37
 80117e0:	e7e2      	b.n	80117a8 <_strtol_l.constprop.0+0x78>
 80117e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80117e6:	f1be 0f19 	cmp.w	lr, #25
 80117ea:	d804      	bhi.n	80117f6 <_strtol_l.constprop.0+0xc6>
 80117ec:	3c57      	subs	r4, #87	; 0x57
 80117ee:	e7db      	b.n	80117a8 <_strtol_l.constprop.0+0x78>
 80117f0:	f04f 3cff 	mov.w	ip, #4294967295
 80117f4:	e7e6      	b.n	80117c4 <_strtol_l.constprop.0+0x94>
 80117f6:	f1bc 0f00 	cmp.w	ip, #0
 80117fa:	da05      	bge.n	8011808 <_strtol_l.constprop.0+0xd8>
 80117fc:	2322      	movs	r3, #34	; 0x22
 80117fe:	6003      	str	r3, [r0, #0]
 8011800:	4646      	mov	r6, r8
 8011802:	b942      	cbnz	r2, 8011816 <_strtol_l.constprop.0+0xe6>
 8011804:	4630      	mov	r0, r6
 8011806:	e79e      	b.n	8011746 <_strtol_l.constprop.0+0x16>
 8011808:	b107      	cbz	r7, 801180c <_strtol_l.constprop.0+0xdc>
 801180a:	4276      	negs	r6, r6
 801180c:	2a00      	cmp	r2, #0
 801180e:	d0f9      	beq.n	8011804 <_strtol_l.constprop.0+0xd4>
 8011810:	f1bc 0f00 	cmp.w	ip, #0
 8011814:	d000      	beq.n	8011818 <_strtol_l.constprop.0+0xe8>
 8011816:	1e69      	subs	r1, r5, #1
 8011818:	6011      	str	r1, [r2, #0]
 801181a:	e7f3      	b.n	8011804 <_strtol_l.constprop.0+0xd4>
 801181c:	2430      	movs	r4, #48	; 0x30
 801181e:	2b00      	cmp	r3, #0
 8011820:	d1b1      	bne.n	8011786 <_strtol_l.constprop.0+0x56>
 8011822:	2308      	movs	r3, #8
 8011824:	e7af      	b.n	8011786 <_strtol_l.constprop.0+0x56>
 8011826:	2c30      	cmp	r4, #48	; 0x30
 8011828:	d0a5      	beq.n	8011776 <_strtol_l.constprop.0+0x46>
 801182a:	230a      	movs	r3, #10
 801182c:	e7ab      	b.n	8011786 <_strtol_l.constprop.0+0x56>
 801182e:	bf00      	nop
 8011830:	0801de19 	.word	0x0801de19

08011834 <strtol>:
 8011834:	4613      	mov	r3, r2
 8011836:	460a      	mov	r2, r1
 8011838:	4601      	mov	r1, r0
 801183a:	4802      	ldr	r0, [pc, #8]	; (8011844 <strtol+0x10>)
 801183c:	6800      	ldr	r0, [r0, #0]
 801183e:	f7ff bf77 	b.w	8011730 <_strtol_l.constprop.0>
 8011842:	bf00      	nop
 8011844:	24000414 	.word	0x24000414

08011848 <__swbuf_r>:
 8011848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801184a:	460e      	mov	r6, r1
 801184c:	4614      	mov	r4, r2
 801184e:	4605      	mov	r5, r0
 8011850:	b118      	cbz	r0, 801185a <__swbuf_r+0x12>
 8011852:	6983      	ldr	r3, [r0, #24]
 8011854:	b90b      	cbnz	r3, 801185a <__swbuf_r+0x12>
 8011856:	f000 ffd3 	bl	8012800 <__sinit>
 801185a:	4b21      	ldr	r3, [pc, #132]	; (80118e0 <__swbuf_r+0x98>)
 801185c:	429c      	cmp	r4, r3
 801185e:	d12b      	bne.n	80118b8 <__swbuf_r+0x70>
 8011860:	686c      	ldr	r4, [r5, #4]
 8011862:	69a3      	ldr	r3, [r4, #24]
 8011864:	60a3      	str	r3, [r4, #8]
 8011866:	89a3      	ldrh	r3, [r4, #12]
 8011868:	071a      	lsls	r2, r3, #28
 801186a:	d52f      	bpl.n	80118cc <__swbuf_r+0x84>
 801186c:	6923      	ldr	r3, [r4, #16]
 801186e:	b36b      	cbz	r3, 80118cc <__swbuf_r+0x84>
 8011870:	6923      	ldr	r3, [r4, #16]
 8011872:	6820      	ldr	r0, [r4, #0]
 8011874:	1ac0      	subs	r0, r0, r3
 8011876:	6963      	ldr	r3, [r4, #20]
 8011878:	b2f6      	uxtb	r6, r6
 801187a:	4283      	cmp	r3, r0
 801187c:	4637      	mov	r7, r6
 801187e:	dc04      	bgt.n	801188a <__swbuf_r+0x42>
 8011880:	4621      	mov	r1, r4
 8011882:	4628      	mov	r0, r5
 8011884:	f000 ff28 	bl	80126d8 <_fflush_r>
 8011888:	bb30      	cbnz	r0, 80118d8 <__swbuf_r+0x90>
 801188a:	68a3      	ldr	r3, [r4, #8]
 801188c:	3b01      	subs	r3, #1
 801188e:	60a3      	str	r3, [r4, #8]
 8011890:	6823      	ldr	r3, [r4, #0]
 8011892:	1c5a      	adds	r2, r3, #1
 8011894:	6022      	str	r2, [r4, #0]
 8011896:	701e      	strb	r6, [r3, #0]
 8011898:	6963      	ldr	r3, [r4, #20]
 801189a:	3001      	adds	r0, #1
 801189c:	4283      	cmp	r3, r0
 801189e:	d004      	beq.n	80118aa <__swbuf_r+0x62>
 80118a0:	89a3      	ldrh	r3, [r4, #12]
 80118a2:	07db      	lsls	r3, r3, #31
 80118a4:	d506      	bpl.n	80118b4 <__swbuf_r+0x6c>
 80118a6:	2e0a      	cmp	r6, #10
 80118a8:	d104      	bne.n	80118b4 <__swbuf_r+0x6c>
 80118aa:	4621      	mov	r1, r4
 80118ac:	4628      	mov	r0, r5
 80118ae:	f000 ff13 	bl	80126d8 <_fflush_r>
 80118b2:	b988      	cbnz	r0, 80118d8 <__swbuf_r+0x90>
 80118b4:	4638      	mov	r0, r7
 80118b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b8:	4b0a      	ldr	r3, [pc, #40]	; (80118e4 <__swbuf_r+0x9c>)
 80118ba:	429c      	cmp	r4, r3
 80118bc:	d101      	bne.n	80118c2 <__swbuf_r+0x7a>
 80118be:	68ac      	ldr	r4, [r5, #8]
 80118c0:	e7cf      	b.n	8011862 <__swbuf_r+0x1a>
 80118c2:	4b09      	ldr	r3, [pc, #36]	; (80118e8 <__swbuf_r+0xa0>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	bf08      	it	eq
 80118c8:	68ec      	ldreq	r4, [r5, #12]
 80118ca:	e7ca      	b.n	8011862 <__swbuf_r+0x1a>
 80118cc:	4621      	mov	r1, r4
 80118ce:	4628      	mov	r0, r5
 80118d0:	f000 f80c 	bl	80118ec <__swsetup_r>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	d0cb      	beq.n	8011870 <__swbuf_r+0x28>
 80118d8:	f04f 37ff 	mov.w	r7, #4294967295
 80118dc:	e7ea      	b.n	80118b4 <__swbuf_r+0x6c>
 80118de:	bf00      	nop
 80118e0:	0801e0d0 	.word	0x0801e0d0
 80118e4:	0801e0f0 	.word	0x0801e0f0
 80118e8:	0801e0b0 	.word	0x0801e0b0

080118ec <__swsetup_r>:
 80118ec:	4b32      	ldr	r3, [pc, #200]	; (80119b8 <__swsetup_r+0xcc>)
 80118ee:	b570      	push	{r4, r5, r6, lr}
 80118f0:	681d      	ldr	r5, [r3, #0]
 80118f2:	4606      	mov	r6, r0
 80118f4:	460c      	mov	r4, r1
 80118f6:	b125      	cbz	r5, 8011902 <__swsetup_r+0x16>
 80118f8:	69ab      	ldr	r3, [r5, #24]
 80118fa:	b913      	cbnz	r3, 8011902 <__swsetup_r+0x16>
 80118fc:	4628      	mov	r0, r5
 80118fe:	f000 ff7f 	bl	8012800 <__sinit>
 8011902:	4b2e      	ldr	r3, [pc, #184]	; (80119bc <__swsetup_r+0xd0>)
 8011904:	429c      	cmp	r4, r3
 8011906:	d10f      	bne.n	8011928 <__swsetup_r+0x3c>
 8011908:	686c      	ldr	r4, [r5, #4]
 801190a:	89a3      	ldrh	r3, [r4, #12]
 801190c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011910:	0719      	lsls	r1, r3, #28
 8011912:	d42c      	bmi.n	801196e <__swsetup_r+0x82>
 8011914:	06dd      	lsls	r5, r3, #27
 8011916:	d411      	bmi.n	801193c <__swsetup_r+0x50>
 8011918:	2309      	movs	r3, #9
 801191a:	6033      	str	r3, [r6, #0]
 801191c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011920:	81a3      	strh	r3, [r4, #12]
 8011922:	f04f 30ff 	mov.w	r0, #4294967295
 8011926:	e03e      	b.n	80119a6 <__swsetup_r+0xba>
 8011928:	4b25      	ldr	r3, [pc, #148]	; (80119c0 <__swsetup_r+0xd4>)
 801192a:	429c      	cmp	r4, r3
 801192c:	d101      	bne.n	8011932 <__swsetup_r+0x46>
 801192e:	68ac      	ldr	r4, [r5, #8]
 8011930:	e7eb      	b.n	801190a <__swsetup_r+0x1e>
 8011932:	4b24      	ldr	r3, [pc, #144]	; (80119c4 <__swsetup_r+0xd8>)
 8011934:	429c      	cmp	r4, r3
 8011936:	bf08      	it	eq
 8011938:	68ec      	ldreq	r4, [r5, #12]
 801193a:	e7e6      	b.n	801190a <__swsetup_r+0x1e>
 801193c:	0758      	lsls	r0, r3, #29
 801193e:	d512      	bpl.n	8011966 <__swsetup_r+0x7a>
 8011940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011942:	b141      	cbz	r1, 8011956 <__swsetup_r+0x6a>
 8011944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011948:	4299      	cmp	r1, r3
 801194a:	d002      	beq.n	8011952 <__swsetup_r+0x66>
 801194c:	4630      	mov	r0, r6
 801194e:	f001 fc1d 	bl	801318c <_free_r>
 8011952:	2300      	movs	r3, #0
 8011954:	6363      	str	r3, [r4, #52]	; 0x34
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	2300      	movs	r3, #0
 8011960:	6063      	str	r3, [r4, #4]
 8011962:	6923      	ldr	r3, [r4, #16]
 8011964:	6023      	str	r3, [r4, #0]
 8011966:	89a3      	ldrh	r3, [r4, #12]
 8011968:	f043 0308 	orr.w	r3, r3, #8
 801196c:	81a3      	strh	r3, [r4, #12]
 801196e:	6923      	ldr	r3, [r4, #16]
 8011970:	b94b      	cbnz	r3, 8011986 <__swsetup_r+0x9a>
 8011972:	89a3      	ldrh	r3, [r4, #12]
 8011974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801197c:	d003      	beq.n	8011986 <__swsetup_r+0x9a>
 801197e:	4621      	mov	r1, r4
 8011980:	4630      	mov	r0, r6
 8011982:	f001 f807 	bl	8012994 <__smakebuf_r>
 8011986:	89a0      	ldrh	r0, [r4, #12]
 8011988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801198c:	f010 0301 	ands.w	r3, r0, #1
 8011990:	d00a      	beq.n	80119a8 <__swsetup_r+0xbc>
 8011992:	2300      	movs	r3, #0
 8011994:	60a3      	str	r3, [r4, #8]
 8011996:	6963      	ldr	r3, [r4, #20]
 8011998:	425b      	negs	r3, r3
 801199a:	61a3      	str	r3, [r4, #24]
 801199c:	6923      	ldr	r3, [r4, #16]
 801199e:	b943      	cbnz	r3, 80119b2 <__swsetup_r+0xc6>
 80119a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119a4:	d1ba      	bne.n	801191c <__swsetup_r+0x30>
 80119a6:	bd70      	pop	{r4, r5, r6, pc}
 80119a8:	0781      	lsls	r1, r0, #30
 80119aa:	bf58      	it	pl
 80119ac:	6963      	ldrpl	r3, [r4, #20]
 80119ae:	60a3      	str	r3, [r4, #8]
 80119b0:	e7f4      	b.n	801199c <__swsetup_r+0xb0>
 80119b2:	2000      	movs	r0, #0
 80119b4:	e7f7      	b.n	80119a6 <__swsetup_r+0xba>
 80119b6:	bf00      	nop
 80119b8:	24000414 	.word	0x24000414
 80119bc:	0801e0d0 	.word	0x0801e0d0
 80119c0:	0801e0f0 	.word	0x0801e0f0
 80119c4:	0801e0b0 	.word	0x0801e0b0

080119c8 <abort>:
 80119c8:	b508      	push	{r3, lr}
 80119ca:	2006      	movs	r0, #6
 80119cc:	f001 fe80 	bl	80136d0 <raise>
 80119d0:	2001      	movs	r0, #1
 80119d2:	f7f4 ffd1 	bl	8006978 <_exit>

080119d6 <quorem>:
 80119d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119da:	6903      	ldr	r3, [r0, #16]
 80119dc:	690c      	ldr	r4, [r1, #16]
 80119de:	42a3      	cmp	r3, r4
 80119e0:	4607      	mov	r7, r0
 80119e2:	f2c0 8081 	blt.w	8011ae8 <quorem+0x112>
 80119e6:	3c01      	subs	r4, #1
 80119e8:	f101 0814 	add.w	r8, r1, #20
 80119ec:	f100 0514 	add.w	r5, r0, #20
 80119f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119f4:	9301      	str	r3, [sp, #4]
 80119f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80119fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119fe:	3301      	adds	r3, #1
 8011a00:	429a      	cmp	r2, r3
 8011a02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a0e:	d331      	bcc.n	8011a74 <quorem+0x9e>
 8011a10:	f04f 0e00 	mov.w	lr, #0
 8011a14:	4640      	mov	r0, r8
 8011a16:	46ac      	mov	ip, r5
 8011a18:	46f2      	mov	sl, lr
 8011a1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a1e:	b293      	uxth	r3, r2
 8011a20:	fb06 e303 	mla	r3, r6, r3, lr
 8011a24:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	ebaa 0303 	sub.w	r3, sl, r3
 8011a2e:	f8dc a000 	ldr.w	sl, [ip]
 8011a32:	0c12      	lsrs	r2, r2, #16
 8011a34:	fa13 f38a 	uxtah	r3, r3, sl
 8011a38:	fb06 e202 	mla	r2, r6, r2, lr
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	9b00      	ldr	r3, [sp, #0]
 8011a40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a44:	b292      	uxth	r2, r2
 8011a46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a4e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011a52:	4581      	cmp	r9, r0
 8011a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a58:	f84c 3b04 	str.w	r3, [ip], #4
 8011a5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a60:	d2db      	bcs.n	8011a1a <quorem+0x44>
 8011a62:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a66:	b92b      	cbnz	r3, 8011a74 <quorem+0x9e>
 8011a68:	9b01      	ldr	r3, [sp, #4]
 8011a6a:	3b04      	subs	r3, #4
 8011a6c:	429d      	cmp	r5, r3
 8011a6e:	461a      	mov	r2, r3
 8011a70:	d32e      	bcc.n	8011ad0 <quorem+0xfa>
 8011a72:	613c      	str	r4, [r7, #16]
 8011a74:	4638      	mov	r0, r7
 8011a76:	f001 fa71 	bl	8012f5c <__mcmp>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	db24      	blt.n	8011ac8 <quorem+0xf2>
 8011a7e:	3601      	adds	r6, #1
 8011a80:	4628      	mov	r0, r5
 8011a82:	f04f 0c00 	mov.w	ip, #0
 8011a86:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a8a:	f8d0 e000 	ldr.w	lr, [r0]
 8011a8e:	b293      	uxth	r3, r2
 8011a90:	ebac 0303 	sub.w	r3, ip, r3
 8011a94:	0c12      	lsrs	r2, r2, #16
 8011a96:	fa13 f38e 	uxtah	r3, r3, lr
 8011a9a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011a9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aa8:	45c1      	cmp	r9, r8
 8011aaa:	f840 3b04 	str.w	r3, [r0], #4
 8011aae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ab2:	d2e8      	bcs.n	8011a86 <quorem+0xb0>
 8011ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ab8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011abc:	b922      	cbnz	r2, 8011ac8 <quorem+0xf2>
 8011abe:	3b04      	subs	r3, #4
 8011ac0:	429d      	cmp	r5, r3
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	d30a      	bcc.n	8011adc <quorem+0x106>
 8011ac6:	613c      	str	r4, [r7, #16]
 8011ac8:	4630      	mov	r0, r6
 8011aca:	b003      	add	sp, #12
 8011acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad0:	6812      	ldr	r2, [r2, #0]
 8011ad2:	3b04      	subs	r3, #4
 8011ad4:	2a00      	cmp	r2, #0
 8011ad6:	d1cc      	bne.n	8011a72 <quorem+0x9c>
 8011ad8:	3c01      	subs	r4, #1
 8011ada:	e7c7      	b.n	8011a6c <quorem+0x96>
 8011adc:	6812      	ldr	r2, [r2, #0]
 8011ade:	3b04      	subs	r3, #4
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	d1f0      	bne.n	8011ac6 <quorem+0xf0>
 8011ae4:	3c01      	subs	r4, #1
 8011ae6:	e7eb      	b.n	8011ac0 <quorem+0xea>
 8011ae8:	2000      	movs	r0, #0
 8011aea:	e7ee      	b.n	8011aca <quorem+0xf4>
 8011aec:	0000      	movs	r0, r0
	...

08011af0 <_dtoa_r>:
 8011af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af4:	ed2d 8b02 	vpush	{d8}
 8011af8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011afa:	b091      	sub	sp, #68	; 0x44
 8011afc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011b00:	ec59 8b10 	vmov	r8, r9, d0
 8011b04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011b06:	9106      	str	r1, [sp, #24]
 8011b08:	4606      	mov	r6, r0
 8011b0a:	9208      	str	r2, [sp, #32]
 8011b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8011b0e:	b975      	cbnz	r5, 8011b2e <_dtoa_r+0x3e>
 8011b10:	2010      	movs	r0, #16
 8011b12:	f000 ff7f 	bl	8012a14 <malloc>
 8011b16:	4602      	mov	r2, r0
 8011b18:	6270      	str	r0, [r6, #36]	; 0x24
 8011b1a:	b920      	cbnz	r0, 8011b26 <_dtoa_r+0x36>
 8011b1c:	4baa      	ldr	r3, [pc, #680]	; (8011dc8 <_dtoa_r+0x2d8>)
 8011b1e:	21ea      	movs	r1, #234	; 0xea
 8011b20:	48aa      	ldr	r0, [pc, #680]	; (8011dcc <_dtoa_r+0x2dc>)
 8011b22:	f7fe fef3 	bl	801090c <__assert_func>
 8011b26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011b2a:	6005      	str	r5, [r0, #0]
 8011b2c:	60c5      	str	r5, [r0, #12]
 8011b2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011b30:	6819      	ldr	r1, [r3, #0]
 8011b32:	b151      	cbz	r1, 8011b4a <_dtoa_r+0x5a>
 8011b34:	685a      	ldr	r2, [r3, #4]
 8011b36:	604a      	str	r2, [r1, #4]
 8011b38:	2301      	movs	r3, #1
 8011b3a:	4093      	lsls	r3, r2
 8011b3c:	608b      	str	r3, [r1, #8]
 8011b3e:	4630      	mov	r0, r6
 8011b40:	f000 ffca 	bl	8012ad8 <_Bfree>
 8011b44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011b46:	2200      	movs	r2, #0
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	f1b9 0300 	subs.w	r3, r9, #0
 8011b4e:	bfbb      	ittet	lt
 8011b50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011b54:	9303      	strlt	r3, [sp, #12]
 8011b56:	2300      	movge	r3, #0
 8011b58:	2201      	movlt	r2, #1
 8011b5a:	bfac      	ite	ge
 8011b5c:	6023      	strge	r3, [r4, #0]
 8011b5e:	6022      	strlt	r2, [r4, #0]
 8011b60:	4b9b      	ldr	r3, [pc, #620]	; (8011dd0 <_dtoa_r+0x2e0>)
 8011b62:	9c03      	ldr	r4, [sp, #12]
 8011b64:	43a3      	bics	r3, r4
 8011b66:	d11c      	bne.n	8011ba2 <_dtoa_r+0xb2>
 8011b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b6e:	6013      	str	r3, [r2, #0]
 8011b70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011b74:	ea53 0308 	orrs.w	r3, r3, r8
 8011b78:	f000 84fd 	beq.w	8012576 <_dtoa_r+0xa86>
 8011b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011b7e:	b963      	cbnz	r3, 8011b9a <_dtoa_r+0xaa>
 8011b80:	4b94      	ldr	r3, [pc, #592]	; (8011dd4 <_dtoa_r+0x2e4>)
 8011b82:	e01f      	b.n	8011bc4 <_dtoa_r+0xd4>
 8011b84:	4b94      	ldr	r3, [pc, #592]	; (8011dd8 <_dtoa_r+0x2e8>)
 8011b86:	9301      	str	r3, [sp, #4]
 8011b88:	3308      	adds	r3, #8
 8011b8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011b8c:	6013      	str	r3, [r2, #0]
 8011b8e:	9801      	ldr	r0, [sp, #4]
 8011b90:	b011      	add	sp, #68	; 0x44
 8011b92:	ecbd 8b02 	vpop	{d8}
 8011b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9a:	4b8e      	ldr	r3, [pc, #568]	; (8011dd4 <_dtoa_r+0x2e4>)
 8011b9c:	9301      	str	r3, [sp, #4]
 8011b9e:	3303      	adds	r3, #3
 8011ba0:	e7f3      	b.n	8011b8a <_dtoa_r+0x9a>
 8011ba2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011ba6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bae:	d10b      	bne.n	8011bc8 <_dtoa_r+0xd8>
 8011bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	6013      	str	r3, [r2, #0]
 8011bb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f000 84d9 	beq.w	8012570 <_dtoa_r+0xa80>
 8011bbe:	4887      	ldr	r0, [pc, #540]	; (8011ddc <_dtoa_r+0x2ec>)
 8011bc0:	6018      	str	r0, [r3, #0]
 8011bc2:	1e43      	subs	r3, r0, #1
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	e7e2      	b.n	8011b8e <_dtoa_r+0x9e>
 8011bc8:	a90f      	add	r1, sp, #60	; 0x3c
 8011bca:	aa0e      	add	r2, sp, #56	; 0x38
 8011bcc:	4630      	mov	r0, r6
 8011bce:	eeb0 0b48 	vmov.f64	d0, d8
 8011bd2:	f001 fa69 	bl	80130a8 <__d2b>
 8011bd6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011bda:	4605      	mov	r5, r0
 8011bdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011bde:	2900      	cmp	r1, #0
 8011be0:	d046      	beq.n	8011c70 <_dtoa_r+0x180>
 8011be2:	ee18 4a90 	vmov	r4, s17
 8011be6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011bea:	ec53 2b18 	vmov	r2, r3, d8
 8011bee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011bf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011bf6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011bfa:	2400      	movs	r4, #0
 8011bfc:	ec43 2b16 	vmov	d6, r2, r3
 8011c00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011c04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011db0 <_dtoa_r+0x2c0>
 8011c08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c0c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011db8 <_dtoa_r+0x2c8>
 8011c10:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011c14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011dc0 <_dtoa_r+0x2d0>
 8011c18:	ee07 1a90 	vmov	s15, r1
 8011c1c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011c20:	eeb0 7b46 	vmov.f64	d7, d6
 8011c24:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011c28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011c2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c34:	ee16 ba90 	vmov	fp, s13
 8011c38:	940a      	str	r4, [sp, #40]	; 0x28
 8011c3a:	d508      	bpl.n	8011c4e <_dtoa_r+0x15e>
 8011c3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011c40:	eeb4 6b47 	vcmp.f64	d6, d7
 8011c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c48:	bf18      	it	ne
 8011c4a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011c4e:	f1bb 0f16 	cmp.w	fp, #22
 8011c52:	d82f      	bhi.n	8011cb4 <_dtoa_r+0x1c4>
 8011c54:	4b62      	ldr	r3, [pc, #392]	; (8011de0 <_dtoa_r+0x2f0>)
 8011c56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011c5a:	ed93 7b00 	vldr	d7, [r3]
 8011c5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c66:	d501      	bpl.n	8011c6c <_dtoa_r+0x17c>
 8011c68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	e022      	b.n	8011cb6 <_dtoa_r+0x1c6>
 8011c70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c72:	4401      	add	r1, r0
 8011c74:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011c78:	2b20      	cmp	r3, #32
 8011c7a:	bfc1      	itttt	gt
 8011c7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011c80:	fa04 f303 	lslgt.w	r3, r4, r3
 8011c84:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011c88:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011c8c:	bfd6      	itet	le
 8011c8e:	f1c3 0320 	rsble	r3, r3, #32
 8011c92:	ea43 0808 	orrgt.w	r8, r3, r8
 8011c96:	fa08 f803 	lslle.w	r8, r8, r3
 8011c9a:	ee07 8a90 	vmov	s15, r8
 8011c9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011ca2:	3901      	subs	r1, #1
 8011ca4:	ee17 4a90 	vmov	r4, s15
 8011ca8:	ec53 2b17 	vmov	r2, r3, d7
 8011cac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011cb0:	2401      	movs	r4, #1
 8011cb2:	e7a3      	b.n	8011bfc <_dtoa_r+0x10c>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011cb8:	1a43      	subs	r3, r0, r1
 8011cba:	1e5a      	subs	r2, r3, #1
 8011cbc:	bf45      	ittet	mi
 8011cbe:	f1c3 0301 	rsbmi	r3, r3, #1
 8011cc2:	9304      	strmi	r3, [sp, #16]
 8011cc4:	2300      	movpl	r3, #0
 8011cc6:	2300      	movmi	r3, #0
 8011cc8:	9205      	str	r2, [sp, #20]
 8011cca:	bf54      	ite	pl
 8011ccc:	9304      	strpl	r3, [sp, #16]
 8011cce:	9305      	strmi	r3, [sp, #20]
 8011cd0:	f1bb 0f00 	cmp.w	fp, #0
 8011cd4:	db18      	blt.n	8011d08 <_dtoa_r+0x218>
 8011cd6:	9b05      	ldr	r3, [sp, #20]
 8011cd8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011cdc:	445b      	add	r3, fp
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9a06      	ldr	r2, [sp, #24]
 8011ce4:	2a09      	cmp	r2, #9
 8011ce6:	d849      	bhi.n	8011d7c <_dtoa_r+0x28c>
 8011ce8:	2a05      	cmp	r2, #5
 8011cea:	bfc4      	itt	gt
 8011cec:	3a04      	subgt	r2, #4
 8011cee:	9206      	strgt	r2, [sp, #24]
 8011cf0:	9a06      	ldr	r2, [sp, #24]
 8011cf2:	f1a2 0202 	sub.w	r2, r2, #2
 8011cf6:	bfcc      	ite	gt
 8011cf8:	2400      	movgt	r4, #0
 8011cfa:	2401      	movle	r4, #1
 8011cfc:	2a03      	cmp	r2, #3
 8011cfe:	d848      	bhi.n	8011d92 <_dtoa_r+0x2a2>
 8011d00:	e8df f002 	tbb	[pc, r2]
 8011d04:	3a2c2e0b 	.word	0x3a2c2e0b
 8011d08:	9b04      	ldr	r3, [sp, #16]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	eba3 030b 	sub.w	r3, r3, fp
 8011d10:	9304      	str	r3, [sp, #16]
 8011d12:	9209      	str	r2, [sp, #36]	; 0x24
 8011d14:	f1cb 0300 	rsb	r3, fp, #0
 8011d18:	e7e3      	b.n	8011ce2 <_dtoa_r+0x1f2>
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	9207      	str	r2, [sp, #28]
 8011d1e:	9a08      	ldr	r2, [sp, #32]
 8011d20:	2a00      	cmp	r2, #0
 8011d22:	dc39      	bgt.n	8011d98 <_dtoa_r+0x2a8>
 8011d24:	f04f 0a01 	mov.w	sl, #1
 8011d28:	46d1      	mov	r9, sl
 8011d2a:	4652      	mov	r2, sl
 8011d2c:	f8cd a020 	str.w	sl, [sp, #32]
 8011d30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011d32:	2100      	movs	r1, #0
 8011d34:	6079      	str	r1, [r7, #4]
 8011d36:	2004      	movs	r0, #4
 8011d38:	f100 0c14 	add.w	ip, r0, #20
 8011d3c:	4594      	cmp	ip, r2
 8011d3e:	6879      	ldr	r1, [r7, #4]
 8011d40:	d92f      	bls.n	8011da2 <_dtoa_r+0x2b2>
 8011d42:	4630      	mov	r0, r6
 8011d44:	930d      	str	r3, [sp, #52]	; 0x34
 8011d46:	f000 fe87 	bl	8012a58 <_Balloc>
 8011d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d4c:	9001      	str	r0, [sp, #4]
 8011d4e:	4602      	mov	r2, r0
 8011d50:	2800      	cmp	r0, #0
 8011d52:	d149      	bne.n	8011de8 <_dtoa_r+0x2f8>
 8011d54:	4b23      	ldr	r3, [pc, #140]	; (8011de4 <_dtoa_r+0x2f4>)
 8011d56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d5a:	e6e1      	b.n	8011b20 <_dtoa_r+0x30>
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	e7dd      	b.n	8011d1c <_dtoa_r+0x22c>
 8011d60:	2200      	movs	r2, #0
 8011d62:	9207      	str	r2, [sp, #28]
 8011d64:	9a08      	ldr	r2, [sp, #32]
 8011d66:	eb0b 0a02 	add.w	sl, fp, r2
 8011d6a:	f10a 0901 	add.w	r9, sl, #1
 8011d6e:	464a      	mov	r2, r9
 8011d70:	2a01      	cmp	r2, #1
 8011d72:	bfb8      	it	lt
 8011d74:	2201      	movlt	r2, #1
 8011d76:	e7db      	b.n	8011d30 <_dtoa_r+0x240>
 8011d78:	2201      	movs	r2, #1
 8011d7a:	e7f2      	b.n	8011d62 <_dtoa_r+0x272>
 8011d7c:	2401      	movs	r4, #1
 8011d7e:	2200      	movs	r2, #0
 8011d80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011d84:	f04f 3aff 	mov.w	sl, #4294967295
 8011d88:	2100      	movs	r1, #0
 8011d8a:	46d1      	mov	r9, sl
 8011d8c:	2212      	movs	r2, #18
 8011d8e:	9108      	str	r1, [sp, #32]
 8011d90:	e7ce      	b.n	8011d30 <_dtoa_r+0x240>
 8011d92:	2201      	movs	r2, #1
 8011d94:	9207      	str	r2, [sp, #28]
 8011d96:	e7f5      	b.n	8011d84 <_dtoa_r+0x294>
 8011d98:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011d9c:	46d1      	mov	r9, sl
 8011d9e:	4652      	mov	r2, sl
 8011da0:	e7c6      	b.n	8011d30 <_dtoa_r+0x240>
 8011da2:	3101      	adds	r1, #1
 8011da4:	6079      	str	r1, [r7, #4]
 8011da6:	0040      	lsls	r0, r0, #1
 8011da8:	e7c6      	b.n	8011d38 <_dtoa_r+0x248>
 8011daa:	bf00      	nop
 8011dac:	f3af 8000 	nop.w
 8011db0:	636f4361 	.word	0x636f4361
 8011db4:	3fd287a7 	.word	0x3fd287a7
 8011db8:	8b60c8b3 	.word	0x8b60c8b3
 8011dbc:	3fc68a28 	.word	0x3fc68a28
 8011dc0:	509f79fb 	.word	0x509f79fb
 8011dc4:	3fd34413 	.word	0x3fd34413
 8011dc8:	0801df65 	.word	0x0801df65
 8011dcc:	0801e041 	.word	0x0801e041
 8011dd0:	7ff00000 	.word	0x7ff00000
 8011dd4:	0801e03d 	.word	0x0801e03d
 8011dd8:	0801e034 	.word	0x0801e034
 8011ddc:	0801df42 	.word	0x0801df42
 8011de0:	0801e198 	.word	0x0801e198
 8011de4:	0801e09c 	.word	0x0801e09c
 8011de8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011dea:	9901      	ldr	r1, [sp, #4]
 8011dec:	6011      	str	r1, [r2, #0]
 8011dee:	f1b9 0f0e 	cmp.w	r9, #14
 8011df2:	d86c      	bhi.n	8011ece <_dtoa_r+0x3de>
 8011df4:	2c00      	cmp	r4, #0
 8011df6:	d06a      	beq.n	8011ece <_dtoa_r+0x3de>
 8011df8:	f1bb 0f00 	cmp.w	fp, #0
 8011dfc:	f340 80a0 	ble.w	8011f40 <_dtoa_r+0x450>
 8011e00:	49c1      	ldr	r1, [pc, #772]	; (8012108 <_dtoa_r+0x618>)
 8011e02:	f00b 020f 	and.w	r2, fp, #15
 8011e06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011e0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011e0e:	ed92 7b00 	vldr	d7, [r2]
 8011e12:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011e16:	f000 8087 	beq.w	8011f28 <_dtoa_r+0x438>
 8011e1a:	4abc      	ldr	r2, [pc, #752]	; (801210c <_dtoa_r+0x61c>)
 8011e1c:	ed92 6b08 	vldr	d6, [r2, #32]
 8011e20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011e24:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011e28:	f001 010f 	and.w	r1, r1, #15
 8011e2c:	2203      	movs	r2, #3
 8011e2e:	48b7      	ldr	r0, [pc, #732]	; (801210c <_dtoa_r+0x61c>)
 8011e30:	2900      	cmp	r1, #0
 8011e32:	d17b      	bne.n	8011f2c <_dtoa_r+0x43c>
 8011e34:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011e3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e42:	2900      	cmp	r1, #0
 8011e44:	f000 80a2 	beq.w	8011f8c <_dtoa_r+0x49c>
 8011e48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011e4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e58:	f140 8098 	bpl.w	8011f8c <_dtoa_r+0x49c>
 8011e5c:	f1b9 0f00 	cmp.w	r9, #0
 8011e60:	f000 8094 	beq.w	8011f8c <_dtoa_r+0x49c>
 8011e64:	f1ba 0f00 	cmp.w	sl, #0
 8011e68:	dd2f      	ble.n	8011eca <_dtoa_r+0x3da>
 8011e6a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011e6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e76:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011e7a:	3201      	adds	r2, #1
 8011e7c:	4650      	mov	r0, sl
 8011e7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011e82:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011e86:	ee07 2a90 	vmov	s15, r2
 8011e8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011e8e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011e92:	ee15 4a90 	vmov	r4, s11
 8011e96:	ec52 1b15 	vmov	r1, r2, d5
 8011e9a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d177      	bne.n	8011f92 <_dtoa_r+0x4a2>
 8011ea2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011ea6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011eaa:	ec42 1b17 	vmov	d7, r1, r2
 8011eae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb6:	f300 8263 	bgt.w	8012380 <_dtoa_r+0x890>
 8011eba:	eeb1 7b47 	vneg.f64	d7, d7
 8011ebe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec6:	f100 8258 	bmi.w	801237a <_dtoa_r+0x88a>
 8011eca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ed0:	2a00      	cmp	r2, #0
 8011ed2:	f2c0 811d 	blt.w	8012110 <_dtoa_r+0x620>
 8011ed6:	f1bb 0f0e 	cmp.w	fp, #14
 8011eda:	f300 8119 	bgt.w	8012110 <_dtoa_r+0x620>
 8011ede:	4b8a      	ldr	r3, [pc, #552]	; (8012108 <_dtoa_r+0x618>)
 8011ee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011ee4:	ed93 6b00 	vldr	d6, [r3]
 8011ee8:	9b08      	ldr	r3, [sp, #32]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	f280 80b7 	bge.w	801205e <_dtoa_r+0x56e>
 8011ef0:	f1b9 0f00 	cmp.w	r9, #0
 8011ef4:	f300 80b3 	bgt.w	801205e <_dtoa_r+0x56e>
 8011ef8:	f040 823f 	bne.w	801237a <_dtoa_r+0x88a>
 8011efc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011f00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011f04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f10:	464c      	mov	r4, r9
 8011f12:	464f      	mov	r7, r9
 8011f14:	f280 8215 	bge.w	8012342 <_dtoa_r+0x852>
 8011f18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f1c:	2331      	movs	r3, #49	; 0x31
 8011f1e:	f808 3b01 	strb.w	r3, [r8], #1
 8011f22:	f10b 0b01 	add.w	fp, fp, #1
 8011f26:	e211      	b.n	801234c <_dtoa_r+0x85c>
 8011f28:	2202      	movs	r2, #2
 8011f2a:	e780      	b.n	8011e2e <_dtoa_r+0x33e>
 8011f2c:	07cc      	lsls	r4, r1, #31
 8011f2e:	d504      	bpl.n	8011f3a <_dtoa_r+0x44a>
 8011f30:	ed90 6b00 	vldr	d6, [r0]
 8011f34:	3201      	adds	r2, #1
 8011f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f3a:	1049      	asrs	r1, r1, #1
 8011f3c:	3008      	adds	r0, #8
 8011f3e:	e777      	b.n	8011e30 <_dtoa_r+0x340>
 8011f40:	d022      	beq.n	8011f88 <_dtoa_r+0x498>
 8011f42:	f1cb 0100 	rsb	r1, fp, #0
 8011f46:	4a70      	ldr	r2, [pc, #448]	; (8012108 <_dtoa_r+0x618>)
 8011f48:	f001 000f 	and.w	r0, r1, #15
 8011f4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011f50:	ed92 7b00 	vldr	d7, [r2]
 8011f54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011f58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f5c:	486b      	ldr	r0, [pc, #428]	; (801210c <_dtoa_r+0x61c>)
 8011f5e:	1109      	asrs	r1, r1, #4
 8011f60:	2400      	movs	r4, #0
 8011f62:	2202      	movs	r2, #2
 8011f64:	b929      	cbnz	r1, 8011f72 <_dtoa_r+0x482>
 8011f66:	2c00      	cmp	r4, #0
 8011f68:	f43f af6a 	beq.w	8011e40 <_dtoa_r+0x350>
 8011f6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f70:	e766      	b.n	8011e40 <_dtoa_r+0x350>
 8011f72:	07cf      	lsls	r7, r1, #31
 8011f74:	d505      	bpl.n	8011f82 <_dtoa_r+0x492>
 8011f76:	ed90 6b00 	vldr	d6, [r0]
 8011f7a:	3201      	adds	r2, #1
 8011f7c:	2401      	movs	r4, #1
 8011f7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f82:	1049      	asrs	r1, r1, #1
 8011f84:	3008      	adds	r0, #8
 8011f86:	e7ed      	b.n	8011f64 <_dtoa_r+0x474>
 8011f88:	2202      	movs	r2, #2
 8011f8a:	e759      	b.n	8011e40 <_dtoa_r+0x350>
 8011f8c:	465f      	mov	r7, fp
 8011f8e:	4648      	mov	r0, r9
 8011f90:	e775      	b.n	8011e7e <_dtoa_r+0x38e>
 8011f92:	ec42 1b17 	vmov	d7, r1, r2
 8011f96:	4a5c      	ldr	r2, [pc, #368]	; (8012108 <_dtoa_r+0x618>)
 8011f98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011f9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011fa0:	9a01      	ldr	r2, [sp, #4]
 8011fa2:	1814      	adds	r4, r2, r0
 8011fa4:	9a07      	ldr	r2, [sp, #28]
 8011fa6:	b352      	cbz	r2, 8011ffe <_dtoa_r+0x50e>
 8011fa8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011fac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011fb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011fb4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011fb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011fbc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011fc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011fc4:	ee14 2a90 	vmov	r2, s9
 8011fc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011fcc:	3230      	adds	r2, #48	; 0x30
 8011fce:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011fd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fda:	f808 2b01 	strb.w	r2, [r8], #1
 8011fde:	d439      	bmi.n	8012054 <_dtoa_r+0x564>
 8011fe0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011fe4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fec:	d472      	bmi.n	80120d4 <_dtoa_r+0x5e4>
 8011fee:	45a0      	cmp	r8, r4
 8011ff0:	f43f af6b 	beq.w	8011eca <_dtoa_r+0x3da>
 8011ff4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011ff8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011ffc:	e7e0      	b.n	8011fc0 <_dtoa_r+0x4d0>
 8011ffe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012002:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012006:	4621      	mov	r1, r4
 8012008:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801200c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012010:	ee14 2a90 	vmov	r2, s9
 8012014:	3230      	adds	r2, #48	; 0x30
 8012016:	f808 2b01 	strb.w	r2, [r8], #1
 801201a:	45a0      	cmp	r8, r4
 801201c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012020:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012024:	d118      	bne.n	8012058 <_dtoa_r+0x568>
 8012026:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801202a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801202e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012036:	dc4d      	bgt.n	80120d4 <_dtoa_r+0x5e4>
 8012038:	ee35 7b47 	vsub.f64	d7, d5, d7
 801203c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012044:	f57f af41 	bpl.w	8011eca <_dtoa_r+0x3da>
 8012048:	4688      	mov	r8, r1
 801204a:	3901      	subs	r1, #1
 801204c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012050:	2b30      	cmp	r3, #48	; 0x30
 8012052:	d0f9      	beq.n	8012048 <_dtoa_r+0x558>
 8012054:	46bb      	mov	fp, r7
 8012056:	e02a      	b.n	80120ae <_dtoa_r+0x5be>
 8012058:	ee26 6b03 	vmul.f64	d6, d6, d3
 801205c:	e7d6      	b.n	801200c <_dtoa_r+0x51c>
 801205e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012062:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012066:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801206a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801206e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012072:	ee15 3a10 	vmov	r3, s10
 8012076:	3330      	adds	r3, #48	; 0x30
 8012078:	f808 3b01 	strb.w	r3, [r8], #1
 801207c:	9b01      	ldr	r3, [sp, #4]
 801207e:	eba8 0303 	sub.w	r3, r8, r3
 8012082:	4599      	cmp	r9, r3
 8012084:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012088:	eea3 7b46 	vfms.f64	d7, d3, d6
 801208c:	d133      	bne.n	80120f6 <_dtoa_r+0x606>
 801208e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012092:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209a:	dc1a      	bgt.n	80120d2 <_dtoa_r+0x5e2>
 801209c:	eeb4 7b46 	vcmp.f64	d7, d6
 80120a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a4:	d103      	bne.n	80120ae <_dtoa_r+0x5be>
 80120a6:	ee15 3a10 	vmov	r3, s10
 80120aa:	07d9      	lsls	r1, r3, #31
 80120ac:	d411      	bmi.n	80120d2 <_dtoa_r+0x5e2>
 80120ae:	4629      	mov	r1, r5
 80120b0:	4630      	mov	r0, r6
 80120b2:	f000 fd11 	bl	8012ad8 <_Bfree>
 80120b6:	2300      	movs	r3, #0
 80120b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120ba:	f888 3000 	strb.w	r3, [r8]
 80120be:	f10b 0301 	add.w	r3, fp, #1
 80120c2:	6013      	str	r3, [r2, #0]
 80120c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	f43f ad61 	beq.w	8011b8e <_dtoa_r+0x9e>
 80120cc:	f8c3 8000 	str.w	r8, [r3]
 80120d0:	e55d      	b.n	8011b8e <_dtoa_r+0x9e>
 80120d2:	465f      	mov	r7, fp
 80120d4:	4643      	mov	r3, r8
 80120d6:	4698      	mov	r8, r3
 80120d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120dc:	2a39      	cmp	r2, #57	; 0x39
 80120de:	d106      	bne.n	80120ee <_dtoa_r+0x5fe>
 80120e0:	9a01      	ldr	r2, [sp, #4]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d1f7      	bne.n	80120d6 <_dtoa_r+0x5e6>
 80120e6:	9901      	ldr	r1, [sp, #4]
 80120e8:	2230      	movs	r2, #48	; 0x30
 80120ea:	3701      	adds	r7, #1
 80120ec:	700a      	strb	r2, [r1, #0]
 80120ee:	781a      	ldrb	r2, [r3, #0]
 80120f0:	3201      	adds	r2, #1
 80120f2:	701a      	strb	r2, [r3, #0]
 80120f4:	e7ae      	b.n	8012054 <_dtoa_r+0x564>
 80120f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80120fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012102:	d1b2      	bne.n	801206a <_dtoa_r+0x57a>
 8012104:	e7d3      	b.n	80120ae <_dtoa_r+0x5be>
 8012106:	bf00      	nop
 8012108:	0801e198 	.word	0x0801e198
 801210c:	0801e170 	.word	0x0801e170
 8012110:	9907      	ldr	r1, [sp, #28]
 8012112:	2900      	cmp	r1, #0
 8012114:	f000 80d0 	beq.w	80122b8 <_dtoa_r+0x7c8>
 8012118:	9906      	ldr	r1, [sp, #24]
 801211a:	2901      	cmp	r1, #1
 801211c:	f300 80b4 	bgt.w	8012288 <_dtoa_r+0x798>
 8012120:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012122:	2900      	cmp	r1, #0
 8012124:	f000 80ac 	beq.w	8012280 <_dtoa_r+0x790>
 8012128:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801212c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012130:	461c      	mov	r4, r3
 8012132:	930a      	str	r3, [sp, #40]	; 0x28
 8012134:	9b04      	ldr	r3, [sp, #16]
 8012136:	4413      	add	r3, r2
 8012138:	9304      	str	r3, [sp, #16]
 801213a:	9b05      	ldr	r3, [sp, #20]
 801213c:	2101      	movs	r1, #1
 801213e:	4413      	add	r3, r2
 8012140:	4630      	mov	r0, r6
 8012142:	9305      	str	r3, [sp, #20]
 8012144:	f000 fd80 	bl	8012c48 <__i2b>
 8012148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801214a:	4607      	mov	r7, r0
 801214c:	f1b8 0f00 	cmp.w	r8, #0
 8012150:	dd0d      	ble.n	801216e <_dtoa_r+0x67e>
 8012152:	9a05      	ldr	r2, [sp, #20]
 8012154:	2a00      	cmp	r2, #0
 8012156:	dd0a      	ble.n	801216e <_dtoa_r+0x67e>
 8012158:	4542      	cmp	r2, r8
 801215a:	9904      	ldr	r1, [sp, #16]
 801215c:	bfa8      	it	ge
 801215e:	4642      	movge	r2, r8
 8012160:	1a89      	subs	r1, r1, r2
 8012162:	9104      	str	r1, [sp, #16]
 8012164:	9905      	ldr	r1, [sp, #20]
 8012166:	eba8 0802 	sub.w	r8, r8, r2
 801216a:	1a8a      	subs	r2, r1, r2
 801216c:	9205      	str	r2, [sp, #20]
 801216e:	b303      	cbz	r3, 80121b2 <_dtoa_r+0x6c2>
 8012170:	9a07      	ldr	r2, [sp, #28]
 8012172:	2a00      	cmp	r2, #0
 8012174:	f000 80a5 	beq.w	80122c2 <_dtoa_r+0x7d2>
 8012178:	2c00      	cmp	r4, #0
 801217a:	dd13      	ble.n	80121a4 <_dtoa_r+0x6b4>
 801217c:	4639      	mov	r1, r7
 801217e:	4622      	mov	r2, r4
 8012180:	4630      	mov	r0, r6
 8012182:	930d      	str	r3, [sp, #52]	; 0x34
 8012184:	f000 fe20 	bl	8012dc8 <__pow5mult>
 8012188:	462a      	mov	r2, r5
 801218a:	4601      	mov	r1, r0
 801218c:	4607      	mov	r7, r0
 801218e:	4630      	mov	r0, r6
 8012190:	f000 fd70 	bl	8012c74 <__multiply>
 8012194:	4629      	mov	r1, r5
 8012196:	900a      	str	r0, [sp, #40]	; 0x28
 8012198:	4630      	mov	r0, r6
 801219a:	f000 fc9d 	bl	8012ad8 <_Bfree>
 801219e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121a2:	4615      	mov	r5, r2
 80121a4:	1b1a      	subs	r2, r3, r4
 80121a6:	d004      	beq.n	80121b2 <_dtoa_r+0x6c2>
 80121a8:	4629      	mov	r1, r5
 80121aa:	4630      	mov	r0, r6
 80121ac:	f000 fe0c 	bl	8012dc8 <__pow5mult>
 80121b0:	4605      	mov	r5, r0
 80121b2:	2101      	movs	r1, #1
 80121b4:	4630      	mov	r0, r6
 80121b6:	f000 fd47 	bl	8012c48 <__i2b>
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	2b00      	cmp	r3, #0
 80121be:	4604      	mov	r4, r0
 80121c0:	f340 8081 	ble.w	80122c6 <_dtoa_r+0x7d6>
 80121c4:	461a      	mov	r2, r3
 80121c6:	4601      	mov	r1, r0
 80121c8:	4630      	mov	r0, r6
 80121ca:	f000 fdfd 	bl	8012dc8 <__pow5mult>
 80121ce:	9b06      	ldr	r3, [sp, #24]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	4604      	mov	r4, r0
 80121d4:	dd7a      	ble.n	80122cc <_dtoa_r+0x7dc>
 80121d6:	2300      	movs	r3, #0
 80121d8:	930a      	str	r3, [sp, #40]	; 0x28
 80121da:	6922      	ldr	r2, [r4, #16]
 80121dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80121e0:	6910      	ldr	r0, [r2, #16]
 80121e2:	f000 fce1 	bl	8012ba8 <__hi0bits>
 80121e6:	f1c0 0020 	rsb	r0, r0, #32
 80121ea:	9b05      	ldr	r3, [sp, #20]
 80121ec:	4418      	add	r0, r3
 80121ee:	f010 001f 	ands.w	r0, r0, #31
 80121f2:	f000 808c 	beq.w	801230e <_dtoa_r+0x81e>
 80121f6:	f1c0 0220 	rsb	r2, r0, #32
 80121fa:	2a04      	cmp	r2, #4
 80121fc:	f340 8085 	ble.w	801230a <_dtoa_r+0x81a>
 8012200:	f1c0 001c 	rsb	r0, r0, #28
 8012204:	9b04      	ldr	r3, [sp, #16]
 8012206:	4403      	add	r3, r0
 8012208:	9304      	str	r3, [sp, #16]
 801220a:	9b05      	ldr	r3, [sp, #20]
 801220c:	4403      	add	r3, r0
 801220e:	4480      	add	r8, r0
 8012210:	9305      	str	r3, [sp, #20]
 8012212:	9b04      	ldr	r3, [sp, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	dd05      	ble.n	8012224 <_dtoa_r+0x734>
 8012218:	4629      	mov	r1, r5
 801221a:	461a      	mov	r2, r3
 801221c:	4630      	mov	r0, r6
 801221e:	f000 fe2d 	bl	8012e7c <__lshift>
 8012222:	4605      	mov	r5, r0
 8012224:	9b05      	ldr	r3, [sp, #20]
 8012226:	2b00      	cmp	r3, #0
 8012228:	dd05      	ble.n	8012236 <_dtoa_r+0x746>
 801222a:	4621      	mov	r1, r4
 801222c:	461a      	mov	r2, r3
 801222e:	4630      	mov	r0, r6
 8012230:	f000 fe24 	bl	8012e7c <__lshift>
 8012234:	4604      	mov	r4, r0
 8012236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012238:	2b00      	cmp	r3, #0
 801223a:	d06a      	beq.n	8012312 <_dtoa_r+0x822>
 801223c:	4621      	mov	r1, r4
 801223e:	4628      	mov	r0, r5
 8012240:	f000 fe8c 	bl	8012f5c <__mcmp>
 8012244:	2800      	cmp	r0, #0
 8012246:	da64      	bge.n	8012312 <_dtoa_r+0x822>
 8012248:	2300      	movs	r3, #0
 801224a:	4629      	mov	r1, r5
 801224c:	220a      	movs	r2, #10
 801224e:	4630      	mov	r0, r6
 8012250:	f000 fc64 	bl	8012b1c <__multadd>
 8012254:	9b07      	ldr	r3, [sp, #28]
 8012256:	f10b 3bff 	add.w	fp, fp, #4294967295
 801225a:	4605      	mov	r5, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	f000 8191 	beq.w	8012584 <_dtoa_r+0xa94>
 8012262:	4639      	mov	r1, r7
 8012264:	2300      	movs	r3, #0
 8012266:	220a      	movs	r2, #10
 8012268:	4630      	mov	r0, r6
 801226a:	f000 fc57 	bl	8012b1c <__multadd>
 801226e:	f1ba 0f00 	cmp.w	sl, #0
 8012272:	4607      	mov	r7, r0
 8012274:	f300 808d 	bgt.w	8012392 <_dtoa_r+0x8a2>
 8012278:	9b06      	ldr	r3, [sp, #24]
 801227a:	2b02      	cmp	r3, #2
 801227c:	dc50      	bgt.n	8012320 <_dtoa_r+0x830>
 801227e:	e088      	b.n	8012392 <_dtoa_r+0x8a2>
 8012280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012282:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012286:	e751      	b.n	801212c <_dtoa_r+0x63c>
 8012288:	f109 34ff 	add.w	r4, r9, #4294967295
 801228c:	42a3      	cmp	r3, r4
 801228e:	bfbf      	itttt	lt
 8012290:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8012292:	1ae3      	sublt	r3, r4, r3
 8012294:	18d2      	addlt	r2, r2, r3
 8012296:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012298:	bfb6      	itet	lt
 801229a:	4623      	movlt	r3, r4
 801229c:	1b1c      	subge	r4, r3, r4
 801229e:	2400      	movlt	r4, #0
 80122a0:	f1b9 0f00 	cmp.w	r9, #0
 80122a4:	bfb5      	itete	lt
 80122a6:	9a04      	ldrlt	r2, [sp, #16]
 80122a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80122ac:	eba2 0809 	sublt.w	r8, r2, r9
 80122b0:	464a      	movge	r2, r9
 80122b2:	bfb8      	it	lt
 80122b4:	2200      	movlt	r2, #0
 80122b6:	e73c      	b.n	8012132 <_dtoa_r+0x642>
 80122b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80122bc:	9f07      	ldr	r7, [sp, #28]
 80122be:	461c      	mov	r4, r3
 80122c0:	e744      	b.n	801214c <_dtoa_r+0x65c>
 80122c2:	461a      	mov	r2, r3
 80122c4:	e770      	b.n	80121a8 <_dtoa_r+0x6b8>
 80122c6:	9b06      	ldr	r3, [sp, #24]
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	dc18      	bgt.n	80122fe <_dtoa_r+0x80e>
 80122cc:	9b02      	ldr	r3, [sp, #8]
 80122ce:	b9b3      	cbnz	r3, 80122fe <_dtoa_r+0x80e>
 80122d0:	9b03      	ldr	r3, [sp, #12]
 80122d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80122d6:	b9a2      	cbnz	r2, 8012302 <_dtoa_r+0x812>
 80122d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80122dc:	0d12      	lsrs	r2, r2, #20
 80122de:	0512      	lsls	r2, r2, #20
 80122e0:	b18a      	cbz	r2, 8012306 <_dtoa_r+0x816>
 80122e2:	9b04      	ldr	r3, [sp, #16]
 80122e4:	3301      	adds	r3, #1
 80122e6:	9304      	str	r3, [sp, #16]
 80122e8:	9b05      	ldr	r3, [sp, #20]
 80122ea:	3301      	adds	r3, #1
 80122ec:	9305      	str	r3, [sp, #20]
 80122ee:	2301      	movs	r3, #1
 80122f0:	930a      	str	r3, [sp, #40]	; 0x28
 80122f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f47f af70 	bne.w	80121da <_dtoa_r+0x6ea>
 80122fa:	2001      	movs	r0, #1
 80122fc:	e775      	b.n	80121ea <_dtoa_r+0x6fa>
 80122fe:	2300      	movs	r3, #0
 8012300:	e7f6      	b.n	80122f0 <_dtoa_r+0x800>
 8012302:	9b02      	ldr	r3, [sp, #8]
 8012304:	e7f4      	b.n	80122f0 <_dtoa_r+0x800>
 8012306:	920a      	str	r2, [sp, #40]	; 0x28
 8012308:	e7f3      	b.n	80122f2 <_dtoa_r+0x802>
 801230a:	d082      	beq.n	8012212 <_dtoa_r+0x722>
 801230c:	4610      	mov	r0, r2
 801230e:	301c      	adds	r0, #28
 8012310:	e778      	b.n	8012204 <_dtoa_r+0x714>
 8012312:	f1b9 0f00 	cmp.w	r9, #0
 8012316:	dc37      	bgt.n	8012388 <_dtoa_r+0x898>
 8012318:	9b06      	ldr	r3, [sp, #24]
 801231a:	2b02      	cmp	r3, #2
 801231c:	dd34      	ble.n	8012388 <_dtoa_r+0x898>
 801231e:	46ca      	mov	sl, r9
 8012320:	f1ba 0f00 	cmp.w	sl, #0
 8012324:	d10d      	bne.n	8012342 <_dtoa_r+0x852>
 8012326:	4621      	mov	r1, r4
 8012328:	4653      	mov	r3, sl
 801232a:	2205      	movs	r2, #5
 801232c:	4630      	mov	r0, r6
 801232e:	f000 fbf5 	bl	8012b1c <__multadd>
 8012332:	4601      	mov	r1, r0
 8012334:	4604      	mov	r4, r0
 8012336:	4628      	mov	r0, r5
 8012338:	f000 fe10 	bl	8012f5c <__mcmp>
 801233c:	2800      	cmp	r0, #0
 801233e:	f73f adeb 	bgt.w	8011f18 <_dtoa_r+0x428>
 8012342:	9b08      	ldr	r3, [sp, #32]
 8012344:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012348:	ea6f 0b03 	mvn.w	fp, r3
 801234c:	f04f 0900 	mov.w	r9, #0
 8012350:	4621      	mov	r1, r4
 8012352:	4630      	mov	r0, r6
 8012354:	f000 fbc0 	bl	8012ad8 <_Bfree>
 8012358:	2f00      	cmp	r7, #0
 801235a:	f43f aea8 	beq.w	80120ae <_dtoa_r+0x5be>
 801235e:	f1b9 0f00 	cmp.w	r9, #0
 8012362:	d005      	beq.n	8012370 <_dtoa_r+0x880>
 8012364:	45b9      	cmp	r9, r7
 8012366:	d003      	beq.n	8012370 <_dtoa_r+0x880>
 8012368:	4649      	mov	r1, r9
 801236a:	4630      	mov	r0, r6
 801236c:	f000 fbb4 	bl	8012ad8 <_Bfree>
 8012370:	4639      	mov	r1, r7
 8012372:	4630      	mov	r0, r6
 8012374:	f000 fbb0 	bl	8012ad8 <_Bfree>
 8012378:	e699      	b.n	80120ae <_dtoa_r+0x5be>
 801237a:	2400      	movs	r4, #0
 801237c:	4627      	mov	r7, r4
 801237e:	e7e0      	b.n	8012342 <_dtoa_r+0x852>
 8012380:	46bb      	mov	fp, r7
 8012382:	4604      	mov	r4, r0
 8012384:	4607      	mov	r7, r0
 8012386:	e5c7      	b.n	8011f18 <_dtoa_r+0x428>
 8012388:	9b07      	ldr	r3, [sp, #28]
 801238a:	46ca      	mov	sl, r9
 801238c:	2b00      	cmp	r3, #0
 801238e:	f000 8100 	beq.w	8012592 <_dtoa_r+0xaa2>
 8012392:	f1b8 0f00 	cmp.w	r8, #0
 8012396:	dd05      	ble.n	80123a4 <_dtoa_r+0x8b4>
 8012398:	4639      	mov	r1, r7
 801239a:	4642      	mov	r2, r8
 801239c:	4630      	mov	r0, r6
 801239e:	f000 fd6d 	bl	8012e7c <__lshift>
 80123a2:	4607      	mov	r7, r0
 80123a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d05d      	beq.n	8012466 <_dtoa_r+0x976>
 80123aa:	6879      	ldr	r1, [r7, #4]
 80123ac:	4630      	mov	r0, r6
 80123ae:	f000 fb53 	bl	8012a58 <_Balloc>
 80123b2:	4680      	mov	r8, r0
 80123b4:	b928      	cbnz	r0, 80123c2 <_dtoa_r+0x8d2>
 80123b6:	4b82      	ldr	r3, [pc, #520]	; (80125c0 <_dtoa_r+0xad0>)
 80123b8:	4602      	mov	r2, r0
 80123ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80123be:	f7ff bbaf 	b.w	8011b20 <_dtoa_r+0x30>
 80123c2:	693a      	ldr	r2, [r7, #16]
 80123c4:	3202      	adds	r2, #2
 80123c6:	0092      	lsls	r2, r2, #2
 80123c8:	f107 010c 	add.w	r1, r7, #12
 80123cc:	300c      	adds	r0, #12
 80123ce:	f7fe fafb 	bl	80109c8 <memcpy>
 80123d2:	2201      	movs	r2, #1
 80123d4:	4641      	mov	r1, r8
 80123d6:	4630      	mov	r0, r6
 80123d8:	f000 fd50 	bl	8012e7c <__lshift>
 80123dc:	9b01      	ldr	r3, [sp, #4]
 80123de:	3301      	adds	r3, #1
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	9b01      	ldr	r3, [sp, #4]
 80123e4:	4453      	add	r3, sl
 80123e6:	9308      	str	r3, [sp, #32]
 80123e8:	9b02      	ldr	r3, [sp, #8]
 80123ea:	f003 0301 	and.w	r3, r3, #1
 80123ee:	46b9      	mov	r9, r7
 80123f0:	9307      	str	r3, [sp, #28]
 80123f2:	4607      	mov	r7, r0
 80123f4:	9b04      	ldr	r3, [sp, #16]
 80123f6:	4621      	mov	r1, r4
 80123f8:	3b01      	subs	r3, #1
 80123fa:	4628      	mov	r0, r5
 80123fc:	9302      	str	r3, [sp, #8]
 80123fe:	f7ff faea 	bl	80119d6 <quorem>
 8012402:	4603      	mov	r3, r0
 8012404:	3330      	adds	r3, #48	; 0x30
 8012406:	9005      	str	r0, [sp, #20]
 8012408:	4649      	mov	r1, r9
 801240a:	4628      	mov	r0, r5
 801240c:	9309      	str	r3, [sp, #36]	; 0x24
 801240e:	f000 fda5 	bl	8012f5c <__mcmp>
 8012412:	463a      	mov	r2, r7
 8012414:	4682      	mov	sl, r0
 8012416:	4621      	mov	r1, r4
 8012418:	4630      	mov	r0, r6
 801241a:	f000 fdbb 	bl	8012f94 <__mdiff>
 801241e:	68c2      	ldr	r2, [r0, #12]
 8012420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012422:	4680      	mov	r8, r0
 8012424:	bb0a      	cbnz	r2, 801246a <_dtoa_r+0x97a>
 8012426:	4601      	mov	r1, r0
 8012428:	4628      	mov	r0, r5
 801242a:	f000 fd97 	bl	8012f5c <__mcmp>
 801242e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012430:	4602      	mov	r2, r0
 8012432:	4641      	mov	r1, r8
 8012434:	4630      	mov	r0, r6
 8012436:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801243a:	f000 fb4d 	bl	8012ad8 <_Bfree>
 801243e:	9b06      	ldr	r3, [sp, #24]
 8012440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012442:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012446:	ea43 0102 	orr.w	r1, r3, r2
 801244a:	9b07      	ldr	r3, [sp, #28]
 801244c:	430b      	orrs	r3, r1
 801244e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012450:	d10d      	bne.n	801246e <_dtoa_r+0x97e>
 8012452:	2b39      	cmp	r3, #57	; 0x39
 8012454:	d029      	beq.n	80124aa <_dtoa_r+0x9ba>
 8012456:	f1ba 0f00 	cmp.w	sl, #0
 801245a:	dd01      	ble.n	8012460 <_dtoa_r+0x970>
 801245c:	9b05      	ldr	r3, [sp, #20]
 801245e:	3331      	adds	r3, #49	; 0x31
 8012460:	9a02      	ldr	r2, [sp, #8]
 8012462:	7013      	strb	r3, [r2, #0]
 8012464:	e774      	b.n	8012350 <_dtoa_r+0x860>
 8012466:	4638      	mov	r0, r7
 8012468:	e7b8      	b.n	80123dc <_dtoa_r+0x8ec>
 801246a:	2201      	movs	r2, #1
 801246c:	e7e1      	b.n	8012432 <_dtoa_r+0x942>
 801246e:	f1ba 0f00 	cmp.w	sl, #0
 8012472:	db06      	blt.n	8012482 <_dtoa_r+0x992>
 8012474:	9906      	ldr	r1, [sp, #24]
 8012476:	ea41 0a0a 	orr.w	sl, r1, sl
 801247a:	9907      	ldr	r1, [sp, #28]
 801247c:	ea5a 0101 	orrs.w	r1, sl, r1
 8012480:	d120      	bne.n	80124c4 <_dtoa_r+0x9d4>
 8012482:	2a00      	cmp	r2, #0
 8012484:	ddec      	ble.n	8012460 <_dtoa_r+0x970>
 8012486:	4629      	mov	r1, r5
 8012488:	2201      	movs	r2, #1
 801248a:	4630      	mov	r0, r6
 801248c:	9304      	str	r3, [sp, #16]
 801248e:	f000 fcf5 	bl	8012e7c <__lshift>
 8012492:	4621      	mov	r1, r4
 8012494:	4605      	mov	r5, r0
 8012496:	f000 fd61 	bl	8012f5c <__mcmp>
 801249a:	2800      	cmp	r0, #0
 801249c:	9b04      	ldr	r3, [sp, #16]
 801249e:	dc02      	bgt.n	80124a6 <_dtoa_r+0x9b6>
 80124a0:	d1de      	bne.n	8012460 <_dtoa_r+0x970>
 80124a2:	07da      	lsls	r2, r3, #31
 80124a4:	d5dc      	bpl.n	8012460 <_dtoa_r+0x970>
 80124a6:	2b39      	cmp	r3, #57	; 0x39
 80124a8:	d1d8      	bne.n	801245c <_dtoa_r+0x96c>
 80124aa:	9a02      	ldr	r2, [sp, #8]
 80124ac:	2339      	movs	r3, #57	; 0x39
 80124ae:	7013      	strb	r3, [r2, #0]
 80124b0:	4643      	mov	r3, r8
 80124b2:	4698      	mov	r8, r3
 80124b4:	3b01      	subs	r3, #1
 80124b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80124ba:	2a39      	cmp	r2, #57	; 0x39
 80124bc:	d051      	beq.n	8012562 <_dtoa_r+0xa72>
 80124be:	3201      	adds	r2, #1
 80124c0:	701a      	strb	r2, [r3, #0]
 80124c2:	e745      	b.n	8012350 <_dtoa_r+0x860>
 80124c4:	2a00      	cmp	r2, #0
 80124c6:	dd03      	ble.n	80124d0 <_dtoa_r+0x9e0>
 80124c8:	2b39      	cmp	r3, #57	; 0x39
 80124ca:	d0ee      	beq.n	80124aa <_dtoa_r+0x9ba>
 80124cc:	3301      	adds	r3, #1
 80124ce:	e7c7      	b.n	8012460 <_dtoa_r+0x970>
 80124d0:	9a04      	ldr	r2, [sp, #16]
 80124d2:	9908      	ldr	r1, [sp, #32]
 80124d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80124d8:	428a      	cmp	r2, r1
 80124da:	d02b      	beq.n	8012534 <_dtoa_r+0xa44>
 80124dc:	4629      	mov	r1, r5
 80124de:	2300      	movs	r3, #0
 80124e0:	220a      	movs	r2, #10
 80124e2:	4630      	mov	r0, r6
 80124e4:	f000 fb1a 	bl	8012b1c <__multadd>
 80124e8:	45b9      	cmp	r9, r7
 80124ea:	4605      	mov	r5, r0
 80124ec:	f04f 0300 	mov.w	r3, #0
 80124f0:	f04f 020a 	mov.w	r2, #10
 80124f4:	4649      	mov	r1, r9
 80124f6:	4630      	mov	r0, r6
 80124f8:	d107      	bne.n	801250a <_dtoa_r+0xa1a>
 80124fa:	f000 fb0f 	bl	8012b1c <__multadd>
 80124fe:	4681      	mov	r9, r0
 8012500:	4607      	mov	r7, r0
 8012502:	9b04      	ldr	r3, [sp, #16]
 8012504:	3301      	adds	r3, #1
 8012506:	9304      	str	r3, [sp, #16]
 8012508:	e774      	b.n	80123f4 <_dtoa_r+0x904>
 801250a:	f000 fb07 	bl	8012b1c <__multadd>
 801250e:	4639      	mov	r1, r7
 8012510:	4681      	mov	r9, r0
 8012512:	2300      	movs	r3, #0
 8012514:	220a      	movs	r2, #10
 8012516:	4630      	mov	r0, r6
 8012518:	f000 fb00 	bl	8012b1c <__multadd>
 801251c:	4607      	mov	r7, r0
 801251e:	e7f0      	b.n	8012502 <_dtoa_r+0xa12>
 8012520:	f1ba 0f00 	cmp.w	sl, #0
 8012524:	9a01      	ldr	r2, [sp, #4]
 8012526:	bfcc      	ite	gt
 8012528:	46d0      	movgt	r8, sl
 801252a:	f04f 0801 	movle.w	r8, #1
 801252e:	4490      	add	r8, r2
 8012530:	f04f 0900 	mov.w	r9, #0
 8012534:	4629      	mov	r1, r5
 8012536:	2201      	movs	r2, #1
 8012538:	4630      	mov	r0, r6
 801253a:	9302      	str	r3, [sp, #8]
 801253c:	f000 fc9e 	bl	8012e7c <__lshift>
 8012540:	4621      	mov	r1, r4
 8012542:	4605      	mov	r5, r0
 8012544:	f000 fd0a 	bl	8012f5c <__mcmp>
 8012548:	2800      	cmp	r0, #0
 801254a:	dcb1      	bgt.n	80124b0 <_dtoa_r+0x9c0>
 801254c:	d102      	bne.n	8012554 <_dtoa_r+0xa64>
 801254e:	9b02      	ldr	r3, [sp, #8]
 8012550:	07db      	lsls	r3, r3, #31
 8012552:	d4ad      	bmi.n	80124b0 <_dtoa_r+0x9c0>
 8012554:	4643      	mov	r3, r8
 8012556:	4698      	mov	r8, r3
 8012558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801255c:	2a30      	cmp	r2, #48	; 0x30
 801255e:	d0fa      	beq.n	8012556 <_dtoa_r+0xa66>
 8012560:	e6f6      	b.n	8012350 <_dtoa_r+0x860>
 8012562:	9a01      	ldr	r2, [sp, #4]
 8012564:	429a      	cmp	r2, r3
 8012566:	d1a4      	bne.n	80124b2 <_dtoa_r+0x9c2>
 8012568:	f10b 0b01 	add.w	fp, fp, #1
 801256c:	2331      	movs	r3, #49	; 0x31
 801256e:	e778      	b.n	8012462 <_dtoa_r+0x972>
 8012570:	4b14      	ldr	r3, [pc, #80]	; (80125c4 <_dtoa_r+0xad4>)
 8012572:	f7ff bb27 	b.w	8011bc4 <_dtoa_r+0xd4>
 8012576:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012578:	2b00      	cmp	r3, #0
 801257a:	f47f ab03 	bne.w	8011b84 <_dtoa_r+0x94>
 801257e:	4b12      	ldr	r3, [pc, #72]	; (80125c8 <_dtoa_r+0xad8>)
 8012580:	f7ff bb20 	b.w	8011bc4 <_dtoa_r+0xd4>
 8012584:	f1ba 0f00 	cmp.w	sl, #0
 8012588:	dc03      	bgt.n	8012592 <_dtoa_r+0xaa2>
 801258a:	9b06      	ldr	r3, [sp, #24]
 801258c:	2b02      	cmp	r3, #2
 801258e:	f73f aec7 	bgt.w	8012320 <_dtoa_r+0x830>
 8012592:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012596:	4621      	mov	r1, r4
 8012598:	4628      	mov	r0, r5
 801259a:	f7ff fa1c 	bl	80119d6 <quorem>
 801259e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80125a2:	f808 3b01 	strb.w	r3, [r8], #1
 80125a6:	9a01      	ldr	r2, [sp, #4]
 80125a8:	eba8 0202 	sub.w	r2, r8, r2
 80125ac:	4592      	cmp	sl, r2
 80125ae:	ddb7      	ble.n	8012520 <_dtoa_r+0xa30>
 80125b0:	4629      	mov	r1, r5
 80125b2:	2300      	movs	r3, #0
 80125b4:	220a      	movs	r2, #10
 80125b6:	4630      	mov	r0, r6
 80125b8:	f000 fab0 	bl	8012b1c <__multadd>
 80125bc:	4605      	mov	r5, r0
 80125be:	e7ea      	b.n	8012596 <_dtoa_r+0xaa6>
 80125c0:	0801e09c 	.word	0x0801e09c
 80125c4:	0801df41 	.word	0x0801df41
 80125c8:	0801e034 	.word	0x0801e034

080125cc <__sflush_r>:
 80125cc:	898a      	ldrh	r2, [r1, #12]
 80125ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d2:	4605      	mov	r5, r0
 80125d4:	0710      	lsls	r0, r2, #28
 80125d6:	460c      	mov	r4, r1
 80125d8:	d458      	bmi.n	801268c <__sflush_r+0xc0>
 80125da:	684b      	ldr	r3, [r1, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	dc05      	bgt.n	80125ec <__sflush_r+0x20>
 80125e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	dc02      	bgt.n	80125ec <__sflush_r+0x20>
 80125e6:	2000      	movs	r0, #0
 80125e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125ee:	2e00      	cmp	r6, #0
 80125f0:	d0f9      	beq.n	80125e6 <__sflush_r+0x1a>
 80125f2:	2300      	movs	r3, #0
 80125f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80125f8:	682f      	ldr	r7, [r5, #0]
 80125fa:	602b      	str	r3, [r5, #0]
 80125fc:	d032      	beq.n	8012664 <__sflush_r+0x98>
 80125fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012600:	89a3      	ldrh	r3, [r4, #12]
 8012602:	075a      	lsls	r2, r3, #29
 8012604:	d505      	bpl.n	8012612 <__sflush_r+0x46>
 8012606:	6863      	ldr	r3, [r4, #4]
 8012608:	1ac0      	subs	r0, r0, r3
 801260a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801260c:	b10b      	cbz	r3, 8012612 <__sflush_r+0x46>
 801260e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012610:	1ac0      	subs	r0, r0, r3
 8012612:	2300      	movs	r3, #0
 8012614:	4602      	mov	r2, r0
 8012616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012618:	6a21      	ldr	r1, [r4, #32]
 801261a:	4628      	mov	r0, r5
 801261c:	47b0      	blx	r6
 801261e:	1c43      	adds	r3, r0, #1
 8012620:	89a3      	ldrh	r3, [r4, #12]
 8012622:	d106      	bne.n	8012632 <__sflush_r+0x66>
 8012624:	6829      	ldr	r1, [r5, #0]
 8012626:	291d      	cmp	r1, #29
 8012628:	d82c      	bhi.n	8012684 <__sflush_r+0xb8>
 801262a:	4a2a      	ldr	r2, [pc, #168]	; (80126d4 <__sflush_r+0x108>)
 801262c:	40ca      	lsrs	r2, r1
 801262e:	07d6      	lsls	r6, r2, #31
 8012630:	d528      	bpl.n	8012684 <__sflush_r+0xb8>
 8012632:	2200      	movs	r2, #0
 8012634:	6062      	str	r2, [r4, #4]
 8012636:	04d9      	lsls	r1, r3, #19
 8012638:	6922      	ldr	r2, [r4, #16]
 801263a:	6022      	str	r2, [r4, #0]
 801263c:	d504      	bpl.n	8012648 <__sflush_r+0x7c>
 801263e:	1c42      	adds	r2, r0, #1
 8012640:	d101      	bne.n	8012646 <__sflush_r+0x7a>
 8012642:	682b      	ldr	r3, [r5, #0]
 8012644:	b903      	cbnz	r3, 8012648 <__sflush_r+0x7c>
 8012646:	6560      	str	r0, [r4, #84]	; 0x54
 8012648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801264a:	602f      	str	r7, [r5, #0]
 801264c:	2900      	cmp	r1, #0
 801264e:	d0ca      	beq.n	80125e6 <__sflush_r+0x1a>
 8012650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012654:	4299      	cmp	r1, r3
 8012656:	d002      	beq.n	801265e <__sflush_r+0x92>
 8012658:	4628      	mov	r0, r5
 801265a:	f000 fd97 	bl	801318c <_free_r>
 801265e:	2000      	movs	r0, #0
 8012660:	6360      	str	r0, [r4, #52]	; 0x34
 8012662:	e7c1      	b.n	80125e8 <__sflush_r+0x1c>
 8012664:	6a21      	ldr	r1, [r4, #32]
 8012666:	2301      	movs	r3, #1
 8012668:	4628      	mov	r0, r5
 801266a:	47b0      	blx	r6
 801266c:	1c41      	adds	r1, r0, #1
 801266e:	d1c7      	bne.n	8012600 <__sflush_r+0x34>
 8012670:	682b      	ldr	r3, [r5, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d0c4      	beq.n	8012600 <__sflush_r+0x34>
 8012676:	2b1d      	cmp	r3, #29
 8012678:	d001      	beq.n	801267e <__sflush_r+0xb2>
 801267a:	2b16      	cmp	r3, #22
 801267c:	d101      	bne.n	8012682 <__sflush_r+0xb6>
 801267e:	602f      	str	r7, [r5, #0]
 8012680:	e7b1      	b.n	80125e6 <__sflush_r+0x1a>
 8012682:	89a3      	ldrh	r3, [r4, #12]
 8012684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012688:	81a3      	strh	r3, [r4, #12]
 801268a:	e7ad      	b.n	80125e8 <__sflush_r+0x1c>
 801268c:	690f      	ldr	r7, [r1, #16]
 801268e:	2f00      	cmp	r7, #0
 8012690:	d0a9      	beq.n	80125e6 <__sflush_r+0x1a>
 8012692:	0793      	lsls	r3, r2, #30
 8012694:	680e      	ldr	r6, [r1, #0]
 8012696:	bf08      	it	eq
 8012698:	694b      	ldreq	r3, [r1, #20]
 801269a:	600f      	str	r7, [r1, #0]
 801269c:	bf18      	it	ne
 801269e:	2300      	movne	r3, #0
 80126a0:	eba6 0807 	sub.w	r8, r6, r7
 80126a4:	608b      	str	r3, [r1, #8]
 80126a6:	f1b8 0f00 	cmp.w	r8, #0
 80126aa:	dd9c      	ble.n	80125e6 <__sflush_r+0x1a>
 80126ac:	6a21      	ldr	r1, [r4, #32]
 80126ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80126b0:	4643      	mov	r3, r8
 80126b2:	463a      	mov	r2, r7
 80126b4:	4628      	mov	r0, r5
 80126b6:	47b0      	blx	r6
 80126b8:	2800      	cmp	r0, #0
 80126ba:	dc06      	bgt.n	80126ca <__sflush_r+0xfe>
 80126bc:	89a3      	ldrh	r3, [r4, #12]
 80126be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126c2:	81a3      	strh	r3, [r4, #12]
 80126c4:	f04f 30ff 	mov.w	r0, #4294967295
 80126c8:	e78e      	b.n	80125e8 <__sflush_r+0x1c>
 80126ca:	4407      	add	r7, r0
 80126cc:	eba8 0800 	sub.w	r8, r8, r0
 80126d0:	e7e9      	b.n	80126a6 <__sflush_r+0xda>
 80126d2:	bf00      	nop
 80126d4:	20400001 	.word	0x20400001

080126d8 <_fflush_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	690b      	ldr	r3, [r1, #16]
 80126dc:	4605      	mov	r5, r0
 80126de:	460c      	mov	r4, r1
 80126e0:	b913      	cbnz	r3, 80126e8 <_fflush_r+0x10>
 80126e2:	2500      	movs	r5, #0
 80126e4:	4628      	mov	r0, r5
 80126e6:	bd38      	pop	{r3, r4, r5, pc}
 80126e8:	b118      	cbz	r0, 80126f2 <_fflush_r+0x1a>
 80126ea:	6983      	ldr	r3, [r0, #24]
 80126ec:	b90b      	cbnz	r3, 80126f2 <_fflush_r+0x1a>
 80126ee:	f000 f887 	bl	8012800 <__sinit>
 80126f2:	4b14      	ldr	r3, [pc, #80]	; (8012744 <_fflush_r+0x6c>)
 80126f4:	429c      	cmp	r4, r3
 80126f6:	d11b      	bne.n	8012730 <_fflush_r+0x58>
 80126f8:	686c      	ldr	r4, [r5, #4]
 80126fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d0ef      	beq.n	80126e2 <_fflush_r+0xa>
 8012702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012704:	07d0      	lsls	r0, r2, #31
 8012706:	d404      	bmi.n	8012712 <_fflush_r+0x3a>
 8012708:	0599      	lsls	r1, r3, #22
 801270a:	d402      	bmi.n	8012712 <_fflush_r+0x3a>
 801270c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801270e:	f000 f91a 	bl	8012946 <__retarget_lock_acquire_recursive>
 8012712:	4628      	mov	r0, r5
 8012714:	4621      	mov	r1, r4
 8012716:	f7ff ff59 	bl	80125cc <__sflush_r>
 801271a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801271c:	07da      	lsls	r2, r3, #31
 801271e:	4605      	mov	r5, r0
 8012720:	d4e0      	bmi.n	80126e4 <_fflush_r+0xc>
 8012722:	89a3      	ldrh	r3, [r4, #12]
 8012724:	059b      	lsls	r3, r3, #22
 8012726:	d4dd      	bmi.n	80126e4 <_fflush_r+0xc>
 8012728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801272a:	f000 f90d 	bl	8012948 <__retarget_lock_release_recursive>
 801272e:	e7d9      	b.n	80126e4 <_fflush_r+0xc>
 8012730:	4b05      	ldr	r3, [pc, #20]	; (8012748 <_fflush_r+0x70>)
 8012732:	429c      	cmp	r4, r3
 8012734:	d101      	bne.n	801273a <_fflush_r+0x62>
 8012736:	68ac      	ldr	r4, [r5, #8]
 8012738:	e7df      	b.n	80126fa <_fflush_r+0x22>
 801273a:	4b04      	ldr	r3, [pc, #16]	; (801274c <_fflush_r+0x74>)
 801273c:	429c      	cmp	r4, r3
 801273e:	bf08      	it	eq
 8012740:	68ec      	ldreq	r4, [r5, #12]
 8012742:	e7da      	b.n	80126fa <_fflush_r+0x22>
 8012744:	0801e0d0 	.word	0x0801e0d0
 8012748:	0801e0f0 	.word	0x0801e0f0
 801274c:	0801e0b0 	.word	0x0801e0b0

08012750 <std>:
 8012750:	2300      	movs	r3, #0
 8012752:	b510      	push	{r4, lr}
 8012754:	4604      	mov	r4, r0
 8012756:	e9c0 3300 	strd	r3, r3, [r0]
 801275a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801275e:	6083      	str	r3, [r0, #8]
 8012760:	8181      	strh	r1, [r0, #12]
 8012762:	6643      	str	r3, [r0, #100]	; 0x64
 8012764:	81c2      	strh	r2, [r0, #14]
 8012766:	6183      	str	r3, [r0, #24]
 8012768:	4619      	mov	r1, r3
 801276a:	2208      	movs	r2, #8
 801276c:	305c      	adds	r0, #92	; 0x5c
 801276e:	f7fe f939 	bl	80109e4 <memset>
 8012772:	4b05      	ldr	r3, [pc, #20]	; (8012788 <std+0x38>)
 8012774:	6263      	str	r3, [r4, #36]	; 0x24
 8012776:	4b05      	ldr	r3, [pc, #20]	; (801278c <std+0x3c>)
 8012778:	62a3      	str	r3, [r4, #40]	; 0x28
 801277a:	4b05      	ldr	r3, [pc, #20]	; (8012790 <std+0x40>)
 801277c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801277e:	4b05      	ldr	r3, [pc, #20]	; (8012794 <std+0x44>)
 8012780:	6224      	str	r4, [r4, #32]
 8012782:	6323      	str	r3, [r4, #48]	; 0x30
 8012784:	bd10      	pop	{r4, pc}
 8012786:	bf00      	nop
 8012788:	08013709 	.word	0x08013709
 801278c:	0801372b 	.word	0x0801372b
 8012790:	08013763 	.word	0x08013763
 8012794:	08013787 	.word	0x08013787

08012798 <_cleanup_r>:
 8012798:	4901      	ldr	r1, [pc, #4]	; (80127a0 <_cleanup_r+0x8>)
 801279a:	f000 b8af 	b.w	80128fc <_fwalk_reent>
 801279e:	bf00      	nop
 80127a0:	080126d9 	.word	0x080126d9

080127a4 <__sfmoreglue>:
 80127a4:	b570      	push	{r4, r5, r6, lr}
 80127a6:	2268      	movs	r2, #104	; 0x68
 80127a8:	1e4d      	subs	r5, r1, #1
 80127aa:	4355      	muls	r5, r2
 80127ac:	460e      	mov	r6, r1
 80127ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80127b2:	f000 fd57 	bl	8013264 <_malloc_r>
 80127b6:	4604      	mov	r4, r0
 80127b8:	b140      	cbz	r0, 80127cc <__sfmoreglue+0x28>
 80127ba:	2100      	movs	r1, #0
 80127bc:	e9c0 1600 	strd	r1, r6, [r0]
 80127c0:	300c      	adds	r0, #12
 80127c2:	60a0      	str	r0, [r4, #8]
 80127c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80127c8:	f7fe f90c 	bl	80109e4 <memset>
 80127cc:	4620      	mov	r0, r4
 80127ce:	bd70      	pop	{r4, r5, r6, pc}

080127d0 <__sfp_lock_acquire>:
 80127d0:	4801      	ldr	r0, [pc, #4]	; (80127d8 <__sfp_lock_acquire+0x8>)
 80127d2:	f000 b8b8 	b.w	8012946 <__retarget_lock_acquire_recursive>
 80127d6:	bf00      	nop
 80127d8:	2400d5ed 	.word	0x2400d5ed

080127dc <__sfp_lock_release>:
 80127dc:	4801      	ldr	r0, [pc, #4]	; (80127e4 <__sfp_lock_release+0x8>)
 80127de:	f000 b8b3 	b.w	8012948 <__retarget_lock_release_recursive>
 80127e2:	bf00      	nop
 80127e4:	2400d5ed 	.word	0x2400d5ed

080127e8 <__sinit_lock_acquire>:
 80127e8:	4801      	ldr	r0, [pc, #4]	; (80127f0 <__sinit_lock_acquire+0x8>)
 80127ea:	f000 b8ac 	b.w	8012946 <__retarget_lock_acquire_recursive>
 80127ee:	bf00      	nop
 80127f0:	2400d5ee 	.word	0x2400d5ee

080127f4 <__sinit_lock_release>:
 80127f4:	4801      	ldr	r0, [pc, #4]	; (80127fc <__sinit_lock_release+0x8>)
 80127f6:	f000 b8a7 	b.w	8012948 <__retarget_lock_release_recursive>
 80127fa:	bf00      	nop
 80127fc:	2400d5ee 	.word	0x2400d5ee

08012800 <__sinit>:
 8012800:	b510      	push	{r4, lr}
 8012802:	4604      	mov	r4, r0
 8012804:	f7ff fff0 	bl	80127e8 <__sinit_lock_acquire>
 8012808:	69a3      	ldr	r3, [r4, #24]
 801280a:	b11b      	cbz	r3, 8012814 <__sinit+0x14>
 801280c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012810:	f7ff bff0 	b.w	80127f4 <__sinit_lock_release>
 8012814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012818:	6523      	str	r3, [r4, #80]	; 0x50
 801281a:	4b13      	ldr	r3, [pc, #76]	; (8012868 <__sinit+0x68>)
 801281c:	4a13      	ldr	r2, [pc, #76]	; (801286c <__sinit+0x6c>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	62a2      	str	r2, [r4, #40]	; 0x28
 8012822:	42a3      	cmp	r3, r4
 8012824:	bf04      	itt	eq
 8012826:	2301      	moveq	r3, #1
 8012828:	61a3      	streq	r3, [r4, #24]
 801282a:	4620      	mov	r0, r4
 801282c:	f000 f820 	bl	8012870 <__sfp>
 8012830:	6060      	str	r0, [r4, #4]
 8012832:	4620      	mov	r0, r4
 8012834:	f000 f81c 	bl	8012870 <__sfp>
 8012838:	60a0      	str	r0, [r4, #8]
 801283a:	4620      	mov	r0, r4
 801283c:	f000 f818 	bl	8012870 <__sfp>
 8012840:	2200      	movs	r2, #0
 8012842:	60e0      	str	r0, [r4, #12]
 8012844:	2104      	movs	r1, #4
 8012846:	6860      	ldr	r0, [r4, #4]
 8012848:	f7ff ff82 	bl	8012750 <std>
 801284c:	68a0      	ldr	r0, [r4, #8]
 801284e:	2201      	movs	r2, #1
 8012850:	2109      	movs	r1, #9
 8012852:	f7ff ff7d 	bl	8012750 <std>
 8012856:	68e0      	ldr	r0, [r4, #12]
 8012858:	2202      	movs	r2, #2
 801285a:	2112      	movs	r1, #18
 801285c:	f7ff ff78 	bl	8012750 <std>
 8012860:	2301      	movs	r3, #1
 8012862:	61a3      	str	r3, [r4, #24]
 8012864:	e7d2      	b.n	801280c <__sinit+0xc>
 8012866:	bf00      	nop
 8012868:	0801df1c 	.word	0x0801df1c
 801286c:	08012799 	.word	0x08012799

08012870 <__sfp>:
 8012870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012872:	4607      	mov	r7, r0
 8012874:	f7ff ffac 	bl	80127d0 <__sfp_lock_acquire>
 8012878:	4b1e      	ldr	r3, [pc, #120]	; (80128f4 <__sfp+0x84>)
 801287a:	681e      	ldr	r6, [r3, #0]
 801287c:	69b3      	ldr	r3, [r6, #24]
 801287e:	b913      	cbnz	r3, 8012886 <__sfp+0x16>
 8012880:	4630      	mov	r0, r6
 8012882:	f7ff ffbd 	bl	8012800 <__sinit>
 8012886:	3648      	adds	r6, #72	; 0x48
 8012888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801288c:	3b01      	subs	r3, #1
 801288e:	d503      	bpl.n	8012898 <__sfp+0x28>
 8012890:	6833      	ldr	r3, [r6, #0]
 8012892:	b30b      	cbz	r3, 80128d8 <__sfp+0x68>
 8012894:	6836      	ldr	r6, [r6, #0]
 8012896:	e7f7      	b.n	8012888 <__sfp+0x18>
 8012898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801289c:	b9d5      	cbnz	r5, 80128d4 <__sfp+0x64>
 801289e:	4b16      	ldr	r3, [pc, #88]	; (80128f8 <__sfp+0x88>)
 80128a0:	60e3      	str	r3, [r4, #12]
 80128a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128a6:	6665      	str	r5, [r4, #100]	; 0x64
 80128a8:	f000 f84c 	bl	8012944 <__retarget_lock_init_recursive>
 80128ac:	f7ff ff96 	bl	80127dc <__sfp_lock_release>
 80128b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80128b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80128b8:	6025      	str	r5, [r4, #0]
 80128ba:	61a5      	str	r5, [r4, #24]
 80128bc:	2208      	movs	r2, #8
 80128be:	4629      	mov	r1, r5
 80128c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80128c4:	f7fe f88e 	bl	80109e4 <memset>
 80128c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80128cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80128d0:	4620      	mov	r0, r4
 80128d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128d4:	3468      	adds	r4, #104	; 0x68
 80128d6:	e7d9      	b.n	801288c <__sfp+0x1c>
 80128d8:	2104      	movs	r1, #4
 80128da:	4638      	mov	r0, r7
 80128dc:	f7ff ff62 	bl	80127a4 <__sfmoreglue>
 80128e0:	4604      	mov	r4, r0
 80128e2:	6030      	str	r0, [r6, #0]
 80128e4:	2800      	cmp	r0, #0
 80128e6:	d1d5      	bne.n	8012894 <__sfp+0x24>
 80128e8:	f7ff ff78 	bl	80127dc <__sfp_lock_release>
 80128ec:	230c      	movs	r3, #12
 80128ee:	603b      	str	r3, [r7, #0]
 80128f0:	e7ee      	b.n	80128d0 <__sfp+0x60>
 80128f2:	bf00      	nop
 80128f4:	0801df1c 	.word	0x0801df1c
 80128f8:	ffff0001 	.word	0xffff0001

080128fc <_fwalk_reent>:
 80128fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012900:	4606      	mov	r6, r0
 8012902:	4688      	mov	r8, r1
 8012904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012908:	2700      	movs	r7, #0
 801290a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801290e:	f1b9 0901 	subs.w	r9, r9, #1
 8012912:	d505      	bpl.n	8012920 <_fwalk_reent+0x24>
 8012914:	6824      	ldr	r4, [r4, #0]
 8012916:	2c00      	cmp	r4, #0
 8012918:	d1f7      	bne.n	801290a <_fwalk_reent+0xe>
 801291a:	4638      	mov	r0, r7
 801291c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012920:	89ab      	ldrh	r3, [r5, #12]
 8012922:	2b01      	cmp	r3, #1
 8012924:	d907      	bls.n	8012936 <_fwalk_reent+0x3a>
 8012926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801292a:	3301      	adds	r3, #1
 801292c:	d003      	beq.n	8012936 <_fwalk_reent+0x3a>
 801292e:	4629      	mov	r1, r5
 8012930:	4630      	mov	r0, r6
 8012932:	47c0      	blx	r8
 8012934:	4307      	orrs	r7, r0
 8012936:	3568      	adds	r5, #104	; 0x68
 8012938:	e7e9      	b.n	801290e <_fwalk_reent+0x12>
	...

0801293c <_localeconv_r>:
 801293c:	4800      	ldr	r0, [pc, #0]	; (8012940 <_localeconv_r+0x4>)
 801293e:	4770      	bx	lr
 8012940:	24000568 	.word	0x24000568

08012944 <__retarget_lock_init_recursive>:
 8012944:	4770      	bx	lr

08012946 <__retarget_lock_acquire_recursive>:
 8012946:	4770      	bx	lr

08012948 <__retarget_lock_release_recursive>:
 8012948:	4770      	bx	lr

0801294a <__swhatbuf_r>:
 801294a:	b570      	push	{r4, r5, r6, lr}
 801294c:	460e      	mov	r6, r1
 801294e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012952:	2900      	cmp	r1, #0
 8012954:	b096      	sub	sp, #88	; 0x58
 8012956:	4614      	mov	r4, r2
 8012958:	461d      	mov	r5, r3
 801295a:	da08      	bge.n	801296e <__swhatbuf_r+0x24>
 801295c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012960:	2200      	movs	r2, #0
 8012962:	602a      	str	r2, [r5, #0]
 8012964:	061a      	lsls	r2, r3, #24
 8012966:	d410      	bmi.n	801298a <__swhatbuf_r+0x40>
 8012968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801296c:	e00e      	b.n	801298c <__swhatbuf_r+0x42>
 801296e:	466a      	mov	r2, sp
 8012970:	f000 ff30 	bl	80137d4 <_fstat_r>
 8012974:	2800      	cmp	r0, #0
 8012976:	dbf1      	blt.n	801295c <__swhatbuf_r+0x12>
 8012978:	9a01      	ldr	r2, [sp, #4]
 801297a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801297e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012982:	425a      	negs	r2, r3
 8012984:	415a      	adcs	r2, r3
 8012986:	602a      	str	r2, [r5, #0]
 8012988:	e7ee      	b.n	8012968 <__swhatbuf_r+0x1e>
 801298a:	2340      	movs	r3, #64	; 0x40
 801298c:	2000      	movs	r0, #0
 801298e:	6023      	str	r3, [r4, #0]
 8012990:	b016      	add	sp, #88	; 0x58
 8012992:	bd70      	pop	{r4, r5, r6, pc}

08012994 <__smakebuf_r>:
 8012994:	898b      	ldrh	r3, [r1, #12]
 8012996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012998:	079d      	lsls	r5, r3, #30
 801299a:	4606      	mov	r6, r0
 801299c:	460c      	mov	r4, r1
 801299e:	d507      	bpl.n	80129b0 <__smakebuf_r+0x1c>
 80129a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80129a4:	6023      	str	r3, [r4, #0]
 80129a6:	6123      	str	r3, [r4, #16]
 80129a8:	2301      	movs	r3, #1
 80129aa:	6163      	str	r3, [r4, #20]
 80129ac:	b002      	add	sp, #8
 80129ae:	bd70      	pop	{r4, r5, r6, pc}
 80129b0:	ab01      	add	r3, sp, #4
 80129b2:	466a      	mov	r2, sp
 80129b4:	f7ff ffc9 	bl	801294a <__swhatbuf_r>
 80129b8:	9900      	ldr	r1, [sp, #0]
 80129ba:	4605      	mov	r5, r0
 80129bc:	4630      	mov	r0, r6
 80129be:	f000 fc51 	bl	8013264 <_malloc_r>
 80129c2:	b948      	cbnz	r0, 80129d8 <__smakebuf_r+0x44>
 80129c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129c8:	059a      	lsls	r2, r3, #22
 80129ca:	d4ef      	bmi.n	80129ac <__smakebuf_r+0x18>
 80129cc:	f023 0303 	bic.w	r3, r3, #3
 80129d0:	f043 0302 	orr.w	r3, r3, #2
 80129d4:	81a3      	strh	r3, [r4, #12]
 80129d6:	e7e3      	b.n	80129a0 <__smakebuf_r+0xc>
 80129d8:	4b0d      	ldr	r3, [pc, #52]	; (8012a10 <__smakebuf_r+0x7c>)
 80129da:	62b3      	str	r3, [r6, #40]	; 0x28
 80129dc:	89a3      	ldrh	r3, [r4, #12]
 80129de:	6020      	str	r0, [r4, #0]
 80129e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129e4:	81a3      	strh	r3, [r4, #12]
 80129e6:	9b00      	ldr	r3, [sp, #0]
 80129e8:	6163      	str	r3, [r4, #20]
 80129ea:	9b01      	ldr	r3, [sp, #4]
 80129ec:	6120      	str	r0, [r4, #16]
 80129ee:	b15b      	cbz	r3, 8012a08 <__smakebuf_r+0x74>
 80129f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129f4:	4630      	mov	r0, r6
 80129f6:	f000 feff 	bl	80137f8 <_isatty_r>
 80129fa:	b128      	cbz	r0, 8012a08 <__smakebuf_r+0x74>
 80129fc:	89a3      	ldrh	r3, [r4, #12]
 80129fe:	f023 0303 	bic.w	r3, r3, #3
 8012a02:	f043 0301 	orr.w	r3, r3, #1
 8012a06:	81a3      	strh	r3, [r4, #12]
 8012a08:	89a0      	ldrh	r0, [r4, #12]
 8012a0a:	4305      	orrs	r5, r0
 8012a0c:	81a5      	strh	r5, [r4, #12]
 8012a0e:	e7cd      	b.n	80129ac <__smakebuf_r+0x18>
 8012a10:	08012799 	.word	0x08012799

08012a14 <malloc>:
 8012a14:	4b02      	ldr	r3, [pc, #8]	; (8012a20 <malloc+0xc>)
 8012a16:	4601      	mov	r1, r0
 8012a18:	6818      	ldr	r0, [r3, #0]
 8012a1a:	f000 bc23 	b.w	8013264 <_malloc_r>
 8012a1e:	bf00      	nop
 8012a20:	24000414 	.word	0x24000414

08012a24 <memmove>:
 8012a24:	4288      	cmp	r0, r1
 8012a26:	b510      	push	{r4, lr}
 8012a28:	eb01 0402 	add.w	r4, r1, r2
 8012a2c:	d902      	bls.n	8012a34 <memmove+0x10>
 8012a2e:	4284      	cmp	r4, r0
 8012a30:	4623      	mov	r3, r4
 8012a32:	d807      	bhi.n	8012a44 <memmove+0x20>
 8012a34:	1e43      	subs	r3, r0, #1
 8012a36:	42a1      	cmp	r1, r4
 8012a38:	d008      	beq.n	8012a4c <memmove+0x28>
 8012a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a42:	e7f8      	b.n	8012a36 <memmove+0x12>
 8012a44:	4402      	add	r2, r0
 8012a46:	4601      	mov	r1, r0
 8012a48:	428a      	cmp	r2, r1
 8012a4a:	d100      	bne.n	8012a4e <memmove+0x2a>
 8012a4c:	bd10      	pop	{r4, pc}
 8012a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a56:	e7f7      	b.n	8012a48 <memmove+0x24>

08012a58 <_Balloc>:
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	460d      	mov	r5, r1
 8012a60:	b976      	cbnz	r6, 8012a80 <_Balloc+0x28>
 8012a62:	2010      	movs	r0, #16
 8012a64:	f7ff ffd6 	bl	8012a14 <malloc>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8012a6c:	b920      	cbnz	r0, 8012a78 <_Balloc+0x20>
 8012a6e:	4b18      	ldr	r3, [pc, #96]	; (8012ad0 <_Balloc+0x78>)
 8012a70:	4818      	ldr	r0, [pc, #96]	; (8012ad4 <_Balloc+0x7c>)
 8012a72:	2166      	movs	r1, #102	; 0x66
 8012a74:	f7fd ff4a 	bl	801090c <__assert_func>
 8012a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a7c:	6006      	str	r6, [r0, #0]
 8012a7e:	60c6      	str	r6, [r0, #12]
 8012a80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a82:	68f3      	ldr	r3, [r6, #12]
 8012a84:	b183      	cbz	r3, 8012aa8 <_Balloc+0x50>
 8012a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a8e:	b9b8      	cbnz	r0, 8012ac0 <_Balloc+0x68>
 8012a90:	2101      	movs	r1, #1
 8012a92:	fa01 f605 	lsl.w	r6, r1, r5
 8012a96:	1d72      	adds	r2, r6, #5
 8012a98:	0092      	lsls	r2, r2, #2
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	f000 fb60 	bl	8013160 <_calloc_r>
 8012aa0:	b160      	cbz	r0, 8012abc <_Balloc+0x64>
 8012aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012aa6:	e00e      	b.n	8012ac6 <_Balloc+0x6e>
 8012aa8:	2221      	movs	r2, #33	; 0x21
 8012aaa:	2104      	movs	r1, #4
 8012aac:	4620      	mov	r0, r4
 8012aae:	f000 fb57 	bl	8013160 <_calloc_r>
 8012ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ab4:	60f0      	str	r0, [r6, #12]
 8012ab6:	68db      	ldr	r3, [r3, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d1e4      	bne.n	8012a86 <_Balloc+0x2e>
 8012abc:	2000      	movs	r0, #0
 8012abe:	bd70      	pop	{r4, r5, r6, pc}
 8012ac0:	6802      	ldr	r2, [r0, #0]
 8012ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012acc:	e7f7      	b.n	8012abe <_Balloc+0x66>
 8012ace:	bf00      	nop
 8012ad0:	0801df65 	.word	0x0801df65
 8012ad4:	0801e110 	.word	0x0801e110

08012ad8 <_Bfree>:
 8012ad8:	b570      	push	{r4, r5, r6, lr}
 8012ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012adc:	4605      	mov	r5, r0
 8012ade:	460c      	mov	r4, r1
 8012ae0:	b976      	cbnz	r6, 8012b00 <_Bfree+0x28>
 8012ae2:	2010      	movs	r0, #16
 8012ae4:	f7ff ff96 	bl	8012a14 <malloc>
 8012ae8:	4602      	mov	r2, r0
 8012aea:	6268      	str	r0, [r5, #36]	; 0x24
 8012aec:	b920      	cbnz	r0, 8012af8 <_Bfree+0x20>
 8012aee:	4b09      	ldr	r3, [pc, #36]	; (8012b14 <_Bfree+0x3c>)
 8012af0:	4809      	ldr	r0, [pc, #36]	; (8012b18 <_Bfree+0x40>)
 8012af2:	218a      	movs	r1, #138	; 0x8a
 8012af4:	f7fd ff0a 	bl	801090c <__assert_func>
 8012af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012afc:	6006      	str	r6, [r0, #0]
 8012afe:	60c6      	str	r6, [r0, #12]
 8012b00:	b13c      	cbz	r4, 8012b12 <_Bfree+0x3a>
 8012b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012b04:	6862      	ldr	r2, [r4, #4]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b0c:	6021      	str	r1, [r4, #0]
 8012b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012b12:	bd70      	pop	{r4, r5, r6, pc}
 8012b14:	0801df65 	.word	0x0801df65
 8012b18:	0801e110 	.word	0x0801e110

08012b1c <__multadd>:
 8012b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b20:	690d      	ldr	r5, [r1, #16]
 8012b22:	4607      	mov	r7, r0
 8012b24:	460c      	mov	r4, r1
 8012b26:	461e      	mov	r6, r3
 8012b28:	f101 0c14 	add.w	ip, r1, #20
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f8dc 3000 	ldr.w	r3, [ip]
 8012b32:	b299      	uxth	r1, r3
 8012b34:	fb02 6101 	mla	r1, r2, r1, r6
 8012b38:	0c1e      	lsrs	r6, r3, #16
 8012b3a:	0c0b      	lsrs	r3, r1, #16
 8012b3c:	fb02 3306 	mla	r3, r2, r6, r3
 8012b40:	b289      	uxth	r1, r1
 8012b42:	3001      	adds	r0, #1
 8012b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012b48:	4285      	cmp	r5, r0
 8012b4a:	f84c 1b04 	str.w	r1, [ip], #4
 8012b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012b52:	dcec      	bgt.n	8012b2e <__multadd+0x12>
 8012b54:	b30e      	cbz	r6, 8012b9a <__multadd+0x7e>
 8012b56:	68a3      	ldr	r3, [r4, #8]
 8012b58:	42ab      	cmp	r3, r5
 8012b5a:	dc19      	bgt.n	8012b90 <__multadd+0x74>
 8012b5c:	6861      	ldr	r1, [r4, #4]
 8012b5e:	4638      	mov	r0, r7
 8012b60:	3101      	adds	r1, #1
 8012b62:	f7ff ff79 	bl	8012a58 <_Balloc>
 8012b66:	4680      	mov	r8, r0
 8012b68:	b928      	cbnz	r0, 8012b76 <__multadd+0x5a>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ba0 <__multadd+0x84>)
 8012b6e:	480d      	ldr	r0, [pc, #52]	; (8012ba4 <__multadd+0x88>)
 8012b70:	21b5      	movs	r1, #181	; 0xb5
 8012b72:	f7fd fecb 	bl	801090c <__assert_func>
 8012b76:	6922      	ldr	r2, [r4, #16]
 8012b78:	3202      	adds	r2, #2
 8012b7a:	f104 010c 	add.w	r1, r4, #12
 8012b7e:	0092      	lsls	r2, r2, #2
 8012b80:	300c      	adds	r0, #12
 8012b82:	f7fd ff21 	bl	80109c8 <memcpy>
 8012b86:	4621      	mov	r1, r4
 8012b88:	4638      	mov	r0, r7
 8012b8a:	f7ff ffa5 	bl	8012ad8 <_Bfree>
 8012b8e:	4644      	mov	r4, r8
 8012b90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012b94:	3501      	adds	r5, #1
 8012b96:	615e      	str	r6, [r3, #20]
 8012b98:	6125      	str	r5, [r4, #16]
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba0:	0801e09c 	.word	0x0801e09c
 8012ba4:	0801e110 	.word	0x0801e110

08012ba8 <__hi0bits>:
 8012ba8:	0c03      	lsrs	r3, r0, #16
 8012baa:	041b      	lsls	r3, r3, #16
 8012bac:	b9d3      	cbnz	r3, 8012be4 <__hi0bits+0x3c>
 8012bae:	0400      	lsls	r0, r0, #16
 8012bb0:	2310      	movs	r3, #16
 8012bb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012bb6:	bf04      	itt	eq
 8012bb8:	0200      	lsleq	r0, r0, #8
 8012bba:	3308      	addeq	r3, #8
 8012bbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012bc0:	bf04      	itt	eq
 8012bc2:	0100      	lsleq	r0, r0, #4
 8012bc4:	3304      	addeq	r3, #4
 8012bc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012bca:	bf04      	itt	eq
 8012bcc:	0080      	lsleq	r0, r0, #2
 8012bce:	3302      	addeq	r3, #2
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	db05      	blt.n	8012be0 <__hi0bits+0x38>
 8012bd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012bd8:	f103 0301 	add.w	r3, r3, #1
 8012bdc:	bf08      	it	eq
 8012bde:	2320      	moveq	r3, #32
 8012be0:	4618      	mov	r0, r3
 8012be2:	4770      	bx	lr
 8012be4:	2300      	movs	r3, #0
 8012be6:	e7e4      	b.n	8012bb2 <__hi0bits+0xa>

08012be8 <__lo0bits>:
 8012be8:	6803      	ldr	r3, [r0, #0]
 8012bea:	f013 0207 	ands.w	r2, r3, #7
 8012bee:	4601      	mov	r1, r0
 8012bf0:	d00b      	beq.n	8012c0a <__lo0bits+0x22>
 8012bf2:	07da      	lsls	r2, r3, #31
 8012bf4:	d423      	bmi.n	8012c3e <__lo0bits+0x56>
 8012bf6:	0798      	lsls	r0, r3, #30
 8012bf8:	bf49      	itett	mi
 8012bfa:	085b      	lsrmi	r3, r3, #1
 8012bfc:	089b      	lsrpl	r3, r3, #2
 8012bfe:	2001      	movmi	r0, #1
 8012c00:	600b      	strmi	r3, [r1, #0]
 8012c02:	bf5c      	itt	pl
 8012c04:	600b      	strpl	r3, [r1, #0]
 8012c06:	2002      	movpl	r0, #2
 8012c08:	4770      	bx	lr
 8012c0a:	b298      	uxth	r0, r3
 8012c0c:	b9a8      	cbnz	r0, 8012c3a <__lo0bits+0x52>
 8012c0e:	0c1b      	lsrs	r3, r3, #16
 8012c10:	2010      	movs	r0, #16
 8012c12:	b2da      	uxtb	r2, r3
 8012c14:	b90a      	cbnz	r2, 8012c1a <__lo0bits+0x32>
 8012c16:	3008      	adds	r0, #8
 8012c18:	0a1b      	lsrs	r3, r3, #8
 8012c1a:	071a      	lsls	r2, r3, #28
 8012c1c:	bf04      	itt	eq
 8012c1e:	091b      	lsreq	r3, r3, #4
 8012c20:	3004      	addeq	r0, #4
 8012c22:	079a      	lsls	r2, r3, #30
 8012c24:	bf04      	itt	eq
 8012c26:	089b      	lsreq	r3, r3, #2
 8012c28:	3002      	addeq	r0, #2
 8012c2a:	07da      	lsls	r2, r3, #31
 8012c2c:	d403      	bmi.n	8012c36 <__lo0bits+0x4e>
 8012c2e:	085b      	lsrs	r3, r3, #1
 8012c30:	f100 0001 	add.w	r0, r0, #1
 8012c34:	d005      	beq.n	8012c42 <__lo0bits+0x5a>
 8012c36:	600b      	str	r3, [r1, #0]
 8012c38:	4770      	bx	lr
 8012c3a:	4610      	mov	r0, r2
 8012c3c:	e7e9      	b.n	8012c12 <__lo0bits+0x2a>
 8012c3e:	2000      	movs	r0, #0
 8012c40:	4770      	bx	lr
 8012c42:	2020      	movs	r0, #32
 8012c44:	4770      	bx	lr
	...

08012c48 <__i2b>:
 8012c48:	b510      	push	{r4, lr}
 8012c4a:	460c      	mov	r4, r1
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	f7ff ff03 	bl	8012a58 <_Balloc>
 8012c52:	4602      	mov	r2, r0
 8012c54:	b928      	cbnz	r0, 8012c62 <__i2b+0x1a>
 8012c56:	4b05      	ldr	r3, [pc, #20]	; (8012c6c <__i2b+0x24>)
 8012c58:	4805      	ldr	r0, [pc, #20]	; (8012c70 <__i2b+0x28>)
 8012c5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012c5e:	f7fd fe55 	bl	801090c <__assert_func>
 8012c62:	2301      	movs	r3, #1
 8012c64:	6144      	str	r4, [r0, #20]
 8012c66:	6103      	str	r3, [r0, #16]
 8012c68:	bd10      	pop	{r4, pc}
 8012c6a:	bf00      	nop
 8012c6c:	0801e09c 	.word	0x0801e09c
 8012c70:	0801e110 	.word	0x0801e110

08012c74 <__multiply>:
 8012c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c78:	4691      	mov	r9, r2
 8012c7a:	690a      	ldr	r2, [r1, #16]
 8012c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	bfb8      	it	lt
 8012c84:	460b      	movlt	r3, r1
 8012c86:	460c      	mov	r4, r1
 8012c88:	bfbc      	itt	lt
 8012c8a:	464c      	movlt	r4, r9
 8012c8c:	4699      	movlt	r9, r3
 8012c8e:	6927      	ldr	r7, [r4, #16]
 8012c90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012c94:	68a3      	ldr	r3, [r4, #8]
 8012c96:	6861      	ldr	r1, [r4, #4]
 8012c98:	eb07 060a 	add.w	r6, r7, sl
 8012c9c:	42b3      	cmp	r3, r6
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	bfb8      	it	lt
 8012ca2:	3101      	addlt	r1, #1
 8012ca4:	f7ff fed8 	bl	8012a58 <_Balloc>
 8012ca8:	b930      	cbnz	r0, 8012cb8 <__multiply+0x44>
 8012caa:	4602      	mov	r2, r0
 8012cac:	4b44      	ldr	r3, [pc, #272]	; (8012dc0 <__multiply+0x14c>)
 8012cae:	4845      	ldr	r0, [pc, #276]	; (8012dc4 <__multiply+0x150>)
 8012cb0:	f240 115d 	movw	r1, #349	; 0x15d
 8012cb4:	f7fd fe2a 	bl	801090c <__assert_func>
 8012cb8:	f100 0514 	add.w	r5, r0, #20
 8012cbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012cc0:	462b      	mov	r3, r5
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	4543      	cmp	r3, r8
 8012cc6:	d321      	bcc.n	8012d0c <__multiply+0x98>
 8012cc8:	f104 0314 	add.w	r3, r4, #20
 8012ccc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012cd0:	f109 0314 	add.w	r3, r9, #20
 8012cd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012cd8:	9202      	str	r2, [sp, #8]
 8012cda:	1b3a      	subs	r2, r7, r4
 8012cdc:	3a15      	subs	r2, #21
 8012cde:	f022 0203 	bic.w	r2, r2, #3
 8012ce2:	3204      	adds	r2, #4
 8012ce4:	f104 0115 	add.w	r1, r4, #21
 8012ce8:	428f      	cmp	r7, r1
 8012cea:	bf38      	it	cc
 8012cec:	2204      	movcc	r2, #4
 8012cee:	9201      	str	r2, [sp, #4]
 8012cf0:	9a02      	ldr	r2, [sp, #8]
 8012cf2:	9303      	str	r3, [sp, #12]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d80c      	bhi.n	8012d12 <__multiply+0x9e>
 8012cf8:	2e00      	cmp	r6, #0
 8012cfa:	dd03      	ble.n	8012d04 <__multiply+0x90>
 8012cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d05a      	beq.n	8012dba <__multiply+0x146>
 8012d04:	6106      	str	r6, [r0, #16]
 8012d06:	b005      	add	sp, #20
 8012d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0c:	f843 2b04 	str.w	r2, [r3], #4
 8012d10:	e7d8      	b.n	8012cc4 <__multiply+0x50>
 8012d12:	f8b3 a000 	ldrh.w	sl, [r3]
 8012d16:	f1ba 0f00 	cmp.w	sl, #0
 8012d1a:	d024      	beq.n	8012d66 <__multiply+0xf2>
 8012d1c:	f104 0e14 	add.w	lr, r4, #20
 8012d20:	46a9      	mov	r9, r5
 8012d22:	f04f 0c00 	mov.w	ip, #0
 8012d26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012d2a:	f8d9 1000 	ldr.w	r1, [r9]
 8012d2e:	fa1f fb82 	uxth.w	fp, r2
 8012d32:	b289      	uxth	r1, r1
 8012d34:	fb0a 110b 	mla	r1, sl, fp, r1
 8012d38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8012d40:	4461      	add	r1, ip
 8012d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d46:	fb0a c20b 	mla	r2, sl, fp, ip
 8012d4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012d4e:	b289      	uxth	r1, r1
 8012d50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012d54:	4577      	cmp	r7, lr
 8012d56:	f849 1b04 	str.w	r1, [r9], #4
 8012d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d5e:	d8e2      	bhi.n	8012d26 <__multiply+0xb2>
 8012d60:	9a01      	ldr	r2, [sp, #4]
 8012d62:	f845 c002 	str.w	ip, [r5, r2]
 8012d66:	9a03      	ldr	r2, [sp, #12]
 8012d68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	f1b9 0f00 	cmp.w	r9, #0
 8012d72:	d020      	beq.n	8012db6 <__multiply+0x142>
 8012d74:	6829      	ldr	r1, [r5, #0]
 8012d76:	f104 0c14 	add.w	ip, r4, #20
 8012d7a:	46ae      	mov	lr, r5
 8012d7c:	f04f 0a00 	mov.w	sl, #0
 8012d80:	f8bc b000 	ldrh.w	fp, [ip]
 8012d84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012d88:	fb09 220b 	mla	r2, r9, fp, r2
 8012d8c:	4492      	add	sl, r2
 8012d8e:	b289      	uxth	r1, r1
 8012d90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012d94:	f84e 1b04 	str.w	r1, [lr], #4
 8012d98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012d9c:	f8be 1000 	ldrh.w	r1, [lr]
 8012da0:	0c12      	lsrs	r2, r2, #16
 8012da2:	fb09 1102 	mla	r1, r9, r2, r1
 8012da6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012daa:	4567      	cmp	r7, ip
 8012dac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012db0:	d8e6      	bhi.n	8012d80 <__multiply+0x10c>
 8012db2:	9a01      	ldr	r2, [sp, #4]
 8012db4:	50a9      	str	r1, [r5, r2]
 8012db6:	3504      	adds	r5, #4
 8012db8:	e79a      	b.n	8012cf0 <__multiply+0x7c>
 8012dba:	3e01      	subs	r6, #1
 8012dbc:	e79c      	b.n	8012cf8 <__multiply+0x84>
 8012dbe:	bf00      	nop
 8012dc0:	0801e09c 	.word	0x0801e09c
 8012dc4:	0801e110 	.word	0x0801e110

08012dc8 <__pow5mult>:
 8012dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dcc:	4615      	mov	r5, r2
 8012dce:	f012 0203 	ands.w	r2, r2, #3
 8012dd2:	4606      	mov	r6, r0
 8012dd4:	460f      	mov	r7, r1
 8012dd6:	d007      	beq.n	8012de8 <__pow5mult+0x20>
 8012dd8:	4c25      	ldr	r4, [pc, #148]	; (8012e70 <__pow5mult+0xa8>)
 8012dda:	3a01      	subs	r2, #1
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012de2:	f7ff fe9b 	bl	8012b1c <__multadd>
 8012de6:	4607      	mov	r7, r0
 8012de8:	10ad      	asrs	r5, r5, #2
 8012dea:	d03d      	beq.n	8012e68 <__pow5mult+0xa0>
 8012dec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012dee:	b97c      	cbnz	r4, 8012e10 <__pow5mult+0x48>
 8012df0:	2010      	movs	r0, #16
 8012df2:	f7ff fe0f 	bl	8012a14 <malloc>
 8012df6:	4602      	mov	r2, r0
 8012df8:	6270      	str	r0, [r6, #36]	; 0x24
 8012dfa:	b928      	cbnz	r0, 8012e08 <__pow5mult+0x40>
 8012dfc:	4b1d      	ldr	r3, [pc, #116]	; (8012e74 <__pow5mult+0xac>)
 8012dfe:	481e      	ldr	r0, [pc, #120]	; (8012e78 <__pow5mult+0xb0>)
 8012e00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012e04:	f7fd fd82 	bl	801090c <__assert_func>
 8012e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e0c:	6004      	str	r4, [r0, #0]
 8012e0e:	60c4      	str	r4, [r0, #12]
 8012e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e18:	b94c      	cbnz	r4, 8012e2e <__pow5mult+0x66>
 8012e1a:	f240 2171 	movw	r1, #625	; 0x271
 8012e1e:	4630      	mov	r0, r6
 8012e20:	f7ff ff12 	bl	8012c48 <__i2b>
 8012e24:	2300      	movs	r3, #0
 8012e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	6003      	str	r3, [r0, #0]
 8012e2e:	f04f 0900 	mov.w	r9, #0
 8012e32:	07eb      	lsls	r3, r5, #31
 8012e34:	d50a      	bpl.n	8012e4c <__pow5mult+0x84>
 8012e36:	4639      	mov	r1, r7
 8012e38:	4622      	mov	r2, r4
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f7ff ff1a 	bl	8012c74 <__multiply>
 8012e40:	4639      	mov	r1, r7
 8012e42:	4680      	mov	r8, r0
 8012e44:	4630      	mov	r0, r6
 8012e46:	f7ff fe47 	bl	8012ad8 <_Bfree>
 8012e4a:	4647      	mov	r7, r8
 8012e4c:	106d      	asrs	r5, r5, #1
 8012e4e:	d00b      	beq.n	8012e68 <__pow5mult+0xa0>
 8012e50:	6820      	ldr	r0, [r4, #0]
 8012e52:	b938      	cbnz	r0, 8012e64 <__pow5mult+0x9c>
 8012e54:	4622      	mov	r2, r4
 8012e56:	4621      	mov	r1, r4
 8012e58:	4630      	mov	r0, r6
 8012e5a:	f7ff ff0b 	bl	8012c74 <__multiply>
 8012e5e:	6020      	str	r0, [r4, #0]
 8012e60:	f8c0 9000 	str.w	r9, [r0]
 8012e64:	4604      	mov	r4, r0
 8012e66:	e7e4      	b.n	8012e32 <__pow5mult+0x6a>
 8012e68:	4638      	mov	r0, r7
 8012e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e6e:	bf00      	nop
 8012e70:	0801e260 	.word	0x0801e260
 8012e74:	0801df65 	.word	0x0801df65
 8012e78:	0801e110 	.word	0x0801e110

08012e7c <__lshift>:
 8012e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e80:	460c      	mov	r4, r1
 8012e82:	6849      	ldr	r1, [r1, #4]
 8012e84:	6923      	ldr	r3, [r4, #16]
 8012e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012e8a:	68a3      	ldr	r3, [r4, #8]
 8012e8c:	4607      	mov	r7, r0
 8012e8e:	4691      	mov	r9, r2
 8012e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012e94:	f108 0601 	add.w	r6, r8, #1
 8012e98:	42b3      	cmp	r3, r6
 8012e9a:	db0b      	blt.n	8012eb4 <__lshift+0x38>
 8012e9c:	4638      	mov	r0, r7
 8012e9e:	f7ff fddb 	bl	8012a58 <_Balloc>
 8012ea2:	4605      	mov	r5, r0
 8012ea4:	b948      	cbnz	r0, 8012eba <__lshift+0x3e>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	4b2a      	ldr	r3, [pc, #168]	; (8012f54 <__lshift+0xd8>)
 8012eaa:	482b      	ldr	r0, [pc, #172]	; (8012f58 <__lshift+0xdc>)
 8012eac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012eb0:	f7fd fd2c 	bl	801090c <__assert_func>
 8012eb4:	3101      	adds	r1, #1
 8012eb6:	005b      	lsls	r3, r3, #1
 8012eb8:	e7ee      	b.n	8012e98 <__lshift+0x1c>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	f100 0114 	add.w	r1, r0, #20
 8012ec0:	f100 0210 	add.w	r2, r0, #16
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	4553      	cmp	r3, sl
 8012ec8:	db37      	blt.n	8012f3a <__lshift+0xbe>
 8012eca:	6920      	ldr	r0, [r4, #16]
 8012ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ed0:	f104 0314 	add.w	r3, r4, #20
 8012ed4:	f019 091f 	ands.w	r9, r9, #31
 8012ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012edc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012ee0:	d02f      	beq.n	8012f42 <__lshift+0xc6>
 8012ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8012ee6:	468a      	mov	sl, r1
 8012ee8:	f04f 0c00 	mov.w	ip, #0
 8012eec:	681a      	ldr	r2, [r3, #0]
 8012eee:	fa02 f209 	lsl.w	r2, r2, r9
 8012ef2:	ea42 020c 	orr.w	r2, r2, ip
 8012ef6:	f84a 2b04 	str.w	r2, [sl], #4
 8012efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012efe:	4298      	cmp	r0, r3
 8012f00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012f04:	d8f2      	bhi.n	8012eec <__lshift+0x70>
 8012f06:	1b03      	subs	r3, r0, r4
 8012f08:	3b15      	subs	r3, #21
 8012f0a:	f023 0303 	bic.w	r3, r3, #3
 8012f0e:	3304      	adds	r3, #4
 8012f10:	f104 0215 	add.w	r2, r4, #21
 8012f14:	4290      	cmp	r0, r2
 8012f16:	bf38      	it	cc
 8012f18:	2304      	movcc	r3, #4
 8012f1a:	f841 c003 	str.w	ip, [r1, r3]
 8012f1e:	f1bc 0f00 	cmp.w	ip, #0
 8012f22:	d001      	beq.n	8012f28 <__lshift+0xac>
 8012f24:	f108 0602 	add.w	r6, r8, #2
 8012f28:	3e01      	subs	r6, #1
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	612e      	str	r6, [r5, #16]
 8012f2e:	4621      	mov	r1, r4
 8012f30:	f7ff fdd2 	bl	8012ad8 <_Bfree>
 8012f34:	4628      	mov	r0, r5
 8012f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f3e:	3301      	adds	r3, #1
 8012f40:	e7c1      	b.n	8012ec6 <__lshift+0x4a>
 8012f42:	3904      	subs	r1, #4
 8012f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f4c:	4298      	cmp	r0, r3
 8012f4e:	d8f9      	bhi.n	8012f44 <__lshift+0xc8>
 8012f50:	e7ea      	b.n	8012f28 <__lshift+0xac>
 8012f52:	bf00      	nop
 8012f54:	0801e09c 	.word	0x0801e09c
 8012f58:	0801e110 	.word	0x0801e110

08012f5c <__mcmp>:
 8012f5c:	b530      	push	{r4, r5, lr}
 8012f5e:	6902      	ldr	r2, [r0, #16]
 8012f60:	690c      	ldr	r4, [r1, #16]
 8012f62:	1b12      	subs	r2, r2, r4
 8012f64:	d10e      	bne.n	8012f84 <__mcmp+0x28>
 8012f66:	f100 0314 	add.w	r3, r0, #20
 8012f6a:	3114      	adds	r1, #20
 8012f6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012f70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012f74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012f78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012f7c:	42a5      	cmp	r5, r4
 8012f7e:	d003      	beq.n	8012f88 <__mcmp+0x2c>
 8012f80:	d305      	bcc.n	8012f8e <__mcmp+0x32>
 8012f82:	2201      	movs	r2, #1
 8012f84:	4610      	mov	r0, r2
 8012f86:	bd30      	pop	{r4, r5, pc}
 8012f88:	4283      	cmp	r3, r0
 8012f8a:	d3f3      	bcc.n	8012f74 <__mcmp+0x18>
 8012f8c:	e7fa      	b.n	8012f84 <__mcmp+0x28>
 8012f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f92:	e7f7      	b.n	8012f84 <__mcmp+0x28>

08012f94 <__mdiff>:
 8012f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f98:	460c      	mov	r4, r1
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	4611      	mov	r1, r2
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	4690      	mov	r8, r2
 8012fa2:	f7ff ffdb 	bl	8012f5c <__mcmp>
 8012fa6:	1e05      	subs	r5, r0, #0
 8012fa8:	d110      	bne.n	8012fcc <__mdiff+0x38>
 8012faa:	4629      	mov	r1, r5
 8012fac:	4630      	mov	r0, r6
 8012fae:	f7ff fd53 	bl	8012a58 <_Balloc>
 8012fb2:	b930      	cbnz	r0, 8012fc2 <__mdiff+0x2e>
 8012fb4:	4b3a      	ldr	r3, [pc, #232]	; (80130a0 <__mdiff+0x10c>)
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	f240 2132 	movw	r1, #562	; 0x232
 8012fbc:	4839      	ldr	r0, [pc, #228]	; (80130a4 <__mdiff+0x110>)
 8012fbe:	f7fd fca5 	bl	801090c <__assert_func>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fcc:	bfa4      	itt	ge
 8012fce:	4643      	movge	r3, r8
 8012fd0:	46a0      	movge	r8, r4
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012fd8:	bfa6      	itte	ge
 8012fda:	461c      	movge	r4, r3
 8012fdc:	2500      	movge	r5, #0
 8012fde:	2501      	movlt	r5, #1
 8012fe0:	f7ff fd3a 	bl	8012a58 <_Balloc>
 8012fe4:	b920      	cbnz	r0, 8012ff0 <__mdiff+0x5c>
 8012fe6:	4b2e      	ldr	r3, [pc, #184]	; (80130a0 <__mdiff+0x10c>)
 8012fe8:	4602      	mov	r2, r0
 8012fea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012fee:	e7e5      	b.n	8012fbc <__mdiff+0x28>
 8012ff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012ff4:	6926      	ldr	r6, [r4, #16]
 8012ff6:	60c5      	str	r5, [r0, #12]
 8012ff8:	f104 0914 	add.w	r9, r4, #20
 8012ffc:	f108 0514 	add.w	r5, r8, #20
 8013000:	f100 0e14 	add.w	lr, r0, #20
 8013004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801300c:	f108 0210 	add.w	r2, r8, #16
 8013010:	46f2      	mov	sl, lr
 8013012:	2100      	movs	r1, #0
 8013014:	f859 3b04 	ldr.w	r3, [r9], #4
 8013018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801301c:	fa1f f883 	uxth.w	r8, r3
 8013020:	fa11 f18b 	uxtah	r1, r1, fp
 8013024:	0c1b      	lsrs	r3, r3, #16
 8013026:	eba1 0808 	sub.w	r8, r1, r8
 801302a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801302e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013032:	fa1f f888 	uxth.w	r8, r8
 8013036:	1419      	asrs	r1, r3, #16
 8013038:	454e      	cmp	r6, r9
 801303a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801303e:	f84a 3b04 	str.w	r3, [sl], #4
 8013042:	d8e7      	bhi.n	8013014 <__mdiff+0x80>
 8013044:	1b33      	subs	r3, r6, r4
 8013046:	3b15      	subs	r3, #21
 8013048:	f023 0303 	bic.w	r3, r3, #3
 801304c:	3304      	adds	r3, #4
 801304e:	3415      	adds	r4, #21
 8013050:	42a6      	cmp	r6, r4
 8013052:	bf38      	it	cc
 8013054:	2304      	movcc	r3, #4
 8013056:	441d      	add	r5, r3
 8013058:	4473      	add	r3, lr
 801305a:	469e      	mov	lr, r3
 801305c:	462e      	mov	r6, r5
 801305e:	4566      	cmp	r6, ip
 8013060:	d30e      	bcc.n	8013080 <__mdiff+0xec>
 8013062:	f10c 0203 	add.w	r2, ip, #3
 8013066:	1b52      	subs	r2, r2, r5
 8013068:	f022 0203 	bic.w	r2, r2, #3
 801306c:	3d03      	subs	r5, #3
 801306e:	45ac      	cmp	ip, r5
 8013070:	bf38      	it	cc
 8013072:	2200      	movcc	r2, #0
 8013074:	441a      	add	r2, r3
 8013076:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801307a:	b17b      	cbz	r3, 801309c <__mdiff+0x108>
 801307c:	6107      	str	r7, [r0, #16]
 801307e:	e7a3      	b.n	8012fc8 <__mdiff+0x34>
 8013080:	f856 8b04 	ldr.w	r8, [r6], #4
 8013084:	fa11 f288 	uxtah	r2, r1, r8
 8013088:	1414      	asrs	r4, r2, #16
 801308a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801308e:	b292      	uxth	r2, r2
 8013090:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013094:	f84e 2b04 	str.w	r2, [lr], #4
 8013098:	1421      	asrs	r1, r4, #16
 801309a:	e7e0      	b.n	801305e <__mdiff+0xca>
 801309c:	3f01      	subs	r7, #1
 801309e:	e7ea      	b.n	8013076 <__mdiff+0xe2>
 80130a0:	0801e09c 	.word	0x0801e09c
 80130a4:	0801e110 	.word	0x0801e110

080130a8 <__d2b>:
 80130a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80130ac:	4689      	mov	r9, r1
 80130ae:	2101      	movs	r1, #1
 80130b0:	ec57 6b10 	vmov	r6, r7, d0
 80130b4:	4690      	mov	r8, r2
 80130b6:	f7ff fccf 	bl	8012a58 <_Balloc>
 80130ba:	4604      	mov	r4, r0
 80130bc:	b930      	cbnz	r0, 80130cc <__d2b+0x24>
 80130be:	4602      	mov	r2, r0
 80130c0:	4b25      	ldr	r3, [pc, #148]	; (8013158 <__d2b+0xb0>)
 80130c2:	4826      	ldr	r0, [pc, #152]	; (801315c <__d2b+0xb4>)
 80130c4:	f240 310a 	movw	r1, #778	; 0x30a
 80130c8:	f7fd fc20 	bl	801090c <__assert_func>
 80130cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80130d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80130d4:	bb35      	cbnz	r5, 8013124 <__d2b+0x7c>
 80130d6:	2e00      	cmp	r6, #0
 80130d8:	9301      	str	r3, [sp, #4]
 80130da:	d028      	beq.n	801312e <__d2b+0x86>
 80130dc:	4668      	mov	r0, sp
 80130de:	9600      	str	r6, [sp, #0]
 80130e0:	f7ff fd82 	bl	8012be8 <__lo0bits>
 80130e4:	9900      	ldr	r1, [sp, #0]
 80130e6:	b300      	cbz	r0, 801312a <__d2b+0x82>
 80130e8:	9a01      	ldr	r2, [sp, #4]
 80130ea:	f1c0 0320 	rsb	r3, r0, #32
 80130ee:	fa02 f303 	lsl.w	r3, r2, r3
 80130f2:	430b      	orrs	r3, r1
 80130f4:	40c2      	lsrs	r2, r0
 80130f6:	6163      	str	r3, [r4, #20]
 80130f8:	9201      	str	r2, [sp, #4]
 80130fa:	9b01      	ldr	r3, [sp, #4]
 80130fc:	61a3      	str	r3, [r4, #24]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	bf14      	ite	ne
 8013102:	2202      	movne	r2, #2
 8013104:	2201      	moveq	r2, #1
 8013106:	6122      	str	r2, [r4, #16]
 8013108:	b1d5      	cbz	r5, 8013140 <__d2b+0x98>
 801310a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801310e:	4405      	add	r5, r0
 8013110:	f8c9 5000 	str.w	r5, [r9]
 8013114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013118:	f8c8 0000 	str.w	r0, [r8]
 801311c:	4620      	mov	r0, r4
 801311e:	b003      	add	sp, #12
 8013120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013128:	e7d5      	b.n	80130d6 <__d2b+0x2e>
 801312a:	6161      	str	r1, [r4, #20]
 801312c:	e7e5      	b.n	80130fa <__d2b+0x52>
 801312e:	a801      	add	r0, sp, #4
 8013130:	f7ff fd5a 	bl	8012be8 <__lo0bits>
 8013134:	9b01      	ldr	r3, [sp, #4]
 8013136:	6163      	str	r3, [r4, #20]
 8013138:	2201      	movs	r2, #1
 801313a:	6122      	str	r2, [r4, #16]
 801313c:	3020      	adds	r0, #32
 801313e:	e7e3      	b.n	8013108 <__d2b+0x60>
 8013140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013148:	f8c9 0000 	str.w	r0, [r9]
 801314c:	6918      	ldr	r0, [r3, #16]
 801314e:	f7ff fd2b 	bl	8012ba8 <__hi0bits>
 8013152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013156:	e7df      	b.n	8013118 <__d2b+0x70>
 8013158:	0801e09c 	.word	0x0801e09c
 801315c:	0801e110 	.word	0x0801e110

08013160 <_calloc_r>:
 8013160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013162:	fba1 2402 	umull	r2, r4, r1, r2
 8013166:	b94c      	cbnz	r4, 801317c <_calloc_r+0x1c>
 8013168:	4611      	mov	r1, r2
 801316a:	9201      	str	r2, [sp, #4]
 801316c:	f000 f87a 	bl	8013264 <_malloc_r>
 8013170:	9a01      	ldr	r2, [sp, #4]
 8013172:	4605      	mov	r5, r0
 8013174:	b930      	cbnz	r0, 8013184 <_calloc_r+0x24>
 8013176:	4628      	mov	r0, r5
 8013178:	b003      	add	sp, #12
 801317a:	bd30      	pop	{r4, r5, pc}
 801317c:	220c      	movs	r2, #12
 801317e:	6002      	str	r2, [r0, #0]
 8013180:	2500      	movs	r5, #0
 8013182:	e7f8      	b.n	8013176 <_calloc_r+0x16>
 8013184:	4621      	mov	r1, r4
 8013186:	f7fd fc2d 	bl	80109e4 <memset>
 801318a:	e7f4      	b.n	8013176 <_calloc_r+0x16>

0801318c <_free_r>:
 801318c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801318e:	2900      	cmp	r1, #0
 8013190:	d044      	beq.n	801321c <_free_r+0x90>
 8013192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013196:	9001      	str	r0, [sp, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	f1a1 0404 	sub.w	r4, r1, #4
 801319e:	bfb8      	it	lt
 80131a0:	18e4      	addlt	r4, r4, r3
 80131a2:	f000 fb5d 	bl	8013860 <__malloc_lock>
 80131a6:	4a1e      	ldr	r2, [pc, #120]	; (8013220 <_free_r+0x94>)
 80131a8:	9801      	ldr	r0, [sp, #4]
 80131aa:	6813      	ldr	r3, [r2, #0]
 80131ac:	b933      	cbnz	r3, 80131bc <_free_r+0x30>
 80131ae:	6063      	str	r3, [r4, #4]
 80131b0:	6014      	str	r4, [r2, #0]
 80131b2:	b003      	add	sp, #12
 80131b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131b8:	f000 bb58 	b.w	801386c <__malloc_unlock>
 80131bc:	42a3      	cmp	r3, r4
 80131be:	d908      	bls.n	80131d2 <_free_r+0x46>
 80131c0:	6825      	ldr	r5, [r4, #0]
 80131c2:	1961      	adds	r1, r4, r5
 80131c4:	428b      	cmp	r3, r1
 80131c6:	bf01      	itttt	eq
 80131c8:	6819      	ldreq	r1, [r3, #0]
 80131ca:	685b      	ldreq	r3, [r3, #4]
 80131cc:	1949      	addeq	r1, r1, r5
 80131ce:	6021      	streq	r1, [r4, #0]
 80131d0:	e7ed      	b.n	80131ae <_free_r+0x22>
 80131d2:	461a      	mov	r2, r3
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	b10b      	cbz	r3, 80131dc <_free_r+0x50>
 80131d8:	42a3      	cmp	r3, r4
 80131da:	d9fa      	bls.n	80131d2 <_free_r+0x46>
 80131dc:	6811      	ldr	r1, [r2, #0]
 80131de:	1855      	adds	r5, r2, r1
 80131e0:	42a5      	cmp	r5, r4
 80131e2:	d10b      	bne.n	80131fc <_free_r+0x70>
 80131e4:	6824      	ldr	r4, [r4, #0]
 80131e6:	4421      	add	r1, r4
 80131e8:	1854      	adds	r4, r2, r1
 80131ea:	42a3      	cmp	r3, r4
 80131ec:	6011      	str	r1, [r2, #0]
 80131ee:	d1e0      	bne.n	80131b2 <_free_r+0x26>
 80131f0:	681c      	ldr	r4, [r3, #0]
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	6053      	str	r3, [r2, #4]
 80131f6:	4421      	add	r1, r4
 80131f8:	6011      	str	r1, [r2, #0]
 80131fa:	e7da      	b.n	80131b2 <_free_r+0x26>
 80131fc:	d902      	bls.n	8013204 <_free_r+0x78>
 80131fe:	230c      	movs	r3, #12
 8013200:	6003      	str	r3, [r0, #0]
 8013202:	e7d6      	b.n	80131b2 <_free_r+0x26>
 8013204:	6825      	ldr	r5, [r4, #0]
 8013206:	1961      	adds	r1, r4, r5
 8013208:	428b      	cmp	r3, r1
 801320a:	bf04      	itt	eq
 801320c:	6819      	ldreq	r1, [r3, #0]
 801320e:	685b      	ldreq	r3, [r3, #4]
 8013210:	6063      	str	r3, [r4, #4]
 8013212:	bf04      	itt	eq
 8013214:	1949      	addeq	r1, r1, r5
 8013216:	6021      	streq	r1, [r4, #0]
 8013218:	6054      	str	r4, [r2, #4]
 801321a:	e7ca      	b.n	80131b2 <_free_r+0x26>
 801321c:	b003      	add	sp, #12
 801321e:	bd30      	pop	{r4, r5, pc}
 8013220:	2400d5f0 	.word	0x2400d5f0

08013224 <sbrk_aligned>:
 8013224:	b570      	push	{r4, r5, r6, lr}
 8013226:	4e0e      	ldr	r6, [pc, #56]	; (8013260 <sbrk_aligned+0x3c>)
 8013228:	460c      	mov	r4, r1
 801322a:	6831      	ldr	r1, [r6, #0]
 801322c:	4605      	mov	r5, r0
 801322e:	b911      	cbnz	r1, 8013236 <sbrk_aligned+0x12>
 8013230:	f000 fa16 	bl	8013660 <_sbrk_r>
 8013234:	6030      	str	r0, [r6, #0]
 8013236:	4621      	mov	r1, r4
 8013238:	4628      	mov	r0, r5
 801323a:	f000 fa11 	bl	8013660 <_sbrk_r>
 801323e:	1c43      	adds	r3, r0, #1
 8013240:	d00a      	beq.n	8013258 <sbrk_aligned+0x34>
 8013242:	1cc4      	adds	r4, r0, #3
 8013244:	f024 0403 	bic.w	r4, r4, #3
 8013248:	42a0      	cmp	r0, r4
 801324a:	d007      	beq.n	801325c <sbrk_aligned+0x38>
 801324c:	1a21      	subs	r1, r4, r0
 801324e:	4628      	mov	r0, r5
 8013250:	f000 fa06 	bl	8013660 <_sbrk_r>
 8013254:	3001      	adds	r0, #1
 8013256:	d101      	bne.n	801325c <sbrk_aligned+0x38>
 8013258:	f04f 34ff 	mov.w	r4, #4294967295
 801325c:	4620      	mov	r0, r4
 801325e:	bd70      	pop	{r4, r5, r6, pc}
 8013260:	2400d5f4 	.word	0x2400d5f4

08013264 <_malloc_r>:
 8013264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013268:	1ccd      	adds	r5, r1, #3
 801326a:	f025 0503 	bic.w	r5, r5, #3
 801326e:	3508      	adds	r5, #8
 8013270:	2d0c      	cmp	r5, #12
 8013272:	bf38      	it	cc
 8013274:	250c      	movcc	r5, #12
 8013276:	2d00      	cmp	r5, #0
 8013278:	4607      	mov	r7, r0
 801327a:	db01      	blt.n	8013280 <_malloc_r+0x1c>
 801327c:	42a9      	cmp	r1, r5
 801327e:	d905      	bls.n	801328c <_malloc_r+0x28>
 8013280:	230c      	movs	r3, #12
 8013282:	603b      	str	r3, [r7, #0]
 8013284:	2600      	movs	r6, #0
 8013286:	4630      	mov	r0, r6
 8013288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801328c:	4e2e      	ldr	r6, [pc, #184]	; (8013348 <_malloc_r+0xe4>)
 801328e:	f000 fae7 	bl	8013860 <__malloc_lock>
 8013292:	6833      	ldr	r3, [r6, #0]
 8013294:	461c      	mov	r4, r3
 8013296:	bb34      	cbnz	r4, 80132e6 <_malloc_r+0x82>
 8013298:	4629      	mov	r1, r5
 801329a:	4638      	mov	r0, r7
 801329c:	f7ff ffc2 	bl	8013224 <sbrk_aligned>
 80132a0:	1c43      	adds	r3, r0, #1
 80132a2:	4604      	mov	r4, r0
 80132a4:	d14d      	bne.n	8013342 <_malloc_r+0xde>
 80132a6:	6834      	ldr	r4, [r6, #0]
 80132a8:	4626      	mov	r6, r4
 80132aa:	2e00      	cmp	r6, #0
 80132ac:	d140      	bne.n	8013330 <_malloc_r+0xcc>
 80132ae:	6823      	ldr	r3, [r4, #0]
 80132b0:	4631      	mov	r1, r6
 80132b2:	4638      	mov	r0, r7
 80132b4:	eb04 0803 	add.w	r8, r4, r3
 80132b8:	f000 f9d2 	bl	8013660 <_sbrk_r>
 80132bc:	4580      	cmp	r8, r0
 80132be:	d13a      	bne.n	8013336 <_malloc_r+0xd2>
 80132c0:	6821      	ldr	r1, [r4, #0]
 80132c2:	3503      	adds	r5, #3
 80132c4:	1a6d      	subs	r5, r5, r1
 80132c6:	f025 0503 	bic.w	r5, r5, #3
 80132ca:	3508      	adds	r5, #8
 80132cc:	2d0c      	cmp	r5, #12
 80132ce:	bf38      	it	cc
 80132d0:	250c      	movcc	r5, #12
 80132d2:	4629      	mov	r1, r5
 80132d4:	4638      	mov	r0, r7
 80132d6:	f7ff ffa5 	bl	8013224 <sbrk_aligned>
 80132da:	3001      	adds	r0, #1
 80132dc:	d02b      	beq.n	8013336 <_malloc_r+0xd2>
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	442b      	add	r3, r5
 80132e2:	6023      	str	r3, [r4, #0]
 80132e4:	e00e      	b.n	8013304 <_malloc_r+0xa0>
 80132e6:	6822      	ldr	r2, [r4, #0]
 80132e8:	1b52      	subs	r2, r2, r5
 80132ea:	d41e      	bmi.n	801332a <_malloc_r+0xc6>
 80132ec:	2a0b      	cmp	r2, #11
 80132ee:	d916      	bls.n	801331e <_malloc_r+0xba>
 80132f0:	1961      	adds	r1, r4, r5
 80132f2:	42a3      	cmp	r3, r4
 80132f4:	6025      	str	r5, [r4, #0]
 80132f6:	bf18      	it	ne
 80132f8:	6059      	strne	r1, [r3, #4]
 80132fa:	6863      	ldr	r3, [r4, #4]
 80132fc:	bf08      	it	eq
 80132fe:	6031      	streq	r1, [r6, #0]
 8013300:	5162      	str	r2, [r4, r5]
 8013302:	604b      	str	r3, [r1, #4]
 8013304:	4638      	mov	r0, r7
 8013306:	f104 060b 	add.w	r6, r4, #11
 801330a:	f000 faaf 	bl	801386c <__malloc_unlock>
 801330e:	f026 0607 	bic.w	r6, r6, #7
 8013312:	1d23      	adds	r3, r4, #4
 8013314:	1af2      	subs	r2, r6, r3
 8013316:	d0b6      	beq.n	8013286 <_malloc_r+0x22>
 8013318:	1b9b      	subs	r3, r3, r6
 801331a:	50a3      	str	r3, [r4, r2]
 801331c:	e7b3      	b.n	8013286 <_malloc_r+0x22>
 801331e:	6862      	ldr	r2, [r4, #4]
 8013320:	42a3      	cmp	r3, r4
 8013322:	bf0c      	ite	eq
 8013324:	6032      	streq	r2, [r6, #0]
 8013326:	605a      	strne	r2, [r3, #4]
 8013328:	e7ec      	b.n	8013304 <_malloc_r+0xa0>
 801332a:	4623      	mov	r3, r4
 801332c:	6864      	ldr	r4, [r4, #4]
 801332e:	e7b2      	b.n	8013296 <_malloc_r+0x32>
 8013330:	4634      	mov	r4, r6
 8013332:	6876      	ldr	r6, [r6, #4]
 8013334:	e7b9      	b.n	80132aa <_malloc_r+0x46>
 8013336:	230c      	movs	r3, #12
 8013338:	603b      	str	r3, [r7, #0]
 801333a:	4638      	mov	r0, r7
 801333c:	f000 fa96 	bl	801386c <__malloc_unlock>
 8013340:	e7a1      	b.n	8013286 <_malloc_r+0x22>
 8013342:	6025      	str	r5, [r4, #0]
 8013344:	e7de      	b.n	8013304 <_malloc_r+0xa0>
 8013346:	bf00      	nop
 8013348:	2400d5f0 	.word	0x2400d5f0

0801334c <_realloc_r>:
 801334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013350:	4680      	mov	r8, r0
 8013352:	4614      	mov	r4, r2
 8013354:	460e      	mov	r6, r1
 8013356:	b921      	cbnz	r1, 8013362 <_realloc_r+0x16>
 8013358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801335c:	4611      	mov	r1, r2
 801335e:	f7ff bf81 	b.w	8013264 <_malloc_r>
 8013362:	b92a      	cbnz	r2, 8013370 <_realloc_r+0x24>
 8013364:	f7ff ff12 	bl	801318c <_free_r>
 8013368:	4625      	mov	r5, r4
 801336a:	4628      	mov	r0, r5
 801336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013370:	f000 fa82 	bl	8013878 <_malloc_usable_size_r>
 8013374:	4284      	cmp	r4, r0
 8013376:	4607      	mov	r7, r0
 8013378:	d802      	bhi.n	8013380 <_realloc_r+0x34>
 801337a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801337e:	d812      	bhi.n	80133a6 <_realloc_r+0x5a>
 8013380:	4621      	mov	r1, r4
 8013382:	4640      	mov	r0, r8
 8013384:	f7ff ff6e 	bl	8013264 <_malloc_r>
 8013388:	4605      	mov	r5, r0
 801338a:	2800      	cmp	r0, #0
 801338c:	d0ed      	beq.n	801336a <_realloc_r+0x1e>
 801338e:	42bc      	cmp	r4, r7
 8013390:	4622      	mov	r2, r4
 8013392:	4631      	mov	r1, r6
 8013394:	bf28      	it	cs
 8013396:	463a      	movcs	r2, r7
 8013398:	f7fd fb16 	bl	80109c8 <memcpy>
 801339c:	4631      	mov	r1, r6
 801339e:	4640      	mov	r0, r8
 80133a0:	f7ff fef4 	bl	801318c <_free_r>
 80133a4:	e7e1      	b.n	801336a <_realloc_r+0x1e>
 80133a6:	4635      	mov	r5, r6
 80133a8:	e7df      	b.n	801336a <_realloc_r+0x1e>

080133aa <__ssputs_r>:
 80133aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133ae:	688e      	ldr	r6, [r1, #8]
 80133b0:	429e      	cmp	r6, r3
 80133b2:	4682      	mov	sl, r0
 80133b4:	460c      	mov	r4, r1
 80133b6:	4690      	mov	r8, r2
 80133b8:	461f      	mov	r7, r3
 80133ba:	d838      	bhi.n	801342e <__ssputs_r+0x84>
 80133bc:	898a      	ldrh	r2, [r1, #12]
 80133be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80133c2:	d032      	beq.n	801342a <__ssputs_r+0x80>
 80133c4:	6825      	ldr	r5, [r4, #0]
 80133c6:	6909      	ldr	r1, [r1, #16]
 80133c8:	eba5 0901 	sub.w	r9, r5, r1
 80133cc:	6965      	ldr	r5, [r4, #20]
 80133ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80133d6:	3301      	adds	r3, #1
 80133d8:	444b      	add	r3, r9
 80133da:	106d      	asrs	r5, r5, #1
 80133dc:	429d      	cmp	r5, r3
 80133de:	bf38      	it	cc
 80133e0:	461d      	movcc	r5, r3
 80133e2:	0553      	lsls	r3, r2, #21
 80133e4:	d531      	bpl.n	801344a <__ssputs_r+0xa0>
 80133e6:	4629      	mov	r1, r5
 80133e8:	f7ff ff3c 	bl	8013264 <_malloc_r>
 80133ec:	4606      	mov	r6, r0
 80133ee:	b950      	cbnz	r0, 8013406 <__ssputs_r+0x5c>
 80133f0:	230c      	movs	r3, #12
 80133f2:	f8ca 3000 	str.w	r3, [sl]
 80133f6:	89a3      	ldrh	r3, [r4, #12]
 80133f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133fc:	81a3      	strh	r3, [r4, #12]
 80133fe:	f04f 30ff 	mov.w	r0, #4294967295
 8013402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013406:	6921      	ldr	r1, [r4, #16]
 8013408:	464a      	mov	r2, r9
 801340a:	f7fd fadd 	bl	80109c8 <memcpy>
 801340e:	89a3      	ldrh	r3, [r4, #12]
 8013410:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013418:	81a3      	strh	r3, [r4, #12]
 801341a:	6126      	str	r6, [r4, #16]
 801341c:	6165      	str	r5, [r4, #20]
 801341e:	444e      	add	r6, r9
 8013420:	eba5 0509 	sub.w	r5, r5, r9
 8013424:	6026      	str	r6, [r4, #0]
 8013426:	60a5      	str	r5, [r4, #8]
 8013428:	463e      	mov	r6, r7
 801342a:	42be      	cmp	r6, r7
 801342c:	d900      	bls.n	8013430 <__ssputs_r+0x86>
 801342e:	463e      	mov	r6, r7
 8013430:	6820      	ldr	r0, [r4, #0]
 8013432:	4632      	mov	r2, r6
 8013434:	4641      	mov	r1, r8
 8013436:	f7ff faf5 	bl	8012a24 <memmove>
 801343a:	68a3      	ldr	r3, [r4, #8]
 801343c:	1b9b      	subs	r3, r3, r6
 801343e:	60a3      	str	r3, [r4, #8]
 8013440:	6823      	ldr	r3, [r4, #0]
 8013442:	4433      	add	r3, r6
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	2000      	movs	r0, #0
 8013448:	e7db      	b.n	8013402 <__ssputs_r+0x58>
 801344a:	462a      	mov	r2, r5
 801344c:	f7ff ff7e 	bl	801334c <_realloc_r>
 8013450:	4606      	mov	r6, r0
 8013452:	2800      	cmp	r0, #0
 8013454:	d1e1      	bne.n	801341a <__ssputs_r+0x70>
 8013456:	6921      	ldr	r1, [r4, #16]
 8013458:	4650      	mov	r0, sl
 801345a:	f7ff fe97 	bl	801318c <_free_r>
 801345e:	e7c7      	b.n	80133f0 <__ssputs_r+0x46>

08013460 <_svfiprintf_r>:
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	4698      	mov	r8, r3
 8013466:	898b      	ldrh	r3, [r1, #12]
 8013468:	061b      	lsls	r3, r3, #24
 801346a:	b09d      	sub	sp, #116	; 0x74
 801346c:	4607      	mov	r7, r0
 801346e:	460d      	mov	r5, r1
 8013470:	4614      	mov	r4, r2
 8013472:	d50e      	bpl.n	8013492 <_svfiprintf_r+0x32>
 8013474:	690b      	ldr	r3, [r1, #16]
 8013476:	b963      	cbnz	r3, 8013492 <_svfiprintf_r+0x32>
 8013478:	2140      	movs	r1, #64	; 0x40
 801347a:	f7ff fef3 	bl	8013264 <_malloc_r>
 801347e:	6028      	str	r0, [r5, #0]
 8013480:	6128      	str	r0, [r5, #16]
 8013482:	b920      	cbnz	r0, 801348e <_svfiprintf_r+0x2e>
 8013484:	230c      	movs	r3, #12
 8013486:	603b      	str	r3, [r7, #0]
 8013488:	f04f 30ff 	mov.w	r0, #4294967295
 801348c:	e0d1      	b.n	8013632 <_svfiprintf_r+0x1d2>
 801348e:	2340      	movs	r3, #64	; 0x40
 8013490:	616b      	str	r3, [r5, #20]
 8013492:	2300      	movs	r3, #0
 8013494:	9309      	str	r3, [sp, #36]	; 0x24
 8013496:	2320      	movs	r3, #32
 8013498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801349c:	f8cd 800c 	str.w	r8, [sp, #12]
 80134a0:	2330      	movs	r3, #48	; 0x30
 80134a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801364c <_svfiprintf_r+0x1ec>
 80134a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134aa:	f04f 0901 	mov.w	r9, #1
 80134ae:	4623      	mov	r3, r4
 80134b0:	469a      	mov	sl, r3
 80134b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134b6:	b10a      	cbz	r2, 80134bc <_svfiprintf_r+0x5c>
 80134b8:	2a25      	cmp	r2, #37	; 0x25
 80134ba:	d1f9      	bne.n	80134b0 <_svfiprintf_r+0x50>
 80134bc:	ebba 0b04 	subs.w	fp, sl, r4
 80134c0:	d00b      	beq.n	80134da <_svfiprintf_r+0x7a>
 80134c2:	465b      	mov	r3, fp
 80134c4:	4622      	mov	r2, r4
 80134c6:	4629      	mov	r1, r5
 80134c8:	4638      	mov	r0, r7
 80134ca:	f7ff ff6e 	bl	80133aa <__ssputs_r>
 80134ce:	3001      	adds	r0, #1
 80134d0:	f000 80aa 	beq.w	8013628 <_svfiprintf_r+0x1c8>
 80134d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134d6:	445a      	add	r2, fp
 80134d8:	9209      	str	r2, [sp, #36]	; 0x24
 80134da:	f89a 3000 	ldrb.w	r3, [sl]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 80a2 	beq.w	8013628 <_svfiprintf_r+0x1c8>
 80134e4:	2300      	movs	r3, #0
 80134e6:	f04f 32ff 	mov.w	r2, #4294967295
 80134ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134ee:	f10a 0a01 	add.w	sl, sl, #1
 80134f2:	9304      	str	r3, [sp, #16]
 80134f4:	9307      	str	r3, [sp, #28]
 80134f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134fa:	931a      	str	r3, [sp, #104]	; 0x68
 80134fc:	4654      	mov	r4, sl
 80134fe:	2205      	movs	r2, #5
 8013500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013504:	4851      	ldr	r0, [pc, #324]	; (801364c <_svfiprintf_r+0x1ec>)
 8013506:	f7ec ff53 	bl	80003b0 <memchr>
 801350a:	9a04      	ldr	r2, [sp, #16]
 801350c:	b9d8      	cbnz	r0, 8013546 <_svfiprintf_r+0xe6>
 801350e:	06d0      	lsls	r0, r2, #27
 8013510:	bf44      	itt	mi
 8013512:	2320      	movmi	r3, #32
 8013514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013518:	0711      	lsls	r1, r2, #28
 801351a:	bf44      	itt	mi
 801351c:	232b      	movmi	r3, #43	; 0x2b
 801351e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013522:	f89a 3000 	ldrb.w	r3, [sl]
 8013526:	2b2a      	cmp	r3, #42	; 0x2a
 8013528:	d015      	beq.n	8013556 <_svfiprintf_r+0xf6>
 801352a:	9a07      	ldr	r2, [sp, #28]
 801352c:	4654      	mov	r4, sl
 801352e:	2000      	movs	r0, #0
 8013530:	f04f 0c0a 	mov.w	ip, #10
 8013534:	4621      	mov	r1, r4
 8013536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801353a:	3b30      	subs	r3, #48	; 0x30
 801353c:	2b09      	cmp	r3, #9
 801353e:	d94e      	bls.n	80135de <_svfiprintf_r+0x17e>
 8013540:	b1b0      	cbz	r0, 8013570 <_svfiprintf_r+0x110>
 8013542:	9207      	str	r2, [sp, #28]
 8013544:	e014      	b.n	8013570 <_svfiprintf_r+0x110>
 8013546:	eba0 0308 	sub.w	r3, r0, r8
 801354a:	fa09 f303 	lsl.w	r3, r9, r3
 801354e:	4313      	orrs	r3, r2
 8013550:	9304      	str	r3, [sp, #16]
 8013552:	46a2      	mov	sl, r4
 8013554:	e7d2      	b.n	80134fc <_svfiprintf_r+0x9c>
 8013556:	9b03      	ldr	r3, [sp, #12]
 8013558:	1d19      	adds	r1, r3, #4
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	9103      	str	r1, [sp, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	bfbb      	ittet	lt
 8013562:	425b      	neglt	r3, r3
 8013564:	f042 0202 	orrlt.w	r2, r2, #2
 8013568:	9307      	strge	r3, [sp, #28]
 801356a:	9307      	strlt	r3, [sp, #28]
 801356c:	bfb8      	it	lt
 801356e:	9204      	strlt	r2, [sp, #16]
 8013570:	7823      	ldrb	r3, [r4, #0]
 8013572:	2b2e      	cmp	r3, #46	; 0x2e
 8013574:	d10c      	bne.n	8013590 <_svfiprintf_r+0x130>
 8013576:	7863      	ldrb	r3, [r4, #1]
 8013578:	2b2a      	cmp	r3, #42	; 0x2a
 801357a:	d135      	bne.n	80135e8 <_svfiprintf_r+0x188>
 801357c:	9b03      	ldr	r3, [sp, #12]
 801357e:	1d1a      	adds	r2, r3, #4
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	9203      	str	r2, [sp, #12]
 8013584:	2b00      	cmp	r3, #0
 8013586:	bfb8      	it	lt
 8013588:	f04f 33ff 	movlt.w	r3, #4294967295
 801358c:	3402      	adds	r4, #2
 801358e:	9305      	str	r3, [sp, #20]
 8013590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801365c <_svfiprintf_r+0x1fc>
 8013594:	7821      	ldrb	r1, [r4, #0]
 8013596:	2203      	movs	r2, #3
 8013598:	4650      	mov	r0, sl
 801359a:	f7ec ff09 	bl	80003b0 <memchr>
 801359e:	b140      	cbz	r0, 80135b2 <_svfiprintf_r+0x152>
 80135a0:	2340      	movs	r3, #64	; 0x40
 80135a2:	eba0 000a 	sub.w	r0, r0, sl
 80135a6:	fa03 f000 	lsl.w	r0, r3, r0
 80135aa:	9b04      	ldr	r3, [sp, #16]
 80135ac:	4303      	orrs	r3, r0
 80135ae:	3401      	adds	r4, #1
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135b6:	4826      	ldr	r0, [pc, #152]	; (8013650 <_svfiprintf_r+0x1f0>)
 80135b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135bc:	2206      	movs	r2, #6
 80135be:	f7ec fef7 	bl	80003b0 <memchr>
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d038      	beq.n	8013638 <_svfiprintf_r+0x1d8>
 80135c6:	4b23      	ldr	r3, [pc, #140]	; (8013654 <_svfiprintf_r+0x1f4>)
 80135c8:	bb1b      	cbnz	r3, 8013612 <_svfiprintf_r+0x1b2>
 80135ca:	9b03      	ldr	r3, [sp, #12]
 80135cc:	3307      	adds	r3, #7
 80135ce:	f023 0307 	bic.w	r3, r3, #7
 80135d2:	3308      	adds	r3, #8
 80135d4:	9303      	str	r3, [sp, #12]
 80135d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135d8:	4433      	add	r3, r6
 80135da:	9309      	str	r3, [sp, #36]	; 0x24
 80135dc:	e767      	b.n	80134ae <_svfiprintf_r+0x4e>
 80135de:	fb0c 3202 	mla	r2, ip, r2, r3
 80135e2:	460c      	mov	r4, r1
 80135e4:	2001      	movs	r0, #1
 80135e6:	e7a5      	b.n	8013534 <_svfiprintf_r+0xd4>
 80135e8:	2300      	movs	r3, #0
 80135ea:	3401      	adds	r4, #1
 80135ec:	9305      	str	r3, [sp, #20]
 80135ee:	4619      	mov	r1, r3
 80135f0:	f04f 0c0a 	mov.w	ip, #10
 80135f4:	4620      	mov	r0, r4
 80135f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135fa:	3a30      	subs	r2, #48	; 0x30
 80135fc:	2a09      	cmp	r2, #9
 80135fe:	d903      	bls.n	8013608 <_svfiprintf_r+0x1a8>
 8013600:	2b00      	cmp	r3, #0
 8013602:	d0c5      	beq.n	8013590 <_svfiprintf_r+0x130>
 8013604:	9105      	str	r1, [sp, #20]
 8013606:	e7c3      	b.n	8013590 <_svfiprintf_r+0x130>
 8013608:	fb0c 2101 	mla	r1, ip, r1, r2
 801360c:	4604      	mov	r4, r0
 801360e:	2301      	movs	r3, #1
 8013610:	e7f0      	b.n	80135f4 <_svfiprintf_r+0x194>
 8013612:	ab03      	add	r3, sp, #12
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	462a      	mov	r2, r5
 8013618:	4b0f      	ldr	r3, [pc, #60]	; (8013658 <_svfiprintf_r+0x1f8>)
 801361a:	a904      	add	r1, sp, #16
 801361c:	4638      	mov	r0, r7
 801361e:	f7fd fbd3 	bl	8010dc8 <_printf_float>
 8013622:	1c42      	adds	r2, r0, #1
 8013624:	4606      	mov	r6, r0
 8013626:	d1d6      	bne.n	80135d6 <_svfiprintf_r+0x176>
 8013628:	89ab      	ldrh	r3, [r5, #12]
 801362a:	065b      	lsls	r3, r3, #25
 801362c:	f53f af2c 	bmi.w	8013488 <_svfiprintf_r+0x28>
 8013630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013632:	b01d      	add	sp, #116	; 0x74
 8013634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013638:	ab03      	add	r3, sp, #12
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	462a      	mov	r2, r5
 801363e:	4b06      	ldr	r3, [pc, #24]	; (8013658 <_svfiprintf_r+0x1f8>)
 8013640:	a904      	add	r1, sp, #16
 8013642:	4638      	mov	r0, r7
 8013644:	f7fd fe4c 	bl	80112e0 <_printf_i>
 8013648:	e7eb      	b.n	8013622 <_svfiprintf_r+0x1c2>
 801364a:	bf00      	nop
 801364c:	0801df20 	.word	0x0801df20
 8013650:	0801df2a 	.word	0x0801df2a
 8013654:	08010dc9 	.word	0x08010dc9
 8013658:	080133ab 	.word	0x080133ab
 801365c:	0801df26 	.word	0x0801df26

08013660 <_sbrk_r>:
 8013660:	b538      	push	{r3, r4, r5, lr}
 8013662:	4d06      	ldr	r5, [pc, #24]	; (801367c <_sbrk_r+0x1c>)
 8013664:	2300      	movs	r3, #0
 8013666:	4604      	mov	r4, r0
 8013668:	4608      	mov	r0, r1
 801366a:	602b      	str	r3, [r5, #0]
 801366c:	f7f3 f9b4 	bl	80069d8 <_sbrk>
 8013670:	1c43      	adds	r3, r0, #1
 8013672:	d102      	bne.n	801367a <_sbrk_r+0x1a>
 8013674:	682b      	ldr	r3, [r5, #0]
 8013676:	b103      	cbz	r3, 801367a <_sbrk_r+0x1a>
 8013678:	6023      	str	r3, [r4, #0]
 801367a:	bd38      	pop	{r3, r4, r5, pc}
 801367c:	2400d5f8 	.word	0x2400d5f8

08013680 <_raise_r>:
 8013680:	291f      	cmp	r1, #31
 8013682:	b538      	push	{r3, r4, r5, lr}
 8013684:	4604      	mov	r4, r0
 8013686:	460d      	mov	r5, r1
 8013688:	d904      	bls.n	8013694 <_raise_r+0x14>
 801368a:	2316      	movs	r3, #22
 801368c:	6003      	str	r3, [r0, #0]
 801368e:	f04f 30ff 	mov.w	r0, #4294967295
 8013692:	bd38      	pop	{r3, r4, r5, pc}
 8013694:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013696:	b112      	cbz	r2, 801369e <_raise_r+0x1e>
 8013698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801369c:	b94b      	cbnz	r3, 80136b2 <_raise_r+0x32>
 801369e:	4620      	mov	r0, r4
 80136a0:	f000 f830 	bl	8013704 <_getpid_r>
 80136a4:	462a      	mov	r2, r5
 80136a6:	4601      	mov	r1, r0
 80136a8:	4620      	mov	r0, r4
 80136aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136ae:	f000 b817 	b.w	80136e0 <_kill_r>
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d00a      	beq.n	80136cc <_raise_r+0x4c>
 80136b6:	1c59      	adds	r1, r3, #1
 80136b8:	d103      	bne.n	80136c2 <_raise_r+0x42>
 80136ba:	2316      	movs	r3, #22
 80136bc:	6003      	str	r3, [r0, #0]
 80136be:	2001      	movs	r0, #1
 80136c0:	e7e7      	b.n	8013692 <_raise_r+0x12>
 80136c2:	2400      	movs	r4, #0
 80136c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136c8:	4628      	mov	r0, r5
 80136ca:	4798      	blx	r3
 80136cc:	2000      	movs	r0, #0
 80136ce:	e7e0      	b.n	8013692 <_raise_r+0x12>

080136d0 <raise>:
 80136d0:	4b02      	ldr	r3, [pc, #8]	; (80136dc <raise+0xc>)
 80136d2:	4601      	mov	r1, r0
 80136d4:	6818      	ldr	r0, [r3, #0]
 80136d6:	f7ff bfd3 	b.w	8013680 <_raise_r>
 80136da:	bf00      	nop
 80136dc:	24000414 	.word	0x24000414

080136e0 <_kill_r>:
 80136e0:	b538      	push	{r3, r4, r5, lr}
 80136e2:	4d07      	ldr	r5, [pc, #28]	; (8013700 <_kill_r+0x20>)
 80136e4:	2300      	movs	r3, #0
 80136e6:	4604      	mov	r4, r0
 80136e8:	4608      	mov	r0, r1
 80136ea:	4611      	mov	r1, r2
 80136ec:	602b      	str	r3, [r5, #0]
 80136ee:	f7f3 f939 	bl	8006964 <_kill>
 80136f2:	1c43      	adds	r3, r0, #1
 80136f4:	d102      	bne.n	80136fc <_kill_r+0x1c>
 80136f6:	682b      	ldr	r3, [r5, #0]
 80136f8:	b103      	cbz	r3, 80136fc <_kill_r+0x1c>
 80136fa:	6023      	str	r3, [r4, #0]
 80136fc:	bd38      	pop	{r3, r4, r5, pc}
 80136fe:	bf00      	nop
 8013700:	2400d5f8 	.word	0x2400d5f8

08013704 <_getpid_r>:
 8013704:	f7f3 b92c 	b.w	8006960 <_getpid>

08013708 <__sread>:
 8013708:	b510      	push	{r4, lr}
 801370a:	460c      	mov	r4, r1
 801370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013710:	f000 f8ba 	bl	8013888 <_read_r>
 8013714:	2800      	cmp	r0, #0
 8013716:	bfab      	itete	ge
 8013718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801371a:	89a3      	ldrhlt	r3, [r4, #12]
 801371c:	181b      	addge	r3, r3, r0
 801371e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013722:	bfac      	ite	ge
 8013724:	6563      	strge	r3, [r4, #84]	; 0x54
 8013726:	81a3      	strhlt	r3, [r4, #12]
 8013728:	bd10      	pop	{r4, pc}

0801372a <__swrite>:
 801372a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372e:	461f      	mov	r7, r3
 8013730:	898b      	ldrh	r3, [r1, #12]
 8013732:	05db      	lsls	r3, r3, #23
 8013734:	4605      	mov	r5, r0
 8013736:	460c      	mov	r4, r1
 8013738:	4616      	mov	r6, r2
 801373a:	d505      	bpl.n	8013748 <__swrite+0x1e>
 801373c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013740:	2302      	movs	r3, #2
 8013742:	2200      	movs	r2, #0
 8013744:	f000 f868 	bl	8013818 <_lseek_r>
 8013748:	89a3      	ldrh	r3, [r4, #12]
 801374a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801374e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013752:	81a3      	strh	r3, [r4, #12]
 8013754:	4632      	mov	r2, r6
 8013756:	463b      	mov	r3, r7
 8013758:	4628      	mov	r0, r5
 801375a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801375e:	f000 b817 	b.w	8013790 <_write_r>

08013762 <__sseek>:
 8013762:	b510      	push	{r4, lr}
 8013764:	460c      	mov	r4, r1
 8013766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801376a:	f000 f855 	bl	8013818 <_lseek_r>
 801376e:	1c43      	adds	r3, r0, #1
 8013770:	89a3      	ldrh	r3, [r4, #12]
 8013772:	bf15      	itete	ne
 8013774:	6560      	strne	r0, [r4, #84]	; 0x54
 8013776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801377a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801377e:	81a3      	strheq	r3, [r4, #12]
 8013780:	bf18      	it	ne
 8013782:	81a3      	strhne	r3, [r4, #12]
 8013784:	bd10      	pop	{r4, pc}

08013786 <__sclose>:
 8013786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801378a:	f000 b813 	b.w	80137b4 <_close_r>
	...

08013790 <_write_r>:
 8013790:	b538      	push	{r3, r4, r5, lr}
 8013792:	4d07      	ldr	r5, [pc, #28]	; (80137b0 <_write_r+0x20>)
 8013794:	4604      	mov	r4, r0
 8013796:	4608      	mov	r0, r1
 8013798:	4611      	mov	r1, r2
 801379a:	2200      	movs	r2, #0
 801379c:	602a      	str	r2, [r5, #0]
 801379e:	461a      	mov	r2, r3
 80137a0:	f7f3 f8fe 	bl	80069a0 <_write>
 80137a4:	1c43      	adds	r3, r0, #1
 80137a6:	d102      	bne.n	80137ae <_write_r+0x1e>
 80137a8:	682b      	ldr	r3, [r5, #0]
 80137aa:	b103      	cbz	r3, 80137ae <_write_r+0x1e>
 80137ac:	6023      	str	r3, [r4, #0]
 80137ae:	bd38      	pop	{r3, r4, r5, pc}
 80137b0:	2400d5f8 	.word	0x2400d5f8

080137b4 <_close_r>:
 80137b4:	b538      	push	{r3, r4, r5, lr}
 80137b6:	4d06      	ldr	r5, [pc, #24]	; (80137d0 <_close_r+0x1c>)
 80137b8:	2300      	movs	r3, #0
 80137ba:	4604      	mov	r4, r0
 80137bc:	4608      	mov	r0, r1
 80137be:	602b      	str	r3, [r5, #0]
 80137c0:	f7f3 f8fc 	bl	80069bc <_close>
 80137c4:	1c43      	adds	r3, r0, #1
 80137c6:	d102      	bne.n	80137ce <_close_r+0x1a>
 80137c8:	682b      	ldr	r3, [r5, #0]
 80137ca:	b103      	cbz	r3, 80137ce <_close_r+0x1a>
 80137cc:	6023      	str	r3, [r4, #0]
 80137ce:	bd38      	pop	{r3, r4, r5, pc}
 80137d0:	2400d5f8 	.word	0x2400d5f8

080137d4 <_fstat_r>:
 80137d4:	b538      	push	{r3, r4, r5, lr}
 80137d6:	4d07      	ldr	r5, [pc, #28]	; (80137f4 <_fstat_r+0x20>)
 80137d8:	2300      	movs	r3, #0
 80137da:	4604      	mov	r4, r0
 80137dc:	4608      	mov	r0, r1
 80137de:	4611      	mov	r1, r2
 80137e0:	602b      	str	r3, [r5, #0]
 80137e2:	f7f3 f8ef 	bl	80069c4 <_fstat>
 80137e6:	1c43      	adds	r3, r0, #1
 80137e8:	d102      	bne.n	80137f0 <_fstat_r+0x1c>
 80137ea:	682b      	ldr	r3, [r5, #0]
 80137ec:	b103      	cbz	r3, 80137f0 <_fstat_r+0x1c>
 80137ee:	6023      	str	r3, [r4, #0]
 80137f0:	bd38      	pop	{r3, r4, r5, pc}
 80137f2:	bf00      	nop
 80137f4:	2400d5f8 	.word	0x2400d5f8

080137f8 <_isatty_r>:
 80137f8:	b538      	push	{r3, r4, r5, lr}
 80137fa:	4d06      	ldr	r5, [pc, #24]	; (8013814 <_isatty_r+0x1c>)
 80137fc:	2300      	movs	r3, #0
 80137fe:	4604      	mov	r4, r0
 8013800:	4608      	mov	r0, r1
 8013802:	602b      	str	r3, [r5, #0]
 8013804:	f7f3 f8e4 	bl	80069d0 <_isatty>
 8013808:	1c43      	adds	r3, r0, #1
 801380a:	d102      	bne.n	8013812 <_isatty_r+0x1a>
 801380c:	682b      	ldr	r3, [r5, #0]
 801380e:	b103      	cbz	r3, 8013812 <_isatty_r+0x1a>
 8013810:	6023      	str	r3, [r4, #0]
 8013812:	bd38      	pop	{r3, r4, r5, pc}
 8013814:	2400d5f8 	.word	0x2400d5f8

08013818 <_lseek_r>:
 8013818:	b538      	push	{r3, r4, r5, lr}
 801381a:	4d07      	ldr	r5, [pc, #28]	; (8013838 <_lseek_r+0x20>)
 801381c:	4604      	mov	r4, r0
 801381e:	4608      	mov	r0, r1
 8013820:	4611      	mov	r1, r2
 8013822:	2200      	movs	r2, #0
 8013824:	602a      	str	r2, [r5, #0]
 8013826:	461a      	mov	r2, r3
 8013828:	f7f3 f8d4 	bl	80069d4 <_lseek>
 801382c:	1c43      	adds	r3, r0, #1
 801382e:	d102      	bne.n	8013836 <_lseek_r+0x1e>
 8013830:	682b      	ldr	r3, [r5, #0]
 8013832:	b103      	cbz	r3, 8013836 <_lseek_r+0x1e>
 8013834:	6023      	str	r3, [r4, #0]
 8013836:	bd38      	pop	{r3, r4, r5, pc}
 8013838:	2400d5f8 	.word	0x2400d5f8

0801383c <__ascii_mbtowc>:
 801383c:	b082      	sub	sp, #8
 801383e:	b901      	cbnz	r1, 8013842 <__ascii_mbtowc+0x6>
 8013840:	a901      	add	r1, sp, #4
 8013842:	b142      	cbz	r2, 8013856 <__ascii_mbtowc+0x1a>
 8013844:	b14b      	cbz	r3, 801385a <__ascii_mbtowc+0x1e>
 8013846:	7813      	ldrb	r3, [r2, #0]
 8013848:	600b      	str	r3, [r1, #0]
 801384a:	7812      	ldrb	r2, [r2, #0]
 801384c:	1e10      	subs	r0, r2, #0
 801384e:	bf18      	it	ne
 8013850:	2001      	movne	r0, #1
 8013852:	b002      	add	sp, #8
 8013854:	4770      	bx	lr
 8013856:	4610      	mov	r0, r2
 8013858:	e7fb      	b.n	8013852 <__ascii_mbtowc+0x16>
 801385a:	f06f 0001 	mvn.w	r0, #1
 801385e:	e7f8      	b.n	8013852 <__ascii_mbtowc+0x16>

08013860 <__malloc_lock>:
 8013860:	4801      	ldr	r0, [pc, #4]	; (8013868 <__malloc_lock+0x8>)
 8013862:	f7ff b870 	b.w	8012946 <__retarget_lock_acquire_recursive>
 8013866:	bf00      	nop
 8013868:	2400d5ec 	.word	0x2400d5ec

0801386c <__malloc_unlock>:
 801386c:	4801      	ldr	r0, [pc, #4]	; (8013874 <__malloc_unlock+0x8>)
 801386e:	f7ff b86b 	b.w	8012948 <__retarget_lock_release_recursive>
 8013872:	bf00      	nop
 8013874:	2400d5ec 	.word	0x2400d5ec

08013878 <_malloc_usable_size_r>:
 8013878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801387c:	1f18      	subs	r0, r3, #4
 801387e:	2b00      	cmp	r3, #0
 8013880:	bfbc      	itt	lt
 8013882:	580b      	ldrlt	r3, [r1, r0]
 8013884:	18c0      	addlt	r0, r0, r3
 8013886:	4770      	bx	lr

08013888 <_read_r>:
 8013888:	b538      	push	{r3, r4, r5, lr}
 801388a:	4d07      	ldr	r5, [pc, #28]	; (80138a8 <_read_r+0x20>)
 801388c:	4604      	mov	r4, r0
 801388e:	4608      	mov	r0, r1
 8013890:	4611      	mov	r1, r2
 8013892:	2200      	movs	r2, #0
 8013894:	602a      	str	r2, [r5, #0]
 8013896:	461a      	mov	r2, r3
 8013898:	f7f3 f874 	bl	8006984 <_read>
 801389c:	1c43      	adds	r3, r0, #1
 801389e:	d102      	bne.n	80138a6 <_read_r+0x1e>
 80138a0:	682b      	ldr	r3, [r5, #0]
 80138a2:	b103      	cbz	r3, 80138a6 <_read_r+0x1e>
 80138a4:	6023      	str	r3, [r4, #0]
 80138a6:	bd38      	pop	{r3, r4, r5, pc}
 80138a8:	2400d5f8 	.word	0x2400d5f8

080138ac <__ascii_wctomb>:
 80138ac:	b149      	cbz	r1, 80138c2 <__ascii_wctomb+0x16>
 80138ae:	2aff      	cmp	r2, #255	; 0xff
 80138b0:	bf85      	ittet	hi
 80138b2:	238a      	movhi	r3, #138	; 0x8a
 80138b4:	6003      	strhi	r3, [r0, #0]
 80138b6:	700a      	strbls	r2, [r1, #0]
 80138b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80138bc:	bf98      	it	ls
 80138be:	2001      	movls	r0, #1
 80138c0:	4770      	bx	lr
 80138c2:	4608      	mov	r0, r1
 80138c4:	4770      	bx	lr
	...

080138c8 <exp>:
 80138c8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80138ca:	ee10 3a90 	vmov	r3, s1
 80138ce:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80138d2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80138d6:	18a2      	adds	r2, r4, r2
 80138d8:	2a3e      	cmp	r2, #62	; 0x3e
 80138da:	ee10 1a10 	vmov	r1, s0
 80138de:	d922      	bls.n	8013926 <exp+0x5e>
 80138e0:	2a00      	cmp	r2, #0
 80138e2:	da06      	bge.n	80138f2 <exp+0x2a>
 80138e4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80138e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80138ec:	b004      	add	sp, #16
 80138ee:	bcf0      	pop	{r4, r5, r6, r7}
 80138f0:	4770      	bx	lr
 80138f2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 80138f6:	f04f 0000 	mov.w	r0, #0
 80138fa:	d913      	bls.n	8013924 <exp+0x5c>
 80138fc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8013900:	bf08      	it	eq
 8013902:	4281      	cmpeq	r1, r0
 8013904:	f000 80a0 	beq.w	8013a48 <exp+0x180>
 8013908:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801390c:	4294      	cmp	r4, r2
 801390e:	d0e9      	beq.n	80138e4 <exp+0x1c>
 8013910:	4283      	cmp	r3, r0
 8013912:	da03      	bge.n	801391c <exp+0x54>
 8013914:	b004      	add	sp, #16
 8013916:	bcf0      	pop	{r4, r5, r6, r7}
 8013918:	f000 b8c6 	b.w	8013aa8 <__math_uflow>
 801391c:	b004      	add	sp, #16
 801391e:	bcf0      	pop	{r4, r5, r6, r7}
 8013920:	f000 b8ca 	b.w	8013ab8 <__math_oflow>
 8013924:	4604      	mov	r4, r0
 8013926:	4950      	ldr	r1, [pc, #320]	; (8013a68 <exp+0x1a0>)
 8013928:	ed91 6b02 	vldr	d6, [r1, #8]
 801392c:	ed91 5b00 	vldr	d5, [r1]
 8013930:	eeb0 7b46 	vmov.f64	d7, d6
 8013934:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013938:	ee17 5a10 	vmov	r5, s14
 801393c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013940:	ed91 6b04 	vldr	d6, [r1, #16]
 8013944:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8013948:	eea6 0b07 	vfma.f64	d0, d6, d7
 801394c:	ed91 6b06 	vldr	d6, [r1, #24]
 8013950:	18d8      	adds	r0, r3, r3
 8013952:	f100 030f 	add.w	r3, r0, #15
 8013956:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801395a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801395e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8013962:	ee20 7b00 	vmul.f64	d7, d0, d0
 8013966:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801396a:	ed91 5b08 	vldr	d5, [r1, #32]
 801396e:	ee30 6b06 	vadd.f64	d6, d0, d6
 8013972:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013976:	eea4 5b00 	vfma.f64	d5, d4, d0
 801397a:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801397e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8013982:	ee27 7b07 	vmul.f64	d7, d7, d7
 8013986:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801398a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801398e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8013992:	eea4 5b00 	vfma.f64	d5, d4, d0
 8013996:	2600      	movs	r6, #0
 8013998:	19f2      	adds	r2, r6, r7
 801399a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801399e:	eea7 6b05 	vfma.f64	d6, d7, d5
 80139a2:	2c00      	cmp	r4, #0
 80139a4:	d14b      	bne.n	8013a3e <exp+0x176>
 80139a6:	42b5      	cmp	r5, r6
 80139a8:	db10      	blt.n	80139cc <exp+0x104>
 80139aa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80139ae:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8013a50 <exp+0x188>
 80139b2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80139b6:	4610      	mov	r0, r2
 80139b8:	ec41 0b10 	vmov	d0, r0, r1
 80139bc:	eea6 0b00 	vfma.f64	d0, d6, d0
 80139c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80139c4:	b004      	add	sp, #16
 80139c6:	bcf0      	pop	{r4, r5, r6, r7}
 80139c8:	f000 b8ae 	b.w	8013b28 <__math_check_oflow>
 80139cc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80139d0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80139d4:	4610      	mov	r0, r2
 80139d6:	ec41 0b17 	vmov	d7, r0, r1
 80139da:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80139de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80139e2:	ee37 5b06 	vadd.f64	d5, d7, d6
 80139e6:	eeb4 5bc4 	vcmpe.f64	d5, d4
 80139ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ee:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013a58 <exp+0x190>
 80139f2:	d51e      	bpl.n	8013a32 <exp+0x16a>
 80139f4:	ee35 3b04 	vadd.f64	d3, d5, d4
 80139f8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80139fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013a00:	ee34 6b43 	vsub.f64	d6, d4, d3
 8013a04:	ee36 5b05 	vadd.f64	d5, d6, d5
 8013a08:	ee35 5b07 	vadd.f64	d5, d5, d7
 8013a0c:	ee35 5b03 	vadd.f64	d5, d5, d3
 8013a10:	ee35 5b44 	vsub.f64	d5, d5, d4
 8013a14:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8013a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a1c:	d101      	bne.n	8013a22 <exp+0x15a>
 8013a1e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8013a60 <exp+0x198>
 8013a22:	ed8d 0b00 	vstr	d0, [sp]
 8013a26:	ed9d 7b00 	vldr	d7, [sp]
 8013a2a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8013a2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a32:	ee25 0b00 	vmul.f64	d0, d5, d0
 8013a36:	b004      	add	sp, #16
 8013a38:	bcf0      	pop	{r4, r5, r6, r7}
 8013a3a:	f000 b86c 	b.w	8013b16 <__math_check_uflow>
 8013a3e:	ec43 2b10 	vmov	d0, r2, r3
 8013a42:	eea6 0b00 	vfma.f64	d0, d6, d0
 8013a46:	e751      	b.n	80138ec <exp+0x24>
 8013a48:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8013a60 <exp+0x198>
 8013a4c:	e74e      	b.n	80138ec <exp+0x24>
 8013a4e:	bf00      	nop
 8013a50:	00000000 	.word	0x00000000
 8013a54:	7f000000 	.word	0x7f000000
 8013a58:	00000000 	.word	0x00000000
 8013a5c:	00100000 	.word	0x00100000
	...
 8013a68:	0801e278 	.word	0x0801e278

08013a6c <with_errno>:
 8013a6c:	b513      	push	{r0, r1, r4, lr}
 8013a6e:	4604      	mov	r4, r0
 8013a70:	ed8d 0b00 	vstr	d0, [sp]
 8013a74:	f7fc ff6c 	bl	8010950 <__errno>
 8013a78:	ed9d 0b00 	vldr	d0, [sp]
 8013a7c:	6004      	str	r4, [r0, #0]
 8013a7e:	b002      	add	sp, #8
 8013a80:	bd10      	pop	{r4, pc}

08013a82 <xflow>:
 8013a82:	b082      	sub	sp, #8
 8013a84:	b158      	cbz	r0, 8013a9e <xflow+0x1c>
 8013a86:	eeb1 7b40 	vneg.f64	d7, d0
 8013a8a:	ed8d 7b00 	vstr	d7, [sp]
 8013a8e:	ed9d 7b00 	vldr	d7, [sp]
 8013a92:	2022      	movs	r0, #34	; 0x22
 8013a94:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013a98:	b002      	add	sp, #8
 8013a9a:	f7ff bfe7 	b.w	8013a6c <with_errno>
 8013a9e:	eeb0 7b40 	vmov.f64	d7, d0
 8013aa2:	e7f2      	b.n	8013a8a <xflow+0x8>
 8013aa4:	0000      	movs	r0, r0
	...

08013aa8 <__math_uflow>:
 8013aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ab0 <__math_uflow+0x8>
 8013aac:	f7ff bfe9 	b.w	8013a82 <xflow>
 8013ab0:	00000000 	.word	0x00000000
 8013ab4:	10000000 	.word	0x10000000

08013ab8 <__math_oflow>:
 8013ab8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ac0 <__math_oflow+0x8>
 8013abc:	f7ff bfe1 	b.w	8013a82 <xflow>
 8013ac0:	00000000 	.word	0x00000000
 8013ac4:	70000000 	.word	0x70000000

08013ac8 <__math_divzero>:
 8013ac8:	b082      	sub	sp, #8
 8013aca:	2800      	cmp	r0, #0
 8013acc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013ad0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8013ad4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8013ad8:	ed8d 7b00 	vstr	d7, [sp]
 8013adc:	ed9d 0b00 	vldr	d0, [sp]
 8013ae0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8013af0 <__math_divzero+0x28>
 8013ae4:	2022      	movs	r0, #34	; 0x22
 8013ae6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013aea:	b002      	add	sp, #8
 8013aec:	f7ff bfbe 	b.w	8013a6c <with_errno>
	...

08013af8 <__math_invalid>:
 8013af8:	eeb0 7b40 	vmov.f64	d7, d0
 8013afc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b04:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013b08:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013b0c:	d602      	bvs.n	8013b14 <__math_invalid+0x1c>
 8013b0e:	2021      	movs	r0, #33	; 0x21
 8013b10:	f7ff bfac 	b.w	8013a6c <with_errno>
 8013b14:	4770      	bx	lr

08013b16 <__math_check_uflow>:
 8013b16:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1e:	d102      	bne.n	8013b26 <__math_check_uflow+0x10>
 8013b20:	2022      	movs	r0, #34	; 0x22
 8013b22:	f7ff bfa3 	b.w	8013a6c <with_errno>
 8013b26:	4770      	bx	lr

08013b28 <__math_check_oflow>:
 8013b28:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8013b48 <__math_check_oflow+0x20>
 8013b2c:	eeb0 7bc0 	vabs.f64	d7, d0
 8013b30:	eeb4 7b46 	vcmp.f64	d7, d6
 8013b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b38:	dd02      	ble.n	8013b40 <__math_check_oflow+0x18>
 8013b3a:	2022      	movs	r0, #34	; 0x22
 8013b3c:	f7ff bf96 	b.w	8013a6c <with_errno>
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	f3af 8000 	nop.w
 8013b48:	ffffffff 	.word	0xffffffff
 8013b4c:	7fefffff 	.word	0x7fefffff

08013b50 <cos>:
 8013b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b52:	eeb0 7b40 	vmov.f64	d7, d0
 8013b56:	ee17 3a90 	vmov	r3, s15
 8013b5a:	4a21      	ldr	r2, [pc, #132]	; (8013be0 <cos+0x90>)
 8013b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b60:	4293      	cmp	r3, r2
 8013b62:	dc06      	bgt.n	8013b72 <cos+0x22>
 8013b64:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013bd8 <cos+0x88>
 8013b68:	b005      	add	sp, #20
 8013b6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b6e:	f000 ba6f 	b.w	8014050 <__kernel_cos>
 8013b72:	4a1c      	ldr	r2, [pc, #112]	; (8013be4 <cos+0x94>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	dd04      	ble.n	8013b82 <cos+0x32>
 8013b78:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013b7c:	b005      	add	sp, #20
 8013b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b82:	4668      	mov	r0, sp
 8013b84:	f000 f920 	bl	8013dc8 <__ieee754_rem_pio2>
 8013b88:	f000 0003 	and.w	r0, r0, #3
 8013b8c:	2801      	cmp	r0, #1
 8013b8e:	d009      	beq.n	8013ba4 <cos+0x54>
 8013b90:	2802      	cmp	r0, #2
 8013b92:	d010      	beq.n	8013bb6 <cos+0x66>
 8013b94:	b9b0      	cbnz	r0, 8013bc4 <cos+0x74>
 8013b96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013b9a:	ed9d 0b00 	vldr	d0, [sp]
 8013b9e:	f000 fa57 	bl	8014050 <__kernel_cos>
 8013ba2:	e7eb      	b.n	8013b7c <cos+0x2c>
 8013ba4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013ba8:	ed9d 0b00 	vldr	d0, [sp]
 8013bac:	f000 fd54 	bl	8014658 <__kernel_sin>
 8013bb0:	eeb1 0b40 	vneg.f64	d0, d0
 8013bb4:	e7e2      	b.n	8013b7c <cos+0x2c>
 8013bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013bba:	ed9d 0b00 	vldr	d0, [sp]
 8013bbe:	f000 fa47 	bl	8014050 <__kernel_cos>
 8013bc2:	e7f5      	b.n	8013bb0 <cos+0x60>
 8013bc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013bc8:	ed9d 0b00 	vldr	d0, [sp]
 8013bcc:	2001      	movs	r0, #1
 8013bce:	f000 fd43 	bl	8014658 <__kernel_sin>
 8013bd2:	e7d3      	b.n	8013b7c <cos+0x2c>
 8013bd4:	f3af 8000 	nop.w
	...
 8013be0:	3fe921fb 	.word	0x3fe921fb
 8013be4:	7fefffff 	.word	0x7fefffff

08013be8 <sin>:
 8013be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bea:	eeb0 7b40 	vmov.f64	d7, d0
 8013bee:	ee17 3a90 	vmov	r3, s15
 8013bf2:	4a21      	ldr	r2, [pc, #132]	; (8013c78 <sin+0x90>)
 8013bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	dc07      	bgt.n	8013c0c <sin+0x24>
 8013bfc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8013c70 <sin+0x88>
 8013c00:	2000      	movs	r0, #0
 8013c02:	b005      	add	sp, #20
 8013c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c08:	f000 bd26 	b.w	8014658 <__kernel_sin>
 8013c0c:	4a1b      	ldr	r2, [pc, #108]	; (8013c7c <sin+0x94>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	dd04      	ble.n	8013c1c <sin+0x34>
 8013c12:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013c16:	b005      	add	sp, #20
 8013c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c1c:	4668      	mov	r0, sp
 8013c1e:	f000 f8d3 	bl	8013dc8 <__ieee754_rem_pio2>
 8013c22:	f000 0003 	and.w	r0, r0, #3
 8013c26:	2801      	cmp	r0, #1
 8013c28:	d00a      	beq.n	8013c40 <sin+0x58>
 8013c2a:	2802      	cmp	r0, #2
 8013c2c:	d00f      	beq.n	8013c4e <sin+0x66>
 8013c2e:	b9c0      	cbnz	r0, 8013c62 <sin+0x7a>
 8013c30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c34:	ed9d 0b00 	vldr	d0, [sp]
 8013c38:	2001      	movs	r0, #1
 8013c3a:	f000 fd0d 	bl	8014658 <__kernel_sin>
 8013c3e:	e7ea      	b.n	8013c16 <sin+0x2e>
 8013c40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c44:	ed9d 0b00 	vldr	d0, [sp]
 8013c48:	f000 fa02 	bl	8014050 <__kernel_cos>
 8013c4c:	e7e3      	b.n	8013c16 <sin+0x2e>
 8013c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c52:	ed9d 0b00 	vldr	d0, [sp]
 8013c56:	2001      	movs	r0, #1
 8013c58:	f000 fcfe 	bl	8014658 <__kernel_sin>
 8013c5c:	eeb1 0b40 	vneg.f64	d0, d0
 8013c60:	e7d9      	b.n	8013c16 <sin+0x2e>
 8013c62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013c66:	ed9d 0b00 	vldr	d0, [sp]
 8013c6a:	f000 f9f1 	bl	8014050 <__kernel_cos>
 8013c6e:	e7f5      	b.n	8013c5c <sin+0x74>
	...
 8013c78:	3fe921fb 	.word	0x3fe921fb
 8013c7c:	7fefffff 	.word	0x7fefffff

08013c80 <log10>:
 8013c80:	b508      	push	{r3, lr}
 8013c82:	ed2d 8b02 	vpush	{d8}
 8013c86:	eeb0 8b40 	vmov.f64	d8, d0
 8013c8a:	f000 f82d 	bl	8013ce8 <__ieee754_log10>
 8013c8e:	eeb4 8b48 	vcmp.f64	d8, d8
 8013c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c96:	d60f      	bvs.n	8013cb8 <log10+0x38>
 8013c98:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8013c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca0:	d80a      	bhi.n	8013cb8 <log10+0x38>
 8013ca2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013caa:	d108      	bne.n	8013cbe <log10+0x3e>
 8013cac:	f7fc fe50 	bl	8010950 <__errno>
 8013cb0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013cd8 <log10+0x58>
 8013cb4:	2322      	movs	r3, #34	; 0x22
 8013cb6:	6003      	str	r3, [r0, #0]
 8013cb8:	ecbd 8b02 	vpop	{d8}
 8013cbc:	bd08      	pop	{r3, pc}
 8013cbe:	f7fc fe47 	bl	8010950 <__errno>
 8013cc2:	ecbd 8b02 	vpop	{d8}
 8013cc6:	2321      	movs	r3, #33	; 0x21
 8013cc8:	6003      	str	r3, [r0, #0]
 8013cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013cce:	4804      	ldr	r0, [pc, #16]	; (8013ce0 <log10+0x60>)
 8013cd0:	f000 be92 	b.w	80149f8 <nan>
 8013cd4:	f3af 8000 	nop.w
 8013cd8:	00000000 	.word	0x00000000
 8013cdc:	fff00000 	.word	0xfff00000
 8013ce0:	0801de17 	.word	0x0801de17
 8013ce4:	00000000 	.word	0x00000000

08013ce8 <__ieee754_log10>:
 8013ce8:	b510      	push	{r4, lr}
 8013cea:	ee10 3a90 	vmov	r3, s1
 8013cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013cf2:	ed2d 8b02 	vpush	{d8}
 8013cf6:	da21      	bge.n	8013d3c <__ieee754_log10+0x54>
 8013cf8:	ee10 1a10 	vmov	r1, s0
 8013cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d00:	430a      	orrs	r2, r1
 8013d02:	d108      	bne.n	8013d16 <__ieee754_log10+0x2e>
 8013d04:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8013d90 <__ieee754_log10+0xa8>
 8013d08:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8013d98 <__ieee754_log10+0xb0>
 8013d0c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8013d10:	ecbd 8b02 	vpop	{d8}
 8013d14:	bd10      	pop	{r4, pc}
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	da02      	bge.n	8013d20 <__ieee754_log10+0x38>
 8013d1a:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013d1e:	e7f3      	b.n	8013d08 <__ieee754_log10+0x20>
 8013d20:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8013da0 <__ieee754_log10+0xb8>
 8013d24:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d28:	ee10 3a90 	vmov	r3, s1
 8013d2c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8013d30:	4923      	ldr	r1, [pc, #140]	; (8013dc0 <__ieee754_log10+0xd8>)
 8013d32:	428b      	cmp	r3, r1
 8013d34:	dd04      	ble.n	8013d40 <__ieee754_log10+0x58>
 8013d36:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013d3a:	e7e9      	b.n	8013d10 <__ieee754_log10+0x28>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	e7f7      	b.n	8013d30 <__ieee754_log10+0x48>
 8013d40:	1518      	asrs	r0, r3, #20
 8013d42:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013d46:	4410      	add	r0, r2
 8013d48:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8013d4c:	f240 34ff 	movw	r4, #1023	; 0x3ff
 8013d50:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8013d54:	ee08 3a10 	vmov	s16, r3
 8013d58:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 8013d5c:	ec53 2b10 	vmov	r2, r3, d0
 8013d60:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8013d64:	ec43 2b10 	vmov	d0, r2, r3
 8013d68:	f000 fcce 	bl	8014708 <log>
 8013d6c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013da8 <__ieee754_log10+0xc0>
 8013d70:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013db0 <__ieee754_log10+0xc8>
 8013d78:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 8013d7c:	eea8 0b07 	vfma.f64	d0, d8, d7
 8013d80:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013db8 <__ieee754_log10+0xd0>
 8013d84:	eea8 0b07 	vfma.f64	d0, d8, d7
 8013d88:	e7c2      	b.n	8013d10 <__ieee754_log10+0x28>
 8013d8a:	bf00      	nop
 8013d8c:	f3af 8000 	nop.w
 8013d90:	00000000 	.word	0x00000000
 8013d94:	c3500000 	.word	0xc3500000
	...
 8013da4:	43500000 	.word	0x43500000
 8013da8:	1526e50e 	.word	0x1526e50e
 8013dac:	3fdbcb7b 	.word	0x3fdbcb7b
 8013db0:	11f12b36 	.word	0x11f12b36
 8013db4:	3d59fef3 	.word	0x3d59fef3
 8013db8:	509f6000 	.word	0x509f6000
 8013dbc:	3fd34413 	.word	0x3fd34413
 8013dc0:	7fefffff 	.word	0x7fefffff
 8013dc4:	00000000 	.word	0x00000000

08013dc8 <__ieee754_rem_pio2>:
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	eeb0 7b40 	vmov.f64	d7, d0
 8013dce:	ee17 5a90 	vmov	r5, s15
 8013dd2:	4b99      	ldr	r3, [pc, #612]	; (8014038 <__ieee754_rem_pio2+0x270>)
 8013dd4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013dd8:	429e      	cmp	r6, r3
 8013dda:	b088      	sub	sp, #32
 8013ddc:	4604      	mov	r4, r0
 8013dde:	dc07      	bgt.n	8013df0 <__ieee754_rem_pio2+0x28>
 8013de0:	2200      	movs	r2, #0
 8013de2:	2300      	movs	r3, #0
 8013de4:	ed84 0b00 	vstr	d0, [r4]
 8013de8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013dec:	2000      	movs	r0, #0
 8013dee:	e01b      	b.n	8013e28 <__ieee754_rem_pio2+0x60>
 8013df0:	4b92      	ldr	r3, [pc, #584]	; (801403c <__ieee754_rem_pio2+0x274>)
 8013df2:	429e      	cmp	r6, r3
 8013df4:	dc3b      	bgt.n	8013e6e <__ieee754_rem_pio2+0xa6>
 8013df6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8013dfa:	2d00      	cmp	r5, #0
 8013dfc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8013ff8 <__ieee754_rem_pio2+0x230>
 8013e00:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013e04:	dd19      	ble.n	8013e3a <__ieee754_rem_pio2+0x72>
 8013e06:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013e0a:	429e      	cmp	r6, r3
 8013e0c:	d00e      	beq.n	8013e2c <__ieee754_rem_pio2+0x64>
 8013e0e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014000 <__ieee754_rem_pio2+0x238>
 8013e12:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013e16:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013e1a:	ed84 5b00 	vstr	d5, [r4]
 8013e1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e22:	ed84 7b02 	vstr	d7, [r4, #8]
 8013e26:	2001      	movs	r0, #1
 8013e28:	b008      	add	sp, #32
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}
 8013e2c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014008 <__ieee754_rem_pio2+0x240>
 8013e30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e34:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014010 <__ieee754_rem_pio2+0x248>
 8013e38:	e7eb      	b.n	8013e12 <__ieee754_rem_pio2+0x4a>
 8013e3a:	429e      	cmp	r6, r3
 8013e3c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013e40:	d00e      	beq.n	8013e60 <__ieee754_rem_pio2+0x98>
 8013e42:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8014000 <__ieee754_rem_pio2+0x238>
 8013e46:	ee37 5b06 	vadd.f64	d5, d7, d6
 8013e4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013e4e:	ed84 5b00 	vstr	d5, [r4]
 8013e52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013e56:	f04f 30ff 	mov.w	r0, #4294967295
 8013e5a:	ed84 7b02 	vstr	d7, [r4, #8]
 8013e5e:	e7e3      	b.n	8013e28 <__ieee754_rem_pio2+0x60>
 8013e60:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014008 <__ieee754_rem_pio2+0x240>
 8013e64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013e68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014010 <__ieee754_rem_pio2+0x248>
 8013e6c:	e7eb      	b.n	8013e46 <__ieee754_rem_pio2+0x7e>
 8013e6e:	4b74      	ldr	r3, [pc, #464]	; (8014040 <__ieee754_rem_pio2+0x278>)
 8013e70:	429e      	cmp	r6, r3
 8013e72:	dc70      	bgt.n	8013f56 <__ieee754_rem_pio2+0x18e>
 8013e74:	f000 fd40 	bl	80148f8 <fabs>
 8013e78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8013e7c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014018 <__ieee754_rem_pio2+0x250>
 8013e80:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013e84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013e88:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013e8c:	ee17 0a90 	vmov	r0, s15
 8013e90:	eeb1 4b45 	vneg.f64	d4, d5
 8013e94:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013ff8 <__ieee754_rem_pio2+0x230>
 8013e98:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013e9c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014000 <__ieee754_rem_pio2+0x238>
 8013ea0:	281f      	cmp	r0, #31
 8013ea2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013ea6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013eaa:	dc08      	bgt.n	8013ebe <__ieee754_rem_pio2+0xf6>
 8013eac:	4b65      	ldr	r3, [pc, #404]	; (8014044 <__ieee754_rem_pio2+0x27c>)
 8013eae:	1e42      	subs	r2, r0, #1
 8013eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eb4:	42b3      	cmp	r3, r6
 8013eb6:	d002      	beq.n	8013ebe <__ieee754_rem_pio2+0xf6>
 8013eb8:	ed84 6b00 	vstr	d6, [r4]
 8013ebc:	e026      	b.n	8013f0c <__ieee754_rem_pio2+0x144>
 8013ebe:	ee16 3a90 	vmov	r3, s13
 8013ec2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013ec6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013eca:	2b10      	cmp	r3, #16
 8013ecc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013ed0:	ddf2      	ble.n	8013eb8 <__ieee754_rem_pio2+0xf0>
 8013ed2:	eeb0 6b40 	vmov.f64	d6, d0
 8013ed6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8014008 <__ieee754_rem_pio2+0x240>
 8013eda:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014010 <__ieee754_rem_pio2+0x248>
 8013ede:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013ee2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013ee6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8013eea:	eeb0 7b40 	vmov.f64	d7, d0
 8013eee:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013ef2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013ef6:	ee13 3a90 	vmov	r3, s7
 8013efa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013efe:	1ad3      	subs	r3, r2, r3
 8013f00:	2b31      	cmp	r3, #49	; 0x31
 8013f02:	dc17      	bgt.n	8013f34 <__ieee754_rem_pio2+0x16c>
 8013f04:	eeb0 0b46 	vmov.f64	d0, d6
 8013f08:	ed84 3b00 	vstr	d3, [r4]
 8013f0c:	ed94 6b00 	vldr	d6, [r4]
 8013f10:	2d00      	cmp	r5, #0
 8013f12:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013f16:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013f1a:	ed84 0b02 	vstr	d0, [r4, #8]
 8013f1e:	da83      	bge.n	8013e28 <__ieee754_rem_pio2+0x60>
 8013f20:	eeb1 6b46 	vneg.f64	d6, d6
 8013f24:	eeb1 0b40 	vneg.f64	d0, d0
 8013f28:	ed84 6b00 	vstr	d6, [r4]
 8013f2c:	ed84 0b02 	vstr	d0, [r4, #8]
 8013f30:	4240      	negs	r0, r0
 8013f32:	e779      	b.n	8013e28 <__ieee754_rem_pio2+0x60>
 8013f34:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8014020 <__ieee754_rem_pio2+0x258>
 8013f38:	eeb0 0b46 	vmov.f64	d0, d6
 8013f3c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8013f40:	ee36 7b40 	vsub.f64	d7, d6, d0
 8013f44:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8014028 <__ieee754_rem_pio2+0x260>
 8013f48:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013f4c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8013f50:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013f54:	e7b0      	b.n	8013eb8 <__ieee754_rem_pio2+0xf0>
 8013f56:	4b3c      	ldr	r3, [pc, #240]	; (8014048 <__ieee754_rem_pio2+0x280>)
 8013f58:	429e      	cmp	r6, r3
 8013f5a:	dd06      	ble.n	8013f6a <__ieee754_rem_pio2+0x1a2>
 8013f5c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013f60:	ed80 7b02 	vstr	d7, [r0, #8]
 8013f64:	ed80 7b00 	vstr	d7, [r0]
 8013f68:	e740      	b.n	8013dec <__ieee754_rem_pio2+0x24>
 8013f6a:	1532      	asrs	r2, r6, #20
 8013f6c:	ee10 0a10 	vmov	r0, s0
 8013f70:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8013f74:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013f78:	ec41 0b17 	vmov	d7, r0, r1
 8013f7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013f80:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8014030 <__ieee754_rem_pio2+0x268>
 8013f84:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013f88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013f8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013f90:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013f94:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013f98:	a902      	add	r1, sp, #8
 8013f9a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013f9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013fa2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013fa6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013faa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013fae:	2603      	movs	r6, #3
 8013fb0:	4608      	mov	r0, r1
 8013fb2:	ed91 7b04 	vldr	d7, [r1, #16]
 8013fb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fbe:	4633      	mov	r3, r6
 8013fc0:	f1a1 0108 	sub.w	r1, r1, #8
 8013fc4:	f106 36ff 	add.w	r6, r6, #4294967295
 8013fc8:	d0f3      	beq.n	8013fb2 <__ieee754_rem_pio2+0x1ea>
 8013fca:	4920      	ldr	r1, [pc, #128]	; (801404c <__ieee754_rem_pio2+0x284>)
 8013fcc:	9101      	str	r1, [sp, #4]
 8013fce:	2102      	movs	r1, #2
 8013fd0:	9100      	str	r1, [sp, #0]
 8013fd2:	4621      	mov	r1, r4
 8013fd4:	f000 f8a8 	bl	8014128 <__kernel_rem_pio2>
 8013fd8:	2d00      	cmp	r5, #0
 8013fda:	f6bf af25 	bge.w	8013e28 <__ieee754_rem_pio2+0x60>
 8013fde:	ed94 7b00 	vldr	d7, [r4]
 8013fe2:	eeb1 7b47 	vneg.f64	d7, d7
 8013fe6:	ed84 7b00 	vstr	d7, [r4]
 8013fea:	ed94 7b02 	vldr	d7, [r4, #8]
 8013fee:	eeb1 7b47 	vneg.f64	d7, d7
 8013ff2:	ed84 7b02 	vstr	d7, [r4, #8]
 8013ff6:	e79b      	b.n	8013f30 <__ieee754_rem_pio2+0x168>
 8013ff8:	54400000 	.word	0x54400000
 8013ffc:	3ff921fb 	.word	0x3ff921fb
 8014000:	1a626331 	.word	0x1a626331
 8014004:	3dd0b461 	.word	0x3dd0b461
 8014008:	1a600000 	.word	0x1a600000
 801400c:	3dd0b461 	.word	0x3dd0b461
 8014010:	2e037073 	.word	0x2e037073
 8014014:	3ba3198a 	.word	0x3ba3198a
 8014018:	6dc9c883 	.word	0x6dc9c883
 801401c:	3fe45f30 	.word	0x3fe45f30
 8014020:	2e000000 	.word	0x2e000000
 8014024:	3ba3198a 	.word	0x3ba3198a
 8014028:	252049c1 	.word	0x252049c1
 801402c:	397b839a 	.word	0x397b839a
 8014030:	00000000 	.word	0x00000000
 8014034:	41700000 	.word	0x41700000
 8014038:	3fe921fb 	.word	0x3fe921fb
 801403c:	4002d97b 	.word	0x4002d97b
 8014040:	413921fb 	.word	0x413921fb
 8014044:	0801eae8 	.word	0x0801eae8
 8014048:	7fefffff 	.word	0x7fefffff
 801404c:	0801eb68 	.word	0x0801eb68

08014050 <__kernel_cos>:
 8014050:	ee10 1a90 	vmov	r1, s1
 8014054:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801405c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8014060:	da05      	bge.n	801406e <__kernel_cos+0x1e>
 8014062:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014066:	ee17 3a90 	vmov	r3, s15
 801406a:	2b00      	cmp	r3, #0
 801406c:	d03d      	beq.n	80140ea <__kernel_cos+0x9a>
 801406e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8014072:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80140f0 <__kernel_cos+0xa0>
 8014076:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80140f8 <__kernel_cos+0xa8>
 801407a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801407e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014100 <__kernel_cos+0xb0>
 8014082:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014086:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014108 <__kernel_cos+0xb8>
 801408a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801408e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014110 <__kernel_cos+0xc0>
 8014092:	4b23      	ldr	r3, [pc, #140]	; (8014120 <__kernel_cos+0xd0>)
 8014094:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014098:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014118 <__kernel_cos+0xc8>
 801409c:	4299      	cmp	r1, r3
 801409e:	eea7 6b03 	vfma.f64	d6, d7, d3
 80140a2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80140a6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80140aa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80140ae:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80140b2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80140b6:	dc04      	bgt.n	80140c2 <__kernel_cos+0x72>
 80140b8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80140bc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80140c0:	4770      	bx	lr
 80140c2:	4b18      	ldr	r3, [pc, #96]	; (8014124 <__kernel_cos+0xd4>)
 80140c4:	4299      	cmp	r1, r3
 80140c6:	dc0d      	bgt.n	80140e4 <__kernel_cos+0x94>
 80140c8:	2200      	movs	r2, #0
 80140ca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80140ce:	ec43 2b15 	vmov	d5, r2, r3
 80140d2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80140d6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80140da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80140de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80140e2:	4770      	bx	lr
 80140e4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80140e8:	e7f3      	b.n	80140d2 <__kernel_cos+0x82>
 80140ea:	eeb0 0b44 	vmov.f64	d0, d4
 80140ee:	4770      	bx	lr
 80140f0:	be8838d4 	.word	0xbe8838d4
 80140f4:	bda8fae9 	.word	0xbda8fae9
 80140f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80140fc:	3e21ee9e 	.word	0x3e21ee9e
 8014100:	809c52ad 	.word	0x809c52ad
 8014104:	be927e4f 	.word	0xbe927e4f
 8014108:	19cb1590 	.word	0x19cb1590
 801410c:	3efa01a0 	.word	0x3efa01a0
 8014110:	16c15177 	.word	0x16c15177
 8014114:	bf56c16c 	.word	0xbf56c16c
 8014118:	5555554c 	.word	0x5555554c
 801411c:	3fa55555 	.word	0x3fa55555
 8014120:	3fd33332 	.word	0x3fd33332
 8014124:	3fe90000 	.word	0x3fe90000

08014128 <__kernel_rem_pio2>:
 8014128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801412c:	ed2d 8b06 	vpush	{d8-d10}
 8014130:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8014134:	460f      	mov	r7, r1
 8014136:	9002      	str	r0, [sp, #8]
 8014138:	49c5      	ldr	r1, [pc, #788]	; (8014450 <__kernel_rem_pio2+0x328>)
 801413a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801413c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8014140:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8014144:	9301      	str	r3, [sp, #4]
 8014146:	f112 0f14 	cmn.w	r2, #20
 801414a:	bfa8      	it	ge
 801414c:	2018      	movge	r0, #24
 801414e:	f103 31ff 	add.w	r1, r3, #4294967295
 8014152:	bfb8      	it	lt
 8014154:	2000      	movlt	r0, #0
 8014156:	f06f 0417 	mvn.w	r4, #23
 801415a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8014438 <__kernel_rem_pio2+0x310>
 801415e:	bfa4      	itt	ge
 8014160:	f1a2 0a03 	subge.w	sl, r2, #3
 8014164:	fb9a f0f0 	sdivge	r0, sl, r0
 8014168:	fb00 4404 	mla	r4, r0, r4, r4
 801416c:	1a46      	subs	r6, r0, r1
 801416e:	4414      	add	r4, r2
 8014170:	eb09 0c01 	add.w	ip, r9, r1
 8014174:	ad1a      	add	r5, sp, #104	; 0x68
 8014176:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801417a:	2200      	movs	r2, #0
 801417c:	4562      	cmp	r2, ip
 801417e:	dd10      	ble.n	80141a2 <__kernel_rem_pio2+0x7a>
 8014180:	9a01      	ldr	r2, [sp, #4]
 8014182:	ab1a      	add	r3, sp, #104	; 0x68
 8014184:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014188:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801418c:	f04f 0c00 	mov.w	ip, #0
 8014190:	45cc      	cmp	ip, r9
 8014192:	dc26      	bgt.n	80141e2 <__kernel_rem_pio2+0xba>
 8014194:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8014438 <__kernel_rem_pio2+0x310>
 8014198:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801419c:	4616      	mov	r6, r2
 801419e:	2500      	movs	r5, #0
 80141a0:	e015      	b.n	80141ce <__kernel_rem_pio2+0xa6>
 80141a2:	42d6      	cmn	r6, r2
 80141a4:	d409      	bmi.n	80141ba <__kernel_rem_pio2+0x92>
 80141a6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80141aa:	ee07 3a90 	vmov	s15, r3
 80141ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80141b2:	eca5 7b02 	vstmia	r5!, {d7}
 80141b6:	3201      	adds	r2, #1
 80141b8:	e7e0      	b.n	801417c <__kernel_rem_pio2+0x54>
 80141ba:	eeb0 7b46 	vmov.f64	d7, d6
 80141be:	e7f8      	b.n	80141b2 <__kernel_rem_pio2+0x8a>
 80141c0:	ecb8 5b02 	vldmia	r8!, {d5}
 80141c4:	ed96 6b00 	vldr	d6, [r6]
 80141c8:	3501      	adds	r5, #1
 80141ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 80141ce:	428d      	cmp	r5, r1
 80141d0:	f1a6 0608 	sub.w	r6, r6, #8
 80141d4:	ddf4      	ble.n	80141c0 <__kernel_rem_pio2+0x98>
 80141d6:	ecaa 7b02 	vstmia	sl!, {d7}
 80141da:	f10c 0c01 	add.w	ip, ip, #1
 80141de:	3208      	adds	r2, #8
 80141e0:	e7d6      	b.n	8014190 <__kernel_rem_pio2+0x68>
 80141e2:	ab06      	add	r3, sp, #24
 80141e4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8014440 <__kernel_rem_pio2+0x318>
 80141e8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8014448 <__kernel_rem_pio2+0x320>
 80141ec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80141f0:	9303      	str	r3, [sp, #12]
 80141f2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80141f6:	464d      	mov	r5, r9
 80141f8:	00eb      	lsls	r3, r5, #3
 80141fa:	9304      	str	r3, [sp, #16]
 80141fc:	ab92      	add	r3, sp, #584	; 0x248
 80141fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014202:	f10d 0b18 	add.w	fp, sp, #24
 8014206:	ab6a      	add	r3, sp, #424	; 0x1a8
 8014208:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801420c:	465e      	mov	r6, fp
 801420e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014212:	4628      	mov	r0, r5
 8014214:	2800      	cmp	r0, #0
 8014216:	f1a2 0208 	sub.w	r2, r2, #8
 801421a:	dc4c      	bgt.n	80142b6 <__kernel_rem_pio2+0x18e>
 801421c:	4620      	mov	r0, r4
 801421e:	9105      	str	r1, [sp, #20]
 8014220:	f000 fbf2 	bl	8014a08 <scalbn>
 8014224:	eeb0 8b40 	vmov.f64	d8, d0
 8014228:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801422c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014230:	f000 fb6e 	bl	8014910 <floor>
 8014234:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014238:	eea0 8b47 	vfms.f64	d8, d0, d7
 801423c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014240:	2c00      	cmp	r4, #0
 8014242:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8014246:	ee17 8a90 	vmov	r8, s15
 801424a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801424e:	9905      	ldr	r1, [sp, #20]
 8014250:	dd43      	ble.n	80142da <__kernel_rem_pio2+0x1b2>
 8014252:	1e68      	subs	r0, r5, #1
 8014254:	ab06      	add	r3, sp, #24
 8014256:	f1c4 0c18 	rsb	ip, r4, #24
 801425a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801425e:	fa46 f20c 	asr.w	r2, r6, ip
 8014262:	4490      	add	r8, r2
 8014264:	fa02 f20c 	lsl.w	r2, r2, ip
 8014268:	1ab6      	subs	r6, r6, r2
 801426a:	f1c4 0217 	rsb	r2, r4, #23
 801426e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8014272:	4116      	asrs	r6, r2
 8014274:	2e00      	cmp	r6, #0
 8014276:	dd3f      	ble.n	80142f8 <__kernel_rem_pio2+0x1d0>
 8014278:	f04f 0c00 	mov.w	ip, #0
 801427c:	f108 0801 	add.w	r8, r8, #1
 8014280:	4660      	mov	r0, ip
 8014282:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014286:	4565      	cmp	r5, ip
 8014288:	dc6e      	bgt.n	8014368 <__kernel_rem_pio2+0x240>
 801428a:	2c00      	cmp	r4, #0
 801428c:	dd04      	ble.n	8014298 <__kernel_rem_pio2+0x170>
 801428e:	2c01      	cmp	r4, #1
 8014290:	d07f      	beq.n	8014392 <__kernel_rem_pio2+0x26a>
 8014292:	2c02      	cmp	r4, #2
 8014294:	f000 8087 	beq.w	80143a6 <__kernel_rem_pio2+0x27e>
 8014298:	2e02      	cmp	r6, #2
 801429a:	d12d      	bne.n	80142f8 <__kernel_rem_pio2+0x1d0>
 801429c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80142a0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80142a4:	b340      	cbz	r0, 80142f8 <__kernel_rem_pio2+0x1d0>
 80142a6:	4620      	mov	r0, r4
 80142a8:	9105      	str	r1, [sp, #20]
 80142aa:	f000 fbad 	bl	8014a08 <scalbn>
 80142ae:	9905      	ldr	r1, [sp, #20]
 80142b0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80142b4:	e020      	b.n	80142f8 <__kernel_rem_pio2+0x1d0>
 80142b6:	ee20 7b09 	vmul.f64	d7, d0, d9
 80142ba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80142be:	3801      	subs	r0, #1
 80142c0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80142c4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80142c8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80142cc:	eca6 0a01 	vstmia	r6!, {s0}
 80142d0:	ed92 0b00 	vldr	d0, [r2]
 80142d4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80142d8:	e79c      	b.n	8014214 <__kernel_rem_pio2+0xec>
 80142da:	d105      	bne.n	80142e8 <__kernel_rem_pio2+0x1c0>
 80142dc:	1e6a      	subs	r2, r5, #1
 80142de:	ab06      	add	r3, sp, #24
 80142e0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80142e4:	15f6      	asrs	r6, r6, #23
 80142e6:	e7c5      	b.n	8014274 <__kernel_rem_pio2+0x14c>
 80142e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80142ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80142f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f4:	da36      	bge.n	8014364 <__kernel_rem_pio2+0x23c>
 80142f6:	2600      	movs	r6, #0
 80142f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80142fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014300:	f040 80aa 	bne.w	8014458 <__kernel_rem_pio2+0x330>
 8014304:	f105 3bff 	add.w	fp, r5, #4294967295
 8014308:	4658      	mov	r0, fp
 801430a:	2200      	movs	r2, #0
 801430c:	4548      	cmp	r0, r9
 801430e:	da52      	bge.n	80143b6 <__kernel_rem_pio2+0x28e>
 8014310:	2a00      	cmp	r2, #0
 8014312:	f000 8081 	beq.w	8014418 <__kernel_rem_pio2+0x2f0>
 8014316:	ab06      	add	r3, sp, #24
 8014318:	3c18      	subs	r4, #24
 801431a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 8087 	beq.w	8014432 <__kernel_rem_pio2+0x30a>
 8014324:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014328:	4620      	mov	r0, r4
 801432a:	f000 fb6d 	bl	8014a08 <scalbn>
 801432e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014332:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8014440 <__kernel_rem_pio2+0x318>
 8014336:	a96a      	add	r1, sp, #424	; 0x1a8
 8014338:	f103 0208 	add.w	r2, r3, #8
 801433c:	1888      	adds	r0, r1, r2
 801433e:	4659      	mov	r1, fp
 8014340:	2900      	cmp	r1, #0
 8014342:	f280 80b7 	bge.w	80144b4 <__kernel_rem_pio2+0x38c>
 8014346:	4659      	mov	r1, fp
 8014348:	2900      	cmp	r1, #0
 801434a:	f2c0 80d5 	blt.w	80144f8 <__kernel_rem_pio2+0x3d0>
 801434e:	a86a      	add	r0, sp, #424	; 0x1a8
 8014350:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8014354:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8014438 <__kernel_rem_pio2+0x310>
 8014358:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8014454 <__kernel_rem_pio2+0x32c>
 801435c:	2400      	movs	r4, #0
 801435e:	ebab 0001 	sub.w	r0, fp, r1
 8014362:	e0be      	b.n	80144e2 <__kernel_rem_pio2+0x3ba>
 8014364:	2602      	movs	r6, #2
 8014366:	e787      	b.n	8014278 <__kernel_rem_pio2+0x150>
 8014368:	f8db 2000 	ldr.w	r2, [fp]
 801436c:	b958      	cbnz	r0, 8014386 <__kernel_rem_pio2+0x25e>
 801436e:	b122      	cbz	r2, 801437a <__kernel_rem_pio2+0x252>
 8014370:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8014374:	f8cb 2000 	str.w	r2, [fp]
 8014378:	2201      	movs	r2, #1
 801437a:	f10c 0c01 	add.w	ip, ip, #1
 801437e:	f10b 0b04 	add.w	fp, fp, #4
 8014382:	4610      	mov	r0, r2
 8014384:	e77f      	b.n	8014286 <__kernel_rem_pio2+0x15e>
 8014386:	ebae 0202 	sub.w	r2, lr, r2
 801438a:	f8cb 2000 	str.w	r2, [fp]
 801438e:	4602      	mov	r2, r0
 8014390:	e7f3      	b.n	801437a <__kernel_rem_pio2+0x252>
 8014392:	f105 3cff 	add.w	ip, r5, #4294967295
 8014396:	ab06      	add	r3, sp, #24
 8014398:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801439c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80143a0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80143a4:	e778      	b.n	8014298 <__kernel_rem_pio2+0x170>
 80143a6:	f105 3cff 	add.w	ip, r5, #4294967295
 80143aa:	ab06      	add	r3, sp, #24
 80143ac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80143b0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80143b4:	e7f4      	b.n	80143a0 <__kernel_rem_pio2+0x278>
 80143b6:	ab06      	add	r3, sp, #24
 80143b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143bc:	3801      	subs	r0, #1
 80143be:	431a      	orrs	r2, r3
 80143c0:	e7a4      	b.n	801430c <__kernel_rem_pio2+0x1e4>
 80143c2:	f10c 0c01 	add.w	ip, ip, #1
 80143c6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80143ca:	2800      	cmp	r0, #0
 80143cc:	d0f9      	beq.n	80143c2 <__kernel_rem_pio2+0x29a>
 80143ce:	9b04      	ldr	r3, [sp, #16]
 80143d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80143d4:	eb0d 0203 	add.w	r2, sp, r3
 80143d8:	9b01      	ldr	r3, [sp, #4]
 80143da:	18e8      	adds	r0, r5, r3
 80143dc:	ab1a      	add	r3, sp, #104	; 0x68
 80143de:	1c6e      	adds	r6, r5, #1
 80143e0:	3a98      	subs	r2, #152	; 0x98
 80143e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80143e6:	4465      	add	r5, ip
 80143e8:	42b5      	cmp	r5, r6
 80143ea:	f6ff af05 	blt.w	80141f8 <__kernel_rem_pio2+0xd0>
 80143ee:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80143f2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80143f6:	ee07 3a90 	vmov	s15, r3
 80143fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80143fe:	f04f 0c00 	mov.w	ip, #0
 8014402:	eca0 7b02 	vstmia	r0!, {d7}
 8014406:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014438 <__kernel_rem_pio2+0x310>
 801440a:	4680      	mov	r8, r0
 801440c:	458c      	cmp	ip, r1
 801440e:	dd07      	ble.n	8014420 <__kernel_rem_pio2+0x2f8>
 8014410:	eca2 7b02 	vstmia	r2!, {d7}
 8014414:	3601      	adds	r6, #1
 8014416:	e7e7      	b.n	80143e8 <__kernel_rem_pio2+0x2c0>
 8014418:	9a03      	ldr	r2, [sp, #12]
 801441a:	f04f 0c01 	mov.w	ip, #1
 801441e:	e7d2      	b.n	80143c6 <__kernel_rem_pio2+0x29e>
 8014420:	ecbe 5b02 	vldmia	lr!, {d5}
 8014424:	ed38 6b02 	vldmdb	r8!, {d6}
 8014428:	f10c 0c01 	add.w	ip, ip, #1
 801442c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014430:	e7ec      	b.n	801440c <__kernel_rem_pio2+0x2e4>
 8014432:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014436:	e76e      	b.n	8014316 <__kernel_rem_pio2+0x1ee>
	...
 8014444:	3e700000 	.word	0x3e700000
 8014448:	00000000 	.word	0x00000000
 801444c:	41700000 	.word	0x41700000
 8014450:	0801ecb0 	.word	0x0801ecb0
 8014454:	0801ec70 	.word	0x0801ec70
 8014458:	4260      	negs	r0, r4
 801445a:	eeb0 0b48 	vmov.f64	d0, d8
 801445e:	f000 fad3 	bl	8014a08 <scalbn>
 8014462:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8014640 <__kernel_rem_pio2+0x518>
 8014466:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446e:	db18      	blt.n	80144a2 <__kernel_rem_pio2+0x37a>
 8014470:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8014648 <__kernel_rem_pio2+0x520>
 8014474:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014478:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801447c:	aa06      	add	r2, sp, #24
 801447e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8014482:	eea5 0b46 	vfms.f64	d0, d5, d6
 8014486:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801448a:	f105 0b01 	add.w	fp, r5, #1
 801448e:	ee10 3a10 	vmov	r3, s0
 8014492:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8014496:	ee17 3a10 	vmov	r3, s14
 801449a:	3418      	adds	r4, #24
 801449c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80144a0:	e740      	b.n	8014324 <__kernel_rem_pio2+0x1fc>
 80144a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80144a6:	aa06      	add	r2, sp, #24
 80144a8:	ee10 3a10 	vmov	r3, s0
 80144ac:	46ab      	mov	fp, r5
 80144ae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80144b2:	e737      	b.n	8014324 <__kernel_rem_pio2+0x1fc>
 80144b4:	ac06      	add	r4, sp, #24
 80144b6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80144ba:	9401      	str	r4, [sp, #4]
 80144bc:	ee07 4a90 	vmov	s15, r4
 80144c0:	3901      	subs	r1, #1
 80144c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80144c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 80144ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 80144ce:	ed20 7b02 	vstmdb	r0!, {d7}
 80144d2:	e735      	b.n	8014340 <__kernel_rem_pio2+0x218>
 80144d4:	ecbc 5b02 	vldmia	ip!, {d5}
 80144d8:	ecb5 6b02 	vldmia	r5!, {d6}
 80144dc:	3401      	adds	r4, #1
 80144de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80144e2:	454c      	cmp	r4, r9
 80144e4:	dc01      	bgt.n	80144ea <__kernel_rem_pio2+0x3c2>
 80144e6:	4284      	cmp	r4, r0
 80144e8:	ddf4      	ble.n	80144d4 <__kernel_rem_pio2+0x3ac>
 80144ea:	ac42      	add	r4, sp, #264	; 0x108
 80144ec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80144f0:	ed80 7b00 	vstr	d7, [r0]
 80144f4:	3901      	subs	r1, #1
 80144f6:	e727      	b.n	8014348 <__kernel_rem_pio2+0x220>
 80144f8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80144fa:	2902      	cmp	r1, #2
 80144fc:	dc0a      	bgt.n	8014514 <__kernel_rem_pio2+0x3ec>
 80144fe:	2900      	cmp	r1, #0
 8014500:	dc2c      	bgt.n	801455c <__kernel_rem_pio2+0x434>
 8014502:	d045      	beq.n	8014590 <__kernel_rem_pio2+0x468>
 8014504:	f008 0007 	and.w	r0, r8, #7
 8014508:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801450c:	ecbd 8b06 	vpop	{d8-d10}
 8014510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014514:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8014516:	2a03      	cmp	r2, #3
 8014518:	d1f4      	bne.n	8014504 <__kernel_rem_pio2+0x3dc>
 801451a:	aa42      	add	r2, sp, #264	; 0x108
 801451c:	4413      	add	r3, r2
 801451e:	461a      	mov	r2, r3
 8014520:	4619      	mov	r1, r3
 8014522:	4658      	mov	r0, fp
 8014524:	2800      	cmp	r0, #0
 8014526:	f1a1 0108 	sub.w	r1, r1, #8
 801452a:	dc54      	bgt.n	80145d6 <__kernel_rem_pio2+0x4ae>
 801452c:	4659      	mov	r1, fp
 801452e:	2901      	cmp	r1, #1
 8014530:	f1a2 0208 	sub.w	r2, r2, #8
 8014534:	dc5f      	bgt.n	80145f6 <__kernel_rem_pio2+0x4ce>
 8014536:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8014650 <__kernel_rem_pio2+0x528>
 801453a:	3308      	adds	r3, #8
 801453c:	f1bb 0f01 	cmp.w	fp, #1
 8014540:	dc69      	bgt.n	8014616 <__kernel_rem_pio2+0x4ee>
 8014542:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8014546:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801454a:	2e00      	cmp	r6, #0
 801454c:	d16a      	bne.n	8014624 <__kernel_rem_pio2+0x4fc>
 801454e:	ed87 5b00 	vstr	d5, [r7]
 8014552:	ed87 6b02 	vstr	d6, [r7, #8]
 8014556:	ed87 7b04 	vstr	d7, [r7, #16]
 801455a:	e7d3      	b.n	8014504 <__kernel_rem_pio2+0x3dc>
 801455c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014650 <__kernel_rem_pio2+0x528>
 8014560:	ab42      	add	r3, sp, #264	; 0x108
 8014562:	441a      	add	r2, r3
 8014564:	465b      	mov	r3, fp
 8014566:	2b00      	cmp	r3, #0
 8014568:	da26      	bge.n	80145b8 <__kernel_rem_pio2+0x490>
 801456a:	b35e      	cbz	r6, 80145c4 <__kernel_rem_pio2+0x49c>
 801456c:	eeb1 7b46 	vneg.f64	d7, d6
 8014570:	ed87 7b00 	vstr	d7, [r7]
 8014574:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8014578:	aa44      	add	r2, sp, #272	; 0x110
 801457a:	2301      	movs	r3, #1
 801457c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014580:	459b      	cmp	fp, r3
 8014582:	da22      	bge.n	80145ca <__kernel_rem_pio2+0x4a2>
 8014584:	b10e      	cbz	r6, 801458a <__kernel_rem_pio2+0x462>
 8014586:	eeb1 7b47 	vneg.f64	d7, d7
 801458a:	ed87 7b02 	vstr	d7, [r7, #8]
 801458e:	e7b9      	b.n	8014504 <__kernel_rem_pio2+0x3dc>
 8014590:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014650 <__kernel_rem_pio2+0x528>
 8014594:	ab42      	add	r3, sp, #264	; 0x108
 8014596:	441a      	add	r2, r3
 8014598:	f1bb 0f00 	cmp.w	fp, #0
 801459c:	da05      	bge.n	80145aa <__kernel_rem_pio2+0x482>
 801459e:	b10e      	cbz	r6, 80145a4 <__kernel_rem_pio2+0x47c>
 80145a0:	eeb1 7b47 	vneg.f64	d7, d7
 80145a4:	ed87 7b00 	vstr	d7, [r7]
 80145a8:	e7ac      	b.n	8014504 <__kernel_rem_pio2+0x3dc>
 80145aa:	ed32 6b02 	vldmdb	r2!, {d6}
 80145ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80145b6:	e7ef      	b.n	8014598 <__kernel_rem_pio2+0x470>
 80145b8:	ed32 7b02 	vldmdb	r2!, {d7}
 80145bc:	3b01      	subs	r3, #1
 80145be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80145c2:	e7d0      	b.n	8014566 <__kernel_rem_pio2+0x43e>
 80145c4:	eeb0 7b46 	vmov.f64	d7, d6
 80145c8:	e7d2      	b.n	8014570 <__kernel_rem_pio2+0x448>
 80145ca:	ecb2 6b02 	vldmia	r2!, {d6}
 80145ce:	3301      	adds	r3, #1
 80145d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80145d4:	e7d4      	b.n	8014580 <__kernel_rem_pio2+0x458>
 80145d6:	ed91 7b00 	vldr	d7, [r1]
 80145da:	ed91 5b02 	vldr	d5, [r1, #8]
 80145de:	3801      	subs	r0, #1
 80145e0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80145e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80145e8:	ed81 6b00 	vstr	d6, [r1]
 80145ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80145f0:	ed81 7b02 	vstr	d7, [r1, #8]
 80145f4:	e796      	b.n	8014524 <__kernel_rem_pio2+0x3fc>
 80145f6:	ed92 7b00 	vldr	d7, [r2]
 80145fa:	ed92 5b02 	vldr	d5, [r2, #8]
 80145fe:	3901      	subs	r1, #1
 8014600:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014604:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014608:	ed82 6b00 	vstr	d6, [r2]
 801460c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014610:	ed82 7b02 	vstr	d7, [r2, #8]
 8014614:	e78b      	b.n	801452e <__kernel_rem_pio2+0x406>
 8014616:	ed33 6b02 	vldmdb	r3!, {d6}
 801461a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801461e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014622:	e78b      	b.n	801453c <__kernel_rem_pio2+0x414>
 8014624:	eeb1 5b45 	vneg.f64	d5, d5
 8014628:	eeb1 6b46 	vneg.f64	d6, d6
 801462c:	ed87 5b00 	vstr	d5, [r7]
 8014630:	eeb1 7b47 	vneg.f64	d7, d7
 8014634:	ed87 6b02 	vstr	d6, [r7, #8]
 8014638:	e78d      	b.n	8014556 <__kernel_rem_pio2+0x42e>
 801463a:	bf00      	nop
 801463c:	f3af 8000 	nop.w
 8014640:	00000000 	.word	0x00000000
 8014644:	41700000 	.word	0x41700000
 8014648:	00000000 	.word	0x00000000
 801464c:	3e700000 	.word	0x3e700000
	...

08014658 <__kernel_sin>:
 8014658:	ee10 3a90 	vmov	r3, s1
 801465c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014660:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014664:	da04      	bge.n	8014670 <__kernel_sin+0x18>
 8014666:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801466a:	ee17 3a90 	vmov	r3, s15
 801466e:	b35b      	cbz	r3, 80146c8 <__kernel_sin+0x70>
 8014670:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014674:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014678:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80146d0 <__kernel_sin+0x78>
 801467c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80146d8 <__kernel_sin+0x80>
 8014680:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014684:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80146e0 <__kernel_sin+0x88>
 8014688:	eea4 7b06 	vfma.f64	d7, d4, d6
 801468c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80146e8 <__kernel_sin+0x90>
 8014690:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014694:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80146f0 <__kernel_sin+0x98>
 8014698:	eea4 7b06 	vfma.f64	d7, d4, d6
 801469c:	b930      	cbnz	r0, 80146ac <__kernel_sin+0x54>
 801469e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80146f8 <__kernel_sin+0xa0>
 80146a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80146a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80146aa:	4770      	bx	lr
 80146ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80146b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80146b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80146b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80146bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8014700 <__kernel_sin+0xa8>
 80146c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80146c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80146c8:	4770      	bx	lr
 80146ca:	bf00      	nop
 80146cc:	f3af 8000 	nop.w
 80146d0:	5acfd57c 	.word	0x5acfd57c
 80146d4:	3de5d93a 	.word	0x3de5d93a
 80146d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80146dc:	be5ae5e6 	.word	0xbe5ae5e6
 80146e0:	57b1fe7d 	.word	0x57b1fe7d
 80146e4:	3ec71de3 	.word	0x3ec71de3
 80146e8:	19c161d5 	.word	0x19c161d5
 80146ec:	bf2a01a0 	.word	0xbf2a01a0
 80146f0:	1110f8a6 	.word	0x1110f8a6
 80146f4:	3f811111 	.word	0x3f811111
 80146f8:	55555549 	.word	0x55555549
 80146fc:	bfc55555 	.word	0xbfc55555
 8014700:	55555549 	.word	0x55555549
 8014704:	3fc55555 	.word	0x3fc55555

08014708 <log>:
 8014708:	b470      	push	{r4, r5, r6}
 801470a:	ee10 1a90 	vmov	r1, s1
 801470e:	ee10 2a10 	vmov	r2, s0
 8014712:	f04f 34ff 	mov.w	r4, #4294967295
 8014716:	4294      	cmp	r4, r2
 8014718:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 801471c:	4c72      	ldr	r4, [pc, #456]	; (80148e8 <log+0x1e0>)
 801471e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8014722:	eb74 0000 	sbcs.w	r0, r4, r0
 8014726:	ed2d 8b02 	vpush	{d8}
 801472a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 801472e:	d35c      	bcc.n	80147ea <log+0xe2>
 8014730:	4b6e      	ldr	r3, [pc, #440]	; (80148ec <log+0x1e4>)
 8014732:	4299      	cmp	r1, r3
 8014734:	bf08      	it	eq
 8014736:	2a00      	cmpeq	r2, #0
 8014738:	f000 80c6 	beq.w	80148c8 <log+0x1c0>
 801473c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014740:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014744:	4b6a      	ldr	r3, [pc, #424]	; (80148f0 <log+0x1e8>)
 8014746:	ee20 2b00 	vmul.f64	d2, d0, d0
 801474a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801474e:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014752:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8014756:	eea6 7b00 	vfma.f64	d7, d6, d0
 801475a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 801475e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8014762:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014766:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 801476a:	eea5 6b00 	vfma.f64	d6, d5, d0
 801476e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8014772:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8014776:	eea5 6b02 	vfma.f64	d6, d5, d2
 801477a:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 801477e:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014782:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8014786:	eea3 5b02 	vfma.f64	d5, d3, d2
 801478a:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 801478e:	eeb0 2b40 	vmov.f64	d2, d0
 8014792:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014796:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801479a:	eea5 6b04 	vfma.f64	d6, d5, d4
 801479e:	eea6 7b04 	vfma.f64	d7, d6, d4
 80147a2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80148d0 <log+0x1c8>
 80147a6:	eeb0 1b47 	vmov.f64	d1, d7
 80147aa:	eeb0 5b40 	vmov.f64	d5, d0
 80147ae:	eea0 5b06 	vfma.f64	d5, d0, d6
 80147b2:	eea0 5b46 	vfms.f64	d5, d0, d6
 80147b6:	ee30 8b45 	vsub.f64	d8, d0, d5
 80147ba:	ee25 7b05 	vmul.f64	d7, d5, d5
 80147be:	ee30 5b05 	vadd.f64	d5, d0, d5
 80147c2:	eea7 2b03 	vfma.f64	d2, d7, d3
 80147c6:	ee30 6b42 	vsub.f64	d6, d0, d2
 80147ca:	eea7 6b03 	vfma.f64	d6, d7, d3
 80147ce:	ee23 3b08 	vmul.f64	d3, d3, d8
 80147d2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80147d6:	eeb0 0b46 	vmov.f64	d0, d6
 80147da:	eea1 0b04 	vfma.f64	d0, d1, d4
 80147de:	ee32 0b00 	vadd.f64	d0, d2, d0
 80147e2:	ecbd 8b02 	vpop	{d8}
 80147e6:	bc70      	pop	{r4, r5, r6}
 80147e8:	4770      	bx	lr
 80147ea:	f1a3 0410 	sub.w	r4, r3, #16
 80147ee:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80147f2:	4284      	cmp	r4, r0
 80147f4:	d923      	bls.n	801483e <log+0x136>
 80147f6:	1894      	adds	r4, r2, r2
 80147f8:	eb41 0001 	adc.w	r0, r1, r1
 80147fc:	4320      	orrs	r0, r4
 80147fe:	d105      	bne.n	801480c <log+0x104>
 8014800:	ecbd 8b02 	vpop	{d8}
 8014804:	2001      	movs	r0, #1
 8014806:	bc70      	pop	{r4, r5, r6}
 8014808:	f7ff b95e 	b.w	8013ac8 <__math_divzero>
 801480c:	4839      	ldr	r0, [pc, #228]	; (80148f4 <log+0x1ec>)
 801480e:	4281      	cmp	r1, r0
 8014810:	bf08      	it	eq
 8014812:	2a00      	cmpeq	r2, #0
 8014814:	d0e5      	beq.n	80147e2 <log+0xda>
 8014816:	041a      	lsls	r2, r3, #16
 8014818:	d404      	bmi.n	8014824 <log+0x11c>
 801481a:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 801481e:	ea32 0303 	bics.w	r3, r2, r3
 8014822:	d104      	bne.n	801482e <log+0x126>
 8014824:	ecbd 8b02 	vpop	{d8}
 8014828:	bc70      	pop	{r4, r5, r6}
 801482a:	f7ff b965 	b.w	8013af8 <__math_invalid>
 801482e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80148d8 <log+0x1d0>
 8014832:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014836:	ec53 2b17 	vmov	r2, r3, d7
 801483a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 801483e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8014842:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8014846:	0d1e      	lsrs	r6, r3, #20
 8014848:	1e14      	subs	r4, r2, #0
 801484a:	4a29      	ldr	r2, [pc, #164]	; (80148f0 <log+0x1e8>)
 801484c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8014850:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8014854:	0536      	lsls	r6, r6, #20
 8014856:	1b8d      	subs	r5, r1, r6
 8014858:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 801485c:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8014860:	ec45 4b16 	vmov	d6, r4, r5
 8014864:	151b      	asrs	r3, r3, #20
 8014866:	eea6 5b07 	vfma.f64	d5, d6, d7
 801486a:	ee07 3a90 	vmov	s15, r3
 801486e:	ee25 2b05 	vmul.f64	d2, d5, d5
 8014872:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014876:	ed92 4b00 	vldr	d4, [r2]
 801487a:	ee25 1b02 	vmul.f64	d1, d5, d2
 801487e:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8014882:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014886:	ee35 4b07 	vadd.f64	d4, d5, d7
 801488a:	ee37 0b44 	vsub.f64	d0, d7, d4
 801488e:	ed92 7b02 	vldr	d7, [r2, #8]
 8014892:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014896:	eea7 0b06 	vfma.f64	d0, d7, d6
 801489a:	ed92 7b04 	vldr	d7, [r2, #16]
 801489e:	ed92 6b08 	vldr	d6, [r2, #32]
 80148a2:	eea7 0b02 	vfma.f64	d0, d7, d2
 80148a6:	ed92 7b06 	vldr	d7, [r2, #24]
 80148aa:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 80148ae:	eea6 7b05 	vfma.f64	d7, d6, d5
 80148b2:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 80148b6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80148ba:	eea6 7b02 	vfma.f64	d7, d6, d2
 80148be:	eea1 0b07 	vfma.f64	d0, d1, d7
 80148c2:	ee30 0b04 	vadd.f64	d0, d0, d4
 80148c6:	e78c      	b.n	80147e2 <log+0xda>
 80148c8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80148e0 <log+0x1d8>
 80148cc:	e789      	b.n	80147e2 <log+0xda>
 80148ce:	bf00      	nop
 80148d0:	00000000 	.word	0x00000000
 80148d4:	41a00000 	.word	0x41a00000
 80148d8:	00000000 	.word	0x00000000
 80148dc:	43300000 	.word	0x43300000
	...
 80148e8:	000308ff 	.word	0x000308ff
 80148ec:	3ff00000 	.word	0x3ff00000
 80148f0:	0801ecc0 	.word	0x0801ecc0
 80148f4:	7ff00000 	.word	0x7ff00000

080148f8 <fabs>:
 80148f8:	ec51 0b10 	vmov	r0, r1, d0
 80148fc:	ee10 2a10 	vmov	r2, s0
 8014900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014904:	ec43 2b10 	vmov	d0, r2, r3
 8014908:	4770      	bx	lr
 801490a:	0000      	movs	r0, r0
 801490c:	0000      	movs	r0, r0
	...

08014910 <floor>:
 8014910:	ee10 1a90 	vmov	r1, s1
 8014914:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014918:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801491c:	2b13      	cmp	r3, #19
 801491e:	b530      	push	{r4, r5, lr}
 8014920:	ee10 0a10 	vmov	r0, s0
 8014924:	ee10 5a10 	vmov	r5, s0
 8014928:	dc31      	bgt.n	801498e <floor+0x7e>
 801492a:	2b00      	cmp	r3, #0
 801492c:	da15      	bge.n	801495a <floor+0x4a>
 801492e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80149e8 <floor+0xd8>
 8014932:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014936:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801493e:	dd07      	ble.n	8014950 <floor+0x40>
 8014940:	2900      	cmp	r1, #0
 8014942:	da4e      	bge.n	80149e2 <floor+0xd2>
 8014944:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014948:	4318      	orrs	r0, r3
 801494a:	d001      	beq.n	8014950 <floor+0x40>
 801494c:	4928      	ldr	r1, [pc, #160]	; (80149f0 <floor+0xe0>)
 801494e:	2000      	movs	r0, #0
 8014950:	460b      	mov	r3, r1
 8014952:	4602      	mov	r2, r0
 8014954:	ec43 2b10 	vmov	d0, r2, r3
 8014958:	e020      	b.n	801499c <floor+0x8c>
 801495a:	4a26      	ldr	r2, [pc, #152]	; (80149f4 <floor+0xe4>)
 801495c:	411a      	asrs	r2, r3
 801495e:	ea01 0402 	and.w	r4, r1, r2
 8014962:	4304      	orrs	r4, r0
 8014964:	d01a      	beq.n	801499c <floor+0x8c>
 8014966:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80149e8 <floor+0xd8>
 801496a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801496e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014976:	ddeb      	ble.n	8014950 <floor+0x40>
 8014978:	2900      	cmp	r1, #0
 801497a:	bfbe      	ittt	lt
 801497c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8014980:	fa40 f303 	asrlt.w	r3, r0, r3
 8014984:	18c9      	addlt	r1, r1, r3
 8014986:	ea21 0102 	bic.w	r1, r1, r2
 801498a:	2000      	movs	r0, #0
 801498c:	e7e0      	b.n	8014950 <floor+0x40>
 801498e:	2b33      	cmp	r3, #51	; 0x33
 8014990:	dd05      	ble.n	801499e <floor+0x8e>
 8014992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014996:	d101      	bne.n	801499c <floor+0x8c>
 8014998:	ee30 0b00 	vadd.f64	d0, d0, d0
 801499c:	bd30      	pop	{r4, r5, pc}
 801499e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80149a2:	f04f 32ff 	mov.w	r2, #4294967295
 80149a6:	40e2      	lsrs	r2, r4
 80149a8:	4202      	tst	r2, r0
 80149aa:	d0f7      	beq.n	801499c <floor+0x8c>
 80149ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80149e8 <floor+0xd8>
 80149b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80149b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80149b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149bc:	ddc8      	ble.n	8014950 <floor+0x40>
 80149be:	2900      	cmp	r1, #0
 80149c0:	da02      	bge.n	80149c8 <floor+0xb8>
 80149c2:	2b14      	cmp	r3, #20
 80149c4:	d103      	bne.n	80149ce <floor+0xbe>
 80149c6:	3101      	adds	r1, #1
 80149c8:	ea20 0002 	bic.w	r0, r0, r2
 80149cc:	e7c0      	b.n	8014950 <floor+0x40>
 80149ce:	2401      	movs	r4, #1
 80149d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80149d4:	fa04 f303 	lsl.w	r3, r4, r3
 80149d8:	4418      	add	r0, r3
 80149da:	42a8      	cmp	r0, r5
 80149dc:	bf38      	it	cc
 80149de:	1909      	addcc	r1, r1, r4
 80149e0:	e7f2      	b.n	80149c8 <floor+0xb8>
 80149e2:	2000      	movs	r0, #0
 80149e4:	4601      	mov	r1, r0
 80149e6:	e7b3      	b.n	8014950 <floor+0x40>
 80149e8:	8800759c 	.word	0x8800759c
 80149ec:	7e37e43c 	.word	0x7e37e43c
 80149f0:	bff00000 	.word	0xbff00000
 80149f4:	000fffff 	.word	0x000fffff

080149f8 <nan>:
 80149f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014a00 <nan+0x8>
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop
 8014a00:	00000000 	.word	0x00000000
 8014a04:	7ff80000 	.word	0x7ff80000

08014a08 <scalbn>:
 8014a08:	ee10 1a90 	vmov	r1, s1
 8014a0c:	b510      	push	{r4, lr}
 8014a0e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014a12:	b98c      	cbnz	r4, 8014a38 <scalbn+0x30>
 8014a14:	ee10 3a10 	vmov	r3, s0
 8014a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014a1c:	430b      	orrs	r3, r1
 8014a1e:	d011      	beq.n	8014a44 <scalbn+0x3c>
 8014a20:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8014ae8 <scalbn+0xe0>
 8014a24:	4b3c      	ldr	r3, [pc, #240]	; (8014b18 <scalbn+0x110>)
 8014a26:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a2a:	4298      	cmp	r0, r3
 8014a2c:	da0b      	bge.n	8014a46 <scalbn+0x3e>
 8014a2e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014af0 <scalbn+0xe8>
 8014a32:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a36:	e005      	b.n	8014a44 <scalbn+0x3c>
 8014a38:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8014a3c:	429c      	cmp	r4, r3
 8014a3e:	d107      	bne.n	8014a50 <scalbn+0x48>
 8014a40:	ee30 0b00 	vadd.f64	d0, d0, d0
 8014a44:	bd10      	pop	{r4, pc}
 8014a46:	ee10 1a90 	vmov	r1, s1
 8014a4a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8014a4e:	3c36      	subs	r4, #54	; 0x36
 8014a50:	4404      	add	r4, r0
 8014a52:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8014a56:	429c      	cmp	r4, r3
 8014a58:	dd0d      	ble.n	8014a76 <scalbn+0x6e>
 8014a5a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8014af8 <scalbn+0xf0>
 8014a5e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8014b00 <scalbn+0xf8>
 8014a62:	eeb0 6b47 	vmov.f64	d6, d7
 8014a66:	ee10 3a90 	vmov	r3, s1
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014a70:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014a74:	e7e6      	b.n	8014a44 <scalbn+0x3c>
 8014a76:	2c00      	cmp	r4, #0
 8014a78:	dd0a      	ble.n	8014a90 <scalbn+0x88>
 8014a7a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8014a7e:	ec53 2b10 	vmov	r2, r3, d0
 8014a82:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8014a86:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8014a8a:	ec43 2b10 	vmov	d0, r2, r3
 8014a8e:	e7d9      	b.n	8014a44 <scalbn+0x3c>
 8014a90:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8014a94:	da19      	bge.n	8014aca <scalbn+0xc2>
 8014a96:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a9a:	4298      	cmp	r0, r3
 8014a9c:	ee10 3a90 	vmov	r3, s1
 8014aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014aa4:	dd09      	ble.n	8014aba <scalbn+0xb2>
 8014aa6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8014af8 <scalbn+0xf0>
 8014aaa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8014b00 <scalbn+0xf8>
 8014aae:	eeb0 7b40 	vmov.f64	d7, d0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8014ab8:	e7bb      	b.n	8014a32 <scalbn+0x2a>
 8014aba:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8014af0 <scalbn+0xe8>
 8014abe:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8014b08 <scalbn+0x100>
 8014ac2:	eeb0 7b40 	vmov.f64	d7, d0
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	e7f4      	b.n	8014ab4 <scalbn+0xac>
 8014aca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8014ace:	ec53 2b10 	vmov	r2, r3, d0
 8014ad2:	3436      	adds	r4, #54	; 0x36
 8014ad4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8014ad8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8014adc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8014b10 <scalbn+0x108>
 8014ae0:	ec43 2b10 	vmov	d0, r2, r3
 8014ae4:	e7a5      	b.n	8014a32 <scalbn+0x2a>
 8014ae6:	bf00      	nop
 8014ae8:	00000000 	.word	0x00000000
 8014aec:	43500000 	.word	0x43500000
 8014af0:	c2f8f359 	.word	0xc2f8f359
 8014af4:	01a56e1f 	.word	0x01a56e1f
 8014af8:	8800759c 	.word	0x8800759c
 8014afc:	7e37e43c 	.word	0x7e37e43c
 8014b00:	8800759c 	.word	0x8800759c
 8014b04:	fe37e43c 	.word	0xfe37e43c
 8014b08:	c2f8f359 	.word	0xc2f8f359
 8014b0c:	81a56e1f 	.word	0x81a56e1f
 8014b10:	00000000 	.word	0x00000000
 8014b14:	3c900000 	.word	0x3c900000
 8014b18:	ffff3cb0 	.word	0xffff3cb0

08014b1c <_init>:
 8014b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b1e:	bf00      	nop
 8014b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b22:	bc08      	pop	{r3}
 8014b24:	469e      	mov	lr, r3
 8014b26:	4770      	bx	lr

08014b28 <_fini>:
 8014b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2a:	bf00      	nop
 8014b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b2e:	bc08      	pop	{r3}
 8014b30:	469e      	mov	lr, r3
 8014b32:	4770      	bx	lr
