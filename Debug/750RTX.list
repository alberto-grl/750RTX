
750RTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001015c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005458  08010400  08010400  00020400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015858  08015858  0004f000  2**0
                  CONTENTS
  4 .ARM          00000008  08015858  08015858  00025858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015860  08015860  0004f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015860  08015860  00025860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015864  08015864  00025864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000554  24000000  08015868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb60  24000560  08015dbc  00030560  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2400f0c0  08015dbc  0003f0c0  2**0
                  ALLOC
 11 .dtcm         0000f000  20000000  20000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049235  00000000  00000000  0004f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000794b  00000000  00000000  00098263  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002300a  00000000  00000000  0009fbae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001980  00000000  00000000  000c2bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004ea0  00000000  00000000  000c4538  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003eadd  00000000  00000000  000c93d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00023c67  00000000  00000000  00107eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00181b29  00000000  00000000  0012bb1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000e9  00000000  00000000  002ad645  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066d8  00000000  00000000  002ad730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000560 	.word	0x24000560
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080103e4 	.word	0x080103e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000564 	.word	0x24000564
 80002dc:	080103e4 	.word	0x080103e4

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <Load_Presets>:



// Load from the Presets table
void Load_Presets(void)
{
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <Load_Presets+0x40>)
 8000752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000756:	4c0f      	ldr	r4, [pc, #60]	; (8000794 <Load_Presets+0x44>)
 8000758:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800075c:	4f0e      	ldr	r7, [pc, #56]	; (8000798 <Load_Presets+0x48>)
 800075e:	4e0f      	ldr	r6, [pc, #60]	; (800079c <Load_Presets+0x4c>)
 8000760:	4d0f      	ldr	r5, [pc, #60]	; (80007a0 <Load_Presets+0x50>)
	int k;

	for(k=0; k<MAXPRESETS; k++)
	{
		strcpy(psets[k].name, pNames[k]);
 8000762:	4621      	mov	r1, r4
 8000764:	4618      	mov	r0, r3
 8000766:	f00c fe1b 	bl	800d3a0 <strcpy>
		psets[k].freq = pFreqs[k];
		psets[k].mode = pModes[k];
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		strcpy(psets[k].name, pNames[k]);
 800076e:	4603      	mov	r3, r0
		psets[k].bw   = pBws[k];
 8000770:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		psets[k].freq = pFreqs[k];
 8000774:	f857 0b04 	ldr.w	r0, [r7], #4
 8000778:	3410      	adds	r4, #16
		psets[k].mode = pModes[k];
 800077a:	7519      	strb	r1, [r3, #20]
 800077c:	3318      	adds	r3, #24
		psets[k].freq = pFreqs[k];
 800077e:	f843 0c08 	str.w	r0, [r3, #-8]
		psets[k].bw   = pBws[k];
 8000782:	f803 2c03 	strb.w	r2, [r3, #-3]
	for(k=0; k<MAXPRESETS; k++)
 8000786:	4543      	cmp	r3, r8
 8000788:	d1eb      	bne.n	8000762 <Load_Presets+0x12>
	}
}
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	240088e0 	.word	0x240088e0
 8000794:	24000000 	.word	0x24000000
 8000798:	08012410 	.word	0x08012410
 800079c:	08012447 	.word	0x08012447
 80007a0:	080123ff 	.word	0x080123ff

080007a4 <Tune_Preset>:
//-----------------------------------------------------------------------------
// Tune to the chosen preset
void Tune_Preset(uint8_t Idx)
{
 80007a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int kHz, Hz;

	LOfreq = psets[Idx].freq;
 80007a8:	0044      	lsls	r4, r0, #1
 80007aa:	4e5e      	ldr	r6, [pc, #376]	; (8000924 <Tune_Preset+0x180>)
 80007ac:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <Tune_Preset+0x184>)
{
 80007ae:	4605      	mov	r5, r0
	LOfreq = psets[Idx].freq;
 80007b0:	1823      	adds	r3, r4, r0
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 80007b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000958 <Tune_Preset+0x1b4>
	LOfreq = psets[Idx].freq;
 80007b6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80007ba:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 80007bc:	7d1b      	ldrb	r3, [r3, #20]
	LOfreq = psets[Idx].freq;
 80007be:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80007c0:	f888 3000 	strb.w	r3, [r8]

	switch(CurrentMode)
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d812      	bhi.n	80007ee <Tune_Preset+0x4a>
 80007c8:	e8df f003 	tbb	[pc, r3]
 80007cc:	02205031 	.word	0x02205031
		//     ChangeColor(ptr, hUSB, GUI_RED);
		//     ChangeColor(ptr, hCW,  GUI_BLACK);
		break;

	case CW  :
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80007d0:	4b56      	ldr	r3, [pc, #344]	; (800092c <Tune_Preset+0x188>)
	Decay[CW]   = AGC_decay[newAGC];
 80007d2:	4a57      	ldr	r2, [pc, #348]	; (8000930 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80007d4:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007d6:	4957      	ldr	r1, [pc, #348]	; (8000934 <Tune_Preset+0x190>)
	Decay[CW]   = AGC_decay[newAGC];
 80007d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 80007dc:	4f56      	ldr	r7, [pc, #344]	; (8000938 <Tune_Preset+0x194>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007de:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 80007e2:	6810      	ldr	r0, [r2, #0]
	CurrentAGC =newAGC;
 80007e4:	703b      	strb	r3, [r7, #0]
	Decay[CW]   = AGC_decay[newAGC];
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <Tune_Preset+0x198>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007e8:	4b55      	ldr	r3, [pc, #340]	; (8000940 <Tune_Preset+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 80007ea:	60d0      	str	r0, [r2, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80007ec:	80d9      	strh	r1, [r3, #6]
 80007ee:	4f55      	ldr	r7, [pc, #340]	; (8000944 <Tune_Preset+0x1a0>)
	SetBW( psets[Idx].bw);
 80007f0:	442c      	add	r4, r5
 80007f2:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	CurrentBW = newbw;
 80007f6:	7d63      	ldrb	r3, [r4, #21]
 80007f8:	703b      	strb	r3, [r7, #0]
	strcpy(msg, psets[Idx].name);
 80007fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80007fe:	4852      	ldr	r0, [pc, #328]	; (8000948 <Tune_Preset+0x1a4>)
 8000800:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
}
 8000804:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	strcpy(msg, psets[Idx].name);
 8000808:	f00c bdca 	b.w	800d3a0 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800080c:	4b47      	ldr	r3, [pc, #284]	; (800092c <Tune_Preset+0x188>)
	Decay[USB]  = AGC_decay[newAGC];
 800080e:	4a48      	ldr	r2, [pc, #288]	; (8000930 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000810:	789b      	ldrb	r3, [r3, #2]
	CurrentAGC =newAGC;
 8000812:	4f49      	ldr	r7, [pc, #292]	; (8000938 <Tune_Preset+0x194>)
	Decay[USB]  = AGC_decay[newAGC];
 8000814:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[USB] = Hangcount[newAGC]; break;
 8000818:	4946      	ldr	r1, [pc, #280]	; (8000934 <Tune_Preset+0x190>)
	CurrentAGC =newAGC;
 800081a:	703b      	strb	r3, [r7, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 800081c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000820:	6810      	ldr	r0, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <Tune_Preset+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 8000824:	4a45      	ldr	r2, [pc, #276]	; (800093c <Tune_Preset+0x198>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000826:	8099      	strh	r1, [r3, #4]
	Decay[USB]  = AGC_decay[newAGC];
 8000828:	6090      	str	r0, [r2, #8]
 800082a:	4f46      	ldr	r7, [pc, #280]	; (8000944 <Tune_Preset+0x1a0>)
 800082c:	e7e0      	b.n	80007f0 <Tune_Preset+0x4c>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800082e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800095c <Tune_Preset+0x1b8>
		AMindex = 0; // TODO toglimi
 8000832:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000836:	4f43      	ldr	r7, [pc, #268]	; (8000944 <Tune_Preset+0x1a0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000838:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 800083c:	f89a 0000 	ldrb.w	r0, [sl]
		AMindex = 0; // TODO toglimi
 8000840:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000960 <Tune_Preset+0x1bc>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000844:	4a41      	ldr	r2, [pc, #260]	; (800094c <Tune_Preset+0x1a8>)
 8000846:	4942      	ldr	r1, [pc, #264]	; (8000950 <Tune_Preset+0x1ac>)
	CurrentBW = newbw;
 8000848:	7038      	strb	r0, [r7, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 800084a:	4842      	ldr	r0, [pc, #264]	; (8000954 <Tune_Preset+0x1b0>)
		AMindex = 0; // TODO toglimi
 800084c:	f8a9 c000 	strh.w	ip, [r9]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000850:	f001 f900 	bl	8001a54 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000854:	4935      	ldr	r1, [pc, #212]	; (800092c <Tune_Preset+0x188>)
	CurrentAGC =newAGC;
 8000856:	4838      	ldr	r0, [pc, #224]	; (8000938 <Tune_Preset+0x194>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000858:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 800085a:	f898 2000 	ldrb.w	r2, [r8]
	CurrentAGC =newAGC;
 800085e:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000860:	2a03      	cmp	r2, #3
 8000862:	d8c5      	bhi.n	80007f0 <Tune_Preset+0x4c>
 8000864:	e8df f002 	tbb	[pc, r2]
 8000868:	314f4013 	.word	0x314f4013
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <Tune_Preset+0x188>)
	Decay[LSB]  = AGC_decay[newAGC];
 800086e:	4a30      	ldr	r2, [pc, #192]	; (8000930 <Tune_Preset+0x18c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000870:	785b      	ldrb	r3, [r3, #1]
	CurrentAGC =newAGC;
 8000872:	4f31      	ldr	r7, [pc, #196]	; (8000938 <Tune_Preset+0x194>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000874:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000878:	492e      	ldr	r1, [pc, #184]	; (8000934 <Tune_Preset+0x190>)
	CurrentAGC =newAGC;
 800087a:	703b      	strb	r3, [r7, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 800087c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000880:	6810      	ldr	r0, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <Tune_Preset+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000884:	4a2d      	ldr	r2, [pc, #180]	; (800093c <Tune_Preset+0x198>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000886:	8059      	strh	r1, [r3, #2]
	Decay[LSB]  = AGC_decay[newAGC];
 8000888:	6050      	str	r0, [r2, #4]
 800088a:	4f2e      	ldr	r7, [pc, #184]	; (8000944 <Tune_Preset+0x1a0>)
 800088c:	e7b0      	b.n	80007f0 <Tune_Preset+0x4c>
	SetBW( psets[Idx].bw);
 800088e:	442c      	add	r4, r5
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000890:	4928      	ldr	r1, [pc, #160]	; (8000934 <Tune_Preset+0x190>)
	Decay[AM]   = AGC_decay[newAGC];
 8000892:	4a27      	ldr	r2, [pc, #156]	; (8000930 <Tune_Preset+0x18c>)
	SetBW( psets[Idx].bw);
 8000894:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000898:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 800089c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	SetBW( psets[Idx].bw);
 80008a4:	7d61      	ldrb	r1, [r4, #21]
		AMindex = 0; // TODO toglimi
 80008a6:	2400      	movs	r4, #0
	Decay[AM]   = AGC_decay[newAGC];
 80008a8:	6810      	ldr	r0, [r2, #0]
	CurrentBW = newbw;
 80008aa:	7039      	strb	r1, [r7, #0]
		bw[AM] = newbw;
 80008ac:	f88a 1000 	strb.w	r1, [sl]
	Decay[AM]   = AGC_decay[newAGC];
 80008b0:	4922      	ldr	r1, [pc, #136]	; (800093c <Tune_Preset+0x198>)
		AMindex = 0; // TODO toglimi
 80008b2:	f8a9 4000 	strh.w	r4, [r9]
	Hcount[AM]  = Hangcount[newAGC]; break;
 80008b6:	4c22      	ldr	r4, [pc, #136]	; (8000940 <Tune_Preset+0x19c>)
	Decay[AM]   = AGC_decay[newAGC];
 80008b8:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <Tune_Preset+0x1a8>)
 80008bc:	4924      	ldr	r1, [pc, #144]	; (8000950 <Tune_Preset+0x1ac>)
 80008be:	4825      	ldr	r0, [pc, #148]	; (8000954 <Tune_Preset+0x1b0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 80008c0:	f8a4 c000 	strh.w	ip, [r4]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 80008c4:	f001 f8c6 	bl	8001a54 <SDR_2R_toC_f32>
 80008c8:	e797      	b.n	80007fa <Tune_Preset+0x56>
	Decay[CW]   = AGC_decay[newAGC];
 80008ca:	4a19      	ldr	r2, [pc, #100]	; (8000930 <Tune_Preset+0x18c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80008cc:	4819      	ldr	r0, [pc, #100]	; (8000934 <Tune_Preset+0x190>)
	Decay[CW]   = AGC_decay[newAGC];
 80008ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 80008d2:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 80008d4:	4919      	ldr	r1, [pc, #100]	; (800093c <Tune_Preset+0x198>)
 80008d6:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80008da:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <Tune_Preset+0x19c>)
	Decay[CW]   = AGC_decay[newAGC];
 80008e0:	f8c1 c00c 	str.w	ip, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80008e4:	80da      	strh	r2, [r3, #6]
 80008e6:	e783      	b.n	80007f0 <Tune_Preset+0x4c>
	Decay[LSB]  = AGC_decay[newAGC];
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <Tune_Preset+0x18c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008ea:	4812      	ldr	r0, [pc, #72]	; (8000934 <Tune_Preset+0x190>)
	Decay[LSB]  = AGC_decay[newAGC];
 80008ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 80008f0:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 80008f2:	4912      	ldr	r1, [pc, #72]	; (800093c <Tune_Preset+0x198>)
 80008f4:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[LSB] = Hangcount[newAGC]; break;
 80008f8:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <Tune_Preset+0x19c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80008fe:	f8c1 c004 	str.w	ip, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000902:	805a      	strh	r2, [r3, #2]
 8000904:	e774      	b.n	80007f0 <Tune_Preset+0x4c>
	Decay[USB]  = AGC_decay[newAGC];
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <Tune_Preset+0x18c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <Tune_Preset+0x190>)
	Decay[USB]  = AGC_decay[newAGC];
 800090a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 800090e:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000910:	490a      	ldr	r1, [pc, #40]	; (800093c <Tune_Preset+0x198>)
 8000912:	f8d2 c000 	ldr.w	ip, [r2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000916:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <Tune_Preset+0x19c>)
	Decay[USB]  = AGC_decay[newAGC];
 800091c:	f8c1 c008 	str.w	ip, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000920:	809a      	strh	r2, [r3, #4]
 8000922:	e765      	b.n	80007f0 <Tune_Preset+0x4c>
 8000924:	240088e0 	.word	0x240088e0
 8000928:	24009ea8 	.word	0x24009ea8
 800092c:	24007808 	.word	0x24007808
 8000930:	2400c3cc 	.word	0x2400c3cc
 8000934:	24009ea4 	.word	0x24009ea4
 8000938:	24000680 	.word	0x24000680
 800093c:	24002a98 	.word	0x24002a98
 8000940:	24008048 	.word	0x24008048
 8000944:	24000a90 	.word	0x24000a90
 8000948:	2400445c 	.word	0x2400445c
 800094c:	20004000 	.word	0x20004000
 8000950:	08010400 	.word	0x08010400
 8000954:	08011400 	.word	0x08011400
 8000958:	2400c3dc 	.word	0x2400c3dc
 800095c:	24008e98 	.word	0x24008e98
 8000960:	2400d7e2 	.word	0x2400d7e2

08000964 <SetBW>:
	switch(CurrentMode)
 8000964:	4a09      	ldr	r2, [pc, #36]	; (800098c <SetBW+0x28>)
	CurrentBW = newbw;
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <SetBW+0x2c>)
{
 8000968:	b430      	push	{r4, r5}
	switch(CurrentMode)
 800096a:	7814      	ldrb	r4, [r2, #0]
	CurrentBW = newbw;
 800096c:	7018      	strb	r0, [r3, #0]
	switch(CurrentMode)
 800096e:	b10c      	cbz	r4, 8000974 <SetBW+0x10>
}	
 8000970:	bc30      	pop	{r4, r5}
 8000972:	4770      	bx	lr
		bw[AM] = newbw;
 8000974:	4907      	ldr	r1, [pc, #28]	; (8000994 <SetBW+0x30>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 800097a:	4d07      	ldr	r5, [pc, #28]	; (8000998 <SetBW+0x34>)
		bw[AM] = newbw;
 800097c:	7008      	strb	r0, [r1, #0]
		AMindex = 0; // TODO toglimi
 800097e:	802c      	strh	r4, [r5, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <SetBW+0x38>)
 8000982:	4907      	ldr	r1, [pc, #28]	; (80009a0 <SetBW+0x3c>)
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <SetBW+0x40>)
}	
 8000986:	bc30      	pop	{r4, r5}
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000988:	f001 b864 	b.w	8001a54 <SDR_2R_toC_f32>
 800098c:	2400c3dc 	.word	0x2400c3dc
 8000990:	24000a90 	.word	0x24000a90
 8000994:	24008e98 	.word	0x24008e98
 8000998:	2400d7e2 	.word	0x2400d7e2
 800099c:	20004000 	.word	0x20004000
 80009a0:	08010400 	.word	0x08010400
 80009a4:	08011400 	.word	0x08011400

080009a8 <SetAGC>:
	switch(CurrentMode)
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <SetAGC+0x94>)
	switch(CurrentMode)
 80009ac:	781b      	ldrb	r3, [r3, #0]
{
 80009ae:	b430      	push	{r4, r5}
	CurrentAGC =newAGC;
 80009b0:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d810      	bhi.n	80009d8 <SetAGC+0x30>
 80009b6:	e8df f003 	tbb	[pc, r3]
 80009ba:	202f      	.short	0x202f
 80009bc:	0211      	.short	0x0211
	Decay[CW]   = AGC_decay[newAGC];
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <SetAGC+0x98>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009c0:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <SetAGC+0x9c>)
	Decay[CW]   = AGC_decay[newAGC];
 80009c2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80009c6:	4c20      	ldr	r4, [pc, #128]	; (8000a48 <SetAGC+0xa0>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009c8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 80009cc:	681d      	ldr	r5, [r3, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <SetAGC+0xa4>)
	case CW :       agc[CW] = newAGC;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <SetAGC+0xa8>)
	Decay[CW]   = AGC_decay[newAGC];
 80009d2:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 80009d4:	80d1      	strh	r1, [r2, #6]
	case CW :       agc[CW] = newAGC;
 80009d6:	70d8      	strb	r0, [r3, #3]
}	
 80009d8:	bc30      	pop	{r4, r5}
 80009da:	4770      	bx	lr
	Decay[USB]  = AGC_decay[newAGC];
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <SetAGC+0x98>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80009de:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <SetAGC+0x9c>)
	Decay[USB]  = AGC_decay[newAGC];
 80009e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80009e4:	4c18      	ldr	r4, [pc, #96]	; (8000a48 <SetAGC+0xa0>)
	Hcount[USB] = Hangcount[newAGC]; break;
 80009e6:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 80009ea:	681d      	ldr	r5, [r3, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <SetAGC+0xa4>)
	case USB :      agc[USB] = newAGC;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <SetAGC+0xa8>)
	Decay[USB]  = AGC_decay[newAGC];
 80009f0:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 80009f2:	8091      	strh	r1, [r2, #4]
	case USB :      agc[USB] = newAGC;
 80009f4:	7098      	strb	r0, [r3, #2]
}	
 80009f6:	bc30      	pop	{r4, r5}
 80009f8:	4770      	bx	lr
	Decay[LSB]  = AGC_decay[newAGC];
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <SetAGC+0x98>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <SetAGC+0x9c>)
	Decay[LSB]  = AGC_decay[newAGC];
 80009fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000a02:	4c11      	ldr	r4, [pc, #68]	; (8000a48 <SetAGC+0xa0>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a04:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000a08:	681d      	ldr	r5, [r3, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <SetAGC+0xa4>)
	case LSB :      agc[LSB] = newAGC;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <SetAGC+0xa8>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000a0e:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000a10:	8051      	strh	r1, [r2, #2]
	case LSB :      agc[LSB] = newAGC;
 8000a12:	7058      	strb	r0, [r3, #1]
}	
 8000a14:	bc30      	pop	{r4, r5}
 8000a16:	4770      	bx	lr
	Decay[AM]   = AGC_decay[newAGC];
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SetAGC+0x98>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SetAGC+0x9c>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a1c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000a20:	4c09      	ldr	r4, [pc, #36]	; (8000a48 <SetAGC+0xa0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a22:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000a26:	681d      	ldr	r5, [r3, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <SetAGC+0xa4>)
	case AM :       agc[AM] = newAGC;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <SetAGC+0xa8>)
	Decay[AM]   = AGC_decay[newAGC];
 8000a2c:	6025      	str	r5, [r4, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000a2e:	8011      	strh	r1, [r2, #0]
	case AM :       agc[AM] = newAGC;
 8000a30:	7018      	strb	r0, [r3, #0]
}	
 8000a32:	bc30      	pop	{r4, r5}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2400c3dc 	.word	0x2400c3dc
 8000a3c:	24000680 	.word	0x24000680
 8000a40:	2400c3cc 	.word	0x2400c3cc
 8000a44:	24009ea4 	.word	0x24009ea4
 8000a48:	24002a98 	.word	0x24002a98
 8000a4c:	24008048 	.word	0x24008048
 8000a50:	24007808 	.word	0x24007808

08000a54 <SetMode>:
{
 8000a54:	b538      	push	{r3, r4, r5, lr}
	CurrentMode = newmode;
 8000a56:	4c48      	ldr	r4, [pc, #288]	; (8000b78 <SetMode+0x124>)
 8000a58:	7020      	strb	r0, [r4, #0]
	switch(CurrentMode)
 8000a5a:	2803      	cmp	r0, #3
 8000a5c:	d816      	bhi.n	8000a8c <SetMode+0x38>
 8000a5e:	e8df f000 	tbb	[pc, r0]
 8000a62:	2a3e      	.short	0x2a3e
 8000a64:	0216      	.short	0x0216
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000a66:	4b45      	ldr	r3, [pc, #276]	; (8000b7c <SetMode+0x128>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a68:	4a45      	ldr	r2, [pc, #276]	; (8000b80 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	4c45      	ldr	r4, [pc, #276]	; (8000b84 <SetMode+0x130>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000a72:	4945      	ldr	r1, [pc, #276]	; (8000b88 <SetMode+0x134>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a74:	4845      	ldr	r0, [pc, #276]	; (8000b8c <SetMode+0x138>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a76:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a78:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000a7c:	78e2      	ldrb	r2, [r4, #3]
	CurrentAGC =newAGC;
 8000a7e:	700b      	strb	r3, [r1, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000a80:	4c43      	ldr	r4, [pc, #268]	; (8000b90 <SetMode+0x13c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a82:	4944      	ldr	r1, [pc, #272]	; (8000b94 <SetMode+0x140>)
	CurrentBW = newbw;
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <SetMode+0x144>)
	Decay[CW]   = AGC_decay[newAGC];
 8000a86:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000a88:	80c8      	strh	r0, [r1, #6]
	CurrentBW = newbw;
 8000a8a:	701a      	strb	r2, [r3, #0]
		break;

	default :
		break;
	}
}	
 8000a8c:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <SetMode+0x128>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a90:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	4c3b      	ldr	r4, [pc, #236]	; (8000b84 <SetMode+0x130>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000a9a:	493b      	ldr	r1, [pc, #236]	; (8000b88 <SetMode+0x134>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000a9c:	483b      	ldr	r0, [pc, #236]	; (8000b8c <SetMode+0x138>)
	Decay[USB]  = AGC_decay[newAGC];
 8000a9e:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000aa0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000aa4:	78a2      	ldrb	r2, [r4, #2]
	CurrentAGC =newAGC;
 8000aa6:	700b      	strb	r3, [r1, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000aa8:	4c39      	ldr	r4, [pc, #228]	; (8000b90 <SetMode+0x13c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000aaa:	493a      	ldr	r1, [pc, #232]	; (8000b94 <SetMode+0x140>)
	CurrentBW = newbw;
 8000aac:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <SetMode+0x144>)
	Decay[USB]  = AGC_decay[newAGC];
 8000aae:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000ab0:	8088      	strh	r0, [r1, #4]
	CurrentBW = newbw;
 8000ab2:	701a      	strb	r2, [r3, #0]
}	
 8000ab4:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <SetMode+0x128>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ab8:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <SetMode+0x12c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	4c31      	ldr	r4, [pc, #196]	; (8000b84 <SetMode+0x130>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000abe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	CurrentAGC =newAGC;
 8000ac2:	4931      	ldr	r1, [pc, #196]	; (8000b88 <SetMode+0x134>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ac4:	4831      	ldr	r0, [pc, #196]	; (8000b8c <SetMode+0x138>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ac6:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ac8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	CurrentBW = newbw;
 8000acc:	7862      	ldrb	r2, [r4, #1]
	CurrentAGC =newAGC;
 8000ace:	700b      	strb	r3, [r1, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ad0:	4c2f      	ldr	r4, [pc, #188]	; (8000b90 <SetMode+0x13c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ad2:	4930      	ldr	r1, [pc, #192]	; (8000b94 <SetMode+0x140>)
	CurrentBW = newbw;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <SetMode+0x144>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ad6:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ad8:	8048      	strh	r0, [r1, #2]
	CurrentBW = newbw;
 8000ada:	701a      	strb	r2, [r3, #0]
}	
 8000adc:	bd38      	pop	{r3, r4, r5, pc}
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000ade:	4929      	ldr	r1, [pc, #164]	; (8000b84 <SetMode+0x130>)
		AMindex = 0; // TODO toglimi
 8000ae0:	2500      	movs	r5, #0
	CurrentBW = newbw;
 8000ae2:	4a2d      	ldr	r2, [pc, #180]	; (8000b98 <SetMode+0x144>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000ae8:	7809      	ldrb	r1, [r1, #0]
		AMindex = 0; // TODO toglimi
 8000aea:	482c      	ldr	r0, [pc, #176]	; (8000b9c <SetMode+0x148>)
	CurrentBW = newbw;
 8000aec:	7011      	strb	r1, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000aee:	8005      	strh	r5, [r0, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000af0:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <SetMode+0x14c>)
 8000af2:	492c      	ldr	r1, [pc, #176]	; (8000ba4 <SetMode+0x150>)
 8000af4:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <SetMode+0x154>)
 8000af6:	f000 ffad 	bl	8001a54 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000afa:	4920      	ldr	r1, [pc, #128]	; (8000b7c <SetMode+0x128>)
	CurrentAGC =newAGC;
 8000afc:	4822      	ldr	r0, [pc, #136]	; (8000b88 <SetMode+0x134>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000afe:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000b00:	7822      	ldrb	r2, [r4, #0]
	CurrentAGC =newAGC;
 8000b02:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000b04:	2a03      	cmp	r2, #3
 8000b06:	d8c1      	bhi.n	8000a8c <SetMode+0x38>
 8000b08:	e8df f002 	tbb	[pc, r2]
 8000b0c:	02281b0f 	.word	0x02281b0f
	Decay[CW]   = AGC_decay[newAGC];
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <SetMode+0x12c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b12:	481e      	ldr	r0, [pc, #120]	; (8000b8c <SetMode+0x138>)
	Decay[CW]   = AGC_decay[newAGC];
 8000b14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b18:	4c1d      	ldr	r4, [pc, #116]	; (8000b90 <SetMode+0x13c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b1a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000b1e:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b20:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <SetMode+0x140>)
	case CW :       agc[CW] = newAGC;
 8000b22:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000b24:	60e5      	str	r5, [r4, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000b26:	80d0      	strh	r0, [r2, #6]
}	
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
	Decay[AM]   = AGC_decay[newAGC];
 8000b2a:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <SetMode+0x12c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b2c:	4917      	ldr	r1, [pc, #92]	; (8000b8c <SetMode+0x138>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b32:	4817      	ldr	r0, [pc, #92]	; (8000b90 <SetMode+0x13c>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b34:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
	Decay[AM]   = AGC_decay[newAGC];
 8000b38:	6812      	ldr	r2, [r2, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <SetMode+0x140>)
	Decay[AM]   = AGC_decay[newAGC];
 8000b3c:	6002      	str	r2, [r0, #0]
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000b3e:	8019      	strh	r1, [r3, #0]
}	
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
	Decay[LSB]  = AGC_decay[newAGC];
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <SetMode+0x12c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <SetMode+0x138>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000b46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b4a:	4c11      	ldr	r4, [pc, #68]	; (8000b90 <SetMode+0x13c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b4c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b50:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <SetMode+0x140>)
	case LSB :      agc[LSB] = newAGC;
 8000b54:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000b56:	6065      	str	r5, [r4, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000b58:	8050      	strh	r0, [r2, #2]
}	
 8000b5a:	bd38      	pop	{r3, r4, r5, pc}
	Decay[USB]  = AGC_decay[newAGC];
 8000b5c:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <SetMode+0x12c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b5e:	480b      	ldr	r0, [pc, #44]	; (8000b8c <SetMode+0x138>)
	Decay[USB]  = AGC_decay[newAGC];
 8000b60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <SetMode+0x13c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b66:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000b6a:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <SetMode+0x140>)
	case USB :      agc[USB] = newAGC;
 8000b6e:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000b70:	60a5      	str	r5, [r4, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000b72:	8090      	strh	r0, [r2, #4]
}	
 8000b74:	bd38      	pop	{r3, r4, r5, pc}
 8000b76:	bf00      	nop
 8000b78:	2400c3dc 	.word	0x2400c3dc
 8000b7c:	24007808 	.word	0x24007808
 8000b80:	2400c3cc 	.word	0x2400c3cc
 8000b84:	24008e98 	.word	0x24008e98
 8000b88:	24000680 	.word	0x24000680
 8000b8c:	24009ea4 	.word	0x24009ea4
 8000b90:	24002a98 	.word	0x24002a98
 8000b94:	24008048 	.word	0x24008048
 8000b98:	24000a90 	.word	0x24000a90
 8000b9c:	2400d7e2 	.word	0x2400d7e2
 8000ba0:	20004000 	.word	0x20004000
 8000ba4:	08010400 	.word	0x08010400
 8000ba8:	08011400 	.word	0x08011400

08000bac <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
	Fstep = pow(10, 5 - idx);
 8000bac:	f1c0 0005 	rsb	r0, r0, #5
 8000bb0:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000bb4:	ee07 0a90 	vmov	s15, r0
{
 8000bb8:	b508      	push	{r3, lr}
	Fstep = pow(10, 5 - idx);
 8000bba:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000bbe:	f00d ff73 	bl	800eaa8 <pow>
 8000bc2:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <SetFstep+0x24>)
 8000bc8:	ed83 0a00 	vstr	s0, [r3]
}	
 8000bcc:	bd08      	pop	{r3, pc}
 8000bce:	bf00      	nop
 8000bd0:	2400c3d4 	.word	0x2400c3d4

08000bd4 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
	LOfreq += Fstep;
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <FplusClicked+0x180>)
 8000bd6:	4960      	ldr	r1, [pc, #384]	; (8000d58 <FplusClicked+0x184>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	ed91 7a00 	vldr	s14, [r1]
 8000be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq  = min(LOfreq, 50000000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000be8:	4f5c      	ldr	r7, [pc, #368]	; (8000d5c <FplusClicked+0x188>)
	LOfreq += Fstep;
 8000bea:	ee77 7a87 	vadd.f32	s15, s15, s14
	psets[0].bw = bw[CurrentMode];
 8000bee:	4d5c      	ldr	r5, [pc, #368]	; (8000d60 <FplusClicked+0x18c>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000bf0:	783b      	ldrb	r3, [r7, #0]
 8000bf2:	4c5c      	ldr	r4, [pc, #368]	; (8000d64 <FplusClicked+0x190>)
	LOfreq  = min(LOfreq, 50000000.f);
 8000bf4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000d68 <FplusClicked+0x194>
	psets[0].bw = bw[CurrentMode];
 8000bf8:	5cea      	ldrb	r2, [r5, r3]
	LOfreq  = min(LOfreq, 50000000.f);
 8000bfa:	fec7 7ac7 	vminnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000bfe:	7523      	strb	r3, [r4, #20]
	LOfreq  = min(LOfreq, 50000000.f);
 8000c00:	edc1 7a00 	vstr	s15, [r1]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000c04:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000c08:	7562      	strb	r2, [r4, #21]
	switch(CurrentMode)
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d812      	bhi.n	8000c34 <FplusClicked+0x60>
 8000c0e:	e8df f003 	tbb	[pc, r3]
 8000c12:	452a      	.short	0x452a
 8000c14:	0219      	.short	0x0219
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <FplusClicked+0x198>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c18:	4955      	ldr	r1, [pc, #340]	; (8000d70 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c1a:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c1c:	4855      	ldr	r0, [pc, #340]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c1e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000c22:	4d55      	ldr	r5, [pc, #340]	; (8000d78 <FplusClicked+0x1a4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c24:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000c28:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000c2a:	702b      	strb	r3, [r5, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000c2c:	4953      	ldr	r1, [pc, #332]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <FplusClicked+0x1ac>)
	Decay[CW]   = AGC_decay[newAGC];
 8000c30:	60cc      	str	r4, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000c32:	80d8      	strh	r0, [r3, #6]
 8000c34:	4e53      	ldr	r6, [pc, #332]	; (8000d84 <FplusClicked+0x1b0>)
	CurrentBW = newbw;
 8000c36:	7032      	strb	r2, [r6, #0]
	strcpy(msg, psets[Idx].name);
 8000c38:	494a      	ldr	r1, [pc, #296]	; (8000d64 <FplusClicked+0x190>)
 8000c3a:	4853      	ldr	r0, [pc, #332]	; (8000d88 <FplusClicked+0x1b4>)
	SetFOut((uint32_t)(LOfreq + 10698000.0));
	LOfreq = 10698000.0;
#endif

	Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000c40:	f00c bbae 	b.w	800d3a0 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c44:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <FplusClicked+0x198>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c46:	494a      	ldr	r1, [pc, #296]	; (8000d70 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c48:	789b      	ldrb	r3, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c4a:	484a      	ldr	r0, [pc, #296]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c4c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000c50:	4d49      	ldr	r5, [pc, #292]	; (8000d78 <FplusClicked+0x1a4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c52:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000c56:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000c58:	702b      	strb	r3, [r5, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000c5a:	4948      	ldr	r1, [pc, #288]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <FplusClicked+0x1ac>)
	Decay[USB]  = AGC_decay[newAGC];
 8000c5e:	608c      	str	r4, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000c60:	8098      	strh	r0, [r3, #4]
 8000c62:	4e48      	ldr	r6, [pc, #288]	; (8000d84 <FplusClicked+0x1b0>)
 8000c64:	e7e7      	b.n	8000c36 <FplusClicked+0x62>
	CurrentBW = newbw;
 8000c66:	7828      	ldrb	r0, [r5, #0]
		AMindex = 0; // TODO toglimi
 8000c68:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000c6c:	4e45      	ldr	r6, [pc, #276]	; (8000d84 <FplusClicked+0x1b0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000c72:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000d98 <FplusClicked+0x1c4>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c76:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <FplusClicked+0x1b8>)
 8000c78:	4945      	ldr	r1, [pc, #276]	; (8000d90 <FplusClicked+0x1bc>)
	CurrentBW = newbw;
 8000c7a:	7030      	strb	r0, [r6, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c7c:	4845      	ldr	r0, [pc, #276]	; (8000d94 <FplusClicked+0x1c0>)
		AMindex = 0; // TODO toglimi
 8000c7e:	f8a8 c000 	strh.w	ip, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000c82:	f000 fee7 	bl	8001a54 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c86:	4939      	ldr	r1, [pc, #228]	; (8000d6c <FplusClicked+0x198>)
	CurrentAGC =newAGC;
 8000c88:	483b      	ldr	r0, [pc, #236]	; (8000d78 <FplusClicked+0x1a4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c8a:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000c8c:	783a      	ldrb	r2, [r7, #0]
	CurrentAGC =newAGC;
 8000c8e:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000c90:	2a03      	cmp	r2, #3
 8000c92:	d85c      	bhi.n	8000d4e <FplusClicked+0x17a>
 8000c94:	e8df f002 	tbb	[pc, r2]
 8000c98:	314d3f13 	.word	0x314d3f13
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <FplusClicked+0x198>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000c9e:	4934      	ldr	r1, [pc, #208]	; (8000d70 <FplusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000ca0:	785b      	ldrb	r3, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ca2:	4834      	ldr	r0, [pc, #208]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ca4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000ca8:	4d33      	ldr	r5, [pc, #204]	; (8000d78 <FplusClicked+0x1a4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000caa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000cae:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000cb0:	702b      	strb	r3, [r5, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000cb2:	4932      	ldr	r1, [pc, #200]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <FplusClicked+0x1ac>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000cb6:	604c      	str	r4, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000cb8:	8058      	strh	r0, [r3, #2]
 8000cba:	4e32      	ldr	r6, [pc, #200]	; (8000d84 <FplusClicked+0x1b0>)
 8000cbc:	e7bb      	b.n	8000c36 <FplusClicked+0x62>
	Decay[AM]   = AGC_decay[newAGC];
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	; (8000d70 <FplusClicked+0x19c>)
 8000cc0:	7d61      	ldrb	r1, [r4, #21]
 8000cc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cc6:	4c2b      	ldr	r4, [pc, #172]	; (8000d74 <FplusClicked+0x1a0>)
	CurrentBW = newbw;
 8000cc8:	7031      	strb	r1, [r6, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000cca:	6810      	ldr	r0, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000ccc:	2200      	movs	r2, #0
		bw[AM] = newbw;
 8000cce:	7029      	strb	r1, [r5, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000cd0:	492a      	ldr	r1, [pc, #168]	; (8000d7c <FplusClicked+0x1a8>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cd2:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000cda:	4c29      	ldr	r4, [pc, #164]	; (8000d80 <FplusClicked+0x1ac>)
		AMindex = 0; // TODO toglimi
 8000cdc:	f8a8 2000 	strh.w	r2, [r8]
	Decay[AM]   = AGC_decay[newAGC];
 8000ce0:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000ce2:	4a2a      	ldr	r2, [pc, #168]	; (8000d8c <FplusClicked+0x1b8>)
 8000ce4:	492a      	ldr	r1, [pc, #168]	; (8000d90 <FplusClicked+0x1bc>)
 8000ce6:	482b      	ldr	r0, [pc, #172]	; (8000d94 <FplusClicked+0x1c0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ce8:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000cea:	f000 feb3 	bl	8001a54 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000cee:	491d      	ldr	r1, [pc, #116]	; (8000d64 <FplusClicked+0x190>)
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <FplusClicked+0x1b4>)
}	
 8000cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000cf6:	f00c bb53 	b.w	800d3a0 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <FplusClicked+0x19c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000cfc:	4f1d      	ldr	r7, [pc, #116]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000cfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000d02:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <FplusClicked+0x1a8>)
 8000d06:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d08:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <FplusClicked+0x1ac>)
 8000d0e:	7d62      	ldrb	r2, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000d10:	60c5      	str	r5, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000d12:	80d9      	strh	r1, [r3, #6]
 8000d14:	e78f      	b.n	8000c36 <FplusClicked+0x62>
	Decay[LSB]  = AGC_decay[newAGC];
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <FplusClicked+0x19c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d18:	4f16      	ldr	r7, [pc, #88]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000d1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000d1e:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <FplusClicked+0x1a8>)
 8000d22:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d24:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <FplusClicked+0x1ac>)
 8000d2a:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000d2c:	6045      	str	r5, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000d2e:	8059      	strh	r1, [r3, #2]
 8000d30:	e781      	b.n	8000c36 <FplusClicked+0x62>
	Decay[USB]  = AGC_decay[newAGC];
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <FplusClicked+0x19c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d34:	4f0f      	ldr	r7, [pc, #60]	; (8000d74 <FplusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000d36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 8000d3a:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <FplusClicked+0x1a8>)
 8000d3e:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d40:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <FplusClicked+0x1ac>)
 8000d46:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000d48:	6085      	str	r5, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000d4a:	8099      	strh	r1, [r3, #4]
 8000d4c:	e773      	b.n	8000c36 <FplusClicked+0x62>
 8000d4e:	7d62      	ldrb	r2, [r4, #21]
 8000d50:	e771      	b.n	8000c36 <FplusClicked+0x62>
 8000d52:	bf00      	nop
 8000d54:	2400c3d4 	.word	0x2400c3d4
 8000d58:	24009ea8 	.word	0x24009ea8
 8000d5c:	2400c3dc 	.word	0x2400c3dc
 8000d60:	24008e98 	.word	0x24008e98
 8000d64:	240088e0 	.word	0x240088e0
 8000d68:	4c3ebc20 	.word	0x4c3ebc20
 8000d6c:	24007808 	.word	0x24007808
 8000d70:	2400c3cc 	.word	0x2400c3cc
 8000d74:	24009ea4 	.word	0x24009ea4
 8000d78:	24000680 	.word	0x24000680
 8000d7c:	24002a98 	.word	0x24002a98
 8000d80:	24008048 	.word	0x24008048
 8000d84:	24000a90 	.word	0x24000a90
 8000d88:	2400445c 	.word	0x2400445c
 8000d8c:	20004000 	.word	0x20004000
 8000d90:	08010400 	.word	0x08010400
 8000d94:	08011400 	.word	0x08011400
 8000d98:	2400d7e2 	.word	0x2400d7e2

08000d9c <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
	LOfreq -= Fstep;
 8000d9c:	4b5f      	ldr	r3, [pc, #380]	; (8000f1c <FminusClicked+0x180>)
 8000d9e:	4960      	ldr	r1, [pc, #384]	; (8000f20 <FminusClicked+0x184>)
 8000da0:	ed93 7a00 	vldr	s14, [r3]
 8000da4:	edd1 7a00 	vldr	s15, [r1]
 8000da8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{	
 8000dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOfreq  = max(LOfreq, 8000.f);
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000db0:	4f5c      	ldr	r7, [pc, #368]	; (8000f24 <FminusClicked+0x188>)
	LOfreq -= Fstep;
 8000db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
	psets[0].bw = bw[CurrentMode];
 8000db6:	4d5c      	ldr	r5, [pc, #368]	; (8000f28 <FminusClicked+0x18c>)
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000db8:	783b      	ldrb	r3, [r7, #0]
 8000dba:	4c5c      	ldr	r4, [pc, #368]	; (8000f2c <FminusClicked+0x190>)
	LOfreq  = max(LOfreq, 8000.f);
 8000dbc:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000f30 <FminusClicked+0x194>
	psets[0].bw = bw[CurrentMode];
 8000dc0:	5cea      	ldrb	r2, [r5, r3]
	LOfreq  = max(LOfreq, 8000.f);
 8000dc2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dc6:	7523      	strb	r3, [r4, #20]
	LOfreq  = max(LOfreq, 8000.f);
 8000dc8:	edc1 7a00 	vstr	s15, [r1]
	psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dcc:	edc4 7a04 	vstr	s15, [r4, #16]
	psets[0].bw = bw[CurrentMode];
 8000dd0:	7562      	strb	r2, [r4, #21]
	switch(CurrentMode)
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d812      	bhi.n	8000dfc <FminusClicked+0x60>
 8000dd6:	e8df f003 	tbb	[pc, r3]
 8000dda:	452a      	.short	0x452a
 8000ddc:	0219      	.short	0x0219
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000dde:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <FminusClicked+0x198>)
	Decay[CW]   = AGC_decay[newAGC];
 8000de0:	4955      	ldr	r1, [pc, #340]	; (8000f38 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000de2:	78db      	ldrb	r3, [r3, #3]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000de4:	4855      	ldr	r0, [pc, #340]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000de6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000dea:	4d55      	ldr	r5, [pc, #340]	; (8000f40 <FminusClicked+0x1a4>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000dec:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[CW]   = AGC_decay[newAGC];
 8000df0:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000df2:	702b      	strb	r3, [r5, #0]
	Decay[CW]   = AGC_decay[newAGC];
 8000df4:	4953      	ldr	r1, [pc, #332]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <FminusClicked+0x1ac>)
	Decay[CW]   = AGC_decay[newAGC];
 8000df8:	60cc      	str	r4, [r1, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000dfa:	80d8      	strh	r0, [r3, #6]
 8000dfc:	4e53      	ldr	r6, [pc, #332]	; (8000f4c <FminusClicked+0x1b0>)
	CurrentBW = newbw;
 8000dfe:	7032      	strb	r2, [r6, #0]
	strcpy(msg, psets[Idx].name);
 8000e00:	494a      	ldr	r1, [pc, #296]	; (8000f2c <FminusClicked+0x190>)
 8000e02:	4853      	ldr	r0, [pc, #332]	; (8000f50 <FminusClicked+0x1b4>)
	LOfreq = 10698000.0;
#endif


	Tune_Preset(0);  // preset 0 means "User tuning"
}
 8000e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000e08:	f00c baca 	b.w	800d3a0 <strcpy>
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e0c:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <FminusClicked+0x198>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e0e:	494a      	ldr	r1, [pc, #296]	; (8000f38 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e10:	789b      	ldrb	r3, [r3, #2]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e12:	484a      	ldr	r0, [pc, #296]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000e18:	4d49      	ldr	r5, [pc, #292]	; (8000f40 <FminusClicked+0x1a4>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e1a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[USB]  = AGC_decay[newAGC];
 8000e1e:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000e20:	702b      	strb	r3, [r5, #0]
	Decay[USB]  = AGC_decay[newAGC];
 8000e22:	4948      	ldr	r1, [pc, #288]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e24:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <FminusClicked+0x1ac>)
	Decay[USB]  = AGC_decay[newAGC];
 8000e26:	608c      	str	r4, [r1, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000e28:	8098      	strh	r0, [r3, #4]
 8000e2a:	4e48      	ldr	r6, [pc, #288]	; (8000f4c <FminusClicked+0x1b0>)
 8000e2c:	e7e7      	b.n	8000dfe <FminusClicked+0x62>
	CurrentBW = newbw;
 8000e2e:	7828      	ldrb	r0, [r5, #0]
		AMindex = 0; // TODO toglimi
 8000e30:	f04f 0c00 	mov.w	ip, #0
	CurrentBW = newbw;
 8000e34:	4e45      	ldr	r6, [pc, #276]	; (8000f4c <FminusClicked+0x1b0>)
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
		AMindex = 0; // TODO toglimi
 8000e3a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8000f60 <FminusClicked+0x1c4>
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e3e:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <FminusClicked+0x1b8>)
 8000e40:	4945      	ldr	r1, [pc, #276]	; (8000f58 <FminusClicked+0x1bc>)
	CurrentBW = newbw;
 8000e42:	7030      	strb	r0, [r6, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e44:	4845      	ldr	r0, [pc, #276]	; (8000f5c <FminusClicked+0x1c0>)
		AMindex = 0; // TODO toglimi
 8000e46:	f8a8 c000 	strh.w	ip, [r8]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e4a:	f000 fe03 	bl	8001a54 <SDR_2R_toC_f32>
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e4e:	4939      	ldr	r1, [pc, #228]	; (8000f34 <FminusClicked+0x198>)
	CurrentAGC =newAGC;
 8000e50:	483b      	ldr	r0, [pc, #236]	; (8000f40 <FminusClicked+0x1a4>)
		SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e52:	780b      	ldrb	r3, [r1, #0]
	switch(CurrentMode)
 8000e54:	783a      	ldrb	r2, [r7, #0]
	CurrentAGC =newAGC;
 8000e56:	7003      	strb	r3, [r0, #0]
	switch(CurrentMode)
 8000e58:	2a03      	cmp	r2, #3
 8000e5a:	d85c      	bhi.n	8000f16 <FminusClicked+0x17a>
 8000e5c:	e8df f002 	tbb	[pc, r2]
 8000e60:	314d3f13 	.word	0x314d3f13
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <FminusClicked+0x198>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e66:	4934      	ldr	r1, [pc, #208]	; (8000f38 <FminusClicked+0x19c>)
		SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e68:	785b      	ldrb	r3, [r3, #1]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e6a:	4834      	ldr	r0, [pc, #208]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e6c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	CurrentAGC =newAGC;
 8000e70:	4d33      	ldr	r5, [pc, #204]	; (8000f40 <FminusClicked+0x1a4>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e72:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000e76:	680c      	ldr	r4, [r1, #0]
	CurrentAGC =newAGC;
 8000e78:	702b      	strb	r3, [r5, #0]
	Decay[LSB]  = AGC_decay[newAGC];
 8000e7a:	4932      	ldr	r1, [pc, #200]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <FminusClicked+0x1ac>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000e7e:	604c      	str	r4, [r1, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000e80:	8058      	strh	r0, [r3, #2]
 8000e82:	4e32      	ldr	r6, [pc, #200]	; (8000f4c <FminusClicked+0x1b0>)
 8000e84:	e7bb      	b.n	8000dfe <FminusClicked+0x62>
	Decay[AM]   = AGC_decay[newAGC];
 8000e86:	4a2c      	ldr	r2, [pc, #176]	; (8000f38 <FminusClicked+0x19c>)
 8000e88:	7d61      	ldrb	r1, [r4, #21]
 8000e8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000e8e:	4c2b      	ldr	r4, [pc, #172]	; (8000f3c <FminusClicked+0x1a0>)
	CurrentBW = newbw;
 8000e90:	7031      	strb	r1, [r6, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000e92:	6810      	ldr	r0, [r2, #0]
		AMindex = 0; // TODO toglimi
 8000e94:	2200      	movs	r2, #0
		bw[AM] = newbw;
 8000e96:	7029      	strb	r1, [r5, #0]
	Decay[AM]   = AGC_decay[newAGC];
 8000e98:	492a      	ldr	r1, [pc, #168]	; (8000f44 <FminusClicked+0x1a8>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000e9a:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000ea2:	4c29      	ldr	r4, [pc, #164]	; (8000f48 <FminusClicked+0x1ac>)
		AMindex = 0; // TODO toglimi
 8000ea4:	f8a8 2000 	strh.w	r2, [r8]
	Decay[AM]   = AGC_decay[newAGC];
 8000ea8:	6008      	str	r0, [r1, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <FminusClicked+0x1b8>)
 8000eac:	492a      	ldr	r1, [pc, #168]	; (8000f58 <FminusClicked+0x1bc>)
 8000eae:	482b      	ldr	r0, [pc, #172]	; (8000f5c <FminusClicked+0x1c0>)
	Hcount[AM]  = Hangcount[newAGC]; break;
 8000eb0:	8026      	strh	r6, [r4, #0]
		SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex],
 8000eb2:	f000 fdcf 	bl	8001a54 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000eb6:	491d      	ldr	r1, [pc, #116]	; (8000f2c <FminusClicked+0x190>)
 8000eb8:	4825      	ldr	r0, [pc, #148]	; (8000f50 <FminusClicked+0x1b4>)
}
 8000eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000ebe:	f00c ba6f 	b.w	800d3a0 <strcpy>
	Decay[CW]   = AGC_decay[newAGC];
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <FminusClicked+0x19c>)
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000ec4:	4f1d      	ldr	r7, [pc, #116]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[CW]   = AGC_decay[newAGC];
 8000ec6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case CW :       agc[CW] = newAGC;
 8000eca:	70cb      	strb	r3, [r1, #3]
	Decay[CW]   = AGC_decay[newAGC];
 8000ecc:	481d      	ldr	r0, [pc, #116]	; (8000f44 <FminusClicked+0x1a8>)
 8000ece:	6815      	ldr	r5, [r2, #0]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000ed0:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <FminusClicked+0x1ac>)
 8000ed6:	7d62      	ldrb	r2, [r4, #21]
	Decay[CW]   = AGC_decay[newAGC];
 8000ed8:	60c5      	str	r5, [r0, #12]
	Hcount[CW]  = Hangcount[newAGC]; break;
 8000eda:	80d9      	strh	r1, [r3, #6]
 8000edc:	e78f      	b.n	8000dfe <FminusClicked+0x62>
	Decay[LSB]  = AGC_decay[newAGC];
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <FminusClicked+0x19c>)
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ee0:	4f16      	ldr	r7, [pc, #88]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[LSB]  = AGC_decay[newAGC];
 8000ee2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case LSB :      agc[LSB] = newAGC;
 8000ee6:	704b      	strb	r3, [r1, #1]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <FminusClicked+0x1a8>)
 8000eea:	6815      	ldr	r5, [r2, #0]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000eec:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <FminusClicked+0x1ac>)
 8000ef2:	7d62      	ldrb	r2, [r4, #21]
	Decay[LSB]  = AGC_decay[newAGC];
 8000ef4:	6045      	str	r5, [r0, #4]
	Hcount[LSB] = Hangcount[newAGC]; break;
 8000ef6:	8059      	strh	r1, [r3, #2]
 8000ef8:	e781      	b.n	8000dfe <FminusClicked+0x62>
	Decay[USB]  = AGC_decay[newAGC];
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <FminusClicked+0x19c>)
	Hcount[USB] = Hangcount[newAGC]; break;
 8000efc:	4f0f      	ldr	r7, [pc, #60]	; (8000f3c <FminusClicked+0x1a0>)
	Decay[USB]  = AGC_decay[newAGC];
 8000efe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	case USB :      agc[USB] = newAGC;
 8000f02:	708b      	strb	r3, [r1, #2]
	Decay[USB]  = AGC_decay[newAGC];
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <FminusClicked+0x1a8>)
 8000f06:	6815      	ldr	r5, [r2, #0]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f08:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <FminusClicked+0x1ac>)
 8000f0e:	7d62      	ldrb	r2, [r4, #21]
	Decay[USB]  = AGC_decay[newAGC];
 8000f10:	6085      	str	r5, [r0, #8]
	Hcount[USB] = Hangcount[newAGC]; break;
 8000f12:	8099      	strh	r1, [r3, #4]
 8000f14:	e773      	b.n	8000dfe <FminusClicked+0x62>
 8000f16:	7d62      	ldrb	r2, [r4, #21]
 8000f18:	e771      	b.n	8000dfe <FminusClicked+0x62>
 8000f1a:	bf00      	nop
 8000f1c:	2400c3d4 	.word	0x2400c3d4
 8000f20:	24009ea8 	.word	0x24009ea8
 8000f24:	2400c3dc 	.word	0x2400c3dc
 8000f28:	24008e98 	.word	0x24008e98
 8000f2c:	240088e0 	.word	0x240088e0
 8000f30:	45fa0000 	.word	0x45fa0000
 8000f34:	24007808 	.word	0x24007808
 8000f38:	2400c3cc 	.word	0x2400c3cc
 8000f3c:	24009ea4 	.word	0x24009ea4
 8000f40:	24000680 	.word	0x24000680
 8000f44:	24002a98 	.word	0x24002a98
 8000f48:	24008048 	.word	0x24008048
 8000f4c:	24000a90 	.word	0x24000a90
 8000f50:	2400445c 	.word	0x2400445c
 8000f54:	20004000 	.word	0x20004000
 8000f58:	08010400 	.word	0x08010400
 8000f5c:	08011400 	.word	0x08011400
 8000f60:	2400d7e2 	.word	0x2400d7e2

08000f64 <LED_switch>:
{	


	//if (++timer_cnt & 1) {LED_On(1); LED_Off(0);}
	//else                 {LED_On(0); LED_Off(1);}	
}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <HAL_GPIO_EXTI_Callback>:
// This is the handler of the software interrupt generated by the highest
// priority task that handles the interrupts generated by DMA2 Stream 0,
// when an ADC buffer is filled
//void EXTI1_IRQHandler()
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000f68:	b510      	push	{r4, lr}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // set bit 8 of GPIOF high, to be observed with an oscilloscope


	// copy into work buffers the data received by CIC decimator
	SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8000f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f6e:	493b      	ldr	r1, [pc, #236]	; (800105c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000f70:	483b      	ldr	r0, [pc, #236]	; (8001060 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000f72:	f000 fe7d 	bl	8001c70 <SDR_memcpy_f32>
	SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 8000f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f7a:	493a      	ldr	r1, [pc, #232]	; (8001064 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000f7c:	483a      	ldr	r0, [pc, #232]	; (8001068 <HAL_GPIO_EXTI_Callback+0x100>)
 8000f7e:	f000 fe77 	bl	8001c70 <SDR_memcpy_f32>




	// inverse sync filtering and decimation by 4
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8000f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f86:	4a39      	ldr	r2, [pc, #228]	; (800106c <HAL_GPIO_EXTI_Callback+0x104>)
 8000f88:	4935      	ldr	r1, [pc, #212]	; (8001060 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000f8a:	4839      	ldr	r0, [pc, #228]	; (8001070 <HAL_GPIO_EXTI_Callback+0x108>)
 8000f8c:	f00a ff64 	bl	800be58 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8000f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f94:	4a37      	ldr	r2, [pc, #220]	; (8001074 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000f96:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_GPIO_EXTI_Callback+0x100>)
 8000f98:	4837      	ldr	r0, [pc, #220]	; (8001078 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f9a:	f00a ff5d 	bl	800be58 <arm_fir_decimate_f32>

	// filter now with fast convolution
	//---------------------------------
	// shift the FFT buffer to the left
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000f9e:	4937      	ldr	r1, [pc, #220]	; (800107c <HAL_GPIO_EXTI_Callback+0x114>)
 8000fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400

	// compute the direct FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);

	// if LSB, copy the LSB in the lower half (USB)
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000fa4:	4c36      	ldr	r4, [pc, #216]	; (8001080 <HAL_GPIO_EXTI_Callback+0x118>)
	SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8000fa6:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8000faa:	f000 fe61 	bl	8001c70 <SDR_memcpy_f32>
	SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE);
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_GPIO_EXTI_Callback+0x114>)
 8000fb4:	492f      	ldr	r1, [pc, #188]	; (8001074 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000fb6:	482d      	ldr	r0, [pc, #180]	; (800106c <HAL_GPIO_EXTI_Callback+0x104>)
 8000fb8:	f000 fd4c 	bl	8001a54 <SDR_2R_toC_f32>
	SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8000fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc0:	4930      	ldr	r1, [pc, #192]	; (8001084 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000fc2:	4831      	ldr	r0, [pc, #196]	; (8001088 <HAL_GPIO_EXTI_Callback+0x120>)
 8000fc4:	f000 fe54 	bl	8001c70 <SDR_memcpy_f32>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 8000fc8:	2301      	movs	r3, #1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	492e      	ldr	r1, [pc, #184]	; (8001088 <HAL_GPIO_EXTI_Callback+0x120>)
 8000fce:	482f      	ldr	r0, [pc, #188]	; (800108c <HAL_GPIO_EXTI_Callback+0x124>)
 8000fd0:	f00a feac 	bl	800bd2c <arm_cfft_f32>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8000fd4:	7823      	ldrb	r3, [r4, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d039      	beq.n	800104e <HAL_GPIO_EXTI_Callback+0xe6>
	// mult. by the fast convolution mask
	arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <HAL_GPIO_EXTI_Callback+0x128>)
 8000fe0:	492c      	ldr	r1, [pc, #176]	; (8001094 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000fe2:	4829      	ldr	r0, [pc, #164]	; (8001088 <HAL_GPIO_EXTI_Callback+0x120>)
 8000fe4:	f00b f8f4 	bl	800c1d0 <arm_cmplx_mult_cmplx_f32>

	// compute now the inverse FFT
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4929      	ldr	r1, [pc, #164]	; (8001090 <HAL_GPIO_EXTI_Callback+0x128>)
 8000fec:	461a      	mov	r2, r3
 8000fee:	4827      	ldr	r0, [pc, #156]	; (800108c <HAL_GPIO_EXTI_Callback+0x124>)
 8000ff0:	f00a fe9c 	bl	800bd2c <arm_cfft_f32>
	// then do the overlap-discard
	SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);
 8000ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff8:	4927      	ldr	r1, [pc, #156]	; (8001098 <HAL_GPIO_EXTI_Callback+0x130>)
 8000ffa:	4828      	ldr	r0, [pc, #160]	; (800109c <HAL_GPIO_EXTI_Callback+0x134>)
 8000ffc:	f000 fe38 	bl	8001c70 <SDR_memcpy_f32>


	// we have now the bandpass filtered I/Q, demodulate the signal
	switch(CurrentMode)
 8001000:	7823      	ldrb	r3, [r4, #0]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d807      	bhi.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
 8001006:	e8df f003 	tbb	[pc, r3]
 800100a:	1d02      	.short	0x1d02
 800100c:	0f1d      	.short	0x0f1d
	{	
	case AM :
		SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 800100e:	4924      	ldr	r1, [pc, #144]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x138>)
 8001010:	4822      	ldr	r0, [pc, #136]	; (800109c <HAL_GPIO_EXTI_Callback+0x134>)
 8001012:	f000 ff7d 	bl	8001f10 <SDR_demodAM_AGC>


	// send the demodulated audio to the DMA buffer just emptied

	//LED_YELLOW_ON;
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101c:	4820      	ldr	r0, [pc, #128]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x138>)
 800101e:	6819      	ldr	r1, [r3, #0]
	//LED_YELLOW_OFF;


	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 8001024:	f000 bdba 	b.w	8001b9c <SDR_float_to_DAC_audio>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 8001028:	491d      	ldr	r1, [pc, #116]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x138>)
 800102a:	481c      	ldr	r0, [pc, #112]	; (800109c <HAL_GPIO_EXTI_Callback+0x134>)
 800102c:	f000 ffec 	bl	8002008 <SDR_demodSSB_CW_AGC>
		if(bw[CW] == Narrow)
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_GPIO_EXTI_Callback+0x140>)
 8001032:	78db      	ldrb	r3, [r3, #3]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1ee      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
			SDR_CWPeak(fAudio, BSIZE);
 8001038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x138>)
 800103e:	f000 fedd 	bl	8001dfc <SDR_CWPeak>
 8001042:	e7e8      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
		SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 8001044:	4916      	ldr	r1, [pc, #88]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x138>)
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <HAL_GPIO_EXTI_Callback+0x134>)
 8001048:	f000 ffde 	bl	8002008 <SDR_demodSSB_CW_AGC>
 800104c:	e7e3      	b.n	8001016 <HAL_GPIO_EXTI_Callback+0xae>
	if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	480d      	ldr	r0, [pc, #52]	; (8001088 <HAL_GPIO_EXTI_Callback+0x120>)
 8001054:	f000 fe28 	bl	8001ca8 <SDR_mirror_LSB>
 8001058:	e7bf      	b.n	8000fda <HAL_GPIO_EXTI_Callback+0x72>
 800105a:	bf00      	nop
 800105c:	2000d000 	.word	0x2000d000
 8001060:	20009000 	.word	0x20009000
 8001064:	2000b000 	.word	0x2000b000
 8001068:	20007000 	.word	0x20007000
 800106c:	20006800 	.word	0x20006800
 8001070:	24000684 	.word	0x24000684
 8001074:	20006000 	.word	0x20006000
 8001078:	240088d4 	.word	0x240088d4
 800107c:	24001a98 	.word	0x24001a98
 8001080:	2400c3dc 	.word	0x2400c3dc
 8001084:	24000a98 	.word	0x24000a98
 8001088:	20002000 	.word	0x20002000
 800108c:	080125b8 	.word	0x080125b8
 8001090:	20000000 	.word	0x20000000
 8001094:	20004000 	.word	0x20004000
 8001098:	20001000 	.word	0x20001000
 800109c:	24002bac 	.word	0x24002bac
 80010a0:	2400c3e0 	.word	0x2400c3e0
 80010a4:	24004488 	.word	0x24004488
 80010a8:	24008e98 	.word	0x24008e98

080010ac <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 80010ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
if(CurrentMode == CW)
 80010b0:	4b7c      	ldr	r3, [pc, #496]	; (80012a4 <ADC_Stream0_Handler+0x1f8>)
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 80010b2:	4c7d      	ldr	r4, [pc, #500]	; (80012a8 <ADC_Stream0_Handler+0x1fc>)
if(CurrentMode == CW)
 80010b4:	781b      	ldrb	r3, [r3, #0]
	pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 80010b6:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 80010ba:	4a7c      	ldr	r2, [pc, #496]	; (80012ac <ADC_Stream0_Handler+0x200>)
 80010bc:	2800      	cmp	r0, #0
 80010be:	bf18      	it	ne
 80010c0:	460c      	movne	r4, r1
if(CurrentMode == CW)
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	ed92 0a00 	vldr	s0, [r2]
{
 80010c8:	ed2d 8b10 	vpush	{d8-d15}
 80010cc:	b095      	sub	sp, #84	; 0x54
if(CurrentMode == CW)
 80010ce:	f000 837c 	beq.w	80017ca <ADC_Stream0_Handler+0x71e>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
else
	SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 80010d2:	f000 fc03 	bl	80018dc <SDR_ComputeLO>
 80010d6:	f204 33fe 	addw	r3, r4, #1022	; 0x3fe
 80010da:	1ea2      	subs	r2, r4, #2

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
sum = 0; k = BSIZE;
 80010dc:	ed9f 5a74 	vldr	s10, [pc, #464]	; 80012b0 <ADC_Stream0_Handler+0x204>
while(k)
{
	sum += pR[k-1];
 80010e0:	8819      	ldrh	r1, [r3, #0]
 80010e2:	3b08      	subs	r3, #8
 80010e4:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 80010e8:	88d9      	ldrh	r1, [r3, #6]
 80010ea:	ee07 1a10 	vmov	s14, r1
	sum += pR[k-3];
 80010ee:	8899      	ldrh	r1, [r3, #4]
	sum += pR[k-1];
 80010f0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	sum += pR[k-4];
 80010f4:	8858      	ldrh	r0, [r3, #2]
	sum += pR[k-3];
 80010f6:	ee07 1a90 	vmov	s15, r1
	sum += pR[k-2];
 80010fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	sum += pR[k-4];
 80010fe:	ee06 0a90 	vmov	s13, r0
while(k)
 8001102:	429a      	cmp	r2, r3
	sum += pR[k-3];
 8001104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	sum += pR[k-4];
 8001108:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001118:	ee35 5a27 	vadd.f32	s10, s10, s15
while(k)
 800111c:	d1e0      	bne.n	80010e0 <ADC_Stream0_Handler+0x34>
	k-=4;
}

TestSampledValue=pR[BSIZE/2];
 800111e:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 8001122:	2300      	movs	r3, #0

meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001124:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80012b4 <ADC_Stream0_Handler+0x208>

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001128:	4620      	mov	r0, r4
TestSampledValue=pR[BSIZE/2];
 800112a:	ee07 2a90 	vmov	s15, r2
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800112e:	4e62      	ldr	r6, [pc, #392]	; (80012b8 <ADC_Stream0_Handler+0x20c>)
 8001130:	ee25 5a07 	vmul.f32	s10, s10, s14
TestSampledValue=pR[BSIZE/2];
 8001134:	4c61      	ldr	r4, [pc, #388]	; (80012bc <ADC_Stream0_Handler+0x210>)
 8001136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113a:	4d61      	ldr	r5, [pc, #388]	; (80012c0 <ADC_Stream0_Handler+0x214>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800113c:	4a61      	ldr	r2, [pc, #388]	; (80012c4 <ADC_Stream0_Handler+0x218>)
 800113e:	eeb0 0a45 	vmov.f32	s0, s10
 8001142:	4961      	ldr	r1, [pc, #388]	; (80012c8 <ADC_Stream0_Handler+0x21c>)
meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001144:	ed86 5a00 	vstr	s10, [r6]
TestSampledValue=pR[BSIZE/2];
 8001148:	edc4 7a00 	vstr	s15, [r4]
 800114c:	802b      	strh	r3, [r5, #0]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 800114e:	f000 fcb3 	bl	8001ab8 <SDR_downconvert_f32>
// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001350 <ADC_Stream0_Handler+0x2a4>
 800115a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001354 <ADC_Stream0_Handler+0x2a8>
while(k--)
 800115e:	23ff      	movs	r3, #255	; 0xff
k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time
 8001160:	8029      	strh	r1, [r5, #0]
	//        which being separated in even and odd samples in advance becomes
	// (1 + 6z^-1 + z^-2) for odd samples and (4 + 4z^-1) for even samples, which, when summed, give :
	// odd + 6odd_old + odd_old2 + 4even + 4even_old =	odd + 6odd_old + odd_old2 + 4(even + even_old)

	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001162:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
 8001166:	4959      	ldr	r1, [pc, #356]	; (80012cc <ADC_Stream0_Handler+0x220>)
 8001168:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 800116c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8001358 <ADC_Stream0_Handler+0x2ac>
 8001170:	ed91 4a00 	vldr	s8, [r1]
 8001174:	4956      	ldr	r1, [pc, #344]	; (80012d0 <ADC_Stream0_Handler+0x224>)
 8001176:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 800135c <ADC_Stream0_Handler+0x2b0>
 800117a:	edd1 4a00 	vldr	s9, [r1]
 800117e:	4955      	ldr	r1, [pc, #340]	; (80012d4 <ADC_Stream0_Handler+0x228>)
 8001180:	ed9c fa00 	vldr	s30, [ip]
 8001184:	ed91 7a00 	vldr	s14, [r1]
 8001188:	4953      	ldr	r1, [pc, #332]	; (80012d8 <ADC_Stream0_Handler+0x22c>)
 800118a:	edde ea00 	vldr	s29, [lr]
 800118e:	ed91 2a00 	vldr	s4, [r1]
 8001192:	4952      	ldr	r1, [pc, #328]	; (80012dc <ADC_Stream0_Handler+0x230>)
 8001194:	edd8 9a00 	vldr	s19, [r8]
 8001198:	edd1 7a00 	vldr	s15, [r1]
 800119c:	4950      	ldr	r1, [pc, #320]	; (80012e0 <ADC_Stream0_Handler+0x234>)
 800119e:	edd9 fa00 	vldr	s31, [r9]
 80011a2:	edd1 2a00 	vldr	s5, [r1]
 80011a6:	494f      	ldr	r1, [pc, #316]	; (80012e4 <ADC_Stream0_Handler+0x238>)
 80011a8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8001360 <ADC_Stream0_Handler+0x2b4>
 80011ac:	ed91 1a00 	vldr	s2, [r1]
 80011b0:	494d      	ldr	r1, [pc, #308]	; (80012e8 <ADC_Stream0_Handler+0x23c>)
 80011b2:	4c4e      	ldr	r4, [pc, #312]	; (80012ec <ADC_Stream0_Handler+0x240>)
 80011b4:	edd1 1a00 	vldr	s3, [r1]
 80011b8:	494d      	ldr	r1, [pc, #308]	; (80012f0 <ADC_Stream0_Handler+0x244>)
 80011ba:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8001364 <ADC_Stream0_Handler+0x2b8>
 80011be:	ed91 6a00 	vldr	s12, [r1]
 80011c2:	494c      	ldr	r1, [pc, #304]	; (80012f4 <ADC_Stream0_Handler+0x248>)
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <ADC_Stream0_Handler+0x24c>)
 80011c6:	edd1 aa00 	vldr	s21, [r1]
 80011ca:	494c      	ldr	r1, [pc, #304]	; (80012fc <ADC_Stream0_Handler+0x250>)
 80011cc:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 80011d0:	edd1 6a00 	vldr	s13, [r1]
 80011d4:	494a      	ldr	r1, [pc, #296]	; (8001300 <ADC_Stream0_Handler+0x254>)
 80011d6:	ed91 aa00 	vldr	s20, [r1]
 80011da:	494a      	ldr	r1, [pc, #296]	; (8001304 <ADC_Stream0_Handler+0x258>)
 80011dc:	edd1 ba00 	vldr	s23, [r1]
 80011e0:	4949      	ldr	r1, [pc, #292]	; (8001308 <ADC_Stream0_Handler+0x25c>)
 80011e2:	ed91 ba00 	vldr	s22, [r1]
 80011e6:	4949      	ldr	r1, [pc, #292]	; (800130c <ADC_Stream0_Handler+0x260>)
 80011e8:	ed91 3a00 	vldr	s6, [r1]
 80011ec:	4948      	ldr	r1, [pc, #288]	; (8001310 <ADC_Stream0_Handler+0x264>)
 80011ee:	edd1 ca00 	vldr	s25, [r1]
 80011f2:	4948      	ldr	r1, [pc, #288]	; (8001314 <ADC_Stream0_Handler+0x268>)
 80011f4:	edd1 3a00 	vldr	s7, [r1]
 80011f8:	4947      	ldr	r1, [pc, #284]	; (8001318 <ADC_Stream0_Handler+0x26c>)
 80011fa:	ed91 ca00 	vldr	s24, [r1]
 80011fe:	4947      	ldr	r1, [pc, #284]	; (800131c <ADC_Stream0_Handler+0x270>)
 8001200:	ed91 ea00 	vldr	s28, [r1]
 8001204:	4946      	ldr	r1, [pc, #280]	; (8001320 <ADC_Stream0_Handler+0x274>)
 8001206:	ed91 9a00 	vldr	s18, [r1]
 800120a:	4946      	ldr	r1, [pc, #280]	; (8001324 <ADC_Stream0_Handler+0x278>)
 800120c:	edd1 0a00 	vldr	s1, [r1]
 8001210:	4945      	ldr	r1, [pc, #276]	; (8001328 <ADC_Stream0_Handler+0x27c>)
 8001212:	edcd 0a05 	vstr	s1, [sp, #20]
 8001216:	edd1 0a00 	vldr	s1, [r1]
 800121a:	4944      	ldr	r1, [pc, #272]	; (800132c <ADC_Stream0_Handler+0x280>)
 800121c:	edcd 0a07 	vstr	s1, [sp, #28]
 8001220:	edd1 0a00 	vldr	s1, [r1]
 8001224:	4942      	ldr	r1, [pc, #264]	; (8001330 <ADC_Stream0_Handler+0x284>)
 8001226:	edcd 0a04 	vstr	s1, [sp, #16]
 800122a:	edd1 0a00 	vldr	s1, [r1]
 800122e:	4941      	ldr	r1, [pc, #260]	; (8001334 <ADC_Stream0_Handler+0x288>)
 8001230:	edcd 0a02 	vstr	s1, [sp, #8]
 8001234:	edd1 0a00 	vldr	s1, [r1]
 8001238:	493f      	ldr	r1, [pc, #252]	; (8001338 <ADC_Stream0_Handler+0x28c>)
 800123a:	edcd 0a06 	vstr	s1, [sp, #24]
 800123e:	edd1 0a00 	vldr	s1, [r1]
 8001242:	493e      	ldr	r1, [pc, #248]	; (800133c <ADC_Stream0_Handler+0x290>)
 8001244:	edcd 0a03 	vstr	s1, [sp, #12]
 8001248:	edd1 0a00 	vldr	s1, [r1]
 800124c:	493c      	ldr	r1, [pc, #240]	; (8001340 <ADC_Stream0_Handler+0x294>)
 800124e:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 8001252:	edda 0a00 	vldr	s1, [sl]
 8001256:	edcd 0a0f 	vstr	s1, [sp, #60]	; 0x3c
 800125a:	edd4 0a00 	vldr	s1, [r4]
 800125e:	4c39      	ldr	r4, [pc, #228]	; (8001344 <ADC_Stream0_Handler+0x298>)
 8001260:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 8001264:	edd4 0a00 	vldr	s1, [r4]
 8001268:	4c37      	ldr	r4, [pc, #220]	; (8001348 <ADC_Stream0_Handler+0x29c>)
 800126a:	edcd 0a08 	vstr	s1, [sp, #32]
 800126e:	edd4 0a00 	vldr	s1, [r4]
 8001272:	4c36      	ldr	r4, [pc, #216]	; (800134c <ADC_Stream0_Handler+0x2a0>)
 8001274:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8001278:	edd4 0a00 	vldr	s1, [r4]
 800127c:	f9bb 4000 	ldrsh.w	r4, [fp]
 8001280:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 8001284:	eef0 0a64 	vmov.f32	s1, s9
 8001288:	4626      	mov	r6, r4
 800128a:	eef0 4a61 	vmov.f32	s9, s3
 800128e:	460c      	mov	r4, r1
 8001290:	eef0 1a4f 	vmov.f32	s3, s30
 8001294:	eeb0 fa4c 	vmov.f32	s30, s24
 8001298:	eeb0 ca6d 	vmov.f32	s24, s27
 800129c:	eef0 da4d 	vmov.f32	s27, s26
while(k--)
 80012a0:	e160      	b.n	8001564 <ADC_Stream0_Handler+0x4b8>
 80012a2:	bf00      	nop
 80012a4:	2400c3dc 	.word	0x2400c3dc
 80012a8:	2400cbe0 	.word	0x2400cbe0
 80012ac:	24009ea8 	.word	0x24009ea8
 80012b0:	00000000 	.word	0x00000000
 80012b4:	3b000000 	.word	0x3b000000
 80012b8:	2400c3c0 	.word	0x2400c3c0
 80012bc:	2400c3d8 	.word	0x2400c3d8
 80012c0:	24000610 	.word	0x24000610
 80012c4:	24008058 	.word	0x24008058
 80012c8:	24007848 	.word	0x24007848
 80012cc:	24000584 	.word	0x24000584
 80012d0:	24000580 	.word	0x24000580
 80012d4:	240005bc 	.word	0x240005bc
 80012d8:	240005b8 	.word	0x240005b8
 80012dc:	240005b4 	.word	0x240005b4
 80012e0:	240005b0 	.word	0x240005b0
 80012e4:	2400058c 	.word	0x2400058c
 80012e8:	24000588 	.word	0x24000588
 80012ec:	2400060c 	.word	0x2400060c
 80012f0:	240005cc 	.word	0x240005cc
 80012f4:	240005c8 	.word	0x240005c8
 80012f8:	24007850 	.word	0x24007850
 80012fc:	240005c4 	.word	0x240005c4
 8001300:	240005c0 	.word	0x240005c0
 8001304:	24000594 	.word	0x24000594
 8001308:	24000590 	.word	0x24000590
 800130c:	240005dc 	.word	0x240005dc
 8001310:	240005d8 	.word	0x240005d8
 8001314:	240005d4 	.word	0x240005d4
 8001318:	240005d0 	.word	0x240005d0
 800131c:	24000598 	.word	0x24000598
 8001320:	240005e4 	.word	0x240005e4
 8001324:	240005a4 	.word	0x240005a4
 8001328:	240005a0 	.word	0x240005a0
 800132c:	240005fc 	.word	0x240005fc
 8001330:	240005f8 	.word	0x240005f8
 8001334:	240005f4 	.word	0x240005f4
 8001338:	240005f0 	.word	0x240005f0
 800133c:	240005ac 	.word	0x240005ac
 8001340:	24008060 	.word	0x24008060
 8001344:	24000608 	.word	0x24000608
 8001348:	24000604 	.word	0x24000604
 800134c:	24000600 	.word	0x24000600
 8001350:	2400059c 	.word	0x2400059c
 8001354:	240005ec 	.word	0x240005ec
 8001358:	240005e8 	.word	0x240005e8
 800135c:	240005e0 	.word	0x240005e0
 8001360:	240005a8 	.word	0x240005a8
 8001364:	2400057c 	.word	0x2400057c
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 2
	// now compute the couple of elements for the next step

	inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 8001368:	eeaa 6a85 	vfma.f32	s12, s21, s10

	inE2Rold = inER;                           inE2Iold = inEI;
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;

	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800136c:	0799      	lsls	r1, r3, #30
	outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 800136e:	eeea 6a05 	vfma.f32	s13, s20, s10
 8001372:	ee3d 4aa4 	vadd.f32	s8, s27, s9
 8001376:	ee31 1a0c 	vadd.f32	s2, s2, s24
 800137a:	eea1 6a25 	vfma.f32	s12, s2, s11
 800137e:	eee4 6a25 	vfma.f32	s13, s8, s11
 8001382:	ee76 4a07 	vadd.f32	s9, s12, s14
 8001386:	ee36 4aa7 	vadd.f32	s8, s13, s15
	if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 800138a:	f100 810d 	bmi.w	80015a8 <ADC_Stream0_Handler+0x4fc>
	// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 800138e:	eeac 3a85 	vfma.f32	s6, s25, s10
 8001392:	eddd 6a00 	vldr	s13, [sp]
 8001396:	eeef 3a05 	vfma.f32	s7, s30, s10
 800139a:	ed9d 6a01 	vldr	s12, [sp, #4]
 800139e:	ee76 baab 	vadd.f32	s23, s13, s23

	inE3Rold  = inER;                          inE3Iold  = inEI;
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80013a2:	075f      	lsls	r7, r3, #29
	outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80013a4:	ee36 ba0b 	vadd.f32	s22, s12, s22
 80013a8:	eeab 3aa5 	vfma.f32	s6, s23, s11
 80013ac:	eeeb 3a25 	vfma.f32	s7, s22, s11
 80013b0:	ee33 1a24 	vadd.f32	s2, s6, s9
 80013b4:	ee73 0a84 	vadd.f32	s1, s7, s8
	if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 80013b8:	f100 8196 	bmi.w	80016e8 <ADC_Stream0_Handler+0x63c>
	// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
	// produced using 4 input samples, totalling a decimation by 8
	// now compute the couple of elements for the next step

	inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80013bc:	eeef 9a85 	vfma.f32	s19, s31, s10
 80013c0:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 80013c4:	eea1 9a85 	vfma.f32	s18, s3, s10
 80013c8:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 80013cc:	ee7e eaa3 	vadd.f32	s29, s29, s7

	inE4Rold = inER;                           inE4Iold = inEI;
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80013d0:	0719      	lsls	r1, r3, #28
	outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 80013d2:	ee3e ea03 	vadd.f32	s28, s28, s6
 80013d6:	eeee 9aa5 	vfma.f32	s19, s29, s11
 80013da:	eeae 9a25 	vfma.f32	s18, s28, s11
 80013de:	ee39 ba81 	vadd.f32	s22, s19, s2
 80013e2:	ee79 ba20 	vadd.f32	s23, s18, s1
	if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 80013e6:	f100 819c 	bmi.w	8001722 <ADC_Stream0_Handler+0x676>
	// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
	// and the odd element in outR, outI
	// now compute the couple of elements for the next step

	inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80013ea:	ed9d ea04 	vldr	s28, [sp, #16]

	inE5Rold  = inER;                          inE5Iold  = inEI;
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 80013ee:	f013 0110 	ands.w	r1, r3, #16
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 80013f2:	ed9d 9a02 	vldr	s18, [sp, #8]
 80013f6:	eddd ea06 	vldr	s29, [sp, #24]
 80013fa:	eddd 9a03 	vldr	s19, [sp, #12]
 80013fe:	eea9 ea05 	vfma.f32	s28, s18, s10
 8001402:	ed9d 3a05 	vldr	s6, [sp, #20]
 8001406:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
 800140a:	eee9 ea85 	vfma.f32	s29, s19, s10
 800140e:	eddd 6a07 	vldr	s13, [sp, #28]
 8001412:	ee33 6a83 	vadd.f32	s12, s7, s6
 8001416:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800141a:	9105      	str	r1, [sp, #20]
	outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800141c:	ee73 6a26 	vadd.f32	s13, s6, s13
 8001420:	eea6 ea25 	vfma.f32	s28, s12, s11
 8001424:	eee6 eaa5 	vfma.f32	s29, s13, s11
 8001428:	ee3e ea0b 	vadd.f32	s28, s28, s22
 800142c:	ee7e eaab 	vadd.f32	s29, s29, s23
	if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001430:	f040 81a0 	bne.w	8001774 <ADC_Stream0_Handler+0x6c8>
	// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
	// produced with 4 of the previous elem, i.e. with 16 input samples, totalling
	// a decimation by 16. Now compute the couple of elements for the next step

	inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001434:	ed9d 6a08 	vldr	s12, [sp, #32]
	// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
	// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band

	// create a block of BSIZE*4 entries, which will be then decimated by 4

	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001438:	00b1      	lsls	r1, r6, #2
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800143a:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800143e:	3601      	adds	r6, #1
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001440:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 8001444:	eee6 6a05 	vfma.f32	s13, s12, s10
 8001448:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 800144c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001450:	b236      	sxth	r6, r6
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001452:	eea3 6a85 	vfma.f32	s12, s7, s10
 8001456:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 800145a:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
	//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

	if(idx < BSIZE*4)
 800145e:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001462:	ee73 3a23 	vadd.f32	s7, s6, s7
 8001466:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800146a:	4fdc      	ldr	r7, [pc, #880]	; (80017dc <ADC_Stream0_Handler+0x730>)
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800146c:	ee33 3a09 	vadd.f32	s6, s6, s18
 8001470:	eee3 6aa5 	vfma.f32	s13, s7, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001474:	440f      	add	r7, r1
 8001476:	eddf 3ada 	vldr	s7, [pc, #872]	; 80017e0 <ADC_Stream0_Handler+0x734>
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800147a:	eea3 6a25 	vfma.f32	s12, s6, s11
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800147e:	9704      	str	r7, [sp, #16]
 8001480:	4fd8      	ldr	r7, [pc, #864]	; (80017e4 <ADC_Stream0_Handler+0x738>)
 8001482:	4439      	add	r1, r7
 8001484:	9f04      	ldr	r7, [sp, #16]
	outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001486:	ee76 6a8e 	vadd.f32	s13, s13, s28
 800148a:	ee36 6a2e 	vadd.f32	s12, s12, s29
	Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800148e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8001492:	ee26 6a23 	vmul.f32	s12, s12, s7
 8001496:	edc7 6a00 	vstr	s13, [r7]
 800149a:	ed81 6a00 	vstr	s12, [r1]
	if(idx < BSIZE*4)
 800149e:	f2c0 81e3 	blt.w	8001868 <ADC_Stream0_Handler+0x7bc>

#endif

		// generate now an interrupt to signal the base band processing routine that it has a new buffer

		EXTI->SWIER1 |= GPIO_PIN_14;
 80014a2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80014a6:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 80014aa:	ed9d 9a02 	vldr	s18, [sp, #8]
 80014ae:	eef0 3a4f 	vmov.f32	s7, s30
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	eeb0 3a6c 	vmov.f32	s6, s25
 80014b8:	ed9d 6a08 	vldr	s12, [sp, #32]
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80014bc:	eeb0 fa44 	vmov.f32	s30, s8
		EXTI->SWIER1 |= GPIO_PIN_14;
 80014c0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80014c4:	eef0 6a4a 	vmov.f32	s13, s20
 80014c8:	edcd 9a06 	vstr	s19, [sp, #24]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80014cc:	eeb0 aa67 	vmov.f32	s20, s15
		EXTI->SWIER1 |= GPIO_PIN_14;
 80014d0:	ed8d 9a04 	vstr	s18, [sp, #16]
 80014d4:	eef0 9a6f 	vmov.f32	s19, s31
 80014d8:	eeb0 9a61 	vmov.f32	s18, s3
 80014dc:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80014e0:	eef0 1a60 	vmov.f32	s3, s1
		EXTI->SWIER1 |= GPIO_PIN_14;
 80014e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80014e8:	eef0 fa41 	vmov.f32	s31, s2
	inE6Rold = inER;                           inE6Iold = inEI;
 80014ec:	ed9d 4a13 	vldr	s8, [sp, #76]	; 0x4c
		EXTI->SWIER1 |= GPIO_PIN_14;
 80014f0:	eeb0 6a6a 	vmov.f32	s12, s21
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 80014f4:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80014f8:	eef0 ca64 	vmov.f32	s25, s9
	inE6Rold = inER;                           inE6Iold = inEI;
 80014fc:	eddd 4a12 	vldr	s9, [sp, #72]	; 0x48
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001500:	eef0 aa47 	vmov.f32	s21, s14
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001504:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001508:	ed8d ea08 	vstr	s28, [sp, #32]
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 800150c:	edcd ba03 	vstr	s23, [sp, #12]
 8001510:	ed8d ba02 	vstr	s22, [sp, #8]
	idx = 0;
 8001514:	9e05      	ldr	r6, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001516:	60b9      	str	r1, [r7, #8]
	inE6Rold = inER;                           inE6Iold = inEI;
 8001518:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 800151c:	edcd 4a0d 	vstr	s9, [sp, #52]	; 0x34
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001520:	ed8d 7a07 	vstr	s14, [sp, #28]
	inE2Rold = inER;                           inE2Iold = inEI;
 8001524:	eef0 4a6d 	vmov.f32	s9, s27
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001528:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
	inE2Rold = inER;                           inE2Iold = inEI;
 800152c:	eeb0 1a4c 	vmov.f32	s2, s24
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001530:	ed9d ba01 	vldr	s22, [sp, #4]
 8001534:	eddd ba00 	vldr	s23, [sp]
	inE4Rold = inER;                           inE4Iold = inEI;
 8001538:	ed9d ea0a 	vldr	s28, [sp, #40]	; 0x28
 800153c:	eddd ea0b 	vldr	s29, [sp, #44]	; 0x2c
	inE5Rold  = inER;                          inE5Iold  = inEI;
 8001540:	edcd 7a05 	vstr	s15, [sp, #20]
 8001544:	3b01      	subs	r3, #1
	inE1Rold = inER;                           inE1Iold = inEI;
 8001546:	eef0 7a62 	vmov.f32	s15, s5
 800154a:	eeb0 7a42 	vmov.f32	s14, s4
 800154e:	3208      	adds	r2, #8
 8001550:	eef0 0a4d 	vmov.f32	s1, s26
 8001554:	b29b      	uxth	r3, r3
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001556:	eef0 2a68 	vmov.f32	s5, s17
 800155a:	3408      	adds	r4, #8
	inE1Rold = inER;                           inE1Iold = inEI;
 800155c:	eeb0 4a48 	vmov.f32	s8, s16
	inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001560:	eeb0 2a40 	vmov.f32	s4, s0
while(k--)
 8001564:	4290      	cmp	r0, r2
 8001566:	d030      	beq.n	80015ca <ADC_Stream0_Handler+0x51e>
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001568:	eea2 7a05 	vfma.f32	s14, s4, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800156c:	ed12 0a01 	vldr	s0, [r2, #-4]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001570:	eee2 7a85 	vfma.f32	s15, s5, s10
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 8001574:	ed12 8a02 	vldr	s16, [r2, #-8]
 8001578:	ed54 8a01 	vldr	s17, [r4, #-4]
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800157c:	07df      	lsls	r7, r3, #31
	inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;
 800157e:	ed14 da02 	vldr	s26, [r4, #-8]
	outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001582:	ee34 4a08 	vadd.f32	s8, s8, s16
 8001586:	ee70 0a8d 	vadd.f32	s1, s1, s26
 800158a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800158e:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8001592:	eea4 7a25 	vfma.f32	s14, s8, s11
 8001596:	eee0 7aa5 	vfma.f32	s15, s1, s11
	if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero),
 800159a:	f57f aee5 	bpl.w	8001368 <ADC_Stream0_Handler+0x2bc>
		tmp1R = outR; tmp1I = outI;  // save the even element produced
 800159e:	eef0 da67 	vmov.f32	s27, s15
 80015a2:	eeb0 ca47 	vmov.f32	s24, s14
 80015a6:	e7cd      	b.n	8001544 <ADC_Stream0_Handler+0x498>
 80015a8:	eef0 6a4a 	vmov.f32	s13, s20
		tmp2R = outR; tmp2I = outI;  // save the even element produced
 80015ac:	edcd 4a00 	vstr	s9, [sp]
 80015b0:	eeb0 6a6a 	vmov.f32	s12, s21
 80015b4:	ed8d 4a01 	vstr	s8, [sp, #4]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80015b8:	eeb0 aa67 	vmov.f32	s20, s15
 80015bc:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 80015c0:	eef0 4a6d 	vmov.f32	s9, s27
 80015c4:	eeb0 1a4c 	vmov.f32	s2, s24
 80015c8:	e7bc      	b.n	8001544 <ADC_Stream0_Handler+0x498>
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <ADC_Stream0_Handler+0x73c>)
 80015cc:	eeb0 ca4f 	vmov.f32	s24, s30
 80015d0:	eeb0 fa61 	vmov.f32	s30, s3
 80015d4:	edc9 fa00 	vstr	s31, [r9]
 80015d8:	ed82 9a00 	vstr	s18, [r2]
 80015dc:	eef0 1a64 	vmov.f32	s3, s9
 80015e0:	4a82      	ldr	r2, [pc, #520]	; (80017ec <ADC_Stream0_Handler+0x740>)
 80015e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e6:	edc8 9a00 	vstr	s19, [r8]
 80015ea:	ed82 ea00 	vstr	s28, [r2]
 80015ee:	4a80      	ldr	r2, [pc, #512]	; (80017f0 <ADC_Stream0_Handler+0x744>)
 80015f0:	edce ea00 	vstr	s29, [lr]
 80015f4:	ed82 2a00 	vstr	s4, [r2]
 80015f8:	4a7e      	ldr	r2, [pc, #504]	; (80017f4 <ADC_Stream0_Handler+0x748>)
 80015fa:	ed8c fa00 	vstr	s30, [ip]
 80015fe:	ed82 7a00 	vstr	s14, [r2]
 8001602:	4a7d      	ldr	r2, [pc, #500]	; (80017f8 <ADC_Stream0_Handler+0x74c>)
 8001604:	ed82 4a00 	vstr	s8, [r2]
 8001608:	4a7c      	ldr	r2, [pc, #496]	; (80017fc <ADC_Stream0_Handler+0x750>)
 800160a:	edc2 2a00 	vstr	s5, [r2]
 800160e:	4a7c      	ldr	r2, [pc, #496]	; (8001800 <ADC_Stream0_Handler+0x754>)
 8001610:	edc2 7a00 	vstr	s15, [r2]
 8001614:	4a7b      	ldr	r2, [pc, #492]	; (8001804 <ADC_Stream0_Handler+0x758>)
 8001616:	eddd 7a02 	vldr	s15, [sp, #8]
 800161a:	edc2 0a00 	vstr	s1, [r2]
 800161e:	4a7a      	ldr	r2, [pc, #488]	; (8001808 <ADC_Stream0_Handler+0x75c>)
 8001620:	edc2 aa00 	vstr	s21, [r2]
 8001624:	4a79      	ldr	r2, [pc, #484]	; (800180c <ADC_Stream0_Handler+0x760>)
 8001626:	ed82 6a00 	vstr	s12, [r2]
 800162a:	4a79      	ldr	r2, [pc, #484]	; (8001810 <ADC_Stream0_Handler+0x764>)
 800162c:	ed82 1a00 	vstr	s2, [r2]
 8001630:	4a78      	ldr	r2, [pc, #480]	; (8001814 <ADC_Stream0_Handler+0x768>)
 8001632:	ed82 aa00 	vstr	s20, [r2]
 8001636:	4a78      	ldr	r2, [pc, #480]	; (8001818 <ADC_Stream0_Handler+0x76c>)
 8001638:	edc2 6a00 	vstr	s13, [r2]
 800163c:	4a77      	ldr	r2, [pc, #476]	; (800181c <ADC_Stream0_Handler+0x770>)
 800163e:	edc2 1a00 	vstr	s3, [r2]
 8001642:	4a77      	ldr	r2, [pc, #476]	; (8001820 <ADC_Stream0_Handler+0x774>)
 8001644:	edc2 ca00 	vstr	s25, [r2]
 8001648:	4a76      	ldr	r2, [pc, #472]	; (8001824 <ADC_Stream0_Handler+0x778>)
 800164a:	ed82 3a00 	vstr	s6, [r2]
 800164e:	4a76      	ldr	r2, [pc, #472]	; (8001828 <ADC_Stream0_Handler+0x77c>)
 8001650:	edc2 ba00 	vstr	s23, [r2]
 8001654:	4a75      	ldr	r2, [pc, #468]	; (800182c <ADC_Stream0_Handler+0x780>)
 8001656:	ed82 ca00 	vstr	s24, [r2]
 800165a:	4a75      	ldr	r2, [pc, #468]	; (8001830 <ADC_Stream0_Handler+0x784>)
 800165c:	edc2 3a00 	vstr	s7, [r2]
 8001660:	4a74      	ldr	r2, [pc, #464]	; (8001834 <ADC_Stream0_Handler+0x788>)
 8001662:	ed82 ba00 	vstr	s22, [r2]
 8001666:	4a74      	ldr	r2, [pc, #464]	; (8001838 <ADC_Stream0_Handler+0x78c>)
 8001668:	edc2 7a00 	vstr	s15, [r2]
 800166c:	eddd 7a04 	vldr	s15, [sp, #16]
 8001670:	4a72      	ldr	r2, [pc, #456]	; (800183c <ADC_Stream0_Handler+0x790>)
 8001672:	edc2 7a00 	vstr	s15, [r2]
 8001676:	eddd 7a05 	vldr	s15, [sp, #20]
 800167a:	4a71      	ldr	r2, [pc, #452]	; (8001840 <ADC_Stream0_Handler+0x794>)
 800167c:	edc2 7a00 	vstr	s15, [r2]
 8001680:	eddd 7a03 	vldr	s15, [sp, #12]
 8001684:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <ADC_Stream0_Handler+0x798>)
 8001686:	edc2 7a00 	vstr	s15, [r2]
 800168a:	eddd 7a06 	vldr	s15, [sp, #24]
 800168e:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <ADC_Stream0_Handler+0x79c>)
 8001690:	802b      	strh	r3, [r5, #0]
 8001692:	edc2 7a00 	vstr	s15, [r2]
 8001696:	eddd 7a07 	vldr	s15, [sp, #28]
 800169a:	4a6c      	ldr	r2, [pc, #432]	; (800184c <ADC_Stream0_Handler+0x7a0>)
 800169c:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <ADC_Stream0_Handler+0x7a4>)
 800169e:	edc2 7a00 	vstr	s15, [r2]
 80016a2:	eddd 7a08 	vldr	s15, [sp, #32]
 80016a6:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <ADC_Stream0_Handler+0x7a8>)
 80016a8:	f8ab 6000 	strh.w	r6, [fp]
 80016ac:	edc2 7a00 	vstr	s15, [r2]
 80016b0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 80016b4:	edc3 7a00 	vstr	s15, [r3]
 80016b8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <ADC_Stream0_Handler+0x7ac>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
 80016c2:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <ADC_Stream0_Handler+0x7b0>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
 80016cc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80016d0:	4b63      	ldr	r3, [pc, #396]	; (8001860 <ADC_Stream0_Handler+0x7b4>)
 80016d2:	edc3 7a00 	vstr	s15, [r3]
 80016d6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 80016da:	edca 7a00 	vstr	s15, [sl]
	}

	// LED_YELLOW_OFF;

}
 80016de:	b015      	add	sp, #84	; 0x54
 80016e0:	ecbd 8b10 	vpop	{d8-d15}
 80016e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016e8:	eeb0 ba46 	vmov.f32	s22, s12
		tmp3R = outR; tmp3I = outI;  // save the even element produced
 80016ec:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 80016f0:	eef0 ba66 	vmov.f32	s23, s13
 80016f4:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 80016f8:	eef0 3a4f 	vmov.f32	s7, s30
 80016fc:	eeb0 3a6c 	vmov.f32	s6, s25
 8001700:	eef0 6a4a 	vmov.f32	s13, s20
 8001704:	eeb0 6a6a 	vmov.f32	s12, s21
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001708:	eef0 ca64 	vmov.f32	s25, s9
 800170c:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001710:	eeb0 aa67 	vmov.f32	s20, s15
 8001714:	eef0 aa47 	vmov.f32	s21, s14
	inE2Rold = inER;                           inE2Iold = inEI;
 8001718:	eef0 4a6d 	vmov.f32	s9, s27
 800171c:	eeb0 1a4c 	vmov.f32	s2, s24
 8001720:	e710      	b.n	8001544 <ADC_Stream0_Handler+0x498>
 8001722:	eeb0 ea43 	vmov.f32	s28, s6
		tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001726:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 800172a:	eef0 ea63 	vmov.f32	s29, s7
 800172e:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8001732:	eef0 3a4f 	vmov.f32	s7, s30
	inE3Rold  = inER;                          inE3Iold  = inEI;
 8001736:	ed9d ba01 	vldr	s22, [sp, #4]
 800173a:	eeb0 3a6c 	vmov.f32	s6, s25
 800173e:	eddd ba00 	vldr	s23, [sp]
 8001742:	eef0 6a4a 	vmov.f32	s13, s20
 8001746:	eeb0 6a6a 	vmov.f32	s12, s21
 800174a:	eeb0 9a61 	vmov.f32	s18, s3
 800174e:	eef0 9a6f 	vmov.f32	s19, s31
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001752:	eef0 ca64 	vmov.f32	s25, s9
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001756:	eef0 fa41 	vmov.f32	s31, s2
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 800175a:	eeb0 fa44 	vmov.f32	s30, s8
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 800175e:	eeb0 aa67 	vmov.f32	s20, s15
 8001762:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001766:	eef0 1a60 	vmov.f32	s3, s1
	inE2Rold = inER;                           inE2Iold = inEI;
 800176a:	eef0 4a6d 	vmov.f32	s9, s27
 800176e:	eeb0 1a4c 	vmov.f32	s2, s24
 8001772:	e6e7      	b.n	8001544 <ADC_Stream0_Handler+0x498>
 8001774:	eddd 6a02 	vldr	s13, [sp, #8]
 8001778:	eef0 3a4f 	vmov.f32	s7, s30
 800177c:	edcd 9a06 	vstr	s19, [sp, #24]
 8001780:	eeb0 3a6c 	vmov.f32	s6, s25
 8001784:	edcd 6a04 	vstr	s13, [sp, #16]
 8001788:	eeb0 6a6a 	vmov.f32	s12, s21
 800178c:	eef0 6a4a 	vmov.f32	s13, s20
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001790:	edcd ba03 	vstr	s23, [sp, #12]
 8001794:	eeb0 9a61 	vmov.f32	s18, s3
 8001798:	ed8d ba02 	vstr	s22, [sp, #8]
 800179c:	eef0 9a6f 	vmov.f32	s19, s31
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 80017a0:	edcd ea13 	vstr	s29, [sp, #76]	; 0x4c
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017a4:	eeb0 fa44 	vmov.f32	s30, s8
		tmp5R = outR; tmp5I = outI;  // save the even element produced
 80017a8:	ed8d ea12 	vstr	s28, [sp, #72]	; 0x48
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 80017ac:	eef0 ca64 	vmov.f32	s25, s9
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80017b0:	eeb0 aa67 	vmov.f32	s20, s15
 80017b4:	eef0 aa47 	vmov.f32	s21, s14
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80017b8:	eef0 1a60 	vmov.f32	s3, s1
 80017bc:	eef0 fa41 	vmov.f32	s31, s2
	inE5Rold  = inER;                          inE5Iold  = inEI;
 80017c0:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 80017c4:	edcd 7a07 	vstr	s15, [sp, #28]
 80017c8:	e6ac      	b.n	8001524 <ADC_Stream0_Handler+0x478>
	SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <ADC_Stream0_Handler+0x7b8>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80017d4:	f000 f882 	bl	80018dc <SDR_ComputeLO>
 80017d8:	e47d      	b.n	80010d6 <ADC_Stream0_Handler+0x2a>
 80017da:	bf00      	nop
 80017dc:	2000d000 	.word	0x2000d000
 80017e0:	34000000 	.word	0x34000000
 80017e4:	2000b000 	.word	0x2000b000
 80017e8:	240005e4 	.word	0x240005e4
 80017ec:	24000598 	.word	0x24000598
 80017f0:	240005b8 	.word	0x240005b8
 80017f4:	240005bc 	.word	0x240005bc
 80017f8:	24000584 	.word	0x24000584
 80017fc:	240005b0 	.word	0x240005b0
 8001800:	240005b4 	.word	0x240005b4
 8001804:	24000580 	.word	0x24000580
 8001808:	240005c8 	.word	0x240005c8
 800180c:	240005cc 	.word	0x240005cc
 8001810:	2400058c 	.word	0x2400058c
 8001814:	240005c0 	.word	0x240005c0
 8001818:	240005c4 	.word	0x240005c4
 800181c:	24000588 	.word	0x24000588
 8001820:	240005d8 	.word	0x240005d8
 8001824:	240005dc 	.word	0x240005dc
 8001828:	24000594 	.word	0x24000594
 800182c:	240005d0 	.word	0x240005d0
 8001830:	240005d4 	.word	0x240005d4
 8001834:	24000590 	.word	0x24000590
 8001838:	240005f8 	.word	0x240005f8
 800183c:	240005fc 	.word	0x240005fc
 8001840:	240005a4 	.word	0x240005a4
 8001844:	240005f0 	.word	0x240005f0
 8001848:	240005f4 	.word	0x240005f4
 800184c:	240005a0 	.word	0x240005a0
 8001850:	2400060c 	.word	0x2400060c
 8001854:	24000608 	.word	0x24000608
 8001858:	240005ac 	.word	0x240005ac
 800185c:	24000600 	.word	0x24000600
 8001860:	24000604 	.word	0x24000604
 8001864:	24009ea0 	.word	0x24009ea0
 8001868:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 800186c:	eef0 3a4f 	vmov.f32	s7, s30
 8001870:	eeb0 3a6c 	vmov.f32	s6, s25
	inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001874:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
 8001878:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800187c:	eeb0 6a6a 	vmov.f32	s12, s21
 8001880:	eddd 6a08 	vldr	s13, [sp, #32]
 8001884:	eeb0 9a61 	vmov.f32	s18, s3
 8001888:	eef0 9a6f 	vmov.f32	s19, s31
 800188c:	ed8d ea08 	vstr	s28, [sp, #32]
 8001890:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
	inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001894:	eeb0 fa44 	vmov.f32	s30, s8
 8001898:	eddd 6a03 	vldr	s13, [sp, #12]
 800189c:	eef0 ca64 	vmov.f32	s25, s9
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80018a0:	edcd ba03 	vstr	s23, [sp, #12]
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018a4:	eef0 aa47 	vmov.f32	s21, s14
 80018a8:	edcd 6a06 	vstr	s13, [sp, #24]
	inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 80018ac:	eef0 1a60 	vmov.f32	s3, s1
 80018b0:	eddd 6a02 	vldr	s13, [sp, #8]
 80018b4:	eef0 fa41 	vmov.f32	s31, s2
	inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 80018b8:	ed8d ba02 	vstr	s22, [sp, #8]
 80018bc:	edcd 6a04 	vstr	s13, [sp, #16]
 80018c0:	eef0 6a4a 	vmov.f32	s13, s20
	inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 80018c4:	eeb0 aa67 	vmov.f32	s20, s15
	inE6Rold = inER;                           inE6Iold = inEI;
 80018c8:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80018cc:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80018d0:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80018d4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80018d8:	e772      	b.n	80017c0 <ADC_Stream0_Handler+0x714>
 80018da:	bf00      	nop

080018dc <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <SDR_ComputeLO+0x140>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eef4 7a40 	vcmp.f32	s15, s0
{
 80018e8:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	d171      	bne.n	80019d6 <SDR_ComputeLO+0xfa>
 80018f2:	4a4b      	ldr	r2, [pc, #300]	; (8001a20 <SDR_ComputeLO+0x144>)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <SDR_ComputeLO+0x148>)
 80018f6:	ed92 8a00 	vldr	s16, [r2]
 80018fa:	ed93 6a00 	vldr	s12, [r3]
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 80018fe:	484a      	ldr	r0, [pc, #296]	; (8001a28 <SDR_ComputeLO+0x14c>)
 8001900:	4c4a      	ldr	r4, [pc, #296]	; (8001a2c <SDR_ComputeLO+0x150>)
 8001902:	4d4b      	ldr	r5, [pc, #300]	; (8001a30 <SDR_ComputeLO+0x154>)
 8001904:	4b4b      	ldr	r3, [pc, #300]	; (8001a34 <SDR_ComputeLO+0x158>)
 8001906:	edd0 5a00 	vldr	s11, [r0]
 800190a:	edd4 7a00 	vldr	s15, [r4]
 800190e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001912:	ed95 5a00 	vldr	s10, [r5]
 8001916:	4a48      	ldr	r2, [pc, #288]	; (8001a38 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001918:	ee27 7a88 	vmul.f32	s14, s15, s16
 800191c:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800191e:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001922:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001924:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001928:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800192c:	ee27 7a25 	vmul.f32	s14, s14, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001930:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001934:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001938:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800193c:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001940:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001944:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001948:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800194c:	ee67 7aa5 	vmul.f32	s15, s15, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001950:	ee27 7a25 	vmul.f32	s14, s14, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001954:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001958:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800195c:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001960:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001964:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001968:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800196c:	ee26 7aa5 	vmul.f32	s14, s13, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001970:	ee67 7aa5 	vmul.f32	s15, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001974:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001978:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800197c:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001980:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001984:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001988:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 800198c:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001990:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001994:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001998:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 800199a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 800199e:	d1bb      	bne.n	8001918 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80019a0:	ee67 5a07 	vmul.f32	s11, s14, s14
 80019a4:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001a3c <SDR_ComputeLO+0x160>
 80019a8:	edc4 7a00 	vstr	s15, [r4]
 80019ac:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001a40 <SDR_ComputeLO+0x164>
 80019b0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <SDR_ComputeLO+0x168>)
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <SDR_ComputeLO+0x16c>)
 80019b8:	ed85 5a00 	vstr	s10, [r5]
 80019bc:	edc2 6a00 	vstr	s13, [r2]
 80019c0:	ed83 7a00 	vstr	s14, [r3]
 80019c4:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 80019c8:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 80019cc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80019d0:	edc0 7a00 	vstr	s15, [r0]
}	
 80019d4:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 80019d6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001a4c <SDR_ComputeLO+0x170>
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <SDR_ComputeLO+0x174>)
 80019dc:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 80019e0:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 80019e4:	ed92 7a00 	vldr	s14, [r2]
 80019e8:	ee87 9a87 	vdiv.f32	s18, s15, s14
 80019ec:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80019f0:	eeb0 0b49 	vmov.f64	d0, d9
 80019f4:	f00c ff70 	bl	800e8d8 <cos>
 80019f8:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 80019fe:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001a02:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001a06:	f00c ffa3 	bl	800e950 <sin>
 8001a0a:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SDR_ComputeLO+0x148>)
 8001a10:	eeb1 6a46 	vneg.f32	s12, s12
 8001a14:	ed83 6a00 	vstr	s12, [r3]
 8001a18:	e771      	b.n	80018fe <SDR_ComputeLO+0x22>
 8001a1a:	bf00      	nop
 8001a1c:	240000e4 	.word	0x240000e4
 8001a20:	24000614 	.word	0x24000614
 8001a24:	24000624 	.word	0x24000624
 8001a28:	240000e0 	.word	0x240000e0
 8001a2c:	2400063c 	.word	0x2400063c
 8001a30:	240000f0 	.word	0x240000f0
 8001a34:	24003bec 	.word	0x24003bec
 8001a38:	2400459c 	.word	0x2400459c
 8001a3c:	46000200 	.word	0x46000200
 8001a40:	39000000 	.word	0x39000000
 8001a44:	24000640 	.word	0x24000640
 8001a48:	24000644 	.word	0x24000644
 8001a4c:	40c90fdb 	.word	0x40c90fdb
 8001a50:	24004484 	.word	0x24004484

08001a54 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	d02e      	beq.n	8001ab6 <SDR_2R_toC_f32+0x62>
 8001a58:	3010      	adds	r0, #16
 8001a5a:	3110      	adds	r1, #16
 8001a5c:	3220      	adds	r2, #32
{
 8001a5e:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a60:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001a64:	3b01      	subs	r3, #1
 8001a66:	f100 0010 	add.w	r0, r0, #16
 8001a6a:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a6e:	f842 4c20 	str.w	r4, [r2, #-32]
 8001a72:	f102 0220 	add.w	r2, r2, #32
 8001a76:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001a7a:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a7e:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001a82:	f842 4c38 	str.w	r4, [r2, #-56]
 8001a86:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001a8a:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a8e:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8001a92:	f842 4c30 	str.w	r4, [r2, #-48]
 8001a96:	f851 4c18 	ldr.w	r4, [r1, #-24]
 8001a9a:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001a9e:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8001aa2:	f842 4c28 	str.w	r4, [r2, #-40]
 8001aa6:	f851 4c14 	ldr.w	r4, [r1, #-20]
 8001aaa:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 8001aae:	d1d7      	bne.n	8001a60 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8001ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	4770      	bx	lr

08001ab8 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <SDR_downconvert_f32+0xd8>)
 8001aba:	3110      	adds	r1, #16
 8001abc:	3210      	adds	r2, #16
 8001abe:	3008      	adds	r0, #8
		 tmp2=((*(pt)  -offset)) / 2048.f;
		 tmp3=((*(pt+3)-offset)) / 2048.f;
		 tmp4=((*(pt+2)-offset)) / 2048.f;
*/

     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001ac0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8001b94 <SDR_downconvert_f32+0xdc>
{
 8001ac4:	b430      	push	{r4, r5}
 8001ac6:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 8001aca:	4c33      	ldr	r4, [pc, #204]	; (8001b98 <SDR_downconvert_f32+0xe0>)
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001acc:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8001ad0:	3310      	adds	r3, #16
		 tmp4=((*(pt+3)-offset)) / 2048.f;
		 tmp3=((*(pt+2)-offset)) / 2048.f;

    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001ad2:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8001ad6:	3008      	adds	r0, #8
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001ad8:	ee06 ca10 	vmov	s12, ip
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001adc:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8001ae0:	3110      	adds	r1, #16
 8001ae2:	3410      	adds	r4, #16
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001ae4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001ae8:	ee06 ca90 	vmov	s13, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001aec:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8001af0:	3210      	adds	r2, #16
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001af2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001af6:	ee36 6a40 	vsub.f32	s12, s12, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001afa:	ee07 ca90 	vmov	s15, ip
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001afe:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b02:	ee76 6ac0 	vsub.f32	s13, s13, s0
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8001b06:	ee26 6a25 	vmul.f32	s12, s12, s11
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b0a:	ee07 ca10 	vmov	s14, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8001b12:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b16:	ee25 5a06 	vmul.f32	s10, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b1e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b22:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8001b26:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b2a:	ee37 7a40 	vsub.f32	s14, s14, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 8001b2e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b32:	ee25 6a06 	vmul.f32	s12, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 8001b36:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8001b3a:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 8001b3e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8001b42:	ee26 6a26 	vmul.f32	s12, s12, s13
 8001b46:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 8001b4a:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 8001b4e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001b52:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 8001b56:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8001b5a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001b5e:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 8001b62:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 8001b66:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001b6a:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001b6e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 8001b72:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 8001b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b78:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 8001b7c:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 8001b88:	d1a0      	bne.n	8001acc <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 8001b8a:	bc30      	pop	{r4, r5}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	24003bec 	.word	0x24003bec
 8001b94:	3a000000 	.word	0x3a000000
 8001b98:	2400459c 	.word	0x2400459c

08001b9c <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 8001b9c:	b470      	push	{r4, r5, r6}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 8001b9e:	0894      	lsrs	r4, r2, #2
  while(blkCnt--)
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d04a      	beq.n	8001c3a <SDR_float_to_DAC_audio+0x9e>
 8001ba4:	1e66      	subs	r6, r4, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ba6:	4c30      	ldr	r4, [pc, #192]	; (8001c68 <SDR_float_to_DAC_audio+0xcc>)
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001ba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bac:	b2b3      	uxth	r3, r6
 8001bae:	f100 0620 	add.w	r6, r0, #32
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bb2:	edd4 7a00 	vldr	s15, [r4]
 8001bb6:	3010      	adds	r0, #16
 8001bb8:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8001bbc:	460b      	mov	r3, r1
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bbe:	eeb0 5a47 	vmov.f32	s10, s14
 8001bc2:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bc6:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bca:	ed50 6a04 	vldr	s13, [r0, #-16]
 8001bce:	eef0 5a47 	vmov.f32	s11, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bd2:	2500      	movs	r5, #0
 8001bd4:	eea7 5a86 	vfma.f32	s10, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bd8:	ed10 6a01 	vldr	s12, [r0, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bdc:	462c      	mov	r4, r5
 8001bde:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001be0:	eee7 4a86 	vfma.f32	s9, s15, s12
 8001be4:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001be6:	eee6 5aa7 	vfma.f32	s11, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bea:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
  while(blkCnt--)
 8001bee:	4286      	cmp	r6, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bf0:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bf4:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bf8:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001bfc:	ee15 ca10 	vmov	ip, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c00:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c04:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c08:	f36c 050f 	bfi	r5, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c0c:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c10:	ee15 ca90 	vmov	ip, s11
 8001c14:	f36c 040f 	bfi	r4, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c18:	ee16 ca10 	vmov	ip, s12
 8001c1c:	f36c 451f 	bfi	r5, ip, #16, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c20:	eef0 6a64 	vmov.f32	s13, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c24:	f843 5c04 	str.w	r5, [r3, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c28:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8001c2c:	ee16 ca90 	vmov	ip, s13
 8001c30:	f36c 441f 	bfi	r4, ip, #16, #16
 8001c34:	f843 4c08 	str.w	r4, [r3, #-8]
  while(blkCnt--)
 8001c38:	d1c1      	bne.n	8001bbe <SDR_float_to_DAC_audio+0x22>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 8001c3a:	0092      	lsls	r2, r2, #2
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3c:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8001c40:	b15a      	cbz	r2, 8001c5a <SDR_float_to_DAC_audio+0xbe>
 8001c42:	3a01      	subs	r2, #1
 8001c44:	f101 0320 	add.w	r3, r1, #32
      SCB->DCCMVAC = op_addr;
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <SDR_float_to_DAC_audio+0xd0>)
 8001c4a:	f022 021f 	bic.w	r2, r2, #31
 8001c4e:	4413      	add	r3, r2
 8001c50:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8001c54:	3120      	adds	r1, #32
    while (op_size > 0) {
 8001c56:	4299      	cmp	r1, r3
 8001c58:	d1fa      	bne.n	8001c50 <SDR_float_to_DAC_audio+0xb4>
 8001c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c5e:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 8001c62:	bc70      	pop	{r4, r5, r6}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	240043dc 	.word	0x240043dc
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 8001c70:	0892      	lsrs	r2, r2, #2
 8001c72:	d017      	beq.n	8001ca4 <SDR_memcpy_f32+0x34>
 8001c74:	3110      	adds	r1, #16
 8001c76:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 8001c78:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 8001c7c:	3a01      	subs	r2, #1
 8001c7e:	f101 0110 	add.w	r1, r1, #16
 8001c82:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 8001c86:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 8001c8a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8001c8e:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8001c92:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8001c96:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 8001c9a:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8001c9e:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8001ca2:	d1e9      	bne.n	8001c78 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8001ca8:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001caa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 8001cae:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8001cb0:	440b      	add	r3, r1
	while(blkCnt--)
 8001cb2:	d037      	beq.n	8001d24 <SDR_mirror_LSB+0x7c>
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1e91      	subs	r1, r2, #2
{
 8001cb8:	b410      	push	{r4}
 8001cba:	f1a3 0220 	sub.w	r2, r3, #32
 8001cbe:	f1a3 041c 	sub.w	r4, r3, #28
 8001cc2:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8001cc6:	4402      	add	r2, r0
 8001cc8:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001cca:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 8001ccc:	3901      	subs	r1, #1
 8001cce:	3a20      	subs	r2, #32
 8001cd0:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001cd2:	f843 4c20 	str.w	r4, [r3, #-32]
 8001cd6:	3320      	adds	r3, #32
 8001cd8:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8001cdc:	eef1 7a67 	vneg.f32	s15, s15
 8001ce0:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001ce4:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8001ce6:	f843 4c38 	str.w	r4, [r3, #-56]
 8001cea:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8001cee:	eef1 7a67 	vneg.f32	s15, s15
 8001cf2:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001cf6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8001cf8:	f843 4c30 	str.w	r4, [r3, #-48]
 8001cfc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8001d00:	eef1 7a67 	vneg.f32	s15, s15
 8001d04:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d08:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001d0a:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 8001d0e:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8001d10:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001d14:	eef1 7a67 	vneg.f32	s15, s15
 8001d18:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 8001d1c:	d1d5      	bne.n	8001cca <SDR_mirror_LSB+0x22>
	}
}
 8001d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8001d28:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 8001d2a:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <SDR_compute_IIR_parms+0xb0>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <SDR_compute_IIR_parms+0xb4>)
   wr = 2.f * cwpitch / rate * myPI;
 8001d2e:	edd2 7a00 	vldr	s15, [r2]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001de0 <SDR_compute_IIR_parms+0xb8>
   wr = 2.f * cwpitch / rate * myPI;
 8001d3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
   r = Qfactor;
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <SDR_compute_IIR_parms+0xbc>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 8001d40:	ee27 7a26 	vmul.f32	s14, s14, s13
   wr = 2.f * cwpitch / rate * myPI;
 8001d44:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001de8 <SDR_compute_IIR_parms+0xc0>
{
 8001d48:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 8001d4c:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 8001d50:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d54:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 8001d58:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d5c:	ee39 aaa9 	vadd.f32	s20, s19, s19
 8001d60:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001d64:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 8001d68:	ee68 8aa6 	vmul.f32	s17, s17, s13
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d6c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8001d70:	f00c fdb2 	bl	800e8d8 <cos>
 8001d74:	ee8a 6a09 	vdiv.f32	s12, s20, s18
   a1 = -2.f * r * cosw0;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <SDR_compute_IIR_parms+0xc8>)
 8001d7c:	edc2 aa00 	vstr	s21, [r2]
   a1 = -2.f * r * cosw0;
 8001d80:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001d84:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8001d88:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 8001d8c:	ee69 7aa7 	vmul.f32	s15, s19, s15
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d90:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8001d94:	ee26 6b00 	vmul.f64	d6, d6, d0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001d98:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8001d9c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8001da0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001da4:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001da8:	f00c fd96 	bl	800e8d8 <cos>
 8001dac:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8001db0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001df4 <SDR_compute_IIR_parms+0xcc>
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <SDR_compute_IIR_parms+0xd0>)
 8001db6:	ee28 7a07 	vmul.f32	s14, s16, s14
 8001dba:	eeaa 6b40 	vfms.f64	d6, d10, d0
 8001dbe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8001dc2:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8001dc6:	eeb1 5bc6 	vsqrt.f64	d5, d6
 8001dca:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001dce:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001dd2:	ed83 7a00 	vstr	s14, [r3]
}
 8001dd6:	bd08      	pop	{r3, pc}
 8001dd8:	24009ea0 	.word	0x24009ea0
 8001ddc:	24004484 	.word	0x24004484
 8001de0:	3b800000 	.word	0x3b800000
 8001de4:	24008e90 	.word	0x24008e90
 8001de8:	40490fdb 	.word	0x40490fdb
 8001dec:	240043e0 	.word	0x240043e0
 8001df0:	24008e8c 	.word	0x24008e8c
 8001df4:	3f99999a 	.word	0x3f99999a
 8001df8:	2400c3c8 	.word	0x2400c3c8

08001dfc <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 8001dfc:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	d076      	beq.n	8001ef0 <SDR_CWPeak+0xf4>
 8001e02:	1e4b      	subs	r3, r1, #1
 8001e04:	f8df c104 	ldr.w	ip, [pc, #260]	; 8001f0c <SDR_CWPeak+0x110>
 8001e08:	493a      	ldr	r1, [pc, #232]	; (8001ef4 <SDR_CWPeak+0xf8>)
 8001e0a:	3010      	adds	r0, #16
 8001e0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <SDR_CWPeak+0xfc>)
 8001e0e:	eddc 4a00 	vldr	s9, [ip]
 8001e12:	edd1 2a00 	vldr	s5, [r1]
 8001e16:	edd2 5a00 	vldr	s11, [r2]
{
 8001e1a:	b4f0      	push	{r4, r5, r6, r7}
 8001e1c:	4c37      	ldr	r4, [pc, #220]	; (8001efc <SDR_CWPeak+0x100>)
 8001e1e:	4f38      	ldr	r7, [pc, #224]	; (8001f00 <SDR_CWPeak+0x104>)
 8001e20:	edd4 7a00 	vldr	s15, [r4]
 8001e24:	4d37      	ldr	r5, [pc, #220]	; (8001f04 <SDR_CWPeak+0x108>)
 8001e26:	4e38      	ldr	r6, [pc, #224]	; (8001f08 <SDR_CWPeak+0x10c>)
 8001e28:	eef1 7a67 	vneg.f32	s15, s15
 8001e2c:	ed97 7a00 	vldr	s14, [r7]
 8001e30:	edd5 6a00 	vldr	s13, [r5]
 8001e34:	ed96 5a00 	vldr	s10, [r6]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e38:	ee62 3ac7 	vnmul.f32	s7, s5, s14
 8001e3c:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e40:	ee22 4ae6 	vnmul.f32	s8, s5, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e44:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e48:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 8001e4c:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e4e:	eee7 3aa4 	vfma.f32	s7, s15, s9
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e52:	ed10 2a01 	vldr	s4, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e56:	eea7 4a85 	vfma.f32	s8, s15, s10
	 while(blkCnt--)
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e62:	eee7 3a25 	vfma.f32	s7, s14, s11
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e66:	eea3 4aa5 	vfma.f32	s8, s7, s11
	   *buf++ = y0;
 8001e6a:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e6e:	edd2 5a00 	vldr	s11, [r2]
 8001e72:	edd1 2a00 	vldr	s5, [r1]
 8001e76:	ee25 6a86 	vmul.f32	s12, s11, s12
 8001e7a:	edd4 7a00 	vldr	s15, [r4]
 8001e7e:	eeb1 3a62 	vneg.f32	s6, s5
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e82:	ee25 7aa6 	vmul.f32	s14, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e86:	eef0 6a46 	vmov.f32	s13, s12
 8001e8a:	eef1 7a67 	vneg.f32	s15, s15
 8001e8e:	eea3 7a23 	vfma.f32	s14, s6, s7
 8001e92:	eee3 6a24 	vfma.f32	s13, s6, s9
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e96:	ee65 4a82 	vmul.f32	s9, s11, s4
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001e9a:	eee7 6aa3 	vfma.f32	s13, s15, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001e9e:	ee25 6aa6 	vmul.f32	s12, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001ea2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001ea6:	eee3 4a26 	vfma.f32	s9, s6, s13
 8001eaa:	eea7 6a84 	vfma.f32	s12, s15, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001eae:	ee65 6a87 	vmul.f32	s13, s11, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8001eb2:	eee7 4a87 	vfma.f32	s9, s15, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001eb6:	eea3 6a05 	vfma.f32	s12, s6, s10
 8001eba:	eee3 6a04 	vfma.f32	s13, s6, s8
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ebe:	ee25 5aa4 	vmul.f32	s10, s11, s9
	   *buf++ = y0;
 8001ec2:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ec6:	eee7 6a86 	vfma.f32	s13, s15, s12
 8001eca:	eea3 5a06 	vfma.f32	s10, s6, s12
	   *buf++ = y0;
 8001ece:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8001ed2:	eea7 5aa6 	vfma.f32	s10, s15, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8001ed6:	ed00 5a05 	vstr	s10, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 8001eda:	d1ad      	bne.n	8001e38 <SDR_CWPeak+0x3c>
 8001edc:	ed87 7a00 	vstr	s14, [r7]
 8001ee0:	ed86 5a00 	vstr	s10, [r6]
 8001ee4:	edc5 6a00 	vstr	s13, [r5]
 8001ee8:	edcc 4a00 	vstr	s9, [ip]
   }
}
 8001eec:	bcf0      	pop	{r4, r5, r6, r7}
 8001eee:	4770      	bx	lr
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	24008e8c 	.word	0x24008e8c
 8001ef8:	2400c3c8 	.word	0x2400c3c8
 8001efc:	240043e0 	.word	0x240043e0
 8001f00:	24000634 	.word	0x24000634
 8001f04:	24000638 	.word	0x24000638
 8001f08:	24000630 	.word	0x24000630
 8001f0c:	2400062c 	.word	0x2400062c

08001f10 <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8001f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8001f14:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <SDR_demodAM_AGC+0xd0>)
{
 8001f16:	b082      	sub	sp, #8
 8001f18:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001ffc <SDR_demodAM_AGC+0xec>
 8001f1c:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8001f20:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002000 <SDR_demodAM_AGC+0xf0>
 8001f24:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002004 <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 8001f28:	881f      	ldrh	r7, [r3, #0]
 8001f2a:	ed98 7a00 	vldr	s14, [r8]
 8001f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8001f32:	ed9e 6a00 	vldr	s12, [lr]
 8001f36:	4c2b      	ldr	r4, [pc, #172]	; (8001fe4 <SDR_demodAM_AGC+0xd4>)
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <SDR_demodAM_AGC+0xd8>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001f3a:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8001fec <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 8001f3e:	4e2c      	ldr	r6, [pc, #176]	; (8001ff0 <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001f40:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8001ff4 <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8001f44:	edd0 7a01 	vldr	s15, [r0, #4]
 8001f48:	3008      	adds	r0, #8
 8001f4a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8001f4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f52:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8001f56:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 8001f5a:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 8001f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = __builtin_sqrtf(in);
 8001f66:	bfa8      	it	ge
 8001f68:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 8001f6c:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 8001f70:	bfb8      	it	lt
 8001f72:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 8001f76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d502      	bpl.n	8001f86 <SDR_demodAM_AGC+0x76>
 8001f80:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 8001f84:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 8001f86:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8001f8a:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001f8e:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 8001f92:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001f96:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 8001f9a:	b91b      	cbnz	r3, 8001fa4 <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 8001f9c:	edd6 6a00 	vldr	s13, [r6]
 8001fa0:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8001fa4:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8001fa8:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8001faa:	eddd 7a00 	vldr	s15, [sp]
 8001fae:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 8001fb2:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8001fb6:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 8001fba:	d1c3      	bne.n	8001f44 <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	ed88 7a00 	vstr	s14, [r8]
 8001fc4:	f8cc 3000 	str.w	r3, [ip]
 8001fc8:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 8001fcc:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8001fd0:	dd02      	ble.n	8001fd8 <SDR_demodAM_AGC+0xc8>
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f8cc 3000 	str.w	r3, [ip]
}
 8001fd8:	b002      	add	sp, #8
 8001fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fde:	bf00      	nop
 8001fe0:	24008048 	.word	0x24008048
 8001fe4:	24009e9c 	.word	0x24009e9c
 8001fe8:	24000a94 	.word	0x24000a94
 8001fec:	00000000 	.word	0x00000000
 8001ff0:	24002a98 	.word	0x24002a98
 8001ff4:	3f75c28f 	.word	0x3f75c28f
 8001ff8:	240088d0 	.word	0x240088d0
 8001ffc:	240000e8 	.word	0x240000e8
 8002000:	24000618 	.word	0x24000618
 8002004:	24000628 	.word	0x24000628

08002008 <SDR_demodSSB_CW_AGC>:
	  arm_sqrt_f32(tmp, &sav);  

	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002008:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <SDR_demodSSB_CW_AGC+0x12c>)
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <SDR_demodSSB_CW_AGC+0x130>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8002012:	2a01      	cmp	r2, #1
{
 8002014:	b4f0      	push	{r4, r5, r6, r7}
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002016:	885c      	ldrh	r4, [r3, #2]
 8002018:	4e48      	ldr	r6, [pc, #288]	; (800213c <SDR_demodSSB_CW_AGC+0x134>)
 800201a:	4f49      	ldr	r7, [pc, #292]	; (8002140 <SDR_demodSSB_CW_AGC+0x138>)
 800201c:	889d      	ldrh	r5, [r3, #4]
 800201e:	bf08      	it	eq
 8002020:	4625      	moveq	r5, r4
 8002022:	6833      	ldr	r3, [r6, #0]
 8002024:	ed97 7a00 	vldr	s14, [r7]
 8002028:	d05b      	beq.n	80020e2 <SDR_demodSSB_CW_AGC+0xda>
 800202a:	2a03      	cmp	r2, #3
 800202c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002030:	4a44      	ldr	r2, [pc, #272]	; (8002144 <SDR_demodSSB_CW_AGC+0x13c>)
 8002032:	d032      	beq.n	800209a <SDR_demodSSB_CW_AGC+0x92>
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002034:	f8df c118 	ldr.w	ip, [pc, #280]	; 8002150 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 8002038:	edd0 7a01 	vldr	s15, [r0, #4]
 800203c:	3008      	adds	r0, #8
 800203e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002042:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002046:	eee6 7a06 	vfma.f32	s15, s12, s12
      *pOut = __builtin_sqrtf(in);
 800204a:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 800204e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	d502      	bpl.n	800205e <SDR_demodSSB_CW_AGC+0x56>
 8002058:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800205c:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 800205e:	edd2 7a00 	vldr	s15, [r2]
 8002062:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8002066:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800206a:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 800206e:	b91b      	cbnz	r3, 8002078 <SDR_demodSSB_CW_AGC+0x70>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002070:	eddc 7a02 	vldr	s15, [ip, #8]
 8002074:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 8002078:	4284      	cmp	r4, r0
 800207a:	d1dd      	bne.n	8002038 <SDR_demodSSB_CW_AGC+0x30>
 800207c:	4932      	ldr	r1, [pc, #200]	; (8002148 <SDR_demodSSB_CW_AGC+0x140>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 800207e:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <SDR_demodSSB_CW_AGC+0x144>)
 8002082:	ed87 7a00 	vstr	s14, [r7]
 8002086:	6033      	str	r3, [r6, #0]
 8002088:	edc1 6a00 	vstr	s13, [r1]
 800208c:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002090:	dd01      	ble.n	8002096 <SDR_demodSSB_CW_AGC+0x8e>
 8002092:	3b01      	subs	r3, #1
 8002094:	6033      	str	r3, [r6, #0]
}
 8002096:	bcf0      	pop	{r4, r5, r6, r7}
 8002098:	4770      	bx	lr
      if(CurrentMode == CW) pk  *= Decay[CW];
 800209a:	4d2d      	ldr	r5, [pc, #180]	; (8002150 <SDR_demodSSB_CW_AGC+0x148>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800209c:	edd0 7a01 	vldr	s15, [r0, #4]
 80020a0:	3008      	adds	r0, #8
 80020a2:	ed10 6a02 	vldr	s12, [r0, #-8]
 80020a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020aa:	eee6 7a06 	vfma.f32	s15, s12, s12
 80020ae:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 80020b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	d502      	bpl.n	80020c2 <SDR_demodSSB_CW_AGC+0xba>
 80020bc:	eeb0 7a66 	vmov.f32	s14, s13
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 80020c0:	4663      	mov	r3, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80020c2:	edd2 7a00 	vldr	s15, [r2]
 80020c6:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80020ca:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80020ce:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 80020d2:	b91b      	cbnz	r3, 80020dc <SDR_demodSSB_CW_AGC+0xd4>
      if(CurrentMode == CW) pk  *= Decay[CW];
 80020d4:	edd5 7a03 	vldr	s15, [r5, #12]
 80020d8:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 80020dc:	4284      	cmp	r4, r0
 80020de:	d1dd      	bne.n	800209c <SDR_demodSSB_CW_AGC+0x94>
 80020e0:	e7cc      	b.n	800207c <SDR_demodSSB_CW_AGC+0x74>
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <SDR_demodSSB_CW_AGC+0x13c>)
 80020e4:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80020e8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8002150 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80020ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80020f0:	3008      	adds	r0, #8
 80020f2:	ed10 6a02 	vldr	s12, [r0, #-8]
 80020f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020fa:	eee6 7a06 	vfma.f32	s15, s12, s12
 80020fe:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002102:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d502      	bpl.n	8002112 <SDR_demodSSB_CW_AGC+0x10a>
 800210c:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002110:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002112:	edd2 7a00 	vldr	s15, [r2]
 8002116:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800211a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800211e:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002122:	b91b      	cbnz	r3, 800212c <SDR_demodSSB_CW_AGC+0x124>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002124:	eddc 7a01 	vldr	s15, [ip, #4]
 8002128:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 800212c:	42a0      	cmp	r0, r4
 800212e:	d1dd      	bne.n	80020ec <SDR_demodSSB_CW_AGC+0xe4>
 8002130:	e7a4      	b.n	800207c <SDR_demodSSB_CW_AGC+0x74>
 8002132:	bf00      	nop
 8002134:	2400c3dc 	.word	0x2400c3dc
 8002138:	24008048 	.word	0x24008048
 800213c:	2400061c 	.word	0x2400061c
 8002140:	240000ec 	.word	0x240000ec
 8002144:	24009e9c 	.word	0x24009e9c
 8002148:	24000620 	.word	0x24000620
 800214c:	240088d0 	.word	0x240088d0
 8002150:	24002a98 	.word	0x24002a98

08002154 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8002154:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002158:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 800215c:	490a      	ldr	r1, [pc, #40]	; (8002188 <HAL_ADC_ConvCpltCallback+0x34>)
 800215e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8002162:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8002166:	3320      	adds	r3, #32
    while (op_size > 0) {
 8002168:	4293      	cmp	r3, r2
 800216a:	d1fa      	bne.n	8002162 <HAL_ADC_ConvCpltCallback+0xe>
 800216c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002170:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(1);
 8002174:	2001      	movs	r0, #1
 8002176:	f7fe ff99 	bl	80010ac <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_ADC_ConvCpltCallback+0x38>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
}
 8002180:	bd08      	pop	{r3, pc}
 8002182:	bf00      	nop
 8002184:	2400cfe0 	.word	0x2400cfe0
 8002188:	e000ed00 	.word	0xe000ed00
 800218c:	24000669 	.word	0x24000669

08002190 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002190:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002194:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 8002198:	490a      	ldr	r1, [pc, #40]	; (80021c4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800219a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800219e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80021a2:	3320      	adds	r3, #32
    while (op_size > 0) {
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d1fa      	bne.n	800219e <HAL_ADC_ConvHalfCpltCallback+0xe>
 80021a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021ac:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe ff7b 	bl	80010ac <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
}
 80021bc:	bd08      	pop	{r3, pc}
 80021be:	bf00      	nop
 80021c0:	2400cbe0 	.word	0x2400cbe0
 80021c4:	e000ed00 	.word	0xe000ed00
 80021c8:	24000669 	.word	0x24000669

080021cc <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021cc:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
	LED_RED_ON;
 80021d0:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 80021d2:	4c05      	ldr	r4, [pc, #20]	; (80021e8 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
	LED_RED_ON;
 80021d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <HAL_DAC_ConvCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 80021da:	601c      	str	r4, [r3, #0]

	//	 __HAL_RCC_PLL2_DISABLE();
	//	__HAL_RCC_PLL2_CONFIG(4, 240, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();

}
 80021dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 80021e0:	f003 bbd0 	b.w	8005984 <HAL_GPIO_WritePin>
 80021e4:	24004488 	.word	0x24004488
 80021e8:	240072a0 	.word	0x240072a0
 80021ec:	58020400 	.word	0x58020400

080021f0 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021f0:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
	LED_RED_OFF;
 80021f4:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 80021f6:	4c05      	ldr	r4, [pc, #20]	; (800220c <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
	LED_RED_OFF;
 80021f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fc:	4804      	ldr	r0, [pc, #16]	; (8002210 <HAL_DAC_ConvHalfCpltCallbackCh1+0x20>)
	ValidAudioHalf = &AudioOut[0];
 80021fe:	601c      	str	r4, [r3, #0]
	//	 __HAL_RCC_PLL2_DISABLE();
	//	 __HAL_RCC_PLL2_CONFIG(4, 120, 16, 2, 2);
	//	 __HAL_RCC_PLL2_ENABLE();
}
 8002200:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8002204:	f003 bbbe 	b.w	8005984 <HAL_GPIO_WritePin>
 8002208:	24004488 	.word	0x24004488
 800220c:	24006ea0 	.word	0x24006ea0
 8002210:	58020400 	.word	0x58020400

08002214 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8002214:	4b57      	ldr	r3, [pc, #348]	; (8002374 <DisplayStatus+0x160>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b64      	cmp	r3, #100	; 0x64
{
 800221a:	b570      	push	{r4, r5, r6, lr}
 800221c:	b086      	sub	sp, #24
	switch(Fstep)
 800221e:	f000 809f 	beq.w	8002360 <DisplayStatus+0x14c>
 8002222:	d969      	bls.n	80022f8 <DisplayStatus+0xe4>
 8002224:	f242 7210 	movw	r2, #10000	; 0x2710
 8002228:	4293      	cmp	r3, r2
 800222a:	d07d      	beq.n	8002328 <DisplayStatus+0x114>
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <DisplayStatus+0x164>)
 800222e:	4293      	cmp	r3, r2
 8002230:	f000 808f 	beq.w	8002352 <DisplayStatus+0x13e>
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002238:	d07d      	beq.n	8002336 <DisplayStatus+0x122>
 800223a:	4c50      	ldr	r4, [pc, #320]	; (800237c <DisplayStatus+0x168>)
	case 1000: strcpy(StringStep,"  1K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <DisplayStatus+0x16c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	f200 8094 	bhi.w	800236e <DisplayStatus+0x15a>
 8002246:	e8df f003 	tbb	[pc, r3]
 800224a:	5155      	.short	0x5155
 800224c:	0238      	.short	0x0238
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 800224e:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <DisplayStatus+0x170>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4d4d      	ldr	r5, [pc, #308]	; (8002388 <DisplayStatus+0x174>)
 8002254:	0c1a      	lsrs	r2, r3, #16
 8002256:	802b      	strh	r3, [r5, #0]
 8002258:	70aa      	strb	r2, [r5, #2]
	}
	switch (CurrentAGC)
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <DisplayStatus+0x178>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d032      	beq.n	80022c8 <DisplayStatus+0xb4>
 8002262:	2b01      	cmp	r3, #1
 8002264:	d059      	beq.n	800231a <DisplayStatus+0x106>
 8002266:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <DisplayStatus+0x17c>)
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
	}
	switch (CurrentBW)
 8002268:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <DisplayStatus+0x180>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d035      	beq.n	80022dc <DisplayStatus+0xc8>
 8002270:	2b01      	cmp	r3, #1
 8002272:	d04c      	beq.n	800230e <DisplayStatus+0xfa>
 8002274:	4b48      	ldr	r3, [pc, #288]	; (8002398 <DisplayStatus+0x184>)
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
	}
	sprintf(UartTXString, "          Freq %.0f Step %s Mode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 8002276:	4849      	ldr	r0, [pc, #292]	; (800239c <DisplayStatus+0x188>)
 8002278:	4949      	ldr	r1, [pc, #292]	; (80023a0 <DisplayStatus+0x18c>)
 800227a:	ed90 7a00 	vldr	s14, [r0]
 800227e:	edd1 6a00 	vldr	s13, [r1]
 8002282:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002286:	4947      	ldr	r1, [pc, #284]	; (80023a4 <DisplayStatus+0x190>)
 8002288:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800228c:	4846      	ldr	r0, [pc, #280]	; (80023a8 <DisplayStatus+0x194>)
 800228e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002292:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002296:	ec53 2b16 	vmov	r2, r3, d6
 800229a:	e9cd 4500 	strd	r4, r5, [sp]
 800229e:	f00b f85f 	bl	800d360 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 80022a2:	4841      	ldr	r0, [pc, #260]	; (80023a8 <DisplayStatus+0x194>)
 80022a4:	f7fe f87c 	bl	80003a0 <strlen>
 80022a8:	2364      	movs	r3, #100	; 0x64
 80022aa:	b282      	uxth	r2, r0
 80022ac:	493e      	ldr	r1, [pc, #248]	; (80023a8 <DisplayStatus+0x194>)
 80022ae:	483f      	ldr	r0, [pc, #252]	; (80023ac <DisplayStatus+0x198>)
}
 80022b0:	b006      	add	sp, #24
 80022b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 80022b6:	f006 bbcd 	b.w	8008a54 <HAL_UART_Transmit>
	case USB: strcpy(StringMode,"USB"); break;
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <DisplayStatus+0x19c>)
 80022bc:	4d32      	ldr	r5, [pc, #200]	; (8002388 <DisplayStatus+0x174>)
 80022be:	602b      	str	r3, [r5, #0]
	switch (CurrentAGC)
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <DisplayStatus+0x178>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1cc      	bne.n	8002262 <DisplayStatus+0x4e>
	case Fast: strcpy(StringAGC,"Fast"); break;
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <DisplayStatus+0x1a0>)
 80022ca:	4a31      	ldr	r2, [pc, #196]	; (8002390 <DisplayStatus+0x17c>)
 80022cc:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <DisplayStatus+0x180>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 80022d2:	6010      	str	r0, [r2, #0]
	switch (CurrentBW)
 80022d4:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 80022d6:	7111      	strb	r1, [r2, #4]
	switch (CurrentBW)
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1c9      	bne.n	8002270 <DisplayStatus+0x5c>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 80022dc:	4936      	ldr	r1, [pc, #216]	; (80023b8 <DisplayStatus+0x1a4>)
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <DisplayStatus+0x184>)
 80022e0:	c903      	ldmia	r1, {r0, r1}
 80022e2:	0c0e      	lsrs	r6, r1, #16
 80022e4:	6018      	str	r0, [r3, #0]
 80022e6:	8099      	strh	r1, [r3, #4]
 80022e8:	719e      	strb	r6, [r3, #6]
 80022ea:	e7c4      	b.n	8002276 <DisplayStatus+0x62>
	case LSB: strcpy(StringMode,"LSB"); break;
 80022ec:	4d26      	ldr	r5, [pc, #152]	; (8002388 <DisplayStatus+0x174>)
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <DisplayStatus+0x1a8>)
 80022f0:	602b      	str	r3, [r5, #0]
 80022f2:	e7b2      	b.n	800225a <DisplayStatus+0x46>
	case AM: strcpy(StringMode,"AM"); break;
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <DisplayStatus+0x1ac>)
 80022f6:	e7ab      	b.n	8002250 <DisplayStatus+0x3c>
	switch(Fstep)
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d023      	beq.n	8002344 <DisplayStatus+0x130>
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	d19c      	bne.n	800223a <DisplayStatus+0x26>
	case 10: strcpy(StringStep,"  10"); break;
 8002300:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <DisplayStatus+0x1b0>)
 8002302:	4c1e      	ldr	r4, [pc, #120]	; (800237c <DisplayStatus+0x168>)
 8002304:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002308:	6020      	str	r0, [r4, #0]
 800230a:	7121      	strb	r1, [r4, #4]
 800230c:	e796      	b.n	800223c <DisplayStatus+0x28>
	case Wide: strcpy(StringWidth,"Wide"); break;
 800230e:	492e      	ldr	r1, [pc, #184]	; (80023c8 <DisplayStatus+0x1b4>)
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <DisplayStatus+0x184>)
 8002312:	c903      	ldmia	r1, {r0, r1}
 8002314:	6018      	str	r0, [r3, #0]
 8002316:	7119      	strb	r1, [r3, #4]
 8002318:	e7ad      	b.n	8002276 <DisplayStatus+0x62>
	case Slow: strcpy(StringAGC,"Slow"); break;
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <DisplayStatus+0x1b8>)
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <DisplayStatus+0x17c>)
 800231e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002322:	6010      	str	r0, [r2, #0]
 8002324:	7111      	strb	r1, [r2, #4]
 8002326:	e79f      	b.n	8002268 <DisplayStatus+0x54>
	case 10000: strcpy(StringStep," 10K"); break;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <DisplayStatus+0x1bc>)
 800232a:	4c14      	ldr	r4, [pc, #80]	; (800237c <DisplayStatus+0x168>)
 800232c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002330:	6020      	str	r0, [r4, #0]
 8002332:	7121      	strb	r1, [r4, #4]
 8002334:	e782      	b.n	800223c <DisplayStatus+0x28>
	case 1000: strcpy(StringStep,"  1K"); break;
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <DisplayStatus+0x1c0>)
 8002338:	4c10      	ldr	r4, [pc, #64]	; (800237c <DisplayStatus+0x168>)
 800233a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800233e:	6020      	str	r0, [r4, #0]
 8002340:	7121      	strb	r1, [r4, #4]
 8002342:	e77b      	b.n	800223c <DisplayStatus+0x28>
	case 1: strcpy(StringStep,"   1"); break;
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <DisplayStatus+0x1c4>)
 8002346:	4c0d      	ldr	r4, [pc, #52]	; (800237c <DisplayStatus+0x168>)
 8002348:	e893 0003 	ldmia.w	r3, {r0, r1}
 800234c:	6020      	str	r0, [r4, #0]
 800234e:	7121      	strb	r1, [r4, #4]
 8002350:	e774      	b.n	800223c <DisplayStatus+0x28>
	case 100000: strcpy(StringStep,"100K"); break;
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <DisplayStatus+0x1c8>)
 8002354:	4c09      	ldr	r4, [pc, #36]	; (800237c <DisplayStatus+0x168>)
 8002356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800235a:	6020      	str	r0, [r4, #0]
 800235c:	7121      	strb	r1, [r4, #4]
 800235e:	e76d      	b.n	800223c <DisplayStatus+0x28>
	case 100: strcpy(StringStep," 100"); break;
 8002360:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <DisplayStatus+0x1cc>)
 8002362:	4c06      	ldr	r4, [pc, #24]	; (800237c <DisplayStatus+0x168>)
 8002364:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002368:	6020      	str	r0, [r4, #0]
 800236a:	7121      	strb	r1, [r4, #4]
 800236c:	e766      	b.n	800223c <DisplayStatus+0x28>
 800236e:	4d06      	ldr	r5, [pc, #24]	; (8002388 <DisplayStatus+0x174>)
 8002370:	e773      	b.n	800225a <DisplayStatus+0x46>
 8002372:	bf00      	nop
 8002374:	2400c3d4 	.word	0x2400c3d4
 8002378:	000186a0 	.word	0x000186a0
 800237c:	24000658 	.word	0x24000658
 8002380:	2400c3dc 	.word	0x2400c3dc
 8002384:	0801248c 	.word	0x0801248c
 8002388:	24000650 	.word	0x24000650
 800238c:	24000680 	.word	0x24000680
 8002390:	24000648 	.word	0x24000648
 8002394:	24000a90 	.word	0x24000a90
 8002398:	24000660 	.word	0x24000660
 800239c:	240043dc 	.word	0x240043dc
 80023a0:	24009ea8 	.word	0x24009ea8
 80023a4:	080124b0 	.word	0x080124b0
 80023a8:	240076a0 	.word	0x240076a0
 80023ac:	24002abc 	.word	0x24002abc
 80023b0:	00425355 	.word	0x00425355
 80023b4:	08012490 	.word	0x08012490
 80023b8:	080124a0 	.word	0x080124a0
 80023bc:	0042534c 	.word	0x0042534c
 80023c0:	08012488 	.word	0x08012488
 80023c4:	08012460 	.word	0x08012460
 80023c8:	080124a8 	.word	0x080124a8
 80023cc:	08012498 	.word	0x08012498
 80023d0:	08012478 	.word	0x08012478
 80023d4:	08012470 	.word	0x08012470
 80023d8:	08012458 	.word	0x08012458
 80023dc:	08012480 	.word	0x08012480
 80023e0:	08012468 	.word	0x08012468

080023e4 <HAL_UART_RxCpltCallback>:
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{

	/* Turn LED2 on: Transfer in reception process is correct */
	LED_RED_OFF;
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ea:	4801      	ldr	r0, [pc, #4]	; (80023f0 <HAL_UART_RxCpltCallback+0xc>)
 80023ec:	f003 baca 	b.w	8005984 <HAL_GPIO_WritePin>
 80023f0:	58020400 	.word	0x58020400

080023f4 <SetFOutVHF>:
MCODIV = 1
	 */
	DivN2 = 291;
	FracN2 = 0;

	__HAL_RCC_PLL2_DISABLE();
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <SetFOutVHF+0x3c>)
{
 80023f6:	b082      	sub	sp, #8
	DivN2 = 291;
 80023f8:	f240 1123 	movw	r1, #291	; 0x123
	FracN2 = 0;
 80023fc:	2200      	movs	r2, #0
	DivN2 = 291;
 80023fe:	9100      	str	r1, [sp, #0]
	FracN2 = 0;
 8002400:	9201      	str	r2, [sp, #4]
	__HAL_RCC_PLL2_DISABLE();
 8002402:	681a      	ldr	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 8002404:	490b      	ldr	r1, [pc, #44]	; (8002434 <SetFOutVHF+0x40>)
	__HAL_RCC_PLL2_DISABLE();
 8002406:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800240a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_PLL2_CONFIG(8, DivN2, 2, 2, 2);
 800240c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240e:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	9a00      	ldr	r2, [sp, #0]
 800241a:	3a01      	subs	r2, #1
 800241c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002420:	4311      	orrs	r1, r2
 8002422:	6399      	str	r1, [r3, #56]	; 0x38
	__HAL_RCC_PLL2_ENABLE();
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800242a:	601a      	str	r2, [r3, #0]


}
 800242c:	b002      	add	sp, #8
 800242e:	4770      	bx	lr
 8002430:	58024400 	.word	0x58024400
 8002434:	01010200 	.word	0x01010200

08002438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002438:	4e07      	ldr	r6, [pc, #28]	; (8002458 <Error_Handler+0x20>)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800243a:	2532      	movs	r5, #50	; 0x32
 800243c:	4c07      	ldr	r4, [pc, #28]	; (800245c <Error_Handler+0x24>)
{
 800243e:	b508      	push	{r3, lr}
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002440:	6832      	ldr	r2, [r6, #0]
 8002442:	fba4 1302 	umull	r1, r3, r4, r2
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	fb05 2313 	mls	r3, r5, r3, r2
 800244c:	b103      	cbz	r3, 8002450 <Error_Handler+0x18>
 800244e:	e7fe      	b.n	800244e <Error_Handler+0x16>
			LED_switch();
 8002450:	f7fe fd88 	bl	8000f64 <LED_switch>
 8002454:	e7f4      	b.n	8002440 <Error_Handler+0x8>
 8002456:	bf00      	nop
 8002458:	24009eac 	.word	0x24009eac
 800245c:	51eb851f 	.word	0x51eb851f

08002460 <SystemClock_Config_For_OC>:
{
 8002460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002464:	b0cd      	sub	sp, #308	; 0x134
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002466:	224c      	movs	r2, #76	; 0x4c
 8002468:	2100      	movs	r1, #0
 800246a:	a80a      	add	r0, sp, #40	; 0x28
 800246c:	f00a fa7c 	bl	800c968 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002470:	2220      	movs	r2, #32
 8002472:	2100      	movs	r1, #0
 8002474:	a802      	add	r0, sp, #8
 8002476:	f00a fa77 	bl	800c968 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800247a:	22bc      	movs	r2, #188	; 0xbc
 800247c:	2100      	movs	r1, #0
 800247e:	a81d      	add	r0, sp, #116	; 0x74
 8002480:	f00a fa72 	bl	800c968 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002484:	2002      	movs	r0, #2
 8002486:	f004 f8a5 	bl	80065d4 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800248a:	4b44      	ldr	r3, [pc, #272]	; (800259c <SystemClock_Config_For_OC+0x13c>)
 800248c:	2200      	movs	r2, #0
 800248e:	4944      	ldr	r1, [pc, #272]	; (80025a0 <SystemClock_Config_For_OC+0x140>)
 8002490:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002492:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002494:	6998      	ldr	r0, [r3, #24]
 8002496:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800249a:	6198      	str	r0, [r3, #24]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80024ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024b6:	6993      	ldr	r3, [r2, #24]
 80024b8:	049b      	lsls	r3, r3, #18
 80024ba:	d5fc      	bpl.n	80024b6 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024bc:	4939      	ldr	r1, [pc, #228]	; (80025a4 <SystemClock_Config_For_OC+0x144>)
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024be:	2402      	movs	r4, #2
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80024c0:	2504      	movs	r5, #4
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024c8:	2601      	movs	r6, #1
	  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80024ca:	2200      	movs	r2, #0
	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80024cc:	f04f 0c21 	mov.w	ip, #33	; 0x21
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024d0:	f023 0303 	bic.w	r3, r3, #3
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d4:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024d6:	4323      	orrs	r3, r4
 80024d8:	628b      	str	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 300;
 80024da:	f44f 7396 	mov.w	r3, #300	; 0x12c
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024de:	970b      	str	r7, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024e0:	9610      	str	r6, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = 2;
 80024e2:	9417      	str	r4, [sp, #92]	; 0x5c
	  RCC_OscInitStruct.PLL.PLLR = 2;
 80024e4:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 2;
 80024e6:	9415      	str	r4, [sp, #84]	; 0x54
	  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80024e8:	951a      	str	r5, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80024ea:	9518      	str	r5, [sp, #96]	; 0x60
	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80024ec:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLN = 300;
 80024f0:	9316      	str	r3, [sp, #88]	; 0x58
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024f2:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80024f6:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fa:	f004 f899 	bl	8006630 <HAL_RCC_OscConfig>
 80024fe:	2800      	cmp	r0, #0
 8002500:	d149      	bne.n	8002596 <SystemClock_Config_For_OC+0x136>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002502:	f04f 0a08 	mov.w	sl, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002506:	2303      	movs	r3, #3
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002508:	f04f 0840 	mov.w	r8, #64	; 0x40
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250c:	223f      	movs	r2, #63	; 0x3f
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800250e:	f44f 6980 	mov.w	r9, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002512:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002514:	4629      	mov	r1, r5
 8002516:	eb0d 000a 	add.w	r0, sp, sl
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251a:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251c:	9202      	str	r2, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800251e:	f8cd 801c 	str.w	r8, [sp, #28]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002522:	e9cd a805 	strd	sl, r8, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002526:	e9cd 9808 	strd	r9, r8, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800252a:	f004 fc55 	bl	8006dd8 <HAL_RCC_ClockConfig>
 800252e:	4603      	mov	r3, r0
 8002530:	bb88      	cbnz	r0, 8002596 <SystemClock_Config_For_OC+0x136>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8002532:	f8df b074 	ldr.w	fp, [pc, #116]	; 80025a8 <SystemClock_Config_For_OC+0x148>
	 PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002536:	f44f 1e40 	mov.w	lr, #3145728	; 0x300000
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 800253a:	f44f 7ca0 	mov.w	ip, #320	; 0x140
	PeriphClkInitStruct.PLL2.PLL2N = 240;
 800253e:	21f0      	movs	r1, #240	; 0xf0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8002540:	2210      	movs	r2, #16
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002542:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002544:	9526      	str	r5, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002546:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002548:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800254c:	9428      	str	r4, [sp, #160]	; 0xa0
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800254e:	932d      	str	r3, [sp, #180]	; 0xb4
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002550:	933a      	str	r3, [sp, #232]	; 0xe8
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8002552:	f8cd 910c 	str.w	r9, [sp, #268]	; 0x10c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002556:	9745      	str	r7, [sp, #276]	; 0x114
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8002558:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
	 PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800255c:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 8002560:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002564:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002568:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
	PeriphClkInitStruct.PLL3.PLL3R = 4;
 800256c:	e9cd a529 	strd	sl, r5, [sp, #164]	; 0xa4
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002570:	e9cd 932b 	strd	r9, r3, [sp, #172]	; 0xac
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8002574:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002578:	f005 f858 	bl	800762c <HAL_RCCEx_PeriphCLKConfig>
 800257c:	b958      	cbnz	r0, 8002596 <SystemClock_Config_For_OC+0x136>
	  HAL_PWREx_EnableUSBVoltageDetector();
 800257e:	f004 f84f 	bl	8006620 <HAL_PWREx_EnableUSBVoltageDetector>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_1);
 8002582:	4630      	mov	r0, r6
 8002584:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002588:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 800258c:	f004 fb48 	bl	8006c20 <HAL_RCC_MCOConfig>
}
 8002590:	b04d      	add	sp, #308	; 0x134
 8002592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Error_Handler();
 8002596:	f7ff ff4f 	bl	8002438 <Error_Handler>
 800259a:	bf00      	nop
 800259c:	58024800 	.word	0x58024800
 80025a0:	58000400 	.word	0x58000400
 80025a4:	58024400 	.word	0x58024400
 80025a8:	000c0042 	.word	0x000c0042

080025ac <MX_TIM6_Init_Custom_Rate>:
{
 80025ac:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 80025ae:	4810      	ldr	r0, [pc, #64]	; (80025f0 <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b0:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 80025b2:	4c10      	ldr	r4, [pc, #64]	; (80025f4 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 80025b4:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 80025b6:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ba:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 80025bc:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025be:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 80025c0:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c2:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 80025c4:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c6:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ce:	f006 f871 	bl	80086b4 <HAL_TIM_Base_Init>
 80025d2:	b950      	cbnz	r0, 80025ea <MX_TIM6_Init_Custom_Rate+0x3e>
 80025d4:	4603      	mov	r3, r0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025d6:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025d8:	a901      	add	r1, sp, #4
 80025da:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025dc:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025de:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025e0:	f006 f9d8 	bl	8008994 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	b908      	cbnz	r0, 80025ea <MX_TIM6_Init_Custom_Rate+0x3e>
}
 80025e6:	b004      	add	sp, #16
 80025e8:	bd10      	pop	{r4, pc}
		Error_Handler();
 80025ea:	f7ff ff25 	bl	8002438 <Error_Handler>
 80025ee:	bf00      	nop
 80025f0:	40001000 	.word	0x40001000
 80025f4:	24008e40 	.word	0x24008e40

080025f8 <main>:
{
 80025f8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80025fc:	b0a9      	sub	sp, #164	; 0xa4
  HAL_Init();
 80025fe:	f000 fed5 	bl	80033ac <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 8002602:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002606:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800260a:	48ce      	ldr	r0, [pc, #824]	; (8002944 <main+0x34c>)
 800260c:	2200      	movs	r2, #0
 800260e:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002612:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002616:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800261a:	6943      	ldr	r3, [r0, #20]
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002626:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800262a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800262e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002632:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002636:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800263a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800263e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002642:	07b7      	lsls	r7, r6, #30
 8002644:	015d      	lsls	r5, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002646:	ea05 040c 	and.w	r4, r5, ip
 800264a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800264c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800264e:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
 8002652:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002654:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8002658:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800265c:	1c53      	adds	r3, r2, #1
 800265e:	d1f6      	bne.n	800264e <main+0x56>
 8002660:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8002662:	f115 0f20 	cmn.w	r5, #32
 8002666:	d1ee      	bne.n	8002646 <main+0x4e>
 8002668:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800266c:	6943      	ldr	r3, [r0, #20]
 800266e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002672:	6143      	str	r3, [r0, #20]
 8002674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002678:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	2600      	movs	r6, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267e:	4db2      	ldr	r5, [pc, #712]	; (8002948 <main+0x350>)
	SystemClock_Config_For_OC();
 8002680:	f7ff feee 	bl	8002460 <SystemClock_Config_For_OC>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002684:	2401      	movs	r4, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	f04f 0902 	mov.w	r9, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	9621      	str	r6, [sp, #132]	; 0x84
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800268e:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002692:	9622      	str	r6, [sp, #136]	; 0x88
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002694:	4632      	mov	r2, r6
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002698:	4688      	mov	r8, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269a:	961f      	str	r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80026a2:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80026a6:	48a9      	ldr	r0, [pc, #676]	; (800294c <main+0x354>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a8:	f043 0304 	orr.w	r3, r3, #4
  hadc1.Instance = ADC1;
 80026ac:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8002978 <main+0x380>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026b4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	9306      	str	r3, [sp, #24]
 80026be:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	9307      	str	r3, [sp, #28]
 80026d6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026dc:	4323      	orrs	r3, r4
 80026de:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026e6:	4023      	ands	r3, r4
 80026e8:	9308      	str	r3, [sp, #32]
 80026ea:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026f0:	ea43 0309 	orr.w	r3, r3, r9
 80026f4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80026f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80026fc:	ea03 0309 	and.w	r3, r3, r9
 8002700:	9309      	str	r3, [sp, #36]	; 0x24
 8002702:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002704:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8002710:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	930a      	str	r3, [sp, #40]	; 0x28
 800271a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800271c:	f003 f932 	bl	8005984 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002720:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002724:	4a8a      	ldr	r2, [pc, #552]	; (8002950 <main+0x358>)
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002726:	a91f      	add	r1, sp, #124	; 0x7c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002728:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Pin = SwInt1_Pin;
 800272a:	901f      	str	r0, [sp, #124]	; 0x7c
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 800272c:	4889      	ldr	r0, [pc, #548]	; (8002954 <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800272e:	9220      	str	r2, [sp, #128]	; 0x80
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002730:	f003 f80a 	bl	8005748 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002734:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002738:	a91f      	add	r1, sp, #124	; 0x7c
 800273a:	4886      	ldr	r0, [pc, #536]	; (8002954 <main+0x35c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800273e:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	e9cd 291f 	strd	r2, r9, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002746:	f002 ffff 	bl	8005748 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800274a:	a91f      	add	r1, sp, #124	; 0x7c
 800274c:	487f      	ldr	r0, [pc, #508]	; (800294c <main+0x354>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	9622      	str	r6, [sp, #136]	; 0x88
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002750:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	e9cd 4620 	strd	r4, r6, [sp, #128]	; 0x80
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002758:	f002 fff6 	bl	8005748 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800275c:	4632      	mov	r2, r6
 800275e:	2104      	movs	r1, #4
 8002760:	2028      	movs	r0, #40	; 0x28
 8002762:	f001 fca5 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002766:	2028      	movs	r0, #40	; 0x28
 8002768:	f001 fcd8 	bl	800411c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800276c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002770:	4632      	mov	r2, r6
 8002772:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002774:	4323      	orrs	r3, r4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002776:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002778:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800277c:	f8d5 50d8 	ldr.w	r5, [r5, #216]	; 0xd8
 8002780:	4025      	ands	r5, r4
 8002782:	9505      	str	r5, [sp, #20]
 8002784:	9d05      	ldr	r5, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002786:	f001 fc93 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800278a:	200b      	movs	r0, #11
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800278c:	2504      	movs	r5, #4
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800278e:	f001 fcc5 	bl	800411c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8002792:	4632      	mov	r2, r6
 8002794:	4649      	mov	r1, r9
 8002796:	200c      	movs	r0, #12
 8002798:	f001 fc8a 	bl	80040b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800279c:	200c      	movs	r0, #12
 800279e:	f001 fcbd 	bl	800411c <HAL_NVIC_EnableIRQ>
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80027a2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hadc1.Instance = ADC1;
 80027a6:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <main+0x360>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a8:	2308      	movs	r3, #8
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027aa:	4650      	mov	r0, sl
  ADC_MultiModeTypeDef multimode = {0};
 80027ac:	960e      	str	r6, [sp, #56]	; 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 80027ae:	9618      	str	r6, [sp, #96]	; 0x60
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80027b0:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027b4:	f8ca 600c 	str.w	r6, [sl, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027b8:	f88a 6014 	strb.w	r6, [sl, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027bc:	f88a 4015 	strb.w	r4, [sl, #21]
  hadc1.Init.NbrOfConversion = 1;
 80027c0:	f8ca 4018 	str.w	r4, [sl, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027c4:	f88a 601c 	strb.w	r6, [sl, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80027c8:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80027cc:	f88a 6038 	strb.w	r6, [sl, #56]	; 0x38
  hadc1.Instance = ADC1;
 80027d0:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80027d4:	f8ca b004 	str.w	fp, [sl, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027d8:	f8ca 3008 	str.w	r3, [sl, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027dc:	f8ca 5010 	str.w	r5, [sl, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80027e0:	f8ca 9030 	str.w	r9, [sl, #48]	; 0x30
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e4:	e9ca 6609 	strd	r6, r6, [sl, #36]	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 80027e8:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 80027ec:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
 80027f0:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
 80027f4:	e9cd 661d 	strd	r6, r6, [sp, #116]	; 0x74
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027f8:	f001 f9fa 	bl	8003bf0 <HAL_ADC_Init>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	f040 8100 	bne.w	8002a02 <main+0x40a>
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002802:	2007      	movs	r0, #7
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002804:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002808:	a90e      	add	r1, sp, #56	; 0x38
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 800280a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  multimode.Mode = ADC_DUALMODE_INTERL;
 800280e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002810:	4650      	mov	r0, sl
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002812:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002814:	f001 fbd8 	bl	8003fc8 <HAL_ADCEx_MultiModeConfigChannel>
 8002818:	4602      	mov	r2, r0
 800281a:	2800      	cmp	r0, #0
 800281c:	f040 80f1 	bne.w	8002a02 <main+0x40a>
  sConfig.Channel = ADC_CHANNEL_5;
 8002820:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800297c <main+0x384>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002824:	2706      	movs	r7, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002826:	f240 76ff 	movw	r6, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800282a:	a918      	add	r1, sp, #96	; 0x60
 800282c:	4650      	mov	r0, sl
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800282e:	921a      	str	r2, [sp, #104]	; 0x68
  sConfig.OffsetSignedSaturation = DISABLE;
 8002830:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002834:	961b      	str	r6, [sp, #108]	; 0x6c
  sConfig.Offset = 0;
 8002836:	e9cd 521c 	strd	r5, r2, [sp, #112]	; 0x70
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800283a:	e9cd 8718 	strd	r8, r7, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800283e:	f000 fe89 	bl	8003554 <HAL_ADC_ConfigChannel>
 8002842:	4602      	mov	r2, r0
 8002844:	2800      	cmp	r0, #0
 8002846:	f040 80dc 	bne.w	8002a02 <main+0x40a>
  hadc2.Instance = ADC2;
 800284a:	4b44      	ldr	r3, [pc, #272]	; (800295c <main+0x364>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800284c:	2108      	movs	r1, #8
  hadc2.Instance = ADC2;
 800284e:	f8df c130 	ldr.w	ip, [pc, #304]	; 8002980 <main+0x388>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002852:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002854:	4618      	mov	r0, r3
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002856:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002858:	771a      	strb	r2, [r3, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800285c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002860:	f8c3 b004 	str.w	fp, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002864:	611d      	str	r5, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002866:	755c      	strb	r4, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8002868:	619c      	str	r4, [r3, #24]
  hadc2.Instance = ADC2;
 800286a:	f8c3 c000 	str.w	ip, [r3]
 800286e:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002870:	e9c3 1202 	strd	r1, r2, [r3, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002874:	e9c3 290b 	strd	r2, r9, [r3, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002878:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
 800287c:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8002880:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002884:	f001 f9b4 	bl	8003bf0 <HAL_ADC_Init>
 8002888:	4602      	mov	r2, r0
 800288a:	2800      	cmp	r0, #0
 800288c:	f040 80b9 	bne.w	8002a02 <main+0x40a>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002890:	9b03      	ldr	r3, [sp, #12]
 8002892:	a911      	add	r1, sp, #68	; 0x44
  sConfig.OffsetSignedSaturation = DISABLE;
 8002894:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002898:	4618      	mov	r0, r3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800289a:	e9cd 8711 	strd	r8, r7, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800289e:	e9cd 2613 	strd	r2, r6, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 80028a2:	e9cd 5215 	strd	r5, r2, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028a6:	f000 fe55 	bl	8003554 <HAL_ADC_ConfigChannel>
 80028aa:	4601      	mov	r1, r0
 80028ac:	2800      	cmp	r0, #0
 80028ae:	f040 80a8 	bne.w	8002a02 <main+0x40a>
  DAC_ChannelConfTypeDef sConfig = {0};
 80028b2:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 80028b4:	4d2a      	ldr	r5, [pc, #168]	; (8002960 <main+0x368>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80028b6:	a81f      	add	r0, sp, #124	; 0x7c
 80028b8:	f00a f856 	bl	800c968 <memset>
  hdac1.Instance = DAC1;
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <main+0x36c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80028be:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 80028c0:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80028c2:	f001 fc51 	bl	8004168 <HAL_DAC_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2800      	cmp	r0, #0
 80028ca:	f040 809a 	bne.w	8002a02 <main+0x40a>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80028ce:	2616      	movs	r6, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028d0:	461a      	mov	r2, r3
 80028d2:	a91f      	add	r1, sp, #124	; 0x7c
 80028d4:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80028d6:	931f      	str	r3, [sp, #124]	; 0x7c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80028d8:	9323      	str	r3, [sp, #140]	; 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80028da:	9620      	str	r6, [sp, #128]	; 0x80
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80028dc:	e9cd 3421 	strd	r3, r4, [sp, #132]	; 0x84
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80028e0:	f001 fd56 	bl	8004390 <HAL_DAC_ConfigChannel>
 80028e4:	4602      	mov	r2, r0
 80028e6:	2800      	cmp	r0, #0
 80028e8:	f040 808b 	bne.w	8002a02 <main+0x40a>
  hlptim2.Instance = LPTIM2;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <main+0x370>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80028ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
  hlptim2.Instance = LPTIM2;
 80028f2:	4d1e      	ldr	r5, [pc, #120]	; (800296c <main+0x374>)
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80028f4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80028f8:	4618      	mov	r0, r3
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80028fa:	615c      	str	r4, [r3, #20]
  hlptim2.Instance = LPTIM2;
 80028fc:	601d      	str	r5, [r3, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80028fe:	6299      	str	r1, [r3, #40]	; 0x28
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002900:	e9c3 2201 	strd	r2, r2, [r3, #4]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002904:	e9c3 2203 	strd	r2, r2, [r3, #12]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002908:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800290c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002910:	f003 f84a 	bl	80059a8 <HAL_LPTIM_Init>
 8002914:	2800      	cmp	r0, #0
 8002916:	d174      	bne.n	8002a02 <main+0x40a>
  htim6.Instance = TIM6;
 8002918:	4c15      	ldr	r4, [pc, #84]	; (8002970 <main+0x378>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	2300      	movs	r3, #0
  htim6.Instance = TIM6;
 800291c:	4815      	ldr	r0, [pc, #84]	; (8002974 <main+0x37c>)
  htim6.Init.Period = 8191;
 800291e:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002922:	2280      	movs	r2, #128	; 0x80
  htim6.Init.Prescaler = 0;
 8002924:	6063      	str	r3, [r4, #4]
  htim6.Instance = TIM6;
 8002926:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002928:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292a:	930b      	str	r3, [sp, #44]	; 0x2c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 8191;
 800292e:	60e1      	str	r1, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002930:	61a2      	str	r2, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002932:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002936:	f005 febd 	bl	80086b4 <HAL_TIM_Base_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2800      	cmp	r0, #0
 800293e:	d160      	bne.n	8002a02 <main+0x40a>
 8002940:	e020      	b.n	8002984 <main+0x38c>
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	58024400 	.word	0x58024400
 800294c:	58020000 	.word	0x58020000
 8002950:	11110000 	.word	0x11110000
 8002954:	58020800 	.word	0x58020800
 8002958:	40022000 	.word	0x40022000
 800295c:	24002b48 	.word	0x24002b48
 8002960:	24002aa8 	.word	0x24002aa8
 8002964:	40007400 	.word	0x40007400
 8002968:	24007810 	.word	0x24007810
 800296c:	58002400 	.word	0x58002400
 8002970:	24008e40 	.word	0x24008e40
 8002974:	40001000 	.word	0x40001000
 8002978:	240077a4 	.word	0x240077a4
 800297c:	14f00020 	.word	0x14f00020
 8002980:	40022100 	.word	0x40022100
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002984:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002986:	a90b      	add	r1, sp, #44	; 0x2c
 8002988:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298a:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800298c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800298e:	f006 f801 	bl	8008994 <HAL_TIMEx_MasterConfigSynchronization>
 8002992:	4603      	mov	r3, r0
 8002994:	bba8      	cbnz	r0, 8002a02 <main+0x40a>
  huart3.Instance = USART3;
 8002996:	4e4e      	ldr	r6, [pc, #312]	; (8002ad0 <main+0x4d8>)
  huart3.Init.BaudRate = 115200;
 8002998:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 800299c:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 800299e:	4c4d      	ldr	r4, [pc, #308]	; (8002ad4 <main+0x4dc>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029a0:	4630      	mov	r0, r6
  huart3.Init.Parity = UART_PARITY_NONE;
 80029a2:	6133      	str	r3, [r6, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a4:	62b3      	str	r3, [r6, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029a6:	6172      	str	r2, [r6, #20]
  huart3.Init.BaudRate = 115200;
 80029a8:	e9c6 4100 	strd	r4, r1, [r6]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029ac:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b0:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029b4:	e9c6 3308 	strd	r3, r3, [r6, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029b8:	f006 fc1e 	bl	80091f8 <HAL_UART_Init>
 80029bc:	4601      	mov	r1, r0
 80029be:	bb00      	cbnz	r0, 8002a02 <main+0x40a>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c0:	4630      	mov	r0, r6
 80029c2:	f006 ff7d 	bl	80098c0 <HAL_UARTEx_SetTxFifoThreshold>
 80029c6:	4601      	mov	r1, r0
 80029c8:	b9d8      	cbnz	r0, 8002a02 <main+0x40a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ca:	4630      	mov	r0, r6
 80029cc:	f006 ffca 	bl	8009964 <HAL_UARTEx_SetRxFifoThreshold>
 80029d0:	b9b8      	cbnz	r0, 8002a02 <main+0x40a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029d2:	4630      	mov	r0, r6
 80029d4:	f006 ff56 	bl	8009884 <HAL_UARTEx_DisableFifoMode>
 80029d8:	4604      	mov	r4, r0
 80029da:	b990      	cbnz	r0, 8002a02 <main+0x40a>
  MX_USB_DEVICE_Init();
 80029dc:	f008 fbbe 	bl	800b15c <MX_USB_DEVICE_Init>
	MX_TIM6_Init_Custom_Rate();
 80029e0:	f7ff fde4 	bl	80025ac <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80029e4:	4621      	mov	r1, r4
 80029e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029ea:	483b      	ldr	r0, [pc, #236]	; (8002ad8 <main+0x4e0>)
 80029ec:	f001 fa18 	bl	8003e20 <HAL_ADCEx_Calibration_Start>
 80029f0:	b938      	cbnz	r0, 8002a02 <main+0x40a>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80029f2:	4601      	mov	r1, r0
 80029f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029f8:	4838      	ldr	r0, [pc, #224]	; (8002adc <main+0x4e4>)
 80029fa:	f001 fa11 	bl	8003e20 <HAL_ADCEx_Calibration_Start>
 80029fe:	4605      	mov	r5, r0
 8002a00:	b108      	cbz	r0, 8002a06 <main+0x40e>
    Error_Handler();
 8002a02:	f7ff fd19 	bl	8002438 <Error_Handler>
	volume= 0.1;
 8002a06:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <main+0x4e8>)
	SetFstep(2);
 8002a08:	2002      	movs	r0, #2
	volume= 0.1;
 8002a0a:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8002b68 <main+0x570>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002a0e:	f44f 6700 	mov.w	r7, #2048	; 0x800
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002a12:	4c34      	ldr	r4, [pc, #208]	; (8002ae4 <main+0x4ec>)
	volume= 0.1;
 8002a14:	f8cb 3000 	str.w	r3, [fp]
	SetFstep(2);
 8002a18:	f7fe f8c8 	bl	8000bac <SetFstep>
	cwpitch = CWPITCH;
 8002a1c:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <main+0x4f0>)
	AMindex  = LSBindex = 1;
 8002a1e:	2301      	movs	r3, #1
	cwpitch = CWPITCH;
 8002a20:	4932      	ldr	r1, [pc, #200]	; (8002aec <main+0x4f4>)
	bw[AM]   = bw[LSB]  = Wide;
 8002a22:	f04f 3c01 	mov.w	ip, #16843009	; 0x1010101
	agc[AM]  = agc[LSB] = Slow;
 8002a26:	4832      	ldr	r0, [pc, #200]	; (8002af0 <main+0x4f8>)
	cwpitch = CWPITCH;
 8002a28:	6011      	str	r1, [r2, #0]
	os_time = 0;
 8002a2a:	4932      	ldr	r1, [pc, #200]	; (8002af4 <main+0x4fc>)
	meanavg = 0.f;
 8002a2c:	4a32      	ldr	r2, [pc, #200]	; (8002af8 <main+0x500>)
	os_time = 0;
 8002a2e:	600d      	str	r5, [r1, #0]
	meanavg = 0.f;
 8002a30:	2100      	movs	r1, #0
 8002a32:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002a34:	4a31      	ldr	r2, [pc, #196]	; (8002afc <main+0x504>)
 8002a36:	4932      	ldr	r1, [pc, #200]	; (8002b00 <main+0x508>)
 8002a38:	6011      	str	r1, [r2, #0]
	Muted   = false;
 8002a3a:	4a32      	ldr	r2, [pc, #200]	; (8002b04 <main+0x50c>)
	AMindex  = LSBindex = 1;
 8002a3c:	4932      	ldr	r1, [pc, #200]	; (8002b08 <main+0x510>)
	Muted   = false;
 8002a3e:	7015      	strb	r5, [r2, #0]
	AMindex  = LSBindex = 1;
 8002a40:	4a32      	ldr	r2, [pc, #200]	; (8002b0c <main+0x514>)
 8002a42:	800b      	strh	r3, [r1, #0]
 8002a44:	8013      	strh	r3, [r2, #0]
	USBindex = CWindex  = 1;
 8002a46:	4932      	ldr	r1, [pc, #200]	; (8002b10 <main+0x518>)
 8002a48:	4a32      	ldr	r2, [pc, #200]	; (8002b14 <main+0x51c>)
 8002a4a:	800b      	strh	r3, [r1, #0]
 8002a4c:	8013      	strh	r3, [r2, #0]
	bw[AM]   = bw[LSB]  = Wide;
 8002a4e:	4932      	ldr	r1, [pc, #200]	; (8002b18 <main+0x520>)
	agc[AM]  = agc[LSB] = Slow;
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <main+0x524>)
	bw[AM]   = bw[LSB]  = Wide;
 8002a52:	f8c1 c000 	str.w	ip, [r1]
	agc[AM]  = agc[LSB] = Slow;
 8002a56:	6010      	str	r0, [r2, #0]
	AGC_decay[Fast] = 0.9995f;
 8002a58:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <main+0x528>)
 8002a5a:	4932      	ldr	r1, [pc, #200]	; (8002b24 <main+0x52c>)
	AGC_decay[Slow] = 0.99995f;
 8002a5c:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <main+0x530>)
	Hangcount[Fast] = 2;
 8002a5e:	4833      	ldr	r0, [pc, #204]	; (8002b2c <main+0x534>)
 8002a60:	4d33      	ldr	r5, [pc, #204]	; (8002b30 <main+0x538>)
	AGC_decay[Fast] = 0.9995f;
 8002a62:	6019      	str	r1, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8002a64:	605a      	str	r2, [r3, #4]
	AgcThreshold    = 1.92e-4f;
 8002a66:	4933      	ldr	r1, [pc, #204]	; (8002b34 <main+0x53c>)
 8002a68:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <main+0x540>)
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <main+0x544>)
	Hangcount[Fast] = 2;
 8002a6c:	6005      	str	r5, [r0, #0]
	SetFOutVHF(10000000);
 8002a6e:	4834      	ldr	r0, [pc, #208]	; (8002b40 <main+0x548>)
	AgcThreshold    = 1.92e-4f;
 8002a70:	6011      	str	r1, [r2, #0]
	SamplingRate = ((160000000) / 4) * 2 / 8.f;//ADC Clock /async div * 2 ADC channels /8 cycles for 12 bit ADC
 8002a72:	6023      	str	r3, [r4, #0]
	SetFOutVHF(10000000);
 8002a74:	f7ff fcbe 	bl	80023f4 <SetFOutVHF>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002a78:	edd4 7a00 	vldr	s15, [r4]
 8002a7c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002b44 <main+0x54c>
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a80:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002b48 <main+0x550>
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a88:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <main+0x554>)
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002a8a:	4d31      	ldr	r5, [pc, #196]	; (8002b50 <main+0x558>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a8c:	ee27 7a87 	vmul.f32	s14, s15, s14
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002a90:	edc4 7a00 	vstr	s15, [r4]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002a94:	ed83 7a00 	vstr	s14, [r3]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8002a98:	f7ff f946 	bl	8001d28 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <main+0x55c>)
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	9701      	str	r7, [sp, #4]
 8002aa2:	2140      	movs	r1, #64	; 0x40
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	482c      	ldr	r0, [pc, #176]	; (8002b58 <main+0x560>)
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <main+0x564>)
 8002aaa:	f009 f9b7 	bl	800be1c <arm_fir_decimate_init_f32>
 8002aae:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002ab0:	b100      	cbz	r0, 8002ab4 <main+0x4bc>
 8002ab2:	e7fe      	b.n	8002ab2 <main+0x4ba>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <main+0x568>)
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	9701      	str	r7, [sp, #4]
 8002aba:	2140      	movs	r1, #64	; 0x40
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4829      	ldr	r0, [pc, #164]	; (8002b64 <main+0x56c>)
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <main+0x564>)
 8002ac2:	f009 f9ab 	bl	800be1c <arm_fir_decimate_init_f32>
 8002ac6:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d04f      	beq.n	8002b6c <main+0x574>
 8002acc:	e7fe      	b.n	8002acc <main+0x4d4>
 8002ace:	bf00      	nop
 8002ad0:	24002abc 	.word	0x24002abc
 8002ad4:	40004800 	.word	0x40004800
 8002ad8:	240077a4 	.word	0x240077a4
 8002adc:	24002b48 	.word	0x24002b48
 8002ae0:	3dcccccd 	.word	0x3dcccccd
 8002ae4:	24004484 	.word	0x24004484
 8002ae8:	24009ea0 	.word	0x24009ea0
 8002aec:	44228000 	.word	0x44228000
 8002af0:	00010101 	.word	0x00010101
 8002af4:	24009eac 	.word	0x24009eac
 8002af8:	2400c3c0 	.word	0x2400c3c0
 8002afc:	24008e90 	.word	0x24008e90
 8002b00:	3f7cac08 	.word	0x3f7cac08
 8002b04:	240077a0 	.word	0x240077a0
 8002b08:	2400d7e0 	.word	0x2400d7e0
 8002b0c:	2400d7e2 	.word	0x2400d7e2
 8002b10:	24008e94 	.word	0x24008e94
 8002b14:	24008054 	.word	0x24008054
 8002b18:	24008e98 	.word	0x24008e98
 8002b1c:	24007808 	.word	0x24007808
 8002b20:	2400c3cc 	.word	0x2400c3cc
 8002b24:	3f7fdf3b 	.word	0x3f7fdf3b
 8002b28:	3f7ffcb9 	.word	0x3f7ffcb9
 8002b2c:	24009ea4 	.word	0x24009ea4
 8002b30:	001e0002 	.word	0x001e0002
 8002b34:	3949539c 	.word	0x3949539c
 8002b38:	24009e9c 	.word	0x24009e9c
 8002b3c:	4b189680 	.word	0x4b189680
 8002b40:	00989680 	.word	0x00989680
 8002b44:	3f8005bd 	.word	0x3f8005bd
 8002b48:	3b800000 	.word	0x3b800000
 8002b4c:	24008050 	.word	0x24008050
 8002b50:	2400c3c4 	.word	0x2400c3c4
 8002b54:	24004d8c 	.word	0x24004d8c
 8002b58:	24000684 	.word	0x24000684
 8002b5c:	240000f4 	.word	0x240000f4
 8002b60:	24009eb0 	.word	0x24009eb0
 8002b64:	240088d4 	.word	0x240088d4
 8002b68:	240043dc 	.word	0x240043dc
	Load_Presets();
 8002b6c:	f7fd fdf0 	bl	8000750 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7fd fe17 	bl	80007a4 <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 8002b76:	f7ff fb4d 	bl	8002214 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8002b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7e:	4980      	ldr	r1, [pc, #512]	; (8002d80 <main+0x788>)
 8002b80:	4880      	ldr	r0, [pc, #512]	; (8002d84 <main+0x78c>)
 8002b82:	f001 f9a1 	bl	8003ec8 <HAL_ADCEx_MultiModeStart_DMA>
 8002b86:	4604      	mov	r4, r0
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	f47f af3a 	bne.w	8002a02 <main+0x40a>
	HAL_TIM_Base_Start(&htim6);
 8002b8e:	487e      	ldr	r0, [pc, #504]	; (8002d88 <main+0x790>)
 8002b90:	f005 fe22 	bl	80087d8 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002b94:	4621      	mov	r1, r4
 8002b96:	487d      	ldr	r0, [pc, #500]	; (8002d8c <main+0x794>)
 8002b98:	f001 fafc 	bl	8004194 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8002b9c:	9400      	str	r4, [sp, #0]
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba4:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <main+0x798>)
 8002ba6:	4879      	ldr	r0, [pc, #484]	; (8002d8c <main+0x794>)
 8002ba8:	f001 fb22 	bl	80041f0 <HAL_DAC_Start_DMA>
	__HAL_RCC_PLL2FRACN_ENABLE();
 8002bac:	4a79      	ldr	r2, [pc, #484]	; (8002d94 <main+0x79c>)
 8002bae:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8002da8 <main+0x7b0>
 8002bb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002bb4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8002db0 <main+0x7b8>
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8002db4 <main+0x7bc>
 8002bc0:	4f75      	ldr	r7, [pc, #468]	; (8002d98 <main+0x7a0>)
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002bc2:	4d76      	ldr	r5, [pc, #472]	; (8002d9c <main+0x7a4>)
			if (volume < 0)
 8002bc4:	ed9f ba76 	vldr	s22, [pc, #472]	; 8002da0 <main+0x7a8>
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002bc8:	4c76      	ldr	r4, [pc, #472]	; (8002da4 <main+0x7ac>)
	__HAL_RCC_PLL2FRACN_ENABLE();
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c
			volume += 0.1;
 8002bcc:	ed9f ab66 	vldr	d10, [pc, #408]	; 8002d68 <main+0x770>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002bd0:	ed9f 9b67 	vldr	d9, [pc, #412]	; 8002d70 <main+0x778>
 8002bd4:	ed9f 8b68 	vldr	d8, [pc, #416]	; 8002d78 <main+0x780>
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8002bd8:	6833      	ldr	r3, [r6, #0]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 8002bda:	f04f 0e08 	mov.w	lr, #8
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002bde:	2201      	movs	r2, #1
 8002be0:	4971      	ldr	r1, [pc, #452]	; (8002da8 <main+0x7b0>)
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8002be2:	f8d3 c018 	ldr.w	ip, [r3, #24]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002be6:	4628      	mov	r0, r5
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8002be8:	ea4c 0c0e 	orr.w	ip, ip, lr
 8002bec:	f8c3 c018 	str.w	ip, [r3, #24]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 8002bf0:	f8c3 e020 	str.w	lr, [r3, #32]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8002bf4:	f005 ffea 	bl	8008bcc <HAL_UART_Receive_IT>
 8002bf8:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
	if (result == HAL_OK)
 8002bfc:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8002c00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c04:	bba3      	cbnz	r3, 8002c70 <main+0x678>
		switch (UartRXString[0])
 8002c06:	f89a 3000 	ldrb.w	r3, [sl]
		UartRXDataReady = RESET;
 8002c0a:	f889 2000 	strb.w	r2, [r9]
		switch (UartRXString[0])
 8002c0e:	3b2b      	subs	r3, #43	; 0x2b
 8002c10:	2b4c      	cmp	r3, #76	; 0x4c
 8002c12:	d82b      	bhi.n	8002c6c <main+0x674>
 8002c14:	e8df f003 	tbb	[pc, r3]
 8002c18:	2a802a90 	.word	0x2a802a90
 8002c1c:	9da02a2a 	.word	0x9da02a2a
 8002c20:	7074787c 	.word	0x7074787c
 8002c24:	2a2a686c 	.word	0x2a2a686c
 8002c28:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c2c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c30:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c34:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c38:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c3c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c40:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c44:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c48:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c4c:	2a642a2a 	.word	0x2a642a2a
 8002c50:	5c2a2a60 	.word	0x5c2a2a60
 8002c54:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c58:	542a582a 	.word	0x542a582a
 8002c5c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002c60:	2a502a4c 	.word	0x2a502a4c
 8002c64:	27          	.byte	0x27
 8002c65:	00          	.byte	0x00
			SetBW((Bwidth)Wide);  break;
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7fd fe7c 	bl	8000964 <SetBW>
		DisplayStatus();
 8002c6c:	f7ff fad2 	bl	8002214 <DisplayStatus>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002c70:	ed98 0a00 	vldr	s0, [r8]
 8002c74:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8002c78:	ee20 0b09 	vmul.f64	d0, d0, d9
 8002c7c:	f00b fea4 	bl	800e9c8 <log10>
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002c80:	494a      	ldr	r1, [pc, #296]	; (8002dac <main+0x7b4>)
 8002c82:	4620      	mov	r0, r4
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002c84:	ee20 0b08 	vmul.f64	d0, d0, d8
 8002c88:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002c8c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 8002c90:	ed87 0a00 	vstr	s0, [r7]
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8002c94:	ec53 2b17 	vmov	r2, r3, d7
 8002c98:	f00a fb62 	bl	800d360 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7fd fb7f 	bl	80003a0 <strlen>
 8002ca2:	2364      	movs	r3, #100	; 0x64
 8002ca4:	b282      	uxth	r2, r0
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f005 fed3 	bl	8008a54 <HAL_UART_Transmit>
 8002cae:	e793      	b.n	8002bd8 <main+0x5e0>
			SetAGC((Agctype)Slow);  break;
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fd fe79 	bl	80009a8 <SetAGC>
 8002cb6:	e7d9      	b.n	8002c6c <main+0x674>
			SetMode((Mode)USB); break;
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7fd fecb 	bl	8000a54 <SetMode>
 8002cbe:	e7d5      	b.n	8002c6c <main+0x674>
			SetBW((Bwidth)Narrow);  break;
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fd fe4f 	bl	8000964 <SetBW>
 8002cc6:	e7d1      	b.n	8002c6c <main+0x674>
			SetMode((Mode)LSB); break;
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fd fec3 	bl	8000a54 <SetMode>
 8002cce:	e7cd      	b.n	8002c6c <main+0x674>
			SetAGC((Agctype)Fast);  break;
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fd fe69 	bl	80009a8 <SetAGC>
 8002cd6:	e7c9      	b.n	8002c6c <main+0x674>
			SetMode((Mode)CW); break;
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f7fd febb 	bl	8000a54 <SetMode>
 8002cde:	e7c5      	b.n	8002c6c <main+0x674>
			SetMode((Mode)AM); break;
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fd feb7 	bl	8000a54 <SetMode>
 8002ce6:	e7c1      	b.n	8002c6c <main+0x674>
			SetFstep(0); break;
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd ff5f 	bl	8000bac <SetFstep>
 8002cee:	e7bd      	b.n	8002c6c <main+0x674>
			SetFstep(1); break;
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7fd ff5b 	bl	8000bac <SetFstep>
 8002cf6:	e7b9      	b.n	8002c6c <main+0x674>
			SetFstep(2);  break;
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f7fd ff57 	bl	8000bac <SetFstep>
 8002cfe:	e7b5      	b.n	8002c6c <main+0x674>
			SetFstep(3);  break;
 8002d00:	2003      	movs	r0, #3
 8002d02:	f7fd ff53 	bl	8000bac <SetFstep>
 8002d06:	e7b1      	b.n	8002c6c <main+0x674>
			SetFstep(4);  break;
 8002d08:	2004      	movs	r0, #4
 8002d0a:	f7fd ff4f 	bl	8000bac <SetFstep>
 8002d0e:	e7ad      	b.n	8002c6c <main+0x674>
			SetFstep(5);  break;
 8002d10:	2005      	movs	r0, #5
 8002d12:	f7fd ff4b 	bl	8000bac <SetFstep>
 8002d16:	e7a9      	b.n	8002c6c <main+0x674>
			volume -= 0.1;
 8002d18:	ed9b 7a00 	vldr	s14, [fp]
 8002d1c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002d20:	ee37 7b4a 	vsub.f64	d7, d7, d10
 8002d24:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 8002d28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d415      	bmi.n	8002d5e <main+0x766>
			volume += 0.1;
 8002d32:	ed8b 7a00 	vstr	s14, [fp]
 8002d36:	e799      	b.n	8002c6c <main+0x674>
 8002d38:	ed9b 7a00 	vldr	s14, [fp]
			if (volume > 1.0)
 8002d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8002d40:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002d44:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8002d48:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002d4c:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8002d50:	e7ef      	b.n	8002d32 <main+0x73a>
			FplusClicked(); break;
 8002d52:	f7fd ff3f 	bl	8000bd4 <FplusClicked>
 8002d56:	e789      	b.n	8002c6c <main+0x674>
			FminusClicked(); break;
 8002d58:	f7fe f820 	bl	8000d9c <FminusClicked>
 8002d5c:	e786      	b.n	8002c6c <main+0x674>
				volume = 0;
 8002d5e:	ed8b ba00 	vstr	s22, [fp]
 8002d62:	e783      	b.n	8002c6c <main+0x674>
 8002d64:	f3af 8000 	nop.w
 8002d68:	9999999a 	.word	0x9999999a
 8002d6c:	3fb99999 	.word	0x3fb99999
 8002d70:	00000000 	.word	0x00000000
 8002d74:	409f4000 	.word	0x409f4000
 8002d78:	9916f6a6 	.word	0x9916f6a6
 8002d7c:	400a93fc 	.word	0x400a93fc
 8002d80:	2400cbe0 	.word	0x2400cbe0
 8002d84:	240077a4 	.word	0x240077a4
 8002d88:	24008e40 	.word	0x24008e40
 8002d8c:	24002aa8 	.word	0x24002aa8
 8002d90:	24006ea0 	.word	0x24006ea0
 8002d94:	58024400 	.word	0x58024400
 8002d98:	2400447c 	.word	0x2400447c
 8002d9c:	24002abc 	.word	0x24002abc
 8002da0:	00000000 	.word	0x00000000
 8002da4:	240076a0 	.word	0x240076a0
 8002da8:	2400448c 	.word	0x2400448c
 8002dac:	080124f4 	.word	0x080124f4
 8002db0:	24000668 	.word	0x24000668
 8002db4:	240088d0 	.word	0x240088d0

08002db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	4c14      	ldr	r4, [pc, #80]	; (8002e0c <HAL_MspInit+0x54>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002dbc:	2102      	movs	r1, #2
{
 8002dbe:	b082      	sub	sp, #8
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002dc0:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002dc6:	f06f 0004 	mvn.w	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002dd0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8002dda:	f001 f969 	bl	80040b0 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8002dde:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002de2:	2010      	movs	r0, #16
  __HAL_RCC_VREF_CLK_ENABLE();
 8002de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002dec:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8002df8:	f000 fb34 	bl	8003464 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002dfc:	f000 fb46 	bl	800348c <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002e00:	2000      	movs	r0, #0

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e02:	b002      	add	sp, #8
 8002e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002e08:	f000 bb36 	b.w	8003478 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
 8002e0c:	58024400 	.word	0x58024400

08002e10 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002e10:	4943      	ldr	r1, [pc, #268]	; (8002f20 <HAL_ADC_MspInit+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002e14:	6802      	ldr	r2, [r0, #0]
{
 8002e16:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 8002e18:	428a      	cmp	r2, r1
{
 8002e1a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002e20:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002e24:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8002e26:	d01f      	beq.n	8002e68 <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_ADC_MspInit+0x114>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e2e:	b00a      	add	sp, #40	; 0x28
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e32:	4a3d      	ldr	r2, [pc, #244]	; (8002f28 <HAL_ADC_MspInit+0x118>)
 8002e34:	6813      	ldr	r3, [r2, #0]
 8002e36:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e38:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e3c:	d061      	beq.n	8002f02 <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e40:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e42:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	4839      	ldr	r0, [pc, #228]	; (8002f30 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4c:	432a      	orrs	r2, r5
 8002e4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e56:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e58:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e60:	f002 fc72 	bl	8005748 <HAL_GPIO_Init>
}
 8002e64:	b00a      	add	sp, #40	; 0x28
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e68:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <HAL_ADC_MspInit+0x118>)
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e70:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e74:	d037      	beq.n	8002ee6 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e78:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7a:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e82:	482b      	ldr	r0, [pc, #172]	; (8002f30 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	4322      	orrs	r2, r4
 8002e86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e8e:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e90:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e92:	9606      	str	r6, [sp, #24]
    hdma_adc1.Instance = DMA1_Stream0;
 8002e94:	4c27      	ldr	r4, [pc, #156]	; (8002f34 <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	9302      	str	r3, [sp, #8]
 8002e98:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9a:	f002 fc55 	bl	8005748 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8002e9e:	4826      	ldr	r0, [pc, #152]	; (8002f38 <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ea0:	2109      	movs	r1, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Instance = DMA1_Stream0;
 8002eaa:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002eb0:	6061      	str	r1, [r4, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eb6:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002eb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ebc:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ebe:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ec0:	61a0      	str	r0, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ec2:	4620      	mov	r0, r4
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec4:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ec6:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eca:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ece:	f001 fba7 	bl	8004620 <HAL_DMA_Init>
 8002ed2:	b918      	cbnz	r0, 8002edc <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ed4:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002ed6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002ed8:	b00a      	add	sp, #40	; 0x28
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002edc:	f7ff faac 	bl	8002438 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ee0:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002ee2:	63a5      	str	r5, [r4, #56]	; 0x38
 8002ee4:	e7f8      	b.n	8002ed8 <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_ADC_MspInit+0x11c>)
 8002ee8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002eec:	f042 0220 	orr.w	r2, r2, #32
 8002ef0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	9b01      	ldr	r3, [sp, #4]
 8002f00:	e7b9      	b.n	8002e76 <HAL_ADC_MspInit+0x66>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_ADC_MspInit+0x11c>)
 8002f04:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002f08:	f042 0220 	orr.w	r2, r2, #32
 8002f0c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8002f10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	9303      	str	r3, [sp, #12]
 8002f1a:	9b03      	ldr	r3, [sp, #12]
 8002f1c:	e78f      	b.n	8002e3e <HAL_ADC_MspInit+0x2e>
 8002f1e:	bf00      	nop
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40022100 	.word	0x40022100
 8002f28:	2400066c 	.word	0x2400066c
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58020400 	.word	0x58020400
 8002f34:	24008858 	.word	0x24008858
 8002f38:	40020010 	.word	0x40020010

08002f3c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_DAC_MspInit+0xb8>)
 8002f3e:	6802      	ldr	r2, [r0, #0]
{
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC1)
 8002f42:	429a      	cmp	r2, r3
{
 8002f44:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	f04f 0400 	mov.w	r4, #0
 8002f4a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002f4e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002f52:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 8002f54:	d001      	beq.n	8002f5a <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002f56:	b009      	add	sp, #36	; 0x24
 8002f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_DAC_MspInit+0xbc>)
 8002f5c:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f5e:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f60:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002f62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	a903      	add	r1, sp, #12
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f68:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002f6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f70:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002f74:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002f78:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002f7c:	9201      	str	r2, [sp, #4]
 8002f7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f90:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f96:	4819      	ldr	r0, [pc, #100]	; (8002ffc <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f98:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9a:	9302      	str	r3, [sp, #8]
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002f9c:	4d18      	ldr	r5, [pc, #96]	; (8003000 <HAL_DAC_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f002 fbd2 	bl	8005748 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa6:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002fa8:	f04f 0c43 	mov.w	ip, #67	; 0x43
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002fb4:	602b      	str	r3, [r5, #0]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fba:	60ec      	str	r4, [r5, #12]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fbc:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002fc0:	4628      	mov	r0, r5
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fc2:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fc6:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002fca:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002fce:	f001 fb27 	bl	8004620 <HAL_DMA_Init>
 8002fd2:	b958      	cbnz	r0, 8002fec <HAL_DAC_MspInit+0xb0>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002fd4:	60b5      	str	r5, [r6, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2101      	movs	r1, #1
 8002fda:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002fdc:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002fde:	f001 f867 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fe2:	2036      	movs	r0, #54	; 0x36
 8002fe4:	f001 f89a 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 8002fe8:	b009      	add	sp, #36	; 0x24
 8002fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8002fec:	f7ff fa24 	bl	8002438 <Error_Handler>
 8002ff0:	e7f0      	b.n	8002fd4 <HAL_DAC_MspInit+0x98>
 8002ff2:	bf00      	nop
 8002ff4:	40007400 	.word	0x40007400
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58020000 	.word	0x58020000
 8003000:	240043e4 	.word	0x240043e4
 8003004:	40020028 	.word	0x40020028

08003008 <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 8003008:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300a:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 800300c:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_LPTIM_MspInit+0x64>)
{
 800300e:	b570      	push	{r4, r5, r6, lr}
  if(hlptim->Instance==LPTIM2)
 8003010:	4291      	cmp	r1, r2
{
 8003012:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003018:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800301c:	9307      	str	r3, [sp, #28]
  if(hlptim->Instance==LPTIM2)
 800301e:	d001      	beq.n	8003024 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8003020:	b008      	add	sp, #32
 8003022:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_LPTIM_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003026:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003028:	f44f 6680 	mov.w	r6, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302c:	a903      	add	r1, sp, #12
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800302e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003032:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	480f      	ldr	r0, [pc, #60]	; (8003074 <HAL_LPTIM_MspInit+0x6c>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800303e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003042:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003046:	9201      	str	r2, [sp, #4]
 8003048:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800304e:	432a      	orrs	r2, r5
 8003050:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003058:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 800305e:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003064:	f002 fb70 	bl	8005748 <HAL_GPIO_Init>
}
 8003068:	b008      	add	sp, #32
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	58002400 	.word	0x58002400
 8003070:	58024400 	.word	0x58024400
 8003074:	58020400 	.word	0x58020400

08003078 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_TIM_Base_MspInit+0x40>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d000      	beq.n	8003082 <HAL_TIM_Base_MspInit+0xa>
 8003080:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003084:	2200      	movs	r2, #0
 8003086:	2101      	movs	r1, #1
 8003088:	2036      	movs	r0, #54	; 0x36
{
 800308a:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800308c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003090:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003092:	f044 0410 	orr.w	r4, r4, #16
 8003096:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800309a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80030a6:	f001 f803 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030aa:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80030ac:	b002      	add	sp, #8
 80030ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030b2:	f001 b833 	b.w	800411c <HAL_NVIC_EnableIRQ>
 80030b6:	bf00      	nop
 80030b8:	40001000 	.word	0x40001000
 80030bc:	58024400 	.word	0x58024400

080030c0 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 80030c0:	6802      	ldr	r2, [r0, #0]
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_UART_MspInit+0xa4>)
{
 80030c4:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 80030c6:	429a      	cmp	r2, r3
{
 80030c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80030d2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80030d6:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 80030d8:	d001      	beq.n	80030de <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030da:	b008      	add	sp, #32
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_UART_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e6:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80030e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ec:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80030ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80030f6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80030fa:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80030fe:	9200      	str	r2, [sp, #0]
 8003100:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003106:	4332      	orrs	r2, r6
 8003108:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800310c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003110:	4032      	ands	r2, r6
 8003112:	9201      	str	r2, [sp, #4]
 8003114:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003116:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800311a:	f042 0208 	orr.w	r2, r2, #8
 800311e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003126:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003128:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312c:	480f      	ldr	r0, [pc, #60]	; (800316c <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003134:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	f002 fb07 	bl	8005748 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800313a:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313e:	a903      	add	r1, sp, #12
 8003140:	480b      	ldr	r0, [pc, #44]	; (8003170 <HAL_UART_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003142:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003146:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800314c:	f002 fafc 	bl	8005748 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003150:	4622      	mov	r2, r4
 8003152:	2101      	movs	r1, #1
 8003154:	2027      	movs	r0, #39	; 0x27
 8003156:	f000 ffab 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800315a:	2027      	movs	r0, #39	; 0x27
 800315c:	f000 ffde 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 8003160:	b008      	add	sp, #32
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	40004800 	.word	0x40004800
 8003168:	58024400 	.word	0x58024400
 800316c:	58020400 	.word	0x58020400
 8003170:	58020c00 	.word	0x58020c00

08003174 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop

08003178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003178:	e7fe      	b.n	8003178 <HardFault_Handler>
 800317a:	bf00      	nop

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	e7fe      	b.n	800317c <MemManage_Handler>
 800317e:	bf00      	nop

08003180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003180:	e7fe      	b.n	8003180 <BusFault_Handler>
 8003182:	bf00      	nop

08003184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003184:	e7fe      	b.n	8003184 <UsageFault_Handler>
 8003186:	bf00      	nop

08003188 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003188:	f000 b8e8 	b.w	800335c <ADC3_IRQHandler>

0800318c <DebugMon_Handler>:
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <PendSV_Handler>:
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop

08003194 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003194:	f000 b93c 	b.w	8003410 <HAL_IncTick>

08003198 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <DMA1_Stream0_IRQHandler+0x8>)
 800319a:	f001 bf99 	b.w	80050d0 <HAL_DMA_IRQHandler>
 800319e:	bf00      	nop
 80031a0:	24008858 	.word	0x24008858

080031a4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80031a4:	4801      	ldr	r0, [pc, #4]	; (80031ac <DMA1_Stream1_IRQHandler+0x8>)
 80031a6:	f001 bf93 	b.w	80050d0 <HAL_DMA_IRQHandler>
 80031aa:	bf00      	nop
 80031ac:	240043e4 	.word	0x240043e4

080031b0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031b0:	4801      	ldr	r0, [pc, #4]	; (80031b8 <USART3_IRQHandler+0x8>)
 80031b2:	f005 bec3 	b.w	8008f3c <HAL_UART_IRQHandler>
 80031b6:	bf00      	nop
 80031b8:	24002abc 	.word	0x24002abc

080031bc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80031bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031c0:	f002 bbe4 	b.w	800598c <HAL_GPIO_EXTI_IRQHandler>

080031c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80031c6:	4804      	ldr	r0, [pc, #16]	; (80031d8 <TIM6_DAC_IRQHandler+0x14>)
 80031c8:	f001 f8ae 	bl	8004328 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80031cc:	4803      	ldr	r0, [pc, #12]	; (80031dc <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80031d2:	f005 bb27 	b.w	8008824 <HAL_TIM_IRQHandler>
 80031d6:	bf00      	nop
 80031d8:	24002aa8 	.word	0x24002aa8
 80031dc:	24008e40 	.word	0x24008e40

080031e0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031e0:	4801      	ldr	r0, [pc, #4]	; (80031e8 <OTG_FS_IRQHandler+0x8>)
 80031e2:	f002 bd27 	b.w	8005c34 <HAL_PCD_IRQHandler>
 80031e6:	bf00      	nop
 80031e8:	2400ecb4 	.word	0x2400ecb4

080031ec <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ec:	490d      	ldr	r1, [pc, #52]	; (8003224 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80031f0:	680b      	ldr	r3, [r1, #0]
{
 80031f2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f4:	4c0d      	ldr	r4, [pc, #52]	; (800322c <_sbrk+0x40>)
 80031f6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80031f8:	b12b      	cbz	r3, 8003206 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fa:	4418      	add	r0, r3
 80031fc:	4290      	cmp	r0, r2
 80031fe:	d808      	bhi.n	8003212 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003200:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003206:	4c0a      	ldr	r4, [pc, #40]	; (8003230 <_sbrk+0x44>)
 8003208:	4623      	mov	r3, r4
 800320a:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800320c:	4418      	add	r0, r3
 800320e:	4290      	cmp	r0, r2
 8003210:	d9f6      	bls.n	8003200 <_sbrk+0x14>
    errno = ENOMEM;
 8003212:	f009 fb6f 	bl	800c8f4 <__errno>
 8003216:	220c      	movs	r2, #12
    return (void *)-1;
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 800321c:	6002      	str	r2, [r0, #0]
}
 800321e:	4618      	mov	r0, r3
 8003220:	bd10      	pop	{r4, pc}
 8003222:	bf00      	nop
 8003224:	24000670 	.word	0x24000670
 8003228:	24080000 	.word	0x24080000
 800322c:	00000400 	.word	0x00000400
 8003230:	2400f0c0 	.word	0x2400f0c0

08003234 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003234:	492a      	ldr	r1, [pc, #168]	; (80032e0 <SystemInit+0xac>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003236:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <SystemInit+0xb0>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003238:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800323c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8003240:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2b06      	cmp	r3, #6
 800324e:	d805      	bhi.n	800325c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	f023 030f 	bic.w	r3, r3, #15
 8003256:	f043 0307 	orr.w	r3, r3, #7
 800325a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <SystemInit+0xb4>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800325e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <SystemInit+0xb8>)
  RCC->CR |= RCC_CR_HSION;
 8003262:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003264:	481f      	ldr	r0, [pc, #124]	; (80032e4 <SystemInit+0xb0>)
  RCC->CR |= RCC_CR_HSION;
 8003266:	f041 0101 	orr.w	r1, r1, #1
 800326a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800326c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	400a      	ands	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003274:	6803      	ldr	r3, [r0, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	2b07      	cmp	r3, #7
 800327c:	d905      	bls.n	800328a <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800327e:	6803      	ldr	r3, [r0, #0]
 8003280:	f023 030f 	bic.w	r3, r3, #15
 8003284:	f043 0307 	orr.w	r3, r3, #7
 8003288:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <SystemInit+0xb4>)
 800328c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800328e:	4918      	ldr	r1, [pc, #96]	; (80032f0 <SystemInit+0xbc>)
  RCC->PLLCKSELR = 0x02020200;
 8003290:	4c18      	ldr	r4, [pc, #96]	; (80032f4 <SystemInit+0xc0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003292:	4819      	ldr	r0, [pc, #100]	; (80032f8 <SystemInit+0xc4>)
  RCC->D1CFGR = 0x00000000;
 8003294:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003296:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003298:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800329a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800329c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800329e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032a2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032a6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032aa:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032ac:	4c13      	ldr	r4, [pc, #76]	; (80032fc <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80032ae:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032b2:	4913      	ldr	r1, [pc, #76]	; (8003300 <SystemInit+0xcc>)
  RCC->CR &= 0xFFFBFFFFU;
 80032b4:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	4019      	ands	r1, r3
 80032bc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80032c0:	d202      	bcs.n	80032c8 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <SystemInit+0xd0>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032c8:	490f      	ldr	r1, [pc, #60]	; (8003308 <SystemInit+0xd4>)
 80032ca:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SystemInit+0xac>)
 80032d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032d4:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80032d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00
 80032e4:	52002000 	.word	0x52002000
 80032e8:	58024400 	.word	0x58024400
 80032ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80032f0:	01010280 	.word	0x01010280
 80032f4:	02020200 	.word	0x02020200
 80032f8:	01ff0000 	.word	0x01ff0000
 80032fc:	5c001000 	.word	0x5c001000
 8003300:	ffff0000 	.word	0xffff0000
 8003304:	51008108 	.word	0x51008108
 8003308:	52004000 	.word	0x52004000

0800330c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800330c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003344 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003310:	f7ff ff90 	bl	8003234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003314:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003316:	e003      	b.n	8003320 <LoopCopyDataInit>

08003318 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800331a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800331c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800331e:	3104      	adds	r1, #4

08003320 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003320:	480a      	ldr	r0, [pc, #40]	; (800334c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003324:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003326:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003328:	d3f6      	bcc.n	8003318 <CopyDataInit>
  ldr  r2, =_sbss
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800332c:	e002      	b.n	8003334 <LoopFillZerobss>

0800332e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800332e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003330:	f842 3b04 	str.w	r3, [r2], #4

08003334 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003336:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003338:	d3f9      	bcc.n	800332e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800333a:	f009 fae1 	bl	800c900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333e:	f7ff f95b 	bl	80025f8 <main>
  bx  lr    
 8003342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003344:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003348:	08015868 	.word	0x08015868
  ldr  r0, =_sdata
 800334c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003350:	24000554 	.word	0x24000554
  ldr  r2, =_sbss
 8003354:	24000560 	.word	0x24000560
  ldr  r3, = _ebss
 8003358:	2400f0c0 	.word	0x2400f0c0

0800335c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800335c:	e7fe      	b.n	800335c <ADC3_IRQHandler>
	...

08003360 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_InitTick+0x40>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b90b      	cbnz	r3, 800336a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003366:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003368:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800336a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800336e:	490d      	ldr	r1, [pc, #52]	; (80033a4 <HAL_InitTick+0x44>)
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
{
 8003374:	b510      	push	{r4, lr}
 8003376:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003378:	6808      	ldr	r0, [r1, #0]
 800337a:	fbb0 f0f3 	udiv	r0, r0, r3
 800337e:	f000 fedb 	bl	8004138 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003382:	2c0f      	cmp	r4, #15
 8003384:	d800      	bhi.n	8003388 <HAL_InitTick+0x28>
 8003386:	b108      	cbz	r0, 800338c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003388:	2001      	movs	r0, #1
}
 800338a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800338c:	2200      	movs	r2, #0
 800338e:	4621      	mov	r1, r4
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f000 fe8c 	bl	80040b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_InitTick+0x48>)
 800339a:	2000      	movs	r0, #0
 800339c:	601c      	str	r4, [r3, #0]
}
 800339e:	bd10      	pop	{r4, pc}
 80033a0:	240001fc 	.word	0x240001fc
 80033a4:	240001f4 	.word	0x240001f4
 80033a8:	24000200 	.word	0x24000200

080033ac <HAL_Init>:
{
 80033ac:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ae:	2003      	movs	r0, #3
{
 80033b0:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b2:	f000 fe69 	bl	8004088 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033b6:	4c12      	ldr	r4, [pc, #72]	; (8003400 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033b8:	f003 fc82 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <HAL_Init+0x58>)
 80033be:	4912      	ldr	r1, [pc, #72]	; (8003408 <HAL_Init+0x5c>)
 80033c0:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c2:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c4:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 80033c8:	4d10      	ldr	r5, [pc, #64]	; (800340c <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ca:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d0:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033d2:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d6:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033da:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033de:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e0:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 80033e4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e6:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033e8:	f7ff ffba 	bl	8003360 <HAL_InitTick>
 80033ec:	b110      	cbz	r0, 80033f4 <HAL_Init+0x48>
    return HAL_ERROR;
 80033ee:	2001      	movs	r0, #1
}
 80033f0:	b003      	add	sp, #12
 80033f2:	bd30      	pop	{r4, r5, pc}
 80033f4:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 80033f6:	f7ff fcdf 	bl	8002db8 <HAL_MspInit>
  return HAL_OK;
 80033fa:	9801      	ldr	r0, [sp, #4]
}
 80033fc:	b003      	add	sp, #12
 80033fe:	bd30      	pop	{r4, r5, pc}
 8003400:	240001f8 	.word	0x240001f8
 8003404:	58024400 	.word	0x58024400
 8003408:	08012500 	.word	0x08012500
 800340c:	240001f4 	.word	0x240001f4

08003410 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003410:	4a03      	ldr	r2, [pc, #12]	; (8003420 <HAL_IncTick+0x10>)
 8003412:	4b04      	ldr	r3, [pc, #16]	; (8003424 <HAL_IncTick+0x14>)
 8003414:	6811      	ldr	r1, [r2, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	440b      	add	r3, r1
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	24004480 	.word	0x24004480
 8003424:	240001fc 	.word	0x240001fc

08003428 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <HAL_GetTick+0x8>)
 800342a:	6818      	ldr	r0, [r3, #0]
}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	24004480 	.word	0x24004480

08003434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7ff fff6 	bl	8003428 <HAL_GetTick>
 800343c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	1c63      	adds	r3, r4, #1
 8003440:	d002      	beq.n	8003448 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_Delay+0x20>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003448:	f7ff ffee 	bl	8003428 <HAL_GetTick>
 800344c:	1b40      	subs	r0, r0, r5
 800344e:	42a0      	cmp	r0, r4
 8003450:	d3fa      	bcc.n	8003448 <HAL_Delay+0x14>
  {
  }
}
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	240001fc 	.word	0x240001fc

08003458 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <HAL_GetREVID+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
}
 800345c:	0c00      	lsrs	r0, r0, #16
 800345e:	4770      	bx	lr
 8003460:	5c001000 	.word	0x5c001000

08003464 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003464:	4a03      	ldr	r2, [pc, #12]	; (8003474 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x10>)
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	4318      	orrs	r0, r3
 800346e:	6010      	str	r0, [r2, #0]
}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	58003c00 	.word	0x58003c00

08003478 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003478:	4a03      	ldr	r2, [pc, #12]	; (8003488 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	f023 0302 	bic.w	r3, r3, #2
 8003480:	4318      	orrs	r0, r3
 8003482:	6010      	str	r0, [r2, #0]
}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	58003c00 	.word	0x58003c00

0800348c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800348c:	b538      	push	{r3, r4, r5, lr}
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_SYSCFG_EnableVREFBUF+0x30>)
 8003490:	681a      	ldr	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003492:	461c      	mov	r4, r3
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800349a:	f7ff ffc5 	bl	8003428 <HAL_GetTick>
 800349e:	4605      	mov	r5, r0
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80034a0:	e004      	b.n	80034ac <HAL_SYSCFG_EnableVREFBUF+0x20>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80034a2:	f7ff ffc1 	bl	8003428 <HAL_GetTick>
 80034a6:	1b40      	subs	r0, r0, r5
 80034a8:	280a      	cmp	r0, #10
 80034aa:	d804      	bhi.n	80034b6 <HAL_SYSCFG_EnableVREFBUF+0x2a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	071b      	lsls	r3, r3, #28
 80034b0:	d5f7      	bpl.n	80034a2 <HAL_SYSCFG_EnableVREFBUF+0x16>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80034b6:	2003      	movs	r0, #3
}
 80034b8:	bd38      	pop	{r3, r4, r5, pc}
 80034ba:	bf00      	nop
 80034bc:	58003c00 	.word	0x58003c00

080034c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034c0:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80034c4:	f7fe fe64 	bl	8002190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	bf00      	nop

080034cc <HAL_ADC_ErrorCallback>:
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034d4:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80034da:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034dc:	d11d      	bne.n	800351a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034de:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034e6:	680a      	ldr	r2, [r1, #0]
 80034e8:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80034ec:	68ca      	ldr	r2, [r1, #12]
 80034ee:	d01b      	beq.n	8003528 <ADC_DMAConvCplt+0x58>
 80034f0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80034f4:	d10d      	bne.n	8003512 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034f6:	68ca      	ldr	r2, [r1, #12]
 80034f8:	0494      	lsls	r4, r2, #18
 80034fa:	d40a      	bmi.n	8003512 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003506:	04d1      	lsls	r1, r2, #19
 8003508:	d403      	bmi.n	8003512 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800350a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fe1e 	bl	8002154 <HAL_ADC_ConvCpltCallback>
}
 8003518:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800351a:	06d2      	lsls	r2, r2, #27
 800351c:	d407      	bmi.n	800352e <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003528:	0790      	lsls	r0, r2, #30
 800352a:	d1f2      	bne.n	8003512 <ADC_DMAConvCplt+0x42>
 800352c:	e7e6      	b.n	80034fc <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffcc 	bl	80034cc <HAL_ADC_ErrorCallback>
}
 8003534:	bd10      	pop	{r4, pc}
 8003536:	bf00      	nop

08003538 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003538:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800353a:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800353c:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800353e:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003546:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003548:	f042 0204 	orr.w	r2, r2, #4
 800354c:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 800354e:	f7ff ffbd 	bl	80034cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003552:	bd08      	pop	{r3, pc}

08003554 <HAL_ADC_ConfigChannel>:
{
 8003554:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0;
 8003556:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003558:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 800355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003560:	2b01      	cmp	r3, #1
{
 8003562:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003564:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003566:	f000 8134 	beq.w	80037d2 <HAL_ADC_ConfigChannel+0x27e>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800356a:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 800356c:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800356e:	689c      	ldr	r4, [r3, #8]
 8003570:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8003574:	0767      	lsls	r7, r4, #29
 8003576:	d443      	bmi.n	8003600 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003578:	680c      	ldr	r4, [r1, #0]
 800357a:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800357e:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8003582:	2d00      	cmp	r5, #0
 8003584:	f040 80a5 	bne.w	80036d2 <HAL_ADC_ConfigChannel+0x17e>
 8003588:	40b8      	lsls	r0, r7
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800358a:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800358c:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003590:	69dd      	ldr	r5, [r3, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003592:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8003594:	ea04 040c 	and.w	r4, r4, ip
 8003598:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800359a:	f103 0530 	add.w	r5, r3, #48	; 0x30
 800359e:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80035a2:	fa0c fc04 	lsl.w	ip, ip, r4
 80035a6:	61d8      	str	r0, [r3, #28]
 80035a8:	fa07 f404 	lsl.w	r4, r7, r4
 80035ac:	5970      	ldr	r0, [r6, r5]
 80035ae:	ea20 000c 	bic.w	r0, r0, ip
 80035b2:	4320      	orrs	r0, r4
 80035b4:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035b6:	6898      	ldr	r0, [r3, #8]
 80035b8:	0746      	lsls	r6, r0, #29
 80035ba:	f100 8088 	bmi.w	80036ce <HAL_ADC_ConfigChannel+0x17a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035be:	689d      	ldr	r5, [r3, #8]
 80035c0:	f015 0508 	ands.w	r5, r5, #8
 80035c4:	d026      	beq.n	8003614 <HAL_ADC_ConfigChannel+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035c6:	6898      	ldr	r0, [r3, #8]
 80035c8:	07c5      	lsls	r5, r0, #31
 80035ca:	d417      	bmi.n	80035fc <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035cc:	68ce      	ldr	r6, [r1, #12]
 80035ce:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80035d0:	f006 0718 	and.w	r7, r6, #24
 80035d4:	48bc      	ldr	r0, [pc, #752]	; (80038c8 <HAL_ADC_ConfigChannel+0x374>)
 80035d6:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 80035da:	40f8      	lsrs	r0, r7
 80035dc:	f3c4 0713 	ubfx	r7, r4, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035e0:	f8df c30c 	ldr.w	ip, [pc, #780]	; 80038f0 <HAL_ADC_ConfigChannel+0x39c>
 80035e4:	4020      	ands	r0, r4
 80035e6:	ea25 0507 	bic.w	r5, r5, r7
 80035ea:	4566      	cmp	r6, ip
 80035ec:	ea40 0005 	orr.w	r0, r0, r5
 80035f0:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80035f4:	f000 80a6 	beq.w	8003744 <HAL_ADC_ConfigChannel+0x1f0>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035f8:	2c00      	cmp	r4, #0
 80035fa:	db72      	blt.n	80036e2 <HAL_ADC_ConfigChannel+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2000      	movs	r0, #0
 80035fe:	e003      	b.n	8003608 <HAL_ADC_ConfigChannel+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003602:	f043 0320 	orr.w	r3, r3, #32
 8003606:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003608:	2300      	movs	r3, #0
 800360a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 800360e:	b002      	add	sp, #8
 8003610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003614:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003616:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800361a:	2007      	movs	r0, #7
 800361c:	688f      	ldr	r7, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800361e:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8003622:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003626:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800362a:	fa00 fe04 	lsl.w	lr, r0, r4
 800362e:	fa07 f404 	lsl.w	r4, r7, r4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003632:	4fa6      	ldr	r7, [pc, #664]	; (80038cc <HAL_ADC_ConfigChannel+0x378>)
 8003634:	f85c 0006 	ldr.w	r0, [ip, r6]
 8003638:	ea20 000e 	bic.w	r0, r0, lr
 800363c:	4320      	orrs	r0, r4
 800363e:	f84c 0006 	str.w	r0, [ip, r6]
 8003642:	6838      	ldr	r0, [r7, #0]
 8003644:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003648:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 800364c:	f000 80b8 	beq.w	80037c0 <HAL_ADC_ConfigChannel+0x26c>
 8003650:	68dc      	ldr	r4, [r3, #12]
 8003652:	6948      	ldr	r0, [r1, #20]
 8003654:	f014 0f10 	tst.w	r4, #16
 8003658:	68dc      	ldr	r4, [r3, #12]
 800365a:	f040 80d9 	bne.w	8003810 <HAL_ADC_ConfigChannel+0x2bc>
 800365e:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8003662:	0064      	lsls	r4, r4, #1
 8003664:	fa00 fc04 	lsl.w	ip, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003668:	f8d1 e010 	ldr.w	lr, [r1, #16]
 800366c:	6808      	ldr	r0, [r1, #0]
 800366e:	f1be 0f04 	cmp.w	lr, #4
 8003672:	f000 80b2 	beq.w	80037da <HAL_ADC_ConfigChannel+0x286>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003676:	f103 0660 	add.w	r6, r3, #96	; 0x60
    MODIFY_REG(*preg,
 800367a:	f000 44f8 	and.w	r4, r0, #2080374784	; 0x7c000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800367e:	7e4f      	ldrb	r7, [r1, #25]
 8003680:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 8003684:	2f01      	cmp	r7, #1
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003686:	7e0f      	ldrb	r7, [r1, #24]
 8003688:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800368c:	bf14      	ite	ne
 800368e:	f04f 0800 	movne.w	r8, #0
 8003692:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8003696:	4320      	orrs	r0, r4
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003698:	2f01      	cmp	r7, #1
 800369a:	ea40 000c 	orr.w	r0, r0, ip
 800369e:	f846 002e 	str.w	r0, [r6, lr, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80036a2:	690c      	ldr	r4, [r1, #16]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80036a4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80036a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80036ac:	ea40 0008 	orr.w	r0, r0, r8
 80036b0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80036b4:	6908      	ldr	r0, [r1, #16]
 80036b6:	d104      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x16e>
 80036b8:	f000 001f 	and.w	r0, r0, #31
 80036bc:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80036c0:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80036c2:	6918      	ldr	r0, [r3, #16]
 80036c4:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80036c8:	4305      	orrs	r5, r0
 80036ca:	611d      	str	r5, [r3, #16]
 80036cc:	e77b      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036ce:	6898      	ldr	r0, [r3, #8]
 80036d0:	e779      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	fa94 f4a4 	rbit	r4, r4
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036d6:	fab4 f484 	clz	r4, r4
 80036da:	f004 041f 	and.w	r4, r4, #31
 80036de:	40a0      	lsls	r0, r4
 80036e0:	e753      	b.n	800358a <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e2:	497b      	ldr	r1, [pc, #492]	; (80038d0 <HAL_ADC_ConfigChannel+0x37c>)
 80036e4:	428b      	cmp	r3, r1
 80036e6:	f000 80bd 	beq.w	8003864 <HAL_ADC_ConfigChannel+0x310>
 80036ea:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80036ee:	428b      	cmp	r3, r1
 80036f0:	f000 80b8 	beq.w	8003864 <HAL_ADC_ConfigChannel+0x310>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036f4:	4e77      	ldr	r6, [pc, #476]	; (80038d4 <HAL_ADC_ConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036f6:	4d78      	ldr	r5, [pc, #480]	; (80038d8 <HAL_ADC_ConfigChannel+0x384>)
 80036f8:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036fa:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036fc:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003700:	43c9      	mvns	r1, r1
 8003702:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003706:	2900      	cmp	r1, #0
 8003708:	f000 80ba 	beq.w	8003880 <HAL_ADC_ConfigChannel+0x32c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800370c:	4973      	ldr	r1, [pc, #460]	; (80038dc <HAL_ADC_ConfigChannel+0x388>)
 800370e:	428c      	cmp	r4, r1
 8003710:	f000 80f0 	beq.w	80038f4 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003714:	4972      	ldr	r1, [pc, #456]	; (80038e0 <HAL_ADC_ConfigChannel+0x38c>)
 8003716:	428c      	cmp	r4, r1
 8003718:	f000 810e 	beq.w	8003938 <HAL_ADC_ConfigChannel+0x3e4>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800371c:	4971      	ldr	r1, [pc, #452]	; (80038e4 <HAL_ADC_ConfigChannel+0x390>)
 800371e:	428c      	cmp	r4, r1
 8003720:	f47f af6c 	bne.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003724:	0241      	lsls	r1, r0, #9
 8003726:	f53f af69 	bmi.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
 800372a:	496a      	ldr	r1, [pc, #424]	; (80038d4 <HAL_ADC_ConfigChannel+0x380>)
 800372c:	428b      	cmp	r3, r1
 800372e:	f47f af65 	bne.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003732:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003734:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003738:	2000      	movs	r0, #0
 800373a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800373e:	430b      	orrs	r3, r1
 8003740:	60ab      	str	r3, [r5, #8]
 8003742:	e761      	b.n	8003608 <HAL_ADC_ConfigChannel+0xb4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003744:	2f00      	cmp	r7, #0
 8003746:	d069      	beq.n	800381c <HAL_ADC_ConfigChannel+0x2c8>
 8003748:	fa94 f0a4 	rbit	r0, r4
 800374c:	fab0 f080 	clz	r0, r0
 8003750:	3001      	adds	r0, #1
 8003752:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003756:	2809      	cmp	r0, #9
 8003758:	f200 8098 	bhi.w	800388c <HAL_ADC_ConfigChannel+0x338>
 800375c:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003760:	fab0 f080 	clz	r0, r0
 8003764:	fa94 f5a4 	rbit	r5, r4
 8003768:	2601      	movs	r6, #1
 800376a:	fab5 f585 	clz	r5, r5
 800376e:	3001      	adds	r0, #1
 8003770:	4435      	add	r5, r6
 8003772:	0680      	lsls	r0, r0, #26
 8003774:	f005 051f 	and.w	r5, r5, #31
 8003778:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800377c:	fa06 f505 	lsl.w	r5, r6, r5
 8003780:	4328      	orrs	r0, r5
 8003782:	fa94 f4a4 	rbit	r4, r4
 8003786:	fab4 f484 	clz	r4, r4
 800378a:	4434      	add	r4, r6
 800378c:	f004 041f 	and.w	r4, r4, #31
 8003790:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003794:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003796:	4304      	orrs	r4, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003798:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 800379c:	f04f 0c07 	mov.w	ip, #7
 80037a0:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037a2:	0de7      	lsrs	r7, r4, #23
  MODIFY_REG(*preg,
 80037a4:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037a8:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 80037ac:	fa0c fc04 	lsl.w	ip, ip, r4
 80037b0:	40a0      	lsls	r0, r4
 80037b2:	59bd      	ldr	r5, [r7, r6]
 80037b4:	ea25 040c 	bic.w	r4, r5, ip
 80037b8:	4304      	orrs	r4, r0
 80037ba:	51bc      	str	r4, [r7, r6]
 80037bc:	680c      	ldr	r4, [r1, #0]
 80037be:	e71b      	b.n	80035f8 <HAL_ADC_ConfigChannel+0xa4>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037c0:	68dc      	ldr	r4, [r3, #12]
 80037c2:	6948      	ldr	r0, [r1, #20]
 80037c4:	f3c4 0c82 	ubfx	ip, r4, #2, #3
 80037c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80037cc:	fa00 fc0c 	lsl.w	ip, r0, ip
 80037d0:	e74a      	b.n	8003668 <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 80037d2:	2002      	movs	r0, #2
}
 80037d4:	b002      	add	sp, #8
 80037d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037da:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80037dc:	0680      	lsls	r0, r0, #26
 80037de:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80037e2:	4284      	cmp	r4, r0
 80037e4:	d039      	beq.n	800385a <HAL_ADC_ConfigChannel+0x306>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037e6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80037e8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80037ec:	42a0      	cmp	r0, r4
 80037ee:	d02f      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037f0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80037f2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80037f6:	42a0      	cmp	r0, r4
 80037f8:	d025      	beq.n	8003846 <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037fa:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80037fc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003800:	42a0      	cmp	r0, r4
 8003802:	f47f aee0 	bne.w	80035c6 <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003806:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003808:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800380c:	66d8      	str	r0, [r3, #108]	; 0x6c
 800380e:	e6da      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x72>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003810:	0864      	lsrs	r4, r4, #1
 8003812:	f004 0408 	and.w	r4, r4, #8
 8003816:	fa00 fc04 	lsl.w	ip, r0, r4
 800381a:	e725      	b.n	8003668 <HAL_ADC_ConfigChannel+0x114>
 800381c:	2001      	movs	r0, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800381e:	0ea4      	lsrs	r4, r4, #26
 8003820:	4404      	add	r4, r0
 8003822:	f004 051f 	and.w	r5, r4, #31
 8003826:	06a4      	lsls	r4, r4, #26
 8003828:	fa00 f605 	lsl.w	r6, r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382c:	2d09      	cmp	r5, #9
 800382e:	f004 40f8 	and.w	r0, r4, #2080374784	; 0x7c000000
 8003832:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8003836:	ea40 0006 	orr.w	r0, r0, r6
 800383a:	d9ab      	bls.n	8003794 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383c:	3c1e      	subs	r4, #30
 800383e:	0524      	lsls	r4, r4, #20
 8003840:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8003844:	e7a7      	b.n	8003796 <HAL_ADC_ConfigChannel+0x242>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003846:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003848:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800384c:	669c      	str	r4, [r3, #104]	; 0x68
 800384e:	e7d4      	b.n	80037fa <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003850:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003852:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003856:	665c      	str	r4, [r3, #100]	; 0x64
 8003858:	e7ca      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800385a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800385c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003860:	661c      	str	r4, [r3, #96]	; 0x60
 8003862:	e7c0      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x292>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003864:	4920      	ldr	r1, [pc, #128]	; (80038e8 <HAL_ADC_ConfigChannel+0x394>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003866:	4e21      	ldr	r6, [pc, #132]	; (80038ec <HAL_ADC_ConfigChannel+0x398>)
 8003868:	4f19      	ldr	r7, [pc, #100]	; (80038d0 <HAL_ADC_ConfigChannel+0x37c>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800386a:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800386c:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800386e:	68bf      	ldr	r7, [r7, #8]
 8003870:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003872:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003876:	4339      	orrs	r1, r7
 8003878:	43c9      	mvns	r1, r1
 800387a:	f001 0101 	and.w	r1, r1, #1
 800387e:	e742      	b.n	8003706 <HAL_ADC_ConfigChannel+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003880:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003882:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003884:	f043 0320 	orr.w	r3, r3, #32
 8003888:	6553      	str	r3, [r2, #84]	; 0x54
 800388a:	e6bd      	b.n	8003608 <HAL_ADC_ConfigChannel+0xb4>
 800388c:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003890:	fab0 f080 	clz	r0, r0
 8003894:	fa94 f5a4 	rbit	r5, r4
 8003898:	2601      	movs	r6, #1
 800389a:	fab5 f585 	clz	r5, r5
 800389e:	3001      	adds	r0, #1
 80038a0:	4435      	add	r5, r6
 80038a2:	0680      	lsls	r0, r0, #26
 80038a4:	f005 051f 	and.w	r5, r5, #31
 80038a8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80038ac:	fa06 f505 	lsl.w	r5, r6, r5
 80038b0:	4328      	orrs	r0, r5
 80038b2:	fa94 f4a4 	rbit	r4, r4
 80038b6:	fab4 f484 	clz	r4, r4
 80038ba:	4434      	add	r4, r6
 80038bc:	f004 041f 	and.w	r4, r4, #31
 80038c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80038c4:	e7ba      	b.n	800383c <HAL_ADC_ConfigChannel+0x2e8>
 80038c6:	bf00      	nop
 80038c8:	000fffff 	.word	0x000fffff
 80038cc:	5c001000 	.word	0x5c001000
 80038d0:	40022000 	.word	0x40022000
 80038d4:	58026000 	.word	0x58026000
 80038d8:	58026300 	.word	0x58026300
 80038dc:	cb840000 	.word	0xcb840000
 80038e0:	c7520000 	.word	0xc7520000
 80038e4:	cfb80000 	.word	0xcfb80000
 80038e8:	40022300 	.word	0x40022300
 80038ec:	40022100 	.word	0x40022100
 80038f0:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038f4:	0204      	lsls	r4, r0, #8
 80038f6:	f53f ae81 	bmi.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038fa:	4917      	ldr	r1, [pc, #92]	; (8003958 <HAL_ADC_ConfigChannel+0x404>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	f47f ae7d 	bne.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003902:	4b16      	ldr	r3, [pc, #88]	; (800395c <HAL_ADC_ConfigChannel+0x408>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003904:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003908:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003910:	4c13      	ldr	r4, [pc, #76]	; (8003960 <HAL_ADC_ConfigChannel+0x40c>)
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	4301      	orrs	r1, r0
 8003916:	fba4 0303 	umull	r0, r3, r4, r3
 800391a:	60a9      	str	r1, [r5, #8]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003922:	9b01      	ldr	r3, [sp, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f43f ae69 	beq.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
                wait_loop_index--;
 800392a:	9b01      	ldr	r3, [sp, #4]
 800392c:	3b01      	subs	r3, #1
 800392e:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003930:	9b01      	ldr	r3, [sp, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f9      	bne.n	800392a <HAL_ADC_ConfigChannel+0x3d6>
 8003936:	e661      	b.n	80035fc <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003938:	01c0      	lsls	r0, r0, #7
 800393a:	f53f ae5f 	bmi.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
 800393e:	4906      	ldr	r1, [pc, #24]	; (8003958 <HAL_ADC_ConfigChannel+0x404>)
 8003940:	428b      	cmp	r3, r1
 8003942:	f47f ae5b 	bne.w	80035fc <HAL_ADC_ConfigChannel+0xa8>
 8003946:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003948:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394c:	2000      	movs	r0, #0
 800394e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003952:	430b      	orrs	r3, r1
 8003954:	60ab      	str	r3, [r5, #8]
 8003956:	e657      	b.n	8003608 <HAL_ADC_ConfigChannel+0xb4>
 8003958:	58026000 	.word	0x58026000
 800395c:	240001f4 	.word	0x240001f4
 8003960:	053e2d63 	.word	0x053e2d63

08003964 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003964:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003966:	6891      	ldr	r1, [r2, #8]
 8003968:	07cb      	lsls	r3, r1, #31
 800396a:	d40e      	bmi.n	800398a <ADC_Enable+0x26>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800396c:	4926      	ldr	r1, [pc, #152]	; (8003a08 <ADC_Enable+0xa4>)
{
 800396e:	b570      	push	{r4, r5, r6, lr}
 8003970:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003972:	6890      	ldr	r0, [r2, #8]
 8003974:	4208      	tst	r0, r1
 8003976:	d00a      	beq.n	800398e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003978:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 800397a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397c:	f042 0210 	orr.w	r2, r2, #16
 8003980:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003982:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003984:	4302      	orrs	r2, r0
 8003986:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8003988:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800398a:	2000      	movs	r0, #0
}
 800398c:	4770      	bx	lr
  MODIFY_REG(ADCx->CR,
 800398e:	6891      	ldr	r1, [r2, #8]
 8003990:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <ADC_Enable+0xa8>)
 8003992:	400b      	ands	r3, r1
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800399a:	f7ff fd45 	bl	8003428 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <ADC_Enable+0xac>)
    tickstart = HAL_GetTick();
 80039a2:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d026      	beq.n	80039f6 <ADC_Enable+0x92>
 80039a8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d022      	beq.n	80039f6 <ADC_Enable+0x92>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <ADC_Enable+0xb0>)
 80039b2:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 80039b4:	4e15      	ldr	r6, [pc, #84]	; (8003a0c <ADC_Enable+0xa8>)
 80039b6:	e00a      	b.n	80039ce <ADC_Enable+0x6a>
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4032      	ands	r2, r6
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039c2:	f7ff fd31 	bl	8003428 <HAL_GetTick>
 80039c6:	1b40      	subs	r0, r0, r5
 80039c8:	2802      	cmp	r0, #2
 80039ca:	d80b      	bhi.n	80039e4 <ADC_Enable+0x80>
 80039cc:	6823      	ldr	r3, [r4, #0]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	07d2      	lsls	r2, r2, #31
 80039d2:	d417      	bmi.n	8003a04 <ADC_Enable+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	07d1      	lsls	r1, r2, #31
 80039d8:	d5ee      	bpl.n	80039b8 <ADC_Enable+0x54>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039da:	f7ff fd25 	bl	8003428 <HAL_GetTick>
 80039de:	1b40      	subs	r0, r0, r5
 80039e0:	2802      	cmp	r0, #2
 80039e2:	d9f3      	bls.n	80039cc <ADC_Enable+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80039e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e8:	f043 0310 	orr.w	r3, r3, #16
 80039ec:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039f0:	4303      	orrs	r3, r0
 80039f2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <ADC_Enable+0xb4>)
 80039f8:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fa:	06d0      	lsls	r0, r2, #27
 80039fc:	d0da      	beq.n	80039b4 <ADC_Enable+0x50>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <ADC_Enable+0xb8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d1d7      	bne.n	80039b4 <ADC_Enable+0x50>
  return HAL_OK;
 8003a04:	2000      	movs	r0, #0
}
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	8000003f 	.word	0x8000003f
 8003a0c:	7fffffc0 	.word	0x7fffffc0
 8003a10:	40022000 	.word	0x40022000
 8003a14:	58026300 	.word	0x58026300
 8003a18:	40022300 	.word	0x40022300
 8003a1c:	40022100 	.word	0x40022100

08003a20 <ADC_Disable>:
{
 8003a20:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a22:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	0789      	lsls	r1, r1, #30
 8003a28:	d502      	bpl.n	8003a30 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a2a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
}
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	07ca      	lsls	r2, r1, #31
 8003a34:	d523      	bpl.n	8003a7e <ADC_Disable+0x5e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	4604      	mov	r4, r0
 8003a3a:	f001 010d 	and.w	r1, r1, #13
 8003a3e:	2901      	cmp	r1, #1
 8003a40:	d008      	beq.n	8003a54 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003a44:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a46:	f043 0310 	orr.w	r3, r3, #16
 8003a4a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a4e:	4303      	orrs	r3, r0
 8003a50:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003a52:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003a54:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a56:	2103      	movs	r1, #3
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <ADC_Disable+0x64>)
 8003a5a:	4002      	ands	r2, r0
 8003a5c:	f042 0202 	orr.w	r2, r2, #2
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003a64:	f7ff fce0 	bl	8003428 <HAL_GetTick>
 8003a68:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a6a:	e004      	b.n	8003a76 <ADC_Disable+0x56>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a6c:	f7ff fcdc 	bl	8003428 <HAL_GetTick>
 8003a70:	1b40      	subs	r0, r0, r5
 8003a72:	2802      	cmp	r0, #2
 8003a74:	d8e5      	bhi.n	8003a42 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	07db      	lsls	r3, r3, #31
 8003a7c:	d4f6      	bmi.n	8003a6c <ADC_Disable+0x4c>
  return HAL_OK;
 8003a7e:	2000      	movs	r0, #0
}
 8003a80:	bd38      	pop	{r3, r4, r5, pc}
 8003a82:	bf00      	nop
 8003a84:	7fffffc0 	.word	0x7fffffc0

08003a88 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a88:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a8a:	4a52      	ldr	r2, [pc, #328]	; (8003bd4 <ADC_ConfigureBoostMode+0x14c>)
{
 8003a8c:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a8e:	6803      	ldr	r3, [r0, #0]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d027      	beq.n	8003ae4 <ADC_ConfigureBoostMode+0x5c>
 8003a94:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d023      	beq.n	8003ae4 <ADC_ConfigureBoostMode+0x5c>
 8003a9c:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <ADC_ConfigureBoostMode+0x150>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b323      	cbz	r3, 8003af6 <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003aac:	f003 fabe 	bl	800702c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003ab0:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003ab2:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab8:	d062      	beq.n	8003b80 <ADC_ConfigureBoostMode+0xf8>
 8003aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003abe:	d072      	beq.n	8003ba6 <ADC_ConfigureBoostMode+0x11e>
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d05c      	beq.n	8003b80 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ac6:	f7ff fcc7 	bl	8003458 <HAL_GetREVID>
 8003aca:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ace:	4298      	cmp	r0, r3
 8003ad0:	d832      	bhi.n	8003b38 <ADC_ConfigureBoostMode+0xb0>
  {
    if (freq > 20000000UL)
 8003ad2:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <ADC_ConfigureBoostMode+0x154>)
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	4294      	cmp	r4, r2
 8003ad8:	d928      	bls.n	8003b2c <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ae4:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <ADC_ConfigureBoostMode+0x158>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1da      	bne.n	8003aac <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003af6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003afa:	f004 fccd 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003afe:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b00:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8003b02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b06:	d049      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x114>
 8003b08:	d93e      	bls.n	8003b88 <ADC_ConfigureBoostMode+0x100>
 8003b0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b0e:	d04e      	beq.n	8003bae <ADC_ConfigureBoostMode+0x126>
 8003b10:	d927      	bls.n	8003b62 <ADC_ConfigureBoostMode+0xda>
 8003b12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b16:	d048      	beq.n	8003baa <ADC_ConfigureBoostMode+0x122>
 8003b18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b1c:	d1d3      	bne.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b1e:	f7ff fc9b 	bl	8003458 <HAL_GetREVID>
 8003b22:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b26:	4298      	cmp	r0, r3
 8003b28:	d805      	bhi.n	8003b36 <ADC_ConfigureBoostMode+0xae>
 8003b2a:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8003b36:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b38:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <ADC_ConfigureBoostMode+0x15c>)
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	4294      	cmp	r4, r2
 8003b40:	d90a      	bls.n	8003b58 <ADC_ConfigureBoostMode+0xd0>
    else if (freq <= 12500000UL)
 8003b42:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <ADC_ConfigureBoostMode+0x160>)
 8003b44:	4294      	cmp	r4, r2
 8003b46:	d914      	bls.n	8003b72 <ADC_ConfigureBoostMode+0xea>
    else if (freq <= 25000000UL)
 8003b48:	4a28      	ldr	r2, [pc, #160]	; (8003bec <ADC_ConfigureBoostMode+0x164>)
 8003b4a:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b4c:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8003b4e:	d932      	bls.n	8003bb6 <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b50:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003b62:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b66:	d024      	beq.n	8003bb2 <ADC_ConfigureBoostMode+0x12a>
 8003b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b6c:	d1ab      	bne.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8003b6e:	0944      	lsrs	r4, r0, #5
        break;
 8003b70:	e7a9      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b7c:	609a      	str	r2, [r3, #8]
}
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003b86:	e79e      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
    switch (hadc->Init.ClockPrescaler)
 8003b88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b8c:	d006      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x114>
 8003b8e:	d818      	bhi.n	8003bc2 <ADC_ConfigureBoostMode+0x13a>
 8003b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b94:	d002      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x114>
 8003b96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b9a:	d194      	bne.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b9c:	0c9b      	lsrs	r3, r3, #18
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003ba4:	e78f      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8003ba6:	0884      	lsrs	r4, r0, #2
        break;
 8003ba8:	e78d      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8003baa:	09c4      	lsrs	r4, r0, #7
        break;
 8003bac:	e78b      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8003bae:	0984      	lsrs	r4, r0, #6
        break;
 8003bb0:	e789      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8003bb2:	0904      	lsrs	r4, r0, #4
        break;
 8003bb4:	e787      	b.n	8003ac6 <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003bb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc6:	d0e9      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x114>
 8003bc8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003bcc:	f47f af7b 	bne.w	8003ac6 <ADC_ConfigureBoostMode+0x3e>
 8003bd0:	e7e4      	b.n	8003b9c <ADC_ConfigureBoostMode+0x114>
 8003bd2:	bf00      	nop
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	58026300 	.word	0x58026300
 8003bdc:	01312d00 	.word	0x01312d00
 8003be0:	40022300 	.word	0x40022300
 8003be4:	005f5e10 	.word	0x005f5e10
 8003be8:	00bebc20 	.word	0x00bebc20
 8003bec:	017d7840 	.word	0x017d7840

08003bf0 <HAL_ADC_Init>:
{
 8003bf0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8003bf2:	2300      	movs	r3, #0
{
 8003bf4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003bf6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	f000 80aa 	beq.w	8003d52 <HAL_ADC_Init+0x162>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bfe:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8003c00:	4604      	mov	r4, r0
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	f000 809a 	beq.w	8003d3c <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c08:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c0a:	6893      	ldr	r3, [r2, #8]
 8003c0c:	009d      	lsls	r5, r3, #2
 8003c0e:	d503      	bpl.n	8003c18 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c10:	6891      	ldr	r1, [r2, #8]
 8003c12:	4b77      	ldr	r3, [pc, #476]	; (8003df0 <HAL_ADC_Init+0x200>)
 8003c14:	400b      	ands	r3, r1
 8003c16:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c18:	6893      	ldr	r3, [r2, #8]
 8003c1a:	00d8      	lsls	r0, r3, #3
 8003c1c:	d415      	bmi.n	8003c4a <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c1e:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 8003c20:	6890      	ldr	r0, [r2, #8]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4d74      	ldr	r5, [pc, #464]	; (8003df8 <HAL_ADC_Init+0x208>)
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	4974      	ldr	r1, [pc, #464]	; (8003dfc <HAL_ADC_Init+0x20c>)
 8003c2a:	fba5 5303 	umull	r5, r3, r5, r3
 8003c2e:	4001      	ands	r1, r0
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003c36:	6091      	str	r1, [r2, #8]
 8003c38:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c3a:	9b01      	ldr	r3, [sp, #4]
 8003c3c:	b12b      	cbz	r3, 8003c4a <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 8003c3e:	9b01      	ldr	r3, [sp, #4]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c44:	9b01      	ldr	r3, [sp, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f9      	bne.n	8003c3e <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c4a:	6893      	ldr	r3, [r2, #8]
 8003c4c:	00d9      	lsls	r1, r3, #3
 8003c4e:	d467      	bmi.n	8003d20 <HAL_ADC_Init+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c50:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003c52:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	f043 0310 	orr.w	r3, r3, #16
 8003c58:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c5c:	432b      	orrs	r3, r5
 8003c5e:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c60:	6893      	ldr	r3, [r2, #8]
 8003c62:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c68:	d160      	bne.n	8003d2c <HAL_ADC_Init+0x13c>
 8003c6a:	06db      	lsls	r3, r3, #27
 8003c6c:	d45e      	bmi.n	8003d2c <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8003c6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c7a:	6893      	ldr	r3, [r2, #8]
 8003c7c:	07de      	lsls	r6, r3, #31
 8003c7e:	d413      	bmi.n	8003ca8 <HAL_ADC_Init+0xb8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c80:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_ADC_Init+0x210>)
 8003c82:	429a      	cmp	r2, r3
 8003c84:	f000 8092 	beq.w	8003dac <HAL_ADC_Init+0x1bc>
 8003c88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f000 808d 	beq.w	8003dac <HAL_ADC_Init+0x1bc>
 8003c92:	4b5c      	ldr	r3, [pc, #368]	; (8003e04 <HAL_ADC_Init+0x214>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	07d9      	lsls	r1, r3, #31
 8003c98:	d406      	bmi.n	8003ca8 <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c9a:	4a5b      	ldr	r2, [pc, #364]	; (8003e08 <HAL_ADC_Init+0x218>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c9c:	6893      	ldr	r3, [r2, #8]
 8003c9e:	6861      	ldr	r1, [r4, #4]
 8003ca0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003ca8:	f7ff fbd6 	bl	8003458 <HAL_GetREVID>
 8003cac:	f241 0303 	movw	r3, #4099	; 0x1003
 8003cb0:	7d62      	ldrb	r2, [r4, #21]
 8003cb2:	4298      	cmp	r0, r3
 8003cb4:	7f21      	ldrb	r1, [r4, #28]
 8003cb6:	d96c      	bls.n	8003d92 <HAL_ADC_Init+0x1a2>
 8003cb8:	68a3      	ldr	r3, [r4, #8]
 8003cba:	0352      	lsls	r2, r2, #13
 8003cbc:	040e      	lsls	r6, r1, #16
 8003cbe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	f000 808e 	beq.w	8003de2 <HAL_ADC_Init+0x1f2>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	4332      	orrs	r2, r6
 8003cca:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ccc:	2901      	cmp	r1, #1
 8003cce:	d103      	bne.n	8003cd8 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cd0:	6a23      	ldr	r3, [r4, #32]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cda:	b123      	cbz	r3, 8003ce6 <HAL_ADC_Init+0xf6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cdc:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ce0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ce2:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ce4:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	4948      	ldr	r1, [pc, #288]	; (8003e0c <HAL_ADC_Init+0x21c>)
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	4001      	ands	r1, r0
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cf8:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cfc:	0712      	lsls	r2, r2, #28
 8003cfe:	d52c      	bpl.n	8003d5a <HAL_ADC_Init+0x16a>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d00:	68e2      	ldr	r2, [r4, #12]
 8003d02:	2a01      	cmp	r2, #1
 8003d04:	d04a      	beq.n	8003d9c <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d08:	f022 020f 	bic.w	r2, r2, #15
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 8003d10:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d20:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d22:	2500      	movs	r5, #0
 8003d24:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d2a:	d09e      	beq.n	8003c6a <HAL_ADC_Init+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8003d2e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d30:	f043 0310 	orr.w	r3, r3, #16
}
 8003d34:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d36:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003d3c:	f7ff f868 	bl	8002e10 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d40:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003d42:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d44:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8003d46:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8003d4a:	009d      	lsls	r5, r3, #2
 8003d4c:	f57f af64 	bpl.w	8003c18 <HAL_ADC_Init+0x28>
 8003d50:	e75e      	b.n	8003c10 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003d52:	2501      	movs	r5, #1
}
 8003d54:	4628      	mov	r0, r5
 8003d56:	b002      	add	sp, #8
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d5a:	68d8      	ldr	r0, [r3, #12]
 8003d5c:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <HAL_ADC_Init+0x220>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d5e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d60:	4002      	ands	r2, r0
 8003d62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d64:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d68:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d6c:	4302      	orrs	r2, r0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d6e:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d70:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003d72:	d025      	beq.n	8003dc0 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d7c:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d7e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003d86:	430a      	orrs	r2, r1
 8003d88:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8003d8a:	f7ff fe7d 	bl	8003a88 <ADC_ConfigureBoostMode>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	e7b6      	b.n	8003d00 <HAL_ADC_Init+0x110>
 8003d92:	0352      	lsls	r2, r2, #13
 8003d94:	68a3      	ldr	r3, [r4, #8]
 8003d96:	040e      	lsls	r6, r1, #16
 8003d98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d9a:	e794      	b.n	8003cc6 <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d9e:	69a2      	ldr	r2, [r4, #24]
 8003da0:	f021 010f 	bic.w	r1, r1, #15
 8003da4:	3a01      	subs	r2, #1
 8003da6:	430a      	orrs	r2, r1
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
 8003daa:	e7b0      	b.n	8003d0e <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <HAL_ADC_Init+0x210>)
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_ADC_Init+0x224>)
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	07d8      	lsls	r0, r3, #31
 8003db8:	f53f af76 	bmi.w	8003ca8 <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dbc:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <HAL_ADC_Init+0x228>)
 8003dbe:	e76d      	b.n	8003c9c <HAL_ADC_Init+0xac>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003dc0:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 8003dc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	4e14      	ldr	r6, [pc, #80]	; (8003e1c <HAL_ADC_Init+0x22c>)
 8003dca:	6919      	ldr	r1, [r3, #16]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	400e      	ands	r6, r1
 8003dd2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003dd4:	4302      	orrs	r2, r0
 8003dd6:	3901      	subs	r1, #1
 8003dd8:	4332      	orrs	r2, r6
 8003dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003dde:	611a      	str	r2, [r3, #16]
 8003de0:	e7cc      	b.n	8003d7c <HAL_ADC_Init+0x18c>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003de2:	f040 031c 	orr.w	r3, r0, #28
 8003de6:	4313      	orrs	r3, r2
 8003de8:	ea43 0206 	orr.w	r2, r3, r6
 8003dec:	e76e      	b.n	8003ccc <HAL_ADC_Init+0xdc>
 8003dee:	bf00      	nop
 8003df0:	5fffffc0 	.word	0x5fffffc0
 8003df4:	240001f4 	.word	0x240001f4
 8003df8:	053e2d63 	.word	0x053e2d63
 8003dfc:	6fffffc0 	.word	0x6fffffc0
 8003e00:	40022000 	.word	0x40022000
 8003e04:	58026000 	.word	0x58026000
 8003e08:	58026300 	.word	0x58026300
 8003e0c:	fff0c003 	.word	0xfff0c003
 8003e10:	ffffbffc 	.word	0xffffbffc
 8003e14:	40022100 	.word	0x40022100
 8003e18:	40022300 	.word	0x40022300
 8003e1c:	fc00f81e 	.word	0xfc00f81e

08003e20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e22:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
{
 8003e26:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003e28:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 8003e2a:	2d01      	cmp	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003e2c:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8003e2e:	d036      	beq.n	8003e9e <HAL_ADCEx_Calibration_Start+0x7e>
 8003e30:	2301      	movs	r3, #1
 8003e32:	4604      	mov	r4, r0
 8003e34:	4615      	mov	r5, r2
 8003e36:	460e      	mov	r6, r1
 8003e38:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e3c:	f7ff fdf0 	bl	8003a20 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e40:	bb20      	cbnz	r0, 8003e8c <HAL_ADCEx_Calibration_Start+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e42:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8003e44:	f005 4380 	and.w	r3, r5, #1073741824	; 0x40000000
 8003e48:	4d1c      	ldr	r5, [pc, #112]	; (8003ebc <HAL_ADCEx_Calibration_Start+0x9c>)
 8003e4a:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8003e54:	403d      	ands	r5, r7
 8003e56:	4e1a      	ldr	r6, [pc, #104]	; (8003ec0 <HAL_ADCEx_Calibration_Start+0xa0>)
 8003e58:	430b      	orrs	r3, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e5a:	491a      	ldr	r1, [pc, #104]	; (8003ec4 <HAL_ADCEx_Calibration_Start+0xa4>)
    ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	f045 0502 	orr.w	r5, r5, #2
 8003e60:	6565      	str	r5, [r4, #84]	; 0x54
 8003e62:	6895      	ldr	r5, [r2, #8]
 8003e64:	402e      	ands	r6, r5
 8003e66:	4333      	orrs	r3, r6
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	e005      	b.n	8003e78 <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8003e6c:	9b01      	ldr	r3, [sp, #4]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e72:	9b01      	ldr	r3, [sp, #4]
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d815      	bhi.n	8003ea4 <HAL_ADCEx_Calibration_Start+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e78:	6893      	ldr	r3, [r2, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dbf6      	blt.n	8003e6c <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e80:	f023 0303 	bic.w	r3, r3, #3
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6563      	str	r3, [r4, #84]	; 0x54
 8003e8a:	e003      	b.n	8003e94 <HAL_ADCEx_Calibration_Start+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e8e:	f043 0310 	orr.w	r3, r3, #16
 8003e92:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e94:	2300      	movs	r3, #0
 8003e96:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003e9a:	b003      	add	sp, #12
 8003e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8003e9e:	2002      	movs	r0, #2
}
 8003ea0:	b003      	add	sp, #12
 8003ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8003ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003ea6:	2200      	movs	r2, #0
        return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003eae:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8003eb2:	f043 0310 	orr.w	r3, r3, #16
 8003eb6:	6563      	str	r3, [r4, #84]	; 0x54
}
 8003eb8:	b003      	add	sp, #12
 8003eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebc:	ffffeefd 	.word	0xffffeefd
 8003ec0:	3ffeffc0 	.word	0x3ffeffc0
 8003ec4:	25c3f7ff 	.word	0x25c3f7ff

08003ec8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ecc:	6807      	ldr	r7, [r0, #0]
{
 8003ece:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed0:	68bd      	ldr	r5, [r7, #8]
 8003ed2:	f015 0504 	ands.w	r5, r5, #4
 8003ed6:	d123      	bne.n	8003f20 <HAL_ADCEx_MultiModeStart_DMA+0x58>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ed8:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 8003edc:	4604      	mov	r4, r0
 8003ede:	2e01      	cmp	r6, #1
 8003ee0:	d01e      	beq.n	8003f20 <HAL_ADCEx_MultiModeStart_DMA+0x58>

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
    __HAL_LOCK(hadc);
 8003ee4:	2601      	movs	r6, #1
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ee6:	429f      	cmp	r7, r3
    __HAL_LOCK(hadc);
 8003ee8:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003eec:	d009      	beq.n	8003f02 <HAL_ADCEx_MultiModeStart_DMA+0x3a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eee:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 8003ef0:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 8003ef2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 8003efc:	b01a      	add	sp, #104	; 0x68
 8003efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f02:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003fbc <HAL_ADCEx_MultiModeStart_DMA+0xf4>
 8003f06:	4616      	mov	r6, r2
 8003f08:	460d      	mov	r5, r1
 8003f0a:	f8cd 8004 	str.w	r8, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 8003f0e:	f7ff fd29 	bl	8003964 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003f12:	b148      	cbz	r0, 8003f28 <HAL_ADCEx_MultiModeStart_DMA+0x60>
      __HAL_UNLOCK(hadc);
 8003f14:	2300      	movs	r3, #0
 8003f16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003f1a:	b01a      	add	sp, #104	; 0x68
 8003f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003f20:	2002      	movs	r0, #2
}
 8003f22:	b01a      	add	sp, #104	; 0x68
 8003f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003f28:	a801      	add	r0, sp, #4
 8003f2a:	f7ff fd1b 	bl	8003964 <ADC_Enable>
 8003f2e:	4602      	mov	r2, r0
    if (tmp_hal_status == HAL_OK)
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d1ef      	bne.n	8003f14 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8003f34:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 8003f3a:	400b      	ands	r3, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f3c:	f8df c080 	ldr.w	ip, [pc, #128]	; 8003fc0 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f40:	f8df e080 	ldr.w	lr, [pc, #128]	; 8003fc4 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003f48:	4918      	ldr	r1, [pc, #96]	; (8003fac <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      ADC_STATE_CLR_SET(hadc->State,
 8003f4a:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8003f4c:	65a2      	str	r2, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f4e:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f52:	f8d4 c000 	ldr.w	ip, [r4]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f56:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f5a:	45bc      	cmp	ip, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003f5c:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f5e:	d01e      	beq.n	8003f9e <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8003f60:	45c4      	cmp	ip, r8
 8003f62:	d01c      	beq.n	8003f9e <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8003f64:	4912      	ldr	r1, [pc, #72]	; (8003fb0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f66:	f04f 0e1c 	mov.w	lr, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f6a:	462a      	mov	r2, r5
      __HAL_UNLOCK(hadc);
 8003f6c:	2700      	movs	r7, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f6e:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f70:	f8cc e000 	str.w	lr, [ip]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f74:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f76:	f8dc 5004 	ldr.w	r5, [ip, #4]
      __HAL_UNLOCK(hadc);
 8003f7a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f7e:	f045 0510 	orr.w	r5, r5, #16
 8003f82:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003f86:	f000 fe17 	bl	8004bb8 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f8a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8003f8e:	6891      	ldr	r1, [r2, #8]
 8003f90:	400b      	ands	r3, r1
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6093      	str	r3, [r2, #8]
}
 8003f98:	b01a      	add	sp, #104	; 0x68
 8003f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f9e:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8003fa0:	e7e1      	b.n	8003f66 <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	fffff0fe 	.word	0xfffff0fe
 8003fac:	08003539 	.word	0x08003539
 8003fb0:	58026300 	.word	0x58026300
 8003fb4:	7fffffc0 	.word	0x7fffffc0
 8003fb8:	40022300 	.word	0x40022300
 8003fbc:	40022100 	.word	0x40022100
 8003fc0:	080034d1 	.word	0x080034d1
 8003fc4:	080034c1 	.word	0x080034c1

08003fc8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003fcc:	2a01      	cmp	r2, #1
 8003fce:	d04b      	beq.n	8004068 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003fd0:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
  __HAL_LOCK(hadc);
 8003fd4:	2001      	movs	r0, #1
{
 8003fd6:	b4f0      	push	{r4, r5, r6, r7}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fd8:	681c      	ldr	r4, [r3, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fda:	680e      	ldr	r6, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fdc:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 8003fde:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fe2:	d008      	beq.n	8003ff6 <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fe6:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe8:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 8003fec:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003ff2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ff4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff6:	4d21      	ldr	r5, [pc, #132]	; (800407c <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 8003ff8:	68aa      	ldr	r2, [r5, #8]
 8003ffa:	0752      	lsls	r2, r2, #29
 8003ffc:	d50a      	bpl.n	8004014 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 8003ffe:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004002:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004004:	f042 0220 	orr.w	r2, r2, #32
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8004010:	bcf0      	pop	{r4, r5, r6, r7}
 8004012:	4770      	bx	lr
 8004014:	68a0      	ldr	r0, [r4, #8]
 8004016:	f010 0004 	ands.w	r0, r0, #4
 800401a:	d1f1      	bne.n	8004000 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800401c:	b1c6      	cbz	r6, 8004050 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800401e:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004084 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8004022:	684f      	ldr	r7, [r1, #4]
 8004024:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8004028:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800402c:	433a      	orrs	r2, r7
 800402e:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004032:	68a4      	ldr	r4, [r4, #8]
 8004034:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004036:	4322      	orrs	r2, r4
 8004038:	07d4      	lsls	r4, r2, #31
 800403a:	d413      	bmi.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8004042:	490f      	ldr	r1, [pc, #60]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004044:	4316      	orrs	r6, r2
 8004046:	4021      	ands	r1, r4
 8004048:	430e      	orrs	r6, r1
 800404a:	f8cc 6008 	str.w	r6, [ip, #8]
 800404e:	e7dc      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x42>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004050:	490c      	ldr	r1, [pc, #48]	; (8004084 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004052:	688a      	ldr	r2, [r1, #8]
 8004054:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004058:	608a      	str	r2, [r1, #8]
 800405a:	68a0      	ldr	r0, [r4, #8]
 800405c:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800405e:	4302      	orrs	r2, r0
 8004060:	07d0      	lsls	r0, r2, #31
 8004062:	d503      	bpl.n	800406c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004064:	2000      	movs	r0, #0
 8004066:	e7d0      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 8004068:	2002      	movs	r0, #2
}
 800406a:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800406c:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406e:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004070:	4a03      	ldr	r2, [pc, #12]	; (8004080 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004072:	4022      	ands	r2, r4
 8004074:	608a      	str	r2, [r1, #8]
 8004076:	e7c8      	b.n	800400a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004078:	40022000 	.word	0x40022000
 800407c:	40022100 	.word	0x40022100
 8004080:	fffff0e0 	.word	0xfffff0e0
 8004084:	40022300 	.word	0x40022300

08004088 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004088:	4907      	ldr	r1, [pc, #28]	; (80040a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800408a:	0200      	lsls	r0, r0, #8
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800408e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004090:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004094:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004096:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800409a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800409c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040a0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a2:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80040a4:	60c8      	str	r0, [r1, #12]
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00
 80040ac:	05fa0000 	.word	0x05fa0000

080040b0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <HAL_NVIC_SetPriority+0x60>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b8:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ba:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040be:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	2d04      	cmp	r5, #4
 80040c2:	bf28      	it	cs
 80040c4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c6:	2c06      	cmp	r4, #6
 80040c8:	d918      	bls.n	80040fc <HAL_NVIC_SetPriority+0x4c>
 80040ca:	3b03      	subs	r3, #3
 80040cc:	f04f 34ff 	mov.w	r4, #4294967295
 80040d0:	409c      	lsls	r4, r3
 80040d2:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80040da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	fa02 f205 	lsl.w	r2, r2, r5
 80040e0:	ea21 0102 	bic.w	r1, r1, r2
 80040e4:	fa01 f203 	lsl.w	r2, r1, r3
 80040e8:	ea42 0204 	orr.w	r2, r2, r4
 80040ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80040f0:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80040f2:	db06      	blt.n	8004102 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_NVIC_SetPriority+0x64>)
 80040f6:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80040f8:	bc30      	pop	{r4, r5}
 80040fa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fc:	2400      	movs	r4, #0
 80040fe:	4623      	mov	r3, r4
 8004100:	e7e9      	b.n	80040d6 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004102:	f000 000f 	and.w	r0, r0, #15
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <HAL_NVIC_SetPriority+0x68>)
 8004108:	541a      	strb	r2, [r3, r0]
 800410a:	bc30      	pop	{r4, r5}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	e000e400 	.word	0xe000e400
 8004118:	e000ed14 	.word	0xe000ed14

0800411c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800411c:	2800      	cmp	r0, #0
 800411e:	db07      	blt.n	8004130 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004120:	f000 011f 	and.w	r1, r0, #31
 8004124:	2301      	movs	r3, #1
 8004126:	0940      	lsrs	r0, r0, #5
 8004128:	4a02      	ldr	r2, [pc, #8]	; (8004134 <HAL_NVIC_EnableIRQ+0x18>)
 800412a:	408b      	lsls	r3, r1
 800412c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	e000e100 	.word	0xe000e100

08004138 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	3801      	subs	r0, #1
 800413a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800413e:	d20d      	bcs.n	800415c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004142:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004144:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004146:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004148:	25f0      	movs	r5, #240	; 0xf0
 800414a:	4c06      	ldr	r4, [pc, #24]	; (8004164 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800414c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800414e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8004158:	bc30      	pop	{r4, r5}
 800415a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800415c:	2001      	movs	r0, #1
 800415e:	4770      	bx	lr
 8004160:	e000e010 	.word	0xe000e010
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004168:	b188      	cbz	r0, 800418e <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800416a:	7903      	ldrb	r3, [r0, #4]
{
 800416c:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 800416e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004172:	4604      	mov	r4, r0
 8004174:	b13b      	cbz	r3, 8004186 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004176:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004178:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800417a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800417c:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800417e:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004180:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004182:	7122      	strb	r2, [r4, #4]
}
 8004184:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004186:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004188:	f7fe fed8 	bl	8002f3c <HAL_DAC_MspInit>
 800418c:	e7f3      	b.n	8004176 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800418e:	2001      	movs	r0, #1
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004194:	7942      	ldrb	r2, [r0, #5]
 8004196:	2a01      	cmp	r2, #1
 8004198:	d028      	beq.n	80041ec <HAL_DAC_Start+0x58>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800419a:	6802      	ldr	r2, [r0, #0]
 800419c:	4603      	mov	r3, r0
{
 800419e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdac);
 80041a0:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80041a2:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 80041a4:	f001 0610 	and.w	r6, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 80041a8:	7104      	strb	r4, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 80041aa:	fa05 f006 	lsl.w	r0, r5, r6
 80041ae:	6817      	ldr	r7, [r2, #0]
  __HAL_LOCK(hdac);
 80041b0:	715d      	strb	r5, [r3, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80041b2:	4338      	orrs	r0, r7
 80041b4:	6010      	str	r0, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 80041b6:	b971      	cbnz	r1, 80041d6 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80041b8:	6811      	ldr	r1, [r2, #0]
 80041ba:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 80041be:	42a1      	cmp	r1, r4
 80041c0:	d102      	bne.n	80041c8 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80041c2:	6851      	ldr	r1, [r2, #4]
 80041c4:	4329      	orrs	r1, r5
 80041c6:	6051      	str	r1, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041c8:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80041ca:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80041cc:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80041ce:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80041d0:	715a      	strb	r2, [r3, #5]
}
 80041d2:	bcf0      	pop	{r4, r5, r6, r7}
 80041d4:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80041d6:	6811      	ldr	r1, [r2, #0]
 80041d8:	40b4      	lsls	r4, r6
 80041da:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 80041de:	42a1      	cmp	r1, r4
 80041e0:	d1f2      	bne.n	80041c8 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80041e2:	6851      	ldr	r1, [r2, #4]
 80041e4:	f041 0102 	orr.w	r1, r1, #2
 80041e8:	6051      	str	r1, [r2, #4]
 80041ea:	e7ed      	b.n	80041c8 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80041ec:	2002      	movs	r0, #2
}
 80041ee:	4770      	bx	lr

080041f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041f2:	7944      	ldrb	r4, [r0, #5]
{
 80041f4:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80041f6:	2c01      	cmp	r4, #1
 80041f8:	d05e      	beq.n	80042b8 <HAL_DAC_Start_DMA+0xc8>
 80041fa:	4604      	mov	r4, r0
 80041fc:	460e      	mov	r6, r1
 80041fe:	2001      	movs	r0, #1
 8004200:	4611      	mov	r1, r2
 8004202:	6825      	ldr	r5, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004204:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 8004206:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004208:	7122      	strb	r2, [r4, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800420a:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 800420c:	bb4e      	cbnz	r6, 8004262 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800420e:	68a0      	ldr	r0, [r4, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004214:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80042d4 <HAL_DAC_Start_DMA+0xe4>

    /* Case of use of channel 1 */
    switch (Alignment)
 8004218:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800421a:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80042d8 <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800421e:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004222:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80042dc <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004226:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800422a:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800422e:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004230:	d04d      	beq.n	80042ce <HAL_DAC_Start_DMA+0xde>
 8004232:	2f08      	cmp	r7, #8
 8004234:	d048      	beq.n	80042c8 <HAL_DAC_Start_DMA+0xd8>
 8004236:	2f00      	cmp	r7, #0
 8004238:	d038      	beq.n	80042ac <HAL_DAC_Start_DMA+0xbc>
        break;
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800423a:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800423c:	682f      	ldr	r7, [r5, #0]
 800423e:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8004242:	602f      	str	r7, [r5, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004244:	f000 fcb8 	bl	8004bb8 <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004248:	2300      	movs	r3, #0
 800424a:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800424c:	bb48      	cbnz	r0, 80042a2 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	f006 0610 	and.w	r6, r6, #16
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	fa01 f606 	lsl.w	r6, r1, r6
 800425c:	4316      	orrs	r6, r2
 800425e:	601e      	str	r6, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8004260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004262:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004264:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004268:	f8df c074 	ldr.w	ip, [pc, #116]	; 80042e0 <HAL_DAC_Start_DMA+0xf0>
    switch (Alignment)
 800426c:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800426e:	f8df e074 	ldr.w	lr, [pc, #116]	; 80042e4 <HAL_DAC_Start_DMA+0xf4>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004272:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004276:	f8df c070 	ldr.w	ip, [pc, #112]	; 80042e8 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800427a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800427e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004282:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004284:	d01d      	beq.n	80042c2 <HAL_DAC_Start_DMA+0xd2>
 8004286:	2f08      	cmp	r7, #8
 8004288:	d018      	beq.n	80042bc <HAL_DAC_Start_DMA+0xcc>
 800428a:	b197      	cbz	r7, 80042b2 <HAL_DAC_Start_DMA+0xc2>
  if (Channel == DAC_CHANNEL_1)
 800428c:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800428e:	682f      	ldr	r7, [r5, #0]
 8004290:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8004294:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004296:	f000 fc8f 	bl	8004bb8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800429a:	2300      	movs	r3, #0
 800429c:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800429e:	2800      	cmp	r0, #0
 80042a0:	d0d5      	beq.n	800424e <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6123      	str	r3, [r4, #16]
}
 80042aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80042ac:	f105 0208 	add.w	r2, r5, #8
        break;
 80042b0:	e7c4      	b.n	800423c <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80042b2:	f105 0214 	add.w	r2, r5, #20
        break;
 80042b6:	e7ea      	b.n	800428e <HAL_DAC_Start_DMA+0x9e>
  __HAL_LOCK(hdac);
 80042b8:	2002      	movs	r0, #2
}
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80042bc:	f105 021c 	add.w	r2, r5, #28
        break;
 80042c0:	e7e5      	b.n	800428e <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80042c2:	f105 0218 	add.w	r2, r5, #24
        break;
 80042c6:	e7e2      	b.n	800428e <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80042c8:	f105 0210 	add.w	r2, r5, #16
        break;
 80042cc:	e7b6      	b.n	800423c <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80042ce:	f105 020c 	add.w	r2, r5, #12
        break;
 80042d2:	e7b3      	b.n	800423c <HAL_DAC_Start_DMA+0x4c>
 80042d4:	080042ed 	.word	0x080042ed
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	080044e9 	.word	0x080044e9
 80042e4:	080044fd 	.word	0x080044fd
 80042e8:	0800450d 	.word	0x0800450d

080042ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042ec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ee:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fd ff6b 	bl	80021cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042f6:	2301      	movs	r3, #1
 80042f8:	7123      	strb	r3, [r4, #4]
}
 80042fa:	bd10      	pop	{r4, pc}

080042fc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042fc:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80042fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004300:	f7fd ff76 	bl	80021f0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004304:	bd08      	pop	{r3, pc}
 8004306:	bf00      	nop

08004308 <HAL_DAC_ErrorCallbackCh1>:
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop

0800430c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800430c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800430e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004310:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004312:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800431a:	f7ff fff5 	bl	8004308 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800431e:	2301      	movs	r3, #1
 8004320:	7123      	strb	r3, [r4, #4]
}
 8004322:	bd10      	pop	{r4, pc}

08004324 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop

08004328 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004328:	6803      	ldr	r3, [r0, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	0491      	lsls	r1, r2, #18
{
 800432e:	b510      	push	{r4, lr}
 8004330:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004332:	d502      	bpl.n	800433a <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	0492      	lsls	r2, r2, #18
 8004338:	d418      	bmi.n	800436c <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	0091      	lsls	r1, r2, #2
 800433e:	d502      	bpl.n	8004346 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	d400      	bmi.n	8004348 <HAL_DAC_IRQHandler+0x20>
}
 8004346:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8004348:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800434a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800434e:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8004350:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004352:	6922      	ldr	r2, [r4, #16]
 8004354:	f042 0202 	orr.w	r2, r2, #2
 8004358:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800435a:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8004362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004366:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004368:	f000 b8dc 	b.w	8004524 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800436c:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800436e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8004372:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004374:	6902      	ldr	r2, [r0, #16]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800437c:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004384:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004386:	f7ff ffcd 	bl	8004324 <HAL_DAC_DMAUnderrunCallbackCh1>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	e7d5      	b.n	800433a <HAL_DAC_IRQHandler+0x12>
 800438e:	bf00      	nop

08004390 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8004390:	7943      	ldrb	r3, [r0, #5]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d057      	beq.n	8004446 <HAL_DAC_ConfigChannel+0xb6>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004396:	680b      	ldr	r3, [r1, #0]
{
 8004398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800439c:	2b04      	cmp	r3, #4
 800439e:	4617      	mov	r7, r2
 80043a0:	460e      	mov	r6, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 80043a2:	f04f 0202 	mov.w	r2, #2
  __HAL_LOCK(hdac);
 80043a6:	f04f 0101 	mov.w	r1, #1
 80043aa:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ac:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 80043ae:	7141      	strb	r1, [r0, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80043b0:	d04d      	beq.n	800444e <HAL_DAC_ConfigChannel+0xbe>
 80043b2:	f007 0210 	and.w	r2, r7, #16
 80043b6:	6805      	ldr	r5, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043b8:	6931      	ldr	r1, [r6, #16]
 80043ba:	2901      	cmp	r1, #1
 80043bc:	d039      	beq.n	8004432 <HAL_DAC_ConfigChannel+0xa2>
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043be:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80043c0:	68f0      	ldr	r0, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 80043c2:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043c6:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80043c8:	2801      	cmp	r0, #1
 80043ca:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043cc:	ea2c 0101 	bic.w	r1, ip, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80043d0:	d02d      	beq.n	800442e <HAL_DAC_ConfigChannel+0x9e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80043d2:	2802      	cmp	r0, #2
 80043d4:	d039      	beq.n	800444a <HAL_DAC_ConfigChannel+0xba>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80043d6:	fab7 f087 	clz	r0, r7
 80043da:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80043dc:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043de:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043e2:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043e4:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80043e8:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043ea:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043ee:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043f0:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043f2:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80043f4:	20c0      	movs	r0, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 80043f6:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 80043fa:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043fe:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004400:	fa00 f102 	lsl.w	r1, r0, r2
  return HAL_OK;
 8004404:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 8004406:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	ea23 0308 	bic.w	r3, r3, r8
 800440e:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 8004410:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004412:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004416:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 8004418:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800441a:	682a      	ldr	r2, [r5, #0]
 800441c:	ea22 0201 	bic.w	r2, r2, r1
 8004420:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8004422:	f884 e004 	strb.w	lr, [r4, #4]
  __HAL_UNLOCK(hdac);
 8004426:	f884 c005 	strb.w	ip, [r4, #5]
}
 800442a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 800442e:	2000      	movs	r0, #0
 8004430:	e7d4      	b.n	80043dc <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004432:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 8004434:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004436:	6971      	ldr	r1, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004438:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800443a:	4091      	lsls	r1, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800443c:	ea20 0007 	bic.w	r0, r0, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004440:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 8004442:	63a9      	str	r1, [r5, #56]	; 0x38
 8004444:	e7bb      	b.n	80043be <HAL_DAC_ConfigChannel+0x2e>
  __HAL_LOCK(hdac);
 8004446:	2002      	movs	r0, #2
}
 8004448:	4770      	bx	lr
    connectOnChip = DAC_MCR_MODE1_0;
 800444a:	2001      	movs	r0, #1
 800444c:	e7c6      	b.n	80043dc <HAL_DAC_ConfigChannel+0x4c>
    tickstart = HAL_GetTick();
 800444e:	f7fe ffeb 	bl	8003428 <HAL_GetTick>
 8004452:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8004454:	b9c7      	cbnz	r7, 8004488 <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004456:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80044e0 <HAL_DAC_ConfigChannel+0x150>
 800445a:	e004      	b.n	8004466 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800445c:	f7fe ffe4 	bl	8003428 <HAL_GetTick>
 8004460:	1b40      	subs	r0, r0, r5
 8004462:	2801      	cmp	r0, #1
 8004464:	d833      	bhi.n	80044ce <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	ea13 0f08 	tst.w	r3, r8
 800446e:	d1f5      	bne.n	800445c <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 8004470:	2001      	movs	r0, #1
 8004472:	f7fe ffdf 	bl	8003434 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	69b3      	ldr	r3, [r6, #24]
 800447a:	642b      	str	r3, [r5, #64]	; 0x40
 800447c:	e00e      	b.n	800449c <HAL_DAC_ConfigChannel+0x10c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800447e:	f7fe ffd3 	bl	8003428 <HAL_GetTick>
 8004482:	1b40      	subs	r0, r0, r5
 8004484:	2801      	cmp	r0, #1
 8004486:	d822      	bhi.n	80044ce <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	dbf6      	blt.n	800447e <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 8004490:	2001      	movs	r0, #1
 8004492:	f7fe ffcf 	bl	8003434 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	69b3      	ldr	r3, [r6, #24]
 800449a:	646b      	str	r3, [r5, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800449c:	f007 0210 	and.w	r2, r7, #16
 80044a0:	f240 3cff 	movw	ip, #1023	; 0x3ff
 80044a4:	6cab      	ldr	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80044a6:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80044a8:	69f0      	ldr	r0, [r6, #28]
 80044aa:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80044ae:	fa01 f702 	lsl.w	r7, r1, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80044b2:	4090      	lsls	r0, r2
 80044b4:	ea23 030c 	bic.w	r3, r3, ip
 80044b8:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80044ba:	6a30      	ldr	r0, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80044bc:	64ab      	str	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80044be:	4090      	lsls	r0, r2
 80044c0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	ea21 0107 	bic.w	r1, r1, r7
 80044c8:	4301      	orrs	r1, r0
 80044ca:	64e9      	str	r1, [r5, #76]	; 0x4c
 80044cc:	e774      	b.n	80043b8 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044ce:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044d0:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044d2:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 80044d6:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80044d8:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80044da:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 80044dc:	e7a5      	b.n	800442a <HAL_DAC_ConfigChannel+0x9a>
 80044de:	bf00      	nop
 80044e0:	20008000 	.word	0x20008000

080044e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044e8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7ff fff9 	bl	80044e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044f2:	2301      	movs	r3, #1
 80044f4:	7123      	strb	r3, [r4, #4]
}
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop

080044fc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044fc:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80044fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004500:	f7ff fffa 	bl	80044f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004504:	bd08      	pop	{r3, pc}
 8004506:	bf00      	nop

08004508 <HAL_DACEx_ErrorCallbackCh2>:
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop

0800450c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800450c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004510:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004512:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800451a:	f7ff fff5 	bl	8004508 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800451e:	2301      	movs	r3, #1
 8004520:	7123      	strb	r3, [r4, #4]
}
 8004522:	bd10      	pop	{r4, pc}

08004524 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004528:	6802      	ldr	r2, [r0, #0]
{
 800452a:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800452c:	4b34      	ldr	r3, [pc, #208]	; (8004600 <DMA_CalcBaseAndBitshift+0xd8>)
 800452e:	4835      	ldr	r0, [pc, #212]	; (8004604 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004530:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004532:	4c35      	ldr	r4, [pc, #212]	; (8004608 <DMA_CalcBaseAndBitshift+0xe0>)
 8004534:	4d35      	ldr	r5, [pc, #212]	; (800460c <DMA_CalcBaseAndBitshift+0xe4>)
 8004536:	42a2      	cmp	r2, r4
 8004538:	bf18      	it	ne
 800453a:	429a      	cmpne	r2, r3
 800453c:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	4282      	cmp	r2, r0
 8004548:	bf08      	it	eq
 800454a:	f043 0301 	orreq.w	r3, r3, #1
 800454e:	3048      	adds	r0, #72	; 0x48
 8004550:	42aa      	cmp	r2, r5
 8004552:	bf08      	it	eq
 8004554:	f043 0301 	orreq.w	r3, r3, #1
 8004558:	3548      	adds	r5, #72	; 0x48
 800455a:	42a2      	cmp	r2, r4
 800455c:	bf08      	it	eq
 800455e:	f043 0301 	orreq.w	r3, r3, #1
 8004562:	3448      	adds	r4, #72	; 0x48
 8004564:	4282      	cmp	r2, r0
 8004566:	bf08      	it	eq
 8004568:	f043 0301 	orreq.w	r3, r3, #1
 800456c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004570:	42aa      	cmp	r2, r5
 8004572:	bf08      	it	eq
 8004574:	f043 0301 	orreq.w	r3, r3, #1
 8004578:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800457c:	42a2      	cmp	r2, r4
 800457e:	bf08      	it	eq
 8004580:	f043 0301 	orreq.w	r3, r3, #1
 8004584:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004588:	4282      	cmp	r2, r0
 800458a:	bf08      	it	eq
 800458c:	f043 0301 	orreq.w	r3, r3, #1
 8004590:	3048      	adds	r0, #72	; 0x48
 8004592:	42aa      	cmp	r2, r5
 8004594:	bf08      	it	eq
 8004596:	f043 0301 	orreq.w	r3, r3, #1
 800459a:	3548      	adds	r5, #72	; 0x48
 800459c:	42a2      	cmp	r2, r4
 800459e:	bf08      	it	eq
 80045a0:	f043 0301 	orreq.w	r3, r3, #1
 80045a4:	3448      	adds	r4, #72	; 0x48
 80045a6:	4282      	cmp	r2, r0
 80045a8:	bf08      	it	eq
 80045aa:	f043 0301 	orreq.w	r3, r3, #1
 80045ae:	3048      	adds	r0, #72	; 0x48
 80045b0:	42aa      	cmp	r2, r5
 80045b2:	bf08      	it	eq
 80045b4:	f043 0301 	orreq.w	r3, r3, #1
 80045b8:	42a2      	cmp	r2, r4
 80045ba:	bf08      	it	eq
 80045bc:	f043 0301 	orreq.w	r3, r3, #1
 80045c0:	4282      	cmp	r2, r0
 80045c2:	bf08      	it	eq
 80045c4:	f043 0301 	orreq.w	r3, r3, #1
 80045c8:	b913      	cbnz	r3, 80045d0 <DMA_CalcBaseAndBitshift+0xa8>
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <DMA_CalcBaseAndBitshift+0xe8>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d112      	bne.n	80045f6 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045d0:	b2d3      	uxtb	r3, r2
 80045d2:	4d10      	ldr	r5, [pc, #64]	; (8004614 <DMA_CalcBaseAndBitshift+0xec>)
 80045d4:	4810      	ldr	r0, [pc, #64]	; (8004618 <DMA_CalcBaseAndBitshift+0xf0>)
 80045d6:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045d8:	4c10      	ldr	r4, [pc, #64]	; (800461c <DMA_CalcBaseAndBitshift+0xf4>)
 80045da:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045dc:	fba5 5303 	umull	r5, r3, r5, r3
 80045e0:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045e2:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 80045e6:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045e8:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045ea:	bf88      	it	hi
 80045ec:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045ee:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045f0:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80045f2:	bc30      	pop	{r4, r5}
 80045f4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045f6:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80045fa:	6588      	str	r0, [r1, #88]	; 0x58
 80045fc:	e7f9      	b.n	80045f2 <DMA_CalcBaseAndBitshift+0xca>
 80045fe:	bf00      	nop
 8004600:	40020010 	.word	0x40020010
 8004604:	40020040 	.word	0x40020040
 8004608:	40020028 	.word	0x40020028
 800460c:	40020058 	.word	0x40020058
 8004610:	400204b8 	.word	0x400204b8
 8004614:	aaaaaaab 	.word	0xaaaaaaab
 8004618:	fffffc00 	.word	0xfffffc00
 800461c:	08012510 	.word	0x08012510

08004620 <HAL_DMA_Init>:
{
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004626:	f7fe feff 	bl	8003428 <HAL_GetTick>
  if(hdma == NULL)
 800462a:	2c00      	cmp	r4, #0
 800462c:	f000 8182 	beq.w	8004934 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	4605      	mov	r5, r0
 8004634:	4a2b      	ldr	r2, [pc, #172]	; (80046e4 <HAL_DMA_Init+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d049      	beq.n	80046ce <HAL_DMA_Init+0xae>
 800463a:	3218      	adds	r2, #24
 800463c:	4293      	cmp	r3, r2
 800463e:	d046      	beq.n	80046ce <HAL_DMA_Init+0xae>
 8004640:	3230      	adds	r2, #48	; 0x30
 8004642:	4829      	ldr	r0, [pc, #164]	; (80046e8 <HAL_DMA_Init+0xc8>)
 8004644:	4929      	ldr	r1, [pc, #164]	; (80046ec <HAL_DMA_Init+0xcc>)
 8004646:	4283      	cmp	r3, r0
 8004648:	bf18      	it	ne
 800464a:	4293      	cmpne	r3, r2
 800464c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004650:	bf0c      	ite	eq
 8004652:	2201      	moveq	r2, #1
 8004654:	2200      	movne	r2, #0
 8004656:	428b      	cmp	r3, r1
 8004658:	bf08      	it	eq
 800465a:	f042 0201 	orreq.w	r2, r2, #1
 800465e:	3130      	adds	r1, #48	; 0x30
 8004660:	4283      	cmp	r3, r0
 8004662:	bf08      	it	eq
 8004664:	f042 0201 	orreq.w	r2, r2, #1
 8004668:	3030      	adds	r0, #48	; 0x30
 800466a:	428b      	cmp	r3, r1
 800466c:	bf08      	it	eq
 800466e:	f042 0201 	orreq.w	r2, r2, #1
 8004672:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004676:	4283      	cmp	r3, r0
 8004678:	bf08      	it	eq
 800467a:	f042 0201 	orreq.w	r2, r2, #1
 800467e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004682:	428b      	cmp	r3, r1
 8004684:	bf08      	it	eq
 8004686:	f042 0201 	orreq.w	r2, r2, #1
 800468a:	3130      	adds	r1, #48	; 0x30
 800468c:	4283      	cmp	r3, r0
 800468e:	bf08      	it	eq
 8004690:	f042 0201 	orreq.w	r2, r2, #1
 8004694:	3030      	adds	r0, #48	; 0x30
 8004696:	428b      	cmp	r3, r1
 8004698:	bf08      	it	eq
 800469a:	f042 0201 	orreq.w	r2, r2, #1
 800469e:	3130      	adds	r1, #48	; 0x30
 80046a0:	4283      	cmp	r3, r0
 80046a2:	bf08      	it	eq
 80046a4:	f042 0201 	orreq.w	r2, r2, #1
 80046a8:	3030      	adds	r0, #48	; 0x30
 80046aa:	428b      	cmp	r3, r1
 80046ac:	bf08      	it	eq
 80046ae:	f042 0201 	orreq.w	r2, r2, #1
 80046b2:	3130      	adds	r1, #48	; 0x30
 80046b4:	4283      	cmp	r3, r0
 80046b6:	bf08      	it	eq
 80046b8:	f042 0201 	orreq.w	r2, r2, #1
 80046bc:	428b      	cmp	r3, r1
 80046be:	bf08      	it	eq
 80046c0:	f042 0201 	orreq.w	r2, r2, #1
 80046c4:	b91a      	cbnz	r2, 80046ce <HAL_DMA_Init+0xae>
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <HAL_DMA_Init+0xd0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	f040 81bf 	bne.w	8004a4c <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ce:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 80046d0:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80046d6:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 80046d8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e00e      	b.n	8004702 <HAL_DMA_Init+0xe2>
 80046e4:	40020010 	.word	0x40020010
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020070 	.word	0x40020070
 80046f0:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046f4:	f7fe fe98 	bl	8003428 <HAL_GetTick>
 80046f8:	1b40      	subs	r0, r0, r5
 80046fa:	2805      	cmp	r0, #5
 80046fc:	f200 8112 	bhi.w	8004924 <HAL_DMA_Init+0x304>
 8004700:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	07d6      	lsls	r6, r2, #31
 8004706:	d4f5      	bmi.n	80046f4 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 8004708:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470c:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800470e:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004710:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004712:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004716:	4302      	orrs	r2, r0
 8004718:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800471a:	4eb5      	ldr	r6, [pc, #724]	; (80049f0 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 800471c:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004722:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004726:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8004728:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800472a:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 800472c:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004730:	f000 8103 	beq.w	800493a <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004734:	4eaf      	ldr	r6, [pc, #700]	; (80049f4 <HAL_DMA_Init+0x3d4>)
 8004736:	48b0      	ldr	r0, [pc, #704]	; (80049f8 <HAL_DMA_Init+0x3d8>)
 8004738:	6836      	ldr	r6, [r6, #0]
 800473a:	4030      	ands	r0, r6
 800473c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004740:	f080 8108 	bcs.w	8004954 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004744:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004746:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004748:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800474c:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800474e:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004750:	4620      	mov	r0, r4
 8004752:	f7ff fee9 	bl	8004528 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004756:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004758:	233f      	movs	r3, #63	; 0x3f
 800475a:	f002 021f 	and.w	r2, r2, #31
 800475e:	4093      	lsls	r3, r2
 8004760:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	4ba5      	ldr	r3, [pc, #660]	; (80049fc <HAL_DMA_Init+0x3dc>)
 8004766:	48a6      	ldr	r0, [pc, #664]	; (8004a00 <HAL_DMA_Init+0x3e0>)
 8004768:	49a6      	ldr	r1, [pc, #664]	; (8004a04 <HAL_DMA_Init+0x3e4>)
 800476a:	4282      	cmp	r2, r0
 800476c:	bf18      	it	ne
 800476e:	429a      	cmpne	r2, r3
 8004770:	4ea5      	ldr	r6, [pc, #660]	; (8004a08 <HAL_DMA_Init+0x3e8>)
 8004772:	4da6      	ldr	r5, [pc, #664]	; (8004a0c <HAL_DMA_Init+0x3ec>)
 8004774:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8004a38 <HAL_DMA_Init+0x418>
 8004782:	428a      	cmp	r2, r1
 8004784:	bf08      	it	eq
 8004786:	f043 0301 	orreq.w	r3, r3, #1
 800478a:	3160      	adds	r1, #96	; 0x60
 800478c:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8004a3c <HAL_DMA_Init+0x41c>
 8004790:	42b2      	cmp	r2, r6
 8004792:	bf08      	it	eq
 8004794:	f043 0301 	orreq.w	r3, r3, #1
 8004798:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8004a40 <HAL_DMA_Init+0x420>
 800479c:	4f9c      	ldr	r7, [pc, #624]	; (8004a10 <HAL_DMA_Init+0x3f0>)
 800479e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047a2:	42aa      	cmp	r2, r5
 80047a4:	bf08      	it	eq
 80047a6:	f043 0301 	orreq.w	r3, r3, #1
 80047aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047ae:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004a34 <HAL_DMA_Init+0x414>
 80047b2:	4282      	cmp	r2, r0
 80047b4:	bf08      	it	eq
 80047b6:	f043 0301 	orreq.w	r3, r3, #1
 80047ba:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80047be:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004a44 <HAL_DMA_Init+0x424>
 80047c2:	428a      	cmp	r2, r1
 80047c4:	bf08      	it	eq
 80047c6:	f043 0301 	orreq.w	r3, r3, #1
 80047ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047ce:	4562      	cmp	r2, ip
 80047d0:	bf08      	it	eq
 80047d2:	f043 0301 	orreq.w	r3, r3, #1
 80047d6:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004a2c <HAL_DMA_Init+0x40c>
 80047da:	4542      	cmp	r2, r8
 80047dc:	bf08      	it	eq
 80047de:	f043 0301 	orreq.w	r3, r3, #1
 80047e2:	eba2 0c0c 	sub.w	ip, r2, ip
 80047e6:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8004a30 <HAL_DMA_Init+0x410>
 80047ea:	4572      	cmp	r2, lr
 80047ec:	bf08      	it	eq
 80047ee:	f043 0301 	orreq.w	r3, r3, #1
 80047f2:	fabc fc8c 	clz	ip, ip
 80047f6:	eba2 0808 	sub.w	r8, r2, r8
 80047fa:	f8df e24c 	ldr.w	lr, [pc, #588]	; 8004a48 <HAL_DMA_Init+0x428>
 80047fe:	42ba      	cmp	r2, r7
 8004800:	bf08      	it	eq
 8004802:	f043 0301 	orreq.w	r3, r3, #1
 8004806:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800480a:	eba2 070a 	sub.w	r7, r2, sl
 800480e:	fab8 f888 	clz	r8, r8
 8004812:	42b2      	cmp	r2, r6
 8004814:	bf08      	it	eq
 8004816:	f043 0301 	orreq.w	r3, r3, #1
 800481a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800481e:	eba2 060e 	sub.w	r6, r2, lr
 8004822:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004826:	42aa      	cmp	r2, r5
 8004828:	bf08      	it	eq
 800482a:	f043 0301 	orreq.w	r3, r3, #1
 800482e:	fab7 f787 	clz	r7, r7
 8004832:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004836:	eba2 050a 	sub.w	r5, r2, sl
 800483a:	4282      	cmp	r2, r0
 800483c:	bf08      	it	eq
 800483e:	f043 0301 	orreq.w	r3, r3, #1
 8004842:	097f      	lsrs	r7, r7, #5
 8004844:	fab6 f686 	clz	r6, r6
 8004848:	eba2 000e 	sub.w	r0, r2, lr
 800484c:	428a      	cmp	r2, r1
 800484e:	bf08      	it	eq
 8004850:	f043 0301 	orreq.w	r3, r3, #1
 8004854:	fab5 f585 	clz	r5, r5
 8004858:	0976      	lsrs	r6, r6, #5
 800485a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800485e:	454a      	cmp	r2, r9
 8004860:	bf08      	it	eq
 8004862:	f043 0301 	orreq.w	r3, r3, #1
 8004866:	096d      	lsrs	r5, r5, #5
 8004868:	fab0 f080 	clz	r0, r0
 800486c:	eba2 010a 	sub.w	r1, r2, sl
 8004870:	ea4c 0303 	orr.w	r3, ip, r3
 8004874:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004878:	0940      	lsrs	r0, r0, #5
 800487a:	fab1 f181 	clz	r1, r1
 800487e:	ea48 0303 	orr.w	r3, r8, r3
 8004882:	eba2 0e0e 	sub.w	lr, r2, lr
 8004886:	0949      	lsrs	r1, r1, #5
 8004888:	433b      	orrs	r3, r7
 800488a:	fabe fe8e 	clz	lr, lr
 800488e:	4333      	orrs	r3, r6
 8004890:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004894:	432b      	orrs	r3, r5
 8004896:	4303      	orrs	r3, r0
 8004898:	430b      	orrs	r3, r1
 800489a:	d102      	bne.n	80048a2 <HAL_DMA_Init+0x282>
 800489c:	f1be 0f00 	cmp.w	lr, #0
 80048a0:	d039      	beq.n	8004916 <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048a2:	ea4c 0c08 	orr.w	ip, ip, r8
 80048a6:	b2d3      	uxtb	r3, r2
 80048a8:	ea47 070c 	orr.w	r7, r7, ip
 80048ac:	433e      	orrs	r6, r7
 80048ae:	4335      	orrs	r5, r6
 80048b0:	4328      	orrs	r0, r5
 80048b2:	4301      	orrs	r1, r0
 80048b4:	ea5e 0101 	orrs.w	r1, lr, r1
 80048b8:	f000 8127 	beq.w	8004b0a <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048bc:	4d55      	ldr	r5, [pc, #340]	; (8004a14 <HAL_DMA_Init+0x3f4>)
 80048be:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048c0:	4a55      	ldr	r2, [pc, #340]	; (8004a18 <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048c2:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048c4:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048c8:	4d54      	ldr	r5, [pc, #336]	; (8004a1c <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048ca:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048cc:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048ce:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048d0:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048d4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048d6:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048da:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048dc:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048de:	68a0      	ldr	r0, [r4, #8]
 80048e0:	2880      	cmp	r0, #128	; 0x80
 80048e2:	d069      	beq.n	80049b8 <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048e4:	6860      	ldr	r0, [r4, #4]
 80048e6:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048e8:	3801      	subs	r0, #1
 80048ea:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048ec:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048ee:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048f0:	d866      	bhi.n	80049c0 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048f2:	1e70      	subs	r0, r6, #1
 80048f4:	2807      	cmp	r0, #7
 80048f6:	d868      	bhi.n	80049ca <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048f8:	2900      	cmp	r1, #0
 80048fa:	f000 8133 	beq.w	8004b64 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048fe:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004900:	4948      	ldr	r1, [pc, #288]	; (8004a24 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004902:	4433      	add	r3, r6
 8004904:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004906:	2201      	movs	r2, #1
 8004908:	4082      	lsls	r2, r0
 800490a:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800490e:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004910:	2000      	movs	r0, #0
 8004912:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004914:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004916:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004918:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800491c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004924:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004926:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800492a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800492c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004934:	2001      	movs	r0, #1
}
 8004936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800493a:	482e      	ldr	r0, [pc, #184]	; (80049f4 <HAL_DMA_Init+0x3d4>)
 800493c:	4e2e      	ldr	r6, [pc, #184]	; (80049f8 <HAL_DMA_Init+0x3d8>)
 800493e:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004940:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004942:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004944:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004946:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800494a:	ea40 0707 	orr.w	r7, r0, r7
 800494e:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004952:	d346      	bcc.n	80049e2 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004954:	6866      	ldr	r6, [r4, #4]
 8004956:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 800495a:	2f1f      	cmp	r7, #31
 800495c:	d925      	bls.n	80049aa <HAL_DMA_Init+0x38a>
 800495e:	3e4f      	subs	r6, #79	; 0x4f
 8004960:	2e03      	cmp	r6, #3
 8004962:	d926      	bls.n	80049b2 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004964:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004966:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004968:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800496a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800496e:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004972:	f47f aeec 	bne.w	800474e <HAL_DMA_Init+0x12e>
 8004976:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8004978:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800497a:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800497c:	2800      	cmp	r0, #0
 800497e:	f43f aee6 	beq.w	800474e <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004982:	b331      	cbz	r1, 80049d2 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004984:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004988:	f000 80dd 	beq.w	8004b46 <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 800498c:	2d02      	cmp	r5, #2
 800498e:	d905      	bls.n	800499c <HAL_DMA_Init+0x37c>
 8004990:	2d03      	cmp	r5, #3
 8004992:	f47f aedc 	bne.w	800474e <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004996:	01c1      	lsls	r1, r0, #7
 8004998:	f57f aed9 	bpl.w	800474e <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 800499c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800499e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80049a0:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049a2:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80049a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 80049a8:	e7c2      	b.n	8004930 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049aa:	481f      	ldr	r0, [pc, #124]	; (8004a28 <HAL_DMA_Init+0x408>)
 80049ac:	40f8      	lsrs	r0, r7
 80049ae:	07c0      	lsls	r0, r0, #31
 80049b0:	d5d5      	bpl.n	800495e <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 80049b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80049b6:	e7d5      	b.n	8004964 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049b8:	2100      	movs	r1, #0
 80049ba:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049bc:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049be:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 80049c0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80049c2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049c6:	6763      	str	r3, [r4, #116]	; 0x74
 80049c8:	e7a5      	b.n	8004916 <HAL_DMA_Init+0x2f6>
 80049ca:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 80049ce:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80049d0:	e79e      	b.n	8004910 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 80049d2:	2d01      	cmp	r5, #1
 80049d4:	f000 80b2 	beq.w	8004b3c <HAL_DMA_Init+0x51c>
 80049d8:	d3dd      	bcc.n	8004996 <HAL_DMA_Init+0x376>
 80049da:	2d02      	cmp	r5, #2
 80049dc:	f47f aeb7 	bne.w	800474e <HAL_DMA_Init+0x12e>
 80049e0:	e7d9      	b.n	8004996 <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049e2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049e4:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049e6:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 80049ea:	f042 0204 	orr.w	r2, r2, #4
 80049ee:	e7c3      	b.n	8004978 <HAL_DMA_Init+0x358>
 80049f0:	fe10803f 	.word	0xfe10803f
 80049f4:	5c001000 	.word	0x5c001000
 80049f8:	ffff0000 	.word	0xffff0000
 80049fc:	40020010 	.word	0x40020010
 8004a00:	40020028 	.word	0x40020028
 8004a04:	40020040 	.word	0x40020040
 8004a08:	40020058 	.word	0x40020058
 8004a0c:	40020070 	.word	0x40020070
 8004a10:	40020440 	.word	0x40020440
 8004a14:	cccccccd 	.word	0xcccccccd
 8004a18:	16009600 	.word	0x16009600
 8004a1c:	58025880 	.word	0x58025880
 8004a20:	1600963f 	.word	0x1600963f
 8004a24:	58025940 	.word	0x58025940
 8004a28:	c3c0003f 	.word	0xc3c0003f
 8004a2c:	58025408 	.word	0x58025408
 8004a30:	5802541c 	.word	0x5802541c
 8004a34:	58025430 	.word	0x58025430
 8004a38:	400200b8 	.word	0x400200b8
 8004a3c:	40020410 	.word	0x40020410
 8004a40:	40020428 	.word	0x40020428
 8004a44:	400204b8 	.word	0x400204b8
 8004a48:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a4c:	4a4c      	ldr	r2, [pc, #304]	; (8004b80 <HAL_DMA_Init+0x560>)
 8004a4e:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_DMA_Init+0x564>)
 8004a50:	484d      	ldr	r0, [pc, #308]	; (8004b88 <HAL_DMA_Init+0x568>)
 8004a52:	428b      	cmp	r3, r1
 8004a54:	bf18      	it	ne
 8004a56:	4293      	cmpne	r3, r2
 8004a58:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8004a5c:	4d4b      	ldr	r5, [pc, #300]	; (8004b8c <HAL_DMA_Init+0x56c>)
 8004a5e:	bf0c      	ite	eq
 8004a60:	2201      	moveq	r2, #1
 8004a62:	2200      	movne	r2, #0
 8004a64:	4283      	cmp	r3, r0
 8004a66:	bf08      	it	eq
 8004a68:	f042 0201 	orreq.w	r2, r2, #1
 8004a6c:	303c      	adds	r0, #60	; 0x3c
 8004a6e:	428b      	cmp	r3, r1
 8004a70:	bf08      	it	eq
 8004a72:	f042 0201 	orreq.w	r2, r2, #1
 8004a76:	313c      	adds	r1, #60	; 0x3c
 8004a78:	42ab      	cmp	r3, r5
 8004a7a:	bf08      	it	eq
 8004a7c:	f042 0201 	orreq.w	r2, r2, #1
 8004a80:	4283      	cmp	r3, r0
 8004a82:	bf08      	it	eq
 8004a84:	f042 0201 	orreq.w	r2, r2, #1
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf08      	it	eq
 8004a8c:	f042 0201 	orreq.w	r2, r2, #1
 8004a90:	b912      	cbnz	r2, 8004a98 <HAL_DMA_Init+0x478>
 8004a92:	4a3f      	ldr	r2, [pc, #252]	; (8004b90 <HAL_DMA_Init+0x570>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d16c      	bne.n	8004b72 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a98:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a9a:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a9c:	493d      	ldr	r1, [pc, #244]	; (8004b94 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 8004a9e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aa4:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004aa6:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004aa8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004aac:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ab0:	d05d      	beq.n	8004b6e <HAL_DMA_Init+0x54e>
 8004ab2:	2a80      	cmp	r2, #128	; 0x80
 8004ab4:	bf14      	ite	ne
 8004ab6:	462f      	movne	r7, r5
 8004ab8:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004abc:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004abe:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ac0:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ac2:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ac4:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ac6:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8004bb4 <HAL_DMA_Init+0x594>
 8004aca:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ace:	69a6      	ldr	r6, [r4, #24]
 8004ad0:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ad4:	69e5      	ldr	r5, [r4, #28]
 8004ad6:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ada:	4e2f      	ldr	r6, [pc, #188]	; (8004b98 <HAL_DMA_Init+0x578>)
 8004adc:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8004ae0:	441e      	add	r6, r3
 8004ae2:	6a25      	ldr	r5, [r4, #32]
 8004ae4:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8004ae8:	fbac 5606 	umull	r5, r6, ip, r6
 8004aec:	430a      	orrs	r2, r1
 8004aee:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004af0:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004af2:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004af4:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004af6:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004af8:	f7ff fd16 	bl	8004528 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004afc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004afe:	2301      	movs	r3, #1
 8004b00:	f002 021f 	and.w	r2, r2, #31
 8004b04:	4093      	lsls	r3, r2
 8004b06:	6043      	str	r3, [r0, #4]
 8004b08:	e62b      	b.n	8004762 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b0a:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b0e:	4b23      	ldr	r3, [pc, #140]	; (8004b9c <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b10:	4d23      	ldr	r5, [pc, #140]	; (8004ba0 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b12:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b14:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b18:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b1a:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b1e:	d800      	bhi.n	8004b22 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 8004b20:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b22:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b24:	f000 051f 	and.w	r5, r0, #31
 8004b28:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b2a:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b2c:	481e      	ldr	r0, [pc, #120]	; (8004ba8 <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b2e:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b30:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b32:	4605      	mov	r5, r0
 8004b34:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b36:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 8004b3a:	e6d0      	b.n	80048de <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b3c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004b40:	f47f ae05 	bne.w	800474e <HAL_DMA_Init+0x12e>
 8004b44:	e72a      	b.n	800499c <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 8004b46:	2d03      	cmp	r5, #3
 8004b48:	f63f ae01 	bhi.w	800474e <HAL_DMA_Init+0x12e>
 8004b4c:	a101      	add	r1, pc, #4	; (adr r1, 8004b54 <HAL_DMA_Init+0x534>)
 8004b4e:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	0800499d 	.word	0x0800499d
 8004b58:	08004997 	.word	0x08004997
 8004b5c:	0800499d 	.word	0x0800499d
 8004b60:	08004b3d 	.word	0x08004b3d
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b66:	4912      	ldr	r1, [pc, #72]	; (8004bb0 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b68:	4433      	add	r3, r6
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	e6cb      	b.n	8004906 <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b6e:	2710      	movs	r7, #16
 8004b70:	e7a4      	b.n	8004abc <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b72:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b74:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004b76:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b78:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8004b7e:	e6d7      	b.n	8004930 <HAL_DMA_Init+0x310>
 8004b80:	58025408 	.word	0x58025408
 8004b84:	5802541c 	.word	0x5802541c
 8004b88:	58025430 	.word	0x58025430
 8004b8c:	58025458 	.word	0x58025458
 8004b90:	58025494 	.word	0x58025494
 8004b94:	fffe000f 	.word	0xfffe000f
 8004b98:	a7fdabf8 	.word	0xa7fdabf8
 8004b9c:	bffdfbf0 	.word	0xbffdfbf0
 8004ba0:	aaaaaaab 	.word	0xaaaaaaab
 8004ba4:	10008200 	.word	0x10008200
 8004ba8:	40020880 	.word	0x40020880
 8004bac:	1000823f 	.word	0x1000823f
 8004bb0:	40020940 	.word	0x40020940
 8004bb4:	cccccccd 	.word	0xcccccccd

08004bb8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f000 8104 	beq.w	8004dc6 <HAL_DMA_Start_IT+0x20e>
{
 8004bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc2:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8004bc4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004bc8:	2801      	cmp	r0, #1
 8004bca:	f000 8138 	beq.w	8004e3e <HAL_DMA_Start_IT+0x286>
 8004bce:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bd0:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8004bd4:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8004bd6:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bda:	d007      	beq.n	8004bec <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8004bdc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8004be2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004be6:	656b      	str	r3, [r5, #84]	; 0x54
}
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8004bec:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bee:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 8004bf2:	489b      	ldr	r0, [pc, #620]	; (8004e60 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf4:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 8004bf8:	4f9a      	ldr	r7, [pc, #616]	; (8004e64 <HAL_DMA_Start_IT+0x2ac>)
 8004bfa:	4e9b      	ldr	r6, [pc, #620]	; (8004e68 <HAL_DMA_Start_IT+0x2b0>)
 8004bfc:	42bc      	cmp	r4, r7
 8004bfe:	bf18      	it	ne
 8004c00:	4284      	cmpne	r4, r0
 8004c02:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c06:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2001      	moveq	r0, #1
 8004c0e:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004c10:	f8df e264 	ldr.w	lr, [pc, #612]	; 8004e78 <HAL_DMA_Start_IT+0x2c0>
 8004c14:	42b4      	cmp	r4, r6
 8004c16:	bf08      	it	eq
 8004c18:	f040 0001 	orreq.w	r0, r0, #1
 8004c1c:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c1e:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 8004c22:	42bc      	cmp	r4, r7
 8004c24:	bf08      	it	eq
 8004c26:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 8004c2a:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8004c2e:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8004e7c <HAL_DMA_Start_IT+0x2c4>
 8004c32:	42b4      	cmp	r4, r6
 8004c34:	bf08      	it	eq
 8004c36:	f040 0001 	orreq.w	r0, r0, #1
 8004c3a:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8004c3e:	4574      	cmp	r4, lr
 8004c40:	bf08      	it	eq
 8004c42:	f040 0001 	orreq.w	r0, r0, #1
 8004c46:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 8004c4a:	42bc      	cmp	r4, r7
 8004c4c:	bf08      	it	eq
 8004c4e:	f040 0001 	orreq.w	r0, r0, #1
 8004c52:	3760      	adds	r7, #96	; 0x60
 8004c54:	42b4      	cmp	r4, r6
 8004c56:	bf08      	it	eq
 8004c58:	f040 0001 	orreq.w	r0, r0, #1
 8004c5c:	3660      	adds	r6, #96	; 0x60
 8004c5e:	4564      	cmp	r4, ip
 8004c60:	bf08      	it	eq
 8004c62:	f040 0001 	orreq.w	r0, r0, #1
 8004c66:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 8004c6a:	4574      	cmp	r4, lr
 8004c6c:	bf08      	it	eq
 8004c6e:	f040 0001 	orreq.w	r0, r0, #1
 8004c72:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 8004c76:	42bc      	cmp	r4, r7
 8004c78:	bf08      	it	eq
 8004c7a:	f040 0001 	orreq.w	r0, r0, #1
 8004c7e:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 8004c82:	42b4      	cmp	r4, r6
 8004c84:	bf08      	it	eq
 8004c86:	f040 0001 	orreq.w	r0, r0, #1
 8004c8a:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 8004c8e:	4564      	cmp	r4, ip
 8004c90:	bf08      	it	eq
 8004c92:	f040 0001 	orreq.w	r0, r0, #1
 8004c96:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 8004c9a:	4574      	cmp	r4, lr
 8004c9c:	bf14      	ite	ne
 8004c9e:	4682      	movne	sl, r0
 8004ca0:	f040 0a01 	orreq.w	sl, r0, #1
 8004ca4:	42b4      	cmp	r4, r6
 8004ca6:	bf18      	it	ne
 8004ca8:	42bc      	cmpne	r4, r7
 8004caa:	6827      	ldr	r7, [r4, #0]
 8004cac:	bf0c      	ite	eq
 8004cae:	2601      	moveq	r6, #1
 8004cb0:	2600      	movne	r6, #0
 8004cb2:	f027 0701 	bic.w	r7, r7, #1
 8004cb6:	6027      	str	r7, [r4, #0]
 8004cb8:	d003      	beq.n	8004cc2 <HAL_DMA_Start_IT+0x10a>
 8004cba:	f1ba 0f00 	cmp.w	sl, #0
 8004cbe:	f000 8084 	beq.w	8004dca <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	f000 8081 	beq.w	8004dca <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc8:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8004cca:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8004cce:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004cd0:	f1be 0f00 	cmp.w	lr, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd6:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 8004cda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cdc:	b91e      	cbnz	r6, 8004ce6 <HAL_DMA_Start_IT+0x12e>
 8004cde:	f1ba 0f00 	cmp.w	sl, #0
 8004ce2:	f000 80cd 	beq.w	8004e80 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ce6:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8004ce8:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cec:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cf0:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cf8:	fa09 f707 	lsl.w	r7, r9, r7
 8004cfc:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d00:	6827      	ldr	r7, [r4, #0]
 8004d02:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 8004d06:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d08:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d0a:	f000 80a5 	beq.w	8004e58 <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d0e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d10:	60e2      	str	r2, [r4, #12]
 8004d12:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d14:	2e00      	cmp	r6, #0
 8004d16:	f040 8095 	bne.w	8004e44 <HAL_DMA_Start_IT+0x28c>
 8004d1a:	f1ba 0f00 	cmp.w	sl, #0
 8004d1e:	f000 80ee 	beq.w	8004efe <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	f023 031e 	bic.w	r3, r3, #30
 8004d28:	f043 0316 	orr.w	r3, r3, #22
 8004d2c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	b12f      	cbz	r7, 8004d3c <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	f043 0308 	orr.w	r3, r3, #8
 8004d36:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d12c      	bne.n	8004d96 <HAL_DMA_Start_IT+0x1de>
 8004d3c:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <HAL_DMA_Start_IT+0x2b4>)
 8004d3e:	4a4c      	ldr	r2, [pc, #304]	; (8004e70 <HAL_DMA_Start_IT+0x2b8>)
 8004d40:	494c      	ldr	r1, [pc, #304]	; (8004e74 <HAL_DMA_Start_IT+0x2bc>)
 8004d42:	4294      	cmp	r4, r2
 8004d44:	bf18      	it	ne
 8004d46:	429c      	cmpne	r4, r3
 8004d48:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	428c      	cmp	r4, r1
 8004d54:	bf08      	it	eq
 8004d56:	f043 0301 	orreq.w	r3, r3, #1
 8004d5a:	3128      	adds	r1, #40	; 0x28
 8004d5c:	4294      	cmp	r4, r2
 8004d5e:	bf08      	it	eq
 8004d60:	f043 0301 	orreq.w	r3, r3, #1
 8004d64:	3228      	adds	r2, #40	; 0x28
 8004d66:	428c      	cmp	r4, r1
 8004d68:	bf08      	it	eq
 8004d6a:	f043 0301 	orreq.w	r3, r3, #1
 8004d6e:	3128      	adds	r1, #40	; 0x28
 8004d70:	4294      	cmp	r4, r2
 8004d72:	bf08      	it	eq
 8004d74:	f043 0301 	orreq.w	r3, r3, #1
 8004d78:	3228      	adds	r2, #40	; 0x28
 8004d7a:	428c      	cmp	r4, r1
 8004d7c:	bf08      	it	eq
 8004d7e:	f043 0301 	orreq.w	r3, r3, #1
 8004d82:	4294      	cmp	r4, r2
 8004d84:	bf08      	it	eq
 8004d86:	f043 0301 	orreq.w	r3, r3, #1
 8004d8a:	b913      	cbnz	r3, 8004d92 <HAL_DMA_Start_IT+0x1da>
 8004d8c:	f1ba 0f00 	cmp.w	sl, #0
 8004d90:	d012      	beq.n	8004db8 <HAL_DMA_Start_IT+0x200>
 8004d92:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d96:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	03d2      	lsls	r2, r2, #15
 8004d9c:	d503      	bpl.n	8004da6 <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004da6:	f1be 0f00 	cmp.w	lr, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dac:	f8de 3000 	ldr.w	r3, [lr]
 8004db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db4:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 8004db8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6023      	str	r3, [r4, #0]
}
 8004dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004dc6:	2001      	movs	r0, #1
}
 8004dc8:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dca:	4f28      	ldr	r7, [pc, #160]	; (8004e6c <HAL_DMA_Start_IT+0x2b4>)
 8004dcc:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8004e70 <HAL_DMA_Start_IT+0x2b8>
 8004dd0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004e74 <HAL_DMA_Start_IT+0x2bc>
 8004dd4:	4574      	cmp	r4, lr
 8004dd6:	bf18      	it	ne
 8004dd8:	42bc      	cmpne	r4, r7
 8004dda:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 8004dde:	bf0c      	ite	eq
 8004de0:	2701      	moveq	r7, #1
 8004de2:	2700      	movne	r7, #0
 8004de4:	4544      	cmp	r4, r8
 8004de6:	bf08      	it	eq
 8004de8:	f047 0701 	orreq.w	r7, r7, #1
 8004dec:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004df0:	4574      	cmp	r4, lr
 8004df2:	bf08      	it	eq
 8004df4:	f047 0701 	orreq.w	r7, r7, #1
 8004df8:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004dfc:	4544      	cmp	r4, r8
 8004dfe:	bf08      	it	eq
 8004e00:	f047 0701 	orreq.w	r7, r7, #1
 8004e04:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004e08:	4574      	cmp	r4, lr
 8004e0a:	bf08      	it	eq
 8004e0c:	f047 0701 	orreq.w	r7, r7, #1
 8004e10:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004e14:	4544      	cmp	r4, r8
 8004e16:	bf08      	it	eq
 8004e18:	f047 0701 	orreq.w	r7, r7, #1
 8004e1c:	4574      	cmp	r4, lr
 8004e1e:	bf08      	it	eq
 8004e20:	f047 0701 	orreq.w	r7, r7, #1
 8004e24:	b917      	cbnz	r7, 8004e2c <HAL_DMA_Start_IT+0x274>
 8004e26:	f1ba 0f00 	cmp.w	sl, #0
 8004e2a:	d029      	beq.n	8004e80 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e2c:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8004e2e:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8004e32:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004e34:	f1be 0f00 	cmp.w	lr, #0
 8004e38:	f47f af4d 	bne.w	8004cd6 <HAL_DMA_Start_IT+0x11e>
 8004e3c:	e74f      	b.n	8004cde <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 8004e3e:	2002      	movs	r0, #2
}
 8004e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	f023 031e 	bic.w	r3, r3, #30
 8004e4a:	f043 0316 	orr.w	r3, r3, #22
 8004e4e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004e50:	2f00      	cmp	r7, #0
 8004e52:	f47f af6d 	bne.w	8004d30 <HAL_DMA_Start_IT+0x178>
 8004e56:	e79e      	b.n	8004d96 <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e58:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e5a:	60e1      	str	r1, [r4, #12]
 8004e5c:	e759      	b.n	8004d12 <HAL_DMA_Start_IT+0x15a>
 8004e5e:	bf00      	nop
 8004e60:	40020058 	.word	0x40020058
 8004e64:	40020040 	.word	0x40020040
 8004e68:	40020070 	.word	0x40020070
 8004e6c:	5802541c 	.word	0x5802541c
 8004e70:	58025408 	.word	0x58025408
 8004e74:	58025430 	.word	0x58025430
 8004e78:	400200b8 	.word	0x400200b8
 8004e7c:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e80:	4f28      	ldr	r7, [pc, #160]	; (8004f24 <HAL_DMA_Start_IT+0x36c>)
 8004e82:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004f2c <HAL_DMA_Start_IT+0x374>
 8004e86:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8004f30 <HAL_DMA_Start_IT+0x378>
 8004e8a:	4544      	cmp	r4, r8
 8004e8c:	bf18      	it	ne
 8004e8e:	42bc      	cmpne	r4, r7
 8004e90:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004e94:	bf0c      	ite	eq
 8004e96:	2701      	moveq	r7, #1
 8004e98:	2700      	movne	r7, #0
 8004e9a:	4574      	cmp	r4, lr
 8004e9c:	bf08      	it	eq
 8004e9e:	f047 0701 	orreq.w	r7, r7, #1
 8004ea2:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004ea6:	4544      	cmp	r4, r8
 8004ea8:	bf08      	it	eq
 8004eaa:	f047 0701 	orreq.w	r7, r7, #1
 8004eae:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8004eb2:	4574      	cmp	r4, lr
 8004eb4:	bf08      	it	eq
 8004eb6:	f047 0701 	orreq.w	r7, r7, #1
 8004eba:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004ebe:	4544      	cmp	r4, r8
 8004ec0:	bf08      	it	eq
 8004ec2:	f047 0701 	orreq.w	r7, r7, #1
 8004ec6:	4574      	cmp	r4, lr
 8004ec8:	bf08      	it	eq
 8004eca:	f047 0701 	orreq.w	r7, r7, #1
 8004ece:	b927      	cbnz	r7, 8004eda <HAL_DMA_Start_IT+0x322>
 8004ed0:	4f15      	ldr	r7, [pc, #84]	; (8004f28 <HAL_DMA_Start_IT+0x370>)
 8004ed2:	42bc      	cmp	r4, r7
 8004ed4:	bf18      	it	ne
 8004ed6:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 8004ed8:	d111      	bne.n	8004efe <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eda:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8004edc:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ee0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ee4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ee8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eec:	fa0e f707 	lsl.w	r7, lr, r7
 8004ef0:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ef4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef6:	d010      	beq.n	8004f1a <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ef8:	60a1      	str	r1, [r4, #8]
 8004efa:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004efc:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f023 030e 	bic.w	r3, r3, #14
 8004f04:	f043 030a 	orr.w	r3, r3, #10
 8004f08:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	2f00      	cmp	r7, #0
 8004f0c:	f43f af16 	beq.w	8004d3c <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	f043 0304 	orr.w	r3, r3, #4
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	e710      	b.n	8004d3c <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f1a:	60a2      	str	r2, [r4, #8]
 8004f1c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f1e:	60e1      	str	r1, [r4, #12]
 8004f20:	e7ed      	b.n	8004efe <HAL_DMA_Start_IT+0x346>
 8004f22:	bf00      	nop
 8004f24:	58025408 	.word	0x58025408
 8004f28:	58025494 	.word	0x58025494
 8004f2c:	5802541c 	.word	0x5802541c
 8004f30:	58025430 	.word	0x58025430

08004f34 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d060      	beq.n	8004ffa <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f38:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004f3c:	2a02      	cmp	r2, #2
{
 8004f3e:	b538      	push	{r3, r4, r5, lr}
 8004f40:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f42:	d003      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f44:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8004f46:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f4c:	6801      	ldr	r1, [r0, #0]
 8004f4e:	4a57      	ldr	r2, [pc, #348]	; (80050ac <HAL_DMA_Abort_IT+0x178>)
 8004f50:	4291      	cmp	r1, r2
 8004f52:	d049      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0xb4>
 8004f54:	3218      	adds	r2, #24
 8004f56:	4291      	cmp	r1, r2
 8004f58:	d046      	beq.n	8004fe8 <HAL_DMA_Abort_IT+0xb4>
 8004f5a:	3230      	adds	r2, #48	; 0x30
 8004f5c:	4854      	ldr	r0, [pc, #336]	; (80050b0 <HAL_DMA_Abort_IT+0x17c>)
 8004f5e:	4c55      	ldr	r4, [pc, #340]	; (80050b4 <HAL_DMA_Abort_IT+0x180>)
 8004f60:	4281      	cmp	r1, r0
 8004f62:	bf18      	it	ne
 8004f64:	4291      	cmpne	r1, r2
 8004f66:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004f6a:	4d53      	ldr	r5, [pc, #332]	; (80050b8 <HAL_DMA_Abort_IT+0x184>)
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2201      	moveq	r2, #1
 8004f70:	2200      	movne	r2, #0
 8004f72:	42a1      	cmp	r1, r4
 8004f74:	bf08      	it	eq
 8004f76:	f042 0201 	orreq.w	r2, r2, #1
 8004f7a:	3448      	adds	r4, #72	; 0x48
 8004f7c:	4281      	cmp	r1, r0
 8004f7e:	bf08      	it	eq
 8004f80:	f042 0201 	orreq.w	r2, r2, #1
 8004f84:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004f88:	42a9      	cmp	r1, r5
 8004f8a:	bf08      	it	eq
 8004f8c:	f042 0201 	orreq.w	r2, r2, #1
 8004f90:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004f94:	42a1      	cmp	r1, r4
 8004f96:	bf08      	it	eq
 8004f98:	f042 0201 	orreq.w	r2, r2, #1
 8004f9c:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004fa0:	4281      	cmp	r1, r0
 8004fa2:	bf08      	it	eq
 8004fa4:	f042 0201 	orreq.w	r2, r2, #1
 8004fa8:	3048      	adds	r0, #72	; 0x48
 8004faa:	42a9      	cmp	r1, r5
 8004fac:	bf08      	it	eq
 8004fae:	f042 0201 	orreq.w	r2, r2, #1
 8004fb2:	3548      	adds	r5, #72	; 0x48
 8004fb4:	42a1      	cmp	r1, r4
 8004fb6:	bf08      	it	eq
 8004fb8:	f042 0201 	orreq.w	r2, r2, #1
 8004fbc:	3448      	adds	r4, #72	; 0x48
 8004fbe:	4281      	cmp	r1, r0
 8004fc0:	bf08      	it	eq
 8004fc2:	f042 0201 	orreq.w	r2, r2, #1
 8004fc6:	3048      	adds	r0, #72	; 0x48
 8004fc8:	42a9      	cmp	r1, r5
 8004fca:	bf08      	it	eq
 8004fcc:	f042 0201 	orreq.w	r2, r2, #1
 8004fd0:	42a1      	cmp	r1, r4
 8004fd2:	bf08      	it	eq
 8004fd4:	f042 0201 	orreq.w	r2, r2, #1
 8004fd8:	4281      	cmp	r1, r0
 8004fda:	bf08      	it	eq
 8004fdc:	f042 0201 	orreq.w	r2, r2, #1
 8004fe0:	b912      	cbnz	r2, 8004fe8 <HAL_DMA_Abort_IT+0xb4>
 8004fe2:	4a36      	ldr	r2, [pc, #216]	; (80050bc <HAL_DMA_Abort_IT+0x188>)
 8004fe4:	4291      	cmp	r1, r2
 8004fe6:	d10a      	bne.n	8004ffe <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fe8:	2204      	movs	r2, #4
  return HAL_OK;
 8004fea:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004ff0:	680b      	ldr	r3, [r1, #0]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	600b      	str	r3, [r1, #0]
}
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004ffa:	2001      	movs	r0, #1
}
 8004ffc:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ffe:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 8005002:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_DMA_Abort_IT+0x18c>)
 8005004:	482f      	ldr	r0, [pc, #188]	; (80050c4 <HAL_DMA_Abort_IT+0x190>)
 8005006:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800500a:	4d2f      	ldr	r5, [pc, #188]	; (80050c8 <HAL_DMA_Abort_IT+0x194>)
 800500c:	42a1      	cmp	r1, r4
 800500e:	bf18      	it	ne
 8005010:	4291      	cmpne	r1, r2
 8005012:	f104 0450 	add.w	r4, r4, #80	; 0x50
 8005016:	bf0c      	ite	eq
 8005018:	2201      	moveq	r2, #1
 800501a:	2200      	movne	r2, #0
 800501c:	4281      	cmp	r1, r0
 800501e:	bf08      	it	eq
 8005020:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005024:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005026:	42a9      	cmp	r1, r5
 8005028:	bf08      	it	eq
 800502a:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800502e:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005032:	3528      	adds	r5, #40	; 0x28
 8005034:	42a1      	cmp	r1, r4
 8005036:	bf08      	it	eq
 8005038:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800503c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800503e:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8005040:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005042:	42a9      	cmp	r1, r5
 8005044:	bf08      	it	eq
 8005046:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800504a:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800504e:	42a1      	cmp	r1, r4
 8005050:	bf08      	it	eq
 8005052:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8005056:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005058:	b912      	cbnz	r2, 8005060 <HAL_DMA_Abort_IT+0x12c>
 800505a:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <HAL_DMA_Abort_IT+0x198>)
 800505c:	4291      	cmp	r1, r2
 800505e:	d117      	bne.n	8005090 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005060:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005062:	2101      	movs	r1, #1
 8005064:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005066:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005068:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800506c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800506e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005072:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005074:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005076:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 8005078:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800507c:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507e:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005080:	b132      	cbz	r2, 8005090 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005082:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005084:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005086:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005088:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800508c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800508e:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8005090:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005092:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8005094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8005096:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800509a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800509e:	b11a      	cbz	r2, 80050a8 <HAL_DMA_Abort_IT+0x174>
 80050a0:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 80050a2:	4790      	blx	r2
  return HAL_OK;
 80050a4:	4620      	mov	r0, r4
}
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80050a8:	4610      	mov	r0, r2
}
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	40020010 	.word	0x40020010
 80050b0:	40020040 	.word	0x40020040
 80050b4:	40020070 	.word	0x40020070
 80050b8:	400200a0 	.word	0x400200a0
 80050bc:	400204b8 	.word	0x400204b8
 80050c0:	5802541c 	.word	0x5802541c
 80050c4:	58025430 	.word	0x58025430
 80050c8:	58025444 	.word	0x58025444
 80050cc:	58025494 	.word	0x58025494

080050d0 <HAL_DMA_IRQHandler>:
{
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 80050d4:	49a4      	ldr	r1, [pc, #656]	; (8005368 <HAL_DMA_IRQHandler+0x298>)
{
 80050d6:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050d8:	4ea4      	ldr	r6, [pc, #656]	; (800536c <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 80050da:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050dc:	6803      	ldr	r3, [r0, #0]
 80050de:	4aa4      	ldr	r2, [pc, #656]	; (8005370 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e0:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80050e4:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050e6:	4293      	cmp	r3, r2
 80050e8:	bf18      	it	ne
 80050ea:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80050ec:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050ee:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050f0:	bf08      	it	eq
 80050f2:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80050f4:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050f8:	bf18      	it	ne
 80050fa:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80050fc:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005100:	d046      	beq.n	8005190 <HAL_DMA_IRQHandler+0xc0>
 8005102:	3218      	adds	r2, #24
 8005104:	4f9b      	ldr	r7, [pc, #620]	; (8005374 <HAL_DMA_IRQHandler+0x2a4>)
 8005106:	4c9c      	ldr	r4, [pc, #624]	; (8005378 <HAL_DMA_IRQHandler+0x2a8>)
 8005108:	42bb      	cmp	r3, r7
 800510a:	bf18      	it	ne
 800510c:	4293      	cmpne	r3, r2
 800510e:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8005112:	bf0c      	ite	eq
 8005114:	2201      	moveq	r2, #1
 8005116:	2200      	movne	r2, #0
 8005118:	42a3      	cmp	r3, r4
 800511a:	bf08      	it	eq
 800511c:	f042 0201 	orreq.w	r2, r2, #1
 8005120:	3430      	adds	r4, #48	; 0x30
 8005122:	42bb      	cmp	r3, r7
 8005124:	bf08      	it	eq
 8005126:	f042 0201 	orreq.w	r2, r2, #1
 800512a:	3730      	adds	r7, #48	; 0x30
 800512c:	42a3      	cmp	r3, r4
 800512e:	bf08      	it	eq
 8005130:	f042 0201 	orreq.w	r2, r2, #1
 8005134:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8005138:	42bb      	cmp	r3, r7
 800513a:	bf08      	it	eq
 800513c:	f042 0201 	orreq.w	r2, r2, #1
 8005140:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005144:	42a3      	cmp	r3, r4
 8005146:	bf08      	it	eq
 8005148:	f042 0201 	orreq.w	r2, r2, #1
 800514c:	3430      	adds	r4, #48	; 0x30
 800514e:	42bb      	cmp	r3, r7
 8005150:	bf08      	it	eq
 8005152:	f042 0201 	orreq.w	r2, r2, #1
 8005156:	3730      	adds	r7, #48	; 0x30
 8005158:	42a3      	cmp	r3, r4
 800515a:	bf08      	it	eq
 800515c:	f042 0201 	orreq.w	r2, r2, #1
 8005160:	3430      	adds	r4, #48	; 0x30
 8005162:	42bb      	cmp	r3, r7
 8005164:	bf08      	it	eq
 8005166:	f042 0201 	orreq.w	r2, r2, #1
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	42a3      	cmp	r3, r4
 800516e:	bf08      	it	eq
 8005170:	f042 0201 	orreq.w	r2, r2, #1
 8005174:	3430      	adds	r4, #48	; 0x30
 8005176:	42bb      	cmp	r3, r7
 8005178:	bf08      	it	eq
 800517a:	f042 0201 	orreq.w	r2, r2, #1
 800517e:	42a3      	cmp	r3, r4
 8005180:	bf08      	it	eq
 8005182:	f042 0201 	orreq.w	r2, r2, #1
 8005186:	b91a      	cbnz	r2, 8005190 <HAL_DMA_IRQHandler+0xc0>
 8005188:	4a7c      	ldr	r2, [pc, #496]	; (800537c <HAL_DMA_IRQHandler+0x2ac>)
 800518a:	4293      	cmp	r3, r2
 800518c:	f040 81ef 	bne.w	800556e <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005190:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8005192:	2208      	movs	r2, #8
 8005194:	f001 071f 	and.w	r7, r1, #31
 8005198:	40ba      	lsls	r2, r7
 800519a:	422a      	tst	r2, r5
 800519c:	f040 81d8 	bne.w	8005550 <HAL_DMA_IRQHandler+0x480>
 80051a0:	4604      	mov	r4, r0
 80051a2:	f04f 0c04 	mov.w	ip, #4
 80051a6:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051a8:	fa25 f207 	lsr.w	r2, r5, r7
 80051ac:	fa0c fc07 	lsl.w	ip, ip, r7
 80051b0:	40b8      	lsls	r0, r7
 80051b2:	07d2      	lsls	r2, r2, #31
 80051b4:	ea05 090c 	and.w	r9, r5, ip
 80051b8:	ea05 0e00 	and.w	lr, r5, r0
 80051bc:	d560      	bpl.n	8005280 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051be:	4a70      	ldr	r2, [pc, #448]	; (8005380 <HAL_DMA_IRQHandler+0x2b0>)
 80051c0:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005374 <HAL_DMA_IRQHandler+0x2a4>
 80051c4:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8005378 <HAL_DMA_IRQHandler+0x2a8>
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bf18      	it	ne
 80051cc:	455b      	cmpne	r3, fp
 80051ce:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80051d2:	bf0c      	ite	eq
 80051d4:	2201      	moveq	r2, #1
 80051d6:	2200      	movne	r2, #0
 80051d8:	4553      	cmp	r3, sl
 80051da:	bf08      	it	eq
 80051dc:	f042 0201 	orreq.w	r2, r2, #1
 80051e0:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80051e4:	455b      	cmp	r3, fp
 80051e6:	bf08      	it	eq
 80051e8:	f042 0201 	orreq.w	r2, r2, #1
 80051ec:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80051f0:	4553      	cmp	r3, sl
 80051f2:	bf08      	it	eq
 80051f4:	f042 0201 	orreq.w	r2, r2, #1
 80051f8:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 80051fc:	455b      	cmp	r3, fp
 80051fe:	bf08      	it	eq
 8005200:	f042 0201 	orreq.w	r2, r2, #1
 8005204:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 8005208:	4553      	cmp	r3, sl
 800520a:	bf08      	it	eq
 800520c:	f042 0201 	orreq.w	r2, r2, #1
 8005210:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005214:	455b      	cmp	r3, fp
 8005216:	bf08      	it	eq
 8005218:	f042 0201 	orreq.w	r2, r2, #1
 800521c:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005220:	4553      	cmp	r3, sl
 8005222:	bf08      	it	eq
 8005224:	f042 0201 	orreq.w	r2, r2, #1
 8005228:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800522c:	455b      	cmp	r3, fp
 800522e:	bf08      	it	eq
 8005230:	f042 0201 	orreq.w	r2, r2, #1
 8005234:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005238:	4553      	cmp	r3, sl
 800523a:	bf08      	it	eq
 800523c:	f042 0201 	orreq.w	r2, r2, #1
 8005240:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005244:	455b      	cmp	r3, fp
 8005246:	bf08      	it	eq
 8005248:	f042 0201 	orreq.w	r2, r2, #1
 800524c:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005250:	4553      	cmp	r3, sl
 8005252:	bf08      	it	eq
 8005254:	f042 0201 	orreq.w	r2, r2, #1
 8005258:	455b      	cmp	r3, fp
 800525a:	bf08      	it	eq
 800525c:	f042 0201 	orreq.w	r2, r2, #1
 8005260:	b912      	cbnz	r2, 8005268 <HAL_DMA_IRQHandler+0x198>
 8005262:	2e00      	cmp	r6, #0
 8005264:	f000 8245 	beq.w	80056f2 <HAL_DMA_IRQHandler+0x622>
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	0612      	lsls	r2, r2, #24
 800526c:	d508      	bpl.n	8005280 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800526e:	2201      	movs	r2, #1
 8005270:	fa02 f707 	lsl.w	r7, r2, r7
 8005274:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005278:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800527a:	f042 0202 	orr.w	r2, r2, #2
 800527e:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005280:	f1b9 0f00 	cmp.w	r9, #0
 8005284:	d055      	beq.n	8005332 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005286:	2e00      	cmp	r6, #0
 8005288:	d14a      	bne.n	8005320 <HAL_DMA_IRQHandler+0x250>
 800528a:	4a3d      	ldr	r2, [pc, #244]	; (8005380 <HAL_DMA_IRQHandler+0x2b0>)
 800528c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8005374 <HAL_DMA_IRQHandler+0x2a4>
 8005290:	4f39      	ldr	r7, [pc, #228]	; (8005378 <HAL_DMA_IRQHandler+0x2a8>)
 8005292:	454b      	cmp	r3, r9
 8005294:	bf18      	it	ne
 8005296:	4293      	cmpne	r3, r2
 8005298:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800529c:	bf0c      	ite	eq
 800529e:	2201      	moveq	r2, #1
 80052a0:	2200      	movne	r2, #0
 80052a2:	42bb      	cmp	r3, r7
 80052a4:	bf08      	it	eq
 80052a6:	f042 0201 	orreq.w	r2, r2, #1
 80052aa:	3730      	adds	r7, #48	; 0x30
 80052ac:	454b      	cmp	r3, r9
 80052ae:	bf08      	it	eq
 80052b0:	f042 0201 	orreq.w	r2, r2, #1
 80052b4:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80052b8:	42bb      	cmp	r3, r7
 80052ba:	bf08      	it	eq
 80052bc:	f042 0201 	orreq.w	r2, r2, #1
 80052c0:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80052c4:	454b      	cmp	r3, r9
 80052c6:	bf08      	it	eq
 80052c8:	f042 0201 	orreq.w	r2, r2, #1
 80052cc:	f509 795c 	add.w	r9, r9, #880	; 0x370
 80052d0:	42bb      	cmp	r3, r7
 80052d2:	bf08      	it	eq
 80052d4:	f042 0201 	orreq.w	r2, r2, #1
 80052d8:	3730      	adds	r7, #48	; 0x30
 80052da:	454b      	cmp	r3, r9
 80052dc:	bf08      	it	eq
 80052de:	f042 0201 	orreq.w	r2, r2, #1
 80052e2:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80052e6:	42bb      	cmp	r3, r7
 80052e8:	bf08      	it	eq
 80052ea:	f042 0201 	orreq.w	r2, r2, #1
 80052ee:	3730      	adds	r7, #48	; 0x30
 80052f0:	454b      	cmp	r3, r9
 80052f2:	bf08      	it	eq
 80052f4:	f042 0201 	orreq.w	r2, r2, #1
 80052f8:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80052fc:	42bb      	cmp	r3, r7
 80052fe:	bf08      	it	eq
 8005300:	f042 0201 	orreq.w	r2, r2, #1
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	454b      	cmp	r3, r9
 8005308:	bf08      	it	eq
 800530a:	f042 0201 	orreq.w	r2, r2, #1
 800530e:	42bb      	cmp	r3, r7
 8005310:	bf08      	it	eq
 8005312:	f042 0201 	orreq.w	r2, r2, #1
 8005316:	b91a      	cbnz	r2, 8005320 <HAL_DMA_IRQHandler+0x250>
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_DMA_IRQHandler+0x2ac>)
 800531a:	4293      	cmp	r3, r2
 800531c:	f040 81b4 	bne.w	8005688 <HAL_DMA_IRQHandler+0x5b8>
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	0792      	lsls	r2, r2, #30
 8005324:	d505      	bpl.n	8005332 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005326:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800532a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800532c:	f042 0204 	orr.w	r2, r2, #4
 8005330:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005332:	f1be 0f00 	cmp.w	lr, #0
 8005336:	d06d      	beq.n	8005414 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005338:	2e00      	cmp	r6, #0
 800533a:	d155      	bne.n	80053e8 <HAL_DMA_IRQHandler+0x318>
 800533c:	4a10      	ldr	r2, [pc, #64]	; (8005380 <HAL_DMA_IRQHandler+0x2b0>)
 800533e:	4f0d      	ldr	r7, [pc, #52]	; (8005374 <HAL_DMA_IRQHandler+0x2a4>)
 8005340:	4e0d      	ldr	r6, [pc, #52]	; (8005378 <HAL_DMA_IRQHandler+0x2a8>)
 8005342:	42bb      	cmp	r3, r7
 8005344:	bf18      	it	ne
 8005346:	4293      	cmpne	r3, r2
 8005348:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800534c:	bf0c      	ite	eq
 800534e:	2201      	moveq	r2, #1
 8005350:	2200      	movne	r2, #0
 8005352:	42b3      	cmp	r3, r6
 8005354:	bf08      	it	eq
 8005356:	f042 0201 	orreq.w	r2, r2, #1
 800535a:	3630      	adds	r6, #48	; 0x30
 800535c:	42bb      	cmp	r3, r7
 800535e:	bf08      	it	eq
 8005360:	f042 0201 	orreq.w	r2, r2, #1
 8005364:	3730      	adds	r7, #48	; 0x30
 8005366:	e00d      	b.n	8005384 <HAL_DMA_IRQHandler+0x2b4>
 8005368:	240001f4 	.word	0x240001f4
 800536c:	40020010 	.word	0x40020010
 8005370:	40020028 	.word	0x40020028
 8005374:	40020058 	.word	0x40020058
 8005378:	40020070 	.word	0x40020070
 800537c:	400204b8 	.word	0x400204b8
 8005380:	40020040 	.word	0x40020040
 8005384:	42b3      	cmp	r3, r6
 8005386:	bf08      	it	eq
 8005388:	f042 0201 	orreq.w	r2, r2, #1
 800538c:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005390:	42bb      	cmp	r3, r7
 8005392:	bf08      	it	eq
 8005394:	f042 0201 	orreq.w	r2, r2, #1
 8005398:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800539c:	42b3      	cmp	r3, r6
 800539e:	bf08      	it	eq
 80053a0:	f042 0201 	orreq.w	r2, r2, #1
 80053a4:	3630      	adds	r6, #48	; 0x30
 80053a6:	42bb      	cmp	r3, r7
 80053a8:	bf08      	it	eq
 80053aa:	f042 0201 	orreq.w	r2, r2, #1
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	42b3      	cmp	r3, r6
 80053b2:	bf08      	it	eq
 80053b4:	f042 0201 	orreq.w	r2, r2, #1
 80053b8:	3630      	adds	r6, #48	; 0x30
 80053ba:	42bb      	cmp	r3, r7
 80053bc:	bf08      	it	eq
 80053be:	f042 0201 	orreq.w	r2, r2, #1
 80053c2:	3730      	adds	r7, #48	; 0x30
 80053c4:	42b3      	cmp	r3, r6
 80053c6:	bf08      	it	eq
 80053c8:	f042 0201 	orreq.w	r2, r2, #1
 80053cc:	3630      	adds	r6, #48	; 0x30
 80053ce:	42bb      	cmp	r3, r7
 80053d0:	bf08      	it	eq
 80053d2:	f042 0201 	orreq.w	r2, r2, #1
 80053d6:	42b3      	cmp	r3, r6
 80053d8:	bf08      	it	eq
 80053da:	f042 0201 	orreq.w	r2, r2, #1
 80053de:	b91a      	cbnz	r2, 80053e8 <HAL_DMA_IRQHandler+0x318>
 80053e0:	4aa0      	ldr	r2, [pc, #640]	; (8005664 <HAL_DMA_IRQHandler+0x594>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	f040 813a 	bne.w	800565c <HAL_DMA_IRQHandler+0x58c>
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80053ee:	b18a      	cbz	r2, 8005414 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053f0:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	0357      	lsls	r7, r2, #13
 80053f8:	f100 80f7 	bmi.w	80055ea <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	05d0      	lsls	r0, r2, #23
 8005400:	d403      	bmi.n	800540a <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	f022 0208 	bic.w	r2, r2, #8
 8005408:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800540a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800540c:	b113      	cbz	r3, 8005414 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 800540e:	4620      	mov	r0, r4
 8005410:	4798      	blx	r3
 8005412:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005414:	f001 011f 	and.w	r1, r1, #31
 8005418:	2220      	movs	r2, #32
 800541a:	408a      	lsls	r2, r1
 800541c:	422a      	tst	r2, r5
 800541e:	d069      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	4b91      	ldr	r3, [pc, #580]	; (8005668 <HAL_DMA_IRQHandler+0x598>)
 8005424:	4e91      	ldr	r6, [pc, #580]	; (800566c <HAL_DMA_IRQHandler+0x59c>)
 8005426:	4d92      	ldr	r5, [pc, #584]	; (8005670 <HAL_DMA_IRQHandler+0x5a0>)
 8005428:	42b0      	cmp	r0, r6
 800542a:	bf18      	it	ne
 800542c:	4298      	cmpne	r0, r3
 800542e:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	42a8      	cmp	r0, r5
 800543a:	bf08      	it	eq
 800543c:	f043 0301 	orreq.w	r3, r3, #1
 8005440:	3530      	adds	r5, #48	; 0x30
 8005442:	42b0      	cmp	r0, r6
 8005444:	bf08      	it	eq
 8005446:	f043 0301 	orreq.w	r3, r3, #1
 800544a:	3630      	adds	r6, #48	; 0x30
 800544c:	42a8      	cmp	r0, r5
 800544e:	bf08      	it	eq
 8005450:	f043 0301 	orreq.w	r3, r3, #1
 8005454:	3530      	adds	r5, #48	; 0x30
 8005456:	42b0      	cmp	r0, r6
 8005458:	bf08      	it	eq
 800545a:	f043 0301 	orreq.w	r3, r3, #1
 800545e:	3630      	adds	r6, #48	; 0x30
 8005460:	42a8      	cmp	r0, r5
 8005462:	bf08      	it	eq
 8005464:	f043 0301 	orreq.w	r3, r3, #1
 8005468:	f505 755c 	add.w	r5, r5, #880	; 0x370
 800546c:	42b0      	cmp	r0, r6
 800546e:	bf08      	it	eq
 8005470:	f043 0301 	orreq.w	r3, r3, #1
 8005474:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005478:	42a8      	cmp	r0, r5
 800547a:	bf08      	it	eq
 800547c:	f043 0301 	orreq.w	r3, r3, #1
 8005480:	3530      	adds	r5, #48	; 0x30
 8005482:	42b0      	cmp	r0, r6
 8005484:	bf08      	it	eq
 8005486:	f043 0301 	orreq.w	r3, r3, #1
 800548a:	3630      	adds	r6, #48	; 0x30
 800548c:	42a8      	cmp	r0, r5
 800548e:	bf08      	it	eq
 8005490:	f043 0301 	orreq.w	r3, r3, #1
 8005494:	3530      	adds	r5, #48	; 0x30
 8005496:	42b0      	cmp	r0, r6
 8005498:	bf08      	it	eq
 800549a:	f043 0301 	orreq.w	r3, r3, #1
 800549e:	3630      	adds	r6, #48	; 0x30
 80054a0:	42a8      	cmp	r0, r5
 80054a2:	bf08      	it	eq
 80054a4:	f043 0301 	orreq.w	r3, r3, #1
 80054a8:	3530      	adds	r5, #48	; 0x30
 80054aa:	42b0      	cmp	r0, r6
 80054ac:	bf08      	it	eq
 80054ae:	f043 0301 	orreq.w	r3, r3, #1
 80054b2:	42a8      	cmp	r0, r5
 80054b4:	bf08      	it	eq
 80054b6:	f043 0301 	orreq.w	r3, r3, #1
 80054ba:	b91b      	cbnz	r3, 80054c4 <HAL_DMA_IRQHandler+0x3f4>
 80054bc:	4b69      	ldr	r3, [pc, #420]	; (8005664 <HAL_DMA_IRQHandler+0x594>)
 80054be:	4298      	cmp	r0, r3
 80054c0:	f040 8121 	bne.w	8005706 <HAL_DMA_IRQHandler+0x636>
 80054c4:	6803      	ldr	r3, [r0, #0]
 80054c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054ca:	b19b      	cbz	r3, 80054f4 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054cc:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80054d4:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054d6:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054d8:	f000 8090 	beq.w	80055fc <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054e0:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054e2:	f000 80a8 	beq.w	8005636 <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054e6:	0319      	lsls	r1, r3, #12
 80054e8:	f140 80b3 	bpl.w	8005652 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 80054ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054ee:	b10b      	cbz	r3, 80054f4 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 80054f0:	4620      	mov	r0, r4
 80054f2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d074      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054fc:	07da      	lsls	r2, r3, #31
 80054fe:	d51f      	bpl.n	8005540 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 8005500:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005502:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 8005504:	495b      	ldr	r1, [pc, #364]	; (8005674 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 8005506:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005512:	9b01      	ldr	r3, [sp, #4]
 8005514:	fba1 3103 	umull	r3, r1, r1, r3
 8005518:	0a89      	lsrs	r1, r1, #10
 800551a:	e002      	b.n	8005522 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800551c:	6813      	ldr	r3, [r2, #0]
 800551e:	07db      	lsls	r3, r3, #31
 8005520:	d504      	bpl.n	800552c <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	428b      	cmp	r3, r1
 8005528:	9303      	str	r3, [sp, #12]
 800552a:	d9f7      	bls.n	800551c <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800552c:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 800552e:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005530:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 8005532:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8005536:	bf4c      	ite	mi
 8005538:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800553a:	2301      	movpl	r3, #1
 800553c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8005540:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04e      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 8005546:	4620      	mov	r0, r4
}
 8005548:	b005      	add	sp, #20
 800554a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 800554e:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005550:	681c      	ldr	r4, [r3, #0]
 8005552:	0764      	lsls	r4, r4, #29
 8005554:	f57f ae24 	bpl.w	80051a0 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	f024 0404 	bic.w	r4, r4, #4
 800555e:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005560:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005564:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	6542      	str	r2, [r0, #84]	; 0x54
 800556c:	e618      	b.n	80051a0 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800556e:	4a42      	ldr	r2, [pc, #264]	; (8005678 <HAL_DMA_IRQHandler+0x5a8>)
 8005570:	4d42      	ldr	r5, [pc, #264]	; (800567c <HAL_DMA_IRQHandler+0x5ac>)
 8005572:	4c43      	ldr	r4, [pc, #268]	; (8005680 <HAL_DMA_IRQHandler+0x5b0>)
 8005574:	42ab      	cmp	r3, r5
 8005576:	bf18      	it	ne
 8005578:	4293      	cmpne	r3, r2
 800557a:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800557e:	bf0c      	ite	eq
 8005580:	2201      	moveq	r2, #1
 8005582:	2200      	movne	r2, #0
 8005584:	42a3      	cmp	r3, r4
 8005586:	bf08      	it	eq
 8005588:	f042 0201 	orreq.w	r2, r2, #1
 800558c:	3428      	adds	r4, #40	; 0x28
 800558e:	42ab      	cmp	r3, r5
 8005590:	bf08      	it	eq
 8005592:	f042 0201 	orreq.w	r2, r2, #1
 8005596:	3528      	adds	r5, #40	; 0x28
 8005598:	42a3      	cmp	r3, r4
 800559a:	bf08      	it	eq
 800559c:	f042 0201 	orreq.w	r2, r2, #1
 80055a0:	3428      	adds	r4, #40	; 0x28
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	bf08      	it	eq
 80055a6:	f042 0201 	orreq.w	r2, r2, #1
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	bf08      	it	eq
 80055ae:	f042 0201 	orreq.w	r2, r2, #1
 80055b2:	b912      	cbnz	r2, 80055ba <HAL_DMA_IRQHandler+0x4ea>
 80055b4:	4a33      	ldr	r2, [pc, #204]	; (8005684 <HAL_DMA_IRQHandler+0x5b4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d114      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055ba:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80055bc:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055be:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055c0:	f004 041f 	and.w	r4, r4, #31
 80055c4:	40a5      	lsls	r5, r4
 80055c6:	420d      	tst	r5, r1
 80055c8:	d068      	beq.n	800569c <HAL_DMA_IRQHandler+0x5cc>
 80055ca:	0756      	lsls	r6, r2, #29
 80055cc:	d566      	bpl.n	800569c <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ce:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80055d0:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055d4:	f140 80ac 	bpl.w	8005730 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055d8:	03d3      	lsls	r3, r2, #15
 80055da:	f100 80af 	bmi.w	800573c <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055de:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1b1      	bne.n	8005548 <HAL_DMA_IRQHandler+0x478>
}
 80055e4:	b005      	add	sp, #20
 80055e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	031e      	lsls	r6, r3, #12
 80055ee:	f57f af0c 	bpl.w	800540a <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f af0a 	bne.w	800540e <HAL_DMA_IRQHandler+0x33e>
 80055fa:	e70b      	b.n	8005414 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055fc:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005600:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005602:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005604:	6943      	ldr	r3, [r0, #20]
 8005606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560a:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800560c:	2a00      	cmp	r2, #0
 800560e:	d041      	beq.n	8005694 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005610:	6803      	ldr	r3, [r0, #0]
 8005612:	f023 0308 	bic.w	r3, r3, #8
 8005616:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005618:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800561a:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 800561c:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800561e:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8005622:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005624:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 8005628:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800562c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8005630:	2b00      	cmp	r3, #0
 8005632:	d188      	bne.n	8005546 <HAL_DMA_IRQHandler+0x476>
 8005634:	e7d6      	b.n	80055e4 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005636:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800563a:	f47f af57 	bne.w	80054ec <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800563e:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005640:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005642:	f022 0210 	bic.w	r2, r2, #16
 8005646:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 8005648:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800564c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8005650:	e74c      	b.n	80054ec <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 8005652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005654:	2b00      	cmp	r3, #0
 8005656:	f47f af4b 	bne.w	80054f0 <HAL_DMA_IRQHandler+0x420>
 800565a:	e74b      	b.n	80054f4 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005662:	e6c4      	b.n	80053ee <HAL_DMA_IRQHandler+0x31e>
 8005664:	400204b8 	.word	0x400204b8
 8005668:	40020010 	.word	0x40020010
 800566c:	40020028 	.word	0x40020028
 8005670:	40020040 	.word	0x40020040
 8005674:	1b4e81b5 	.word	0x1b4e81b5
 8005678:	58025408 	.word	0x58025408
 800567c:	5802541c 	.word	0x5802541c
 8005680:	58025430 	.word	0x58025430
 8005684:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005688:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800568a:	f1be 0f00 	cmp.w	lr, #0
 800568e:	f43f aec1 	beq.w	8005414 <HAL_DMA_IRQHandler+0x344>
 8005692:	e653      	b.n	800533c <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005694:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1ba      	bne.n	8005610 <HAL_DMA_IRQHandler+0x540>
 800569a:	e7bd      	b.n	8005618 <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800569c:	2502      	movs	r5, #2
 800569e:	40a5      	lsls	r5, r4
 80056a0:	420d      	tst	r5, r1
 80056a2:	d00c      	beq.n	80056be <HAL_DMA_IRQHandler+0x5ee>
 80056a4:	0796      	lsls	r6, r2, #30
 80056a6:	d50a      	bpl.n	80056be <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056a8:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056aa:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ae:	d52e      	bpl.n	800570e <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056b0:	03d1      	lsls	r1, r2, #15
 80056b2:	d438      	bmi.n	8005726 <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 80056b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f47f af46 	bne.w	8005548 <HAL_DMA_IRQHandler+0x478>
 80056bc:	e792      	b.n	80055e4 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80056be:	2508      	movs	r5, #8
 80056c0:	40a5      	lsls	r5, r4
 80056c2:	420d      	tst	r5, r1
 80056c4:	d08e      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x514>
 80056c6:	0712      	lsls	r2, r2, #28
 80056c8:	d58c      	bpl.n	80055e4 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ca:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056cc:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80056ce:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d0:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056d4:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056d8:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 80056da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056dc:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056e0:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 80056e2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80056e6:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f47f af2c 	bne.w	8005548 <HAL_DMA_IRQHandler+0x478>
 80056f0:	e778      	b.n	80055e4 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056f2:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056f4:	f1b9 0f00 	cmp.w	r9, #0
 80056f8:	f47f adc7 	bne.w	800528a <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056fc:	f1be 0f00 	cmp.w	lr, #0
 8005700:	f43f ae88 	beq.w	8005414 <HAL_DMA_IRQHandler+0x344>
 8005704:	e618      	b.n	8005338 <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005706:	6803      	ldr	r3, [r0, #0]
 8005708:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800570c:	e6dd      	b.n	80054ca <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800570e:	f012 0220 	ands.w	r2, r2, #32
 8005712:	d108      	bne.n	8005726 <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005714:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005716:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005718:	f021 010a 	bic.w	r1, r1, #10
 800571c:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800571e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005722:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005726:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f af0d 	bne.w	8005548 <HAL_DMA_IRQHandler+0x478>
 800572e:	e759      	b.n	80055e4 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005730:	0697      	lsls	r7, r2, #26
 8005732:	d403      	bmi.n	800573c <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800573c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	f47f af02 	bne.w	8005548 <HAL_DMA_IRQHandler+0x478>
 8005744:	e74e      	b.n	80055e4 <HAL_DMA_IRQHandler+0x514>
 8005746:	bf00      	nop

08005748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800574e:	6809      	ldr	r1, [r1, #0]
{
 8005750:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005752:	2900      	cmp	r1, #0
 8005754:	f000 80cd 	beq.w	80058f2 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8005758:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800575a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8005970 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800575e:	2301      	movs	r3, #1
 8005760:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8005762:	ea13 0501 	ands.w	r5, r3, r1
 8005766:	f000 80bf 	beq.w	80058e8 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800576a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800576e:	0077      	lsls	r7, r6, #1
 8005770:	f04f 0c03 	mov.w	ip, #3
 8005774:	f022 0910 	bic.w	r9, r2, #16
 8005778:	fa0c fc07 	lsl.w	ip, ip, r7
 800577c:	f109 34ff 	add.w	r4, r9, #4294967295
 8005780:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005784:	2c01      	cmp	r4, #1
 8005786:	d812      	bhi.n	80057ae <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8005788:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800578a:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800578e:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005792:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005796:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800579a:	40bc      	lsls	r4, r7
 800579c:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 80057a0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80057a2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057a4:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057a8:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 80057ac:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80057ae:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b4:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057b8:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057bc:	fa04 f407 	lsl.w	r4, r4, r7
 80057c0:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80057c4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057c6:	d115      	bne.n	80057f4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 80057c8:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057ca:	f006 0907 	and.w	r9, r6, #7
 80057ce:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057d2:	f8de 4010 	ldr.w	r4, [lr, #16]
 80057d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057da:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80057de:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057e2:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057e6:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057ea:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057ee:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80057f2:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 80057f4:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057f6:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057fa:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057fe:	40bb      	lsls	r3, r7
 8005800:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8005804:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005806:	00d3      	lsls	r3, r2, #3
 8005808:	d56e      	bpl.n	80058e8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800580a:	4b53      	ldr	r3, [pc, #332]	; (8005958 <HAL_GPIO_Init+0x210>)
 800580c:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005810:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005812:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005816:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800581a:	f047 0c02 	orr.w	ip, r7, #2
 800581e:	4f4f      	ldr	r7, [pc, #316]	; (800595c <HAL_GPIO_Init+0x214>)
 8005820:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005822:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005826:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005828:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800582c:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8005830:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005834:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005838:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800583c:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583e:	f8cd c004 	str.w	ip, [sp, #4]
 8005842:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005846:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800584a:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800584e:	d026      	beq.n	800589e <HAL_GPIO_Init+0x156>
 8005850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005854:	4298      	cmp	r0, r3
 8005856:	d055      	beq.n	8005904 <HAL_GPIO_Init+0x1bc>
 8005858:	4b41      	ldr	r3, [pc, #260]	; (8005960 <HAL_GPIO_Init+0x218>)
 800585a:	4298      	cmp	r0, r3
 800585c:	d04c      	beq.n	80058f8 <HAL_GPIO_Init+0x1b0>
 800585e:	4b41      	ldr	r3, [pc, #260]	; (8005964 <HAL_GPIO_Init+0x21c>)
 8005860:	4298      	cmp	r0, r3
 8005862:	d05b      	beq.n	800591c <HAL_GPIO_Init+0x1d4>
 8005864:	4b40      	ldr	r3, [pc, #256]	; (8005968 <HAL_GPIO_Init+0x220>)
 8005866:	4298      	cmp	r0, r3
 8005868:	d05e      	beq.n	8005928 <HAL_GPIO_Init+0x1e0>
 800586a:	4b40      	ldr	r3, [pc, #256]	; (800596c <HAL_GPIO_Init+0x224>)
 800586c:	4298      	cmp	r0, r3
 800586e:	d04f      	beq.n	8005910 <HAL_GPIO_Init+0x1c8>
 8005870:	f8df c100 	ldr.w	ip, [pc, #256]	; 8005974 <HAL_GPIO_Init+0x22c>
 8005874:	4560      	cmp	r0, ip
 8005876:	d05d      	beq.n	8005934 <HAL_GPIO_Init+0x1ec>
 8005878:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8005978 <HAL_GPIO_Init+0x230>
 800587c:	4560      	cmp	r0, ip
 800587e:	d05f      	beq.n	8005940 <HAL_GPIO_Init+0x1f8>
 8005880:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800597c <HAL_GPIO_Init+0x234>
 8005884:	4560      	cmp	r0, ip
 8005886:	d061      	beq.n	800594c <HAL_GPIO_Init+0x204>
 8005888:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005980 <HAL_GPIO_Init+0x238>
 800588c:	4560      	cmp	r0, ip
 800588e:	bf0c      	ite	eq
 8005890:	f04f 0c09 	moveq.w	ip, #9
 8005894:	f04f 0c0a 	movne.w	ip, #10
 8005898:	fa0c f309 	lsl.w	r3, ip, r9
 800589c:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 800589e:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 80058a0:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 80058a2:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058a6:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 80058a8:	bf4c      	ite	mi
 80058aa:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80058ac:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058ae:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058b0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80058b4:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 80058b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 80058bc:	bf4c      	ite	mi
 80058be:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80058c0:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 80058c2:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 80058c6:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058c8:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80058ca:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 80058ce:	bf4c      	ite	mi
 80058d0:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80058d2:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058d4:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80058d6:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 80058d8:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 80058da:	bf54      	ite	pl
 80058dc:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 80058e0:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 80058e8:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058ea:	fa31 f306 	lsrs.w	r3, r1, r6
 80058ee:	f47f af36 	bne.w	800575e <HAL_GPIO_Init+0x16>
  }
}
 80058f2:	b003      	add	sp, #12
 80058f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f8:	f04f 0c02 	mov.w	ip, #2
 80058fc:	fa0c f309 	lsl.w	r3, ip, r9
 8005900:	431c      	orrs	r4, r3
 8005902:	e7cc      	b.n	800589e <HAL_GPIO_Init+0x156>
 8005904:	f04f 0c01 	mov.w	ip, #1
 8005908:	fa0c f309 	lsl.w	r3, ip, r9
 800590c:	431c      	orrs	r4, r3
 800590e:	e7c6      	b.n	800589e <HAL_GPIO_Init+0x156>
 8005910:	f04f 0c05 	mov.w	ip, #5
 8005914:	fa0c f309 	lsl.w	r3, ip, r9
 8005918:	431c      	orrs	r4, r3
 800591a:	e7c0      	b.n	800589e <HAL_GPIO_Init+0x156>
 800591c:	f04f 0c03 	mov.w	ip, #3
 8005920:	fa0c f309 	lsl.w	r3, ip, r9
 8005924:	431c      	orrs	r4, r3
 8005926:	e7ba      	b.n	800589e <HAL_GPIO_Init+0x156>
 8005928:	f04f 0c04 	mov.w	ip, #4
 800592c:	fa0c f309 	lsl.w	r3, ip, r9
 8005930:	431c      	orrs	r4, r3
 8005932:	e7b4      	b.n	800589e <HAL_GPIO_Init+0x156>
 8005934:	f04f 0c06 	mov.w	ip, #6
 8005938:	fa0c f309 	lsl.w	r3, ip, r9
 800593c:	431c      	orrs	r4, r3
 800593e:	e7ae      	b.n	800589e <HAL_GPIO_Init+0x156>
 8005940:	f04f 0c07 	mov.w	ip, #7
 8005944:	fa0c f309 	lsl.w	r3, ip, r9
 8005948:	431c      	orrs	r4, r3
 800594a:	e7a8      	b.n	800589e <HAL_GPIO_Init+0x156>
 800594c:	f04f 0c08 	mov.w	ip, #8
 8005950:	fa0c f309 	lsl.w	r3, ip, r9
 8005954:	431c      	orrs	r4, r3
 8005956:	e7a2      	b.n	800589e <HAL_GPIO_Init+0x156>
 8005958:	58024400 	.word	0x58024400
 800595c:	58000400 	.word	0x58000400
 8005960:	58020800 	.word	0x58020800
 8005964:	58020c00 	.word	0x58020c00
 8005968:	58021000 	.word	0x58021000
 800596c:	58021400 	.word	0x58021400
 8005970:	58000080 	.word	0x58000080
 8005974:	58021800 	.word	0x58021800
 8005978:	58021c00 	.word	0x58021c00
 800597c:	58022000 	.word	0x58022000
 8005980:	58022400 	.word	0x58022400

08005984 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005984:	b902      	cbnz	r2, 8005988 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005986:	0409      	lsls	r1, r1, #16
 8005988:	6181      	str	r1, [r0, #24]
  }
}
 800598a:	4770      	bx	lr

0800598c <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800598c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005990:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005994:	4201      	tst	r1, r0
 8005996:	d100      	bne.n	800599a <HAL_GPIO_EXTI_IRQHandler+0xe>
 8005998:	4770      	bx	lr
{
 800599a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800599c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059a0:	f7fb fae2 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80059a4:	bd08      	pop	{r3, pc}
 80059a6:	bf00      	nop

080059a8 <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d066      	beq.n	8005a7a <HAL_LPTIM_Init+0xd2>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80059ac:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
{
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80059b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059b8:	4604      	mov	r4, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03c      	beq.n	8005a38 <HAL_LPTIM_Init+0x90>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	6960      	ldr	r0, [r4, #20]
 80059c2:	68a2      	ldr	r2, [r4, #8]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059c4:	f64f 7eff 	movw	lr, #65535	; 0xffff
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80059c8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80059cc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80059ce:	e9d4 1500 	ldrd	r1, r5, [r4]
 80059d2:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 80059d6:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 80059d8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80059dc:	d026      	beq.n	8005a2c <HAL_LPTIM_Init+0x84>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059de:	4570      	cmp	r0, lr
 80059e0:	d001      	beq.n	80059e6 <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80059e2:	f42c 4c60 	bic.w	ip, ip, #57344	; 0xe000
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80059e6:	bbb5      	cbnz	r5, 8005a56 <HAL_LPTIM_Init+0xae>
  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80059e8:	4332      	orrs	r2, r6
 80059ea:	69e6      	ldr	r6, [r4, #28]
 80059ec:	6925      	ldr	r5, [r4, #16]
 80059ee:	4313      	orrs	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80059f0:	4a2e      	ldr	r2, [pc, #184]	; (8005aac <HAL_LPTIM_Init+0x104>)
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80059f2:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80059f4:	ea0c 0202 	and.w	r2, ip, r2
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80059f8:	4333      	orrs	r3, r6
 80059fa:	432b      	orrs	r3, r5
 80059fc:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80059fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a02:	4290      	cmp	r0, r2
 8005a04:	d002      	beq.n	8005a0c <HAL_LPTIM_Init+0x64>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8005a06:	69a2      	ldr	r2, [r4, #24]
 8005a08:	4310      	orrs	r0, r2
 8005a0a:	4303      	orrs	r3, r0

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005a0c:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_LPTIM_Init+0x108>)
  hlptim->Instance->CFGR = tmpcfgr;
 8005a0e:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005a10:	4291      	cmp	r1, r2
 8005a12:	d016      	beq.n	8005a42 <HAL_LPTIM_Init+0x9a>
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_LPTIM_Init+0x10c>)
 8005a16:	4299      	cmp	r1, r3
 8005a18:	d013      	beq.n	8005a42 <HAL_LPTIM_Init+0x9a>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005a1a:	4b27      	ldr	r3, [pc, #156]	; (8005ab8 <HAL_LPTIM_Init+0x110>)
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	d03c      	beq.n	8005a9a <HAL_LPTIM_Init+0xf2>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a20:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005a22:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a24:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005a2c:	4570      	cmp	r0, lr
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005a2e:	f02c 0806 	bic.w	r8, ip, #6
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005a32:	d024      	beq.n	8005a7e <HAL_LPTIM_Init+0xd6>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005a34:	46c4      	mov	ip, r8
 8005a36:	e7d4      	b.n	80059e2 <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 8005a38:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8005a3c:	f7fd fae4 	bl	8003008 <HAL_LPTIM_MspInit>
 8005a40:	e7bd      	b.n	80059be <HAL_LPTIM_Init+0x16>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005a42:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 8005a46:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a56:	432a      	orrs	r2, r5
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a58:	f8df e060 	ldr.w	lr, [pc, #96]	; 8005abc <HAL_LPTIM_Init+0x114>
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005a5c:	2d01      	cmp	r5, #1
              hlptim->Init.Clock.Prescaler |
 8005a5e:	ea42 0206 	orr.w	r2, r2, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a62:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005a66:	ea43 0302 	orr.w	r3, r3, r2
              hlptim->Init.UpdateMode      |
 8005a6a:	ea43 0307 	orr.w	r3, r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a6e:	ea43 030e 	orr.w	r3, r3, lr
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005a72:	d1c4      	bne.n	80059fe <HAL_LPTIM_Init+0x56>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005a74:	68e2      	ldr	r2, [r4, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	e7c1      	b.n	80059fe <HAL_LPTIM_Init+0x56>
    return HAL_ERROR;
 8005a7a:	2001      	movs	r0, #1
}
 8005a7c:	4770      	bx	lr
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a7e:	f042 0501 	orr.w	r5, r2, #1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a82:	f8df e038 	ldr.w	lr, [pc, #56]	; 8005abc <HAL_LPTIM_Init+0x114>
              hlptim->Init.Clock.Prescaler |
 8005a86:	ea45 0206 	orr.w	r2, r5, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005a8a:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005a8e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005a90:	ea42 0307 	orr.w	r3, r2, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005a94:	ea43 030e 	orr.w	r3, r3, lr
 8005a98:	e7ec      	b.n	8005a74 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005a9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005a9c:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005a9e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aaa:	bf00      	nop
 8005aac:	ff19f120 	.word	0xff19f120
 8005ab0:	40002400 	.word	0x40002400
 8005ab4:	58002400 	.word	0x58002400
 8005ab8:	58002800 	.word	0x58002800
 8005abc:	ff19f1f8 	.word	0xff19f1f8

08005ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	f000 808a 	beq.w	8005bde <HAL_PCD_Init+0x11e>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005aca:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8005ace:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8005ad0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ad2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ad6:	b343      	cbz	r3, 8005b2a <HAL_PCD_Init+0x6a>
 8005ad8:	4628      	mov	r0, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ada:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005adc:	466f      	mov	r7, sp
 8005ade:	1d26      	adds	r6, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ae0:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ae4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ae6:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ae8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 8005aec:	bf08      	it	eq
 8005aee:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8005af0:	f004 f87c 	bl	8009bec <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005af4:	f855 eb10 	ldr.w	lr, [r5], #16
 8005af8:	46ac      	mov	ip, r5
 8005afa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005afe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005b00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005b04:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005b06:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8005b0a:	e887 0003 	stmia.w	r7, {r0, r1}
 8005b0e:	4670      	mov	r0, lr
 8005b10:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005b14:	f003 ff78 	bl	8009a08 <USB_CoreInit>
 8005b18:	4607      	mov	r7, r0
 8005b1a:	b160      	cbz	r0, 8005b36 <HAL_PCD_Init+0x76>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 8005b1c:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b1e:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005b20:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b22:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
}
 8005b26:	b00b      	add	sp, #44	; 0x2c
 8005b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005b2a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8005b2e:	f005 fc71 	bl	800b414 <HAL_PCD_MspInit>
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	e7d1      	b.n	8005ada <HAL_PCD_Init+0x1a>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b36:	4601      	mov	r1, r0
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	f004 f85f 	bl	8009bfc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b3e:	6860      	ldr	r0, [r4, #4]
 8005b40:	b360      	cbz	r0, 8005b9c <HAL_PCD_Init+0xdc>
 8005b42:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005b44:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b48:	463a      	mov	r2, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005b4a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4e:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8005b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 8005b54:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b58:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b5c:	b2f9      	uxtb	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8005b5e:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b62:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b68:	651a      	str	r2, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b6a:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6e:	d3ec      	bcc.n	8005b4a <HAL_PCD_Init+0x8a>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b70:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8005b72:	4611      	mov	r1, r2
 8005b74:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b78:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8005b7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 8005b7e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b82:	b2fa      	uxtb	r2, r7
    hpcd->OUT_ep[i].is_in = 0U;
 8005b84:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b88:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b8a:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b8e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b92:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b96:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9a:	d3eb      	bcc.n	8005b74 <HAL_PCD_Init+0xb4>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b9c:	466f      	mov	r7, sp
 8005b9e:	f8d4 c000 	ldr.w	ip, [r4]
 8005ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ba4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ba8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005baa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005bae:	e887 0003 	stmia.w	r7, {r0, r1}
 8005bb2:	4660      	mov	r0, ip
 8005bb4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8005bb8:	f004 f838 	bl	8009c2c <USB_DevInit>
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d1ac      	bne.n	8005b1c <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 8005bc2:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 8005bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hpcd->USB_Address = 0U;
 8005bc6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 8005bca:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 8005bcc:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8005bd0:	d009      	beq.n	8005be6 <HAL_PCD_Init+0x126>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	f004 fc18 	bl	800a408 <USB_DevDisconnect>
}
 8005bd8:	4628      	mov	r0, r5
 8005bda:	b00b      	add	sp, #44	; 0x2c
 8005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005bde:	2501      	movs	r5, #1
}
 8005be0:	4628      	mov	r0, r5
 8005be2:	b00b      	add	sp, #44	; 0x2c
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 fcdc 	bl	80065a4 <HAL_PCDEx_ActivateLPM>
 8005bec:	e7f1      	b.n	8005bd2 <HAL_PCD_Init+0x112>
 8005bee:	bf00      	nop

08005bf0 <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005bf0:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d01a      	beq.n	8005c2e <HAL_PCD_Start+0x3e>
 8005bf8:	2101      	movs	r1, #1
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bfa:	6a82      	ldr	r2, [r0, #40]	; 0x28
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfc:	6803      	ldr	r3, [r0, #0]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bfe:	428a      	cmp	r2, r1
{
 8005c00:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005c02:	f880 13bc 	strb.w	r1, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c06:	d00a      	beq.n	8005c1e <HAL_PCD_Start+0x2e>
 8005c08:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f004 fbf0 	bl	800a3f0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	f003 ffe3 	bl	8009bdc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005c16:	2000      	movs	r0, #0
 8005c18:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8005c1c:	bd10      	pop	{r4, pc}
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c1e:	6982      	ldr	r2, [r0, #24]
 8005c20:	428a      	cmp	r2, r1
 8005c22:	d0f1      	beq.n	8005c08 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c2c:	e7ec      	b.n	8005c08 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8005c2e:	2002      	movs	r0, #2
}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop

08005c34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c38:	6806      	ldr	r6, [r0, #0]
{
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f004 fc20 	bl	800a484 <USB_GetMode>
 8005c44:	b110      	cbz	r0, 8005c4c <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 8005c46:	b009      	add	sp, #36	; 0x24
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	4605      	mov	r5, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	f004 fbe6 	bl	800a420 <USB_ReadInterrupts>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d0f6      	beq.n	8005c46 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	f004 fbe1 	bl	800a420 <USB_ReadInterrupts>
 8005c5e:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c62:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c64:	d003      	beq.n	8005c6e <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c66:	6943      	ldr	r3, [r0, #20]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c6e:	f004 fbd7 	bl	800a420 <USB_ReadInterrupts>
 8005c72:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c76:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c78:	d011      	beq.n	8005c9e <HAL_PCD_IRQHandler+0x6a>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c7a:	6983      	ldr	r3, [r0, #24]
 8005c7c:	f023 0310 	bic.w	r3, r3, #16
 8005c80:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 8005c82:	6a37      	ldr	r7, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c84:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005c88:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d07d      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x158>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005c90:	2b06      	cmp	r3, #6
 8005c92:	f000 82ae 	beq.w	80061f2 <HAL_PCD_IRQHandler+0x5be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c96:	6983      	ldr	r3, [r0, #24]
 8005c98:	f043 0310 	orr.w	r3, r3, #16
 8005c9c:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c9e:	f004 fbbf 	bl	800a420 <USB_ReadInterrupts>
 8005ca2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005ca6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ca8:	f040 8169 	bne.w	8005f7e <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005cac:	f004 fbb8 	bl	800a420 <USB_ReadInterrupts>
 8005cb0:	0347      	lsls	r7, r0, #13
 8005cb2:	f100 80a8 	bmi.w	8005e06 <HAL_PCD_IRQHandler+0x1d2>
 8005cb6:	f8d4 b000 	ldr.w	fp, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cba:	4658      	mov	r0, fp
 8005cbc:	f004 fbb0 	bl	800a420 <USB_ReadInterrupts>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	f2c0 8083 	blt.w	8005dcc <HAL_PCD_IRQHandler+0x198>
 8005cc6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005cc8:	f004 fbaa 	bl	800a420 <USB_ReadInterrupts>
 8005ccc:	0500      	lsls	r0, r0, #20
 8005cce:	d44a      	bmi.n	8005d66 <HAL_PCD_IRQHandler+0x132>
 8005cd0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005cd2:	f004 fba5 	bl	800a420 <USB_ReadInterrupts>
 8005cd6:	0102      	lsls	r2, r0, #4
 8005cd8:	d513      	bpl.n	8005d02 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005cda:	6822      	ldr	r2, [r4, #0]
      if (hpcd->LPM_State == LPM_L0)
 8005cdc:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005ce0:	6953      	ldr	r3, [r2, #20]
 8005ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d146      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x146>
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cec:	6d53      	ldr	r3, [r2, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8005cee:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cf0:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cf2:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8005cf6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cfa:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cfe:	f000 fc67 	bl	80065d0 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	f004 fb8c 	bl	800a420 <USB_ReadInterrupts>
 8005d08:	04c3      	lsls	r3, r0, #19
 8005d0a:	f100 8191 	bmi.w	8006030 <HAL_PCD_IRQHandler+0x3fc>
 8005d0e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d10:	f004 fb86 	bl	800a420 <USB_ReadInterrupts>
 8005d14:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d18:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d1a:	f040 8172 	bne.w	8006002 <HAL_PCD_IRQHandler+0x3ce>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d1e:	f004 fb7f 	bl	800a420 <USB_ReadInterrupts>
 8005d22:	0707      	lsls	r7, r0, #28
 8005d24:	f100 8164 	bmi.w	8005ff0 <HAL_PCD_IRQHandler+0x3bc>
 8005d28:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d2a:	f004 fb79 	bl	800a420 <USB_ReadInterrupts>
 8005d2e:	02c6      	lsls	r6, r0, #11
 8005d30:	f100 81d9 	bmi.w	80060e6 <HAL_PCD_IRQHandler+0x4b2>
 8005d34:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d36:	f004 fb73 	bl	800a420 <USB_ReadInterrupts>
 8005d3a:	0285      	lsls	r5, r0, #10
 8005d3c:	f100 81c9 	bmi.w	80060d2 <HAL_PCD_IRQHandler+0x49e>
 8005d40:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d42:	f004 fb6d 	bl	800a420 <USB_ReadInterrupts>
 8005d46:	0040      	lsls	r0, r0, #1
 8005d48:	d454      	bmi.n	8005df4 <HAL_PCD_IRQHandler+0x1c0>
 8005d4a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d4c:	f004 fb68 	bl	800a420 <USB_ReadInterrupts>
 8005d50:	0741      	lsls	r1, r0, #29
 8005d52:	f57f af78 	bpl.w	8005c46 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d5a:	076a      	lsls	r2, r5, #29
 8005d5c:	d411      	bmi.n	8005d82 <HAL_PCD_IRQHandler+0x14e>
      hpcd->Instance->GOTGINT |= temp;
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	432a      	orrs	r2, r5
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	e76f      	b.n	8005c46 <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d66:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8005d6a:	07d9      	lsls	r1, r3, #31
 8005d6c:	d42a      	bmi.n	8005dc4 <HAL_PCD_IRQHandler+0x190>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	6943      	ldr	r3, [r0, #20]
 8005d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d76:	6143      	str	r3, [r0, #20]
 8005d78:	e7ab      	b.n	8005cd2 <HAL_PCD_IRQHandler+0x9e>
        HAL_PCD_SuspendCallback(hpcd);
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f005 fbc2 	bl	800b504 <HAL_PCD_SuspendCallback>
 8005d80:	e7bf      	b.n	8005d02 <HAL_PCD_IRQHandler+0xce>
        HAL_PCD_DisconnectCallback(hpcd);
 8005d82:	4620      	mov	r0, r4
 8005d84:	f005 fbe6 	bl	800b554 <HAL_PCD_DisconnectCallback>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	e7e8      	b.n	8005d5e <HAL_PCD_IRQHandler+0x12a>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d90:	421f      	tst	r7, r3
 8005d92:	d080      	beq.n	8005c96 <HAL_PCD_IRQHandler+0x62>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d94:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8005d98:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8005da2:	463a      	mov	r2, r7
 8005da4:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8005da8:	f004 faa0 	bl	800a2ec <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dac:	f8d8 2208 	ldr.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005db0:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005db4:	443a      	add	r2, r7
 8005db6:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005db8:	441f      	add	r7, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dba:	f8c8 2208 	str.w	r2, [r8, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dbe:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
 8005dc2:	e768      	b.n	8005c96 <HAL_PCD_IRQHandler+0x62>
        HAL_PCD_SuspendCallback(hpcd);
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f005 fb9d 	bl	800b504 <HAL_PCD_SuspendCallback>
 8005dca:	e7d0      	b.n	8005d6e <HAL_PCD_IRQHandler+0x13a>
      if (hpcd->LPM_State == LPM_L1)
 8005dcc:	f894 13f4 	ldrb.w	r1, [r4, #1012]	; 0x3f4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dd0:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8005dd4:	2901      	cmp	r1, #1
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	f8c6 2804 	str.w	r2, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8005dde:	f000 81dc 	beq.w	800619a <HAL_PCD_IRQHandler+0x566>
        HAL_PCD_ResumeCallback(hpcd);
 8005de2:	4620      	mov	r0, r4
 8005de4:	f005 fba6 	bl	800b534 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	6943      	ldr	r3, [r0, #20]
 8005dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df0:	6143      	str	r3, [r0, #20]
 8005df2:	e769      	b.n	8005cc8 <HAL_PCD_IRQHandler+0x94>
      HAL_PCD_ConnectCallback(hpcd);
 8005df4:	4620      	mov	r0, r4
 8005df6:	f005 fba9 	bl	800b54c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	6943      	ldr	r3, [r0, #20]
 8005dfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e02:	6143      	str	r3, [r0, #20]
 8005e04:	e7a2      	b.n	8005d4c <HAL_PCD_IRQHandler+0x118>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e06:	6820      	ldr	r0, [r4, #0]
 8005e08:	f004 fb16 	bl	800a438 <USB_ReadDevAllInEpInterrupt>
 8005e0c:	f8d4 b000 	ldr.w	fp, [r4]
      while (ep_intr != 0U)
 8005e10:	4681      	mov	r9, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f43f af51 	beq.w	8005cba <HAL_PCD_IRQHandler+0x86>
 8005e18:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 8005e1c:	46a0      	mov	r8, r4
      epnum = 0U;
 8005e1e:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e22:	9505      	str	r5, [sp, #20]
 8005e24:	e9cd 3603 	strd	r3, r6, [sp, #12]
 8005e28:	e007      	b.n	8005e3a <HAL_PCD_IRQHandler+0x206>
      while (ep_intr != 0U)
 8005e2a:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 8005e2e:	f10a 0a01 	add.w	sl, sl, #1
 8005e32:	f108 081c 	add.w	r8, r8, #28
      while (ep_intr != 0U)
 8005e36:	f000 8160 	beq.w	80060fa <HAL_PCD_IRQHandler+0x4c6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e3a:	f019 0f01 	tst.w	r9, #1
 8005e3e:	d0f4      	beq.n	8005e2a <HAL_PCD_IRQHandler+0x1f6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e40:	fa5f f68a 	uxtb.w	r6, sl
 8005e44:	4658      	mov	r0, fp
 8005e46:	4631      	mov	r1, r6
 8005e48:	f004 fb08 	bl	800a45c <USB_ReadDevInEPInterrupt>
 8005e4c:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e4e:	07e8      	lsls	r0, r5, #31
 8005e50:	d518      	bpl.n	8005e84 <HAL_PCD_IRQHandler+0x250>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e52:	9b04      	ldr	r3, [sp, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e54:	2701      	movs	r7, #1
 8005e56:	f00a 010f 	and.w	r1, sl, #15
 8005e5a:	9a03      	ldr	r2, [sp, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e5c:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e60:	fa07 f101 	lsl.w	r1, r7, r1
 8005e64:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e68:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 8005e6c:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e6e:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 8005e72:	42b9      	cmp	r1, r7
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e74:	4613      	mov	r3, r2
 8005e76:	609f      	str	r7, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8005e78:	f000 8196 	beq.w	80061a8 <HAL_PCD_IRQHandler+0x574>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f005 fb1c 	bl	800b4bc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e84:	0729      	lsls	r1, r5, #28
 8005e86:	d504      	bpl.n	8005e92 <HAL_PCD_IRQHandler+0x25e>
 8005e88:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8005e90:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e92:	06ea      	lsls	r2, r5, #27
 8005e94:	d504      	bpl.n	8005ea0 <HAL_PCD_IRQHandler+0x26c>
 8005e96:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e98:	2210      	movs	r2, #16
 8005e9a:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8005e9e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ea0:	066b      	lsls	r3, r5, #25
 8005ea2:	d504      	bpl.n	8005eae <HAL_PCD_IRQHandler+0x27a>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ea6:	2240      	movs	r2, #64	; 0x40
 8005ea8:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8005eac:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005eae:	07af      	lsls	r7, r5, #30
 8005eb0:	d504      	bpl.n	8005ebc <HAL_PCD_IRQHandler+0x288>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	6827      	ldr	r7, [r4, #0]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ebe:	062d      	lsls	r5, r5, #24
 8005ec0:	46bb      	mov	fp, r7
 8005ec2:	d5b2      	bpl.n	8005e2a <HAL_PCD_IRQHandler+0x1f6>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8005ec4:	e9d8 2314 	ldrd	r2, r3, [r8, #80]	; 0x50
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d8ae      	bhi.n	8005e2a <HAL_PCD_IRQHandler+0x1f6>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ecc:	1ad5      	subs	r5, r2, r3

  if (len > ep->maxpacket)
 8005ece:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ed2:	f507 6110 	add.w	r1, r7, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8005ed6:	4285      	cmp	r5, r0
 8005ed8:	46ac      	mov	ip, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eda:	eb01 114a 	add.w	r1, r1, sl, lsl #5
  len32b = (len + 3U) / 4U;
 8005ede:	bf28      	it	cs
 8005ee0:	4684      	movcs	ip, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ee2:	9106      	str	r1, [sp, #24]
 8005ee4:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 8005ee6:	f10c 0c03 	add.w	ip, ip, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eea:	b289      	uxth	r1, r1
 8005eec:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
 8005ef0:	d335      	bcc.n	8005f5e <HAL_PCD_IRQHandler+0x32a>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ef2:	b3a2      	cbz	r2, 8005f5e <HAL_PCD_IRQHandler+0x32a>
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d232      	bcs.n	8005f5e <HAL_PCD_IRQHandler+0x32a>
 8005ef8:	f8cd a01c 	str.w	sl, [sp, #28]
 8005efc:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 8005f00:	f8dd a018 	ldr.w	sl, [sp, #24]
 8005f04:	e00b      	b.n	8005f1e <HAL_PCD_IRQHandler+0x2ea>
 8005f06:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	eba2 0503 	sub.w	r5, r2, r3
 8005f10:	f240 8182 	bls.w	8006218 <HAL_PCD_IRQHandler+0x5e4>
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	f000 817f 	beq.w	8006218 <HAL_PCD_IRQHandler+0x5e4>
 8005f1a:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8005f1e:	4285      	cmp	r5, r0
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f20:	4632      	mov	r2, r6
 8005f22:	bf28      	it	cs
 8005f24:	4605      	movcs	r5, r0
 8005f26:	7c20      	ldrb	r0, [r4, #16]
 8005f28:	b2ab      	uxth	r3, r5
 8005f2a:	9000      	str	r0, [sp, #0]
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f004 f9c7 	bl	800a2c0 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f32:	f8da 2018 	ldr.w	r2, [sl, #24]
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8005f36:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 8005f3a:	1ce8      	adds	r0, r5, #3
    ep->xfer_count += len;
 8005f3c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f40:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 8005f42:	4429      	add	r1, r5
    ep->xfer_count += len;
 8005f44:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f46:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 8005f4a:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
    ep->xfer_count += len;
 8005f4e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f52:	d2d8      	bcs.n	8005f06 <HAL_PCD_IRQHandler+0x2d2>
 8005f54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f58:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 8005f5c:	6827      	ldr	r7, [r4, #0]
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	f200 815e 	bhi.w	8006220 <HAL_PCD_IRQHandler+0x5ec>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f64:	f50b 6100 	add.w	r1, fp, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f68:	f00a 020f 	and.w	r2, sl, #15
 8005f6c:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f6e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005f70:	46bb      	mov	fp, r7
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f72:	fa00 f202 	lsl.w	r2, r0, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f76:	ea23 0302 	bic.w	r3, r3, r2
 8005f7a:	634b      	str	r3, [r1, #52]	; 0x34
 8005f7c:	e755      	b.n	8005e2a <HAL_PCD_IRQHandler+0x1f6>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f7e:	f004 fa53 	bl	800a428 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 8005f82:	4607      	mov	r7, r0
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	2f00      	cmp	r7, #0
 8005f88:	f43f ae90 	beq.w	8005cac <HAL_PCD_IRQHandler+0x78>
      epnum = 0U;
 8005f8c:	f04f 0800 	mov.w	r8, #0
 8005f90:	f506 6a30 	add.w	sl, r6, #2816	; 0xb00
 8005f94:	e004      	b.n	8005fa0 <HAL_PCD_IRQHandler+0x36c>
      while (ep_intr != 0U)
 8005f96:	087f      	lsrs	r7, r7, #1
        epnum++;
 8005f98:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 8005f9c:	f43f ae86 	beq.w	8005cac <HAL_PCD_IRQHandler+0x78>
        if ((ep_intr & 0x1U) != 0U)
 8005fa0:	07f9      	lsls	r1, r7, #31
 8005fa2:	d5f8      	bpl.n	8005f96 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fa4:	fa5f fb88 	uxtb.w	fp, r8
 8005fa8:	4659      	mov	r1, fp
 8005faa:	f004 fa4d 	bl	800a448 <USB_ReadDevOutEPInterrupt>
 8005fae:	4681      	mov	r9, r0
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb0:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005fb2:	f019 0f01 	tst.w	r9, #1
 8005fb6:	f040 80a3 	bne.w	8006100 <HAL_PCD_IRQHandler+0x4cc>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005fba:	f019 0f08 	tst.w	r9, #8
 8005fbe:	f040 80c4 	bne.w	800614a <HAL_PCD_IRQHandler+0x516>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fc2:	f019 0f10 	tst.w	r9, #16
 8005fc6:	d003      	beq.n	8005fd0 <HAL_PCD_IRQHandler+0x39c>
 8005fc8:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005fcc:	2210      	movs	r2, #16
 8005fce:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fd0:	f019 0f20 	tst.w	r9, #32
 8005fd4:	d003      	beq.n	8005fde <HAL_PCD_IRQHandler+0x3aa>
 8005fd6:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fda:	2220      	movs	r2, #32
 8005fdc:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fde:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8005fe2:	d0d8      	beq.n	8005f96 <HAL_PCD_IRQHandler+0x362>
 8005fe4:	eb0a 1348 	add.w	r3, sl, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fec:	609a      	str	r2, [r3, #8]
 8005fee:	e7d2      	b.n	8005f96 <HAL_PCD_IRQHandler+0x362>
      HAL_PCD_SOFCallback(hpcd);
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f005 fa6d 	bl	800b4d0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ff6:	6820      	ldr	r0, [r4, #0]
 8005ff8:	6943      	ldr	r3, [r0, #20]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	6143      	str	r3, [r0, #20]
 8006000:	e693      	b.n	8005d2a <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8006002:	f004 fa43 	bl	800a48c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	f003 ff06 	bl	8009e18 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800600c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800600e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006010:	f001 f80c 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8006014:	7b22      	ldrb	r2, [r4, #12]
 8006016:	4601      	mov	r1, r0
 8006018:	4628      	mov	r0, r5
 800601a:	f003 fd5f 	bl	8009adc <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800601e:	4620      	mov	r0, r4
 8006020:	f005 fa5a 	bl	800b4d8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	6943      	ldr	r3, [r0, #20]
 8006028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602c:	6143      	str	r3, [r0, #20]
 800602e:	e676      	b.n	8005d1e <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006030:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8006034:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006040:	f003 fed8 	bl	8009df4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006044:	6860      	ldr	r0, [r4, #4]
 8006046:	b308      	cbz	r0, 800608c <HAL_PCD_IRQHandler+0x458>
 8006048:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800604c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8006050:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006052:	3501      	adds	r5, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006058:	4285      	cmp	r5, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800605a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800605e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006062:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8006066:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800606a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800606e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006072:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8006076:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800607a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800607e:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8006082:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006086:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800608a:	d1e1      	bne.n	8006050 <HAL_PCD_IRQHandler+0x41c>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800608c:	69fb      	ldr	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800608e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006090:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006094:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006096:	2a00      	cmp	r2, #0
 8006098:	d075      	beq.n	8006186 <HAL_PCD_IRQHandler+0x552>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800609a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800609e:	f043 030b 	orr.w	r3, r3, #11
 80060a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80060a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a8:	f043 030b 	orr.w	r3, r3, #11
 80060ac:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060ae:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060b2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80060b6:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060bc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060be:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060c2:	f004 f9f9 	bl	800a4b8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	6943      	ldr	r3, [r0, #20]
 80060ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ce:	6143      	str	r3, [r0, #20]
 80060d0:	e61e      	b.n	8005d10 <HAL_PCD_IRQHandler+0xdc>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80060d2:	4620      	mov	r0, r4
 80060d4:	2100      	movs	r1, #0
 80060d6:	f005 fa31 	bl	800b53c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	6943      	ldr	r3, [r0, #20]
 80060de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e2:	6143      	str	r3, [r0, #20]
 80060e4:	e62d      	b.n	8005d42 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060e6:	4620      	mov	r0, r4
 80060e8:	2100      	movs	r1, #0
 80060ea:	f005 fa2b 	bl	800b544 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	6943      	ldr	r3, [r0, #20]
 80060f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f6:	6143      	str	r3, [r0, #20]
 80060f8:	e61d      	b.n	8005d36 <HAL_PCD_IRQHandler+0x102>
 80060fa:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
 80060fe:	e5dc      	b.n	8005cba <HAL_PCD_IRQHandler+0x86>
 8006100:	ea4f 1348 	mov.w	r3, r8, lsl #5
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 8006104:	6922      	ldr	r2, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006106:	f500 6e30 	add.w	lr, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800610a:	f04f 0c01 	mov.w	ip, #1
 800610e:	eb0a 0103 	add.w	r1, sl, r3
  if (hpcd->Init.dma_enable == 1U)
 8006112:	2a01      	cmp	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006114:	4473      	add	r3, lr
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006116:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800611a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800611e:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 8006120:	d05a      	beq.n	80061d8 <HAL_PCD_IRQHandler+0x5a4>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006122:	4a5e      	ldr	r2, [pc, #376]	; (800629c <HAL_PCD_IRQHandler+0x668>)
 8006124:	4594      	cmp	ip, r2
 8006126:	d07d      	beq.n	8006224 <HAL_PCD_IRQHandler+0x5f0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006128:	f1b8 0f00 	cmp.w	r8, #0
 800612c:	d107      	bne.n	800613e <HAL_PCD_IRQHandler+0x50a>
 800612e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006132:	b923      	cbnz	r3, 800613e <HAL_PCD_IRQHandler+0x50a>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006134:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006138:	4641      	mov	r1, r8
 800613a:	f004 f9bd 	bl	800a4b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800613e:	4620      	mov	r0, r4
 8006140:	4659      	mov	r1, fp
 8006142:	f005 f9b1 	bl	800b4a8 <HAL_PCD_DataOutStageCallback>
 8006146:	6820      	ldr	r0, [r4, #0]
 8006148:	e737      	b.n	8005fba <HAL_PCD_IRQHandler+0x386>
 800614a:	ea4f 1348 	mov.w	r3, r8, lsl #5
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800614e:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006152:	f04f 0c08 	mov.w	ip, #8
 8006156:	eb0a 0103 	add.w	r1, sl, r3
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800615a:	4413      	add	r3, r2
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800615c:	f8c1 c008 	str.w	ip, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006160:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006162:	484f      	ldr	r0, [pc, #316]	; (80062a0 <HAL_PCD_IRQHandler+0x66c>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006164:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006166:	4282      	cmp	r2, r0
 8006168:	d931      	bls.n	80061ce <HAL_PCD_IRQHandler+0x59a>
 800616a:	040a      	lsls	r2, r1, #16
 800616c:	d502      	bpl.n	8006174 <HAL_PCD_IRQHandler+0x540>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800616e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006172:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006174:	4620      	mov	r0, r4
 8006176:	f005 f991 	bl	800b49c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800617a:	6921      	ldr	r1, [r4, #16]
 800617c:	2901      	cmp	r1, #1
 800617e:	f000 8084 	beq.w	800628a <HAL_PCD_IRQHandler+0x656>
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	e71d      	b.n	8005fc2 <HAL_PCD_IRQHandler+0x38e>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	f242 032b 	movw	r3, #8235	; 0x202b
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f043 030b 	orr.w	r3, r3, #11
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	e789      	b.n	80060ae <HAL_PCD_IRQHandler+0x47a>
        hpcd->LPM_State = LPM_L0;
 800619a:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800619c:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800619e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061a2:	f000 fa15 	bl	80065d0 <HAL_PCDEx_LPM_Callback>
 80061a6:	e61f      	b.n	8005de8 <HAL_PCD_IRQHandler+0x1b4>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80061a8:	e9d8 2311 	ldrd	r2, r3, [r8, #68]	; 0x44
 80061ac:	4413      	add	r3, r2
 80061ae:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80061b2:	f1ba 0f00 	cmp.w	sl, #0
 80061b6:	f47f ae61 	bne.w	8005e7c <HAL_PCD_IRQHandler+0x248>
 80061ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f47f ae5d 	bne.w	8005e7c <HAL_PCD_IRQHandler+0x248>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061c2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80061c6:	6820      	ldr	r0, [r4, #0]
 80061c8:	f004 f976 	bl	800a4b8 <USB_EP0_OutStart>
 80061cc:	e656      	b.n	8005e7c <HAL_PCD_IRQHandler+0x248>
  HAL_PCD_SetupStageCallback(hpcd);
 80061ce:	4620      	mov	r0, r4
 80061d0:	f005 f964 	bl	800b49c <HAL_PCD_SetupStageCallback>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	e6f4      	b.n	8005fc2 <HAL_PCD_IRQHandler+0x38e>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80061d8:	070a      	lsls	r2, r1, #28
 80061da:	d52a      	bpl.n	8006232 <HAL_PCD_IRQHandler+0x5fe>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061dc:	4a30      	ldr	r2, [pc, #192]	; (80062a0 <HAL_PCD_IRQHandler+0x66c>)
 80061de:	4594      	cmp	ip, r2
 80061e0:	f67f aeeb 	bls.w	8005fba <HAL_PCD_IRQHandler+0x386>
 80061e4:	0409      	lsls	r1, r1, #16
 80061e6:	f57f aee8 	bpl.w	8005fba <HAL_PCD_IRQHandler+0x386>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80061ee:	609a      	str	r2, [r3, #8]
 80061f0:	e6e3      	b.n	8005fba <HAL_PCD_IRQHandler+0x386>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061f2:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80061f6:	2208      	movs	r2, #8
 80061f8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80061fc:	4630      	mov	r0, r6
 80061fe:	f004 f875 	bl	800a2ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006202:	f3c7 130a 	ubfx	r3, r7, #4, #11
 8006206:	eb04 0288 	add.w	r2, r4, r8, lsl #2
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006210:	440b      	add	r3, r1
 8006212:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8006216:	e53e      	b.n	8005c96 <HAL_PCD_IRQHandler+0x62>
 8006218:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800621c:	6827      	ldr	r7, [r4, #0]
 800621e:	e69e      	b.n	8005f5e <HAL_PCD_IRQHandler+0x32a>
 8006220:	46bb      	mov	fp, r7
 8006222:	e602      	b.n	8005e2a <HAL_PCD_IRQHandler+0x1f6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006224:	040a      	lsls	r2, r1, #16
 8006226:	d4e0      	bmi.n	80061ea <HAL_PCD_IRQHandler+0x5b6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006228:	0689      	lsls	r1, r1, #26
 800622a:	d588      	bpl.n	800613e <HAL_PCD_IRQHandler+0x50a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800622c:	2220      	movs	r2, #32
 800622e:	609a      	str	r2, [r3, #8]
 8006230:	e785      	b.n	800613e <HAL_PCD_IRQHandler+0x50a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006232:	068a      	lsls	r2, r1, #26
 8006234:	d42f      	bmi.n	8006296 <HAL_PCD_IRQHandler+0x662>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006236:	f011 0f28 	tst.w	r1, #40	; 0x28
 800623a:	f47f aebe 	bne.w	8005fba <HAL_PCD_IRQHandler+0x386>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800623e:	4a18      	ldr	r2, [pc, #96]	; (80062a0 <HAL_PCD_IRQHandler+0x66c>)
 8006240:	4594      	cmp	ip, r2
 8006242:	d901      	bls.n	8006248 <HAL_PCD_IRQHandler+0x614>
 8006244:	0409      	lsls	r1, r1, #16
 8006246:	d4d0      	bmi.n	80061ea <HAL_PCD_IRQHandler+0x5b6>
 8006248:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800624c:	6919      	ldr	r1, [r3, #16]
 800624e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006252:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800625a:	eba2 0c01 	sub.w	ip, r2, r1
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800625e:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006262:	440a      	add	r2, r1
        hpcd->OUT_ep[epnum].xfer_count =
 8006264:	f8c3 c214 	str.w	ip, [r3, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006268:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800626c:	f1b8 0f00 	cmp.w	r8, #0
 8006270:	f47f af65 	bne.w	800613e <HAL_PCD_IRQHandler+0x50a>
 8006274:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8006278:	2b00      	cmp	r3, #0
 800627a:	f47f af60 	bne.w	800613e <HAL_PCD_IRQHandler+0x50a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800627e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8006282:	2101      	movs	r1, #1
 8006284:	f004 f918 	bl	800a4b8 <USB_EP0_OutStart>
 8006288:	e759      	b.n	800613e <HAL_PCD_IRQHandler+0x50a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800628a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	f004 f912 	bl	800a4b8 <USB_EP0_OutStart>
 8006294:	e775      	b.n	8006182 <HAL_PCD_IRQHandler+0x54e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006296:	2220      	movs	r2, #32
 8006298:	609a      	str	r2, [r3, #8]
 800629a:	e68e      	b.n	8005fba <HAL_PCD_IRQHandler+0x386>
 800629c:	4f54310a 	.word	0x4f54310a
 80062a0:	4f54300a 	.word	0x4f54300a

080062a4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80062a4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	d00d      	beq.n	80062c8 <HAL_PCD_SetAddress+0x24>
 80062ac:	2201      	movs	r2, #1
{
 80062ae:	b510      	push	{r4, lr}
 80062b0:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 80062b2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062b6:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 80062b8:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062bc:	f004 f886 	bl	800a3cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062c0:	2000      	movs	r0, #0
 80062c2:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80062c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80062c8:	2002      	movs	r0, #2
}
 80062ca:	4770      	bx	lr

080062cc <HAL_PCD_EP_Open>:
{
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	f001 040f 	and.w	r4, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80062d2:	0609      	lsls	r1, r1, #24
 80062d4:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80062d8:	ea4f 0585 	mov.w	r5, r5, lsl #2
 80062dc:	d422      	bmi.n	8006324 <HAL_PCD_EP_Open+0x58>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062de:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
    ep->is_in = 0U;
 80062e2:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80062e6:	2600      	movs	r6, #0
 80062e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062ec:	4401      	add	r1, r0
    ep->is_in = 0U;
 80062ee:	f885 61fd 	strb.w	r6, [r5, #509]	; 0x1fd
  if (ep->is_in != 0U)
 80062f2:	784d      	ldrb	r5, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062f4:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80062f6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80062f8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80062fa:	b105      	cbz	r5, 80062fe <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 80062fc:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d101      	bne.n	8006306 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8006306:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800630a:	2b01      	cmp	r3, #1
 800630c:	d015      	beq.n	800633a <HAL_PCD_EP_Open+0x6e>
 800630e:	4604      	mov	r4, r0
 8006310:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006312:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8006314:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006318:	f003 fd8a 	bl	8009e30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800631c:	2000      	movs	r0, #0
 800631e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8006324:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006328:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    ep->is_in = 1U;
 800632c:	2701      	movs	r7, #1
 800632e:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006332:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006334:	f885 703d 	strb.w	r7, [r5, #61]	; 0x3d
 8006338:	e7db      	b.n	80062f2 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800633a:	2002      	movs	r0, #2
}
 800633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633e:	bf00      	nop

08006340 <HAL_PCD_EP_Close>:
{
 8006340:	f001 020f 	and.w	r2, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8006344:	0609      	lsls	r1, r1, #24
{
 8006346:	b538      	push	{r3, r4, r5, lr}
 8006348:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800634c:	ea4f 0383 	mov.w	r3, r3, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8006350:	d419      	bmi.n	8006386 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006352:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8006356:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800635a:	2400      	movs	r4, #0
 800635c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006360:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006362:	f883 41fd 	strb.w	r4, [r3, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006366:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006368:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800636c:	2b01      	cmp	r3, #1
 800636e:	d019      	beq.n	80063a4 <HAL_PCD_EP_Close+0x64>
 8006370:	4604      	mov	r4, r0
 8006372:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006374:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8006376:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800637a:	f003 fd9b 	bl	8009eb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800637e:	2000      	movs	r0, #0
 8006380:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006384:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006386:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800638a:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 800638e:	2501      	movs	r5, #1
 8006390:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006394:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006396:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800639a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800639c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d1e5      	bne.n	8006370 <HAL_PCD_EP_Close+0x30>
 80063a4:	2002      	movs	r0, #2
}
 80063a6:	bd38      	pop	{r3, r4, r5, pc}

080063a8 <HAL_PCD_EP_Receive>:
{
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 80063ae:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063b0:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 80063b2:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063b6:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 80063ba:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063be:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 80063c2:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 80063c6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ca:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 80063ce:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80063d2:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 80063d6:	6903      	ldr	r3, [r0, #16]
 80063d8:	6800      	ldr	r0, [r0, #0]
 80063da:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80063dc:	bf08      	it	eq
 80063de:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80063e2:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063e4:	b11d      	cbz	r5, 80063ee <HAL_PCD_EP_Receive+0x46>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063e6:	f003 fdc5 	bl	8009f74 <USB_EPStartXfer>
}
 80063ea:	2000      	movs	r0, #0
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063ee:	f003 fedd 	bl	800a1ac <USB_EP0StartXfer>
}
 80063f2:	2000      	movs	r0, #0
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
 80063f6:	bf00      	nop

080063f8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063f8:	f001 010f 	and.w	r1, r1, #15
 80063fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006400:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8006404:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop

0800640c <HAL_PCD_EP_Transmit>:
{
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 8006412:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8006414:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006416:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 8006418:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800641c:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 8006420:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006424:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 8006426:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8006428:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 800642a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800642e:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8006430:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8006434:	6903      	ldr	r3, [r0, #16]
 8006436:	6800      	ldr	r0, [r0, #0]
 8006438:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800643a:	bf08      	it	eq
 800643c:	64e2      	streq	r2, [r4, #76]	; 0x4c
 800643e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006440:	b11d      	cbz	r5, 800644a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006442:	f003 fd97 	bl	8009f74 <USB_EPStartXfer>
}
 8006446:	2000      	movs	r0, #0
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800644a:	f003 feaf 	bl	800a1ac <USB_EP0StartXfer>
}
 800644e:	2000      	movs	r0, #0
 8006450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006452:	bf00      	nop

08006454 <HAL_PCD_EP_SetStall>:
{
 8006454:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006456:	6843      	ldr	r3, [r0, #4]
 8006458:	f001 050f 	and.w	r5, r1, #15
 800645c:	429d      	cmp	r5, r3
 800645e:	d81f      	bhi.n	80064a0 <HAL_PCD_EP_SetStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 8006460:	060b      	lsls	r3, r1, #24
 8006462:	d41f      	bmi.n	80064a4 <HAL_PCD_EP_SetStall+0x50>
    ep->is_in = 0U;
 8006464:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 8006468:	241c      	movs	r4, #28
    ep->is_in = 0U;
 800646a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800646c:	fb04 0101 	mla	r1, r4, r1, r0
    ep->is_in = 0U;
 8006470:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 8006474:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8006478:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800647c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800647e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006480:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006482:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8006486:	429a      	cmp	r2, r3
 8006488:	d01e      	beq.n	80064c8 <HAL_PCD_EP_SetStall+0x74>
 800648a:	4604      	mov	r4, r0
 800648c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006490:	6800      	ldr	r0, [r0, #0]
 8006492:	f003 ff3f 	bl	800a314 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006496:	b1cd      	cbz	r5, 80064cc <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 8006498:	2000      	movs	r0, #0
 800649a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800649e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80064a0:	2001      	movs	r0, #1
}
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064a4:	211c      	movs	r1, #28
    ep->is_in = 1U;
 80064a6:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80064aa:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ac:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 80064b0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b4:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 80064ba:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80064bc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80064be:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80064c0:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1e0      	bne.n	800648a <HAL_PCD_EP_SetStall+0x36>
 80064c8:	2002      	movs	r0, #2
}
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80064cc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80064d0:	7c21      	ldrb	r1, [r4, #16]
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	f003 fff0 	bl	800a4b8 <USB_EP0_OutStart>
 80064d8:	e7de      	b.n	8006498 <HAL_PCD_EP_SetStall+0x44>
 80064da:	bf00      	nop

080064dc <HAL_PCD_EP_ClrStall>:
{
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80064e2:	6843      	ldr	r3, [r0, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d821      	bhi.n	800652c <HAL_PCD_EP_ClrStall+0x50>
 80064e8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 80064ec:	0609      	lsls	r1, r1, #24
 80064ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80064f2:	d41d      	bmi.n	8006530 <HAL_PCD_EP_ClrStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064f4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80064f8:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80064fc:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064fe:	18c1      	adds	r1, r0, r3
    ep->is_in = 0U;
 8006500:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8006504:	f883 51fd 	strb.w	r5, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8006508:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800650a:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800650c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800650e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006512:	2b01      	cmp	r3, #1
 8006514:	d01c      	beq.n	8006550 <HAL_PCD_EP_ClrStall+0x74>
 8006516:	4604      	mov	r4, r0
 8006518:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800651a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800651c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006520:	f003 ff28 	bl	800a374 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006524:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8006528:	4628      	mov	r0, r5
}
 800652a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800652c:	2001      	movs	r0, #1
}
 800652e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006530:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006534:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8006536:	2501      	movs	r5, #1
 8006538:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800653c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800653e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  ep->is_stall = 0U;
 8006542:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8006544:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8006546:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8006548:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800654c:	2b01      	cmp	r3, #1
 800654e:	d1e2      	bne.n	8006516 <HAL_PCD_EP_ClrStall+0x3a>
 8006550:	2002      	movs	r0, #2
}
 8006552:	bd38      	pop	{r3, r4, r5, pc}

08006554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006554:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006556:	6805      	ldr	r5, [r0, #0]
 8006558:	0412      	lsls	r2, r2, #16
 800655a:	6a6c      	ldr	r4, [r5, #36]	; 0x24

  if (fifo == 0U)
 800655c:	b1c1      	cbz	r1, 8006590 <HAL_PCDEx_SetTxFiFo+0x3c>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800655e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8006560:	3901      	subs	r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006562:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006566:	d00b      	beq.n	8006580 <HAL_PCDEx_SetTxFiFo+0x2c>
 8006568:	2300      	movs	r3, #0
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800656a:	f103 0040 	add.w	r0, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800656e:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006570:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 8006574:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006576:	6840      	ldr	r0, [r0, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 8006578:	428b      	cmp	r3, r1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800657a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800657e:	d3f4      	bcc.n	800656a <HAL_PCDEx_SetTxFiFo+0x16>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006580:	3140      	adds	r1, #64	; 0x40
 8006582:	4314      	orrs	r4, r2
  }

  return HAL_OK;
}
 8006584:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006586:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800658a:	604c      	str	r4, [r1, #4]
}
 800658c:	bc30      	pop	{r4, r5}
 800658e:	4770      	bx	lr
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006590:	4314      	orrs	r4, r2
}
 8006592:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006594:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8006596:	bc30      	pop	{r4, r5}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop

0800659c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800659c:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800659e:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80065a0:	6259      	str	r1, [r3, #36]	; 0x24
}
 80065a2:	4770      	bx	lr

080065a4 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065a4:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 80065a6:	2101      	movs	r1, #1
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065a8:	4a08      	ldr	r2, [pc, #32]	; (80065cc <HAL_PCDEx_ActivateLPM+0x28>)
{
 80065aa:	b430      	push	{r4, r5}
  hpcd->lpm_active = 1U;
 80065ac:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
{
 80065b0:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065b2:	6999      	ldr	r1, [r3, #24]
  hpcd->LPM_State = LPM_L0;
 80065b4:	2500      	movs	r5, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065b6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  hpcd->LPM_State = LPM_L0;
 80065ba:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4

  return HAL_OK;
}
 80065be:	4628      	mov	r0, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065c0:	6199      	str	r1, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065c4:	430a      	orrs	r2, r1
}
 80065c6:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
}
 80065ca:	4770      	bx	lr
 80065cc:	10000003 	.word	0x10000003

080065d0 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop

080065d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065d4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_PWREx_ConfigSupply+0x48>)
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	0752      	lsls	r2, r2, #29
 80065dc:	d406      	bmi.n	80065ec <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80065e4:	1a18      	subs	r0, r3, r0
 80065e6:	bf18      	it	ne
 80065e8:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065ec:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065ee:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065f0:	f022 0207 	bic.w	r2, r2, #7
 80065f4:	4310      	orrs	r0, r2
 80065f6:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 80065f8:	f7fc ff16 	bl	8003428 <HAL_GetTick>
 80065fc:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065fe:	e005      	b.n	800660c <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006600:	f7fc ff12 	bl	8003428 <HAL_GetTick>
 8006604:	1b40      	subs	r0, r0, r5
 8006606:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800660a:	d804      	bhi.n	8006616 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	049b      	lsls	r3, r3, #18
 8006610:	d5f6      	bpl.n	8006600 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8006612:	2000      	movs	r0, #0
}
 8006614:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006616:	2001      	movs	r0, #1
}
 8006618:	bd38      	pop	{r3, r4, r5, pc}
 800661a:	bf00      	nop
 800661c:	58024800 	.word	0x58024800

08006620 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006620:	4a02      	ldr	r2, [pc, #8]	; (800662c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8006622:	68d3      	ldr	r3, [r2, #12]
 8006624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006628:	60d3      	str	r3, [r2, #12]
}
 800662a:	4770      	bx	lr
 800662c:	58024800 	.word	0x58024800

08006630 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006630:	2800      	cmp	r0, #0
 8006632:	f000 819d 	beq.w	8006970 <HAL_RCC_OscConfig+0x340>
{
 8006636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006638:	6803      	ldr	r3, [r0, #0]
 800663a:	4604      	mov	r4, r0
 800663c:	07d9      	lsls	r1, r3, #31
 800663e:	d533      	bpl.n	80066a8 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006640:	49a7      	ldr	r1, [pc, #668]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 8006642:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006644:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006646:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800664a:	2a10      	cmp	r2, #16
 800664c:	f000 8112 	beq.w	8006874 <HAL_RCC_OscConfig+0x244>
 8006650:	2a18      	cmp	r2, #24
 8006652:	f000 810a 	beq.w	800686a <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006656:	6863      	ldr	r3, [r4, #4]
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665c:	d010      	beq.n	8006680 <HAL_RCC_OscConfig+0x50>
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 816f 	beq.w	8006942 <HAL_RCC_OscConfig+0x312>
 8006664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006668:	4b9d      	ldr	r3, [pc, #628]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f000 81e4 	beq.w	8006a38 <HAL_RCC_OscConfig+0x408>
 8006670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e004      	b.n	800668a <HAL_RCC_OscConfig+0x5a>
 8006680:	4a97      	ldr	r2, [pc, #604]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006688:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fc fecd 	bl	8003428 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800668e:	4d94      	ldr	r5, [pc, #592]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006690:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006692:	e005      	b.n	80066a0 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006694:	f7fc fec8 	bl	8003428 <HAL_GetTick>
 8006698:	1b80      	subs	r0, r0, r6
 800669a:	2864      	cmp	r0, #100	; 0x64
 800669c:	f200 814f 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	039f      	lsls	r7, r3, #14
 80066a4:	d5f6      	bpl.n	8006694 <HAL_RCC_OscConfig+0x64>
 80066a6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066a8:	0799      	lsls	r1, r3, #30
 80066aa:	f100 808e 	bmi.w	80067ca <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066ae:	06d9      	lsls	r1, r3, #27
 80066b0:	d534      	bpl.n	800671c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b2:	4a8b      	ldr	r2, [pc, #556]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 80066b4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066bc:	2b08      	cmp	r3, #8
 80066be:	f000 80e9 	beq.w	8006894 <HAL_RCC_OscConfig+0x264>
 80066c2:	2b18      	cmp	r3, #24
 80066c4:	f000 80e1 	beq.w	800688a <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80066c8:	69e3      	ldr	r3, [r4, #28]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8178 	beq.w	80069c0 <HAL_RCC_OscConfig+0x390>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066d0:	4b83      	ldr	r3, [pc, #524]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 80066d2:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066d4:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 80066d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80066dc:	f7fc fea4 	bl	8003428 <HAL_GetTick>
 80066e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066e2:	e005      	b.n	80066f0 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066e4:	f7fc fea0 	bl	8003428 <HAL_GetTick>
 80066e8:	1b80      	subs	r0, r0, r6
 80066ea:	2802      	cmp	r0, #2
 80066ec:	f200 8127 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	05db      	lsls	r3, r3, #23
 80066f4:	d5f6      	bpl.n	80066e4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066f6:	f7fc feaf 	bl	8003458 <HAL_GetREVID>
 80066fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80066fe:	4298      	cmp	r0, r3
 8006700:	f200 825d 	bhi.w	8006bbe <HAL_RCC_OscConfig+0x58e>
 8006704:	6a22      	ldr	r2, [r4, #32]
 8006706:	686b      	ldr	r3, [r5, #4]
 8006708:	2a20      	cmp	r2, #32
 800670a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800670e:	bf0c      	ite	eq
 8006710:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006714:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006718:	606b      	str	r3, [r5, #4]
 800671a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671c:	071d      	lsls	r5, r3, #28
 800671e:	d517      	bpl.n	8006750 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006720:	6963      	ldr	r3, [r4, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 8126 	beq.w	8006974 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006728:	4b6d      	ldr	r3, [pc, #436]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 800672a:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800672c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006734:	f7fc fe78 	bl	8003428 <HAL_GetTick>
 8006738:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800673a:	e005      	b.n	8006748 <HAL_RCC_OscConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800673c:	f7fc fe74 	bl	8003428 <HAL_GetTick>
 8006740:	1b80      	subs	r0, r0, r6
 8006742:	2802      	cmp	r0, #2
 8006744:	f200 80fb 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006748:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800674a:	0798      	lsls	r0, r3, #30
 800674c:	d5f6      	bpl.n	800673c <HAL_RCC_OscConfig+0x10c>
 800674e:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006750:	069a      	lsls	r2, r3, #26
 8006752:	d517      	bpl.n	8006784 <HAL_RCC_OscConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006754:	69a3      	ldr	r3, [r4, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 811f 	beq.w	800699a <HAL_RCC_OscConfig+0x36a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800675c:	4b60      	ldr	r3, [pc, #384]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 800675e:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006760:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8006762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006766:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006768:	f7fc fe5e 	bl	8003428 <HAL_GetTick>
 800676c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800676e:	e005      	b.n	800677c <HAL_RCC_OscConfig+0x14c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006770:	f7fc fe5a 	bl	8003428 <HAL_GetTick>
 8006774:	1b80      	subs	r0, r0, r6
 8006776:	2802      	cmp	r0, #2
 8006778:	f200 80e1 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	049f      	lsls	r7, r3, #18
 8006780:	d5f6      	bpl.n	8006770 <HAL_RCC_OscConfig+0x140>
 8006782:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006784:	0759      	lsls	r1, r3, #29
 8006786:	f100 80a0 	bmi.w	80068ca <HAL_RCC_OscConfig+0x29a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800678a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800678c:	b1d8      	cbz	r0, 80067c6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800678e:	4b54      	ldr	r3, [pc, #336]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006796:	2a18      	cmp	r2, #24
 8006798:	f000 81c9 	beq.w	8006b2e <HAL_RCC_OscConfig+0x4fe>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679c:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800679e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067a0:	f000 815b 	beq.w	8006a5a <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067a8:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 80067aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80067ac:	f7fc fe3c 	bl	8003428 <HAL_GetTick>
 80067b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067b2:	e005      	b.n	80067c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fc fe38 	bl	8003428 <HAL_GetTick>
 80067b8:	1b40      	subs	r0, r0, r5
 80067ba:	2802      	cmp	r0, #2
 80067bc:	f200 80bf 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	019b      	lsls	r3, r3, #6
 80067c4:	d4f6      	bmi.n	80067b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80067c6:	2000      	movs	r0, #0
}
 80067c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ca:	4a45      	ldr	r2, [pc, #276]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 80067cc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067d0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80067d4:	d02f      	beq.n	8006836 <HAL_RCC_OscConfig+0x206>
 80067d6:	2b18      	cmp	r3, #24
 80067d8:	d02b      	beq.n	8006832 <HAL_RCC_OscConfig+0x202>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067da:	68e2      	ldr	r2, [r4, #12]
 80067dc:	2a00      	cmp	r2, #0
 80067de:	f000 8103 	beq.w	80069e8 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067e2:	493f      	ldr	r1, [pc, #252]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 80067e4:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067e6:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067e8:	f023 0319 	bic.w	r3, r3, #25
 80067ec:	4313      	orrs	r3, r2
 80067ee:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80067f0:	f7fc fe1a 	bl	8003428 <HAL_GetTick>
 80067f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067f6:	e005      	b.n	8006804 <HAL_RCC_OscConfig+0x1d4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f8:	f7fc fe16 	bl	8003428 <HAL_GetTick>
 80067fc:	1b80      	subs	r0, r0, r6
 80067fe:	2802      	cmp	r0, #2
 8006800:	f200 809d 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	075f      	lsls	r7, r3, #29
 8006808:	d5f6      	bpl.n	80067f8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	f7fc fe25 	bl	8003458 <HAL_GetREVID>
 800680e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006812:	4298      	cmp	r0, r3
 8006814:	f200 81e2 	bhi.w	8006bdc <HAL_RCC_OscConfig+0x5ac>
 8006818:	6922      	ldr	r2, [r4, #16]
 800681a:	686b      	ldr	r3, [r5, #4]
 800681c:	2a40      	cmp	r2, #64	; 0x40
 800681e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006822:	bf0c      	ite	eq
 8006824:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8006828:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800682c:	606b      	str	r3, [r5, #4]
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	e73d      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006832:	0792      	lsls	r2, r2, #30
 8006834:	d1d1      	bne.n	80067da <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006836:	4b2a      	ldr	r3, [pc, #168]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	075b      	lsls	r3, r3, #29
 800683c:	d501      	bpl.n	8006842 <HAL_RCC_OscConfig+0x212>
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	b30b      	cbz	r3, 8006886 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006842:	f7fc fe09 	bl	8003458 <HAL_GetREVID>
 8006846:	f241 0303 	movw	r3, #4099	; 0x1003
 800684a:	4298      	cmp	r0, r3
 800684c:	f200 80e0 	bhi.w	8006a10 <HAL_RCC_OscConfig+0x3e0>
 8006850:	6922      	ldr	r2, [r4, #16]
 8006852:	2a40      	cmp	r2, #64	; 0x40
 8006854:	f000 80f8 	beq.w	8006a48 <HAL_RCC_OscConfig+0x418>
 8006858:	4921      	ldr	r1, [pc, #132]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 800685a:	684b      	ldr	r3, [r1, #4]
 800685c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006860:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006864:	604b      	str	r3, [r1, #4]
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	e721      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800686a:	f001 0103 	and.w	r1, r1, #3
 800686e:	2902      	cmp	r1, #2
 8006870:	f47f aef1 	bne.w	8006656 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006874:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	0392      	lsls	r2, r2, #14
 800687a:	f57f af15 	bpl.w	80066a8 <HAL_RCC_OscConfig+0x78>
 800687e:	6862      	ldr	r2, [r4, #4]
 8006880:	2a00      	cmp	r2, #0
 8006882:	f47f af11 	bne.w	80066a8 <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8006886:	2001      	movs	r0, #1
}
 8006888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800688a:	f002 0203 	and.w	r2, r2, #3
 800688e:	2a01      	cmp	r2, #1
 8006890:	f47f af1a 	bne.w	80066c8 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006894:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	05da      	lsls	r2, r3, #23
 800689a:	d502      	bpl.n	80068a2 <HAL_RCC_OscConfig+0x272>
 800689c:	69e3      	ldr	r3, [r4, #28]
 800689e:	2b80      	cmp	r3, #128	; 0x80
 80068a0:	d1f1      	bne.n	8006886 <HAL_RCC_OscConfig+0x256>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068a2:	f7fc fdd9 	bl	8003458 <HAL_GetREVID>
 80068a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80068aa:	4298      	cmp	r0, r3
 80068ac:	f200 80ba 	bhi.w	8006a24 <HAL_RCC_OscConfig+0x3f4>
 80068b0:	6a22      	ldr	r2, [r4, #32]
 80068b2:	2a20      	cmp	r2, #32
 80068b4:	f000 81a1 	beq.w	8006bfa <HAL_RCC_OscConfig+0x5ca>
 80068b8:	4909      	ldr	r1, [pc, #36]	; (80068e0 <HAL_RCC_OscConfig+0x2b0>)
 80068ba:	684b      	ldr	r3, [r1, #4]
 80068bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068c0:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80068c4:	604b      	str	r3, [r1, #4]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	e728      	b.n	800671c <HAL_RCC_OscConfig+0xec>
    PWR->CR1 |= PWR_CR1_DBP;
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RCC_OscConfig+0x2b4>)
 80068cc:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ce:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80068d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80068d6:	f7fc fda7 	bl	8003428 <HAL_GetTick>
 80068da:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068dc:	e009      	b.n	80068f2 <HAL_RCC_OscConfig+0x2c2>
 80068de:	bf00      	nop
 80068e0:	58024400 	.word	0x58024400
 80068e4:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fc fd9e 	bl	8003428 <HAL_GetTick>
 80068ec:	1b80      	subs	r0, r0, r6
 80068ee:	2864      	cmp	r0, #100	; 0x64
 80068f0:	d825      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f2:	682b      	ldr	r3, [r5, #0]
 80068f4:	05da      	lsls	r2, r3, #23
 80068f6:	d5f7      	bpl.n	80068e8 <HAL_RCC_OscConfig+0x2b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068f8:	68a3      	ldr	r3, [r4, #8]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	f000 8177 	beq.w	8006bee <HAL_RCC_OscConfig+0x5be>
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8142 	beq.w	8006b8a <HAL_RCC_OscConfig+0x55a>
 8006906:	2b05      	cmp	r3, #5
 8006908:	4bb1      	ldr	r3, [pc, #708]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 800690a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800690c:	f000 817e 	beq.w	8006c0c <HAL_RCC_OscConfig+0x5dc>
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	671a      	str	r2, [r3, #112]	; 0x70
 8006916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006918:	f022 0204 	bic.w	r2, r2, #4
 800691c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800691e:	f7fc fd83 	bl	8003428 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006922:	4dab      	ldr	r5, [pc, #684]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
      tickstart = HAL_GetTick();
 8006924:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800692a:	e004      	b.n	8006936 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800692c:	f7fc fd7c 	bl	8003428 <HAL_GetTick>
 8006930:	1bc0      	subs	r0, r0, r7
 8006932:	42b0      	cmp	r0, r6
 8006934:	d803      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006936:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006938:	079b      	lsls	r3, r3, #30
 800693a:	d5f7      	bpl.n	800692c <HAL_RCC_OscConfig+0x2fc>
 800693c:	e725      	b.n	800678a <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 800693e:	2003      	movs	r0, #3
}
 8006940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006942:	4ba3      	ldr	r3, [pc, #652]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 8006944:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006946:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006948:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006954:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006956:	f7fc fd67 	bl	8003428 <HAL_GetTick>
 800695a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800695c:	e004      	b.n	8006968 <HAL_RCC_OscConfig+0x338>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800695e:	f7fc fd63 	bl	8003428 <HAL_GetTick>
 8006962:	1b80      	subs	r0, r0, r6
 8006964:	2864      	cmp	r0, #100	; 0x64
 8006966:	d8ea      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	0398      	lsls	r0, r3, #14
 800696c:	d4f7      	bmi.n	800695e <HAL_RCC_OscConfig+0x32e>
 800696e:	e69a      	b.n	80066a6 <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8006970:	2001      	movs	r0, #1
}
 8006972:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8006974:	4b96      	ldr	r3, [pc, #600]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 8006976:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006978:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006980:	f7fc fd52 	bl	8003428 <HAL_GetTick>
 8006984:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006986:	e004      	b.n	8006992 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006988:	f7fc fd4e 	bl	8003428 <HAL_GetTick>
 800698c:	1b80      	subs	r0, r0, r6
 800698e:	2802      	cmp	r0, #2
 8006990:	d8d5      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006992:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006994:	0799      	lsls	r1, r3, #30
 8006996:	d4f7      	bmi.n	8006988 <HAL_RCC_OscConfig+0x358>
 8006998:	e6d9      	b.n	800674e <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSI48_DISABLE();
 800699a:	4b8d      	ldr	r3, [pc, #564]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 800699c:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800699e:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 80069a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80069a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80069a6:	f7fc fd3f 	bl	8003428 <HAL_GetTick>
 80069aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ac:	e004      	b.n	80069b8 <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069ae:	f7fc fd3b 	bl	8003428 <HAL_GetTick>
 80069b2:	1b80      	subs	r0, r0, r6
 80069b4:	2802      	cmp	r0, #2
 80069b6:	d8c2      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	0498      	lsls	r0, r3, #18
 80069bc:	d4f7      	bmi.n	80069ae <HAL_RCC_OscConfig+0x37e>
 80069be:	e6e0      	b.n	8006782 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_DISABLE();
 80069c0:	4b83      	ldr	r3, [pc, #524]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 80069c2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069c4:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 80069c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80069cc:	f7fc fd2c 	bl	8003428 <HAL_GetTick>
 80069d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069d2:	e004      	b.n	80069de <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80069d4:	f7fc fd28 	bl	8003428 <HAL_GetTick>
 80069d8:	1b80      	subs	r0, r0, r6
 80069da:	2802      	cmp	r0, #2
 80069dc:	d8af      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	05df      	lsls	r7, r3, #23
 80069e2:	d4f7      	bmi.n	80069d4 <HAL_RCC_OscConfig+0x3a4>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	e699      	b.n	800671c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80069e8:	4b79      	ldr	r3, [pc, #484]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 80069ea:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069ec:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80069ee:	f022 0201 	bic.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80069f4:	f7fc fd18 	bl	8003428 <HAL_GetTick>
 80069f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069fa:	e004      	b.n	8006a06 <HAL_RCC_OscConfig+0x3d6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069fc:	f7fc fd14 	bl	8003428 <HAL_GetTick>
 8006a00:	1b80      	subs	r0, r0, r6
 8006a02:	2802      	cmp	r0, #2
 8006a04:	d89b      	bhi.n	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a06:	682b      	ldr	r3, [r5, #0]
 8006a08:	0758      	lsls	r0, r3, #29
 8006a0a:	d4f7      	bmi.n	80069fc <HAL_RCC_OscConfig+0x3cc>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	e64e      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a10:	4a6f      	ldr	r2, [pc, #444]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 8006a12:	6921      	ldr	r1, [r4, #16]
 8006a14:	6853      	ldr	r3, [r2, #4]
 8006a16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006a1e:	6053      	str	r3, [r2, #4]
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	e644      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a24:	4a6a      	ldr	r2, [pc, #424]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 8006a26:	6a21      	ldr	r1, [r4, #32]
 8006a28:	68d3      	ldr	r3, [r2, #12]
 8006a2a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006a2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006a32:	60d3      	str	r3, [r2, #12]
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	e671      	b.n	800671c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	e620      	b.n	800668a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a48:	4a61      	ldr	r2, [pc, #388]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
 8006a4a:	6853      	ldr	r3, [r2, #4]
 8006a4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	e629      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_DISABLE();
 8006a5a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5e:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8006a60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006a62:	f7fc fce1 	bl	8003428 <HAL_GetTick>
 8006a66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a68:	e005      	b.n	8006a76 <HAL_RCC_OscConfig+0x446>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a6a:	f7fc fcdd 	bl	8003428 <HAL_GetTick>
 8006a6e:	1b80      	subs	r0, r0, r6
 8006a70:	2802      	cmp	r0, #2
 8006a72:	f63f af64 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a76:	682b      	ldr	r3, [r5, #0]
 8006a78:	0199      	lsls	r1, r3, #6
 8006a7a:	d4f6      	bmi.n	8006a6a <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006a7e:	4b55      	ldr	r3, [pc, #340]	; (8006bd4 <HAL_RCC_OscConfig+0x5a4>)
 8006a80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a82:	4013      	ands	r3, r2
 8006a84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a86:	4954      	ldr	r1, [pc, #336]	; (8006bd8 <HAL_RCC_OscConfig+0x5a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a88:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a8a:	4e51      	ldr	r6, [pc, #324]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006a90:	62ab      	str	r3, [r5, #40]	; 0x28
 8006a92:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006a94:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006a98:	3f01      	subs	r7, #1
 8006a9a:	1e50      	subs	r0, r2, #1
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006aa0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006aa4:	025b      	lsls	r3, r3, #9
 8006aa6:	0400      	lsls	r0, r0, #16
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006ab0:	0612      	lsls	r2, r2, #24
 8006ab2:	4303      	orrs	r3, r0
 8006ab4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006ab8:	433b      	orrs	r3, r7
 8006aba:	4313      	orrs	r3, r2
 8006abc:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006abe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ac6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006ac8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006aca:	4011      	ands	r1, r2
 8006acc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006ad0:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ad2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ad4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ad6:	f023 030c 	bic.w	r3, r3, #12
 8006ada:	4313      	orrs	r3, r2
 8006adc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ade:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006ae0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006ae2:	f023 0302 	bic.w	r3, r3, #2
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006afa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b00:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006b0a:	682b      	ldr	r3, [r5, #0]
 8006b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006b12:	f7fc fc89 	bl	8003428 <HAL_GetTick>
 8006b16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b18:	e005      	b.n	8006b26 <HAL_RCC_OscConfig+0x4f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1a:	f7fc fc85 	bl	8003428 <HAL_GetTick>
 8006b1e:	1b00      	subs	r0, r0, r4
 8006b20:	2802      	cmp	r0, #2
 8006b22:	f63f af0c 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	019a      	lsls	r2, r3, #6
 8006b2a:	d5f6      	bpl.n	8006b1a <HAL_RCC_OscConfig+0x4ea>
 8006b2c:	e64b      	b.n	80067c6 <HAL_RCC_OscConfig+0x196>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b2e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b32:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b34:	f43f ae48 	beq.w	80067c8 <HAL_RCC_OscConfig+0x198>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b38:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006b3e:	428b      	cmp	r3, r1
 8006b40:	f47f aea1 	bne.w	8006886 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b44:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f47f ae9b 	bne.w	8006886 <HAL_RCC_OscConfig+0x256>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b52:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8006b56:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	f47f ae94 	bne.w	8006886 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b60:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8006b64:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f47f ae8d 	bne.w	8006886 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b6e:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8006b72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	f47f ae86 	bne.w	8006886 <HAL_RCC_OscConfig+0x256>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006b7c:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8006b80:	3801      	subs	r0, #1
    return HAL_ERROR;
 8006b82:	1a28      	subs	r0, r5, r0
 8006b84:	bf18      	it	ne
 8006b86:	2001      	movne	r0, #1
 8006b88:	e61e      	b.n	80067c8 <HAL_RCC_OscConfig+0x198>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8a:	4b11      	ldr	r3, [pc, #68]	; (8006bd0 <HAL_RCC_OscConfig+0x5a0>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b8c:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b92:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	671a      	str	r2, [r3, #112]	; 0x70
 8006b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b9c:	f022 0204 	bic.w	r2, r2, #4
 8006ba0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006ba2:	f7fc fc41 	bl	8003428 <HAL_GetTick>
 8006ba6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCC_OscConfig+0x586>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fc fc3d 	bl	8003428 <HAL_GetTick>
 8006bae:	1b80      	subs	r0, r0, r6
 8006bb0:	42b8      	cmp	r0, r7
 8006bb2:	f63f aec4 	bhi.w	800693e <HAL_RCC_OscConfig+0x30e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bb6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006bb8:	0798      	lsls	r0, r3, #30
 8006bba:	d4f6      	bmi.n	8006baa <HAL_RCC_OscConfig+0x57a>
 8006bbc:	e5e5      	b.n	800678a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bbe:	68eb      	ldr	r3, [r5, #12]
 8006bc0:	6a22      	ldr	r2, [r4, #32]
 8006bc2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006bc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006bca:	60eb      	str	r3, [r5, #12]
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	e5a5      	b.n	800671c <HAL_RCC_OscConfig+0xec>
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	fffffc0c 	.word	0xfffffc0c
 8006bd8:	ffff0007 	.word	0xffff0007
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bdc:	686b      	ldr	r3, [r5, #4]
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006be4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006be8:	606b      	str	r3, [r5, #4]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	e55f      	b.n	80066ae <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bee:	4a0b      	ldr	r2, [pc, #44]	; (8006c1c <HAL_RCC_OscConfig+0x5ec>)
 8006bf0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf8:	e691      	b.n	800691e <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bfa:	4a08      	ldr	r2, [pc, #32]	; (8006c1c <HAL_RCC_OscConfig+0x5ec>)
 8006bfc:	6853      	ldr	r3, [r2, #4]
 8006bfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c06:	6053      	str	r3, [r2, #4]
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	e587      	b.n	800671c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c0c:	f042 0204 	orr.w	r2, r2, #4
 8006c10:	671a      	str	r2, [r3, #112]	; 0x70
 8006c12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c14:	f042 0201 	orr.w	r2, r2, #1
 8006c18:	671a      	str	r2, [r3, #112]	; 0x70
 8006c1a:	e680      	b.n	800691e <HAL_RCC_OscConfig+0x2ee>
 8006c1c:	58024400 	.word	0x58024400

08006c20 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c22:	460e      	mov	r6, r1
 8006c24:	b089      	sub	sp, #36	; 0x24
 8006c26:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006c28:	4c22      	ldr	r4, [pc, #136]	; (8006cb4 <HAL_RCC_MCOConfig+0x94>)
  if(RCC_MCOx == RCC_MCO1)
 8006c2a:	b310      	cbz	r0, 8006c72 <HAL_RCC_MCOConfig+0x52>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8006c2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c30:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006c32:	f44f 7000 	mov.w	r0, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c36:	2103      	movs	r1, #3
    MCO2_CLK_ENABLE();
 8006c38:	f043 0304 	orr.w	r3, r3, #4
 8006c3c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006c40:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c44:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c46:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 8006c48:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006c4c:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4e:	9106      	str	r1, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006c50:	a903      	add	r1, sp, #12
    MCO2_CLK_ENABLE();
 8006c52:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006c54:	4818      	ldr	r0, [pc, #96]	; (8006cb8 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8006c56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c5a:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006c5c:	f7fe fd74 	bl	8005748 <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006c60:	6921      	ldr	r1, [r4, #16]
 8006c62:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8006c66:	4331      	orrs	r1, r6
 8006c68:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8006c6c:	6121      	str	r1, [r4, #16]
  }
}
 8006c6e:	b009      	add	sp, #36	; 0x24
 8006c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCO1_CLK_ENABLE();
 8006c72:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006c76:	f44f 7280 	mov.w	r2, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7a:	2702      	movs	r7, #2
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006c7c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8006c86:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006c8a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c8c:	2203      	movs	r2, #3
    MCO1_CLK_ENABLE();
 8006c8e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c92:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c94:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8006c96:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006c98:	4808      	ldr	r0, [pc, #32]	; (8006cbc <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 8006c9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c9e:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006ca0:	f7fe fd52 	bl	8005748 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006ca4:	6921      	ldr	r1, [r4, #16]
 8006ca6:	f021 71fe 	bic.w	r1, r1, #33292288	; 0x1fc0000
 8006caa:	4331      	orrs	r1, r6
 8006cac:	4329      	orrs	r1, r5
 8006cae:	6121      	str	r1, [r4, #16]
}
 8006cb0:	b009      	add	sp, #36	; 0x24
 8006cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	58020800 	.word	0x58020800
 8006cbc:	58020000 	.word	0x58020000

08006cc0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc0:	4a3e      	ldr	r2, [pc, #248]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006cc2:	6913      	ldr	r3, [r2, #16]
 8006cc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d04f      	beq.n	8006d6c <HAL_RCC_GetSysClockFreq+0xac>
 8006ccc:	2b18      	cmp	r3, #24
 8006cce:	d00b      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x28>
 8006cd0:	b10b      	cbz	r3, 8006cd6 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006cd2:	483b      	ldr	r0, [pc, #236]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006cd4:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd6:	6813      	ldr	r3, [r2, #0]
 8006cd8:	0699      	lsls	r1, r3, #26
 8006cda:	d549      	bpl.n	8006d70 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	4839      	ldr	r0, [pc, #228]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ce0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006ce4:	40d8      	lsrs	r0, r3
 8006ce6:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ce8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006cea:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006cee:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8006cf2:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cf4:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8006cf6:	b3b0      	cbz	r0, 8006d66 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cf8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cfc:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d00:	f001 0103 	and.w	r1, r1, #3
 8006d04:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d08:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 8006d0c:	2901      	cmp	r1, #1
 8006d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d12:	ee07 3a10 	vmov	s14, r3
 8006d16:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 8006d1a:	d002      	beq.n	8006d22 <HAL_RCC_GetSysClockFreq+0x62>
 8006d1c:	d32d      	bcc.n	8006d7a <HAL_RCC_GetSysClockFreq+0xba>
 8006d1e:	2902      	cmp	r1, #2
 8006d20:	d028      	beq.n	8006d74 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d22:	eddf 5a29 	vldr	s11, [pc, #164]	; 8006dc8 <HAL_RCC_GetSysClockFreq+0x108>
 8006d26:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006d2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d3c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d44:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006d50:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d62:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8006d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006d6c:	4817      	ldr	r0, [pc, #92]	; (8006dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d6e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d70:	4814      	ldr	r0, [pc, #80]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8006d72:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d74:	eddf 5a16 	vldr	s11, [pc, #88]	; 8006dd0 <HAL_RCC_GetSysClockFreq+0x110>
 8006d78:	e7d5      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	069b      	lsls	r3, r3, #26
 8006d7e:	d51a      	bpl.n	8006db6 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d80:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d82:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d86:	490f      	ldr	r1, [pc, #60]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006d88:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d8e:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d94:	ee06 1a90 	vmov	s13, r1
 8006d98:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8006d9c:	ee06 3a90 	vmov	s13, r3
 8006da0:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8006da4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006da8:	ee76 7a05 	vadd.f32	s15, s12, s10
 8006dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006db0:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006db4:	e7c8      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006db6:	eddf 5a07 	vldr	s11, [pc, #28]	; 8006dd4 <HAL_RCC_GetSysClockFreq+0x114>
 8006dba:	e7b4      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x66>
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	003d0900 	.word	0x003d0900
 8006dc4:	03d09000 	.word	0x03d09000
 8006dc8:	4a742400 	.word	0x4a742400
 8006dcc:	007a1200 	.word	0x007a1200
 8006dd0:	4af42400 	.word	0x4af42400
 8006dd4:	4c742400 	.word	0x4c742400

08006dd8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006dd8:	b178      	cbz	r0, 8006dfa <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dda:	4a8e      	ldr	r2, [pc, #568]	; (8007014 <HAL_RCC_ClockConfig+0x23c>)
 8006ddc:	6813      	ldr	r3, [r2, #0]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	428b      	cmp	r3, r1
 8006de4:	d20b      	bcs.n	8006dfe <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de6:	6813      	ldr	r3, [r2, #0]
 8006de8:	f023 030f 	bic.w	r3, r3, #15
 8006dec:	430b      	orrs	r3, r1
 8006dee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df0:	6813      	ldr	r3, [r2, #0]
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	428b      	cmp	r3, r1
 8006df8:	d001      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8006dfa:	2001      	movs	r0, #1
}
 8006dfc:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dfe:	6803      	ldr	r3, [r0, #0]
{
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e04:	075d      	lsls	r5, r3, #29
 8006e06:	d50b      	bpl.n	8006e20 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e08:	4c83      	ldr	r4, [pc, #524]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006e0a:	6905      	ldr	r5, [r0, #16]
 8006e0c:	69a2      	ldr	r2, [r4, #24]
 8006e0e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006e12:	4295      	cmp	r5, r2
 8006e14:	d904      	bls.n	8006e20 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e16:	69a2      	ldr	r2, [r4, #24]
 8006e18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e1c:	432a      	orrs	r2, r5
 8006e1e:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e20:	071c      	lsls	r4, r3, #28
 8006e22:	d50b      	bpl.n	8006e3c <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e24:	4c7c      	ldr	r4, [pc, #496]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006e26:	6945      	ldr	r5, [r0, #20]
 8006e28:	69e2      	ldr	r2, [r4, #28]
 8006e2a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006e2e:	4295      	cmp	r5, r2
 8006e30:	d904      	bls.n	8006e3c <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e32:	69e2      	ldr	r2, [r4, #28]
 8006e34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e38:	432a      	orrs	r2, r5
 8006e3a:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3c:	06da      	lsls	r2, r3, #27
 8006e3e:	d50b      	bpl.n	8006e58 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e40:	4c75      	ldr	r4, [pc, #468]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006e42:	6985      	ldr	r5, [r0, #24]
 8006e44:	69e2      	ldr	r2, [r4, #28]
 8006e46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006e4a:	4295      	cmp	r5, r2
 8006e4c:	d904      	bls.n	8006e58 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e4e:	69e2      	ldr	r2, [r4, #28]
 8006e50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e54:	432a      	orrs	r2, r5
 8006e56:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e58:	069f      	lsls	r7, r3, #26
 8006e5a:	d50b      	bpl.n	8006e74 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e5c:	4c6e      	ldr	r4, [pc, #440]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006e5e:	69c5      	ldr	r5, [r0, #28]
 8006e60:	6a22      	ldr	r2, [r4, #32]
 8006e62:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006e66:	4295      	cmp	r5, r2
 8006e68:	d904      	bls.n	8006e74 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e6a:	6a22      	ldr	r2, [r4, #32]
 8006e6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e70:	432a      	orrs	r2, r5
 8006e72:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e74:	079e      	lsls	r6, r3, #30
 8006e76:	4604      	mov	r4, r0
 8006e78:	460d      	mov	r5, r1
 8006e7a:	f003 0201 	and.w	r2, r3, #1
 8006e7e:	d55d      	bpl.n	8006f3c <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e80:	4e65      	ldr	r6, [pc, #404]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006e82:	68c0      	ldr	r0, [r0, #12]
 8006e84:	69b1      	ldr	r1, [r6, #24]
 8006e86:	f001 010f 	and.w	r1, r1, #15
 8006e8a:	4288      	cmp	r0, r1
 8006e8c:	d904      	bls.n	8006e98 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e8e:	69b1      	ldr	r1, [r6, #24]
 8006e90:	f021 010f 	bic.w	r1, r1, #15
 8006e94:	4301      	orrs	r1, r0
 8006e96:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	d031      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e9c:	4a5e      	ldr	r2, [pc, #376]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006e9e:	68a1      	ldr	r1, [r4, #8]
 8006ea0:	6993      	ldr	r3, [r2, #24]
 8006ea2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eaa:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eac:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	f000 80a2 	beq.w	8006ff8 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	f000 80a5 	beq.w	8007004 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f000 80a6 	beq.w	800700c <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ec0:	0757      	lsls	r7, r2, #29
 8006ec2:	d538      	bpl.n	8006f36 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ec4:	4954      	ldr	r1, [pc, #336]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec6:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eca:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ecc:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ece:	f022 0207 	bic.w	r2, r2, #7
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8006ed6:	f7fc faa7 	bl	8003428 <HAL_GetTick>
 8006eda:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006edc:	e005      	b.n	8006eea <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ede:	f7fc faa3 	bl	8003428 <HAL_GetTick>
 8006ee2:	1bc0      	subs	r0, r0, r7
 8006ee4:	4540      	cmp	r0, r8
 8006ee6:	f200 808b 	bhi.w	8007000 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eea:	6933      	ldr	r3, [r6, #16]
 8006eec:	6862      	ldr	r2, [r4, #4]
 8006eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ef2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006ef6:	d1f2      	bne.n	8006ede <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	079e      	lsls	r6, r3, #30
 8006efc:	d50b      	bpl.n	8006f16 <HAL_RCC_ClockConfig+0x13e>
 8006efe:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f00:	4945      	ldr	r1, [pc, #276]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006f02:	698a      	ldr	r2, [r1, #24]
 8006f04:	f002 020f 	and.w	r2, r2, #15
 8006f08:	4282      	cmp	r2, r0
 8006f0a:	d904      	bls.n	8006f16 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f0c:	698a      	ldr	r2, [r1, #24]
 8006f0e:	f022 020f 	bic.w	r2, r2, #15
 8006f12:	4310      	orrs	r0, r2
 8006f14:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f16:	493f      	ldr	r1, [pc, #252]	; (8007014 <HAL_RCC_ClockConfig+0x23c>)
 8006f18:	680a      	ldr	r2, [r1, #0]
 8006f1a:	f002 020f 	and.w	r2, r2, #15
 8006f1e:	42aa      	cmp	r2, r5
 8006f20:	d914      	bls.n	8006f4c <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	680a      	ldr	r2, [r1, #0]
 8006f24:	f022 020f 	bic.w	r2, r2, #15
 8006f28:	432a      	orrs	r2, r5
 8006f2a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2c:	680a      	ldr	r2, [r1, #0]
 8006f2e:	f002 020f 	and.w	r2, r2, #15
 8006f32:	42aa      	cmp	r2, r5
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 8006f36:	2001      	movs	r0, #1
}
 8006f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	d1ad      	bne.n	8006e9c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f40:	4934      	ldr	r1, [pc, #208]	; (8007014 <HAL_RCC_ClockConfig+0x23c>)
 8006f42:	680a      	ldr	r2, [r1, #0]
 8006f44:	f002 020f 	and.w	r2, r2, #15
 8006f48:	42aa      	cmp	r2, r5
 8006f4a:	d8ea      	bhi.n	8006f22 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f4c:	0758      	lsls	r0, r3, #29
 8006f4e:	d50b      	bpl.n	8006f68 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f50:	4931      	ldr	r1, [pc, #196]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006f52:	6920      	ldr	r0, [r4, #16]
 8006f54:	698a      	ldr	r2, [r1, #24]
 8006f56:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006f5a:	4290      	cmp	r0, r2
 8006f5c:	d204      	bcs.n	8006f68 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f5e:	698a      	ldr	r2, [r1, #24]
 8006f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f64:	4302      	orrs	r2, r0
 8006f66:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f68:	0719      	lsls	r1, r3, #28
 8006f6a:	d50b      	bpl.n	8006f84 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f6c:	492a      	ldr	r1, [pc, #168]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006f6e:	6960      	ldr	r0, [r4, #20]
 8006f70:	69ca      	ldr	r2, [r1, #28]
 8006f72:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006f76:	4290      	cmp	r0, r2
 8006f78:	d204      	bcs.n	8006f84 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f7a:	69ca      	ldr	r2, [r1, #28]
 8006f7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f80:	4302      	orrs	r2, r0
 8006f82:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f84:	06da      	lsls	r2, r3, #27
 8006f86:	d50b      	bpl.n	8006fa0 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f88:	4923      	ldr	r1, [pc, #140]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006f8a:	69a0      	ldr	r0, [r4, #24]
 8006f8c:	69ca      	ldr	r2, [r1, #28]
 8006f8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006f92:	4290      	cmp	r0, r2
 8006f94:	d204      	bcs.n	8006fa0 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f96:	69ca      	ldr	r2, [r1, #28]
 8006f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f9c:	4302      	orrs	r2, r0
 8006f9e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fa0:	069b      	lsls	r3, r3, #26
 8006fa2:	d50b      	bpl.n	8006fbc <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fa4:	4a1c      	ldr	r2, [pc, #112]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006fa6:	69e1      	ldr	r1, [r4, #28]
 8006fa8:	6a13      	ldr	r3, [r2, #32]
 8006faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	d204      	bcs.n	8006fbc <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006fb2:	6a13      	ldr	r3, [r2, #32]
 8006fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fbc:	f7ff fe80 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_RCC_ClockConfig+0x240>)
 8006fc2:	4916      	ldr	r1, [pc, #88]	; (800701c <HAL_RCC_ClockConfig+0x244>)
 8006fc4:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fc6:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fc8:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8006fcc:	4d14      	ldr	r5, [pc, #80]	; (8007020 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fce:	f002 020f 	and.w	r2, r2, #15
 8006fd2:	4c14      	ldr	r4, [pc, #80]	; (8007024 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fd4:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fd6:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fd8:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8006fdc:	4912      	ldr	r1, [pc, #72]	; (8007028 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fde:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fe2:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8006fe6:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fe8:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8006fec:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fee:	6022      	str	r2, [r4, #0]
}
 8006ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8006ff4:	f7fc b9b4 	b.w	8003360 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ff8:	0390      	lsls	r0, r2, #14
 8006ffa:	f53f af63 	bmi.w	8006ec4 <HAL_RCC_ClockConfig+0xec>
 8006ffe:	e79a      	b.n	8006f36 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8007000:	2003      	movs	r0, #3
 8007002:	e799      	b.n	8006f38 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007004:	0191      	lsls	r1, r2, #6
 8007006:	f53f af5d 	bmi.w	8006ec4 <HAL_RCC_ClockConfig+0xec>
 800700a:	e794      	b.n	8006f36 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800700c:	05d2      	lsls	r2, r2, #23
 800700e:	f53f af59 	bmi.w	8006ec4 <HAL_RCC_ClockConfig+0xec>
 8007012:	e790      	b.n	8006f36 <HAL_RCC_ClockConfig+0x15e>
 8007014:	52002000 	.word	0x52002000
 8007018:	58024400 	.word	0x58024400
 800701c:	08012500 	.word	0x08012500
 8007020:	24000200 	.word	0x24000200
 8007024:	240001f8 	.word	0x240001f8
 8007028:	240001f4 	.word	0x240001f4

0800702c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800702c:	4a49      	ldr	r2, [pc, #292]	; (8007154 <HAL_RCC_GetHCLKFreq+0x128>)
 800702e:	6913      	ldr	r3, [r2, #16]
 8007030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007034:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007036:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007038:	d064      	beq.n	8007104 <HAL_RCC_GetHCLKFreq+0xd8>
 800703a:	2b18      	cmp	r3, #24
 800703c:	d022      	beq.n	8007084 <HAL_RCC_GetHCLKFreq+0x58>
 800703e:	b1bb      	cbz	r3, 8007070 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8007040:	4b45      	ldr	r3, [pc, #276]	; (8007158 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007042:	4944      	ldr	r1, [pc, #272]	; (8007154 <HAL_RCC_GetHCLKFreq+0x128>)
 8007044:	4845      	ldr	r0, [pc, #276]	; (800715c <HAL_RCC_GetHCLKFreq+0x130>)
 8007046:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007048:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800704a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800704e:	4c44      	ldr	r4, [pc, #272]	; (8007160 <HAL_RCC_GetHCLKFreq+0x134>)
 8007050:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007054:	4d43      	ldr	r5, [pc, #268]	; (8007164 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007056:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007058:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800705a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800705e:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007062:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007064:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8007068:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800706a:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800706c:	bc30      	pop	{r4, r5}
 800706e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007070:	6813      	ldr	r3, [r2, #0]
 8007072:	0699      	lsls	r1, r3, #26
 8007074:	d548      	bpl.n	8007108 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	4a3b      	ldr	r2, [pc, #236]	; (8007168 <HAL_RCC_GetHCLKFreq+0x13c>)
 800707a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800707e:	fa22 f303 	lsr.w	r3, r2, r3
 8007082:	e7de      	b.n	8007042 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007084:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007086:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007088:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800708a:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800708e:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0d6      	beq.n	8007042 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007094:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007098:	f001 0101 	and.w	r1, r1, #1
 800709c:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a0:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070a4:	fb01 f304 	mul.w	r3, r1, r4
 80070a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80070ac:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80070b6:	d002      	beq.n	80070be <HAL_RCC_GetHCLKFreq+0x92>
 80070b8:	d32b      	bcc.n	8007112 <HAL_RCC_GetHCLKFreq+0xe6>
 80070ba:	2802      	cmp	r0, #2
 80070bc:	d026      	beq.n	800710c <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070be:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800716c <HAL_RCC_GetHCLKFreq+0x140>
 80070c2:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80070c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070cc:	ee07 3a10 	vmov	s14, r3
 80070d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80070d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80070d8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80070dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070e0:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <HAL_RCC_GetHCLKFreq+0x128>)
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80070ec:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80070ee:	ee07 3a10 	vmov	s14, r3
 80070f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80070f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80070fa:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80070fe:	ee17 3a90 	vmov	r3, s15
 8007102:	e79e      	b.n	8007042 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8007104:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <HAL_RCC_GetHCLKFreq+0x144>)
 8007106:	e79c      	b.n	8007042 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <HAL_RCC_GetHCLKFreq+0x13c>)
 800710a:	e79a      	b.n	8007042 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800710c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007174 <HAL_RCC_GetHCLKFreq+0x148>
 8007110:	e7d7      	b.n	80070c2 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007112:	6813      	ldr	r3, [r2, #0]
 8007114:	069b      	lsls	r3, r3, #26
 8007116:	d51a      	bpl.n	800714e <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007118:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800711a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800711e:	4912      	ldr	r1, [pc, #72]	; (8007168 <HAL_RCC_GetHCLKFreq+0x13c>)
 8007120:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007124:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007126:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712c:	ee07 1a10 	vmov	s14, r1
 8007130:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007134:	ee07 3a10 	vmov	s14, r3
 8007138:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800713c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007140:	ee76 6a05 	vadd.f32	s13, s12, s10
 8007144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714c:	e7ca      	b.n	80070e4 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800714e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007178 <HAL_RCC_GetHCLKFreq+0x14c>
 8007152:	e7b6      	b.n	80070c2 <HAL_RCC_GetHCLKFreq+0x96>
 8007154:	58024400 	.word	0x58024400
 8007158:	003d0900 	.word	0x003d0900
 800715c:	08012500 	.word	0x08012500
 8007160:	240001f8 	.word	0x240001f8
 8007164:	240001f4 	.word	0x240001f4
 8007168:	03d09000 	.word	0x03d09000
 800716c:	4a742400 	.word	0x4a742400
 8007170:	007a1200 	.word	0x007a1200
 8007174:	4af42400 	.word	0x4af42400
 8007178:	4c742400 	.word	0x4c742400

0800717c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800717c:	494d      	ldr	r1, [pc, #308]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x138>)
 800717e:	690b      	ldr	r3, [r1, #16]
 8007180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007184:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007186:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007188:	d06b      	beq.n	8007262 <HAL_RCC_GetPCLK1Freq+0xe6>
 800718a:	2b18      	cmp	r3, #24
 800718c:	d029      	beq.n	80071e2 <HAL_RCC_GetPCLK1Freq+0x66>
 800718e:	b1fb      	cbz	r3, 80071d0 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8007190:	4a49      	ldr	r2, [pc, #292]	; (80072b8 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007192:	4848      	ldr	r0, [pc, #288]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x138>)
 8007194:	4949      	ldr	r1, [pc, #292]	; (80072bc <HAL_RCC_GetPCLK1Freq+0x140>)
 8007196:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007198:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800719a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800719e:	4d48      	ldr	r5, [pc, #288]	; (80072c0 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071a0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071a4:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071a8:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071ac:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80071b0:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071b2:	4c44      	ldr	r4, [pc, #272]	; (80072c4 <HAL_RCC_GetPCLK1Freq+0x148>)
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80071b8:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071ba:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071bc:	69c2      	ldr	r2, [r0, #28]
 80071be:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80071c2:	5c88      	ldrb	r0, [r1, r2]
 80071c4:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071c8:	bc30      	pop	{r4, r5}
 80071ca:	fa23 f000 	lsr.w	r0, r3, r0
 80071ce:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d0:	680b      	ldr	r3, [r1, #0]
 80071d2:	069a      	lsls	r2, r3, #26
 80071d4:	d547      	bpl.n	8007266 <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071d6:	680b      	ldr	r3, [r1, #0]
 80071d8:	4a3b      	ldr	r2, [pc, #236]	; (80072c8 <HAL_RCC_GetPCLK1Freq+0x14c>)
 80071da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80071de:	40da      	lsrs	r2, r3
 80071e0:	e7d7      	b.n	8007192 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e2:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071e4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071e8:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ec:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	d0cf      	beq.n	8007192 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071f2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071fe:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007202:	fb03 f304 	mul.w	r3, r3, r4
 8007206:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800720a:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8007214:	d002      	beq.n	800721c <HAL_RCC_GetPCLK1Freq+0xa0>
 8007216:	d32b      	bcc.n	8007270 <HAL_RCC_GetPCLK1Freq+0xf4>
 8007218:	2802      	cmp	r0, #2
 800721a:	d026      	beq.n	800726a <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800721c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80072cc <HAL_RCC_GetPCLK1Freq+0x150>
 8007220:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8007224:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a10 	vmov	s14, r3
 800722e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007232:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007236:	ee37 7a25 	vadd.f32	s14, s14, s11
 800723a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800723e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x138>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800724a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800724c:	ee07 3a10 	vmov	s14, r3
 8007250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007254:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007258:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800725c:	ee17 2a90 	vmov	r2, s15
 8007260:	e797      	b.n	8007192 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8007262:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <HAL_RCC_GetPCLK1Freq+0x154>)
 8007264:	e795      	b.n	8007192 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007266:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8007268:	e793      	b.n	8007192 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800726a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80072d4 <HAL_RCC_GetPCLK1Freq+0x158>
 800726e:	e7d7      	b.n	8007220 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007270:	680b      	ldr	r3, [r1, #0]
 8007272:	069b      	lsls	r3, r3, #26
 8007274:	d51a      	bpl.n	80072ac <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007276:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007278:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800727c:	4a12      	ldr	r2, [pc, #72]	; (80072c8 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800727e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007282:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007284:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 2a10 	vmov	s14, r2
 800728e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007292:	ee07 3a10 	vmov	s14, r3
 8007296:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800729a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800729e:	ee76 6a05 	vadd.f32	s13, s12, s10
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	e7ca      	b.n	8007242 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80072d8 <HAL_RCC_GetPCLK1Freq+0x15c>
 80072b0:	e7b6      	b.n	8007220 <HAL_RCC_GetPCLK1Freq+0xa4>
 80072b2:	bf00      	nop
 80072b4:	58024400 	.word	0x58024400
 80072b8:	003d0900 	.word	0x003d0900
 80072bc:	08012500 	.word	0x08012500
 80072c0:	240001f4 	.word	0x240001f4
 80072c4:	240001f8 	.word	0x240001f8
 80072c8:	03d09000 	.word	0x03d09000
 80072cc:	4a742400 	.word	0x4a742400
 80072d0:	007a1200 	.word	0x007a1200
 80072d4:	4af42400 	.word	0x4af42400
 80072d8:	4c742400 	.word	0x4c742400

080072dc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072dc:	494d      	ldr	r1, [pc, #308]	; (8007414 <HAL_RCC_GetPCLK2Freq+0x138>)
 80072de:	690b      	ldr	r3, [r1, #16]
 80072e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072e4:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072e6:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072e8:	d06b      	beq.n	80073c2 <HAL_RCC_GetPCLK2Freq+0xe6>
 80072ea:	2b18      	cmp	r3, #24
 80072ec:	d029      	beq.n	8007342 <HAL_RCC_GetPCLK2Freq+0x66>
 80072ee:	b1fb      	cbz	r3, 8007330 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 80072f0:	4a49      	ldr	r2, [pc, #292]	; (8007418 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072f2:	4848      	ldr	r0, [pc, #288]	; (8007414 <HAL_RCC_GetPCLK2Freq+0x138>)
 80072f4:	4949      	ldr	r1, [pc, #292]	; (800741c <HAL_RCC_GetPCLK2Freq+0x140>)
 80072f6:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072f8:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072fa:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80072fe:	4d48      	ldr	r5, [pc, #288]	; (8007420 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007300:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007304:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007306:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007308:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800730c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007310:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007312:	4c44      	ldr	r4, [pc, #272]	; (8007424 <HAL_RCC_GetPCLK2Freq+0x148>)
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8007318:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800731a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800731c:	69c2      	ldr	r2, [r0, #28]
 800731e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8007322:	5c88      	ldrb	r0, [r1, r2]
 8007324:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007328:	bc30      	pop	{r4, r5}
 800732a:	fa23 f000 	lsr.w	r0, r3, r0
 800732e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	069a      	lsls	r2, r3, #26
 8007334:	d547      	bpl.n	80073c6 <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007336:	680b      	ldr	r3, [r1, #0]
 8007338:	4a3b      	ldr	r2, [pc, #236]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800733a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800733e:	40da      	lsrs	r2, r3
 8007340:	e7d7      	b.n	80072f2 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007342:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007344:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007346:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007348:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800734c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 800734e:	2a00      	cmp	r2, #0
 8007350:	d0cf      	beq.n	80072f2 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007352:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800735e:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007362:	fb03 f304 	mul.w	r3, r3, r4
 8007366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800736a:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8007374:	d002      	beq.n	800737c <HAL_RCC_GetPCLK2Freq+0xa0>
 8007376:	d32b      	bcc.n	80073d0 <HAL_RCC_GetPCLK2Freq+0xf4>
 8007378:	2802      	cmp	r0, #2
 800737a:	d026      	beq.n	80073ca <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800737c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800742c <HAL_RCC_GetPCLK2Freq+0x150>
 8007380:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8007384:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a10 	vmov	s14, r3
 800738e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007392:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007396:	ee37 7a25 	vadd.f32	s14, s14, s11
 800739a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800739e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <HAL_RCC_GetPCLK2Freq+0x138>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80073aa:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073ac:	ee07 3a10 	vmov	s14, r3
 80073b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80073b8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80073bc:	ee17 2a90 	vmov	r2, s15
 80073c0:	e797      	b.n	80072f2 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <HAL_RCC_GetPCLK2Freq+0x154>)
 80073c4:	e795      	b.n	80072f2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80073c6:	4a18      	ldr	r2, [pc, #96]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80073c8:	e793      	b.n	80072f2 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007434 <HAL_RCC_GetPCLK2Freq+0x158>
 80073ce:	e7d7      	b.n	8007380 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d0:	680b      	ldr	r3, [r1, #0]
 80073d2:	069b      	lsls	r3, r3, #26
 80073d4:	d51a      	bpl.n	800740c <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073d6:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073dc:	4a12      	ldr	r2, [pc, #72]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80073de:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e4:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	ee07 2a10 	vmov	s14, r2
 80073ee:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80073f2:	ee07 3a10 	vmov	s14, r3
 80073f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80073fa:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80073fe:	ee76 6a05 	vadd.f32	s13, s12, s10
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	e7ca      	b.n	80073a2 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800740c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007438 <HAL_RCC_GetPCLK2Freq+0x15c>
 8007410:	e7b6      	b.n	8007380 <HAL_RCC_GetPCLK2Freq+0xa4>
 8007412:	bf00      	nop
 8007414:	58024400 	.word	0x58024400
 8007418:	003d0900 	.word	0x003d0900
 800741c:	08012500 	.word	0x08012500
 8007420:	240001f4 	.word	0x240001f4
 8007424:	240001f8 	.word	0x240001f8
 8007428:	03d09000 	.word	0x03d09000
 800742c:	4a742400 	.word	0x4a742400
 8007430:	007a1200 	.word	0x007a1200
 8007434:	4af42400 	.word	0x4af42400
 8007438:	4c742400 	.word	0x4c742400

0800743c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800743c:	4a3b      	ldr	r2, [pc, #236]	; (800752c <RCCEx_PLL2_Config+0xf0>)
{
 800743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007440:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d067      	beq.n	800751a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	460f      	mov	r7, r1
 800744e:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007450:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8007452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007456:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007458:	f7fb ffe6 	bl	8003428 <HAL_GetTick>
 800745c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800745e:	e004      	b.n	800746a <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007460:	f7fb ffe2 	bl	8003428 <HAL_GetTick>
 8007464:	1b80      	subs	r0, r0, r6
 8007466:	2802      	cmp	r0, #2
 8007468:	d859      	bhi.n	800751e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	d4f7      	bmi.n	8007460 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007472:	682a      	ldr	r2, [r5, #0]
 8007474:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007478:	492d      	ldr	r1, [pc, #180]	; (8007530 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800747a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800747e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007480:	686e      	ldr	r6, [r5, #4]
 8007482:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8007486:	3e01      	subs	r6, #1
 8007488:	1e50      	subs	r0, r2, #1
 800748a:	3b01      	subs	r3, #1
 800748c:	692a      	ldr	r2, [r5, #16]
 800748e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007492:	025b      	lsls	r3, r3, #9
 8007494:	0400      	lsls	r0, r0, #16
 8007496:	3a01      	subs	r2, #1
 8007498:	b29b      	uxth	r3, r3
 800749a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800749e:	0612      	lsls	r2, r2, #24
 80074a0:	4303      	orrs	r3, r0
 80074a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80074a6:	4333      	orrs	r3, r6
 80074a8:	4313      	orrs	r3, r2
 80074aa:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80074ae:	696a      	ldr	r2, [r5, #20]
 80074b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074b4:	4313      	orrs	r3, r2
 80074b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80074ba:	69aa      	ldr	r2, [r5, #24]
 80074bc:	f023 0320 	bic.w	r3, r3, #32
 80074c0:	4313      	orrs	r3, r2
 80074c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80074c6:	f023 0310 	bic.w	r3, r3, #16
 80074ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80074ce:	69eb      	ldr	r3, [r5, #28]
 80074d0:	4011      	ands	r1, r2
 80074d2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80074d6:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80074da:	f043 0310 	orr.w	r3, r3, #16
 80074de:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80074e2:	b1f7      	cbz	r7, 8007522 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074e4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074e6:	bf0c      	ite	eq
 80074e8:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074ec:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80074f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <RCCEx_PLL2_Config+0xf0>)
 80074f4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074f6:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 80074f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80074fc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80074fe:	f7fb ff93 	bl	8003428 <HAL_GetTick>
 8007502:	4605      	mov	r5, r0
 8007504:	e004      	b.n	8007510 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007506:	f7fb ff8f 	bl	8003428 <HAL_GetTick>
 800750a:	1b40      	subs	r0, r0, r5
 800750c:	2802      	cmp	r0, #2
 800750e:	d806      	bhi.n	800751e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	011b      	lsls	r3, r3, #4
 8007514:	d5f7      	bpl.n	8007506 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8007516:	2000      	movs	r0, #0
}
 8007518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800751a:	2001      	movs	r0, #1
}
 800751c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800751e:	2003      	movs	r0, #3
}
 8007520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007522:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007526:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007528:	e7e3      	b.n	80074f2 <RCCEx_PLL2_Config+0xb6>
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
 8007530:	ffff0007 	.word	0xffff0007

08007534 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007534:	4a3b      	ldr	r2, [pc, #236]	; (8007624 <RCCEx_PLL3_Config+0xf0>)
{
 8007536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007538:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d067      	beq.n	8007612 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	460f      	mov	r7, r1
 8007546:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007548:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800754a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007550:	f7fb ff6a 	bl	8003428 <HAL_GetTick>
 8007554:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007556:	e004      	b.n	8007562 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007558:	f7fb ff66 	bl	8003428 <HAL_GetTick>
 800755c:	1b80      	subs	r0, r0, r6
 800755e:	2802      	cmp	r0, #2
 8007560:	d859      	bhi.n	8007616 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	009a      	lsls	r2, r3, #2
 8007566:	d4f7      	bmi.n	8007558 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800756a:	682a      	ldr	r2, [r5, #0]
 800756c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007570:	492d      	ldr	r1, [pc, #180]	; (8007628 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007572:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007576:	62a3      	str	r3, [r4, #40]	; 0x28
 8007578:	686e      	ldr	r6, [r5, #4]
 800757a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800757e:	3e01      	subs	r6, #1
 8007580:	1e50      	subs	r0, r2, #1
 8007582:	3b01      	subs	r3, #1
 8007584:	692a      	ldr	r2, [r5, #16]
 8007586:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800758a:	025b      	lsls	r3, r3, #9
 800758c:	0400      	lsls	r0, r0, #16
 800758e:	3a01      	subs	r2, #1
 8007590:	b29b      	uxth	r3, r3
 8007592:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8007596:	0612      	lsls	r2, r2, #24
 8007598:	4303      	orrs	r3, r0
 800759a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800759e:	4333      	orrs	r3, r6
 80075a0:	4313      	orrs	r3, r2
 80075a2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075a6:	696a      	ldr	r2, [r5, #20]
 80075a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80075ac:	4313      	orrs	r3, r2
 80075ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075b2:	69aa      	ldr	r2, [r5, #24]
 80075b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075b8:	4313      	orrs	r3, r2
 80075ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80075c6:	69eb      	ldr	r3, [r5, #28]
 80075c8:	4011      	ands	r1, r2
 80075ca:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80075ce:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80075da:	b1f7      	cbz	r7, 800761a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075dc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075de:	bf0c      	ite	eq
 80075e0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075e4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80075e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <RCCEx_PLL3_Config+0xf0>)
 80075ec:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075ee:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 80075f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80075f6:	f7fb ff17 	bl	8003428 <HAL_GetTick>
 80075fa:	4605      	mov	r5, r0
 80075fc:	e004      	b.n	8007608 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075fe:	f7fb ff13 	bl	8003428 <HAL_GetTick>
 8007602:	1b40      	subs	r0, r0, r5
 8007604:	2802      	cmp	r0, #2
 8007606:	d806      	bhi.n	8007616 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	d5f7      	bpl.n	80075fe <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800760e:	2000      	movs	r0, #0
}
 8007610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007612:	2001      	movs	r0, #1
}
 8007614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007616:	2003      	movs	r0, #3
}
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800761a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800761e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007620:	e7e3      	b.n	80075ea <RCCEx_PLL3_Config+0xb6>
 8007622:	bf00      	nop
 8007624:	58024400 	.word	0x58024400
 8007628:	ffff0007 	.word	0xffff0007

0800762c <HAL_RCCEx_PeriphCLKConfig>:
{
 800762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007630:	6803      	ldr	r3, [r0, #0]
{
 8007632:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007634:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8007638:	d015      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800763a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800763c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007640:	f000 844e 	beq.w	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007644:	f240 8501 	bls.w	800804a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007648:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800764c:	f000 8461 	beq.w	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8007650:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007654:	f040 8512 	bne.w	800807c <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007658:	48a2      	ldr	r0, [pc, #648]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800765a:	2600      	movs	r6, #0
 800765c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800765e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007662:	430a      	orrs	r2, r1
 8007664:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007666:	05dd      	lsls	r5, r3, #23
 8007668:	d50a      	bpl.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 800766a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800766c:	2a04      	cmp	r2, #4
 800766e:	d806      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007670:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007674:	03e403dd 	.word	0x03e403dd
 8007678:	039e03d2 	.word	0x039e03d2
 800767c:	039e      	.short	0x039e
      ret = HAL_ERROR;
 800767e:	2601      	movs	r6, #1
 8007680:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007682:	0598      	lsls	r0, r3, #22
 8007684:	d51b      	bpl.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007686:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007688:	2a80      	cmp	r2, #128	; 0x80
 800768a:	f000 8405 	beq.w	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800768e:	f200 84d1 	bhi.w	8008034 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8007692:	2a00      	cmp	r2, #0
 8007694:	f000 8443 	beq.w	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8007698:	2a40      	cmp	r2, #64	; 0x40
 800769a:	f040 84d2 	bne.w	8008042 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800769e:	2100      	movs	r1, #0
 80076a0:	1d20      	adds	r0, r4, #4
 80076a2:	f7ff fecb 	bl	800743c <RCCEx_PLL2_Config>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	f040 83fe 	bne.w	8007eac <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076b0:	498c      	ldr	r1, [pc, #560]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80076b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076b4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80076b6:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 80076ba:	4302      	orrs	r2, r0
 80076bc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80076be:	0559      	lsls	r1, r3, #21
 80076c0:	d51f      	bpl.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80076c2:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80076c6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80076ca:	f000 83d4 	beq.w	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 80076ce:	f200 8499 	bhi.w	8008004 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	f000 8410 	beq.w	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80076d8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80076dc:	f040 849a 	bne.w	8008014 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e0:	2100      	movs	r1, #0
 80076e2:	1d20      	adds	r0, r4, #4
 80076e4:	f7ff feaa 	bl	800743c <RCCEx_PLL2_Config>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	f040 83cc 	bne.w	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076f2:	497c      	ldr	r1, [pc, #496]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80076f4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80076f8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80076fa:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 80076fe:	4302      	orrs	r2, r0
 8007700:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007702:	051a      	lsls	r2, r3, #20
 8007704:	d51f      	bpl.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007706:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800770a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800770e:	f000 83cf 	beq.w	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8007712:	f200 8483 	bhi.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8007716:	2a00      	cmp	r2, #0
 8007718:	f000 8408 	beq.w	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x900>
 800771c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007720:	f040 8484 	bne.w	800802c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007724:	2100      	movs	r1, #0
 8007726:	1d20      	adds	r0, r4, #4
 8007728:	f7ff fe88 	bl	800743c <RCCEx_PLL2_Config>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007730:	2d00      	cmp	r5, #0
 8007732:	f040 83c7 	bne.w	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007736:	496b      	ldr	r1, [pc, #428]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007738:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800773c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800773e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8007742:	4302      	orrs	r2, r0
 8007744:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007746:	019f      	lsls	r7, r3, #6
 8007748:	d50d      	bpl.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 800774a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800774c:	2a10      	cmp	r2, #16
 800774e:	f000 830c 	beq.w	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007752:	f240 848e 	bls.w	8008072 <HAL_RCCEx_PeriphCLKConfig+0xa46>
 8007756:	2a20      	cmp	r2, #32
 8007758:	f000 8349 	beq.w	8007dee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 800775c:	2a30      	cmp	r2, #48	; 0x30
 800775e:	f000 8309 	beq.w	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      ret = HAL_ERROR;
 8007762:	2601      	movs	r6, #1
 8007764:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007766:	04d8      	lsls	r0, r3, #19
 8007768:	d51d      	bpl.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800776a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800776c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007770:	f000 83aa 	beq.w	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007774:	f200 8471 	bhi.w	800805a <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8007778:	2a00      	cmp	r2, #0
 800777a:	f000 83c4 	beq.w	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800777e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007782:	f040 8472 	bne.w	800806a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007786:	2100      	movs	r1, #0
 8007788:	1d20      	adds	r0, r4, #4
 800778a:	f7ff fe57 	bl	800743c <RCCEx_PLL2_Config>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007792:	2d00      	cmp	r5, #0
 8007794:	f040 83a2 	bne.w	8007edc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007798:	4952      	ldr	r1, [pc, #328]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800779a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800779c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800779e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80077a2:	4302      	orrs	r2, r0
 80077a4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077a6:	0499      	lsls	r1, r3, #18
 80077a8:	d51b      	bpl.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80077aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80077ac:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80077b0:	f000 8309 	beq.w	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80077b4:	f200 8407 	bhi.w	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80077b8:	b14a      	cbz	r2, 80077ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80077ba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80077be:	f040 840e 	bne.w	8007fde <HAL_RCCEx_PeriphCLKConfig+0x9b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077c2:	2101      	movs	r1, #1
 80077c4:	1d20      	adds	r0, r4, #4
 80077c6:	f7ff fe39 	bl	800743c <RCCEx_PLL2_Config>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	f040 8271 	bne.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077d4:	4943      	ldr	r1, [pc, #268]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80077d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80077d8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80077da:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80077de:	4302      	orrs	r2, r0
 80077e0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077e2:	045a      	lsls	r2, r3, #17
 80077e4:	d51d      	bpl.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80077e6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80077ea:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80077ee:	f000 82b2 	beq.w	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x72a>
 80077f2:	f200 83f8 	bhi.w	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80077f6:	b14a      	cbz	r2, 800780c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80077f8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80077fc:	f040 83ff 	bne.w	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007800:	2101      	movs	r1, #1
 8007802:	1d20      	adds	r0, r4, #4
 8007804:	f7ff fe1a 	bl	800743c <RCCEx_PLL2_Config>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800780c:	2d00      	cmp	r5, #0
 800780e:	f040 8250 	bne.w	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007812:	4934      	ldr	r1, [pc, #208]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007814:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8007818:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800781a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800781e:	4302      	orrs	r2, r0
 8007820:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007822:	041f      	lsls	r7, r3, #16
 8007824:	d50d      	bpl.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8007826:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007828:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800782c:	f000 82d6 	beq.w	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8007830:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007834:	f000 81ad 	beq.w	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007838:	2a00      	cmp	r2, #0
 800783a:	f000 81b0 	beq.w	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = HAL_ERROR;
 800783e:	2601      	movs	r6, #1
 8007840:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007842:	01d8      	lsls	r0, r3, #7
 8007844:	d519      	bpl.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8007846:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007848:	2a03      	cmp	r2, #3
 800784a:	f200 8442 	bhi.w	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 800784e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007852:	000a      	.short	0x000a
 8007854:	00040264 	.word	0x00040264
 8007858:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800785a:	2102      	movs	r1, #2
 800785c:	1d20      	adds	r0, r4, #4
 800785e:	f7ff fded 	bl	800743c <RCCEx_PLL2_Config>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007866:	2d00      	cmp	r5, #0
 8007868:	f040 821b 	bne.w	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800786c:	491d      	ldr	r1, [pc, #116]	; (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800786e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007870:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007872:	f022 0203 	bic.w	r2, r2, #3
 8007876:	4302      	orrs	r2, r0
 8007878:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800787a:	0259      	lsls	r1, r3, #9
 800787c:	f100 81cb 	bmi.w	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007880:	07df      	lsls	r7, r3, #31
 8007882:	d542      	bpl.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007884:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007886:	2a28      	cmp	r2, #40	; 0x28
 8007888:	f200 8369 	bhi.w	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x932>
 800788c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007890:	03670033 	.word	0x03670033
 8007894:	03670367 	.word	0x03670367
 8007898:	03670367 	.word	0x03670367
 800789c:	03670367 	.word	0x03670367
 80078a0:	03670256 	.word	0x03670256
 80078a4:	03670367 	.word	0x03670367
 80078a8:	03670367 	.word	0x03670367
 80078ac:	03670367 	.word	0x03670367
 80078b0:	0367002c 	.word	0x0367002c
 80078b4:	03670367 	.word	0x03670367
 80078b8:	03670367 	.word	0x03670367
 80078bc:	03670367 	.word	0x03670367
 80078c0:	03670033 	.word	0x03670033
 80078c4:	03670367 	.word	0x03670367
 80078c8:	03670367 	.word	0x03670367
 80078cc:	03670367 	.word	0x03670367
 80078d0:	03670033 	.word	0x03670033
 80078d4:	03670367 	.word	0x03670367
 80078d8:	03670367 	.word	0x03670367
 80078dc:	03670367 	.word	0x03670367
 80078e0:	0033      	.short	0x0033
 80078e2:	bf00      	nop
 80078e4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078e8:	2101      	movs	r1, #1
 80078ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078ee:	f7ff fe21 	bl	8007534 <RCCEx_PLL3_Config>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	f040 81d1 	bne.w	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x672>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80078fc:	49ad      	ldr	r1, [pc, #692]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80078fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007900:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007902:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007906:	4302      	orrs	r2, r0
 8007908:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800790a:	0798      	lsls	r0, r3, #30
 800790c:	d51c      	bpl.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800790e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007910:	2a05      	cmp	r2, #5
 8007912:	f200 83d8 	bhi.w	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8007916:	e8df f012 	tbh	[pc, r2, lsl #1]
 800791a:	000d      	.short	0x000d
 800791c:	000601f7 	.word	0x000601f7
 8007920:	000d000d 	.word	0x000d000d
 8007924:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007926:	2101      	movs	r1, #1
 8007928:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800792c:	f7ff fe02 	bl	8007534 <RCCEx_PLL3_Config>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007934:	2d00      	cmp	r5, #0
 8007936:	f040 81b6 	bne.w	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800793a:	499e      	ldr	r1, [pc, #632]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800793c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800793e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007940:	f022 0207 	bic.w	r2, r2, #7
 8007944:	4302      	orrs	r2, r0
 8007946:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007948:	0759      	lsls	r1, r3, #29
 800794a:	d51e      	bpl.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800794c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007950:	2a05      	cmp	r2, #5
 8007952:	f200 83bb 	bhi.w	80080cc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8007956:	e8df f012 	tbh	[pc, r2, lsl #1]
 800795a:	000d      	.short	0x000d
 800795c:	000601e8 	.word	0x000601e8
 8007960:	000d000d 	.word	0x000d000d
 8007964:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007966:	2101      	movs	r1, #1
 8007968:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800796c:	f7ff fde2 	bl	8007534 <RCCEx_PLL3_Config>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007974:	2d00      	cmp	r5, #0
 8007976:	f040 8198 	bne.w	8007caa <HAL_RCCEx_PeriphCLKConfig+0x67e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800797a:	498e      	ldr	r1, [pc, #568]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800797c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007980:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007982:	f022 0207 	bic.w	r2, r2, #7
 8007986:	4302      	orrs	r2, r0
 8007988:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800798a:	069a      	lsls	r2, r3, #26
 800798c:	d51d      	bpl.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800798e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007992:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007996:	f000 81f7 	beq.w	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 800799a:	f200 82e7 	bhi.w	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x940>
 800799e:	b14a      	cbz	r2, 80079b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80079a0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80079a4:	f040 82ee 	bne.w	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x958>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a8:	2100      	movs	r1, #0
 80079aa:	1d20      	adds	r0, r4, #4
 80079ac:	f7ff fd46 	bl	800743c <RCCEx_PLL2_Config>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	f040 817a 	bne.w	8007cae <HAL_RCCEx_PeriphCLKConfig+0x682>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079ba:	497e      	ldr	r1, [pc, #504]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80079bc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80079c0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80079c2:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80079c6:	4302      	orrs	r2, r0
 80079c8:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079ca:	065f      	lsls	r7, r3, #25
 80079cc:	d51d      	bpl.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80079ce:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80079d2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80079d6:	f000 81e1 	beq.w	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x770>
 80079da:	f200 82d6 	bhi.w	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 80079de:	b14a      	cbz	r2, 80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80079e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80079e4:	f040 82dd 	bne.w	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079e8:	2100      	movs	r1, #0
 80079ea:	1d20      	adds	r0, r4, #4
 80079ec:	f7ff fd26 	bl	800743c <RCCEx_PLL2_Config>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80079f4:	2d00      	cmp	r5, #0
 80079f6:	f040 8162 	bne.w	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x692>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079fa:	496e      	ldr	r1, [pc, #440]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80079fc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8007a00:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007a02:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007a06:	4302      	orrs	r2, r0
 8007a08:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a0a:	0618      	lsls	r0, r3, #24
 8007a0c:	d51d      	bpl.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007a0e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007a12:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007a16:	f000 81f4 	beq.w	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8007a1a:	f200 82c5 	bhi.w	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007a1e:	b14a      	cbz	r2, 8007a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007a20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007a24:	f040 82cc 	bne.w	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a28:	2100      	movs	r1, #0
 8007a2a:	1d20      	adds	r0, r4, #4
 8007a2c:	f7ff fd06 	bl	800743c <RCCEx_PLL2_Config>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	f040 8144 	bne.w	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x696>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a3a:	495e      	ldr	r1, [pc, #376]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007a3c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8007a40:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007a42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007a46:	4302      	orrs	r2, r0
 8007a48:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a4a:	0719      	lsls	r1, r3, #28
 8007a4c:	d50b      	bpl.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a4e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007a52:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007a56:	f000 81f8 	beq.w	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a5a:	4856      	ldr	r0, [pc, #344]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007a5c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007a5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007a62:	430a      	orrs	r2, r1
 8007a64:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a66:	06da      	lsls	r2, r3, #27
 8007a68:	d50b      	bpl.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007a6a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007a6e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007a72:	f000 81f5 	beq.w	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a76:	484f      	ldr	r0, [pc, #316]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007a78:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007a7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a82:	031f      	lsls	r7, r3, #12
 8007a84:	d50e      	bpl.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 8007a86:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007a8a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007a8e:	f000 8093 	beq.w	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8007a92:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007a96:	f000 8096 	beq.w	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a9a:	2900      	cmp	r1, #0
 8007a9c:	f000 824d 	beq.w	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x90e>
      ret = HAL_ERROR;
 8007aa0:	2601      	movs	r6, #1
 8007aa2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aa4:	0358      	lsls	r0, r3, #13
 8007aa6:	d50f      	bpl.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8007aa8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007aac:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007ab0:	f000 8094 	beq.w	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8007ab4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007ab8:	f000 8097 	beq.w	8007bea <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007abc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007ac0:	f000 8244 	beq.w	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x920>
      ret = HAL_ERROR;
 8007ac4:	2601      	movs	r6, #1
 8007ac6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ac8:	03d9      	lsls	r1, r3, #15
 8007aca:	d517      	bpl.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007acc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	f000 8110 	beq.w	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8007ad4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007ad8:	f040 80f7 	bne.w	8007cca <HAL_RCCEx_PeriphCLKConfig+0x69e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007adc:	2102      	movs	r1, #2
 8007ade:	1d20      	adds	r0, r4, #4
 8007ae0:	f7ff fcac 	bl	800743c <RCCEx_PLL2_Config>
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	f040 810b 	bne.w	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007aee:	4931      	ldr	r1, [pc, #196]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007af0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007af2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007af4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007af8:	4302      	orrs	r2, r0
 8007afa:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007afc:	009a      	lsls	r2, r3, #2
 8007afe:	d47f      	bmi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b00:	039f      	lsls	r7, r3, #14
 8007b02:	d435      	bmi.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8007b04:	1c30      	adds	r0, r6, #0
 8007b06:	bf18      	it	ne
 8007b08:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b0a:	02de      	lsls	r6, r3, #11
 8007b0c:	d506      	bpl.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b0e:	4929      	ldr	r1, [pc, #164]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007b10:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007b12:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007b14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007b18:	432a      	orrs	r2, r5
 8007b1a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007b1c:	00dd      	lsls	r5, r3, #3
 8007b1e:	d507      	bpl.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x504>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007b20:	4924      	ldr	r1, [pc, #144]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007b22:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8007b26:	690a      	ldr	r2, [r1, #16]
 8007b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b2c:	432a      	orrs	r2, r5
 8007b2e:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b30:	0299      	lsls	r1, r3, #10
 8007b32:	d506      	bpl.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b34:	491f      	ldr	r1, [pc, #124]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007b36:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8007b38:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007b3a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007b3e:	432a      	orrs	r2, r5
 8007b40:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b42:	005a      	lsls	r2, r3, #1
 8007b44:	d509      	bpl.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b46:	4a1b      	ldr	r2, [pc, #108]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007b48:	6911      	ldr	r1, [r2, #16]
 8007b4a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007b4e:	6111      	str	r1, [r2, #16]
 8007b50:	6911      	ldr	r1, [r2, #16]
 8007b52:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8007b56:	4329      	orrs	r1, r5
 8007b58:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	da06      	bge.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b5e:	4a15      	ldr	r2, [pc, #84]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007b60:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007b62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007b64:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8007b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007b70:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007b72:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007b76:	f000 80ab 	beq.w	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8007b7a:	f240 80e8 	bls.w	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x722>
 8007b7e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007b82:	f000 80aa 	beq.w	8007cda <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007b86:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007b8a:	f000 80a6 	beq.w	8007cda <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007b8e:	2001      	movs	r0, #1
 8007b90:	e7bb      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b92:	2101      	movs	r1, #1
 8007b94:	1d20      	adds	r0, r4, #4
 8007b96:	f7ff fc51 	bl	800743c <RCCEx_PLL2_Config>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	f040 808b 	bne.w	8007cba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ba4:	4903      	ldr	r1, [pc, #12]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8007ba6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007ba8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007baa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bae:	4302      	orrs	r2, r0
 8007bb0:	650a      	str	r2, [r1, #80]	; 0x50
 8007bb2:	e646      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007bb4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bb8:	2102      	movs	r1, #2
 8007bba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007bbe:	f7ff fcb9 	bl	8007534 <RCCEx_PLL3_Config>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	d17d      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bca:	49b1      	ldr	r1, [pc, #708]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007bcc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007bd0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007bd2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007bd6:	4302      	orrs	r2, r0
 8007bd8:	658a      	str	r2, [r1, #88]	; 0x58
 8007bda:	e763      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bdc:	2101      	movs	r1, #1
 8007bde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007be2:	f7ff fca7 	bl	8007534 <RCCEx_PLL3_Config>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	d155      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bee:	49a8      	ldr	r1, [pc, #672]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007bf0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007bf4:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007bf6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007bfa:	4302      	orrs	r2, r0
 8007bfc:	654a      	str	r2, [r1, #84]	; 0x54
 8007bfe:	e763      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c00:	2102      	movs	r1, #2
 8007c02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c06:	f7ff fc95 	bl	8007534 <RCCEx_PLL3_Config>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f43f af77 	beq.w	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 8007c12:	2601      	movs	r6, #1
 8007c14:	e774      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c16:	4b9f      	ldr	r3, [pc, #636]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 8007c18:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c1a:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c20:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8007c22:	f7fb fc01 	bl	8003428 <HAL_GetTick>
 8007c26:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c28:	e006      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2a:	f7fb fbfd 	bl	8003428 <HAL_GetTick>
 8007c2e:	eba0 0008 	sub.w	r0, r0, r8
 8007c32:	2864      	cmp	r0, #100	; 0x64
 8007c34:	f200 8196 	bhi.w	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x938>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	05da      	lsls	r2, r3, #23
 8007c3c:	d5f5      	bpl.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    if(ret == HAL_OK)
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	f040 823d 	bne.w	80080be <HAL_RCCEx_PeriphCLKConfig+0xa92>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c44:	4a92      	ldr	r2, [pc, #584]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007c46:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007c4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007c4c:	4059      	eors	r1, r3
 8007c4e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8007c52:	d00b      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x640>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c54:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c56:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c58:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c5c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007c60:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c62:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8007c64:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8007c68:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007c6a:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c70:	f000 8207 	beq.w	8008082 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c74:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007c78:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007c7c:	f000 8215 	beq.w	80080aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007c80:	4983      	ldr	r1, [pc, #524]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007c82:	690a      	ldr	r2, [r1, #16]
 8007c84:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007c88:	610a      	str	r2, [r1, #16]
 8007c8a:	4a81      	ldr	r2, [pc, #516]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c90:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007c92:	430b      	orrs	r3, r1
 8007c94:	6713      	str	r3, [r2, #112]	; 0x70
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	e5f2      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007c9a:	462e      	mov	r6, r5
 8007c9c:	e714      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007c9e:	462e      	mov	r6, r5
 8007ca0:	e633      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007ca2:	462e      	mov	r6, r5
 8007ca4:	e5e9      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007ca6:	462e      	mov	r6, r5
 8007ca8:	e64e      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007caa:	462e      	mov	r6, r5
 8007cac:	e66d      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007cae:	462e      	mov	r6, r5
 8007cb0:	e68b      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8007cb2:	462e      	mov	r6, r5
 8007cb4:	e5b5      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007cb6:	462e      	mov	r6, r5
 8007cb8:	e593      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007cba:	462e      	mov	r6, r5
 8007cbc:	e5c1      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007cbe:	462e      	mov	r6, r5
 8007cc0:	e6a3      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007cc2:	462e      	mov	r6, r5
 8007cc4:	e6c1      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8007cc6:	462e      	mov	r6, r5
 8007cc8:	e6ec      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8007cca:	2601      	movs	r6, #1
 8007ccc:	4635      	mov	r5, r6
 8007cce:	e715      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd0:	486f      	ldr	r0, [pc, #444]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007cd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007cd4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007cd8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	f47f af57 	bne.w	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x562>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ce0:	4d6b      	ldr	r5, [pc, #428]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007ce2:	1c30      	adds	r0, r6, #0
 8007ce4:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007ce6:	bf18      	it	ne
 8007ce8:	2001      	movne	r0, #1
 8007cea:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	656a      	str	r2, [r5, #84]	; 0x54
 8007cf2:	e70a      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf4:	4966      	ldr	r1, [pc, #408]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007cf6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007cf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007cfc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	f43f aef5 	beq.w	8007aee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007d04:	462e      	mov	r6, r5
 8007d06:	e6f9      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	1d20      	adds	r0, r4, #4
 8007d0c:	f7ff fb96 	bl	800743c <RCCEx_PLL2_Config>
 8007d10:	4605      	mov	r5, r0
 8007d12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	d1c6      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8007d18:	e60f      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d1a:	495d      	ldr	r1, [pc, #372]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007d1c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007d1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d22:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	d1bc      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d28:	e5a0      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	1d20      	adds	r0, r4, #4
 8007d2e:	f7ff fb85 	bl	800743c <RCCEx_PLL2_Config>
 8007d32:	4605      	mov	r5, r0
 8007d34:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	d1b7      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007d3a:	e61e      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	1d20      	adds	r0, r4, #4
 8007d40:	f7ff fb7c 	bl	800743c <RCCEx_PLL2_Config>
 8007d44:	4605      	mov	r5, r0
 8007d46:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	d1a8      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007d4c:	e5d6      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	f47f af1d 	bne.w	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007d54:	e7c1      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d56:	2101      	movs	r1, #1
 8007d58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d5c:	f7ff fbea 	bl	8007534 <RCCEx_PLL3_Config>
 8007d60:	4605      	mov	r5, r0
 8007d62:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	d1a4      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x686>
 8007d68:	e553      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6a:	4949      	ldr	r1, [pc, #292]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007d6c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007d6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007d72:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	d142      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d78:	4945      	ldr	r1, [pc, #276]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007d7a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007d7c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007d7e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007d82:	4302      	orrs	r2, r0
 8007d84:	64ca      	str	r2, [r1, #76]	; 0x4c
 8007d86:	e4ee      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d88:	2102      	movs	r1, #2
 8007d8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d8e:	f7ff fbd1 	bl	8007534 <RCCEx_PLL3_Config>
 8007d92:	4605      	mov	r5, r0
 8007d94:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	d189      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007d9a:	e60e      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d9c:	2102      	movs	r1, #2
 8007d9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007da2:	f7ff fbc7 	bl	8007534 <RCCEx_PLL3_Config>
 8007da6:	4605      	mov	r5, r0
 8007da8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	d187      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x692>
 8007dae:	e624      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007db0:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8007db2:	2d00      	cmp	r5, #0
 8007db4:	d139      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007db6:	4936      	ldr	r1, [pc, #216]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007dbc:	f022 0207 	bic.w	r2, r2, #7
 8007dc0:	4302      	orrs	r2, r0
 8007dc2:	650a      	str	r2, [r1, #80]	; 0x50
 8007dc4:	e45d      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007dcc:	f7ff fbb2 	bl	8007534 <RCCEx_PLL3_Config>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	f47f af6e 	bne.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8007dda:	e4fb      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ddc:	492c      	ldr	r1, [pc, #176]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007dde:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007de0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007de4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	f47f af67 	bne.w	8007cba <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007dec:	e6da      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dee:	2102      	movs	r1, #2
 8007df0:	1d20      	adds	r0, r4, #4
 8007df2:	f7ff fb23 	bl	800743c <RCCEx_PLL2_Config>
 8007df6:	4605      	mov	r5, r0
 8007df8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007dfa:	2d00      	cmp	r5, #0
 8007dfc:	d0bc      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007dfe:	462e      	mov	r6, r5
 8007e00:	e4b1      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e02:	2102      	movs	r1, #2
 8007e04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e08:	f7ff fb94 	bl	8007534 <RCCEx_PLL3_Config>
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	f47f af56 	bne.w	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8007e16:	e610      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e18:	2100      	movs	r1, #0
 8007e1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e1e:	f7ff fb89 	bl	8007534 <RCCEx_PLL3_Config>
 8007e22:	4605      	mov	r5, r0
 8007e24:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	d0c5      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007e2a:	462e      	mov	r6, r5
 8007e2c:	e429      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e2e:	4918      	ldr	r1, [pc, #96]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 8007e30:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e32:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007e34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007e38:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007e3a:	e7ba      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	1d20      	adds	r0, r4, #4
 8007e40:	f7ff fafc 	bl	800743c <RCCEx_PLL2_Config>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	4605      	mov	r5, r0
      break;
 8007e48:	e7b3      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e50:	f7ff fb70 	bl	8007534 <RCCEx_PLL3_Config>
 8007e54:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007e58:	b100      	cbz	r0, 8007e5c <HAL_RCCEx_PeriphCLKConfig+0x830>
          status = HAL_ERROR;
 8007e5a:	2601      	movs	r6, #1
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	e5fc      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e60:	2102      	movs	r1, #2
 8007e62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e66:	f7ff fb65 	bl	8007534 <RCCEx_PLL3_Config>
 8007e6a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007e6e:	b100      	cbz	r0, 8007e72 <HAL_RCCEx_PeriphCLKConfig+0x846>
        status = HAL_ERROR;
 8007e70:	2601      	movs	r6, #1
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	e5ff      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e76:	2100      	movs	r1, #0
 8007e78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e7c:	f7ff fb5a 	bl	8007534 <RCCEx_PLL3_Config>
 8007e80:	4605      	mov	r5, r0
 8007e82:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	f43f ac34 	beq.w	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8007e8a:	462e      	mov	r6, r5
 8007e8c:	e439      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8007e8e:	bf00      	nop
 8007e90:	58024400 	.word	0x58024400
 8007e94:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e9e:	f7ff fb49 	bl	8007534 <RCCEx_PLL3_Config>
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	f43f ac02 	beq.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8007eac:	462e      	mov	r6, r5
 8007eae:	e406      	b.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007eb6:	f7ff fb3d 	bl	8007534 <RCCEx_PLL3_Config>
 8007eba:	4605      	mov	r5, r0
 8007ebc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	f43f ac39 	beq.w	8007736 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8007ec4:	462e      	mov	r6, r5
 8007ec6:	e43e      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ec8:	2100      	movs	r1, #0
 8007eca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ece:	f7ff fb31 	bl	8007534 <RCCEx_PLL3_Config>
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	f43f ac5e 	beq.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007edc:	462e      	mov	r6, r5
 8007ede:	e462      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	3004      	adds	r0, #4
 8007ee4:	f7ff faaa 	bl	800743c <RCCEx_PLL2_Config>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	f47f abba 	bne.w	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8007ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ef4:	f7ff bbb0 	b.w	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef8:	4978      	ldr	r1, [pc, #480]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007efa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007efc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f00:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007f02:	f7ff bbf3 	b.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f06:	4975      	ldr	r1, [pc, #468]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007f08:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f0a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f0e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007f10:	e43f      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f12:	2102      	movs	r1, #2
 8007f14:	3024      	adds	r0, #36	; 0x24
 8007f16:	f7ff fb0d 	bl	8007534 <RCCEx_PLL3_Config>
 8007f1a:	4606      	mov	r6, r0
      break;
 8007f1c:	e7e5      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1e:	496f      	ldr	r1, [pc, #444]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007f20:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f26:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007f28:	f7ff bbbf 	b.w	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f2c:	496b      	ldr	r1, [pc, #428]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007f2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f34:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007f36:	f7ff bbfb 	b.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f3a:	1d20      	adds	r0, r4, #4
 8007f3c:	f7ff fa7e 	bl	800743c <RCCEx_PLL2_Config>
 8007f40:	4605      	mov	r5, r0
 8007f42:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	f47f aebe 	bne.w	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8007f4a:	e63e      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4963      	ldr	r1, [pc, #396]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 8007f4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007f54:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	f47f ae9f 	bne.w	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f5c:	e647      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      ret = HAL_ERROR;
 8007f5e:	2601      	movs	r6, #1
 8007f60:	4635      	mov	r5, r6
 8007f62:	e4d2      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 8007f64:	2603      	movs	r6, #3
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	4635      	mov	r5, r6
 8007f6a:	e489      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007f6c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007f70:	f43f ad20 	beq.w	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007f74:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007f78:	f43f ad1c 	beq.w	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007f7c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007f80:	f43f ad18 	beq.w	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 8007f84:	2601      	movs	r6, #1
 8007f86:	4635      	mov	r5, r6
 8007f88:	e51f      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007f8a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007f8e:	f43f ad31 	beq.w	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007f92:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8007f96:	f43f ad2d 	beq.w	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007f9a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007f9e:	f43f ad29 	beq.w	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8007fa2:	2601      	movs	r6, #1
 8007fa4:	4635      	mov	r5, r6
 8007fa6:	e530      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007fa8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007fac:	f43f ad42 	beq.w	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007fb0:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8007fb4:	f43f ad3e 	beq.w	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007fb8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8007fbc:	f43f ad3a 	beq.w	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8007fc0:	2601      	movs	r6, #1
 8007fc2:	4635      	mov	r5, r6
 8007fc4:	e541      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007fc6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007fca:	f43f ac00 	beq.w	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007fce:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007fd2:	f43f abfc 	beq.w	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007fd6:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8007fda:	f43f abf8 	beq.w	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8007fde:	2601      	movs	r6, #1
 8007fe0:	4635      	mov	r5, r6
 8007fe2:	f7ff bbfe 	b.w	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007fe6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007fea:	f43f ac0f 	beq.w	800780c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007fee:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007ff2:	f43f ac0b 	beq.w	800780c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007ff6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007ffa:	f43f ac07 	beq.w	800780c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8007ffe:	2601      	movs	r6, #1
 8008000:	4635      	mov	r5, r6
 8008002:	e40e      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008004:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8008008:	f43f ab70 	beq.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800800c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008010:	f43f ab6c 	beq.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8008014:	2601      	movs	r6, #1
 8008016:	4635      	mov	r5, r6
 8008018:	f7ff bb73 	b.w	8007702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 800801c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8008020:	f43f ab86 	beq.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8008024:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8008028:	f43f ab82 	beq.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 800802c:	2601      	movs	r6, #1
 800802e:	4635      	mov	r5, r6
 8008030:	f7ff bb89 	b.w	8007746 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008034:	2ac0      	cmp	r2, #192	; 0xc0
 8008036:	f43f ab38 	beq.w	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800803a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800803e:	f43f ab34 	beq.w	80076aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8008042:	2601      	movs	r6, #1
 8008044:	4635      	mov	r5, r6
 8008046:	f7ff bb3a 	b.w	80076be <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800804a:	b9ba      	cbnz	r2, 800807c <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804c:	4823      	ldr	r0, [pc, #140]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 800804e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008050:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008054:	62c1      	str	r1, [r0, #44]	; 0x2c
 8008056:	f7ff baff 	b.w	8007658 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800805a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800805e:	f43f ab98 	beq.w	8007792 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008062:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008066:	f43f ab94 	beq.w	8007792 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 800806a:	2601      	movs	r6, #1
 800806c:	4635      	mov	r5, r6
 800806e:	f7ff bb9a 	b.w	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 8008072:	2a00      	cmp	r2, #0
 8008074:	f43f ae7e 	beq.w	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008078:	f7ff bb73 	b.w	8007762 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 800807c:	2601      	movs	r6, #1
 800807e:	f7ff baf2 	b.w	8007666 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8008082:	f7fb f9d1 	bl	8003428 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008086:	4f15      	ldr	r7, [pc, #84]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
        tickstart = HAL_GetTick();
 8008088:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800808a:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808e:	e006      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xa72>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008090:	f7fb f9ca 	bl	8003428 <HAL_GetTick>
 8008094:	eba0 0009 	sub.w	r0, r0, r9
 8008098:	4540      	cmp	r0, r8
 800809a:	f63f af63 	bhi.w	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x938>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800809e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a0:	079b      	lsls	r3, r3, #30
 80080a2:	d5f5      	bpl.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xa64>
 80080a4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80080a8:	e5e4      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x648>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080aa:	480c      	ldr	r0, [pc, #48]	; (80080dc <HAL_RCCEx_PeriphCLKConfig+0xab0>)
 80080ac:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0xab4>)
 80080ae:	6901      	ldr	r1, [r0, #16]
 80080b0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80080b4:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80080b8:	430a      	orrs	r2, r1
 80080ba:	6102      	str	r2, [r0, #16]
 80080bc:	e5e5      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 80080be:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80080c0:	462e      	mov	r6, r5
 80080c2:	f7ff bbdd 	b.w	8007880 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 80080c6:	2601      	movs	r6, #1
 80080c8:	4635      	mov	r5, r6
 80080ca:	e43d      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 80080cc:	2601      	movs	r6, #1
 80080ce:	4635      	mov	r5, r6
 80080d0:	e45b      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 80080d2:	2601      	movs	r6, #1
 80080d4:	4635      	mov	r5, r6
 80080d6:	f7ff bbd0 	b.w	800787a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	00ffffcf 	.word	0x00ffffcf

080080e4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80080e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080e6:	f7fe ffa1 	bl	800702c <HAL_RCC_GetHCLKFreq>
 80080ea:	4b05      	ldr	r3, [pc, #20]	; (8008100 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80080ec:	4a05      	ldr	r2, [pc, #20]	; (8008104 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80080f4:	5cd3      	ldrb	r3, [r2, r3]
 80080f6:	f003 031f 	and.w	r3, r3, #31
}
 80080fa:	40d8      	lsrs	r0, r3
 80080fc:	bd08      	pop	{r3, pc}
 80080fe:	bf00      	nop
 8008100:	58024400 	.word	0x58024400
 8008104:	08012500 	.word	0x08012500

08008108 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008108:	4a46      	ldr	r2, [pc, #280]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 800810a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800810c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800810e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008112:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008116:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8008118:	2b00      	cmp	r3, #0
 800811a:	d059      	beq.n	80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800811c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008120:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008124:	f004 0403 	and.w	r4, r4, #3
 8008128:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800812c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8008130:	2c01      	cmp	r4, #1
 8008132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008136:	ee06 1a90 	vmov	s13, r1
 800813a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800813e:	d002      	beq.n	8008146 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8008140:	d34e      	bcc.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8008142:	2c02      	cmp	r4, #2
 8008144:	d049      	beq.n	80081da <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008146:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 800814a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800814e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008154:	ee07 3a10 	vmov	s14, r3
 8008158:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800815c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008160:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008164:	ee77 7a26 	vadd.f32	s15, s14, s13
 8008168:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800816c:	4a2d      	ldr	r2, [pc, #180]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 800816e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008172:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008174:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008178:	ee06 3a90 	vmov	s13, r3
 800817c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8008180:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008182:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008186:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800818a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800818e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008192:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008194:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008198:	ee06 3a90 	vmov	s13, r3
 800819c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80081a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80081a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80081a8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80081ac:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081b0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80081b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80081b6:	ee07 3a10 	vmov	s14, r3
 80081ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081be:	ee37 7a06 	vadd.f32	s14, s14, s12
 80081c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80081c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80081ca:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80081ce:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081d0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081d4:	6083      	str	r3, [r0, #8]
}
 80081d6:	bc30      	pop	{r4, r5}
 80081d8:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081da:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80081de:	e7b4      	b.n	800814a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e0:	6813      	ldr	r3, [r2, #0]
 80081e2:	069b      	lsls	r3, r3, #26
 80081e4:	d51a      	bpl.n	800821c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081e6:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081e8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081ec:	4910      	ldr	r1, [pc, #64]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80081ee:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081f4:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fa:	ee07 1a10 	vmov	s14, r1
 80081fe:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008202:	ee07 3a10 	vmov	s14, r3
 8008206:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800820a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800820e:	ee76 7a05 	vadd.f32	s15, s12, s10
 8008212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821a:	e7a7      	b.n	800816c <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800821c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8008220:	e793      	b.n	800814a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8008222:	bf00      	nop
 8008224:	58024400 	.word	0x58024400
 8008228:	4a742400 	.word	0x4a742400
 800822c:	4af42400 	.word	0x4af42400
 8008230:	03d09000 	.word	0x03d09000
 8008234:	4c742400 	.word	0x4c742400

08008238 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008238:	4a46      	ldr	r2, [pc, #280]	; (8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 800823a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800823c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800823e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008240:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008242:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008246:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8008248:	2b00      	cmp	r3, #0
 800824a:	d059      	beq.n	8008300 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800824c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008250:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008254:	f004 0403 	and.w	r4, r4, #3
 8008258:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800825c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8008260:	2c01      	cmp	r4, #1
 8008262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008266:	ee06 1a90 	vmov	s13, r1
 800826a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800826e:	d002      	beq.n	8008276 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8008270:	d34e      	bcc.n	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8008272:	2c02      	cmp	r4, #2
 8008274:	d049      	beq.n	800830a <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008276:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008358 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 800827a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800827e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	ee07 3a10 	vmov	s14, r3
 8008288:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800828c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008290:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008294:	ee77 7a26 	vadd.f32	s15, s14, s13
 8008298:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800829c:	4a2d      	ldr	r2, [pc, #180]	; (8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 800829e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80082a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80082a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80082a8:	ee06 3a90 	vmov	s13, r3
 80082ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80082b0:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80082b2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80082b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80082ba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80082be:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80082c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80082c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80082c8:	ee06 3a90 	vmov	s13, r3
 80082cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80082d0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80082d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80082d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80082dc:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80082e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80082e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80082e6:	ee07 3a10 	vmov	s14, r3
 80082ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80082ee:	ee37 7a06 	vadd.f32	s14, s14, s12
 80082f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80082f6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80082fa:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80082fe:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008300:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008304:	6083      	str	r3, [r0, #8]
}
 8008306:	bc30      	pop	{r4, r5}
 8008308:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800830a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800835c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800830e:	e7b4      	b.n	800827a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008310:	6813      	ldr	r3, [r2, #0]
 8008312:	069b      	lsls	r3, r3, #26
 8008314:	d51a      	bpl.n	800834c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008316:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008318:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800831c:	4910      	ldr	r1, [pc, #64]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800831e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008322:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008324:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 1a10 	vmov	s14, r1
 800832e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008332:	ee07 3a10 	vmov	s14, r3
 8008336:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800833a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800833e:	ee76 7a05 	vadd.f32	s15, s12, s10
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	e7a7      	b.n	800829c <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800834c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008364 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8008350:	e793      	b.n	800827a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8008352:	bf00      	nop
 8008354:	58024400 	.word	0x58024400
 8008358:	4a742400 	.word	0x4a742400
 800835c:	4af42400 	.word	0x4af42400
 8008360:	03d09000 	.word	0x03d09000
 8008364:	4c742400 	.word	0x4c742400

08008368 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008368:	4a46      	ldr	r2, [pc, #280]	; (8008484 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 800836a:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800836c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800836e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008370:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008372:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008376:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8008378:	2b00      	cmp	r3, #0
 800837a:	d059      	beq.n	8008430 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800837c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008380:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008384:	f004 0403 	and.w	r4, r4, #3
 8008388:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800838c:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8008390:	2c01      	cmp	r4, #1
 8008392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008396:	ee06 1a90 	vmov	s13, r1
 800839a:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800839e:	d002      	beq.n	80083a6 <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 80083a0:	d34e      	bcc.n	8008440 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80083a2:	2c02      	cmp	r4, #2
 80083a4:	d049      	beq.n	800843a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083a6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 80083aa:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80083ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80083b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b4:	ee07 3a10 	vmov	s14, r3
 80083b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80083bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083c0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80083c4:	ee77 7a26 	vadd.f32	s15, s14, s13
 80083c8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80083cc:	4a2d      	ldr	r2, [pc, #180]	; (8008484 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 80083ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80083d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80083d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80083d8:	ee06 3a90 	vmov	s13, r3
 80083dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80083e0:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80083e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80083e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80083ea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80083ee:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80083f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80083f4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80083f8:	ee06 3a90 	vmov	s13, r3
 80083fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008400:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008404:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008408:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800840c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008410:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008412:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008416:	ee07 3a10 	vmov	s14, r3
 800841a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800841e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008422:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008426:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800842a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800842e:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008430:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008434:	6083      	str	r3, [r0, #8]
}
 8008436:	bc30      	pop	{r4, r5}
 8008438:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800843a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800848c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800843e:	e7b4      	b.n	80083aa <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008440:	6813      	ldr	r3, [r2, #0]
 8008442:	069b      	lsls	r3, r3, #26
 8008444:	d51a      	bpl.n	800847c <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008446:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008448:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800844c:	4910      	ldr	r1, [pc, #64]	; (8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 800844e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008452:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008454:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 1a10 	vmov	s14, r1
 800845e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008462:	ee07 3a10 	vmov	s14, r3
 8008466:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800846a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800846e:	ee76 7a05 	vadd.f32	s15, s12, s10
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	e7a7      	b.n	80083cc <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800847c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008494 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8008480:	e793      	b.n	80083aa <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8008482:	bf00      	nop
 8008484:	58024400 	.word	0x58024400
 8008488:	4a742400 	.word	0x4a742400
 800848c:	4af42400 	.word	0x4af42400
 8008490:	03d09000 	.word	0x03d09000
 8008494:	4c742400 	.word	0x4c742400

08008498 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008498:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 800849c:	b500      	push	{lr}
 800849e:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084a0:	d02d      	beq.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80084a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80084a6:	d018      	beq.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80084a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80084ac:	d04e      	beq.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084ae:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80084b2:	d037      	beq.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80084b4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80084b8:	f000 808b 	beq.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80084bc:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80084c0:	f000 80ac 	beq.w	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80084c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80084c8:	f000 80b6 	beq.w	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084cc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80084d0:	d062      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 80084d2:	2000      	movs	r0, #0
}
 80084d4:	b005      	add	sp, #20
 80084d6:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80084da:	4a70      	ldr	r2, [pc, #448]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80084dc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80084de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d043      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80084e6:	d86a      	bhi.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d039      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80084ec:	2b40      	cmp	r3, #64	; 0x40
 80084ee:	d1f0      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f0:	a801      	add	r0, sp, #4
 80084f2:	f7ff fe09 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084f6:	9801      	ldr	r0, [sp, #4]
}
 80084f8:	b005      	add	sp, #20
 80084fa:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80084fe:	4b67      	ldr	r3, [pc, #412]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008502:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8008506:	2b04      	cmp	r3, #4
 8008508:	d8e3      	bhi.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008561 	.word	0x08008561
 8008514:	080084f1 	.word	0x080084f1
 8008518:	0800856f 	.word	0x0800856f
 800851c:	08008545 	.word	0x08008545
 8008520:	0800857d 	.word	0x0800857d
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008524:	4a5d      	ldr	r2, [pc, #372]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008526:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008528:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800852c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008530:	d01d      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8008532:	d85c      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8008534:	b1a3      	cbz	r3, 8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8008536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800853a:	d0d9      	beq.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800853c:	e7c9      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 800853e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008542:	d15b      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8008544:	4856      	ldr	r0, [pc, #344]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 8008546:	b005      	add	sp, #20
 8008548:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800854c:	4a53      	ldr	r2, [pc, #332]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800854e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008550:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8008554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008558:	d009      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800855a:	d8f0      	bhi.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d151      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008560:	a801      	add	r0, sp, #4
 8008562:	f7ff ff01 	bl	8008368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008566:	9802      	ldr	r0, [sp, #8]
}
 8008568:	b005      	add	sp, #20
 800856a:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800856e:	a801      	add	r0, sp, #4
 8008570:	f7ff fe62 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008574:	9801      	ldr	r0, [sp, #4]
}
 8008576:	b005      	add	sp, #20
 8008578:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800857c:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800857e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008580:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8008584:	d019      	beq.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858a:	d062      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008590:	4844      	ldr	r0, [pc, #272]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8008592:	bf18      	it	ne
 8008594:	2000      	movne	r0, #0
 8008596:	e79d      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008598:	4b40      	ldr	r3, [pc, #256]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800859a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a4:	d068      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80085a6:	d95b      	bls.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80085a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ac:	d051      	beq.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80085ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b2:	d05f      	beq.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80085b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085b8:	d18b      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 80085ba:	483b      	ldr	r0, [pc, #236]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 80085bc:	e78a      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 80085be:	2bc0      	cmp	r3, #192	; 0xc0
 80085c0:	d0c0      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	d184      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80085ca:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80085ce:	d1da      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80085d0:	e7f3      	b.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80085d2:	4a32      	ldr	r2, [pc, #200]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80085d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80085d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085de:	d0c6      	beq.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80085e0:	d815      	bhi.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0bc      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ea:	d081      	beq.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 80085ec:	e771      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80085ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085f2:	d0a7      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80085f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085f8:	d0e6      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80085fa:	e76a      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 80085fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008600:	d0e2      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008602:	e766      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008608:	f43f af72 	beq.w	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 800860c:	e761      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 800860e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008612:	d097      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8008614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008618:	d0d6      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800861a:	e75a      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800861c:	4a1f      	ldr	r2, [pc, #124]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800861e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008628:	d015      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800862a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862e:	d0cb      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008630:	2b00      	cmp	r3, #0
 8008632:	f47f af4e 	bne.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008636:	e75b      	b.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008638:	4b18      	ldr	r3, [pc, #96]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800863a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800863c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8008640:	d08e      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8008642:	2b00      	cmp	r3, #0
 8008644:	f43f af45 	beq.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008648:	a801      	add	r0, sp, #4
 800864a:	f7ff fd5d 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800864e:	9803      	ldr	r0, [sp, #12]
          break;
 8008650:	e740      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8008652:	4816      	ldr	r0, [pc, #88]	; (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8008654:	e73e      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008656:	a801      	add	r0, sp, #4
 8008658:	f7ff fdee 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800865c:	9803      	ldr	r0, [sp, #12]
          break;
 800865e:	e739      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8008660:	b17b      	cbz	r3, 8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008666:	f47f af34 	bne.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866a:	a801      	add	r0, sp, #4
 800866c:	f7ff fd4c 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008670:	9802      	ldr	r0, [sp, #8]
          break;
 8008672:	e72f      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8008674:	480b      	ldr	r0, [pc, #44]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8008676:	e72d      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008678:	a801      	add	r0, sp, #4
 800867a:	f7ff fddd 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800867e:	9802      	ldr	r0, [sp, #8]
          break;
 8008680:	e728      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008682:	f7fe fcd3 	bl	800702c <HAL_RCC_GetHCLKFreq>
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8008688:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008690:	5cd3      	ldrb	r3, [r2, r3]
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	40d8      	lsrs	r0, r3
          break;
 8008698:	e71c      	b.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800869a:	bf00      	nop
 800869c:	58024400 	.word	0x58024400
 80086a0:	00bb8000 	.word	0x00bb8000
 80086a4:	007a1200 	.word	0x007a1200
 80086a8:	03d09000 	.word	0x03d09000
 80086ac:	003d0900 	.word	0x003d0900
 80086b0:	08012500 	.word	0x08012500

080086b4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d076      	beq.n	80087a6 <HAL_TIM_Base_Init+0xf2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80086bc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80086be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086c2:	4604      	mov	r4, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d069      	beq.n	800879c <HAL_TIM_Base_Init+0xe8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086c8:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80086ca:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086cc:	493c      	ldr	r1, [pc, #240]	; (80087c0 <HAL_TIM_Base_Init+0x10c>)
 80086ce:	4e3d      	ldr	r6, [pc, #244]	; (80087c4 <HAL_TIM_Base_Init+0x110>)
 80086d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80086d4:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80086d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80086dc:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 80086e0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e2:	fab1 f181 	clz	r1, r1
 80086e6:	fab6 f686 	clz	r6, r6
 80086ea:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80086ee:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80086f2:	d018      	beq.n	8008726 <HAL_TIM_Base_Init+0x72>
 80086f4:	b9b9      	cbnz	r1, 8008726 <HAL_TIM_Base_Init+0x72>
 80086f6:	4834      	ldr	r0, [pc, #208]	; (80087c8 <HAL_TIM_Base_Init+0x114>)
 80086f8:	4282      	cmp	r2, r0
 80086fa:	d014      	beq.n	8008726 <HAL_TIM_Base_Init+0x72>
 80086fc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008700:	4282      	cmp	r2, r0
 8008702:	d010      	beq.n	8008726 <HAL_TIM_Base_Init+0x72>
 8008704:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008708:	4282      	cmp	r2, r0
 800870a:	d04e      	beq.n	80087aa <HAL_TIM_Base_Init+0xf6>
 800870c:	2e00      	cmp	r6, #0
 800870e:	d14c      	bne.n	80087aa <HAL_TIM_Base_Init+0xf6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008710:	4d2e      	ldr	r5, [pc, #184]	; (80087cc <HAL_TIM_Base_Init+0x118>)
 8008712:	482f      	ldr	r0, [pc, #188]	; (80087d0 <HAL_TIM_Base_Init+0x11c>)
 8008714:	4282      	cmp	r2, r0
 8008716:	bf18      	it	ne
 8008718:	42aa      	cmpne	r2, r5
 800871a:	d008      	beq.n	800872e <HAL_TIM_Base_Init+0x7a>
 800871c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008720:	4282      	cmp	r2, r0
 8008722:	d108      	bne.n	8008736 <HAL_TIM_Base_Init+0x82>
 8008724:	e003      	b.n	800872e <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800872a:	68a0      	ldr	r0, [r4, #8]
 800872c:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008732:	6920      	ldr	r0, [r4, #16]
 8008734:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008736:	69a0      	ldr	r0, [r4, #24]
 8008738:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800873c:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873e:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008740:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008742:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008744:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008746:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008748:	b951      	cbnz	r1, 8008760 <HAL_TIM_Base_Init+0xac>
 800874a:	b94e      	cbnz	r6, 8008760 <HAL_TIM_Base_Init+0xac>
 800874c:	491f      	ldr	r1, [pc, #124]	; (80087cc <HAL_TIM_Base_Init+0x118>)
 800874e:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <HAL_TIM_Base_Init+0x11c>)
 8008750:	429a      	cmp	r2, r3
 8008752:	bf18      	it	ne
 8008754:	428a      	cmpne	r2, r1
 8008756:	d003      	beq.n	8008760 <HAL_TIM_Base_Init+0xac>
 8008758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875c:	429a      	cmp	r2, r3
 800875e:	d101      	bne.n	8008764 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008760:	6963      	ldr	r3, [r4, #20]
 8008762:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008764:	2301      	movs	r3, #1
  return HAL_OK;
 8008766:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8008768:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008772:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008776:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800877a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800877e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008786:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800878a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800878e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008792:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008796:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800879a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800879c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80087a0:	f7fa fc6a 	bl	8003078 <HAL_TIM_Base_MspInit>
 80087a4:	e790      	b.n	80086c8 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80087a6:	2001      	movs	r0, #1
}
 80087a8:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087aa:	480a      	ldr	r0, [pc, #40]	; (80087d4 <HAL_TIM_Base_Init+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80087b0:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b2:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80087b4:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b8:	d0b9      	beq.n	800872e <HAL_TIM_Base_Init+0x7a>
 80087ba:	2e00      	cmp	r6, #0
 80087bc:	d1b7      	bne.n	800872e <HAL_TIM_Base_Init+0x7a>
 80087be:	e7a7      	b.n	8008710 <HAL_TIM_Base_Init+0x5c>
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40000400 	.word	0x40000400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40014400 	.word	0x40014400
 80087d4:	40000c00 	.word	0x40000c00

080087d8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80087d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d001      	beq.n	80087e4 <HAL_TIM_Base_Start+0xc>
    return HAL_ERROR;
 80087e0:	2001      	movs	r0, #1
 80087e2:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e6:	6802      	ldr	r2, [r0, #0]
 80087e8:	4b08      	ldr	r3, [pc, #32]	; (800880c <HAL_TIM_Base_Start+0x34>)
  htim->State = HAL_TIM_STATE_BUSY;
 80087ea:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ee:	6891      	ldr	r1, [r2, #8]
 80087f0:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f2:	2b06      	cmp	r3, #6
 80087f4:	d008      	beq.n	8008808 <HAL_TIM_Base_Start+0x30>
 80087f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087fa:	d005      	beq.n	8008808 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 80087fc:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 80087fe:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008800:	f043 0301 	orr.w	r3, r3, #1
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	4770      	bx	lr
  return HAL_OK;
 8008808:	2000      	movs	r0, #0
}
 800880a:	4770      	bx	lr
 800880c:	00010007 	.word	0x00010007

08008810 <HAL_TIM_PeriodElapsedCallback>:
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop

08008814 <HAL_TIM_OC_DelayElapsedCallback>:
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop

08008818 <HAL_TIM_IC_CaptureCallback>:
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <HAL_TIM_PWM_PulseFinishedCallback>:
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop

08008820 <HAL_TIM_TriggerCallback>:
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008824:	6803      	ldr	r3, [r0, #0]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	0791      	lsls	r1, r2, #30
{
 800882a:	b510      	push	{r4, lr}
 800882c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800882e:	d502      	bpl.n	8008836 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	0792      	lsls	r2, r2, #30
 8008834:	d468      	bmi.n	8008908 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	0752      	lsls	r2, r2, #29
 800883a:	d502      	bpl.n	8008842 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	0750      	lsls	r0, r2, #29
 8008840:	d44f      	bmi.n	80088e2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	0711      	lsls	r1, r2, #28
 8008846:	d502      	bpl.n	800884e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	0712      	lsls	r2, r2, #28
 800884c:	d437      	bmi.n	80088be <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	06d0      	lsls	r0, r2, #27
 8008852:	d502      	bpl.n	800885a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	06d1      	lsls	r1, r2, #27
 8008858:	d41e      	bmi.n	8008898 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	07d2      	lsls	r2, r2, #31
 800885e:	d502      	bpl.n	8008866 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	07d0      	lsls	r0, r2, #31
 8008864:	d469      	bmi.n	800893a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	0611      	lsls	r1, r2, #24
 800886a:	d502      	bpl.n	8008872 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	0612      	lsls	r2, r2, #24
 8008870:	d46b      	bmi.n	800894a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	05d0      	lsls	r0, r2, #23
 8008876:	d502      	bpl.n	800887e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008878:	68da      	ldr	r2, [r3, #12]
 800887a:	0611      	lsls	r1, r2, #24
 800887c:	d46d      	bmi.n	800895a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	0652      	lsls	r2, r2, #25
 8008882:	d502      	bpl.n	800888a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	0650      	lsls	r0, r2, #25
 8008888:	d46f      	bmi.n	800896a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	0691      	lsls	r1, r2, #26
 800888e:	d502      	bpl.n	8008896 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	0692      	lsls	r2, r2, #26
 8008894:	d449      	bmi.n	800892a <HAL_TIM_IRQHandler+0x106>
}
 8008896:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008898:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800889c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800889e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088a0:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088a2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80088aa:	d16f      	bne.n	800898c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ac:	f7ff ffb2 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b0:	4620      	mov	r0, r4
 80088b2:	f7ff ffb3 	bl	800881c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b6:	2200      	movs	r2, #0
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	7722      	strb	r2, [r4, #28]
 80088bc:	e7cd      	b.n	800885a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088be:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088c2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80088c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088c6:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088c8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088cc:	079b      	lsls	r3, r3, #30
 80088ce:	d15a      	bne.n	8008986 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d0:	f7ff ffa0 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff ffa1 	bl	800881c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088da:	2200      	movs	r2, #0
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	7722      	strb	r2, [r4, #28]
 80088e0:	e7b5      	b.n	800884e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088e2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088e6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80088e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088ea:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088ec:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088ee:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80088f4:	d144      	bne.n	8008980 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	f7ff ff8d 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff ff8e 	bl	800881c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008900:	2200      	movs	r2, #0
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	7722      	strb	r2, [r4, #28]
 8008906:	e79c      	b.n	8008842 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008908:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800890e:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008910:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008912:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008914:	0799      	lsls	r1, r3, #30
 8008916:	d130      	bne.n	800897a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008918:	f7ff ff7c 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff ff7d 	bl	800881c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008922:	2200      	movs	r2, #0
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	7722      	strb	r2, [r4, #28]
 8008928:	e785      	b.n	8008836 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800892a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800892e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008930:	611a      	str	r2, [r3, #16]
}
 8008932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008936:	f000 b887 	b.w	8008a48 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800893a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800893e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008940:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008942:	f7ff ff65 	bl	8008810 <HAL_TIM_PeriodElapsedCallback>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	e78d      	b.n	8008866 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800894a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800894e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008950:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008952:	f000 f87b 	bl	8008a4c <HAL_TIMEx_BreakCallback>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	e78b      	b.n	8008872 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800895a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800895e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008960:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008962:	f000 f875 	bl	8008a50 <HAL_TIMEx_Break2Callback>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	e789      	b.n	800887e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800896a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800896e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008970:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008972:	f7ff ff55 	bl	8008820 <HAL_TIM_TriggerCallback>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	e787      	b.n	800888a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800897a:	f7ff ff4d 	bl	8008818 <HAL_TIM_IC_CaptureCallback>
 800897e:	e7d0      	b.n	8008922 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8008980:	f7ff ff4a 	bl	8008818 <HAL_TIM_IC_CaptureCallback>
 8008984:	e7bc      	b.n	8008900 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8008986:	f7ff ff47 	bl	8008818 <HAL_TIM_IC_CaptureCallback>
 800898a:	e7a6      	b.n	80088da <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800898c:	f7ff ff44 	bl	8008818 <HAL_TIM_IC_CaptureCallback>
 8008990:	e791      	b.n	80088b6 <HAL_TIM_IRQHandler+0x92>
 8008992:	bf00      	nop

08008994 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008994:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d045      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800899c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800899e:	4a24      	ldr	r2, [pc, #144]	; (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 80089a0:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089a2:	4e24      	ldr	r6, [pc, #144]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80089a4:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 80089a6:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bf18      	it	ne
 80089ac:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80089ae:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80089b2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089b6:	bf08      	it	eq
 80089b8:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80089ba:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089bc:	bf18      	it	ne
 80089be:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 80089c0:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089c2:	d103      	bne.n	80089cc <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089c4:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089c8:	684a      	ldr	r2, [r1, #4]
 80089ca:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089cc:	4a1a      	ldr	r2, [pc, #104]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80089ce:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089d2:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089d4:	4293      	cmp	r3, r2
 80089d6:	bf18      	it	ne
 80089d8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80089dc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089e0:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e4:	4f15      	ldr	r7, [pc, #84]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80089e6:	bf0c      	ite	eq
 80089e8:	2201      	moveq	r2, #1
 80089ea:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 80089ec:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ee:	4563      	cmp	r3, ip
 80089f0:	bf08      	it	eq
 80089f2:	f042 0201 	orreq.w	r2, r2, #1
 80089f6:	4c12      	ldr	r4, [pc, #72]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80089f8:	42bb      	cmp	r3, r7
 80089fa:	bf08      	it	eq
 80089fc:	f042 0201 	orreq.w	r2, r2, #1
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	bf08      	it	eq
 8008a04:	f042 0201 	orreq.w	r2, r2, #1
 8008a08:	b902      	cbnz	r2, 8008a0c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008a0a:	b126      	cbz	r6, 8008a16 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a0c:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a0e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a12:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a14:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008a16:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008a18:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008a1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8008a1e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	bcf0      	pop	{r4, r5, r6, r7}
 8008a26:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008a28:	2202      	movs	r2, #2
}
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40010400 	.word	0x40010400
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000c00 	.word	0x40000c00
 8008a40:	40001800 	.word	0x40001800
 8008a44:	40000800 	.word	0x40000800

08008a48 <HAL_TIMEx_CommutCallback>:
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <HAL_TIMEx_BreakCallback>:
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop

08008a50 <HAL_TIMEx_Break2Callback>:
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop

08008a54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a58:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a5a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8008a5e:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8008a60:	2b20      	cmp	r3, #32
 8008a62:	d14a      	bne.n	8008afa <HAL_UART_Transmit+0xa6>
 8008a64:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8008a66:	2900      	cmp	r1, #0
 8008a68:	d04b      	beq.n	8008b02 <HAL_UART_Transmit+0xae>
 8008a6a:	fab2 f782 	clz	r7, r2
 8008a6e:	9201      	str	r2, [sp, #4]
 8008a70:	097f      	lsrs	r7, r7, #5
 8008a72:	2f00      	cmp	r7, #0
 8008a74:	d145      	bne.n	8008b02 <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008a76:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d03c      	beq.n	8008afa <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a80:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8008a82:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a84:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 8008a88:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a8c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008a90:	f7fa fcca 	bl	8003428 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a94:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8008a96:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8008a98:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8008a9e:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 8008aa2:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa6:	f000 8089 	beq.w	8008bbc <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8008aaa:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8008aae:	2200      	movs	r2, #0
 8008ab0:	682c      	ldr	r4, [r5, #0]
    while (huart->TxXferCount > 0U)
 8008ab2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8008ab4:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
    while (huart->TxXferCount > 0U)
 8008ab8:	b1ab      	cbz	r3, 8008ae6 <HAL_UART_Transmit+0x92>
 8008aba:	1c71      	adds	r1, r6, #1
 8008abc:	d125      	bne.n	8008b0a <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008abe:	69e2      	ldr	r2, [r4, #28]
 8008ac0:	0612      	lsls	r2, r2, #24
 8008ac2:	d5fc      	bpl.n	8008abe <HAL_UART_Transmit+0x6a>
      if (pdata8bits == NULL)
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	d035      	beq.n	8008b36 <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aca:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008ace:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8008ad0:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008adc:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e9      	bne.n	8008aba <HAL_UART_Transmit+0x66>
 8008ae6:	1c71      	adds	r1, r6, #1
 8008ae8:	d12a      	bne.n	8008b40 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aea:	69e3      	ldr	r3, [r4, #28]
 8008aec:	065a      	lsls	r2, r3, #25
 8008aee:	d5fc      	bpl.n	8008aea <HAL_UART_Transmit+0x96>
    huart->gState = HAL_UART_STATE_READY;
 8008af0:	2320      	movs	r3, #32
    return HAL_OK;
 8008af2:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8008af4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return HAL_OK;
 8008af8:	e000      	b.n	8008afc <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 8008afa:	2002      	movs	r0, #2
}
 8008afc:	b003      	add	sp, #12
 8008afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8008b02:	2001      	movs	r0, #1
}
 8008b04:	b003      	add	sp, #12
 8008b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0a:	69e3      	ldr	r3, [r4, #28]
 8008b0c:	061b      	lsls	r3, r3, #24
 8008b0e:	d4d9      	bmi.n	8008ac4 <HAL_UART_Transmit+0x70>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b10:	f7fa fc8a 	bl	8003428 <HAL_GetTick>
 8008b14:	eba0 0008 	sub.w	r0, r0, r8
 8008b18:	4286      	cmp	r6, r0
 8008b1a:	d33c      	bcc.n	8008b96 <HAL_UART_Transmit+0x142>
 8008b1c:	fab6 f386 	clz	r3, r6
 8008b20:	095b      	lsrs	r3, r3, #5
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d137      	bne.n	8008b96 <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b26:	682c      	ldr	r4, [r5, #0]
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	0752      	lsls	r2, r2, #29
 8008b2c:	d5c5      	bpl.n	8008aba <HAL_UART_Transmit+0x66>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b2e:	69e2      	ldr	r2, [r4, #28]
 8008b30:	0510      	lsls	r0, r2, #20
 8008b32:	d5c2      	bpl.n	8008aba <HAL_UART_Transmit+0x66>
 8008b34:	e019      	b.n	8008b6a <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b36:	f837 3b02 	ldrh.w	r3, [r7], #2
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	e7c6      	b.n	8008ace <HAL_UART_Transmit+0x7a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b40:	69e3      	ldr	r3, [r4, #28]
 8008b42:	065b      	lsls	r3, r3, #25
 8008b44:	d4d4      	bmi.n	8008af0 <HAL_UART_Transmit+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b46:	f7fa fc6f 	bl	8003428 <HAL_GetTick>
 8008b4a:	eba0 0008 	sub.w	r0, r0, r8
 8008b4e:	fab6 f386 	clz	r3, r6
 8008b52:	4286      	cmp	r6, r0
 8008b54:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8008b58:	d31d      	bcc.n	8008b96 <HAL_UART_Transmit+0x142>
 8008b5a:	b9e3      	cbnz	r3, 8008b96 <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b5c:	682c      	ldr	r4, [r5, #0]
 8008b5e:	6822      	ldr	r2, [r4, #0]
 8008b60:	0757      	lsls	r7, r2, #29
 8008b62:	d5c0      	bpl.n	8008ae6 <HAL_UART_Transmit+0x92>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b64:	69e2      	ldr	r2, [r4, #28]
 8008b66:	0510      	lsls	r0, r2, #20
 8008b68:	d5bd      	bpl.n	8008ae6 <HAL_UART_Transmit+0x92>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 8008b6e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008b70:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b72:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b74:	6821      	ldr	r1, [r4, #0]
 8008b76:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008b7a:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7c:	68a1      	ldr	r1, [r4, #8]
 8008b7e:	f021 0101 	bic.w	r1, r1, #1
 8008b82:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008b84:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b88:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b90:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 8008b94:	e7b2      	b.n	8008afc <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b96:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008b98:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8008b9a:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 8008b9c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ba4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008bae:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8008bb2:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8008bba:	e79f      	b.n	8008afc <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bbc:	692b      	ldr	r3, [r5, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f47f af73 	bne.w	8008aaa <HAL_UART_Transmit+0x56>
 8008bc4:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 8008bc6:	4699      	mov	r9, r3
 8008bc8:	e76f      	b.n	8008aaa <HAL_UART_Transmit+0x56>
 8008bca:	bf00      	nop

08008bcc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bcc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008bd0:	2b20      	cmp	r3, #32
 8008bd2:	d13d      	bne.n	8008c50 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d039      	beq.n	8008c4c <HAL_UART_Receive_IT+0x80>
 8008bd8:	fab2 f382 	clz	r3, r2
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d134      	bne.n	8008c4c <HAL_UART_Receive_IT+0x80>
{
 8008be2:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8008be4:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8008be8:	2c01      	cmp	r4, #1
 8008bea:	d062      	beq.n	8008cb2 <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8008bec:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 8008bee:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8008bf0:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8008bf2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8008bf6:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 8008bfa:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008bfe:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008c02:	66c3      	str	r3, [r0, #108]	; 0x6c
 8008c04:	6801      	ldr	r1, [r0, #0]
 8008c06:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8008c08:	d024      	beq.n	8008c54 <HAL_UART_Receive_IT+0x88>
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	d146      	bne.n	8008c9c <HAL_UART_Receive_IT+0xd0>
 8008c0e:	6903      	ldr	r3, [r0, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d066      	beq.n	8008ce2 <HAL_UART_Receive_IT+0x116>
 8008c14:	237f      	movs	r3, #127	; 0x7f
 8008c16:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1a:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c1c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1e:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c26:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c28:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c32:	d020      	beq.n	8008c76 <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 8008c34:	4c31      	ldr	r4, [pc, #196]	; (8008cfc <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c36:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8008c38:	2300      	movs	r3, #0
 8008c3a:	66c4      	str	r4, [r0, #108]	; 0x6c
 8008c3c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c40:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 8008c44:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c46:	600a      	str	r2, [r1, #0]
}
 8008c48:	bc70      	pop	{r4, r5, r6}
 8008c4a:	4770      	bx	lr
      return HAL_ERROR;
 8008c4c:	2001      	movs	r0, #1
}
 8008c4e:	4770      	bx	lr
    return HAL_BUSY;
 8008c50:	2002      	movs	r0, #2
 8008c52:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8008c54:	6904      	ldr	r4, [r0, #16]
 8008c56:	b374      	cbz	r4, 8008cb6 <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c58:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8008c5e:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c60:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c64:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c68:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8008c6a:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c74:	d1de      	bne.n	8008c34 <HAL_UART_Receive_IT+0x68>
 8008c76:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d8da      	bhi.n	8008c34 <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c7e:	4c20      	ldr	r4, [pc, #128]	; (8008d00 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c80:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8008c82:	2300      	movs	r3, #0
 8008c84:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8008c8a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 8008c8e:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c90:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c92:	688b      	ldr	r3, [r1, #8]
 8008c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c98:	608b      	str	r3, [r1, #8]
 8008c9a:	e7d5      	b.n	8008c48 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8008c9c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8008ca0:	d023      	beq.n	8008cea <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ca2:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8008ca8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cac:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8008cb0:	e7b9      	b.n	8008c26 <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 8008cb2:	2002      	movs	r0, #2
 8008cb4:	e7c8      	b.n	8008c48 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cb6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008cbc:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8008cc0:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cc4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc8:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8008cca:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008cd4:	d103      	bne.n	8008cde <HAL_UART_Receive_IT+0x112>
 8008cd6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d90c      	bls.n	8008cf8 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 8008cde:	4c09      	ldr	r4, [pc, #36]	; (8008d04 <HAL_UART_Receive_IT+0x138>)
 8008ce0:	e7a9      	b.n	8008c36 <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8008ce2:	23ff      	movs	r3, #255	; 0xff
 8008ce4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008ce8:	e797      	b.n	8008c1a <HAL_UART_Receive_IT+0x4e>
 8008cea:	6903      	ldr	r3, [r0, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d091      	beq.n	8008c14 <HAL_UART_Receive_IT+0x48>
 8008cf0:	233f      	movs	r3, #63	; 0x3f
 8008cf2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008cf6:	e790      	b.n	8008c1a <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008cf8:	4c03      	ldr	r4, [pc, #12]	; (8008d08 <HAL_UART_Receive_IT+0x13c>)
 8008cfa:	e7c1      	b.n	8008c80 <HAL_UART_Receive_IT+0xb4>
 8008cfc:	08008d11 	.word	0x08008d11
 8008d00:	08008dcd 	.word	0x08008dcd
 8008d04:	08008d71 	.word	0x08008d71
 8008d08:	08008e85 	.word	0x08008e85

08008d0c <HAL_UART_TxCpltCallback>:
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop

08008d10 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d10:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008d14:	6802      	ldr	r2, [r0, #0]
 8008d16:	2922      	cmp	r1, #34	; 0x22
{
 8008d18:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d1a:	d004      	beq.n	8008d26 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d1c:	6993      	ldr	r3, [r2, #24]
 8008d1e:	f043 0308 	orr.w	r3, r3, #8
 8008d22:	6193      	str	r3, [r2, #24]
  }
}
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d28:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8008d2c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008d2e:	4022      	ands	r2, r4
 8008d30:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8008d32:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008d36:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008d38:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 8008d3a:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8008d3c:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8008d3e:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008d40:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008d44:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8008d48:	b292      	uxth	r2, r2
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	d1ea      	bne.n	8008d24 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d4e:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8008d50:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d52:	680c      	ldr	r4, [r1, #0]
 8008d54:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8008d58:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5a:	688c      	ldr	r4, [r1, #8]
 8008d5c:	f024 0401 	bic.w	r4, r4, #1
 8008d60:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8008d62:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8008d64:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8008d68:	f7f9 fb3c 	bl	80023e4 <HAL_UART_RxCpltCallback>
}
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop

08008d70 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d70:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008d74:	6802      	ldr	r2, [r0, #0]
 8008d76:	2922      	cmp	r1, #34	; 0x22
{
 8008d78:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d7a:	d004      	beq.n	8008d86 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d7c:	6993      	ldr	r3, [r2, #24]
 8008d7e:	f043 0308 	orr.w	r3, r3, #8
 8008d82:	6193      	str	r3, [r2, #24]
  }
}
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d86:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d88:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8008d8c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8008d8e:	4029      	ands	r1, r5
 8008d90:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 8008d94:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008d98:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008d9a:	3901      	subs	r1, #1
 8008d9c:	b289      	uxth	r1, r1
 8008d9e:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008da2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8008da6:	b289      	uxth	r1, r1
 8008da8:	2900      	cmp	r1, #0
 8008daa:	d1eb      	bne.n	8008d84 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dac:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8008dae:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db0:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8008db4:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db6:	6894      	ldr	r4, [r2, #8]
 8008db8:	f024 0401 	bic.w	r4, r4, #1
 8008dbc:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8008dbe:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8008dc4:	f7f9 fb0e 	bl	80023e4 <HAL_UART_RxCpltCallback>
}
 8008dc8:	bd38      	pop	{r3, r4, r5, pc}
 8008dca:	bf00      	nop

08008dcc <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008dd0:	2b22      	cmp	r3, #34	; 0x22
 8008dd2:	d005      	beq.n	8008de0 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dd4:	6802      	ldr	r2, [r0, #0]
 8008dd6:	6993      	ldr	r3, [r2, #24]
 8008dd8:	f043 0308 	orr.w	r3, r3, #8
 8008ddc:	6193      	str	r3, [r2, #24]
 8008dde:	4770      	bx	lr
{
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008de4:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008de8:	2d00      	cmp	r5, #0
 8008dea:	d043      	beq.n	8008e74 <UART_RxISR_8BIT_FIFOEN+0xa8>
 8008dec:	4604      	mov	r4, r0
 8008dee:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8008df2:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008df4:	4e21      	ldr	r6, [pc, #132]	; (8008e7c <UART_RxISR_8BIT_FIFOEN+0xb0>)
 8008df6:	e002      	b.n	8008dfe <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008df8:	3d01      	subs	r5, #1
 8008dfa:	b2ad      	uxth	r5, r5
 8008dfc:	b32d      	cbz	r5, 8008e4a <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dfe:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e00:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e04:	ea08 0303 	and.w	r3, r8, r3
 8008e08:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8008e0a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8008e0e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008e10:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 8008e12:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8008e14:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 8008e16:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008e18:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8008e1c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e8      	bne.n	8008df8 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e26:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008e28:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8008e2a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e2c:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008e2e:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e30:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008e34:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e36:	6891      	ldr	r1, [r2, #8]
 8008e38:	4031      	ands	r1, r6
 8008e3a:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008e3c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008e40:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008e42:	f7f9 facf 	bl	80023e4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	d1d9      	bne.n	8008dfe <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8008e4a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008e4e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e50:	b173      	cbz	r3, 8008e70 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8008e52:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d90a      	bls.n	8008e70 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e5a:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008e5c:	4908      	ldr	r1, [pc, #32]	; (8008e80 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008e64:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e66:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008e68:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e6a:	f042 0220 	orr.w	r2, r2, #32
 8008e6e:	601a      	str	r2, [r3, #0]
  }
}
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008e74:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008e78:	e7fa      	b.n	8008e70 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8008e7a:	bf00      	nop
 8008e7c:	effffffe 	.word	0xeffffffe
 8008e80:	08008d11 	.word	0x08008d11

08008e84 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e84:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008e88:	2b22      	cmp	r3, #34	; 0x22
 8008e8a:	d005      	beq.n	8008e98 <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e8c:	6802      	ldr	r2, [r0, #0]
 8008e8e:	6993      	ldr	r3, [r2, #24]
 8008e90:	f043 0308 	orr.w	r3, r3, #8
 8008e94:	6193      	str	r3, [r2, #24]
 8008e96:	4770      	bx	lr
{
 8008e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008e9c:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	d041      	beq.n	8008f28 <UART_RxISR_16BIT_FIFOEN+0xa4>
 8008ea4:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8008ea6:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8008eaa:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eac:	4e20      	ldr	r6, [pc, #128]	; (8008f30 <UART_RxISR_16BIT_FIFOEN+0xac>)
 8008eae:	e002      	b.n	8008eb6 <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008eb0:	3d01      	subs	r5, #1
 8008eb2:	b2ad      	uxth	r5, r5
 8008eb4:	b31d      	cbz	r5, 8008efe <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eb6:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008eb8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8008ebc:	ea08 0303 	and.w	r3, r8, r3
 8008ec0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 8008ec4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8008ec8:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8008ed2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e9      	bne.n	8008eb0 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008edc:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008ede:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8008ee0:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008ee6:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ee8:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eea:	688a      	ldr	r2, [r1, #8]
 8008eec:	4032      	ands	r2, r6
 8008eee:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008ef4:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008ef6:	f7f9 fa75 	bl	80023e4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008efa:	2d00      	cmp	r5, #0
 8008efc:	d1db      	bne.n	8008eb6 <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8008efe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008f02:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f04:	b173      	cbz	r3, 8008f24 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8008f06:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d90a      	bls.n	8008f24 <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f0e:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008f10:	4908      	ldr	r1, [pc, #32]	; (8008f34 <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008f18:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f1a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008f1c:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f1e:	f042 0220 	orr.w	r2, r2, #32
 8008f22:	601a      	str	r2, [r3, #0]
  }
}
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008f28:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008f2c:	e7fa      	b.n	8008f24 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8008f2e:	bf00      	nop
 8008f30:	effffffe 	.word	0xeffffffe
 8008f34:	08008d71 	.word	0x08008d71

08008f38 <HAL_UART_ErrorCallback>:
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop

08008f3c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f3c:	6802      	ldr	r2, [r0, #0]
{
 8008f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f42:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f44:	f640 050f 	movw	r5, #2063	; 0x80f
{
 8008f48:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f4a:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8008f4c:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f4e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008f50:	d070      	beq.n	8009034 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f52:	4d73      	ldr	r5, [pc, #460]	; (8009120 <HAL_UART_IRQHandler+0x1e4>)
 8008f54:	400d      	ands	r5, r1
 8008f56:	f000 808f 	beq.w	8009078 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f5a:	07df      	lsls	r7, r3, #31
 8008f5c:	d509      	bpl.n	8008f72 <HAL_UART_IRQHandler+0x36>
 8008f5e:	05c6      	lsls	r6, r0, #23
 8008f60:	d507      	bpl.n	8008f72 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f62:	2601      	movs	r6, #1
 8008f64:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f66:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8008f6a:	f046 0601 	orr.w	r6, r6, #1
 8008f6e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f72:	079f      	lsls	r7, r3, #30
 8008f74:	f003 0604 	and.w	r6, r3, #4
 8008f78:	f140 8093 	bpl.w	80090a2 <HAL_UART_IRQHandler+0x166>
 8008f7c:	07cf      	lsls	r7, r1, #31
 8008f7e:	d50a      	bpl.n	8008f96 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f80:	2702      	movs	r7, #2
 8008f82:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f84:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8008f88:	f047 0704 	orr.w	r7, r7, #4
 8008f8c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	f040 808c 	bne.w	80090ae <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f96:	071f      	lsls	r7, r3, #28
 8008f98:	d505      	bpl.n	8008fa6 <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f9a:	0686      	lsls	r6, r0, #26
 8008f9c:	f100 8097 	bmi.w	80090ce <HAL_UART_IRQHandler+0x192>
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	f040 8094 	bne.w	80090ce <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fa6:	051f      	lsls	r7, r3, #20
 8008fa8:	d50a      	bpl.n	8008fc0 <HAL_UART_IRQHandler+0x84>
 8008faa:	0146      	lsls	r6, r0, #5
 8008fac:	d508      	bpl.n	8008fc0 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fae:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8008fb2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fb4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008fb8:	f045 0520 	orr.w	r5, r5, #32
 8008fbc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fc0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008fc4:	2d00      	cmp	r5, #0
 8008fc6:	d06a      	beq.n	800909e <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fc8:	069d      	lsls	r5, r3, #26
 8008fca:	d507      	bpl.n	8008fdc <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fcc:	0680      	lsls	r0, r0, #26
 8008fce:	f140 808b 	bpl.w	80090e8 <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 8008fd2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008fd4:	b113      	cbz	r3, 8008fdc <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4798      	blx	r3
 8008fda:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8008fdc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fe0:	6891      	ldr	r1, [r2, #8]
 8008fe2:	064f      	lsls	r7, r1, #25
 8008fe4:	d403      	bmi.n	8008fee <HAL_UART_IRQHandler+0xb2>
 8008fe6:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8008fea:	f000 8093 	beq.w	8009114 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fee:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8008ff0:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ff2:	4b4c      	ldr	r3, [pc, #304]	; (8009124 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 8008ff4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff6:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008ffa:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ffc:	6891      	ldr	r1, [r2, #8]
 8008ffe:	400b      	ands	r3, r1
 8009000:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8009002:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009006:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8009008:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900a:	065e      	lsls	r6, r3, #25
 800900c:	d568      	bpl.n	80090e0 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800900e:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8009010:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009016:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8009018:	2900      	cmp	r1, #0
 800901a:	d061      	beq.n	80090e0 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800901c:	4b42      	ldr	r3, [pc, #264]	; (8009128 <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800901e:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009020:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009022:	f7fb ff87 	bl	8004f34 <HAL_DMA_Abort_IT>
 8009026:	2800      	cmp	r0, #0
 8009028:	d039      	beq.n	800909e <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800902a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 800902c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009030:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009032:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009034:	069f      	lsls	r7, r3, #26
 8009036:	d509      	bpl.n	800904c <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009038:	0686      	lsls	r6, r0, #26
 800903a:	d505      	bpl.n	8009048 <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 800903c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800903e:	b373      	cbz	r3, 800909e <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8009040:	4620      	mov	r0, r4
}
 8009042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8009046:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009048:	00cd      	lsls	r5, r1, #3
 800904a:	d4f7      	bmi.n	800903c <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800904c:	02dd      	lsls	r5, r3, #11
 800904e:	d409      	bmi.n	8009064 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009050:	061e      	lsls	r6, r3, #24
 8009052:	d51a      	bpl.n	800908a <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009054:	0605      	lsls	r5, r0, #24
 8009056:	d516      	bpl.n	8009086 <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 8009058:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800905a:	b303      	cbz	r3, 800909e <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 800905c:	4620      	mov	r0, r4
}
 800905e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8009062:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009064:	024f      	lsls	r7, r1, #9
 8009066:	d5f3      	bpl.n	8009050 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800906c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800906e:	6213      	str	r3, [r2, #32]
}
 8009070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8009074:	f000 bc00 	b.w	8009878 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009078:	4e2c      	ldr	r6, [pc, #176]	; (800912c <HAL_UART_IRQHandler+0x1f0>)
 800907a:	4230      	tst	r0, r6
 800907c:	d0e6      	beq.n	800904c <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800907e:	07df      	lsls	r7, r3, #31
 8009080:	f57f af77 	bpl.w	8008f72 <HAL_UART_IRQHandler+0x36>
 8009084:	e76b      	b.n	8008f5e <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009086:	020f      	lsls	r7, r1, #8
 8009088:	d4e6      	bmi.n	8009058 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800908a:	065e      	lsls	r6, r3, #25
 800908c:	d501      	bpl.n	8009092 <HAL_UART_IRQHandler+0x156>
 800908e:	0645      	lsls	r5, r0, #25
 8009090:	d42e      	bmi.n	80090f0 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009092:	0219      	lsls	r1, r3, #8
 8009094:	d414      	bmi.n	80090c0 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009096:	01db      	lsls	r3, r3, #7
 8009098:	d501      	bpl.n	800909e <HAL_UART_IRQHandler+0x162>
 800909a:	2800      	cmp	r0, #0
 800909c:	db35      	blt.n	800910a <HAL_UART_IRQHandler+0x1ce>
}
 800909e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	f43f af77 	beq.w	8008f96 <HAL_UART_IRQHandler+0x5a>
 80090a8:	07ce      	lsls	r6, r1, #31
 80090aa:	f57f af74 	bpl.w	8008f96 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ae:	2604      	movs	r6, #4
 80090b0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b2:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80090b6:	f046 0602 	orr.w	r6, r6, #2
 80090ba:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80090be:	e76a      	b.n	8008f96 <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090c0:	0042      	lsls	r2, r0, #1
 80090c2:	d5e8      	bpl.n	8009096 <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090c4:	4620      	mov	r0, r4
}
 80090c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090ca:	f000 bbd9 	b.w	8009880 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090ce:	2508      	movs	r5, #8
 80090d0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090d2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80090d6:	f045 0508 	orr.w	r5, r5, #8
 80090da:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80090de:	e762      	b.n	8008fa6 <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff ff29 	bl	8008f38 <HAL_UART_ErrorCallback>
 80090e6:	e7da      	b.n	800909e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090e8:	00cb      	lsls	r3, r1, #3
 80090ea:	f57f af77 	bpl.w	8008fdc <HAL_UART_IRQHandler+0xa0>
 80090ee:	e770      	b.n	8008fd2 <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090f0:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80090f2:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 80090f4:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 80090f6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fc:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80090fe:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8009102:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8009104:	f7ff fe02 	bl	8008d0c <HAL_UART_TxCpltCallback>
 8009108:	e7c9      	b.n	800909e <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800910a:	4620      	mov	r0, r4
}
 800910c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009110:	f000 bbb4 	b.w	800987c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8009114:	4620      	mov	r0, r4
 8009116:	f7ff ff0f 	bl	8008f38 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800911e:	e7be      	b.n	800909e <HAL_UART_IRQHandler+0x162>
 8009120:	10000001 	.word	0x10000001
 8009124:	effffffe 	.word	0xeffffffe
 8009128:	08009131 	.word	0x08009131
 800912c:	04000120 	.word	0x04000120

08009130 <UART_DMAAbortOnError>:
{
 8009130:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8009132:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009134:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8009136:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 800913a:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800913c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8009140:	f7ff fefa 	bl	8008f38 <HAL_UART_ErrorCallback>
}
 8009144:	bd08      	pop	{r3, pc}
 8009146:	bf00      	nop

08009148 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009148:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800914a:	07da      	lsls	r2, r3, #31
{
 800914c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800914e:	d506      	bpl.n	800915e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009150:	6801      	ldr	r1, [r0, #0]
 8009152:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009154:	684a      	ldr	r2, [r1, #4]
 8009156:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800915a:	4322      	orrs	r2, r4
 800915c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800915e:	079c      	lsls	r4, r3, #30
 8009160:	d506      	bpl.n	8009170 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009162:	6801      	ldr	r1, [r0, #0]
 8009164:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009166:	684a      	ldr	r2, [r1, #4]
 8009168:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800916c:	4322      	orrs	r2, r4
 800916e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009170:	0759      	lsls	r1, r3, #29
 8009172:	d506      	bpl.n	8009182 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009174:	6801      	ldr	r1, [r0, #0]
 8009176:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009178:	684a      	ldr	r2, [r1, #4]
 800917a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800917e:	4322      	orrs	r2, r4
 8009180:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009182:	071a      	lsls	r2, r3, #28
 8009184:	d506      	bpl.n	8009194 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009186:	6801      	ldr	r1, [r0, #0]
 8009188:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800918a:	684a      	ldr	r2, [r1, #4]
 800918c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009190:	4322      	orrs	r2, r4
 8009192:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009194:	06dc      	lsls	r4, r3, #27
 8009196:	d506      	bpl.n	80091a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009198:	6801      	ldr	r1, [r0, #0]
 800919a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800919c:	688a      	ldr	r2, [r1, #8]
 800919e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091a2:	4322      	orrs	r2, r4
 80091a4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091a6:	0699      	lsls	r1, r3, #26
 80091a8:	d506      	bpl.n	80091b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091aa:	6801      	ldr	r1, [r0, #0]
 80091ac:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80091ae:	688a      	ldr	r2, [r1, #8]
 80091b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091b4:	4322      	orrs	r2, r4
 80091b6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091b8:	065a      	lsls	r2, r3, #25
 80091ba:	d50a      	bpl.n	80091d2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091bc:	6801      	ldr	r1, [r0, #0]
 80091be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80091c0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091c2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80091ca:	ea42 0204 	orr.w	r2, r2, r4
 80091ce:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091d0:	d00b      	beq.n	80091ea <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091d2:	061b      	lsls	r3, r3, #24
 80091d4:	d506      	bpl.n	80091e4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091d6:	6802      	ldr	r2, [r0, #0]
 80091d8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80091da:	6853      	ldr	r3, [r2, #4]
 80091dc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6053      	str	r3, [r2, #4]
}
 80091e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091ea:	684a      	ldr	r2, [r1, #4]
 80091ec:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80091ee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80091f2:	4322      	orrs	r2, r4
 80091f4:	604a      	str	r2, [r1, #4]
 80091f6:	e7ec      	b.n	80091d2 <UART_AdvFeatureConfig+0x8a>

080091f8 <HAL_UART_Init>:
  if (huart == NULL)
 80091f8:	2800      	cmp	r0, #0
 80091fa:	f000 80d2 	beq.w	80093a2 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 80091fe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8009202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009206:	4604      	mov	r4, r0
 8009208:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 800920a:	2b00      	cmp	r3, #0
 800920c:	d058      	beq.n	80092c0 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 800920e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009212:	6921      	ldr	r1, [r4, #16]
 8009214:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8009216:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800921a:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 800921c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800921e:	6960      	ldr	r0, [r4, #20]
 8009220:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8009222:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009226:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009228:	48a1      	ldr	r0, [pc, #644]	; (80094b0 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 800922a:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800922c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800922e:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009230:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009232:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009234:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009236:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009238:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800923c:	4e9d      	ldr	r6, [pc, #628]	; (80094b4 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800923e:	4302      	orrs	r2, r0
 8009240:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009242:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009244:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800924c:	ea42 0207 	orr.w	r2, r2, r7
 8009250:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009252:	f000 808b 	beq.w	800936c <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009256:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8009258:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800925a:	4897      	ldr	r0, [pc, #604]	; (80094b8 <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 800925c:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009260:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009262:	4e96      	ldr	r6, [pc, #600]	; (80094bc <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009264:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009266:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009268:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	f022 020f 	bic.w	r2, r2, #15
 8009270:	ea42 0205 	orr.w	r2, r2, r5
 8009274:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009276:	d028      	beq.n	80092ca <HAL_UART_Init+0xd2>
 8009278:	4a91      	ldr	r2, [pc, #580]	; (80094c0 <HAL_UART_Init+0x2c8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f000 810e 	beq.w	800949c <HAL_UART_Init+0x2a4>
 8009280:	4a90      	ldr	r2, [pc, #576]	; (80094c4 <HAL_UART_Init+0x2cc>)
 8009282:	4293      	cmp	r3, r2
 8009284:	f000 8100 	beq.w	8009488 <HAL_UART_Init+0x290>
 8009288:	4a8f      	ldr	r2, [pc, #572]	; (80094c8 <HAL_UART_Init+0x2d0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f000 829e 	beq.w	80097cc <HAL_UART_Init+0x5d4>
 8009290:	4a8e      	ldr	r2, [pc, #568]	; (80094cc <HAL_UART_Init+0x2d4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f000 82a4 	beq.w	80097e0 <HAL_UART_Init+0x5e8>
 8009298:	4a8d      	ldr	r2, [pc, #564]	; (80094d0 <HAL_UART_Init+0x2d8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f000 82aa 	beq.w	80097f4 <HAL_UART_Init+0x5fc>
 80092a0:	4a8c      	ldr	r2, [pc, #560]	; (80094d4 <HAL_UART_Init+0x2dc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f000 82c5 	beq.w	8009832 <HAL_UART_Init+0x63a>
 80092a8:	4a8b      	ldr	r2, [pc, #556]	; (80094d8 <HAL_UART_Init+0x2e0>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d16f      	bne.n	800938e <HAL_UART_Init+0x196>
 80092ae:	4b8b      	ldr	r3, [pc, #556]	; (80094dc <HAL_UART_Init+0x2e4>)
 80092b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d869      	bhi.n	800938e <HAL_UART_Init+0x196>
 80092ba:	4a89      	ldr	r2, [pc, #548]	; (80094e0 <HAL_UART_Init+0x2e8>)
 80092bc:	5cd3      	ldrb	r3, [r2, r3]
 80092be:	e00c      	b.n	80092da <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 80092c0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80092c4:	f7f9 fefc 	bl	80030c0 <HAL_UART_MspInit>
 80092c8:	e7a1      	b.n	800920e <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ca:	4b84      	ldr	r3, [pc, #528]	; (80094dc <HAL_UART_Init+0x2e4>)
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092d2:	2b28      	cmp	r3, #40	; 0x28
 80092d4:	d85b      	bhi.n	800938e <HAL_UART_Init+0x196>
 80092d6:	4a83      	ldr	r2, [pc, #524]	; (80094e4 <HAL_UART_Init+0x2ec>)
 80092d8:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092de:	f000 810f 	beq.w	8009500 <HAL_UART_Init+0x308>
    switch (clocksource)
 80092e2:	2b40      	cmp	r3, #64	; 0x40
 80092e4:	d853      	bhi.n	800938e <HAL_UART_Init+0x196>
 80092e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80092ea:	0209      	.short	0x0209
 80092ec:	0052020c 	.word	0x0052020c
 80092f0:	02040052 	.word	0x02040052
 80092f4:	00520052 	.word	0x00520052
 80092f8:	01fc0052 	.word	0x01fc0052
 80092fc:	00520052 	.word	0x00520052
 8009300:	00520052 	.word	0x00520052
 8009304:	00520052 	.word	0x00520052
 8009308:	01d00052 	.word	0x01d00052
 800930c:	00520052 	.word	0x00520052
 8009310:	00520052 	.word	0x00520052
 8009314:	00520052 	.word	0x00520052
 8009318:	00520052 	.word	0x00520052
 800931c:	00520052 	.word	0x00520052
 8009320:	00520052 	.word	0x00520052
 8009324:	00520052 	.word	0x00520052
 8009328:	02120052 	.word	0x02120052
 800932c:	00520052 	.word	0x00520052
 8009330:	00520052 	.word	0x00520052
 8009334:	00520052 	.word	0x00520052
 8009338:	00520052 	.word	0x00520052
 800933c:	00520052 	.word	0x00520052
 8009340:	00520052 	.word	0x00520052
 8009344:	00520052 	.word	0x00520052
 8009348:	00520052 	.word	0x00520052
 800934c:	00520052 	.word	0x00520052
 8009350:	00520052 	.word	0x00520052
 8009354:	00520052 	.word	0x00520052
 8009358:	00520052 	.word	0x00520052
 800935c:	00520052 	.word	0x00520052
 8009360:	00520052 	.word	0x00520052
 8009364:	00520052 	.word	0x00520052
 8009368:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800936c:	6898      	ldr	r0, [r3, #8]
 800936e:	4a52      	ldr	r2, [pc, #328]	; (80094b8 <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009370:	495a      	ldr	r1, [pc, #360]	; (80094dc <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009372:	4002      	ands	r2, r0
 8009374:	ea42 020c 	orr.w	r2, r2, ip
 8009378:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	f022 020f 	bic.w	r2, r2, #15
 8009380:	432a      	orrs	r2, r5
 8009382:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009384:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b05      	cmp	r3, #5
 800938c:	d90b      	bls.n	80093a6 <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 800938e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009390:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8009394:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8009396:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8009398:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 800939c:	b007      	add	sp, #28
 800939e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 80093a2:	2001      	movs	r0, #1
}
 80093a4:	4770      	bx	lr
    switch (clocksource)
 80093a6:	4a50      	ldr	r2, [pc, #320]	; (80094e8 <HAL_UART_Init+0x2f0>)
 80093a8:	5cd3      	ldrb	r3, [r2, r3]
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	f000 823c 	beq.w	8009828 <HAL_UART_Init+0x630>
 80093b0:	f240 822a 	bls.w	8009808 <HAL_UART_Init+0x610>
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	f000 81ac 	beq.w	8009712 <HAL_UART_Init+0x51a>
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	f000 8245 	beq.w	800984a <HAL_UART_Init+0x652>
 80093c0:	2b10      	cmp	r3, #16
 80093c2:	d1e4      	bne.n	800938e <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c4:	680b      	ldr	r3, [r1, #0]
 80093c6:	069f      	lsls	r7, r3, #26
 80093c8:	f140 8242 	bpl.w	8009850 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093cc:	680b      	ldr	r3, [r1, #0]
 80093ce:	4847      	ldr	r0, [pc, #284]	; (80094ec <HAL_UART_Init+0x2f4>)
 80093d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093d4:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093d6:	4b46      	ldr	r3, [pc, #280]	; (80094f0 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093d8:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093da:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093de:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093e2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093e6:	428b      	cmp	r3, r1
 80093e8:	d3d1      	bcc.n	800938e <HAL_UART_Init+0x196>
 80093ea:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80093ee:	d8ce      	bhi.n	800938e <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093f0:	2500      	movs	r5, #0
 80093f2:	2300      	movs	r3, #0
 80093f4:	0877      	lsrs	r7, r6, #1
 80093f6:	4629      	mov	r1, r5
 80093f8:	f7f7 f82a 	bl	8000450 <__aeabi_uldivmod>
 80093fc:	4632      	mov	r2, r6
 80093fe:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8009402:	462b      	mov	r3, r5
 8009404:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8009408:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800940c:	eb18 0007 	adds.w	r0, r8, r7
 8009410:	f149 0100 	adc.w	r1, r9, #0
 8009414:	f7f7 f81c 	bl	8000450 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009418:	4b36      	ldr	r3, [pc, #216]	; (80094f4 <HAL_UART_Init+0x2fc>)
 800941a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800941e:	429a      	cmp	r2, r3
 8009420:	d8b5      	bhi.n	800938e <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8009422:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8009424:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8009428:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 800942a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800942c:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	f040 8151 	bne.w	80096da <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009438:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943a:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800944a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	f042 0201 	orr.w	r2, r2, #1
 8009452:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009454:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 8009458:	f7f9 ffe6 	bl	8003428 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800945c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800945e:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	0711      	lsls	r1, r2, #28
 8009464:	f100 80d4 	bmi.w	8009610 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	0750      	lsls	r0, r2, #29
 800946c:	f100 80f9 	bmi.w	8009662 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8009470:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009472:	2220      	movs	r2, #32
  return HAL_OK;
 8009474:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009476:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800947a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800947e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8009482:	b007      	add	sp, #28
 8009484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009488:	4b14      	ldr	r3, [pc, #80]	; (80094dc <HAL_UART_Init+0x2e4>)
 800948a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	2b05      	cmp	r3, #5
 8009492:	f63f af7c 	bhi.w	800938e <HAL_UART_Init+0x196>
 8009496:	4a18      	ldr	r2, [pc, #96]	; (80094f8 <HAL_UART_Init+0x300>)
 8009498:	5cd3      	ldrb	r3, [r2, r3]
 800949a:	e71e      	b.n	80092da <HAL_UART_Init+0xe2>
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <HAL_UART_Init+0x2e4>)
 800949e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	2b05      	cmp	r3, #5
 80094a6:	f63f af72 	bhi.w	800938e <HAL_UART_Init+0x196>
 80094aa:	4a14      	ldr	r2, [pc, #80]	; (80094fc <HAL_UART_Init+0x304>)
 80094ac:	5cd3      	ldrb	r3, [r2, r3]
 80094ae:	e714      	b.n	80092da <HAL_UART_Init+0xe2>
 80094b0:	cfff69f3 	.word	0xcfff69f3
 80094b4:	58000c00 	.word	0x58000c00
 80094b8:	11fff4ff 	.word	0x11fff4ff
 80094bc:	40011000 	.word	0x40011000
 80094c0:	40004400 	.word	0x40004400
 80094c4:	40004800 	.word	0x40004800
 80094c8:	40004c00 	.word	0x40004c00
 80094cc:	40005000 	.word	0x40005000
 80094d0:	40011400 	.word	0x40011400
 80094d4:	40007800 	.word	0x40007800
 80094d8:	40007c00 	.word	0x40007c00
 80094dc:	58024400 	.word	0x58024400
 80094e0:	08012544 	.word	0x08012544
 80094e4:	08012518 	.word	0x08012518
 80094e8:	0801254c 	.word	0x0801254c
 80094ec:	03d09000 	.word	0x03d09000
 80094f0:	08012554 	.word	0x08012554
 80094f4:	000ffcff 	.word	0x000ffcff
 80094f8:	08012544 	.word	0x08012544
 80094fc:	08012544 	.word	0x08012544
    switch (clocksource)
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	f63f af44 	bhi.w	800938e <HAL_UART_Init+0x196>
 8009506:	a201      	add	r2, pc, #4	; (adr r2, 800950c <HAL_UART_Init+0x314>)
 8009508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950c:	08009783 	.word	0x08009783
 8009510:	0800977d 	.word	0x0800977d
 8009514:	0800938f 	.word	0x0800938f
 8009518:	0800938f 	.word	0x0800938f
 800951c:	08009789 	.word	0x08009789
 8009520:	0800938f 	.word	0x0800938f
 8009524:	0800938f 	.word	0x0800938f
 8009528:	0800938f 	.word	0x0800938f
 800952c:	0800976f 	.word	0x0800976f
 8009530:	0800938f 	.word	0x0800938f
 8009534:	0800938f 	.word	0x0800938f
 8009538:	0800938f 	.word	0x0800938f
 800953c:	0800938f 	.word	0x0800938f
 8009540:	0800938f 	.word	0x0800938f
 8009544:	0800938f 	.word	0x0800938f
 8009548:	0800938f 	.word	0x0800938f
 800954c:	08009717 	.word	0x08009717
 8009550:	0800938f 	.word	0x0800938f
 8009554:	0800938f 	.word	0x0800938f
 8009558:	0800938f 	.word	0x0800938f
 800955c:	0800938f 	.word	0x0800938f
 8009560:	0800938f 	.word	0x0800938f
 8009564:	0800938f 	.word	0x0800938f
 8009568:	0800938f 	.word	0x0800938f
 800956c:	0800938f 	.word	0x0800938f
 8009570:	0800938f 	.word	0x0800938f
 8009574:	0800938f 	.word	0x0800938f
 8009578:	0800938f 	.word	0x0800938f
 800957c:	0800938f 	.word	0x0800938f
 8009580:	0800938f 	.word	0x0800938f
 8009584:	0800938f 	.word	0x0800938f
 8009588:	0800938f 	.word	0x0800938f
 800958c:	08009793 	.word	0x08009793
 8009590:	0800938f 	.word	0x0800938f
 8009594:	0800938f 	.word	0x0800938f
 8009598:	0800938f 	.word	0x0800938f
 800959c:	0800938f 	.word	0x0800938f
 80095a0:	0800938f 	.word	0x0800938f
 80095a4:	0800938f 	.word	0x0800938f
 80095a8:	0800938f 	.word	0x0800938f
 80095ac:	0800938f 	.word	0x0800938f
 80095b0:	0800938f 	.word	0x0800938f
 80095b4:	0800938f 	.word	0x0800938f
 80095b8:	0800938f 	.word	0x0800938f
 80095bc:	0800938f 	.word	0x0800938f
 80095c0:	0800938f 	.word	0x0800938f
 80095c4:	0800938f 	.word	0x0800938f
 80095c8:	0800938f 	.word	0x0800938f
 80095cc:	0800938f 	.word	0x0800938f
 80095d0:	0800938f 	.word	0x0800938f
 80095d4:	0800938f 	.word	0x0800938f
 80095d8:	0800938f 	.word	0x0800938f
 80095dc:	0800938f 	.word	0x0800938f
 80095e0:	0800938f 	.word	0x0800938f
 80095e4:	0800938f 	.word	0x0800938f
 80095e8:	0800938f 	.word	0x0800938f
 80095ec:	0800938f 	.word	0x0800938f
 80095f0:	0800938f 	.word	0x0800938f
 80095f4:	0800938f 	.word	0x0800938f
 80095f8:	0800938f 	.word	0x0800938f
 80095fc:	0800938f 	.word	0x0800938f
 8009600:	0800938f 	.word	0x0800938f
 8009604:	0800938f 	.word	0x0800938f
 8009608:	0800938f 	.word	0x0800938f
 800960c:	08009797 	.word	0x08009797
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009610:	69dd      	ldr	r5, [r3, #28]
 8009612:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8009616:	f47f af27 	bne.w	8009468 <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800961a:	f7f9 ff05 	bl	8003428 <HAL_GetTick>
 800961e:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009620:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009622:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8009626:	f080 80c0 	bcs.w	80097aa <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	0752      	lsls	r2, r2, #29
 800962e:	d5ef      	bpl.n	8009610 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009630:	69da      	ldr	r2, [r3, #28]
 8009632:	0517      	lsls	r7, r2, #20
 8009634:	d5ec      	bpl.n	8009610 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009636:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800963a:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800963c:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800963e:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009640:	6819      	ldr	r1, [r3, #0]
 8009642:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8009646:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009648:	6899      	ldr	r1, [r3, #8]
 800964a:	f021 0101 	bic.w	r1, r1, #1
 800964e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009650:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8009654:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009658:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800965c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8009660:	e69c      	b.n	800939c <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009662:	69dd      	ldr	r5, [r3, #28]
 8009664:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8009668:	f47f af02 	bne.w	8009470 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966c:	f7f9 fedc 	bl	8003428 <HAL_GetTick>
 8009670:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009672:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009674:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8009678:	f080 8097 	bcs.w	80097aa <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	0751      	lsls	r1, r2, #29
 8009680:	d5ef      	bpl.n	8009662 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	0512      	lsls	r2, r2, #20
 8009686:	d5ec      	bpl.n	8009662 <HAL_UART_Init+0x46a>
 8009688:	e7d5      	b.n	8009636 <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800968a:	4b73      	ldr	r3, [pc, #460]	; (8009858 <HAL_UART_Init+0x660>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	0690      	lsls	r0, r2, #26
 8009690:	f140 80d9 	bpl.w	8009846 <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4871      	ldr	r0, [pc, #452]	; (800985c <HAL_UART_Init+0x664>)
 8009698:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800969c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969e:	4b70      	ldr	r3, [pc, #448]	; (8009860 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096a4:	6862      	ldr	r2, [r4, #4]
 80096a6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80096aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80096ae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80096b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b6:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b8:	f1a3 0210 	sub.w	r2, r3, #16
 80096bc:	428a      	cmp	r2, r1
 80096be:	f63f ae66 	bhi.w	800938e <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 80096c2:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 80096c4:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 80096c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 80096ca:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 80096ce:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80096d0:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f43f aeaf 	beq.w	8009438 <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 80096da:	4620      	mov	r0, r4
 80096dc:	f7ff fd34 	bl	8009148 <UART_AdvFeatureConfig>
 80096e0:	e6aa      	b.n	8009438 <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096e2:	a803      	add	r0, sp, #12
 80096e4:	f7fe fda8 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096e8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d056      	beq.n	800979c <HAL_UART_Init+0x5a4>
 80096ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096f0:	e7d5      	b.n	800969e <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f2:	4668      	mov	r0, sp
 80096f4:	f7fe fd08 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	e7f6      	b.n	80096ea <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80096fc:	f7fd fd3e 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8009700:	e7f3      	b.n	80096ea <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009702:	f7fd fdeb 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 8009706:	e7f0      	b.n	80096ea <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 8009708:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800970c:	e7c7      	b.n	800969e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 800970e:	4855      	ldr	r0, [pc, #340]	; (8009864 <HAL_UART_Init+0x66c>)
 8009710:	e7c5      	b.n	800969e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8009712:	4854      	ldr	r0, [pc, #336]	; (8009864 <HAL_UART_Init+0x66c>)
 8009714:	e65f      	b.n	80093d6 <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009716:	4b50      	ldr	r3, [pc, #320]	; (8009858 <HAL_UART_Init+0x660>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	0696      	lsls	r6, r2, #26
 800971c:	f140 809a 	bpl.w	8009854 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	484e      	ldr	r0, [pc, #312]	; (800985c <HAL_UART_Init+0x664>)
 8009724:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009728:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800972a:	4b4d      	ldr	r3, [pc, #308]	; (8009860 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800972c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009730:	6862      	ldr	r2, [r4, #4]
 8009732:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8009736:	0853      	lsrs	r3, r2, #1
 8009738:	fbb0 f0f5 	udiv	r0, r0, r5
 800973c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009740:	fbb3 f3f2 	udiv	r3, r3, r2
 8009744:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009746:	f1a2 0010 	sub.w	r0, r2, #16
 800974a:	4288      	cmp	r0, r1
 800974c:	f63f ae1f 	bhi.w	800938e <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009750:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009754:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 8009758:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800975a:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800975c:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 800975e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8009762:	4313      	orrs	r3, r2
 8009764:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 8009766:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8009768:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 800976c:	e660      	b.n	8009430 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800976e:	a803      	add	r0, sp, #12
 8009770:	f7fe fd62 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009774:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8009776:	b188      	cbz	r0, 800979c <HAL_UART_Init+0x5a4>
 8009778:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800977a:	e7d6      	b.n	800972a <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 800977c:	f7fd fdae 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 8009780:	e7f9      	b.n	8009776 <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009782:	f7fd fcfb 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8009786:	e7f6      	b.n	8009776 <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009788:	4668      	mov	r0, sp
 800978a:	f7fe fcbd 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800978e:	9801      	ldr	r0, [sp, #4]
 8009790:	e7f1      	b.n	8009776 <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 8009792:	4834      	ldr	r0, [pc, #208]	; (8009864 <HAL_UART_Init+0x66c>)
 8009794:	e7c9      	b.n	800972a <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 8009796:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800979a:	e7c6      	b.n	800972a <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80097a2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80097a4:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 80097a8:	e642      	b.n	8009430 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097aa:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80097ac:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80097ae:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	f022 0201 	bic.w	r2, r2, #1
 80097bc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80097be:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80097c2:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80097c6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80097ca:	e5e7      	b.n	800939c <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097cc:	4b22      	ldr	r3, [pc, #136]	; (8009858 <HAL_UART_Init+0x660>)
 80097ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d0:	f003 0307 	and.w	r3, r3, #7
 80097d4:	2b05      	cmp	r3, #5
 80097d6:	f63f adda 	bhi.w	800938e <HAL_UART_Init+0x196>
 80097da:	4a23      	ldr	r2, [pc, #140]	; (8009868 <HAL_UART_Init+0x670>)
 80097dc:	5cd3      	ldrb	r3, [r2, r3]
 80097de:	e57c      	b.n	80092da <HAL_UART_Init+0xe2>
 80097e0:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <HAL_UART_Init+0x660>)
 80097e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	2b05      	cmp	r3, #5
 80097ea:	f63f add0 	bhi.w	800938e <HAL_UART_Init+0x196>
 80097ee:	4a1f      	ldr	r2, [pc, #124]	; (800986c <HAL_UART_Init+0x674>)
 80097f0:	5cd3      	ldrb	r3, [r2, r3]
 80097f2:	e572      	b.n	80092da <HAL_UART_Init+0xe2>
 80097f4:	4b18      	ldr	r3, [pc, #96]	; (8009858 <HAL_UART_Init+0x660>)
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097fc:	2b28      	cmp	r3, #40	; 0x28
 80097fe:	f63f adc6 	bhi.w	800938e <HAL_UART_Init+0x196>
 8009802:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <HAL_UART_Init+0x678>)
 8009804:	5cd3      	ldrb	r3, [r2, r3]
 8009806:	e568      	b.n	80092da <HAL_UART_Init+0xe2>
    switch (clocksource)
 8009808:	2b02      	cmp	r3, #2
 800980a:	d00a      	beq.n	8009822 <HAL_UART_Init+0x62a>
 800980c:	2b04      	cmp	r3, #4
 800980e:	f47f adbe 	bne.w	800938e <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009812:	4668      	mov	r0, sp
 8009814:	f7fe fc78 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009818:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800981a:	2800      	cmp	r0, #0
 800981c:	d0be      	beq.n	800979c <HAL_UART_Init+0x5a4>
 800981e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009820:	e5d9      	b.n	80093d6 <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009822:	f7fe fc5f 	bl	80080e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009826:	e7f8      	b.n	800981a <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009828:	a803      	add	r0, sp, #12
 800982a:	f7fe fd05 	bl	8008238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800982e:	9804      	ldr	r0, [sp, #16]
 8009830:	e7f3      	b.n	800981a <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <HAL_UART_Init+0x660>)
 8009834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	2b05      	cmp	r3, #5
 800983c:	f63f ada7 	bhi.w	800938e <HAL_UART_Init+0x196>
 8009840:	4a0c      	ldr	r2, [pc, #48]	; (8009874 <HAL_UART_Init+0x67c>)
 8009842:	5cd3      	ldrb	r3, [r2, r3]
 8009844:	e549      	b.n	80092da <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 8009846:	4805      	ldr	r0, [pc, #20]	; (800985c <HAL_UART_Init+0x664>)
 8009848:	e729      	b.n	800969e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 800984a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800984e:	e5c2      	b.n	80093d6 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8009850:	4802      	ldr	r0, [pc, #8]	; (800985c <HAL_UART_Init+0x664>)
 8009852:	e5c0      	b.n	80093d6 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <HAL_UART_Init+0x664>)
 8009856:	e768      	b.n	800972a <HAL_UART_Init+0x532>
 8009858:	58024400 	.word	0x58024400
 800985c:	03d09000 	.word	0x03d09000
 8009860:	08012554 	.word	0x08012554
 8009864:	003d0900 	.word	0x003d0900
 8009868:	08012544 	.word	0x08012544
 800986c:	08012544 	.word	0x08012544
 8009870:	08012518 	.word	0x08012518
 8009874:	08012544 	.word	0x08012544

08009878 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop

0800987c <HAL_UARTEx_RxFifoFullCallback>:
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop

08009880 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop

08009884 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009884:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009888:	2a01      	cmp	r2, #1
 800988a:	d017      	beq.n	80098bc <HAL_UARTEx_DisableFifoMode+0x38>
 800988c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 800988e:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009890:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009892:	681a      	ldr	r2, [r3, #0]
{
 8009894:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8009896:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 800989a:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800989c:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 800989e:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 80098a0:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098a2:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80098a6:	f025 0501 	bic.w	r5, r5, #1
 80098aa:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098ac:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ae:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80098b0:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80098b4:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 80098b8:	bc70      	pop	{r4, r5, r6}
 80098ba:	4770      	bx	lr
  __HAL_LOCK(huart);
 80098bc:	2002      	movs	r0, #2
}
 80098be:	4770      	bx	lr

080098c0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098c0:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80098c4:	2a01      	cmp	r2, #1
 80098c6:	d046      	beq.n	8009956 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 80098c8:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 80098ca:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098cc:	681a      	ldr	r2, [r3, #0]
{
 80098ce:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80098d0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 80098d4:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098d6:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098d8:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80098da:	4d20      	ldr	r5, [pc, #128]	; (800995c <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 80098dc:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80098e0:	4e1f      	ldr	r6, [pc, #124]	; (8009960 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80098e2:	9500      	str	r5, [sp, #0]
 80098e4:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 80098e8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098ea:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80098ec:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80098ee:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f2:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80098f6:	9602      	str	r6, [sp, #8]
 80098f8:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098fc:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098fe:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009900:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009902:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009904:	b320      	cbz	r0, 8009950 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009906:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009908:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800990a:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800990c:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009910:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009914:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009916:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800991a:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 800991e:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009922:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009924:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009926:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800992a:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800992e:	fb90 f0f5 	sdiv	r0, r0, r5
 8009932:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009936:	2100      	movs	r1, #0
 8009938:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800993c:	2520      	movs	r5, #32
  return HAL_OK;
 800993e:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009940:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009942:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009946:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800994a:	b004      	add	sp, #16
 800994c:	bcf0      	pop	{r4, r5, r6, r7}
 800994e:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8009950:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009952:	4608      	mov	r0, r1
 8009954:	e7ed      	b.n	8009932 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8009956:	2002      	movs	r0, #2
}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	03010101 	.word	0x03010101
 8009960:	04020408 	.word	0x04020408

08009964 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009964:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009968:	2a01      	cmp	r2, #1
 800996a:	d046      	beq.n	80099fa <HAL_UARTEx_SetRxFifoThreshold+0x96>
 800996c:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800996e:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009970:	681a      	ldr	r2, [r3, #0]
{
 8009972:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009974:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8009978:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800997a:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800997c:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800997e:	4d20      	ldr	r5, [pc, #128]	; (8009a00 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8009980:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009984:	4e1f      	ldr	r6, [pc, #124]	; (8009a04 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009986:	9500      	str	r5, [sp, #0]
 8009988:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 800998c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800998e:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009990:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009992:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009996:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800999a:	9602      	str	r6, [sp, #8]
 800999c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099a0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099a2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80099a4:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099a6:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099a8:	b320      	cbz	r0, 80099f4 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099aa:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099ac:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099ae:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80099b0:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099b4:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80099b8:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099ba:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80099be:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 80099c2:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099c6:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80099c8:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099ca:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80099ce:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80099d2:	fb90 f0f5 	sdiv	r0, r0, r5
 80099d6:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80099da:	2100      	movs	r1, #0
 80099dc:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80099e0:	2520      	movs	r5, #32
  return HAL_OK;
 80099e2:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e4:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80099e6:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80099ea:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 80099ee:	b004      	add	sp, #16
 80099f0:	bcf0      	pop	{r4, r5, r6, r7}
 80099f2:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80099f4:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80099f6:	4608      	mov	r0, r1
 80099f8:	e7ed      	b.n	80099d6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 80099fa:	2002      	movs	r0, #2
}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	03010101 	.word	0x03010101
 8009a04:	04020408 	.word	0x04020408

08009a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a08:	b084      	sub	sp, #16
 8009a0a:	b430      	push	{r4, r5}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a0c:	9d08      	ldr	r5, [sp, #32]
{
 8009a0e:	ac03      	add	r4, sp, #12
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a10:	2d01      	cmp	r5, #1
{
 8009a12:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a16:	d131      	bne.n	8009a7c <USB_CoreInit+0x74>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a18:	6b82      	ldr	r2, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ad4 <USB_CoreInit+0xcc>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
    if (cfg.use_external_vbus == 1U)
 8009a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a22:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8009a24:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a26:	68c2      	ldr	r2, [r0, #12]
 8009a28:	ea03 0302 	and.w	r3, r3, r2
 8009a2c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a2e:	68c3      	ldr	r3, [r0, #12]
 8009a30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a34:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8009a36:	d044      	beq.n	8009ac2 <USB_CoreInit+0xba>
{
 8009a38:	4b27      	ldr	r3, [pc, #156]	; (8009ad8 <USB_CoreInit+0xd0>)
 8009a3a:	e001      	b.n	8009a40 <USB_CoreInit+0x38>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	d045      	beq.n	8009acc <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a40:	6902      	ldr	r2, [r0, #16]
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	dafa      	bge.n	8009a3c <USB_CoreInit+0x34>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a46:	6903      	ldr	r3, [r0, #16]
 8009a48:	4a23      	ldr	r2, [pc, #140]	; (8009ad8 <USB_CoreInit+0xd0>)
 8009a4a:	f043 0301 	orr.w	r3, r3, #1
 8009a4e:	6103      	str	r3, [r0, #16]
 8009a50:	e001      	b.n	8009a56 <USB_CoreInit+0x4e>

  do
  {
    if (++count > 200000U)
 8009a52:	3a01      	subs	r2, #1
 8009a54:	d03a      	beq.n	8009acc <USB_CoreInit+0xc4>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a56:	6903      	ldr	r3, [r0, #16]
 8009a58:	f013 0301 	ands.w	r3, r3, #1
 8009a5c:	d1f9      	bne.n	8009a52 <USB_CoreInit+0x4a>
  if (cfg.dma_enable == 1U)
 8009a5e:	9a06      	ldr	r2, [sp, #24]
 8009a60:	2a01      	cmp	r2, #1
 8009a62:	d107      	bne.n	8009a74 <USB_CoreInit+0x6c>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a64:	6882      	ldr	r2, [r0, #8]
 8009a66:	f042 0206 	orr.w	r2, r2, #6
 8009a6a:	6082      	str	r2, [r0, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a6c:	6882      	ldr	r2, [r0, #8]
 8009a6e:	f042 0220 	orr.w	r2, r2, #32
 8009a72:	6082      	str	r2, [r0, #8]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	bc30      	pop	{r4, r5}
 8009a78:	b004      	add	sp, #16
 8009a7a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a7c:	68c2      	ldr	r2, [r0, #12]
 8009a7e:	4b16      	ldr	r3, [pc, #88]	; (8009ad8 <USB_CoreInit+0xd0>)
 8009a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a84:	60c2      	str	r2, [r0, #12]
 8009a86:	e001      	b.n	8009a8c <USB_CoreInit+0x84>
    if (++count > 200000U)
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	d021      	beq.n	8009ad0 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a8c:	6902      	ldr	r2, [r0, #16]
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	dafa      	bge.n	8009a88 <USB_CoreInit+0x80>
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a92:	6903      	ldr	r3, [r0, #16]
 8009a94:	4a10      	ldr	r2, [pc, #64]	; (8009ad8 <USB_CoreInit+0xd0>)
 8009a96:	f043 0301 	orr.w	r3, r3, #1
 8009a9a:	6103      	str	r3, [r0, #16]
 8009a9c:	e001      	b.n	8009aa2 <USB_CoreInit+0x9a>
    if (++count > 200000U)
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	d016      	beq.n	8009ad0 <USB_CoreInit+0xc8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009aa2:	6903      	ldr	r3, [r0, #16]
 8009aa4:	f013 0301 	ands.w	r3, r3, #1
 8009aa8:	d1f9      	bne.n	8009a9e <USB_CoreInit+0x96>
    if (cfg.battery_charging_enable == 0U)
 8009aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aac:	b922      	cbnz	r2, 8009ab8 <USB_CoreInit+0xb0>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009aae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009ab0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009ab4:	6382      	str	r2, [r0, #56]	; 0x38
 8009ab6:	e7d2      	b.n	8009a5e <USB_CoreInit+0x56>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ab8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009aba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009abe:	6382      	str	r2, [r0, #56]	; 0x38
 8009ac0:	e7cd      	b.n	8009a5e <USB_CoreInit+0x56>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009ac2:	68c3      	ldr	r3, [r0, #12]
 8009ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ac8:	60c3      	str	r3, [r0, #12]
 8009aca:	e7b5      	b.n	8009a38 <USB_CoreInit+0x30>
      return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e7c6      	b.n	8009a5e <USB_CoreInit+0x56>
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e7ea      	b.n	8009aaa <USB_CoreInit+0xa2>
 8009ad4:	ffbdffbf 	.word	0xffbdffbf
 8009ad8:	00030d40 	.word	0x00030d40

08009adc <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8009adc:	2a02      	cmp	r2, #2
{
 8009ade:	4603      	mov	r3, r0
 8009ae0:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 8009ae2:	d00c      	beq.n	8009afe <USB_SetTurnaroundTime+0x22>
 8009ae4:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009ae8:	68d9      	ldr	r1, [r3, #12]
}
 8009aea:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009aec:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8009af0:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	4322      	orrs	r2, r4
}
 8009af6:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009afa:	60da      	str	r2, [r3, #12]
}
 8009afc:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009afe:	4a29      	ldr	r2, [pc, #164]	; (8009ba4 <USB_SetTurnaroundTime+0xc8>)
 8009b00:	4829      	ldr	r0, [pc, #164]	; (8009ba8 <USB_SetTurnaroundTime+0xcc>)
 8009b02:	440a      	add	r2, r1
 8009b04:	4282      	cmp	r2, r0
 8009b06:	d93a      	bls.n	8009b7e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b08:	4a28      	ldr	r2, [pc, #160]	; (8009bac <USB_SetTurnaroundTime+0xd0>)
 8009b0a:	4829      	ldr	r0, [pc, #164]	; (8009bb0 <USB_SetTurnaroundTime+0xd4>)
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4282      	cmp	r2, r0
 8009b10:	d932      	bls.n	8009b78 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b12:	4a28      	ldr	r2, [pc, #160]	; (8009bb4 <USB_SetTurnaroundTime+0xd8>)
 8009b14:	4828      	ldr	r0, [pc, #160]	; (8009bb8 <USB_SetTurnaroundTime+0xdc>)
 8009b16:	440a      	add	r2, r1
 8009b18:	4282      	cmp	r2, r0
 8009b1a:	d933      	bls.n	8009b84 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009b1c:	4a27      	ldr	r2, [pc, #156]	; (8009bbc <USB_SetTurnaroundTime+0xe0>)
 8009b1e:	f500 30c3 	add.w	r0, r0, #99840	; 0x18600
 8009b22:	440a      	add	r2, r1
 8009b24:	30a0      	adds	r0, #160	; 0xa0
 8009b26:	4282      	cmp	r2, r0
 8009b28:	d92f      	bls.n	8009b8a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b2a:	4a25      	ldr	r2, [pc, #148]	; (8009bc0 <USB_SetTurnaroundTime+0xe4>)
 8009b2c:	4825      	ldr	r0, [pc, #148]	; (8009bc4 <USB_SetTurnaroundTime+0xe8>)
 8009b2e:	440a      	add	r2, r1
 8009b30:	4282      	cmp	r2, r0
 8009b32:	d92d      	bls.n	8009b90 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b34:	4a24      	ldr	r2, [pc, #144]	; (8009bc8 <USB_SetTurnaroundTime+0xec>)
 8009b36:	f500 2092 	add.w	r0, r0, #299008	; 0x49000
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
 8009b40:	4282      	cmp	r2, r0
 8009b42:	d928      	bls.n	8009b96 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b44:	4a21      	ldr	r2, [pc, #132]	; (8009bcc <USB_SetTurnaroundTime+0xf0>)
 8009b46:	f500 20c3 	add.w	r0, r0, #399360	; 0x61800
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f500 7020 	add.w	r0, r0, #640	; 0x280
 8009b50:	4282      	cmp	r2, r0
 8009b52:	d9c7      	bls.n	8009ae4 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b54:	4a1e      	ldr	r2, [pc, #120]	; (8009bd0 <USB_SetTurnaroundTime+0xf4>)
 8009b56:	f500 10b7 	add.w	r0, r0, #1499136	; 0x16e000
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8009b60:	4282      	cmp	r2, r0
 8009b62:	d91b      	bls.n	8009b9c <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b64:	4a1b      	ldr	r2, [pc, #108]	; (8009bd4 <USB_SetTurnaroundTime+0xf8>)
 8009b66:	4c1c      	ldr	r4, [pc, #112]	; (8009bd8 <USB_SetTurnaroundTime+0xfc>)
 8009b68:	440a      	add	r2, r1
 8009b6a:	42a2      	cmp	r2, r4
 8009b6c:	bf8c      	ite	hi
 8009b6e:	f44f 54c0 	movhi.w	r4, #6144	; 0x1800
 8009b72:	f44f 54e0 	movls.w	r4, #7168	; 0x1c00
 8009b76:	e7b7      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b78:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8009b7c:	e7b4      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b7e:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 8009b82:	e7b1      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b84:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 8009b88:	e7ae      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b8a:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8009b8e:	e7ab      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b90:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8009b94:	e7a8      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b96:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8009b9a:	e7a5      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009b9c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8009ba0:	e7a2      	b.n	8009ae8 <USB_SetTurnaroundTime+0xc>
 8009ba2:	bf00      	nop
 8009ba4:	ff275340 	.word	0xff275340
 8009ba8:	000c34ff 	.word	0x000c34ff
 8009bac:	ff1b1e40 	.word	0xff1b1e40
 8009bb0:	000f423f 	.word	0x000f423f
 8009bb4:	ff0bdc00 	.word	0xff0bdc00
 8009bb8:	00124f7f 	.word	0x00124f7f
 8009bbc:	fef98c80 	.word	0xfef98c80
 8009bc0:	fee5b660 	.word	0xfee5b660
 8009bc4:	0016e35f 	.word	0x0016e35f
 8009bc8:	feced300 	.word	0xfeced300
 8009bcc:	feb35bc0 	.word	0xfeb35bc0
 8009bd0:	fe91ca00 	.word	0xfe91ca00
 8009bd4:	fe5954e0 	.word	0xfe5954e0
 8009bd8:	00419cdf 	.word	0x00419cdf

08009bdc <USB_EnableGlobalInt>:
{
 8009bdc:	4602      	mov	r2, r0
}
 8009bde:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009be0:	6893      	ldr	r3, [r2, #8]
 8009be2:	f043 0301 	orr.w	r3, r3, #1
 8009be6:	6093      	str	r3, [r2, #8]
}
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop

08009bec <USB_DisableGlobalInt>:
{
 8009bec:	4602      	mov	r2, r0
}
 8009bee:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009bf0:	6893      	ldr	r3, [r2, #8]
 8009bf2:	f023 0301 	bic.w	r3, r3, #1
 8009bf6:	6093      	str	r3, [r2, #8]
}
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop

08009bfc <USB_SetCurrentMode>:
{
 8009bfc:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bfe:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009c00:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c02:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c06:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009c08:	d00b      	beq.n	8009c22 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8009c0a:	b941      	cbnz	r1, 8009c1e <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c0c:	68c3      	ldr	r3, [r0, #12]
 8009c0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c12:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8009c14:	2032      	movs	r0, #50	; 0x32
 8009c16:	f7f9 fc0d 	bl	8003434 <HAL_Delay>
  return HAL_OK;
 8009c1a:	2000      	movs	r0, #0
}
 8009c1c:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8009c1e:	2001      	movs	r0, #1
}
 8009c20:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c22:	68c3      	ldr	r3, [r0, #12]
 8009c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c28:	60c3      	str	r3, [r0, #12]
 8009c2a:	e7f3      	b.n	8009c14 <USB_SetCurrentMode+0x18>

08009c2c <USB_DevInit>:
{
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	468c      	mov	ip, r1
 8009c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c34:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8009c36:	4604      	mov	r4, r0
 8009c38:	ae08      	add	r6, sp, #32
    USBx->DIEPTXF[i] = 0U;
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8009c40:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
 8009c44:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8009c48:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 8009c4c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
 8009c50:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8009c54:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 8009c58:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
 8009c5c:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
 8009c60:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8009c64:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8009c68:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8009c6c:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 8009c70:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8009c74:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8009c78:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
{
 8009c7c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  if (cfg.vbus_sensing_enable == 0U)
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	f040 8094 	bne.w	8009dae <USB_DevInit+0x182>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f043 0302 	orr.w	r3, r3, #2
 8009c8c:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c94:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8009ca6:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  USBx_PCGCCTL = 0U;
 8009caa:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cae:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009cb0:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8009cb4:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cb8:	d07e      	beq.n	8009db8 <USB_DevInit+0x18c>
  USBx_DEVICE->DCFG |= speed;
 8009cba:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009cbe:	f043 0303 	orr.w	r3, r3, #3
 8009cc2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009cc6:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8009cca:	4b47      	ldr	r3, [pc, #284]	; (8009de8 <USB_DevInit+0x1bc>)
 8009ccc:	6122      	str	r2, [r4, #16]
 8009cce:	e001      	b.n	8009cd4 <USB_DevInit+0xa8>
    if (++count > 200000U)
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	d07f      	beq.n	8009dd4 <USB_DevInit+0x1a8>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cd4:	6920      	ldr	r0, [r4, #16]
 8009cd6:	f010 0020 	ands.w	r0, r0, #32
 8009cda:	d1f9      	bne.n	8009cd0 <USB_DevInit+0xa4>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009cdc:	2210      	movs	r2, #16
 8009cde:	4b42      	ldr	r3, [pc, #264]	; (8009de8 <USB_DevInit+0x1bc>)
 8009ce0:	6122      	str	r2, [r4, #16]
 8009ce2:	e001      	b.n	8009ce8 <USB_DevInit+0xbc>
    if (++count > 200000U)
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	d077      	beq.n	8009dd8 <USB_DevInit+0x1ac>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ce8:	6922      	ldr	r2, [r4, #16]
 8009cea:	06d2      	lsls	r2, r2, #27
 8009cec:	d4fa      	bmi.n	8009ce4 <USB_DevInit+0xb8>
  USBx_DEVICE->DIEPMSK = 0U;
 8009cee:	2200      	movs	r2, #0
 8009cf0:	613a      	str	r2, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009cf2:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009cf4:	61fa      	str	r2, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cf6:	f1bc 0f00 	cmp.w	ip, #0
 8009cfa:	d019      	beq.n	8009d30 <USB_DevInit+0x104>
 8009cfc:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d00:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d04:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d08:	4616      	mov	r6, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d0a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8009d0e:	e007      	b.n	8009d20 <USB_DevInit+0xf4>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d10:	601e      	str	r6, [r3, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d12:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d14:	611e      	str	r6, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d16:	f8c3 e008 	str.w	lr, [r3, #8]
 8009d1a:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d1c:	4562      	cmp	r2, ip
 8009d1e:	d02a      	beq.n	8009d76 <USB_DevInit+0x14a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d20:	6819      	ldr	r1, [r3, #0]
 8009d22:	2900      	cmp	r1, #0
 8009d24:	daf4      	bge.n	8009d10 <USB_DevInit+0xe4>
      if (i == 0U)
 8009d26:	2a00      	cmp	r2, #0
 8009d28:	d05b      	beq.n	8009de2 <USB_DevInit+0x1b6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d2a:	f8c3 8000 	str.w	r8, [r3]
 8009d2e:	e7f0      	b.n	8009d12 <USB_DevInit+0xe6>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d30:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8009d32:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d34:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 8009d38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d3e:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8009d40:	61a6      	str	r6, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d42:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 8009d44:	b91a      	cbnz	r2, 8009d4e <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d46:	69a3      	ldr	r3, [r4, #24]
 8009d48:	f043 0310 	orr.w	r3, r3, #16
 8009d4c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d4e:	69a1      	ldr	r1, [r4, #24]
 8009d50:	4b26      	ldr	r3, [pc, #152]	; (8009dec <USB_DevInit+0x1c0>)
  if (cfg.Sof_enable != 0U)
 8009d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d54:	430b      	orrs	r3, r1
 8009d56:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8009d58:	b11a      	cbz	r2, 8009d62 <USB_DevInit+0x136>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d5a:	69a3      	ldr	r3, [r4, #24]
 8009d5c:	f043 0308 	orr.w	r3, r3, #8
 8009d60:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8009d62:	2d01      	cmp	r5, #1
 8009d64:	d103      	bne.n	8009d6e <USB_DevInit+0x142>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d66:	69a2      	ldr	r2, [r4, #24]
 8009d68:	4b21      	ldr	r3, [pc, #132]	; (8009df0 <USB_DevInit+0x1c4>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	61a3      	str	r3, [r4, #24]
}
 8009d6e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d72:	b004      	add	sp, #16
 8009d74:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d76:	2100      	movs	r1, #0
 8009d78:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d7c:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d80:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d84:	468c      	mov	ip, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d86:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8009d8a:	e009      	b.n	8009da0 <USB_DevInit+0x174>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d8c:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d90:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d92:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d96:	f8c3 e008 	str.w	lr, [r3, #8]
 8009d9a:	3320      	adds	r3, #32
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d9c:	4291      	cmp	r1, r2
 8009d9e:	d0c7      	beq.n	8009d30 <USB_DevInit+0x104>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009da0:	681e      	ldr	r6, [r3, #0]
 8009da2:	2e00      	cmp	r6, #0
 8009da4:	daf2      	bge.n	8009d8c <USB_DevInit+0x160>
      if (i == 0U)
 8009da6:	b1c9      	cbz	r1, 8009ddc <USB_DevInit+0x1b0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009da8:	f8c3 8000 	str.w	r8, [r3]
 8009dac:	e7f0      	b.n	8009d90 <USB_DevInit+0x164>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009db4:	63a3      	str	r3, [r4, #56]	; 0x38
 8009db6:	e776      	b.n	8009ca6 <USB_DevInit+0x7a>
    if (cfg.speed == USBD_HS_SPEED)
 8009db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dba:	b923      	cbnz	r3, 8009dc6 <USB_DevInit+0x19a>
  USBx_DEVICE->DCFG |= speed;
 8009dbc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009dc0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8009dc4:	e77f      	b.n	8009cc6 <USB_DevInit+0x9a>
 8009dc6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8009dd2:	e778      	b.n	8009cc6 <USB_DevInit+0x9a>
    ret = HAL_ERROR;
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	e781      	b.n	8009cdc <USB_DevInit+0xb0>
    ret = HAL_ERROR;
 8009dd8:	2001      	movs	r0, #1
 8009dda:	e788      	b.n	8009cee <USB_DevInit+0xc2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ddc:	f8c3 9000 	str.w	r9, [r3]
 8009de0:	e7d6      	b.n	8009d90 <USB_DevInit+0x164>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009de2:	f8c3 9000 	str.w	r9, [r3]
 8009de6:	e794      	b.n	8009d12 <USB_DevInit+0xe6>
 8009de8:	00030d40 	.word	0x00030d40
 8009dec:	803c3800 	.word	0x803c3800
 8009df0:	40000004 	.word	0x40000004

08009df4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009df4:	0189      	lsls	r1, r1, #6
 8009df6:	4a07      	ldr	r2, [pc, #28]	; (8009e14 <USB_FlushTxFifo+0x20>)
 8009df8:	f041 0120 	orr.w	r1, r1, #32
 8009dfc:	6101      	str	r1, [r0, #16]
 8009dfe:	e001      	b.n	8009e04 <USB_FlushTxFifo+0x10>
    if (++count > 200000U)
 8009e00:	3a01      	subs	r2, #1
 8009e02:	d005      	beq.n	8009e10 <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e04:	6903      	ldr	r3, [r0, #16]
 8009e06:	f013 0320 	ands.w	r3, r3, #32
 8009e0a:	d1f9      	bne.n	8009e00 <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009e10:	2003      	movs	r0, #3
}
 8009e12:	4770      	bx	lr
 8009e14:	00030d40 	.word	0x00030d40

08009e18 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e18:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e1c:	f013 0006 	ands.w	r0, r3, #6
 8009e20:	d004      	beq.n	8009e2c <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e22:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8009e26:	bf14      	ite	ne
 8009e28:	2002      	movne	r0, #2
 8009e2a:	200f      	moveq	r0, #15
}
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop

08009e30 <USB_ActivateEndpoint>:
{
 8009e30:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8009e32:	780a      	ldrb	r2, [r1, #0]
 8009e34:	2301      	movs	r3, #1
  if (ep->is_in == 1U)
 8009e36:	784d      	ldrb	r5, [r1, #1]
 8009e38:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8009e3c:	f002 060f 	and.w	r6, r2, #15
 8009e40:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8009e44:	2d01      	cmp	r5, #1
 8009e46:	fa03 f306 	lsl.w	r3, r3, r6
 8009e4a:	d017      	beq.n	8009e7c <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e4c:	69e2      	ldr	r2, [r4, #28]
 8009e4e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8009e52:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e54:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009e58:	041b      	lsls	r3, r3, #16
 8009e5a:	d40c      	bmi.n	8009e76 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e5c:	688a      	ldr	r2, [r1, #8]
 8009e5e:	4b14      	ldr	r3, [pc, #80]	; (8009eb0 <USB_ActivateEndpoint+0x80>)
 8009e60:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e64:	78cc      	ldrb	r4, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e66:	f8d0 1b00 	ldr.w	r1, [r0, #2816]	; 0xb00
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009e70:	430b      	orrs	r3, r1
 8009e72:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8009e76:	2000      	movs	r0, #0
 8009e78:	bc70      	pop	{r4, r5, r6}
 8009e7a:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e7c:	69e5      	ldr	r5, [r4, #28]
 8009e7e:	432b      	orrs	r3, r5
 8009e80:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009e86:	041c      	lsls	r4, r3, #16
 8009e88:	d4f5      	bmi.n	8009e76 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e8a:	688c      	ldr	r4, [r1, #8]
 8009e8c:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <USB_ActivateEndpoint+0x80>)
 8009e8e:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e92:	78cd      	ldrb	r5, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e94:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8009e98:	4323      	orrs	r3, r4
 8009e9a:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
 8009e9e:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8009ea2:	430a      	orrs	r2, r1
}
 8009ea4:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ea6:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
}
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	10008000 	.word	0x10008000

08009eb4 <USB_DeactivateEndpoint>:
{
 8009eb4:	b410      	push	{r4}
  uint32_t epnum = (uint32_t)ep->num;
 8009eb6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8009eb8:	7849      	ldrb	r1, [r1, #1]
 8009eba:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8009ebe:	2901      	cmp	r1, #1
 8009ec0:	d02a      	beq.n	8009f18 <USB_DeactivateEndpoint+0x64>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ec2:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	db19      	blt.n	8009efe <USB_DeactivateEndpoint+0x4a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009eca:	f003 010f 	and.w	r1, r3, #15
 8009ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ed2:	4c26      	ldr	r4, [pc, #152]	; (8009f6c <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ed4:	408b      	lsls	r3, r1
 8009ed6:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8009eda:	43db      	mvns	r3, r3
 8009edc:	4019      	ands	r1, r3
 8009ede:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ee2:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8009ee6:	400b      	ands	r3, r1
 8009ee8:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8009eec:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009eee:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8009ef2:	401c      	ands	r4, r3
 8009ef4:	f8c2 4b00 	str.w	r4, [r2, #2816]	; 0xb00
}
 8009ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009efc:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009efe:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8009f02:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8009f06:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f0a:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
 8009f0e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8009f12:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
 8009f16:	e7d8      	b.n	8009eca <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f18:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	da0b      	bge.n	8009f38 <USB_DeactivateEndpoint+0x84>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f20:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8009f24:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8009f28:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f2c:	f8d2 1900 	ldr.w	r1, [r2, #2304]	; 0x900
 8009f30:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8009f34:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f38:	f003 040f 	and.w	r4, r3, #15
 8009f3c:	2301      	movs	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f3e:	490c      	ldr	r1, [pc, #48]	; (8009f70 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f40:	40a3      	lsls	r3, r4
 8009f42:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8009f46:	43db      	mvns	r3, r3
 8009f48:	401c      	ands	r4, r3
 8009f4a:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f4e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8009f52:	4023      	ands	r3, r4
}
 8009f54:	f85d 4b04 	ldr.w	r4, [sp], #4
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f58:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8009f5c:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f5e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8009f62:	4019      	ands	r1, r3
 8009f64:	f8c2 1900 	str.w	r1, [r2, #2304]	; 0x900
}
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	eff37800 	.word	0xeff37800
 8009f70:	ec337800 	.word	0xec337800

08009f74 <USB_EPStartXfer>:
{
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (ep->is_in == 1U)
 8009f78:	f891 c001 	ldrb.w	ip, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8009f7c:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1U)
 8009f7e:	f1bc 0f01 	cmp.w	ip, #1
 8009f82:	694b      	ldr	r3, [r1, #20]
 8009f84:	eb00 1547 	add.w	r5, r0, r7, lsl #5
 8009f88:	78ce      	ldrb	r6, [r1, #3]
 8009f8a:	d055      	beq.n	800a038 <USB_EPStartXfer+0xc4>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f8c:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8009f90:	f8df e214 	ldr.w	lr, [pc, #532]	; 800a1a8 <USB_EPStartXfer+0x234>
 8009f94:	f8d7 c010 	ldr.w	ip, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f98:	4c81      	ldr	r4, [pc, #516]	; (800a1a0 <USB_EPStartXfer+0x22c>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f9a:	ea0c 0e0e 	and.w	lr, ip, lr
 8009f9e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009fa2:	f8c7 e010 	str.w	lr, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009fa6:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8009faa:	ea0e 0404 	and.w	r4, lr, r4
 8009fae:	613c      	str	r4, [r7, #16]
    if (ep->xfer_len == 0U)
 8009fb0:	b38b      	cbz	r3, 800a016 <USB_EPStartXfer+0xa2>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fb2:	eb03 040c 	add.w	r4, r3, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009fb6:	4b7b      	ldr	r3, [pc, #492]	; (800a1a4 <USB_EPStartXfer+0x230>)
 8009fb8:	f8d7 8010 	ldr.w	r8, [r7, #16]
    if (dma == 1U)
 8009fbc:	2a01      	cmp	r2, #1
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009fbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fc2:	fbb4 f4fc 	udiv	r4, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009fc6:	ea03 4ec4 	and.w	lr, r3, r4, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009fca:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009fcc:	ea4e 0e08 	orr.w	lr, lr, r8
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009fd0:	fb0c f304 	mul.w	r3, ip, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009fd4:	f8c7 e010 	str.w	lr, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009fd8:	693c      	ldr	r4, [r7, #16]
 8009fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fde:	ea43 0304 	orr.w	r3, r3, r4
 8009fe2:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 8009fe4:	d023      	beq.n	800a02e <USB_EPStartXfer+0xba>
    if (ep->type == EP_TYPE_ISOC)
 8009fe6:	2e01      	cmp	r6, #1
 8009fe8:	d10c      	bne.n	800a004 <USB_EPStartXfer+0x90>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fea:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8009fee:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ff2:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8009ff6:	bf0c      	ite	eq
 8009ff8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009ffc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800a000:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a004:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800a008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a00c:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
}
 800a010:	2000      	movs	r0, #0
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a016:	693c      	ldr	r4, [r7, #16]
 800a018:	f3cc 0312 	ubfx	r3, ip, #0, #19
    if (dma == 1U)
 800a01c:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a01e:	ea43 0304 	orr.w	r3, r3, r4
 800a022:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a02a:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800a02c:	d1db      	bne.n	8009fe6 <USB_EPStartXfer+0x72>
      if ((uint32_t)ep->xfer_buff != 0U)
 800a02e:	68cb      	ldr	r3, [r1, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0d8      	beq.n	8009fe6 <USB_EPStartXfer+0x72>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	e7d6      	b.n	8009fe6 <USB_EPStartXfer+0x72>
 800a038:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800a03c:	b3f3      	cbz	r3, 800a0bc <USB_EPStartXfer+0x148>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a03e:	f8d1 9008 	ldr.w	r9, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a042:	f3c3 0e12 	ubfx	lr, r3, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a046:	f8d4 a010 	ldr.w	sl, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800a04a:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a04c:	eb09 0803 	add.w	r8, r9, r3
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a050:	f8df b154 	ldr.w	fp, [pc, #340]	; 800a1a8 <USB_EPStartXfer+0x234>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a054:	f108 38ff 	add.w	r8, r8, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a058:	ea0a 0b0b 	and.w	fp, sl, fp
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a05c:	f8df a140 	ldr.w	sl, [pc, #320]	; 800a1a0 <USB_EPStartXfer+0x22c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a060:	f8c4 b010 	str.w	fp, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a064:	f8d4 b010 	ldr.w	fp, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a068:	fbb8 f9f9 	udiv	r9, r8, r9
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a06c:	ea0b 0a0a 	and.w	sl, fp, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a070:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a1a4 <USB_EPStartXfer+0x230>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a074:	f8c4 a010 	str.w	sl, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a078:	ea08 48c9 	and.w	r8, r8, r9, lsl #19
 800a07c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a080:	ea48 0809 	orr.w	r8, r8, r9
 800a084:	f8c4 8010 	str.w	r8, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a088:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800a08c:	ea4e 0e08 	orr.w	lr, lr, r8
 800a090:	f8c4 e010 	str.w	lr, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800a094:	d054      	beq.n	800a140 <USB_EPStartXfer+0x1cc>
    if (dma == 1U)
 800a096:	2a01      	cmp	r2, #1
 800a098:	d060      	beq.n	800a15c <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a09a:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a09e:	f007 070f 	and.w	r7, r7, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0a6:	fa0c fc07 	lsl.w	ip, ip, r7
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0aa:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0ae:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 800a0b2:	ea4c 0707 	orr.w	r7, ip, r7
 800a0b6:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
  return HAL_OK;
 800a0ba:	e7a9      	b.n	800a010 <USB_EPStartXfer+0x9c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0bc:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (dma == 1U)
 800a0c0:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0c2:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800a1a0 <USB_EPStartXfer+0x22c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0c6:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800a1a8 <USB_EPStartXfer+0x234>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0ca:	ea08 0e0e 	and.w	lr, r8, lr
 800a0ce:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0d2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800a0d6:	f44e 2e00 	orr.w	lr, lr, #524288	; 0x80000
 800a0da:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0de:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800a0e2:	ea0e 0c0c 	and.w	ip, lr, ip
 800a0e6:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 800a0ea:	d037      	beq.n	800a15c <USB_EPStartXfer+0x1e8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0ec:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a0f0:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0f2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800a0f6:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800a0fa:	d189      	bne.n	800a010 <USB_EPStartXfer+0x9c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0fc:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800a100:	f414 7f80 	tst.w	r4, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a104:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 800a108:	bf0c      	ite	eq
 800a10a:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a10e:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 800a112:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
  if (dma == 0U)
 800a116:	2a00      	cmp	r2, #0
 800a118:	f47f af7a 	bne.w	800a010 <USB_EPStartXfer+0x9c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800a120:	089a      	lsrs	r2, r3, #2
 800a122:	f43f af75 	beq.w	800a010 <USB_EPStartXfer+0x9c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a126:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a128:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 800a12c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a130:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800a134:	f853 1b04 	ldr.w	r1, [r3], #4
    for (i = 0U; i < count32b; i++)
 800a138:	4293      	cmp	r3, r2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a13a:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800a13c:	d1fa      	bne.n	800a134 <USB_EPStartXfer+0x1c0>
 800a13e:	e767      	b.n	800a010 <USB_EPStartXfer+0x9c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a140:	f8d4 c010 	ldr.w	ip, [r4, #16]
    if (dma == 1U)
 800a144:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a146:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 800a14a:	f8c4 c010 	str.w	ip, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a14e:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a152:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 800a156:	f8c4 c010 	str.w	ip, [r4, #16]
    if (dma == 1U)
 800a15a:	d11a      	bne.n	800a192 <USB_EPStartXfer+0x21e>
      if ((uint32_t)ep->dma_addr != 0U)
 800a15c:	690b      	ldr	r3, [r1, #16]
 800a15e:	b103      	cbz	r3, 800a162 <USB_EPStartXfer+0x1ee>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a160:	6163      	str	r3, [r4, #20]
      if (ep->type == EP_TYPE_ISOC)
 800a162:	2e01      	cmp	r6, #1
 800a164:	d10c      	bne.n	800a180 <USB_EPStartXfer+0x20c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a166:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800a16a:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a16e:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 800a172:	bf0c      	ite	eq
 800a174:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a178:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800a17c:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a180:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
}
 800a184:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a186:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a18a:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
}
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a192:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 800a196:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800a19a:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
 800a19e:	e7ad      	b.n	800a0fc <USB_EPStartXfer+0x188>
 800a1a0:	e007ffff 	.word	0xe007ffff
 800a1a4:	1ff80000 	.word	0x1ff80000
 800a1a8:	fff80000 	.word	0xfff80000

0800a1ac <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800a1ac:	784b      	ldrb	r3, [r1, #1]
{
 800a1ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800a1b0:	2b01      	cmp	r3, #1
  uint32_t epnum = (uint32_t)ep->num;
 800a1b2:	780d      	ldrb	r5, [r1, #0]
 800a1b4:	694f      	ldr	r7, [r1, #20]
 800a1b6:	eb00 1445 	add.w	r4, r0, r5, lsl #5
  if (ep->is_in == 1U)
 800a1ba:	d025      	beq.n	800a208 <USB_EP0StartXfer+0x5c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1bc:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800a1c0:	4e3d      	ldr	r6, [pc, #244]	; (800a2b8 <USB_EP0StartXfer+0x10c>)
 800a1c2:	6918      	ldr	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1c4:	4d3d      	ldr	r5, [pc, #244]	; (800a2bc <USB_EP0StartXfer+0x110>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1c6:	4006      	ands	r6, r0
 800a1c8:	6888      	ldr	r0, [r1, #8]
 800a1ca:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a1cc:	691e      	ldr	r6, [r3, #16]
 800a1ce:	4035      	ands	r5, r6
 800a1d0:	611d      	str	r5, [r3, #16]
    if (ep->xfer_len > 0U)
 800a1d2:	b107      	cbz	r7, 800a1d6 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 800a1d4:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1d6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a1d8:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 800a1dc:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1de:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a1e2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a1e4:	691d      	ldr	r5, [r3, #16]
 800a1e6:	ea40 0005 	orr.w	r0, r0, r5
 800a1ea:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800a1ec:	d007      	beq.n	800a1fe <USB_EP0StartXfer+0x52>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1ee:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800a1f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1f6:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1fe:	68ca      	ldr	r2, [r1, #12]
 800a200:	2a00      	cmp	r2, #0
 800a202:	d0f4      	beq.n	800a1ee <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a204:	615a      	str	r2, [r3, #20]
 800a206:	e7f2      	b.n	800a1ee <USB_EP0StartXfer+0x42>
 800a208:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 800a20c:	b3bf      	cbz	r7, 800a27e <USB_EP0StartXfer+0xd2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a20e:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800a212:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800a2b8 <USB_EP0StartXfer+0x10c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a216:	4e29      	ldr	r6, [pc, #164]	; (800a2bc <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a218:	ea0e 0c0c 	and.w	ip, lr, ip
      if (ep->xfer_len > ep->maxpacket)
 800a21c:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a220:	f8c3 c010 	str.w	ip, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a224:	45be      	cmp	lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a226:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800a22a:	ea0c 0606 	and.w	r6, ip, r6
 800a22e:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a230:	d202      	bcs.n	800a238 <USB_EP0StartXfer+0x8c>
        ep->xfer_len = ep->maxpacket;
 800a232:	4677      	mov	r7, lr
 800a234:	f8c1 e014 	str.w	lr, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a238:	f8d3 c010 	ldr.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a23c:	f3c7 0612 	ubfx	r6, r7, #0, #19
    if (dma == 1U)
 800a240:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a242:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 800a246:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a24a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800a24e:	ea46 060c 	orr.w	r6, r6, ip
 800a252:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 800a254:	d02b      	beq.n	800a2ae <USB_EP0StartXfer+0x102>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a256:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800a25a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a25e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 800a262:	2f00      	cmp	r7, #0
 800a264:	d0c9      	beq.n	800a1fa <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a266:	2301      	movs	r3, #1
 800a268:	f005 050f 	and.w	r5, r5, #15
 800a26c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800a270:	fa03 f505 	lsl.w	r5, r3, r5
 800a274:	4315      	orrs	r5, r2
 800a276:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
}
 800a27a:	2000      	movs	r0, #0
 800a27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a27e:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 800a280:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a282:	4d0e      	ldr	r5, [pc, #56]	; (800a2bc <USB_EP0StartXfer+0x110>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a284:	480c      	ldr	r0, [pc, #48]	; (800a2b8 <USB_EP0StartXfer+0x10c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a286:	ea05 0506 	and.w	r5, r5, r6
 800a28a:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a28c:	691d      	ldr	r5, [r3, #16]
 800a28e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800a292:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a294:	691d      	ldr	r5, [r3, #16]
 800a296:	ea00 0005 	and.w	r0, r0, r5
 800a29a:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 800a29c:	d007      	beq.n	800a2ae <USB_EP0StartXfer+0x102>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a29e:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
}
 800a2a2:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2a8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800a2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 800a2ae:	690a      	ldr	r2, [r1, #16]
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d0f4      	beq.n	800a29e <USB_EP0StartXfer+0xf2>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2b4:	615a      	str	r2, [r3, #20]
 800a2b6:	e7f2      	b.n	800a29e <USB_EP0StartXfer+0xf2>
 800a2b8:	fff80000 	.word	0xfff80000
 800a2bc:	e007ffff 	.word	0xe007ffff

0800a2c0 <USB_WritePacket>:
{
 800a2c0:	b410      	push	{r4}
 800a2c2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 800a2c6:	b96c      	cbnz	r4, 800a2e4 <USB_WritePacket+0x24>
    count32b = ((uint32_t)len + 3U) / 4U;
 800a2c8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 800a2ca:	089b      	lsrs	r3, r3, #2
 800a2cc:	d00a      	beq.n	800a2e4 <USB_WritePacket+0x24>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2ce:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800a2d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a2d6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800a2da:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 800a2de:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a2e0:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800a2e2:	d1fa      	bne.n	800a2da <USB_WritePacket+0x1a>
}
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a2ec:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 800a2ee:	0892      	lsrs	r2, r2, #2
 800a2f0:	d00d      	beq.n	800a30e <USB_ReadPacket+0x22>
 800a2f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
{
 800a2f6:	b410      	push	{r4}
 800a2f8:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
  uint32_t *pDest = (uint32_t *)dest;
 800a2fc:	4608      	mov	r0, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0U; i < count32b; i++)
 800a304:	4282      	cmp	r2, r0
 800a306:	d1fa      	bne.n	800a2fe <USB_ReadPacket+0x12>
}
 800a308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a30c:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 800a30e:	4608      	mov	r0, r1
}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop

0800a314 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800a314:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a316:	784a      	ldrb	r2, [r1, #1]
 800a318:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a31c:	3300      	adds	r3, #0
 800a31e:	bf18      	it	ne
 800a320:	2301      	movne	r3, #1
 800a322:	2a01      	cmp	r2, #1
 800a324:	d012      	beq.n	800a34c <USB_EPSetStall+0x38>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a326:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	db06      	blt.n	800a33c <USB_EPSetStall+0x28>
 800a32e:	b12b      	cbz	r3, 800a33c <USB_EPSetStall+0x28>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a330:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a338:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a33c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a344:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a348:	2000      	movs	r0, #0
 800a34a:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a34c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800a350:	2a00      	cmp	r2, #0
 800a352:	db06      	blt.n	800a362 <USB_EPSetStall+0x4e>
 800a354:	b12b      	cbz	r3, 800a362 <USB_EPSetStall+0x4e>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a356:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a35a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a35e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a362:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a36a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800a36e:	2000      	movs	r0, #0
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop

0800a374 <USB_EPClearStall>:
{
 800a374:	78cb      	ldrb	r3, [r1, #3]
 800a376:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 800a378:	7849      	ldrb	r1, [r1, #1]
 800a37a:	3b02      	subs	r3, #2
 800a37c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800a380:	2901      	cmp	r1, #1
 800a382:	b2db      	uxtb	r3, r3
 800a384:	d011      	beq.n	800a3aa <USB_EPClearStall+0x36>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a386:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a38a:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a38c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a390:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a394:	d901      	bls.n	800a39a <USB_EPClearStall+0x26>
}
 800a396:	2000      	movs	r0, #0
 800a398:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a39a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a39e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3a2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3aa:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3ae:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3b0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a3b4:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3b8:	d8ed      	bhi.n	800a396 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a3be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop

0800a3cc <USB_SetDevAddress>:
{
 800a3cc:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3ce:	0109      	lsls	r1, r1, #4
}
 800a3d0:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a3d2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3d6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a3da:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 800a3de:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a3e2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 800a3e6:	4311      	orrs	r1, r2
 800a3e8:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop

0800a3f0 <USB_DevConnect>:
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3f0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800a3f4:	2003      	movs	r0, #3
{
 800a3f6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3f8:	6853      	ldr	r3, [r2, #4]
 800a3fa:	f023 0302 	bic.w	r3, r3, #2
 800a3fe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a400:	f7f9 f818 	bl	8003434 <HAL_Delay>
}
 800a404:	2000      	movs	r0, #0
 800a406:	bd08      	pop	{r3, pc}

0800a408 <USB_DevDisconnect>:
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a408:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  HAL_Delay(3U);
 800a40c:	2003      	movs	r0, #3
{
 800a40e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a410:	6853      	ldr	r3, [r2, #4]
 800a412:	f043 0302 	orr.w	r3, r3, #2
 800a416:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a418:	f7f9 f80c 	bl	8003434 <HAL_Delay>
}
 800a41c:	2000      	movs	r0, #0
 800a41e:	bd08      	pop	{r3, pc}

0800a420 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800a420:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800a422:	6980      	ldr	r0, [r0, #24]
}
 800a424:	4010      	ands	r0, r2
 800a426:	4770      	bx	lr

0800a428 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a428:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a42c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a430:	69c0      	ldr	r0, [r0, #28]
 800a432:	4018      	ands	r0, r3
}
 800a434:	0c00      	lsrs	r0, r0, #16
 800a436:	4770      	bx	lr

0800a438 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800a438:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800a43c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a440:	69c0      	ldr	r0, [r0, #28]
 800a442:	4018      	ands	r0, r3
}
 800a444:	b280      	uxth	r0, r0
 800a446:	4770      	bx	lr

0800a448 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a448:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a44c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a450:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a454:	6940      	ldr	r0, [r0, #20]
}
 800a456:	4010      	ands	r0, r2
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop

0800a45c <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 800a45c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a460:	eb00 1041 	add.w	r0, r0, r1, lsl #5
{
 800a464:	b410      	push	{r4}
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a466:	f001 040f 	and.w	r4, r1, #15
  msk = USBx_DEVICE->DIEPMSK;
 800a46a:	6911      	ldr	r1, [r2, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a46c:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a46e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a472:	40e3      	lsrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a474:	6880      	ldr	r0, [r0, #8]
}
 800a476:	f85d 4b04 	ldr.w	r4, [sp], #4
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a47a:	01db      	lsls	r3, r3, #7
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	430b      	orrs	r3, r1
}
 800a480:	4018      	ands	r0, r3
 800a482:	4770      	bx	lr

0800a484 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800a484:	6940      	ldr	r0, [r0, #20]
}
 800a486:	f000 0001 	and.w	r0, r0, #1
 800a48a:	4770      	bx	lr

0800a48c <USB_ActivateSetup>:
{
 800a48c:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <USB_ActivateSetup+0x28>)
}
 800a490:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a492:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 800a496:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a498:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800a49c:	4022      	ands	r2, r4
}
 800a49e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4a2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800a4aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4ae:	604b      	str	r3, [r1, #4]
}
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	fffff800 	.word	0xfffff800

0800a4b8 <USB_EP0_OutStart>:
{
 800a4b8:	b430      	push	{r4, r5}
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a4ba:	4c12      	ldr	r4, [pc, #72]	; (800a504 <USB_EP0_OutStart+0x4c>)
 800a4bc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4c0:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a4c2:	42a5      	cmp	r5, r4
 800a4c4:	d903      	bls.n	800a4ce <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4c6:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	db16      	blt.n	800a4fc <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a4ce:	2400      	movs	r4, #0
  if (dma == 1U)
 800a4d0:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a4d2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4d4:	691c      	ldr	r4, [r3, #16]
 800a4d6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a4da:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a4dc:	691c      	ldr	r4, [r3, #16]
 800a4de:	f044 0418 	orr.w	r4, r4, #24
 800a4e2:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a4e4:	691c      	ldr	r4, [r3, #16]
 800a4e6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800a4ea:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 800a4ec:	d106      	bne.n	800a4fc <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a4ee:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a4f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a4f4:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a4f8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	bc30      	pop	{r4, r5}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	4f54300a 	.word	0x4f54300a

0800a508 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a508:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a50c:	b183      	cbz	r3, 800a530 <USBD_CDC_EP0_RxReady+0x28>
{
 800a50e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a510:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a514:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a518:	28ff      	cmp	r0, #255	; 0xff
 800a51a:	d007      	beq.n	800a52c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	4621      	mov	r1, r4
 800a520:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a524:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a526:	23ff      	movs	r3, #255	; 0xff
 800a528:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800a52c:	2000      	movs	r0, #0
 800a52e:	bd10      	pop	{r4, pc}
 800a530:	2000      	movs	r0, #0
 800a532:	4770      	bx	lr

0800a534 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a534:	2343      	movs	r3, #67	; 0x43
 800a536:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800a538:	4800      	ldr	r0, [pc, #0]	; (800a53c <USBD_CDC_GetFSCfgDesc+0x8>)
 800a53a:	4770      	bx	lr
 800a53c:	2400023c 	.word	0x2400023c

0800a540 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a540:	2343      	movs	r3, #67	; 0x43
 800a542:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800a544:	4800      	ldr	r0, [pc, #0]	; (800a548 <USBD_CDC_GetHSCfgDesc+0x8>)
 800a546:	4770      	bx	lr
 800a548:	24000280 	.word	0x24000280

0800a54c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a54c:	2343      	movs	r3, #67	; 0x43
 800a54e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a550:	4800      	ldr	r0, [pc, #0]	; (800a554 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a552:	4770      	bx	lr
 800a554:	240002d0 	.word	0x240002d0

0800a558 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a558:	230a      	movs	r3, #10
 800a55a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800a55c:	4800      	ldr	r0, [pc, #0]	; (800a560 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a55e:	4770      	bx	lr
 800a560:	240002c4 	.word	0x240002c4

0800a564 <USBD_CDC_DataOut>:
{
 800a564:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a566:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800a56a:	b174      	cbz	r4, 800a58a <USBD_CDC_DataOut+0x26>
 800a56c:	4605      	mov	r5, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a56e:	f001 f8b1 	bl	800b6d4 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a572:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800a576:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a57a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800a584:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a586:	2000      	movs	r0, #0
}
 800a588:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a58a:	2003      	movs	r0, #3
}
 800a58c:	bd38      	pop	{r3, r4, r5, pc}
 800a58e:	bf00      	nop

0800a590 <USBD_CDC_DataIn>:
{
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 800a592:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 800a596:	b1a7      	cbz	r7, 800a5c2 <USBD_CDC_DataIn+0x32>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a598:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a59c:	4603      	mov	r3, r0
 800a59e:	460a      	mov	r2, r1
 800a5a0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a5a4:	69ae      	ldr	r6, [r5, #24]
 800a5a6:	b976      	cbnz	r6, 800a5c6 <USBD_CDC_DataIn+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
    hcdc->TxState = 0U;
 800a5ac:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5ae:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800a5b2:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800a5b6:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 800a5b8:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a5bc:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a5be:	4620      	mov	r0, r4
}
 800a5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800a5c2:	2003      	movs	r0, #3
}
 800a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a5c6:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800a5ca:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 800a5ce:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800a5d2:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800a5d6:	fbb6 f4fc 	udiv	r4, r6, ip
 800a5da:	fb0c 6414 	mls	r4, ip, r4, r6
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	d1e2      	bne.n	800a5a8 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 800a5e2:	61ac      	str	r4, [r5, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5e4:	4623      	mov	r3, r4
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	f001 f858 	bl	800b69c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a5ec:	4620      	mov	r0, r4
}
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5f0 <USBD_CDC_Setup>:
{
 800a5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f4:	780b      	ldrb	r3, [r1, #0]
{
 800a5f6:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 800a5f8:	2700      	movs	r7, #0
{
 800a5fa:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5fc:	f013 0260 	ands.w	r2, r3, #96	; 0x60
{
 800a600:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a602:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a606:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800a60a:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a60e:	d01c      	beq.n	800a64a <USBD_CDC_Setup+0x5a>
 800a610:	2a20      	cmp	r2, #32
 800a612:	d112      	bne.n	800a63a <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 800a614:	88cd      	ldrh	r5, [r1, #6]
 800a616:	f891 c001 	ldrb.w	ip, [r1, #1]
 800a61a:	2d00      	cmp	r5, #0
 800a61c:	d147      	bne.n	800a6ae <USBD_CDC_Setup+0xbe>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a61e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a622:	462a      	mov	r2, r5
 800a624:	4660      	mov	r0, ip
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800a62a:	4628      	mov	r0, r5
}
 800a62c:	b002      	add	sp, #8
 800a62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a632:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a636:	2b03      	cmp	r3, #3
 800a638:	d049      	beq.n	800a6ce <USBD_CDC_Setup+0xde>
      USBD_CtlError(pdev, req);
 800a63a:	4630      	mov	r0, r6
 800a63c:	4621      	mov	r1, r4
 800a63e:	f000 fd15 	bl	800b06c <USBD_CtlError>
      ret = USBD_FAIL;
 800a642:	2003      	movs	r0, #3
}
 800a644:	b002      	add	sp, #8
 800a646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800a64a:	784b      	ldrb	r3, [r1, #1]
 800a64c:	2b0b      	cmp	r3, #11
 800a64e:	d8f4      	bhi.n	800a63a <USBD_CDC_Setup+0x4a>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <USBD_CDC_Setup+0x68>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a633 	.word	0x0800a633
 800a65c:	0800a691 	.word	0x0800a691
 800a660:	0800a63b 	.word	0x0800a63b
 800a664:	0800a63b 	.word	0x0800a63b
 800a668:	0800a63b 	.word	0x0800a63b
 800a66c:	0800a63b 	.word	0x0800a63b
 800a670:	0800a63b 	.word	0x0800a63b
 800a674:	0800a63b 	.word	0x0800a63b
 800a678:	0800a63b 	.word	0x0800a63b
 800a67c:	0800a63b 	.word	0x0800a63b
 800a680:	0800a699 	.word	0x0800a699
 800a684:	0800a689 	.word	0x0800a689
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a688:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d1d4      	bne.n	800a63a <USBD_CDC_Setup+0x4a>
  USBD_StatusTypeDef ret = USBD_OK;
 800a690:	2000      	movs	r0, #0
}
 800a692:	b002      	add	sp, #8
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a698:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a69c:	2b03      	cmp	r3, #3
 800a69e:	d1cc      	bne.n	800a63a <USBD_CDC_Setup+0x4a>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f10d 0105 	add.w	r1, sp, #5
 800a6a6:	f000 fd13 	bl	800b0d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	e7ca      	b.n	800a644 <USBD_CDC_Setup+0x54>
      if ((req->bmRequest & 0x80U) != 0U)
 800a6ae:	061b      	lsls	r3, r3, #24
 800a6b0:	d514      	bpl.n	800a6dc <USBD_CDC_Setup+0xec>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6b2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a6b6:	462a      	mov	r2, r5
 800a6b8:	4660      	mov	r0, ip
 800a6ba:	4641      	mov	r1, r8
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6c0:	88e2      	ldrh	r2, [r4, #6]
 800a6c2:	4641      	mov	r1, r8
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 fd03 	bl	800b0d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	e7ba      	b.n	800a644 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f10d 0106 	add.w	r1, sp, #6
 800a6d4:	f000 fcfc 	bl	800b0d0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d8:	2000      	movs	r0, #0
 800a6da:	e7b3      	b.n	800a644 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800a6dc:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6e0:	462a      	mov	r2, r5
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a6e2:	f888 5201 	strb.w	r5, [r8, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	f000 fd08 	bl	800b0fc <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	e7a9      	b.n	800a644 <USBD_CDC_Setup+0x54>

0800a6f0 <USBD_CDC_DeInit>:
{
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a6f4:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a6f6:	2181      	movs	r1, #129	; 0x81
 800a6f8:	f000 ff84 	bl	800b604 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a6fc:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a6fe:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a700:	4620      	mov	r0, r4
 800a702:	f000 ff7f 	bl	800b604 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a706:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a70a:	4620      	mov	r0, r4
 800a70c:	2182      	movs	r1, #130	; 0x82
 800a70e:	f000 ff79 	bl	800b604 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800a712:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a716:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800a718:	b14b      	cbz	r3, 800a72e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a71a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a722:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a726:	f002 f917 	bl	800c958 <free>
    pdev->pClassData = NULL;
 800a72a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a72e:	2000      	movs	r0, #0
 800a730:	bd38      	pop	{r3, r4, r5, pc}
 800a732:	bf00      	nop

0800a734 <USBD_CDC_Init>:
{
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a73a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a73e:	f002 f903 	bl	800c948 <malloc>
  if (hcdc == NULL)
 800a742:	4605      	mov	r5, r0
 800a744:	2800      	cmp	r0, #0
 800a746:	d04a      	beq.n	800a7de <USBD_CDC_Init+0xaa>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a748:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a74a:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 800a74c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a750:	b393      	cbz	r3, 800a7b8 <USBD_CDC_Init+0x84>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	2181      	movs	r1, #129	; 0x81
 800a756:	2202      	movs	r2, #2
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 ff41 	bl	800b5e0 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a75e:	4631      	mov	r1, r6
 800a760:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a762:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a764:	2202      	movs	r2, #2
 800a766:	4620      	mov	r0, r4
 800a768:	f000 ff3a 	bl	800b5e0 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a76c:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a76e:	2203      	movs	r2, #3
 800a770:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a772:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a776:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a778:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a77c:	2308      	movs	r3, #8
 800a77e:	f000 ff2f 	bl	800b5e0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a782:	2701      	movs	r7, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a784:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 800a788:	2600      	movs	r6, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a78a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a792:	f894 8010 	ldrb.w	r8, [r4, #16]
  hcdc->TxState = 0U;
 800a796:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a79a:	4639      	mov	r1, r7
  hcdc->RxState = 0U;
 800a79c:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a6:	f1b8 0f00 	cmp.w	r8, #0
 800a7aa:	d011      	beq.n	800a7d0 <USBD_CDC_Init+0x9c>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	f000 ff83 	bl	800b6b8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a7b2:	4630      	mov	r0, r6
}
 800a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7bc:	2181      	movs	r1, #129	; 0x81
 800a7be:	2202      	movs	r2, #2
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 ff0d 	bl	800b5e0 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7c6:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7ce:	e7c9      	b.n	800a764 <USBD_CDC_Init+0x30>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7d4:	f000 ff70 	bl	800b6b8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a7d8:	4640      	mov	r0, r8
}
 800a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->pClassData = NULL;
 800a7de:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a7e2:	2002      	movs	r0, #2
}
 800a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7e8 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800a7e8:	b119      	cbz	r1, 800a7f2 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800a7ea:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a7f2:	2003      	movs	r0, #3
}
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop

0800a7f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800a7fc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800a7fe:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a802:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800a806:	4770      	bx	lr

0800a808 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800a808:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800a80c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800a80e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800a812:	4770      	bx	lr

0800a814 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a814:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800a818:	b19a      	cbz	r2, 800a842 <USBD_CDC_TransmitPacket+0x2e>
{
 800a81a:	b538      	push	{r3, r4, r5, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800a81c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800a820:	b10c      	cbz	r4, 800a826 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a822:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800a824:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a826:	f8d2 5210 	ldr.w	r5, [r2, #528]	; 0x210
    hcdc->TxState = 1U;
 800a82a:	2301      	movs	r3, #1
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a82c:	2181      	movs	r1, #129	; 0x81
    hcdc->TxState = 1U;
 800a82e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a832:	462b      	mov	r3, r5
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a834:	62c5      	str	r5, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a836:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800a83a:	f000 ff2f 	bl	800b69c <USBD_LL_Transmit>
    ret = USBD_OK;
 800a83e:	4620      	mov	r0, r4
}
 800a840:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a842:	2003      	movs	r0, #3
}
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop

0800a848 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a848:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a84c:	b18a      	cbz	r2, 800a872 <USBD_CDC_ReceivePacket+0x2a>
 800a84e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
{
 800a852:	b510      	push	{r4, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a854:	7c04      	ldrb	r4, [r0, #16]
 800a856:	b12c      	cbz	r4, 800a864 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a858:	2340      	movs	r3, #64	; 0x40
 800a85a:	2101      	movs	r1, #1
 800a85c:	f000 ff2c 	bl	800b6b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a860:	2000      	movs	r0, #0
}
 800a862:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a864:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a868:	2101      	movs	r1, #1
 800a86a:	f000 ff25 	bl	800b6b8 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a86e:	4620      	mov	r0, r4
}
 800a870:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800a872:	2003      	movs	r0, #3
}
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop

0800a878 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a878:	4603      	mov	r3, r0
 800a87a:	b1a8      	cbz	r0, 800a8a8 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a87c:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800a880:	b110      	cbz	r0, 800a888 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800a882:	2000      	movs	r0, #0
 800a884:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a888:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 800a88c:	b110      	cbz	r0, 800a894 <USBD_Init+0x1c>
  {
    pdev->pConfDesc = NULL;
 800a88e:	2000      	movs	r0, #0
 800a890:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a894:	b109      	cbz	r1, 800a89a <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 800a896:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a89a:	2101      	movs	r1, #1
  pdev->id = id;
 800a89c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a89e:	4618      	mov	r0, r3
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8a0:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  ret = USBD_LL_Init(pdev);
 800a8a4:	f000 be5a 	b.w	800b55c <USBD_LL_Init>

  return ret;
}
 800a8a8:	2003      	movs	r0, #3
 800a8aa:	4770      	bx	lr

0800a8ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a8ac:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 800a8ae:	2400      	movs	r4, #0
{
 800a8b0:	b083      	sub	sp, #12
  uint16_t len = 0U;
 800a8b2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 800a8b6:	b159      	cbz	r1, 800a8d0 <USBD_RegisterClass+0x24>
 800a8b8:	4605      	mov	r5, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a8ba:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a8be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a8c0:	f10d 0006 	add.w	r0, sp, #6
 800a8c4:	4798      	blx	r3
 800a8c6:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	b003      	add	sp, #12
 800a8ce:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 800a8d0:	2403      	movs	r4, #3
 800a8d2:	e7fa      	b.n	800a8ca <USBD_RegisterClass+0x1e>

0800a8d4 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a8d4:	f000 be76 	b.w	800b5c4 <USBD_LL_Start>

0800a8d8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a8d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a8dc:	b10b      	cbz	r3, 800a8e2 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4718      	bx	r3
  }

  return ret;
}
 800a8e2:	2003      	movs	r0, #3
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop

0800a8e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8e8:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a8ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a8ee:	b10b      	cbz	r3, 800a8f4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	bd08      	pop	{r3, pc}

0800a8f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8f8:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8fa:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800a8fe:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a900:	4628      	mov	r0, r5
 800a902:	f000 fb9f 	bl	800b044 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800a906:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 800a90a:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 800a90c:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
  switch (pdev->request.bmRequest & 0x1FU)
 800a910:	f001 031f 	and.w	r3, r1, #31
  pdev->ep0_state = USBD_EP0_SETUP;
 800a914:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 800a918:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 800a91a:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800a91e:	d015      	beq.n	800a94c <USBD_LL_SetupStage+0x54>
 800a920:	d30e      	bcc.n	800a940 <USBD_LL_SetupStage+0x48>
 800a922:	2b02      	cmp	r3, #2
 800a924:	d105      	bne.n	800a932 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
      break;

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a926:	4629      	mov	r1, r5
 800a928:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800a92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a92e:	f000 baeb 	b.w	800af08 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a932:	4620      	mov	r0, r4
 800a934:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800a938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a93c:	f000 be70 	b.w	800b620 <USBD_LL_StallEP>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a940:	4629      	mov	r1, r5
 800a942:	4620      	mov	r0, r4
}
 800a944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a948:	f000 b8fe 	b.w	800ab48 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a94c:	4629      	mov	r1, r5
 800a94e:	4620      	mov	r0, r4
}
 800a950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a954:	f000 baa0 	b.w	800ae98 <USBD_StdItfReq>

0800a958 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a95c:	b931      	cbnz	r1, 800a96c <USBD_LL_DataOutStage+0x14>
 800a95e:	460d      	mov	r5, r1
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a960:	f8d0 1294 	ldr.w	r1, [r0, #660]	; 0x294
 800a964:	2903      	cmp	r1, #3
 800a966:	d00c      	beq.n	800a982 <USBD_LL_DataOutStage+0x2a>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800a968:	2000      	movs	r0, #0
}
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800a96c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800a970:	6992      	ldr	r2, [r2, #24]
 800a972:	b1da      	cbz	r2, 800a9ac <USBD_LL_DataOutStage+0x54>
 800a974:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d117      	bne.n	800a9ac <USBD_LL_DataOutStage+0x54>
}
 800a97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a980:	4710      	bx	r2
 800a982:	4611      	mov	r1, r2
      if (pep->rem_length > pep->maxpacket)
 800a984:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 800a988:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d80f      	bhi.n	800a9b0 <USBD_LL_DataOutStage+0x58>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a990:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	b123      	cbz	r3, 800a9a2 <USBD_LL_DataOutStage+0x4a>
 800a998:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a99c:	2a03      	cmp	r2, #3
 800a99e:	d100      	bne.n	800a9a2 <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 800a9a0:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 fbc2 	bl	800b12c <USBD_CtlSendStatus>
  return USBD_OK;
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e7de      	b.n	800a96a <USBD_LL_DataOutStage+0x12>
    return USBD_FAIL;
 800a9ac:	2003      	movs	r0, #3
}
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800a9b0:	1a9b      	subs	r3, r3, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9b2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800a9b4:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9b8:	bf28      	it	cs
 800a9ba:	461a      	movcs	r2, r3
 800a9bc:	f000 fbae 	bl	800b11c <USBD_CtlContinueRx>
  return USBD_OK;
 800a9c0:	4628      	mov	r0, r5
}
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}

0800a9c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	b082      	sub	sp, #8
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a9ca:	b951      	cbnz	r1, 800a9e2 <USBD_LL_DataInStage+0x1e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9cc:	f8d0 5294 	ldr.w	r5, [r0, #660]	; 0x294
 800a9d0:	2d02      	cmp	r5, #2
 800a9d2:	d016      	beq.n	800aa02 <USBD_LL_DataInStage+0x3e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a9d4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800a9d8:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d00d      	beq.n	800a9fa <USBD_LL_DataInStage+0x36>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800a9de:	b002      	add	sp, #8
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800a9e2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	b33b      	cbz	r3, 800aa3a <USBD_LL_DataInStage+0x76>
 800a9ea:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800a9ee:	2a03      	cmp	r2, #3
 800a9f0:	d123      	bne.n	800aa3a <USBD_LL_DataInStage+0x76>
}
 800a9f2:	b002      	add	sp, #8
 800a9f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a9f8:	4718      	bx	r3
      pdev->dev_test_mode = 0U;
 800a9fa:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 800a9fe:	b002      	add	sp, #8
 800aa00:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 800aa02:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 800aa06:	42b5      	cmp	r5, r6
 800aa08:	d81a      	bhi.n	800aa40 <USBD_LL_DataInStage+0x7c>
        if ((pep->maxpacket == pep->rem_length) &&
 800aa0a:	d027      	beq.n	800aa5c <USBD_LL_DataInStage+0x98>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa0c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	b12b      	cbz	r3, 800aa20 <USBD_LL_DataInStage+0x5c>
 800aa14:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800aa18:	2a03      	cmp	r2, #3
 800aa1a:	d101      	bne.n	800aa20 <USBD_LL_DataInStage+0x5c>
            pdev->pClass->EP0_TxSent(pdev);
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa20:	2180      	movs	r1, #128	; 0x80
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 fdfc 	bl	800b620 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 fb8b 	bl	800b144 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800aa2e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 800aa32:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d1d2      	bne.n	800a9de <USBD_LL_DataInStage+0x1a>
 800aa38:	e7df      	b.n	800a9fa <USBD_LL_DataInStage+0x36>
    return USBD_FAIL;
 800aa3a:	2003      	movs	r0, #3
}
 800aa3c:	b002      	add	sp, #8
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800aa40:	1bad      	subs	r5, r5, r6
 800aa42:	9101      	str	r1, [sp, #4]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa44:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800aa46:	61c5      	str	r5, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa48:	462a      	mov	r2, r5
 800aa4a:	f000 fb4f 	bl	800b0ec <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	4620      	mov	r0, r4
 800aa52:	461a      	mov	r2, r3
 800aa54:	4619      	mov	r1, r3
 800aa56:	f000 fe2f 	bl	800b6b8 <USBD_LL_PrepareReceive>
 800aa5a:	e7bb      	b.n	800a9d4 <USBD_LL_DataInStage+0x10>
            (pep->total_length >= pep->maxpacket) &&
 800aa5c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa5e:	4295      	cmp	r5, r2
 800aa60:	d8d4      	bhi.n	800aa0c <USBD_LL_DataInStage+0x48>
            (pep->total_length >= pep->maxpacket) &&
 800aa62:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 800aa66:	42aa      	cmp	r2, r5
 800aa68:	d2d0      	bcs.n	800aa0c <USBD_LL_DataInStage+0x48>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa6a:	460a      	mov	r2, r1
 800aa6c:	9101      	str	r1, [sp, #4]
 800aa6e:	f000 fb3d 	bl	800b0ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa72:	9b01      	ldr	r3, [sp, #4]
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa74:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800aa76:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f000 fe1b 	bl	800b6b8 <USBD_LL_PrepareReceive>
 800aa82:	e7a7      	b.n	800a9d4 <USBD_LL_DataInStage+0x10>

0800aa84 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa84:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa86:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 800aa88:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa90:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa94:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa98:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa9a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 800aa9e:	b11b      	cbz	r3, 800aaa8 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aaa0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaa8:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaaa:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aaac:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaae:	4620      	mov	r0, r4
 800aab0:	462b      	mov	r3, r5
 800aab2:	4611      	mov	r1, r2
 800aab4:	f000 fd94 	bl	800b5e0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aab8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aabc:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aac0:	462b      	mov	r3, r5
 800aac2:	2200      	movs	r2, #0
 800aac4:	2180      	movs	r1, #128	; 0x80
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fd8a 	bl	800b5e0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aacc:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aace:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800aad0:	2000      	movs	r0, #0
 800aad2:	bd70      	pop	{r4, r5, r6, pc}

0800aad4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800aad4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800aad6:	2000      	movs	r0, #0
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop

0800aadc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aadc:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aade:	2104      	movs	r1, #4

  return USBD_OK;
}
 800aae0:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 800aae2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aae6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 800aaea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 800aaee:	4770      	bx	lr

0800aaf0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aaf0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d103      	bne.n	800ab00 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaf8:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800aafc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800ab00:	2000      	movs	r0, #0
 800ab02:	4770      	bx	lr

0800ab04 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab04:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800ab08:	2a03      	cmp	r2, #3
 800ab0a:	d001      	beq.n	800ab10 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	4770      	bx	lr
{
 800ab10:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800ab12:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	b103      	cbz	r3, 800ab1c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800ab1a:	4798      	blx	r3
}
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	bd08      	pop	{r3, pc}

0800ab20 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 800ab20:	2000      	movs	r0, #0
 800ab22:	4770      	bx	lr

0800ab24 <USBD_LL_IsoOUTIncomplete>:
 800ab24:	2000      	movs	r0, #0
 800ab26:	4770      	bx	lr

0800ab28 <USBD_LL_DevConnected>:
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4770      	bx	lr

0800ab2c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab2c:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 800ab2e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab32:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 800ab36:	b12a      	cbz	r2, 800ab44 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab38:	6852      	ldr	r2, [r2, #4]
 800ab3a:	7901      	ldrb	r1, [r0, #4]
{
 800ab3c:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab3e:	4790      	blx	r2
  }

  return USBD_OK;
}
 800ab40:	2000      	movs	r0, #0
 800ab42:	bd08      	pop	{r3, pc}
 800ab44:	2000      	movs	r0, #0
 800ab46:	4770      	bx	lr

0800ab48 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab48:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab4a:	780b      	ldrb	r3, [r1, #0]
{
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	460d      	mov	r5, r1
 800ab50:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab56:	2b20      	cmp	r3, #32
 800ab58:	d028      	beq.n	800abac <USBD_StdDevReq+0x64>
 800ab5a:	2b40      	cmp	r3, #64	; 0x40
 800ab5c:	d026      	beq.n	800abac <USBD_StdDevReq+0x64>
 800ab5e:	b15b      	cbz	r3, 800ab78 <USBD_StdDevReq+0x30>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab60:	2180      	movs	r1, #128	; 0x80
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 fd5c 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6c:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab6e:	f000 fd57 	bl	800b620 <USBD_LL_StallEP>
}
 800ab72:	4628      	mov	r0, r5
 800ab74:	b002      	add	sp, #8
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800ab78:	784b      	ldrb	r3, [r1, #1]
 800ab7a:	2b09      	cmp	r3, #9
 800ab7c:	d8f0      	bhi.n	800ab60 <USBD_StdDevReq+0x18>
 800ab7e:	a201      	add	r2, pc, #4	; (adr r2, 800ab84 <USBD_StdDevReq+0x3c>)
 800ab80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab84:	0800ac23 	.word	0x0800ac23
 800ab88:	0800ac51 	.word	0x0800ac51
 800ab8c:	0800ab61 	.word	0x0800ab61
 800ab90:	0800ac6d 	.word	0x0800ac6d
 800ab94:	0800ab61 	.word	0x0800ab61
 800ab98:	0800ac79 	.word	0x0800ac79
 800ab9c:	0800acbb 	.word	0x0800acbb
 800aba0:	0800ab61 	.word	0x0800ab61
 800aba4:	0800acd7 	.word	0x0800acd7
 800aba8:	0800abc1 	.word	0x0800abc1
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800abb0:	4629      	mov	r1, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	4798      	blx	r3
 800abb8:	4605      	mov	r5, r0
}
 800abba:	4628      	mov	r0, r5
 800abbc:	b002      	add	sp, #8
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);
 800abc0:	7889      	ldrb	r1, [r1, #2]
 800abc2:	4eb4      	ldr	r6, [pc, #720]	; (800ae94 <USBD_StdDevReq+0x34c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abc4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800abc6:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abc8:	f200 810a 	bhi.w	800ade0 <USBD_StdDevReq+0x298>
  switch (pdev->dev_state)
 800abcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	f000 8112 	beq.w	800adfa <USBD_StdDevReq+0x2b2>
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	f040 811f 	bne.w	800ae1a <USBD_StdDevReq+0x2d2>
    if (cfgidx == 0U)
 800abdc:	2900      	cmp	r1, #0
 800abde:	f000 8142 	beq.w	800ae66 <USBD_StdDevReq+0x31e>
    else if (cfgidx != pdev->dev_config)
 800abe2:	6841      	ldr	r1, [r0, #4]
 800abe4:	2901      	cmp	r1, #1
 800abe6:	f000 8125 	beq.w	800ae34 <USBD_StdDevReq+0x2ec>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abea:	b2c9      	uxtb	r1, r1
 800abec:	f7ff fe7c 	bl	800a8e8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800abf0:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800abf2:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 800abf4:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800abf6:	f7ff fe6f 	bl	800a8d8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800abfa:	4605      	mov	r5, r0
 800abfc:	2800      	cmp	r0, #0
 800abfe:	f000 8119 	beq.w	800ae34 <USBD_StdDevReq+0x2ec>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac02:	2180      	movs	r1, #128	; 0x80
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fd0b 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fd07 	bl	800b620 <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac12:	7921      	ldrb	r1, [r4, #4]
 800ac14:	4620      	mov	r0, r4
 800ac16:	f7ff fe67 	bl	800a8e8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ac20:	e7a7      	b.n	800ab72 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ac22:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac26:	2203      	movs	r2, #3
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d898      	bhi.n	800ab60 <USBD_StdDevReq+0x18>
    if (req->wLength != 0x2U)
 800ac2e:	88cb      	ldrh	r3, [r1, #6]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d195      	bne.n	800ab60 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac34:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 800ac36:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac3a:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800ac3c:	b103      	cbz	r3, 800ac40 <USBD_StdDevReq+0xf8>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac3e:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac40:	2202      	movs	r2, #2
 800ac42:	f104 010c 	add.w	r1, r4, #12
 800ac46:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ac48:	2500      	movs	r5, #0
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac4a:	f000 fa41 	bl	800b0d0 <USBD_CtlSendData>
 800ac4e:	e790      	b.n	800ab72 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800ac50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac54:	3b01      	subs	r3, #1
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d882      	bhi.n	800ab60 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac5a:	884b      	ldrh	r3, [r1, #2]
        pdev->dev_remote_wakeup = 0U;
 800ac5c:	2500      	movs	r5, #0
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d187      	bne.n	800ab72 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800ac62:	f8c0 52a4 	str.w	r5, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac66:	f000 fa61 	bl	800b12c <USBD_CtlSendStatus>
 800ac6a:	e782      	b.n	800ab72 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac6c:	884b      	ldrh	r3, [r1, #2]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	f000 80e5 	beq.w	800ae3e <USBD_StdDevReq+0x2f6>
  USBD_StatusTypeDef ret = USBD_OK;
 800ac74:	2500      	movs	r5, #0
 800ac76:	e77c      	b.n	800ab72 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac78:	888b      	ldrh	r3, [r1, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f47f af70 	bne.w	800ab60 <USBD_StdDevReq+0x18>
 800ac80:	88ce      	ldrh	r6, [r1, #6]
 800ac82:	2e00      	cmp	r6, #0
 800ac84:	f47f af6c 	bne.w	800ab60 <USBD_StdDevReq+0x18>
 800ac88:	884d      	ldrh	r5, [r1, #2]
 800ac8a:	2d7f      	cmp	r5, #127	; 0x7f
 800ac8c:	f63f af68 	bhi.w	800ab60 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	f43f af63 	beq.w	800ab60 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac9a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800ac9c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aca0:	f000 fcee 	bl	800b680 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 fa41 	bl	800b12c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800acaa:	2d00      	cmp	r5, #0
 800acac:	f000 80ed 	beq.w	800ae8a <USBD_StdDevReq+0x342>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acb0:	2302      	movs	r3, #2
  USBD_StatusTypeDef ret = USBD_OK;
 800acb2:	4635      	mov	r5, r6
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acb4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800acb8:	e75b      	b.n	800ab72 <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 800acba:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800acbc:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800acbe:	0a13      	lsrs	r3, r2, #8
  uint16_t len = 0U;
 800acc0:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 800acc4:	3b01      	subs	r3, #1
 800acc6:	2b06      	cmp	r3, #6
 800acc8:	d85f      	bhi.n	800ad8a <USBD_StdDevReq+0x242>
 800acca:	e8df f003 	tbb	[pc, r3]
 800acce:	4e46      	.short	0x4e46
 800acd0:	3d5e5e35 	.word	0x3d5e5e35
 800acd4:	18          	.byte	0x18
 800acd5:	00          	.byte	0x00
  if (req->wLength != 1U)
 800acd6:	88ca      	ldrh	r2, [r1, #6]
 800acd8:	2a01      	cmp	r2, #1
 800acda:	f47f af41 	bne.w	800ab60 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800acde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f43f af3c 	beq.w	800ab60 <USBD_StdDevReq+0x18>
 800ace8:	2b02      	cmp	r3, #2
 800acea:	f240 80ae 	bls.w	800ae4a <USBD_StdDevReq+0x302>
 800acee:	2b03      	cmp	r3, #3
 800acf0:	f47f af36 	bne.w	800ab60 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acf4:	1d01      	adds	r1, r0, #4
  USBD_StatusTypeDef ret = USBD_OK;
 800acf6:	2500      	movs	r5, #0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acf8:	f000 f9ea 	bl	800b0d0 <USBD_CtlSendData>
 800acfc:	e739      	b.n	800ab72 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acfe:	7c03      	ldrb	r3, [r0, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d142      	bne.n	800ad8a <USBD_StdDevReq+0x242>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad04:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad08:	f10d 0006 	add.w	r0, sp, #6
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad10:	2307      	movs	r3, #7
 800ad12:	7043      	strb	r3, [r0, #1]
    if (req->wLength != 0U)
 800ad14:	88eb      	ldrh	r3, [r5, #6]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d06b      	beq.n	800adf2 <USBD_StdDevReq+0x2aa>
      if (len != 0U)
 800ad1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d033      	beq.n	800ad8a <USBD_StdDevReq+0x242>
        len = MIN(len, req->wLength);
 800ad22:	4293      	cmp	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad24:	4601      	mov	r1, r0
 800ad26:	4620      	mov	r0, r4
        len = MIN(len, req->wLength);
 800ad28:	bf28      	it	cs
 800ad2a:	4613      	movcs	r3, r2
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad2c:	461a      	mov	r2, r3
        len = MIN(len, req->wLength);
 800ad2e:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad32:	f000 f9cd 	bl	800b0d0 <USBD_CtlSendData>
 800ad36:	e79d      	b.n	800ac74 <USBD_StdDevReq+0x12c>
    switch ((uint8_t)(req->wValue))
 800ad38:	b2d2      	uxtb	r2, r2
 800ad3a:	2a05      	cmp	r2, #5
 800ad3c:	d825      	bhi.n	800ad8a <USBD_StdDevReq+0x242>
 800ad3e:	e8df f002 	tbb	[pc, r2]
 800ad42:	4920      	.short	0x4920
 800ad44:	2d373d43 	.word	0x2d373d43
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad48:	7c03      	ldrb	r3, [r0, #16]
 800ad4a:	b9f3      	cbnz	r3, 800ad8a <USBD_StdDevReq+0x242>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad4c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad50:	f10d 0006 	add.w	r0, sp, #6
 800ad54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad56:	4798      	blx	r3
 800ad58:	e7dc      	b.n	800ad14 <USBD_StdDevReq+0x1cc>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad5e:	f10d 0106 	add.w	r1, sp, #6
 800ad62:	7c00      	ldrb	r0, [r0, #16]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4798      	blx	r3
 800ad68:	e7d4      	b.n	800ad14 <USBD_StdDevReq+0x1cc>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad6a:	7c02      	ldrb	r2, [r0, #16]
 800ad6c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	d171      	bne.n	800ae58 <USBD_StdDevReq+0x310>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad76:	f10d 0006 	add.w	r0, sp, #6
 800ad7a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	7043      	strb	r3, [r0, #1]
 800ad80:	e7c8      	b.n	800ad14 <USBD_StdDevReq+0x1cc>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	b96b      	cbnz	r3, 800ada6 <USBD_StdDevReq+0x25e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad8a:	2180      	movs	r1, #128	; 0x80
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 fc47 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad92:	4620      	mov	r0, r4
 800ad94:	2100      	movs	r1, #0
 800ad96:	f000 fc43 	bl	800b620 <USBD_LL_StallEP>
 800ad9a:	e76b      	b.n	800ac74 <USBD_StdDevReq+0x12c>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad9c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0f1      	beq.n	800ad8a <USBD_StdDevReq+0x242>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ada6:	f10d 0106 	add.w	r1, sp, #6
 800adaa:	7c20      	ldrb	r0, [r4, #16]
 800adac:	4798      	blx	r3
 800adae:	e7b1      	b.n	800ad14 <USBD_StdDevReq+0x1cc>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adb0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1f5      	bne.n	800ada6 <USBD_StdDevReq+0x25e>
 800adba:	e7e6      	b.n	800ad8a <USBD_StdDevReq+0x242>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adbc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1ef      	bne.n	800ada6 <USBD_StdDevReq+0x25e>
 800adc6:	e7e0      	b.n	800ad8a <USBD_StdDevReq+0x242>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e9      	bne.n	800ada6 <USBD_StdDevReq+0x25e>
 800add2:	e7da      	b.n	800ad8a <USBD_StdDevReq+0x242>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800add4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e3      	bne.n	800ada6 <USBD_StdDevReq+0x25e>
 800adde:	e7d4      	b.n	800ad8a <USBD_StdDevReq+0x242>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade0:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 800ade2:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade4:	f000 fc1c 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ade8:	4620      	mov	r0, r4
 800adea:	2100      	movs	r1, #0
 800adec:	f000 fc18 	bl	800b620 <USBD_LL_StallEP>
 800adf0:	e6bf      	b.n	800ab72 <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 f99a 	bl	800b12c <USBD_CtlSendStatus>
 800adf8:	e73c      	b.n	800ac74 <USBD_StdDevReq+0x12c>
    if (cfgidx != 0U)
 800adfa:	b1d9      	cbz	r1, 800ae34 <USBD_StdDevReq+0x2ec>
      pdev->dev_config = cfgidx;
 800adfc:	2101      	movs	r1, #1
 800adfe:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae00:	f7ff fd6a 	bl	800a8d8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800ae04:	4605      	mov	r5, r0
 800ae06:	b3c8      	cbz	r0, 800ae7c <USBD_StdDevReq+0x334>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae08:	2180      	movs	r1, #128	; 0x80
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fc08 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae10:	4620      	mov	r0, r4
 800ae12:	2100      	movs	r1, #0
 800ae14:	f000 fc04 	bl	800b620 <USBD_LL_StallEP>
 800ae18:	e6ab      	b.n	800ab72 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae1a:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 800ae1c:	2503      	movs	r5, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae1e:	f000 fbff 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae22:	2100      	movs	r1, #0
 800ae24:	4620      	mov	r0, r4
 800ae26:	f000 fbfb 	bl	800b620 <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae2a:	7831      	ldrb	r1, [r6, #0]
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f7ff fd5b 	bl	800a8e8 <USBD_ClrClassConfig>
 800ae32:	e69e      	b.n	800ab72 <USBD_StdDevReq+0x2a>
      (void)USBD_CtlSendStatus(pdev);
 800ae34:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800ae36:	2500      	movs	r5, #0
      (void)USBD_CtlSendStatus(pdev);
 800ae38:	f000 f978 	bl	800b12c <USBD_CtlSendStatus>
 800ae3c:	e699      	b.n	800ab72 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 800ae3e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  USBD_StatusTypeDef ret = USBD_OK;
 800ae42:	2500      	movs	r5, #0
    (void)USBD_CtlSendStatus(pdev);
 800ae44:	f000 f972 	bl	800b12c <USBD_CtlSendStatus>
 800ae48:	e693      	b.n	800ab72 <USBD_StdDevReq+0x2a>
      pdev->dev_default_config = 0U;
 800ae4a:	2500      	movs	r5, #0
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	f841 5f08 	str.w	r5, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae52:	f000 f93d 	bl	800b0d0 <USBD_CtlSendData>
 800ae56:	e68c      	b.n	800ab72 <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	f10d 0006 	add.w	r0, sp, #6
 800ae5e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae60:	2302      	movs	r3, #2
 800ae62:	7043      	strb	r3, [r0, #1]
 800ae64:	e756      	b.n	800ad14 <USBD_StdDevReq+0x1cc>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae66:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 800ae68:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6a:	460d      	mov	r5, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae6c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae70:	f7ff fd3a 	bl	800a8e8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 f959 	bl	800b12c <USBD_CtlSendStatus>
 800ae7a:	e67a      	b.n	800ab72 <USBD_StdDevReq+0x2a>
        (void)USBD_CtlSendStatus(pdev);
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 f955 	bl	800b12c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae82:	2303      	movs	r3, #3
 800ae84:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ae88:	e673      	b.n	800ab72 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800ae90:	e66f      	b.n	800ab72 <USBD_StdDevReq+0x2a>
 800ae92:	bf00      	nop
 800ae94:	24000674 	.word	0x24000674

0800ae98 <USBD_StdItfReq>:
{
 800ae98:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae9a:	780b      	ldrb	r3, [r1, #0]
{
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aea0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aea4:	2b20      	cmp	r3, #32
 800aea6:	d00d      	beq.n	800aec4 <USBD_StdItfReq+0x2c>
 800aea8:	2b40      	cmp	r3, #64	; 0x40
 800aeaa:	d00b      	beq.n	800aec4 <USBD_StdItfReq+0x2c>
 800aeac:	b153      	cbz	r3, 800aec4 <USBD_StdItfReq+0x2c>
  USBD_StatusTypeDef ret = USBD_OK;
 800aeae:	2600      	movs	r6, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeb0:	2180      	movs	r1, #128	; 0x80
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fbb4 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aeb8:	4620      	mov	r0, r4
 800aeba:	4631      	mov	r1, r6
 800aebc:	f000 fbb0 	bl	800b620 <USBD_LL_StallEP>
}
 800aec0:	4630      	mov	r0, r6
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800aec4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800aec8:	3b01      	subs	r3, #1
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d8ef      	bhi.n	800aeae <USBD_StdItfReq+0x16>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aece:	792b      	ldrb	r3, [r5, #4]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d80f      	bhi.n	800aef4 <USBD_StdItfReq+0x5c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aed4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800aed8:	4629      	mov	r1, r5
 800aeda:	4620      	mov	r0, r4
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800aee0:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aee2:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1eb      	bne.n	800aec0 <USBD_StdItfReq+0x28>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d1e9      	bne.n	800aec0 <USBD_StdItfReq+0x28>
          (void)USBD_CtlSendStatus(pdev);
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 f91d 	bl	800b12c <USBD_CtlSendStatus>
 800aef2:	e7e5      	b.n	800aec0 <USBD_StdItfReq+0x28>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aef4:	2180      	movs	r1, #128	; 0x80
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 fb92 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aefc:	2100      	movs	r1, #0
 800aefe:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 800af00:	460e      	mov	r6, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 800af02:	f000 fb8d 	bl	800b620 <USBD_LL_StallEP>
 800af06:	e7db      	b.n	800aec0 <USBD_StdItfReq+0x28>

0800af08 <USBD_StdEPReq>:
{
 800af08:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af0a:	780b      	ldrb	r3, [r1, #0]
{
 800af0c:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af12:	2b20      	cmp	r3, #32
 800af14:	d027      	beq.n	800af66 <USBD_StdEPReq+0x5e>
 800af16:	2b40      	cmp	r3, #64	; 0x40
 800af18:	d025      	beq.n	800af66 <USBD_StdEPReq+0x5e>
 800af1a:	460c      	mov	r4, r1
 800af1c:	b14b      	cbz	r3, 800af32 <USBD_StdEPReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af1e:	2180      	movs	r1, #128	; 0x80
 800af20:	4628      	mov	r0, r5
 800af22:	f000 fb7d 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af26:	4628      	mov	r0, r5
 800af28:	2100      	movs	r1, #0
 800af2a:	f000 fb79 	bl	800b620 <USBD_LL_StallEP>
}
 800af2e:	2000      	movs	r0, #0
 800af30:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800af32:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 800af34:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 800af36:	2b01      	cmp	r3, #1
  ep_addr = LOBYTE(req->wIndex);
 800af38:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 800af3a:	d03d      	beq.n	800afb8 <USBD_StdEPReq+0xb0>
 800af3c:	d31a      	bcc.n	800af74 <USBD_StdEPReq+0x6c>
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d1ed      	bne.n	800af1e <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 800af42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800af46:	2b02      	cmp	r3, #2
 800af48:	d04d      	beq.n	800afe6 <USBD_StdEPReq+0xde>
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d1e7      	bne.n	800af1e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800af4e:	8863      	ldrh	r3, [r4, #2]
 800af50:	b92b      	cbnz	r3, 800af5e <USBD_StdEPReq+0x56>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af52:	064a      	lsls	r2, r1, #25
 800af54:	d003      	beq.n	800af5e <USBD_StdEPReq+0x56>
 800af56:	88e3      	ldrh	r3, [r4, #6]
 800af58:	b90b      	cbnz	r3, 800af5e <USBD_StdEPReq+0x56>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800af5a:	f000 fb61 	bl	800b620 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 800af5e:	4628      	mov	r0, r5
 800af60:	f000 f8e4 	bl	800b12c <USBD_CtlSendStatus>
        break;
 800af64:	e7e3      	b.n	800af2e <USBD_StdEPReq+0x26>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af66:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800af6a:	4628      	mov	r0, r5
 800af6c:	689b      	ldr	r3, [r3, #8]
}
 800af6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af72:	4718      	bx	r3
      switch (pdev->dev_state)
 800af74:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d03d      	beq.n	800aff8 <USBD_StdEPReq+0xf0>
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d1ce      	bne.n	800af1e <USBD_StdEPReq+0x16>
 800af80:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 800af84:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800af8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 800af8e:	d445      	bmi.n	800b01c <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af90:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0c2      	beq.n	800af1e <USBD_StdEPReq+0x16>
 800af98:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af9c:	2414      	movs	r4, #20
 800af9e:	fb04 0403 	mla	r4, r4, r3, r0
 800afa2:	f504 74aa 	add.w	r4, r4, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d144      	bne.n	800b034 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800afaa:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afac:	4621      	mov	r1, r4
 800afae:	4628      	mov	r0, r5
 800afb0:	2202      	movs	r2, #2
 800afb2:	f000 f88d 	bl	800b0d0 <USBD_CtlSendData>
          break;
 800afb6:	e7ba      	b.n	800af2e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 800afb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d012      	beq.n	800afe6 <USBD_StdEPReq+0xde>
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d1ac      	bne.n	800af1e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800afc4:	8863      	ldrh	r3, [r4, #2]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1b1      	bne.n	800af2e <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 800afca:	064e      	lsls	r6, r1, #25
 800afcc:	d001      	beq.n	800afd2 <USBD_StdEPReq+0xca>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afce:	f000 fb35 	bl	800b63c <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f8aa 	bl	800b12c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afd8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800afdc:	4621      	mov	r1, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	4798      	blx	r3
 800afe4:	e7a3      	b.n	800af2e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe6:	064b      	lsls	r3, r1, #25
 800afe8:	d099      	beq.n	800af1e <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800afea:	f000 fb19 	bl	800b620 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afee:	4628      	mov	r0, r5
 800aff0:	2180      	movs	r1, #128	; 0x80
 800aff2:	f000 fb15 	bl	800b620 <USBD_LL_StallEP>
 800aff6:	e79a      	b.n	800af2e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aff8:	0648      	lsls	r0, r1, #25
 800affa:	d190      	bne.n	800af1e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800affc:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 800affe:	f04f 0400 	mov.w	r4, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b002:	4628      	mov	r0, r5
 800b004:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b008:	bf4c      	ite	mi
 800b00a:	f105 0314 	addmi.w	r3, r5, #20
 800b00e:	f505 73aa 	addpl.w	r3, r5, #340	; 0x154
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b012:	4619      	mov	r1, r3
        pep->status = 0x0000U;
 800b014:	601c      	str	r4, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b016:	f000 f85b 	bl	800b0d0 <USBD_CtlSendData>
        break;
 800b01a:	e788      	b.n	800af2e <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b01c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f43f af7d 	beq.w	800af1e <USBD_StdEPReq+0x16>
 800b024:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b028:	1c5c      	adds	r4, r3, #1
 800b02a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b02e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800b032:	e7b8      	b.n	800afa6 <USBD_StdEPReq+0x9e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b034:	4628      	mov	r0, r5
 800b036:	f000 fb0f 	bl	800b658 <USBD_LL_IsStallEP>
 800b03a:	b108      	cbz	r0, 800b040 <USBD_StdEPReq+0x138>
            pep->status = 0x0001U;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e7b4      	b.n	800afaa <USBD_StdEPReq+0xa2>
            pep->status = 0x0000U;
 800b040:	6020      	str	r0, [r4, #0]
 800b042:	e7b3      	b.n	800afac <USBD_StdEPReq+0xa4>

0800b044 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800b044:	780b      	ldrb	r3, [r1, #0]
 800b046:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800b048:	784b      	ldrb	r3, [r1, #1]
 800b04a:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b04c:	78ca      	ldrb	r2, [r1, #3]
 800b04e:	788b      	ldrb	r3, [r1, #2]
 800b050:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800b054:	8043      	strh	r3, [r0, #2]
 800b056:	794a      	ldrb	r2, [r1, #5]
 800b058:	790b      	ldrb	r3, [r1, #4]
 800b05a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800b05e:	8083      	strh	r3, [r0, #4]
 800b060:	79ca      	ldrb	r2, [r1, #7]
 800b062:	798b      	ldrb	r3, [r1, #6]
 800b064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800b068:	80c3      	strh	r3, [r0, #6]
}
 800b06a:	4770      	bx	lr

0800b06c <USBD_CtlError>:
{
 800b06c:	b510      	push	{r4, lr}
 800b06e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b070:	2180      	movs	r1, #128	; 0x80
 800b072:	f000 fad5 	bl	800b620 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b076:	2100      	movs	r1, #0
 800b078:	4620      	mov	r0, r4
}
 800b07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 800b07e:	f000 bacf 	b.w	800b620 <USBD_LL_StallEP>
 800b082:	bf00      	nop

0800b084 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 800b084:	b300      	cbz	r0, 800b0c8 <USBD_GetString+0x44>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800b086:	7803      	ldrb	r3, [r0, #0]
{
 800b088:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 800b08a:	b1f3      	cbz	r3, 800b0ca <USBD_GetString+0x46>
 800b08c:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 800b08e:	2300      	movs	r3, #0
  {
    len++;
 800b090:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800b092:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    len++;
 800b096:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 800b098:	2d00      	cmp	r5, #0
 800b09a:	d1f9      	bne.n	800b090 <USBD_GetString+0xc>
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	3302      	adds	r3, #2
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0a0:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0a2:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 800b0a4:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0a6:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 800b0a8:	7804      	ldrb	r4, [r0, #0]
 800b0aa:	b15c      	cbz	r4, 800b0c4 <USBD_GetString+0x40>
  idx++;
 800b0ac:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 800b0ae:	2500      	movs	r5, #0
    idx++;
 800b0b0:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 800b0b2:	54cc      	strb	r4, [r1, r3]
    idx++;
 800b0b4:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 800b0b6:	b2d2      	uxtb	r2, r2
    idx++;
 800b0b8:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 800b0ba:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 800b0bc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b0c0:	2c00      	cmp	r4, #0
 800b0c2:	d1f5      	bne.n	800b0b0 <USBD_GetString+0x2c>
}
 800b0c4:	bc30      	pop	{r4, r5}
 800b0c6:	4770      	bx	lr
 800b0c8:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	e7e8      	b.n	800b0a0 <USBD_GetString+0x1c>
 800b0ce:	bf00      	nop

0800b0d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0d4:	2602      	movs	r6, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0d6:	460a      	mov	r2, r1
 800b0d8:	2100      	movs	r1, #0
  pdev->ep_in[0].total_length = len;
 800b0da:	6185      	str	r5, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0dc:	462b      	mov	r3, r5
  pdev->ep_in[0].rem_length = len;
 800b0de:	61c5      	str	r5, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0e0:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0e4:	f000 fada 	bl	800b69c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}

0800b0ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0ec:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	460a      	mov	r2, r1
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	f000 fad2 	bl	800b69c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	bd08      	pop	{r3, pc}

0800b0fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	4615      	mov	r5, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b100:	2603      	movs	r6, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b102:	460a      	mov	r2, r1
 800b104:	2100      	movs	r1, #0
  pdev->ep_out[0].total_length = len;
 800b106:	f8c0 5158 	str.w	r5, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b10a:	462b      	mov	r3, r5
  pdev->ep_out[0].rem_length = len;
 800b10c:	f8c0 515c 	str.w	r5, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b110:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b114:	f000 fad0 	bl	800b6b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b118:	2000      	movs	r0, #0
 800b11a:	bd70      	pop	{r4, r5, r6, pc}

0800b11c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b11c:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b11e:	4613      	mov	r3, r2
 800b120:	460a      	mov	r2, r1
 800b122:	2100      	movs	r1, #0
 800b124:	f000 fac8 	bl	800b6b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b128:	2000      	movs	r0, #0
 800b12a:	bd08      	pop	{r3, pc}

0800b12c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b12c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b12e:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b130:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b132:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b136:	4619      	mov	r1, r3
 800b138:	461a      	mov	r2, r3
 800b13a:	f000 faaf 	bl	800b69c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b13e:	2000      	movs	r0, #0
 800b140:	bd08      	pop	{r3, pc}
 800b142:	bf00      	nop

0800b144 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b144:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b146:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b148:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b14a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b14e:	4619      	mov	r1, r3
 800b150:	461a      	mov	r2, r3
 800b152:	f000 fab1 	bl	800b6b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b156:	2000      	movs	r0, #0
 800b158:	bd08      	pop	{r3, pc}
 800b15a:	bf00      	nop

0800b15c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b15c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b15e:	2200      	movs	r2, #0
 800b160:	4910      	ldr	r1, [pc, #64]	; (800b1a4 <MX_USB_DEVICE_Init+0x48>)
 800b162:	4811      	ldr	r0, [pc, #68]	; (800b1a8 <MX_USB_DEVICE_Init+0x4c>)
 800b164:	f7ff fb88 	bl	800a878 <USBD_Init>
 800b168:	b9c8      	cbnz	r0, 800b19e <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b16a:	4910      	ldr	r1, [pc, #64]	; (800b1ac <MX_USB_DEVICE_Init+0x50>)
 800b16c:	480e      	ldr	r0, [pc, #56]	; (800b1a8 <MX_USB_DEVICE_Init+0x4c>)
 800b16e:	f7ff fb9d 	bl	800a8ac <USBD_RegisterClass>
 800b172:	b988      	cbnz	r0, 800b198 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b174:	490e      	ldr	r1, [pc, #56]	; (800b1b0 <MX_USB_DEVICE_Init+0x54>)
 800b176:	480c      	ldr	r0, [pc, #48]	; (800b1a8 <MX_USB_DEVICE_Init+0x4c>)
 800b178:	f7ff fb36 	bl	800a7e8 <USBD_CDC_RegisterInterface>
 800b17c:	b948      	cbnz	r0, 800b192 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b17e:	480a      	ldr	r0, [pc, #40]	; (800b1a8 <MX_USB_DEVICE_Init+0x4c>)
 800b180:	f7ff fba8 	bl	800a8d4 <USBD_Start>
 800b184:	b108      	cbz	r0, 800b18a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800b186:	f7f7 f957 	bl	8002438 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b18a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 800b18e:	f7fb ba47 	b.w	8006620 <HAL_PWREx_EnableUSBVoltageDetector>
    Error_Handler();
 800b192:	f7f7 f951 	bl	8002438 <Error_Handler>
 800b196:	e7f2      	b.n	800b17e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800b198:	f7f7 f94e 	bl	8002438 <Error_Handler>
 800b19c:	e7ea      	b.n	800b174 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800b19e:	f7f7 f94b 	bl	8002438 <Error_Handler>
 800b1a2:	e7e2      	b.n	800b16a <MX_USB_DEVICE_Init+0xe>
 800b1a4:	24000330 	.word	0x24000330
 800b1a8:	2400d7e4 	.word	0x2400d7e4
 800b1ac:	24000204 	.word	0x24000204
 800b1b0:	24000314 	.word	0x24000314

0800b1b4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	4770      	bx	lr

0800b1b8 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	4770      	bx	lr

0800b1bc <CDC_Init_FS>:
{
 800b1bc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1be:	4c06      	ldr	r4, [pc, #24]	; (800b1d8 <CDC_Init_FS+0x1c>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4906      	ldr	r1, [pc, #24]	; (800b1dc <CDC_Init_FS+0x20>)
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f7ff fb17 	bl	800a7f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	4904      	ldr	r1, [pc, #16]	; (800b1e0 <CDC_Init_FS+0x24>)
 800b1ce:	f7ff fb1b 	bl	800a808 <USBD_CDC_SetRxBuffer>
}
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	bf00      	nop
 800b1d8:	2400d7e4 	.word	0x2400d7e4
 800b1dc:	2400e2b4 	.word	0x2400e2b4
 800b1e0:	2400dab4 	.word	0x2400dab4

0800b1e4 <CDC_Control_FS>:
  switch(cmd)
 800b1e4:	2820      	cmp	r0, #32
 800b1e6:	d00a      	beq.n	800b1fe <CDC_Control_FS+0x1a>
 800b1e8:	2821      	cmp	r0, #33	; 0x21
 800b1ea:	d106      	bne.n	800b1fa <CDC_Control_FS+0x16>
    	 memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <CDC_Control_FS+0x34>)
 800b1ee:	6818      	ldr	r0, [r3, #0]
 800b1f0:	889a      	ldrh	r2, [r3, #4]
 800b1f2:	799b      	ldrb	r3, [r3, #6]
 800b1f4:	6008      	str	r0, [r1, #0]
 800b1f6:	808a      	strh	r2, [r1, #4]
 800b1f8:	718b      	strb	r3, [r1, #6]
}
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	4770      	bx	lr
{
 800b1fe:	b410      	push	{r4}
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800b200:	4b05      	ldr	r3, [pc, #20]	; (800b218 <CDC_Control_FS+0x34>)
 800b202:	6808      	ldr	r0, [r1, #0]
 800b204:	888c      	ldrh	r4, [r1, #4]
 800b206:	798a      	ldrb	r2, [r1, #6]
 800b208:	6018      	str	r0, [r3, #0]
}
 800b20a:	2000      	movs	r0, #0
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800b20c:	809c      	strh	r4, [r3, #4]
 800b20e:	719a      	strb	r2, [r3, #6]
}
 800b210:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	24000328 	.word	0x24000328

0800b21c <CDC_Receive_FS>:
{
 800b21c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b21e:	4c0c      	ldr	r4, [pc, #48]	; (800b250 <CDC_Receive_FS+0x34>)
{
 800b220:	4605      	mov	r5, r0
 800b222:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b224:	4620      	mov	r0, r4
 800b226:	4629      	mov	r1, r5
 800b228:	f7ff faee 	bl	800a808 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b22c:	4620      	mov	r0, r4
 800b22e:	f7ff fb0b 	bl	800a848 <USBD_CDC_ReceivePacket>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b232:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800b236:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b23a:	b93b      	cbnz	r3, 800b24c <CDC_Receive_FS+0x30>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b23c:	8832      	ldrh	r2, [r6, #0]
 800b23e:	4629      	mov	r1, r5
 800b240:	4620      	mov	r0, r4
 800b242:	f7ff fad9 	bl	800a7f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b246:	4620      	mov	r0, r4
 800b248:	f7ff fae4 	bl	800a814 <USBD_CDC_TransmitPacket>
}
 800b24c:	2000      	movs	r0, #0
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	2400d7e4 	.word	0x2400d7e4

0800b254 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b254:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800b256:	4801      	ldr	r0, [pc, #4]	; (800b25c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800b258:	800b      	strh	r3, [r1, #0]
}
 800b25a:	4770      	bx	lr
 800b25c:	2400034c 	.word	0x2400034c

0800b260 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b260:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800b262:	4801      	ldr	r0, [pc, #4]	; (800b268 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800b264:	800b      	strh	r3, [r1, #0]
}
 800b266:	4770      	bx	lr
 800b268:	24000360 	.word	0x24000360

0800b26c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b26c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b26e:	4c04      	ldr	r4, [pc, #16]	; (800b280 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800b270:	460a      	mov	r2, r1
 800b272:	4804      	ldr	r0, [pc, #16]	; (800b284 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800b274:	4621      	mov	r1, r4
 800b276:	f7ff ff05 	bl	800b084 <USBD_GetString>
  return USBD_StrDesc;
}
 800b27a:	4620      	mov	r0, r4
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	bf00      	nop
 800b280:	2400eab4 	.word	0x2400eab4
 800b284:	08012588 	.word	0x08012588

0800b288 <USBD_FS_ProductStrDescriptor>:
{
 800b288:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b28a:	4c04      	ldr	r4, [pc, #16]	; (800b29c <USBD_FS_ProductStrDescriptor+0x14>)
 800b28c:	460a      	mov	r2, r1
 800b28e:	4804      	ldr	r0, [pc, #16]	; (800b2a0 <USBD_FS_ProductStrDescriptor+0x18>)
 800b290:	4621      	mov	r1, r4
 800b292:	f7ff fef7 	bl	800b084 <USBD_GetString>
}
 800b296:	4620      	mov	r0, r4
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	bf00      	nop
 800b29c:	2400eab4 	.word	0x2400eab4
 800b2a0:	0801259c 	.word	0x0801259c

0800b2a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2a6:	4c04      	ldr	r4, [pc, #16]	; (800b2b8 <USBD_FS_ConfigStrDescriptor+0x14>)
 800b2a8:	460a      	mov	r2, r1
 800b2aa:	4804      	ldr	r0, [pc, #16]	; (800b2bc <USBD_FS_ConfigStrDescriptor+0x18>)
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7ff fee9 	bl	800b084 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	bf00      	nop
 800b2b8:	2400eab4 	.word	0x2400eab4
 800b2bc:	0801256c 	.word	0x0801256c

0800b2c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b2c2:	4c04      	ldr	r4, [pc, #16]	; (800b2d4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800b2c4:	460a      	mov	r2, r1
 800b2c6:	4804      	ldr	r0, [pc, #16]	; (800b2d8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	f7ff fedb 	bl	800b084 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	bf00      	nop
 800b2d4:	2400eab4 	.word	0x2400eab4
 800b2d8:	08012578 	.word	0x08012578

0800b2dc <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2dc:	4a49      	ldr	r2, [pc, #292]	; (800b404 <USBD_FS_SerialStrDescriptor+0x128>)
  *length = USB_SIZ_STRING_SERIAL;
 800b2de:	201a      	movs	r0, #26
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2e0:	4b49      	ldr	r3, [pc, #292]	; (800b408 <USBD_FS_SerialStrDescriptor+0x12c>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b2e2:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 800b2e4:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800b2e6:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800b2e8:	18d2      	adds	r2, r2, r3
 800b2ea:	d101      	bne.n	800b2f0 <USBD_FS_SerialStrDescriptor+0x14>
}
 800b2ec:	4847      	ldr	r0, [pc, #284]	; (800b40c <USBD_FS_SerialStrDescriptor+0x130>)
 800b2ee:	4770      	bx	lr
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800b2f0:	0f13      	lsrs	r3, r2, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b2f2:	4947      	ldr	r1, [pc, #284]	; (800b410 <USBD_FS_SerialStrDescriptor+0x134>)
 800b2f4:	b2d8      	uxtb	r0, r3
    if (((value >> 28)) < 0xA)
 800b2f6:	2b09      	cmp	r3, #9
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2f8:	4b44      	ldr	r3, [pc, #272]	; (800b40c <USBD_FS_SerialStrDescriptor+0x130>)
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2fa:	bf94      	ite	ls
 800b2fc:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b2fe:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b300:	6809      	ldr	r1, [r1, #0]
{
 800b302:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b304:	7098      	strb	r0, [r3, #2]
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800b306:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800b308:	f3c2 6003 	ubfx	r0, r2, #24, #4
    pbuf[2 * idx + 1] = 0;
 800b30c:	70dc      	strb	r4, [r3, #3]
    if (((value >> 28)) < 0xA)
 800b30e:	2809      	cmp	r0, #9
 800b310:	b2c4      	uxtb	r4, r0
 800b312:	f3c2 5003 	ubfx	r0, r2, #20, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b316:	bf94      	ite	ls
 800b318:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b31a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b31c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b31e:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 800b320:	f04f 0400 	mov.w	r4, #0
 800b324:	715c      	strb	r4, [r3, #5]
 800b326:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b328:	f3c2 4003 	ubfx	r0, r2, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b32c:	bf94      	ite	ls
 800b32e:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b330:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b332:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b334:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 800b336:	f04f 0400 	mov.w	r4, #0
 800b33a:	71dc      	strb	r4, [r3, #7]
 800b33c:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b33e:	f3c2 3003 	ubfx	r0, r2, #12, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b342:	bf94      	ite	ls
 800b344:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b346:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b348:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b34a:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 800b34c:	f04f 0400 	mov.w	r4, #0
 800b350:	725c      	strb	r4, [r3, #9]
 800b352:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b354:	f3c2 2003 	ubfx	r0, r2, #8, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b358:	bf94      	ite	ls
 800b35a:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b35c:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b35e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b360:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 800b362:	f04f 0400 	mov.w	r4, #0
 800b366:	72dc      	strb	r4, [r3, #11]
 800b368:	b2c4      	uxtb	r4, r0
    if (((value >> 28)) < 0xA)
 800b36a:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800b36e:	f002 020f 	and.w	r2, r2, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 800b372:	bf94      	ite	ls
 800b374:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b376:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b378:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b37a:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 800b37c:	f04f 0400 	mov.w	r4, #0
 800b380:	735c      	strb	r4, [r3, #13]
 800b382:	b2c4      	uxtb	r4, r0
 800b384:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 800b386:	bf94      	ite	ls
 800b388:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b38a:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b38c:	2a09      	cmp	r2, #9
 800b38e:	ea4f 7211 	mov.w	r2, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b392:	739c      	strb	r4, [r3, #14]
    pbuf[2 * idx + 1] = 0;
 800b394:	f04f 0400 	mov.w	r4, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800b398:	bf94      	ite	ls
 800b39a:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b39c:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b39e:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 800b3a0:	73dc      	strb	r4, [r3, #15]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3a2:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 800b3a4:	f04f 0000 	mov.w	r0, #0
 800b3a8:	7458      	strb	r0, [r3, #17]
 800b3aa:	b2d0      	uxtb	r0, r2
    if (((value >> 28)) < 0xA)
 800b3ac:	f3c1 6203 	ubfx	r2, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3b0:	bf94      	ite	ls
 800b3b2:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3b4:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b3b6:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3b8:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 800b3ba:	f04f 0000 	mov.w	r0, #0
 800b3be:	74d8      	strb	r0, [r3, #19]
 800b3c0:	b2d0      	uxtb	r0, r2
    if (((value >> 28)) < 0xA)
 800b3c2:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800b3c6:	f3c1 4103 	ubfx	r1, r1, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3ca:	bf94      	ite	ls
 800b3cc:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3ce:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b3d0:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3d2:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 800b3d4:	f04f 0000 	mov.w	r0, #0
 800b3d8:	7558      	strb	r0, [r3, #21]
 800b3da:	b2d0      	uxtb	r0, r2
 800b3dc:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3de:	bf94      	ite	ls
 800b3e0:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3e2:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800b3e4:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3e6:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 800b3e8:	f04f 0000 	mov.w	r0, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3ec:	bf94      	ite	ls
 800b3ee:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3f0:	3237      	addhi	r2, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800b3f2:	75d8      	strb	r0, [r3, #23]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3f4:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 800b3f6:	2200      	movs	r2, #0
}
 800b3f8:	4804      	ldr	r0, [pc, #16]	; (800b40c <USBD_FS_SerialStrDescriptor+0x130>)
    pbuf[2 * idx + 1] = 0;
 800b3fa:	765a      	strb	r2, [r3, #25]
}
 800b3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	1ff1e800 	.word	0x1ff1e800
 800b408:	1ff1e808 	.word	0x1ff1e808
 800b40c:	24000364 	.word	0x24000364
 800b410:	1ff1e804 	.word	0x1ff1e804

0800b414 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 800b414:	6802      	ldr	r2, [r0, #0]
 800b416:	4b1e      	ldr	r3, [pc, #120]	; (800b490 <HAL_PCD_MspInit+0x7c>)
{
 800b418:	b570      	push	{r4, r5, r6, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 800b41a:	429a      	cmp	r2, r3
{
 800b41c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b41e:	f04f 0400 	mov.w	r4, #0
 800b422:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b426:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800b42a:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b42c:	d001      	beq.n	800b432 <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b42e:	b008      	add	sp, #32
 800b430:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b432:	4d18      	ldr	r5, [pc, #96]	; (800b494 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b434:	2002      	movs	r0, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b436:	220a      	movs	r2, #10
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b438:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b43c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b440:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b442:	f043 0301 	orr.w	r3, r3, #1
 800b446:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b44a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b44e:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b450:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b454:	4810      	ldr	r0, [pc, #64]	; (800b498 <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800b456:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b45c:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b45e:	f7fa f973 	bl	8005748 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b462:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b466:	4622      	mov	r2, r4
 800b468:	4621      	mov	r1, r4
 800b46a:	2065      	movs	r0, #101	; 0x65
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b46c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b470:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800b474:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800b478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b47c:	9302      	str	r3, [sp, #8]
 800b47e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b480:	f7f8 fe16 	bl	80040b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b484:	2065      	movs	r0, #101	; 0x65
 800b486:	f7f8 fe49 	bl	800411c <HAL_NVIC_EnableIRQ>
}
 800b48a:	b008      	add	sp, #32
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	bf00      	nop
 800b490:	40080000 	.word	0x40080000
 800b494:	58024400 	.word	0x58024400
 800b498:	58020000 	.word	0x58020000

0800b49c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b49c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800b4a0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b4a4:	f7ff ba28 	b.w	800a8f8 <USBD_LL_SetupStage>

0800b4a8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4a8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b4ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b4b0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b4b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b4b8:	f7ff ba4e 	b.w	800a958 <USBD_LL_DataOutStage>

0800b4bc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4bc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b4c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b4c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b4c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4ca:	f7ff ba7b 	b.w	800a9c4 <USBD_LL_DataInStage>
 800b4ce:	bf00      	nop

0800b4d0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4d0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b4d4:	f7ff bb16 	b.w	800ab04 <USBD_LL_SOF>

0800b4d8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b4d8:	68c1      	ldr	r1, [r0, #12]
{
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b4de:	b121      	cbz	r1, 800b4ea <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b4e0:	2902      	cmp	r1, #2
 800b4e2:	d00c      	beq.n	800b4fe <HAL_PCD_ResetCallback+0x26>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800b4e4:	f7f6 ffa8 	bl	8002438 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b4e8:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4ea:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 800b4ee:	f7ff faf1 	bl	800aad4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4f2:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 800b4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4fa:	f7ff bac3 	b.w	800aa84 <USBD_LL_Reset>
    speed = USBD_SPEED_FULL;
 800b4fe:	2101      	movs	r1, #1
 800b500:	e7f3      	b.n	800b4ea <HAL_PCD_ResetCallback+0x12>
 800b502:	bf00      	nop

0800b504 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b504:	b510      	push	{r4, lr}
 800b506:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b508:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b50c:	f7ff fae6 	bl	800aadc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b510:	6822      	ldr	r2, [r4, #0]
 800b512:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800b516:	f043 0301 	orr.w	r3, r3, #1
 800b51a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b51e:	6a23      	ldr	r3, [r4, #32]
 800b520:	b123      	cbz	r3, 800b52c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b522:	4a03      	ldr	r2, [pc, #12]	; (800b530 <HAL_PCD_SuspendCallback+0x2c>)
 800b524:	6913      	ldr	r3, [r2, #16]
 800b526:	f043 0306 	orr.w	r3, r3, #6
 800b52a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	bf00      	nop
 800b530:	e000ed00 	.word	0xe000ed00

0800b534 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b534:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b538:	f7ff bada 	b.w	800aaf0 <USBD_LL_Resume>

0800b53c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b53c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b540:	f7ff baf0 	b.w	800ab24 <USBD_LL_IsoOUTIncomplete>

0800b544 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b544:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b548:	f7ff baea 	b.w	800ab20 <USBD_LL_IsoINIncomplete>

0800b54c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b54c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b550:	f7ff baea 	b.w	800ab28 <USBD_LL_DevConnected>

0800b554 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b554:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800b558:	f7ff bae8 	b.w	800ab2c <USBD_LL_DevDisconnected>

0800b55c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b55c:	7802      	ldrb	r2, [r0, #0]
 800b55e:	b10a      	cbz	r2, 800b564 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 800b560:	2000      	movs	r0, #0
 800b562:	4770      	bx	lr
{
 800b564:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.pData = pdev;
 800b566:	4b15      	ldr	r3, [pc, #84]	; (800b5bc <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b568:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b56a:	2409      	movs	r4, #9
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b56c:	4d14      	ldr	r5, [pc, #80]	; (800b5c0 <USBD_LL_Init+0x64>)
  hpcd_USB_OTG_FS.pData = pdev;
 800b56e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b572:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b576:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b578:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b57a:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b57c:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b57e:	e9c3 2207 	strd	r2, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b582:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b586:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800b58a:	e9c3 5400 	strd	r5, r4, [r3]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b58e:	f7fa fa97 	bl	8005ac0 <HAL_PCD_Init>
 800b592:	b978      	cbnz	r0, 800b5b4 <USBD_LL_Init+0x58>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b594:	2180      	movs	r1, #128	; 0x80
 800b596:	4809      	ldr	r0, [pc, #36]	; (800b5bc <USBD_LL_Init+0x60>)
 800b598:	f7fb f800 	bl	800659c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b59c:	2240      	movs	r2, #64	; 0x40
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4806      	ldr	r0, [pc, #24]	; (800b5bc <USBD_LL_Init+0x60>)
 800b5a2:	f7fa ffd7 	bl	8006554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b5a6:	2280      	movs	r2, #128	; 0x80
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4804      	ldr	r0, [pc, #16]	; (800b5bc <USBD_LL_Init+0x60>)
 800b5ac:	f7fa ffd2 	bl	8006554 <HAL_PCDEx_SetTxFiFo>
}
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 800b5b4:	f7f6 ff40 	bl	8002438 <Error_Handler>
 800b5b8:	e7ec      	b.n	800b594 <USBD_LL_Init+0x38>
 800b5ba:	bf00      	nop
 800b5bc:	2400ecb4 	.word	0x2400ecb4
 800b5c0:	40080000 	.word	0x40080000

0800b5c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5c6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b5ca:	f7fa fb11 	bl	8005bf0 <HAL_PCD_Start>
 800b5ce:	2803      	cmp	r0, #3
 800b5d0:	d802      	bhi.n	800b5d8 <USBD_LL_Start+0x14>
 800b5d2:	4b02      	ldr	r3, [pc, #8]	; (800b5dc <USBD_LL_Start+0x18>)
 800b5d4:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b5d6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b5d8:	2003      	movs	r0, #3
}
 800b5da:	bd08      	pop	{r3, pc}
 800b5dc:	080125b4 	.word	0x080125b4

0800b5e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5e4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	4622      	mov	r2, r4
 800b5ec:	f7fa fe6e 	bl	80062cc <HAL_PCD_EP_Open>
 800b5f0:	2803      	cmp	r0, #3
 800b5f2:	d802      	bhi.n	800b5fa <USBD_LL_OpenEP+0x1a>
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <USBD_LL_OpenEP+0x20>)
 800b5f6:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b5f8:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5fa:	2003      	movs	r0, #3
}
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	bf00      	nop
 800b600:	080125b4 	.word	0x080125b4

0800b604 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b604:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b606:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b60a:	f7fa fe99 	bl	8006340 <HAL_PCD_EP_Close>
 800b60e:	2803      	cmp	r0, #3
 800b610:	d802      	bhi.n	800b618 <USBD_LL_CloseEP+0x14>
 800b612:	4b02      	ldr	r3, [pc, #8]	; (800b61c <USBD_LL_CloseEP+0x18>)
 800b614:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b616:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b618:	2003      	movs	r0, #3
}
 800b61a:	bd08      	pop	{r3, pc}
 800b61c:	080125b4 	.word	0x080125b4

0800b620 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b620:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b622:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b626:	f7fa ff15 	bl	8006454 <HAL_PCD_EP_SetStall>
 800b62a:	2803      	cmp	r0, #3
 800b62c:	d802      	bhi.n	800b634 <USBD_LL_StallEP+0x14>
 800b62e:	4b02      	ldr	r3, [pc, #8]	; (800b638 <USBD_LL_StallEP+0x18>)
 800b630:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b632:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b634:	2003      	movs	r0, #3
}
 800b636:	bd08      	pop	{r3, pc}
 800b638:	080125b4 	.word	0x080125b4

0800b63c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b63c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b63e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b642:	f7fa ff4b 	bl	80064dc <HAL_PCD_EP_ClrStall>
 800b646:	2803      	cmp	r0, #3
 800b648:	d802      	bhi.n	800b650 <USBD_LL_ClearStallEP+0x14>
 800b64a:	4b02      	ldr	r3, [pc, #8]	; (800b654 <USBD_LL_ClearStallEP+0x18>)
 800b64c:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b64e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b650:	2003      	movs	r0, #3
}
 800b652:	bd08      	pop	{r3, pc}
 800b654:	080125b4 	.word	0x080125b4

0800b658 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 800b658:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b65a:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800b65e:	d406      	bmi.n	800b66e <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b660:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b664:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b668:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 800b66c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b66e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b672:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b676:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b67a:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 800b67e:	4770      	bx	lr

0800b680 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b680:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b682:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b686:	f7fa fe0d 	bl	80062a4 <HAL_PCD_SetAddress>
 800b68a:	2803      	cmp	r0, #3
 800b68c:	d802      	bhi.n	800b694 <USBD_LL_SetUSBAddress+0x14>
 800b68e:	4b02      	ldr	r3, [pc, #8]	; (800b698 <USBD_LL_SetUSBAddress+0x18>)
 800b690:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b692:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b694:	2003      	movs	r0, #3
}
 800b696:	bd08      	pop	{r3, pc}
 800b698:	080125b4 	.word	0x080125b4

0800b69c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b69c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b69e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b6a2:	f7fa feb3 	bl	800640c <HAL_PCD_EP_Transmit>
 800b6a6:	2803      	cmp	r0, #3
 800b6a8:	d802      	bhi.n	800b6b0 <USBD_LL_Transmit+0x14>
 800b6aa:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <USBD_LL_Transmit+0x18>)
 800b6ac:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b6ae:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b6b0:	2003      	movs	r0, #3
}
 800b6b2:	bd08      	pop	{r3, pc}
 800b6b4:	080125b4 	.word	0x080125b4

0800b6b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b6b8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6ba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b6be:	f7fa fe73 	bl	80063a8 <HAL_PCD_EP_Receive>
 800b6c2:	2803      	cmp	r0, #3
 800b6c4:	d802      	bhi.n	800b6cc <USBD_LL_PrepareReceive+0x14>
 800b6c6:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <USBD_LL_PrepareReceive+0x18>)
 800b6c8:	5c18      	ldrb	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 800b6ca:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6cc:	2003      	movs	r0, #3
}
 800b6ce:	bd08      	pop	{r3, pc}
 800b6d0:	080125b4 	.word	0x080125b4

0800b6d4 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6d4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800b6d8:	f7fa be8e 	b.w	80063f8 <HAL_PCD_EP_GetRxCount>

0800b6dc <arm_cfft_radix8by2_f32>:
 800b6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	4608      	mov	r0, r1
 800b6e4:	ed2d 8b06 	vpush	{d8-d10}
 800b6e8:	f8b7 e000 	ldrh.w	lr, [r7]
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800b6f2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800b6f6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800b6fa:	f000 80b0 	beq.w	800b85e <arm_cfft_radix8by2_f32+0x182>
 800b6fe:	008b      	lsls	r3, r1, #2
 800b700:	3210      	adds	r2, #16
 800b702:	f100 0610 	add.w	r6, r0, #16
 800b706:	f108 0510 	add.w	r5, r8, #16
 800b70a:	3310      	adds	r3, #16
 800b70c:	18c4      	adds	r4, r0, r3
 800b70e:	4443      	add	r3, r8
 800b710:	ed55 6a04 	vldr	s13, [r5, #-16]
 800b714:	f1be 0e01 	subs.w	lr, lr, #1
 800b718:	ed56 4a04 	vldr	s9, [r6, #-16]
 800b71c:	f104 0410 	add.w	r4, r4, #16
 800b720:	ed15 7a03 	vldr	s14, [r5, #-12]
 800b724:	f106 0610 	add.w	r6, r6, #16
 800b728:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800b72c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b730:	ed55 2a01 	vldr	s5, [r5, #-4]
 800b734:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b738:	ed53 0a04 	vldr	s1, [r3, #-16]
 800b73c:	f102 0210 	add.w	r2, r2, #16
 800b740:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b744:	f105 0510 	add.w	r5, r5, #16
 800b748:	ed13 3a02 	vldr	s6, [r3, #-8]
 800b74c:	f103 0310 	add.w	r3, r3, #16
 800b750:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800b754:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800b758:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800b75c:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b760:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800b764:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800b768:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b76c:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800b770:	ee76 aa87 	vadd.f32	s21, s13, s14
 800b774:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800b778:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b77c:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800b780:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800b784:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800b788:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b78c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b790:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800b794:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b798:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b79c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b7a0:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800b7a4:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800b7a8:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b7ac:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800b7b0:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b7b4:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800b7b8:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b7bc:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800b7c0:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b7c4:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800b7c8:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800b7cc:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800b7d0:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b7d4:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b7d8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b7dc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b7e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b7e4:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b7e8:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b7ec:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b7f0:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b7f4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b7f8:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b7fc:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b800:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800b804:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800b808:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800b80c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800b810:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800b814:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800b818:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b81c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b820:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b828:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b82c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b830:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b834:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b838:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b83c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b840:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b844:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b848:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800b84c:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800b850:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800b854:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800b858:	f47f af5a 	bne.w	800b710 <arm_cfft_radix8by2_f32+0x34>
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	b28c      	uxth	r4, r1
 800b860:	2302      	movs	r3, #2
 800b862:	4621      	mov	r1, r4
 800b864:	f000 fd54 	bl	800c310 <arm_radix8_butterfly_f32>
 800b868:	4621      	mov	r1, r4
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4640      	mov	r0, r8
 800b86e:	2302      	movs	r3, #2
 800b870:	ecbd 8b06 	vpop	{d8-d10}
 800b874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	f000 bd4a 	b.w	800c310 <arm_radix8_butterfly_f32>

0800b87c <arm_cfft_radix8by4_f32>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	ed2d 8b06 	vpush	{d8-d10}
 800b884:	8804      	ldrh	r4, [r0, #0]
 800b886:	b08f      	sub	sp, #60	; 0x3c
 800b888:	ed91 6a00 	vldr	s12, [r1]
 800b88c:	460a      	mov	r2, r1
 800b88e:	0864      	lsrs	r4, r4, #1
 800b890:	ed91 7a01 	vldr	s14, [r1, #4]
 800b894:	9101      	str	r1, [sp, #4]
 800b896:	00a3      	lsls	r3, r4, #2
 800b898:	6841      	ldr	r1, [r0, #4]
 800b89a:	0864      	lsrs	r4, r4, #1
 800b89c:	900c      	str	r0, [sp, #48]	; 0x30
 800b89e:	9205      	str	r2, [sp, #20]
 800b8a0:	f101 0610 	add.w	r6, r1, #16
 800b8a4:	4625      	mov	r5, r4
 800b8a6:	940b      	str	r4, [sp, #44]	; 0x2c
 800b8a8:	f101 0408 	add.w	r4, r1, #8
 800b8ac:	9602      	str	r6, [sp, #8]
 800b8ae:	9407      	str	r4, [sp, #28]
 800b8b0:	18d4      	adds	r4, r2, r3
 800b8b2:	1eaa      	subs	r2, r5, #2
 800b8b4:	f101 0518 	add.w	r5, r1, #24
 800b8b8:	18e0      	adds	r0, r4, r3
 800b8ba:	edd4 4a00 	vldr	s9, [r4]
 800b8be:	ed94 4a01 	vldr	s8, [r4, #4]
 800b8c2:	46a6      	mov	lr, r4
 800b8c4:	edd0 6a00 	vldr	s13, [r0]
 800b8c8:	18c7      	adds	r7, r0, r3
 800b8ca:	edd0 7a01 	vldr	s15, [r0, #4]
 800b8ce:	46a0      	mov	r8, r4
 800b8d0:	ee76 5a26 	vadd.f32	s11, s12, s13
 800b8d4:	ed97 5a00 	vldr	s10, [r7]
 800b8d8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b8dc:	4604      	mov	r4, r0
 800b8de:	9506      	str	r5, [sp, #24]
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800b8e6:	900a      	str	r0, [sp, #40]	; 0x28
 800b8e8:	9801      	ldr	r0, [sp, #4]
 800b8ea:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b8ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8f2:	ed97 3a01 	vldr	s6, [r7, #4]
 800b8f6:	ee72 2a85 	vadd.f32	s5, s5, s10
 800b8fa:	46bc      	mov	ip, r7
 800b8fc:	ee76 3a84 	vadd.f32	s7, s13, s8
 800b900:	9704      	str	r7, [sp, #16]
 800b902:	ee36 7a44 	vsub.f32	s14, s12, s8
 800b906:	f8cd e00c 	str.w	lr, [sp, #12]
 800b90a:	ee12 9a90 	vmov	r9, s5
 800b90e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b912:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b916:	1f3e      	subs	r6, r7, #4
 800b918:	f840 9b08 	str.w	r9, [r0], #8
 800b91c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800b920:	edde 2a01 	vldr	s5, [lr, #4]
 800b924:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800b928:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b92c:	eddc 4a01 	vldr	s9, [ip, #4]
 800b930:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b934:	9001      	str	r0, [sp, #4]
 800b936:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b93a:	9805      	ldr	r0, [sp, #20]
 800b93c:	ee13 9a90 	vmov	r9, s7
 800b940:	ee37 7a43 	vsub.f32	s14, s14, s6
 800b944:	ee36 6a24 	vadd.f32	s12, s12, s9
 800b948:	f1ae 0704 	sub.w	r7, lr, #4
 800b94c:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b950:	ee76 6a83 	vadd.f32	s13, s13, s6
 800b954:	ed80 6a01 	vstr	s12, [r0, #4]
 800b958:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b95c:	f848 9b08 	str.w	r9, [r8], #8
 800b960:	edce 4a01 	vstr	s9, [lr, #4]
 800b964:	ee15 ea90 	vmov	lr, s11
 800b968:	f844 eb08 	str.w	lr, [r4], #8
 800b96c:	ee16 ea90 	vmov	lr, s13
 800b970:	9408      	str	r4, [sp, #32]
 800b972:	462c      	mov	r4, r5
 800b974:	ed85 7a01 	vstr	s14, [r5, #4]
 800b978:	9d04      	ldr	r5, [sp, #16]
 800b97a:	f84c eb08 	str.w	lr, [ip], #8
 800b97e:	edc5 7a01 	vstr	s15, [r5, #4]
 800b982:	0855      	lsrs	r5, r2, #1
 800b984:	9509      	str	r5, [sp, #36]	; 0x24
 800b986:	f000 8130 	beq.w	800bbea <arm_cfft_radix8by4_f32+0x36e>
 800b98a:	9805      	ldr	r0, [sp, #20]
 800b98c:	3b08      	subs	r3, #8
 800b98e:	46ab      	mov	fp, r5
 800b990:	f1a4 020c 	sub.w	r2, r4, #12
 800b994:	f100 0510 	add.w	r5, r0, #16
 800b998:	f101 0920 	add.w	r9, r1, #32
 800b99c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800b9a0:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b9a4:	4433      	add	r3, r6
 800b9a6:	3410      	adds	r4, #16
 800b9a8:	4660      	mov	r0, ip
 800b9aa:	4641      	mov	r1, r8
 800b9ac:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800b9b0:	ed54 6a02 	vldr	s13, [r4, #-8]
 800b9b4:	f1bb 0b01 	subs.w	fp, fp, #1
 800b9b8:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b9bc:	f10a 0a08 	add.w	sl, sl, #8
 800b9c0:	edd1 7a00 	vldr	s15, [r1]
 800b9c4:	f105 0508 	add.w	r5, r5, #8
 800b9c8:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800b9cc:	edd0 2a00 	vldr	s5, [r0]
 800b9d0:	ed14 7a01 	vldr	s14, [r4, #-4]
 800b9d4:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b9d8:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b9dc:	f1a2 0208 	sub.w	r2, r2, #8
 800b9e0:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800b9e4:	ed90 2a01 	vldr	s4, [r0, #4]
 800b9e8:	ee36 5a87 	vadd.f32	s10, s13, s14
 800b9ec:	ed91 6a01 	vldr	s12, [r1, #4]
 800b9f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b9f4:	f109 0910 	add.w	r9, r9, #16
 800b9f8:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800b9fc:	f104 0408 	add.w	r4, r4, #8
 800ba00:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800ba04:	f10e 0e18 	add.w	lr, lr, #24
 800ba08:	ee37 3a67 	vsub.f32	s6, s14, s15
 800ba0c:	f1a3 0308 	sub.w	r3, r3, #8
 800ba10:	ed45 6a04 	vstr	s13, [r5, #-16]
 800ba14:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba18:	edd1 6a01 	vldr	s13, [r1, #4]
 800ba1c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800ba20:	edd0 4a01 	vldr	s9, [r0, #4]
 800ba24:	ee33 3a22 	vadd.f32	s6, s6, s5
 800ba28:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ba2c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800ba30:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ba34:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ba38:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800ba3c:	ee35 5a42 	vsub.f32	s10, s10, s4
 800ba40:	ed45 6a03 	vstr	s13, [r5, #-12]
 800ba44:	ee36 2a02 	vadd.f32	s4, s12, s4
 800ba48:	edd6 7a00 	vldr	s15, [r6]
 800ba4c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ba50:	ed97 1a00 	vldr	s2, [r7]
 800ba54:	ee77 2a62 	vsub.f32	s5, s14, s5
 800ba58:	ed92 8a04 	vldr	s16, [r2, #16]
 800ba5c:	ee71 8a27 	vadd.f32	s17, s2, s15
 800ba60:	ed93 aa04 	vldr	s20, [r3, #16]
 800ba64:	ed16 7a01 	vldr	s14, [r6, #-4]
 800ba68:	ee71 7a67 	vsub.f32	s15, s2, s15
 800ba6c:	ed57 0a01 	vldr	s1, [r7, #-4]
 800ba70:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800ba74:	ee38 6a88 	vadd.f32	s12, s17, s16
 800ba78:	edd3 9a03 	vldr	s19, [r3, #12]
 800ba7c:	ee30 0a87 	vadd.f32	s0, s1, s14
 800ba80:	ed92 9a03 	vldr	s18, [r2, #12]
 800ba84:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800ba88:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800ba8c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800ba90:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800ba94:	ee16 ca10 	vmov	ip, s12
 800ba98:	ee30 6a49 	vsub.f32	s12, s0, s18
 800ba9c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800baa0:	f847 c908 	str.w	ip, [r7], #-8
 800baa4:	ee34 4a29 	vadd.f32	s8, s8, s19
 800baa8:	edd2 8a03 	vldr	s17, [r2, #12]
 800baac:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800bab0:	ed93 8a03 	vldr	s16, [r3, #12]
 800bab4:	ee71 0a47 	vsub.f32	s1, s2, s14
 800bab8:	ee30 0a28 	vadd.f32	s0, s0, s17
 800babc:	ee39 1a67 	vsub.f32	s2, s18, s15
 800bac0:	ee36 6a69 	vsub.f32	s12, s12, s19
 800bac4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800bac8:	ee75 5aca 	vsub.f32	s11, s11, s20
 800bacc:	ed87 0a01 	vstr	s0, [r7, #4]
 800bad0:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800bad4:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800bad8:	ee21 8a80 	vmul.f32	s16, s3, s0
 800badc:	ee23 7a26 	vmul.f32	s14, s6, s13
 800bae0:	ee64 7a26 	vmul.f32	s15, s8, s13
 800bae4:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800bae8:	ee24 4a00 	vmul.f32	s8, s8, s0
 800baec:	ee23 3a00 	vmul.f32	s6, s6, s0
 800baf0:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800baf4:	ee24 0a80 	vmul.f32	s0, s9, s0
 800baf8:	ee38 7a07 	vadd.f32	s14, s16, s14
 800bafc:	ee76 6a84 	vadd.f32	s13, s13, s8
 800bb00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bb04:	ee33 3a61 	vsub.f32	s6, s6, s3
 800bb08:	ee17 ca10 	vmov	ip, s14
 800bb0c:	f841 cb08 	str.w	ip, [r1], #8
 800bb10:	ed01 3a01 	vstr	s6, [r1, #-4]
 800bb14:	ed82 0a04 	vstr	s0, [r2, #16]
 800bb18:	edc2 6a03 	vstr	s13, [r2, #12]
 800bb1c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800bb20:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800bb24:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800bb28:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800bb2c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800bb30:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bb34:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800bb38:	ee66 7a27 	vmul.f32	s15, s12, s15
 800bb3c:	ee25 5a26 	vmul.f32	s10, s10, s13
 800bb40:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bb44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb48:	ee34 6a24 	vadd.f32	s12, s8, s9
 800bb4c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800bb50:	ee35 5a63 	vsub.f32	s10, s10, s7
 800bb54:	ee17 ca90 	vmov	ip, s15
 800bb58:	ed04 6a04 	vstr	s12, [r4, #-16]
 800bb5c:	ed04 5a03 	vstr	s10, [r4, #-12]
 800bb60:	f846 c908 	str.w	ip, [r6], #-8
 800bb64:	edc6 6a01 	vstr	s13, [r6, #4]
 800bb68:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800bb6c:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800bb70:	ee62 5a27 	vmul.f32	s11, s4, s15
 800bb74:	ee22 6a87 	vmul.f32	s12, s5, s14
 800bb78:	ee22 2a07 	vmul.f32	s4, s4, s14
 800bb7c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800bb80:	ee61 6a07 	vmul.f32	s13, s2, s14
 800bb84:	ee20 7a87 	vmul.f32	s14, s1, s14
 800bb88:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800bb8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 800bb90:	ee35 6a86 	vadd.f32	s12, s11, s12
 800bb94:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800bb98:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800bb9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bba0:	ee16 ca10 	vmov	ip, s12
 800bba4:	f840 cb08 	str.w	ip, [r0], #8
 800bba8:	ed40 2a01 	vstr	s5, [r0, #-4]
 800bbac:	edc3 0a04 	vstr	s1, [r3, #16]
 800bbb0:	edc3 7a03 	vstr	s15, [r3, #12]
 800bbb4:	f47f aefc 	bne.w	800b9b0 <arm_cfft_radix8by4_f32+0x134>
 800bbb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbba:	9802      	ldr	r0, [sp, #8]
 800bbbc:	00cb      	lsls	r3, r1, #3
 800bbbe:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800bbc2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800bbc6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800bbca:	4498      	add	r8, r3
 800bbcc:	449c      	add	ip, r3
 800bbce:	9102      	str	r1, [sp, #8]
 800bbd0:	9901      	ldr	r1, [sp, #4]
 800bbd2:	4419      	add	r1, r3
 800bbd4:	9101      	str	r1, [sp, #4]
 800bbd6:	9907      	ldr	r1, [sp, #28]
 800bbd8:	4419      	add	r1, r3
 800bbda:	9107      	str	r1, [sp, #28]
 800bbdc:	9908      	ldr	r1, [sp, #32]
 800bbde:	4419      	add	r1, r3
 800bbe0:	9b06      	ldr	r3, [sp, #24]
 800bbe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe6:	9108      	str	r1, [sp, #32]
 800bbe8:	9306      	str	r3, [sp, #24]
 800bbea:	9a01      	ldr	r2, [sp, #4]
 800bbec:	2304      	movs	r3, #4
 800bbee:	9e08      	ldr	r6, [sp, #32]
 800bbf0:	edd2 7a00 	vldr	s15, [r2]
 800bbf4:	ed96 7a00 	vldr	s14, [r6]
 800bbf8:	edd8 2a00 	vldr	s5, [r8]
 800bbfc:	ee77 5a87 	vadd.f32	s11, s15, s14
 800bc00:	ed9c 3a00 	vldr	s6, [ip]
 800bc04:	ed92 6a01 	vldr	s12, [r2, #4]
 800bc08:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bc0c:	edd6 6a01 	vldr	s13, [r6, #4]
 800bc10:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800bc14:	ed9c 2a01 	vldr	s4, [ip, #4]
 800bc18:	ee36 5a26 	vadd.f32	s10, s12, s13
 800bc1c:	edd8 7a01 	vldr	s15, [r8, #4]
 800bc20:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bc24:	9d02      	ldr	r5, [sp, #8]
 800bc26:	ee34 6a83 	vadd.f32	s12, s9, s6
 800bc2a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800bc2e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800bc32:	9805      	ldr	r0, [sp, #20]
 800bc34:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800bc38:	4621      	mov	r1, r4
 800bc3a:	ed82 6a00 	vstr	s12, [r2]
 800bc3e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800bc42:	edd8 3a01 	vldr	s7, [r8, #4]
 800bc46:	ee75 5a67 	vsub.f32	s11, s10, s15
 800bc4a:	eddc 1a01 	vldr	s3, [ip, #4]
 800bc4e:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bc52:	ee75 3a23 	vadd.f32	s7, s10, s7
 800bc56:	ee74 4a83 	vadd.f32	s9, s9, s6
 800bc5a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800bc5e:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800bc62:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc66:	ee36 6a43 	vsub.f32	s12, s12, s6
 800bc6a:	ed82 5a01 	vstr	s10, [r2, #4]
 800bc6e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800bc72:	9a07      	ldr	r2, [sp, #28]
 800bc74:	ee77 7a02 	vadd.f32	s15, s14, s4
 800bc78:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800bc7c:	edd2 2a00 	vldr	s5, [r2]
 800bc80:	ed92 5a01 	vldr	s10, [r2, #4]
 800bc84:	ee64 3a22 	vmul.f32	s7, s8, s5
 800bc88:	ee24 4a05 	vmul.f32	s8, s8, s10
 800bc8c:	ee24 5a85 	vmul.f32	s10, s9, s10
 800bc90:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800bc94:	ee33 5a85 	vadd.f32	s10, s7, s10
 800bc98:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800bc9c:	ed88 5a00 	vstr	s10, [r8]
 800bca0:	edc8 4a01 	vstr	s9, [r8, #4]
 800bca4:	edd5 4a01 	vldr	s9, [r5, #4]
 800bca8:	edd5 6a00 	vldr	s13, [r5]
 800bcac:	9d06      	ldr	r5, [sp, #24]
 800bcae:	ee26 5a26 	vmul.f32	s10, s12, s13
 800bcb2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bcb6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800bcba:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800bcbe:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800bcc2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800bcc6:	ed86 6a01 	vstr	s12, [r6, #4]
 800bcca:	edc6 5a00 	vstr	s11, [r6]
 800bcce:	edd5 5a01 	vldr	s11, [r5, #4]
 800bcd2:	edd5 6a00 	vldr	s13, [r5]
 800bcd6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bcd8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800bcdc:	ee67 6a26 	vmul.f32	s13, s14, s13
 800bce0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bce4:	ee27 7a25 	vmul.f32	s14, s14, s11
 800bce8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bcec:	ee36 7a07 	vadd.f32	s14, s12, s14
 800bcf0:	edcc 7a01 	vstr	s15, [ip, #4]
 800bcf4:	ed8c 7a00 	vstr	s14, [ip]
 800bcf8:	6872      	ldr	r2, [r6, #4]
 800bcfa:	f000 fb09 	bl	800c310 <arm_radix8_butterfly_f32>
 800bcfe:	9803      	ldr	r0, [sp, #12]
 800bd00:	4621      	mov	r1, r4
 800bd02:	6872      	ldr	r2, [r6, #4]
 800bd04:	2304      	movs	r3, #4
 800bd06:	f000 fb03 	bl	800c310 <arm_radix8_butterfly_f32>
 800bd0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	6872      	ldr	r2, [r6, #4]
 800bd10:	2304      	movs	r3, #4
 800bd12:	f000 fafd 	bl	800c310 <arm_radix8_butterfly_f32>
 800bd16:	4621      	mov	r1, r4
 800bd18:	6872      	ldr	r2, [r6, #4]
 800bd1a:	2304      	movs	r3, #4
 800bd1c:	9804      	ldr	r0, [sp, #16]
 800bd1e:	b00f      	add	sp, #60	; 0x3c
 800bd20:	ecbd 8b06 	vpop	{d8-d10}
 800bd24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	f000 baf2 	b.w	800c310 <arm_radix8_butterfly_f32>

0800bd2c <arm_cfft_f32>:
 800bd2c:	2a01      	cmp	r2, #1
 800bd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd32:	4606      	mov	r6, r0
 800bd34:	4617      	mov	r7, r2
 800bd36:	460c      	mov	r4, r1
 800bd38:	4698      	mov	r8, r3
 800bd3a:	8805      	ldrh	r5, [r0, #0]
 800bd3c:	d053      	beq.n	800bde6 <arm_cfft_f32+0xba>
 800bd3e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800bd42:	d04b      	beq.n	800bddc <arm_cfft_f32+0xb0>
 800bd44:	d916      	bls.n	800bd74 <arm_cfft_f32+0x48>
 800bd46:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800bd4a:	d01a      	beq.n	800bd82 <arm_cfft_f32+0x56>
 800bd4c:	d95a      	bls.n	800be04 <arm_cfft_f32+0xd8>
 800bd4e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800bd52:	d043      	beq.n	800bddc <arm_cfft_f32+0xb0>
 800bd54:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800bd58:	d105      	bne.n	800bd66 <arm_cfft_f32+0x3a>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	6872      	ldr	r2, [r6, #4]
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fad5 	bl	800c310 <arm_radix8_butterfly_f32>
 800bd66:	f1b8 0f00 	cmp.w	r8, #0
 800bd6a:	d111      	bne.n	800bd90 <arm_cfft_f32+0x64>
 800bd6c:	2f01      	cmp	r7, #1
 800bd6e:	d016      	beq.n	800bd9e <arm_cfft_f32+0x72>
 800bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd74:	2d20      	cmp	r5, #32
 800bd76:	d031      	beq.n	800bddc <arm_cfft_f32+0xb0>
 800bd78:	d948      	bls.n	800be0c <arm_cfft_f32+0xe0>
 800bd7a:	2d40      	cmp	r5, #64	; 0x40
 800bd7c:	d0ed      	beq.n	800bd5a <arm_cfft_f32+0x2e>
 800bd7e:	2d80      	cmp	r5, #128	; 0x80
 800bd80:	d1f1      	bne.n	800bd66 <arm_cfft_f32+0x3a>
 800bd82:	4621      	mov	r1, r4
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7ff fca9 	bl	800b6dc <arm_cfft_radix8by2_f32>
 800bd8a:	f1b8 0f00 	cmp.w	r8, #0
 800bd8e:	d0ed      	beq.n	800bd6c <arm_cfft_f32+0x40>
 800bd90:	68b2      	ldr	r2, [r6, #8]
 800bd92:	4620      	mov	r0, r4
 800bd94:	89b1      	ldrh	r1, [r6, #12]
 800bd96:	f7f4 faa3 	bl	80002e0 <arm_bitreversal_32>
 800bd9a:	2f01      	cmp	r7, #1
 800bd9c:	d1e8      	bne.n	800bd70 <arm_cfft_f32+0x44>
 800bd9e:	ee07 5a90 	vmov	s15, r5
 800bda2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	d0de      	beq.n	800bd70 <arm_cfft_f32+0x44>
 800bdb2:	f104 0108 	add.w	r1, r4, #8
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bdc2:	3108      	adds	r1, #8
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bdca:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bdce:	ed01 7a04 	vstr	s14, [r1, #-16]
 800bdd2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bdd6:	d1ef      	bne.n	800bdb8 <arm_cfft_f32+0x8c>
 800bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bddc:	4621      	mov	r1, r4
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff fd4c 	bl	800b87c <arm_cfft_radix8by4_f32>
 800bde4:	e7bf      	b.n	800bd66 <arm_cfft_f32+0x3a>
 800bde6:	b1a5      	cbz	r5, 800be12 <arm_cfft_f32+0xe6>
 800bde8:	f101 030c 	add.w	r3, r1, #12
 800bdec:	2200      	movs	r2, #0
 800bdee:	ed53 7a02 	vldr	s15, [r3, #-8]
 800bdf2:	3201      	adds	r2, #1
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	eef1 7a67 	vneg.f32	s15, s15
 800bdfa:	4295      	cmp	r5, r2
 800bdfc:	ed43 7a04 	vstr	s15, [r3, #-16]
 800be00:	d1f5      	bne.n	800bdee <arm_cfft_f32+0xc2>
 800be02:	e79c      	b.n	800bd3e <arm_cfft_f32+0x12>
 800be04:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800be08:	d0a7      	beq.n	800bd5a <arm_cfft_f32+0x2e>
 800be0a:	e7ac      	b.n	800bd66 <arm_cfft_f32+0x3a>
 800be0c:	2d10      	cmp	r5, #16
 800be0e:	d0b8      	beq.n	800bd82 <arm_cfft_f32+0x56>
 800be10:	e7a9      	b.n	800bd66 <arm_cfft_f32+0x3a>
 800be12:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800be16:	d896      	bhi.n	800bd46 <arm_cfft_f32+0x1a>
 800be18:	e7ac      	b.n	800bd74 <arm_cfft_f32+0x48>
 800be1a:	bf00      	nop

0800be1c <arm_fir_decimate_init_f32>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	9f07      	ldr	r7, [sp, #28]
 800be20:	fbb7 f4f2 	udiv	r4, r7, r2
 800be24:	fb02 7414 	mls	r4, r2, r4, r7
 800be28:	b994      	cbnz	r4, 800be50 <arm_fir_decimate_init_f32+0x34>
 800be2a:	468e      	mov	lr, r1
 800be2c:	4616      	mov	r6, r2
 800be2e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800be32:	4605      	mov	r5, r0
 800be34:	4472      	add	r2, lr
 800be36:	8069      	strh	r1, [r5, #2]
 800be38:	6043      	str	r3, [r0, #4]
 800be3a:	4621      	mov	r1, r4
 800be3c:	443a      	add	r2, r7
 800be3e:	9806      	ldr	r0, [sp, #24]
 800be40:	0092      	lsls	r2, r2, #2
 800be42:	f000 fd91 	bl	800c968 <memset>
 800be46:	9b06      	ldr	r3, [sp, #24]
 800be48:	702e      	strb	r6, [r5, #0]
 800be4a:	4620      	mov	r0, r4
 800be4c:	60ab      	str	r3, [r5, #8]
 800be4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be50:	f06f 0001 	mvn.w	r0, #1
 800be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be56:	bf00      	nop

0800be58 <arm_fir_decimate_f32>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	7804      	ldrb	r4, [r0, #0]
 800be5e:	4683      	mov	fp, r0
 800be60:	b08d      	sub	sp, #52	; 0x34
 800be62:	8840      	ldrh	r0, [r0, #2]
 800be64:	f8db 5004 	ldr.w	r5, [fp, #4]
 800be68:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 800be6c:	4696      	mov	lr, r2
 800be6e:	9208      	str	r2, [sp, #32]
 800be70:	9502      	str	r5, [sp, #8]
 800be72:	462a      	mov	r2, r5
 800be74:	f8db 6008 	ldr.w	r6, [fp, #8]
 800be78:	4481      	add	r9, r0
 800be7a:	9009      	str	r0, [sp, #36]	; 0x24
 800be7c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800be80:	fbb3 f3f4 	udiv	r3, r3, r4
 800be84:	089d      	lsrs	r5, r3, #2
 800be86:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 800be8a:	950a      	str	r5, [sp, #40]	; 0x28
 800be8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800be8e:	2d00      	cmp	r5, #0
 800be90:	f000 80f8 	beq.w	800c084 <arm_fir_decimate_f32+0x22c>
 800be94:	0883      	lsrs	r3, r0, #2
 800be96:	f000 0003 	and.w	r0, r0, #3
 800be9a:	462f      	mov	r7, r5
 800be9c:	f8cd b010 	str.w	fp, [sp, #16]
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	011b      	lsls	r3, r3, #4
 800bea4:	9006      	str	r0, [sp, #24]
 800bea6:	f10e 0a10 	add.w	sl, lr, #16
 800beaa:	441a      	add	r2, r3
 800beac:	469b      	mov	fp, r3
 800beae:	4648      	mov	r0, r9
 800beb0:	9703      	str	r7, [sp, #12]
 800beb2:	9207      	str	r2, [sp, #28]
 800beb4:	f8cd 9004 	str.w	r9, [sp, #4]
 800beb8:	00a4      	lsls	r4, r4, #2
 800beba:	460a      	mov	r2, r1
 800bebc:	4623      	mov	r3, r4
 800bebe:	f852 5b04 	ldr.w	r5, [r2], #4
 800bec2:	3b01      	subs	r3, #1
 800bec4:	f840 5b04 	str.w	r5, [r0], #4
 800bec8:	d1f9      	bne.n	800bebe <arm_fir_decimate_f32+0x66>
 800beca:	9b04      	ldr	r3, [sp, #16]
 800becc:	00a4      	lsls	r4, r4, #2
 800bece:	9f05      	ldr	r7, [sp, #20]
 800bed0:	f893 8000 	ldrb.w	r8, [r3]
 800bed4:	4421      	add	r1, r4
 800bed6:	9b01      	ldr	r3, [sp, #4]
 800bed8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800bedc:	ed9f 1abb 	vldr	s2, [pc, #748]	; 800c1cc <arm_fir_decimate_f32+0x374>
 800bee0:	4423      	add	r3, r4
 800bee2:	eb06 0e08 	add.w	lr, r6, r8
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	eb0e 0c08 	add.w	ip, lr, r8
 800beec:	eb0c 0908 	add.w	r9, ip, r8
 800bef0:	2f00      	cmp	r7, #0
 800bef2:	f000 8161 	beq.w	800c1b8 <arm_fir_decimate_f32+0x360>
 800bef6:	9b02      	ldr	r3, [sp, #8]
 800bef8:	eef0 5a41 	vmov.f32	s11, s2
 800befc:	eeb0 5a41 	vmov.f32	s10, s2
 800bf00:	f106 0410 	add.w	r4, r6, #16
 800bf04:	eef0 4a41 	vmov.f32	s9, s2
 800bf08:	f103 0510 	add.w	r5, r3, #16
 800bf0c:	f10e 0010 	add.w	r0, lr, #16
 800bf10:	f10c 0210 	add.w	r2, ip, #16
 800bf14:	f109 0310 	add.w	r3, r9, #16
 800bf18:	ed55 6a04 	vldr	s13, [r5, #-16]
 800bf1c:	3f01      	subs	r7, #1
 800bf1e:	ed13 6a04 	vldr	s12, [r3, #-16]
 800bf22:	f105 0510 	add.w	r5, r5, #16
 800bf26:	ed14 4a04 	vldr	s8, [r4, #-16]
 800bf2a:	f100 0010 	add.w	r0, r0, #16
 800bf2e:	ed50 1a08 	vldr	s3, [r0, #-32]	; 0xffffffe0
 800bf32:	f104 0410 	add.w	r4, r4, #16
 800bf36:	ed52 2a04 	vldr	s5, [r2, #-16]
 800bf3a:	ee26 4a84 	vmul.f32	s8, s13, s8
 800bf3e:	ee66 1aa1 	vmul.f32	s3, s13, s3
 800bf42:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800bf46:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800bf4a:	ed54 3a07 	vldr	s7, [r4, #-28]	; 0xffffffe4
 800bf4e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bf52:	ed10 2a07 	vldr	s4, [r0, #-28]	; 0xffffffe4
 800bf56:	ed13 6a03 	vldr	s12, [r3, #-12]
 800bf5a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800bf5e:	ed12 3a03 	vldr	s6, [r2, #-12]
 800bf62:	ee31 5a85 	vadd.f32	s10, s3, s10
 800bf66:	ee72 5aa5 	vadd.f32	s11, s5, s11
 800bf6a:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800bf6e:	ee67 3a23 	vmul.f32	s7, s14, s7
 800bf72:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800bf76:	ee27 2a02 	vmul.f32	s4, s14, s4
 800bf7a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800bf7e:	ee27 3a03 	vmul.f32	s6, s14, s6
 800bf82:	ed52 2a02 	vldr	s5, [r2, #-8]
 800bf86:	ee76 6a81 	vadd.f32	s13, s13, s2
 800bf8a:	ed10 0a05 	vldr	s0, [r0, #-20]	; 0xffffffec
 800bf8e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bf92:	ed13 6a02 	vldr	s12, [r3, #-8]
 800bf96:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800bf9a:	ed15 1a05 	vldr	s2, [r5, #-20]	; 0xffffffec
 800bf9e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800bfa2:	ed52 0a01 	vldr	s1, [r2, #-4]
 800bfa6:	ee32 2a05 	vadd.f32	s4, s4, s10
 800bfaa:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800bfae:	ee27 5aa1 	vmul.f32	s10, s15, s3
 800bfb2:	ed53 1a01 	vldr	s3, [r3, #-4]
 800bfb6:	ee33 3a25 	vadd.f32	s6, s6, s11
 800bfba:	f102 0210 	add.w	r2, r2, #16
 800bfbe:	ee67 5aa2 	vmul.f32	s11, s15, s5
 800bfc2:	f103 0310 	add.w	r3, r3, #16
 800bfc6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bfca:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bfce:	ee34 6aa3 	vadd.f32	s12, s9, s7
 800bfd2:	ee61 4a04 	vmul.f32	s9, s2, s8
 800bfd6:	ee75 3a02 	vadd.f32	s7, s10, s4
 800bfda:	ee35 4a83 	vadd.f32	s8, s11, s6
 800bfde:	ee21 5a00 	vmul.f32	s10, s2, s0
 800bfe2:	ee61 5a20 	vmul.f32	s11, s2, s1
 800bfe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfea:	ee21 1a21 	vmul.f32	s2, s2, s3
 800bfee:	ee74 4a86 	vadd.f32	s9, s9, s12
 800bff2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800bff6:	ee75 5a84 	vadd.f32	s11, s11, s8
 800bffa:	ee31 1a27 	vadd.f32	s2, s2, s15
 800bffe:	d18b      	bne.n	800bf18 <arm_fir_decimate_f32+0xc0>
 800c000:	445e      	add	r6, fp
 800c002:	44de      	add	lr, fp
 800c004:	44dc      	add	ip, fp
 800c006:	eb09 000b 	add.w	r0, r9, fp
 800c00a:	9a07      	ldr	r2, [sp, #28]
 800c00c:	9b06      	ldr	r3, [sp, #24]
 800c00e:	b1db      	cbz	r3, 800c048 <arm_fir_decimate_f32+0x1f0>
 800c010:	ecb2 6a01 	vldmia	r2!, {s12}
 800c014:	3b01      	subs	r3, #1
 800c016:	ecf6 6a01 	vldmia	r6!, {s13}
 800c01a:	ecbe 7a01 	vldmia	lr!, {s14}
 800c01e:	ecfc 7a01 	vldmia	ip!, {s15}
 800c022:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c026:	ecb0 4a01 	vldmia	r0!, {s8}
 800c02a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c02e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c032:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c036:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800c03a:	ee35 5a07 	vadd.f32	s10, s10, s14
 800c03e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c042:	ee31 1a06 	vadd.f32	s2, s2, s12
 800c046:	d1e3      	bne.n	800c010 <arm_fir_decimate_f32+0x1b8>
 800c048:	9b03      	ldr	r3, [sp, #12]
 800c04a:	eb09 0608 	add.w	r6, r9, r8
 800c04e:	ed4a 4a04 	vstr	s9, [sl, #-16]
 800c052:	f10a 0a10 	add.w	sl, sl, #16
 800c056:	3b01      	subs	r3, #1
 800c058:	ed0a 5a07 	vstr	s10, [sl, #-28]	; 0xffffffe4
 800c05c:	ed4a 5a06 	vstr	s11, [sl, #-24]	; 0xffffffe8
 800c060:	ed0a 1a05 	vstr	s2, [sl, #-20]	; 0xffffffec
 800c064:	9303      	str	r3, [sp, #12]
 800c066:	d003      	beq.n	800c070 <arm_fir_decimate_f32+0x218>
 800c068:	9b04      	ldr	r3, [sp, #16]
 800c06a:	9801      	ldr	r0, [sp, #4]
 800c06c:	781c      	ldrb	r4, [r3, #0]
 800c06e:	e723      	b.n	800beb8 <arm_fir_decimate_f32+0x60>
 800c070:	9b08      	ldr	r3, [sp, #32]
 800c072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c074:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c078:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c07c:	f8dd b010 	ldr.w	fp, [sp, #16]
 800c080:	9308      	str	r3, [sp, #32]
 800c082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c084:	2b00      	cmp	r3, #0
 800c086:	d061      	beq.n	800c14c <arm_fir_decimate_f32+0x2f4>
 800c088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c08a:	4698      	mov	r8, r3
 800c08c:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c090:	0895      	lsrs	r5, r2, #2
 800c092:	f002 0703 	and.w	r7, r2, #3
 800c096:	9a02      	ldr	r2, [sp, #8]
 800c098:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800c09c:	eb02 0c0e 	add.w	ip, r2, lr
 800c0a0:	f89b 4000 	ldrb.w	r4, [fp]
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	460a      	mov	r2, r1
 800c0a8:	4623      	mov	r3, r4
 800c0aa:	ecf2 7a01 	vldmia	r2!, {s15}
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	ece0 7a01 	vstmia	r0!, {s15}
 800c0b4:	d1f9      	bne.n	800c0aa <arm_fir_decimate_f32+0x252>
 800c0b6:	00a4      	lsls	r4, r4, #2
 800c0b8:	44a1      	add	r9, r4
 800c0ba:	4421      	add	r1, r4
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	d076      	beq.n	800c1ae <arm_fir_decimate_f32+0x356>
 800c0c0:	9b02      	ldr	r3, [sp, #8]
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	eddf 7a41 	vldr	s15, [pc, #260]	; 800c1cc <arm_fir_decimate_f32+0x374>
 800c0c8:	f103 0210 	add.w	r2, r3, #16
 800c0cc:	f106 0310 	add.w	r3, r6, #16
 800c0d0:	ed52 6a04 	vldr	s13, [r2, #-16]
 800c0d4:	3801      	subs	r0, #1
 800c0d6:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c0da:	f102 0210 	add.w	r2, r2, #16
 800c0de:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800c0e2:	f103 0310 	add.w	r3, r3, #16
 800c0e6:	ee66 5a87 	vmul.f32	s11, s13, s14
 800c0ea:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800c0ee:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 800c0f2:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c0f6:	ed13 7a06 	vldr	s14, [r3, #-24]	; 0xffffffe8
 800c0fa:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800c0fe:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800c102:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c106:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800c10a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800c10e:	ee25 7a87 	vmul.f32	s14, s11, s14
 800c112:	ee76 7a26 	vadd.f32	s15, s12, s13
 800c116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c11a:	d1d9      	bne.n	800c0d0 <arm_fir_decimate_f32+0x278>
 800c11c:	eb06 020e 	add.w	r2, r6, lr
 800c120:	4660      	mov	r0, ip
 800c122:	b157      	cbz	r7, 800c13a <arm_fir_decimate_f32+0x2e2>
 800c124:	463b      	mov	r3, r7
 800c126:	ecf0 6a01 	vldmia	r0!, {s13}
 800c12a:	3b01      	subs	r3, #1
 800c12c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c130:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c134:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c138:	d1f5      	bne.n	800c126 <arm_fir_decimate_f32+0x2ce>
 800c13a:	f89b 3000 	ldrb.w	r3, [fp]
 800c13e:	f1b8 0801 	subs.w	r8, r8, #1
 800c142:	ecea 7a01 	vstmia	sl!, {s15}
 800c146:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800c14a:	d1a9      	bne.n	800c0a0 <arm_fir_decimate_f32+0x248>
 800c14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14e:	f8db 4008 	ldr.w	r4, [fp, #8]
 800c152:	1e59      	subs	r1, r3, #1
 800c154:	088f      	lsrs	r7, r1, #2
 800c156:	d01d      	beq.n	800c194 <arm_fir_decimate_f32+0x33c>
 800c158:	f104 0210 	add.w	r2, r4, #16
 800c15c:	f106 0310 	add.w	r3, r6, #16
 800c160:	4638      	mov	r0, r7
 800c162:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800c166:	3801      	subs	r0, #1
 800c168:	f103 0310 	add.w	r3, r3, #16
 800c16c:	f102 0210 	add.w	r2, r2, #16
 800c170:	f842 5c20 	str.w	r5, [r2, #-32]
 800c174:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800c178:	f842 5c1c 	str.w	r5, [r2, #-28]
 800c17c:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800c180:	f842 5c18 	str.w	r5, [r2, #-24]
 800c184:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800c188:	f842 5c14 	str.w	r5, [r2, #-20]
 800c18c:	d1e9      	bne.n	800c162 <arm_fir_decimate_f32+0x30a>
 800c18e:	013b      	lsls	r3, r7, #4
 800c190:	441c      	add	r4, r3
 800c192:	441e      	add	r6, r3
 800c194:	f011 0303 	ands.w	r3, r1, #3
 800c198:	d006      	beq.n	800c1a8 <arm_fir_decimate_f32+0x350>
 800c19a:	4622      	mov	r2, r4
 800c19c:	f856 1b04 	ldr.w	r1, [r6], #4
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	f842 1b04 	str.w	r1, [r2], #4
 800c1a6:	d1f9      	bne.n	800c19c <arm_fir_decimate_f32+0x344>
 800c1a8:	b00d      	add	sp, #52	; 0x34
 800c1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ae:	9802      	ldr	r0, [sp, #8]
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	eddf 7a06 	vldr	s15, [pc, #24]	; 800c1cc <arm_fir_decimate_f32+0x374>
 800c1b6:	e7b4      	b.n	800c122 <arm_fir_decimate_f32+0x2ca>
 800c1b8:	4648      	mov	r0, r9
 800c1ba:	9a02      	ldr	r2, [sp, #8]
 800c1bc:	eef0 5a41 	vmov.f32	s11, s2
 800c1c0:	eeb0 5a41 	vmov.f32	s10, s2
 800c1c4:	eef0 4a41 	vmov.f32	s9, s2
 800c1c8:	e720      	b.n	800c00c <arm_fir_decimate_f32+0x1b4>
 800c1ca:	bf00      	nop
 800c1cc:	00000000 	.word	0x00000000

0800c1d0 <arm_cmplx_mult_cmplx_f32>:
 800c1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1d2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c1d6:	d073      	beq.n	800c2c0 <arm_cmplx_mult_cmplx_f32+0xf0>
 800c1d8:	f100 0620 	add.w	r6, r0, #32
 800c1dc:	f101 0520 	add.w	r5, r1, #32
 800c1e0:	f102 0420 	add.w	r4, r2, #32
 800c1e4:	4677      	mov	r7, lr
 800c1e6:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800c1ea:	3f01      	subs	r7, #1
 800c1ec:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800c1f0:	f106 0620 	add.w	r6, r6, #32
 800c1f4:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800c1f8:	f105 0520 	add.w	r5, r5, #32
 800c1fc:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800c200:	ee27 3a27 	vmul.f32	s6, s14, s15
 800c204:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c208:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800c20c:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800c210:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800c214:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c218:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800c21c:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800c220:	ee66 3a27 	vmul.f32	s7, s12, s15
 800c224:	ee66 5a05 	vmul.f32	s11, s12, s10
 800c228:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800c22c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c230:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800c234:	ee25 5a22 	vmul.f32	s10, s10, s5
 800c238:	f104 0420 	add.w	r4, r4, #32
 800c23c:	ee33 4a44 	vsub.f32	s8, s6, s8
 800c240:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800c244:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c248:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800c24c:	ee67 4a06 	vmul.f32	s9, s14, s12
 800c250:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800c254:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c258:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800c25c:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800c260:	ee66 5a05 	vmul.f32	s11, s12, s10
 800c264:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800c268:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c26c:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800c270:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c274:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800c278:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800c27c:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800c280:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800c284:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800c288:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c28c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c290:	ee67 7a84 	vmul.f32	s15, s15, s8
 800c294:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800c298:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c29c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2a4:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c2a8:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800c2ac:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800c2b0:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800c2b4:	d197      	bne.n	800c1e6 <arm_cmplx_mult_cmplx_f32+0x16>
 800c2b6:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800c2ba:	4420      	add	r0, r4
 800c2bc:	4421      	add	r1, r4
 800c2be:	4422      	add	r2, r4
 800c2c0:	f013 0303 	ands.w	r3, r3, #3
 800c2c4:	d022      	beq.n	800c30c <arm_cmplx_mult_cmplx_f32+0x13c>
 800c2c6:	3008      	adds	r0, #8
 800c2c8:	3108      	adds	r1, #8
 800c2ca:	3208      	adds	r2, #8
 800c2cc:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	ed11 7a02 	vldr	s14, [r1, #-8]
 800c2d6:	f100 0008 	add.w	r0, r0, #8
 800c2da:	ed50 6a03 	vldr	s13, [r0, #-12]
 800c2de:	f101 0108 	add.w	r1, r1, #8
 800c2e2:	ed51 5a03 	vldr	s11, [r1, #-12]
 800c2e6:	ee27 6a87 	vmul.f32	s12, s15, s14
 800c2ea:	ee26 7a87 	vmul.f32	s14, s13, s14
 800c2ee:	f102 0208 	add.w	r2, r2, #8
 800c2f2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c2f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c2fa:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c2fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c302:	ed42 6a04 	vstr	s13, [r2, #-16]
 800c306:	ed42 7a03 	vstr	s15, [r2, #-12]
 800c30a:	d1df      	bne.n	800c2cc <arm_cmplx_mult_cmplx_f32+0xfc>
 800c30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c30e:	bf00      	nop

0800c310 <arm_radix8_butterfly_f32>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	469e      	mov	lr, r3
 800c316:	4603      	mov	r3, r0
 800c318:	468a      	mov	sl, r1
 800c31a:	468b      	mov	fp, r1
 800c31c:	3304      	adds	r3, #4
 800c31e:	ed2d 8b10 	vpush	{d8-d15}
 800c322:	469c      	mov	ip, r3
 800c324:	b09d      	sub	sp, #116	; 0x74
 800c326:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800c634 <arm_radix8_butterfly_f32+0x324>
 800c32a:	9019      	str	r0, [sp, #100]	; 0x64
 800c32c:	921a      	str	r2, [sp, #104]	; 0x68
 800c32e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c330:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c334:	f04f 0800 	mov.w	r8, #0
 800c338:	461a      	mov	r2, r3
 800c33a:	9311      	str	r3, [sp, #68]	; 0x44
 800c33c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c340:	4611      	mov	r1, r2
 800c342:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	0053      	lsls	r3, r2, #1
 800c34a:	18d5      	adds	r5, r2, r3
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	0113      	lsls	r3, r2, #4
 800c350:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c352:	194c      	adds	r4, r1, r5
 800c354:	eb02 0609 	add.w	r6, r2, r9
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c35e:	4613      	mov	r3, r2
 800c360:	190a      	adds	r2, r1, r4
 800c362:	eb06 0709 	add.w	r7, r6, r9
 800c366:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c36a:	1888      	adds	r0, r1, r2
 800c36c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c370:	4401      	add	r1, r0
 800c372:	3204      	adds	r2, #4
 800c374:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c378:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c37c:	9b00      	ldr	r3, [sp, #0]
 800c37e:	3104      	adds	r1, #4
 800c380:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800c384:	44d8      	add	r8, fp
 800c386:	ed90 7a00 	vldr	s14, [r0]
 800c38a:	ed94 5a00 	vldr	s10, [r4]
 800c38e:	45c2      	cmp	sl, r8
 800c390:	edd7 3a00 	vldr	s7, [r7]
 800c394:	ed96 6a00 	vldr	s12, [r6]
 800c398:	ee37 1a85 	vadd.f32	s2, s15, s10
 800c39c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c3a0:	ee73 4a87 	vadd.f32	s9, s7, s14
 800c3a4:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800c3a8:	edd5 7a00 	vldr	s15, [r5]
 800c3ac:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800c3b0:	ed11 7a01 	vldr	s14, [r1, #-4]
 800c3b4:	ee36 2a26 	vadd.f32	s4, s12, s13
 800c3b8:	ee37 4a87 	vadd.f32	s8, s15, s14
 800c3bc:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c3c0:	ee71 5a24 	vadd.f32	s11, s2, s9
 800c3c4:	ee32 6a04 	vadd.f32	s12, s4, s8
 800c3c8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c3cc:	ee31 1a64 	vsub.f32	s2, s2, s9
 800c3d0:	ee75 4a86 	vadd.f32	s9, s11, s12
 800c3d4:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c3d8:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800c3dc:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800c3e0:	ee32 2a44 	vsub.f32	s4, s4, s8
 800c3e4:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c3e8:	ed94 0a01 	vldr	s0, [r4, #4]
 800c3ec:	edc4 5a00 	vstr	s11, [r4]
 800c3f0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c3f4:	edd6 5a01 	vldr	s11, [r6, #4]
 800c3f8:	edd5 2a01 	vldr	s5, [r5, #4]
 800c3fc:	ee75 1a27 	vadd.f32	s3, s10, s15
 800c400:	ed92 4a00 	vldr	s8, [r2]
 800c404:	ee75 7a67 	vsub.f32	s15, s10, s15
 800c408:	edd1 4a00 	vldr	s9, [r1]
 800c40c:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c410:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800c414:	ed9c 6a00 	vldr	s12, [ip]
 800c418:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800c41c:	edd0 0a01 	vldr	s1, [r0, #4]
 800c420:	ed97 5a01 	vldr	s10, [r7, #4]
 800c424:	ee35 4a84 	vadd.f32	s8, s11, s8
 800c428:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800c42c:	ee73 5a26 	vadd.f32	s11, s6, s13
 800c430:	ee76 2a00 	vadd.f32	s5, s12, s0
 800c434:	ee73 6a66 	vsub.f32	s13, s6, s13
 800c438:	ee36 6a40 	vsub.f32	s12, s12, s0
 800c43c:	ee35 0a20 	vadd.f32	s0, s10, s1
 800c440:	ee65 5a89 	vmul.f32	s11, s11, s18
 800c444:	ee35 5a60 	vsub.f32	s10, s10, s1
 800c448:	ee32 3a80 	vadd.f32	s6, s5, s0
 800c44c:	ee74 0a24 	vadd.f32	s1, s8, s9
 800c450:	ee66 6a89 	vmul.f32	s13, s13, s18
 800c454:	ee74 4a64 	vsub.f32	s9, s8, s9
 800c458:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800c45c:	ee75 2a25 	vadd.f32	s5, s10, s11
 800c460:	ee33 0a20 	vadd.f32	s0, s6, s1
 800c464:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c468:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c46c:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c470:	ed8c 0a00 	vstr	s0, [ip]
 800c474:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c478:	449c      	add	ip, r3
 800c47a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800c47e:	ed84 3a01 	vstr	s6, [r4, #4]
 800c482:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800c486:	441c      	add	r4, r3
 800c488:	ee71 3a24 	vadd.f32	s7, s2, s9
 800c48c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c490:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800c494:	edc7 3a00 	vstr	s7, [r7]
 800c498:	ee34 1a42 	vsub.f32	s2, s8, s4
 800c49c:	edc0 4a00 	vstr	s9, [r0]
 800c4a0:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800c4a4:	ee75 4a46 	vsub.f32	s9, s10, s12
 800c4a8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c4ac:	ed87 1a01 	vstr	s2, [r7, #4]
 800c4b0:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800c4b4:	441f      	add	r7, r3
 800c4b6:	ee32 4a04 	vadd.f32	s8, s4, s8
 800c4ba:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800c4be:	ee36 6a05 	vadd.f32	s12, s12, s10
 800c4c2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c4c6:	ed80 4a01 	vstr	s8, [r0, #4]
 800c4ca:	ed86 3a00 	vstr	s6, [r6]
 800c4ce:	4418      	add	r0, r3
 800c4d0:	ed41 1a01 	vstr	s3, [r1, #-4]
 800c4d4:	ed42 3a01 	vstr	s7, [r2, #-4]
 800c4d8:	edc5 7a00 	vstr	s15, [r5]
 800c4dc:	edc6 4a01 	vstr	s9, [r6, #4]
 800c4e0:	441e      	add	r6, r3
 800c4e2:	ed81 6a00 	vstr	s12, [r1]
 800c4e6:	4419      	add	r1, r3
 800c4e8:	edc2 5a00 	vstr	s11, [r2]
 800c4ec:	441a      	add	r2, r3
 800c4ee:	ed85 7a01 	vstr	s14, [r5, #4]
 800c4f2:	441d      	add	r5, r3
 800c4f4:	f63f af44 	bhi.w	800c380 <arm_radix8_butterfly_f32+0x70>
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4fc:	2b07      	cmp	r3, #7
 800c4fe:	f240 81f4 	bls.w	800c8ea <arm_radix8_butterfly_f32+0x5da>
 800c502:	9901      	ldr	r1, [sp, #4]
 800c504:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800c508:	9d02      	ldr	r5, [sp, #8]
 800c50a:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800c50e:	3101      	adds	r1, #1
 800c510:	eb04 000e 	add.w	r0, r4, lr
 800c514:	00e4      	lsls	r4, r4, #3
 800c516:	3508      	adds	r5, #8
 800c518:	4419      	add	r1, r3
 800c51a:	eb00 0c0e 	add.w	ip, r0, lr
 800c51e:	9413      	str	r4, [sp, #76]	; 0x4c
 800c520:	00c0      	lsls	r0, r0, #3
 800c522:	185e      	adds	r6, r3, r1
 800c524:	4617      	mov	r7, r2
 800c526:	9218      	str	r2, [sp, #96]	; 0x60
 800c528:	f109 0908 	add.w	r9, r9, #8
 800c52c:	199c      	adds	r4, r3, r6
 800c52e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c530:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c532:	9012      	str	r0, [sp, #72]	; 0x48
 800c534:	195d      	adds	r5, r3, r5
 800c536:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c538:	443a      	add	r2, r7
 800c53a:	950c      	str	r5, [sp, #48]	; 0x30
 800c53c:	4698      	mov	r8, r3
 800c53e:	4420      	add	r0, r4
 800c540:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c542:	19d7      	adds	r7, r2, r7
 800c544:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c548:	4405      	add	r5, r0
 800c54a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c54e:	9710      	str	r7, [sp, #64]	; 0x40
 800c550:	eb0c 070e 	add.w	r7, ip, lr
 800c554:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c558:	3404      	adds	r4, #4
 800c55a:	3004      	adds	r0, #4
 800c55c:	44c8      	add	r8, r9
 800c55e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800c562:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c564:	940a      	str	r4, [sp, #40]	; 0x28
 800c566:	9009      	str	r0, [sp, #36]	; 0x24
 800c568:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c56c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c56e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c572:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c574:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800c578:	eb07 080e 	add.w	r8, r7, lr
 800c57c:	eb04 0900 	add.w	r9, r4, r0
 800c580:	00f8      	lsls	r0, r7, #3
 800c582:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800c586:	3504      	adds	r5, #4
 800c588:	4607      	mov	r7, r0
 800c58a:	9017      	str	r0, [sp, #92]	; 0x5c
 800c58c:	910b      	str	r1, [sp, #44]	; 0x2c
 800c58e:	4618      	mov	r0, r3
 800c590:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800c594:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c596:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800c59a:	18e3      	adds	r3, r4, r3
 800c59c:	9508      	str	r5, [sp, #32]
 800c59e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c5a0:	910e      	str	r1, [sp, #56]	; 0x38
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	eb04 0805 	add.w	r8, r4, r5
 800c5a8:	9304      	str	r3, [sp, #16]
 800c5aa:	19e5      	adds	r5, r4, r7
 800c5ac:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800c5b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c5b2:	9316      	str	r3, [sp, #88]	; 0x58
 800c5b4:	190b      	adds	r3, r1, r4
 800c5b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c5b8:	9505      	str	r5, [sp, #20]
 800c5ba:	9303      	str	r3, [sp, #12]
 800c5bc:	f100 0308 	add.w	r3, r0, #8
 800c5c0:	9707      	str	r7, [sp, #28]
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	9306      	str	r3, [sp, #24]
 800c5ca:	9b00      	ldr	r3, [sp, #0]
 800c5cc:	ed90 fa00 	vldr	s30, [r0]
 800c5d0:	edd0 ba01 	vldr	s23, [r0, #4]
 800c5d4:	9803      	ldr	r0, [sp, #12]
 800c5d6:	9903      	ldr	r1, [sp, #12]
 800c5d8:	ed90 ba01 	vldr	s22, [r0, #4]
 800c5dc:	9804      	ldr	r0, [sp, #16]
 800c5de:	edd1 ea00 	vldr	s29, [r1]
 800c5e2:	edd0 aa01 	vldr	s21, [r0, #4]
 800c5e6:	9805      	ldr	r0, [sp, #20]
 800c5e8:	9905      	ldr	r1, [sp, #20]
 800c5ea:	edd0 7a01 	vldr	s15, [r0, #4]
 800c5ee:	ed91 da00 	vldr	s26, [r1]
 800c5f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c5f4:	9c04      	ldr	r4, [sp, #16]
 800c5f6:	edcd 7a01 	vstr	s15, [sp, #4]
 800c5fa:	edd8 7a01 	vldr	s15, [r8, #4]
 800c5fe:	9100      	str	r1, [sp, #0]
 800c600:	edd2 fa00 	vldr	s31, [r2]
 800c604:	ed94 ea00 	vldr	s28, [r4]
 800c608:	ed92 ca01 	vldr	s24, [r2, #4]
 800c60c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800c610:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c612:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c614:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c616:	edd9 da00 	vldr	s27, [r9]
 800c61a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c61c:	edd8 ca00 	vldr	s25, [r8]
 800c620:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c624:	f8dd c018 	ldr.w	ip, [sp, #24]
 800c628:	ed99 aa01 	vldr	s20, [r9, #4]
 800c62c:	edcd 7a02 	vstr	s15, [sp, #8]
 800c630:	9800      	ldr	r0, [sp, #0]
 800c632:	e001      	b.n	800c638 <arm_radix8_butterfly_f32+0x328>
 800c634:	3f3504f3 	.word	0x3f3504f3
 800c638:	edd5 3a00 	vldr	s7, [r5]
 800c63c:	44dc      	add	ip, fp
 800c63e:	ed91 7a00 	vldr	s14, [r1]
 800c642:	edd4 8a00 	vldr	s17, [r4]
 800c646:	45e2      	cmp	sl, ip
 800c648:	ed57 7a01 	vldr	s15, [r7, #-4]
 800c64c:	ed90 5a00 	vldr	s10, [r0]
 800c650:	ed56 5a01 	vldr	s11, [r6, #-4]
 800c654:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800c658:	ed92 1a00 	vldr	s2, [r2]
 800c65c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800c660:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800c664:	ee75 9a25 	vadd.f32	s19, s10, s11
 800c668:	ee31 3a07 	vadd.f32	s6, s2, s14
 800c66c:	ed92 8a01 	vldr	s16, [r2, #4]
 800c670:	ee73 6a84 	vadd.f32	s13, s7, s8
 800c674:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c678:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c67c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c680:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800c684:	ee75 7a84 	vadd.f32	s15, s11, s8
 800c688:	ee31 1a47 	vsub.f32	s2, s2, s14
 800c68c:	ee31 7a85 	vadd.f32	s14, s3, s10
 800c690:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c694:	ee33 3a46 	vsub.f32	s6, s6, s12
 800c698:	ed82 7a00 	vstr	s14, [r2]
 800c69c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800c6a0:	ed96 6a00 	vldr	s12, [r6]
 800c6a4:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800c6a8:	edd5 3a01 	vldr	s7, [r5, #4]
 800c6ac:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800c6b0:	ed90 7a01 	vldr	s14, [r0, #4]
 800c6b4:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800c6b8:	edde 4a00 	vldr	s9, [lr]
 800c6bc:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800c6c0:	ee77 2a46 	vsub.f32	s5, s14, s12
 800c6c4:	edd1 6a01 	vldr	s13, [r1, #4]
 800c6c8:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800c6cc:	edd7 0a00 	vldr	s1, [r7]
 800c6d0:	ee77 5a06 	vadd.f32	s11, s14, s12
 800c6d4:	ed94 7a01 	vldr	s14, [r4, #4]
 800c6d8:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800c6dc:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800c6e0:	ee78 4a66 	vsub.f32	s9, s16, s13
 800c6e4:	ee78 3a26 	vadd.f32	s7, s16, s13
 800c6e8:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800c6ec:	ee77 6a20 	vadd.f32	s13, s14, s1
 800c6f0:	ee24 4a09 	vmul.f32	s8, s8, s18
 800c6f4:	ee37 7a60 	vsub.f32	s14, s14, s1
 800c6f8:	ee20 8a09 	vmul.f32	s16, s0, s18
 800c6fc:	ee75 0a86 	vadd.f32	s1, s11, s12
 800c700:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800c704:	ee62 2a89 	vmul.f32	s5, s5, s18
 800c708:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c70c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800c710:	ee77 7a62 	vsub.f32	s15, s14, s5
 800c714:	ee74 5a88 	vadd.f32	s11, s9, s16
 800c718:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800c71c:	ee77 4a22 	vadd.f32	s9, s14, s5
 800c720:	ee71 2a04 	vadd.f32	s5, s2, s8
 800c724:	ee31 7a44 	vsub.f32	s14, s2, s8
 800c728:	ee30 1a60 	vsub.f32	s2, s0, s1
 800c72c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c730:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c734:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800c738:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800c73c:	ee38 4a68 	vsub.f32	s8, s16, s17
 800c740:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800c744:	ee72 5a25 	vadd.f32	s11, s4, s11
 800c748:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800c74c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800c750:	ee77 2a27 	vadd.f32	s5, s14, s15
 800c754:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c758:	ee78 7a88 	vadd.f32	s15, s17, s16
 800c75c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800c760:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800c764:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800c768:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800c76c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800c770:	ee70 0a20 	vadd.f32	s1, s0, s1
 800c774:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800c778:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800c77c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800c780:	edc2 0a01 	vstr	s1, [r2, #4]
 800c784:	ee38 8a88 	vadd.f32	s16, s17, s16
 800c788:	441a      	add	r2, r3
 800c78a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800c78e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800c792:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800c796:	ed81 8a00 	vstr	s16, [r1]
 800c79a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800c79e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c7a2:	ed81 5a01 	vstr	s10, [r1, #4]
 800c7a6:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800c7aa:	edcd 3a00 	vstr	s7, [sp]
 800c7ae:	ed9d 5a02 	vldr	s10, [sp, #8]
 800c7b2:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800c7b6:	eddd 3a01 	vldr	s7, [sp, #4]
 800c7ba:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800c7be:	ed84 0a00 	vstr	s0, [r4]
 800c7c2:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c7c6:	ed84 3a01 	vstr	s6, [r4, #4]
 800c7ca:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800c7ce:	ee23 6a86 	vmul.f32	s12, s7, s12
 800c7d2:	eddd 3a00 	vldr	s7, [sp]
 800c7d6:	ee25 5a25 	vmul.f32	s10, s10, s11
 800c7da:	4419      	add	r1, r3
 800c7dc:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800c7e0:	441c      	add	r4, r3
 800c7e2:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800c7e6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800c7ea:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800c7ee:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800c7f2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800c7f6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800c7fa:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800c7fe:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800c802:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800c806:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800c80a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800c80e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c812:	ee38 8a01 	vadd.f32	s16, s16, s2
 800c816:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c81a:	ee39 5a85 	vadd.f32	s10, s19, s10
 800c81e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800c822:	ed07 8a01 	vstr	s16, [r7, #-4]
 800c826:	ee30 0a21 	vadd.f32	s0, s0, s3
 800c82a:	ed87 6a00 	vstr	s12, [r7]
 800c82e:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c832:	edc0 0a00 	vstr	s1, [r0]
 800c836:	ee33 3a28 	vadd.f32	s6, s6, s17
 800c83a:	edc0 3a01 	vstr	s7, [r0, #4]
 800c83e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c842:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800c846:	edce 4a00 	vstr	s9, [lr]
 800c84a:	4418      	add	r0, r3
 800c84c:	ed06 0a01 	vstr	s0, [r6, #-4]
 800c850:	441f      	add	r7, r3
 800c852:	edc6 2a00 	vstr	s5, [r6]
 800c856:	449e      	add	lr, r3
 800c858:	ed85 3a00 	vstr	s6, [r5]
 800c85c:	441e      	add	r6, r3
 800c85e:	ed85 7a01 	vstr	s14, [r5, #4]
 800c862:	441d      	add	r5, r3
 800c864:	f63f aee8 	bhi.w	800c638 <arm_radix8_butterfly_f32+0x328>
 800c868:	9a06      	ldr	r2, [sp, #24]
 800c86a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c86c:	3201      	adds	r2, #1
 800c86e:	4611      	mov	r1, r2
 800c870:	9206      	str	r2, [sp, #24]
 800c872:	9a07      	ldr	r2, [sp, #28]
 800c874:	4402      	add	r2, r0
 800c876:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c878:	9207      	str	r2, [sp, #28]
 800c87a:	9a03      	ldr	r2, [sp, #12]
 800c87c:	4402      	add	r2, r0
 800c87e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c880:	9203      	str	r2, [sp, #12]
 800c882:	9a04      	ldr	r2, [sp, #16]
 800c884:	4402      	add	r2, r0
 800c886:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c888:	9204      	str	r2, [sp, #16]
 800c88a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c88c:	4491      	add	r9, r2
 800c88e:	9a05      	ldr	r2, [sp, #20]
 800c890:	4402      	add	r2, r0
 800c892:	9205      	str	r2, [sp, #20]
 800c894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c896:	4490      	add	r8, r2
 800c898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c89a:	3208      	adds	r2, #8
 800c89c:	920f      	str	r2, [sp, #60]	; 0x3c
 800c89e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8a0:	3208      	adds	r2, #8
 800c8a2:	920e      	str	r2, [sp, #56]	; 0x38
 800c8a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8a6:	3208      	adds	r2, #8
 800c8a8:	920d      	str	r2, [sp, #52]	; 0x34
 800c8aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8ac:	3208      	adds	r2, #8
 800c8ae:	920c      	str	r2, [sp, #48]	; 0x30
 800c8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8b2:	3208      	adds	r2, #8
 800c8b4:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b8:	3208      	adds	r2, #8
 800c8ba:	920a      	str	r2, [sp, #40]	; 0x28
 800c8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8be:	3208      	adds	r2, #8
 800c8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c2:	9a08      	ldr	r2, [sp, #32]
 800c8c4:	3208      	adds	r2, #8
 800c8c6:	9208      	str	r2, [sp, #32]
 800c8c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800c8ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4288      	cmp	r0, r1
 800c8d0:	d005      	beq.n	800c8de <arm_radix8_butterfly_f32+0x5ce>
 800c8d2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	4401      	add	r1, r0
 800c8d8:	9807      	ldr	r0, [sp, #28]
 800c8da:	9110      	str	r1, [sp, #64]	; 0x40
 800c8dc:	e676      	b.n	800c5cc <arm_radix8_butterfly_f32+0x2bc>
 800c8de:	4683      	mov	fp, r0
 800c8e0:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800c8e4:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800c8e8:	e522      	b.n	800c330 <arm_radix8_butterfly_f32+0x20>
 800c8ea:	b01d      	add	sp, #116	; 0x74
 800c8ec:	ecbd 8b10 	vpop	{d8-d15}
 800c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8f4 <__errno>:
 800c8f4:	4b01      	ldr	r3, [pc, #4]	; (800c8fc <__errno+0x8>)
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	24000380 	.word	0x24000380

0800c900 <__libc_init_array>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	4e0d      	ldr	r6, [pc, #52]	; (800c938 <__libc_init_array+0x38>)
 800c904:	4c0d      	ldr	r4, [pc, #52]	; (800c93c <__libc_init_array+0x3c>)
 800c906:	1ba4      	subs	r4, r4, r6
 800c908:	10a4      	asrs	r4, r4, #2
 800c90a:	2500      	movs	r5, #0
 800c90c:	42a5      	cmp	r5, r4
 800c90e:	d109      	bne.n	800c924 <__libc_init_array+0x24>
 800c910:	4e0b      	ldr	r6, [pc, #44]	; (800c940 <__libc_init_array+0x40>)
 800c912:	4c0c      	ldr	r4, [pc, #48]	; (800c944 <__libc_init_array+0x44>)
 800c914:	f003 fd66 	bl	80103e4 <_init>
 800c918:	1ba4      	subs	r4, r4, r6
 800c91a:	10a4      	asrs	r4, r4, #2
 800c91c:	2500      	movs	r5, #0
 800c91e:	42a5      	cmp	r5, r4
 800c920:	d105      	bne.n	800c92e <__libc_init_array+0x2e>
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c928:	4798      	blx	r3
 800c92a:	3501      	adds	r5, #1
 800c92c:	e7ee      	b.n	800c90c <__libc_init_array+0xc>
 800c92e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c932:	4798      	blx	r3
 800c934:	3501      	adds	r5, #1
 800c936:	e7f2      	b.n	800c91e <__libc_init_array+0x1e>
 800c938:	08015860 	.word	0x08015860
 800c93c:	08015860 	.word	0x08015860
 800c940:	08015860 	.word	0x08015860
 800c944:	08015864 	.word	0x08015864

0800c948 <malloc>:
 800c948:	4b02      	ldr	r3, [pc, #8]	; (800c954 <malloc+0xc>)
 800c94a:	4601      	mov	r1, r0
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	f000 b861 	b.w	800ca14 <_malloc_r>
 800c952:	bf00      	nop
 800c954:	24000380 	.word	0x24000380

0800c958 <free>:
 800c958:	4b02      	ldr	r3, [pc, #8]	; (800c964 <free+0xc>)
 800c95a:	4601      	mov	r1, r0
 800c95c:	6818      	ldr	r0, [r3, #0]
 800c95e:	f000 b80b 	b.w	800c978 <_free_r>
 800c962:	bf00      	nop
 800c964:	24000380 	.word	0x24000380

0800c968 <memset>:
 800c968:	4402      	add	r2, r0
 800c96a:	4603      	mov	r3, r0
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d100      	bne.n	800c972 <memset+0xa>
 800c970:	4770      	bx	lr
 800c972:	f803 1b01 	strb.w	r1, [r3], #1
 800c976:	e7f9      	b.n	800c96c <memset+0x4>

0800c978 <_free_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4605      	mov	r5, r0
 800c97c:	2900      	cmp	r1, #0
 800c97e:	d045      	beq.n	800ca0c <_free_r+0x94>
 800c980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c984:	1f0c      	subs	r4, r1, #4
 800c986:	2b00      	cmp	r3, #0
 800c988:	bfb8      	it	lt
 800c98a:	18e4      	addlt	r4, r4, r3
 800c98c:	f001 fb01 	bl	800df92 <__malloc_lock>
 800c990:	4a1f      	ldr	r2, [pc, #124]	; (800ca10 <_free_r+0x98>)
 800c992:	6813      	ldr	r3, [r2, #0]
 800c994:	4610      	mov	r0, r2
 800c996:	b933      	cbnz	r3, 800c9a6 <_free_r+0x2e>
 800c998:	6063      	str	r3, [r4, #4]
 800c99a:	6014      	str	r4, [r2, #0]
 800c99c:	4628      	mov	r0, r5
 800c99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a2:	f001 baf7 	b.w	800df94 <__malloc_unlock>
 800c9a6:	42a3      	cmp	r3, r4
 800c9a8:	d90c      	bls.n	800c9c4 <_free_r+0x4c>
 800c9aa:	6821      	ldr	r1, [r4, #0]
 800c9ac:	1862      	adds	r2, r4, r1
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	bf04      	itt	eq
 800c9b2:	681a      	ldreq	r2, [r3, #0]
 800c9b4:	685b      	ldreq	r3, [r3, #4]
 800c9b6:	6063      	str	r3, [r4, #4]
 800c9b8:	bf04      	itt	eq
 800c9ba:	1852      	addeq	r2, r2, r1
 800c9bc:	6022      	streq	r2, [r4, #0]
 800c9be:	6004      	str	r4, [r0, #0]
 800c9c0:	e7ec      	b.n	800c99c <_free_r+0x24>
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	b10a      	cbz	r2, 800c9cc <_free_r+0x54>
 800c9c8:	42a2      	cmp	r2, r4
 800c9ca:	d9fa      	bls.n	800c9c2 <_free_r+0x4a>
 800c9cc:	6819      	ldr	r1, [r3, #0]
 800c9ce:	1858      	adds	r0, r3, r1
 800c9d0:	42a0      	cmp	r0, r4
 800c9d2:	d10b      	bne.n	800c9ec <_free_r+0x74>
 800c9d4:	6820      	ldr	r0, [r4, #0]
 800c9d6:	4401      	add	r1, r0
 800c9d8:	1858      	adds	r0, r3, r1
 800c9da:	4282      	cmp	r2, r0
 800c9dc:	6019      	str	r1, [r3, #0]
 800c9de:	d1dd      	bne.n	800c99c <_free_r+0x24>
 800c9e0:	6810      	ldr	r0, [r2, #0]
 800c9e2:	6852      	ldr	r2, [r2, #4]
 800c9e4:	605a      	str	r2, [r3, #4]
 800c9e6:	4401      	add	r1, r0
 800c9e8:	6019      	str	r1, [r3, #0]
 800c9ea:	e7d7      	b.n	800c99c <_free_r+0x24>
 800c9ec:	d902      	bls.n	800c9f4 <_free_r+0x7c>
 800c9ee:	230c      	movs	r3, #12
 800c9f0:	602b      	str	r3, [r5, #0]
 800c9f2:	e7d3      	b.n	800c99c <_free_r+0x24>
 800c9f4:	6820      	ldr	r0, [r4, #0]
 800c9f6:	1821      	adds	r1, r4, r0
 800c9f8:	428a      	cmp	r2, r1
 800c9fa:	bf04      	itt	eq
 800c9fc:	6811      	ldreq	r1, [r2, #0]
 800c9fe:	6852      	ldreq	r2, [r2, #4]
 800ca00:	6062      	str	r2, [r4, #4]
 800ca02:	bf04      	itt	eq
 800ca04:	1809      	addeq	r1, r1, r0
 800ca06:	6021      	streq	r1, [r4, #0]
 800ca08:	605c      	str	r4, [r3, #4]
 800ca0a:	e7c7      	b.n	800c99c <_free_r+0x24>
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	bf00      	nop
 800ca10:	24000678 	.word	0x24000678

0800ca14 <_malloc_r>:
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	1ccd      	adds	r5, r1, #3
 800ca18:	f025 0503 	bic.w	r5, r5, #3
 800ca1c:	3508      	adds	r5, #8
 800ca1e:	2d0c      	cmp	r5, #12
 800ca20:	bf38      	it	cc
 800ca22:	250c      	movcc	r5, #12
 800ca24:	2d00      	cmp	r5, #0
 800ca26:	4606      	mov	r6, r0
 800ca28:	db01      	blt.n	800ca2e <_malloc_r+0x1a>
 800ca2a:	42a9      	cmp	r1, r5
 800ca2c:	d903      	bls.n	800ca36 <_malloc_r+0x22>
 800ca2e:	230c      	movs	r3, #12
 800ca30:	6033      	str	r3, [r6, #0]
 800ca32:	2000      	movs	r0, #0
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
 800ca36:	f001 faac 	bl	800df92 <__malloc_lock>
 800ca3a:	4a21      	ldr	r2, [pc, #132]	; (800cac0 <_malloc_r+0xac>)
 800ca3c:	6814      	ldr	r4, [r2, #0]
 800ca3e:	4621      	mov	r1, r4
 800ca40:	b991      	cbnz	r1, 800ca68 <_malloc_r+0x54>
 800ca42:	4c20      	ldr	r4, [pc, #128]	; (800cac4 <_malloc_r+0xb0>)
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	b91b      	cbnz	r3, 800ca50 <_malloc_r+0x3c>
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f000 fc79 	bl	800d340 <_sbrk_r>
 800ca4e:	6020      	str	r0, [r4, #0]
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 fc74 	bl	800d340 <_sbrk_r>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d124      	bne.n	800caa6 <_malloc_r+0x92>
 800ca5c:	230c      	movs	r3, #12
 800ca5e:	6033      	str	r3, [r6, #0]
 800ca60:	4630      	mov	r0, r6
 800ca62:	f001 fa97 	bl	800df94 <__malloc_unlock>
 800ca66:	e7e4      	b.n	800ca32 <_malloc_r+0x1e>
 800ca68:	680b      	ldr	r3, [r1, #0]
 800ca6a:	1b5b      	subs	r3, r3, r5
 800ca6c:	d418      	bmi.n	800caa0 <_malloc_r+0x8c>
 800ca6e:	2b0b      	cmp	r3, #11
 800ca70:	d90f      	bls.n	800ca92 <_malloc_r+0x7e>
 800ca72:	600b      	str	r3, [r1, #0]
 800ca74:	50cd      	str	r5, [r1, r3]
 800ca76:	18cc      	adds	r4, r1, r3
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f001 fa8b 	bl	800df94 <__malloc_unlock>
 800ca7e:	f104 000b 	add.w	r0, r4, #11
 800ca82:	1d23      	adds	r3, r4, #4
 800ca84:	f020 0007 	bic.w	r0, r0, #7
 800ca88:	1ac3      	subs	r3, r0, r3
 800ca8a:	d0d3      	beq.n	800ca34 <_malloc_r+0x20>
 800ca8c:	425a      	negs	r2, r3
 800ca8e:	50e2      	str	r2, [r4, r3]
 800ca90:	e7d0      	b.n	800ca34 <_malloc_r+0x20>
 800ca92:	428c      	cmp	r4, r1
 800ca94:	684b      	ldr	r3, [r1, #4]
 800ca96:	bf16      	itet	ne
 800ca98:	6063      	strne	r3, [r4, #4]
 800ca9a:	6013      	streq	r3, [r2, #0]
 800ca9c:	460c      	movne	r4, r1
 800ca9e:	e7eb      	b.n	800ca78 <_malloc_r+0x64>
 800caa0:	460c      	mov	r4, r1
 800caa2:	6849      	ldr	r1, [r1, #4]
 800caa4:	e7cc      	b.n	800ca40 <_malloc_r+0x2c>
 800caa6:	1cc4      	adds	r4, r0, #3
 800caa8:	f024 0403 	bic.w	r4, r4, #3
 800caac:	42a0      	cmp	r0, r4
 800caae:	d005      	beq.n	800cabc <_malloc_r+0xa8>
 800cab0:	1a21      	subs	r1, r4, r0
 800cab2:	4630      	mov	r0, r6
 800cab4:	f000 fc44 	bl	800d340 <_sbrk_r>
 800cab8:	3001      	adds	r0, #1
 800caba:	d0cf      	beq.n	800ca5c <_malloc_r+0x48>
 800cabc:	6025      	str	r5, [r4, #0]
 800cabe:	e7db      	b.n	800ca78 <_malloc_r+0x64>
 800cac0:	24000678 	.word	0x24000678
 800cac4:	2400067c 	.word	0x2400067c

0800cac8 <__cvt>:
 800cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caca:	ed2d 8b02 	vpush	{d8}
 800cace:	eeb0 8b40 	vmov.f64	d8, d0
 800cad2:	b085      	sub	sp, #20
 800cad4:	4617      	mov	r7, r2
 800cad6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cad8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cada:	ee18 2a90 	vmov	r2, s17
 800cade:	f025 0520 	bic.w	r5, r5, #32
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	bfb6      	itet	lt
 800cae6:	222d      	movlt	r2, #45	; 0x2d
 800cae8:	2200      	movge	r2, #0
 800caea:	eeb1 8b40 	vneglt.f64	d8, d0
 800caee:	2d46      	cmp	r5, #70	; 0x46
 800caf0:	460c      	mov	r4, r1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	d004      	beq.n	800cb00 <__cvt+0x38>
 800caf6:	2d45      	cmp	r5, #69	; 0x45
 800caf8:	d100      	bne.n	800cafc <__cvt+0x34>
 800cafa:	3401      	adds	r4, #1
 800cafc:	2102      	movs	r1, #2
 800cafe:	e000      	b.n	800cb02 <__cvt+0x3a>
 800cb00:	2103      	movs	r1, #3
 800cb02:	ab03      	add	r3, sp, #12
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	ab02      	add	r3, sp, #8
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	4633      	mov	r3, r6
 800cb0e:	eeb0 0b48 	vmov.f64	d0, d8
 800cb12:	f000 fcd9 	bl	800d4c8 <_dtoa_r>
 800cb16:	2d47      	cmp	r5, #71	; 0x47
 800cb18:	d101      	bne.n	800cb1e <__cvt+0x56>
 800cb1a:	07fb      	lsls	r3, r7, #31
 800cb1c:	d51e      	bpl.n	800cb5c <__cvt+0x94>
 800cb1e:	2d46      	cmp	r5, #70	; 0x46
 800cb20:	eb00 0304 	add.w	r3, r0, r4
 800cb24:	d10c      	bne.n	800cb40 <__cvt+0x78>
 800cb26:	7802      	ldrb	r2, [r0, #0]
 800cb28:	2a30      	cmp	r2, #48	; 0x30
 800cb2a:	d107      	bne.n	800cb3c <__cvt+0x74>
 800cb2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb34:	bf1c      	itt	ne
 800cb36:	f1c4 0401 	rsbne	r4, r4, #1
 800cb3a:	6034      	strne	r4, [r6, #0]
 800cb3c:	6832      	ldr	r2, [r6, #0]
 800cb3e:	4413      	add	r3, r2
 800cb40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb48:	d007      	beq.n	800cb5a <__cvt+0x92>
 800cb4a:	2130      	movs	r1, #48	; 0x30
 800cb4c:	9a03      	ldr	r2, [sp, #12]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d204      	bcs.n	800cb5c <__cvt+0x94>
 800cb52:	1c54      	adds	r4, r2, #1
 800cb54:	9403      	str	r4, [sp, #12]
 800cb56:	7011      	strb	r1, [r2, #0]
 800cb58:	e7f8      	b.n	800cb4c <__cvt+0x84>
 800cb5a:	9303      	str	r3, [sp, #12]
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb60:	1a1b      	subs	r3, r3, r0
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	b005      	add	sp, #20
 800cb66:	ecbd 8b02 	vpop	{d8}
 800cb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb6c <__exponent>:
 800cb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb6e:	2900      	cmp	r1, #0
 800cb70:	4604      	mov	r4, r0
 800cb72:	bfba      	itte	lt
 800cb74:	4249      	neglt	r1, r1
 800cb76:	232d      	movlt	r3, #45	; 0x2d
 800cb78:	232b      	movge	r3, #43	; 0x2b
 800cb7a:	2909      	cmp	r1, #9
 800cb7c:	f804 2b02 	strb.w	r2, [r4], #2
 800cb80:	7043      	strb	r3, [r0, #1]
 800cb82:	dd20      	ble.n	800cbc6 <__exponent+0x5a>
 800cb84:	f10d 0307 	add.w	r3, sp, #7
 800cb88:	461f      	mov	r7, r3
 800cb8a:	260a      	movs	r6, #10
 800cb8c:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb90:	fb06 1115 	mls	r1, r6, r5, r1
 800cb94:	3130      	adds	r1, #48	; 0x30
 800cb96:	2d09      	cmp	r5, #9
 800cb98:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb9c:	f103 32ff 	add.w	r2, r3, #4294967295
 800cba0:	4629      	mov	r1, r5
 800cba2:	dc09      	bgt.n	800cbb8 <__exponent+0x4c>
 800cba4:	3130      	adds	r1, #48	; 0x30
 800cba6:	3b02      	subs	r3, #2
 800cba8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cbac:	42bb      	cmp	r3, r7
 800cbae:	4622      	mov	r2, r4
 800cbb0:	d304      	bcc.n	800cbbc <__exponent+0x50>
 800cbb2:	1a10      	subs	r0, r2, r0
 800cbb4:	b003      	add	sp, #12
 800cbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb8:	4613      	mov	r3, r2
 800cbba:	e7e7      	b.n	800cb8c <__exponent+0x20>
 800cbbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbc0:	f804 2b01 	strb.w	r2, [r4], #1
 800cbc4:	e7f2      	b.n	800cbac <__exponent+0x40>
 800cbc6:	2330      	movs	r3, #48	; 0x30
 800cbc8:	4419      	add	r1, r3
 800cbca:	7083      	strb	r3, [r0, #2]
 800cbcc:	1d02      	adds	r2, r0, #4
 800cbce:	70c1      	strb	r1, [r0, #3]
 800cbd0:	e7ef      	b.n	800cbb2 <__exponent+0x46>
 800cbd2:	0000      	movs	r0, r0
 800cbd4:	0000      	movs	r0, r0
	...

0800cbd8 <_printf_float>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	b08d      	sub	sp, #52	; 0x34
 800cbde:	460c      	mov	r4, r1
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	461f      	mov	r7, r3
 800cbe4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cbe8:	4605      	mov	r5, r0
 800cbea:	f001 f9b9 	bl	800df60 <_localeconv_r>
 800cbee:	f8d0 b000 	ldr.w	fp, [r0]
 800cbf2:	4658      	mov	r0, fp
 800cbf4:	f7f3 fbd4 	bl	80003a0 <strlen>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	930a      	str	r3, [sp, #40]	; 0x28
 800cbfc:	f8d8 3000 	ldr.w	r3, [r8]
 800cc00:	9005      	str	r0, [sp, #20]
 800cc02:	3307      	adds	r3, #7
 800cc04:	f023 0307 	bic.w	r3, r3, #7
 800cc08:	f103 0108 	add.w	r1, r3, #8
 800cc0c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cc10:	6822      	ldr	r2, [r4, #0]
 800cc12:	f8c8 1000 	str.w	r1, [r8]
 800cc16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc1a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc1e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800cea8 <_printf_float+0x2d0>
 800cc22:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800cc26:	eeb0 6bc0 	vabs.f64	d6, d0
 800cc2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc32:	dd24      	ble.n	800cc7e <_printf_float+0xa6>
 800cc34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3c:	d502      	bpl.n	800cc44 <_printf_float+0x6c>
 800cc3e:	232d      	movs	r3, #45	; 0x2d
 800cc40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc44:	499a      	ldr	r1, [pc, #616]	; (800ceb0 <_printf_float+0x2d8>)
 800cc46:	4b9b      	ldr	r3, [pc, #620]	; (800ceb4 <_printf_float+0x2dc>)
 800cc48:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cc4c:	bf8c      	ite	hi
 800cc4e:	4688      	movhi	r8, r1
 800cc50:	4698      	movls	r8, r3
 800cc52:	f022 0204 	bic.w	r2, r2, #4
 800cc56:	2303      	movs	r3, #3
 800cc58:	6123      	str	r3, [r4, #16]
 800cc5a:	6022      	str	r2, [r4, #0]
 800cc5c:	f04f 0a00 	mov.w	sl, #0
 800cc60:	9700      	str	r7, [sp, #0]
 800cc62:	4633      	mov	r3, r6
 800cc64:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc66:	4621      	mov	r1, r4
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f000 f9e1 	bl	800d030 <_printf_common>
 800cc6e:	3001      	adds	r0, #1
 800cc70:	f040 8089 	bne.w	800cd86 <_printf_float+0x1ae>
 800cc74:	f04f 30ff 	mov.w	r0, #4294967295
 800cc78:	b00d      	add	sp, #52	; 0x34
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc86:	d702      	bvc.n	800cc8e <_printf_float+0xb6>
 800cc88:	498b      	ldr	r1, [pc, #556]	; (800ceb8 <_printf_float+0x2e0>)
 800cc8a:	4b8c      	ldr	r3, [pc, #560]	; (800cebc <_printf_float+0x2e4>)
 800cc8c:	e7dc      	b.n	800cc48 <_printf_float+0x70>
 800cc8e:	6861      	ldr	r1, [r4, #4]
 800cc90:	1c4b      	adds	r3, r1, #1
 800cc92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc96:	ab0a      	add	r3, sp, #40	; 0x28
 800cc98:	a809      	add	r0, sp, #36	; 0x24
 800cc9a:	d13b      	bne.n	800cd14 <_printf_float+0x13c>
 800cc9c:	2106      	movs	r1, #6
 800cc9e:	6061      	str	r1, [r4, #4]
 800cca0:	f04f 0c00 	mov.w	ip, #0
 800cca4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800cca8:	e9cd 0900 	strd	r0, r9, [sp]
 800ccac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccb0:	6022      	str	r2, [r4, #0]
 800ccb2:	6861      	ldr	r1, [r4, #4]
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f7ff ff07 	bl	800cac8 <__cvt>
 800ccba:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800ccbe:	2b47      	cmp	r3, #71	; 0x47
 800ccc0:	4680      	mov	r8, r0
 800ccc2:	d109      	bne.n	800ccd8 <_printf_float+0x100>
 800ccc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc6:	1cd8      	adds	r0, r3, #3
 800ccc8:	db02      	blt.n	800ccd0 <_printf_float+0xf8>
 800ccca:	6862      	ldr	r2, [r4, #4]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	dd47      	ble.n	800cd60 <_printf_float+0x188>
 800ccd0:	f1a9 0902 	sub.w	r9, r9, #2
 800ccd4:	fa5f f989 	uxtb.w	r9, r9
 800ccd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ccdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccde:	d824      	bhi.n	800cd2a <_printf_float+0x152>
 800cce0:	3901      	subs	r1, #1
 800cce2:	464a      	mov	r2, r9
 800cce4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cce8:	9109      	str	r1, [sp, #36]	; 0x24
 800ccea:	f7ff ff3f 	bl	800cb6c <__exponent>
 800ccee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccf0:	1813      	adds	r3, r2, r0
 800ccf2:	2a01      	cmp	r2, #1
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	dc02      	bgt.n	800cd00 <_printf_float+0x128>
 800ccfa:	6822      	ldr	r2, [r4, #0]
 800ccfc:	07d1      	lsls	r1, r2, #31
 800ccfe:	d501      	bpl.n	800cd04 <_printf_float+0x12c>
 800cd00:	3301      	adds	r3, #1
 800cd02:	6123      	str	r3, [r4, #16]
 800cd04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d0a9      	beq.n	800cc60 <_printf_float+0x88>
 800cd0c:	232d      	movs	r3, #45	; 0x2d
 800cd0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd12:	e7a5      	b.n	800cc60 <_printf_float+0x88>
 800cd14:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800cd18:	f000 8178 	beq.w	800d00c <_printf_float+0x434>
 800cd1c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cd20:	d1be      	bne.n	800cca0 <_printf_float+0xc8>
 800cd22:	2900      	cmp	r1, #0
 800cd24:	d1bc      	bne.n	800cca0 <_printf_float+0xc8>
 800cd26:	2101      	movs	r1, #1
 800cd28:	e7b9      	b.n	800cc9e <_printf_float+0xc6>
 800cd2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cd2e:	d119      	bne.n	800cd64 <_printf_float+0x18c>
 800cd30:	2900      	cmp	r1, #0
 800cd32:	6863      	ldr	r3, [r4, #4]
 800cd34:	dd0c      	ble.n	800cd50 <_printf_float+0x178>
 800cd36:	6121      	str	r1, [r4, #16]
 800cd38:	b913      	cbnz	r3, 800cd40 <_printf_float+0x168>
 800cd3a:	6822      	ldr	r2, [r4, #0]
 800cd3c:	07d2      	lsls	r2, r2, #31
 800cd3e:	d502      	bpl.n	800cd46 <_printf_float+0x16e>
 800cd40:	3301      	adds	r3, #1
 800cd42:	440b      	add	r3, r1
 800cd44:	6123      	str	r3, [r4, #16]
 800cd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd48:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd4a:	f04f 0a00 	mov.w	sl, #0
 800cd4e:	e7d9      	b.n	800cd04 <_printf_float+0x12c>
 800cd50:	b913      	cbnz	r3, 800cd58 <_printf_float+0x180>
 800cd52:	6822      	ldr	r2, [r4, #0]
 800cd54:	07d0      	lsls	r0, r2, #31
 800cd56:	d501      	bpl.n	800cd5c <_printf_float+0x184>
 800cd58:	3302      	adds	r3, #2
 800cd5a:	e7f3      	b.n	800cd44 <_printf_float+0x16c>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e7f1      	b.n	800cd44 <_printf_float+0x16c>
 800cd60:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cd64:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	db05      	blt.n	800cd78 <_printf_float+0x1a0>
 800cd6c:	6822      	ldr	r2, [r4, #0]
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	07d1      	lsls	r1, r2, #31
 800cd72:	d5e8      	bpl.n	800cd46 <_printf_float+0x16e>
 800cd74:	3301      	adds	r3, #1
 800cd76:	e7e5      	b.n	800cd44 <_printf_float+0x16c>
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfd4      	ite	le
 800cd7c:	f1c3 0302 	rsble	r3, r3, #2
 800cd80:	2301      	movgt	r3, #1
 800cd82:	4413      	add	r3, r2
 800cd84:	e7de      	b.n	800cd44 <_printf_float+0x16c>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	055a      	lsls	r2, r3, #21
 800cd8a:	d407      	bmi.n	800cd9c <_printf_float+0x1c4>
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	4642      	mov	r2, r8
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	d12a      	bne.n	800cdf0 <_printf_float+0x218>
 800cd9a:	e76b      	b.n	800cc74 <_printf_float+0x9c>
 800cd9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cda0:	f240 80de 	bls.w	800cf60 <_printf_float+0x388>
 800cda4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cda8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb0:	d133      	bne.n	800ce1a <_printf_float+0x242>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4a42      	ldr	r2, [pc, #264]	; (800cec0 <_printf_float+0x2e8>)
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	4628      	mov	r0, r5
 800cdba:	47b8      	blx	r7
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	f43f af59 	beq.w	800cc74 <_printf_float+0x9c>
 800cdc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	db02      	blt.n	800cdd0 <_printf_float+0x1f8>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	07d8      	lsls	r0, r3, #31
 800cdce:	d50f      	bpl.n	800cdf0 <_printf_float+0x218>
 800cdd0:	9b05      	ldr	r3, [sp, #20]
 800cdd2:	465a      	mov	r2, fp
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	47b8      	blx	r7
 800cdda:	3001      	adds	r0, #1
 800cddc:	f43f af4a 	beq.w	800cc74 <_printf_float+0x9c>
 800cde0:	f04f 0800 	mov.w	r8, #0
 800cde4:	f104 091a 	add.w	r9, r4, #26
 800cde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdea:	3b01      	subs	r3, #1
 800cdec:	4543      	cmp	r3, r8
 800cdee:	dc09      	bgt.n	800ce04 <_printf_float+0x22c>
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	079b      	lsls	r3, r3, #30
 800cdf4:	f100 8105 	bmi.w	800d002 <_printf_float+0x42a>
 800cdf8:	68e0      	ldr	r0, [r4, #12]
 800cdfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdfc:	4298      	cmp	r0, r3
 800cdfe:	bfb8      	it	lt
 800ce00:	4618      	movlt	r0, r3
 800ce02:	e739      	b.n	800cc78 <_printf_float+0xa0>
 800ce04:	2301      	movs	r3, #1
 800ce06:	464a      	mov	r2, r9
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af30 	beq.w	800cc74 <_printf_float+0x9c>
 800ce14:	f108 0801 	add.w	r8, r8, #1
 800ce18:	e7e6      	b.n	800cde8 <_printf_float+0x210>
 800ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	dc2b      	bgt.n	800ce78 <_printf_float+0x2a0>
 800ce20:	2301      	movs	r3, #1
 800ce22:	4a27      	ldr	r2, [pc, #156]	; (800cec0 <_printf_float+0x2e8>)
 800ce24:	4631      	mov	r1, r6
 800ce26:	4628      	mov	r0, r5
 800ce28:	47b8      	blx	r7
 800ce2a:	3001      	adds	r0, #1
 800ce2c:	f43f af22 	beq.w	800cc74 <_printf_float+0x9c>
 800ce30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce32:	b923      	cbnz	r3, 800ce3e <_printf_float+0x266>
 800ce34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce36:	b913      	cbnz	r3, 800ce3e <_printf_float+0x266>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	07d9      	lsls	r1, r3, #31
 800ce3c:	d5d8      	bpl.n	800cdf0 <_printf_float+0x218>
 800ce3e:	9b05      	ldr	r3, [sp, #20]
 800ce40:	465a      	mov	r2, fp
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	f43f af13 	beq.w	800cc74 <_printf_float+0x9c>
 800ce4e:	f04f 0900 	mov.w	r9, #0
 800ce52:	f104 0a1a 	add.w	sl, r4, #26
 800ce56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce58:	425b      	negs	r3, r3
 800ce5a:	454b      	cmp	r3, r9
 800ce5c:	dc01      	bgt.n	800ce62 <_printf_float+0x28a>
 800ce5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce60:	e795      	b.n	800cd8e <_printf_float+0x1b6>
 800ce62:	2301      	movs	r3, #1
 800ce64:	4652      	mov	r2, sl
 800ce66:	4631      	mov	r1, r6
 800ce68:	4628      	mov	r0, r5
 800ce6a:	47b8      	blx	r7
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	f43f af01 	beq.w	800cc74 <_printf_float+0x9c>
 800ce72:	f109 0901 	add.w	r9, r9, #1
 800ce76:	e7ee      	b.n	800ce56 <_printf_float+0x27e>
 800ce78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	bfa8      	it	ge
 800ce80:	461a      	movge	r2, r3
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	4691      	mov	r9, r2
 800ce86:	dd07      	ble.n	800ce98 <_printf_float+0x2c0>
 800ce88:	4613      	mov	r3, r2
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	4628      	mov	r0, r5
 800ce90:	47b8      	blx	r7
 800ce92:	3001      	adds	r0, #1
 800ce94:	f43f aeee 	beq.w	800cc74 <_printf_float+0x9c>
 800ce98:	f104 031a 	add.w	r3, r4, #26
 800ce9c:	f04f 0a00 	mov.w	sl, #0
 800cea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cea4:	9307      	str	r3, [sp, #28]
 800cea6:	e017      	b.n	800ced8 <_printf_float+0x300>
 800cea8:	ffffffff 	.word	0xffffffff
 800ceac:	7fefffff 	.word	0x7fefffff
 800ceb0:	080153dc 	.word	0x080153dc
 800ceb4:	080153d8 	.word	0x080153d8
 800ceb8:	080153e4 	.word	0x080153e4
 800cebc:	080153e0 	.word	0x080153e0
 800cec0:	08015634 	.word	0x08015634
 800cec4:	2301      	movs	r3, #1
 800cec6:	9a07      	ldr	r2, [sp, #28]
 800cec8:	4631      	mov	r1, r6
 800ceca:	4628      	mov	r0, r5
 800cecc:	47b8      	blx	r7
 800cece:	3001      	adds	r0, #1
 800ced0:	f43f aed0 	beq.w	800cc74 <_printf_float+0x9c>
 800ced4:	f10a 0a01 	add.w	sl, sl, #1
 800ced8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceda:	9306      	str	r3, [sp, #24]
 800cedc:	eba3 0309 	sub.w	r3, r3, r9
 800cee0:	4553      	cmp	r3, sl
 800cee2:	dcef      	bgt.n	800cec4 <_printf_float+0x2ec>
 800cee4:	9b06      	ldr	r3, [sp, #24]
 800cee6:	4498      	add	r8, r3
 800cee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ceec:	429a      	cmp	r2, r3
 800ceee:	db15      	blt.n	800cf1c <_printf_float+0x344>
 800cef0:	6823      	ldr	r3, [r4, #0]
 800cef2:	07da      	lsls	r2, r3, #31
 800cef4:	d412      	bmi.n	800cf1c <_printf_float+0x344>
 800cef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef8:	9a06      	ldr	r2, [sp, #24]
 800cefa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cefc:	1a9a      	subs	r2, r3, r2
 800cefe:	eba3 0a01 	sub.w	sl, r3, r1
 800cf02:	4592      	cmp	sl, r2
 800cf04:	bfa8      	it	ge
 800cf06:	4692      	movge	sl, r2
 800cf08:	f1ba 0f00 	cmp.w	sl, #0
 800cf0c:	dc0e      	bgt.n	800cf2c <_printf_float+0x354>
 800cf0e:	f04f 0800 	mov.w	r8, #0
 800cf12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf16:	f104 091a 	add.w	r9, r4, #26
 800cf1a:	e019      	b.n	800cf50 <_printf_float+0x378>
 800cf1c:	9b05      	ldr	r3, [sp, #20]
 800cf1e:	465a      	mov	r2, fp
 800cf20:	4631      	mov	r1, r6
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b8      	blx	r7
 800cf26:	3001      	adds	r0, #1
 800cf28:	d1e5      	bne.n	800cef6 <_printf_float+0x31e>
 800cf2a:	e6a3      	b.n	800cc74 <_printf_float+0x9c>
 800cf2c:	4653      	mov	r3, sl
 800cf2e:	4642      	mov	r2, r8
 800cf30:	4631      	mov	r1, r6
 800cf32:	4628      	mov	r0, r5
 800cf34:	47b8      	blx	r7
 800cf36:	3001      	adds	r0, #1
 800cf38:	d1e9      	bne.n	800cf0e <_printf_float+0x336>
 800cf3a:	e69b      	b.n	800cc74 <_printf_float+0x9c>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	464a      	mov	r2, r9
 800cf40:	4631      	mov	r1, r6
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b8      	blx	r7
 800cf46:	3001      	adds	r0, #1
 800cf48:	f43f ae94 	beq.w	800cc74 <_printf_float+0x9c>
 800cf4c:	f108 0801 	add.w	r8, r8, #1
 800cf50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf54:	1a9b      	subs	r3, r3, r2
 800cf56:	eba3 030a 	sub.w	r3, r3, sl
 800cf5a:	4543      	cmp	r3, r8
 800cf5c:	dcee      	bgt.n	800cf3c <_printf_float+0x364>
 800cf5e:	e747      	b.n	800cdf0 <_printf_float+0x218>
 800cf60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf62:	2a01      	cmp	r2, #1
 800cf64:	dc01      	bgt.n	800cf6a <_printf_float+0x392>
 800cf66:	07db      	lsls	r3, r3, #31
 800cf68:	d539      	bpl.n	800cfde <_printf_float+0x406>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	4642      	mov	r2, r8
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	f43f ae7d 	beq.w	800cc74 <_printf_float+0x9c>
 800cf7a:	9b05      	ldr	r3, [sp, #20]
 800cf7c:	465a      	mov	r2, fp
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4628      	mov	r0, r5
 800cf82:	47b8      	blx	r7
 800cf84:	3001      	adds	r0, #1
 800cf86:	f108 0801 	add.w	r8, r8, #1
 800cf8a:	f43f ae73 	beq.w	800cc74 <_printf_float+0x9c>
 800cf8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cf92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9c:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfa0:	d018      	beq.n	800cfd4 <_printf_float+0x3fc>
 800cfa2:	4642      	mov	r2, r8
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	47b8      	blx	r7
 800cfaa:	3001      	adds	r0, #1
 800cfac:	d10e      	bne.n	800cfcc <_printf_float+0x3f4>
 800cfae:	e661      	b.n	800cc74 <_printf_float+0x9c>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	464a      	mov	r2, r9
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	47b8      	blx	r7
 800cfba:	3001      	adds	r0, #1
 800cfbc:	f43f ae5a 	beq.w	800cc74 <_printf_float+0x9c>
 800cfc0:	f108 0801 	add.w	r8, r8, #1
 800cfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	4543      	cmp	r3, r8
 800cfca:	dcf1      	bgt.n	800cfb0 <_printf_float+0x3d8>
 800cfcc:	4653      	mov	r3, sl
 800cfce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfd2:	e6dd      	b.n	800cd90 <_printf_float+0x1b8>
 800cfd4:	f04f 0800 	mov.w	r8, #0
 800cfd8:	f104 091a 	add.w	r9, r4, #26
 800cfdc:	e7f2      	b.n	800cfc4 <_printf_float+0x3ec>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e7df      	b.n	800cfa2 <_printf_float+0x3ca>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	464a      	mov	r2, r9
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4628      	mov	r0, r5
 800cfea:	47b8      	blx	r7
 800cfec:	3001      	adds	r0, #1
 800cfee:	f43f ae41 	beq.w	800cc74 <_printf_float+0x9c>
 800cff2:	f108 0801 	add.w	r8, r8, #1
 800cff6:	68e3      	ldr	r3, [r4, #12]
 800cff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cffa:	1a9b      	subs	r3, r3, r2
 800cffc:	4543      	cmp	r3, r8
 800cffe:	dcf0      	bgt.n	800cfe2 <_printf_float+0x40a>
 800d000:	e6fa      	b.n	800cdf8 <_printf_float+0x220>
 800d002:	f04f 0800 	mov.w	r8, #0
 800d006:	f104 0919 	add.w	r9, r4, #25
 800d00a:	e7f4      	b.n	800cff6 <_printf_float+0x41e>
 800d00c:	2900      	cmp	r1, #0
 800d00e:	f43f ae8a 	beq.w	800cd26 <_printf_float+0x14e>
 800d012:	f04f 0c00 	mov.w	ip, #0
 800d016:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800d01a:	e9cd 0900 	strd	r0, r9, [sp]
 800d01e:	6022      	str	r2, [r4, #0]
 800d020:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d024:	4628      	mov	r0, r5
 800d026:	f7ff fd4f 	bl	800cac8 <__cvt>
 800d02a:	4680      	mov	r8, r0
 800d02c:	e64a      	b.n	800ccc4 <_printf_float+0xec>
 800d02e:	bf00      	nop

0800d030 <_printf_common>:
 800d030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d034:	4691      	mov	r9, r2
 800d036:	461f      	mov	r7, r3
 800d038:	688a      	ldr	r2, [r1, #8]
 800d03a:	690b      	ldr	r3, [r1, #16]
 800d03c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d040:	4293      	cmp	r3, r2
 800d042:	bfb8      	it	lt
 800d044:	4613      	movlt	r3, r2
 800d046:	f8c9 3000 	str.w	r3, [r9]
 800d04a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d04e:	4606      	mov	r6, r0
 800d050:	460c      	mov	r4, r1
 800d052:	b112      	cbz	r2, 800d05a <_printf_common+0x2a>
 800d054:	3301      	adds	r3, #1
 800d056:	f8c9 3000 	str.w	r3, [r9]
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	0699      	lsls	r1, r3, #26
 800d05e:	bf42      	ittt	mi
 800d060:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d064:	3302      	addmi	r3, #2
 800d066:	f8c9 3000 	strmi.w	r3, [r9]
 800d06a:	6825      	ldr	r5, [r4, #0]
 800d06c:	f015 0506 	ands.w	r5, r5, #6
 800d070:	d107      	bne.n	800d082 <_printf_common+0x52>
 800d072:	f104 0a19 	add.w	sl, r4, #25
 800d076:	68e3      	ldr	r3, [r4, #12]
 800d078:	f8d9 2000 	ldr.w	r2, [r9]
 800d07c:	1a9b      	subs	r3, r3, r2
 800d07e:	42ab      	cmp	r3, r5
 800d080:	dc28      	bgt.n	800d0d4 <_printf_common+0xa4>
 800d082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d086:	6822      	ldr	r2, [r4, #0]
 800d088:	3300      	adds	r3, #0
 800d08a:	bf18      	it	ne
 800d08c:	2301      	movne	r3, #1
 800d08e:	0692      	lsls	r2, r2, #26
 800d090:	d42d      	bmi.n	800d0ee <_printf_common+0xbe>
 800d092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d096:	4639      	mov	r1, r7
 800d098:	4630      	mov	r0, r6
 800d09a:	47c0      	blx	r8
 800d09c:	3001      	adds	r0, #1
 800d09e:	d020      	beq.n	800d0e2 <_printf_common+0xb2>
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	68e5      	ldr	r5, [r4, #12]
 800d0a4:	f8d9 2000 	ldr.w	r2, [r9]
 800d0a8:	f003 0306 	and.w	r3, r3, #6
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	bf08      	it	eq
 800d0b0:	1aad      	subeq	r5, r5, r2
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	6922      	ldr	r2, [r4, #16]
 800d0b6:	bf0c      	ite	eq
 800d0b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0bc:	2500      	movne	r5, #0
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	bfc4      	itt	gt
 800d0c2:	1a9b      	subgt	r3, r3, r2
 800d0c4:	18ed      	addgt	r5, r5, r3
 800d0c6:	f04f 0900 	mov.w	r9, #0
 800d0ca:	341a      	adds	r4, #26
 800d0cc:	454d      	cmp	r5, r9
 800d0ce:	d11a      	bne.n	800d106 <_printf_common+0xd6>
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e008      	b.n	800d0e6 <_printf_common+0xb6>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	4652      	mov	r2, sl
 800d0d8:	4639      	mov	r1, r7
 800d0da:	4630      	mov	r0, r6
 800d0dc:	47c0      	blx	r8
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d103      	bne.n	800d0ea <_printf_common+0xba>
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ea:	3501      	adds	r5, #1
 800d0ec:	e7c3      	b.n	800d076 <_printf_common+0x46>
 800d0ee:	18e1      	adds	r1, r4, r3
 800d0f0:	1c5a      	adds	r2, r3, #1
 800d0f2:	2030      	movs	r0, #48	; 0x30
 800d0f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0f8:	4422      	add	r2, r4
 800d0fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d102:	3302      	adds	r3, #2
 800d104:	e7c5      	b.n	800d092 <_printf_common+0x62>
 800d106:	2301      	movs	r3, #1
 800d108:	4622      	mov	r2, r4
 800d10a:	4639      	mov	r1, r7
 800d10c:	4630      	mov	r0, r6
 800d10e:	47c0      	blx	r8
 800d110:	3001      	adds	r0, #1
 800d112:	d0e6      	beq.n	800d0e2 <_printf_common+0xb2>
 800d114:	f109 0901 	add.w	r9, r9, #1
 800d118:	e7d8      	b.n	800d0cc <_printf_common+0x9c>
	...

0800d11c <_printf_i>:
 800d11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d120:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d124:	460c      	mov	r4, r1
 800d126:	7e09      	ldrb	r1, [r1, #24]
 800d128:	b085      	sub	sp, #20
 800d12a:	296e      	cmp	r1, #110	; 0x6e
 800d12c:	4617      	mov	r7, r2
 800d12e:	4606      	mov	r6, r0
 800d130:	4698      	mov	r8, r3
 800d132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d134:	f000 80b3 	beq.w	800d29e <_printf_i+0x182>
 800d138:	d822      	bhi.n	800d180 <_printf_i+0x64>
 800d13a:	2963      	cmp	r1, #99	; 0x63
 800d13c:	d036      	beq.n	800d1ac <_printf_i+0x90>
 800d13e:	d80a      	bhi.n	800d156 <_printf_i+0x3a>
 800d140:	2900      	cmp	r1, #0
 800d142:	f000 80b9 	beq.w	800d2b8 <_printf_i+0x19c>
 800d146:	2958      	cmp	r1, #88	; 0x58
 800d148:	f000 8083 	beq.w	800d252 <_printf_i+0x136>
 800d14c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d150:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d154:	e032      	b.n	800d1bc <_printf_i+0xa0>
 800d156:	2964      	cmp	r1, #100	; 0x64
 800d158:	d001      	beq.n	800d15e <_printf_i+0x42>
 800d15a:	2969      	cmp	r1, #105	; 0x69
 800d15c:	d1f6      	bne.n	800d14c <_printf_i+0x30>
 800d15e:	6820      	ldr	r0, [r4, #0]
 800d160:	6813      	ldr	r3, [r2, #0]
 800d162:	0605      	lsls	r5, r0, #24
 800d164:	f103 0104 	add.w	r1, r3, #4
 800d168:	d52a      	bpl.n	800d1c0 <_printf_i+0xa4>
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6011      	str	r1, [r2, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	da03      	bge.n	800d17a <_printf_i+0x5e>
 800d172:	222d      	movs	r2, #45	; 0x2d
 800d174:	425b      	negs	r3, r3
 800d176:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d17a:	486f      	ldr	r0, [pc, #444]	; (800d338 <_printf_i+0x21c>)
 800d17c:	220a      	movs	r2, #10
 800d17e:	e039      	b.n	800d1f4 <_printf_i+0xd8>
 800d180:	2973      	cmp	r1, #115	; 0x73
 800d182:	f000 809d 	beq.w	800d2c0 <_printf_i+0x1a4>
 800d186:	d808      	bhi.n	800d19a <_printf_i+0x7e>
 800d188:	296f      	cmp	r1, #111	; 0x6f
 800d18a:	d020      	beq.n	800d1ce <_printf_i+0xb2>
 800d18c:	2970      	cmp	r1, #112	; 0x70
 800d18e:	d1dd      	bne.n	800d14c <_printf_i+0x30>
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	f043 0320 	orr.w	r3, r3, #32
 800d196:	6023      	str	r3, [r4, #0]
 800d198:	e003      	b.n	800d1a2 <_printf_i+0x86>
 800d19a:	2975      	cmp	r1, #117	; 0x75
 800d19c:	d017      	beq.n	800d1ce <_printf_i+0xb2>
 800d19e:	2978      	cmp	r1, #120	; 0x78
 800d1a0:	d1d4      	bne.n	800d14c <_printf_i+0x30>
 800d1a2:	2378      	movs	r3, #120	; 0x78
 800d1a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1a8:	4864      	ldr	r0, [pc, #400]	; (800d33c <_printf_i+0x220>)
 800d1aa:	e055      	b.n	800d258 <_printf_i+0x13c>
 800d1ac:	6813      	ldr	r3, [r2, #0]
 800d1ae:	1d19      	adds	r1, r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	6011      	str	r1, [r2, #0]
 800d1b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e08c      	b.n	800d2da <_printf_i+0x1be>
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6011      	str	r1, [r2, #0]
 800d1c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1c8:	bf18      	it	ne
 800d1ca:	b21b      	sxthne	r3, r3
 800d1cc:	e7cf      	b.n	800d16e <_printf_i+0x52>
 800d1ce:	6813      	ldr	r3, [r2, #0]
 800d1d0:	6825      	ldr	r5, [r4, #0]
 800d1d2:	1d18      	adds	r0, r3, #4
 800d1d4:	6010      	str	r0, [r2, #0]
 800d1d6:	0628      	lsls	r0, r5, #24
 800d1d8:	d501      	bpl.n	800d1de <_printf_i+0xc2>
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	e002      	b.n	800d1e4 <_printf_i+0xc8>
 800d1de:	0668      	lsls	r0, r5, #25
 800d1e0:	d5fb      	bpl.n	800d1da <_printf_i+0xbe>
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	4854      	ldr	r0, [pc, #336]	; (800d338 <_printf_i+0x21c>)
 800d1e6:	296f      	cmp	r1, #111	; 0x6f
 800d1e8:	bf14      	ite	ne
 800d1ea:	220a      	movne	r2, #10
 800d1ec:	2208      	moveq	r2, #8
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1f4:	6865      	ldr	r5, [r4, #4]
 800d1f6:	60a5      	str	r5, [r4, #8]
 800d1f8:	2d00      	cmp	r5, #0
 800d1fa:	f2c0 8095 	blt.w	800d328 <_printf_i+0x20c>
 800d1fe:	6821      	ldr	r1, [r4, #0]
 800d200:	f021 0104 	bic.w	r1, r1, #4
 800d204:	6021      	str	r1, [r4, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d13d      	bne.n	800d286 <_printf_i+0x16a>
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	f040 808e 	bne.w	800d32c <_printf_i+0x210>
 800d210:	4665      	mov	r5, ip
 800d212:	2a08      	cmp	r2, #8
 800d214:	d10b      	bne.n	800d22e <_printf_i+0x112>
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	07db      	lsls	r3, r3, #31
 800d21a:	d508      	bpl.n	800d22e <_printf_i+0x112>
 800d21c:	6923      	ldr	r3, [r4, #16]
 800d21e:	6862      	ldr	r2, [r4, #4]
 800d220:	429a      	cmp	r2, r3
 800d222:	bfde      	ittt	le
 800d224:	2330      	movle	r3, #48	; 0x30
 800d226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d22a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d22e:	ebac 0305 	sub.w	r3, ip, r5
 800d232:	6123      	str	r3, [r4, #16]
 800d234:	f8cd 8000 	str.w	r8, [sp]
 800d238:	463b      	mov	r3, r7
 800d23a:	aa03      	add	r2, sp, #12
 800d23c:	4621      	mov	r1, r4
 800d23e:	4630      	mov	r0, r6
 800d240:	f7ff fef6 	bl	800d030 <_printf_common>
 800d244:	3001      	adds	r0, #1
 800d246:	d14d      	bne.n	800d2e4 <_printf_i+0x1c8>
 800d248:	f04f 30ff 	mov.w	r0, #4294967295
 800d24c:	b005      	add	sp, #20
 800d24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d252:	4839      	ldr	r0, [pc, #228]	; (800d338 <_printf_i+0x21c>)
 800d254:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d258:	6813      	ldr	r3, [r2, #0]
 800d25a:	6821      	ldr	r1, [r4, #0]
 800d25c:	1d1d      	adds	r5, r3, #4
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6015      	str	r5, [r2, #0]
 800d262:	060a      	lsls	r2, r1, #24
 800d264:	d50b      	bpl.n	800d27e <_printf_i+0x162>
 800d266:	07ca      	lsls	r2, r1, #31
 800d268:	bf44      	itt	mi
 800d26a:	f041 0120 	orrmi.w	r1, r1, #32
 800d26e:	6021      	strmi	r1, [r4, #0]
 800d270:	b91b      	cbnz	r3, 800d27a <_printf_i+0x15e>
 800d272:	6822      	ldr	r2, [r4, #0]
 800d274:	f022 0220 	bic.w	r2, r2, #32
 800d278:	6022      	str	r2, [r4, #0]
 800d27a:	2210      	movs	r2, #16
 800d27c:	e7b7      	b.n	800d1ee <_printf_i+0xd2>
 800d27e:	064d      	lsls	r5, r1, #25
 800d280:	bf48      	it	mi
 800d282:	b29b      	uxthmi	r3, r3
 800d284:	e7ef      	b.n	800d266 <_printf_i+0x14a>
 800d286:	4665      	mov	r5, ip
 800d288:	fbb3 f1f2 	udiv	r1, r3, r2
 800d28c:	fb02 3311 	mls	r3, r2, r1, r3
 800d290:	5cc3      	ldrb	r3, [r0, r3]
 800d292:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d296:	460b      	mov	r3, r1
 800d298:	2900      	cmp	r1, #0
 800d29a:	d1f5      	bne.n	800d288 <_printf_i+0x16c>
 800d29c:	e7b9      	b.n	800d212 <_printf_i+0xf6>
 800d29e:	6813      	ldr	r3, [r2, #0]
 800d2a0:	6825      	ldr	r5, [r4, #0]
 800d2a2:	6961      	ldr	r1, [r4, #20]
 800d2a4:	1d18      	adds	r0, r3, #4
 800d2a6:	6010      	str	r0, [r2, #0]
 800d2a8:	0628      	lsls	r0, r5, #24
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	d501      	bpl.n	800d2b2 <_printf_i+0x196>
 800d2ae:	6019      	str	r1, [r3, #0]
 800d2b0:	e002      	b.n	800d2b8 <_printf_i+0x19c>
 800d2b2:	066a      	lsls	r2, r5, #25
 800d2b4:	d5fb      	bpl.n	800d2ae <_printf_i+0x192>
 800d2b6:	8019      	strh	r1, [r3, #0]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	6123      	str	r3, [r4, #16]
 800d2bc:	4665      	mov	r5, ip
 800d2be:	e7b9      	b.n	800d234 <_printf_i+0x118>
 800d2c0:	6813      	ldr	r3, [r2, #0]
 800d2c2:	1d19      	adds	r1, r3, #4
 800d2c4:	6011      	str	r1, [r2, #0]
 800d2c6:	681d      	ldr	r5, [r3, #0]
 800d2c8:	6862      	ldr	r2, [r4, #4]
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f7f3 f86f 	bl	80003b0 <memchr>
 800d2d2:	b108      	cbz	r0, 800d2d8 <_printf_i+0x1bc>
 800d2d4:	1b40      	subs	r0, r0, r5
 800d2d6:	6060      	str	r0, [r4, #4]
 800d2d8:	6863      	ldr	r3, [r4, #4]
 800d2da:	6123      	str	r3, [r4, #16]
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e2:	e7a7      	b.n	800d234 <_printf_i+0x118>
 800d2e4:	6923      	ldr	r3, [r4, #16]
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	47c0      	blx	r8
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	d0aa      	beq.n	800d248 <_printf_i+0x12c>
 800d2f2:	6823      	ldr	r3, [r4, #0]
 800d2f4:	079b      	lsls	r3, r3, #30
 800d2f6:	d413      	bmi.n	800d320 <_printf_i+0x204>
 800d2f8:	68e0      	ldr	r0, [r4, #12]
 800d2fa:	9b03      	ldr	r3, [sp, #12]
 800d2fc:	4298      	cmp	r0, r3
 800d2fe:	bfb8      	it	lt
 800d300:	4618      	movlt	r0, r3
 800d302:	e7a3      	b.n	800d24c <_printf_i+0x130>
 800d304:	2301      	movs	r3, #1
 800d306:	464a      	mov	r2, r9
 800d308:	4639      	mov	r1, r7
 800d30a:	4630      	mov	r0, r6
 800d30c:	47c0      	blx	r8
 800d30e:	3001      	adds	r0, #1
 800d310:	d09a      	beq.n	800d248 <_printf_i+0x12c>
 800d312:	3501      	adds	r5, #1
 800d314:	68e3      	ldr	r3, [r4, #12]
 800d316:	9a03      	ldr	r2, [sp, #12]
 800d318:	1a9b      	subs	r3, r3, r2
 800d31a:	42ab      	cmp	r3, r5
 800d31c:	dcf2      	bgt.n	800d304 <_printf_i+0x1e8>
 800d31e:	e7eb      	b.n	800d2f8 <_printf_i+0x1dc>
 800d320:	2500      	movs	r5, #0
 800d322:	f104 0919 	add.w	r9, r4, #25
 800d326:	e7f5      	b.n	800d314 <_printf_i+0x1f8>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1ac      	bne.n	800d286 <_printf_i+0x16a>
 800d32c:	7803      	ldrb	r3, [r0, #0]
 800d32e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d332:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d336:	e76c      	b.n	800d212 <_printf_i+0xf6>
 800d338:	080153e8 	.word	0x080153e8
 800d33c:	080153f9 	.word	0x080153f9

0800d340 <_sbrk_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4c06      	ldr	r4, [pc, #24]	; (800d35c <_sbrk_r+0x1c>)
 800d344:	2300      	movs	r3, #0
 800d346:	4605      	mov	r5, r0
 800d348:	4608      	mov	r0, r1
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	f7f5 ff4e 	bl	80031ec <_sbrk>
 800d350:	1c43      	adds	r3, r0, #1
 800d352:	d102      	bne.n	800d35a <_sbrk_r+0x1a>
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	b103      	cbz	r3, 800d35a <_sbrk_r+0x1a>
 800d358:	602b      	str	r3, [r5, #0]
 800d35a:	bd38      	pop	{r3, r4, r5, pc}
 800d35c:	2400f0bc 	.word	0x2400f0bc

0800d360 <siprintf>:
 800d360:	b40e      	push	{r1, r2, r3}
 800d362:	b500      	push	{lr}
 800d364:	b09c      	sub	sp, #112	; 0x70
 800d366:	ab1d      	add	r3, sp, #116	; 0x74
 800d368:	9002      	str	r0, [sp, #8]
 800d36a:	9006      	str	r0, [sp, #24]
 800d36c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d370:	4809      	ldr	r0, [pc, #36]	; (800d398 <siprintf+0x38>)
 800d372:	9107      	str	r1, [sp, #28]
 800d374:	9104      	str	r1, [sp, #16]
 800d376:	4909      	ldr	r1, [pc, #36]	; (800d39c <siprintf+0x3c>)
 800d378:	f853 2b04 	ldr.w	r2, [r3], #4
 800d37c:	9105      	str	r1, [sp, #20]
 800d37e:	6800      	ldr	r0, [r0, #0]
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	a902      	add	r1, sp, #8
 800d384:	f001 f94a 	bl	800e61c <_svfiprintf_r>
 800d388:	9b02      	ldr	r3, [sp, #8]
 800d38a:	2200      	movs	r2, #0
 800d38c:	701a      	strb	r2, [r3, #0]
 800d38e:	b01c      	add	sp, #112	; 0x70
 800d390:	f85d eb04 	ldr.w	lr, [sp], #4
 800d394:	b003      	add	sp, #12
 800d396:	4770      	bx	lr
 800d398:	24000380 	.word	0x24000380
 800d39c:	ffff0208 	.word	0xffff0208

0800d3a0 <strcpy>:
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3a6:	f803 2b01 	strb.w	r2, [r3], #1
 800d3aa:	2a00      	cmp	r2, #0
 800d3ac:	d1f9      	bne.n	800d3a2 <strcpy+0x2>
 800d3ae:	4770      	bx	lr

0800d3b0 <quorem>:
 800d3b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	6903      	ldr	r3, [r0, #16]
 800d3b6:	690c      	ldr	r4, [r1, #16]
 800d3b8:	42a3      	cmp	r3, r4
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	f2c0 8082 	blt.w	800d4c4 <quorem+0x114>
 800d3c0:	3c01      	subs	r4, #1
 800d3c2:	f101 0714 	add.w	r7, r1, #20
 800d3c6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d3ca:	f100 0614 	add.w	r6, r0, #20
 800d3ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d3d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d3d6:	eb06 030c 	add.w	r3, r6, ip
 800d3da:	3501      	adds	r5, #1
 800d3dc:	eb07 090c 	add.w	r9, r7, ip
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	fbb0 f5f5 	udiv	r5, r0, r5
 800d3e6:	b395      	cbz	r5, 800d44e <quorem+0x9e>
 800d3e8:	f04f 0a00 	mov.w	sl, #0
 800d3ec:	4638      	mov	r0, r7
 800d3ee:	46b6      	mov	lr, r6
 800d3f0:	46d3      	mov	fp, sl
 800d3f2:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3f6:	b293      	uxth	r3, r2
 800d3f8:	fb05 a303 	mla	r3, r5, r3, sl
 800d3fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d400:	b29b      	uxth	r3, r3
 800d402:	ebab 0303 	sub.w	r3, fp, r3
 800d406:	0c12      	lsrs	r2, r2, #16
 800d408:	f8de b000 	ldr.w	fp, [lr]
 800d40c:	fb05 a202 	mla	r2, r5, r2, sl
 800d410:	fa13 f38b 	uxtah	r3, r3, fp
 800d414:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d418:	fa1f fb82 	uxth.w	fp, r2
 800d41c:	f8de 2000 	ldr.w	r2, [lr]
 800d420:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d428:	b29b      	uxth	r3, r3
 800d42a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d42e:	4581      	cmp	r9, r0
 800d430:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d434:	f84e 3b04 	str.w	r3, [lr], #4
 800d438:	d2db      	bcs.n	800d3f2 <quorem+0x42>
 800d43a:	f856 300c 	ldr.w	r3, [r6, ip]
 800d43e:	b933      	cbnz	r3, 800d44e <quorem+0x9e>
 800d440:	9b01      	ldr	r3, [sp, #4]
 800d442:	3b04      	subs	r3, #4
 800d444:	429e      	cmp	r6, r3
 800d446:	461a      	mov	r2, r3
 800d448:	d330      	bcc.n	800d4ac <quorem+0xfc>
 800d44a:	f8c8 4010 	str.w	r4, [r8, #16]
 800d44e:	4640      	mov	r0, r8
 800d450:	f000 ffb6 	bl	800e3c0 <__mcmp>
 800d454:	2800      	cmp	r0, #0
 800d456:	db25      	blt.n	800d4a4 <quorem+0xf4>
 800d458:	3501      	adds	r5, #1
 800d45a:	4630      	mov	r0, r6
 800d45c:	f04f 0c00 	mov.w	ip, #0
 800d460:	f857 2b04 	ldr.w	r2, [r7], #4
 800d464:	f8d0 e000 	ldr.w	lr, [r0]
 800d468:	b293      	uxth	r3, r2
 800d46a:	ebac 0303 	sub.w	r3, ip, r3
 800d46e:	0c12      	lsrs	r2, r2, #16
 800d470:	fa13 f38e 	uxtah	r3, r3, lr
 800d474:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d478:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d482:	45b9      	cmp	r9, r7
 800d484:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d488:	f840 3b04 	str.w	r3, [r0], #4
 800d48c:	d2e8      	bcs.n	800d460 <quorem+0xb0>
 800d48e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d492:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d496:	b92a      	cbnz	r2, 800d4a4 <quorem+0xf4>
 800d498:	3b04      	subs	r3, #4
 800d49a:	429e      	cmp	r6, r3
 800d49c:	461a      	mov	r2, r3
 800d49e:	d30b      	bcc.n	800d4b8 <quorem+0x108>
 800d4a0:	f8c8 4010 	str.w	r4, [r8, #16]
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	b003      	add	sp, #12
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	3b04      	subs	r3, #4
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	d1ca      	bne.n	800d44a <quorem+0x9a>
 800d4b4:	3c01      	subs	r4, #1
 800d4b6:	e7c5      	b.n	800d444 <quorem+0x94>
 800d4b8:	6812      	ldr	r2, [r2, #0]
 800d4ba:	3b04      	subs	r3, #4
 800d4bc:	2a00      	cmp	r2, #0
 800d4be:	d1ef      	bne.n	800d4a0 <quorem+0xf0>
 800d4c0:	3c01      	subs	r4, #1
 800d4c2:	e7ea      	b.n	800d49a <quorem+0xea>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7ee      	b.n	800d4a6 <quorem+0xf6>

0800d4c8 <_dtoa_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	ec57 6b10 	vmov	r6, r7, d0
 800d4d0:	b095      	sub	sp, #84	; 0x54
 800d4d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4d4:	9108      	str	r1, [sp, #32]
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	920a      	str	r2, [sp, #40]	; 0x28
 800d4da:	9311      	str	r3, [sp, #68]	; 0x44
 800d4dc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d4e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d4e4:	b93d      	cbnz	r5, 800d4f6 <_dtoa_r+0x2e>
 800d4e6:	2010      	movs	r0, #16
 800d4e8:	f7ff fa2e 	bl	800c948 <malloc>
 800d4ec:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4f2:	6005      	str	r5, [r0, #0]
 800d4f4:	60c5      	str	r5, [r0, #12]
 800d4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4f8:	6819      	ldr	r1, [r3, #0]
 800d4fa:	b151      	cbz	r1, 800d512 <_dtoa_r+0x4a>
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	604a      	str	r2, [r1, #4]
 800d500:	2301      	movs	r3, #1
 800d502:	4093      	lsls	r3, r2
 800d504:	608b      	str	r3, [r1, #8]
 800d506:	4620      	mov	r0, r4
 800d508:	f000 fd79 	bl	800dffe <_Bfree>
 800d50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d50e:	2200      	movs	r2, #0
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	1e3b      	subs	r3, r7, #0
 800d514:	bfb9      	ittee	lt
 800d516:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d51a:	9303      	strlt	r3, [sp, #12]
 800d51c:	2300      	movge	r3, #0
 800d51e:	f8c8 3000 	strge.w	r3, [r8]
 800d522:	9d03      	ldr	r5, [sp, #12]
 800d524:	4bac      	ldr	r3, [pc, #688]	; (800d7d8 <_dtoa_r+0x310>)
 800d526:	bfbc      	itt	lt
 800d528:	2201      	movlt	r2, #1
 800d52a:	f8c8 2000 	strlt.w	r2, [r8]
 800d52e:	43ab      	bics	r3, r5
 800d530:	d11b      	bne.n	800d56a <_dtoa_r+0xa2>
 800d532:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d534:	f242 730f 	movw	r3, #9999	; 0x270f
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	9b02      	ldr	r3, [sp, #8]
 800d53c:	b923      	cbnz	r3, 800d548 <_dtoa_r+0x80>
 800d53e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d542:	2d00      	cmp	r5, #0
 800d544:	f000 84dd 	beq.w	800df02 <_dtoa_r+0xa3a>
 800d548:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d54a:	b953      	cbnz	r3, 800d562 <_dtoa_r+0x9a>
 800d54c:	4ba3      	ldr	r3, [pc, #652]	; (800d7dc <_dtoa_r+0x314>)
 800d54e:	e020      	b.n	800d592 <_dtoa_r+0xca>
 800d550:	4ba3      	ldr	r3, [pc, #652]	; (800d7e0 <_dtoa_r+0x318>)
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	3308      	adds	r3, #8
 800d556:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	9804      	ldr	r0, [sp, #16]
 800d55c:	b015      	add	sp, #84	; 0x54
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d562:	4b9e      	ldr	r3, [pc, #632]	; (800d7dc <_dtoa_r+0x314>)
 800d564:	9304      	str	r3, [sp, #16]
 800d566:	3303      	adds	r3, #3
 800d568:	e7f5      	b.n	800d556 <_dtoa_r+0x8e>
 800d56a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d56e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d576:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d57a:	d10c      	bne.n	800d596 <_dtoa_r+0xce>
 800d57c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d57e:	2301      	movs	r3, #1
 800d580:	6013      	str	r3, [r2, #0]
 800d582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 84b9 	beq.w	800defc <_dtoa_r+0xa34>
 800d58a:	4b96      	ldr	r3, [pc, #600]	; (800d7e4 <_dtoa_r+0x31c>)
 800d58c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	3b01      	subs	r3, #1
 800d592:	9304      	str	r3, [sp, #16]
 800d594:	e7e1      	b.n	800d55a <_dtoa_r+0x92>
 800d596:	a913      	add	r1, sp, #76	; 0x4c
 800d598:	aa12      	add	r2, sp, #72	; 0x48
 800d59a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f000 ff85 	bl	800e4ae <__d2b>
 800d5a4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d5a8:	9001      	str	r0, [sp, #4]
 800d5aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d5ac:	2e00      	cmp	r6, #0
 800d5ae:	d046      	beq.n	800d63e <_dtoa_r+0x176>
 800d5b0:	9805      	ldr	r0, [sp, #20]
 800d5b2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d5b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5ba:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d5be:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d5c2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d5c6:	2700      	movs	r7, #0
 800d5c8:	ee07 aa90 	vmov	s15, sl
 800d5cc:	ec43 2b16 	vmov	d6, r2, r3
 800d5d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d5d4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d7c0 <_dtoa_r+0x2f8>
 800d5d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d5dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5e0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d7c8 <_dtoa_r+0x300>
 800d5e4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d5e8:	eeb0 7b46 	vmov.f64	d7, d6
 800d5ec:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d7d0 <_dtoa_r+0x308>
 800d5f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d5f4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d5f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d600:	ee16 ba90 	vmov	fp, s13
 800d604:	d508      	bpl.n	800d618 <_dtoa_r+0x150>
 800d606:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d60a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d612:	bf18      	it	ne
 800d614:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d618:	f1bb 0f16 	cmp.w	fp, #22
 800d61c:	d834      	bhi.n	800d688 <_dtoa_r+0x1c0>
 800d61e:	4b72      	ldr	r3, [pc, #456]	; (800d7e8 <_dtoa_r+0x320>)
 800d620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d624:	ed93 7b00 	vldr	d7, [r3]
 800d628:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d62c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d634:	dd01      	ble.n	800d63a <_dtoa_r+0x172>
 800d636:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d63a:	2300      	movs	r3, #0
 800d63c:	e025      	b.n	800d68a <_dtoa_r+0x1c2>
 800d63e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d640:	eb01 0a03 	add.w	sl, r1, r3
 800d644:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d648:	2b20      	cmp	r3, #32
 800d64a:	dd17      	ble.n	800d67c <_dtoa_r+0x1b4>
 800d64c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d650:	9a02      	ldr	r2, [sp, #8]
 800d652:	409d      	lsls	r5, r3
 800d654:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d658:	fa22 f303 	lsr.w	r3, r2, r3
 800d65c:	432b      	orrs	r3, r5
 800d65e:	ee07 3a90 	vmov	s15, r3
 800d662:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d66a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d66e:	9805      	ldr	r0, [sp, #20]
 800d670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d674:	2701      	movs	r7, #1
 800d676:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d67a:	e7a5      	b.n	800d5c8 <_dtoa_r+0x100>
 800d67c:	9a02      	ldr	r2, [sp, #8]
 800d67e:	f1c3 0320 	rsb	r3, r3, #32
 800d682:	fa02 f303 	lsl.w	r3, r2, r3
 800d686:	e7ea      	b.n	800d65e <_dtoa_r+0x196>
 800d688:	2301      	movs	r3, #1
 800d68a:	eba1 0a0a 	sub.w	sl, r1, sl
 800d68e:	9310      	str	r3, [sp, #64]	; 0x40
 800d690:	f1ba 0301 	subs.w	r3, sl, #1
 800d694:	9307      	str	r3, [sp, #28]
 800d696:	bf43      	ittte	mi
 800d698:	2300      	movmi	r3, #0
 800d69a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d69e:	9307      	strmi	r3, [sp, #28]
 800d6a0:	f04f 0a00 	movpl.w	sl, #0
 800d6a4:	f1bb 0f00 	cmp.w	fp, #0
 800d6a8:	db19      	blt.n	800d6de <_dtoa_r+0x216>
 800d6aa:	9b07      	ldr	r3, [sp, #28]
 800d6ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d6b0:	445b      	add	r3, fp
 800d6b2:	9307      	str	r3, [sp, #28]
 800d6b4:	f04f 0800 	mov.w	r8, #0
 800d6b8:	9b08      	ldr	r3, [sp, #32]
 800d6ba:	2b09      	cmp	r3, #9
 800d6bc:	d866      	bhi.n	800d78c <_dtoa_r+0x2c4>
 800d6be:	2b05      	cmp	r3, #5
 800d6c0:	bfc4      	itt	gt
 800d6c2:	3b04      	subgt	r3, #4
 800d6c4:	9308      	strgt	r3, [sp, #32]
 800d6c6:	9b08      	ldr	r3, [sp, #32]
 800d6c8:	f1a3 0302 	sub.w	r3, r3, #2
 800d6cc:	bfcc      	ite	gt
 800d6ce:	2500      	movgt	r5, #0
 800d6d0:	2501      	movle	r5, #1
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d866      	bhi.n	800d7a4 <_dtoa_r+0x2dc>
 800d6d6:	e8df f003 	tbb	[pc, r3]
 800d6da:	5755      	.short	0x5755
 800d6dc:	4909      	.short	0x4909
 800d6de:	2300      	movs	r3, #0
 800d6e0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d6e4:	f1cb 0800 	rsb	r8, fp, #0
 800d6e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6ea:	e7e5      	b.n	800d6b8 <_dtoa_r+0x1f0>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	dd59      	ble.n	800d7aa <_dtoa_r+0x2e2>
 800d6f6:	9306      	str	r3, [sp, #24]
 800d6f8:	4699      	mov	r9, r3
 800d6fa:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	6072      	str	r2, [r6, #4]
 800d700:	2204      	movs	r2, #4
 800d702:	f102 0014 	add.w	r0, r2, #20
 800d706:	4298      	cmp	r0, r3
 800d708:	6871      	ldr	r1, [r6, #4]
 800d70a:	d953      	bls.n	800d7b4 <_dtoa_r+0x2ec>
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 fc42 	bl	800df96 <_Balloc>
 800d712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d714:	6030      	str	r0, [r6, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	f1b9 0f0e 	cmp.w	r9, #14
 800d71e:	f200 80c2 	bhi.w	800d8a6 <_dtoa_r+0x3de>
 800d722:	2d00      	cmp	r5, #0
 800d724:	f000 80bf 	beq.w	800d8a6 <_dtoa_r+0x3de>
 800d728:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d72c:	f1bb 0f00 	cmp.w	fp, #0
 800d730:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d734:	f340 80e6 	ble.w	800d904 <_dtoa_r+0x43c>
 800d738:	4a2b      	ldr	r2, [pc, #172]	; (800d7e8 <_dtoa_r+0x320>)
 800d73a:	f00b 030f 	and.w	r3, fp, #15
 800d73e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d742:	ed93 7b00 	vldr	d7, [r3]
 800d746:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d74a:	06da      	lsls	r2, r3, #27
 800d74c:	f140 80d8 	bpl.w	800d900 <_dtoa_r+0x438>
 800d750:	4a26      	ldr	r2, [pc, #152]	; (800d7ec <_dtoa_r+0x324>)
 800d752:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d756:	ed92 6b08 	vldr	d6, [r2, #32]
 800d75a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d75e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d762:	f003 030f 	and.w	r3, r3, #15
 800d766:	2203      	movs	r2, #3
 800d768:	4920      	ldr	r1, [pc, #128]	; (800d7ec <_dtoa_r+0x324>)
 800d76a:	e04a      	b.n	800d802 <_dtoa_r+0x33a>
 800d76c:	2301      	movs	r3, #1
 800d76e:	9309      	str	r3, [sp, #36]	; 0x24
 800d770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d772:	445b      	add	r3, fp
 800d774:	f103 0901 	add.w	r9, r3, #1
 800d778:	9306      	str	r3, [sp, #24]
 800d77a:	464b      	mov	r3, r9
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	bfb8      	it	lt
 800d780:	2301      	movlt	r3, #1
 800d782:	e7ba      	b.n	800d6fa <_dtoa_r+0x232>
 800d784:	2300      	movs	r3, #0
 800d786:	e7b2      	b.n	800d6ee <_dtoa_r+0x226>
 800d788:	2300      	movs	r3, #0
 800d78a:	e7f0      	b.n	800d76e <_dtoa_r+0x2a6>
 800d78c:	2501      	movs	r5, #1
 800d78e:	2300      	movs	r3, #0
 800d790:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d794:	f04f 33ff 	mov.w	r3, #4294967295
 800d798:	9306      	str	r3, [sp, #24]
 800d79a:	4699      	mov	r9, r3
 800d79c:	2200      	movs	r2, #0
 800d79e:	2312      	movs	r3, #18
 800d7a0:	920a      	str	r2, [sp, #40]	; 0x28
 800d7a2:	e7aa      	b.n	800d6fa <_dtoa_r+0x232>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a8:	e7f4      	b.n	800d794 <_dtoa_r+0x2cc>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	9306      	str	r3, [sp, #24]
 800d7ae:	4699      	mov	r9, r3
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	e7f5      	b.n	800d7a0 <_dtoa_r+0x2d8>
 800d7b4:	3101      	adds	r1, #1
 800d7b6:	6071      	str	r1, [r6, #4]
 800d7b8:	0052      	lsls	r2, r2, #1
 800d7ba:	e7a2      	b.n	800d702 <_dtoa_r+0x23a>
 800d7bc:	f3af 8000 	nop.w
 800d7c0:	636f4361 	.word	0x636f4361
 800d7c4:	3fd287a7 	.word	0x3fd287a7
 800d7c8:	8b60c8b3 	.word	0x8b60c8b3
 800d7cc:	3fc68a28 	.word	0x3fc68a28
 800d7d0:	509f79fb 	.word	0x509f79fb
 800d7d4:	3fd34413 	.word	0x3fd34413
 800d7d8:	7ff00000 	.word	0x7ff00000
 800d7dc:	08015413 	.word	0x08015413
 800d7e0:	0801540a 	.word	0x0801540a
 800d7e4:	08015635 	.word	0x08015635
 800d7e8:	08015440 	.word	0x08015440
 800d7ec:	08015418 	.word	0x08015418
 800d7f0:	07de      	lsls	r6, r3, #31
 800d7f2:	d504      	bpl.n	800d7fe <_dtoa_r+0x336>
 800d7f4:	ed91 6b00 	vldr	d6, [r1]
 800d7f8:	3201      	adds	r2, #1
 800d7fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7fe:	105b      	asrs	r3, r3, #1
 800d800:	3108      	adds	r1, #8
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1f4      	bne.n	800d7f0 <_dtoa_r+0x328>
 800d806:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d80a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d80e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d812:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 80a7 	beq.w	800d968 <_dtoa_r+0x4a0>
 800d81a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d81e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d822:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d82a:	f140 809d 	bpl.w	800d968 <_dtoa_r+0x4a0>
 800d82e:	f1b9 0f00 	cmp.w	r9, #0
 800d832:	f000 8099 	beq.w	800d968 <_dtoa_r+0x4a0>
 800d836:	9b06      	ldr	r3, [sp, #24]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dd30      	ble.n	800d89e <_dtoa_r+0x3d6>
 800d83c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d840:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d844:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d848:	9d06      	ldr	r5, [sp, #24]
 800d84a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d84e:	3201      	adds	r2, #1
 800d850:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d854:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d858:	ee07 2a90 	vmov	s15, r2
 800d85c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d860:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d864:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d868:	9a03      	ldr	r2, [sp, #12]
 800d86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d86e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d872:	2d00      	cmp	r5, #0
 800d874:	d17b      	bne.n	800d96e <_dtoa_r+0x4a6>
 800d876:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d87a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d87e:	ec41 0b17 	vmov	d7, r0, r1
 800d882:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88a:	f300 8253 	bgt.w	800dd34 <_dtoa_r+0x86c>
 800d88e:	eeb1 7b47 	vneg.f64	d7, d7
 800d892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	f100 8249 	bmi.w	800dd30 <_dtoa_r+0x868>
 800d89e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d8a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f2c0 8119 	blt.w	800dae0 <_dtoa_r+0x618>
 800d8ae:	f1bb 0f0e 	cmp.w	fp, #14
 800d8b2:	f300 8115 	bgt.w	800dae0 <_dtoa_r+0x618>
 800d8b6:	4bc3      	ldr	r3, [pc, #780]	; (800dbc4 <_dtoa_r+0x6fc>)
 800d8b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d8bc:	ed93 6b00 	vldr	d6, [r3]
 800d8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f280 80ba 	bge.w	800da3c <_dtoa_r+0x574>
 800d8c8:	f1b9 0f00 	cmp.w	r9, #0
 800d8cc:	f300 80b6 	bgt.w	800da3c <_dtoa_r+0x574>
 800d8d0:	f040 822d 	bne.w	800dd2e <_dtoa_r+0x866>
 800d8d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d8d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d8dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e8:	464d      	mov	r5, r9
 800d8ea:	464f      	mov	r7, r9
 800d8ec:	f280 8204 	bge.w	800dcf8 <_dtoa_r+0x830>
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	9a04      	ldr	r2, [sp, #16]
 800d8f4:	1c5e      	adds	r6, r3, #1
 800d8f6:	2331      	movs	r3, #49	; 0x31
 800d8f8:	7013      	strb	r3, [r2, #0]
 800d8fa:	f10b 0b01 	add.w	fp, fp, #1
 800d8fe:	e1ff      	b.n	800dd00 <_dtoa_r+0x838>
 800d900:	2202      	movs	r2, #2
 800d902:	e731      	b.n	800d768 <_dtoa_r+0x2a0>
 800d904:	d02e      	beq.n	800d964 <_dtoa_r+0x49c>
 800d906:	f1cb 0300 	rsb	r3, fp, #0
 800d90a:	4aae      	ldr	r2, [pc, #696]	; (800dbc4 <_dtoa_r+0x6fc>)
 800d90c:	f003 010f 	and.w	r1, r3, #15
 800d910:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d914:	ed92 7b00 	vldr	d7, [r2]
 800d918:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d91c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d920:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d924:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d928:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d92c:	49a6      	ldr	r1, [pc, #664]	; (800dbc8 <_dtoa_r+0x700>)
 800d92e:	111b      	asrs	r3, r3, #4
 800d930:	2000      	movs	r0, #0
 800d932:	2202      	movs	r2, #2
 800d934:	b93b      	cbnz	r3, 800d946 <_dtoa_r+0x47e>
 800d936:	2800      	cmp	r0, #0
 800d938:	f43f af6b 	beq.w	800d812 <_dtoa_r+0x34a>
 800d93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d944:	e765      	b.n	800d812 <_dtoa_r+0x34a>
 800d946:	07dd      	lsls	r5, r3, #31
 800d948:	d509      	bpl.n	800d95e <_dtoa_r+0x496>
 800d94a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d94e:	ed91 7b00 	vldr	d7, [r1]
 800d952:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d956:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d95a:	3201      	adds	r2, #1
 800d95c:	2001      	movs	r0, #1
 800d95e:	105b      	asrs	r3, r3, #1
 800d960:	3108      	adds	r1, #8
 800d962:	e7e7      	b.n	800d934 <_dtoa_r+0x46c>
 800d964:	2202      	movs	r2, #2
 800d966:	e754      	b.n	800d812 <_dtoa_r+0x34a>
 800d968:	465b      	mov	r3, fp
 800d96a:	464d      	mov	r5, r9
 800d96c:	e770      	b.n	800d850 <_dtoa_r+0x388>
 800d96e:	4a95      	ldr	r2, [pc, #596]	; (800dbc4 <_dtoa_r+0x6fc>)
 800d970:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d974:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d97a:	ec41 0b17 	vmov	d7, r0, r1
 800d97e:	b35a      	cbz	r2, 800d9d8 <_dtoa_r+0x510>
 800d980:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d984:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d988:	9e04      	ldr	r6, [sp, #16]
 800d98a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d98e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d992:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d996:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d99a:	ee14 2a90 	vmov	r2, s9
 800d99e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9a2:	3230      	adds	r2, #48	; 0x30
 800d9a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b0:	f806 2b01 	strb.w	r2, [r6], #1
 800d9b4:	d43b      	bmi.n	800da2e <_dtoa_r+0x566>
 800d9b6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d9ba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c2:	d472      	bmi.n	800daaa <_dtoa_r+0x5e2>
 800d9c4:	9a04      	ldr	r2, [sp, #16]
 800d9c6:	1ab2      	subs	r2, r6, r2
 800d9c8:	4295      	cmp	r5, r2
 800d9ca:	f77f af68 	ble.w	800d89e <_dtoa_r+0x3d6>
 800d9ce:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d9d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d9d6:	e7de      	b.n	800d996 <_dtoa_r+0x4ce>
 800d9d8:	9a04      	ldr	r2, [sp, #16]
 800d9da:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d9de:	1956      	adds	r6, r2, r5
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9e6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9ea:	ee14 2a90 	vmov	r2, s9
 800d9ee:	3230      	adds	r2, #48	; 0x30
 800d9f0:	f801 2b01 	strb.w	r2, [r1], #1
 800d9f4:	42b1      	cmp	r1, r6
 800d9f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d9fe:	d11a      	bne.n	800da36 <_dtoa_r+0x56e>
 800da00:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800da04:	ee37 4b05 	vadd.f64	d4, d7, d5
 800da08:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800da0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da10:	dc4b      	bgt.n	800daaa <_dtoa_r+0x5e2>
 800da12:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1e:	f57f af3e 	bpl.w	800d89e <_dtoa_r+0x3d6>
 800da22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da26:	2a30      	cmp	r2, #48	; 0x30
 800da28:	f106 31ff 	add.w	r1, r6, #4294967295
 800da2c:	d001      	beq.n	800da32 <_dtoa_r+0x56a>
 800da2e:	469b      	mov	fp, r3
 800da30:	e02a      	b.n	800da88 <_dtoa_r+0x5c0>
 800da32:	460e      	mov	r6, r1
 800da34:	e7f5      	b.n	800da22 <_dtoa_r+0x55a>
 800da36:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da3a:	e7d4      	b.n	800d9e6 <_dtoa_r+0x51e>
 800da3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da40:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800da44:	9e04      	ldr	r6, [sp, #16]
 800da46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800da4e:	ee15 3a10 	vmov	r3, s10
 800da52:	3330      	adds	r3, #48	; 0x30
 800da54:	f806 3b01 	strb.w	r3, [r6], #1
 800da58:	9b04      	ldr	r3, [sp, #16]
 800da5a:	1af3      	subs	r3, r6, r3
 800da5c:	4599      	cmp	r9, r3
 800da5e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800da62:	eea3 7b46 	vfms.f64	d7, d3, d6
 800da66:	d133      	bne.n	800dad0 <_dtoa_r+0x608>
 800da68:	ee37 7b07 	vadd.f64	d7, d7, d7
 800da6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da74:	dc18      	bgt.n	800daa8 <_dtoa_r+0x5e0>
 800da76:	eeb4 7b46 	vcmp.f64	d7, d6
 800da7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7e:	d103      	bne.n	800da88 <_dtoa_r+0x5c0>
 800da80:	ee15 3a10 	vmov	r3, s10
 800da84:	07db      	lsls	r3, r3, #31
 800da86:	d40f      	bmi.n	800daa8 <_dtoa_r+0x5e0>
 800da88:	9901      	ldr	r1, [sp, #4]
 800da8a:	4620      	mov	r0, r4
 800da8c:	f000 fab7 	bl	800dffe <_Bfree>
 800da90:	2300      	movs	r3, #0
 800da92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800da94:	7033      	strb	r3, [r6, #0]
 800da96:	f10b 0301 	add.w	r3, fp, #1
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f43f ad5b 	beq.w	800d55a <_dtoa_r+0x92>
 800daa4:	601e      	str	r6, [r3, #0]
 800daa6:	e558      	b.n	800d55a <_dtoa_r+0x92>
 800daa8:	465b      	mov	r3, fp
 800daaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800daae:	2939      	cmp	r1, #57	; 0x39
 800dab0:	f106 32ff 	add.w	r2, r6, #4294967295
 800dab4:	d106      	bne.n	800dac4 <_dtoa_r+0x5fc>
 800dab6:	9904      	ldr	r1, [sp, #16]
 800dab8:	4291      	cmp	r1, r2
 800daba:	d107      	bne.n	800dacc <_dtoa_r+0x604>
 800dabc:	2230      	movs	r2, #48	; 0x30
 800dabe:	700a      	strb	r2, [r1, #0]
 800dac0:	3301      	adds	r3, #1
 800dac2:	460a      	mov	r2, r1
 800dac4:	7811      	ldrb	r1, [r2, #0]
 800dac6:	3101      	adds	r1, #1
 800dac8:	7011      	strb	r1, [r2, #0]
 800daca:	e7b0      	b.n	800da2e <_dtoa_r+0x566>
 800dacc:	4616      	mov	r6, r2
 800dace:	e7ec      	b.n	800daaa <_dtoa_r+0x5e2>
 800dad0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dad4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dadc:	d1b3      	bne.n	800da46 <_dtoa_r+0x57e>
 800dade:	e7d3      	b.n	800da88 <_dtoa_r+0x5c0>
 800dae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dae2:	2a00      	cmp	r2, #0
 800dae4:	f000 808d 	beq.w	800dc02 <_dtoa_r+0x73a>
 800dae8:	9a08      	ldr	r2, [sp, #32]
 800daea:	2a01      	cmp	r2, #1
 800daec:	dc72      	bgt.n	800dbd4 <_dtoa_r+0x70c>
 800daee:	2f00      	cmp	r7, #0
 800daf0:	d06c      	beq.n	800dbcc <_dtoa_r+0x704>
 800daf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800daf6:	4645      	mov	r5, r8
 800daf8:	4656      	mov	r6, sl
 800dafa:	9a07      	ldr	r2, [sp, #28]
 800dafc:	2101      	movs	r1, #1
 800dafe:	441a      	add	r2, r3
 800db00:	4620      	mov	r0, r4
 800db02:	449a      	add	sl, r3
 800db04:	9207      	str	r2, [sp, #28]
 800db06:	f000 fb1a 	bl	800e13e <__i2b>
 800db0a:	4607      	mov	r7, r0
 800db0c:	2e00      	cmp	r6, #0
 800db0e:	dd0b      	ble.n	800db28 <_dtoa_r+0x660>
 800db10:	9b07      	ldr	r3, [sp, #28]
 800db12:	2b00      	cmp	r3, #0
 800db14:	dd08      	ble.n	800db28 <_dtoa_r+0x660>
 800db16:	42b3      	cmp	r3, r6
 800db18:	9a07      	ldr	r2, [sp, #28]
 800db1a:	bfa8      	it	ge
 800db1c:	4633      	movge	r3, r6
 800db1e:	ebaa 0a03 	sub.w	sl, sl, r3
 800db22:	1af6      	subs	r6, r6, r3
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	9307      	str	r3, [sp, #28]
 800db28:	f1b8 0f00 	cmp.w	r8, #0
 800db2c:	d01d      	beq.n	800db6a <_dtoa_r+0x6a2>
 800db2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db30:	2b00      	cmp	r3, #0
 800db32:	d06a      	beq.n	800dc0a <_dtoa_r+0x742>
 800db34:	b18d      	cbz	r5, 800db5a <_dtoa_r+0x692>
 800db36:	4639      	mov	r1, r7
 800db38:	462a      	mov	r2, r5
 800db3a:	4620      	mov	r0, r4
 800db3c:	f000 fb9e 	bl	800e27c <__pow5mult>
 800db40:	9a01      	ldr	r2, [sp, #4]
 800db42:	4601      	mov	r1, r0
 800db44:	4607      	mov	r7, r0
 800db46:	4620      	mov	r0, r4
 800db48:	f000 fb02 	bl	800e150 <__multiply>
 800db4c:	9901      	ldr	r1, [sp, #4]
 800db4e:	900c      	str	r0, [sp, #48]	; 0x30
 800db50:	4620      	mov	r0, r4
 800db52:	f000 fa54 	bl	800dffe <_Bfree>
 800db56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	ebb8 0205 	subs.w	r2, r8, r5
 800db5e:	d004      	beq.n	800db6a <_dtoa_r+0x6a2>
 800db60:	9901      	ldr	r1, [sp, #4]
 800db62:	4620      	mov	r0, r4
 800db64:	f000 fb8a 	bl	800e27c <__pow5mult>
 800db68:	9001      	str	r0, [sp, #4]
 800db6a:	2101      	movs	r1, #1
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 fae6 	bl	800e13e <__i2b>
 800db72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db74:	4605      	mov	r5, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 81ca 	beq.w	800df10 <_dtoa_r+0xa48>
 800db7c:	461a      	mov	r2, r3
 800db7e:	4601      	mov	r1, r0
 800db80:	4620      	mov	r0, r4
 800db82:	f000 fb7b 	bl	800e27c <__pow5mult>
 800db86:	9b08      	ldr	r3, [sp, #32]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	4605      	mov	r5, r0
 800db8c:	dc44      	bgt.n	800dc18 <_dtoa_r+0x750>
 800db8e:	9b02      	ldr	r3, [sp, #8]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d13c      	bne.n	800dc0e <_dtoa_r+0x746>
 800db94:	9b03      	ldr	r3, [sp, #12]
 800db96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d137      	bne.n	800dc0e <_dtoa_r+0x746>
 800db9e:	9b03      	ldr	r3, [sp, #12]
 800dba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dba4:	0d1b      	lsrs	r3, r3, #20
 800dba6:	051b      	lsls	r3, r3, #20
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d033      	beq.n	800dc14 <_dtoa_r+0x74c>
 800dbac:	9b07      	ldr	r3, [sp, #28]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	f10a 0a01 	add.w	sl, sl, #1
 800dbb4:	9307      	str	r3, [sp, #28]
 800dbb6:	f04f 0801 	mov.w	r8, #1
 800dbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbbc:	bb73      	cbnz	r3, 800dc1c <_dtoa_r+0x754>
 800dbbe:	2001      	movs	r0, #1
 800dbc0:	e034      	b.n	800dc2c <_dtoa_r+0x764>
 800dbc2:	bf00      	nop
 800dbc4:	08015440 	.word	0x08015440
 800dbc8:	08015418 	.word	0x08015418
 800dbcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dbd2:	e790      	b.n	800daf6 <_dtoa_r+0x62e>
 800dbd4:	f109 35ff 	add.w	r5, r9, #4294967295
 800dbd8:	45a8      	cmp	r8, r5
 800dbda:	bfbf      	itttt	lt
 800dbdc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800dbde:	eba5 0808 	sublt.w	r8, r5, r8
 800dbe2:	4443      	addlt	r3, r8
 800dbe4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800dbe6:	bfb6      	itet	lt
 800dbe8:	46a8      	movlt	r8, r5
 800dbea:	eba8 0505 	subge.w	r5, r8, r5
 800dbee:	2500      	movlt	r5, #0
 800dbf0:	f1b9 0f00 	cmp.w	r9, #0
 800dbf4:	bfb9      	ittee	lt
 800dbf6:	ebaa 0609 	sublt.w	r6, sl, r9
 800dbfa:	2300      	movlt	r3, #0
 800dbfc:	4656      	movge	r6, sl
 800dbfe:	464b      	movge	r3, r9
 800dc00:	e77b      	b.n	800dafa <_dtoa_r+0x632>
 800dc02:	4645      	mov	r5, r8
 800dc04:	4656      	mov	r6, sl
 800dc06:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dc08:	e780      	b.n	800db0c <_dtoa_r+0x644>
 800dc0a:	4642      	mov	r2, r8
 800dc0c:	e7a8      	b.n	800db60 <_dtoa_r+0x698>
 800dc0e:	f04f 0800 	mov.w	r8, #0
 800dc12:	e7d2      	b.n	800dbba <_dtoa_r+0x6f2>
 800dc14:	4698      	mov	r8, r3
 800dc16:	e7d0      	b.n	800dbba <_dtoa_r+0x6f2>
 800dc18:	f04f 0800 	mov.w	r8, #0
 800dc1c:	692b      	ldr	r3, [r5, #16]
 800dc1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dc22:	6918      	ldr	r0, [r3, #16]
 800dc24:	f000 fa3d 	bl	800e0a2 <__hi0bits>
 800dc28:	f1c0 0020 	rsb	r0, r0, #32
 800dc2c:	9b07      	ldr	r3, [sp, #28]
 800dc2e:	4418      	add	r0, r3
 800dc30:	f010 001f 	ands.w	r0, r0, #31
 800dc34:	d047      	beq.n	800dcc6 <_dtoa_r+0x7fe>
 800dc36:	f1c0 0320 	rsb	r3, r0, #32
 800dc3a:	2b04      	cmp	r3, #4
 800dc3c:	dd3b      	ble.n	800dcb6 <_dtoa_r+0x7ee>
 800dc3e:	9b07      	ldr	r3, [sp, #28]
 800dc40:	f1c0 001c 	rsb	r0, r0, #28
 800dc44:	4482      	add	sl, r0
 800dc46:	4406      	add	r6, r0
 800dc48:	4403      	add	r3, r0
 800dc4a:	9307      	str	r3, [sp, #28]
 800dc4c:	f1ba 0f00 	cmp.w	sl, #0
 800dc50:	dd05      	ble.n	800dc5e <_dtoa_r+0x796>
 800dc52:	4652      	mov	r2, sl
 800dc54:	9901      	ldr	r1, [sp, #4]
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fb5e 	bl	800e318 <__lshift>
 800dc5c:	9001      	str	r0, [sp, #4]
 800dc5e:	9b07      	ldr	r3, [sp, #28]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	dd05      	ble.n	800dc70 <_dtoa_r+0x7a8>
 800dc64:	4629      	mov	r1, r5
 800dc66:	461a      	mov	r2, r3
 800dc68:	4620      	mov	r0, r4
 800dc6a:	f000 fb55 	bl	800e318 <__lshift>
 800dc6e:	4605      	mov	r5, r0
 800dc70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc72:	b353      	cbz	r3, 800dcca <_dtoa_r+0x802>
 800dc74:	4629      	mov	r1, r5
 800dc76:	9801      	ldr	r0, [sp, #4]
 800dc78:	f000 fba2 	bl	800e3c0 <__mcmp>
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	da24      	bge.n	800dcca <_dtoa_r+0x802>
 800dc80:	2300      	movs	r3, #0
 800dc82:	220a      	movs	r2, #10
 800dc84:	9901      	ldr	r1, [sp, #4]
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 f9d0 	bl	800e02c <__multadd>
 800dc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8e:	9001      	str	r0, [sp, #4]
 800dc90:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f000 8142 	beq.w	800df1e <_dtoa_r+0xa56>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	220a      	movs	r2, #10
 800dca0:	4620      	mov	r0, r4
 800dca2:	f000 f9c3 	bl	800e02c <__multadd>
 800dca6:	9b06      	ldr	r3, [sp, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	4607      	mov	r7, r0
 800dcac:	dc4b      	bgt.n	800dd46 <_dtoa_r+0x87e>
 800dcae:	9b08      	ldr	r3, [sp, #32]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	dd48      	ble.n	800dd46 <_dtoa_r+0x87e>
 800dcb4:	e011      	b.n	800dcda <_dtoa_r+0x812>
 800dcb6:	d0c9      	beq.n	800dc4c <_dtoa_r+0x784>
 800dcb8:	9a07      	ldr	r2, [sp, #28]
 800dcba:	331c      	adds	r3, #28
 800dcbc:	441a      	add	r2, r3
 800dcbe:	449a      	add	sl, r3
 800dcc0:	441e      	add	r6, r3
 800dcc2:	4613      	mov	r3, r2
 800dcc4:	e7c1      	b.n	800dc4a <_dtoa_r+0x782>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	e7f6      	b.n	800dcb8 <_dtoa_r+0x7f0>
 800dcca:	f1b9 0f00 	cmp.w	r9, #0
 800dcce:	dc34      	bgt.n	800dd3a <_dtoa_r+0x872>
 800dcd0:	9b08      	ldr	r3, [sp, #32]
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	dd31      	ble.n	800dd3a <_dtoa_r+0x872>
 800dcd6:	f8cd 9018 	str.w	r9, [sp, #24]
 800dcda:	9b06      	ldr	r3, [sp, #24]
 800dcdc:	b963      	cbnz	r3, 800dcf8 <_dtoa_r+0x830>
 800dcde:	4629      	mov	r1, r5
 800dce0:	2205      	movs	r2, #5
 800dce2:	4620      	mov	r0, r4
 800dce4:	f000 f9a2 	bl	800e02c <__multadd>
 800dce8:	4601      	mov	r1, r0
 800dcea:	4605      	mov	r5, r0
 800dcec:	9801      	ldr	r0, [sp, #4]
 800dcee:	f000 fb67 	bl	800e3c0 <__mcmp>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	f73f adfc 	bgt.w	800d8f0 <_dtoa_r+0x428>
 800dcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcfa:	9e04      	ldr	r6, [sp, #16]
 800dcfc:	ea6f 0b03 	mvn.w	fp, r3
 800dd00:	f04f 0900 	mov.w	r9, #0
 800dd04:	4629      	mov	r1, r5
 800dd06:	4620      	mov	r0, r4
 800dd08:	f000 f979 	bl	800dffe <_Bfree>
 800dd0c:	2f00      	cmp	r7, #0
 800dd0e:	f43f aebb 	beq.w	800da88 <_dtoa_r+0x5c0>
 800dd12:	f1b9 0f00 	cmp.w	r9, #0
 800dd16:	d005      	beq.n	800dd24 <_dtoa_r+0x85c>
 800dd18:	45b9      	cmp	r9, r7
 800dd1a:	d003      	beq.n	800dd24 <_dtoa_r+0x85c>
 800dd1c:	4649      	mov	r1, r9
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 f96d 	bl	800dffe <_Bfree>
 800dd24:	4639      	mov	r1, r7
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 f969 	bl	800dffe <_Bfree>
 800dd2c:	e6ac      	b.n	800da88 <_dtoa_r+0x5c0>
 800dd2e:	2500      	movs	r5, #0
 800dd30:	462f      	mov	r7, r5
 800dd32:	e7e1      	b.n	800dcf8 <_dtoa_r+0x830>
 800dd34:	469b      	mov	fp, r3
 800dd36:	462f      	mov	r7, r5
 800dd38:	e5da      	b.n	800d8f0 <_dtoa_r+0x428>
 800dd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd3c:	f8cd 9018 	str.w	r9, [sp, #24]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f000 80f3 	beq.w	800df2c <_dtoa_r+0xa64>
 800dd46:	2e00      	cmp	r6, #0
 800dd48:	dd05      	ble.n	800dd56 <_dtoa_r+0x88e>
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	4632      	mov	r2, r6
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f000 fae2 	bl	800e318 <__lshift>
 800dd54:	4607      	mov	r7, r0
 800dd56:	f1b8 0f00 	cmp.w	r8, #0
 800dd5a:	d04c      	beq.n	800ddf6 <_dtoa_r+0x92e>
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f000 f919 	bl	800df96 <_Balloc>
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	3202      	adds	r2, #2
 800dd68:	4606      	mov	r6, r0
 800dd6a:	0092      	lsls	r2, r2, #2
 800dd6c:	f107 010c 	add.w	r1, r7, #12
 800dd70:	300c      	adds	r0, #12
 800dd72:	f000 f903 	bl	800df7c <memcpy>
 800dd76:	2201      	movs	r2, #1
 800dd78:	4631      	mov	r1, r6
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 facc 	bl	800e318 <__lshift>
 800dd80:	9b02      	ldr	r3, [sp, #8]
 800dd82:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	46b9      	mov	r9, r7
 800dd8c:	9307      	str	r3, [sp, #28]
 800dd8e:	4607      	mov	r7, r0
 800dd90:	4629      	mov	r1, r5
 800dd92:	9801      	ldr	r0, [sp, #4]
 800dd94:	f7ff fb0c 	bl	800d3b0 <quorem>
 800dd98:	4649      	mov	r1, r9
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dda0:	9801      	ldr	r0, [sp, #4]
 800dda2:	f000 fb0d 	bl	800e3c0 <__mcmp>
 800dda6:	463a      	mov	r2, r7
 800dda8:	9002      	str	r0, [sp, #8]
 800ddaa:	4629      	mov	r1, r5
 800ddac:	4620      	mov	r0, r4
 800ddae:	f000 fb21 	bl	800e3f4 <__mdiff>
 800ddb2:	68c3      	ldr	r3, [r0, #12]
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	bb03      	cbnz	r3, 800ddfa <_dtoa_r+0x932>
 800ddb8:	4601      	mov	r1, r0
 800ddba:	9009      	str	r0, [sp, #36]	; 0x24
 800ddbc:	9801      	ldr	r0, [sp, #4]
 800ddbe:	f000 faff 	bl	800e3c0 <__mcmp>
 800ddc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	4620      	mov	r0, r4
 800ddca:	9309      	str	r3, [sp, #36]	; 0x24
 800ddcc:	f000 f917 	bl	800dffe <_Bfree>
 800ddd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd2:	b9a3      	cbnz	r3, 800ddfe <_dtoa_r+0x936>
 800ddd4:	9a08      	ldr	r2, [sp, #32]
 800ddd6:	b992      	cbnz	r2, 800ddfe <_dtoa_r+0x936>
 800ddd8:	9a07      	ldr	r2, [sp, #28]
 800ddda:	b982      	cbnz	r2, 800ddfe <_dtoa_r+0x936>
 800dddc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dde0:	d029      	beq.n	800de36 <_dtoa_r+0x96e>
 800dde2:	9b02      	ldr	r3, [sp, #8]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd01      	ble.n	800ddec <_dtoa_r+0x924>
 800dde8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ddec:	f10a 0601 	add.w	r6, sl, #1
 800ddf0:	f88a 8000 	strb.w	r8, [sl]
 800ddf4:	e786      	b.n	800dd04 <_dtoa_r+0x83c>
 800ddf6:	4638      	mov	r0, r7
 800ddf8:	e7c2      	b.n	800dd80 <_dtoa_r+0x8b8>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e7e3      	b.n	800ddc6 <_dtoa_r+0x8fe>
 800ddfe:	9a02      	ldr	r2, [sp, #8]
 800de00:	2a00      	cmp	r2, #0
 800de02:	db04      	blt.n	800de0e <_dtoa_r+0x946>
 800de04:	d124      	bne.n	800de50 <_dtoa_r+0x988>
 800de06:	9a08      	ldr	r2, [sp, #32]
 800de08:	bb12      	cbnz	r2, 800de50 <_dtoa_r+0x988>
 800de0a:	9a07      	ldr	r2, [sp, #28]
 800de0c:	bb02      	cbnz	r2, 800de50 <_dtoa_r+0x988>
 800de0e:	2b00      	cmp	r3, #0
 800de10:	ddec      	ble.n	800ddec <_dtoa_r+0x924>
 800de12:	2201      	movs	r2, #1
 800de14:	9901      	ldr	r1, [sp, #4]
 800de16:	4620      	mov	r0, r4
 800de18:	f000 fa7e 	bl	800e318 <__lshift>
 800de1c:	4629      	mov	r1, r5
 800de1e:	9001      	str	r0, [sp, #4]
 800de20:	f000 face 	bl	800e3c0 <__mcmp>
 800de24:	2800      	cmp	r0, #0
 800de26:	dc03      	bgt.n	800de30 <_dtoa_r+0x968>
 800de28:	d1e0      	bne.n	800ddec <_dtoa_r+0x924>
 800de2a:	f018 0f01 	tst.w	r8, #1
 800de2e:	d0dd      	beq.n	800ddec <_dtoa_r+0x924>
 800de30:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de34:	d1d8      	bne.n	800dde8 <_dtoa_r+0x920>
 800de36:	2339      	movs	r3, #57	; 0x39
 800de38:	f10a 0601 	add.w	r6, sl, #1
 800de3c:	f88a 3000 	strb.w	r3, [sl]
 800de40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de44:	2b39      	cmp	r3, #57	; 0x39
 800de46:	f106 32ff 	add.w	r2, r6, #4294967295
 800de4a:	d04c      	beq.n	800dee6 <_dtoa_r+0xa1e>
 800de4c:	3301      	adds	r3, #1
 800de4e:	e051      	b.n	800def4 <_dtoa_r+0xa2c>
 800de50:	2b00      	cmp	r3, #0
 800de52:	f10a 0601 	add.w	r6, sl, #1
 800de56:	dd05      	ble.n	800de64 <_dtoa_r+0x99c>
 800de58:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800de5c:	d0eb      	beq.n	800de36 <_dtoa_r+0x96e>
 800de5e:	f108 0801 	add.w	r8, r8, #1
 800de62:	e7c5      	b.n	800ddf0 <_dtoa_r+0x928>
 800de64:	9b04      	ldr	r3, [sp, #16]
 800de66:	9a06      	ldr	r2, [sp, #24]
 800de68:	f806 8c01 	strb.w	r8, [r6, #-1]
 800de6c:	1af3      	subs	r3, r6, r3
 800de6e:	4293      	cmp	r3, r2
 800de70:	d021      	beq.n	800deb6 <_dtoa_r+0x9ee>
 800de72:	2300      	movs	r3, #0
 800de74:	220a      	movs	r2, #10
 800de76:	9901      	ldr	r1, [sp, #4]
 800de78:	4620      	mov	r0, r4
 800de7a:	f000 f8d7 	bl	800e02c <__multadd>
 800de7e:	45b9      	cmp	r9, r7
 800de80:	9001      	str	r0, [sp, #4]
 800de82:	f04f 0300 	mov.w	r3, #0
 800de86:	f04f 020a 	mov.w	r2, #10
 800de8a:	4649      	mov	r1, r9
 800de8c:	4620      	mov	r0, r4
 800de8e:	d105      	bne.n	800de9c <_dtoa_r+0x9d4>
 800de90:	f000 f8cc 	bl	800e02c <__multadd>
 800de94:	4681      	mov	r9, r0
 800de96:	4607      	mov	r7, r0
 800de98:	46b2      	mov	sl, r6
 800de9a:	e779      	b.n	800dd90 <_dtoa_r+0x8c8>
 800de9c:	f000 f8c6 	bl	800e02c <__multadd>
 800dea0:	4639      	mov	r1, r7
 800dea2:	4681      	mov	r9, r0
 800dea4:	2300      	movs	r3, #0
 800dea6:	220a      	movs	r2, #10
 800dea8:	4620      	mov	r0, r4
 800deaa:	f000 f8bf 	bl	800e02c <__multadd>
 800deae:	4607      	mov	r7, r0
 800deb0:	e7f2      	b.n	800de98 <_dtoa_r+0x9d0>
 800deb2:	f04f 0900 	mov.w	r9, #0
 800deb6:	2201      	movs	r2, #1
 800deb8:	9901      	ldr	r1, [sp, #4]
 800deba:	4620      	mov	r0, r4
 800debc:	f000 fa2c 	bl	800e318 <__lshift>
 800dec0:	4629      	mov	r1, r5
 800dec2:	9001      	str	r0, [sp, #4]
 800dec4:	f000 fa7c 	bl	800e3c0 <__mcmp>
 800dec8:	2800      	cmp	r0, #0
 800deca:	dcb9      	bgt.n	800de40 <_dtoa_r+0x978>
 800decc:	d102      	bne.n	800ded4 <_dtoa_r+0xa0c>
 800dece:	f018 0f01 	tst.w	r8, #1
 800ded2:	d1b5      	bne.n	800de40 <_dtoa_r+0x978>
 800ded4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ded8:	2b30      	cmp	r3, #48	; 0x30
 800deda:	f106 32ff 	add.w	r2, r6, #4294967295
 800dede:	f47f af11 	bne.w	800dd04 <_dtoa_r+0x83c>
 800dee2:	4616      	mov	r6, r2
 800dee4:	e7f6      	b.n	800ded4 <_dtoa_r+0xa0c>
 800dee6:	9b04      	ldr	r3, [sp, #16]
 800dee8:	4293      	cmp	r3, r2
 800deea:	d105      	bne.n	800def8 <_dtoa_r+0xa30>
 800deec:	9a04      	ldr	r2, [sp, #16]
 800deee:	f10b 0b01 	add.w	fp, fp, #1
 800def2:	2331      	movs	r3, #49	; 0x31
 800def4:	7013      	strb	r3, [r2, #0]
 800def6:	e705      	b.n	800dd04 <_dtoa_r+0x83c>
 800def8:	4616      	mov	r6, r2
 800defa:	e7a1      	b.n	800de40 <_dtoa_r+0x978>
 800defc:	4b16      	ldr	r3, [pc, #88]	; (800df58 <_dtoa_r+0xa90>)
 800defe:	f7ff bb48 	b.w	800d592 <_dtoa_r+0xca>
 800df02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df04:	2b00      	cmp	r3, #0
 800df06:	f47f ab23 	bne.w	800d550 <_dtoa_r+0x88>
 800df0a:	4b14      	ldr	r3, [pc, #80]	; (800df5c <_dtoa_r+0xa94>)
 800df0c:	f7ff bb41 	b.w	800d592 <_dtoa_r+0xca>
 800df10:	9b08      	ldr	r3, [sp, #32]
 800df12:	2b01      	cmp	r3, #1
 800df14:	f77f ae3b 	ble.w	800db8e <_dtoa_r+0x6c6>
 800df18:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800df1c:	e64f      	b.n	800dbbe <_dtoa_r+0x6f6>
 800df1e:	9b06      	ldr	r3, [sp, #24]
 800df20:	2b00      	cmp	r3, #0
 800df22:	dc03      	bgt.n	800df2c <_dtoa_r+0xa64>
 800df24:	9b08      	ldr	r3, [sp, #32]
 800df26:	2b02      	cmp	r3, #2
 800df28:	f73f aed7 	bgt.w	800dcda <_dtoa_r+0x812>
 800df2c:	9e04      	ldr	r6, [sp, #16]
 800df2e:	9801      	ldr	r0, [sp, #4]
 800df30:	4629      	mov	r1, r5
 800df32:	f7ff fa3d 	bl	800d3b0 <quorem>
 800df36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800df3a:	f806 8b01 	strb.w	r8, [r6], #1
 800df3e:	9b04      	ldr	r3, [sp, #16]
 800df40:	9a06      	ldr	r2, [sp, #24]
 800df42:	1af3      	subs	r3, r6, r3
 800df44:	429a      	cmp	r2, r3
 800df46:	ddb4      	ble.n	800deb2 <_dtoa_r+0x9ea>
 800df48:	2300      	movs	r3, #0
 800df4a:	220a      	movs	r2, #10
 800df4c:	9901      	ldr	r1, [sp, #4]
 800df4e:	4620      	mov	r0, r4
 800df50:	f000 f86c 	bl	800e02c <__multadd>
 800df54:	9001      	str	r0, [sp, #4]
 800df56:	e7ea      	b.n	800df2e <_dtoa_r+0xa66>
 800df58:	08015634 	.word	0x08015634
 800df5c:	0801540a 	.word	0x0801540a

0800df60 <_localeconv_r>:
 800df60:	4b04      	ldr	r3, [pc, #16]	; (800df74 <_localeconv_r+0x14>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6a18      	ldr	r0, [r3, #32]
 800df66:	4b04      	ldr	r3, [pc, #16]	; (800df78 <_localeconv_r+0x18>)
 800df68:	2800      	cmp	r0, #0
 800df6a:	bf08      	it	eq
 800df6c:	4618      	moveq	r0, r3
 800df6e:	30f0      	adds	r0, #240	; 0xf0
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	24000380 	.word	0x24000380
 800df78:	240003e4 	.word	0x240003e4

0800df7c <memcpy>:
 800df7c:	b510      	push	{r4, lr}
 800df7e:	1e43      	subs	r3, r0, #1
 800df80:	440a      	add	r2, r1
 800df82:	4291      	cmp	r1, r2
 800df84:	d100      	bne.n	800df88 <memcpy+0xc>
 800df86:	bd10      	pop	{r4, pc}
 800df88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df90:	e7f7      	b.n	800df82 <memcpy+0x6>

0800df92 <__malloc_lock>:
 800df92:	4770      	bx	lr

0800df94 <__malloc_unlock>:
 800df94:	4770      	bx	lr

0800df96 <_Balloc>:
 800df96:	b570      	push	{r4, r5, r6, lr}
 800df98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df9a:	4604      	mov	r4, r0
 800df9c:	460e      	mov	r6, r1
 800df9e:	b93d      	cbnz	r5, 800dfb0 <_Balloc+0x1a>
 800dfa0:	2010      	movs	r0, #16
 800dfa2:	f7fe fcd1 	bl	800c948 <malloc>
 800dfa6:	6260      	str	r0, [r4, #36]	; 0x24
 800dfa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfac:	6005      	str	r5, [r0, #0]
 800dfae:	60c5      	str	r5, [r0, #12]
 800dfb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dfb2:	68eb      	ldr	r3, [r5, #12]
 800dfb4:	b183      	cbz	r3, 800dfd8 <_Balloc+0x42>
 800dfb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dfbe:	b9b8      	cbnz	r0, 800dff0 <_Balloc+0x5a>
 800dfc0:	2101      	movs	r1, #1
 800dfc2:	fa01 f506 	lsl.w	r5, r1, r6
 800dfc6:	1d6a      	adds	r2, r5, #5
 800dfc8:	0092      	lsls	r2, r2, #2
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 fabe 	bl	800e54c <_calloc_r>
 800dfd0:	b160      	cbz	r0, 800dfec <_Balloc+0x56>
 800dfd2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dfd6:	e00e      	b.n	800dff6 <_Balloc+0x60>
 800dfd8:	2221      	movs	r2, #33	; 0x21
 800dfda:	2104      	movs	r1, #4
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f000 fab5 	bl	800e54c <_calloc_r>
 800dfe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfe4:	60e8      	str	r0, [r5, #12]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1e4      	bne.n	800dfb6 <_Balloc+0x20>
 800dfec:	2000      	movs	r0, #0
 800dfee:	bd70      	pop	{r4, r5, r6, pc}
 800dff0:	6802      	ldr	r2, [r0, #0]
 800dff2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dff6:	2300      	movs	r3, #0
 800dff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dffc:	e7f7      	b.n	800dfee <_Balloc+0x58>

0800dffe <_Bfree>:
 800dffe:	b570      	push	{r4, r5, r6, lr}
 800e000:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e002:	4606      	mov	r6, r0
 800e004:	460d      	mov	r5, r1
 800e006:	b93c      	cbnz	r4, 800e018 <_Bfree+0x1a>
 800e008:	2010      	movs	r0, #16
 800e00a:	f7fe fc9d 	bl	800c948 <malloc>
 800e00e:	6270      	str	r0, [r6, #36]	; 0x24
 800e010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e014:	6004      	str	r4, [r0, #0]
 800e016:	60c4      	str	r4, [r0, #12]
 800e018:	b13d      	cbz	r5, 800e02a <_Bfree+0x2c>
 800e01a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e01c:	686a      	ldr	r2, [r5, #4]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e024:	6029      	str	r1, [r5, #0]
 800e026:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e02a:	bd70      	pop	{r4, r5, r6, pc}

0800e02c <__multadd>:
 800e02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e030:	690d      	ldr	r5, [r1, #16]
 800e032:	461f      	mov	r7, r3
 800e034:	4606      	mov	r6, r0
 800e036:	460c      	mov	r4, r1
 800e038:	f101 0c14 	add.w	ip, r1, #20
 800e03c:	2300      	movs	r3, #0
 800e03e:	f8dc 0000 	ldr.w	r0, [ip]
 800e042:	b281      	uxth	r1, r0
 800e044:	fb02 7101 	mla	r1, r2, r1, r7
 800e048:	0c0f      	lsrs	r7, r1, #16
 800e04a:	0c00      	lsrs	r0, r0, #16
 800e04c:	fb02 7000 	mla	r0, r2, r0, r7
 800e050:	b289      	uxth	r1, r1
 800e052:	3301      	adds	r3, #1
 800e054:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e058:	429d      	cmp	r5, r3
 800e05a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e05e:	f84c 1b04 	str.w	r1, [ip], #4
 800e062:	dcec      	bgt.n	800e03e <__multadd+0x12>
 800e064:	b1d7      	cbz	r7, 800e09c <__multadd+0x70>
 800e066:	68a3      	ldr	r3, [r4, #8]
 800e068:	42ab      	cmp	r3, r5
 800e06a:	dc12      	bgt.n	800e092 <__multadd+0x66>
 800e06c:	6861      	ldr	r1, [r4, #4]
 800e06e:	4630      	mov	r0, r6
 800e070:	3101      	adds	r1, #1
 800e072:	f7ff ff90 	bl	800df96 <_Balloc>
 800e076:	6922      	ldr	r2, [r4, #16]
 800e078:	3202      	adds	r2, #2
 800e07a:	f104 010c 	add.w	r1, r4, #12
 800e07e:	4680      	mov	r8, r0
 800e080:	0092      	lsls	r2, r2, #2
 800e082:	300c      	adds	r0, #12
 800e084:	f7ff ff7a 	bl	800df7c <memcpy>
 800e088:	4621      	mov	r1, r4
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7ff ffb7 	bl	800dffe <_Bfree>
 800e090:	4644      	mov	r4, r8
 800e092:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e096:	3501      	adds	r5, #1
 800e098:	615f      	str	r7, [r3, #20]
 800e09a:	6125      	str	r5, [r4, #16]
 800e09c:	4620      	mov	r0, r4
 800e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0a2 <__hi0bits>:
 800e0a2:	0c02      	lsrs	r2, r0, #16
 800e0a4:	0412      	lsls	r2, r2, #16
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	b9b2      	cbnz	r2, 800e0d8 <__hi0bits+0x36>
 800e0aa:	0403      	lsls	r3, r0, #16
 800e0ac:	2010      	movs	r0, #16
 800e0ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e0b2:	bf04      	itt	eq
 800e0b4:	021b      	lsleq	r3, r3, #8
 800e0b6:	3008      	addeq	r0, #8
 800e0b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e0bc:	bf04      	itt	eq
 800e0be:	011b      	lsleq	r3, r3, #4
 800e0c0:	3004      	addeq	r0, #4
 800e0c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e0c6:	bf04      	itt	eq
 800e0c8:	009b      	lsleq	r3, r3, #2
 800e0ca:	3002      	addeq	r0, #2
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	db06      	blt.n	800e0de <__hi0bits+0x3c>
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	d503      	bpl.n	800e0dc <__hi0bits+0x3a>
 800e0d4:	3001      	adds	r0, #1
 800e0d6:	4770      	bx	lr
 800e0d8:	2000      	movs	r0, #0
 800e0da:	e7e8      	b.n	800e0ae <__hi0bits+0xc>
 800e0dc:	2020      	movs	r0, #32
 800e0de:	4770      	bx	lr

0800e0e0 <__lo0bits>:
 800e0e0:	6803      	ldr	r3, [r0, #0]
 800e0e2:	f013 0207 	ands.w	r2, r3, #7
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	d00b      	beq.n	800e102 <__lo0bits+0x22>
 800e0ea:	07da      	lsls	r2, r3, #31
 800e0ec:	d423      	bmi.n	800e136 <__lo0bits+0x56>
 800e0ee:	0798      	lsls	r0, r3, #30
 800e0f0:	bf49      	itett	mi
 800e0f2:	085b      	lsrmi	r3, r3, #1
 800e0f4:	089b      	lsrpl	r3, r3, #2
 800e0f6:	2001      	movmi	r0, #1
 800e0f8:	600b      	strmi	r3, [r1, #0]
 800e0fa:	bf5c      	itt	pl
 800e0fc:	600b      	strpl	r3, [r1, #0]
 800e0fe:	2002      	movpl	r0, #2
 800e100:	4770      	bx	lr
 800e102:	b298      	uxth	r0, r3
 800e104:	b9a8      	cbnz	r0, 800e132 <__lo0bits+0x52>
 800e106:	0c1b      	lsrs	r3, r3, #16
 800e108:	2010      	movs	r0, #16
 800e10a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e10e:	bf04      	itt	eq
 800e110:	0a1b      	lsreq	r3, r3, #8
 800e112:	3008      	addeq	r0, #8
 800e114:	071a      	lsls	r2, r3, #28
 800e116:	bf04      	itt	eq
 800e118:	091b      	lsreq	r3, r3, #4
 800e11a:	3004      	addeq	r0, #4
 800e11c:	079a      	lsls	r2, r3, #30
 800e11e:	bf04      	itt	eq
 800e120:	089b      	lsreq	r3, r3, #2
 800e122:	3002      	addeq	r0, #2
 800e124:	07da      	lsls	r2, r3, #31
 800e126:	d402      	bmi.n	800e12e <__lo0bits+0x4e>
 800e128:	085b      	lsrs	r3, r3, #1
 800e12a:	d006      	beq.n	800e13a <__lo0bits+0x5a>
 800e12c:	3001      	adds	r0, #1
 800e12e:	600b      	str	r3, [r1, #0]
 800e130:	4770      	bx	lr
 800e132:	4610      	mov	r0, r2
 800e134:	e7e9      	b.n	800e10a <__lo0bits+0x2a>
 800e136:	2000      	movs	r0, #0
 800e138:	4770      	bx	lr
 800e13a:	2020      	movs	r0, #32
 800e13c:	4770      	bx	lr

0800e13e <__i2b>:
 800e13e:	b510      	push	{r4, lr}
 800e140:	460c      	mov	r4, r1
 800e142:	2101      	movs	r1, #1
 800e144:	f7ff ff27 	bl	800df96 <_Balloc>
 800e148:	2201      	movs	r2, #1
 800e14a:	6144      	str	r4, [r0, #20]
 800e14c:	6102      	str	r2, [r0, #16]
 800e14e:	bd10      	pop	{r4, pc}

0800e150 <__multiply>:
 800e150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	4614      	mov	r4, r2
 800e156:	690a      	ldr	r2, [r1, #16]
 800e158:	6923      	ldr	r3, [r4, #16]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	bfb8      	it	lt
 800e15e:	460b      	movlt	r3, r1
 800e160:	4688      	mov	r8, r1
 800e162:	bfbc      	itt	lt
 800e164:	46a0      	movlt	r8, r4
 800e166:	461c      	movlt	r4, r3
 800e168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e16c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e178:	eb07 0609 	add.w	r6, r7, r9
 800e17c:	42b3      	cmp	r3, r6
 800e17e:	bfb8      	it	lt
 800e180:	3101      	addlt	r1, #1
 800e182:	f7ff ff08 	bl	800df96 <_Balloc>
 800e186:	f100 0514 	add.w	r5, r0, #20
 800e18a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e18e:	462b      	mov	r3, r5
 800e190:	2200      	movs	r2, #0
 800e192:	4573      	cmp	r3, lr
 800e194:	d316      	bcc.n	800e1c4 <__multiply+0x74>
 800e196:	f104 0214 	add.w	r2, r4, #20
 800e19a:	f108 0114 	add.w	r1, r8, #20
 800e19e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e1a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	9b00      	ldr	r3, [sp, #0]
 800e1aa:	9201      	str	r2, [sp, #4]
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d80c      	bhi.n	800e1ca <__multiply+0x7a>
 800e1b0:	2e00      	cmp	r6, #0
 800e1b2:	dd03      	ble.n	800e1bc <__multiply+0x6c>
 800e1b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d05d      	beq.n	800e278 <__multiply+0x128>
 800e1bc:	6106      	str	r6, [r0, #16]
 800e1be:	b003      	add	sp, #12
 800e1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	f843 2b04 	str.w	r2, [r3], #4
 800e1c8:	e7e3      	b.n	800e192 <__multiply+0x42>
 800e1ca:	f8b2 b000 	ldrh.w	fp, [r2]
 800e1ce:	f1bb 0f00 	cmp.w	fp, #0
 800e1d2:	d023      	beq.n	800e21c <__multiply+0xcc>
 800e1d4:	4689      	mov	r9, r1
 800e1d6:	46ac      	mov	ip, r5
 800e1d8:	f04f 0800 	mov.w	r8, #0
 800e1dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800e1e0:	f8dc a000 	ldr.w	sl, [ip]
 800e1e4:	b2a3      	uxth	r3, r4
 800e1e6:	fa1f fa8a 	uxth.w	sl, sl
 800e1ea:	fb0b a303 	mla	r3, fp, r3, sl
 800e1ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e1f2:	f8dc 4000 	ldr.w	r4, [ip]
 800e1f6:	4443      	add	r3, r8
 800e1f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e1fc:	fb0b 840a 	mla	r4, fp, sl, r8
 800e200:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e204:	46e2      	mov	sl, ip
 800e206:	b29b      	uxth	r3, r3
 800e208:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e20c:	454f      	cmp	r7, r9
 800e20e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e212:	f84a 3b04 	str.w	r3, [sl], #4
 800e216:	d82b      	bhi.n	800e270 <__multiply+0x120>
 800e218:	f8cc 8004 	str.w	r8, [ip, #4]
 800e21c:	9b01      	ldr	r3, [sp, #4]
 800e21e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e222:	3204      	adds	r2, #4
 800e224:	f1ba 0f00 	cmp.w	sl, #0
 800e228:	d020      	beq.n	800e26c <__multiply+0x11c>
 800e22a:	682b      	ldr	r3, [r5, #0]
 800e22c:	4689      	mov	r9, r1
 800e22e:	46a8      	mov	r8, r5
 800e230:	f04f 0b00 	mov.w	fp, #0
 800e234:	f8b9 c000 	ldrh.w	ip, [r9]
 800e238:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e23c:	fb0a 440c 	mla	r4, sl, ip, r4
 800e240:	445c      	add	r4, fp
 800e242:	46c4      	mov	ip, r8
 800e244:	b29b      	uxth	r3, r3
 800e246:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e24a:	f84c 3b04 	str.w	r3, [ip], #4
 800e24e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e252:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e256:	0c1b      	lsrs	r3, r3, #16
 800e258:	fb0a b303 	mla	r3, sl, r3, fp
 800e25c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e260:	454f      	cmp	r7, r9
 800e262:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e266:	d805      	bhi.n	800e274 <__multiply+0x124>
 800e268:	f8c8 3004 	str.w	r3, [r8, #4]
 800e26c:	3504      	adds	r5, #4
 800e26e:	e79b      	b.n	800e1a8 <__multiply+0x58>
 800e270:	46d4      	mov	ip, sl
 800e272:	e7b3      	b.n	800e1dc <__multiply+0x8c>
 800e274:	46e0      	mov	r8, ip
 800e276:	e7dd      	b.n	800e234 <__multiply+0xe4>
 800e278:	3e01      	subs	r6, #1
 800e27a:	e799      	b.n	800e1b0 <__multiply+0x60>

0800e27c <__pow5mult>:
 800e27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e280:	4615      	mov	r5, r2
 800e282:	f012 0203 	ands.w	r2, r2, #3
 800e286:	4606      	mov	r6, r0
 800e288:	460f      	mov	r7, r1
 800e28a:	d007      	beq.n	800e29c <__pow5mult+0x20>
 800e28c:	3a01      	subs	r2, #1
 800e28e:	4c21      	ldr	r4, [pc, #132]	; (800e314 <__pow5mult+0x98>)
 800e290:	2300      	movs	r3, #0
 800e292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e296:	f7ff fec9 	bl	800e02c <__multadd>
 800e29a:	4607      	mov	r7, r0
 800e29c:	10ad      	asrs	r5, r5, #2
 800e29e:	d035      	beq.n	800e30c <__pow5mult+0x90>
 800e2a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2a2:	b93c      	cbnz	r4, 800e2b4 <__pow5mult+0x38>
 800e2a4:	2010      	movs	r0, #16
 800e2a6:	f7fe fb4f 	bl	800c948 <malloc>
 800e2aa:	6270      	str	r0, [r6, #36]	; 0x24
 800e2ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2b0:	6004      	str	r4, [r0, #0]
 800e2b2:	60c4      	str	r4, [r0, #12]
 800e2b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2bc:	b94c      	cbnz	r4, 800e2d2 <__pow5mult+0x56>
 800e2be:	f240 2171 	movw	r1, #625	; 0x271
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7ff ff3b 	bl	800e13e <__i2b>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	6003      	str	r3, [r0, #0]
 800e2d2:	f04f 0800 	mov.w	r8, #0
 800e2d6:	07eb      	lsls	r3, r5, #31
 800e2d8:	d50a      	bpl.n	800e2f0 <__pow5mult+0x74>
 800e2da:	4639      	mov	r1, r7
 800e2dc:	4622      	mov	r2, r4
 800e2de:	4630      	mov	r0, r6
 800e2e0:	f7ff ff36 	bl	800e150 <__multiply>
 800e2e4:	4639      	mov	r1, r7
 800e2e6:	4681      	mov	r9, r0
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7ff fe88 	bl	800dffe <_Bfree>
 800e2ee:	464f      	mov	r7, r9
 800e2f0:	106d      	asrs	r5, r5, #1
 800e2f2:	d00b      	beq.n	800e30c <__pow5mult+0x90>
 800e2f4:	6820      	ldr	r0, [r4, #0]
 800e2f6:	b938      	cbnz	r0, 800e308 <__pow5mult+0x8c>
 800e2f8:	4622      	mov	r2, r4
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7ff ff27 	bl	800e150 <__multiply>
 800e302:	6020      	str	r0, [r4, #0]
 800e304:	f8c0 8000 	str.w	r8, [r0]
 800e308:	4604      	mov	r4, r0
 800e30a:	e7e4      	b.n	800e2d6 <__pow5mult+0x5a>
 800e30c:	4638      	mov	r0, r7
 800e30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e312:	bf00      	nop
 800e314:	08015508 	.word	0x08015508

0800e318 <__lshift>:
 800e318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e31c:	460c      	mov	r4, r1
 800e31e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e322:	6923      	ldr	r3, [r4, #16]
 800e324:	6849      	ldr	r1, [r1, #4]
 800e326:	eb0a 0903 	add.w	r9, sl, r3
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	4607      	mov	r7, r0
 800e32e:	4616      	mov	r6, r2
 800e330:	f109 0501 	add.w	r5, r9, #1
 800e334:	42ab      	cmp	r3, r5
 800e336:	db32      	blt.n	800e39e <__lshift+0x86>
 800e338:	4638      	mov	r0, r7
 800e33a:	f7ff fe2c 	bl	800df96 <_Balloc>
 800e33e:	2300      	movs	r3, #0
 800e340:	4680      	mov	r8, r0
 800e342:	f100 0114 	add.w	r1, r0, #20
 800e346:	461a      	mov	r2, r3
 800e348:	4553      	cmp	r3, sl
 800e34a:	db2b      	blt.n	800e3a4 <__lshift+0x8c>
 800e34c:	6920      	ldr	r0, [r4, #16]
 800e34e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e352:	f104 0314 	add.w	r3, r4, #20
 800e356:	f016 021f 	ands.w	r2, r6, #31
 800e35a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e35e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e362:	d025      	beq.n	800e3b0 <__lshift+0x98>
 800e364:	f1c2 0e20 	rsb	lr, r2, #32
 800e368:	2000      	movs	r0, #0
 800e36a:	681e      	ldr	r6, [r3, #0]
 800e36c:	468a      	mov	sl, r1
 800e36e:	4096      	lsls	r6, r2
 800e370:	4330      	orrs	r0, r6
 800e372:	f84a 0b04 	str.w	r0, [sl], #4
 800e376:	f853 0b04 	ldr.w	r0, [r3], #4
 800e37a:	459c      	cmp	ip, r3
 800e37c:	fa20 f00e 	lsr.w	r0, r0, lr
 800e380:	d814      	bhi.n	800e3ac <__lshift+0x94>
 800e382:	6048      	str	r0, [r1, #4]
 800e384:	b108      	cbz	r0, 800e38a <__lshift+0x72>
 800e386:	f109 0502 	add.w	r5, r9, #2
 800e38a:	3d01      	subs	r5, #1
 800e38c:	4638      	mov	r0, r7
 800e38e:	f8c8 5010 	str.w	r5, [r8, #16]
 800e392:	4621      	mov	r1, r4
 800e394:	f7ff fe33 	bl	800dffe <_Bfree>
 800e398:	4640      	mov	r0, r8
 800e39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39e:	3101      	adds	r1, #1
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	e7c7      	b.n	800e334 <__lshift+0x1c>
 800e3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	e7cd      	b.n	800e348 <__lshift+0x30>
 800e3ac:	4651      	mov	r1, sl
 800e3ae:	e7dc      	b.n	800e36a <__lshift+0x52>
 800e3b0:	3904      	subs	r1, #4
 800e3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3ba:	459c      	cmp	ip, r3
 800e3bc:	d8f9      	bhi.n	800e3b2 <__lshift+0x9a>
 800e3be:	e7e4      	b.n	800e38a <__lshift+0x72>

0800e3c0 <__mcmp>:
 800e3c0:	6903      	ldr	r3, [r0, #16]
 800e3c2:	690a      	ldr	r2, [r1, #16]
 800e3c4:	1a9b      	subs	r3, r3, r2
 800e3c6:	b530      	push	{r4, r5, lr}
 800e3c8:	d10c      	bne.n	800e3e4 <__mcmp+0x24>
 800e3ca:	0092      	lsls	r2, r2, #2
 800e3cc:	3014      	adds	r0, #20
 800e3ce:	3114      	adds	r1, #20
 800e3d0:	1884      	adds	r4, r0, r2
 800e3d2:	4411      	add	r1, r2
 800e3d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e3d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3dc:	4295      	cmp	r5, r2
 800e3de:	d003      	beq.n	800e3e8 <__mcmp+0x28>
 800e3e0:	d305      	bcc.n	800e3ee <__mcmp+0x2e>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	bd30      	pop	{r4, r5, pc}
 800e3e8:	42a0      	cmp	r0, r4
 800e3ea:	d3f3      	bcc.n	800e3d4 <__mcmp+0x14>
 800e3ec:	e7fa      	b.n	800e3e4 <__mcmp+0x24>
 800e3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f2:	e7f7      	b.n	800e3e4 <__mcmp+0x24>

0800e3f4 <__mdiff>:
 800e3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	4607      	mov	r7, r0
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4628      	mov	r0, r5
 800e400:	4614      	mov	r4, r2
 800e402:	f7ff ffdd 	bl	800e3c0 <__mcmp>
 800e406:	1e06      	subs	r6, r0, #0
 800e408:	d108      	bne.n	800e41c <__mdiff+0x28>
 800e40a:	4631      	mov	r1, r6
 800e40c:	4638      	mov	r0, r7
 800e40e:	f7ff fdc2 	bl	800df96 <_Balloc>
 800e412:	2301      	movs	r3, #1
 800e414:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41c:	bfa4      	itt	ge
 800e41e:	4623      	movge	r3, r4
 800e420:	462c      	movge	r4, r5
 800e422:	4638      	mov	r0, r7
 800e424:	6861      	ldr	r1, [r4, #4]
 800e426:	bfa6      	itte	ge
 800e428:	461d      	movge	r5, r3
 800e42a:	2600      	movge	r6, #0
 800e42c:	2601      	movlt	r6, #1
 800e42e:	f7ff fdb2 	bl	800df96 <_Balloc>
 800e432:	692b      	ldr	r3, [r5, #16]
 800e434:	60c6      	str	r6, [r0, #12]
 800e436:	6926      	ldr	r6, [r4, #16]
 800e438:	f105 0914 	add.w	r9, r5, #20
 800e43c:	f104 0214 	add.w	r2, r4, #20
 800e440:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e444:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e448:	f100 0514 	add.w	r5, r0, #20
 800e44c:	f04f 0e00 	mov.w	lr, #0
 800e450:	f852 ab04 	ldr.w	sl, [r2], #4
 800e454:	f859 4b04 	ldr.w	r4, [r9], #4
 800e458:	fa1e f18a 	uxtah	r1, lr, sl
 800e45c:	b2a3      	uxth	r3, r4
 800e45e:	1ac9      	subs	r1, r1, r3
 800e460:	0c23      	lsrs	r3, r4, #16
 800e462:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e466:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e46a:	b289      	uxth	r1, r1
 800e46c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e470:	45c8      	cmp	r8, r9
 800e472:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e476:	4694      	mov	ip, r2
 800e478:	f845 3b04 	str.w	r3, [r5], #4
 800e47c:	d8e8      	bhi.n	800e450 <__mdiff+0x5c>
 800e47e:	45bc      	cmp	ip, r7
 800e480:	d304      	bcc.n	800e48c <__mdiff+0x98>
 800e482:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e486:	b183      	cbz	r3, 800e4aa <__mdiff+0xb6>
 800e488:	6106      	str	r6, [r0, #16]
 800e48a:	e7c5      	b.n	800e418 <__mdiff+0x24>
 800e48c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e490:	fa1e f381 	uxtah	r3, lr, r1
 800e494:	141a      	asrs	r2, r3, #16
 800e496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e4a4:	f845 3b04 	str.w	r3, [r5], #4
 800e4a8:	e7e9      	b.n	800e47e <__mdiff+0x8a>
 800e4aa:	3e01      	subs	r6, #1
 800e4ac:	e7e9      	b.n	800e482 <__mdiff+0x8e>

0800e4ae <__d2b>:
 800e4ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4b2:	460e      	mov	r6, r1
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	ec59 8b10 	vmov	r8, r9, d0
 800e4ba:	4615      	mov	r5, r2
 800e4bc:	f7ff fd6b 	bl	800df96 <_Balloc>
 800e4c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e4c4:	4607      	mov	r7, r0
 800e4c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4ca:	bb34      	cbnz	r4, 800e51a <__d2b+0x6c>
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	f1b8 0300 	subs.w	r3, r8, #0
 800e4d2:	d027      	beq.n	800e524 <__d2b+0x76>
 800e4d4:	a802      	add	r0, sp, #8
 800e4d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e4da:	f7ff fe01 	bl	800e0e0 <__lo0bits>
 800e4de:	9900      	ldr	r1, [sp, #0]
 800e4e0:	b1f0      	cbz	r0, 800e520 <__d2b+0x72>
 800e4e2:	9a01      	ldr	r2, [sp, #4]
 800e4e4:	f1c0 0320 	rsb	r3, r0, #32
 800e4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ec:	430b      	orrs	r3, r1
 800e4ee:	40c2      	lsrs	r2, r0
 800e4f0:	617b      	str	r3, [r7, #20]
 800e4f2:	9201      	str	r2, [sp, #4]
 800e4f4:	9b01      	ldr	r3, [sp, #4]
 800e4f6:	61bb      	str	r3, [r7, #24]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	bf14      	ite	ne
 800e4fc:	2102      	movne	r1, #2
 800e4fe:	2101      	moveq	r1, #1
 800e500:	6139      	str	r1, [r7, #16]
 800e502:	b1c4      	cbz	r4, 800e536 <__d2b+0x88>
 800e504:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e508:	4404      	add	r4, r0
 800e50a:	6034      	str	r4, [r6, #0]
 800e50c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e510:	6028      	str	r0, [r5, #0]
 800e512:	4638      	mov	r0, r7
 800e514:	b003      	add	sp, #12
 800e516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e51e:	e7d5      	b.n	800e4cc <__d2b+0x1e>
 800e520:	6179      	str	r1, [r7, #20]
 800e522:	e7e7      	b.n	800e4f4 <__d2b+0x46>
 800e524:	a801      	add	r0, sp, #4
 800e526:	f7ff fddb 	bl	800e0e0 <__lo0bits>
 800e52a:	9b01      	ldr	r3, [sp, #4]
 800e52c:	617b      	str	r3, [r7, #20]
 800e52e:	2101      	movs	r1, #1
 800e530:	6139      	str	r1, [r7, #16]
 800e532:	3020      	adds	r0, #32
 800e534:	e7e5      	b.n	800e502 <__d2b+0x54>
 800e536:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e53a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e53e:	6030      	str	r0, [r6, #0]
 800e540:	6918      	ldr	r0, [r3, #16]
 800e542:	f7ff fdae 	bl	800e0a2 <__hi0bits>
 800e546:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e54a:	e7e1      	b.n	800e510 <__d2b+0x62>

0800e54c <_calloc_r>:
 800e54c:	b538      	push	{r3, r4, r5, lr}
 800e54e:	fb02 f401 	mul.w	r4, r2, r1
 800e552:	4621      	mov	r1, r4
 800e554:	f7fe fa5e 	bl	800ca14 <_malloc_r>
 800e558:	4605      	mov	r5, r0
 800e55a:	b118      	cbz	r0, 800e564 <_calloc_r+0x18>
 800e55c:	4622      	mov	r2, r4
 800e55e:	2100      	movs	r1, #0
 800e560:	f7fe fa02 	bl	800c968 <memset>
 800e564:	4628      	mov	r0, r5
 800e566:	bd38      	pop	{r3, r4, r5, pc}

0800e568 <__ssputs_r>:
 800e568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e56c:	688e      	ldr	r6, [r1, #8]
 800e56e:	429e      	cmp	r6, r3
 800e570:	4682      	mov	sl, r0
 800e572:	460c      	mov	r4, r1
 800e574:	4690      	mov	r8, r2
 800e576:	4699      	mov	r9, r3
 800e578:	d837      	bhi.n	800e5ea <__ssputs_r+0x82>
 800e57a:	898a      	ldrh	r2, [r1, #12]
 800e57c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e580:	d031      	beq.n	800e5e6 <__ssputs_r+0x7e>
 800e582:	6825      	ldr	r5, [r4, #0]
 800e584:	6909      	ldr	r1, [r1, #16]
 800e586:	1a6f      	subs	r7, r5, r1
 800e588:	6965      	ldr	r5, [r4, #20]
 800e58a:	2302      	movs	r3, #2
 800e58c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e590:	fb95 f5f3 	sdiv	r5, r5, r3
 800e594:	f109 0301 	add.w	r3, r9, #1
 800e598:	443b      	add	r3, r7
 800e59a:	429d      	cmp	r5, r3
 800e59c:	bf38      	it	cc
 800e59e:	461d      	movcc	r5, r3
 800e5a0:	0553      	lsls	r3, r2, #21
 800e5a2:	d530      	bpl.n	800e606 <__ssputs_r+0x9e>
 800e5a4:	4629      	mov	r1, r5
 800e5a6:	f7fe fa35 	bl	800ca14 <_malloc_r>
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	b950      	cbnz	r0, 800e5c4 <__ssputs_r+0x5c>
 800e5ae:	230c      	movs	r3, #12
 800e5b0:	f8ca 3000 	str.w	r3, [sl]
 800e5b4:	89a3      	ldrh	r3, [r4, #12]
 800e5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ba:	81a3      	strh	r3, [r4, #12]
 800e5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c4:	463a      	mov	r2, r7
 800e5c6:	6921      	ldr	r1, [r4, #16]
 800e5c8:	f7ff fcd8 	bl	800df7c <memcpy>
 800e5cc:	89a3      	ldrh	r3, [r4, #12]
 800e5ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5d6:	81a3      	strh	r3, [r4, #12]
 800e5d8:	6126      	str	r6, [r4, #16]
 800e5da:	6165      	str	r5, [r4, #20]
 800e5dc:	443e      	add	r6, r7
 800e5de:	1bed      	subs	r5, r5, r7
 800e5e0:	6026      	str	r6, [r4, #0]
 800e5e2:	60a5      	str	r5, [r4, #8]
 800e5e4:	464e      	mov	r6, r9
 800e5e6:	454e      	cmp	r6, r9
 800e5e8:	d900      	bls.n	800e5ec <__ssputs_r+0x84>
 800e5ea:	464e      	mov	r6, r9
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	4641      	mov	r1, r8
 800e5f0:	6820      	ldr	r0, [r4, #0]
 800e5f2:	f000 f91d 	bl	800e830 <memmove>
 800e5f6:	68a3      	ldr	r3, [r4, #8]
 800e5f8:	1b9b      	subs	r3, r3, r6
 800e5fa:	60a3      	str	r3, [r4, #8]
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	441e      	add	r6, r3
 800e600:	6026      	str	r6, [r4, #0]
 800e602:	2000      	movs	r0, #0
 800e604:	e7dc      	b.n	800e5c0 <__ssputs_r+0x58>
 800e606:	462a      	mov	r2, r5
 800e608:	f000 f92b 	bl	800e862 <_realloc_r>
 800e60c:	4606      	mov	r6, r0
 800e60e:	2800      	cmp	r0, #0
 800e610:	d1e2      	bne.n	800e5d8 <__ssputs_r+0x70>
 800e612:	6921      	ldr	r1, [r4, #16]
 800e614:	4650      	mov	r0, sl
 800e616:	f7fe f9af 	bl	800c978 <_free_r>
 800e61a:	e7c8      	b.n	800e5ae <__ssputs_r+0x46>

0800e61c <_svfiprintf_r>:
 800e61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e620:	461d      	mov	r5, r3
 800e622:	898b      	ldrh	r3, [r1, #12]
 800e624:	061f      	lsls	r7, r3, #24
 800e626:	b09d      	sub	sp, #116	; 0x74
 800e628:	4680      	mov	r8, r0
 800e62a:	460c      	mov	r4, r1
 800e62c:	4616      	mov	r6, r2
 800e62e:	d50f      	bpl.n	800e650 <_svfiprintf_r+0x34>
 800e630:	690b      	ldr	r3, [r1, #16]
 800e632:	b96b      	cbnz	r3, 800e650 <_svfiprintf_r+0x34>
 800e634:	2140      	movs	r1, #64	; 0x40
 800e636:	f7fe f9ed 	bl	800ca14 <_malloc_r>
 800e63a:	6020      	str	r0, [r4, #0]
 800e63c:	6120      	str	r0, [r4, #16]
 800e63e:	b928      	cbnz	r0, 800e64c <_svfiprintf_r+0x30>
 800e640:	230c      	movs	r3, #12
 800e642:	f8c8 3000 	str.w	r3, [r8]
 800e646:	f04f 30ff 	mov.w	r0, #4294967295
 800e64a:	e0c8      	b.n	800e7de <_svfiprintf_r+0x1c2>
 800e64c:	2340      	movs	r3, #64	; 0x40
 800e64e:	6163      	str	r3, [r4, #20]
 800e650:	2300      	movs	r3, #0
 800e652:	9309      	str	r3, [sp, #36]	; 0x24
 800e654:	2320      	movs	r3, #32
 800e656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e65a:	2330      	movs	r3, #48	; 0x30
 800e65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e660:	9503      	str	r5, [sp, #12]
 800e662:	f04f 0b01 	mov.w	fp, #1
 800e666:	4637      	mov	r7, r6
 800e668:	463d      	mov	r5, r7
 800e66a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e66e:	b10b      	cbz	r3, 800e674 <_svfiprintf_r+0x58>
 800e670:	2b25      	cmp	r3, #37	; 0x25
 800e672:	d13e      	bne.n	800e6f2 <_svfiprintf_r+0xd6>
 800e674:	ebb7 0a06 	subs.w	sl, r7, r6
 800e678:	d00b      	beq.n	800e692 <_svfiprintf_r+0x76>
 800e67a:	4653      	mov	r3, sl
 800e67c:	4632      	mov	r2, r6
 800e67e:	4621      	mov	r1, r4
 800e680:	4640      	mov	r0, r8
 800e682:	f7ff ff71 	bl	800e568 <__ssputs_r>
 800e686:	3001      	adds	r0, #1
 800e688:	f000 80a4 	beq.w	800e7d4 <_svfiprintf_r+0x1b8>
 800e68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e68e:	4453      	add	r3, sl
 800e690:	9309      	str	r3, [sp, #36]	; 0x24
 800e692:	783b      	ldrb	r3, [r7, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 809d 	beq.w	800e7d4 <_svfiprintf_r+0x1b8>
 800e69a:	2300      	movs	r3, #0
 800e69c:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6a4:	9304      	str	r3, [sp, #16]
 800e6a6:	9307      	str	r3, [sp, #28]
 800e6a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6ac:	931a      	str	r3, [sp, #104]	; 0x68
 800e6ae:	462f      	mov	r7, r5
 800e6b0:	2205      	movs	r2, #5
 800e6b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e6b6:	4850      	ldr	r0, [pc, #320]	; (800e7f8 <_svfiprintf_r+0x1dc>)
 800e6b8:	f7f1 fe7a 	bl	80003b0 <memchr>
 800e6bc:	9b04      	ldr	r3, [sp, #16]
 800e6be:	b9d0      	cbnz	r0, 800e6f6 <_svfiprintf_r+0xda>
 800e6c0:	06d9      	lsls	r1, r3, #27
 800e6c2:	bf44      	itt	mi
 800e6c4:	2220      	movmi	r2, #32
 800e6c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6ca:	071a      	lsls	r2, r3, #28
 800e6cc:	bf44      	itt	mi
 800e6ce:	222b      	movmi	r2, #43	; 0x2b
 800e6d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6d4:	782a      	ldrb	r2, [r5, #0]
 800e6d6:	2a2a      	cmp	r2, #42	; 0x2a
 800e6d8:	d015      	beq.n	800e706 <_svfiprintf_r+0xea>
 800e6da:	9a07      	ldr	r2, [sp, #28]
 800e6dc:	462f      	mov	r7, r5
 800e6de:	2000      	movs	r0, #0
 800e6e0:	250a      	movs	r5, #10
 800e6e2:	4639      	mov	r1, r7
 800e6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6e8:	3b30      	subs	r3, #48	; 0x30
 800e6ea:	2b09      	cmp	r3, #9
 800e6ec:	d94d      	bls.n	800e78a <_svfiprintf_r+0x16e>
 800e6ee:	b1b8      	cbz	r0, 800e720 <_svfiprintf_r+0x104>
 800e6f0:	e00f      	b.n	800e712 <_svfiprintf_r+0xf6>
 800e6f2:	462f      	mov	r7, r5
 800e6f4:	e7b8      	b.n	800e668 <_svfiprintf_r+0x4c>
 800e6f6:	4a40      	ldr	r2, [pc, #256]	; (800e7f8 <_svfiprintf_r+0x1dc>)
 800e6f8:	1a80      	subs	r0, r0, r2
 800e6fa:	fa0b f000 	lsl.w	r0, fp, r0
 800e6fe:	4318      	orrs	r0, r3
 800e700:	9004      	str	r0, [sp, #16]
 800e702:	463d      	mov	r5, r7
 800e704:	e7d3      	b.n	800e6ae <_svfiprintf_r+0x92>
 800e706:	9a03      	ldr	r2, [sp, #12]
 800e708:	1d11      	adds	r1, r2, #4
 800e70a:	6812      	ldr	r2, [r2, #0]
 800e70c:	9103      	str	r1, [sp, #12]
 800e70e:	2a00      	cmp	r2, #0
 800e710:	db01      	blt.n	800e716 <_svfiprintf_r+0xfa>
 800e712:	9207      	str	r2, [sp, #28]
 800e714:	e004      	b.n	800e720 <_svfiprintf_r+0x104>
 800e716:	4252      	negs	r2, r2
 800e718:	f043 0302 	orr.w	r3, r3, #2
 800e71c:	9207      	str	r2, [sp, #28]
 800e71e:	9304      	str	r3, [sp, #16]
 800e720:	783b      	ldrb	r3, [r7, #0]
 800e722:	2b2e      	cmp	r3, #46	; 0x2e
 800e724:	d10c      	bne.n	800e740 <_svfiprintf_r+0x124>
 800e726:	787b      	ldrb	r3, [r7, #1]
 800e728:	2b2a      	cmp	r3, #42	; 0x2a
 800e72a:	d133      	bne.n	800e794 <_svfiprintf_r+0x178>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	1d1a      	adds	r2, r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	9203      	str	r2, [sp, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	bfb8      	it	lt
 800e738:	f04f 33ff 	movlt.w	r3, #4294967295
 800e73c:	3702      	adds	r7, #2
 800e73e:	9305      	str	r3, [sp, #20]
 800e740:	4d2e      	ldr	r5, [pc, #184]	; (800e7fc <_svfiprintf_r+0x1e0>)
 800e742:	7839      	ldrb	r1, [r7, #0]
 800e744:	2203      	movs	r2, #3
 800e746:	4628      	mov	r0, r5
 800e748:	f7f1 fe32 	bl	80003b0 <memchr>
 800e74c:	b138      	cbz	r0, 800e75e <_svfiprintf_r+0x142>
 800e74e:	2340      	movs	r3, #64	; 0x40
 800e750:	1b40      	subs	r0, r0, r5
 800e752:	fa03 f000 	lsl.w	r0, r3, r0
 800e756:	9b04      	ldr	r3, [sp, #16]
 800e758:	4303      	orrs	r3, r0
 800e75a:	3701      	adds	r7, #1
 800e75c:	9304      	str	r3, [sp, #16]
 800e75e:	7839      	ldrb	r1, [r7, #0]
 800e760:	4827      	ldr	r0, [pc, #156]	; (800e800 <_svfiprintf_r+0x1e4>)
 800e762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e766:	2206      	movs	r2, #6
 800e768:	1c7e      	adds	r6, r7, #1
 800e76a:	f7f1 fe21 	bl	80003b0 <memchr>
 800e76e:	2800      	cmp	r0, #0
 800e770:	d038      	beq.n	800e7e4 <_svfiprintf_r+0x1c8>
 800e772:	4b24      	ldr	r3, [pc, #144]	; (800e804 <_svfiprintf_r+0x1e8>)
 800e774:	bb13      	cbnz	r3, 800e7bc <_svfiprintf_r+0x1a0>
 800e776:	9b03      	ldr	r3, [sp, #12]
 800e778:	3307      	adds	r3, #7
 800e77a:	f023 0307 	bic.w	r3, r3, #7
 800e77e:	3308      	adds	r3, #8
 800e780:	9303      	str	r3, [sp, #12]
 800e782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e784:	444b      	add	r3, r9
 800e786:	9309      	str	r3, [sp, #36]	; 0x24
 800e788:	e76d      	b.n	800e666 <_svfiprintf_r+0x4a>
 800e78a:	fb05 3202 	mla	r2, r5, r2, r3
 800e78e:	2001      	movs	r0, #1
 800e790:	460f      	mov	r7, r1
 800e792:	e7a6      	b.n	800e6e2 <_svfiprintf_r+0xc6>
 800e794:	2300      	movs	r3, #0
 800e796:	3701      	adds	r7, #1
 800e798:	9305      	str	r3, [sp, #20]
 800e79a:	4619      	mov	r1, r3
 800e79c:	250a      	movs	r5, #10
 800e79e:	4638      	mov	r0, r7
 800e7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7a4:	3a30      	subs	r2, #48	; 0x30
 800e7a6:	2a09      	cmp	r2, #9
 800e7a8:	d903      	bls.n	800e7b2 <_svfiprintf_r+0x196>
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0c8      	beq.n	800e740 <_svfiprintf_r+0x124>
 800e7ae:	9105      	str	r1, [sp, #20]
 800e7b0:	e7c6      	b.n	800e740 <_svfiprintf_r+0x124>
 800e7b2:	fb05 2101 	mla	r1, r5, r1, r2
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	e7f0      	b.n	800e79e <_svfiprintf_r+0x182>
 800e7bc:	ab03      	add	r3, sp, #12
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	4622      	mov	r2, r4
 800e7c2:	4b11      	ldr	r3, [pc, #68]	; (800e808 <_svfiprintf_r+0x1ec>)
 800e7c4:	a904      	add	r1, sp, #16
 800e7c6:	4640      	mov	r0, r8
 800e7c8:	f7fe fa06 	bl	800cbd8 <_printf_float>
 800e7cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e7d0:	4681      	mov	r9, r0
 800e7d2:	d1d6      	bne.n	800e782 <_svfiprintf_r+0x166>
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	065b      	lsls	r3, r3, #25
 800e7d8:	f53f af35 	bmi.w	800e646 <_svfiprintf_r+0x2a>
 800e7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7de:	b01d      	add	sp, #116	; 0x74
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e4:	ab03      	add	r3, sp, #12
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	4b07      	ldr	r3, [pc, #28]	; (800e808 <_svfiprintf_r+0x1ec>)
 800e7ec:	a904      	add	r1, sp, #16
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	f7fe fc94 	bl	800d11c <_printf_i>
 800e7f4:	e7ea      	b.n	800e7cc <_svfiprintf_r+0x1b0>
 800e7f6:	bf00      	nop
 800e7f8:	08015514 	.word	0x08015514
 800e7fc:	0801551a 	.word	0x0801551a
 800e800:	0801551e 	.word	0x0801551e
 800e804:	0800cbd9 	.word	0x0800cbd9
 800e808:	0800e569 	.word	0x0800e569

0800e80c <__ascii_mbtowc>:
 800e80c:	b082      	sub	sp, #8
 800e80e:	b901      	cbnz	r1, 800e812 <__ascii_mbtowc+0x6>
 800e810:	a901      	add	r1, sp, #4
 800e812:	b142      	cbz	r2, 800e826 <__ascii_mbtowc+0x1a>
 800e814:	b14b      	cbz	r3, 800e82a <__ascii_mbtowc+0x1e>
 800e816:	7813      	ldrb	r3, [r2, #0]
 800e818:	600b      	str	r3, [r1, #0]
 800e81a:	7812      	ldrb	r2, [r2, #0]
 800e81c:	1c10      	adds	r0, r2, #0
 800e81e:	bf18      	it	ne
 800e820:	2001      	movne	r0, #1
 800e822:	b002      	add	sp, #8
 800e824:	4770      	bx	lr
 800e826:	4610      	mov	r0, r2
 800e828:	e7fb      	b.n	800e822 <__ascii_mbtowc+0x16>
 800e82a:	f06f 0001 	mvn.w	r0, #1
 800e82e:	e7f8      	b.n	800e822 <__ascii_mbtowc+0x16>

0800e830 <memmove>:
 800e830:	4288      	cmp	r0, r1
 800e832:	b510      	push	{r4, lr}
 800e834:	eb01 0302 	add.w	r3, r1, r2
 800e838:	d807      	bhi.n	800e84a <memmove+0x1a>
 800e83a:	1e42      	subs	r2, r0, #1
 800e83c:	4299      	cmp	r1, r3
 800e83e:	d00a      	beq.n	800e856 <memmove+0x26>
 800e840:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e844:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e848:	e7f8      	b.n	800e83c <memmove+0xc>
 800e84a:	4283      	cmp	r3, r0
 800e84c:	d9f5      	bls.n	800e83a <memmove+0xa>
 800e84e:	1881      	adds	r1, r0, r2
 800e850:	1ad2      	subs	r2, r2, r3
 800e852:	42d3      	cmn	r3, r2
 800e854:	d100      	bne.n	800e858 <memmove+0x28>
 800e856:	bd10      	pop	{r4, pc}
 800e858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e85c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e860:	e7f7      	b.n	800e852 <memmove+0x22>

0800e862 <_realloc_r>:
 800e862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e864:	4607      	mov	r7, r0
 800e866:	4614      	mov	r4, r2
 800e868:	460e      	mov	r6, r1
 800e86a:	b921      	cbnz	r1, 800e876 <_realloc_r+0x14>
 800e86c:	4611      	mov	r1, r2
 800e86e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e872:	f7fe b8cf 	b.w	800ca14 <_malloc_r>
 800e876:	b922      	cbnz	r2, 800e882 <_realloc_r+0x20>
 800e878:	f7fe f87e 	bl	800c978 <_free_r>
 800e87c:	4625      	mov	r5, r4
 800e87e:	4628      	mov	r0, r5
 800e880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e882:	f000 f821 	bl	800e8c8 <_malloc_usable_size_r>
 800e886:	42a0      	cmp	r0, r4
 800e888:	d20f      	bcs.n	800e8aa <_realloc_r+0x48>
 800e88a:	4621      	mov	r1, r4
 800e88c:	4638      	mov	r0, r7
 800e88e:	f7fe f8c1 	bl	800ca14 <_malloc_r>
 800e892:	4605      	mov	r5, r0
 800e894:	2800      	cmp	r0, #0
 800e896:	d0f2      	beq.n	800e87e <_realloc_r+0x1c>
 800e898:	4631      	mov	r1, r6
 800e89a:	4622      	mov	r2, r4
 800e89c:	f7ff fb6e 	bl	800df7c <memcpy>
 800e8a0:	4631      	mov	r1, r6
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	f7fe f868 	bl	800c978 <_free_r>
 800e8a8:	e7e9      	b.n	800e87e <_realloc_r+0x1c>
 800e8aa:	4635      	mov	r5, r6
 800e8ac:	e7e7      	b.n	800e87e <_realloc_r+0x1c>

0800e8ae <__ascii_wctomb>:
 800e8ae:	b149      	cbz	r1, 800e8c4 <__ascii_wctomb+0x16>
 800e8b0:	2aff      	cmp	r2, #255	; 0xff
 800e8b2:	bf85      	ittet	hi
 800e8b4:	238a      	movhi	r3, #138	; 0x8a
 800e8b6:	6003      	strhi	r3, [r0, #0]
 800e8b8:	700a      	strbls	r2, [r1, #0]
 800e8ba:	f04f 30ff 	movhi.w	r0, #4294967295
 800e8be:	bf98      	it	ls
 800e8c0:	2001      	movls	r0, #1
 800e8c2:	4770      	bx	lr
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	4770      	bx	lr

0800e8c8 <_malloc_usable_size_r>:
 800e8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8cc:	1f18      	subs	r0, r3, #4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	bfbc      	itt	lt
 800e8d2:	580b      	ldrlt	r3, [r1, r0]
 800e8d4:	18c0      	addlt	r0, r0, r3
 800e8d6:	4770      	bx	lr

0800e8d8 <cos>:
 800e8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8da:	eeb0 7b40 	vmov.f64	d7, d0
 800e8de:	ee17 3a90 	vmov	r3, s15
 800e8e2:	4a19      	ldr	r2, [pc, #100]	; (800e948 <cos+0x70>)
 800e8e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	dc04      	bgt.n	800e8f6 <cos+0x1e>
 800e8ec:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800e940 <cos+0x68>
 800e8f0:	f000 ff4a 	bl	800f788 <__kernel_cos>
 800e8f4:	e004      	b.n	800e900 <cos+0x28>
 800e8f6:	4a15      	ldr	r2, [pc, #84]	; (800e94c <cos+0x74>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	dd04      	ble.n	800e906 <cos+0x2e>
 800e8fc:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e900:	b005      	add	sp, #20
 800e902:	f85d fb04 	ldr.w	pc, [sp], #4
 800e906:	4668      	mov	r0, sp
 800e908:	f000 fdfe 	bl	800f508 <__ieee754_rem_pio2>
 800e90c:	f000 0003 	and.w	r0, r0, #3
 800e910:	2801      	cmp	r0, #1
 800e912:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e916:	ed9d 0b00 	vldr	d0, [sp]
 800e91a:	d007      	beq.n	800e92c <cos+0x54>
 800e91c:	2802      	cmp	r0, #2
 800e91e:	d00a      	beq.n	800e936 <cos+0x5e>
 800e920:	2800      	cmp	r0, #0
 800e922:	d0e5      	beq.n	800e8f0 <cos+0x18>
 800e924:	2001      	movs	r0, #1
 800e926:	f001 fa37 	bl	800fd98 <__kernel_sin>
 800e92a:	e7e9      	b.n	800e900 <cos+0x28>
 800e92c:	f001 fa34 	bl	800fd98 <__kernel_sin>
 800e930:	eeb1 0b40 	vneg.f64	d0, d0
 800e934:	e7e4      	b.n	800e900 <cos+0x28>
 800e936:	f000 ff27 	bl	800f788 <__kernel_cos>
 800e93a:	e7f9      	b.n	800e930 <cos+0x58>
 800e93c:	f3af 8000 	nop.w
	...
 800e948:	3fe921fb 	.word	0x3fe921fb
 800e94c:	7fefffff 	.word	0x7fefffff

0800e950 <sin>:
 800e950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e952:	eeb0 7b40 	vmov.f64	d7, d0
 800e956:	ee17 3a90 	vmov	r3, s15
 800e95a:	4a19      	ldr	r2, [pc, #100]	; (800e9c0 <sin+0x70>)
 800e95c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e960:	4293      	cmp	r3, r2
 800e962:	dc05      	bgt.n	800e970 <sin+0x20>
 800e964:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800e9b8 <sin+0x68>
 800e968:	2000      	movs	r0, #0
 800e96a:	f001 fa15 	bl	800fd98 <__kernel_sin>
 800e96e:	e004      	b.n	800e97a <sin+0x2a>
 800e970:	4a14      	ldr	r2, [pc, #80]	; (800e9c4 <sin+0x74>)
 800e972:	4293      	cmp	r3, r2
 800e974:	dd04      	ble.n	800e980 <sin+0x30>
 800e976:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e97a:	b005      	add	sp, #20
 800e97c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e980:	4668      	mov	r0, sp
 800e982:	f000 fdc1 	bl	800f508 <__ieee754_rem_pio2>
 800e986:	f000 0003 	and.w	r0, r0, #3
 800e98a:	2801      	cmp	r0, #1
 800e98c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e990:	ed9d 0b00 	vldr	d0, [sp]
 800e994:	d004      	beq.n	800e9a0 <sin+0x50>
 800e996:	2802      	cmp	r0, #2
 800e998:	d005      	beq.n	800e9a6 <sin+0x56>
 800e99a:	b950      	cbnz	r0, 800e9b2 <sin+0x62>
 800e99c:	2001      	movs	r0, #1
 800e99e:	e7e4      	b.n	800e96a <sin+0x1a>
 800e9a0:	f000 fef2 	bl	800f788 <__kernel_cos>
 800e9a4:	e7e9      	b.n	800e97a <sin+0x2a>
 800e9a6:	2001      	movs	r0, #1
 800e9a8:	f001 f9f6 	bl	800fd98 <__kernel_sin>
 800e9ac:	eeb1 0b40 	vneg.f64	d0, d0
 800e9b0:	e7e3      	b.n	800e97a <sin+0x2a>
 800e9b2:	f000 fee9 	bl	800f788 <__kernel_cos>
 800e9b6:	e7f9      	b.n	800e9ac <sin+0x5c>
	...
 800e9c0:	3fe921fb 	.word	0x3fe921fb
 800e9c4:	7fefffff 	.word	0x7fefffff

0800e9c8 <log10>:
 800e9c8:	b500      	push	{lr}
 800e9ca:	ed2d 8b02 	vpush	{d8}
 800e9ce:	eeb0 8b40 	vmov.f64	d8, d0
 800e9d2:	b08b      	sub	sp, #44	; 0x2c
 800e9d4:	f000 f998 	bl	800ed08 <__ieee754_log10>
 800e9d8:	4b2d      	ldr	r3, [pc, #180]	; (800ea90 <log10+0xc8>)
 800e9da:	f993 3000 	ldrsb.w	r3, [r3]
 800e9de:	1c5a      	adds	r2, r3, #1
 800e9e0:	d051      	beq.n	800ea86 <log10+0xbe>
 800e9e2:	eeb4 8b48 	vcmp.f64	d8, d8
 800e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ea:	d64c      	bvs.n	800ea86 <log10+0xbe>
 800e9ec:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f4:	d847      	bhi.n	800ea86 <log10+0xbe>
 800e9f6:	4a27      	ldr	r2, [pc, #156]	; (800ea94 <log10+0xcc>)
 800e9f8:	9201      	str	r2, [sp, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	9208      	str	r2, [sp, #32]
 800e9fe:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ea02:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ea06:	b993      	cbnz	r3, 800ea2e <log10+0x66>
 800ea08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ea0c:	4922      	ldr	r1, [pc, #136]	; (800ea98 <log10+0xd0>)
 800ea0e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800ea12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea1a:	d025      	beq.n	800ea68 <log10+0xa0>
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	9200      	str	r2, [sp, #0]
 800ea22:	d116      	bne.n	800ea52 <log10+0x8a>
 800ea24:	f7fd ff66 	bl	800c8f4 <__errno>
 800ea28:	2321      	movs	r3, #33	; 0x21
 800ea2a:	6003      	str	r3, [r0, #0]
 800ea2c:	e016      	b.n	800ea5c <log10+0x94>
 800ea2e:	491b      	ldr	r1, [pc, #108]	; (800ea9c <log10+0xd4>)
 800ea30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ea34:	2000      	movs	r0, #0
 800ea36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea3e:	d1ed      	bne.n	800ea1c <log10+0x54>
 800ea40:	2202      	movs	r2, #2
 800ea42:	4293      	cmp	r3, r2
 800ea44:	9200      	str	r2, [sp, #0]
 800ea46:	d111      	bne.n	800ea6c <log10+0xa4>
 800ea48:	f7fd ff54 	bl	800c8f4 <__errno>
 800ea4c:	2322      	movs	r3, #34	; 0x22
 800ea4e:	6003      	str	r3, [r0, #0]
 800ea50:	e011      	b.n	800ea76 <log10+0xae>
 800ea52:	4668      	mov	r0, sp
 800ea54:	f001 fa84 	bl	800ff60 <matherr>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d0e3      	beq.n	800ea24 <log10+0x5c>
 800ea5c:	4810      	ldr	r0, [pc, #64]	; (800eaa0 <log10+0xd8>)
 800ea5e:	f001 fa83 	bl	800ff68 <nan>
 800ea62:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ea66:	e006      	b.n	800ea76 <log10+0xae>
 800ea68:	2302      	movs	r3, #2
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	4668      	mov	r0, sp
 800ea6e:	f001 fa77 	bl	800ff60 <matherr>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d0e8      	beq.n	800ea48 <log10+0x80>
 800ea76:	9b08      	ldr	r3, [sp, #32]
 800ea78:	b11b      	cbz	r3, 800ea82 <log10+0xba>
 800ea7a:	f7fd ff3b 	bl	800c8f4 <__errno>
 800ea7e:	9b08      	ldr	r3, [sp, #32]
 800ea80:	6003      	str	r3, [r0, #0]
 800ea82:	ed9d 0b06 	vldr	d0, [sp, #24]
 800ea86:	b00b      	add	sp, #44	; 0x2c
 800ea88:	ecbd 8b02 	vpop	{d8}
 800ea8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea90:	24000550 	.word	0x24000550
 800ea94:	08015630 	.word	0x08015630
 800ea98:	c7efffff 	.word	0xc7efffff
 800ea9c:	fff00000 	.word	0xfff00000
 800eaa0:	08015519 	.word	0x08015519
 800eaa4:	00000000 	.word	0x00000000

0800eaa8 <pow>:
 800eaa8:	b570      	push	{r4, r5, r6, lr}
 800eaaa:	ed2d 8b0a 	vpush	{d8-d12}
 800eaae:	eeb0 9b40 	vmov.f64	d9, d0
 800eab2:	eeb0 8b41 	vmov.f64	d8, d1
 800eab6:	4c8c      	ldr	r4, [pc, #560]	; (800ece8 <pow+0x240>)
 800eab8:	b08a      	sub	sp, #40	; 0x28
 800eaba:	f000 f99d 	bl	800edf8 <__ieee754_pow>
 800eabe:	f994 3000 	ldrsb.w	r3, [r4]
 800eac2:	eeb0 ab40 	vmov.f64	d10, d0
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	4626      	mov	r6, r4
 800eaca:	d04b      	beq.n	800eb64 <pow+0xbc>
 800eacc:	eeb4 8b48 	vcmp.f64	d8, d8
 800ead0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead4:	d646      	bvs.n	800eb64 <pow+0xbc>
 800ead6:	eeb4 9b49 	vcmp.f64	d9, d9
 800eada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eade:	d719      	bvc.n	800eb14 <pow+0x6c>
 800eae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae8:	d13c      	bne.n	800eb64 <pow+0xbc>
 800eaea:	2201      	movs	r2, #1
 800eaec:	9200      	str	r2, [sp, #0]
 800eaee:	497f      	ldr	r1, [pc, #508]	; (800ecec <pow+0x244>)
 800eaf0:	4a7f      	ldr	r2, [pc, #508]	; (800ecf0 <pow+0x248>)
 800eaf2:	9201      	str	r2, [sp, #4]
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	9208      	str	r2, [sp, #32]
 800eafc:	ed8d 9b02 	vstr	d9, [sp, #8]
 800eb00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800eb04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb08:	d02a      	beq.n	800eb60 <pow+0xb8>
 800eb0a:	4668      	mov	r0, sp
 800eb0c:	f001 fa28 	bl	800ff60 <matherr>
 800eb10:	bb00      	cbnz	r0, 800eb54 <pow+0xac>
 800eb12:	e04e      	b.n	800ebb2 <pow+0x10a>
 800eb14:	ed9f bb72 	vldr	d11, [pc, #456]	; 800ece0 <pow+0x238>
 800eb18:	eeb4 9b4b 	vcmp.f64	d9, d11
 800eb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb20:	eeb0 cb4b 	vmov.f64	d12, d11
 800eb24:	d14a      	bne.n	800ebbc <pow+0x114>
 800eb26:	eeb4 8b4b 	vcmp.f64	d8, d11
 800eb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2e:	d11f      	bne.n	800eb70 <pow+0xc8>
 800eb30:	2201      	movs	r2, #1
 800eb32:	9200      	str	r2, [sp, #0]
 800eb34:	4a6e      	ldr	r2, [pc, #440]	; (800ecf0 <pow+0x248>)
 800eb36:	9201      	str	r2, [sp, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	9208      	str	r2, [sp, #32]
 800eb3c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800eb40:	ed8d 8b04 	vstr	d8, [sp, #16]
 800eb44:	ed8d bb06 	vstr	d11, [sp, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d0de      	beq.n	800eb0a <pow+0x62>
 800eb4c:	4b67      	ldr	r3, [pc, #412]	; (800ecec <pow+0x244>)
 800eb4e:	2200      	movs	r2, #0
 800eb50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb54:	9b08      	ldr	r3, [sp, #32]
 800eb56:	b11b      	cbz	r3, 800eb60 <pow+0xb8>
 800eb58:	f7fd fecc 	bl	800c8f4 <__errno>
 800eb5c:	9b08      	ldr	r3, [sp, #32]
 800eb5e:	6003      	str	r3, [r0, #0]
 800eb60:	ed9d ab06 	vldr	d10, [sp, #24]
 800eb64:	eeb0 0b4a 	vmov.f64	d0, d10
 800eb68:	b00a      	add	sp, #40	; 0x28
 800eb6a:	ecbd 8b0a 	vpop	{d8-d12}
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}
 800eb70:	eeb0 0b48 	vmov.f64	d0, d8
 800eb74:	f001 f971 	bl	800fe5a <finite>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d0f3      	beq.n	800eb64 <pow+0xbc>
 800eb7c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800eb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb84:	d5ee      	bpl.n	800eb64 <pow+0xbc>
 800eb86:	2301      	movs	r3, #1
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	4b59      	ldr	r3, [pc, #356]	; (800ecf0 <pow+0x248>)
 800eb8c:	9301      	str	r3, [sp, #4]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	9308      	str	r3, [sp, #32]
 800eb92:	f994 3000 	ldrsb.w	r3, [r4]
 800eb96:	ed8d 9b02 	vstr	d9, [sp, #8]
 800eb9a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800eb9e:	b913      	cbnz	r3, 800eba6 <pow+0xfe>
 800eba0:	ed8d bb06 	vstr	d11, [sp, #24]
 800eba4:	e7b1      	b.n	800eb0a <pow+0x62>
 800eba6:	4953      	ldr	r1, [pc, #332]	; (800ecf4 <pow+0x24c>)
 800eba8:	2000      	movs	r0, #0
 800ebaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	d1ab      	bne.n	800eb0a <pow+0x62>
 800ebb2:	f7fd fe9f 	bl	800c8f4 <__errno>
 800ebb6:	2321      	movs	r3, #33	; 0x21
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	e7cb      	b.n	800eb54 <pow+0xac>
 800ebbc:	f001 f94d 	bl	800fe5a <finite>
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	d164      	bne.n	800ec90 <pow+0x1e8>
 800ebc6:	eeb0 0b49 	vmov.f64	d0, d9
 800ebca:	f001 f946 	bl	800fe5a <finite>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d05e      	beq.n	800ec90 <pow+0x1e8>
 800ebd2:	eeb0 0b48 	vmov.f64	d0, d8
 800ebd6:	f001 f940 	bl	800fe5a <finite>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d058      	beq.n	800ec90 <pow+0x1e8>
 800ebde:	eeb4 ab4a 	vcmp.f64	d10, d10
 800ebe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe6:	f994 3000 	ldrsb.w	r3, [r4]
 800ebea:	4a41      	ldr	r2, [pc, #260]	; (800ecf0 <pow+0x248>)
 800ebec:	d70e      	bvc.n	800ec0c <pow+0x164>
 800ebee:	2101      	movs	r1, #1
 800ebf0:	e9cd 1200 	strd	r1, r2, [sp]
 800ebf4:	9508      	str	r5, [sp, #32]
 800ebf6:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ebfa:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d0ce      	beq.n	800eba0 <pow+0xf8>
 800ec02:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800ec06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec0a:	e7d0      	b.n	800ebae <pow+0x106>
 800ec0c:	2103      	movs	r1, #3
 800ec0e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ec12:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ec16:	ee28 8b07 	vmul.f64	d8, d8, d7
 800ec1a:	e9cd 1200 	strd	r1, r2, [sp]
 800ec1e:	9508      	str	r5, [sp, #32]
 800ec20:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ec24:	b9fb      	cbnz	r3, 800ec66 <pow+0x1be>
 800ec26:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800ec2a:	4b33      	ldr	r3, [pc, #204]	; (800ecf8 <pow+0x250>)
 800ec2c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ec30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec38:	d54b      	bpl.n	800ecd2 <pow+0x22a>
 800ec3a:	eeb0 0b48 	vmov.f64	d0, d8
 800ec3e:	f001 f99b 	bl	800ff78 <rint>
 800ec42:	eeb4 0b48 	vcmp.f64	d0, d8
 800ec46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4a:	d004      	beq.n	800ec56 <pow+0x1ae>
 800ec4c:	4b2b      	ldr	r3, [pc, #172]	; (800ecfc <pow+0x254>)
 800ec4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ec52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec56:	f996 3000 	ldrsb.w	r3, [r6]
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d139      	bne.n	800ecd2 <pow+0x22a>
 800ec5e:	f7fd fe49 	bl	800c8f4 <__errno>
 800ec62:	2322      	movs	r3, #34	; 0x22
 800ec64:	e7a8      	b.n	800ebb8 <pow+0x110>
 800ec66:	4b26      	ldr	r3, [pc, #152]	; (800ed00 <pow+0x258>)
 800ec68:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec76:	d5ee      	bpl.n	800ec56 <pow+0x1ae>
 800ec78:	eeb0 0b48 	vmov.f64	d0, d8
 800ec7c:	f001 f97c 	bl	800ff78 <rint>
 800ec80:	eeb4 0b48 	vcmp.f64	d0, d8
 800ec84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec88:	d0e5      	beq.n	800ec56 <pow+0x1ae>
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	4b19      	ldr	r3, [pc, #100]	; (800ecf4 <pow+0x24c>)
 800ec8e:	e7e0      	b.n	800ec52 <pow+0x1aa>
 800ec90:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800ec94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec98:	f47f af64 	bne.w	800eb64 <pow+0xbc>
 800ec9c:	eeb0 0b49 	vmov.f64	d0, d9
 800eca0:	f001 f8db 	bl	800fe5a <finite>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	f43f af5d 	beq.w	800eb64 <pow+0xbc>
 800ecaa:	eeb0 0b48 	vmov.f64	d0, d8
 800ecae:	f001 f8d4 	bl	800fe5a <finite>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	f43f af56 	beq.w	800eb64 <pow+0xbc>
 800ecb8:	2304      	movs	r3, #4
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	4b0c      	ldr	r3, [pc, #48]	; (800ecf0 <pow+0x248>)
 800ecbe:	9301      	str	r3, [sp, #4]
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	9308      	str	r3, [sp, #32]
 800ecc4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800ecc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800eccc:	ed8d cb06 	vstr	d12, [sp, #24]
 800ecd0:	e7c1      	b.n	800ec56 <pow+0x1ae>
 800ecd2:	4668      	mov	r0, sp
 800ecd4:	f001 f944 	bl	800ff60 <matherr>
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	f47f af3b 	bne.w	800eb54 <pow+0xac>
 800ecde:	e7be      	b.n	800ec5e <pow+0x1b6>
	...
 800ece8:	24000550 	.word	0x24000550
 800ecec:	3ff00000 	.word	0x3ff00000
 800ecf0:	08015636 	.word	0x08015636
 800ecf4:	fff00000 	.word	0xfff00000
 800ecf8:	47efffff 	.word	0x47efffff
 800ecfc:	c7efffff 	.word	0xc7efffff
 800ed00:	7ff00000 	.word	0x7ff00000
 800ed04:	00000000 	.word	0x00000000

0800ed08 <__ieee754_log10>:
 800ed08:	b500      	push	{lr}
 800ed0a:	ed2d 8b02 	vpush	{d8}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	ed8d 0b00 	vstr	d0, [sp]
 800ed14:	9a01      	ldr	r2, [sp, #4]
 800ed16:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800ed1a:	da29      	bge.n	800ed70 <__ieee754_log10+0x68>
 800ed1c:	9900      	ldr	r1, [sp, #0]
 800ed1e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ed22:	430b      	orrs	r3, r1
 800ed24:	d10a      	bne.n	800ed3c <__ieee754_log10+0x34>
 800ed26:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800edc0 <__ieee754_log10+0xb8>
 800ed2a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800edc8 <__ieee754_log10+0xc0>
 800ed2e:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800ed32:	b003      	add	sp, #12
 800ed34:	ecbd 8b02 	vpop	{d8}
 800ed38:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed3c:	2a00      	cmp	r2, #0
 800ed3e:	da04      	bge.n	800ed4a <__ieee754_log10+0x42>
 800ed40:	ed9d 7b00 	vldr	d7, [sp]
 800ed44:	ee37 6b47 	vsub.f64	d6, d7, d7
 800ed48:	e7ef      	b.n	800ed2a <__ieee754_log10+0x22>
 800ed4a:	ed9d 6b00 	vldr	d6, [sp]
 800ed4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800edd0 <__ieee754_log10+0xc8>
 800ed52:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ed56:	ed8d 7b00 	vstr	d7, [sp]
 800ed5a:	9a01      	ldr	r2, [sp, #4]
 800ed5c:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ed60:	4b23      	ldr	r3, [pc, #140]	; (800edf0 <__ieee754_log10+0xe8>)
 800ed62:	429a      	cmp	r2, r3
 800ed64:	dd06      	ble.n	800ed74 <__ieee754_log10+0x6c>
 800ed66:	ed9d 7b00 	vldr	d7, [sp]
 800ed6a:	ee37 0b07 	vadd.f64	d0, d7, d7
 800ed6e:	e7e0      	b.n	800ed32 <__ieee754_log10+0x2a>
 800ed70:	2100      	movs	r1, #0
 800ed72:	e7f5      	b.n	800ed60 <__ieee754_log10+0x58>
 800ed74:	1513      	asrs	r3, r2, #20
 800ed76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ed7a:	440b      	add	r3, r1
 800ed7c:	0fd8      	lsrs	r0, r3, #31
 800ed7e:	4403      	add	r3, r0
 800ed80:	ee07 3a90 	vmov	s15, r3
 800ed84:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800ed88:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800ed8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed90:	3003      	adds	r0, #3
 800ed92:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ed96:	ec43 2b10 	vmov	d0, r2, r3
 800ed9a:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800ed9e:	f001 f9f7 	bl	8010190 <__ieee754_log>
 800eda2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800edd8 <__ieee754_log10+0xd0>
 800eda6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800edaa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ede0 <__ieee754_log10+0xd8>
 800edae:	eea8 0b07 	vfma.f64	d0, d8, d7
 800edb2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800ede8 <__ieee754_log10+0xe0>
 800edb6:	eea8 0b07 	vfma.f64	d0, d8, d7
 800edba:	e7ba      	b.n	800ed32 <__ieee754_log10+0x2a>
 800edbc:	f3af 8000 	nop.w
 800edc0:	00000000 	.word	0x00000000
 800edc4:	c3500000 	.word	0xc3500000
	...
 800edd4:	43500000 	.word	0x43500000
 800edd8:	1526e50e 	.word	0x1526e50e
 800eddc:	3fdbcb7b 	.word	0x3fdbcb7b
 800ede0:	11f12b36 	.word	0x11f12b36
 800ede4:	3d59fef3 	.word	0x3d59fef3
 800ede8:	509f6000 	.word	0x509f6000
 800edec:	3fd34413 	.word	0x3fd34413
 800edf0:	7fefffff 	.word	0x7fefffff
 800edf4:	00000000 	.word	0x00000000

0800edf8 <__ieee754_pow>:
 800edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	ec57 6b11 	vmov	r6, r7, d1
 800ee00:	ed2d 8b02 	vpush	{d8}
 800ee04:	eeb0 8b40 	vmov.f64	d8, d0
 800ee08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ee0c:	ea58 0306 	orrs.w	r3, r8, r6
 800ee10:	b085      	sub	sp, #20
 800ee12:	46b9      	mov	r9, r7
 800ee14:	ee11 2a10 	vmov	r2, s2
 800ee18:	f000 8306 	beq.w	800f428 <__ieee754_pow+0x630>
 800ee1c:	ee18 aa90 	vmov	sl, s17
 800ee20:	4bb9      	ldr	r3, [pc, #740]	; (800f108 <__ieee754_pow+0x310>)
 800ee22:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800ee26:	429c      	cmp	r4, r3
 800ee28:	ee10 ba10 	vmov	fp, s0
 800ee2c:	dc0b      	bgt.n	800ee46 <__ieee754_pow+0x4e>
 800ee2e:	d105      	bne.n	800ee3c <__ieee754_pow+0x44>
 800ee30:	f1bb 0f00 	cmp.w	fp, #0
 800ee34:	d107      	bne.n	800ee46 <__ieee754_pow+0x4e>
 800ee36:	45a0      	cmp	r8, r4
 800ee38:	dc0d      	bgt.n	800ee56 <__ieee754_pow+0x5e>
 800ee3a:	e001      	b.n	800ee40 <__ieee754_pow+0x48>
 800ee3c:	4598      	cmp	r8, r3
 800ee3e:	dc02      	bgt.n	800ee46 <__ieee754_pow+0x4e>
 800ee40:	4598      	cmp	r8, r3
 800ee42:	d110      	bne.n	800ee66 <__ieee754_pow+0x6e>
 800ee44:	b17a      	cbz	r2, 800ee66 <__ieee754_pow+0x6e>
 800ee46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ee4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ee4e:	ea54 030b 	orrs.w	r3, r4, fp
 800ee52:	f000 82e9 	beq.w	800f428 <__ieee754_pow+0x630>
 800ee56:	48ad      	ldr	r0, [pc, #692]	; (800f10c <__ieee754_pow+0x314>)
 800ee58:	b005      	add	sp, #20
 800ee5a:	ecbd 8b02 	vpop	{d8}
 800ee5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee62:	f001 b881 	b.w	800ff68 <nan>
 800ee66:	f1ba 0f00 	cmp.w	sl, #0
 800ee6a:	da4e      	bge.n	800ef0a <__ieee754_pow+0x112>
 800ee6c:	4ba8      	ldr	r3, [pc, #672]	; (800f110 <__ieee754_pow+0x318>)
 800ee6e:	4598      	cmp	r8, r3
 800ee70:	dc49      	bgt.n	800ef06 <__ieee754_pow+0x10e>
 800ee72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ee76:	4598      	cmp	r8, r3
 800ee78:	dd47      	ble.n	800ef0a <__ieee754_pow+0x112>
 800ee7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee82:	2b14      	cmp	r3, #20
 800ee84:	dd24      	ble.n	800eed0 <__ieee754_pow+0xd8>
 800ee86:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ee8a:	fa22 f503 	lsr.w	r5, r2, r3
 800ee8e:	fa05 f303 	lsl.w	r3, r5, r3
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d139      	bne.n	800ef0a <__ieee754_pow+0x112>
 800ee96:	f005 0501 	and.w	r5, r5, #1
 800ee9a:	f1c5 0502 	rsb	r5, r5, #2
 800ee9e:	2a00      	cmp	r2, #0
 800eea0:	d15a      	bne.n	800ef58 <__ieee754_pow+0x160>
 800eea2:	4b99      	ldr	r3, [pc, #612]	; (800f108 <__ieee754_pow+0x310>)
 800eea4:	4598      	cmp	r8, r3
 800eea6:	d122      	bne.n	800eeee <__ieee754_pow+0xf6>
 800eea8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eeac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eeb0:	ea53 030b 	orrs.w	r3, r3, fp
 800eeb4:	f000 82b8 	beq.w	800f428 <__ieee754_pow+0x630>
 800eeb8:	4b96      	ldr	r3, [pc, #600]	; (800f114 <__ieee754_pow+0x31c>)
 800eeba:	429c      	cmp	r4, r3
 800eebc:	dd27      	ble.n	800ef0e <__ieee754_pow+0x116>
 800eebe:	f1b9 0f00 	cmp.w	r9, #0
 800eec2:	f280 82b4 	bge.w	800f42e <__ieee754_pow+0x636>
 800eec6:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800f0d8 <__ieee754_pow+0x2e0>
 800eeca:	ed8d 7b00 	vstr	d7, [sp]
 800eece:	e026      	b.n	800ef1e <__ieee754_pow+0x126>
 800eed0:	2a00      	cmp	r2, #0
 800eed2:	d140      	bne.n	800ef56 <__ieee754_pow+0x15e>
 800eed4:	f1c3 0314 	rsb	r3, r3, #20
 800eed8:	fa48 f503 	asr.w	r5, r8, r3
 800eedc:	fa05 f303 	lsl.w	r3, r5, r3
 800eee0:	4543      	cmp	r3, r8
 800eee2:	f040 82aa 	bne.w	800f43a <__ieee754_pow+0x642>
 800eee6:	f005 0501 	and.w	r5, r5, #1
 800eeea:	f1c5 0502 	rsb	r5, r5, #2
 800eeee:	4b8a      	ldr	r3, [pc, #552]	; (800f118 <__ieee754_pow+0x320>)
 800eef0:	4598      	cmp	r8, r3
 800eef2:	d11b      	bne.n	800ef2c <__ieee754_pow+0x134>
 800eef4:	f1b9 0f00 	cmp.w	r9, #0
 800eef8:	f280 829c 	bge.w	800f434 <__ieee754_pow+0x63c>
 800eefc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ef00:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800ef04:	e7e1      	b.n	800eeca <__ieee754_pow+0xd2>
 800ef06:	2502      	movs	r5, #2
 800ef08:	e7c9      	b.n	800ee9e <__ieee754_pow+0xa6>
 800ef0a:	2500      	movs	r5, #0
 800ef0c:	e7c7      	b.n	800ee9e <__ieee754_pow+0xa6>
 800ef0e:	f1b9 0f00 	cmp.w	r9, #0
 800ef12:	dad8      	bge.n	800eec6 <__ieee754_pow+0xce>
 800ef14:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800ef18:	4633      	mov	r3, r6
 800ef1a:	e9cd 3400 	strd	r3, r4, [sp]
 800ef1e:	ed9d 0b00 	vldr	d0, [sp]
 800ef22:	b005      	add	sp, #20
 800ef24:	ecbd 8b02 	vpop	{d8}
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ef30:	d102      	bne.n	800ef38 <__ieee754_pow+0x140>
 800ef32:	ee28 7b08 	vmul.f64	d7, d8, d8
 800ef36:	e7c8      	b.n	800eeca <__ieee754_pow+0xd2>
 800ef38:	4b78      	ldr	r3, [pc, #480]	; (800f11c <__ieee754_pow+0x324>)
 800ef3a:	4599      	cmp	r9, r3
 800ef3c:	d10c      	bne.n	800ef58 <__ieee754_pow+0x160>
 800ef3e:	f1ba 0f00 	cmp.w	sl, #0
 800ef42:	db09      	blt.n	800ef58 <__ieee754_pow+0x160>
 800ef44:	eeb0 0b48 	vmov.f64	d0, d8
 800ef48:	b005      	add	sp, #20
 800ef4a:	ecbd 8b02 	vpop	{d8}
 800ef4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef52:	f000 bc15 	b.w	800f780 <__ieee754_sqrt>
 800ef56:	2500      	movs	r5, #0
 800ef58:	eeb0 0b48 	vmov.f64	d0, d8
 800ef5c:	f000 ff74 	bl	800fe48 <fabs>
 800ef60:	ed8d 0b00 	vstr	d0, [sp]
 800ef64:	f1bb 0f00 	cmp.w	fp, #0
 800ef68:	d128      	bne.n	800efbc <__ieee754_pow+0x1c4>
 800ef6a:	b124      	cbz	r4, 800ef76 <__ieee754_pow+0x17e>
 800ef6c:	4b6a      	ldr	r3, [pc, #424]	; (800f118 <__ieee754_pow+0x320>)
 800ef6e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d122      	bne.n	800efbc <__ieee754_pow+0x1c4>
 800ef76:	f1b9 0f00 	cmp.w	r9, #0
 800ef7a:	da07      	bge.n	800ef8c <__ieee754_pow+0x194>
 800ef7c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ef80:	ed9d 6b00 	vldr	d6, [sp]
 800ef84:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800ef88:	ed8d 7b00 	vstr	d7, [sp]
 800ef8c:	f1ba 0f00 	cmp.w	sl, #0
 800ef90:	dac5      	bge.n	800ef1e <__ieee754_pow+0x126>
 800ef92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ef96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ef9a:	ea54 0305 	orrs.w	r3, r4, r5
 800ef9e:	d106      	bne.n	800efae <__ieee754_pow+0x1b6>
 800efa0:	ed9d 7b00 	vldr	d7, [sp]
 800efa4:	ee37 7b47 	vsub.f64	d7, d7, d7
 800efa8:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800efac:	e78d      	b.n	800eeca <__ieee754_pow+0xd2>
 800efae:	2d01      	cmp	r5, #1
 800efb0:	d1b5      	bne.n	800ef1e <__ieee754_pow+0x126>
 800efb2:	ed9d 7b00 	vldr	d7, [sp]
 800efb6:	eeb1 7b47 	vneg.f64	d7, d7
 800efba:	e786      	b.n	800eeca <__ieee754_pow+0xd2>
 800efbc:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800efc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efc4:	ea55 030a 	orrs.w	r3, r5, sl
 800efc8:	d104      	bne.n	800efd4 <__ieee754_pow+0x1dc>
 800efca:	ee38 8b48 	vsub.f64	d8, d8, d8
 800efce:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800efd2:	e77a      	b.n	800eeca <__ieee754_pow+0xd2>
 800efd4:	4b52      	ldr	r3, [pc, #328]	; (800f120 <__ieee754_pow+0x328>)
 800efd6:	4598      	cmp	r8, r3
 800efd8:	f340 80a8 	ble.w	800f12c <__ieee754_pow+0x334>
 800efdc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800efe0:	4598      	cmp	r8, r3
 800efe2:	dd0b      	ble.n	800effc <__ieee754_pow+0x204>
 800efe4:	4b4b      	ldr	r3, [pc, #300]	; (800f114 <__ieee754_pow+0x31c>)
 800efe6:	429c      	cmp	r4, r3
 800efe8:	dc0e      	bgt.n	800f008 <__ieee754_pow+0x210>
 800efea:	f1b9 0f00 	cmp.w	r9, #0
 800efee:	f6bf af6a 	bge.w	800eec6 <__ieee754_pow+0xce>
 800eff2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800f0e0 <__ieee754_pow+0x2e8>
 800eff6:	ee27 7b07 	vmul.f64	d7, d7, d7
 800effa:	e766      	b.n	800eeca <__ieee754_pow+0xd2>
 800effc:	4b49      	ldr	r3, [pc, #292]	; (800f124 <__ieee754_pow+0x32c>)
 800effe:	429c      	cmp	r4, r3
 800f000:	ddf3      	ble.n	800efea <__ieee754_pow+0x1f2>
 800f002:	4b45      	ldr	r3, [pc, #276]	; (800f118 <__ieee754_pow+0x320>)
 800f004:	429c      	cmp	r4, r3
 800f006:	dd03      	ble.n	800f010 <__ieee754_pow+0x218>
 800f008:	f1b9 0f00 	cmp.w	r9, #0
 800f00c:	dcf1      	bgt.n	800eff2 <__ieee754_pow+0x1fa>
 800f00e:	e75a      	b.n	800eec6 <__ieee754_pow+0xce>
 800f010:	ed9d 7b00 	vldr	d7, [sp]
 800f014:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f018:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800f0e8 <__ieee754_pow+0x2f0>
 800f01c:	ee37 6b46 	vsub.f64	d6, d7, d6
 800f020:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800f024:	eeb1 3b46 	vneg.f64	d3, d6
 800f028:	eea3 5b07 	vfma.f64	d5, d3, d7
 800f02c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f030:	eea5 7b46 	vfms.f64	d7, d5, d6
 800f034:	ee26 5b06 	vmul.f64	d5, d6, d6
 800f038:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f03c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800f0f0 <__ieee754_pow+0x2f8>
 800f040:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f044:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800f0f8 <__ieee754_pow+0x300>
 800f048:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f04c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800f100 <__ieee754_pow+0x308>
 800f050:	eeb0 4b47 	vmov.f64	d4, d7
 800f054:	eea6 4b05 	vfma.f64	d4, d6, d5
 800f058:	ec53 2b14 	vmov	r2, r3, d4
 800f05c:	2200      	movs	r2, #0
 800f05e:	ec43 2b14 	vmov	d4, r2, r3
 800f062:	eeb0 6b44 	vmov.f64	d6, d4
 800f066:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f06a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f06e:	3d01      	subs	r5, #1
 800f070:	ea55 030a 	orrs.w	r3, r5, sl
 800f074:	f04f 0200 	mov.w	r2, #0
 800f078:	463b      	mov	r3, r7
 800f07a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f07e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800f082:	ec47 6b15 	vmov	d5, r6, r7
 800f086:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800f08a:	ec47 6b13 	vmov	d3, r6, r7
 800f08e:	ec43 2b16 	vmov	d6, r2, r3
 800f092:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f096:	ee35 5b46 	vsub.f64	d5, d5, d6
 800f09a:	4b23      	ldr	r3, [pc, #140]	; (800f128 <__ieee754_pow+0x330>)
 800f09c:	eea5 7b04 	vfma.f64	d7, d5, d4
 800f0a0:	ee24 6b06 	vmul.f64	d6, d4, d6
 800f0a4:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f0a8:	ee15 1a90 	vmov	r1, s11
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	ee15 2a10 	vmov	r2, s10
 800f0b2:	f340 819b 	ble.w	800f3ec <__ieee754_pow+0x5f4>
 800f0b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f0ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	f000 810a 	beq.w	800f2d8 <__ieee754_pow+0x4e0>
 800f0c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800f0e0 <__ieee754_pow+0x2e8>
 800f0c8:	ee28 8b07 	vmul.f64	d8, d8, d7
 800f0cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f0d0:	e6fb      	b.n	800eeca <__ieee754_pow+0xd2>
 800f0d2:	bf00      	nop
 800f0d4:	f3af 8000 	nop.w
	...
 800f0e0:	8800759c 	.word	0x8800759c
 800f0e4:	7e37e43c 	.word	0x7e37e43c
 800f0e8:	55555555 	.word	0x55555555
 800f0ec:	3fd55555 	.word	0x3fd55555
 800f0f0:	652b82fe 	.word	0x652b82fe
 800f0f4:	3ff71547 	.word	0x3ff71547
 800f0f8:	f85ddf44 	.word	0xf85ddf44
 800f0fc:	3e54ae0b 	.word	0x3e54ae0b
 800f100:	60000000 	.word	0x60000000
 800f104:	3ff71547 	.word	0x3ff71547
 800f108:	7ff00000 	.word	0x7ff00000
 800f10c:	08015519 	.word	0x08015519
 800f110:	433fffff 	.word	0x433fffff
 800f114:	3fefffff 	.word	0x3fefffff
 800f118:	3ff00000 	.word	0x3ff00000
 800f11c:	3fe00000 	.word	0x3fe00000
 800f120:	41e00000 	.word	0x41e00000
 800f124:	3feffffe 	.word	0x3feffffe
 800f128:	408fffff 	.word	0x408fffff
 800f12c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f130:	f280 80ce 	bge.w	800f2d0 <__ieee754_pow+0x4d8>
 800f134:	ed9d 6b00 	vldr	d6, [sp]
 800f138:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800f440 <__ieee754_pow+0x648>
 800f13c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f140:	ed8d 7b00 	vstr	d7, [sp]
 800f144:	9c01      	ldr	r4, [sp, #4]
 800f146:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800f14a:	1521      	asrs	r1, r4, #20
 800f14c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f150:	4419      	add	r1, r3
 800f152:	4be3      	ldr	r3, [pc, #908]	; (800f4e0 <__ieee754_pow+0x6e8>)
 800f154:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f158:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800f15c:	429c      	cmp	r4, r3
 800f15e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800f162:	dd06      	ble.n	800f172 <__ieee754_pow+0x37a>
 800f164:	4bdf      	ldr	r3, [pc, #892]	; (800f4e4 <__ieee754_pow+0x6ec>)
 800f166:	429c      	cmp	r4, r3
 800f168:	f340 80b4 	ble.w	800f2d4 <__ieee754_pow+0x4dc>
 800f16c:	3101      	adds	r1, #1
 800f16e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800f172:	2400      	movs	r4, #0
 800f174:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f178:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f17c:	4603      	mov	r3, r0
 800f17e:	ec43 2b17 	vmov	d7, r2, r3
 800f182:	4bd9      	ldr	r3, [pc, #868]	; (800f4e8 <__ieee754_pow+0x6f0>)
 800f184:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800f188:	4463      	add	r3, ip
 800f18a:	ed93 5b00 	vldr	d5, [r3]
 800f18e:	1040      	asrs	r0, r0, #1
 800f190:	ee37 2b45 	vsub.f64	d2, d7, d5
 800f194:	ee35 6b07 	vadd.f64	d6, d5, d7
 800f198:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800f19c:	ee22 6b01 	vmul.f64	d6, d2, d1
 800f1a0:	ed8d 6b00 	vstr	d6, [sp]
 800f1a4:	e9dd 8900 	ldrd	r8, r9, [sp]
 800f1a8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800f1ac:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800f1b0:	f04f 0800 	mov.w	r8, #0
 800f1b4:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	ec49 8b14 	vmov	d4, r8, r9
 800f1be:	ec43 2b16 	vmov	d6, r2, r3
 800f1c2:	eeb1 3b44 	vneg.f64	d3, d4
 800f1c6:	eea3 2b06 	vfma.f64	d2, d3, d6
 800f1ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f1ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f1d2:	eea3 2b07 	vfma.f64	d2, d3, d7
 800f1d6:	ed9d 7b00 	vldr	d7, [sp]
 800f1da:	ee22 2b01 	vmul.f64	d2, d2, d1
 800f1de:	ee27 5b07 	vmul.f64	d5, d7, d7
 800f1e2:	ee37 6b04 	vadd.f64	d6, d7, d4
 800f1e6:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800f448 <__ieee754_pow+0x650>
 800f1ea:	ee25 0b05 	vmul.f64	d0, d5, d5
 800f1ee:	ee26 6b02 	vmul.f64	d6, d6, d2
 800f1f2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800f450 <__ieee754_pow+0x658>
 800f1f6:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f1fa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800f458 <__ieee754_pow+0x660>
 800f1fe:	eea7 1b05 	vfma.f64	d1, d7, d5
 800f202:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800f460 <__ieee754_pow+0x668>
 800f206:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f20a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800f468 <__ieee754_pow+0x670>
 800f20e:	eea7 1b05 	vfma.f64	d1, d7, d5
 800f212:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800f470 <__ieee754_pow+0x678>
 800f216:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f21a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800f21e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800f222:	eeb0 5b47 	vmov.f64	d5, d7
 800f226:	eea4 5b04 	vfma.f64	d5, d4, d4
 800f22a:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f22e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f232:	f8cd 8008 	str.w	r8, [sp, #8]
 800f236:	ed9d 5b02 	vldr	d5, [sp, #8]
 800f23a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f23e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f242:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f246:	ed9d 6b00 	vldr	d6, [sp]
 800f24a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f24e:	eea2 7b05 	vfma.f64	d7, d2, d5
 800f252:	eeb0 6b47 	vmov.f64	d6, d7
 800f256:	eea4 6b05 	vfma.f64	d6, d4, d5
 800f25a:	ed8d 6b00 	vstr	d6, [sp]
 800f25e:	f8cd 8000 	str.w	r8, [sp]
 800f262:	ed9d 2b00 	vldr	d2, [sp]
 800f266:	eeb0 6b42 	vmov.f64	d6, d2
 800f26a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800f26e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f272:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800f478 <__ieee754_pow+0x680>
 800f276:	4b9d      	ldr	r3, [pc, #628]	; (800f4ec <__ieee754_pow+0x6f4>)
 800f278:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f27c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800f480 <__ieee754_pow+0x688>
 800f280:	4463      	add	r3, ip
 800f282:	eea2 7b06 	vfma.f64	d7, d2, d6
 800f286:	ed93 6b00 	vldr	d6, [r3]
 800f28a:	4b99      	ldr	r3, [pc, #612]	; (800f4f0 <__ieee754_pow+0x6f8>)
 800f28c:	ee37 6b06 	vadd.f64	d6, d7, d6
 800f290:	449c      	add	ip, r3
 800f292:	ed9c 1b00 	vldr	d1, [ip]
 800f296:	eeb0 4b46 	vmov.f64	d4, d6
 800f29a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800f488 <__ieee754_pow+0x690>
 800f29e:	ee07 1a90 	vmov	s15, r1
 800f2a2:	eea2 4b03 	vfma.f64	d4, d2, d3
 800f2a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f2aa:	ee34 4b01 	vadd.f64	d4, d4, d1
 800f2ae:	ee34 5b07 	vadd.f64	d5, d4, d7
 800f2b2:	ed8d 5b00 	vstr	d5, [sp]
 800f2b6:	f8cd 8000 	str.w	r8, [sp]
 800f2ba:	ed9d 4b00 	vldr	d4, [sp]
 800f2be:	ee34 7b47 	vsub.f64	d7, d4, d7
 800f2c2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800f2c6:	eea2 7b43 	vfms.f64	d7, d2, d3
 800f2ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f2ce:	e6ce      	b.n	800f06e <__ieee754_pow+0x276>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	e73a      	b.n	800f14a <__ieee754_pow+0x352>
 800f2d4:	2401      	movs	r4, #1
 800f2d6:	e74d      	b.n	800f174 <__ieee754_pow+0x37c>
 800f2d8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800f490 <__ieee754_pow+0x698>
 800f2dc:	ee35 5b46 	vsub.f64	d5, d5, d6
 800f2e0:	ee37 4b04 	vadd.f64	d4, d7, d4
 800f2e4:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800f2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ec:	f73f aeea 	bgt.w	800f0c4 <__ieee754_pow+0x2cc>
 800f2f0:	4a80      	ldr	r2, [pc, #512]	; (800f4f4 <__ieee754_pow+0x6fc>)
 800f2f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	f340 808e 	ble.w	800f418 <__ieee754_pow+0x620>
 800f2fc:	151b      	asrs	r3, r3, #20
 800f2fe:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800f302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f306:	4103      	asrs	r3, r0
 800f308:	440b      	add	r3, r1
 800f30a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f30e:	487a      	ldr	r0, [pc, #488]	; (800f4f8 <__ieee754_pow+0x700>)
 800f310:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f314:	4110      	asrs	r0, r2
 800f316:	ea23 0500 	bic.w	r5, r3, r0
 800f31a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800f31e:	2400      	movs	r4, #0
 800f320:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800f324:	f1c2 0214 	rsb	r2, r2, #20
 800f328:	ec45 4b15 	vmov	d5, r4, r5
 800f32c:	4110      	asrs	r0, r2
 800f32e:	2900      	cmp	r1, #0
 800f330:	bfb8      	it	lt
 800f332:	4240      	neglt	r0, r0
 800f334:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f338:	ee36 5b07 	vadd.f64	d5, d6, d7
 800f33c:	ec53 2b15 	vmov	r2, r3, d5
 800f340:	2200      	movs	r2, #0
 800f342:	ec43 2b15 	vmov	d5, r2, r3
 800f346:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800f498 <__ieee754_pow+0x6a0>
 800f34a:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f34e:	ee37 6b46 	vsub.f64	d6, d7, d6
 800f352:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800f4a0 <__ieee754_pow+0x6a8>
 800f356:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f35a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800f35e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800f4a8 <__ieee754_pow+0x6b0>
 800f362:	eeb0 4b47 	vmov.f64	d4, d7
 800f366:	eea5 4b06 	vfma.f64	d4, d5, d6
 800f36a:	eeb0 3b44 	vmov.f64	d3, d4
 800f36e:	eea5 3b46 	vfms.f64	d3, d5, d6
 800f372:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800f4b0 <__ieee754_pow+0x6b8>
 800f376:	ee37 7b43 	vsub.f64	d7, d7, d3
 800f37a:	ee24 6b04 	vmul.f64	d6, d4, d4
 800f37e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800f4b8 <__ieee754_pow+0x6c0>
 800f382:	eea4 7b07 	vfma.f64	d7, d4, d7
 800f386:	eea6 3b05 	vfma.f64	d3, d6, d5
 800f38a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800f4c0 <__ieee754_pow+0x6c8>
 800f38e:	eea3 5b06 	vfma.f64	d5, d3, d6
 800f392:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800f4c8 <__ieee754_pow+0x6d0>
 800f396:	eea5 3b06 	vfma.f64	d3, d5, d6
 800f39a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800f4d0 <__ieee754_pow+0x6d8>
 800f39e:	eea3 5b06 	vfma.f64	d5, d3, d6
 800f3a2:	eeb0 3b44 	vmov.f64	d3, d4
 800f3a6:	eea5 3b46 	vfms.f64	d3, d5, d6
 800f3aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f3ae:	eeb0 6b43 	vmov.f64	d6, d3
 800f3b2:	ee24 3b03 	vmul.f64	d3, d4, d3
 800f3b6:	ee36 5b45 	vsub.f64	d5, d6, d5
 800f3ba:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800f3be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f3c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f3c6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f3ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f3ce:	ed8d 7b00 	vstr	d7, [sp]
 800f3d2:	9901      	ldr	r1, [sp, #4]
 800f3d4:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800f3d8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f3dc:	da1e      	bge.n	800f41c <__ieee754_pow+0x624>
 800f3de:	eeb0 0b47 	vmov.f64	d0, d7
 800f3e2:	f000 fe55 	bl	8010090 <scalbn>
 800f3e6:	ee20 7b08 	vmul.f64	d7, d0, d8
 800f3ea:	e56e      	b.n	800eeca <__ieee754_pow+0xd2>
 800f3ec:	4b43      	ldr	r3, [pc, #268]	; (800f4fc <__ieee754_pow+0x704>)
 800f3ee:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800f3f2:	4298      	cmp	r0, r3
 800f3f4:	f77f af7c 	ble.w	800f2f0 <__ieee754_pow+0x4f8>
 800f3f8:	4b41      	ldr	r3, [pc, #260]	; (800f500 <__ieee754_pow+0x708>)
 800f3fa:	440b      	add	r3, r1
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	d002      	beq.n	800f406 <__ieee754_pow+0x60e>
 800f400:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f4d8 <__ieee754_pow+0x6e0>
 800f404:	e660      	b.n	800f0c8 <__ieee754_pow+0x2d0>
 800f406:	ee35 5b46 	vsub.f64	d5, d5, d6
 800f40a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f412:	f6ff af6d 	blt.w	800f2f0 <__ieee754_pow+0x4f8>
 800f416:	e7f3      	b.n	800f400 <__ieee754_pow+0x608>
 800f418:	2000      	movs	r0, #0
 800f41a:	e78d      	b.n	800f338 <__ieee754_pow+0x540>
 800f41c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f420:	460b      	mov	r3, r1
 800f422:	ec43 2b10 	vmov	d0, r2, r3
 800f426:	e7de      	b.n	800f3e6 <__ieee754_pow+0x5ee>
 800f428:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f42c:	e54d      	b.n	800eeca <__ieee754_pow+0xd2>
 800f42e:	e9cd 6700 	strd	r6, r7, [sp]
 800f432:	e574      	b.n	800ef1e <__ieee754_pow+0x126>
 800f434:	ed8d 8b00 	vstr	d8, [sp]
 800f438:	e571      	b.n	800ef1e <__ieee754_pow+0x126>
 800f43a:	4615      	mov	r5, r2
 800f43c:	e557      	b.n	800eeee <__ieee754_pow+0xf6>
 800f43e:	bf00      	nop
 800f440:	00000000 	.word	0x00000000
 800f444:	43400000 	.word	0x43400000
 800f448:	4a454eef 	.word	0x4a454eef
 800f44c:	3fca7e28 	.word	0x3fca7e28
 800f450:	93c9db65 	.word	0x93c9db65
 800f454:	3fcd864a 	.word	0x3fcd864a
 800f458:	a91d4101 	.word	0xa91d4101
 800f45c:	3fd17460 	.word	0x3fd17460
 800f460:	518f264d 	.word	0x518f264d
 800f464:	3fd55555 	.word	0x3fd55555
 800f468:	db6fabff 	.word	0xdb6fabff
 800f46c:	3fdb6db6 	.word	0x3fdb6db6
 800f470:	33333303 	.word	0x33333303
 800f474:	3fe33333 	.word	0x3fe33333
 800f478:	dc3a03fd 	.word	0xdc3a03fd
 800f47c:	3feec709 	.word	0x3feec709
 800f480:	145b01f5 	.word	0x145b01f5
 800f484:	be3e2fe0 	.word	0xbe3e2fe0
 800f488:	e0000000 	.word	0xe0000000
 800f48c:	3feec709 	.word	0x3feec709
 800f490:	652b82fe 	.word	0x652b82fe
 800f494:	3c971547 	.word	0x3c971547
 800f498:	fefa39ef 	.word	0xfefa39ef
 800f49c:	3fe62e42 	.word	0x3fe62e42
 800f4a0:	0ca86c39 	.word	0x0ca86c39
 800f4a4:	be205c61 	.word	0xbe205c61
 800f4a8:	00000000 	.word	0x00000000
 800f4ac:	3fe62e43 	.word	0x3fe62e43
 800f4b0:	72bea4d0 	.word	0x72bea4d0
 800f4b4:	3e663769 	.word	0x3e663769
 800f4b8:	c5d26bf1 	.word	0xc5d26bf1
 800f4bc:	bebbbd41 	.word	0xbebbbd41
 800f4c0:	af25de2c 	.word	0xaf25de2c
 800f4c4:	3f11566a 	.word	0x3f11566a
 800f4c8:	16bebd93 	.word	0x16bebd93
 800f4cc:	bf66c16c 	.word	0xbf66c16c
 800f4d0:	5555553e 	.word	0x5555553e
 800f4d4:	3fc55555 	.word	0x3fc55555
 800f4d8:	c2f8f359 	.word	0xc2f8f359
 800f4dc:	01a56e1f 	.word	0x01a56e1f
 800f4e0:	0003988e 	.word	0x0003988e
 800f4e4:	000bb679 	.word	0x000bb679
 800f4e8:	08015640 	.word	0x08015640
 800f4ec:	08015660 	.word	0x08015660
 800f4f0:	08015650 	.word	0x08015650
 800f4f4:	3fe00000 	.word	0x3fe00000
 800f4f8:	000fffff 	.word	0x000fffff
 800f4fc:	4090cbff 	.word	0x4090cbff
 800f500:	3f6f3400 	.word	0x3f6f3400
 800f504:	00000000 	.word	0x00000000

0800f508 <__ieee754_rem_pio2>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	eeb0 7b40 	vmov.f64	d7, d0
 800f50e:	ee17 5a90 	vmov	r5, s15
 800f512:	4b95      	ldr	r3, [pc, #596]	; (800f768 <__ieee754_rem_pio2+0x260>)
 800f514:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f518:	429e      	cmp	r6, r3
 800f51a:	b088      	sub	sp, #32
 800f51c:	4604      	mov	r4, r0
 800f51e:	dc07      	bgt.n	800f530 <__ieee754_rem_pio2+0x28>
 800f520:	2200      	movs	r2, #0
 800f522:	2300      	movs	r3, #0
 800f524:	ed84 0b00 	vstr	d0, [r4]
 800f528:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f52c:	2000      	movs	r0, #0
 800f52e:	e01b      	b.n	800f568 <__ieee754_rem_pio2+0x60>
 800f530:	4b8e      	ldr	r3, [pc, #568]	; (800f76c <__ieee754_rem_pio2+0x264>)
 800f532:	429e      	cmp	r6, r3
 800f534:	dc3b      	bgt.n	800f5ae <__ieee754_rem_pio2+0xa6>
 800f536:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800f53a:	2d00      	cmp	r5, #0
 800f53c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800f728 <__ieee754_rem_pio2+0x220>
 800f540:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800f544:	dd19      	ble.n	800f57a <__ieee754_rem_pio2+0x72>
 800f546:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f54a:	429e      	cmp	r6, r3
 800f54c:	d00e      	beq.n	800f56c <__ieee754_rem_pio2+0x64>
 800f54e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800f730 <__ieee754_rem_pio2+0x228>
 800f552:	ee37 5b46 	vsub.f64	d5, d7, d6
 800f556:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f55a:	ed84 5b00 	vstr	d5, [r4]
 800f55e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f562:	ed84 7b02 	vstr	d7, [r4, #8]
 800f566:	2001      	movs	r0, #1
 800f568:	b008      	add	sp, #32
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f738 <__ieee754_rem_pio2+0x230>
 800f570:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f574:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800f740 <__ieee754_rem_pio2+0x238>
 800f578:	e7eb      	b.n	800f552 <__ieee754_rem_pio2+0x4a>
 800f57a:	429e      	cmp	r6, r3
 800f57c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800f580:	d00e      	beq.n	800f5a0 <__ieee754_rem_pio2+0x98>
 800f582:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800f730 <__ieee754_rem_pio2+0x228>
 800f586:	ee37 5b06 	vadd.f64	d5, d7, d6
 800f58a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800f58e:	ed84 5b00 	vstr	d5, [r4]
 800f592:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f596:	f04f 30ff 	mov.w	r0, #4294967295
 800f59a:	ed84 7b02 	vstr	d7, [r4, #8]
 800f59e:	e7e3      	b.n	800f568 <__ieee754_rem_pio2+0x60>
 800f5a0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f738 <__ieee754_rem_pio2+0x230>
 800f5a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f5a8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800f740 <__ieee754_rem_pio2+0x238>
 800f5ac:	e7eb      	b.n	800f586 <__ieee754_rem_pio2+0x7e>
 800f5ae:	4b70      	ldr	r3, [pc, #448]	; (800f770 <__ieee754_rem_pio2+0x268>)
 800f5b0:	429e      	cmp	r6, r3
 800f5b2:	dc6c      	bgt.n	800f68e <__ieee754_rem_pio2+0x186>
 800f5b4:	f000 fc48 	bl	800fe48 <fabs>
 800f5b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f5bc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800f748 <__ieee754_rem_pio2+0x240>
 800f5c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800f5c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f5c8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f5cc:	ee17 0a90 	vmov	r0, s15
 800f5d0:	eeb1 5b44 	vneg.f64	d5, d4
 800f5d4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f728 <__ieee754_rem_pio2+0x220>
 800f5d8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f5dc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800f730 <__ieee754_rem_pio2+0x228>
 800f5e0:	281f      	cmp	r0, #31
 800f5e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f5e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f5ea:	dc08      	bgt.n	800f5fe <__ieee754_rem_pio2+0xf6>
 800f5ec:	1e42      	subs	r2, r0, #1
 800f5ee:	4b61      	ldr	r3, [pc, #388]	; (800f774 <__ieee754_rem_pio2+0x26c>)
 800f5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f4:	42b3      	cmp	r3, r6
 800f5f6:	d002      	beq.n	800f5fe <__ieee754_rem_pio2+0xf6>
 800f5f8:	ed84 6b00 	vstr	d6, [r4]
 800f5fc:	e022      	b.n	800f644 <__ieee754_rem_pio2+0x13c>
 800f5fe:	ee16 3a90 	vmov	r3, s13
 800f602:	1536      	asrs	r6, r6, #20
 800f604:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f608:	1af3      	subs	r3, r6, r3
 800f60a:	2b10      	cmp	r3, #16
 800f60c:	ddf4      	ble.n	800f5f8 <__ieee754_rem_pio2+0xf0>
 800f60e:	eeb0 6b40 	vmov.f64	d6, d0
 800f612:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800f738 <__ieee754_rem_pio2+0x230>
 800f616:	eea5 6b03 	vfma.f64	d6, d5, d3
 800f61a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800f61e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f622:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800f740 <__ieee754_rem_pio2+0x238>
 800f626:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800f62a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800f62e:	ee13 3a90 	vmov	r3, s7
 800f632:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800f636:	1af6      	subs	r6, r6, r3
 800f638:	2e31      	cmp	r6, #49	; 0x31
 800f63a:	dc17      	bgt.n	800f66c <__ieee754_rem_pio2+0x164>
 800f63c:	eeb0 0b46 	vmov.f64	d0, d6
 800f640:	ed84 3b00 	vstr	d3, [r4]
 800f644:	ed94 6b00 	vldr	d6, [r4]
 800f648:	2d00      	cmp	r5, #0
 800f64a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f64e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800f652:	ed84 7b02 	vstr	d7, [r4, #8]
 800f656:	da87      	bge.n	800f568 <__ieee754_rem_pio2+0x60>
 800f658:	eeb1 6b46 	vneg.f64	d6, d6
 800f65c:	ed84 6b00 	vstr	d6, [r4]
 800f660:	eeb1 7b47 	vneg.f64	d7, d7
 800f664:	4240      	negs	r0, r0
 800f666:	ed84 7b02 	vstr	d7, [r4, #8]
 800f66a:	e77d      	b.n	800f568 <__ieee754_rem_pio2+0x60>
 800f66c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800f750 <__ieee754_rem_pio2+0x248>
 800f670:	eeb0 0b46 	vmov.f64	d0, d6
 800f674:	eea5 0b03 	vfma.f64	d0, d5, d3
 800f678:	ee36 7b40 	vsub.f64	d7, d6, d0
 800f67c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800f758 <__ieee754_rem_pio2+0x250>
 800f680:	eea5 7b03 	vfma.f64	d7, d5, d3
 800f684:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800f688:	ee30 6b47 	vsub.f64	d6, d0, d7
 800f68c:	e7b4      	b.n	800f5f8 <__ieee754_rem_pio2+0xf0>
 800f68e:	4b3a      	ldr	r3, [pc, #232]	; (800f778 <__ieee754_rem_pio2+0x270>)
 800f690:	429e      	cmp	r6, r3
 800f692:	dd06      	ble.n	800f6a2 <__ieee754_rem_pio2+0x19a>
 800f694:	ee30 7b40 	vsub.f64	d7, d0, d0
 800f698:	ed80 7b02 	vstr	d7, [r0, #8]
 800f69c:	ed80 7b00 	vstr	d7, [r0]
 800f6a0:	e744      	b.n	800f52c <__ieee754_rem_pio2+0x24>
 800f6a2:	1532      	asrs	r2, r6, #20
 800f6a4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800f6a8:	ee10 0a10 	vmov	r0, s0
 800f6ac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800f6b0:	ec41 0b17 	vmov	d7, r0, r1
 800f6b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f6b8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800f760 <__ieee754_rem_pio2+0x258>
 800f6bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f6c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f6c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f6c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f6cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800f6d0:	a908      	add	r1, sp, #32
 800f6d2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800f6d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f6da:	ed8d 6b04 	vstr	d6, [sp, #16]
 800f6de:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f6e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f6e6:	2303      	movs	r3, #3
 800f6e8:	ed31 7b02 	vldmdb	r1!, {d7}
 800f6ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f4:	f103 30ff 	add.w	r0, r3, #4294967295
 800f6f8:	d013      	beq.n	800f722 <__ieee754_rem_pio2+0x21a>
 800f6fa:	4920      	ldr	r1, [pc, #128]	; (800f77c <__ieee754_rem_pio2+0x274>)
 800f6fc:	9101      	str	r1, [sp, #4]
 800f6fe:	2102      	movs	r1, #2
 800f700:	9100      	str	r1, [sp, #0]
 800f702:	a802      	add	r0, sp, #8
 800f704:	4621      	mov	r1, r4
 800f706:	f000 f8ab 	bl	800f860 <__kernel_rem_pio2>
 800f70a:	2d00      	cmp	r5, #0
 800f70c:	f6bf af2c 	bge.w	800f568 <__ieee754_rem_pio2+0x60>
 800f710:	ed94 7b00 	vldr	d7, [r4]
 800f714:	eeb1 7b47 	vneg.f64	d7, d7
 800f718:	ed84 7b00 	vstr	d7, [r4]
 800f71c:	ed94 7b02 	vldr	d7, [r4, #8]
 800f720:	e79e      	b.n	800f660 <__ieee754_rem_pio2+0x158>
 800f722:	4603      	mov	r3, r0
 800f724:	e7e0      	b.n	800f6e8 <__ieee754_rem_pio2+0x1e0>
 800f726:	bf00      	nop
 800f728:	54400000 	.word	0x54400000
 800f72c:	3ff921fb 	.word	0x3ff921fb
 800f730:	1a626331 	.word	0x1a626331
 800f734:	3dd0b461 	.word	0x3dd0b461
 800f738:	1a600000 	.word	0x1a600000
 800f73c:	3dd0b461 	.word	0x3dd0b461
 800f740:	2e037073 	.word	0x2e037073
 800f744:	3ba3198a 	.word	0x3ba3198a
 800f748:	6dc9c883 	.word	0x6dc9c883
 800f74c:	3fe45f30 	.word	0x3fe45f30
 800f750:	2e000000 	.word	0x2e000000
 800f754:	3ba3198a 	.word	0x3ba3198a
 800f758:	252049c1 	.word	0x252049c1
 800f75c:	397b839a 	.word	0x397b839a
 800f760:	00000000 	.word	0x00000000
 800f764:	41700000 	.word	0x41700000
 800f768:	3fe921fb 	.word	0x3fe921fb
 800f76c:	4002d97b 	.word	0x4002d97b
 800f770:	413921fb 	.word	0x413921fb
 800f774:	08015670 	.word	0x08015670
 800f778:	7fefffff 	.word	0x7fefffff
 800f77c:	080156f0 	.word	0x080156f0

0800f780 <__ieee754_sqrt>:
 800f780:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800f784:	4770      	bx	lr
	...

0800f788 <__kernel_cos>:
 800f788:	ee10 1a90 	vmov	r1, s1
 800f78c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800f790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f794:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800f798:	da05      	bge.n	800f7a6 <__kernel_cos+0x1e>
 800f79a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800f79e:	ee16 3a90 	vmov	r3, s13
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d03d      	beq.n	800f822 <__kernel_cos+0x9a>
 800f7a6:	ee20 4b00 	vmul.f64	d4, d0, d0
 800f7aa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f7ae:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800f828 <__kernel_cos+0xa0>
 800f7b2:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800f7b6:	ee24 6b06 	vmul.f64	d6, d4, d6
 800f7ba:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f830 <__kernel_cos+0xa8>
 800f7be:	eea4 5b03 	vfma.f64	d5, d4, d3
 800f7c2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f838 <__kernel_cos+0xb0>
 800f7c6:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f7ca:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800f840 <__kernel_cos+0xb8>
 800f7ce:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f7d2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800f848 <__kernel_cos+0xc0>
 800f7d6:	4b20      	ldr	r3, [pc, #128]	; (800f858 <__kernel_cos+0xd0>)
 800f7d8:	eea5 3b04 	vfma.f64	d3, d5, d4
 800f7dc:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800f850 <__kernel_cos+0xc8>
 800f7e0:	4299      	cmp	r1, r3
 800f7e2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f7e6:	ee25 5b04 	vmul.f64	d5, d5, d4
 800f7ea:	eea4 1b05 	vfma.f64	d1, d4, d5
 800f7ee:	dc04      	bgt.n	800f7fa <__kernel_cos+0x72>
 800f7f0:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f7f4:	ee37 0b46 	vsub.f64	d0, d7, d6
 800f7f8:	4770      	bx	lr
 800f7fa:	4b18      	ldr	r3, [pc, #96]	; (800f85c <__kernel_cos+0xd4>)
 800f7fc:	4299      	cmp	r1, r3
 800f7fe:	dc0d      	bgt.n	800f81c <__kernel_cos+0x94>
 800f800:	2200      	movs	r2, #0
 800f802:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800f806:	ec43 2b15 	vmov	d5, r2, r3
 800f80a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800f80e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f812:	ee36 6b41 	vsub.f64	d6, d6, d1
 800f816:	ee30 0b46 	vsub.f64	d0, d0, d6
 800f81a:	4770      	bx	lr
 800f81c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800f820:	e7f3      	b.n	800f80a <__kernel_cos+0x82>
 800f822:	eeb0 0b47 	vmov.f64	d0, d7
 800f826:	4770      	bx	lr
 800f828:	be8838d4 	.word	0xbe8838d4
 800f82c:	bda8fae9 	.word	0xbda8fae9
 800f830:	bdb4b1c4 	.word	0xbdb4b1c4
 800f834:	3e21ee9e 	.word	0x3e21ee9e
 800f838:	809c52ad 	.word	0x809c52ad
 800f83c:	be927e4f 	.word	0xbe927e4f
 800f840:	19cb1590 	.word	0x19cb1590
 800f844:	3efa01a0 	.word	0x3efa01a0
 800f848:	16c15177 	.word	0x16c15177
 800f84c:	bf56c16c 	.word	0xbf56c16c
 800f850:	5555554c 	.word	0x5555554c
 800f854:	3fa55555 	.word	0x3fa55555
 800f858:	3fd33332 	.word	0x3fd33332
 800f85c:	3fe90000 	.word	0x3fe90000

0800f860 <__kernel_rem_pio2>:
 800f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	ed2d 8b06 	vpush	{d8-d10}
 800f868:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800f86c:	469b      	mov	fp, r3
 800f86e:	460e      	mov	r6, r1
 800f870:	4bc7      	ldr	r3, [pc, #796]	; (800fb90 <__kernel_rem_pio2+0x330>)
 800f872:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800f874:	9002      	str	r0, [sp, #8]
 800f876:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f87a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800f87c:	1ed1      	subs	r1, r2, #3
 800f87e:	2318      	movs	r3, #24
 800f880:	f06f 0417 	mvn.w	r4, #23
 800f884:	fb91 f1f3 	sdiv	r1, r1, r3
 800f888:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f88c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f890:	fb01 4404 	mla	r4, r1, r4, r4
 800f894:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800fb78 <__kernel_rem_pio2+0x318>
 800f898:	4414      	add	r4, r2
 800f89a:	eba1 050a 	sub.w	r5, r1, sl
 800f89e:	aa1a      	add	r2, sp, #104	; 0x68
 800f8a0:	eb09 070a 	add.w	r7, r9, sl
 800f8a4:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f8a8:	4696      	mov	lr, r2
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	42bb      	cmp	r3, r7
 800f8ae:	dd0f      	ble.n	800f8d0 <__kernel_rem_pio2+0x70>
 800f8b0:	af6a      	add	r7, sp, #424	; 0x1a8
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	454a      	cmp	r2, r9
 800f8b6:	dc28      	bgt.n	800f90a <__kernel_rem_pio2+0xaa>
 800f8b8:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f8bc:	eb0b 0302 	add.w	r3, fp, r2
 800f8c0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800f8c4:	9d02      	ldr	r5, [sp, #8]
 800f8c6:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800fb78 <__kernel_rem_pio2+0x318>
 800f8ca:	f04f 0c00 	mov.w	ip, #0
 800f8ce:	e016      	b.n	800f8fe <__kernel_rem_pio2+0x9e>
 800f8d0:	42dd      	cmn	r5, r3
 800f8d2:	d409      	bmi.n	800f8e8 <__kernel_rem_pio2+0x88>
 800f8d4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800f8d8:	ee07 2a90 	vmov	s15, r2
 800f8dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f8e0:	ecae 7b02 	vstmia	lr!, {d7}
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	e7e1      	b.n	800f8ac <__kernel_rem_pio2+0x4c>
 800f8e8:	eeb0 7b46 	vmov.f64	d7, d6
 800f8ec:	e7f8      	b.n	800f8e0 <__kernel_rem_pio2+0x80>
 800f8ee:	ecb5 5b02 	vldmia	r5!, {d5}
 800f8f2:	ed33 6b02 	vldmdb	r3!, {d6}
 800f8f6:	f10c 0c01 	add.w	ip, ip, #1
 800f8fa:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f8fe:	45d4      	cmp	ip, sl
 800f900:	ddf5      	ble.n	800f8ee <__kernel_rem_pio2+0x8e>
 800f902:	eca7 7b02 	vstmia	r7!, {d7}
 800f906:	3201      	adds	r2, #1
 800f908:	e7d4      	b.n	800f8b4 <__kernel_rem_pio2+0x54>
 800f90a:	ab06      	add	r3, sp, #24
 800f90c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f910:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800fb80 <__kernel_rem_pio2+0x320>
 800f914:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800fb88 <__kernel_rem_pio2+0x328>
 800f918:	9304      	str	r3, [sp, #16]
 800f91a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f91e:	9303      	str	r3, [sp, #12]
 800f920:	464d      	mov	r5, r9
 800f922:	ab92      	add	r3, sp, #584	; 0x248
 800f924:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800f928:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f92c:	3f01      	subs	r7, #1
 800f92e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800f932:	00ff      	lsls	r7, r7, #3
 800f934:	ab92      	add	r3, sp, #584	; 0x248
 800f936:	19da      	adds	r2, r3, r7
 800f938:	3a98      	subs	r2, #152	; 0x98
 800f93a:	2300      	movs	r3, #0
 800f93c:	1ae9      	subs	r1, r5, r3
 800f93e:	2900      	cmp	r1, #0
 800f940:	dc4e      	bgt.n	800f9e0 <__kernel_rem_pio2+0x180>
 800f942:	4620      	mov	r0, r4
 800f944:	f000 fba4 	bl	8010090 <scalbn>
 800f948:	eeb0 8b40 	vmov.f64	d8, d0
 800f94c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800f950:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f954:	f000 fa8c 	bl	800fe70 <floor>
 800f958:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800f95c:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f960:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f964:	2c00      	cmp	r4, #0
 800f966:	edcd 7a01 	vstr	s15, [sp, #4]
 800f96a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f96e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f972:	dd4a      	ble.n	800fa0a <__kernel_rem_pio2+0x1aa>
 800f974:	1e69      	subs	r1, r5, #1
 800f976:	ab06      	add	r3, sp, #24
 800f978:	f1c4 0018 	rsb	r0, r4, #24
 800f97c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f980:	9a01      	ldr	r2, [sp, #4]
 800f982:	fa4c f300 	asr.w	r3, ip, r0
 800f986:	441a      	add	r2, r3
 800f988:	4083      	lsls	r3, r0
 800f98a:	9201      	str	r2, [sp, #4]
 800f98c:	ebac 0203 	sub.w	r2, ip, r3
 800f990:	ab06      	add	r3, sp, #24
 800f992:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f996:	f1c4 0317 	rsb	r3, r4, #23
 800f99a:	fa42 f803 	asr.w	r8, r2, r3
 800f99e:	f1b8 0f00 	cmp.w	r8, #0
 800f9a2:	dd43      	ble.n	800fa2c <__kernel_rem_pio2+0x1cc>
 800f9a4:	9b01      	ldr	r3, [sp, #4]
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	9301      	str	r3, [sp, #4]
 800f9ac:	4601      	mov	r1, r0
 800f9ae:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800f9b2:	4285      	cmp	r5, r0
 800f9b4:	dc6e      	bgt.n	800fa94 <__kernel_rem_pio2+0x234>
 800f9b6:	2c00      	cmp	r4, #0
 800f9b8:	dd04      	ble.n	800f9c4 <__kernel_rem_pio2+0x164>
 800f9ba:	2c01      	cmp	r4, #1
 800f9bc:	d07f      	beq.n	800fabe <__kernel_rem_pio2+0x25e>
 800f9be:	2c02      	cmp	r4, #2
 800f9c0:	f000 8087 	beq.w	800fad2 <__kernel_rem_pio2+0x272>
 800f9c4:	f1b8 0f02 	cmp.w	r8, #2
 800f9c8:	d130      	bne.n	800fa2c <__kernel_rem_pio2+0x1cc>
 800f9ca:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f9ce:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f9d2:	b359      	cbz	r1, 800fa2c <__kernel_rem_pio2+0x1cc>
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f000 fb5b 	bl	8010090 <scalbn>
 800f9da:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f9de:	e025      	b.n	800fa2c <__kernel_rem_pio2+0x1cc>
 800f9e0:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f9e4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f9e8:	a806      	add	r0, sp, #24
 800f9ea:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f9ee:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f9f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f9f6:	ee10 1a10 	vmov	r1, s0
 800f9fa:	ed32 0b02 	vldmdb	r2!, {d0}
 800f9fe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800fa02:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fa06:	3301      	adds	r3, #1
 800fa08:	e798      	b.n	800f93c <__kernel_rem_pio2+0xdc>
 800fa0a:	d106      	bne.n	800fa1a <__kernel_rem_pio2+0x1ba>
 800fa0c:	1e6b      	subs	r3, r5, #1
 800fa0e:	aa06      	add	r2, sp, #24
 800fa10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa14:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800fa18:	e7c1      	b.n	800f99e <__kernel_rem_pio2+0x13e>
 800fa1a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fa1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa26:	da32      	bge.n	800fa8e <__kernel_rem_pio2+0x22e>
 800fa28:	f04f 0800 	mov.w	r8, #0
 800fa2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa34:	f040 80b0 	bne.w	800fb98 <__kernel_rem_pio2+0x338>
 800fa38:	1e6b      	subs	r3, r5, #1
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	4548      	cmp	r0, r9
 800fa40:	da4e      	bge.n	800fae0 <__kernel_rem_pio2+0x280>
 800fa42:	2a00      	cmp	r2, #0
 800fa44:	f000 8088 	beq.w	800fb58 <__kernel_rem_pio2+0x2f8>
 800fa48:	aa06      	add	r2, sp, #24
 800fa4a:	3c18      	subs	r4, #24
 800fa4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fa50:	2900      	cmp	r1, #0
 800fa52:	f000 808e 	beq.w	800fb72 <__kernel_rem_pio2+0x312>
 800fa56:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	9302      	str	r3, [sp, #8]
 800fa5e:	f000 fb17 	bl	8010090 <scalbn>
 800fa62:	9b02      	ldr	r3, [sp, #8]
 800fa64:	aa6a      	add	r2, sp, #424	; 0x1a8
 800fa66:	00d9      	lsls	r1, r3, #3
 800fa68:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800fb80 <__kernel_rem_pio2+0x320>
 800fa6c:	1850      	adds	r0, r2, r1
 800fa6e:	f100 0508 	add.w	r5, r0, #8
 800fa72:	461c      	mov	r4, r3
 800fa74:	2c00      	cmp	r4, #0
 800fa76:	f280 80bd 	bge.w	800fbf4 <__kernel_rem_pio2+0x394>
 800fa7a:	2500      	movs	r5, #0
 800fa7c:	1b5c      	subs	r4, r3, r5
 800fa7e:	2c00      	cmp	r4, #0
 800fa80:	f2c0 80dd 	blt.w	800fc3e <__kernel_rem_pio2+0x3de>
 800fa84:	4f43      	ldr	r7, [pc, #268]	; (800fb94 <__kernel_rem_pio2+0x334>)
 800fa86:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800fb78 <__kernel_rem_pio2+0x318>
 800fa8a:	2400      	movs	r4, #0
 800fa8c:	e0cb      	b.n	800fc26 <__kernel_rem_pio2+0x3c6>
 800fa8e:	f04f 0802 	mov.w	r8, #2
 800fa92:	e787      	b.n	800f9a4 <__kernel_rem_pio2+0x144>
 800fa94:	ab06      	add	r3, sp, #24
 800fa96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fa9a:	b949      	cbnz	r1, 800fab0 <__kernel_rem_pio2+0x250>
 800fa9c:	b12b      	cbz	r3, 800faaa <__kernel_rem_pio2+0x24a>
 800fa9e:	aa06      	add	r2, sp, #24
 800faa0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800faa4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800faa8:	2301      	movs	r3, #1
 800faaa:	3001      	adds	r0, #1
 800faac:	4619      	mov	r1, r3
 800faae:	e780      	b.n	800f9b2 <__kernel_rem_pio2+0x152>
 800fab0:	aa06      	add	r2, sp, #24
 800fab2:	ebac 0303 	sub.w	r3, ip, r3
 800fab6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800faba:	460b      	mov	r3, r1
 800fabc:	e7f5      	b.n	800faaa <__kernel_rem_pio2+0x24a>
 800fabe:	1e68      	subs	r0, r5, #1
 800fac0:	ab06      	add	r3, sp, #24
 800fac2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800faca:	aa06      	add	r2, sp, #24
 800facc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800fad0:	e778      	b.n	800f9c4 <__kernel_rem_pio2+0x164>
 800fad2:	1e68      	subs	r0, r5, #1
 800fad4:	ab06      	add	r3, sp, #24
 800fad6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fada:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fade:	e7f4      	b.n	800faca <__kernel_rem_pio2+0x26a>
 800fae0:	a906      	add	r1, sp, #24
 800fae2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fae6:	3801      	subs	r0, #1
 800fae8:	430a      	orrs	r2, r1
 800faea:	e7a8      	b.n	800fa3e <__kernel_rem_pio2+0x1de>
 800faec:	f10c 0c01 	add.w	ip, ip, #1
 800faf0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800faf4:	2a00      	cmp	r2, #0
 800faf6:	d0f9      	beq.n	800faec <__kernel_rem_pio2+0x28c>
 800faf8:	eb0b 0305 	add.w	r3, fp, r5
 800fafc:	aa1a      	add	r2, sp, #104	; 0x68
 800fafe:	00db      	lsls	r3, r3, #3
 800fb00:	1898      	adds	r0, r3, r2
 800fb02:	3008      	adds	r0, #8
 800fb04:	1c69      	adds	r1, r5, #1
 800fb06:	3708      	adds	r7, #8
 800fb08:	2200      	movs	r2, #0
 800fb0a:	4465      	add	r5, ip
 800fb0c:	9005      	str	r0, [sp, #20]
 800fb0e:	428d      	cmp	r5, r1
 800fb10:	f6ff af07 	blt.w	800f922 <__kernel_rem_pio2+0xc2>
 800fb14:	a81a      	add	r0, sp, #104	; 0x68
 800fb16:	eb02 0c03 	add.w	ip, r2, r3
 800fb1a:	4484      	add	ip, r0
 800fb1c:	9803      	ldr	r0, [sp, #12]
 800fb1e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800fb22:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800fb26:	9001      	str	r0, [sp, #4]
 800fb28:	ee07 0a90 	vmov	s15, r0
 800fb2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fb30:	9805      	ldr	r0, [sp, #20]
 800fb32:	ed8c 7b00 	vstr	d7, [ip]
 800fb36:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fb78 <__kernel_rem_pio2+0x318>
 800fb3a:	eb00 0802 	add.w	r8, r0, r2
 800fb3e:	f04f 0c00 	mov.w	ip, #0
 800fb42:	45d4      	cmp	ip, sl
 800fb44:	dd0c      	ble.n	800fb60 <__kernel_rem_pio2+0x300>
 800fb46:	eb02 0c07 	add.w	ip, r2, r7
 800fb4a:	a86a      	add	r0, sp, #424	; 0x1a8
 800fb4c:	4484      	add	ip, r0
 800fb4e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800fb52:	3101      	adds	r1, #1
 800fb54:	3208      	adds	r2, #8
 800fb56:	e7da      	b.n	800fb0e <__kernel_rem_pio2+0x2ae>
 800fb58:	9b04      	ldr	r3, [sp, #16]
 800fb5a:	f04f 0c01 	mov.w	ip, #1
 800fb5e:	e7c7      	b.n	800faf0 <__kernel_rem_pio2+0x290>
 800fb60:	ecbe 5b02 	vldmia	lr!, {d5}
 800fb64:	ed38 6b02 	vldmdb	r8!, {d6}
 800fb68:	f10c 0c01 	add.w	ip, ip, #1
 800fb6c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fb70:	e7e7      	b.n	800fb42 <__kernel_rem_pio2+0x2e2>
 800fb72:	3b01      	subs	r3, #1
 800fb74:	e768      	b.n	800fa48 <__kernel_rem_pio2+0x1e8>
 800fb76:	bf00      	nop
	...
 800fb84:	3e700000 	.word	0x3e700000
 800fb88:	00000000 	.word	0x00000000
 800fb8c:	41700000 	.word	0x41700000
 800fb90:	08015838 	.word	0x08015838
 800fb94:	080157f8 	.word	0x080157f8
 800fb98:	4260      	negs	r0, r4
 800fb9a:	eeb0 0b48 	vmov.f64	d0, d8
 800fb9e:	f000 fa77 	bl	8010090 <scalbn>
 800fba2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800fd80 <__kernel_rem_pio2+0x520>
 800fba6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbae:	db18      	blt.n	800fbe2 <__kernel_rem_pio2+0x382>
 800fbb0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800fd88 <__kernel_rem_pio2+0x528>
 800fbb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800fbb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800fbbc:	aa06      	add	r2, sp, #24
 800fbbe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800fbc2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800fbc6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fbca:	a906      	add	r1, sp, #24
 800fbcc:	ee10 3a10 	vmov	r3, s0
 800fbd0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fbd4:	1c6b      	adds	r3, r5, #1
 800fbd6:	ee17 2a10 	vmov	r2, s14
 800fbda:	3418      	adds	r4, #24
 800fbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fbe0:	e739      	b.n	800fa56 <__kernel_rem_pio2+0x1f6>
 800fbe2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800fbe6:	aa06      	add	r2, sp, #24
 800fbe8:	ee10 3a10 	vmov	r3, s0
 800fbec:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800fbf0:	462b      	mov	r3, r5
 800fbf2:	e730      	b.n	800fa56 <__kernel_rem_pio2+0x1f6>
 800fbf4:	aa06      	add	r2, sp, #24
 800fbf6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800fbfa:	9202      	str	r2, [sp, #8]
 800fbfc:	ee07 2a90 	vmov	s15, r2
 800fc00:	3c01      	subs	r4, #1
 800fc02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fc06:	ee27 7b00 	vmul.f64	d7, d7, d0
 800fc0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fc0e:	ed25 7b02 	vstmdb	r5!, {d7}
 800fc12:	e72f      	b.n	800fa74 <__kernel_rem_pio2+0x214>
 800fc14:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800fc18:	ecb7 5b02 	vldmia	r7!, {d5}
 800fc1c:	ed9c 6b00 	vldr	d6, [ip]
 800fc20:	3401      	adds	r4, #1
 800fc22:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fc26:	454c      	cmp	r4, r9
 800fc28:	dc01      	bgt.n	800fc2e <__kernel_rem_pio2+0x3ce>
 800fc2a:	42a5      	cmp	r5, r4
 800fc2c:	daf2      	bge.n	800fc14 <__kernel_rem_pio2+0x3b4>
 800fc2e:	aa42      	add	r2, sp, #264	; 0x108
 800fc30:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800fc34:	ed84 7b00 	vstr	d7, [r4]
 800fc38:	3501      	adds	r5, #1
 800fc3a:	3808      	subs	r0, #8
 800fc3c:	e71e      	b.n	800fa7c <__kernel_rem_pio2+0x21c>
 800fc3e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800fc40:	2a03      	cmp	r2, #3
 800fc42:	d84e      	bhi.n	800fce2 <__kernel_rem_pio2+0x482>
 800fc44:	e8df f002 	tbb	[pc, r2]
 800fc48:	021f1f3e 	.word	0x021f1f3e
 800fc4c:	3108      	adds	r1, #8
 800fc4e:	aa42      	add	r2, sp, #264	; 0x108
 800fc50:	4411      	add	r1, r2
 800fc52:	4608      	mov	r0, r1
 800fc54:	461c      	mov	r4, r3
 800fc56:	2c00      	cmp	r4, #0
 800fc58:	dc61      	bgt.n	800fd1e <__kernel_rem_pio2+0x4be>
 800fc5a:	4608      	mov	r0, r1
 800fc5c:	461c      	mov	r4, r3
 800fc5e:	2c01      	cmp	r4, #1
 800fc60:	dc6d      	bgt.n	800fd3e <__kernel_rem_pio2+0x4de>
 800fc62:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fd90 <__kernel_rem_pio2+0x530>
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	dc79      	bgt.n	800fd5e <__kernel_rem_pio2+0x4fe>
 800fc6a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800fc6e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800fc72:	f1b8 0f00 	cmp.w	r8, #0
 800fc76:	d178      	bne.n	800fd6a <__kernel_rem_pio2+0x50a>
 800fc78:	ed86 5b00 	vstr	d5, [r6]
 800fc7c:	ed86 6b02 	vstr	d6, [r6, #8]
 800fc80:	ed86 7b04 	vstr	d7, [r6, #16]
 800fc84:	e02d      	b.n	800fce2 <__kernel_rem_pio2+0x482>
 800fc86:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800fd90 <__kernel_rem_pio2+0x530>
 800fc8a:	3108      	adds	r1, #8
 800fc8c:	aa42      	add	r2, sp, #264	; 0x108
 800fc8e:	4411      	add	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	2800      	cmp	r0, #0
 800fc94:	da34      	bge.n	800fd00 <__kernel_rem_pio2+0x4a0>
 800fc96:	f1b8 0f00 	cmp.w	r8, #0
 800fc9a:	d037      	beq.n	800fd0c <__kernel_rem_pio2+0x4ac>
 800fc9c:	eeb1 7b46 	vneg.f64	d7, d6
 800fca0:	ed86 7b00 	vstr	d7, [r6]
 800fca4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800fca8:	a844      	add	r0, sp, #272	; 0x110
 800fcaa:	2101      	movs	r1, #1
 800fcac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	da2e      	bge.n	800fd12 <__kernel_rem_pio2+0x4b2>
 800fcb4:	f1b8 0f00 	cmp.w	r8, #0
 800fcb8:	d001      	beq.n	800fcbe <__kernel_rem_pio2+0x45e>
 800fcba:	eeb1 7b47 	vneg.f64	d7, d7
 800fcbe:	ed86 7b02 	vstr	d7, [r6, #8]
 800fcc2:	e00e      	b.n	800fce2 <__kernel_rem_pio2+0x482>
 800fcc4:	aa92      	add	r2, sp, #584	; 0x248
 800fcc6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800fd90 <__kernel_rem_pio2+0x530>
 800fcca:	4411      	add	r1, r2
 800fccc:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	da0f      	bge.n	800fcf4 <__kernel_rem_pio2+0x494>
 800fcd4:	f1b8 0f00 	cmp.w	r8, #0
 800fcd8:	d001      	beq.n	800fcde <__kernel_rem_pio2+0x47e>
 800fcda:	eeb1 7b47 	vneg.f64	d7, d7
 800fcde:	ed86 7b00 	vstr	d7, [r6]
 800fce2:	9b01      	ldr	r3, [sp, #4]
 800fce4:	f003 0007 	and.w	r0, r3, #7
 800fce8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800fcec:	ecbd 8b06 	vpop	{d8-d10}
 800fcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf4:	ed31 6b02 	vldmdb	r1!, {d6}
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fcfe:	e7e7      	b.n	800fcd0 <__kernel_rem_pio2+0x470>
 800fd00:	ed31 7b02 	vldmdb	r1!, {d7}
 800fd04:	3801      	subs	r0, #1
 800fd06:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fd0a:	e7c2      	b.n	800fc92 <__kernel_rem_pio2+0x432>
 800fd0c:	eeb0 7b46 	vmov.f64	d7, d6
 800fd10:	e7c6      	b.n	800fca0 <__kernel_rem_pio2+0x440>
 800fd12:	ecb0 6b02 	vldmia	r0!, {d6}
 800fd16:	3101      	adds	r1, #1
 800fd18:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd1c:	e7c8      	b.n	800fcb0 <__kernel_rem_pio2+0x450>
 800fd1e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fd22:	ed30 5b02 	vldmdb	r0!, {d5}
 800fd26:	3c01      	subs	r4, #1
 800fd28:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fd2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd30:	ed00 6b02 	vstr	d6, [r0, #-8]
 800fd34:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fd38:	ed80 7b00 	vstr	d7, [r0]
 800fd3c:	e78b      	b.n	800fc56 <__kernel_rem_pio2+0x3f6>
 800fd3e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800fd42:	ed30 5b02 	vldmdb	r0!, {d5}
 800fd46:	3c01      	subs	r4, #1
 800fd48:	ee37 6b05 	vadd.f64	d6, d7, d5
 800fd4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd50:	ed00 6b02 	vstr	d6, [r0, #-8]
 800fd54:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fd58:	ed80 7b00 	vstr	d7, [r0]
 800fd5c:	e77f      	b.n	800fc5e <__kernel_rem_pio2+0x3fe>
 800fd5e:	ed31 6b02 	vldmdb	r1!, {d6}
 800fd62:	3b01      	subs	r3, #1
 800fd64:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fd68:	e77d      	b.n	800fc66 <__kernel_rem_pio2+0x406>
 800fd6a:	eeb1 5b45 	vneg.f64	d5, d5
 800fd6e:	eeb1 6b46 	vneg.f64	d6, d6
 800fd72:	ed86 5b00 	vstr	d5, [r6]
 800fd76:	eeb1 7b47 	vneg.f64	d7, d7
 800fd7a:	ed86 6b02 	vstr	d6, [r6, #8]
 800fd7e:	e77f      	b.n	800fc80 <__kernel_rem_pio2+0x420>
 800fd80:	00000000 	.word	0x00000000
 800fd84:	41700000 	.word	0x41700000
 800fd88:	00000000 	.word	0x00000000
 800fd8c:	3e700000 	.word	0x3e700000
	...

0800fd98 <__kernel_sin>:
 800fd98:	ee10 3a90 	vmov	r3, s1
 800fd9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fda0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fda4:	da04      	bge.n	800fdb0 <__kernel_sin+0x18>
 800fda6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800fdaa:	ee17 3a90 	vmov	r3, s15
 800fdae:	b35b      	cbz	r3, 800fe08 <__kernel_sin+0x70>
 800fdb0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800fdb4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800fdb8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800fe10 <__kernel_sin+0x78>
 800fdbc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fe18 <__kernel_sin+0x80>
 800fdc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fdc4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fe20 <__kernel_sin+0x88>
 800fdc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fdcc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fe28 <__kernel_sin+0x90>
 800fdd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800fdd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800fe30 <__kernel_sin+0x98>
 800fdd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800fddc:	b930      	cbnz	r0, 800fdec <__kernel_sin+0x54>
 800fdde:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800fe38 <__kernel_sin+0xa0>
 800fde2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800fde6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800fdea:	4770      	bx	lr
 800fdec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800fdf0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fdf4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800fdf8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800fdfc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800fe40 <__kernel_sin+0xa8>
 800fe00:	eea5 1b07 	vfma.f64	d1, d5, d7
 800fe04:	ee30 0b41 	vsub.f64	d0, d0, d1
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	f3af 8000 	nop.w
 800fe10:	5acfd57c 	.word	0x5acfd57c
 800fe14:	3de5d93a 	.word	0x3de5d93a
 800fe18:	8a2b9ceb 	.word	0x8a2b9ceb
 800fe1c:	be5ae5e6 	.word	0xbe5ae5e6
 800fe20:	57b1fe7d 	.word	0x57b1fe7d
 800fe24:	3ec71de3 	.word	0x3ec71de3
 800fe28:	19c161d5 	.word	0x19c161d5
 800fe2c:	bf2a01a0 	.word	0xbf2a01a0
 800fe30:	1110f8a6 	.word	0x1110f8a6
 800fe34:	3f811111 	.word	0x3f811111
 800fe38:	55555549 	.word	0x55555549
 800fe3c:	bfc55555 	.word	0xbfc55555
 800fe40:	55555549 	.word	0x55555549
 800fe44:	3fc55555 	.word	0x3fc55555

0800fe48 <fabs>:
 800fe48:	ec51 0b10 	vmov	r0, r1, d0
 800fe4c:	ee10 2a10 	vmov	r2, s0
 800fe50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe54:	ec43 2b10 	vmov	d0, r2, r3
 800fe58:	4770      	bx	lr

0800fe5a <finite>:
 800fe5a:	ee10 3a90 	vmov	r3, s1
 800fe5e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800fe62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fe66:	0fc0      	lsrs	r0, r0, #31
 800fe68:	4770      	bx	lr
 800fe6a:	0000      	movs	r0, r0
 800fe6c:	0000      	movs	r0, r0
	...

0800fe70 <floor>:
 800fe70:	ee10 1a90 	vmov	r1, s1
 800fe74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fe78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fe7c:	2b13      	cmp	r3, #19
 800fe7e:	b530      	push	{r4, r5, lr}
 800fe80:	ee10 0a10 	vmov	r0, s0
 800fe84:	ee10 5a10 	vmov	r5, s0
 800fe88:	dc33      	bgt.n	800fef2 <floor+0x82>
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	da17      	bge.n	800febe <floor+0x4e>
 800fe8e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ff50 <floor+0xe0>
 800fe92:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fe96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fe9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9e:	dd09      	ble.n	800feb4 <floor+0x44>
 800fea0:	2900      	cmp	r1, #0
 800fea2:	da50      	bge.n	800ff46 <floor+0xd6>
 800fea4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fea8:	4a2b      	ldr	r2, [pc, #172]	; (800ff58 <floor+0xe8>)
 800feaa:	4303      	orrs	r3, r0
 800feac:	2000      	movs	r0, #0
 800feae:	4283      	cmp	r3, r0
 800feb0:	bf18      	it	ne
 800feb2:	4611      	movne	r1, r2
 800feb4:	460b      	mov	r3, r1
 800feb6:	4602      	mov	r2, r0
 800feb8:	ec43 2b10 	vmov	d0, r2, r3
 800febc:	e020      	b.n	800ff00 <floor+0x90>
 800febe:	4a27      	ldr	r2, [pc, #156]	; (800ff5c <floor+0xec>)
 800fec0:	411a      	asrs	r2, r3
 800fec2:	ea01 0402 	and.w	r4, r1, r2
 800fec6:	4304      	orrs	r4, r0
 800fec8:	d01a      	beq.n	800ff00 <floor+0x90>
 800feca:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ff50 <floor+0xe0>
 800fece:	ee30 0b07 	vadd.f64	d0, d0, d7
 800fed2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feda:	ddeb      	ble.n	800feb4 <floor+0x44>
 800fedc:	2900      	cmp	r1, #0
 800fede:	bfbe      	ittt	lt
 800fee0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800fee4:	fa40 f303 	asrlt.w	r3, r0, r3
 800fee8:	18c9      	addlt	r1, r1, r3
 800feea:	ea21 0102 	bic.w	r1, r1, r2
 800feee:	2000      	movs	r0, #0
 800fef0:	e7e0      	b.n	800feb4 <floor+0x44>
 800fef2:	2b33      	cmp	r3, #51	; 0x33
 800fef4:	dd05      	ble.n	800ff02 <floor+0x92>
 800fef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fefa:	d101      	bne.n	800ff00 <floor+0x90>
 800fefc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ff00:	bd30      	pop	{r4, r5, pc}
 800ff02:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ff06:	f04f 32ff 	mov.w	r2, #4294967295
 800ff0a:	40e2      	lsrs	r2, r4
 800ff0c:	4202      	tst	r2, r0
 800ff0e:	d0f7      	beq.n	800ff00 <floor+0x90>
 800ff10:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ff50 <floor+0xe0>
 800ff14:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ff18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ff1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff20:	ddc8      	ble.n	800feb4 <floor+0x44>
 800ff22:	2900      	cmp	r1, #0
 800ff24:	da02      	bge.n	800ff2c <floor+0xbc>
 800ff26:	2b14      	cmp	r3, #20
 800ff28:	d103      	bne.n	800ff32 <floor+0xc2>
 800ff2a:	3101      	adds	r1, #1
 800ff2c:	ea20 0002 	bic.w	r0, r0, r2
 800ff30:	e7c0      	b.n	800feb4 <floor+0x44>
 800ff32:	2401      	movs	r4, #1
 800ff34:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ff38:	fa04 f303 	lsl.w	r3, r4, r3
 800ff3c:	4418      	add	r0, r3
 800ff3e:	42a8      	cmp	r0, r5
 800ff40:	bf38      	it	cc
 800ff42:	1909      	addcc	r1, r1, r4
 800ff44:	e7f2      	b.n	800ff2c <floor+0xbc>
 800ff46:	2000      	movs	r0, #0
 800ff48:	4601      	mov	r1, r0
 800ff4a:	e7b3      	b.n	800feb4 <floor+0x44>
 800ff4c:	f3af 8000 	nop.w
 800ff50:	8800759c 	.word	0x8800759c
 800ff54:	7e37e43c 	.word	0x7e37e43c
 800ff58:	bff00000 	.word	0xbff00000
 800ff5c:	000fffff 	.word	0x000fffff

0800ff60 <matherr>:
 800ff60:	2000      	movs	r0, #0
 800ff62:	4770      	bx	lr
 800ff64:	0000      	movs	r0, r0
	...

0800ff68 <nan>:
 800ff68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff70 <nan+0x8>
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	00000000 	.word	0x00000000
 800ff74:	7ff80000 	.word	0x7ff80000

0800ff78 <rint>:
 800ff78:	b530      	push	{r4, r5, lr}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	ed8d 0b00 	vstr	d0, [sp]
 800ff80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff84:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800ff88:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800ff8c:	2813      	cmp	r0, #19
 800ff8e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800ff92:	dc5a      	bgt.n	801004a <rint+0xd2>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	da2f      	bge.n	800fff8 <rint+0x80>
 800ff98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff9c:	4311      	orrs	r1, r2
 800ff9e:	d027      	beq.n	800fff0 <rint+0x78>
 800ffa0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800ffa4:	4315      	orrs	r5, r2
 800ffa6:	426a      	negs	r2, r5
 800ffa8:	432a      	orrs	r2, r5
 800ffaa:	0b12      	lsrs	r2, r2, #12
 800ffac:	0c5b      	lsrs	r3, r3, #17
 800ffae:	045b      	lsls	r3, r3, #17
 800ffb0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800ffb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffb8:	ea42 0103 	orr.w	r1, r2, r3
 800ffbc:	4b31      	ldr	r3, [pc, #196]	; (8010084 <rint+0x10c>)
 800ffbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ffc2:	ed93 6b00 	vldr	d6, [r3]
 800ffc6:	ec41 0b17 	vmov	d7, r0, r1
 800ffca:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ffce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ffda:	ed8d 7b00 	vstr	d7, [sp]
 800ffde:	9b01      	ldr	r3, [sp, #4]
 800ffe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffe8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800ffec:	e9cd 0100 	strd	r0, r1, [sp]
 800fff0:	ed9d 0b00 	vldr	d0, [sp]
 800fff4:	b005      	add	sp, #20
 800fff6:	bd30      	pop	{r4, r5, pc}
 800fff8:	4923      	ldr	r1, [pc, #140]	; (8010088 <rint+0x110>)
 800fffa:	4101      	asrs	r1, r0
 800fffc:	ea03 0501 	and.w	r5, r3, r1
 8010000:	4315      	orrs	r5, r2
 8010002:	d0f5      	beq.n	800fff0 <rint+0x78>
 8010004:	0849      	lsrs	r1, r1, #1
 8010006:	ea03 0501 	and.w	r5, r3, r1
 801000a:	432a      	orrs	r2, r5
 801000c:	d00b      	beq.n	8010026 <rint+0xae>
 801000e:	ea23 0101 	bic.w	r1, r3, r1
 8010012:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010016:	2813      	cmp	r0, #19
 8010018:	fa43 f300 	asr.w	r3, r3, r0
 801001c:	bf0c      	ite	eq
 801001e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8010022:	2200      	movne	r2, #0
 8010024:	430b      	orrs	r3, r1
 8010026:	4619      	mov	r1, r3
 8010028:	4b16      	ldr	r3, [pc, #88]	; (8010084 <rint+0x10c>)
 801002a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801002e:	ed94 6b00 	vldr	d6, [r4]
 8010032:	4610      	mov	r0, r2
 8010034:	ec41 0b17 	vmov	d7, r0, r1
 8010038:	ee36 7b07 	vadd.f64	d7, d6, d7
 801003c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010044:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010048:	e008      	b.n	801005c <rint+0xe4>
 801004a:	2833      	cmp	r0, #51	; 0x33
 801004c:	dd09      	ble.n	8010062 <rint+0xea>
 801004e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010052:	d1cd      	bne.n	800fff0 <rint+0x78>
 8010054:	ed9d 7b00 	vldr	d7, [sp]
 8010058:	ee37 7b07 	vadd.f64	d7, d7, d7
 801005c:	ed8d 7b00 	vstr	d7, [sp]
 8010060:	e7c6      	b.n	800fff0 <rint+0x78>
 8010062:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 8010066:	f04f 31ff 	mov.w	r1, #4294967295
 801006a:	40c1      	lsrs	r1, r0
 801006c:	420a      	tst	r2, r1
 801006e:	d0bf      	beq.n	800fff0 <rint+0x78>
 8010070:	0849      	lsrs	r1, r1, #1
 8010072:	420a      	tst	r2, r1
 8010074:	bf1f      	itttt	ne
 8010076:	ea22 0101 	bicne.w	r1, r2, r1
 801007a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801007e:	4102      	asrne	r2, r0
 8010080:	430a      	orrne	r2, r1
 8010082:	e7d0      	b.n	8010026 <rint+0xae>
 8010084:	08015848 	.word	0x08015848
 8010088:	000fffff 	.word	0x000fffff
 801008c:	00000000 	.word	0x00000000

08010090 <scalbn>:
 8010090:	b500      	push	{lr}
 8010092:	ed2d 8b02 	vpush	{d8}
 8010096:	b083      	sub	sp, #12
 8010098:	ed8d 0b00 	vstr	d0, [sp]
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80100a2:	b9a2      	cbnz	r2, 80100ce <scalbn+0x3e>
 80100a4:	9a00      	ldr	r2, [sp, #0]
 80100a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80100aa:	4313      	orrs	r3, r2
 80100ac:	d03a      	beq.n	8010124 <scalbn+0x94>
 80100ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010168 <scalbn+0xd8>
 80100b2:	4b35      	ldr	r3, [pc, #212]	; (8010188 <scalbn+0xf8>)
 80100b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80100b8:	4298      	cmp	r0, r3
 80100ba:	ed8d 7b00 	vstr	d7, [sp]
 80100be:	da11      	bge.n	80100e4 <scalbn+0x54>
 80100c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8010170 <scalbn+0xe0>
 80100c4:	ed9d 6b00 	vldr	d6, [sp]
 80100c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100cc:	e007      	b.n	80100de <scalbn+0x4e>
 80100ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80100d2:	428a      	cmp	r2, r1
 80100d4:	d10a      	bne.n	80100ec <scalbn+0x5c>
 80100d6:	ed9d 7b00 	vldr	d7, [sp]
 80100da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80100de:	ed8d 7b00 	vstr	d7, [sp]
 80100e2:	e01f      	b.n	8010124 <scalbn+0x94>
 80100e4:	9b01      	ldr	r3, [sp, #4]
 80100e6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80100ea:	3a36      	subs	r2, #54	; 0x36
 80100ec:	4402      	add	r2, r0
 80100ee:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80100f2:	428a      	cmp	r2, r1
 80100f4:	dd0a      	ble.n	801010c <scalbn+0x7c>
 80100f6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8010178 <scalbn+0xe8>
 80100fa:	eeb0 0b48 	vmov.f64	d0, d8
 80100fe:	ed9d 1b00 	vldr	d1, [sp]
 8010102:	f000 f95f 	bl	80103c4 <copysign>
 8010106:	ee20 7b08 	vmul.f64	d7, d0, d8
 801010a:	e7e8      	b.n	80100de <scalbn+0x4e>
 801010c:	2a00      	cmp	r2, #0
 801010e:	dd10      	ble.n	8010132 <scalbn+0xa2>
 8010110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010114:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010118:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801011c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010120:	e9cd 0100 	strd	r0, r1, [sp]
 8010124:	ed9d 0b00 	vldr	d0, [sp]
 8010128:	b003      	add	sp, #12
 801012a:	ecbd 8b02 	vpop	{d8}
 801012e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010132:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010136:	da06      	bge.n	8010146 <scalbn+0xb6>
 8010138:	f24c 3350 	movw	r3, #50000	; 0xc350
 801013c:	4298      	cmp	r0, r3
 801013e:	dcda      	bgt.n	80100f6 <scalbn+0x66>
 8010140:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8010170 <scalbn+0xe0>
 8010144:	e7d9      	b.n	80100fa <scalbn+0x6a>
 8010146:	e9dd 0100 	ldrd	r0, r1, [sp]
 801014a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801014e:	3236      	adds	r2, #54	; 0x36
 8010150:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010154:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010158:	ec41 0b17 	vmov	d7, r0, r1
 801015c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010180 <scalbn+0xf0>
 8010160:	e7b2      	b.n	80100c8 <scalbn+0x38>
 8010162:	bf00      	nop
 8010164:	f3af 8000 	nop.w
 8010168:	00000000 	.word	0x00000000
 801016c:	43500000 	.word	0x43500000
 8010170:	c2f8f359 	.word	0xc2f8f359
 8010174:	01a56e1f 	.word	0x01a56e1f
 8010178:	8800759c 	.word	0x8800759c
 801017c:	7e37e43c 	.word	0x7e37e43c
 8010180:	00000000 	.word	0x00000000
 8010184:	3c900000 	.word	0x3c900000
 8010188:	ffff3cb0 	.word	0xffff3cb0
 801018c:	00000000 	.word	0x00000000

08010190 <__ieee754_log>:
 8010190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010192:	ed8d 0b00 	vstr	d0, [sp]
 8010196:	9a01      	ldr	r2, [sp, #4]
 8010198:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801019c:	da26      	bge.n	80101ec <__ieee754_log+0x5c>
 801019e:	9900      	ldr	r1, [sp, #0]
 80101a0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80101a4:	430b      	orrs	r3, r1
 80101a6:	d107      	bne.n	80101b8 <__ieee754_log+0x28>
 80101a8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8010358 <__ieee754_log+0x1c8>
 80101ac:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 8010360 <__ieee754_log+0x1d0>
 80101b0:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80101b4:	b003      	add	sp, #12
 80101b6:	bd30      	pop	{r4, r5, pc}
 80101b8:	2a00      	cmp	r2, #0
 80101ba:	da04      	bge.n	80101c6 <__ieee754_log+0x36>
 80101bc:	ed9d 7b00 	vldr	d7, [sp]
 80101c0:	ee37 6b47 	vsub.f64	d6, d7, d7
 80101c4:	e7f2      	b.n	80101ac <__ieee754_log+0x1c>
 80101c6:	ed9d 6b00 	vldr	d6, [sp]
 80101ca:	ed9f 7b67 	vldr	d7, [pc, #412]	; 8010368 <__ieee754_log+0x1d8>
 80101ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80101d2:	ed8d 7b00 	vstr	d7, [sp]
 80101d6:	9a01      	ldr	r2, [sp, #4]
 80101d8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80101dc:	4b78      	ldr	r3, [pc, #480]	; (80103c0 <__ieee754_log+0x230>)
 80101de:	429a      	cmp	r2, r3
 80101e0:	dd06      	ble.n	80101f0 <__ieee754_log+0x60>
 80101e2:	ed9d 7b00 	vldr	d7, [sp]
 80101e6:	ee37 0b07 	vadd.f64	d0, d7, d7
 80101ea:	e7e3      	b.n	80101b4 <__ieee754_log+0x24>
 80101ec:	2100      	movs	r1, #0
 80101ee:	e7f5      	b.n	80101dc <__ieee754_log+0x4c>
 80101f0:	1513      	asrs	r3, r2, #20
 80101f2:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80101f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80101fa:	4419      	add	r1, r3
 80101fc:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8010200:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010204:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8010208:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 801020c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010210:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010214:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8010218:	ea45 0300 	orr.w	r3, r5, r0
 801021c:	ec43 2b10 	vmov	d0, r2, r3
 8010220:	1c82      	adds	r2, r0, #2
 8010222:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010226:	2a02      	cmp	r2, #2
 8010228:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 801022c:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010230:	dc31      	bgt.n	8010296 <__ieee754_log+0x106>
 8010232:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023a:	d10f      	bne.n	801025c <__ieee754_log+0xcc>
 801023c:	2c00      	cmp	r4, #0
 801023e:	f000 8086 	beq.w	801034e <__ieee754_log+0x1be>
 8010242:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010370 <__ieee754_log+0x1e0>
 8010246:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8010378 <__ieee754_log+0x1e8>
 801024a:	ee07 4a90 	vmov	s15, r4
 801024e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010252:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010256:	eea7 0b06 	vfma.f64	d0, d7, d6
 801025a:	e7ab      	b.n	80101b4 <__ieee754_log+0x24>
 801025c:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8010380 <__ieee754_log+0x1f0>
 8010260:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010264:	eea0 6b47 	vfms.f64	d6, d0, d7
 8010268:	ee20 7b00 	vmul.f64	d7, d0, d0
 801026c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010270:	b914      	cbnz	r4, 8010278 <__ieee754_log+0xe8>
 8010272:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010276:	e79d      	b.n	80101b4 <__ieee754_log+0x24>
 8010278:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8010370 <__ieee754_log+0x1e0>
 801027c:	ee07 4a90 	vmov	s15, r4
 8010280:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010284:	eea7 6b45 	vfms.f64	d6, d7, d5
 8010288:	ee36 0b40 	vsub.f64	d0, d6, d0
 801028c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8010378 <__ieee754_log+0x1e8>
 8010290:	ee97 0b06 	vfnms.f64	d0, d7, d6
 8010294:	e78e      	b.n	80101b4 <__ieee754_log+0x24>
 8010296:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801029a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801029e:	ee80 4b07 	vdiv.f64	d4, d0, d7
 80102a2:	ee07 4a90 	vmov	s15, r4
 80102a6:	ee24 2b04 	vmul.f64	d2, d4, d4
 80102aa:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8010388 <__ieee754_log+0x1f8>
 80102ae:	ee22 5b02 	vmul.f64	d5, d2, d2
 80102b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80102b6:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8010390 <__ieee754_log+0x200>
 80102ba:	eea5 7b03 	vfma.f64	d7, d5, d3
 80102be:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8010398 <__ieee754_log+0x208>
 80102c2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80103a0 <__ieee754_log+0x210>
 80102c6:	eea7 3b05 	vfma.f64	d3, d7, d5
 80102ca:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80103a8 <__ieee754_log+0x218>
 80102ce:	eea5 7b01 	vfma.f64	d7, d5, d1
 80102d2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80103b0 <__ieee754_log+0x220>
 80102d6:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 80102da:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 80102de:	eea7 1b05 	vfma.f64	d1, d7, d5
 80102e2:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 80102e6:	ed9f 7b34 	vldr	d7, [pc, #208]	; 80103b8 <__ieee754_log+0x228>
 80102ea:	3251      	adds	r2, #81	; 0x51
 80102ec:	430a      	orrs	r2, r1
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80102f4:	ee27 7b02 	vmul.f64	d7, d7, d2
 80102f8:	eea3 7b05 	vfma.f64	d7, d3, d5
 80102fc:	dd1c      	ble.n	8010338 <__ieee754_log+0x1a8>
 80102fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010302:	ee20 5b05 	vmul.f64	d5, d0, d5
 8010306:	ee25 5b00 	vmul.f64	d5, d5, d0
 801030a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801030e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010312:	b924      	cbnz	r4, 801031e <__ieee754_log+0x18e>
 8010314:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010318:	ee30 0b47 	vsub.f64	d0, d0, d7
 801031c:	e74a      	b.n	80101b4 <__ieee754_log+0x24>
 801031e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8010370 <__ieee754_log+0x1e0>
 8010322:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010326:	ee35 7b47 	vsub.f64	d7, d5, d7
 801032a:	ee37 0b40 	vsub.f64	d0, d7, d0
 801032e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8010378 <__ieee754_log+0x1e8>
 8010332:	ee96 0b07 	vfnms.f64	d0, d6, d7
 8010336:	e73d      	b.n	80101b4 <__ieee754_log+0x24>
 8010338:	ee30 7b47 	vsub.f64	d7, d0, d7
 801033c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010340:	2c00      	cmp	r4, #0
 8010342:	d0e9      	beq.n	8010318 <__ieee754_log+0x188>
 8010344:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8010370 <__ieee754_log+0x1e0>
 8010348:	eea6 7b45 	vfms.f64	d7, d6, d5
 801034c:	e7ed      	b.n	801032a <__ieee754_log+0x19a>
 801034e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8010360 <__ieee754_log+0x1d0>
 8010352:	e72f      	b.n	80101b4 <__ieee754_log+0x24>
 8010354:	f3af 8000 	nop.w
 8010358:	00000000 	.word	0x00000000
 801035c:	c3500000 	.word	0xc3500000
	...
 801036c:	43500000 	.word	0x43500000
 8010370:	35793c76 	.word	0x35793c76
 8010374:	3dea39ef 	.word	0x3dea39ef
 8010378:	fee00000 	.word	0xfee00000
 801037c:	3fe62e42 	.word	0x3fe62e42
 8010380:	55555555 	.word	0x55555555
 8010384:	3fd55555 	.word	0x3fd55555
 8010388:	d078c69f 	.word	0xd078c69f
 801038c:	3fc39a09 	.word	0x3fc39a09
 8010390:	1d8e78af 	.word	0x1d8e78af
 8010394:	3fcc71c5 	.word	0x3fcc71c5
 8010398:	9997fa04 	.word	0x9997fa04
 801039c:	3fd99999 	.word	0x3fd99999
 80103a0:	df3e5244 	.word	0xdf3e5244
 80103a4:	3fc2f112 	.word	0x3fc2f112
 80103a8:	96cb03de 	.word	0x96cb03de
 80103ac:	3fc74664 	.word	0x3fc74664
 80103b0:	94229359 	.word	0x94229359
 80103b4:	3fd24924 	.word	0x3fd24924
 80103b8:	55555593 	.word	0x55555593
 80103bc:	3fe55555 	.word	0x3fe55555
 80103c0:	7fefffff 	.word	0x7fefffff

080103c4 <copysign>:
 80103c4:	ec51 0b10 	vmov	r0, r1, d0
 80103c8:	ee11 0a90 	vmov	r0, s3
 80103cc:	ee10 2a10 	vmov	r2, s0
 80103d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80103d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80103d8:	ea41 0300 	orr.w	r3, r1, r0
 80103dc:	ec43 2b10 	vmov	d0, r2, r3
 80103e0:	4770      	bx	lr
	...

080103e4 <_init>:
 80103e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e6:	bf00      	nop
 80103e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ea:	bc08      	pop	{r3}
 80103ec:	469e      	mov	lr, r3
 80103ee:	4770      	bx	lr

080103f0 <_fini>:
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	bf00      	nop
 80103f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f6:	bc08      	pop	{r3}
 80103f8:	469e      	mov	lr, r3
 80103fa:	4770      	bx	lr
